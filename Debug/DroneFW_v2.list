
DroneFW_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001787c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a00  08017a60  08017a60  00027a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018460  08018460  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08018460  08018460  00028460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018468  08018468  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018468  08018468  00028468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801846c  0801846c  0002846c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08018470  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008e3c  200001f0  08018660  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000902c  08018660  0003902c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a1c3  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005d20  00000000  00000000  0005a426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001db8  00000000  00000000  00060148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016ea  00000000  00000000  00061f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ab00  00000000  00000000  000635ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b748  00000000  00000000  0008e0ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee129  00000000  00000000  000b9832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009524  00000000  00000000  001a795c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001b0e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08017a44 	.word	0x08017a44

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	08017a44 	.word	0x08017a44

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_ldivmod>:
 8000cd8:	b97b      	cbnz	r3, 8000cfa <__aeabi_ldivmod+0x22>
 8000cda:	b972      	cbnz	r2, 8000cfa <__aeabi_ldivmod+0x22>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bfbe      	ittt	lt
 8000ce0:	2000      	movlt	r0, #0
 8000ce2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ce6:	e006      	blt.n	8000cf6 <__aeabi_ldivmod+0x1e>
 8000ce8:	bf08      	it	eq
 8000cea:	2800      	cmpeq	r0, #0
 8000cec:	bf1c      	itt	ne
 8000cee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cf2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf6:	f000 b9f1 	b.w	80010dc <__aeabi_idiv0>
 8000cfa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d02:	2900      	cmp	r1, #0
 8000d04:	db09      	blt.n	8000d1a <__aeabi_ldivmod+0x42>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db1a      	blt.n	8000d40 <__aeabi_ldivmod+0x68>
 8000d0a:	f000 f883 	bl	8000e14 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4770      	bx	lr
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db1b      	blt.n	8000d5c <__aeabi_ldivmod+0x84>
 8000d24:	f000 f876 	bl	8000e14 <__udivmoddi4>
 8000d28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d30:	b004      	add	sp, #16
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	4252      	negs	r2, r2
 8000d3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3e:	4770      	bx	lr
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	f000 f865 	bl	8000e14 <__udivmoddi4>
 8000d4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d52:	b004      	add	sp, #16
 8000d54:	4240      	negs	r0, r0
 8000d56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5a:	4770      	bx	lr
 8000d5c:	4252      	negs	r2, r2
 8000d5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d62:	f000 f857 	bl	8000e14 <__udivmoddi4>
 8000d66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6e:	b004      	add	sp, #16
 8000d70:	4252      	negs	r2, r2
 8000d72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_uldivmod>:
 8000d78:	b953      	cbnz	r3, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7a:	b94a      	cbnz	r2, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bf08      	it	eq
 8000d80:	2800      	cmpeq	r0, #0
 8000d82:	bf1c      	itt	ne
 8000d84:	f04f 31ff 	movne.w	r1, #4294967295
 8000d88:	f04f 30ff 	movne.w	r0, #4294967295
 8000d8c:	f000 b9a6 	b.w	80010dc <__aeabi_idiv0>
 8000d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d98:	f000 f83c 	bl	8000e14 <__udivmoddi4>
 8000d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da4:	b004      	add	sp, #16
 8000da6:	4770      	bx	lr

08000da8 <__aeabi_d2lz>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	2200      	movs	r2, #0
 8000dac:	2300      	movs	r3, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	460d      	mov	r5, r1
 8000db2:	f7ff febb 	bl	8000b2c <__aeabi_dcmplt>
 8000db6:	b928      	cbnz	r0, 8000dc4 <__aeabi_d2lz+0x1c>
 8000db8:	4620      	mov	r0, r4
 8000dba:	4629      	mov	r1, r5
 8000dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc0:	f000 b80a 	b.w	8000dd8 <__aeabi_d2ulz>
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dca:	f000 f805 	bl	8000dd8 <__aeabi_d2ulz>
 8000dce:	4240      	negs	r0, r0
 8000dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd4:	bd38      	pop	{r3, r4, r5, pc}
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_d2ulz>:
 8000dd8:	b5d0      	push	{r4, r6, r7, lr}
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__aeabi_d2ulz+0x34>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4606      	mov	r6, r0
 8000de0:	460f      	mov	r7, r1
 8000de2:	f7ff fc31 	bl	8000648 <__aeabi_dmul>
 8000de6:	f7ff ff07 	bl	8000bf8 <__aeabi_d2uiz>
 8000dea:	4604      	mov	r4, r0
 8000dec:	f7ff fbb2 	bl	8000554 <__aeabi_ui2d>
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <__aeabi_d2ulz+0x38>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f7ff fc28 	bl	8000648 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	4639      	mov	r1, r7
 8000e00:	f7ff fa6a 	bl	80002d8 <__aeabi_dsub>
 8000e04:	f7ff fef8 	bl	8000bf8 <__aeabi_d2uiz>
 8000e08:	4621      	mov	r1, r4
 8000e0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e0c:	3df00000 	.word	0x3df00000
 8000e10:	41f00000 	.word	0x41f00000

08000e14 <__udivmoddi4>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	9e08      	ldr	r6, [sp, #32]
 8000e1a:	460d      	mov	r5, r1
 8000e1c:	4604      	mov	r4, r0
 8000e1e:	460f      	mov	r7, r1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d14a      	bne.n	8000eba <__udivmoddi4+0xa6>
 8000e24:	428a      	cmp	r2, r1
 8000e26:	4694      	mov	ip, r2
 8000e28:	d965      	bls.n	8000ef6 <__udivmoddi4+0xe2>
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	b143      	cbz	r3, 8000e42 <__udivmoddi4+0x2e>
 8000e30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e34:	f1c3 0220 	rsb	r2, r3, #32
 8000e38:	409f      	lsls	r7, r3
 8000e3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3e:	4317      	orrs	r7, r2
 8000e40:	409c      	lsls	r4, r3
 8000e42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e46:	fa1f f58c 	uxth.w	r5, ip
 8000e4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e4e:	0c22      	lsrs	r2, r4, #16
 8000e50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e58:	fb01 f005 	mul.w	r0, r1, r5
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	d90a      	bls.n	8000e76 <__udivmoddi4+0x62>
 8000e60:	eb1c 0202 	adds.w	r2, ip, r2
 8000e64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e68:	f080 811c 	bcs.w	80010a4 <__udivmoddi4+0x290>
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	f240 8119 	bls.w	80010a4 <__udivmoddi4+0x290>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4462      	add	r2, ip
 8000e76:	1a12      	subs	r2, r2, r0
 8000e78:	b2a4      	uxth	r4, r4
 8000e7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e86:	fb00 f505 	mul.w	r5, r0, r5
 8000e8a:	42a5      	cmp	r5, r4
 8000e8c:	d90a      	bls.n	8000ea4 <__udivmoddi4+0x90>
 8000e8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e96:	f080 8107 	bcs.w	80010a8 <__udivmoddi4+0x294>
 8000e9a:	42a5      	cmp	r5, r4
 8000e9c:	f240 8104 	bls.w	80010a8 <__udivmoddi4+0x294>
 8000ea0:	4464      	add	r4, ip
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	2100      	movs	r1, #0
 8000eac:	b11e      	cbz	r6, 8000eb6 <__udivmoddi4+0xa2>
 8000eae:	40dc      	lsrs	r4, r3
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0xbc>
 8000ebe:	2e00      	cmp	r6, #0
 8000ec0:	f000 80ed 	beq.w	800109e <__udivmoddi4+0x28a>
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed0:	fab3 f183 	clz	r1, r3
 8000ed4:	2900      	cmp	r1, #0
 8000ed6:	d149      	bne.n	8000f6c <__udivmoddi4+0x158>
 8000ed8:	42ab      	cmp	r3, r5
 8000eda:	d302      	bcc.n	8000ee2 <__udivmoddi4+0xce>
 8000edc:	4282      	cmp	r2, r0
 8000ede:	f200 80f8 	bhi.w	80010d2 <__udivmoddi4+0x2be>
 8000ee2:	1a84      	subs	r4, r0, r2
 8000ee4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ee8:	2001      	movs	r0, #1
 8000eea:	4617      	mov	r7, r2
 8000eec:	2e00      	cmp	r6, #0
 8000eee:	d0e2      	beq.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ef4:	e7df      	b.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef6:	b902      	cbnz	r2, 8000efa <__udivmoddi4+0xe6>
 8000ef8:	deff      	udf	#255	; 0xff
 8000efa:	fab2 f382 	clz	r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f040 8090 	bne.w	8001024 <__udivmoddi4+0x210>
 8000f04:	1a8a      	subs	r2, r1, r2
 8000f06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f0a:	fa1f fe8c 	uxth.w	lr, ip
 8000f0e:	2101      	movs	r1, #1
 8000f10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f14:	fb07 2015 	mls	r0, r7, r5, r2
 8000f18:	0c22      	lsrs	r2, r4, #16
 8000f1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f1e:	fb0e f005 	mul.w	r0, lr, r5
 8000f22:	4290      	cmp	r0, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x124>
 8000f26:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x122>
 8000f30:	4290      	cmp	r0, r2
 8000f32:	f200 80cb 	bhi.w	80010cc <__udivmoddi4+0x2b8>
 8000f36:	4645      	mov	r5, r8
 8000f38:	1a12      	subs	r2, r2, r0
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f40:	fb07 2210 	mls	r2, r7, r0, r2
 8000f44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f48:	fb0e fe00 	mul.w	lr, lr, r0
 8000f4c:	45a6      	cmp	lr, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x14e>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f58:	d202      	bcs.n	8000f60 <__udivmoddi4+0x14c>
 8000f5a:	45a6      	cmp	lr, r4
 8000f5c:	f200 80bb 	bhi.w	80010d6 <__udivmoddi4+0x2c2>
 8000f60:	4610      	mov	r0, r2
 8000f62:	eba4 040e 	sub.w	r4, r4, lr
 8000f66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f6a:	e79f      	b.n	8000eac <__udivmoddi4+0x98>
 8000f6c:	f1c1 0720 	rsb	r7, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f82:	40fd      	lsrs	r5, r7
 8000f84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f88:	4323      	orrs	r3, r4
 8000f8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f8e:	fa1f fe8c 	uxth.w	lr, ip
 8000f92:	fb09 5518 	mls	r5, r9, r8, r5
 8000f96:	0c1c      	lsrs	r4, r3, #16
 8000f98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000fa0:	42a5      	cmp	r5, r4
 8000fa2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fa6:	fa00 f001 	lsl.w	r0, r0, r1
 8000faa:	d90b      	bls.n	8000fc4 <__udivmoddi4+0x1b0>
 8000fac:	eb1c 0404 	adds.w	r4, ip, r4
 8000fb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fb4:	f080 8088 	bcs.w	80010c8 <__udivmoddi4+0x2b4>
 8000fb8:	42a5      	cmp	r5, r4
 8000fba:	f240 8085 	bls.w	80010c8 <__udivmoddi4+0x2b4>
 8000fbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000fc2:	4464      	add	r4, ip
 8000fc4:	1b64      	subs	r4, r4, r5
 8000fc6:	b29d      	uxth	r5, r3
 8000fc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000fd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fd8:	45a6      	cmp	lr, r4
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x1da>
 8000fdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fe4:	d26c      	bcs.n	80010c0 <__udivmoddi4+0x2ac>
 8000fe6:	45a6      	cmp	lr, r4
 8000fe8:	d96a      	bls.n	80010c0 <__udivmoddi4+0x2ac>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	4464      	add	r4, ip
 8000fee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ff2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ff6:	eba4 040e 	sub.w	r4, r4, lr
 8000ffa:	42ac      	cmp	r4, r5
 8000ffc:	46c8      	mov	r8, r9
 8000ffe:	46ae      	mov	lr, r5
 8001000:	d356      	bcc.n	80010b0 <__udivmoddi4+0x29c>
 8001002:	d053      	beq.n	80010ac <__udivmoddi4+0x298>
 8001004:	b156      	cbz	r6, 800101c <__udivmoddi4+0x208>
 8001006:	ebb0 0208 	subs.w	r2, r0, r8
 800100a:	eb64 040e 	sbc.w	r4, r4, lr
 800100e:	fa04 f707 	lsl.w	r7, r4, r7
 8001012:	40ca      	lsrs	r2, r1
 8001014:	40cc      	lsrs	r4, r1
 8001016:	4317      	orrs	r7, r2
 8001018:	e9c6 7400 	strd	r7, r4, [r6]
 800101c:	4618      	mov	r0, r3
 800101e:	2100      	movs	r1, #0
 8001020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001024:	f1c3 0120 	rsb	r1, r3, #32
 8001028:	fa02 fc03 	lsl.w	ip, r2, r3
 800102c:	fa20 f201 	lsr.w	r2, r0, r1
 8001030:	fa25 f101 	lsr.w	r1, r5, r1
 8001034:	409d      	lsls	r5, r3
 8001036:	432a      	orrs	r2, r5
 8001038:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103c:	fa1f fe8c 	uxth.w	lr, ip
 8001040:	fbb1 f0f7 	udiv	r0, r1, r7
 8001044:	fb07 1510 	mls	r5, r7, r0, r1
 8001048:	0c11      	lsrs	r1, r2, #16
 800104a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800104e:	fb00 f50e 	mul.w	r5, r0, lr
 8001052:	428d      	cmp	r5, r1
 8001054:	fa04 f403 	lsl.w	r4, r4, r3
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x258>
 800105a:	eb1c 0101 	adds.w	r1, ip, r1
 800105e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001062:	d22f      	bcs.n	80010c4 <__udivmoddi4+0x2b0>
 8001064:	428d      	cmp	r5, r1
 8001066:	d92d      	bls.n	80010c4 <__udivmoddi4+0x2b0>
 8001068:	3802      	subs	r0, #2
 800106a:	4461      	add	r1, ip
 800106c:	1b49      	subs	r1, r1, r5
 800106e:	b292      	uxth	r2, r2
 8001070:	fbb1 f5f7 	udiv	r5, r1, r7
 8001074:	fb07 1115 	mls	r1, r7, r5, r1
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	fb05 f10e 	mul.w	r1, r5, lr
 8001080:	4291      	cmp	r1, r2
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x282>
 8001084:	eb1c 0202 	adds.w	r2, ip, r2
 8001088:	f105 38ff 	add.w	r8, r5, #4294967295
 800108c:	d216      	bcs.n	80010bc <__udivmoddi4+0x2a8>
 800108e:	4291      	cmp	r1, r2
 8001090:	d914      	bls.n	80010bc <__udivmoddi4+0x2a8>
 8001092:	3d02      	subs	r5, #2
 8001094:	4462      	add	r2, ip
 8001096:	1a52      	subs	r2, r2, r1
 8001098:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800109c:	e738      	b.n	8000f10 <__udivmoddi4+0xfc>
 800109e:	4631      	mov	r1, r6
 80010a0:	4630      	mov	r0, r6
 80010a2:	e708      	b.n	8000eb6 <__udivmoddi4+0xa2>
 80010a4:	4639      	mov	r1, r7
 80010a6:	e6e6      	b.n	8000e76 <__udivmoddi4+0x62>
 80010a8:	4610      	mov	r0, r2
 80010aa:	e6fb      	b.n	8000ea4 <__udivmoddi4+0x90>
 80010ac:	4548      	cmp	r0, r9
 80010ae:	d2a9      	bcs.n	8001004 <__udivmoddi4+0x1f0>
 80010b0:	ebb9 0802 	subs.w	r8, r9, r2
 80010b4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010b8:	3b01      	subs	r3, #1
 80010ba:	e7a3      	b.n	8001004 <__udivmoddi4+0x1f0>
 80010bc:	4645      	mov	r5, r8
 80010be:	e7ea      	b.n	8001096 <__udivmoddi4+0x282>
 80010c0:	462b      	mov	r3, r5
 80010c2:	e794      	b.n	8000fee <__udivmoddi4+0x1da>
 80010c4:	4640      	mov	r0, r8
 80010c6:	e7d1      	b.n	800106c <__udivmoddi4+0x258>
 80010c8:	46d0      	mov	r8, sl
 80010ca:	e77b      	b.n	8000fc4 <__udivmoddi4+0x1b0>
 80010cc:	3d02      	subs	r5, #2
 80010ce:	4462      	add	r2, ip
 80010d0:	e732      	b.n	8000f38 <__udivmoddi4+0x124>
 80010d2:	4608      	mov	r0, r1
 80010d4:	e70a      	b.n	8000eec <__udivmoddi4+0xd8>
 80010d6:	4464      	add	r4, ip
 80010d8:	3802      	subs	r0, #2
 80010da:	e742      	b.n	8000f62 <__udivmoddi4+0x14e>

080010dc <__aeabi_idiv0>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <PIDController_Init>:
#include "Controller/PID.h"
#include <stdint.h>

void PIDController_Init(PIDController *pid)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	// Clear Anti-windup flag
	pid->antiWindup = false;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// Clear controller variables
	pid->integrator = 0.0f;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
	pid->prevError  = 0.0f;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->differentiator  = 0.0f;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	631a      	str	r2, [r3, #48]	; 0x30
	pid->prevMeasurement = 0.0f;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	635a      	str	r2, [r3, #52]	; 0x34

	// Clear output
	pid->out = 0.0f;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	639a      	str	r2, [r3, #56]	; 0x38

	// Calculate low-pass filter parameters
	pid->tau = 5 * pid->T;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	edd3 7a03 	vldr	s15, [r3, #12]
 800111e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001122:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	edc3 7a05 	vstr	s15, [r3, #20]
	pid->alpha = ( 2*pid->T ) / ( 2*pid->tau + pid->T );
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001132:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	edd3 7a05 	vldr	s15, [r3, #20]
 800113c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	edd3 7a03 	vldr	s15, [r3, #12]
 8001146:	ee37 7a27 	vadd.f32	s14, s14, s15
 800114a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	edc3 7a06 	vstr	s15, [r3, #24]

	// Reset lastTick
	pid->lastTick = 0;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float reference, float measurement)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	ed87 0a02 	vstr	s0, [r7, #8]
 8001174:	edc7 0a01 	vstr	s1, [r7, #4]
	// Check if enough time has passed for the T sample time
	bool run = false;
 8001178:	2300      	movs	r3, #0
 800117a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t currentTick = xTaskGetTickCount();
 800117e:	f00f f9a1 	bl	80104c4 <xTaskGetTickCount>
 8001182:	4603      	mov	r3, r0
 8001184:	623b      	str	r3, [r7, #32]
	// First run after initialization
	if (pid->lastTick == 0)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d106      	bne.n	800119c <PIDController_Update+0x34>
	{
		run = true;
 800118e:	2301      	movs	r3, #1
 8001190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pid->lastTick = currentTick;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6a3a      	ldr	r2, [r7, #32]
 8001198:	611a      	str	r2, [r3, #16]
 800119a:	e01a      	b.n	80011d2 <PIDController_Update+0x6a>
	}
	// If enough time has passed (Tick's unit is ms, while T's unit is s)
	else if (currentTick - pid->lastTick >= (pid->T * 1000))
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	6a3a      	ldr	r2, [r7, #32]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80011b2:	eddf 6a73 	vldr	s13, [pc, #460]	; 8001380 <PIDController_Update+0x218>
 80011b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c2:	db03      	blt.n	80011cc <PIDController_Update+0x64>
		run = true;
 80011c4:	2301      	movs	r3, #1
 80011c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011ca:	e002      	b.n	80011d2 <PIDController_Update+0x6a>
	// If it is too early
	else
		run = false;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	pid->lastTick = currentTick;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6a3a      	ldr	r2, [r7, #32]
 80011d6:	611a      	str	r2, [r3, #16]

	// PID algorithm
	if (run)
 80011d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 80ca 	beq.w	8001376 <PIDController_Update+0x20e>
	{
		//Error signal
		float error = reference - measurement;
 80011e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80011e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ee:	edc7 7a07 	vstr	s15, [r7, #28]

		// Proportional
		float proportional = pid->Kp * error;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80011fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001200:	edc7 7a06 	vstr	s15, [r7, #24]

		// Integral with Anti-windup
		if (!pid->antiWindup)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800120a:	f083 0301 	eor.w	r3, r3, #1
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d01c      	beq.n	800124e <PIDController_Update+0xe6>
			pid->integrator = pid->integrator + ( pid->Ki * (pid->T / 2) * (error + pid->prevError) );
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	ed93 6a03 	vldr	s12, [r3, #12]
 8001226:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800122a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800122e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001238:	edd7 7a07 	vldr	s15, [r7, #28]
 800123c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

		// Derivative with low-pass filter
		//pid->differentiator = (1 - pid->alpha) * pid->differentiator
		//		+ pid->alpha *  (pid->Kd * (error - pid->prevError) / pid->T);
		// Derivative on measurement with low-pass filter and sign inversion
		pid->differentiator = -((1 - pid->alpha) * pid->differentiator
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	edd3 7a06 	vldr	s15, [r3, #24]
 8001254:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001258:	ee37 7a67 	vsub.f32	s14, s14, s15
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001262:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ pid->alpha *  (pid->Kd * (measurement - pid->prevMeasurement) / pid->T));
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	edd3 6a06 	vldr	s13, [r3, #24]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	ed93 6a02 	vldr	s12, [r3, #8]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001278:	edd7 5a01 	vldr	s11, [r7, #4]
 800127c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001280:	ee66 5a27 	vmul.f32	s11, s12, s15
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	ed93 6a03 	vldr	s12, [r3, #12]
 800128a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800128e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001292:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->differentiator = -((1 - pid->alpha) * pid->differentiator
 8001296:	eef1 7a67 	vneg.f32	s15, s15
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		// Compute output
		pid->out = proportional + pid->integrator + pid->differentiator;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80012a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80012aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80012b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		float preSaturationOutput = pid->out;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c2:	617b      	str	r3, [r7, #20]

		// Saturating (clamping) the output
		if (pid->out > pid->limMax)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	edd3 7a08 	vldr	s15, [r3, #32]
 80012d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d8:	dd04      	ble.n	80012e4 <PIDController_Update+0x17c>
			pid->out = pid->limMax;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6a1a      	ldr	r2, [r3, #32]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	639a      	str	r2, [r3, #56]	; 0x38
 80012e2:	e00e      	b.n	8001302 <PIDController_Update+0x19a>
		else if (pid->out < pid->limMin)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f8:	d503      	bpl.n	8001302 <PIDController_Update+0x19a>
			pid->out = pid->limMin;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	69da      	ldr	r2, [r3, #28]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	639a      	str	r2, [r3, #56]	; 0x38

		// Anti-windup zcheck
		// If clamping had an effect...
		if (preSaturationOutput != pid->out
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001308:	ed97 7a05 	vldr	s14, [r7, #20]
 800130c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001314:	d020      	beq.n	8001358 <PIDController_Update+0x1f0>
				// ...and if the integrator is trying to make saturation worse
				&& ((preSaturationOutput > 0 && error > 0) || (preSaturationOutput < 0 && error < 0)))
 8001316:	edd7 7a05 	vldr	s15, [r7, #20]
 800131a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800131e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001322:	dd06      	ble.n	8001332 <PIDController_Update+0x1ca>
 8001324:	edd7 7a07 	vldr	s15, [r7, #28]
 8001328:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001330:	dc0d      	bgt.n	800134e <PIDController_Update+0x1e6>
 8001332:	edd7 7a05 	vldr	s15, [r7, #20]
 8001336:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133e:	d50b      	bpl.n	8001358 <PIDController_Update+0x1f0>
 8001340:	edd7 7a07 	vldr	s15, [r7, #28]
 8001344:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134c:	d504      	bpl.n	8001358 <PIDController_Update+0x1f0>
		{
			pid->antiWindup = true;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001356:	e003      	b.n	8001360 <PIDController_Update+0x1f8>

		}
		else
			pid->antiWindup = false;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		// Store error for later use
		pid->prevError = error;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	62da      	str	r2, [r3, #44]	; 0x2c
		pid->prevMeasurement = measurement;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	635a      	str	r2, [r3, #52]	; 0x34

		return 0;
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	ee07 3a90 	vmov	s15, r3
 8001374:	e7ff      	b.n	8001376 <PIDController_Update+0x20e>
	}
}
 8001376:	eeb0 0a67 	vmov.f32	s0, s15
 800137a:	3728      	adds	r7, #40	; 0x28
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	447a0000 	.word	0x447a0000

08001384 <Log>:
#include "string.h"

extern UART_HandleTypeDef huart3;

void Log(const char* msg)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b09c      	sub	sp, #112	; 0x70
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	if (DebugIsOn)
 800138c:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <Log+0x44>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d014      	beq.n	80013be <Log+0x3a>
	{
		char str[100];

		sprintf(str, "%s\r\n", msg);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	490c      	ldr	r1, [pc, #48]	; (80013cc <Log+0x48>)
 800139c:	4618      	mov	r0, r3
 800139e:	f011 f945 	bl	801262c <siprintf>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7fe ff8a 	bl	80002c0 <strlen>
 80013ac:	4603      	mov	r3, r0
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	f107 010c 	add.w	r1, r7, #12
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <Log+0x4c>)
 80013ba:	f00b ffb7 	bl	800d32c <HAL_UART_Transmit>
	}
}
 80013be:	bf00      	nop
 80013c0:	3770      	adds	r7, #112	; 0x70
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2000020d 	.word	0x2000020d
 80013cc:	08017a60 	.word	0x08017a60
 80013d0:	20000c14 	.word	0x20000c14

080013d4 <FloatToUint8s>:

volatile uint8_t Spi1Buffer[64] = { 0 };
volatile uint8_t Spi1ReceivedData[64] = { 0 };

void FloatToUint8s(float* src, uint8_t* array, int position)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
	memcpy(array+position, src, sizeof(float));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	4413      	add	r3, r2
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	6812      	ldr	r2, [r2, #0]
 80013ea:	601a      	str	r2, [r3, #0]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <FloatFromUint8s>:

void FloatFromUint8s(uint8_t* array, int position, float* dest)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  memcpy(dest, array+position, sizeof(float));
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	4413      	add	r3, r2
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	601a      	str	r2, [r3, #0]
}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <Uint16ToUint8s>:

void Uint16ToUint8s(uint16_t* src, uint8_t* array, int position)
{
 800141e:	b480      	push	{r7}
 8001420:	b085      	sub	sp, #20
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
	memcpy(array+position, src, sizeof(uint16_t));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68ba      	ldr	r2, [r7, #8]
 800142e:	4413      	add	r3, r2
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	8812      	ldrh	r2, [r2, #0]
 8001434:	b292      	uxth	r2, r2
 8001436:	801a      	strh	r2, [r3, #0]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <Int16ToUint8s>:

void Int16ToUint8s(int16_t* src, uint8_t* array, int position)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
	memcpy(array+position, src, sizeof(int16_t));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	4413      	add	r3, r2
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	8812      	ldrh	r2, [r2, #0]
 800145a:	b292      	uxth	r2, r2
 800145c:	801a      	strh	r2, [r3, #0]
}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <TaskController>:
extern osMutexId ImuMutexHandle;
extern osMutexId RemoteDataMutexHandle;
extern osMutexId ControllerMutexHandle;

void TaskController(void const *argument)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 8001474:	23c8      	movs	r3, #200	; 0xc8
 8001476:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8001478:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	613b      	str	r3, [r7, #16]


	// Roll
	PID_Roll_Attitude.Kp = 1.92;
 8001484:	4b97      	ldr	r3, [pc, #604]	; (80016e4 <TaskController+0x278>)
 8001486:	4a98      	ldr	r2, [pc, #608]	; (80016e8 <TaskController+0x27c>)
 8001488:	601a      	str	r2, [r3, #0]
	PID_Roll_Attitude.Ki = 0;
 800148a:	4b96      	ldr	r3, [pc, #600]	; (80016e4 <TaskController+0x278>)
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	605a      	str	r2, [r3, #4]
	PID_Roll_Attitude.Kd = 0.0648;
 8001492:	4b94      	ldr	r3, [pc, #592]	; (80016e4 <TaskController+0x278>)
 8001494:	4a95      	ldr	r2, [pc, #596]	; (80016ec <TaskController+0x280>)
 8001496:	609a      	str	r2, [r3, #8]
	PID_Roll_Attitude.T = 0.005;
 8001498:	4b92      	ldr	r3, [pc, #584]	; (80016e4 <TaskController+0x278>)
 800149a:	4a95      	ldr	r2, [pc, #596]	; (80016f0 <TaskController+0x284>)
 800149c:	60da      	str	r2, [r3, #12]
	PID_Roll_Attitude.limMin = -50; // deg/s
 800149e:	4b91      	ldr	r3, [pc, #580]	; (80016e4 <TaskController+0x278>)
 80014a0:	4a94      	ldr	r2, [pc, #592]	; (80016f4 <TaskController+0x288>)
 80014a2:	61da      	str	r2, [r3, #28]
	PID_Roll_Attitude.limMax = 50; // deg/s
 80014a4:	4b8f      	ldr	r3, [pc, #572]	; (80016e4 <TaskController+0x278>)
 80014a6:	4a94      	ldr	r2, [pc, #592]	; (80016f8 <TaskController+0x28c>)
 80014a8:	621a      	str	r2, [r3, #32]
	PIDController_Init(&PID_Roll_Attitude);
 80014aa:	488e      	ldr	r0, [pc, #568]	; (80016e4 <TaskController+0x278>)
 80014ac:	f7ff fe18 	bl	80010e0 <PIDController_Init>

	PID_Roll_AngVel.Kp = 2.0;
 80014b0:	4b92      	ldr	r3, [pc, #584]	; (80016fc <TaskController+0x290>)
 80014b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014b6:	601a      	str	r2, [r3, #0]
	PID_Roll_AngVel.Ki = 0;
 80014b8:	4b90      	ldr	r3, [pc, #576]	; (80016fc <TaskController+0x290>)
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	605a      	str	r2, [r3, #4]
	PID_Roll_AngVel.Kd = 0.1;
 80014c0:	4b8e      	ldr	r3, [pc, #568]	; (80016fc <TaskController+0x290>)
 80014c2:	4a8f      	ldr	r2, [pc, #572]	; (8001700 <TaskController+0x294>)
 80014c4:	609a      	str	r2, [r3, #8]
	PID_Roll_AngVel.T = 0.005;
 80014c6:	4b8d      	ldr	r3, [pc, #564]	; (80016fc <TaskController+0x290>)
 80014c8:	4a89      	ldr	r2, [pc, #548]	; (80016f0 <TaskController+0x284>)
 80014ca:	60da      	str	r2, [r3, #12]
	PID_Roll_AngVel.limMin = -500; // Motor control unit
 80014cc:	4b8b      	ldr	r3, [pc, #556]	; (80016fc <TaskController+0x290>)
 80014ce:	4a8d      	ldr	r2, [pc, #564]	; (8001704 <TaskController+0x298>)
 80014d0:	61da      	str	r2, [r3, #28]
	PID_Roll_AngVel.limMax = 500; // Motor control unit
 80014d2:	4b8a      	ldr	r3, [pc, #552]	; (80016fc <TaskController+0x290>)
 80014d4:	4a8c      	ldr	r2, [pc, #560]	; (8001708 <TaskController+0x29c>)
 80014d6:	621a      	str	r2, [r3, #32]
	PIDController_Init(&PID_Roll_AngVel);
 80014d8:	4888      	ldr	r0, [pc, #544]	; (80016fc <TaskController+0x290>)
 80014da:	f7ff fe01 	bl	80010e0 <PIDController_Init>

	// Pitch
	PID_Pitch_Attitude.Kp = 0;
 80014de:	4b8b      	ldr	r3, [pc, #556]	; (800170c <TaskController+0x2a0>)
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
	PID_Pitch_Attitude.Ki = 0;
 80014e6:	4b89      	ldr	r3, [pc, #548]	; (800170c <TaskController+0x2a0>)
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	605a      	str	r2, [r3, #4]
	PID_Pitch_Attitude.Kd = 0;
 80014ee:	4b87      	ldr	r3, [pc, #540]	; (800170c <TaskController+0x2a0>)
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
	PID_Pitch_Attitude.T = 0.005;
 80014f6:	4b85      	ldr	r3, [pc, #532]	; (800170c <TaskController+0x2a0>)
 80014f8:	4a7d      	ldr	r2, [pc, #500]	; (80016f0 <TaskController+0x284>)
 80014fa:	60da      	str	r2, [r3, #12]
	PID_Pitch_Attitude.limMin = -50; // deg/s
 80014fc:	4b83      	ldr	r3, [pc, #524]	; (800170c <TaskController+0x2a0>)
 80014fe:	4a7d      	ldr	r2, [pc, #500]	; (80016f4 <TaskController+0x288>)
 8001500:	61da      	str	r2, [r3, #28]
	PID_Pitch_Attitude.limMax = 50; // deg/s
 8001502:	4b82      	ldr	r3, [pc, #520]	; (800170c <TaskController+0x2a0>)
 8001504:	4a7c      	ldr	r2, [pc, #496]	; (80016f8 <TaskController+0x28c>)
 8001506:	621a      	str	r2, [r3, #32]
	PIDController_Init(&PID_Pitch_Attitude);
 8001508:	4880      	ldr	r0, [pc, #512]	; (800170c <TaskController+0x2a0>)
 800150a:	f7ff fde9 	bl	80010e0 <PIDController_Init>

	PID_Pitch_AngVel.Kp = 0;
 800150e:	4b80      	ldr	r3, [pc, #512]	; (8001710 <TaskController+0x2a4>)
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
	PID_Pitch_AngVel.Ki = 0;
 8001516:	4b7e      	ldr	r3, [pc, #504]	; (8001710 <TaskController+0x2a4>)
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	605a      	str	r2, [r3, #4]
	PID_Pitch_AngVel.Kd = 0;
 800151e:	4b7c      	ldr	r3, [pc, #496]	; (8001710 <TaskController+0x2a4>)
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
	PID_Pitch_AngVel.T = 0.005;
 8001526:	4b7a      	ldr	r3, [pc, #488]	; (8001710 <TaskController+0x2a4>)
 8001528:	4a71      	ldr	r2, [pc, #452]	; (80016f0 <TaskController+0x284>)
 800152a:	60da      	str	r2, [r3, #12]
	PID_Pitch_AngVel.limMin = -500; // Motor control unit
 800152c:	4b78      	ldr	r3, [pc, #480]	; (8001710 <TaskController+0x2a4>)
 800152e:	4a75      	ldr	r2, [pc, #468]	; (8001704 <TaskController+0x298>)
 8001530:	61da      	str	r2, [r3, #28]
	PID_Pitch_AngVel.limMax = 500; // Motor control unit
 8001532:	4b77      	ldr	r3, [pc, #476]	; (8001710 <TaskController+0x2a4>)
 8001534:	4a74      	ldr	r2, [pc, #464]	; (8001708 <TaskController+0x29c>)
 8001536:	621a      	str	r2, [r3, #32]
	PIDController_Init(&PID_Pitch_AngVel);
 8001538:	4875      	ldr	r0, [pc, #468]	; (8001710 <TaskController+0x2a4>)
 800153a:	f7ff fdd1 	bl	80010e0 <PIDController_Init>


	xLastWakeTime = xTaskGetTickCount();
 800153e:	f00e ffc1 	bl	80104c4 <xTaskGetTickCount>
 8001542:	4603      	mov	r3, r0
 8001544:	60bb      	str	r3, [r7, #8]
	// Infinite loop
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	6939      	ldr	r1, [r7, #16]
 800154c:	4618      	mov	r0, r3
 800154e:	f00e fde5 	bl	801011c <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8001552:	f00e ffb7 	bl	80104c4 <xTaskGetTickCount>
 8001556:	60f8      	str	r0, [r7, #12]

		if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK
 8001558:	4b6e      	ldr	r3, [pc, #440]	; (8001714 <TaskController+0x2a8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	4618      	mov	r0, r3
 8001562:	f00d fc17 	bl	800ed94 <osMutexWait>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	f040 8146 	bne.w	80017fa <TaskController+0x38e>
				&& osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK
 800156e:	4b6a      	ldr	r3, [pc, #424]	; (8001718 <TaskController+0x2ac>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f04f 31ff 	mov.w	r1, #4294967295
 8001576:	4618      	mov	r0, r3
 8001578:	f00d fc0c 	bl	800ed94 <osMutexWait>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	f040 813b 	bne.w	80017fa <TaskController+0x38e>
				&& osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 8001584:	4b65      	ldr	r3, [pc, #404]	; (800171c <TaskController+0x2b0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	4618      	mov	r0, r3
 800158e:	f00d fc01 	bl	800ed94 <osMutexWait>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	f040 8130 	bne.w	80017fa <TaskController+0x38e>
		{
			if (SWC > 490)
 800159a:	4b61      	ldr	r3, [pc, #388]	; (8001720 <TaskController+0x2b4>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 80015a2:	d90f      	bls.n	80015c4 <TaskController+0x158>
			{
				PID_Roll_Attitude.integrator = 0;
 80015a4:	4b4f      	ldr	r3, [pc, #316]	; (80016e4 <TaskController+0x278>)
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	629a      	str	r2, [r3, #40]	; 0x28
				PID_Roll_AngVel.integrator = 0;
 80015ac:	4b53      	ldr	r3, [pc, #332]	; (80016fc <TaskController+0x290>)
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
				PID_Pitch_Attitude.integrator = 0;
 80015b4:	4b55      	ldr	r3, [pc, #340]	; (800170c <TaskController+0x2a0>)
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
				PID_Pitch_AngVel.integrator = 0;
 80015bc:	4b54      	ldr	r3, [pc, #336]	; (8001710 <TaskController+0x2a4>)
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
			}

			if (Tune_single_true_double_false)
 80015c4:	4b57      	ldr	r3, [pc, #348]	; (8001724 <TaskController+0x2b8>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80bf 	beq.w	800174c <TaskController+0x2e0>
			{
				// Roll
				PID_Roll_AngVel.Kp = VRA / 100.0; // 0-10
 80015ce:	4b56      	ldr	r3, [pc, #344]	; (8001728 <TaskController+0x2bc>)
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ffce 	bl	8000574 <__aeabi_i2d>
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	4b53      	ldr	r3, [pc, #332]	; (800172c <TaskController+0x2c0>)
 80015de:	f7ff f95d 	bl	800089c <__aeabi_ddiv>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff fb25 	bl	8000c38 <__aeabi_d2f>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4a42      	ldr	r2, [pc, #264]	; (80016fc <TaskController+0x290>)
 80015f2:	6013      	str	r3, [r2, #0]
				PID_Roll_AngVel.Kd = VRB / 1000.0; // 0-1
 80015f4:	4b4e      	ldr	r3, [pc, #312]	; (8001730 <TaskController+0x2c4>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ffbb 	bl	8000574 <__aeabi_i2d>
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	4b4c      	ldr	r3, [pc, #304]	; (8001734 <TaskController+0x2c8>)
 8001604:	f7ff f94a 	bl	800089c <__aeabi_ddiv>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f7ff fb12 	bl	8000c38 <__aeabi_d2f>
 8001614:	4603      	mov	r3, r0
 8001616:	4a39      	ldr	r2, [pc, #228]	; (80016fc <TaskController+0x290>)
 8001618:	6093      	str	r3, [r2, #8]

				PIDController_Update(&PID_Roll_AngVel, (Roll_in / 10.0f), GyroData[0]);
 800161a:	4b47      	ldr	r3, [pc, #284]	; (8001738 <TaskController+0x2cc>)
 800161c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001620:	ee07 3a90 	vmov	s15, r3
 8001624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001628:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800162c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001630:	4b42      	ldr	r3, [pc, #264]	; (800173c <TaskController+0x2d0>)
 8001632:	edd3 7a00 	vldr	s15, [r3]
 8001636:	eef0 0a67 	vmov.f32	s1, s15
 800163a:	eeb0 0a47 	vmov.f32	s0, s14
 800163e:	482f      	ldr	r0, [pc, #188]	; (80016fc <TaskController+0x290>)
 8001640:	f7ff fd92 	bl	8001168 <PIDController_Update>
				Roll_controlled = (int16_t)(PID_Roll_AngVel.out);
 8001644:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <TaskController+0x290>)
 8001646:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800164a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800164e:	ee17 3a90 	vmov	r3, s15
 8001652:	b21a      	sxth	r2, r3
 8001654:	4b3a      	ldr	r3, [pc, #232]	; (8001740 <TaskController+0x2d4>)
 8001656:	801a      	strh	r2, [r3, #0]

				// Pitch
				PID_Pitch_AngVel.Kp = VRA / 100.0; // 0-10
 8001658:	4b33      	ldr	r3, [pc, #204]	; (8001728 <TaskController+0x2bc>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff89 	bl	8000574 <__aeabi_i2d>
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	4b31      	ldr	r3, [pc, #196]	; (800172c <TaskController+0x2c0>)
 8001668:	f7ff f918 	bl	800089c <__aeabi_ddiv>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f7ff fae0 	bl	8000c38 <__aeabi_d2f>
 8001678:	4603      	mov	r3, r0
 800167a:	4a25      	ldr	r2, [pc, #148]	; (8001710 <TaskController+0x2a4>)
 800167c:	6013      	str	r3, [r2, #0]
				PID_Pitch_AngVel.Kd = VRB / 1000.0; // 0-1
 800167e:	4b2c      	ldr	r3, [pc, #176]	; (8001730 <TaskController+0x2c4>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff76 	bl	8000574 <__aeabi_i2d>
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	4b29      	ldr	r3, [pc, #164]	; (8001734 <TaskController+0x2c8>)
 800168e:	f7ff f905 	bl	800089c <__aeabi_ddiv>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	f7ff facd 	bl	8000c38 <__aeabi_d2f>
 800169e:	4603      	mov	r3, r0
 80016a0:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <TaskController+0x2a4>)
 80016a2:	6093      	str	r3, [r2, #8]

				PIDController_Update(&PID_Pitch_AngVel, (Pitch_in / 10.0f), GyroData[1]);
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <TaskController+0x2d8>)
 80016a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016aa:	ee07 3a90 	vmov	s15, r3
 80016ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80016b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <TaskController+0x2d0>)
 80016bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80016c0:	eef0 0a67 	vmov.f32	s1, s15
 80016c4:	eeb0 0a47 	vmov.f32	s0, s14
 80016c8:	4811      	ldr	r0, [pc, #68]	; (8001710 <TaskController+0x2a4>)
 80016ca:	f7ff fd4d 	bl	8001168 <PIDController_Update>
				Pitch_controlled = (int16_t)(PID_Pitch_AngVel.out);
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <TaskController+0x2a4>)
 80016d0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80016d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d8:	ee17 3a90 	vmov	r3, s15
 80016dc:	b21a      	sxth	r2, r3
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <TaskController+0x2dc>)
 80016e0:	801a      	strh	r2, [r3, #0]
 80016e2:	e08a      	b.n	80017fa <TaskController+0x38e>
 80016e4:	20000218 	.word	0x20000218
 80016e8:	3ff5c28f 	.word	0x3ff5c28f
 80016ec:	3d84b5dd 	.word	0x3d84b5dd
 80016f0:	3ba3d70a 	.word	0x3ba3d70a
 80016f4:	c2480000 	.word	0xc2480000
 80016f8:	42480000 	.word	0x42480000
 80016fc:	20000254 	.word	0x20000254
 8001700:	3dcccccd 	.word	0x3dcccccd
 8001704:	c3fa0000 	.word	0xc3fa0000
 8001708:	43fa0000 	.word	0x43fa0000
 800170c:	20000290 	.word	0x20000290
 8001710:	200002cc 	.word	0x200002cc
 8001714:	20000d30 	.word	0x20000d30
 8001718:	20000d1c 	.word	0x20000d1c
 800171c:	20000d20 	.word	0x20000d20
 8001720:	20000318 	.word	0x20000318
 8001724:	2000020e 	.word	0x2000020e
 8001728:	2000031c 	.word	0x2000031c
 800172c:	40590000 	.word	0x40590000
 8001730:	2000031e 	.word	0x2000031e
 8001734:	408f4000 	.word	0x408f4000
 8001738:	2000030a 	.word	0x2000030a
 800173c:	200003a4 	.word	0x200003a4
 8001740:	2000030c 	.word	0x2000030c
 8001744:	2000030e 	.word	0x2000030e
 8001748:	20000310 	.word	0x20000310
				// Roll
				//PID_Roll_Attitude.Kp = VRA / 100.0; // 0-1
				//PID_Roll_Attitude.Kd = VRB / 1000.0; // 0-1

				//PIDController_Update(&PID_Roll_Attitude, (Roll_in / 25.0f), Roll_measured);
				PIDController_Update(&PID_Roll_Attitude, (SWD / 50.0f), Roll_measured);
 800174c:	4b33      	ldr	r3, [pc, #204]	; (800181c <TaskController+0x3b0>)
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	ee07 3a90 	vmov	s15, r3
 8001754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001758:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001820 <TaskController+0x3b4>
 800175c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001760:	4b30      	ldr	r3, [pc, #192]	; (8001824 <TaskController+0x3b8>)
 8001762:	edd3 7a00 	vldr	s15, [r3]
 8001766:	eef0 0a67 	vmov.f32	s1, s15
 800176a:	eeb0 0a47 	vmov.f32	s0, s14
 800176e:	482e      	ldr	r0, [pc, #184]	; (8001828 <TaskController+0x3bc>)
 8001770:	f7ff fcfa 	bl	8001168 <PIDController_Update>
				PIDController_Update(&PID_Roll_AngVel, PID_Roll_Attitude.out, GyroData[0]);
 8001774:	4b2c      	ldr	r3, [pc, #176]	; (8001828 <TaskController+0x3bc>)
 8001776:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800177a:	4b2c      	ldr	r3, [pc, #176]	; (800182c <TaskController+0x3c0>)
 800177c:	ed93 7a00 	vldr	s14, [r3]
 8001780:	eef0 0a47 	vmov.f32	s1, s14
 8001784:	eeb0 0a67 	vmov.f32	s0, s15
 8001788:	4829      	ldr	r0, [pc, #164]	; (8001830 <TaskController+0x3c4>)
 800178a:	f7ff fced 	bl	8001168 <PIDController_Update>
				Roll_controlled = (int16_t)(PID_Roll_AngVel.out);
 800178e:	4b28      	ldr	r3, [pc, #160]	; (8001830 <TaskController+0x3c4>)
 8001790:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001798:	ee17 3a90 	vmov	r3, s15
 800179c:	b21a      	sxth	r2, r3
 800179e:	4b25      	ldr	r3, [pc, #148]	; (8001834 <TaskController+0x3c8>)
 80017a0:	801a      	strh	r2, [r3, #0]

				// Pitch
				//PID_Pitch_Attitude.Kp = VRA / 100.0; // 0-1
				//PID_Pitch_Attitude.Kd = VRB / 1000.0; // 0-1

				PIDController_Update(&PID_Pitch_Attitude, (Pitch_in / 25.0f), Pitch_measured);
 80017a2:	4b25      	ldr	r3, [pc, #148]	; (8001838 <TaskController+0x3cc>)
 80017a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b0:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80017b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017b8:	4b20      	ldr	r3, [pc, #128]	; (800183c <TaskController+0x3d0>)
 80017ba:	edd3 7a00 	vldr	s15, [r3]
 80017be:	eef0 0a67 	vmov.f32	s1, s15
 80017c2:	eeb0 0a47 	vmov.f32	s0, s14
 80017c6:	481e      	ldr	r0, [pc, #120]	; (8001840 <TaskController+0x3d4>)
 80017c8:	f7ff fcce 	bl	8001168 <PIDController_Update>
				PIDController_Update(&PID_Pitch_AngVel, PID_Pitch_Attitude.out, GyroData[1]);
 80017cc:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <TaskController+0x3d4>)
 80017ce:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <TaskController+0x3c0>)
 80017d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80017d8:	eef0 0a47 	vmov.f32	s1, s14
 80017dc:	eeb0 0a67 	vmov.f32	s0, s15
 80017e0:	4818      	ldr	r0, [pc, #96]	; (8001844 <TaskController+0x3d8>)
 80017e2:	f7ff fcc1 	bl	8001168 <PIDController_Update>
				Pitch_controlled = (int16_t)(PID_Pitch_AngVel.out);
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <TaskController+0x3d8>)
 80017e8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80017ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017f0:	ee17 3a90 	vmov	r3, s15
 80017f4:	b21a      	sxth	r2, r3
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <TaskController+0x3dc>)
 80017f8:	801a      	strh	r2, [r3, #0]
//			//sprintf(str, "%1.2f\r\n", PID_Roll_AngVel.out);
//			//sprintf(str, "%d\r\n", Roll_controlled);
//			sprintf(str, "%1.2f, %d\r\n", PID_Roll_AngVel.out, Roll_controlled);
//			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}
		osMutexRelease(ControllerMutexHandle);
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <TaskController+0x3e0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f00d fb16 	bl	800ee30 <osMutexRelease>
		osMutexRelease(RemoteDataMutexHandle);
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <TaskController+0x3e4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f00d fb11 	bl	800ee30 <osMutexRelease>
		osMutexRelease(ImuMutexHandle);
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <TaskController+0x3e8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f00d fb0c 	bl	800ee30 <osMutexRelease>
	{
 8001818:	e695      	b.n	8001546 <TaskController+0xda>
 800181a:	bf00      	nop
 800181c:	2000031a 	.word	0x2000031a
 8001820:	42480000 	.word	0x42480000
 8001824:	200003b0 	.word	0x200003b0
 8001828:	20000218 	.word	0x20000218
 800182c:	200003a4 	.word	0x200003a4
 8001830:	20000254 	.word	0x20000254
 8001834:	2000030c 	.word	0x2000030c
 8001838:	2000030e 	.word	0x2000030e
 800183c:	200003b4 	.word	0x200003b4
 8001840:	20000290 	.word	0x20000290
 8001844:	200002cc 	.word	0x200002cc
 8001848:	20000310 	.word	0x20000310
 800184c:	20000d30 	.word	0x20000d30
 8001850:	20000d1c 	.word	0x20000d1c
 8001854:	20000d20 	.word	0x20000d20

08001858 <TaskDiagnostics>:
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;
extern osMutexId ControllerMutexHandle;

void TaskDiagnostics(void const *argument)
{
 8001858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800185c:	f5ad 7d5a 	sub.w	sp, sp, #872	; 0x368
 8001860:	af14      	add	r7, sp, #80	; 0x50
 8001862:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001866:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 800186a:	6018      	str	r0, [r3, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5; //Hz
 800186c:	2305      	movs	r3, #5
 800186e:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8001872:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001876:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
	char UARTstr[512];
	uint8_t SpiIntData[64];
	uint8_t SpiFloatData1[64];
	uint8_t SpiFloatData2[64];

	SpiIntData[0] = (uint8_t)('i');
 8001882:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001886:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800188a:	2269      	movs	r2, #105	; 0x69
 800188c:	701a      	strb	r2, [r3, #0]
	SpiFloatData1[0] = (uint8_t)('f');
 800188e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001892:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001896:	2266      	movs	r2, #102	; 0x66
 8001898:	701a      	strb	r2, [r3, #0]
	SpiFloatData2[0] = (uint8_t)('g');
 800189a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800189e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80018a2:	2267      	movs	r2, #103	; 0x67
 80018a4:	701a      	strb	r2, [r3, #0]

	xLastWakeTime = xTaskGetTickCount();
 80018a6:	f00e fe0d 	bl	80104c4 <xTaskGetTickCount>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 80018b0:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80018b4:	f8d7 1310 	ldr.w	r1, [r7, #784]	; 0x310
 80018b8:	4618      	mov	r0, r3
 80018ba:	f00e fc2f 	bl	801011c <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 80018be:	f00e fe01 	bl	80104c4 <xTaskGetTickCount>
 80018c2:	f8c7 030c 	str.w	r0, [r7, #780]	; 0x30c

		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 80018c6:	4bc3      	ldr	r3, [pc, #780]	; (8001bd4 <TaskDiagnostics+0x37c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f04f 31ff 	mov.w	r1, #4294967295
 80018ce:	4618      	mov	r0, r3
 80018d0:	f00d fa60 	bl	800ed94 <osMutexWait>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f040 811d 	bne.w	8001b16 <TaskDiagnostics+0x2be>
		{
			uint16_t Throttle1 = (uint16_t)(TIM1->CCR1-1000);
 80018dc:	4bbe      	ldr	r3, [pc, #760]	; (8001bd8 <TaskDiagnostics+0x380>)
 80018de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80018ec:	f2a3 23d2 	subw	r3, r3, #722	; 0x2d2
 80018f0:	801a      	strh	r2, [r3, #0]
			uint16_t Throttle2 = (uint16_t)(TIM1->CCR2-1000);
 80018f2:	4bb9      	ldr	r3, [pc, #740]	; (8001bd8 <TaskDiagnostics+0x380>)
 80018f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001902:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8001906:	801a      	strh	r2, [r3, #0]
			uint16_t Throttle3 = (uint16_t)(TIM1->CCR3-1000);
 8001908:	4bb3      	ldr	r3, [pc, #716]	; (8001bd8 <TaskDiagnostics+0x380>)
 800190a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800190c:	b29b      	uxth	r3, r3
 800190e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001912:	b29a      	uxth	r2, r3
 8001914:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001918:	f2a3 23d6 	subw	r3, r3, #726	; 0x2d6
 800191c:	801a      	strh	r2, [r3, #0]
			uint16_t Throttle4 = (uint16_t)(TIM1->CCR4-1000);
 800191e:	4bae      	ldr	r3, [pc, #696]	; (8001bd8 <TaskDiagnostics+0x380>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	b29b      	uxth	r3, r3
 8001924:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001928:	b29a      	uxth	r2, r3
 800192a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800192e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8001932:	801a      	strh	r2, [r3, #0]

			sprintf(UARTstr, "Throttle: (%d) %d %d %d %d\r\n", Throttle_in, Throttle1, Throttle2, Throttle3, Throttle4);
 8001934:	4ba9      	ldr	r3, [pc, #676]	; (8001bdc <TaskDiagnostics+0x384>)
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	461c      	mov	r4, r3
 800193a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800193e:	f2a3 23d2 	subw	r3, r3, #722	; 0x2d2
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	461d      	mov	r5, r3
 8001946:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800194a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001956:	f2a3 23d6 	subw	r3, r3, #726	; 0x2d6
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001962:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800196c:	9302      	str	r3, [sp, #8]
 800196e:	9101      	str	r1, [sp, #4]
 8001970:	9200      	str	r2, [sp, #0]
 8001972:	462b      	mov	r3, r5
 8001974:	4622      	mov	r2, r4
 8001976:	499a      	ldr	r1, [pc, #616]	; (8001be0 <TaskDiagnostics+0x388>)
 8001978:	f003 fd80 	bl	800547c <sprintf_>
			Uint16ToUint8s(&Throttle_in, SpiIntData, 1);
 800197c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001980:	2201      	movs	r2, #1
 8001982:	4619      	mov	r1, r3
 8001984:	4895      	ldr	r0, [pc, #596]	; (8001bdc <TaskDiagnostics+0x384>)
 8001986:	f7ff fd4a 	bl	800141e <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle1, SpiIntData, 3);
 800198a:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800198e:	f107 0346 	add.w	r3, r7, #70	; 0x46
 8001992:	2203      	movs	r2, #3
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fd42 	bl	800141e <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle2, SpiIntData, 5);
 800199a:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800199e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019a2:	2205      	movs	r2, #5
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fd3a 	bl	800141e <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle3, SpiIntData, 7);
 80019aa:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80019ae:	f107 0342 	add.w	r3, r7, #66	; 0x42
 80019b2:	2207      	movs	r2, #7
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fd32 	bl	800141e <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle4, SpiIntData, 9);
 80019ba:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80019be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019c2:	2209      	movs	r2, #9
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fd2a 	bl	800141e <Uint16ToUint8s>

			sprintf(UARTstr, "%sPitch: %d\r\n", UARTstr, Pitch_in);
 80019ca:	4b86      	ldr	r3, [pc, #536]	; (8001be4 <TaskDiagnostics+0x38c>)
 80019cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d0:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80019d4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80019d8:	4983      	ldr	r1, [pc, #524]	; (8001be8 <TaskDiagnostics+0x390>)
 80019da:	f003 fd4f 	bl	800547c <sprintf_>
			Int16ToUint8s(&Pitch_in, SpiIntData, 11);
 80019de:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019e2:	220b      	movs	r2, #11
 80019e4:	4619      	mov	r1, r3
 80019e6:	487f      	ldr	r0, [pc, #508]	; (8001be4 <TaskDiagnostics+0x38c>)
 80019e8:	f7ff fd2c 	bl	8001444 <Int16ToUint8s>

			int16_t Roll_in_devided = Roll_in / 10;
 80019ec:	4b7f      	ldr	r3, [pc, #508]	; (8001bec <TaskDiagnostics+0x394>)
 80019ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f2:	4a7f      	ldr	r2, [pc, #508]	; (8001bf0 <TaskDiagnostics+0x398>)
 80019f4:	fb82 1203 	smull	r1, r2, r2, r3
 80019f8:	1092      	asrs	r2, r2, #2
 80019fa:	17db      	asrs	r3, r3, #31
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001a04:	f2a3 23da 	subw	r3, r3, #730	; 0x2da
 8001a08:	801a      	strh	r2, [r3, #0]
			sprintf(UARTstr, "%sRoll: %d\r\n", UARTstr, Roll_in_devided);
 8001a0a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001a0e:	f2a3 23da 	subw	r3, r3, #730	; 0x2da
 8001a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a16:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001a1a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001a1e:	4975      	ldr	r1, [pc, #468]	; (8001bf4 <TaskDiagnostics+0x39c>)
 8001a20:	f003 fd2c 	bl	800547c <sprintf_>
			Int16ToUint8s(&Roll_in_devided, SpiIntData, 13);
 8001a24:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001a28:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8001a2c:	220d      	movs	r2, #13
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fd08 	bl	8001444 <Int16ToUint8s>

			sprintf(UARTstr, "%sYaw: %d\r\n", UARTstr, Yaw_in);
 8001a34:	4b70      	ldr	r3, [pc, #448]	; (8001bf8 <TaskDiagnostics+0x3a0>)
 8001a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001a3e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001a42:	496e      	ldr	r1, [pc, #440]	; (8001bfc <TaskDiagnostics+0x3a4>)
 8001a44:	f003 fd1a 	bl	800547c <sprintf_>
			Int16ToUint8s(&Yaw_in, SpiIntData, 15);
 8001a48:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a4c:	220f      	movs	r2, #15
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4869      	ldr	r0, [pc, #420]	; (8001bf8 <TaskDiagnostics+0x3a0>)
 8001a52:	f7ff fcf7 	bl	8001444 <Int16ToUint8s>

			sprintf(UARTstr, "%sSWA: %d\r\n", UARTstr, SWA);
 8001a56:	4b6a      	ldr	r3, [pc, #424]	; (8001c00 <TaskDiagnostics+0x3a8>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001a5e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001a62:	4968      	ldr	r1, [pc, #416]	; (8001c04 <TaskDiagnostics+0x3ac>)
 8001a64:	f003 fd0a 	bl	800547c <sprintf_>
			Uint16ToUint8s(&SWA, SpiIntData, 17);
 8001a68:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a6c:	2211      	movs	r2, #17
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4863      	ldr	r0, [pc, #396]	; (8001c00 <TaskDiagnostics+0x3a8>)
 8001a72:	f7ff fcd4 	bl	800141e <Uint16ToUint8s>

			sprintf(UARTstr, "%sSWB: %d\r\n", UARTstr, SWB);
 8001a76:	4b64      	ldr	r3, [pc, #400]	; (8001c08 <TaskDiagnostics+0x3b0>)
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001a7e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001a82:	4962      	ldr	r1, [pc, #392]	; (8001c0c <TaskDiagnostics+0x3b4>)
 8001a84:	f003 fcfa 	bl	800547c <sprintf_>
			Uint16ToUint8s(&SWB, SpiIntData, 19);
 8001a88:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a8c:	2213      	movs	r2, #19
 8001a8e:	4619      	mov	r1, r3
 8001a90:	485d      	ldr	r0, [pc, #372]	; (8001c08 <TaskDiagnostics+0x3b0>)
 8001a92:	f7ff fcc4 	bl	800141e <Uint16ToUint8s>

			sprintf(UARTstr, "%sSWC: %d\r\n", UARTstr, SWC);
 8001a96:	4b5e      	ldr	r3, [pc, #376]	; (8001c10 <TaskDiagnostics+0x3b8>)
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001a9e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001aa2:	495c      	ldr	r1, [pc, #368]	; (8001c14 <TaskDiagnostics+0x3bc>)
 8001aa4:	f003 fcea 	bl	800547c <sprintf_>
			Uint16ToUint8s(&SWC, SpiIntData, 21);
 8001aa8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001aac:	2215      	movs	r2, #21
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4857      	ldr	r0, [pc, #348]	; (8001c10 <TaskDiagnostics+0x3b8>)
 8001ab2:	f7ff fcb4 	bl	800141e <Uint16ToUint8s>

			sprintf(UARTstr, "%sSWD: %d\r\n", UARTstr, SWD);
 8001ab6:	4b58      	ldr	r3, [pc, #352]	; (8001c18 <TaskDiagnostics+0x3c0>)
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001abe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001ac2:	4956      	ldr	r1, [pc, #344]	; (8001c1c <TaskDiagnostics+0x3c4>)
 8001ac4:	f003 fcda 	bl	800547c <sprintf_>
			Uint16ToUint8s(&SWD, SpiIntData, 23);
 8001ac8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001acc:	2217      	movs	r2, #23
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4851      	ldr	r0, [pc, #324]	; (8001c18 <TaskDiagnostics+0x3c0>)
 8001ad2:	f7ff fca4 	bl	800141e <Uint16ToUint8s>

			sprintf(UARTstr, "%sVRA: %d\r\n", UARTstr, VRA);
 8001ad6:	4b52      	ldr	r3, [pc, #328]	; (8001c20 <TaskDiagnostics+0x3c8>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001ade:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001ae2:	4950      	ldr	r1, [pc, #320]	; (8001c24 <TaskDiagnostics+0x3cc>)
 8001ae4:	f003 fcca 	bl	800547c <sprintf_>
			Uint16ToUint8s(&VRA, SpiIntData, 25);
 8001ae8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001aec:	2219      	movs	r2, #25
 8001aee:	4619      	mov	r1, r3
 8001af0:	484b      	ldr	r0, [pc, #300]	; (8001c20 <TaskDiagnostics+0x3c8>)
 8001af2:	f7ff fc94 	bl	800141e <Uint16ToUint8s>

			sprintf(UARTstr, "%sVRB: %d\r\n", UARTstr, VRB);
 8001af6:	4b4c      	ldr	r3, [pc, #304]	; (8001c28 <TaskDiagnostics+0x3d0>)
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001afe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001b02:	494a      	ldr	r1, [pc, #296]	; (8001c2c <TaskDiagnostics+0x3d4>)
 8001b04:	f003 fcba 	bl	800547c <sprintf_>
			Uint16ToUint8s(&VRB, SpiIntData, 27);
 8001b08:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b0c:	221b      	movs	r2, #27
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4845      	ldr	r0, [pc, #276]	; (8001c28 <TaskDiagnostics+0x3d0>)
 8001b12:	f7ff fc84 	bl	800141e <Uint16ToUint8s>
		}
		osMutexRelease(RemoteDataMutexHandle);
 8001b16:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <TaskDiagnostics+0x37c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f00d f988 	bl	800ee30 <osMutexRelease>

		if (IsImuAvailable)
 8001b20:	4b43      	ldr	r3, [pc, #268]	; (8001c30 <TaskDiagnostics+0x3d8>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 8127 	beq.w	8001d78 <TaskDiagnostics+0x520>
		{
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 8001b2a:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <TaskDiagnostics+0x3dc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f04f 31ff 	mov.w	r1, #4294967295
 8001b32:	4618      	mov	r0, r3
 8001b34:	f00d f92e 	bl	800ed94 <osMutexWait>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f040 8117 	bne.w	8001d6e <TaskDiagnostics+0x516>
			{
				sprintf(UARTstr,
 8001b40:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <TaskDiagnostics+0x3e0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fd27 	bl	8000598 <__aeabi_f2d>
 8001b4a:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
						"%sTemp: %.4f\r\nAcc:  %1.4f ; %1.4f ; %1.4f\r\nGyro: %1.4f ; %1.4f ; %1.4f\r\nRoll: %1.2f ° ; Pitch: %1.2f ° ; Yaw: %1.2f °\r\n",
						UARTstr,
						TempData,
						AccData[0], AccData[1], AccData[2],
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <TaskDiagnostics+0x3e4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fd20 	bl	8000598 <__aeabi_f2d>
 8001b58:	e9c7 0108 	strd	r0, r1, [r7, #32]
						AccData[0], AccData[1], AccData[2],
 8001b5c:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <TaskDiagnostics+0x3e4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fd19 	bl	8000598 <__aeabi_f2d>
 8001b66:	e9c7 0106 	strd	r0, r1, [r7, #24]
						AccData[0], AccData[1], AccData[2],
 8001b6a:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <TaskDiagnostics+0x3e4>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fd12 	bl	8000598 <__aeabi_f2d>
 8001b74:	e9c7 0104 	strd	r0, r1, [r7, #16]
						GyroData[0], GyroData[1], GyroData[2],
 8001b78:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <TaskDiagnostics+0x3e8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fd0b 	bl	8000598 <__aeabi_f2d>
 8001b82:	e9c7 0102 	strd	r0, r1, [r7, #8]
						GyroData[0], GyroData[1], GyroData[2],
 8001b86:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <TaskDiagnostics+0x3e8>)
 8001b88:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fd04 	bl	8000598 <__aeabi_f2d>
 8001b90:	e9c7 0100 	strd	r0, r1, [r7]
						GyroData[0], GyroData[1], GyroData[2],
 8001b94:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <TaskDiagnostics+0x3e8>)
 8001b96:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fcfd 	bl	8000598 <__aeabi_f2d>
 8001b9e:	4682      	mov	sl, r0
 8001ba0:	468b      	mov	fp, r1
 8001ba2:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <TaskDiagnostics+0x3ec>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fcf6 	bl	8000598 <__aeabi_f2d>
 8001bac:	4680      	mov	r8, r0
 8001bae:	4689      	mov	r9, r1
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <TaskDiagnostics+0x3f0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fcef 	bl	8000598 <__aeabi_f2d>
 8001bba:	4604      	mov	r4, r0
 8001bbc:	460d      	mov	r5, r1
 8001bbe:	4b23      	ldr	r3, [pc, #140]	; (8001c4c <TaskDiagnostics+0x3f4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fce8 	bl	8000598 <__aeabi_f2d>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001bd0:	e03e      	b.n	8001c50 <TaskDiagnostics+0x3f8>
 8001bd2:	bf00      	nop
 8001bd4:	20000d1c 	.word	0x20000d1c
 8001bd8:	40010000 	.word	0x40010000
 8001bdc:	20000308 	.word	0x20000308
 8001be0:	08017a70 	.word	0x08017a70
 8001be4:	2000030e 	.word	0x2000030e
 8001be8:	08017a90 	.word	0x08017a90
 8001bec:	2000030a 	.word	0x2000030a
 8001bf0:	66666667 	.word	0x66666667
 8001bf4:	08017aa0 	.word	0x08017aa0
 8001bf8:	20000312 	.word	0x20000312
 8001bfc:	08017ab0 	.word	0x08017ab0
 8001c00:	20000314 	.word	0x20000314
 8001c04:	08017abc 	.word	0x08017abc
 8001c08:	20000316 	.word	0x20000316
 8001c0c:	08017ac8 	.word	0x08017ac8
 8001c10:	20000318 	.word	0x20000318
 8001c14:	08017ad4 	.word	0x08017ad4
 8001c18:	2000031a 	.word	0x2000031a
 8001c1c:	08017ae0 	.word	0x08017ae0
 8001c20:	2000031c 	.word	0x2000031c
 8001c24:	08017aec 	.word	0x08017aec
 8001c28:	2000031e 	.word	0x2000031e
 8001c2c:	08017af8 	.word	0x08017af8
 8001c30:	20000214 	.word	0x20000214
 8001c34:	20000d20 	.word	0x20000d20
 8001c38:	200003a0 	.word	0x200003a0
 8001c3c:	20000394 	.word	0x20000394
 8001c40:	200003a4 	.word	0x200003a4
 8001c44:	200003b0 	.word	0x200003b0
 8001c48:	200003b4 	.word	0x200003b4
 8001c4c:	200003b8 	.word	0x200003b8
 8001c50:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001c54:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8001c58:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8001c5c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8001c60:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8001c64:	ed97 7b00 	vldr	d7, [r7]
 8001c68:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001c6c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c70:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001c74:	ed97 7b04 	vldr	d7, [r7, #16]
 8001c78:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001c7c:	ed97 7b06 	vldr	d7, [r7, #24]
 8001c80:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001c84:	ed97 7b08 	vldr	d7, [r7, #32]
 8001c88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001c8c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001c90:	ed8d 7b00 	vstr	d7, [sp]
 8001c94:	460a      	mov	r2, r1
 8001c96:	496b      	ldr	r1, [pc, #428]	; (8001e44 <TaskDiagnostics+0x5ec>)
 8001c98:	f003 fbf0 	bl	800547c <sprintf_>
						Roll_measured, Pitch_measured, Yaw_measured);
				FloatToUint8s(&TempData, SpiFloatData1, 1);
 8001c9c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4868      	ldr	r0, [pc, #416]	; (8001e48 <TaskDiagnostics+0x5f0>)
 8001ca6:	f7ff fb95 	bl	80013d4 <FloatToUint8s>
				FloatToUint8s(AccData, SpiFloatData1, 5);
 8001caa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001cae:	2205      	movs	r2, #5
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4866      	ldr	r0, [pc, #408]	; (8001e4c <TaskDiagnostics+0x5f4>)
 8001cb4:	f7ff fb8e 	bl	80013d4 <FloatToUint8s>
				FloatToUint8s(AccData+1, SpiFloatData1, 9);
 8001cb8:	4865      	ldr	r0, [pc, #404]	; (8001e50 <TaskDiagnostics+0x5f8>)
 8001cba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001cbe:	2209      	movs	r2, #9
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f7ff fb87 	bl	80013d4 <FloatToUint8s>
				FloatToUint8s(AccData+2, SpiFloatData1, 13);
 8001cc6:	4863      	ldr	r0, [pc, #396]	; (8001e54 <TaskDiagnostics+0x5fc>)
 8001cc8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ccc:	220d      	movs	r2, #13
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7ff fb80 	bl	80013d4 <FloatToUint8s>
				FloatToUint8s(GyroData, SpiFloatData1, 17);
 8001cd4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001cd8:	2211      	movs	r2, #17
 8001cda:	4619      	mov	r1, r3
 8001cdc:	485e      	ldr	r0, [pc, #376]	; (8001e58 <TaskDiagnostics+0x600>)
 8001cde:	f7ff fb79 	bl	80013d4 <FloatToUint8s>
				FloatToUint8s(GyroData+1, SpiFloatData1, 21);
 8001ce2:	485e      	ldr	r0, [pc, #376]	; (8001e5c <TaskDiagnostics+0x604>)
 8001ce4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ce8:	2215      	movs	r2, #21
 8001cea:	4619      	mov	r1, r3
 8001cec:	f7ff fb72 	bl	80013d4 <FloatToUint8s>
				FloatToUint8s(GyroData+2, SpiFloatData1, 25);
 8001cf0:	485b      	ldr	r0, [pc, #364]	; (8001e60 <TaskDiagnostics+0x608>)
 8001cf2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001cf6:	2219      	movs	r2, #25
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f7ff fb6b 	bl	80013d4 <FloatToUint8s>

				sprintf(UARTstr,
 8001cfe:	4b59      	ldr	r3, [pc, #356]	; (8001e64 <TaskDiagnostics+0x60c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fc48 	bl	8000598 <__aeabi_f2d>
 8001d08:	4604      	mov	r4, r0
 8001d0a:	460d      	mov	r5, r1
 8001d0c:	4b56      	ldr	r3, [pc, #344]	; (8001e68 <TaskDiagnostics+0x610>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fc41 	bl	8000598 <__aeabi_f2d>
 8001d16:	4680      	mov	r8, r0
 8001d18:	4689      	mov	r9, r1
 8001d1a:	4b54      	ldr	r3, [pc, #336]	; (8001e6c <TaskDiagnostics+0x614>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fc3a 	bl	8000598 <__aeabi_f2d>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001d2c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001d30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001d34:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001d38:	e9cd 4500 	strd	r4, r5, [sp]
 8001d3c:	460a      	mov	r2, r1
 8001d3e:	494c      	ldr	r1, [pc, #304]	; (8001e70 <TaskDiagnostics+0x618>)
 8001d40:	f003 fb9c 	bl	800547c <sprintf_>
						"%sBMP_Temp: %.4f\r\nBMP_Pres: %.4f\r\nBMP_Alt: %.4f\r\n",
						UARTstr,
						BMP_Temp, BMP_Pres, BMP_Alt);
				FloatToUint8s(&BMP_Temp, SpiFloatData1, 29);
 8001d44:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d48:	221d      	movs	r2, #29
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4845      	ldr	r0, [pc, #276]	; (8001e64 <TaskDiagnostics+0x60c>)
 8001d4e:	f7ff fb41 	bl	80013d4 <FloatToUint8s>
				FloatToUint8s(&BMP_Pres, SpiFloatData1, 33);
 8001d52:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d56:	2221      	movs	r2, #33	; 0x21
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4843      	ldr	r0, [pc, #268]	; (8001e68 <TaskDiagnostics+0x610>)
 8001d5c:	f7ff fb3a 	bl	80013d4 <FloatToUint8s>
				FloatToUint8s(&BMP_Alt, SpiFloatData1, 37);
 8001d60:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d64:	2225      	movs	r2, #37	; 0x25
 8001d66:	4619      	mov	r1, r3
 8001d68:	4840      	ldr	r0, [pc, #256]	; (8001e6c <TaskDiagnostics+0x614>)
 8001d6a:	f7ff fb33 	bl	80013d4 <FloatToUint8s>
			}
			osMutexRelease(ImuMutexHandle);
 8001d6e:	4b41      	ldr	r3, [pc, #260]	; (8001e74 <TaskDiagnostics+0x61c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f00d f85c 	bl	800ee30 <osMutexRelease>
				FloatToUint8s(&MAG_dir, SpiFloatData1, 53);
			}
			osMutexRelease(MagnMutexHandle);
		}

		if (IsDistAvailable)
 8001d78:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <TaskDiagnostics+0x620>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d026      	beq.n	8001dce <TaskDiagnostics+0x576>
		{
			if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 8001d80:	4b3e      	ldr	r3, [pc, #248]	; (8001e7c <TaskDiagnostics+0x624>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f00d f803 	bl	800ed94 <osMutexWait>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d117      	bne.n	8001dc4 <TaskDiagnostics+0x56c>
			{
				sprintf(UARTstr, "%sDistance: %.0f mm\r\n", UARTstr, Distance);
 8001d94:	4b3a      	ldr	r3, [pc, #232]	; (8001e80 <TaskDiagnostics+0x628>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fbfd 	bl	8000598 <__aeabi_f2d>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001da6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001daa:	e9cd 2300 	strd	r2, r3, [sp]
 8001dae:	460a      	mov	r2, r1
 8001db0:	4934      	ldr	r1, [pc, #208]	; (8001e84 <TaskDiagnostics+0x62c>)
 8001db2:	f003 fb63 	bl	800547c <sprintf_>
				FloatToUint8s(&Distance, SpiFloatData1, 57);
 8001db6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001dba:	2239      	movs	r2, #57	; 0x39
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4830      	ldr	r0, [pc, #192]	; (8001e80 <TaskDiagnostics+0x628>)
 8001dc0:	f7ff fb08 	bl	80013d4 <FloatToUint8s>
			}
			osMutexRelease(DistMutexHandle);
 8001dc4:	4b2d      	ldr	r3, [pc, #180]	; (8001e7c <TaskDiagnostics+0x624>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f00d f831 	bl	800ee30 <osMutexRelease>
				SpiIntData[32] = (uint8_t)GPS.altitude_unit;
			}
			osMutexRelease(GpsDataMutexHandle);
		}

		sprintf(UARTstr, "%s\r\n\r\n", UARTstr);
 8001dce:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001dd6:	492c      	ldr	r1, [pc, #176]	; (8001e88 <TaskDiagnostics+0x630>)
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f003 fb4f 	bl	800547c <sprintf_>

		// Sending log info
		if (Diag)
 8001dde:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <TaskDiagnostics+0x634>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f43f ad64 	beq.w	80018b0 <TaskDiagnostics+0x58>
		{
			HAL_UART_Transmit(&huart3, UARTstr, strlen(UARTstr), HAL_MAX_DELAY);
 8001de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fa67 	bl	80002c0 <strlen>
 8001df2:	4603      	mov	r3, r0
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfe:	4824      	ldr	r0, [pc, #144]	; (8001e90 <TaskDiagnostics+0x638>)
 8001e00:	f00b fa94 	bl	800d32c <HAL_UART_Transmit>

			HAL_SPI_Transmit(&hspi1, SpiIntData, 64, HAL_MAX_DELAY);
 8001e04:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001e08:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0c:	2240      	movs	r2, #64	; 0x40
 8001e0e:	4821      	ldr	r0, [pc, #132]	; (8001e94 <TaskDiagnostics+0x63c>)
 8001e10:	f008 fda7 	bl	800a962 <HAL_SPI_Transmit>
			osDelay(10);
 8001e14:	200a      	movs	r0, #10
 8001e16:	f00c ff90 	bl	800ed3a <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData1, 64, HAL_MAX_DELAY);
 8001e1a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e22:	2240      	movs	r2, #64	; 0x40
 8001e24:	481b      	ldr	r0, [pc, #108]	; (8001e94 <TaskDiagnostics+0x63c>)
 8001e26:	f008 fd9c 	bl	800a962 <HAL_SPI_Transmit>
			osDelay(10);
 8001e2a:	200a      	movs	r0, #10
 8001e2c:	f00c ff85 	bl	800ed3a <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData2, 64, HAL_MAX_DELAY);
 8001e30:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001e34:	f04f 33ff 	mov.w	r3, #4294967295
 8001e38:	2240      	movs	r2, #64	; 0x40
 8001e3a:	4816      	ldr	r0, [pc, #88]	; (8001e94 <TaskDiagnostics+0x63c>)
 8001e3c:	f008 fd91 	bl	800a962 <HAL_SPI_Transmit>
	{
 8001e40:	e536      	b.n	80018b0 <TaskDiagnostics+0x58>
 8001e42:	bf00      	nop
 8001e44:	08017b04 	.word	0x08017b04
 8001e48:	200003a0 	.word	0x200003a0
 8001e4c:	20000394 	.word	0x20000394
 8001e50:	20000398 	.word	0x20000398
 8001e54:	2000039c 	.word	0x2000039c
 8001e58:	200003a4 	.word	0x200003a4
 8001e5c:	200003a8 	.word	0x200003a8
 8001e60:	200003ac 	.word	0x200003ac
 8001e64:	200003ec 	.word	0x200003ec
 8001e68:	200003f0 	.word	0x200003f0
 8001e6c:	200003f4 	.word	0x200003f4
 8001e70:	08017b80 	.word	0x08017b80
 8001e74:	20000d20 	.word	0x20000d20
 8001e78:	20000216 	.word	0x20000216
 8001e7c:	20000d28 	.word	0x20000d28
 8001e80:	20000458 	.word	0x20000458
 8001e84:	08017bb4 	.word	0x08017bb4
 8001e88:	08017bcc 	.word	0x08017bcc
 8001e8c:	2000020c 	.word	0x2000020c
 8001e90:	20000c14 	.word	0x20000c14
 8001e94:	200009a4 	.word	0x200009a4

08001e98 <ConvertToPwm>:
extern TIM_HandleTypeDef htim1;
extern osMutexId RemoteDataMutexHandle;
extern osMutexId ControllerMutexHandle;

uint32_t ConvertToPwm(int32_t raw)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	// Norm raw data to 0-1000
	if (raw < 0)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	da02      	bge.n	8001eac <ConvertToPwm+0x14>
		raw = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	e006      	b.n	8001eba <ConvertToPwm+0x22>
	else if (raw > 1000)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eb2:	dd02      	ble.n	8001eba <ConvertToPwm+0x22>
		raw = 1000;
 8001eb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb8:	607b      	str	r3, [r7, #4]

	// Add 50, so the range will be 1000-2000
	return (uint32_t)(raw + 1000);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <TaskMotor>:

void TaskMotor(void const *argument)
{
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b08b      	sub	sp, #44	; 0x2c
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 8001ed4:	23c8      	movs	r3, #200	; 0xc8
 8001ed6:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8001ed8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee2:	613b      	str	r3, [r7, #16]

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4879      	ldr	r0, [pc, #484]	; (80020cc <TaskMotor+0x200>)
 8001ee8:	f009 fd22 	bl	800b930 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001eec:	2104      	movs	r1, #4
 8001eee:	4877      	ldr	r0, [pc, #476]	; (80020cc <TaskMotor+0x200>)
 8001ef0:	f009 fd1e 	bl	800b930 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001ef4:	2108      	movs	r1, #8
 8001ef6:	4875      	ldr	r0, [pc, #468]	; (80020cc <TaskMotor+0x200>)
 8001ef8:	f009 fd1a 	bl	800b930 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001efc:	210c      	movs	r1, #12
 8001efe:	4873      	ldr	r0, [pc, #460]	; (80020cc <TaskMotor+0x200>)
 8001f00:	f009 fd16 	bl	800b930 <HAL_TIM_PWM_Start>
	uint8_t ESC1_start_signal;
	uint8_t ESC2_start_signal;
	uint8_t ESC3_start_signal;
	uint8_t ESC4_start_signal;

	TIM1->CCR1 = (uint32_t) (50);
 8001f04:	4b72      	ldr	r3, [pc, #456]	; (80020d0 <TaskMotor+0x204>)
 8001f06:	2232      	movs	r2, #50	; 0x32
 8001f08:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (uint32_t) (50);
 8001f0a:	4b71      	ldr	r3, [pc, #452]	; (80020d0 <TaskMotor+0x204>)
 8001f0c:	2232      	movs	r2, #50	; 0x32
 8001f0e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (uint32_t) (50);
 8001f10:	4b6f      	ldr	r3, [pc, #444]	; (80020d0 <TaskMotor+0x204>)
 8001f12:	2232      	movs	r2, #50	; 0x32
 8001f14:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = (uint32_t) (50);
 8001f16:	4b6e      	ldr	r3, [pc, #440]	; (80020d0 <TaskMotor+0x204>)
 8001f18:	2232      	movs	r2, #50	; 0x32
 8001f1a:	641a      	str	r2, [r3, #64]	; 0x40

	xLastWakeTime = xTaskGetTickCount();
 8001f1c:	f00e fad2 	bl	80104c4 <xTaskGetTickCount>
 8001f20:	4603      	mov	r3, r0
 8001f22:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8001f24:	f107 0308 	add.w	r3, r7, #8
 8001f28:	6939      	ldr	r1, [r7, #16]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f00e f8f6 	bl	801011c <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8001f30:	f00e fac8 	bl	80104c4 <xTaskGetTickCount>
 8001f34:	60f8      	str	r0, [r7, #12]

		//Log("Mot - RDMutEnter");
		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001f36:	4b67      	ldr	r3, [pc, #412]	; (80020d4 <TaskMotor+0x208>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f00c ff28 	bl	800ed94 <osMutexWait>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f040 80ba 	bne.w	80020c0 <TaskMotor+0x1f4>
		{
			// Hardware safety
			if (SWA < 10)
 8001f4c:	4b62      	ldr	r3, [pc, #392]	; (80020d8 <TaskMotor+0x20c>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	2b09      	cmp	r3, #9
 8001f52:	d806      	bhi.n	8001f62 <TaskMotor+0x96>
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_SET);
 8001f54:	2201      	movs	r2, #1
 8001f56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f5a:	4860      	ldr	r0, [pc, #384]	; (80020dc <TaskMotor+0x210>)
 8001f5c:	f006 fdf6 	bl	8008b4c <HAL_GPIO_WritePin>
 8001f60:	e005      	b.n	8001f6e <TaskMotor+0xa2>

			else
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 8001f62:	2200      	movs	r2, #0
 8001f64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f68:	485c      	ldr	r0, [pc, #368]	; (80020dc <TaskMotor+0x210>)
 8001f6a:	f006 fdef 	bl	8008b4c <HAL_GPIO_WritePin>

			// Software safety
			if (SWB < 10)
 8001f6e:	4b5c      	ldr	r3, [pc, #368]	; (80020e0 <TaskMotor+0x214>)
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	2b09      	cmp	r3, #9
 8001f74:	d803      	bhi.n	8001f7e <TaskMotor+0xb2>
				Rotors = false;
 8001f76:	4b5b      	ldr	r3, [pc, #364]	; (80020e4 <TaskMotor+0x218>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	e002      	b.n	8001f84 <TaskMotor+0xb8>
			else
				Rotors = true;
 8001f7e:	4b59      	ldr	r3, [pc, #356]	; (80020e4 <TaskMotor+0x218>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]

			// Setting PWM speed
			if (Rotors)
 8001f84:	4b57      	ldr	r3, [pc, #348]	; (80020e4 <TaskMotor+0x218>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 8081 	beq.w	8002090 <TaskMotor+0x1c4>
				int32_t ESC1_Speed;
				int32_t ESC2_Speed;
				int32_t ESC3_Speed;
				int32_t ESC4_Speed;

				if (Throttle_in > 10)
 8001f8e:	4b56      	ldr	r3, [pc, #344]	; (80020e8 <TaskMotor+0x21c>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	2b0a      	cmp	r3, #10
 8001f94:	d95b      	bls.n	800204e <TaskMotor+0x182>
				{
					if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK)
 8001f96:	4b55      	ldr	r3, [pc, #340]	; (80020ec <TaskMotor+0x220>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f00c fef8 	bl	800ed94 <osMutexWait>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d14b      	bne.n	8002042 <TaskMotor+0x176>
					{
						ESC1_Speed = Throttle_in + Roll_controlled  - (Pitch_in/5); //- (Yaw_in/5);
 8001faa:	4b4f      	ldr	r3, [pc, #316]	; (80020e8 <TaskMotor+0x21c>)
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b4f      	ldr	r3, [pc, #316]	; (80020f0 <TaskMotor+0x224>)
 8001fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fb6:	441a      	add	r2, r3
 8001fb8:	4b4e      	ldr	r3, [pc, #312]	; (80020f4 <TaskMotor+0x228>)
 8001fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fbe:	494e      	ldr	r1, [pc, #312]	; (80020f8 <TaskMotor+0x22c>)
 8001fc0:	fb81 0103 	smull	r0, r1, r1, r3
 8001fc4:	1049      	asrs	r1, r1, #1
 8001fc6:	17db      	asrs	r3, r3, #31
 8001fc8:	1acb      	subs	r3, r1, r3
 8001fca:	b21b      	sxth	r3, r3
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
						ESC2_Speed = Throttle_in - Roll_controlled - (Pitch_in/5); //+ (Yaw_in/5);
 8001fd0:	4b45      	ldr	r3, [pc, #276]	; (80020e8 <TaskMotor+0x21c>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b46      	ldr	r3, [pc, #280]	; (80020f0 <TaskMotor+0x224>)
 8001fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fdc:	1ad2      	subs	r2, r2, r3
 8001fde:	4b45      	ldr	r3, [pc, #276]	; (80020f4 <TaskMotor+0x228>)
 8001fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe4:	4944      	ldr	r1, [pc, #272]	; (80020f8 <TaskMotor+0x22c>)
 8001fe6:	fb81 0103 	smull	r0, r1, r1, r3
 8001fea:	1049      	asrs	r1, r1, #1
 8001fec:	17db      	asrs	r3, r3, #31
 8001fee:	1acb      	subs	r3, r1, r3
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	623b      	str	r3, [r7, #32]
						ESC3_Speed = Throttle_in - Roll_controlled  + (Pitch_in/5); //- (Yaw_in/5);
 8001ff6:	4b3c      	ldr	r3, [pc, #240]	; (80020e8 <TaskMotor+0x21c>)
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4b3c      	ldr	r3, [pc, #240]	; (80020f0 <TaskMotor+0x224>)
 8001ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002002:	1ad2      	subs	r2, r2, r3
 8002004:	4b3b      	ldr	r3, [pc, #236]	; (80020f4 <TaskMotor+0x228>)
 8002006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800200a:	493b      	ldr	r1, [pc, #236]	; (80020f8 <TaskMotor+0x22c>)
 800200c:	fb81 0103 	smull	r0, r1, r1, r3
 8002010:	1049      	asrs	r1, r1, #1
 8002012:	17db      	asrs	r3, r3, #31
 8002014:	1acb      	subs	r3, r1, r3
 8002016:	b21b      	sxth	r3, r3
 8002018:	4413      	add	r3, r2
 800201a:	61fb      	str	r3, [r7, #28]
						ESC4_Speed = Throttle_in + Roll_controlled  + (Pitch_in/5); // + (Yaw_in/5);
 800201c:	4b32      	ldr	r3, [pc, #200]	; (80020e8 <TaskMotor+0x21c>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	4b33      	ldr	r3, [pc, #204]	; (80020f0 <TaskMotor+0x224>)
 8002024:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002028:	441a      	add	r2, r3
 800202a:	4b32      	ldr	r3, [pc, #200]	; (80020f4 <TaskMotor+0x228>)
 800202c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002030:	4931      	ldr	r1, [pc, #196]	; (80020f8 <TaskMotor+0x22c>)
 8002032:	fb81 0103 	smull	r0, r1, r1, r3
 8002036:	1049      	asrs	r1, r1, #1
 8002038:	17db      	asrs	r3, r3, #31
 800203a:	1acb      	subs	r3, r1, r3
 800203c:	b21b      	sxth	r3, r3
 800203e:	4413      	add	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
					}
					osMutexRelease(ControllerMutexHandle);
 8002042:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <TaskMotor+0x220>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f00c fef2 	bl	800ee30 <osMutexRelease>
 800204c:	e007      	b.n	800205e <TaskMotor+0x192>
				}
				else
				{
					ESC1_Speed = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
					ESC2_Speed = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
					ESC3_Speed = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
					ESC4_Speed = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
				}

				TIM1->CCR1 = ConvertToPwm(ESC1_Speed);
 800205e:	4c1c      	ldr	r4, [pc, #112]	; (80020d0 <TaskMotor+0x204>)
 8002060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002062:	f7ff ff19 	bl	8001e98 <ConvertToPwm>
 8002066:	4603      	mov	r3, r0
 8002068:	6363      	str	r3, [r4, #52]	; 0x34
				TIM1->CCR2 = ConvertToPwm(ESC2_Speed);
 800206a:	4c19      	ldr	r4, [pc, #100]	; (80020d0 <TaskMotor+0x204>)
 800206c:	6a38      	ldr	r0, [r7, #32]
 800206e:	f7ff ff13 	bl	8001e98 <ConvertToPwm>
 8002072:	4603      	mov	r3, r0
 8002074:	63a3      	str	r3, [r4, #56]	; 0x38
				TIM1->CCR3 = ConvertToPwm(ESC3_Speed);
 8002076:	4c16      	ldr	r4, [pc, #88]	; (80020d0 <TaskMotor+0x204>)
 8002078:	69f8      	ldr	r0, [r7, #28]
 800207a:	f7ff ff0d 	bl	8001e98 <ConvertToPwm>
 800207e:	4603      	mov	r3, r0
 8002080:	63e3      	str	r3, [r4, #60]	; 0x3c
				TIM1->CCR4 = ConvertToPwm(ESC4_Speed);
 8002082:	4c13      	ldr	r4, [pc, #76]	; (80020d0 <TaskMotor+0x204>)
 8002084:	69b8      	ldr	r0, [r7, #24]
 8002086:	f7ff ff07 	bl	8001e98 <ConvertToPwm>
 800208a:	4603      	mov	r3, r0
 800208c:	6423      	str	r3, [r4, #64]	; 0x40
 800208e:	e017      	b.n	80020c0 <TaskMotor+0x1f4>
			}
			else
			{
				TIM1->CCR1 = ConvertToPwm(0);
 8002090:	4c0f      	ldr	r4, [pc, #60]	; (80020d0 <TaskMotor+0x204>)
 8002092:	2000      	movs	r0, #0
 8002094:	f7ff ff00 	bl	8001e98 <ConvertToPwm>
 8002098:	4603      	mov	r3, r0
 800209a:	6363      	str	r3, [r4, #52]	; 0x34
				TIM1->CCR2 = ConvertToPwm(0);
 800209c:	4c0c      	ldr	r4, [pc, #48]	; (80020d0 <TaskMotor+0x204>)
 800209e:	2000      	movs	r0, #0
 80020a0:	f7ff fefa 	bl	8001e98 <ConvertToPwm>
 80020a4:	4603      	mov	r3, r0
 80020a6:	63a3      	str	r3, [r4, #56]	; 0x38
				TIM1->CCR3 = ConvertToPwm(0);
 80020a8:	4c09      	ldr	r4, [pc, #36]	; (80020d0 <TaskMotor+0x204>)
 80020aa:	2000      	movs	r0, #0
 80020ac:	f7ff fef4 	bl	8001e98 <ConvertToPwm>
 80020b0:	4603      	mov	r3, r0
 80020b2:	63e3      	str	r3, [r4, #60]	; 0x3c
				TIM1->CCR4 = ConvertToPwm(0);
 80020b4:	4c06      	ldr	r4, [pc, #24]	; (80020d0 <TaskMotor+0x204>)
 80020b6:	2000      	movs	r0, #0
 80020b8:	f7ff feee 	bl	8001e98 <ConvertToPwm>
 80020bc:	4603      	mov	r3, r0
 80020be:	6423      	str	r3, [r4, #64]	; 0x40
			}
		}
		osMutexRelease(RemoteDataMutexHandle);
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <TaskMotor+0x208>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f00c feb3 	bl	800ee30 <osMutexRelease>
	{
 80020ca:	e72b      	b.n	8001f24 <TaskMotor+0x58>
 80020cc:	20000a6c 	.word	0x20000a6c
 80020d0:	40010000 	.word	0x40010000
 80020d4:	20000d1c 	.word	0x20000d1c
 80020d8:	20000314 	.word	0x20000314
 80020dc:	40021000 	.word	0x40021000
 80020e0:	20000316 	.word	0x20000316
 80020e4:	20000001 	.word	0x20000001
 80020e8:	20000308 	.word	0x20000308
 80020ec:	20000d30 	.word	0x20000d30
 80020f0:	2000030c 	.word	0x2000030c
 80020f4:	2000030e 	.word	0x2000030e
 80020f8:	66666667 	.word	0x66666667

080020fc <TaskPower>:
#include "Globals.h"

void TaskPower(void const *argument)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1; //Hz
 8002104:	2301      	movs	r3, #1
 8002106:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8002108:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	613b      	str	r3, [r7, #16]

	// ...

	xLastWakeTime = xTaskGetTickCount();
 8002114:	f00e f9d6 	bl	80104c4 <xTaskGetTickCount>
 8002118:	4603      	mov	r3, r0
 800211a:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for (;;)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 800211c:	f107 0308 	add.w	r3, r7, #8
 8002120:	6939      	ldr	r1, [r7, #16]
 8002122:	4618      	mov	r0, r3
 8002124:	f00d fffa 	bl	801011c <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8002128:	f00e f9cc 	bl	80104c4 <xTaskGetTickCount>
 800212c:	60f8      	str	r0, [r7, #12]
	{
 800212e:	e7f5      	b.n	800211c <TaskPower+0x20>

08002130 <TaskRemote>:
// Task Remote
// - Starts Interrupt UART communication with the Receiver
// - If a complete package of data has arrived from the Remote Controller to the Buffer,
//   it processes that and saves it to the corresponding Global variables.
void TaskRemote(void const *argument)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50; //Hz
 8002138:	2332      	movs	r3, #50	; 0x32
 800213a:	61bb      	str	r3, [r7, #24]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 800213c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	fbb2 f3f3 	udiv	r3, r2, r3
 8002146:	617b      	str	r3, [r7, #20]

	static uint16_t channelValues[IBUS_MAXCHANNELS];// Output values of the channels (1000 ... 2000)

	HAL_UART_Receive_DMA(&huart2, &Uart2Buffer, 64);
 8002148:	2240      	movs	r2, #64	; 0x40
 800214a:	4966      	ldr	r1, [pc, #408]	; (80022e4 <TaskRemote+0x1b4>)
 800214c:	4866      	ldr	r0, [pc, #408]	; (80022e8 <TaskRemote+0x1b8>)
 800214e:	f00b f9b4 	bl	800d4ba <HAL_UART_Receive_DMA>

	xLastWakeTime = xTaskGetTickCount();
 8002152:	f00e f9b7 	bl	80104c4 <xTaskGetTickCount>
 8002156:	4603      	mov	r3, r0
 8002158:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	while (1)
	{
		//Log("R-WS");
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 800215a:	f107 030c 	add.w	r3, r7, #12
 800215e:	6979      	ldr	r1, [r7, #20]
 8002160:	4618      	mov	r0, r3
 8002162:	f00d ffdb 	bl	801011c <vTaskDelayUntil>
		//Log("R-WE");

		TickType_t time = xTaskGetTickCount();
 8002166:	f00e f9ad 	bl	80104c4 <xTaskGetTickCount>
 800216a:	6138      	str	r0, [r7, #16]

		//Log("R-RBFS-WS");
		if (osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever) == osOK)
 800216c:	4b5f      	ldr	r3, [pc, #380]	; (80022ec <TaskRemote+0x1bc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f04f 31ff 	mov.w	r1, #4294967295
 8002174:	4618      	mov	r0, r3
 8002176:	f00c fec3 	bl	800ef00 <osSemaphoreWait>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1ec      	bne.n	800215a <TaskRemote+0x2a>
		{
			//Log("R-RBFS-WE");

			//Find the last complete 32 bit iBus packet in the 64 bit RemoteBuffer
			//Log("R-RBM-WS");
			if (osMutexWait(RemoteBufferMutexHandle, osWaitForever) == osOK)
 8002180:	4b5b      	ldr	r3, [pc, #364]	; (80022f0 <TaskRemote+0x1c0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f04f 31ff 	mov.w	r1, #4294967295
 8002188:	4618      	mov	r0, r3
 800218a:	f00c fe03 	bl	800ed94 <osMutexWait>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d12f      	bne.n	80021f4 <TaskRemote+0xc4>
			{
				//Log("R-RBM-WE");

				for (int i = 32; i >= 0; i--)
 8002194:	2320      	movs	r3, #32
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
 8002198:	e024      	b.n	80021e4 <TaskRemote+0xb4>
				{
					if (RemoteBuffer[i] == 0x20 && RemoteBuffer[i+1] == 0x40)
 800219a:	4a56      	ldr	r2, [pc, #344]	; (80022f4 <TaskRemote+0x1c4>)
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	4413      	add	r3, r2
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	d11a      	bne.n	80021de <TaskRemote+0xae>
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	3301      	adds	r3, #1
 80021ac:	4a51      	ldr	r2, [pc, #324]	; (80022f4 <TaskRemote+0x1c4>)
 80021ae:	5cd3      	ldrb	r3, [r2, r3]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b40      	cmp	r3, #64	; 0x40
 80021b4:	d113      	bne.n	80021de <TaskRemote+0xae>
					{
						for (int j = 0; j < IBUS_PACKET_SIZE; j++)
 80021b6:	2300      	movs	r3, #0
 80021b8:	623b      	str	r3, [r7, #32]
 80021ba:	e00d      	b.n	80021d8 <TaskRemote+0xa8>
							LastIbusPacket[j] = RemoteBuffer[i+j];
 80021bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	4413      	add	r3, r2
 80021c2:	4a4c      	ldr	r2, [pc, #304]	; (80022f4 <TaskRemote+0x1c4>)
 80021c4:	5cd3      	ldrb	r3, [r2, r3]
 80021c6:	b2d9      	uxtb	r1, r3
 80021c8:	4a4b      	ldr	r2, [pc, #300]	; (80022f8 <TaskRemote+0x1c8>)
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	4413      	add	r3, r2
 80021ce:	460a      	mov	r2, r1
 80021d0:	701a      	strb	r2, [r3, #0]
						for (int j = 0; j < IBUS_PACKET_SIZE; j++)
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	3301      	adds	r3, #1
 80021d6:	623b      	str	r3, [r7, #32]
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	2b1f      	cmp	r3, #31
 80021dc:	ddee      	ble.n	80021bc <TaskRemote+0x8c>
				for (int i = 32; i >= 0; i--)
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	3b01      	subs	r3, #1
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	dad7      	bge.n	800219a <TaskRemote+0x6a>
					}
				}

				//Log("R-RBM-RS");
				osMutexRelease(RemoteBufferMutexHandle);
 80021ea:	4b41      	ldr	r3, [pc, #260]	; (80022f0 <TaskRemote+0x1c0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f00c fe1e 	bl	800ee30 <osMutexRelease>
			// And cycle through the raw data and convert it to actual integer values
			// ibus pattern example:
			// i=0  1     2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21  22 23 24  25  26 27  28 28  30 31
			//   20 40    DB 5  DC 5  54 5  DC 5  E8 3  D0 7  D2 5  E8 3  DC 5  DC 5   DC 5   DC 5   DC 5   DC 5   DA F3
			// | Header | CH1 | CH2 | CH3 | CH4 | CH5 | CH6 | CH7 | CH8 | CH9 | CH10 | CH11 | CH12 | CH13 | CH14 | Checksum |
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 80021f4:	2300      	movs	r3, #0
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	e018      	b.n	800222c <TaskRemote+0xfc>
				channelValues[i] = (LastIbusPacket[3 + 2 * i] << 8) + LastIbusPacket[2 + 2 * i];
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	3303      	adds	r3, #3
 8002200:	4a3d      	ldr	r2, [pc, #244]	; (80022f8 <TaskRemote+0x1c8>)
 8002202:	5cd3      	ldrb	r3, [r2, r3]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	b29b      	uxth	r3, r3
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	b29a      	uxth	r2, r3
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	3301      	adds	r3, #1
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4939      	ldr	r1, [pc, #228]	; (80022f8 <TaskRemote+0x1c8>)
 8002214:	5ccb      	ldrb	r3, [r1, r3]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	b29b      	uxth	r3, r3
 800221a:	4413      	add	r3, r2
 800221c:	b299      	uxth	r1, r3
 800221e:	4a37      	ldr	r2, [pc, #220]	; (80022fc <TaskRemote+0x1cc>)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3301      	adds	r3, #1
 800222a:	61fb      	str	r3, [r7, #28]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	2b09      	cmp	r3, #9
 8002230:	dde3      	ble.n	80021fa <TaskRemote+0xca>

			// Setting the speed
			//Log("R-RDM-WS");
			if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8002232:	4b33      	ldr	r3, [pc, #204]	; (8002300 <TaskRemote+0x1d0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f04f 31ff 	mov.w	r1, #4294967295
 800223a:	4618      	mov	r0, r3
 800223c:	f00c fdaa 	bl	800ed94 <osMutexWait>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d148      	bne.n	80022d8 <TaskRemote+0x1a8>
//						sprintf(str, "%d ", channelValues[i]);
//						HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
//					}
//					HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

				Throttle_in = channelValues[THROTTLE_CHANNEL] - 1000;
 8002246:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <TaskRemote+0x1cc>)
 8002248:	889b      	ldrh	r3, [r3, #4]
 800224a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800224e:	b29a      	uxth	r2, r3
 8002250:	4b2c      	ldr	r3, [pc, #176]	; (8002304 <TaskRemote+0x1d4>)
 8002252:	801a      	strh	r2, [r3, #0]
				Pitch_in = channelValues[PITCH_CHANNEL] - 1500;
 8002254:	4b29      	ldr	r3, [pc, #164]	; (80022fc <TaskRemote+0x1cc>)
 8002256:	885b      	ldrh	r3, [r3, #2]
 8002258:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800225c:	b29b      	uxth	r3, r3
 800225e:	b21a      	sxth	r2, r3
 8002260:	4b29      	ldr	r3, [pc, #164]	; (8002308 <TaskRemote+0x1d8>)
 8002262:	801a      	strh	r2, [r3, #0]
				Roll_in = channelValues[ROLL_CHANNEL] - 1500;
 8002264:	4b25      	ldr	r3, [pc, #148]	; (80022fc <TaskRemote+0x1cc>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800226c:	b29b      	uxth	r3, r3
 800226e:	b21a      	sxth	r2, r3
 8002270:	4b26      	ldr	r3, [pc, #152]	; (800230c <TaskRemote+0x1dc>)
 8002272:	801a      	strh	r2, [r3, #0]
				Yaw_in = channelValues[YAW_CHANNEL] - 1500;
 8002274:	4b21      	ldr	r3, [pc, #132]	; (80022fc <TaskRemote+0x1cc>)
 8002276:	88db      	ldrh	r3, [r3, #6]
 8002278:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800227c:	b29b      	uxth	r3, r3
 800227e:	b21a      	sxth	r2, r3
 8002280:	4b23      	ldr	r3, [pc, #140]	; (8002310 <TaskRemote+0x1e0>)
 8002282:	801a      	strh	r2, [r3, #0]
				SWA = channelValues[SWA_CHANNEL] - 1000;
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <TaskRemote+0x1cc>)
 8002286:	891b      	ldrh	r3, [r3, #8]
 8002288:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800228c:	b29a      	uxth	r2, r3
 800228e:	4b21      	ldr	r3, [pc, #132]	; (8002314 <TaskRemote+0x1e4>)
 8002290:	801a      	strh	r2, [r3, #0]
				SWB = channelValues[SWB_CHANNEL] - 1000;
 8002292:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <TaskRemote+0x1cc>)
 8002294:	895b      	ldrh	r3, [r3, #10]
 8002296:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800229a:	b29a      	uxth	r2, r3
 800229c:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <TaskRemote+0x1e8>)
 800229e:	801a      	strh	r2, [r3, #0]
				SWC = channelValues[SWC_CHANNEL] - 1000;
 80022a0:	4b16      	ldr	r3, [pc, #88]	; (80022fc <TaskRemote+0x1cc>)
 80022a2:	899b      	ldrh	r3, [r3, #12]
 80022a4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	4b1c      	ldr	r3, [pc, #112]	; (800231c <TaskRemote+0x1ec>)
 80022ac:	801a      	strh	r2, [r3, #0]
				SWD = channelValues[SWD_CHANNEL] - 1000;
 80022ae:	4b13      	ldr	r3, [pc, #76]	; (80022fc <TaskRemote+0x1cc>)
 80022b0:	89db      	ldrh	r3, [r3, #14]
 80022b2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	4b19      	ldr	r3, [pc, #100]	; (8002320 <TaskRemote+0x1f0>)
 80022ba:	801a      	strh	r2, [r3, #0]
				VRA = channelValues[VRA_CHANNEL] - 1000;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <TaskRemote+0x1cc>)
 80022be:	8a1b      	ldrh	r3, [r3, #16]
 80022c0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	4b17      	ldr	r3, [pc, #92]	; (8002324 <TaskRemote+0x1f4>)
 80022c8:	801a      	strh	r2, [r3, #0]
				VRB = channelValues[VRB_CHANNEL] - 1000;
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <TaskRemote+0x1cc>)
 80022cc:	8a5b      	ldrh	r3, [r3, #18]
 80022ce:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	4b14      	ldr	r3, [pc, #80]	; (8002328 <TaskRemote+0x1f8>)
 80022d6:	801a      	strh	r2, [r3, #0]
				//HAL_UART_Transmit(&huart3, str1, 11, HAL_MAX_DELAY);


			}
			//Log("R-RDM-RS");
			osMutexRelease(RemoteDataMutexHandle);
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <TaskRemote+0x1d0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f00c fda7 	bl	800ee30 <osMutexRelease>
	{
 80022e2:	e73a      	b.n	800215a <TaskRemote+0x2a>
 80022e4:	2000045c 	.word	0x2000045c
 80022e8:	20000b8c 	.word	0x20000b8c
 80022ec:	20000d3c 	.word	0x20000d3c
 80022f0:	20000d2c 	.word	0x20000d2c
 80022f4:	2000049c 	.word	0x2000049c
 80022f8:	200004dc 	.word	0x200004dc
 80022fc:	2000069c 	.word	0x2000069c
 8002300:	20000d1c 	.word	0x20000d1c
 8002304:	20000308 	.word	0x20000308
 8002308:	2000030e 	.word	0x2000030e
 800230c:	2000030a 	.word	0x2000030a
 8002310:	20000312 	.word	0x20000312
 8002314:	20000314 	.word	0x20000314
 8002318:	20000316 	.word	0x20000316
 800231c:	20000318 	.word	0x20000318
 8002320:	2000031a 	.word	0x2000031a
 8002324:	2000031c 	.word	0x2000031c
 8002328:	2000031e 	.word	0x2000031e
 800232c:	00000000 	.word	0x00000000

08002330 <TaskSensorData>:
extern osMutexId ImuMutexHandle;
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;

void TaskSensorData(void const *argument)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 8002338:	23c8      	movs	r3, #200	; 0xc8
 800233a:	623b      	str	r3, [r7, #32]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 800233c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	fbb2 f3f3 	udiv	r3, r2, r3
 8002346:	61fb      	str	r3, [r7, #28]

	bool Recalibrate = false;
 8002348:	2300      	movs	r3, #0
 800234a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GyroLPF[2].T = 0.005;
	GyroLPF[2].f_cutoff = 100;
	LPF_Init(&(GyroLPF[2]));
	*/

	xLastWakeTime = xTaskGetTickCount();
 800234e:	f00e f8b9 	bl	80104c4 <xTaskGetTickCount>
 8002352:	4603      	mov	r3, r0
 8002354:	617b      	str	r3, [r7, #20]
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8002356:	f107 0314 	add.w	r3, r7, #20
 800235a:	69f9      	ldr	r1, [r7, #28]
 800235c:	4618      	mov	r0, r3
 800235e:	f00d fedd 	bl	801011c <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8002362:	f00e f8af 	bl	80104c4 <xTaskGetTickCount>
 8002366:	61b8      	str	r0, [r7, #24]

		// IMU Data
		if (IsImuAvailable)
 8002368:	4ba7      	ldr	r3, [pc, #668]	; (8002608 <TaskSensorData+0x2d8>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 808d 	beq.w	800248c <TaskSensorData+0x15c>
		{
			Log("SD-RDM-WS");
 8002372:	48a6      	ldr	r0, [pc, #664]	; (800260c <TaskSensorData+0x2dc>)
 8002374:	f7ff f806 	bl	8001384 <Log>
			if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8002378:	4ba5      	ldr	r3, [pc, #660]	; (8002610 <TaskSensorData+0x2e0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f04f 31ff 	mov.w	r1, #4294967295
 8002380:	4618      	mov	r0, r3
 8002382:	f00c fd07 	bl	800ed94 <osMutexWait>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10b      	bne.n	80023a4 <TaskSensorData+0x74>
			{
				Log("SD-RDM-WE");
 800238c:	48a1      	ldr	r0, [pc, #644]	; (8002614 <TaskSensorData+0x2e4>)
 800238e:	f7fe fff9 	bl	8001384 <Log>
				if (SWC > 990)
 8002392:	4ba1      	ldr	r3, [pc, #644]	; (8002618 <TaskSensorData+0x2e8>)
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	f240 32de 	movw	r2, #990	; 0x3de
 800239a:	4293      	cmp	r3, r2
 800239c:	d902      	bls.n	80023a4 <TaskSensorData+0x74>
				{
					Recalibrate = true;
 800239e:	2301      	movs	r3, #1
 80023a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}

			}
			Log("SD-RDM-RS");
 80023a4:	489d      	ldr	r0, [pc, #628]	; (800261c <TaskSensorData+0x2ec>)
 80023a6:	f7fe ffed 	bl	8001384 <Log>
			osMutexRelease(RemoteDataMutexHandle);
 80023aa:	4b99      	ldr	r3, [pc, #612]	; (8002610 <TaskSensorData+0x2e0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f00c fd3e 	bl	800ee30 <osMutexRelease>
			Log("SD-RDM-RE");
 80023b4:	489a      	ldr	r0, [pc, #616]	; (8002620 <TaskSensorData+0x2f0>)
 80023b6:	f7fe ffe5 	bl	8001384 <Log>

			//MPU9250_GetData(AccData, &TempData, GyroData, MagData, false);
			//MPU_readRawData(&hspi2, &MPU9250);
			MPU_calcAttitude(&hspi2, &MPU9250);
 80023ba:	499a      	ldr	r1, [pc, #616]	; (8002624 <TaskSensorData+0x2f4>)
 80023bc:	489a      	ldr	r0, [pc, #616]	; (8002628 <TaskSensorData+0x2f8>)
 80023be:	f005 f9d3 	bl	8007768 <MPU_calcAttitude>

			BMP280_measure(&BMP280);
 80023c2:	489a      	ldr	r0, [pc, #616]	; (800262c <TaskSensorData+0x2fc>)
 80023c4:	f004 f9cc 	bl	8006760 <BMP280_measure>

			Log("SD-IM-WS");
 80023c8:	4899      	ldr	r0, [pc, #612]	; (8002630 <TaskSensorData+0x300>)
 80023ca:	f7fe ffdb 	bl	8001384 <Log>
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 80023ce:	4b99      	ldr	r3, [pc, #612]	; (8002634 <TaskSensorData+0x304>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f04f 31ff 	mov.w	r1, #4294967295
 80023d6:	4618      	mov	r0, r3
 80023d8:	f00c fcdc 	bl	800ed94 <osMutexWait>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d149      	bne.n	8002476 <TaskSensorData+0x146>
			{
				Log("SD-IM-WE");
 80023e2:	4895      	ldr	r0, [pc, #596]	; (8002638 <TaskSensorData+0x308>)
 80023e4:	f7fe ffce 	bl	8001384 <Log>
				if (Recalibrate)
 80023e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00e      	beq.n	800240e <TaskSensorData+0xde>
				{
					HAL_UART_Transmit(&huart3, "CALIBRATING...\r\n", strlen("CALIBRATING...\r\n"), HAL_MAX_DELAY);
 80023f0:	f04f 33ff 	mov.w	r3, #4294967295
 80023f4:	2210      	movs	r2, #16
 80023f6:	4991      	ldr	r1, [pc, #580]	; (800263c <TaskSensorData+0x30c>)
 80023f8:	4891      	ldr	r0, [pc, #580]	; (8002640 <TaskSensorData+0x310>)
 80023fa:	f00a ff97 	bl	800d32c <HAL_UART_Transmit>
					MPU_calibrateGyro(&hspi2, &MPU9250, 20);
 80023fe:	2214      	movs	r2, #20
 8002400:	4988      	ldr	r1, [pc, #544]	; (8002624 <TaskSensorData+0x2f4>)
 8002402:	4889      	ldr	r0, [pc, #548]	; (8002628 <TaskSensorData+0x2f8>)
 8002404:	f004 ff08 	bl	8007218 <MPU_calibrateGyro>

					Recalibrate = false;
 8002408:	2300      	movs	r3, #0
 800240a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}

				AccData[0] = MPU9250.sensorData.ax;
 800240e:	4b85      	ldr	r3, [pc, #532]	; (8002624 <TaskSensorData+0x2f4>)
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	4a8c      	ldr	r2, [pc, #560]	; (8002644 <TaskSensorData+0x314>)
 8002414:	6013      	str	r3, [r2, #0]
				AccData[1] = MPU9250.sensorData.ay;
 8002416:	4b83      	ldr	r3, [pc, #524]	; (8002624 <TaskSensorData+0x2f4>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	4a8a      	ldr	r2, [pc, #552]	; (8002644 <TaskSensorData+0x314>)
 800241c:	6053      	str	r3, [r2, #4]
				AccData[2] = MPU9250.sensorData.az;
 800241e:	4b81      	ldr	r3, [pc, #516]	; (8002624 <TaskSensorData+0x2f4>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4a88      	ldr	r2, [pc, #544]	; (8002644 <TaskSensorData+0x314>)
 8002424:	6093      	str	r3, [r2, #8]
				TempData = MPU9250.sensorData.temp;
 8002426:	4b7f      	ldr	r3, [pc, #508]	; (8002624 <TaskSensorData+0x2f4>)
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	4a87      	ldr	r2, [pc, #540]	; (8002648 <TaskSensorData+0x318>)
 800242c:	6013      	str	r3, [r2, #0]
				GyroData[0] = MPU9250.sensorData.gx;
 800242e:	4b7d      	ldr	r3, [pc, #500]	; (8002624 <TaskSensorData+0x2f4>)
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	4a86      	ldr	r2, [pc, #536]	; (800264c <TaskSensorData+0x31c>)
 8002434:	6013      	str	r3, [r2, #0]
				GyroData[1] = MPU9250.sensorData.gy;
 8002436:	4b7b      	ldr	r3, [pc, #492]	; (8002624 <TaskSensorData+0x2f4>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a84      	ldr	r2, [pc, #528]	; (800264c <TaskSensorData+0x31c>)
 800243c:	6053      	str	r3, [r2, #4]
				GyroData[2] = MPU9250.sensorData.gz;
 800243e:	4b79      	ldr	r3, [pc, #484]	; (8002624 <TaskSensorData+0x2f4>)
 8002440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002442:	4a82      	ldr	r2, [pc, #520]	; (800264c <TaskSensorData+0x31c>)
 8002444:	6093      	str	r3, [r2, #8]
				//GyroData[0] = LPF_Update(&(GyroLPF[0]), MPU9250.sensorData.gx);
				//GyroData[1] = LPF_Update(&(GyroLPF[1]), MPU9250.sensorData.gy);
				//GyroData[2] = LPF_Update(&(GyroLPF[2]), MPU9250.sensorData.gz);
				Roll_measured = MPU9250.attitude.roll;
 8002446:	4b77      	ldr	r3, [pc, #476]	; (8002624 <TaskSensorData+0x2f4>)
 8002448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244a:	4a81      	ldr	r2, [pc, #516]	; (8002650 <TaskSensorData+0x320>)
 800244c:	6013      	str	r3, [r2, #0]
				Pitch_measured = MPU9250.attitude.pitch;
 800244e:	4b75      	ldr	r3, [pc, #468]	; (8002624 <TaskSensorData+0x2f4>)
 8002450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002452:	4a80      	ldr	r2, [pc, #512]	; (8002654 <TaskSensorData+0x324>)
 8002454:	6013      	str	r3, [r2, #0]
				Yaw_measured = MPU9250.attitude.yaw;
 8002456:	4b73      	ldr	r3, [pc, #460]	; (8002624 <TaskSensorData+0x2f4>)
 8002458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800245a:	4a7f      	ldr	r2, [pc, #508]	; (8002658 <TaskSensorData+0x328>)
 800245c:	6013      	str	r3, [r2, #0]

				BMP_Temp = BMP280.measurement.temperature;
 800245e:	4b73      	ldr	r3, [pc, #460]	; (800262c <TaskSensorData+0x2fc>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	4a7e      	ldr	r2, [pc, #504]	; (800265c <TaskSensorData+0x32c>)
 8002464:	6013      	str	r3, [r2, #0]
				BMP_Pres = BMP280.measurement.pressure;
 8002466:	4b71      	ldr	r3, [pc, #452]	; (800262c <TaskSensorData+0x2fc>)
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	4a7d      	ldr	r2, [pc, #500]	; (8002660 <TaskSensorData+0x330>)
 800246c:	6013      	str	r3, [r2, #0]
				BMP_Alt = BMP280.measurement.altitude;
 800246e:	4b6f      	ldr	r3, [pc, #444]	; (800262c <TaskSensorData+0x2fc>)
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	4a7c      	ldr	r2, [pc, #496]	; (8002664 <TaskSensorData+0x334>)
 8002474:	6013      	str	r3, [r2, #0]

			}
			Log("SD-IM-RS");
 8002476:	487c      	ldr	r0, [pc, #496]	; (8002668 <TaskSensorData+0x338>)
 8002478:	f7fe ff84 	bl	8001384 <Log>
			osMutexRelease(ImuMutexHandle);
 800247c:	4b6d      	ldr	r3, [pc, #436]	; (8002634 <TaskSensorData+0x304>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f00c fcd5 	bl	800ee30 <osMutexRelease>
			Log("SD-IM-RE");
 8002486:	4879      	ldr	r0, [pc, #484]	; (800266c <TaskSensorData+0x33c>)
 8002488:	f7fe ff7c 	bl	8001384 <Log>
		}

		// Magnetometer Data
		if (IsMagnAvailable)
 800248c:	4b78      	ldr	r3, [pc, #480]	; (8002670 <TaskSensorData+0x340>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 8148 	beq.w	8002726 <TaskSensorData+0x3f6>
		{
			Log("SD-MM-WS");
 8002496:	4877      	ldr	r0, [pc, #476]	; (8002674 <TaskSensorData+0x344>)
 8002498:	f7fe ff74 	bl	8001384 <Log>
			if (osMutexWait(MagnMutexHandle, osWaitForever) == osOK)
 800249c:	4b76      	ldr	r3, [pc, #472]	; (8002678 <TaskSensorData+0x348>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	4618      	mov	r0, r3
 80024a6:	f00c fc75 	bl	800ed94 <osMutexWait>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f040 812f 	bne.w	8002710 <TaskSensorData+0x3e0>
			{
				Log("SD-MM-WE");
 80024b2:	4872      	ldr	r0, [pc, #456]	; (800267c <TaskSensorData+0x34c>)
 80024b4:	f7fe ff66 	bl	8001384 <Log>

				struct Vector res = HMC5883L_readRaw();
 80024b8:	f003 fe36 	bl	8006128 <HMC5883L_readRaw>
 80024bc:	eef0 6a40 	vmov.f32	s13, s0
 80024c0:	eeb0 7a60 	vmov.f32	s14, s1
 80024c4:	eef0 7a41 	vmov.f32	s15, s2
 80024c8:	edc7 6a02 	vstr	s13, [r7, #8]
 80024cc:	ed87 7a03 	vstr	s14, [r7, #12]
 80024d0:	edc7 7a04 	vstr	s15, [r7, #16]
				MAG_X_RAW = res.XAxis;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	4a6a      	ldr	r2, [pc, #424]	; (8002680 <TaskSensorData+0x350>)
 80024d8:	6013      	str	r3, [r2, #0]
				MAG_Y_RAW = res.YAxis;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4a69      	ldr	r2, [pc, #420]	; (8002684 <TaskSensorData+0x354>)
 80024de:	6013      	str	r3, [r2, #0]
				MAG_Z_RAW = res.ZAxis;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4a69      	ldr	r2, [pc, #420]	; (8002688 <TaskSensorData+0x358>)
 80024e4:	6013      	str	r3, [r2, #0]
				//MAG_Y_NORM = MAG_Y_RAW / magnitude;
				//MAG_Z_NORM = MAG_Z_RAW / magnitude;

				//MAG_dir = atan2f(MAG_X_NORM, MAG_Y_NORM)*180.0f/M_PI;

				if (MAG_Y_RAW != 0)
 80024e6:	4b67      	ldr	r3, [pc, #412]	; (8002684 <TaskSensorData+0x354>)
 80024e8:	edd3 7a00 	vldr	s15, [r3]
 80024ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f4:	d068      	beq.n	80025c8 <TaskSensorData+0x298>
				{
					if (MAG_Y_RAW > 0)
 80024f6:	4b63      	ldr	r3, [pc, #396]	; (8002684 <TaskSensorData+0x354>)
 80024f8:	edd3 7a00 	vldr	s15, [r3]
 80024fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002504:	dd2b      	ble.n	800255e <TaskSensorData+0x22e>
						MAG_dir = 90.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 8002506:	4b5e      	ldr	r3, [pc, #376]	; (8002680 <TaskSensorData+0x350>)
 8002508:	edd3 7a00 	vldr	s15, [r3]
 800250c:	4b5d      	ldr	r3, [pc, #372]	; (8002684 <TaskSensorData+0x354>)
 800250e:	ed93 7a00 	vldr	s14, [r3]
 8002512:	eef0 0a47 	vmov.f32	s1, s14
 8002516:	eeb0 0a67 	vmov.f32	s0, s15
 800251a:	f014 fa4d 	bl	80169b8 <atan2f>
 800251e:	eef0 7a40 	vmov.f32	s15, s0
 8002522:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800268c <TaskSensorData+0x35c>
 8002526:	ee67 7a87 	vmul.f32	s15, s15, s14
 800252a:	ee17 0a90 	vmov	r0, s15
 800252e:	f7fe f833 	bl	8000598 <__aeabi_f2d>
 8002532:	a331      	add	r3, pc, #196	; (adr r3, 80025f8 <TaskSensorData+0x2c8>)
 8002534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002538:	f7fe f9b0 	bl	800089c <__aeabi_ddiv>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	f04f 0000 	mov.w	r0, #0
 8002544:	4952      	ldr	r1, [pc, #328]	; (8002690 <TaskSensorData+0x360>)
 8002546:	f7fd fec7 	bl	80002d8 <__aeabi_dsub>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	f7fe fb71 	bl	8000c38 <__aeabi_d2f>
 8002556:	4603      	mov	r3, r0
 8002558:	4a4e      	ldr	r2, [pc, #312]	; (8002694 <TaskSensorData+0x364>)
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	e0a7      	b.n	80026ae <TaskSensorData+0x37e>
					else if (MAG_Y_RAW < 0)
 800255e:	4b49      	ldr	r3, [pc, #292]	; (8002684 <TaskSensorData+0x354>)
 8002560:	edd3 7a00 	vldr	s15, [r3]
 8002564:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256c:	f140 809f 	bpl.w	80026ae <TaskSensorData+0x37e>
						MAG_dir = 270.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 8002570:	4b43      	ldr	r3, [pc, #268]	; (8002680 <TaskSensorData+0x350>)
 8002572:	edd3 7a00 	vldr	s15, [r3]
 8002576:	4b43      	ldr	r3, [pc, #268]	; (8002684 <TaskSensorData+0x354>)
 8002578:	ed93 7a00 	vldr	s14, [r3]
 800257c:	eef0 0a47 	vmov.f32	s1, s14
 8002580:	eeb0 0a67 	vmov.f32	s0, s15
 8002584:	f014 fa18 	bl	80169b8 <atan2f>
 8002588:	eef0 7a40 	vmov.f32	s15, s0
 800258c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800268c <TaskSensorData+0x35c>
 8002590:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002594:	ee17 0a90 	vmov	r0, s15
 8002598:	f7fd fffe 	bl	8000598 <__aeabi_f2d>
 800259c:	a316      	add	r3, pc, #88	; (adr r3, 80025f8 <TaskSensorData+0x2c8>)
 800259e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a2:	f7fe f97b 	bl	800089c <__aeabi_ddiv>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	a115      	add	r1, pc, #84	; (adr r1, 8002600 <TaskSensorData+0x2d0>)
 80025ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025b0:	f7fd fe92 	bl	80002d8 <__aeabi_dsub>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	f7fe fb3c 	bl	8000c38 <__aeabi_d2f>
 80025c0:	4603      	mov	r3, r0
 80025c2:	4a34      	ldr	r2, [pc, #208]	; (8002694 <TaskSensorData+0x364>)
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	e072      	b.n	80026ae <TaskSensorData+0x37e>
				}
				else if (MAG_Y_RAW == 0)
 80025c8:	4b2e      	ldr	r3, [pc, #184]	; (8002684 <TaskSensorData+0x354>)
 80025ca:	edd3 7a00 	vldr	s15, [r3]
 80025ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d6:	d16a      	bne.n	80026ae <TaskSensorData+0x37e>
				{
					if (MAG_X_RAW > 0)
 80025d8:	4b29      	ldr	r3, [pc, #164]	; (8002680 <TaskSensorData+0x350>)
 80025da:	edd3 7a00 	vldr	s15, [r3]
 80025de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e6:	dd57      	ble.n	8002698 <TaskSensorData+0x368>
						MAG_dir = 0.0f;
 80025e8:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <TaskSensorData+0x364>)
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	e05d      	b.n	80026ae <TaskSensorData+0x37e>
 80025f2:	bf00      	nop
 80025f4:	f3af 8000 	nop.w
 80025f8:	54442d18 	.word	0x54442d18
 80025fc:	400921fb 	.word	0x400921fb
 8002600:	00000000 	.word	0x00000000
 8002604:	4070e000 	.word	0x4070e000
 8002608:	20000214 	.word	0x20000214
 800260c:	08017bd4 	.word	0x08017bd4
 8002610:	20000d1c 	.word	0x20000d1c
 8002614:	08017be0 	.word	0x08017be0
 8002618:	20000318 	.word	0x20000318
 800261c:	08017bec 	.word	0x08017bec
 8002620:	08017bf8 	.word	0x08017bf8
 8002624:	20000320 	.word	0x20000320
 8002628:	20000a08 	.word	0x20000a08
 800262c:	200003bc 	.word	0x200003bc
 8002630:	08017c04 	.word	0x08017c04
 8002634:	20000d20 	.word	0x20000d20
 8002638:	08017c10 	.word	0x08017c10
 800263c:	08017c1c 	.word	0x08017c1c
 8002640:	20000c14 	.word	0x20000c14
 8002644:	20000394 	.word	0x20000394
 8002648:	200003a0 	.word	0x200003a0
 800264c:	200003a4 	.word	0x200003a4
 8002650:	200003b0 	.word	0x200003b0
 8002654:	200003b4 	.word	0x200003b4
 8002658:	200003b8 	.word	0x200003b8
 800265c:	200003ec 	.word	0x200003ec
 8002660:	200003f0 	.word	0x200003f0
 8002664:	200003f4 	.word	0x200003f4
 8002668:	08017c30 	.word	0x08017c30
 800266c:	08017c3c 	.word	0x08017c3c
 8002670:	20000215 	.word	0x20000215
 8002674:	08017c48 	.word	0x08017c48
 8002678:	20000d18 	.word	0x20000d18
 800267c:	08017c54 	.word	0x08017c54
 8002680:	20000410 	.word	0x20000410
 8002684:	20000414 	.word	0x20000414
 8002688:	20000418 	.word	0x20000418
 800268c:	43340000 	.word	0x43340000
 8002690:	40568000 	.word	0x40568000
 8002694:	2000041c 	.word	0x2000041c
					else if (MAG_X_RAW < 0)
 8002698:	4b64      	ldr	r3, [pc, #400]	; (800282c <TaskSensorData+0x4fc>)
 800269a:	edd3 7a00 	vldr	s15, [r3]
 800269e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a6:	d502      	bpl.n	80026ae <TaskSensorData+0x37e>
						MAG_dir = 180.0f;
 80026a8:	4b61      	ldr	r3, [pc, #388]	; (8002830 <TaskSensorData+0x500>)
 80026aa:	4a62      	ldr	r2, [pc, #392]	; (8002834 <TaskSensorData+0x504>)
 80026ac:	601a      	str	r2, [r3, #0]

				}

				MAG_dir += declination;
 80026ae:	4b60      	ldr	r3, [pc, #384]	; (8002830 <TaskSensorData+0x500>)
 80026b0:	ed93 7a00 	vldr	s14, [r3]
 80026b4:	4b60      	ldr	r3, [pc, #384]	; (8002838 <TaskSensorData+0x508>)
 80026b6:	edd3 7a00 	vldr	s15, [r3]
 80026ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026be:	4b5c      	ldr	r3, [pc, #368]	; (8002830 <TaskSensorData+0x500>)
 80026c0:	edc3 7a00 	vstr	s15, [r3]

				if (MAG_dir < 0)
 80026c4:	4b5a      	ldr	r3, [pc, #360]	; (8002830 <TaskSensorData+0x500>)
 80026c6:	edd3 7a00 	vldr	s15, [r3]
 80026ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d2:	d509      	bpl.n	80026e8 <TaskSensorData+0x3b8>
					MAG_dir += 360.0f;
 80026d4:	4b56      	ldr	r3, [pc, #344]	; (8002830 <TaskSensorData+0x500>)
 80026d6:	edd3 7a00 	vldr	s15, [r3]
 80026da:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800283c <TaskSensorData+0x50c>
 80026de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026e2:	4b53      	ldr	r3, [pc, #332]	; (8002830 <TaskSensorData+0x500>)
 80026e4:	edc3 7a00 	vstr	s15, [r3]
				if (MAG_dir > 360.0f)
 80026e8:	4b51      	ldr	r3, [pc, #324]	; (8002830 <TaskSensorData+0x500>)
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800283c <TaskSensorData+0x50c>
 80026f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fa:	dd09      	ble.n	8002710 <TaskSensorData+0x3e0>
					MAG_dir -= 360.0f;
 80026fc:	4b4c      	ldr	r3, [pc, #304]	; (8002830 <TaskSensorData+0x500>)
 80026fe:	edd3 7a00 	vldr	s15, [r3]
 8002702:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800283c <TaskSensorData+0x50c>
 8002706:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800270a:	4b49      	ldr	r3, [pc, #292]	; (8002830 <TaskSensorData+0x500>)
 800270c:	edc3 7a00 	vstr	s15, [r3]
			}
			Log("SD-MM-RS");
 8002710:	484b      	ldr	r0, [pc, #300]	; (8002840 <TaskSensorData+0x510>)
 8002712:	f7fe fe37 	bl	8001384 <Log>
			osMutexRelease(MagnMutexHandle);
 8002716:	4b4b      	ldr	r3, [pc, #300]	; (8002844 <TaskSensorData+0x514>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f00c fb88 	bl	800ee30 <osMutexRelease>
			Log("SD-MM-RE");
 8002720:	4849      	ldr	r0, [pc, #292]	; (8002848 <TaskSensorData+0x518>)
 8002722:	f7fe fe2f 	bl	8001384 <Log>
		}

		// Distance Data
		if (IsDistAvailable)
 8002726:	4b49      	ldr	r3, [pc, #292]	; (800284c <TaskSensorData+0x51c>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d046      	beq.n	80027bc <TaskSensorData+0x48c>
		{
			//Log("SD-DA");
			if (!HCSR04.Triggered)
 800272e:	4b48      	ldr	r3, [pc, #288]	; (8002850 <TaskSensorData+0x520>)
 8002730:	7d1b      	ldrb	r3, [r3, #20]
 8002732:	f083 0301 	eor.w	r3, r3, #1
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d006      	beq.n	800274a <TaskSensorData+0x41a>
			{
				HCSR04_Trigger(&HCSR04);
 800273c:	4844      	ldr	r0, [pc, #272]	; (8002850 <TaskSensorData+0x520>)
 800273e:	f005 fad9 	bl	8007cf4 <HCSR04_Trigger>
				HCSR04.Triggered = true;
 8002742:	4b43      	ldr	r3, [pc, #268]	; (8002850 <TaskSensorData+0x520>)
 8002744:	2201      	movs	r2, #1
 8002746:	751a      	strb	r2, [r3, #20]
 8002748:	e038      	b.n	80027bc <TaskSensorData+0x48c>
			}
			else if (HCSR04.Triggered)
 800274a:	4b41      	ldr	r3, [pc, #260]	; (8002850 <TaskSensorData+0x520>)
 800274c:	7d1b      	ldrb	r3, [r3, #20]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d034      	beq.n	80027bc <TaskSensorData+0x48c>
			{
				Log("SD-DS-WS");
 8002752:	4840      	ldr	r0, [pc, #256]	; (8002854 <TaskSensorData+0x524>)
 8002754:	f7fe fe16 	bl	8001384 <Log>
				if (osSemaphoreWait(DistSemaphoreHandle, 0) == osOK)
 8002758:	4b3f      	ldr	r3, [pc, #252]	; (8002858 <TaskSensorData+0x528>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f00c fbce 	bl	800ef00 <osSemaphoreWait>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d128      	bne.n	80027bc <TaskSensorData+0x48c>
				{
					Log("SD-DS-WE");
 800276a:	483c      	ldr	r0, [pc, #240]	; (800285c <TaskSensorData+0x52c>)
 800276c:	f7fe fe0a 	bl	8001384 <Log>
					Log("SD-DM-WS");
 8002770:	483b      	ldr	r0, [pc, #236]	; (8002860 <TaskSensorData+0x530>)
 8002772:	f7fe fe07 	bl	8001384 <Log>
					if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 8002776:	4b3b      	ldr	r3, [pc, #236]	; (8002864 <TaskSensorData+0x534>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f04f 31ff 	mov.w	r1, #4294967295
 800277e:	4618      	mov	r0, r3
 8002780:	f00c fb08 	bl	800ed94 <osMutexWait>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <TaskSensorData+0x470>
					{
						Log("SD-DM-WE");
 800278a:	4837      	ldr	r0, [pc, #220]	; (8002868 <TaskSensorData+0x538>)
 800278c:	f7fe fdfa 	bl	8001384 <Log>

						Distance = HCSR04_Read(&HCSR04);
 8002790:	482f      	ldr	r0, [pc, #188]	; (8002850 <TaskSensorData+0x520>)
 8002792:	f005 faca 	bl	8007d2a <HCSR04_Read>
 8002796:	eef0 7a40 	vmov.f32	s15, s0
 800279a:	4b34      	ldr	r3, [pc, #208]	; (800286c <TaskSensorData+0x53c>)
 800279c:	edc3 7a00 	vstr	s15, [r3]
					}
					Log("SD-DM-RS");
 80027a0:	4833      	ldr	r0, [pc, #204]	; (8002870 <TaskSensorData+0x540>)
 80027a2:	f7fe fdef 	bl	8001384 <Log>
					osMutexRelease(DistMutexHandle);
 80027a6:	4b2f      	ldr	r3, [pc, #188]	; (8002864 <TaskSensorData+0x534>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f00c fb40 	bl	800ee30 <osMutexRelease>
					Log("SD-DM-RE");
 80027b0:	4830      	ldr	r0, [pc, #192]	; (8002874 <TaskSensorData+0x544>)
 80027b2:	f7fe fde7 	bl	8001384 <Log>

					HCSR04.Triggered = false;
 80027b6:	4b26      	ldr	r3, [pc, #152]	; (8002850 <TaskSensorData+0x520>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	751a      	strb	r2, [r3, #20]
				}
			}
		}

		// GPS Data
		if (IsGpsAvailable)
 80027bc:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <TaskSensorData+0x548>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f43f adc8 	beq.w	8002356 <TaskSensorData+0x26>
		{
			//Log("SD-GA");
			if (osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever) == osOK)
 80027c6:	4b2d      	ldr	r3, [pc, #180]	; (800287c <TaskSensorData+0x54c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f04f 31ff 	mov.w	r1, #4294967295
 80027ce:	4618      	mov	r0, r3
 80027d0:	f00c fb96 	bl	800ef00 <osSemaphoreWait>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f47f adbd 	bne.w	8002356 <TaskSensorData+0x26>
			{
				if (ProcessGPSPackageBuffer)
 80027dc:	4b28      	ldr	r3, [pc, #160]	; (8002880 <TaskSensorData+0x550>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f43f adb7 	beq.w	8002356 <TaskSensorData+0x26>
				{
					//HAL_UART_Transmit(&huart3, GPSPackageBuffer, GPS_BUFFSIZE, HAL_MAX_DELAY);
					//HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

					if (osMutexWait(GpsDataMutexHandle, osWaitForever) == osOK)
 80027e8:	4b26      	ldr	r3, [pc, #152]	; (8002884 <TaskSensorData+0x554>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f04f 31ff 	mov.w	r1, #4294967295
 80027f0:	4618      	mov	r0, r3
 80027f2:	f00c facf 	bl	800ed94 <osMutexWait>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10d      	bne.n	8002818 <TaskSensorData+0x4e8>
					{
						if (GPS_validate((char*) GPSPackageBuffer))
 80027fc:	4822      	ldr	r0, [pc, #136]	; (8002888 <TaskSensorData+0x558>)
 80027fe:	f003 fac3 	bl	8005d88 <GPS_validate>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <TaskSensorData+0x4de>
							GPS_parse((char*) GPSPackageBuffer);
 8002808:	481f      	ldr	r0, [pc, #124]	; (8002888 <TaskSensorData+0x558>)
 800280a:	f003 fb1f 	bl	8005e4c <GPS_parse>
						memset(GPSPackageBuffer, 0, sizeof(GPSPackageBuffer));
 800280e:	22ff      	movs	r2, #255	; 0xff
 8002810:	2100      	movs	r1, #0
 8002812:	481d      	ldr	r0, [pc, #116]	; (8002888 <TaskSensorData+0x558>)
 8002814:	f00f ff9b 	bl	801274e <memset>
					}
					osMutexRelease(GpsDataMutexHandle);
 8002818:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <TaskSensorData+0x554>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f00c fb07 	bl	800ee30 <osMutexRelease>

					ProcessGPSPackageBuffer = false;
 8002822:	4b17      	ldr	r3, [pc, #92]	; (8002880 <TaskSensorData+0x550>)
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]
	{
 8002828:	e595      	b.n	8002356 <TaskSensorData+0x26>
 800282a:	bf00      	nop
 800282c:	20000410 	.word	0x20000410
 8002830:	2000041c 	.word	0x2000041c
 8002834:	43340000 	.word	0x43340000
 8002838:	20000004 	.word	0x20000004
 800283c:	43b40000 	.word	0x43b40000
 8002840:	08017c60 	.word	0x08017c60
 8002844:	20000d18 	.word	0x20000d18
 8002848:	08017c6c 	.word	0x08017c6c
 800284c:	20000216 	.word	0x20000216
 8002850:	20000420 	.word	0x20000420
 8002854:	08017c78 	.word	0x08017c78
 8002858:	20000d34 	.word	0x20000d34
 800285c:	08017c84 	.word	0x08017c84
 8002860:	08017c90 	.word	0x08017c90
 8002864:	20000d28 	.word	0x20000d28
 8002868:	08017c9c 	.word	0x08017c9c
 800286c:	20000458 	.word	0x20000458
 8002870:	08017ca8 	.word	0x08017ca8
 8002874:	08017cb4 	.word	0x08017cb4
 8002878:	20000217 	.word	0x20000217
 800287c:	20000d38 	.word	0x20000d38
 8002880:	2000065b 	.word	0x2000065b
 8002884:	20000d24 	.word	0x20000d24
 8002888:	2000055c 	.word	0x2000055c

0800288c <TaskTune>:
extern osMutexId ImuMutexHandle;;
extern osMutexId RemoteDataMutexHandle;


void TaskTune(void const *argument)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b0ba      	sub	sp, #232	; 0xe8
 8002890:	af02      	add	r7, sp, #8
 8002892:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100; //Hz
 8002894:	2364      	movs	r3, #100	; 0x64
 8002896:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 800289a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800289e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

	//HAL_SPI_Receive_IT(&hspi1, Spi1Buffer, 64);

	uint8_t SpiTuneData1[64];
	uint8_t SpiTuneData2[64];
	SpiTuneData1[0] = (uint8_t)('t');
 80028aa:	2374      	movs	r3, #116	; 0x74
 80028ac:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	SpiTuneData2[0] = (uint8_t)('u');
 80028b0:	2375      	movs	r3, #117	; 0x75
 80028b2:	773b      	strb	r3, [r7, #28]


	// PID controllers to be tuned
	PIDController* PID1 = &PID_Roll_Attitude;
 80028b4:	4bb3      	ldr	r3, [pc, #716]	; (8002b84 <TaskTune+0x2f8>)
 80028b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	int16_t PID1_ref_devided; // Calculated in every cycle
	float PID1_ref_devided_float; // Needed only for single loop tuning
	float* PID1_meas = &Roll_measured;
 80028ba:	4bb3      	ldr	r3, [pc, #716]	; (8002b88 <TaskTune+0x2fc>)
 80028bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	float* PID1_out = &(PID1->out);
 80028c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028c4:	3338      	adds	r3, #56	; 0x38
 80028c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	PIDController* PID2 = &PID_Roll_AngVel;
 80028ca:	4bb0      	ldr	r3, [pc, #704]	; (8002b8c <TaskTune+0x300>)
 80028cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	float* PID2_ref = &(PID1->out);
 80028d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028d4:	3338      	adds	r3, #56	; 0x38
 80028d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	float* PID2_meas = GyroData;
 80028da:	4bad      	ldr	r3, [pc, #692]	; (8002b90 <TaskTune+0x304>)
 80028dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	int16_t* PID2_out = &Roll_controlled;
 80028e0:	4bac      	ldr	r3, [pc, #688]	; (8002b94 <TaskTune+0x308>)
 80028e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	PIDController* PID3 = &PID_Pitch_Attitude;
 80028e6:	4bac      	ldr	r3, [pc, #688]	; (8002b98 <TaskTune+0x30c>)
 80028e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	int16_t PID3_ref_devided; // Calculated in every cycle
	float PID3_ref_devided_float; // Needed only for single loop tuning
	float* PID3_meas = &Pitch_measured;
 80028ec:	4bab      	ldr	r3, [pc, #684]	; (8002b9c <TaskTune+0x310>)
 80028ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float* PID3_out = &(PID3->out);
 80028f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028f6:	3338      	adds	r3, #56	; 0x38
 80028f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	PIDController* PID4 = &PID_Pitch_AngVel;
 80028fc:	4ba8      	ldr	r3, [pc, #672]	; (8002ba0 <TaskTune+0x314>)
 80028fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float* PID4_ref = &(PID3->out);
 8002902:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002906:	3338      	adds	r3, #56	; 0x38
 8002908:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float* PID4_meas = GyroData+1;
 800290c:	4ba5      	ldr	r3, [pc, #660]	; (8002ba4 <TaskTune+0x318>)
 800290e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	int16_t* PID4_out = &Pitch_controlled;
 8002912:	4ba5      	ldr	r3, [pc, #660]	; (8002ba8 <TaskTune+0x31c>)
 8002914:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0


	xLastWakeTime = xTaskGetTickCount();
 8002918:	f00d fdd4 	bl	80104c4 <xTaskGetTickCount>
 800291c:	4603      	mov	r3, r0
 800291e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8002922:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002926:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800292a:	4618      	mov	r0, r3
 800292c:	f00d fbf6 	bl	801011c <vTaskDelayUntil>

		if (Tune)
 8002930:	4b9e      	ldr	r3, [pc, #632]	; (8002bac <TaskTune+0x320>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 8174 	beq.w	8002c22 <TaskTune+0x396>
		{
			if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK
 800293a:	4b9d      	ldr	r3, [pc, #628]	; (8002bb0 <TaskTune+0x324>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f04f 31ff 	mov.w	r1, #4294967295
 8002942:	4618      	mov	r0, r3
 8002944:	f00c fa26 	bl	800ed94 <osMutexWait>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	f040 815a 	bne.w	8002c04 <TaskTune+0x378>
					&& osMutexWait(ImuMutexHandle, osWaitForever) == osOK
 8002950:	4b98      	ldr	r3, [pc, #608]	; (8002bb4 <TaskTune+0x328>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	4618      	mov	r0, r3
 800295a:	f00c fa1b 	bl	800ed94 <osMutexWait>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	f040 814f 	bne.w	8002c04 <TaskTune+0x378>
					&& osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8002966:	4b94      	ldr	r3, [pc, #592]	; (8002bb8 <TaskTune+0x32c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f04f 31ff 	mov.w	r1, #4294967295
 800296e:	4618      	mov	r0, r3
 8002970:	f00c fa10 	bl	800ed94 <osMutexWait>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	f040 8144 	bne.w	8002c04 <TaskTune+0x378>
//				else
//					Tune_single_true_double_false = true;

				// Pack PID1 data
				//Gains
				FloatToUint8s(&(PID1->Kp), SpiTuneData1, 1);
 800297c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002980:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002984:	2201      	movs	r2, #1
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe fd24 	bl	80013d4 <FloatToUint8s>
				FloatToUint8s(&(PID1->Ki), SpiTuneData1, 5);
 800298c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002990:	3304      	adds	r3, #4
 8002992:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002996:	2205      	movs	r2, #5
 8002998:	4618      	mov	r0, r3
 800299a:	f7fe fd1b 	bl	80013d4 <FloatToUint8s>
				FloatToUint8s(&(PID1->Kd), SpiTuneData1, 9);
 800299e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029a2:	3308      	adds	r3, #8
 80029a4:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80029a8:	2209      	movs	r2, #9
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe fd12 	bl	80013d4 <FloatToUint8s>
				// Reference -> Calculated in every cycle
				//PID1_ref_devided = Roll_in / 25;
				PID1_ref_devided = SWD / 50;
 80029b0:	4b82      	ldr	r3, [pc, #520]	; (8002bbc <TaskTune+0x330>)
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	4a82      	ldr	r2, [pc, #520]	; (8002bc0 <TaskTune+0x334>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	091b      	lsrs	r3, r3, #4
 80029bc:	b29b      	uxth	r3, r3
 80029be:	b21b      	sxth	r3, r3
 80029c0:	837b      	strh	r3, [r7, #26]
				Int16ToUint8s(&PID1_ref_devided, SpiTuneData1, 13);
 80029c2:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80029c6:	f107 031a 	add.w	r3, r7, #26
 80029ca:	220d      	movs	r2, #13
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe fd39 	bl	8001444 <Int16ToUint8s>
				// Measurement
				FloatToUint8s(PID1_meas, SpiTuneData1, 15);
 80029d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80029d6:	220f      	movs	r2, #15
 80029d8:	4619      	mov	r1, r3
 80029da:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80029de:	f7fe fcf9 	bl	80013d4 <FloatToUint8s>
				// Output
				FloatToUint8s(PID1_out, SpiTuneData1, 19);
 80029e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80029e6:	2213      	movs	r2, #19
 80029e8:	4619      	mov	r1, r3
 80029ea:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80029ee:	f7fe fcf1 	bl	80013d4 <FloatToUint8s>


				// Pack PID2 data
				// Gains
				FloatToUint8s(&(PID2->Kp), SpiTuneData1, 23);
 80029f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029f6:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80029fa:	2217      	movs	r2, #23
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe fce9 	bl	80013d4 <FloatToUint8s>
				FloatToUint8s(&(PID2->Ki), SpiTuneData1, 27);
 8002a02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a06:	3304      	adds	r3, #4
 8002a08:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002a0c:	221b      	movs	r2, #27
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe fce0 	bl	80013d4 <FloatToUint8s>
				FloatToUint8s(&(PID2->Kd), SpiTuneData1, 31);
 8002a14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a18:	3308      	adds	r3, #8
 8002a1a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002a1e:	221f      	movs	r2, #31
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe fcd7 	bl	80013d4 <FloatToUint8s>
				// Reference
				if (Tune_single_true_double_false)
 8002a26:	4b67      	ldr	r3, [pc, #412]	; (8002bc4 <TaskTune+0x338>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d01b      	beq.n	8002a66 <TaskTune+0x1da>
				{
					PID1_ref_devided_float = Roll_in / 10.0;
 8002a2e:	4b66      	ldr	r3, [pc, #408]	; (8002bc8 <TaskTune+0x33c>)
 8002a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fd fd9d 	bl	8000574 <__aeabi_i2d>
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	4b63      	ldr	r3, [pc, #396]	; (8002bcc <TaskTune+0x340>)
 8002a40:	f7fd ff2c 	bl	800089c <__aeabi_ddiv>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f7fe f8f4 	bl	8000c38 <__aeabi_d2f>
 8002a50:	4603      	mov	r3, r0
 8002a52:	617b      	str	r3, [r7, #20]
					FloatToUint8s(&PID1_ref_devided_float, SpiTuneData1, 35);
 8002a54:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002a58:	f107 0314 	add.w	r3, r7, #20
 8002a5c:	2223      	movs	r2, #35	; 0x23
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe fcb8 	bl	80013d4 <FloatToUint8s>
 8002a64:	e007      	b.n	8002a76 <TaskTune+0x1ea>
				}
				else
					FloatToUint8s(PID2_ref, SpiTuneData1, 35);
 8002a66:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a6a:	2223      	movs	r2, #35	; 0x23
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002a72:	f7fe fcaf 	bl	80013d4 <FloatToUint8s>
				// Measurement
				FloatToUint8s(PID2_meas, SpiTuneData1, 39);
 8002a76:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a7a:	2227      	movs	r2, #39	; 0x27
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8002a82:	f7fe fca7 	bl	80013d4 <FloatToUint8s>
				// Output
				Int16ToUint8s(PID2_out, SpiTuneData1, 43);
 8002a86:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a8a:	222b      	movs	r2, #43	; 0x2b
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8002a92:	f7fe fcd7 	bl	8001444 <Int16ToUint8s>


				// Pack PID3 data
				//Gains
				FloatToUint8s(&(PID3->Kp), SpiTuneData2, 1);
 8002a96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a9a:	f107 011c 	add.w	r1, r7, #28
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe fc97 	bl	80013d4 <FloatToUint8s>
				FloatToUint8s(&(PID3->Ki), SpiTuneData2, 5);
 8002aa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002aaa:	3304      	adds	r3, #4
 8002aac:	f107 011c 	add.w	r1, r7, #28
 8002ab0:	2205      	movs	r2, #5
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe fc8e 	bl	80013d4 <FloatToUint8s>
				FloatToUint8s(&(PID3->Kd), SpiTuneData2, 9);
 8002ab8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002abc:	3308      	adds	r3, #8
 8002abe:	f107 011c 	add.w	r1, r7, #28
 8002ac2:	2209      	movs	r2, #9
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe fc85 	bl	80013d4 <FloatToUint8s>
				// Reference -> Calculated in every cycle
				PID3_ref_devided = Pitch_in / 25;
 8002aca:	4b41      	ldr	r3, [pc, #260]	; (8002bd0 <TaskTune+0x344>)
 8002acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ad0:	4a3b      	ldr	r2, [pc, #236]	; (8002bc0 <TaskTune+0x334>)
 8002ad2:	fb82 1203 	smull	r1, r2, r2, r3
 8002ad6:	10d2      	asrs	r2, r2, #3
 8002ad8:	17db      	asrs	r3, r3, #31
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	b21b      	sxth	r3, r3
 8002ade:	827b      	strh	r3, [r7, #18]
				Int16ToUint8s(&PID3_ref_devided, SpiTuneData2, 13);
 8002ae0:	f107 011c 	add.w	r1, r7, #28
 8002ae4:	f107 0312 	add.w	r3, r7, #18
 8002ae8:	220d      	movs	r2, #13
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe fcaa 	bl	8001444 <Int16ToUint8s>
				// Measurement
				FloatToUint8s(PID3_meas, SpiTuneData2, 15);
 8002af0:	f107 031c 	add.w	r3, r7, #28
 8002af4:	220f      	movs	r2, #15
 8002af6:	4619      	mov	r1, r3
 8002af8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8002afc:	f7fe fc6a 	bl	80013d4 <FloatToUint8s>
				// Output
				FloatToUint8s(PID3_out, SpiTuneData2, 19);
 8002b00:	f107 031c 	add.w	r3, r7, #28
 8002b04:	2213      	movs	r2, #19
 8002b06:	4619      	mov	r1, r3
 8002b08:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8002b0c:	f7fe fc62 	bl	80013d4 <FloatToUint8s>


				// Pack PID4 data
				// Gains
				FloatToUint8s(&(PID4->Kp), SpiTuneData2, 23);
 8002b10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b14:	f107 011c 	add.w	r1, r7, #28
 8002b18:	2217      	movs	r2, #23
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe fc5a 	bl	80013d4 <FloatToUint8s>
				FloatToUint8s(&(PID4->Ki), SpiTuneData2, 27);
 8002b20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b24:	3304      	adds	r3, #4
 8002b26:	f107 011c 	add.w	r1, r7, #28
 8002b2a:	221b      	movs	r2, #27
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe fc51 	bl	80013d4 <FloatToUint8s>
				FloatToUint8s(&(PID4->Kd), SpiTuneData2, 31);
 8002b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b36:	3308      	adds	r3, #8
 8002b38:	f107 011c 	add.w	r1, r7, #28
 8002b3c:	221f      	movs	r2, #31
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe fc48 	bl	80013d4 <FloatToUint8s>
				// Reference
				if (Tune_single_true_double_false)
 8002b44:	4b1f      	ldr	r3, [pc, #124]	; (8002bc4 <TaskTune+0x338>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d043      	beq.n	8002bd4 <TaskTune+0x348>
				{
					PID3_ref_devided_float = Pitch_in / 10.0;
 8002b4c:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <TaskTune+0x344>)
 8002b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fd fd0e 	bl	8000574 <__aeabi_i2d>
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <TaskTune+0x340>)
 8002b5e:	f7fd fe9d 	bl	800089c <__aeabi_ddiv>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4610      	mov	r0, r2
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f7fe f865 	bl	8000c38 <__aeabi_d2f>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	60fb      	str	r3, [r7, #12]
					FloatToUint8s(&PID3_ref_devided_float, SpiTuneData2, 35);
 8002b72:	f107 011c 	add.w	r1, r7, #28
 8002b76:	f107 030c 	add.w	r3, r7, #12
 8002b7a:	2223      	movs	r2, #35	; 0x23
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fe fc29 	bl	80013d4 <FloatToUint8s>
 8002b82:	e02f      	b.n	8002be4 <TaskTune+0x358>
 8002b84:	20000218 	.word	0x20000218
 8002b88:	200003b0 	.word	0x200003b0
 8002b8c:	20000254 	.word	0x20000254
 8002b90:	200003a4 	.word	0x200003a4
 8002b94:	2000030c 	.word	0x2000030c
 8002b98:	20000290 	.word	0x20000290
 8002b9c:	200003b4 	.word	0x200003b4
 8002ba0:	200002cc 	.word	0x200002cc
 8002ba4:	200003a8 	.word	0x200003a8
 8002ba8:	20000310 	.word	0x20000310
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	20000d30 	.word	0x20000d30
 8002bb4:	20000d20 	.word	0x20000d20
 8002bb8:	20000d1c 	.word	0x20000d1c
 8002bbc:	2000031a 	.word	0x2000031a
 8002bc0:	51eb851f 	.word	0x51eb851f
 8002bc4:	2000020e 	.word	0x2000020e
 8002bc8:	2000030a 	.word	0x2000030a
 8002bcc:	40240000 	.word	0x40240000
 8002bd0:	2000030e 	.word	0x2000030e
				}
				else
					FloatToUint8s(PID4_ref, SpiTuneData2, 35);
 8002bd4:	f107 031c 	add.w	r3, r7, #28
 8002bd8:	2223      	movs	r2, #35	; 0x23
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8002be0:	f7fe fbf8 	bl	80013d4 <FloatToUint8s>
				// Measurement
				FloatToUint8s(PID4_meas, SpiTuneData2, 39);
 8002be4:	f107 031c 	add.w	r3, r7, #28
 8002be8:	2227      	movs	r2, #39	; 0x27
 8002bea:	4619      	mov	r1, r3
 8002bec:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8002bf0:	f7fe fbf0 	bl	80013d4 <FloatToUint8s>
				// Output
				Int16ToUint8s(PID4_out, SpiTuneData2, 43);
 8002bf4:	f107 031c 	add.w	r3, r7, #28
 8002bf8:	222b      	movs	r2, #43	; 0x2b
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8002c00:	f7fe fc20 	bl	8001444 <Int16ToUint8s>
			}
			osMutexRelease(ControllerMutexHandle);
 8002c04:	4b65      	ldr	r3, [pc, #404]	; (8002d9c <TaskTune+0x510>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f00c f911 	bl	800ee30 <osMutexRelease>
			osMutexRelease(ImuMutexHandle);
 8002c0e:	4b64      	ldr	r3, [pc, #400]	; (8002da0 <TaskTune+0x514>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f00c f90c 	bl	800ee30 <osMutexRelease>
			osMutexRelease(RemoteDataMutexHandle);
 8002c18:	4b62      	ldr	r3, [pc, #392]	; (8002da4 <TaskTune+0x518>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f00c f907 	bl	800ee30 <osMutexRelease>
		}

		// Send packed data and receive tune data
		HAL_SPI_TransmitReceive(&hspi1, SpiTuneData1, Spi1Buffer, 64, HAL_MAX_DELAY);
 8002c22:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002c26:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	2340      	movs	r3, #64	; 0x40
 8002c2e:	4a5e      	ldr	r2, [pc, #376]	; (8002da8 <TaskTune+0x51c>)
 8002c30:	485e      	ldr	r0, [pc, #376]	; (8002dac <TaskTune+0x520>)
 8002c32:	f008 f934 	bl	800ae9e <HAL_SPI_TransmitReceive>
		osDelay(5);
 8002c36:	2005      	movs	r0, #5
 8002c38:	f00c f87f 	bl	800ed3a <osDelay>
		HAL_SPI_TransmitReceive(&hspi1, SpiTuneData2, Spi1Buffer, 64, HAL_MAX_DELAY);
 8002c3c:	f107 011c 	add.w	r1, r7, #28
 8002c40:	f04f 33ff 	mov.w	r3, #4294967295
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	2340      	movs	r3, #64	; 0x40
 8002c48:	4a57      	ldr	r2, [pc, #348]	; (8002da8 <TaskTune+0x51c>)
 8002c4a:	4858      	ldr	r0, [pc, #352]	; (8002dac <TaskTune+0x520>)
 8002c4c:	f008 f927 	bl	800ae9e <HAL_SPI_TransmitReceive>

		// Tune controllers based on the received data
		float float_value = 0;
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	60bb      	str	r3, [r7, #8]
		FloatFromUint8s(Spi1Buffer, 3, &float_value);
 8002c56:	f107 0308 	add.w	r3, r7, #8
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	2103      	movs	r1, #3
 8002c5e:	4852      	ldr	r0, [pc, #328]	; (8002da8 <TaskTune+0x51c>)
 8002c60:	f7fe fbca 	bl	80013f8 <FloatFromUint8s>

		if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK)
 8002c64:	4b4d      	ldr	r3, [pc, #308]	; (8002d9c <TaskTune+0x510>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f04f 31ff 	mov.w	r1, #4294967295
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f00c f891 	bl	800ed94 <osMutexWait>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f040 808b 	bne.w	8002d90 <TaskTune+0x504>
		{
			if (Spi1Buffer[1] == 1) // PID1
 8002c7a:	4b4b      	ldr	r3, [pc, #300]	; (8002da8 <TaskTune+0x51c>)
 8002c7c:	785b      	ldrb	r3, [r3, #1]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d11d      	bne.n	8002cc0 <TaskTune+0x434>
			{
				if (Spi1Buffer[2] == 'p')
 8002c84:	4b48      	ldr	r3, [pc, #288]	; (8002da8 <TaskTune+0x51c>)
 8002c86:	789b      	ldrb	r3, [r3, #2]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b70      	cmp	r3, #112	; 0x70
 8002c8c:	d104      	bne.n	8002c98 <TaskTune+0x40c>
					PID1->Kp = float_value;
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	e07b      	b.n	8002d90 <TaskTune+0x504>
				else if (Spi1Buffer[2] == 'i')
 8002c98:	4b43      	ldr	r3, [pc, #268]	; (8002da8 <TaskTune+0x51c>)
 8002c9a:	789b      	ldrb	r3, [r3, #2]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b69      	cmp	r3, #105	; 0x69
 8002ca0:	d104      	bne.n	8002cac <TaskTune+0x420>
					PID1->Ki = float_value;
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	e071      	b.n	8002d90 <TaskTune+0x504>
				else if (Spi1Buffer[2] == 'd')
 8002cac:	4b3e      	ldr	r3, [pc, #248]	; (8002da8 <TaskTune+0x51c>)
 8002cae:	789b      	ldrb	r3, [r3, #2]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d16c      	bne.n	8002d90 <TaskTune+0x504>
					PID1->Kd = float_value;
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	e067      	b.n	8002d90 <TaskTune+0x504>
			}
			else if (Spi1Buffer[1] == 2) // PID2
 8002cc0:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <TaskTune+0x51c>)
 8002cc2:	785b      	ldrb	r3, [r3, #1]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d11d      	bne.n	8002d06 <TaskTune+0x47a>
			{
				if (Spi1Buffer[2] == 'p')
 8002cca:	4b37      	ldr	r3, [pc, #220]	; (8002da8 <TaskTune+0x51c>)
 8002ccc:	789b      	ldrb	r3, [r3, #2]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b70      	cmp	r3, #112	; 0x70
 8002cd2:	d104      	bne.n	8002cde <TaskTune+0x452>
					PID2->Kp = float_value;
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e058      	b.n	8002d90 <TaskTune+0x504>
				else if (Spi1Buffer[2] == 'i')
 8002cde:	4b32      	ldr	r3, [pc, #200]	; (8002da8 <TaskTune+0x51c>)
 8002ce0:	789b      	ldrb	r3, [r3, #2]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b69      	cmp	r3, #105	; 0x69
 8002ce6:	d104      	bne.n	8002cf2 <TaskTune+0x466>
					PID2->Ki = float_value;
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	e04e      	b.n	8002d90 <TaskTune+0x504>
				else if (Spi1Buffer[2] == 'd')
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	; (8002da8 <TaskTune+0x51c>)
 8002cf4:	789b      	ldrb	r3, [r3, #2]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b64      	cmp	r3, #100	; 0x64
 8002cfa:	d149      	bne.n	8002d90 <TaskTune+0x504>
					PID2->Kd = float_value;
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	e044      	b.n	8002d90 <TaskTune+0x504>
			}
			else if (Spi1Buffer[1] == 3) // PID3
 8002d06:	4b28      	ldr	r3, [pc, #160]	; (8002da8 <TaskTune+0x51c>)
 8002d08:	785b      	ldrb	r3, [r3, #1]
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d11d      	bne.n	8002d4c <TaskTune+0x4c0>
			{
				if (Spi1Buffer[2] == 'p')
 8002d10:	4b25      	ldr	r3, [pc, #148]	; (8002da8 <TaskTune+0x51c>)
 8002d12:	789b      	ldrb	r3, [r3, #2]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b70      	cmp	r3, #112	; 0x70
 8002d18:	d104      	bne.n	8002d24 <TaskTune+0x498>
					PID3->Kp = float_value;
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	e035      	b.n	8002d90 <TaskTune+0x504>
				else if (Spi1Buffer[2] == 'i')
 8002d24:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <TaskTune+0x51c>)
 8002d26:	789b      	ldrb	r3, [r3, #2]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b69      	cmp	r3, #105	; 0x69
 8002d2c:	d104      	bne.n	8002d38 <TaskTune+0x4ac>
					PID3->Ki = float_value;
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	e02b      	b.n	8002d90 <TaskTune+0x504>
				else if (Spi1Buffer[2] == 'd')
 8002d38:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <TaskTune+0x51c>)
 8002d3a:	789b      	ldrb	r3, [r3, #2]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b64      	cmp	r3, #100	; 0x64
 8002d40:	d126      	bne.n	8002d90 <TaskTune+0x504>
					PID3->Kd = float_value;
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d48:	609a      	str	r2, [r3, #8]
 8002d4a:	e021      	b.n	8002d90 <TaskTune+0x504>
			}
			else if (Spi1Buffer[1] == 4) // PID4
 8002d4c:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <TaskTune+0x51c>)
 8002d4e:	785b      	ldrb	r3, [r3, #1]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d11c      	bne.n	8002d90 <TaskTune+0x504>
			{
				if (Spi1Buffer[2] == 'p')
 8002d56:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <TaskTune+0x51c>)
 8002d58:	789b      	ldrb	r3, [r3, #2]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b70      	cmp	r3, #112	; 0x70
 8002d5e:	d104      	bne.n	8002d6a <TaskTune+0x4de>
					PID4->Kp = float_value;
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	e012      	b.n	8002d90 <TaskTune+0x504>
				else if (Spi1Buffer[2] == 'i')
 8002d6a:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <TaskTune+0x51c>)
 8002d6c:	789b      	ldrb	r3, [r3, #2]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b69      	cmp	r3, #105	; 0x69
 8002d72:	d104      	bne.n	8002d7e <TaskTune+0x4f2>
					PID4->Ki = float_value;
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	e008      	b.n	8002d90 <TaskTune+0x504>
				else if (Spi1Buffer[2] == 'd')
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <TaskTune+0x51c>)
 8002d80:	789b      	ldrb	r3, [r3, #2]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b64      	cmp	r3, #100	; 0x64
 8002d86:	d103      	bne.n	8002d90 <TaskTune+0x504>
					PID4->Kd = float_value;
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d8e:	609a      	str	r2, [r3, #8]
			}
		}
		osMutexRelease(ControllerMutexHandle);
 8002d90:	4b02      	ldr	r3, [pc, #8]	; (8002d9c <TaskTune+0x510>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f00c f84b 	bl	800ee30 <osMutexRelease>
	{
 8002d9a:	e5c2      	b.n	8002922 <TaskTune+0x96>
 8002d9c:	20000d30 	.word	0x20000d30
 8002da0:	20000d20 	.word	0x20000d20
 8002da4:	20000d1c 	.word	0x20000d1c
 8002da8:	2000065c 	.word	0x2000065c
 8002dac:	200009a4 	.word	0x200009a4

08002db0 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4a07      	ldr	r2, [pc, #28]	; (8002ddc <vApplicationGetIdleTaskMemory+0x2c>)
 8002dc0:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4a06      	ldr	r2, [pc, #24]	; (8002de0 <vApplicationGetIdleTaskMemory+0x30>)
 8002dc6:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2280      	movs	r2, #128	; 0x80
 8002dcc:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8002dce:	bf00      	nop
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	200006b0 	.word	0x200006b0
 8002de0:	20000750 	.word	0x20000750

08002de4 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a42      	ldr	r2, [pc, #264]	; (8002ef8 <HAL_UART_RxCpltCallback+0x114>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d130      	bne.n	8002e56 <HAL_UART_RxCpltCallback+0x72>
	{
		//Log("U2CB");
		Uart2CallbackCounter++;
 8002df4:	4b41      	ldr	r3, [pc, #260]	; (8002efc <HAL_UART_RxCpltCallback+0x118>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	4a40      	ldr	r2, [pc, #256]	; (8002efc <HAL_UART_RxCpltCallback+0x118>)
 8002dfc:	6013      	str	r3, [r2, #0]

		if (osMutexWait(RemoteBufferMutexHandle, 0) == osOK)
 8002dfe:	4b40      	ldr	r3, [pc, #256]	; (8002f00 <HAL_UART_RxCpltCallback+0x11c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2100      	movs	r1, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f00b ffc5 	bl	800ed94 <osMutexWait>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d11c      	bne.n	8002e4a <HAL_UART_RxCpltCallback+0x66>
		{
			//Log("U2CB-RBM-WE");
			for (int i = 0; i < REM_BUF_SIZE; i++)
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	e00c      	b.n	8002e30 <HAL_UART_RxCpltCallback+0x4c>
				RemoteBuffer[i] = Uart2Buffer[i];
 8002e16:	4a3b      	ldr	r2, [pc, #236]	; (8002f04 <HAL_UART_RxCpltCallback+0x120>)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	b2d9      	uxtb	r1, r3
 8002e20:	4a39      	ldr	r2, [pc, #228]	; (8002f08 <HAL_UART_RxCpltCallback+0x124>)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4413      	add	r3, r2
 8002e26:	460a      	mov	r2, r1
 8002e28:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < REM_BUF_SIZE; i++)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2b3f      	cmp	r3, #63	; 0x3f
 8002e34:	ddef      	ble.n	8002e16 <HAL_UART_RxCpltCallback+0x32>

			osMutexRelease(RemoteBufferMutexHandle);
 8002e36:	4b32      	ldr	r3, [pc, #200]	; (8002f00 <HAL_UART_RxCpltCallback+0x11c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f00b fff8 	bl	800ee30 <osMutexRelease>

			// Signal to TaskTemote
			osSemaphoreRelease(RemoteBufferFullSemaphoreHandle);
 8002e40:	4b32      	ldr	r3, [pc, #200]	; (8002f0c <HAL_UART_RxCpltCallback+0x128>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f00c f8a9 	bl	800ef9c <osSemaphoreRelease>
//				sprintf(str, "UART Receive Error: [%d]\r\n", Uart2CallbackCounter);
//				HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
//			}
//		}

		HAL_UART_Receive_IT(&huart2, &Uart2Buffer, 64);
 8002e4a:	2240      	movs	r2, #64	; 0x40
 8002e4c:	492d      	ldr	r1, [pc, #180]	; (8002f04 <HAL_UART_RxCpltCallback+0x120>)
 8002e4e:	482a      	ldr	r0, [pc, #168]	; (8002ef8 <HAL_UART_RxCpltCallback+0x114>)
 8002e50:	f00a faef 	bl	800d432 <HAL_UART_Receive_IT>
			//HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}

		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
	}
}
 8002e54:	e04b      	b.n	8002eee <HAL_UART_RxCpltCallback+0x10a>
	else if (huart == &huart4)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a2d      	ldr	r2, [pc, #180]	; (8002f10 <HAL_UART_RxCpltCallback+0x12c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d147      	bne.n	8002eee <HAL_UART_RxCpltCallback+0x10a>
		if ((GPSPackageIndex == 0 && Uart4Buffer == '$')
 8002e5e:	4b2d      	ldr	r3, [pc, #180]	; (8002f14 <HAL_UART_RxCpltCallback+0x130>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d104      	bne.n	8002e72 <HAL_UART_RxCpltCallback+0x8e>
 8002e68:	4b2b      	ldr	r3, [pc, #172]	; (8002f18 <HAL_UART_RxCpltCallback+0x134>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b24      	cmp	r3, #36	; 0x24
 8002e70:	d013      	beq.n	8002e9a <HAL_UART_RxCpltCallback+0xb6>
				|| (GPSPackageIndex == 1 && Uart4Buffer == 'G')
 8002e72:	4b28      	ldr	r3, [pc, #160]	; (8002f14 <HAL_UART_RxCpltCallback+0x130>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d104      	bne.n	8002e86 <HAL_UART_RxCpltCallback+0xa2>
 8002e7c:	4b26      	ldr	r3, [pc, #152]	; (8002f18 <HAL_UART_RxCpltCallback+0x134>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b47      	cmp	r3, #71	; 0x47
 8002e84:	d009      	beq.n	8002e9a <HAL_UART_RxCpltCallback+0xb6>
				|| (1 < GPSPackageIndex && GPSPackageIndex < GPS_BUFFSIZE))
 8002e86:	4b23      	ldr	r3, [pc, #140]	; (8002f14 <HAL_UART_RxCpltCallback+0x130>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d926      	bls.n	8002ede <HAL_UART_RxCpltCallback+0xfa>
 8002e90:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <HAL_UART_RxCpltCallback+0x130>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2bff      	cmp	r3, #255	; 0xff
 8002e98:	d021      	beq.n	8002ede <HAL_UART_RxCpltCallback+0xfa>
			GPSPackageBuffer[GPSPackageIndex] = Uart4Buffer;
 8002e9a:	4b1e      	ldr	r3, [pc, #120]	; (8002f14 <HAL_UART_RxCpltCallback+0x130>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_UART_RxCpltCallback+0x134>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	b2d9      	uxtb	r1, r3
 8002ea8:	4b1c      	ldr	r3, [pc, #112]	; (8002f1c <HAL_UART_RxCpltCallback+0x138>)
 8002eaa:	5499      	strb	r1, [r3, r2]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8002eac:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <HAL_UART_RxCpltCallback+0x130>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2bfd      	cmp	r3, #253	; 0xfd
 8002eb4:	d807      	bhi.n	8002ec6 <HAL_UART_RxCpltCallback+0xe2>
				GPSPackageIndex++;
 8002eb6:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <HAL_UART_RxCpltCallback+0x130>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <HAL_UART_RxCpltCallback+0x130>)
 8002ec2:	701a      	strb	r2, [r3, #0]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8002ec4:	e00e      	b.n	8002ee4 <HAL_UART_RxCpltCallback+0x100>
				GPSPackageIndex = 0;
 8002ec6:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <HAL_UART_RxCpltCallback+0x130>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
				ProcessGPSPackageBuffer = true;
 8002ecc:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <HAL_UART_RxCpltCallback+0x13c>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
				osSemaphoreRelease(GpsBufferSemaphoreHandle);
 8002ed2:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <HAL_UART_RxCpltCallback+0x140>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f00c f860 	bl	800ef9c <osSemaphoreRelease>
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8002edc:	e002      	b.n	8002ee4 <HAL_UART_RxCpltCallback+0x100>
			GPSPackageIndex = 0;
 8002ede:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <HAL_UART_RxCpltCallback+0x130>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	490c      	ldr	r1, [pc, #48]	; (8002f18 <HAL_UART_RxCpltCallback+0x134>)
 8002ee8:	4809      	ldr	r0, [pc, #36]	; (8002f10 <HAL_UART_RxCpltCallback+0x12c>)
 8002eea:	f00a fae6 	bl	800d4ba <HAL_UART_Receive_DMA>
}
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000b8c 	.word	0x20000b8c
 8002efc:	20000210 	.word	0x20000210
 8002f00:	20000d2c 	.word	0x20000d2c
 8002f04:	2000045c 	.word	0x2000045c
 8002f08:	2000049c 	.word	0x2000049c
 8002f0c:	20000d3c 	.word	0x20000d3c
 8002f10:	20000b04 	.word	0x20000b04
 8002f14:	20000559 	.word	0x20000559
 8002f18:	20000558 	.word	0x20000558
 8002f1c:	2000055c 	.word	0x2000055c
 8002f20:	2000065b 	.word	0x2000065b
 8002f24:	20000d38 	.word	0x20000d38

08002f28 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	; 0x28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a23      	ldr	r2, [pc, #140]	; (8002fc0 <HAL_UART_ErrorCallback+0x98>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d11c      	bne.n	8002f72 <HAL_UART_ErrorCallback+0x4a>
	{
		if (huart->ErrorCode != 0)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d03a      	beq.n	8002fb8 <HAL_UART_ErrorCallback+0x90>
		{
			//Diag = false;

			char str[32];
			sprintf(str, "UART2 Error Callback: %d\r\n", huart->ErrorCode);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002f48:	f107 0308 	add.w	r3, r7, #8
 8002f4c:	491d      	ldr	r1, [pc, #116]	; (8002fc4 <HAL_UART_ErrorCallback+0x9c>)
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f002 fa94 	bl	800547c <sprintf_>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8002f54:	f107 0308 	add.w	r3, r7, #8
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fd f9b1 	bl	80002c0 <strlen>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	f107 0108 	add.w	r1, r7, #8
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6a:	4817      	ldr	r0, [pc, #92]	; (8002fc8 <HAL_UART_ErrorCallback+0xa0>)
 8002f6c:	f00a f9de 	bl	800d32c <HAL_UART_Transmit>
			char str[32];
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}
	}
}
 8002f70:	e022      	b.n	8002fb8 <HAL_UART_ErrorCallback+0x90>
	else if (huart == &huart4)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a15      	ldr	r2, [pc, #84]	; (8002fcc <HAL_UART_ErrorCallback+0xa4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d11e      	bne.n	8002fb8 <HAL_UART_ErrorCallback+0x90>
		if (huart->ErrorCode != 0)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d019      	beq.n	8002fb8 <HAL_UART_ErrorCallback+0x90>
			Diag = false;
 8002f84:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <HAL_UART_ErrorCallback+0xa8>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002f90:	f107 0308 	add.w	r3, r7, #8
 8002f94:	490f      	ldr	r1, [pc, #60]	; (8002fd4 <HAL_UART_ErrorCallback+0xac>)
 8002f96:	4618      	mov	r0, r3
 8002f98:	f002 fa70 	bl	800547c <sprintf_>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8002f9c:	f107 0308 	add.w	r3, r7, #8
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fd f98d 	bl	80002c0 <strlen>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	f107 0108 	add.w	r1, r7, #8
 8002fae:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb2:	4805      	ldr	r0, [pc, #20]	; (8002fc8 <HAL_UART_ErrorCallback+0xa0>)
 8002fb4:	f00a f9ba 	bl	800d32c <HAL_UART_Transmit>
}
 8002fb8:	bf00      	nop
 8002fba:	3728      	adds	r7, #40	; 0x28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20000b8c 	.word	0x20000b8c
 8002fc4:	08017cc0 	.word	0x08017cc0
 8002fc8:	20000c14 	.word	0x20000c14
 8002fcc:	20000b04 	.word	0x20000b04
 8002fd0:	2000020c 	.word	0x2000020c
 8002fd4:	08017cdc 	.word	0x08017cdc

08002fd8 <HAL_TIM_IC_CaptureCallback>:
			}
		}
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a05      	ldr	r2, [pc, #20]	; (8002ff8 <HAL_TIM_IC_CaptureCallback+0x20>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d103      	bne.n	8002ff0 <HAL_TIM_IC_CaptureCallback+0x18>
	{
		HCSR04_TMR_IC_ISR(&HCSR04, htim);
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4804      	ldr	r0, [pc, #16]	; (8002ffc <HAL_TIM_IC_CaptureCallback+0x24>)
 8002fec:	f004 fd3c 	bl	8007a68 <HCSR04_TMR_IC_ISR>
	}
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20000ab8 	.word	0x20000ab8
 8002ffc:	20000420 	.word	0x20000420

08003000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003000:	b5b0      	push	{r4, r5, r7, lr}
 8003002:	b0c6      	sub	sp, #280	; 0x118
 8003004:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003006:	f004 fec8 	bl	8007d9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800300a:	f000 f9eb 	bl	80033e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800300e:	f000 fce7 	bl	80039e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003012:	f000 fcc7 	bl	80039a4 <MX_DMA_Init>
  MX_SPI1_Init();
 8003016:	f000 fa91 	bl	800353c <MX_SPI1_Init>
  MX_SPI2_Init();
 800301a:	f000 facd 	bl	80035b8 <MX_SPI2_Init>
  MX_TIM1_Init();
 800301e:	f000 fb09 	bl	8003634 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003022:	f000 fbd7 	bl	80037d4 <MX_TIM3_Init>
  MX_UART4_Init();
 8003026:	f000 fc29 	bl	800387c <MX_UART4_Init>
  MX_USART2_UART_Init();
 800302a:	f000 fc57 	bl	80038dc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800302e:	f000 fa45 	bl	80034bc <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8003032:	f000 fc87 	bl	8003944 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Init IMU
  	if(MPU_Init(&hspi2, &MPU9250) == 0 && BMP280_initialize(&hspi2, &BMP280) == 0)
 8003036:	4916      	ldr	r1, [pc, #88]	; (8003090 <main+0x90>)
 8003038:	4816      	ldr	r0, [pc, #88]	; (8003094 <main+0x94>)
 800303a:	f004 f829 	bl	8007090 <MPU_Init>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <main+0x5a>
 8003044:	4914      	ldr	r1, [pc, #80]	; (8003098 <main+0x98>)
 8003046:	4813      	ldr	r0, [pc, #76]	; (8003094 <main+0x94>)
 8003048:	f003 f9d6 	bl	80063f8 <BMP280_initialize>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d103      	bne.n	800305a <main+0x5a>
  		IsImuAvailable = true;
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <main+0x9c>)
 8003054:	2201      	movs	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]
 8003058:	e002      	b.n	8003060 <main+0x60>
  	else
  		IsImuAvailable = false;
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <main+0x9c>)
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]

  	// Init Magnetometer
  	if (HMC5883L_Init() == 0)
 8003060:	f003 f84c 	bl	80060fc <HMC5883L_Init>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d103      	bne.n	8003072 <main+0x72>
  		IsMagnAvailable = true;
 800306a:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <main+0xa0>)
 800306c:	2201      	movs	r2, #1
 800306e:	701a      	strb	r2, [r3, #0]
 8003070:	e002      	b.n	8003078 <main+0x78>
  	else
  		IsMagnAvailable = false;
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <main+0xa0>)
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]

  	// Init Distance sensor
  	if (HCSR04_Init(&HCSR04, &htim3) == 0)
 8003078:	490a      	ldr	r1, [pc, #40]	; (80030a4 <main+0xa4>)
 800307a:	480b      	ldr	r0, [pc, #44]	; (80030a8 <main+0xa8>)
 800307c:	f004 fca6 	bl	80079cc <HCSR04_Init>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d114      	bne.n	80030b0 <main+0xb0>
  		IsDistAvailable = false;
 8003086:	4b09      	ldr	r3, [pc, #36]	; (80030ac <main+0xac>)
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
 800308c:	e013      	b.n	80030b6 <main+0xb6>
 800308e:	bf00      	nop
 8003090:	20000320 	.word	0x20000320
 8003094:	20000a08 	.word	0x20000a08
 8003098:	200003bc 	.word	0x200003bc
 800309c:	20000214 	.word	0x20000214
 80030a0:	20000215 	.word	0x20000215
 80030a4:	20000ab8 	.word	0x20000ab8
 80030a8:	20000420 	.word	0x20000420
 80030ac:	20000216 	.word	0x20000216
  	else
  		IsDistAvailable = false;
 80030b0:	4bb3      	ldr	r3, [pc, #716]	; (8003380 <main+0x380>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MagnMutex */
  osMutexDef(MagnMutex);
 80030b6:	2300      	movs	r3, #0
 80030b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80030bc:	2300      	movs	r3, #0
 80030be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  MagnMutexHandle = osMutexCreate(osMutex(MagnMutex));
 80030c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80030c6:	4618      	mov	r0, r3
 80030c8:	f00b fe4b 	bl	800ed62 <osMutexCreate>
 80030cc:	4603      	mov	r3, r0
 80030ce:	4aad      	ldr	r2, [pc, #692]	; (8003384 <main+0x384>)
 80030d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteDataMutex */
  osMutexDef(RemoteDataMutex);
 80030d2:	2300      	movs	r3, #0
 80030d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80030d8:	2300      	movs	r3, #0
 80030da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RemoteDataMutexHandle = osMutexCreate(osMutex(RemoteDataMutex));
 80030de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80030e2:	4618      	mov	r0, r3
 80030e4:	f00b fe3d 	bl	800ed62 <osMutexCreate>
 80030e8:	4603      	mov	r3, r0
 80030ea:	4aa7      	ldr	r2, [pc, #668]	; (8003388 <main+0x388>)
 80030ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of ImuMutex */
  osMutexDef(ImuMutex);
 80030ee:	2300      	movs	r3, #0
 80030f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80030f4:	2300      	movs	r3, #0
 80030f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  ImuMutexHandle = osMutexCreate(osMutex(ImuMutex));
 80030fa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80030fe:	4618      	mov	r0, r3
 8003100:	f00b fe2f 	bl	800ed62 <osMutexCreate>
 8003104:	4603      	mov	r3, r0
 8003106:	4aa1      	ldr	r2, [pc, #644]	; (800338c <main+0x38c>)
 8003108:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsDataMutex */
  osMutexDef(GpsDataMutex);
 800310a:	2300      	movs	r3, #0
 800310c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003110:	2300      	movs	r3, #0
 8003112:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  GpsDataMutexHandle = osMutexCreate(osMutex(GpsDataMutex));
 8003116:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800311a:	4618      	mov	r0, r3
 800311c:	f00b fe21 	bl	800ed62 <osMutexCreate>
 8003120:	4603      	mov	r3, r0
 8003122:	4a9b      	ldr	r2, [pc, #620]	; (8003390 <main+0x390>)
 8003124:	6013      	str	r3, [r2, #0]

  /* definition and creation of DistMutex */
  osMutexDef(DistMutex);
 8003126:	2300      	movs	r3, #0
 8003128:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800312c:	2300      	movs	r3, #0
 800312e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  DistMutexHandle = osMutexCreate(osMutex(DistMutex));
 8003132:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003136:	4618      	mov	r0, r3
 8003138:	f00b fe13 	bl	800ed62 <osMutexCreate>
 800313c:	4603      	mov	r3, r0
 800313e:	4a95      	ldr	r2, [pc, #596]	; (8003394 <main+0x394>)
 8003140:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferMutex */
  osMutexDef(RemoteBufferMutex);
 8003142:	2300      	movs	r3, #0
 8003144:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003148:	2300      	movs	r3, #0
 800314a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RemoteBufferMutexHandle = osMutexCreate(osMutex(RemoteBufferMutex));
 800314e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003152:	4618      	mov	r0, r3
 8003154:	f00b fe05 	bl	800ed62 <osMutexCreate>
 8003158:	4603      	mov	r3, r0
 800315a:	4a8f      	ldr	r2, [pc, #572]	; (8003398 <main+0x398>)
 800315c:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControllerMutex */
  osMutexDef(ControllerMutex);
 800315e:	2300      	movs	r3, #0
 8003160:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003164:	2300      	movs	r3, #0
 8003166:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  ControllerMutexHandle = osMutexCreate(osMutex(ControllerMutex));
 800316a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800316e:	4618      	mov	r0, r3
 8003170:	f00b fdf7 	bl	800ed62 <osMutexCreate>
 8003174:	4603      	mov	r3, r0
 8003176:	4a89      	ldr	r2, [pc, #548]	; (800339c <main+0x39c>)
 8003178:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */

	osMutexRelease(MagnMutexHandle);
 800317a:	4b82      	ldr	r3, [pc, #520]	; (8003384 <main+0x384>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f00b fe56 	bl	800ee30 <osMutexRelease>
	osMutexRelease(RemoteDataMutexHandle);
 8003184:	4b80      	ldr	r3, [pc, #512]	; (8003388 <main+0x388>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f00b fe51 	bl	800ee30 <osMutexRelease>
	osMutexRelease(ImuMutexHandle);
 800318e:	4b7f      	ldr	r3, [pc, #508]	; (800338c <main+0x38c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f00b fe4c 	bl	800ee30 <osMutexRelease>
	osMutexRelease(GpsDataMutexHandle);
 8003198:	4b7d      	ldr	r3, [pc, #500]	; (8003390 <main+0x390>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f00b fe47 	bl	800ee30 <osMutexRelease>
	osMutexRelease(RemoteBufferMutexHandle);
 80031a2:	4b7d      	ldr	r3, [pc, #500]	; (8003398 <main+0x398>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f00b fe42 	bl	800ee30 <osMutexRelease>
	osMutexRelease(ControllerMutexHandle);
 80031ac:	4b7b      	ldr	r3, [pc, #492]	; (800339c <main+0x39c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f00b fe3d 	bl	800ee30 <osMutexRelease>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of DistSemaphore */
  osSemaphoreDef(DistSemaphore);
 80031b6:	2300      	movs	r3, #0
 80031b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  DistSemaphoreHandle = osSemaphoreCreate(osSemaphore(DistSemaphore), 1);
 80031c2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80031c6:	2101      	movs	r1, #1
 80031c8:	4618      	mov	r0, r3
 80031ca:	f00b fe67 	bl	800ee9c <osSemaphoreCreate>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4a73      	ldr	r2, [pc, #460]	; (80033a0 <main+0x3a0>)
 80031d2:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsBufferSemaphore */
  osSemaphoreDef(GpsBufferSemaphore);
 80031d4:	2300      	movs	r3, #0
 80031d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031da:	2300      	movs	r3, #0
 80031dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GpsBufferSemaphoreHandle = osSemaphoreCreate(osSemaphore(GpsBufferSemaphore), 1);
 80031e0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80031e4:	2101      	movs	r1, #1
 80031e6:	4618      	mov	r0, r3
 80031e8:	f00b fe58 	bl	800ee9c <osSemaphoreCreate>
 80031ec:	4603      	mov	r3, r0
 80031ee:	4a6d      	ldr	r2, [pc, #436]	; (80033a4 <main+0x3a4>)
 80031f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferFullSemaphore */
  osSemaphoreDef(RemoteBufferFullSemaphore);
 80031f2:	2300      	movs	r3, #0
 80031f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031f8:	2300      	movs	r3, #0
 80031fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RemoteBufferFullSemaphoreHandle = osSemaphoreCreate(osSemaphore(RemoteBufferFullSemaphore), 1);
 80031fe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003202:	2101      	movs	r1, #1
 8003204:	4618      	mov	r0, r3
 8003206:	f00b fe49 	bl	800ee9c <osSemaphoreCreate>
 800320a:	4603      	mov	r3, r0
 800320c:	4a66      	ldr	r2, [pc, #408]	; (80033a8 <main+0x3a8>)
 800320e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  if (osSemaphoreGetCount(DistSemaphoreHandle) == 1)
 8003210:	4b63      	ldr	r3, [pc, #396]	; (80033a0 <main+0x3a0>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f00b fef7 	bl	800f008 <osSemaphoreGetCount>
 800321a:	4603      	mov	r3, r0
 800321c:	2b01      	cmp	r3, #1
 800321e:	d106      	bne.n	800322e <main+0x22e>
  	  osSemaphoreWait(DistSemaphoreHandle, osWaitForever);
 8003220:	4b5f      	ldr	r3, [pc, #380]	; (80033a0 <main+0x3a0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f04f 31ff 	mov.w	r1, #4294967295
 8003228:	4618      	mov	r0, r3
 800322a:	f00b fe69 	bl	800ef00 <osSemaphoreWait>
  if (osSemaphoreGetCount(GpsBufferSemaphoreHandle) == 1)
 800322e:	4b5d      	ldr	r3, [pc, #372]	; (80033a4 <main+0x3a4>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f00b fee8 	bl	800f008 <osSemaphoreGetCount>
 8003238:	4603      	mov	r3, r0
 800323a:	2b01      	cmp	r3, #1
 800323c:	d106      	bne.n	800324c <main+0x24c>
  	  osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever);
 800323e:	4b59      	ldr	r3, [pc, #356]	; (80033a4 <main+0x3a4>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f04f 31ff 	mov.w	r1, #4294967295
 8003246:	4618      	mov	r0, r3
 8003248:	f00b fe5a 	bl	800ef00 <osSemaphoreWait>

  if (osSemaphoreGetCount(RemoteBufferFullSemaphoreHandle) == 1)
 800324c:	4b56      	ldr	r3, [pc, #344]	; (80033a8 <main+0x3a8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f00b fed9 	bl	800f008 <osSemaphoreGetCount>
 8003256:	4603      	mov	r3, r0
 8003258:	2b01      	cmp	r3, #1
 800325a:	d106      	bne.n	800326a <main+0x26a>
  	  osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever);
 800325c:	4b52      	ldr	r3, [pc, #328]	; (80033a8 <main+0x3a8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f04f 31ff 	mov.w	r1, #4294967295
 8003264:	4618      	mov	r0, r3
 8003266:	f00b fe4b 	bl	800ef00 <osSemaphoreWait>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskSensorData */
  osThreadDef(TaskSensorData, RunTaskSensorData, osPriorityHigh, 0, 512);
 800326a:	4b50      	ldr	r3, [pc, #320]	; (80033ac <main+0x3ac>)
 800326c:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8003270:	461d      	mov	r5, r3
 8003272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003276:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800327a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSensorDataHandle = osThreadCreate(osThread(TaskSensorData), NULL);
 800327e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003282:	2100      	movs	r1, #0
 8003284:	4618      	mov	r0, r3
 8003286:	f00b fd0c 	bl	800eca2 <osThreadCreate>
 800328a:	4603      	mov	r3, r0
 800328c:	4a48      	ldr	r2, [pc, #288]	; (80033b0 <main+0x3b0>)
 800328e:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskController */
  osThreadDef(TaskController, RunTaskController, osPriorityAboveNormal, 0, 512);
 8003290:	4b48      	ldr	r3, [pc, #288]	; (80033b4 <main+0x3b4>)
 8003292:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8003296:	461d      	mov	r5, r3
 8003298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800329a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800329c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskControllerHandle = osThreadCreate(osThread(TaskController), NULL);
 80032a4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80032a8:	2100      	movs	r1, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	f00b fcf9 	bl	800eca2 <osThreadCreate>
 80032b0:	4603      	mov	r3, r0
 80032b2:	4a41      	ldr	r2, [pc, #260]	; (80033b8 <main+0x3b8>)
 80032b4:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskRemote */
  osThreadDef(TaskRemote, RunTaskRemote, osPriorityRealtime, 0, 512);
 80032b6:	4b41      	ldr	r3, [pc, #260]	; (80033bc <main+0x3bc>)
 80032b8:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80032bc:	461d      	mov	r5, r3
 80032be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskRemoteHandle = osThreadCreate(osThread(TaskRemote), NULL);
 80032ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80032ce:	2100      	movs	r1, #0
 80032d0:	4618      	mov	r0, r3
 80032d2:	f00b fce6 	bl	800eca2 <osThreadCreate>
 80032d6:	4603      	mov	r3, r0
 80032d8:	4a39      	ldr	r2, [pc, #228]	; (80033c0 <main+0x3c0>)
 80032da:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskMotor */
  osThreadDef(TaskMotor, RunTaskMotor, osPriorityNormal, 0, 256);
 80032dc:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <main+0x3c4>)
 80032de:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80032e2:	461d      	mov	r5, r3
 80032e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskMotorHandle = osThreadCreate(osThread(TaskMotor), NULL);
 80032f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032f4:	2100      	movs	r1, #0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f00b fcd3 	bl	800eca2 <osThreadCreate>
 80032fc:	4603      	mov	r3, r0
 80032fe:	4a32      	ldr	r2, [pc, #200]	; (80033c8 <main+0x3c8>)
 8003300:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskPower */
  osThreadDef(TaskPower, RunTaskPower, osPriorityBelowNormal, 0, 256);
 8003302:	4b32      	ldr	r3, [pc, #200]	; (80033cc <main+0x3cc>)
 8003304:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8003308:	461d      	mov	r5, r3
 800330a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800330c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800330e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskPowerHandle = osThreadCreate(osThread(TaskPower), NULL);
 8003316:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800331a:	2100      	movs	r1, #0
 800331c:	4618      	mov	r0, r3
 800331e:	f00b fcc0 	bl	800eca2 <osThreadCreate>
 8003322:	4603      	mov	r3, r0
 8003324:	4a2a      	ldr	r2, [pc, #168]	; (80033d0 <main+0x3d0>)
 8003326:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskDiagnostics */
  osThreadDef(TaskDiagnostics, RunTaskDiagnostics, osPriorityLow, 0, 2048);
 8003328:	4b2a      	ldr	r3, [pc, #168]	; (80033d4 <main+0x3d4>)
 800332a:	f107 0420 	add.w	r4, r7, #32
 800332e:	461d      	mov	r5, r3
 8003330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003334:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003338:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDiagnosticsHandle = osThreadCreate(osThread(TaskDiagnostics), NULL);
 800333c:	f107 0320 	add.w	r3, r7, #32
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f00b fcad 	bl	800eca2 <osThreadCreate>
 8003348:	4603      	mov	r3, r0
 800334a:	4a23      	ldr	r2, [pc, #140]	; (80033d8 <main+0x3d8>)
 800334c:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTune */
  osThreadDef(TaskTune, RunTaskTune, osPriorityBelowNormal, 0, 512);
 800334e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003352:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003356:	4a21      	ldr	r2, [pc, #132]	; (80033dc <main+0x3dc>)
 8003358:	461c      	mov	r4, r3
 800335a:	4615      	mov	r5, r2
 800335c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800335e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003360:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003364:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTuneHandle = osThreadCreate(osThread(TaskTune), NULL);
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f00b fc98 	bl	800eca2 <osThreadCreate>
 8003372:	4603      	mov	r3, r0
 8003374:	4a1a      	ldr	r2, [pc, #104]	; (80033e0 <main+0x3e0>)
 8003376:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003378:	f00b fc8c 	bl	800ec94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800337c:	e7fe      	b.n	800337c <main+0x37c>
 800337e:	bf00      	nop
 8003380:	20000216 	.word	0x20000216
 8003384:	20000d18 	.word	0x20000d18
 8003388:	20000d1c 	.word	0x20000d1c
 800338c:	20000d20 	.word	0x20000d20
 8003390:	20000d24 	.word	0x20000d24
 8003394:	20000d28 	.word	0x20000d28
 8003398:	20000d2c 	.word	0x20000d2c
 800339c:	20000d30 	.word	0x20000d30
 80033a0:	20000d34 	.word	0x20000d34
 80033a4:	20000d38 	.word	0x20000d38
 80033a8:	20000d3c 	.word	0x20000d3c
 80033ac:	08017d24 	.word	0x08017d24
 80033b0:	20000cfc 	.word	0x20000cfc
 80033b4:	08017d50 	.word	0x08017d50
 80033b8:	20000d00 	.word	0x20000d00
 80033bc:	08017d78 	.word	0x08017d78
 80033c0:	20000d04 	.word	0x20000d04
 80033c4:	08017da0 	.word	0x08017da0
 80033c8:	20000d08 	.word	0x20000d08
 80033cc:	08017dc8 	.word	0x08017dc8
 80033d0:	20000d0c 	.word	0x20000d0c
 80033d4:	08017df4 	.word	0x08017df4
 80033d8:	20000d10 	.word	0x20000d10
 80033dc:	08017e1c 	.word	0x08017e1c
 80033e0:	20000d14 	.word	0x20000d14

080033e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b094      	sub	sp, #80	; 0x50
 80033e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033ea:	f107 0320 	add.w	r3, r7, #32
 80033ee:	2230      	movs	r2, #48	; 0x30
 80033f0:	2100      	movs	r1, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f00f f9ab 	bl	801274e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033f8:	f107 030c 	add.w	r3, r7, #12
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003408:	4b2a      	ldr	r3, [pc, #168]	; (80034b4 <SystemClock_Config+0xd0>)
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	4a29      	ldr	r2, [pc, #164]	; (80034b4 <SystemClock_Config+0xd0>)
 800340e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003412:	6413      	str	r3, [r2, #64]	; 0x40
 8003414:	4b27      	ldr	r3, [pc, #156]	; (80034b4 <SystemClock_Config+0xd0>)
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003420:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <SystemClock_Config+0xd4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a24      	ldr	r2, [pc, #144]	; (80034b8 <SystemClock_Config+0xd4>)
 8003426:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <SystemClock_Config+0xd4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003434:	607b      	str	r3, [r7, #4]
 8003436:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003438:	2302      	movs	r3, #2
 800343a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800343c:	2301      	movs	r3, #1
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003440:	2310      	movs	r3, #16
 8003442:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003444:	2302      	movs	r3, #2
 8003446:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003448:	2300      	movs	r3, #0
 800344a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800344c:	2308      	movs	r3, #8
 800344e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003450:	23d8      	movs	r3, #216	; 0xd8
 8003452:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003454:	2302      	movs	r3, #2
 8003456:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003458:	2302      	movs	r3, #2
 800345a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800345c:	f107 0320 	add.w	r3, r7, #32
 8003460:	4618      	mov	r0, r3
 8003462:	f006 f9cd 	bl	8009800 <HAL_RCC_OscConfig>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800346c:	f000 fbac 	bl	8003bc8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003470:	f006 f976 	bl	8009760 <HAL_PWREx_EnableOverDrive>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800347a:	f000 fba5 	bl	8003bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800347e:	230f      	movs	r3, #15
 8003480:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003482:	2302      	movs	r3, #2
 8003484:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800348a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800348e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003494:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003496:	f107 030c 	add.w	r3, r7, #12
 800349a:	2107      	movs	r1, #7
 800349c:	4618      	mov	r0, r3
 800349e:	f006 fc53 	bl	8009d48 <HAL_RCC_ClockConfig>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80034a8:	f000 fb8e 	bl	8003bc8 <Error_Handler>
  }
}
 80034ac:	bf00      	nop
 80034ae:	3750      	adds	r7, #80	; 0x50
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40007000 	.word	0x40007000

080034bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80034c0:	4b1b      	ldr	r3, [pc, #108]	; (8003530 <MX_I2C1_Init+0x74>)
 80034c2:	4a1c      	ldr	r2, [pc, #112]	; (8003534 <MX_I2C1_Init+0x78>)
 80034c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xA0404E72;
 80034c6:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <MX_I2C1_Init+0x74>)
 80034c8:	4a1b      	ldr	r2, [pc, #108]	; (8003538 <MX_I2C1_Init+0x7c>)
 80034ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80034cc:	4b18      	ldr	r3, [pc, #96]	; (8003530 <MX_I2C1_Init+0x74>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034d2:	4b17      	ldr	r3, [pc, #92]	; (8003530 <MX_I2C1_Init+0x74>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034d8:	4b15      	ldr	r3, [pc, #84]	; (8003530 <MX_I2C1_Init+0x74>)
 80034da:	2200      	movs	r2, #0
 80034dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80034de:	4b14      	ldr	r3, [pc, #80]	; (8003530 <MX_I2C1_Init+0x74>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80034e4:	4b12      	ldr	r3, [pc, #72]	; (8003530 <MX_I2C1_Init+0x74>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <MX_I2C1_Init+0x74>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034f0:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <MX_I2C1_Init+0x74>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034f6:	480e      	ldr	r0, [pc, #56]	; (8003530 <MX_I2C1_Init+0x74>)
 80034f8:	f005 fb42 	bl	8008b80 <HAL_I2C_Init>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003502:	f000 fb61 	bl	8003bc8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003506:	2100      	movs	r1, #0
 8003508:	4809      	ldr	r0, [pc, #36]	; (8003530 <MX_I2C1_Init+0x74>)
 800350a:	f006 f891 	bl	8009630 <HAL_I2CEx_ConfigAnalogFilter>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003514:	f000 fb58 	bl	8003bc8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003518:	2100      	movs	r1, #0
 800351a:	4805      	ldr	r0, [pc, #20]	; (8003530 <MX_I2C1_Init+0x74>)
 800351c:	f006 f8d3 	bl	80096c6 <HAL_I2CEx_ConfigDigitalFilter>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003526:	f000 fb4f 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000950 	.word	0x20000950
 8003534:	40005400 	.word	0x40005400
 8003538:	a0404e72 	.word	0xa0404e72

0800353c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003540:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <MX_SPI1_Init+0x74>)
 8003542:	4a1c      	ldr	r2, [pc, #112]	; (80035b4 <MX_SPI1_Init+0x78>)
 8003544:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003546:	4b1a      	ldr	r3, [pc, #104]	; (80035b0 <MX_SPI1_Init+0x74>)
 8003548:	f44f 7282 	mov.w	r2, #260	; 0x104
 800354c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800354e:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <MX_SPI1_Init+0x74>)
 8003550:	2200      	movs	r2, #0
 8003552:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003554:	4b16      	ldr	r3, [pc, #88]	; (80035b0 <MX_SPI1_Init+0x74>)
 8003556:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800355a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800355c:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <MX_SPI1_Init+0x74>)
 800355e:	2202      	movs	r2, #2
 8003560:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003562:	4b13      	ldr	r3, [pc, #76]	; (80035b0 <MX_SPI1_Init+0x74>)
 8003564:	2201      	movs	r2, #1
 8003566:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003568:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <MX_SPI1_Init+0x74>)
 800356a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800356e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003570:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <MX_SPI1_Init+0x74>)
 8003572:	2220      	movs	r2, #32
 8003574:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003576:	4b0e      	ldr	r3, [pc, #56]	; (80035b0 <MX_SPI1_Init+0x74>)
 8003578:	2200      	movs	r2, #0
 800357a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800357c:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <MX_SPI1_Init+0x74>)
 800357e:	2200      	movs	r2, #0
 8003580:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <MX_SPI1_Init+0x74>)
 8003584:	2200      	movs	r2, #0
 8003586:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003588:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <MX_SPI1_Init+0x74>)
 800358a:	2207      	movs	r2, #7
 800358c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800358e:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <MX_SPI1_Init+0x74>)
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <MX_SPI1_Init+0x74>)
 8003596:	2200      	movs	r2, #0
 8003598:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800359a:	4805      	ldr	r0, [pc, #20]	; (80035b0 <MX_SPI1_Init+0x74>)
 800359c:	f007 f936 	bl	800a80c <HAL_SPI_Init>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80035a6:	f000 fb0f 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	200009a4 	.word	0x200009a4
 80035b4:	40013000 	.word	0x40013000

080035b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80035bc:	4b1b      	ldr	r3, [pc, #108]	; (800362c <MX_SPI2_Init+0x74>)
 80035be:	4a1c      	ldr	r2, [pc, #112]	; (8003630 <MX_SPI2_Init+0x78>)
 80035c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80035c2:	4b1a      	ldr	r3, [pc, #104]	; (800362c <MX_SPI2_Init+0x74>)
 80035c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80035ca:	4b18      	ldr	r3, [pc, #96]	; (800362c <MX_SPI2_Init+0x74>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80035d0:	4b16      	ldr	r3, [pc, #88]	; (800362c <MX_SPI2_Init+0x74>)
 80035d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80035d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80035d8:	4b14      	ldr	r3, [pc, #80]	; (800362c <MX_SPI2_Init+0x74>)
 80035da:	2202      	movs	r2, #2
 80035dc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80035de:	4b13      	ldr	r3, [pc, #76]	; (800362c <MX_SPI2_Init+0x74>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80035e4:	4b11      	ldr	r3, [pc, #68]	; (800362c <MX_SPI2_Init+0x74>)
 80035e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80035ec:	4b0f      	ldr	r3, [pc, #60]	; (800362c <MX_SPI2_Init+0x74>)
 80035ee:	2228      	movs	r2, #40	; 0x28
 80035f0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035f2:	4b0e      	ldr	r3, [pc, #56]	; (800362c <MX_SPI2_Init+0x74>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80035f8:	4b0c      	ldr	r3, [pc, #48]	; (800362c <MX_SPI2_Init+0x74>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035fe:	4b0b      	ldr	r3, [pc, #44]	; (800362c <MX_SPI2_Init+0x74>)
 8003600:	2200      	movs	r2, #0
 8003602:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <MX_SPI2_Init+0x74>)
 8003606:	2207      	movs	r2, #7
 8003608:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800360a:	4b08      	ldr	r3, [pc, #32]	; (800362c <MX_SPI2_Init+0x74>)
 800360c:	2200      	movs	r2, #0
 800360e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003610:	4b06      	ldr	r3, [pc, #24]	; (800362c <MX_SPI2_Init+0x74>)
 8003612:	2200      	movs	r2, #0
 8003614:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003616:	4805      	ldr	r0, [pc, #20]	; (800362c <MX_SPI2_Init+0x74>)
 8003618:	f007 f8f8 	bl	800a80c <HAL_SPI_Init>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003622:	f000 fad1 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20000a08 	.word	0x20000a08
 8003630:	40003800 	.word	0x40003800

08003634 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b09a      	sub	sp, #104	; 0x68
 8003638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800363a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	605a      	str	r2, [r3, #4]
 8003644:	609a      	str	r2, [r3, #8]
 8003646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003648:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	605a      	str	r2, [r3, #4]
 8003652:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003654:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	60da      	str	r2, [r3, #12]
 8003662:	611a      	str	r2, [r3, #16]
 8003664:	615a      	str	r2, [r3, #20]
 8003666:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003668:	1d3b      	adds	r3, r7, #4
 800366a:	222c      	movs	r2, #44	; 0x2c
 800366c:	2100      	movs	r1, #0
 800366e:	4618      	mov	r0, r3
 8003670:	f00f f86d 	bl	801274e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003674:	4b55      	ldr	r3, [pc, #340]	; (80037cc <MX_TIM1_Init+0x198>)
 8003676:	4a56      	ldr	r2, [pc, #344]	; (80037d0 <MX_TIM1_Init+0x19c>)
 8003678:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 800367a:	4b54      	ldr	r3, [pc, #336]	; (80037cc <MX_TIM1_Init+0x198>)
 800367c:	22d7      	movs	r2, #215	; 0xd7
 800367e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003680:	4b52      	ldr	r3, [pc, #328]	; (80037cc <MX_TIM1_Init+0x198>)
 8003682:	2200      	movs	r2, #0
 8003684:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8003686:	4b51      	ldr	r3, [pc, #324]	; (80037cc <MX_TIM1_Init+0x198>)
 8003688:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800368c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800368e:	4b4f      	ldr	r3, [pc, #316]	; (80037cc <MX_TIM1_Init+0x198>)
 8003690:	2200      	movs	r2, #0
 8003692:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003694:	4b4d      	ldr	r3, [pc, #308]	; (80037cc <MX_TIM1_Init+0x198>)
 8003696:	2200      	movs	r2, #0
 8003698:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800369a:	4b4c      	ldr	r3, [pc, #304]	; (80037cc <MX_TIM1_Init+0x198>)
 800369c:	2280      	movs	r2, #128	; 0x80
 800369e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80036a0:	484a      	ldr	r0, [pc, #296]	; (80037cc <MX_TIM1_Init+0x198>)
 80036a2:	f008 f813 	bl	800b6cc <HAL_TIM_Base_Init>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80036ac:	f000 fa8c 	bl	8003bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036b4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80036b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80036ba:	4619      	mov	r1, r3
 80036bc:	4843      	ldr	r0, [pc, #268]	; (80037cc <MX_TIM1_Init+0x198>)
 80036be:	f008 fea9 	bl	800c414 <HAL_TIM_ConfigClockSource>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80036c8:	f000 fa7e 	bl	8003bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80036cc:	483f      	ldr	r0, [pc, #252]	; (80037cc <MX_TIM1_Init+0x198>)
 80036ce:	f008 f8cd 	bl	800b86c <HAL_TIM_PWM_Init>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80036d8:	f000 fa76 	bl	8003bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036dc:	2300      	movs	r3, #0
 80036de:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80036e0:	2300      	movs	r3, #0
 80036e2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036e4:	2300      	movs	r3, #0
 80036e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80036ec:	4619      	mov	r1, r3
 80036ee:	4837      	ldr	r0, [pc, #220]	; (80037cc <MX_TIM1_Init+0x198>)
 80036f0:	f009 fca4 	bl	800d03c <HAL_TIMEx_MasterConfigSynchronization>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80036fa:	f000 fa65 	bl	8003bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036fe:	2360      	movs	r3, #96	; 0x60
 8003700:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003706:	2300      	movs	r3, #0
 8003708:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800370a:	2300      	movs	r3, #0
 800370c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800370e:	2304      	movs	r3, #4
 8003710:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003712:	2300      	movs	r3, #0
 8003714:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003716:	2300      	movs	r3, #0
 8003718:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800371a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800371e:	2200      	movs	r2, #0
 8003720:	4619      	mov	r1, r3
 8003722:	482a      	ldr	r0, [pc, #168]	; (80037cc <MX_TIM1_Init+0x198>)
 8003724:	f008 fd62 	bl	800c1ec <HAL_TIM_PWM_ConfigChannel>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800372e:	f000 fa4b 	bl	8003bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003732:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003736:	2204      	movs	r2, #4
 8003738:	4619      	mov	r1, r3
 800373a:	4824      	ldr	r0, [pc, #144]	; (80037cc <MX_TIM1_Init+0x198>)
 800373c:	f008 fd56 	bl	800c1ec <HAL_TIM_PWM_ConfigChannel>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8003746:	f000 fa3f 	bl	8003bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800374a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800374e:	2208      	movs	r2, #8
 8003750:	4619      	mov	r1, r3
 8003752:	481e      	ldr	r0, [pc, #120]	; (80037cc <MX_TIM1_Init+0x198>)
 8003754:	f008 fd4a 	bl	800c1ec <HAL_TIM_PWM_ConfigChannel>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800375e:	f000 fa33 	bl	8003bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003762:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003766:	220c      	movs	r2, #12
 8003768:	4619      	mov	r1, r3
 800376a:	4818      	ldr	r0, [pc, #96]	; (80037cc <MX_TIM1_Init+0x198>)
 800376c:	f008 fd3e 	bl	800c1ec <HAL_TIM_PWM_ConfigChannel>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8003776:	f000 fa27 	bl	8003bc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800377a:	2300      	movs	r3, #0
 800377c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800377e:	2300      	movs	r3, #0
 8003780:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003786:	2300      	movs	r3, #0
 8003788:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800378e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003792:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003798:	2300      	movs	r3, #0
 800379a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800379c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80037aa:	1d3b      	adds	r3, r7, #4
 80037ac:	4619      	mov	r1, r3
 80037ae:	4807      	ldr	r0, [pc, #28]	; (80037cc <MX_TIM1_Init+0x198>)
 80037b0:	f009 fcd2 	bl	800d158 <HAL_TIMEx_ConfigBreakDeadTime>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 80037ba:	f000 fa05 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80037be:	4803      	ldr	r0, [pc, #12]	; (80037cc <MX_TIM1_Init+0x198>)
 80037c0:	f001 ffe2 	bl	8005788 <HAL_TIM_MspPostInit>

}
 80037c4:	bf00      	nop
 80037c6:	3768      	adds	r7, #104	; 0x68
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000a6c 	.word	0x20000a6c
 80037d0:	40010000 	.word	0x40010000

080037d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037da:	f107 0314 	add.w	r3, r7, #20
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	605a      	str	r2, [r3, #4]
 80037e4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80037e6:	1d3b      	adds	r3, r7, #4
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037f2:	4b20      	ldr	r3, [pc, #128]	; (8003874 <MX_TIM3_Init+0xa0>)
 80037f4:	4a20      	ldr	r2, [pc, #128]	; (8003878 <MX_TIM3_Init+0xa4>)
 80037f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 80037f8:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <MX_TIM3_Init+0xa0>)
 80037fa:	226b      	movs	r2, #107	; 0x6b
 80037fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037fe:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <MX_TIM3_Init+0xa0>)
 8003800:	2200      	movs	r2, #0
 8003802:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8003804:	4b1b      	ldr	r3, [pc, #108]	; (8003874 <MX_TIM3_Init+0xa0>)
 8003806:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800380a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800380c:	4b19      	ldr	r3, [pc, #100]	; (8003874 <MX_TIM3_Init+0xa0>)
 800380e:	2200      	movs	r2, #0
 8003810:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003812:	4b18      	ldr	r3, [pc, #96]	; (8003874 <MX_TIM3_Init+0xa0>)
 8003814:	2280      	movs	r2, #128	; 0x80
 8003816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003818:	4816      	ldr	r0, [pc, #88]	; (8003874 <MX_TIM3_Init+0xa0>)
 800381a:	f008 f983 	bl	800bb24 <HAL_TIM_IC_Init>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003824:	f000 f9d0 	bl	8003bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800382c:	2300      	movs	r3, #0
 800382e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003830:	f107 0314 	add.w	r3, r7, #20
 8003834:	4619      	mov	r1, r3
 8003836:	480f      	ldr	r0, [pc, #60]	; (8003874 <MX_TIM3_Init+0xa0>)
 8003838:	f009 fc00 	bl	800d03c <HAL_TIMEx_MasterConfigSynchronization>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8003842:	f000 f9c1 	bl	8003bc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003846:	2300      	movs	r3, #0
 8003848:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800384a:	2301      	movs	r3, #1
 800384c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003856:	1d3b      	adds	r3, r7, #4
 8003858:	2200      	movs	r2, #0
 800385a:	4619      	mov	r1, r3
 800385c:	4805      	ldr	r0, [pc, #20]	; (8003874 <MX_TIM3_Init+0xa0>)
 800385e:	f008 fc28 	bl	800c0b2 <HAL_TIM_IC_ConfigChannel>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003868:	f000 f9ae 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800386c:	bf00      	nop
 800386e:	3720      	adds	r7, #32
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20000ab8 	.word	0x20000ab8
 8003878:	40000400 	.word	0x40000400

0800387c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003880:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <MX_UART4_Init+0x58>)
 8003882:	4a15      	ldr	r2, [pc, #84]	; (80038d8 <MX_UART4_Init+0x5c>)
 8003884:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003886:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <MX_UART4_Init+0x58>)
 8003888:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800388c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800388e:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <MX_UART4_Init+0x58>)
 8003890:	2200      	movs	r2, #0
 8003892:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003894:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <MX_UART4_Init+0x58>)
 8003896:	2200      	movs	r2, #0
 8003898:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800389a:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <MX_UART4_Init+0x58>)
 800389c:	2200      	movs	r2, #0
 800389e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80038a0:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <MX_UART4_Init+0x58>)
 80038a2:	220c      	movs	r2, #12
 80038a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038a6:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <MX_UART4_Init+0x58>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80038ac:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <MX_UART4_Init+0x58>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038b2:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <MX_UART4_Init+0x58>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038b8:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <MX_UART4_Init+0x58>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80038be:	4805      	ldr	r0, [pc, #20]	; (80038d4 <MX_UART4_Init+0x58>)
 80038c0:	f009 fce6 	bl	800d290 <HAL_UART_Init>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80038ca:	f000 f97d 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000b04 	.word	0x20000b04
 80038d8:	40004c00 	.word	0x40004c00

080038dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80038e0:	4b16      	ldr	r3, [pc, #88]	; (800393c <MX_USART2_UART_Init+0x60>)
 80038e2:	4a17      	ldr	r2, [pc, #92]	; (8003940 <MX_USART2_UART_Init+0x64>)
 80038e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80038e6:	4b15      	ldr	r3, [pc, #84]	; (800393c <MX_USART2_UART_Init+0x60>)
 80038e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80038ee:	4b13      	ldr	r3, [pc, #76]	; (800393c <MX_USART2_UART_Init+0x60>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80038f4:	4b11      	ldr	r3, [pc, #68]	; (800393c <MX_USART2_UART_Init+0x60>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80038fa:	4b10      	ldr	r3, [pc, #64]	; (800393c <MX_USART2_UART_Init+0x60>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8003900:	4b0e      	ldr	r3, [pc, #56]	; (800393c <MX_USART2_UART_Init+0x60>)
 8003902:	2204      	movs	r2, #4
 8003904:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003906:	4b0d      	ldr	r3, [pc, #52]	; (800393c <MX_USART2_UART_Init+0x60>)
 8003908:	2200      	movs	r2, #0
 800390a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800390c:	4b0b      	ldr	r3, [pc, #44]	; (800393c <MX_USART2_UART_Init+0x60>)
 800390e:	2200      	movs	r2, #0
 8003910:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <MX_USART2_UART_Init+0x60>)
 8003914:	2200      	movs	r2, #0
 8003916:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <MX_USART2_UART_Init+0x60>)
 800391a:	2210      	movs	r2, #16
 800391c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800391e:	4b07      	ldr	r3, [pc, #28]	; (800393c <MX_USART2_UART_Init+0x60>)
 8003920:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003924:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003926:	4805      	ldr	r0, [pc, #20]	; (800393c <MX_USART2_UART_Init+0x60>)
 8003928:	f009 fcb2 	bl	800d290 <HAL_UART_Init>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8003932:	f000 f949 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000b8c 	.word	0x20000b8c
 8003940:	40004400 	.word	0x40004400

08003944 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003948:	4b14      	ldr	r3, [pc, #80]	; (800399c <MX_USART3_UART_Init+0x58>)
 800394a:	4a15      	ldr	r2, [pc, #84]	; (80039a0 <MX_USART3_UART_Init+0x5c>)
 800394c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800394e:	4b13      	ldr	r3, [pc, #76]	; (800399c <MX_USART3_UART_Init+0x58>)
 8003950:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8003954:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003956:	4b11      	ldr	r3, [pc, #68]	; (800399c <MX_USART3_UART_Init+0x58>)
 8003958:	2200      	movs	r2, #0
 800395a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800395c:	4b0f      	ldr	r3, [pc, #60]	; (800399c <MX_USART3_UART_Init+0x58>)
 800395e:	2200      	movs	r2, #0
 8003960:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003962:	4b0e      	ldr	r3, [pc, #56]	; (800399c <MX_USART3_UART_Init+0x58>)
 8003964:	2200      	movs	r2, #0
 8003966:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8003968:	4b0c      	ldr	r3, [pc, #48]	; (800399c <MX_USART3_UART_Init+0x58>)
 800396a:	2208      	movs	r2, #8
 800396c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800396e:	4b0b      	ldr	r3, [pc, #44]	; (800399c <MX_USART3_UART_Init+0x58>)
 8003970:	2200      	movs	r2, #0
 8003972:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003974:	4b09      	ldr	r3, [pc, #36]	; (800399c <MX_USART3_UART_Init+0x58>)
 8003976:	2200      	movs	r2, #0
 8003978:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800397a:	4b08      	ldr	r3, [pc, #32]	; (800399c <MX_USART3_UART_Init+0x58>)
 800397c:	2200      	movs	r2, #0
 800397e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <MX_USART3_UART_Init+0x58>)
 8003982:	2200      	movs	r2, #0
 8003984:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003986:	4805      	ldr	r0, [pc, #20]	; (800399c <MX_USART3_UART_Init+0x58>)
 8003988:	f009 fc82 	bl	800d290 <HAL_UART_Init>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003992:	f000 f919 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000c14 	.word	0x20000c14
 80039a0:	40004800 	.word	0x40004800

080039a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039aa:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <MX_DMA_Init+0x38>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	4a0b      	ldr	r2, [pc, #44]	; (80039dc <MX_DMA_Init+0x38>)
 80039b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039b4:	6313      	str	r3, [r2, #48]	; 0x30
 80039b6:	4b09      	ldr	r3, [pc, #36]	; (80039dc <MX_DMA_Init+0x38>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039be:	607b      	str	r3, [r7, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 8, 0);
 80039c2:	2200      	movs	r2, #0
 80039c4:	2108      	movs	r1, #8
 80039c6:	2010      	movs	r0, #16
 80039c8:	f004 faf0 	bl	8007fac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80039cc:	2010      	movs	r0, #16
 80039ce:	f004 fb09 	bl	8007fe4 <HAL_NVIC_EnableIRQ>

}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40023800 	.word	0x40023800

080039e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08a      	sub	sp, #40	; 0x28
 80039e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e6:	f107 0314 	add.w	r3, r7, #20
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	605a      	str	r2, [r3, #4]
 80039f0:	609a      	str	r2, [r3, #8]
 80039f2:	60da      	str	r2, [r3, #12]
 80039f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039f6:	4b41      	ldr	r3, [pc, #260]	; (8003afc <MX_GPIO_Init+0x11c>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	4a40      	ldr	r2, [pc, #256]	; (8003afc <MX_GPIO_Init+0x11c>)
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	6313      	str	r3, [r2, #48]	; 0x30
 8003a02:	4b3e      	ldr	r3, [pc, #248]	; (8003afc <MX_GPIO_Init+0x11c>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a0e:	4b3b      	ldr	r3, [pc, #236]	; (8003afc <MX_GPIO_Init+0x11c>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	4a3a      	ldr	r2, [pc, #232]	; (8003afc <MX_GPIO_Init+0x11c>)
 8003a14:	f043 0310 	orr.w	r3, r3, #16
 8003a18:	6313      	str	r3, [r2, #48]	; 0x30
 8003a1a:	4b38      	ldr	r3, [pc, #224]	; (8003afc <MX_GPIO_Init+0x11c>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	f003 0310 	and.w	r3, r3, #16
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a26:	4b35      	ldr	r3, [pc, #212]	; (8003afc <MX_GPIO_Init+0x11c>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	4a34      	ldr	r2, [pc, #208]	; (8003afc <MX_GPIO_Init+0x11c>)
 8003a2c:	f043 0302 	orr.w	r3, r3, #2
 8003a30:	6313      	str	r3, [r2, #48]	; 0x30
 8003a32:	4b32      	ldr	r3, [pc, #200]	; (8003afc <MX_GPIO_Init+0x11c>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a3e:	4b2f      	ldr	r3, [pc, #188]	; (8003afc <MX_GPIO_Init+0x11c>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	4a2e      	ldr	r2, [pc, #184]	; (8003afc <MX_GPIO_Init+0x11c>)
 8003a44:	f043 0308 	orr.w	r3, r3, #8
 8003a48:	6313      	str	r3, [r2, #48]	; 0x30
 8003a4a:	4b2c      	ldr	r3, [pc, #176]	; (8003afc <MX_GPIO_Init+0x11c>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	607b      	str	r3, [r7, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a56:	4b29      	ldr	r3, [pc, #164]	; (8003afc <MX_GPIO_Init+0x11c>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	4a28      	ldr	r2, [pc, #160]	; (8003afc <MX_GPIO_Init+0x11c>)
 8003a5c:	f043 0304 	orr.w	r3, r3, #4
 8003a60:	6313      	str	r3, [r2, #48]	; 0x30
 8003a62:	4b26      	ldr	r3, [pc, #152]	; (8003afc <MX_GPIO_Init+0x11c>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a74:	4822      	ldr	r0, [pc, #136]	; (8003b00 <MX_GPIO_Init+0x120>)
 8003a76:	f005 f869 	bl	8008b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8003a80:	4820      	ldr	r0, [pc, #128]	; (8003b04 <MX_GPIO_Init+0x124>)
 8003a82:	f005 f863 	bl	8008b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPS_PPS_IN_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_IN_Pin;
 8003a86:	2304      	movs	r3, #4
 8003a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_PPS_IN_GPIO_Port, &GPIO_InitStruct);
 8003a92:	f107 0314 	add.w	r3, r7, #20
 8003a96:	4619      	mov	r1, r3
 8003a98:	481b      	ldr	r0, [pc, #108]	; (8003b08 <MX_GPIO_Init+0x128>)
 8003a9a:	f004 febb 	bl	8008814 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_DOWN_OUT_Pin */
  GPIO_InitStruct.Pin = ESC_DOWN_OUT_Pin;
 8003a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aac:	2300      	movs	r3, #0
 8003aae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESC_DOWN_OUT_GPIO_Port, &GPIO_InitStruct);
 8003ab0:	f107 0314 	add.w	r3, r7, #20
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4812      	ldr	r0, [pc, #72]	; (8003b00 <MX_GPIO_Init+0x120>)
 8003ab8:	f004 feac 	bl	8008814 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_IMU_CSIMU_Pin SPI2_IMU_CSBM_Pin DIS_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin;
 8003abc:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8003ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aca:	2300      	movs	r3, #0
 8003acc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ace:	f107 0314 	add.w	r3, r7, #20
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	480b      	ldr	r0, [pc, #44]	; (8003b04 <MX_GPIO_Init+0x124>)
 8003ad6:	f004 fe9d 	bl	8008814 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_RDY_IN_Pin */
  GPIO_InitStruct.Pin = MAG_RDY_IN_Pin;
 8003ada:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAG_RDY_IN_GPIO_Port, &GPIO_InitStruct);
 8003ae8:	f107 0314 	add.w	r3, r7, #20
 8003aec:	4619      	mov	r1, r3
 8003aee:	4807      	ldr	r0, [pc, #28]	; (8003b0c <MX_GPIO_Init+0x12c>)
 8003af0:	f004 fe90 	bl	8008814 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003af4:	bf00      	nop
 8003af6:	3728      	adds	r7, #40	; 0x28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40023800 	.word	0x40023800
 8003b00:	40021000 	.word	0x40021000
 8003b04:	40020c00 	.word	0x40020c00
 8003b08:	40020000 	.word	0x40020000
 8003b0c:	40020400 	.word	0x40020400

08003b10 <RunTaskSensorData>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RunTaskSensorData */
void RunTaskSensorData(void const * argument)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TaskSensorData(argument);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7fe fc09 	bl	8002330 <TaskSensorData>
  /* USER CODE END 5 */
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <RunTaskController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskController */
void RunTaskController(void const * argument)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskController */
	TaskController(argument);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fd fc9c 	bl	800146c <TaskController>
  /* USER CODE END RunTaskController */
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <RunTaskRemote>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskRemote */
void RunTaskRemote(void const * argument)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskRemote */
	TaskRemote(argument);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7fe faf3 	bl	8002130 <TaskRemote>
  /* USER CODE END RunTaskRemote */
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <RunTaskMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskMotor */
void RunTaskMotor(void const * argument)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskMotor */
	TaskMotor(argument);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fe f9b6 	bl	8001ecc <TaskMotor>
  /* USER CODE END RunTaskMotor */
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <RunTaskPower>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskPower */
void RunTaskPower(void const * argument)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskPower */
	TaskPower(argument);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7fe fac3 	bl	80020fc <TaskPower>
  /* USER CODE END RunTaskPower */
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <RunTaskDiagnostics>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskDiagnostics */
void RunTaskDiagnostics(void const * argument)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskDiagnostics */
	TaskDiagnostics(argument);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fd fe66 	bl	8001858 <TaskDiagnostics>
  /* USER CODE END RunTaskDiagnostics */
}
 8003b8c:	bf00      	nop
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <RunTaskTune>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskTune */
void RunTaskTune(void const * argument)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskTune */
	TaskTune(argument);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7fe fe75 	bl	800288c <TaskTune>
  /* USER CODE END RunTaskTune */
}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b082      	sub	sp, #8
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bba:	d101      	bne.n	8003bc0 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003bbc:	f004 f8fa 	bl	8007db4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bcc:	b672      	cpsid	i
}
 8003bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bd0:	e7fe      	b.n	8003bd0 <Error_Handler+0x8>

08003bd2 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b085      	sub	sp, #20
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
 8003bdc:	603b      	str	r3, [r7, #0]
 8003bde:	4603      	mov	r3, r0
 8003be0:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d204      	bcs.n	8003bf4 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4413      	add	r3, r2
 8003bf0:	7bfa      	ldrb	r2, [r7, #15]
 8003bf2:	701a      	strb	r2, [r3, #0]
  }
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	607a      	str	r2, [r7, #4]
 8003c0a:	603b      	str	r3, [r7, #0]
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8003c10:	bf00      	nop
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	e002      	b.n	8003c32 <_strnlen_s+0x16>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d004      	beq.n	8003c44 <_strnlen_s+0x28>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	1e5a      	subs	r2, r3, #1
 8003c3e:	603a      	str	r2, [r7, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1f3      	bne.n	8003c2c <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	1ad3      	subs	r3, r2, r3
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	2b2f      	cmp	r3, #47	; 0x2f
 8003c64:	d904      	bls.n	8003c70 <_is_digit+0x1a>
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	2b39      	cmp	r3, #57	; 0x39
 8003c6a:	d801      	bhi.n	8003c70 <_is_digit+0x1a>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <_is_digit+0x1c>
 8003c70:	2300      	movs	r3, #0
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	b2db      	uxtb	r3, r3
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003c90:	e00e      	b.n	8003cb0 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	1c59      	adds	r1, r3, #1
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6011      	str	r1, [r2, #0]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	4403      	add	r3, r0
 8003cac:	3b30      	subs	r3, #48	; 0x30
 8003cae:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff ffcd 	bl	8003c56 <_is_digit>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1e7      	bne.n	8003c92 <_atoi+0xe>
  }
  return i;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8003ccc:	b590      	push	{r4, r7, lr}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d125      	bne.n	8003d34 <_out_rev+0x68>
 8003ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d120      	bne.n	8003d34 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8003cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	e00a      	b.n	8003d0e <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	1c53      	adds	r3, r2, #1
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	68fc      	ldr	r4, [r7, #12]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	2020      	movs	r0, #32
 8003d06:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d3f0      	bcc.n	8003cf8 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8003d16:	e00d      	b.n	8003d34 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8003d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d22:	4413      	add	r3, r2
 8003d24:	7818      	ldrb	r0, [r3, #0]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	1c53      	adds	r3, r2, #1
 8003d2a:	607b      	str	r3, [r7, #4]
 8003d2c:	68fc      	ldr	r4, [r7, #12]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	47a0      	blx	r4
  while (len) {
 8003d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1ee      	bne.n	8003d18 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8003d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00e      	beq.n	8003d62 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8003d44:	e007      	b.n	8003d56 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	1c53      	adds	r3, r2, #1
 8003d4a:	607b      	str	r3, [r7, #4]
 8003d4c:	68fc      	ldr	r4, [r7, #12]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	2020      	movs	r0, #32
 8003d54:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d8f1      	bhi.n	8003d46 <_out_rev+0x7a>
    }
  }

  return idx;
 8003d62:	687b      	ldr	r3, [r7, #4]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd90      	pop	{r4, r7, pc}

08003d6c <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af04      	add	r7, sp, #16
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d136      	bne.n	8003df2 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d018      	beq.n	8003dbc <_ntoa_format+0x50>
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d013      	beq.n	8003dbc <_ntoa_format+0x50>
 8003d94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d104      	bne.n	8003da6 <_ntoa_format+0x3a>
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <_ntoa_format+0x50>
      width--;
 8003da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da8:	3b01      	subs	r3, #1
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003dac:	e006      	b.n	8003dbc <_ntoa_format+0x50>
      buf[len++] = '0';
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	61fa      	str	r2, [r7, #28]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4413      	add	r3, r2
 8003db8:	2230      	movs	r2, #48	; 0x30
 8003dba:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d20a      	bcs.n	8003dda <_ntoa_format+0x6e>
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	2b1f      	cmp	r3, #31
 8003dc8:	d9f1      	bls.n	8003dae <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003dca:	e006      	b.n	8003dda <_ntoa_format+0x6e>
      buf[len++] = '0';
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	61fa      	str	r2, [r7, #28]
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	2230      	movs	r2, #48	; 0x30
 8003dd8:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d006      	beq.n	8003df2 <_ntoa_format+0x86>
 8003de4:	69fa      	ldr	r2, [r7, #28]
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d202      	bcs.n	8003df2 <_ntoa_format+0x86>
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	2b1f      	cmp	r3, #31
 8003df0:	d9ec      	bls.n	8003dcc <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d058      	beq.n	8003eae <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d116      	bne.n	8003e34 <_ntoa_format+0xc8>
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d013      	beq.n	8003e34 <_ntoa_format+0xc8>
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d003      	beq.n	8003e1c <_ntoa_format+0xb0>
 8003e14:	69fa      	ldr	r2, [r7, #28]
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d10b      	bne.n	8003e34 <_ntoa_format+0xc8>
      len--;
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <_ntoa_format+0xc8>
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	2b10      	cmp	r3, #16
 8003e2c:	d102      	bne.n	8003e34 <_ntoa_format+0xc8>
        len--;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3b01      	subs	r3, #1
 8003e32:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	2b10      	cmp	r3, #16
 8003e38:	d10f      	bne.n	8003e5a <_ntoa_format+0xee>
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10a      	bne.n	8003e5a <_ntoa_format+0xee>
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	2b1f      	cmp	r3, #31
 8003e48:	d807      	bhi.n	8003e5a <_ntoa_format+0xee>
      buf[len++] = 'x';
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	61fa      	str	r2, [r7, #28]
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4413      	add	r3, r2
 8003e54:	2278      	movs	r2, #120	; 0x78
 8003e56:	701a      	strb	r2, [r3, #0]
 8003e58:	e01f      	b.n	8003e9a <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	2b10      	cmp	r3, #16
 8003e5e:	d10f      	bne.n	8003e80 <_ntoa_format+0x114>
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <_ntoa_format+0x114>
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	2b1f      	cmp	r3, #31
 8003e6e:	d807      	bhi.n	8003e80 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	61fa      	str	r2, [r7, #28]
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4413      	add	r3, r2
 8003e7a:	2258      	movs	r2, #88	; 0x58
 8003e7c:	701a      	strb	r2, [r3, #0]
 8003e7e:	e00c      	b.n	8003e9a <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d109      	bne.n	8003e9a <_ntoa_format+0x12e>
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	2b1f      	cmp	r3, #31
 8003e8a:	d806      	bhi.n	8003e9a <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	61fa      	str	r2, [r7, #28]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4413      	add	r3, r2
 8003e96:	2262      	movs	r2, #98	; 0x62
 8003e98:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	2b1f      	cmp	r3, #31
 8003e9e:	d806      	bhi.n	8003eae <_ntoa_format+0x142>
      buf[len++] = '0';
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	61fa      	str	r2, [r7, #28]
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	2230      	movs	r2, #48	; 0x30
 8003eac:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	2b1f      	cmp	r3, #31
 8003eb2:	d824      	bhi.n	8003efe <_ntoa_format+0x192>
    if (negative) {
 8003eb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d007      	beq.n	8003ecc <_ntoa_format+0x160>
      buf[len++] = '-';
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	61fa      	str	r2, [r7, #28]
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	222d      	movs	r2, #45	; 0x2d
 8003ec8:	701a      	strb	r2, [r3, #0]
 8003eca:	e018      	b.n	8003efe <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	61fa      	str	r2, [r7, #28]
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4413      	add	r3, r2
 8003ee0:	222b      	movs	r2, #43	; 0x2b
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	e00b      	b.n	8003efe <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d006      	beq.n	8003efe <_ntoa_format+0x192>
      buf[len++] = ' ';
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	61fa      	str	r2, [r7, #28]
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4413      	add	r3, r2
 8003efa:	2220      	movs	r2, #32
 8003efc:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f00:	9303      	str	r3, [sp, #12]
 8003f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f04:	9302      	str	r3, [sp, #8]
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	68b9      	ldr	r1, [r7, #8]
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f7ff fed9 	bl	8003ccc <_out_rev>
 8003f1a:	4603      	mov	r3, r0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b096      	sub	sp, #88	; 0x58
 8003f28:	af08      	add	r7, sp, #32
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d103      	bne.n	8003f44 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8003f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f3e:	f023 0310 	bic.w	r3, r3, #16
 8003f42:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <_ntoa_long+0x30>
 8003f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d032      	beq.n	8003fba <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8003f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f58:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f5c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003f5e:	fb01 f202 	mul.w	r2, r1, r2
 8003f62:	1a9b      	subs	r3, r3, r2
 8003f64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003f68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f6c:	2b09      	cmp	r3, #9
 8003f6e:	d804      	bhi.n	8003f7a <_ntoa_long+0x56>
 8003f70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f74:	3330      	adds	r3, #48	; 0x30
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	e00d      	b.n	8003f96 <_ntoa_long+0x72>
 8003f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <_ntoa_long+0x64>
 8003f84:	2241      	movs	r2, #65	; 0x41
 8003f86:	e000      	b.n	8003f8a <_ntoa_long+0x66>
 8003f88:	2261      	movs	r2, #97	; 0x61
 8003f8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f8e:	4413      	add	r3, r2
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	3b0a      	subs	r3, #10
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f98:	1c59      	adds	r1, r3, #1
 8003f9a:	6379      	str	r1, [r7, #52]	; 0x34
 8003f9c:	3338      	adds	r3, #56	; 0x38
 8003f9e:	443b      	add	r3, r7
 8003fa0:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8003fa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <_ntoa_long+0x96>
 8003fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb6:	2b1f      	cmp	r3, #31
 8003fb8:	d9cc      	bls.n	8003f54 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fbc:	9306      	str	r3, [sp, #24]
 8003fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fc0:	9305      	str	r3, [sp, #20]
 8003fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fc4:	9304      	str	r3, [sp, #16]
 8003fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fc8:	9303      	str	r3, [sp, #12]
 8003fca:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003fce:	9302      	str	r3, [sp, #8]
 8003fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd2:	9301      	str	r3, [sp, #4]
 8003fd4:	f107 0310 	add.w	r3, r7, #16
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f7ff fec3 	bl	8003d6c <_ntoa_format>
 8003fe6:	4603      	mov	r3, r0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3738      	adds	r7, #56	; 0x38
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b096      	sub	sp, #88	; 0x58
 8003ff4:	af08      	add	r7, sp, #32
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8004002:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004006:	4313      	orrs	r3, r2
 8004008:	d103      	bne.n	8004012 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800400a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800400c:	f023 0310 	bic.w	r3, r3, #16
 8004010:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8004012:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <_ntoa_long_long+0x34>
 800401c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004020:	4313      	orrs	r3, r2
 8004022:	d037      	beq.n	8004094 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8004024:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004028:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800402c:	f7fc fea4 	bl	8000d78 <__aeabi_uldivmod>
 8004030:	4613      	mov	r3, r2
 8004032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8004036:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800403a:	2b09      	cmp	r3, #9
 800403c:	d804      	bhi.n	8004048 <_ntoa_long_long+0x58>
 800403e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004042:	3330      	adds	r3, #48	; 0x30
 8004044:	b2da      	uxtb	r2, r3
 8004046:	e00d      	b.n	8004064 <_ntoa_long_long+0x74>
 8004048:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <_ntoa_long_long+0x66>
 8004052:	2241      	movs	r2, #65	; 0x41
 8004054:	e000      	b.n	8004058 <_ntoa_long_long+0x68>
 8004056:	2261      	movs	r2, #97	; 0x61
 8004058:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800405c:	4413      	add	r3, r2
 800405e:	b2db      	uxtb	r3, r3
 8004060:	3b0a      	subs	r3, #10
 8004062:	b2da      	uxtb	r2, r3
 8004064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004066:	1c59      	adds	r1, r3, #1
 8004068:	6379      	str	r1, [r7, #52]	; 0x34
 800406a:	3338      	adds	r3, #56	; 0x38
 800406c:	443b      	add	r3, r7
 800406e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8004072:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004076:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800407a:	f7fc fe7d 	bl	8000d78 <__aeabi_uldivmod>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8004086:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800408a:	4313      	orrs	r3, r2
 800408c:	d002      	beq.n	8004094 <_ntoa_long_long+0xa4>
 800408e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004090:	2b1f      	cmp	r3, #31
 8004092:	d9c7      	bls.n	8004024 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8004094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004096:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004098:	9206      	str	r2, [sp, #24]
 800409a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800409c:	9205      	str	r2, [sp, #20]
 800409e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040a0:	9204      	str	r2, [sp, #16]
 80040a2:	9303      	str	r3, [sp, #12]
 80040a4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80040a8:	9302      	str	r3, [sp, #8]
 80040aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	f107 0310 	add.w	r3, r7, #16
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f7ff fe56 	bl	8003d6c <_ntoa_format>
 80040c0:	4603      	mov	r3, r0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3738      	adds	r7, #56	; 0x38
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	0000      	movs	r0, r0
 80040cc:	0000      	movs	r0, r0
	...

080040d0 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80040d0:	b590      	push	{r4, r7, lr}
 80040d2:	b09d      	sub	sp, #116	; 0x74
 80040d4:	af04      	add	r7, sp, #16
 80040d6:	6178      	str	r0, [r7, #20]
 80040d8:	6139      	str	r1, [r7, #16]
 80040da:	60fa      	str	r2, [r7, #12]
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80040f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040fa:	f7fc fd0d 	bl	8000b18 <__aeabi_dcmpeq>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10f      	bne.n	8004124 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8004104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004106:	9303      	str	r3, [sp, #12]
 8004108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800410a:	9302      	str	r3, [sp, #8]
 800410c:	2303      	movs	r3, #3
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	4ba7      	ldr	r3, [pc, #668]	; (80043b0 <_ftoa+0x2e0>)
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	6939      	ldr	r1, [r7, #16]
 800411a:	6978      	ldr	r0, [r7, #20]
 800411c:	f7ff fdd6 	bl	8003ccc <_out_rev>
 8004120:	4603      	mov	r3, r0
 8004122:	e222      	b.n	800456a <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8004124:	f04f 32ff 	mov.w	r2, #4294967295
 8004128:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800412c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004130:	f7fc fcfc 	bl	8000b2c <__aeabi_dcmplt>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00f      	beq.n	800415a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800413a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800413c:	9303      	str	r3, [sp, #12]
 800413e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004140:	9302      	str	r3, [sp, #8]
 8004142:	2304      	movs	r3, #4
 8004144:	9301      	str	r3, [sp, #4]
 8004146:	4b9b      	ldr	r3, [pc, #620]	; (80043b4 <_ftoa+0x2e4>)
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	6939      	ldr	r1, [r7, #16]
 8004150:	6978      	ldr	r0, [r7, #20]
 8004152:	f7ff fdbb 	bl	8003ccc <_out_rev>
 8004156:	4603      	mov	r3, r0
 8004158:	e207      	b.n	800456a <_ftoa+0x49a>
  if (value > DBL_MAX)
 800415a:	f04f 32ff 	mov.w	r2, #4294967295
 800415e:	4b96      	ldr	r3, [pc, #600]	; (80043b8 <_ftoa+0x2e8>)
 8004160:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004164:	f7fc fd00 	bl	8000b68 <__aeabi_dcmpgt>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d01d      	beq.n	80041aa <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800416e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <_ftoa+0xac>
 8004178:	4b90      	ldr	r3, [pc, #576]	; (80043bc <_ftoa+0x2ec>)
 800417a:	e000      	b.n	800417e <_ftoa+0xae>
 800417c:	4b90      	ldr	r3, [pc, #576]	; (80043c0 <_ftoa+0x2f0>)
 800417e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004180:	f002 0204 	and.w	r2, r2, #4
 8004184:	2a00      	cmp	r2, #0
 8004186:	d001      	beq.n	800418c <_ftoa+0xbc>
 8004188:	2204      	movs	r2, #4
 800418a:	e000      	b.n	800418e <_ftoa+0xbe>
 800418c:	2203      	movs	r2, #3
 800418e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004190:	9103      	str	r1, [sp, #12]
 8004192:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004194:	9102      	str	r1, [sp, #8]
 8004196:	9201      	str	r2, [sp, #4]
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	6939      	ldr	r1, [r7, #16]
 80041a0:	6978      	ldr	r0, [r7, #20]
 80041a2:	f7ff fd93 	bl	8003ccc <_out_rev>
 80041a6:	4603      	mov	r3, r0
 80041a8:	e1df      	b.n	800456a <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80041aa:	a37d      	add	r3, pc, #500	; (adr r3, 80043a0 <_ftoa+0x2d0>)
 80041ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041b4:	f7fc fcd8 	bl	8000b68 <__aeabi_dcmpgt>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <_ftoa+0x102>
 80041be:	a37a      	add	r3, pc, #488	; (adr r3, 80043a8 <_ftoa+0x2d8>)
 80041c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041c8:	f7fc fcb0 	bl	8000b2c <__aeabi_dcmplt>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00f      	beq.n	80041f2 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80041d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041d4:	9302      	str	r3, [sp, #8]
 80041d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d8:	9301      	str	r3, [sp, #4]
 80041da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	ed97 0b00 	vldr	d0, [r7]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	6939      	ldr	r1, [r7, #16]
 80041e8:	6978      	ldr	r0, [r7, #20]
 80041ea:	f000 f9c9 	bl	8004580 <_etoa>
 80041ee:	4603      	mov	r3, r0
 80041f0:	e1bb      	b.n	800456a <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80041f2:	2300      	movs	r3, #0
 80041f4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004204:	f7fc fc92 	bl	8000b2c <__aeabi_dcmplt>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00e      	beq.n	800422c <_ftoa+0x15c>
    negative = true;
 800420e:	2301      	movs	r3, #1
 8004210:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8004214:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004218:	f04f 0000 	mov.w	r0, #0
 800421c:	f04f 0100 	mov.w	r1, #0
 8004220:	f7fc f85a 	bl	80002d8 <__aeabi_dsub>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800422c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800422e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10d      	bne.n	8004252 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004236:	2306      	movs	r3, #6
 8004238:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800423a:	e00a      	b.n	8004252 <_ftoa+0x182>
    buf[len++] = '0';
 800423c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004242:	3360      	adds	r3, #96	; 0x60
 8004244:	443b      	add	r3, r7
 8004246:	2230      	movs	r2, #48	; 0x30
 8004248:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800424c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800424e:	3b01      	subs	r3, #1
 8004250:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8004252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004254:	2b1f      	cmp	r3, #31
 8004256:	d802      	bhi.n	800425e <_ftoa+0x18e>
 8004258:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800425a:	2b09      	cmp	r3, #9
 800425c:	d8ee      	bhi.n	800423c <_ftoa+0x16c>
  }

  int whole = (int)value;
 800425e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004262:	f7fc fca1 	bl	8000ba8 <__aeabi_d2iz>
 8004266:	4603      	mov	r3, r0
 8004268:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800426a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800426c:	f7fc f982 	bl	8000574 <__aeabi_i2d>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004278:	f7fc f82e 	bl	80002d8 <__aeabi_dsub>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4610      	mov	r0, r2
 8004282:	4619      	mov	r1, r3
 8004284:	4a4f      	ldr	r2, [pc, #316]	; (80043c4 <_ftoa+0x2f4>)
 8004286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	4413      	add	r3, r2
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	f7fc f9da 	bl	8000648 <__aeabi_dmul>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800429c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80042a0:	f7fc fcaa 	bl	8000bf8 <__aeabi_d2uiz>
 80042a4:	4603      	mov	r3, r0
 80042a6:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 80042a8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80042aa:	f7fc f953 	bl	8000554 <__aeabi_ui2d>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80042b6:	f7fc f80f 	bl	80002d8 <__aeabi_dsub>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	4b40      	ldr	r3, [pc, #256]	; (80043c8 <_ftoa+0x2f8>)
 80042c8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80042cc:	f7fc fc4c 	bl	8000b68 <__aeabi_dcmpgt>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d016      	beq.n	8004304 <_ftoa+0x234>
    ++frac;
 80042d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042d8:	3301      	adds	r3, #1
 80042da:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80042dc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80042de:	f7fc f939 	bl	8000554 <__aeabi_ui2d>
 80042e2:	4a38      	ldr	r2, [pc, #224]	; (80043c4 <_ftoa+0x2f4>)
 80042e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	4413      	add	r3, r2
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	f7fc fc31 	bl	8000b54 <__aeabi_dcmpge>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d01a      	beq.n	800432e <_ftoa+0x25e>
      frac = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 80042fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042fe:	3301      	adds	r3, #1
 8004300:	657b      	str	r3, [r7, #84]	; 0x54
 8004302:	e014      	b.n	800432e <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	4b2f      	ldr	r3, [pc, #188]	; (80043c8 <_ftoa+0x2f8>)
 800430a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800430e:	f7fc fc0d 	bl	8000b2c <__aeabi_dcmplt>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10a      	bne.n	800432e <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8004318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800431a:	2b00      	cmp	r3, #0
 800431c:	d004      	beq.n	8004328 <_ftoa+0x258>
 800431e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8004328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800432a:	3301      	adds	r3, #1
 800432c:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800432e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004330:	2b00      	cmp	r3, #0
 8004332:	d14b      	bne.n	80043cc <_ftoa+0x2fc>
    diff = value - (double)whole;
 8004334:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004336:	f7fc f91d 	bl	8000574 <__aeabi_i2d>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004342:	f7fb ffc9 	bl	80002d8 <__aeabi_dsub>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800434e:	2301      	movs	r3, #1
 8004350:	461c      	mov	r4, r3
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	4b1c      	ldr	r3, [pc, #112]	; (80043c8 <_ftoa+0x2f8>)
 8004358:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800435c:	f7fc fbe6 	bl	8000b2c <__aeabi_dcmplt>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <_ftoa+0x29a>
 8004366:	2300      	movs	r3, #0
 8004368:	461c      	mov	r4, r3
 800436a:	b2e3      	uxtb	r3, r4
 800436c:	f083 0301 	eor.w	r3, r3, #1
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d109      	bne.n	800438a <_ftoa+0x2ba>
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	4b13      	ldr	r3, [pc, #76]	; (80043c8 <_ftoa+0x2f8>)
 800437c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004380:	f7fc fbf2 	bl	8000b68 <__aeabi_dcmpgt>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d064      	beq.n	8004454 <_ftoa+0x384>
 800438a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 8081 	beq.w	8004498 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8004396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004398:	3301      	adds	r3, #1
 800439a:	657b      	str	r3, [r7, #84]	; 0x54
 800439c:	e07c      	b.n	8004498 <_ftoa+0x3c8>
 800439e:	bf00      	nop
 80043a0:	00000000 	.word	0x00000000
 80043a4:	41cdcd65 	.word	0x41cdcd65
 80043a8:	00000000 	.word	0x00000000
 80043ac:	c1cdcd65 	.word	0xc1cdcd65
 80043b0:	08017e38 	.word	0x08017e38
 80043b4:	08017e3c 	.word	0x08017e3c
 80043b8:	7fefffff 	.word	0x7fefffff
 80043bc:	08017e44 	.word	0x08017e44
 80043c0:	08017e4c 	.word	0x08017e4c
 80043c4:	08017f40 	.word	0x08017f40
 80043c8:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 80043cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80043d0:	e01f      	b.n	8004412 <_ftoa+0x342>
      --count;
 80043d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d4:	3b01      	subs	r3, #1
 80043d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 80043d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80043da:	4b66      	ldr	r3, [pc, #408]	; (8004574 <_ftoa+0x4a4>)
 80043dc:	fba3 2301 	umull	r2, r3, r3, r1
 80043e0:	08da      	lsrs	r2, r3, #3
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	1aca      	subs	r2, r1, r3
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043f0:	1c59      	adds	r1, r3, #1
 80043f2:	65f9      	str	r1, [r7, #92]	; 0x5c
 80043f4:	3230      	adds	r2, #48	; 0x30
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	3360      	adds	r3, #96	; 0x60
 80043fa:	443b      	add	r3, r7
 80043fc:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8004400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004402:	4a5c      	ldr	r2, [pc, #368]	; (8004574 <_ftoa+0x4a4>)
 8004404:	fba2 2303 	umull	r2, r3, r2, r3
 8004408:	08db      	lsrs	r3, r3, #3
 800440a:	653b      	str	r3, [r7, #80]	; 0x50
 800440c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004414:	2b1f      	cmp	r3, #31
 8004416:	d9dc      	bls.n	80043d2 <_ftoa+0x302>
 8004418:	e009      	b.n	800442e <_ftoa+0x35e>
        break;
 800441a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800441c:	e007      	b.n	800442e <_ftoa+0x35e>
      buf[len++] = '0';
 800441e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004424:	3360      	adds	r3, #96	; 0x60
 8004426:	443b      	add	r3, r7
 8004428:	2230      	movs	r2, #48	; 0x30
 800442a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800442e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004430:	2b1f      	cmp	r3, #31
 8004432:	d804      	bhi.n	800443e <_ftoa+0x36e>
 8004434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004436:	1e5a      	subs	r2, r3, #1
 8004438:	64fa      	str	r2, [r7, #76]	; 0x4c
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1ef      	bne.n	800441e <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800443e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004440:	2b1f      	cmp	r3, #31
 8004442:	d829      	bhi.n	8004498 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8004444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	65fa      	str	r2, [r7, #92]	; 0x5c
 800444a:	3360      	adds	r3, #96	; 0x60
 800444c:	443b      	add	r3, r7
 800444e:	222e      	movs	r2, #46	; 0x2e
 8004450:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004454:	e020      	b.n	8004498 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8004456:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004458:	4b47      	ldr	r3, [pc, #284]	; (8004578 <_ftoa+0x4a8>)
 800445a:	fb83 1302 	smull	r1, r3, r3, r2
 800445e:	1099      	asrs	r1, r3, #2
 8004460:	17d3      	asrs	r3, r2, #31
 8004462:	1ac9      	subs	r1, r1, r3
 8004464:	460b      	mov	r3, r1
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	1ad1      	subs	r1, r2, r3
 800446e:	b2ca      	uxtb	r2, r1
 8004470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004472:	1c59      	adds	r1, r3, #1
 8004474:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004476:	3230      	adds	r2, #48	; 0x30
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	3360      	adds	r3, #96	; 0x60
 800447c:	443b      	add	r3, r7
 800447e:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8004482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004484:	4a3c      	ldr	r2, [pc, #240]	; (8004578 <_ftoa+0x4a8>)
 8004486:	fb82 1203 	smull	r1, r2, r2, r3
 800448a:	1092      	asrs	r2, r2, #2
 800448c:	17db      	asrs	r3, r3, #31
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	657b      	str	r3, [r7, #84]	; 0x54
 8004492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800449a:	2b1f      	cmp	r3, #31
 800449c:	d9db      	bls.n	8004456 <_ftoa+0x386>
 800449e:	e000      	b.n	80044a2 <_ftoa+0x3d2>
      break;
 80044a0:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80044a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d123      	bne.n	80044f4 <_ftoa+0x424>
 80044ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01e      	beq.n	80044f4 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80044b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d014      	beq.n	80044e6 <_ftoa+0x416>
 80044bc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d104      	bne.n	80044ce <_ftoa+0x3fe>
 80044c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00b      	beq.n	80044e6 <_ftoa+0x416>
      width--;
 80044ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044d0:	3b01      	subs	r3, #1
 80044d2:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80044d4:	e007      	b.n	80044e6 <_ftoa+0x416>
      buf[len++] = '0';
 80044d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	65fa      	str	r2, [r7, #92]	; 0x5c
 80044dc:	3360      	adds	r3, #96	; 0x60
 80044de:	443b      	add	r3, r7
 80044e0:	2230      	movs	r2, #48	; 0x30
 80044e2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80044e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d202      	bcs.n	80044f4 <_ftoa+0x424>
 80044ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044f0:	2b1f      	cmp	r3, #31
 80044f2:	d9f0      	bls.n	80044d6 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80044f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044f6:	2b1f      	cmp	r3, #31
 80044f8:	d827      	bhi.n	800454a <_ftoa+0x47a>
    if (negative) {
 80044fa:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d008      	beq.n	8004514 <_ftoa+0x444>
      buf[len++] = '-';
 8004502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004508:	3360      	adds	r3, #96	; 0x60
 800450a:	443b      	add	r3, r7
 800450c:	222d      	movs	r2, #45	; 0x2d
 800450e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8004512:	e01a      	b.n	800454a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8004514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b00      	cmp	r3, #0
 800451c:	d008      	beq.n	8004530 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800451e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004524:	3360      	adds	r3, #96	; 0x60
 8004526:	443b      	add	r3, r7
 8004528:	222b      	movs	r2, #43	; 0x2b
 800452a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800452e:	e00c      	b.n	800454a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8004530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b00      	cmp	r3, #0
 8004538:	d007      	beq.n	800454a <_ftoa+0x47a>
      buf[len++] = ' ';
 800453a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004540:	3360      	adds	r3, #96	; 0x60
 8004542:	443b      	add	r3, r7
 8004544:	2220      	movs	r2, #32
 8004546:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800454a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800454c:	9303      	str	r3, [sp, #12]
 800454e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004550:	9302      	str	r3, [sp, #8]
 8004552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004554:	9301      	str	r3, [sp, #4]
 8004556:	f107 0318 	add.w	r3, r7, #24
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	6939      	ldr	r1, [r7, #16]
 8004562:	6978      	ldr	r0, [r7, #20]
 8004564:	f7ff fbb2 	bl	8003ccc <_out_rev>
 8004568:	4603      	mov	r3, r0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3764      	adds	r7, #100	; 0x64
 800456e:	46bd      	mov	sp, r7
 8004570:	bd90      	pop	{r4, r7, pc}
 8004572:	bf00      	nop
 8004574:	cccccccd 	.word	0xcccccccd
 8004578:	66666667 	.word	0x66666667
 800457c:	00000000 	.word	0x00000000

08004580 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004584:	b09f      	sub	sp, #124	; 0x7c
 8004586:	af06      	add	r7, sp, #24
 8004588:	6278      	str	r0, [r7, #36]	; 0x24
 800458a:	6239      	str	r1, [r7, #32]
 800458c:	61fa      	str	r2, [r7, #28]
 800458e:	61bb      	str	r3, [r7, #24]
 8004590:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8004594:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004598:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800459c:	f7fc fabc 	bl	8000b18 <__aeabi_dcmpeq>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d014      	beq.n	80045d0 <_etoa+0x50>
 80045a6:	f04f 32ff 	mov.w	r2, #4294967295
 80045aa:	4bc1      	ldr	r3, [pc, #772]	; (80048b0 <_etoa+0x330>)
 80045ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80045b0:	f7fc fada 	bl	8000b68 <__aeabi_dcmpgt>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10a      	bne.n	80045d0 <_etoa+0x50>
 80045ba:	f04f 32ff 	mov.w	r2, #4294967295
 80045be:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80045c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80045c6:	f7fc fab1 	bl	8000b2c <__aeabi_dcmplt>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d012      	beq.n	80045f6 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80045d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045d4:	9302      	str	r3, [sp, #8]
 80045d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	ed97 0b04 	vldr	d0, [r7, #16]
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	6a39      	ldr	r1, [r7, #32]
 80045ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045ee:	f7ff fd6f 	bl	80040d0 <_ftoa>
 80045f2:	4603      	mov	r3, r0
 80045f4:	e23f      	b.n	8004a76 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 80045f6:	2301      	movs	r3, #1
 80045f8:	461e      	mov	r6, r3
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004606:	f7fc fa91 	bl	8000b2c <__aeabi_dcmplt>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <_etoa+0x94>
 8004610:	2300      	movs	r3, #0
 8004612:	461e      	mov	r6, r3
 8004614:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8004618:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800461c:	2b00      	cmp	r3, #0
 800461e:	d009      	beq.n	8004634 <_etoa+0xb4>
    value = -value;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800462a:	607b      	str	r3, [r7, #4]
 800462c:	ed97 7b00 	vldr	d7, [r7]
 8004630:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8004634:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800463c:	2b00      	cmp	r3, #0
 800463e:	d102      	bne.n	8004646 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004640:	2306      	movs	r3, #6
 8004642:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8004646:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800464a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800464e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	0d0a      	lsrs	r2, r1, #20
 800465c:	2300      	movs	r3, #0
 800465e:	4613      	mov	r3, r2
 8004660:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004664:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004668:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800466a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800466e:	4690      	mov	r8, r2
 8004670:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8004674:	4644      	mov	r4, r8
 8004676:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 800467a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800467e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8004682:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004684:	f7fb ff76 	bl	8000574 <__aeabi_i2d>
 8004688:	a37d      	add	r3, pc, #500	; (adr r3, 8004880 <_etoa+0x300>)
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	f7fb ffdb 	bl	8000648 <__aeabi_dmul>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4610      	mov	r0, r2
 8004698:	4619      	mov	r1, r3
 800469a:	a37b      	add	r3, pc, #492	; (adr r3, 8004888 <_etoa+0x308>)
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	f7fb fe1c 	bl	80002dc <__adddf3>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4614      	mov	r4, r2
 80046aa:	461d      	mov	r5, r3
 80046ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	4b7f      	ldr	r3, [pc, #508]	; (80048b4 <_etoa+0x334>)
 80046b6:	f7fb fe0f 	bl	80002d8 <__aeabi_dsub>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4610      	mov	r0, r2
 80046c0:	4619      	mov	r1, r3
 80046c2:	a373      	add	r3, pc, #460	; (adr r3, 8004890 <_etoa+0x310>)
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	f7fb ffbe 	bl	8000648 <__aeabi_dmul>
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	4620      	mov	r0, r4
 80046d2:	4629      	mov	r1, r5
 80046d4:	f7fb fe02 	bl	80002dc <__adddf3>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	4610      	mov	r0, r2
 80046de:	4619      	mov	r1, r3
 80046e0:	f7fc fa62 	bl	8000ba8 <__aeabi_d2iz>
 80046e4:	4603      	mov	r3, r0
 80046e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80046e8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80046ea:	f7fb ff43 	bl	8000574 <__aeabi_i2d>
 80046ee:	a36a      	add	r3, pc, #424	; (adr r3, 8004898 <_etoa+0x318>)
 80046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f4:	f7fb ffa8 	bl	8000648 <__aeabi_dmul>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4610      	mov	r0, r2
 80046fe:	4619      	mov	r1, r3
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	4b6c      	ldr	r3, [pc, #432]	; (80048b8 <_etoa+0x338>)
 8004706:	f7fb fde9 	bl	80002dc <__adddf3>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4610      	mov	r0, r2
 8004710:	4619      	mov	r1, r3
 8004712:	f7fc fa49 	bl	8000ba8 <__aeabi_d2iz>
 8004716:	4603      	mov	r3, r0
 8004718:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800471a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800471c:	f7fb ff2a 	bl	8000574 <__aeabi_i2d>
 8004720:	a35f      	add	r3, pc, #380	; (adr r3, 80048a0 <_etoa+0x320>)
 8004722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004726:	f7fb ff8f 	bl	8000648 <__aeabi_dmul>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4614      	mov	r4, r2
 8004730:	461d      	mov	r5, r3
 8004732:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004734:	f7fb ff1e 	bl	8000574 <__aeabi_i2d>
 8004738:	a35b      	add	r3, pc, #364	; (adr r3, 80048a8 <_etoa+0x328>)
 800473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473e:	f7fb ff83 	bl	8000648 <__aeabi_dmul>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4620      	mov	r0, r4
 8004748:	4629      	mov	r1, r5
 800474a:	f7fb fdc5 	bl	80002d8 <__aeabi_dsub>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8004756:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800475a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800475e:	f7fb ff73 	bl	8000648 <__aeabi_dmul>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800476a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800476c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8004770:	17da      	asrs	r2, r3, #31
 8004772:	469a      	mov	sl, r3
 8004774:	4693      	mov	fp, r2
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8004782:	2200      	movs	r2, #0
 8004784:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8004788:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800478c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	f7fb fda2 	bl	80002dc <__adddf3>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4690      	mov	r8, r2
 800479e:	4699      	mov	r9, r3
 80047a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047a4:	f04f 0000 	mov.w	r0, #0
 80047a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80047ac:	f7fb fd94 	bl	80002d8 <__aeabi_dsub>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4692      	mov	sl, r2
 80047b6:	469b      	mov	fp, r3
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	4b3f      	ldr	r3, [pc, #252]	; (80048bc <_etoa+0x33c>)
 80047be:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80047c2:	f7fc f86b 	bl	800089c <__aeabi_ddiv>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4610      	mov	r0, r2
 80047cc:	4619      	mov	r1, r3
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	4b3b      	ldr	r3, [pc, #236]	; (80048c0 <_etoa+0x340>)
 80047d4:	f7fb fd82 	bl	80002dc <__adddf3>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80047e0:	f7fc f85c 	bl	800089c <__aeabi_ddiv>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4610      	mov	r0, r2
 80047ea:	4619      	mov	r1, r3
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	4b34      	ldr	r3, [pc, #208]	; (80048c4 <_etoa+0x344>)
 80047f2:	f7fb fd73 	bl	80002dc <__adddf3>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80047fe:	f7fc f84d 	bl	800089c <__aeabi_ddiv>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	4650      	mov	r0, sl
 8004808:	4659      	mov	r1, fp
 800480a:	f7fb fd67 	bl	80002dc <__adddf3>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4640      	mov	r0, r8
 8004814:	4649      	mov	r1, r9
 8004816:	f7fc f841 	bl	800089c <__aeabi_ddiv>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	4610      	mov	r0, r2
 8004820:	4619      	mov	r1, r3
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	4b28      	ldr	r3, [pc, #160]	; (80048c8 <_etoa+0x348>)
 8004828:	f7fb fd58 	bl	80002dc <__adddf3>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4620      	mov	r0, r4
 8004832:	4629      	mov	r1, r5
 8004834:	f7fb ff08 	bl	8000648 <__aeabi_dmul>
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8004840:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004844:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004848:	f7fc f970 	bl	8000b2c <__aeabi_dcmplt>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00d      	beq.n	800486e <_etoa+0x2ee>
    expval--;
 8004852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004854:	3b01      	subs	r3, #1
 8004856:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8004858:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	4b17      	ldr	r3, [pc, #92]	; (80048c0 <_etoa+0x340>)
 8004862:	f7fc f81b 	bl	800089c <__aeabi_ddiv>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800486e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004870:	2b63      	cmp	r3, #99	; 0x63
 8004872:	dc2b      	bgt.n	80048cc <_etoa+0x34c>
 8004874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004876:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800487a:	db27      	blt.n	80048cc <_etoa+0x34c>
 800487c:	2304      	movs	r3, #4
 800487e:	e026      	b.n	80048ce <_etoa+0x34e>
 8004880:	509f79fb 	.word	0x509f79fb
 8004884:	3fd34413 	.word	0x3fd34413
 8004888:	8b60c8b3 	.word	0x8b60c8b3
 800488c:	3fc68a28 	.word	0x3fc68a28
 8004890:	636f4361 	.word	0x636f4361
 8004894:	3fd287a7 	.word	0x3fd287a7
 8004898:	0979a371 	.word	0x0979a371
 800489c:	400a934f 	.word	0x400a934f
 80048a0:	bbb55516 	.word	0xbbb55516
 80048a4:	40026bb1 	.word	0x40026bb1
 80048a8:	fefa39ef 	.word	0xfefa39ef
 80048ac:	3fe62e42 	.word	0x3fe62e42
 80048b0:	7fefffff 	.word	0x7fefffff
 80048b4:	3ff80000 	.word	0x3ff80000
 80048b8:	3fe00000 	.word	0x3fe00000
 80048bc:	402c0000 	.word	0x402c0000
 80048c0:	40240000 	.word	0x40240000
 80048c4:	40180000 	.word	0x40180000
 80048c8:	3ff00000 	.word	0x3ff00000
 80048cc:	2305      	movs	r3, #5
 80048ce:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80048d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d03d      	beq.n	8004958 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80048dc:	a368      	add	r3, pc, #416	; (adr r3, 8004a80 <_etoa+0x500>)
 80048de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048e6:	f7fc f935 	bl	8000b54 <__aeabi_dcmpge>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d024      	beq.n	800493a <_etoa+0x3ba>
 80048f0:	a365      	add	r3, pc, #404	; (adr r3, 8004a88 <_etoa+0x508>)
 80048f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048fa:	f7fc f917 	bl	8000b2c <__aeabi_dcmplt>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d01a      	beq.n	800493a <_etoa+0x3ba>
      if ((int)prec > expval) {
 8004904:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004908:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800490a:	429a      	cmp	r2, r3
 800490c:	da07      	bge.n	800491e <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 800490e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	3b01      	subs	r3, #1
 8004918:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800491c:	e002      	b.n	8004924 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 800491e:	2300      	movs	r3, #0
 8004920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8004924:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004928:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800492c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004938:	e00e      	b.n	8004958 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800493a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <_etoa+0x3d8>
 8004942:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494a:	2b00      	cmp	r3, #0
 800494c:	d004      	beq.n	8004958 <_etoa+0x3d8>
        --prec;
 800494e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004952:	3b01      	subs	r3, #1
 8004954:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8004958:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800495c:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 800495e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004962:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004964:	429a      	cmp	r2, r3
 8004966:	d904      	bls.n	8004972 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8004968:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800496a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	657b      	str	r3, [r7, #84]	; 0x54
 8004970:	e001      	b.n	8004976 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8004976:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d004      	beq.n	800498c <_etoa+0x40c>
 8004982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 800498c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d009      	beq.n	80049a6 <_etoa+0x426>
    value /= conv.F;
 8004992:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004996:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800499a:	f7fb ff7f 	bl	800089c <__aeabi_ddiv>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80049aa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d006      	beq.n	80049c0 <_etoa+0x440>
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	60bb      	str	r3, [r7, #8]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	e003      	b.n	80049c8 <_etoa+0x448>
 80049c0:	ed97 7b04 	vldr	d7, [r7, #16]
 80049c4:	ed87 7b02 	vstr	d7, [r7, #8]
 80049c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049d0:	9302      	str	r3, [sp, #8]
 80049d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d4:	9301      	str	r3, [sp, #4]
 80049d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	ed97 0b02 	vldr	d0, [r7, #8]
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	6a39      	ldr	r1, [r7, #32]
 80049e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049e8:	f7ff fb72 	bl	80040d0 <_ftoa>
 80049ec:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 80049ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d03f      	beq.n	8004a74 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80049f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049f8:	f003 0320 	and.w	r3, r3, #32
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <_etoa+0x484>
 8004a00:	2045      	movs	r0, #69	; 0x45
 8004a02:	e000      	b.n	8004a06 <_etoa+0x486>
 8004a04:	2065      	movs	r0, #101	; 0x65
 8004a06:	69fa      	ldr	r2, [r7, #28]
 8004a08:	1c53      	adds	r3, r2, #1
 8004a0a:	61fb      	str	r3, [r7, #28]
 8004a0c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	6a39      	ldr	r1, [r7, #32]
 8004a12:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8004a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bfb8      	it	lt
 8004a1a:	425b      	neglt	r3, r3
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a20:	0fdb      	lsrs	r3, r3, #31
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a26:	3a01      	subs	r2, #1
 8004a28:	2105      	movs	r1, #5
 8004a2a:	9105      	str	r1, [sp, #20]
 8004a2c:	9204      	str	r2, [sp, #16]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	9203      	str	r2, [sp, #12]
 8004a32:	220a      	movs	r2, #10
 8004a34:	9202      	str	r2, [sp, #8]
 8004a36:	9301      	str	r3, [sp, #4]
 8004a38:	9000      	str	r0, [sp, #0]
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	6a39      	ldr	r1, [r7, #32]
 8004a40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a42:	f7ff fa6f 	bl	8003f24 <_ntoa_long>
 8004a46:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8004a48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00f      	beq.n	8004a74 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8004a54:	e007      	b.n	8004a66 <_etoa+0x4e6>
 8004a56:	69fa      	ldr	r2, [r7, #28]
 8004a58:	1c53      	adds	r3, r2, #1
 8004a5a:	61fb      	str	r3, [r7, #28]
 8004a5c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	6a39      	ldr	r1, [r7, #32]
 8004a62:	2020      	movs	r0, #32
 8004a64:	47a0      	blx	r4
 8004a66:	69fa      	ldr	r2, [r7, #28]
 8004a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d8f0      	bhi.n	8004a56 <_etoa+0x4d6>
    }
  }
  return idx;
 8004a74:	69fb      	ldr	r3, [r7, #28]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3764      	adds	r7, #100	; 0x64
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a80:	eb1c432d 	.word	0xeb1c432d
 8004a84:	3f1a36e2 	.word	0x3f1a36e2
 8004a88:	00000000 	.word	0x00000000
 8004a8c:	412e8480 	.word	0x412e8480

08004a90 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8004a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a94:	b0a3      	sub	sp, #140	; 0x8c
 8004a96:	af0a      	add	r7, sp, #40	; 0x28
 8004a98:	6178      	str	r0, [r7, #20]
 8004a9a:	6139      	str	r1, [r7, #16]
 8004a9c:	60fa      	str	r2, [r7, #12]
 8004a9e:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f040 84cf 	bne.w	800544a <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 8004aac:	4ba8      	ldr	r3, [pc, #672]	; (8004d50 <_vsnprintf+0x2c0>)
 8004aae:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8004ab0:	f000 bccb 	b.w	800544a <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	2b25      	cmp	r3, #37	; 0x25
 8004aba:	d00d      	beq.n	8004ad8 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	7818      	ldrb	r0, [r3, #0]
 8004ac0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ac2:	1c53      	adds	r3, r2, #1
 8004ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac6:	697c      	ldr	r4, [r7, #20]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6939      	ldr	r1, [r7, #16]
 8004acc:	47a0      	blx	r4
      format++;
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	60bb      	str	r3, [r7, #8]
      continue;
 8004ad4:	f000 bcb9 	b.w	800544a <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	3301      	adds	r3, #1
 8004adc:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	3b20      	subs	r3, #32
 8004ae8:	2b10      	cmp	r3, #16
 8004aea:	d857      	bhi.n	8004b9c <_vsnprintf+0x10c>
 8004aec:	a201      	add	r2, pc, #4	; (adr r2, 8004af4 <_vsnprintf+0x64>)
 8004aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af2:	bf00      	nop
 8004af4:	08004b75 	.word	0x08004b75
 8004af8:	08004b9d 	.word	0x08004b9d
 8004afc:	08004b9d 	.word	0x08004b9d
 8004b00:	08004b89 	.word	0x08004b89
 8004b04:	08004b9d 	.word	0x08004b9d
 8004b08:	08004b9d 	.word	0x08004b9d
 8004b0c:	08004b9d 	.word	0x08004b9d
 8004b10:	08004b9d 	.word	0x08004b9d
 8004b14:	08004b9d 	.word	0x08004b9d
 8004b18:	08004b9d 	.word	0x08004b9d
 8004b1c:	08004b9d 	.word	0x08004b9d
 8004b20:	08004b61 	.word	0x08004b61
 8004b24:	08004b9d 	.word	0x08004b9d
 8004b28:	08004b4d 	.word	0x08004b4d
 8004b2c:	08004b9d 	.word	0x08004b9d
 8004b30:	08004b9d 	.word	0x08004b9d
 8004b34:	08004b39 	.word	0x08004b39
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8004b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b3a:	f043 0301 	orr.w	r3, r3, #1
 8004b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	3301      	adds	r3, #1
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	2301      	movs	r3, #1
 8004b48:	653b      	str	r3, [r7, #80]	; 0x50
 8004b4a:	e02a      	b.n	8004ba2 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8004b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b4e:	f043 0302 	orr.w	r3, r3, #2
 8004b52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	3301      	adds	r3, #1
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	653b      	str	r3, [r7, #80]	; 0x50
 8004b5e:	e020      	b.n	8004ba2 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8004b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b62:	f043 0304 	orr.w	r3, r3, #4
 8004b66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	60bb      	str	r3, [r7, #8]
 8004b6e:	2301      	movs	r3, #1
 8004b70:	653b      	str	r3, [r7, #80]	; 0x50
 8004b72:	e016      	b.n	8004ba2 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8004b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b76:	f043 0308 	orr.w	r3, r3, #8
 8004b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	60bb      	str	r3, [r7, #8]
 8004b82:	2301      	movs	r3, #1
 8004b84:	653b      	str	r3, [r7, #80]	; 0x50
 8004b86:	e00c      	b.n	8004ba2 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8004b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b8a:	f043 0310 	orr.w	r3, r3, #16
 8004b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	3301      	adds	r3, #1
 8004b94:	60bb      	str	r3, [r7, #8]
 8004b96:	2301      	movs	r3, #1
 8004b98:	653b      	str	r3, [r7, #80]	; 0x50
 8004b9a:	e002      	b.n	8004ba2 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	653b      	str	r3, [r7, #80]	; 0x50
 8004ba0:	bf00      	nop
      }
    } while (n);
 8004ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d19c      	bne.n	8004ae2 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff f850 	bl	8003c56 <_is_digit>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d006      	beq.n	8004bca <_vsnprintf+0x13a>
      width = _atoi(&format);
 8004bbc:	f107 0308 	add.w	r3, r7, #8
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff f85f 	bl	8003c84 <_atoi>
 8004bc6:	65b8      	str	r0, [r7, #88]	; 0x58
 8004bc8:	e01a      	b.n	8004c00 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b2a      	cmp	r3, #42	; 0x2a
 8004bd0:	d116      	bne.n	8004c00 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8004bd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bd6:	1d1a      	adds	r2, r3, #4
 8004bd8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8004be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	da07      	bge.n	8004bf6 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8004be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004be8:	f043 0302 	orr.w	r3, r3, #2
 8004bec:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8004bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf0:	425b      	negs	r3, r3
 8004bf2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bf4:	e001      	b.n	8004bfa <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf8:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b2e      	cmp	r3, #46	; 0x2e
 8004c0a:	d127      	bne.n	8004c5c <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8004c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c12:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	3301      	adds	r3, #1
 8004c18:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff f819 	bl	8003c56 <_is_digit>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d006      	beq.n	8004c38 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8004c2a:	f107 0308 	add.w	r3, r7, #8
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff f828 	bl	8003c84 <_atoi>
 8004c34:	6578      	str	r0, [r7, #84]	; 0x54
 8004c36:	e011      	b.n	8004c5c <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c3e:	d10d      	bne.n	8004c5c <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8004c40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c44:	1d1a      	adds	r2, r3, #4
 8004c46:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8004c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004c54:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	3b68      	subs	r3, #104	; 0x68
 8004c62:	2b12      	cmp	r3, #18
 8004c64:	d866      	bhi.n	8004d34 <_vsnprintf+0x2a4>
 8004c66:	a201      	add	r2, pc, #4	; (adr r2, 8004c6c <_vsnprintf+0x1dc>)
 8004c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6c:	08004cdf 	.word	0x08004cdf
 8004c70:	08004d35 	.word	0x08004d35
 8004c74:	08004d15 	.word	0x08004d15
 8004c78:	08004d35 	.word	0x08004d35
 8004c7c:	08004cb9 	.word	0x08004cb9
 8004c80:	08004d35 	.word	0x08004d35
 8004c84:	08004d35 	.word	0x08004d35
 8004c88:	08004d35 	.word	0x08004d35
 8004c8c:	08004d35 	.word	0x08004d35
 8004c90:	08004d35 	.word	0x08004d35
 8004c94:	08004d35 	.word	0x08004d35
 8004c98:	08004d35 	.word	0x08004d35
 8004c9c:	08004d05 	.word	0x08004d05
 8004ca0:	08004d35 	.word	0x08004d35
 8004ca4:	08004d35 	.word	0x08004d35
 8004ca8:	08004d35 	.word	0x08004d35
 8004cac:	08004d35 	.word	0x08004d35
 8004cb0:	08004d35 	.word	0x08004d35
 8004cb4:	08004d25 	.word	0x08004d25
      case 'l' :
        flags |= FLAGS_LONG;
 8004cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b6c      	cmp	r3, #108	; 0x6c
 8004ccc:	d134      	bne.n	8004d38 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8004cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004cdc:	e02c      	b.n	8004d38 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8004cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b68      	cmp	r3, #104	; 0x68
 8004cf2:	d123      	bne.n	8004d3c <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 8004cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004d02:	e01b      	b.n	8004d3c <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004d04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	60bb      	str	r3, [r7, #8]
        break;
 8004d12:	e014      	b.n	8004d3e <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	60bb      	str	r3, [r7, #8]
        break;
 8004d22:	e00c      	b.n	8004d3e <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60bb      	str	r3, [r7, #8]
        break;
 8004d32:	e004      	b.n	8004d3e <_vsnprintf+0x2ae>
      default :
        break;
 8004d34:	bf00      	nop
 8004d36:	e002      	b.n	8004d3e <_vsnprintf+0x2ae>
        break;
 8004d38:	bf00      	nop
 8004d3a:	e000      	b.n	8004d3e <_vsnprintf+0x2ae>
        break;
 8004d3c:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2b67      	cmp	r3, #103	; 0x67
 8004d44:	f300 80b8 	bgt.w	8004eb8 <_vsnprintf+0x428>
 8004d48:	2b25      	cmp	r3, #37	; 0x25
 8004d4a:	da27      	bge.n	8004d9c <_vsnprintf+0x30c>
 8004d4c:	e370      	b.n	8005430 <_vsnprintf+0x9a0>
 8004d4e:	bf00      	nop
 8004d50:	08003c01 	.word	0x08003c01
 8004d54:	3b69      	subs	r3, #105	; 0x69
 8004d56:	2201      	movs	r2, #1
 8004d58:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5c:	f249 0241 	movw	r2, #36929	; 0x9041
 8004d60:	401a      	ands	r2, r3
 8004d62:	2a00      	cmp	r2, #0
 8004d64:	bf14      	ite	ne
 8004d66:	2201      	movne	r2, #1
 8004d68:	2200      	moveq	r2, #0
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	2a00      	cmp	r2, #0
 8004d6e:	f040 80aa 	bne.w	8004ec6 <_vsnprintf+0x436>
 8004d72:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8004d76:	2a00      	cmp	r2, #0
 8004d78:	bf14      	ite	ne
 8004d7a:	2201      	movne	r2, #1
 8004d7c:	2200      	moveq	r2, #0
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	2a00      	cmp	r2, #0
 8004d82:	f040 82fb 	bne.w	800537c <_vsnprintf+0x8ec>
 8004d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	bf14      	ite	ne
 8004d8e:	2301      	movne	r3, #1
 8004d90:	2300      	moveq	r3, #0
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f040 828d 	bne.w	80052b4 <_vsnprintf+0x824>
 8004d9a:	e349      	b.n	8005430 <_vsnprintf+0x9a0>
 8004d9c:	3b25      	subs	r3, #37	; 0x25
 8004d9e:	2b42      	cmp	r3, #66	; 0x42
 8004da0:	f200 8346 	bhi.w	8005430 <_vsnprintf+0x9a0>
 8004da4:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <_vsnprintf+0x31c>)
 8004da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	08005419 	.word	0x08005419
 8004db0:	08005431 	.word	0x08005431
 8004db4:	08005431 	.word	0x08005431
 8004db8:	08005431 	.word	0x08005431
 8004dbc:	08005431 	.word	0x08005431
 8004dc0:	08005431 	.word	0x08005431
 8004dc4:	08005431 	.word	0x08005431
 8004dc8:	08005431 	.word	0x08005431
 8004dcc:	08005431 	.word	0x08005431
 8004dd0:	08005431 	.word	0x08005431
 8004dd4:	08005431 	.word	0x08005431
 8004dd8:	08005431 	.word	0x08005431
 8004ddc:	08005431 	.word	0x08005431
 8004de0:	08005431 	.word	0x08005431
 8004de4:	08005431 	.word	0x08005431
 8004de8:	08005431 	.word	0x08005431
 8004dec:	08005431 	.word	0x08005431
 8004df0:	08005431 	.word	0x08005431
 8004df4:	08005431 	.word	0x08005431
 8004df8:	08005431 	.word	0x08005431
 8004dfc:	08005431 	.word	0x08005431
 8004e00:	08005431 	.word	0x08005431
 8004e04:	08005431 	.word	0x08005431
 8004e08:	08005431 	.word	0x08005431
 8004e0c:	08005431 	.word	0x08005431
 8004e10:	08005431 	.word	0x08005431
 8004e14:	08005431 	.word	0x08005431
 8004e18:	08005431 	.word	0x08005431
 8004e1c:	08005431 	.word	0x08005431
 8004e20:	08005431 	.word	0x08005431
 8004e24:	08005431 	.word	0x08005431
 8004e28:	08005431 	.word	0x08005431
 8004e2c:	080051cd 	.word	0x080051cd
 8004e30:	0800517d 	.word	0x0800517d
 8004e34:	080051cd 	.word	0x080051cd
 8004e38:	08005431 	.word	0x08005431
 8004e3c:	08005431 	.word	0x08005431
 8004e40:	08005431 	.word	0x08005431
 8004e44:	08005431 	.word	0x08005431
 8004e48:	08005431 	.word	0x08005431
 8004e4c:	08005431 	.word	0x08005431
 8004e50:	08005431 	.word	0x08005431
 8004e54:	08005431 	.word	0x08005431
 8004e58:	08005431 	.word	0x08005431
 8004e5c:	08005431 	.word	0x08005431
 8004e60:	08005431 	.word	0x08005431
 8004e64:	08005431 	.word	0x08005431
 8004e68:	08005431 	.word	0x08005431
 8004e6c:	08005431 	.word	0x08005431
 8004e70:	08005431 	.word	0x08005431
 8004e74:	08005431 	.word	0x08005431
 8004e78:	08004ec7 	.word	0x08004ec7
 8004e7c:	08005431 	.word	0x08005431
 8004e80:	08005431 	.word	0x08005431
 8004e84:	08005431 	.word	0x08005431
 8004e88:	08005431 	.word	0x08005431
 8004e8c:	08005431 	.word	0x08005431
 8004e90:	08005431 	.word	0x08005431
 8004e94:	08005431 	.word	0x08005431
 8004e98:	08005431 	.word	0x08005431
 8004e9c:	08005431 	.word	0x08005431
 8004ea0:	08004ec7 	.word	0x08004ec7
 8004ea4:	0800523d 	.word	0x0800523d
 8004ea8:	08004ec7 	.word	0x08004ec7
 8004eac:	080051cd 	.word	0x080051cd
 8004eb0:	0800517d 	.word	0x0800517d
 8004eb4:	080051cd 	.word	0x080051cd
 8004eb8:	2b78      	cmp	r3, #120	; 0x78
 8004eba:	f300 82b9 	bgt.w	8005430 <_vsnprintf+0x9a0>
 8004ebe:	2b69      	cmp	r3, #105	; 0x69
 8004ec0:	f6bf af48 	bge.w	8004d54 <_vsnprintf+0x2c4>
 8004ec4:	e2b4      	b.n	8005430 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	2b78      	cmp	r3, #120	; 0x78
 8004ecc:	d003      	beq.n	8004ed6 <_vsnprintf+0x446>
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b58      	cmp	r3, #88	; 0x58
 8004ed4:	d102      	bne.n	8004edc <_vsnprintf+0x44c>
          base = 16U;
 8004ed6:	2310      	movs	r3, #16
 8004ed8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eda:	e013      	b.n	8004f04 <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b6f      	cmp	r3, #111	; 0x6f
 8004ee2:	d102      	bne.n	8004eea <_vsnprintf+0x45a>
          base =  8U;
 8004ee4:	2308      	movs	r3, #8
 8004ee6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ee8:	e00c      	b.n	8004f04 <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b62      	cmp	r3, #98	; 0x62
 8004ef0:	d102      	bne.n	8004ef8 <_vsnprintf+0x468>
          base =  2U;
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ef6:	e005      	b.n	8004f04 <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 8004ef8:	230a      	movs	r3, #10
 8004efa:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8004efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004efe:	f023 0310 	bic.w	r3, r3, #16
 8004f02:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b58      	cmp	r3, #88	; 0x58
 8004f0a:	d103      	bne.n	8004f14 <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 8004f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f0e:	f043 0320 	orr.w	r3, r3, #32
 8004f12:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b69      	cmp	r3, #105	; 0x69
 8004f1a:	d007      	beq.n	8004f2c <_vsnprintf+0x49c>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b64      	cmp	r3, #100	; 0x64
 8004f22:	d003      	beq.n	8004f2c <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004f24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f26:	f023 030c 	bic.w	r3, r3, #12
 8004f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8004f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 8004f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f38:	f023 0301 	bic.w	r3, r3, #1
 8004f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b69      	cmp	r3, #105	; 0x69
 8004f44:	d004      	beq.n	8004f50 <_vsnprintf+0x4c0>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b64      	cmp	r3, #100	; 0x64
 8004f4c:	f040 8098 	bne.w	8005080 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8004f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d031      	beq.n	8004fbe <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8004f5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f5e:	3307      	adds	r3, #7
 8004f60:	f023 0307 	bic.w	r3, r3, #7
 8004f64:	f103 0208 	add.w	r2, r3, #8
 8004f68:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f70:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004f74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	da06      	bge.n	8004f8a <_vsnprintf+0x4fa>
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	f1d2 0800 	rsbs	r8, r2, #0
 8004f82:	eb61 0903 	sbc.w	r9, r1, r3
 8004f86:	4642      	mov	r2, r8
 8004f88:	464b      	mov	r3, r9
 8004f8a:	69f9      	ldr	r1, [r7, #28]
 8004f8c:	0fc9      	lsrs	r1, r1, #31
 8004f8e:	b2c9      	uxtb	r1, r1
 8004f90:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004f92:	2400      	movs	r4, #0
 8004f94:	4682      	mov	sl, r0
 8004f96:	46a3      	mov	fp, r4
 8004f98:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004f9a:	9008      	str	r0, [sp, #32]
 8004f9c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004f9e:	9007      	str	r0, [sp, #28]
 8004fa0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004fa2:	9006      	str	r0, [sp, #24]
 8004fa4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004fa8:	9102      	str	r1, [sp, #8]
 8004faa:	e9cd 2300 	strd	r2, r3, [sp]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fb2:	6939      	ldr	r1, [r7, #16]
 8004fb4:	6978      	ldr	r0, [r7, #20]
 8004fb6:	f7ff f81b 	bl	8003ff0 <_ntoa_long_long>
 8004fba:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004fbc:	e0da      	b.n	8005174 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d020      	beq.n	800500a <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 8004fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fcc:	1d1a      	adds	r2, r3, #4
 8004fce:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	bfb8      	it	lt
 8004fdc:	425b      	neglt	r3, r3
 8004fde:	4619      	mov	r1, r3
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	0fdb      	lsrs	r3, r3, #31
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fe8:	9205      	str	r2, [sp, #20]
 8004fea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fec:	9204      	str	r2, [sp, #16]
 8004fee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ff0:	9203      	str	r2, [sp, #12]
 8004ff2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ff4:	9202      	str	r2, [sp, #8]
 8004ff6:	9301      	str	r3, [sp, #4]
 8004ff8:	9100      	str	r1, [sp, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ffe:	6939      	ldr	r1, [r7, #16]
 8005000:	6978      	ldr	r0, [r7, #20]
 8005002:	f7fe ff8f 	bl	8003f24 <_ntoa_long>
 8005006:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8005008:	e0b4      	b.n	8005174 <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800500a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800500c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d007      	beq.n	8005024 <_vsnprintf+0x594>
 8005014:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005018:	1d1a      	adds	r2, r3, #4
 800501a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	e012      	b.n	800504a <_vsnprintf+0x5ba>
 8005024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502a:	2b00      	cmp	r3, #0
 800502c:	d007      	beq.n	800503e <_vsnprintf+0x5ae>
 800502e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005032:	1d1a      	adds	r2, r3, #4
 8005034:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	b21b      	sxth	r3, r3
 800503c:	e005      	b.n	800504a <_vsnprintf+0x5ba>
 800503e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005042:	1d1a      	adds	r2, r3, #4
 8005044:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	2b00      	cmp	r3, #0
 8005050:	bfb8      	it	lt
 8005052:	425b      	neglt	r3, r3
 8005054:	4619      	mov	r1, r3
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	0fdb      	lsrs	r3, r3, #31
 800505a:	b2db      	uxtb	r3, r3
 800505c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800505e:	9205      	str	r2, [sp, #20]
 8005060:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005062:	9204      	str	r2, [sp, #16]
 8005064:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005066:	9203      	str	r2, [sp, #12]
 8005068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800506a:	9202      	str	r2, [sp, #8]
 800506c:	9301      	str	r3, [sp, #4]
 800506e:	9100      	str	r1, [sp, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005074:	6939      	ldr	r1, [r7, #16]
 8005076:	6978      	ldr	r0, [r7, #20]
 8005078:	f7fe ff54 	bl	8003f24 <_ntoa_long>
 800507c:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800507e:	e079      	b.n	8005174 <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8005080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005086:	2b00      	cmp	r3, #0
 8005088:	d022      	beq.n	80050d0 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800508a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800508e:	3307      	adds	r3, #7
 8005090:	f023 0307 	bic.w	r3, r3, #7
 8005094:	f103 0208 	add.w	r2, r3, #8
 8005098:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800509c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80050a2:	2000      	movs	r0, #0
 80050a4:	460d      	mov	r5, r1
 80050a6:	4606      	mov	r6, r0
 80050a8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80050aa:	9108      	str	r1, [sp, #32]
 80050ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050ae:	9107      	str	r1, [sp, #28]
 80050b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050b2:	9106      	str	r1, [sp, #24]
 80050b4:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80050b8:	2100      	movs	r1, #0
 80050ba:	9102      	str	r1, [sp, #8]
 80050bc:	e9cd 2300 	strd	r2, r3, [sp]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050c4:	6939      	ldr	r1, [r7, #16]
 80050c6:	6978      	ldr	r0, [r7, #20]
 80050c8:	f7fe ff92 	bl	8003ff0 <_ntoa_long_long>
 80050cc:	64f8      	str	r0, [r7, #76]	; 0x4c
 80050ce:	e051      	b.n	8005174 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80050d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d018      	beq.n	800510c <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80050da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050de:	1d1a      	adds	r2, r3, #4
 80050e0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050e8:	9205      	str	r2, [sp, #20]
 80050ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050ec:	9204      	str	r2, [sp, #16]
 80050ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050f0:	9203      	str	r2, [sp, #12]
 80050f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050f4:	9202      	str	r2, [sp, #8]
 80050f6:	2200      	movs	r2, #0
 80050f8:	9201      	str	r2, [sp, #4]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005100:	6939      	ldr	r1, [r7, #16]
 8005102:	6978      	ldr	r0, [r7, #20]
 8005104:	f7fe ff0e 	bl	8003f24 <_ntoa_long>
 8005108:	64f8      	str	r0, [r7, #76]	; 0x4c
 800510a:	e033      	b.n	8005174 <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800510c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	2b00      	cmp	r3, #0
 8005114:	d007      	beq.n	8005126 <_vsnprintf+0x696>
 8005116:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800511a:	1d1a      	adds	r2, r3, #4
 800511c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	e012      	b.n	800514c <_vsnprintf+0x6bc>
 8005126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512c:	2b00      	cmp	r3, #0
 800512e:	d007      	beq.n	8005140 <_vsnprintf+0x6b0>
 8005130:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005134:	1d1a      	adds	r2, r3, #4
 8005136:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	b29b      	uxth	r3, r3
 800513e:	e005      	b.n	800514c <_vsnprintf+0x6bc>
 8005140:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005144:	1d1a      	adds	r2, r3, #4
 8005146:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800514e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005150:	9305      	str	r3, [sp, #20]
 8005152:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005154:	9304      	str	r3, [sp, #16]
 8005156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005158:	9303      	str	r3, [sp, #12]
 800515a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800515c:	9302      	str	r3, [sp, #8]
 800515e:	2300      	movs	r3, #0
 8005160:	9301      	str	r3, [sp, #4]
 8005162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800516a:	6939      	ldr	r1, [r7, #16]
 800516c:	6978      	ldr	r0, [r7, #20]
 800516e:	f7fe fed9 	bl	8003f24 <_ntoa_long>
 8005172:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	3301      	adds	r3, #1
 8005178:	60bb      	str	r3, [r7, #8]
        break;
 800517a:	e166      	b.n	800544a <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b46      	cmp	r3, #70	; 0x46
 8005182:	d103      	bne.n	800518c <_vsnprintf+0x6fc>
 8005184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005186:	f043 0320 	orr.w	r3, r3, #32
 800518a:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800518c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005190:	3307      	adds	r3, #7
 8005192:	f023 0307 	bic.w	r3, r3, #7
 8005196:	f103 0208 	add.w	r2, r3, #8
 800519a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800519e:	ed93 7b00 	vldr	d7, [r3]
 80051a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051a4:	9302      	str	r3, [sp, #8]
 80051a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051a8:	9301      	str	r3, [sp, #4]
 80051aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	eeb0 0a47 	vmov.f32	s0, s14
 80051b2:	eef0 0a67 	vmov.f32	s1, s15
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051ba:	6939      	ldr	r1, [r7, #16]
 80051bc:	6978      	ldr	r0, [r7, #20]
 80051be:	f7fe ff87 	bl	80040d0 <_ftoa>
 80051c2:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	3301      	adds	r3, #1
 80051c8:	60bb      	str	r3, [r7, #8]
        break;
 80051ca:	e13e      	b.n	800544a <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b67      	cmp	r3, #103	; 0x67
 80051d2:	d003      	beq.n	80051dc <_vsnprintf+0x74c>
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b47      	cmp	r3, #71	; 0x47
 80051da:	d103      	bne.n	80051e4 <_vsnprintf+0x754>
 80051dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051e2:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2b45      	cmp	r3, #69	; 0x45
 80051ea:	d003      	beq.n	80051f4 <_vsnprintf+0x764>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b47      	cmp	r3, #71	; 0x47
 80051f2:	d103      	bne.n	80051fc <_vsnprintf+0x76c>
 80051f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051f6:	f043 0320 	orr.w	r3, r3, #32
 80051fa:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80051fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005200:	3307      	adds	r3, #7
 8005202:	f023 0307 	bic.w	r3, r3, #7
 8005206:	f103 0208 	add.w	r2, r3, #8
 800520a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800520e:	ed93 7b00 	vldr	d7, [r3]
 8005212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005214:	9302      	str	r3, [sp, #8]
 8005216:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005218:	9301      	str	r3, [sp, #4]
 800521a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	eeb0 0a47 	vmov.f32	s0, s14
 8005222:	eef0 0a67 	vmov.f32	s1, s15
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800522a:	6939      	ldr	r1, [r7, #16]
 800522c:	6978      	ldr	r0, [r7, #20]
 800522e:	f7ff f9a7 	bl	8004580 <_etoa>
 8005232:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	3301      	adds	r3, #1
 8005238:	60bb      	str	r3, [r7, #8]
        break;
 800523a:	e106      	b.n	800544a <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800523c:	2301      	movs	r3, #1
 800523e:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8005240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10e      	bne.n	8005268 <_vsnprintf+0x7d8>
          while (l++ < width) {
 800524a:	e007      	b.n	800525c <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 800524c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800524e:	1c53      	adds	r3, r2, #1
 8005250:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005252:	697c      	ldr	r4, [r7, #20]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6939      	ldr	r1, [r7, #16]
 8005258:	2020      	movs	r0, #32
 800525a:	47a0      	blx	r4
          while (l++ < width) {
 800525c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	647a      	str	r2, [r7, #68]	; 0x44
 8005262:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005264:	429a      	cmp	r2, r3
 8005266:	d8f1      	bhi.n	800524c <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8005268:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800526c:	1d1a      	adds	r2, r3, #4
 800526e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	b2d8      	uxtb	r0, r3
 8005276:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005278:	1c53      	adds	r3, r2, #1
 800527a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800527c:	697c      	ldr	r4, [r7, #20]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6939      	ldr	r1, [r7, #16]
 8005282:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8005284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00e      	beq.n	80052ac <_vsnprintf+0x81c>
          while (l++ < width) {
 800528e:	e007      	b.n	80052a0 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8005290:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005292:	1c53      	adds	r3, r2, #1
 8005294:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005296:	697c      	ldr	r4, [r7, #20]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6939      	ldr	r1, [r7, #16]
 800529c:	2020      	movs	r0, #32
 800529e:	47a0      	blx	r4
          while (l++ < width) {
 80052a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	647a      	str	r2, [r7, #68]	; 0x44
 80052a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d8f1      	bhi.n	8005290 <_vsnprintf+0x800>
          }
        }
        format++;
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	3301      	adds	r3, #1
 80052b0:	60bb      	str	r3, [r7, #8]
        break;
 80052b2:	e0ca      	b.n	800544a <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80052b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052b8:	1d1a      	adds	r2, r3, #4
 80052ba:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80052c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <_vsnprintf+0x83c>
 80052c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ca:	e001      	b.n	80052d0 <_vsnprintf+0x840>
 80052cc:	f04f 33ff 	mov.w	r3, #4294967295
 80052d0:	4619      	mov	r1, r3
 80052d2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80052d4:	f7fe fca2 	bl	8003c1c <_strnlen_s>
 80052d8:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80052da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 80052e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e8:	4293      	cmp	r3, r2
 80052ea:	bf28      	it	cs
 80052ec:	4613      	movcs	r3, r2
 80052ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 80052f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d11a      	bne.n	8005330 <_vsnprintf+0x8a0>
          while (l++ < width) {
 80052fa:	e007      	b.n	800530c <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 80052fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052fe:	1c53      	adds	r3, r2, #1
 8005300:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005302:	697c      	ldr	r4, [r7, #20]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6939      	ldr	r1, [r7, #16]
 8005308:	2020      	movs	r0, #32
 800530a:	47a0      	blx	r4
          while (l++ < width) {
 800530c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005312:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005314:	429a      	cmp	r2, r3
 8005316:	d8f1      	bhi.n	80052fc <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8005318:	e00a      	b.n	8005330 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 800531a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	643a      	str	r2, [r7, #64]	; 0x40
 8005320:	7818      	ldrb	r0, [r3, #0]
 8005322:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005324:	1c53      	adds	r3, r2, #1
 8005326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005328:	697c      	ldr	r4, [r7, #20]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6939      	ldr	r1, [r7, #16]
 800532e:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8005330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d009      	beq.n	800534c <_vsnprintf+0x8bc>
 8005338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800533a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0eb      	beq.n	800531a <_vsnprintf+0x88a>
 8005342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005344:	1e5a      	subs	r2, r3, #1
 8005346:	657a      	str	r2, [r7, #84]	; 0x54
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e6      	bne.n	800531a <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800534c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00e      	beq.n	8005374 <_vsnprintf+0x8e4>
          while (l++ < width) {
 8005356:	e007      	b.n	8005368 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8005358:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800535a:	1c53      	adds	r3, r2, #1
 800535c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800535e:	697c      	ldr	r4, [r7, #20]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6939      	ldr	r1, [r7, #16]
 8005364:	2020      	movs	r0, #32
 8005366:	47a0      	blx	r4
          while (l++ < width) {
 8005368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800536e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005370:	429a      	cmp	r2, r3
 8005372:	d8f1      	bhi.n	8005358 <_vsnprintf+0x8c8>
          }
        }
        format++;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	3301      	adds	r3, #1
 8005378:	60bb      	str	r3, [r7, #8]
        break;
 800537a:	e066      	b.n	800544a <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800537c:	2308      	movs	r3, #8
 800537e:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8005380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005382:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8005386:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8005388:	2300      	movs	r3, #0
 800538a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 800538e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005392:	2b00      	cmp	r3, #0
 8005394:	d023      	beq.n	80053de <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8005396:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800539a:	1d1a      	adds	r2, r3, #4
 800539c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	461a      	mov	r2, r3
 80053a4:	2300      	movs	r3, #0
 80053a6:	603a      	str	r2, [r7, #0]
 80053a8:	607b      	str	r3, [r7, #4]
 80053aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ac:	9308      	str	r3, [sp, #32]
 80053ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053b0:	9307      	str	r3, [sp, #28]
 80053b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053b4:	9306      	str	r3, [sp, #24]
 80053b6:	f04f 0210 	mov.w	r2, #16
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053c2:	2300      	movs	r3, #0
 80053c4:	9302      	str	r3, [sp, #8]
 80053c6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80053ca:	e9cd 3400 	strd	r3, r4, [sp]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053d2:	6939      	ldr	r1, [r7, #16]
 80053d4:	6978      	ldr	r0, [r7, #20]
 80053d6:	f7fe fe0b 	bl	8003ff0 <_ntoa_long_long>
 80053da:	64f8      	str	r0, [r7, #76]	; 0x4c
 80053dc:	e018      	b.n	8005410 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80053de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053e2:	1d1a      	adds	r2, r3, #4
 80053e4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ee:	9305      	str	r3, [sp, #20]
 80053f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053f2:	9304      	str	r3, [sp, #16]
 80053f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053f6:	9303      	str	r3, [sp, #12]
 80053f8:	2310      	movs	r3, #16
 80053fa:	9302      	str	r3, [sp, #8]
 80053fc:	2300      	movs	r3, #0
 80053fe:	9301      	str	r3, [sp, #4]
 8005400:	9200      	str	r2, [sp, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005406:	6939      	ldr	r1, [r7, #16]
 8005408:	6978      	ldr	r0, [r7, #20]
 800540a:	f7fe fd8b 	bl	8003f24 <_ntoa_long>
 800540e:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	3301      	adds	r3, #1
 8005414:	60bb      	str	r3, [r7, #8]
        break;
 8005416:	e018      	b.n	800544a <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8005418:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800541a:	1c53      	adds	r3, r2, #1
 800541c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800541e:	697c      	ldr	r4, [r7, #20]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6939      	ldr	r1, [r7, #16]
 8005424:	2025      	movs	r0, #37	; 0x25
 8005426:	47a0      	blx	r4
        format++;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	3301      	adds	r3, #1
 800542c:	60bb      	str	r3, [r7, #8]
        break;
 800542e:	e00c      	b.n	800544a <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	7818      	ldrb	r0, [r3, #0]
 8005434:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005436:	1c53      	adds	r3, r2, #1
 8005438:	64fb      	str	r3, [r7, #76]	; 0x4c
 800543a:	697c      	ldr	r4, [r7, #20]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6939      	ldr	r1, [r7, #16]
 8005440:	47a0      	blx	r4
        format++;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	3301      	adds	r3, #1
 8005446:	60bb      	str	r3, [r7, #8]
        break;
 8005448:	bf00      	nop
  while (*format)
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	f47f ab30 	bne.w	8004ab4 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8005454:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	429a      	cmp	r2, r3
 800545a:	d302      	bcc.n	8005462 <_vsnprintf+0x9d2>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	1e5a      	subs	r2, r3, #1
 8005460:	e000      	b.n	8005464 <_vsnprintf+0x9d4>
 8005462:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005464:	697c      	ldr	r4, [r7, #20]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6939      	ldr	r1, [r7, #16]
 800546a:	2000      	movs	r0, #0
 800546c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800546e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005470:	4618      	mov	r0, r3
 8005472:	3764      	adds	r7, #100	; 0x64
 8005474:	46bd      	mov	sp, r7
 8005476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547a:	bf00      	nop

0800547c <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 800547c:	b40e      	push	{r1, r2, r3}
 800547e:	b580      	push	{r7, lr}
 8005480:	b087      	sub	sp, #28
 8005482:	af02      	add	r7, sp, #8
 8005484:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8005486:	f107 0320 	add.w	r3, r7, #32
 800548a:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f04f 32ff 	mov.w	r2, #4294967295
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	4805      	ldr	r0, [pc, #20]	; (80054b0 <sprintf_+0x34>)
 800549a:	f7ff faf9 	bl	8004a90 <_vsnprintf>
 800549e:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 80054a0:	68fb      	ldr	r3, [r7, #12]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054ac:	b003      	add	sp, #12
 80054ae:	4770      	bx	lr
 80054b0:	08003bd3 	.word	0x08003bd3

080054b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80054ba:	4b11      	ldr	r3, [pc, #68]	; (8005500 <HAL_MspInit+0x4c>)
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	4a10      	ldr	r2, [pc, #64]	; (8005500 <HAL_MspInit+0x4c>)
 80054c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c4:	6413      	str	r3, [r2, #64]	; 0x40
 80054c6:	4b0e      	ldr	r3, [pc, #56]	; (8005500 <HAL_MspInit+0x4c>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ce:	607b      	str	r3, [r7, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054d2:	4b0b      	ldr	r3, [pc, #44]	; (8005500 <HAL_MspInit+0x4c>)
 80054d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d6:	4a0a      	ldr	r2, [pc, #40]	; (8005500 <HAL_MspInit+0x4c>)
 80054d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054dc:	6453      	str	r3, [r2, #68]	; 0x44
 80054de:	4b08      	ldr	r3, [pc, #32]	; (8005500 <HAL_MspInit+0x4c>)
 80054e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054e6:	603b      	str	r3, [r7, #0]
 80054e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80054ea:	2200      	movs	r2, #0
 80054ec:	210f      	movs	r1, #15
 80054ee:	f06f 0001 	mvn.w	r0, #1
 80054f2:	f002 fd5b 	bl	8007fac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054f6:	bf00      	nop
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40023800 	.word	0x40023800

08005504 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b0aa      	sub	sp, #168	; 0xa8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800550c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	605a      	str	r2, [r3, #4]
 8005516:	609a      	str	r2, [r3, #8]
 8005518:	60da      	str	r2, [r3, #12]
 800551a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800551c:	f107 0314 	add.w	r3, r7, #20
 8005520:	2280      	movs	r2, #128	; 0x80
 8005522:	2100      	movs	r1, #0
 8005524:	4618      	mov	r0, r3
 8005526:	f00d f912 	bl	801274e <memset>
  if(hi2c->Instance==I2C1)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a22      	ldr	r2, [pc, #136]	; (80055b8 <HAL_I2C_MspInit+0xb4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d13c      	bne.n	80055ae <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005534:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005538:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800553a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800553e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005540:	f107 0314 	add.w	r3, r7, #20
 8005544:	4618      	mov	r0, r3
 8005546:	f004 fe17 	bl	800a178 <HAL_RCCEx_PeriphCLKConfig>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8005550:	f7fe fb3a 	bl	8003bc8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005554:	4b19      	ldr	r3, [pc, #100]	; (80055bc <HAL_I2C_MspInit+0xb8>)
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	4a18      	ldr	r2, [pc, #96]	; (80055bc <HAL_I2C_MspInit+0xb8>)
 800555a:	f043 0302 	orr.w	r3, r3, #2
 800555e:	6313      	str	r3, [r2, #48]	; 0x30
 8005560:	4b16      	ldr	r3, [pc, #88]	; (80055bc <HAL_I2C_MspInit+0xb8>)
 8005562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	613b      	str	r3, [r7, #16]
 800556a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_MAG_SCL_Pin|I2C1_MAG_SDA_Pin;
 800556c:	23c0      	movs	r3, #192	; 0xc0
 800556e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005572:	2312      	movs	r3, #18
 8005574:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005578:	2300      	movs	r3, #0
 800557a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800557e:	2303      	movs	r3, #3
 8005580:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005584:	2304      	movs	r3, #4
 8005586:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800558a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800558e:	4619      	mov	r1, r3
 8005590:	480b      	ldr	r0, [pc, #44]	; (80055c0 <HAL_I2C_MspInit+0xbc>)
 8005592:	f003 f93f 	bl	8008814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005596:	4b09      	ldr	r3, [pc, #36]	; (80055bc <HAL_I2C_MspInit+0xb8>)
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	4a08      	ldr	r2, [pc, #32]	; (80055bc <HAL_I2C_MspInit+0xb8>)
 800559c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055a0:	6413      	str	r3, [r2, #64]	; 0x40
 80055a2:	4b06      	ldr	r3, [pc, #24]	; (80055bc <HAL_I2C_MspInit+0xb8>)
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80055ae:	bf00      	nop
 80055b0:	37a8      	adds	r7, #168	; 0xa8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40005400 	.word	0x40005400
 80055bc:	40023800 	.word	0x40023800
 80055c0:	40020400 	.word	0x40020400

080055c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08c      	sub	sp, #48	; 0x30
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055cc:	f107 031c 	add.w	r3, r7, #28
 80055d0:	2200      	movs	r2, #0
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	605a      	str	r2, [r3, #4]
 80055d6:	609a      	str	r2, [r3, #8]
 80055d8:	60da      	str	r2, [r3, #12]
 80055da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a2e      	ldr	r2, [pc, #184]	; (800569c <HAL_SPI_MspInit+0xd8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d128      	bne.n	8005638 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80055e6:	4b2e      	ldr	r3, [pc, #184]	; (80056a0 <HAL_SPI_MspInit+0xdc>)
 80055e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ea:	4a2d      	ldr	r2, [pc, #180]	; (80056a0 <HAL_SPI_MspInit+0xdc>)
 80055ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055f0:	6453      	str	r3, [r2, #68]	; 0x44
 80055f2:	4b2b      	ldr	r3, [pc, #172]	; (80056a0 <HAL_SPI_MspInit+0xdc>)
 80055f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055fa:	61bb      	str	r3, [r7, #24]
 80055fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055fe:	4b28      	ldr	r3, [pc, #160]	; (80056a0 <HAL_SPI_MspInit+0xdc>)
 8005600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005602:	4a27      	ldr	r2, [pc, #156]	; (80056a0 <HAL_SPI_MspInit+0xdc>)
 8005604:	f043 0301 	orr.w	r3, r3, #1
 8005608:	6313      	str	r3, [r2, #48]	; 0x30
 800560a:	4b25      	ldr	r3, [pc, #148]	; (80056a0 <HAL_SPI_MspInit+0xdc>)
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_ESP_NSS_Pin|SPI1_ESP_SCK_Pin|SPI1_ESP_MISO_Pin|SPI1_ESP_MOSI_Pin;
 8005616:	23f0      	movs	r3, #240	; 0xf0
 8005618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800561a:	2302      	movs	r3, #2
 800561c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800561e:	2300      	movs	r3, #0
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005622:	2303      	movs	r3, #3
 8005624:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005626:	2305      	movs	r3, #5
 8005628:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800562a:	f107 031c 	add.w	r3, r7, #28
 800562e:	4619      	mov	r1, r3
 8005630:	481c      	ldr	r0, [pc, #112]	; (80056a4 <HAL_SPI_MspInit+0xe0>)
 8005632:	f003 f8ef 	bl	8008814 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005636:	e02d      	b.n	8005694 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI2)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a1a      	ldr	r2, [pc, #104]	; (80056a8 <HAL_SPI_MspInit+0xe4>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d128      	bne.n	8005694 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005642:	4b17      	ldr	r3, [pc, #92]	; (80056a0 <HAL_SPI_MspInit+0xdc>)
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	4a16      	ldr	r2, [pc, #88]	; (80056a0 <HAL_SPI_MspInit+0xdc>)
 8005648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800564c:	6413      	str	r3, [r2, #64]	; 0x40
 800564e:	4b14      	ldr	r3, [pc, #80]	; (80056a0 <HAL_SPI_MspInit+0xdc>)
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005656:	613b      	str	r3, [r7, #16]
 8005658:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800565a:	4b11      	ldr	r3, [pc, #68]	; (80056a0 <HAL_SPI_MspInit+0xdc>)
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	4a10      	ldr	r2, [pc, #64]	; (80056a0 <HAL_SPI_MspInit+0xdc>)
 8005660:	f043 0302 	orr.w	r3, r3, #2
 8005664:	6313      	str	r3, [r2, #48]	; 0x30
 8005666:	4b0e      	ldr	r3, [pc, #56]	; (80056a0 <HAL_SPI_MspInit+0xdc>)
 8005668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_IMU_SCK_Pin|SPI2_IMU_MISO_Pin|SPI2_IMU_MOSI_Pin;
 8005672:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005678:	2302      	movs	r3, #2
 800567a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567c:	2300      	movs	r3, #0
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005680:	2303      	movs	r3, #3
 8005682:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005684:	2305      	movs	r3, #5
 8005686:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005688:	f107 031c 	add.w	r3, r7, #28
 800568c:	4619      	mov	r1, r3
 800568e:	4807      	ldr	r0, [pc, #28]	; (80056ac <HAL_SPI_MspInit+0xe8>)
 8005690:	f003 f8c0 	bl	8008814 <HAL_GPIO_Init>
}
 8005694:	bf00      	nop
 8005696:	3730      	adds	r7, #48	; 0x30
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40013000 	.word	0x40013000
 80056a0:	40023800 	.word	0x40023800
 80056a4:	40020000 	.word	0x40020000
 80056a8:	40003800 	.word	0x40003800
 80056ac:	40020400 	.word	0x40020400

080056b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a0a      	ldr	r2, [pc, #40]	; (80056e8 <HAL_TIM_Base_MspInit+0x38>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d10b      	bne.n	80056da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80056c2:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <HAL_TIM_Base_MspInit+0x3c>)
 80056c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c6:	4a09      	ldr	r2, [pc, #36]	; (80056ec <HAL_TIM_Base_MspInit+0x3c>)
 80056c8:	f043 0301 	orr.w	r3, r3, #1
 80056cc:	6453      	str	r3, [r2, #68]	; 0x44
 80056ce:	4b07      	ldr	r3, [pc, #28]	; (80056ec <HAL_TIM_Base_MspInit+0x3c>)
 80056d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80056da:	bf00      	nop
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40010000 	.word	0x40010000
 80056ec:	40023800 	.word	0x40023800

080056f0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08a      	sub	sp, #40	; 0x28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f8:	f107 0314 	add.w	r3, r7, #20
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	605a      	str	r2, [r3, #4]
 8005702:	609a      	str	r2, [r3, #8]
 8005704:	60da      	str	r2, [r3, #12]
 8005706:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a1b      	ldr	r2, [pc, #108]	; (800577c <HAL_TIM_IC_MspInit+0x8c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d12f      	bne.n	8005772 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005712:	4b1b      	ldr	r3, [pc, #108]	; (8005780 <HAL_TIM_IC_MspInit+0x90>)
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	4a1a      	ldr	r2, [pc, #104]	; (8005780 <HAL_TIM_IC_MspInit+0x90>)
 8005718:	f043 0302 	orr.w	r3, r3, #2
 800571c:	6413      	str	r3, [r2, #64]	; 0x40
 800571e:	4b18      	ldr	r3, [pc, #96]	; (8005780 <HAL_TIM_IC_MspInit+0x90>)
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	613b      	str	r3, [r7, #16]
 8005728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800572a:	4b15      	ldr	r3, [pc, #84]	; (8005780 <HAL_TIM_IC_MspInit+0x90>)
 800572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572e:	4a14      	ldr	r2, [pc, #80]	; (8005780 <HAL_TIM_IC_MspInit+0x90>)
 8005730:	f043 0304 	orr.w	r3, r3, #4
 8005734:	6313      	str	r3, [r2, #48]	; 0x30
 8005736:	4b12      	ldr	r3, [pc, #72]	; (8005780 <HAL_TIM_IC_MspInit+0x90>)
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_DIS_ECHO_CH1_Pin;
 8005742:	2340      	movs	r3, #64	; 0x40
 8005744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005746:	2302      	movs	r3, #2
 8005748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800574a:	2300      	movs	r3, #0
 800574c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800574e:	2300      	movs	r3, #0
 8005750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005752:	2302      	movs	r3, #2
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM3_DIS_ECHO_CH1_GPIO_Port, &GPIO_InitStruct);
 8005756:	f107 0314 	add.w	r3, r7, #20
 800575a:	4619      	mov	r1, r3
 800575c:	4809      	ldr	r0, [pc, #36]	; (8005784 <HAL_TIM_IC_MspInit+0x94>)
 800575e:	f003 f859 	bl	8008814 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8005762:	2200      	movs	r2, #0
 8005764:	2106      	movs	r1, #6
 8005766:	201d      	movs	r0, #29
 8005768:	f002 fc20 	bl	8007fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800576c:	201d      	movs	r0, #29
 800576e:	f002 fc39 	bl	8007fe4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005772:	bf00      	nop
 8005774:	3728      	adds	r7, #40	; 0x28
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	40000400 	.word	0x40000400
 8005780:	40023800 	.word	0x40023800
 8005784:	40020800 	.word	0x40020800

08005788 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005790:	f107 030c 	add.w	r3, r7, #12
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	605a      	str	r2, [r3, #4]
 800579a:	609a      	str	r2, [r3, #8]
 800579c:	60da      	str	r2, [r3, #12]
 800579e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a11      	ldr	r2, [pc, #68]	; (80057ec <HAL_TIM_MspPostInit+0x64>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d11c      	bne.n	80057e4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80057aa:	4b11      	ldr	r3, [pc, #68]	; (80057f0 <HAL_TIM_MspPostInit+0x68>)
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	4a10      	ldr	r2, [pc, #64]	; (80057f0 <HAL_TIM_MspPostInit+0x68>)
 80057b0:	f043 0310 	orr.w	r3, r3, #16
 80057b4:	6313      	str	r3, [r2, #48]	; 0x30
 80057b6:	4b0e      	ldr	r3, [pc, #56]	; (80057f0 <HAL_TIM_MspPostInit+0x68>)
 80057b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ba:	f003 0310 	and.w	r3, r3, #16
 80057be:	60bb      	str	r3, [r7, #8]
 80057c0:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_ESC1_CH1_Pin|TIM1_ESC2_CH2_Pin|TIM1_ESC3_CH3_Pin|TIM1_ESC4_CH4_Pin;
 80057c2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80057c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057c8:	2302      	movs	r3, #2
 80057ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057cc:	2300      	movs	r3, #0
 80057ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057d0:	2300      	movs	r3, #0
 80057d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80057d4:	2301      	movs	r3, #1
 80057d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80057d8:	f107 030c 	add.w	r3, r7, #12
 80057dc:	4619      	mov	r1, r3
 80057de:	4805      	ldr	r0, [pc, #20]	; (80057f4 <HAL_TIM_MspPostInit+0x6c>)
 80057e0:	f003 f818 	bl	8008814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80057e4:	bf00      	nop
 80057e6:	3720      	adds	r7, #32
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40010000 	.word	0x40010000
 80057f0:	40023800 	.word	0x40023800
 80057f4:	40021000 	.word	0x40021000

080057f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b0ae      	sub	sp, #184	; 0xb8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005800:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	605a      	str	r2, [r3, #4]
 800580a:	609a      	str	r2, [r3, #8]
 800580c:	60da      	str	r2, [r3, #12]
 800580e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005814:	2280      	movs	r2, #128	; 0x80
 8005816:	2100      	movs	r1, #0
 8005818:	4618      	mov	r0, r3
 800581a:	f00c ff98 	bl	801274e <memset>
  if(huart->Instance==UART4)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a83      	ldr	r2, [pc, #524]	; (8005a30 <HAL_UART_MspInit+0x238>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d144      	bne.n	80058b2 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 800582e:	2340      	movs	r3, #64	; 0x40
 8005830:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005836:	4618      	mov	r0, r3
 8005838:	f004 fc9e 	bl	800a178 <HAL_RCCEx_PeriphCLKConfig>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005842:	f7fe f9c1 	bl	8003bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005846:	4b7b      	ldr	r3, [pc, #492]	; (8005a34 <HAL_UART_MspInit+0x23c>)
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	4a7a      	ldr	r2, [pc, #488]	; (8005a34 <HAL_UART_MspInit+0x23c>)
 800584c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005850:	6413      	str	r3, [r2, #64]	; 0x40
 8005852:	4b78      	ldr	r3, [pc, #480]	; (8005a34 <HAL_UART_MspInit+0x23c>)
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800585a:	623b      	str	r3, [r7, #32]
 800585c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800585e:	4b75      	ldr	r3, [pc, #468]	; (8005a34 <HAL_UART_MspInit+0x23c>)
 8005860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005862:	4a74      	ldr	r2, [pc, #464]	; (8005a34 <HAL_UART_MspInit+0x23c>)
 8005864:	f043 0301 	orr.w	r3, r3, #1
 8005868:	6313      	str	r3, [r2, #48]	; 0x30
 800586a:	4b72      	ldr	r3, [pc, #456]	; (8005a34 <HAL_UART_MspInit+0x23c>)
 800586c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	61fb      	str	r3, [r7, #28]
 8005874:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_GPS_TX_Pin|UART4_GPS_RX_Pin;
 8005876:	2303      	movs	r3, #3
 8005878:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800587c:	2302      	movs	r3, #2
 800587e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005882:	2300      	movs	r3, #0
 8005884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005888:	2303      	movs	r3, #3
 800588a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800588e:	2308      	movs	r3, #8
 8005890:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005894:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005898:	4619      	mov	r1, r3
 800589a:	4867      	ldr	r0, [pc, #412]	; (8005a38 <HAL_UART_MspInit+0x240>)
 800589c:	f002 ffba 	bl	8008814 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 80058a0:	2200      	movs	r2, #0
 80058a2:	2106      	movs	r1, #6
 80058a4:	2034      	movs	r0, #52	; 0x34
 80058a6:	f002 fb81 	bl	8007fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80058aa:	2034      	movs	r0, #52	; 0x34
 80058ac:	f002 fb9a 	bl	8007fe4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80058b0:	e0b9      	b.n	8005a26 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART2)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a61      	ldr	r2, [pc, #388]	; (8005a3c <HAL_UART_MspInit+0x244>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d172      	bne.n	80059a2 <HAL_UART_MspInit+0x1aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80058bc:	2380      	movs	r3, #128	; 0x80
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80058c0:	2304      	movs	r3, #4
 80058c2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80058c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058c8:	4618      	mov	r0, r3
 80058ca:	f004 fc55 	bl	800a178 <HAL_RCCEx_PeriphCLKConfig>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80058d4:	f7fe f978 	bl	8003bc8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80058d8:	4b56      	ldr	r3, [pc, #344]	; (8005a34 <HAL_UART_MspInit+0x23c>)
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	4a55      	ldr	r2, [pc, #340]	; (8005a34 <HAL_UART_MspInit+0x23c>)
 80058de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058e2:	6413      	str	r3, [r2, #64]	; 0x40
 80058e4:	4b53      	ldr	r3, [pc, #332]	; (8005a34 <HAL_UART_MspInit+0x23c>)
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ec:	61bb      	str	r3, [r7, #24]
 80058ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80058f0:	4b50      	ldr	r3, [pc, #320]	; (8005a34 <HAL_UART_MspInit+0x23c>)
 80058f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f4:	4a4f      	ldr	r2, [pc, #316]	; (8005a34 <HAL_UART_MspInit+0x23c>)
 80058f6:	f043 0308 	orr.w	r3, r3, #8
 80058fa:	6313      	str	r3, [r2, #48]	; 0x30
 80058fc:	4b4d      	ldr	r3, [pc, #308]	; (8005a34 <HAL_UART_MspInit+0x23c>)
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_IBUS_TX_Pin|UART2_IBUS_RX_Pin;
 8005908:	2360      	movs	r3, #96	; 0x60
 800590a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800590e:	2302      	movs	r3, #2
 8005910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005914:	2300      	movs	r3, #0
 8005916:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800591a:	2303      	movs	r3, #3
 800591c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005920:	2307      	movs	r3, #7
 8005922:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005926:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800592a:	4619      	mov	r1, r3
 800592c:	4844      	ldr	r0, [pc, #272]	; (8005a40 <HAL_UART_MspInit+0x248>)
 800592e:	f002 ff71 	bl	8008814 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005932:	4b44      	ldr	r3, [pc, #272]	; (8005a44 <HAL_UART_MspInit+0x24c>)
 8005934:	4a44      	ldr	r2, [pc, #272]	; (8005a48 <HAL_UART_MspInit+0x250>)
 8005936:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005938:	4b42      	ldr	r3, [pc, #264]	; (8005a44 <HAL_UART_MspInit+0x24c>)
 800593a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800593e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005940:	4b40      	ldr	r3, [pc, #256]	; (8005a44 <HAL_UART_MspInit+0x24c>)
 8005942:	2200      	movs	r2, #0
 8005944:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005946:	4b3f      	ldr	r3, [pc, #252]	; (8005a44 <HAL_UART_MspInit+0x24c>)
 8005948:	2200      	movs	r2, #0
 800594a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800594c:	4b3d      	ldr	r3, [pc, #244]	; (8005a44 <HAL_UART_MspInit+0x24c>)
 800594e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005952:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005954:	4b3b      	ldr	r3, [pc, #236]	; (8005a44 <HAL_UART_MspInit+0x24c>)
 8005956:	2200      	movs	r2, #0
 8005958:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800595a:	4b3a      	ldr	r3, [pc, #232]	; (8005a44 <HAL_UART_MspInit+0x24c>)
 800595c:	2200      	movs	r2, #0
 800595e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005960:	4b38      	ldr	r3, [pc, #224]	; (8005a44 <HAL_UART_MspInit+0x24c>)
 8005962:	2200      	movs	r2, #0
 8005964:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005966:	4b37      	ldr	r3, [pc, #220]	; (8005a44 <HAL_UART_MspInit+0x24c>)
 8005968:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800596c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800596e:	4b35      	ldr	r3, [pc, #212]	; (8005a44 <HAL_UART_MspInit+0x24c>)
 8005970:	2200      	movs	r2, #0
 8005972:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005974:	4833      	ldr	r0, [pc, #204]	; (8005a44 <HAL_UART_MspInit+0x24c>)
 8005976:	f002 fb43 	bl	8008000 <HAL_DMA_Init>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8005980:	f7fe f922 	bl	8003bc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a2f      	ldr	r2, [pc, #188]	; (8005a44 <HAL_UART_MspInit+0x24c>)
 8005988:	675a      	str	r2, [r3, #116]	; 0x74
 800598a:	4a2e      	ldr	r2, [pc, #184]	; (8005a44 <HAL_UART_MspInit+0x24c>)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8005990:	2200      	movs	r2, #0
 8005992:	2107      	movs	r1, #7
 8005994:	2026      	movs	r0, #38	; 0x26
 8005996:	f002 fb09 	bl	8007fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800599a:	2026      	movs	r0, #38	; 0x26
 800599c:	f002 fb22 	bl	8007fe4 <HAL_NVIC_EnableIRQ>
}
 80059a0:	e041      	b.n	8005a26 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a29      	ldr	r2, [pc, #164]	; (8005a4c <HAL_UART_MspInit+0x254>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d13c      	bne.n	8005a26 <HAL_UART_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80059ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 80059b2:	2310      	movs	r3, #16
 80059b4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80059b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059ba:	4618      	mov	r0, r3
 80059bc:	f004 fbdc 	bl	800a178 <HAL_RCCEx_PeriphCLKConfig>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 80059c6:	f7fe f8ff 	bl	8003bc8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80059ca:	4b1a      	ldr	r3, [pc, #104]	; (8005a34 <HAL_UART_MspInit+0x23c>)
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	4a19      	ldr	r2, [pc, #100]	; (8005a34 <HAL_UART_MspInit+0x23c>)
 80059d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059d4:	6413      	str	r3, [r2, #64]	; 0x40
 80059d6:	4b17      	ldr	r3, [pc, #92]	; (8005a34 <HAL_UART_MspInit+0x23c>)
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059de:	613b      	str	r3, [r7, #16]
 80059e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059e2:	4b14      	ldr	r3, [pc, #80]	; (8005a34 <HAL_UART_MspInit+0x23c>)
 80059e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e6:	4a13      	ldr	r2, [pc, #76]	; (8005a34 <HAL_UART_MspInit+0x23c>)
 80059e8:	f043 0304 	orr.w	r3, r3, #4
 80059ec:	6313      	str	r3, [r2, #48]	; 0x30
 80059ee:	4b11      	ldr	r3, [pc, #68]	; (8005a34 <HAL_UART_MspInit+0x23c>)
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	f003 0304 	and.w	r3, r3, #4
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_PC_TX_Pin|UART3_PC_RX_Pin;
 80059fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80059fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a02:	2302      	movs	r3, #2
 8005a04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005a14:	2307      	movs	r3, #7
 8005a16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a1a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005a1e:	4619      	mov	r1, r3
 8005a20:	480b      	ldr	r0, [pc, #44]	; (8005a50 <HAL_UART_MspInit+0x258>)
 8005a22:	f002 fef7 	bl	8008814 <HAL_GPIO_Init>
}
 8005a26:	bf00      	nop
 8005a28:	37b8      	adds	r7, #184	; 0xb8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	40004c00 	.word	0x40004c00
 8005a34:	40023800 	.word	0x40023800
 8005a38:	40020000 	.word	0x40020000
 8005a3c:	40004400 	.word	0x40004400
 8005a40:	40020c00 	.word	0x40020c00
 8005a44:	20000c9c 	.word	0x20000c9c
 8005a48:	40026088 	.word	0x40026088
 8005a4c:	40004800 	.word	0x40004800
 8005a50:	40020800 	.word	0x40020800

08005a54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b08e      	sub	sp, #56	; 0x38
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8005a64:	4b34      	ldr	r3, [pc, #208]	; (8005b38 <HAL_InitTick+0xe4>)
 8005a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a68:	4a33      	ldr	r2, [pc, #204]	; (8005b38 <HAL_InitTick+0xe4>)
 8005a6a:	f043 0301 	orr.w	r3, r3, #1
 8005a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8005a70:	4b31      	ldr	r3, [pc, #196]	; (8005b38 <HAL_InitTick+0xe4>)
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005a7c:	f107 0210 	add.w	r2, r7, #16
 8005a80:	f107 0314 	add.w	r3, r7, #20
 8005a84:	4611      	mov	r1, r2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f004 fb44 	bl	800a114 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d103      	bne.n	8005a9e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005a96:	f004 fb15 	bl	800a0c4 <HAL_RCC_GetPCLK1Freq>
 8005a9a:	6378      	str	r0, [r7, #52]	; 0x34
 8005a9c:	e004      	b.n	8005aa8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005a9e:	f004 fb11 	bl	800a0c4 <HAL_RCC_GetPCLK1Freq>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aaa:	4a24      	ldr	r2, [pc, #144]	; (8005b3c <HAL_InitTick+0xe8>)
 8005aac:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab0:	0c9b      	lsrs	r3, r3, #18
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8005ab6:	4b22      	ldr	r3, [pc, #136]	; (8005b40 <HAL_InitTick+0xec>)
 8005ab8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005abc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8005abe:	4b20      	ldr	r3, [pc, #128]	; (8005b40 <HAL_InitTick+0xec>)
 8005ac0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005ac4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8005ac6:	4a1e      	ldr	r2, [pc, #120]	; (8005b40 <HAL_InitTick+0xec>)
 8005ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aca:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8005acc:	4b1c      	ldr	r3, [pc, #112]	; (8005b40 <HAL_InitTick+0xec>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ad2:	4b1b      	ldr	r3, [pc, #108]	; (8005b40 <HAL_InitTick+0xec>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ad8:	4b19      	ldr	r3, [pc, #100]	; (8005b40 <HAL_InitTick+0xec>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8005ade:	4818      	ldr	r0, [pc, #96]	; (8005b40 <HAL_InitTick+0xec>)
 8005ae0:	f005 fdf4 	bl	800b6cc <HAL_TIM_Base_Init>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8005aea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d11b      	bne.n	8005b2a <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8005af2:	4813      	ldr	r0, [pc, #76]	; (8005b40 <HAL_InitTick+0xec>)
 8005af4:	f005 fe42 	bl	800b77c <HAL_TIM_Base_Start_IT>
 8005af8:	4603      	mov	r3, r0
 8005afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8005afe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d111      	bne.n	8005b2a <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005b06:	201c      	movs	r0, #28
 8005b08:	f002 fa6c 	bl	8007fe4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b0f      	cmp	r3, #15
 8005b10:	d808      	bhi.n	8005b24 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8005b12:	2200      	movs	r2, #0
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	201c      	movs	r0, #28
 8005b18:	f002 fa48 	bl	8007fac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005b1c:	4a09      	ldr	r2, [pc, #36]	; (8005b44 <HAL_InitTick+0xf0>)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	e002      	b.n	8005b2a <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005b2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3738      	adds	r7, #56	; 0x38
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	431bde83 	.word	0x431bde83
 8005b40:	20000d40 	.word	0x20000d40
 8005b44:	2000000c 	.word	0x2000000c

08005b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005b4c:	e7fe      	b.n	8005b4c <NMI_Handler+0x4>

08005b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b52:	e7fe      	b.n	8005b52 <HardFault_Handler+0x4>

08005b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b58:	e7fe      	b.n	8005b58 <MemManage_Handler+0x4>

08005b5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b5e:	e7fe      	b.n	8005b5e <BusFault_Handler+0x4>

08005b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b64:	e7fe      	b.n	8005b64 <UsageFault_Handler+0x4>

08005b66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b66:	b480      	push	{r7}
 8005b68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b6a:	bf00      	nop
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005b78:	4802      	ldr	r0, [pc, #8]	; (8005b84 <DMA1_Stream5_IRQHandler+0x10>)
 8005b7a:	f002 fbe1 	bl	8008340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005b7e:	bf00      	nop
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000c9c 	.word	0x20000c9c

08005b88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005b8c:	4802      	ldr	r0, [pc, #8]	; (8005b98 <TIM2_IRQHandler+0x10>)
 8005b8e:	f006 f971 	bl	800be74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005b92:	bf00      	nop
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20000d40 	.word	0x20000d40

08005b9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005ba0:	4802      	ldr	r0, [pc, #8]	; (8005bac <TIM3_IRQHandler+0x10>)
 8005ba2:	f006 f967 	bl	800be74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005ba6:	bf00      	nop
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	20000ab8 	.word	0x20000ab8

08005bb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005bb4:	4802      	ldr	r0, [pc, #8]	; (8005bc0 <USART2_IRQHandler+0x10>)
 8005bb6:	f007 fcc5 	bl	800d544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005bba:	bf00      	nop
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000b8c 	.word	0x20000b8c

08005bc4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005bc8:	4802      	ldr	r0, [pc, #8]	; (8005bd4 <UART4_IRQHandler+0x10>)
 8005bca:	f007 fcbb 	bl	800d544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005bce:	bf00      	nop
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20000b04 	.word	0x20000b04

08005bd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	af00      	add	r7, sp, #0
  return 1;
 8005bdc:	2301      	movs	r3, #1
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <_kill>:

int _kill(int pid, int sig)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005bf2:	f00c fe67 	bl	80128c4 <__errno>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2216      	movs	r2, #22
 8005bfa:	601a      	str	r2, [r3, #0]
  return -1;
 8005bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <_exit>:

void _exit (int status)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005c10:	f04f 31ff 	mov.w	r1, #4294967295
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7ff ffe7 	bl	8005be8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005c1a:	e7fe      	b.n	8005c1a <_exit+0x12>

08005c1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c28:	2300      	movs	r3, #0
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	e00a      	b.n	8005c44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005c2e:	f3af 8000 	nop.w
 8005c32:	4601      	mov	r1, r0
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	60ba      	str	r2, [r7, #8]
 8005c3a:	b2ca      	uxtb	r2, r1
 8005c3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	3301      	adds	r3, #1
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	dbf0      	blt.n	8005c2e <_read+0x12>
  }

  return len;
 8005c4c:	687b      	ldr	r3, [r7, #4]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b086      	sub	sp, #24
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c62:	2300      	movs	r3, #0
 8005c64:	617b      	str	r3, [r7, #20]
 8005c66:	e009      	b.n	8005c7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	60ba      	str	r2, [r7, #8]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	dbf1      	blt.n	8005c68 <_write+0x12>
  }
  return len;
 8005c84:	687b      	ldr	r3, [r7, #4]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <_close>:

int _close(int file)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cb6:	605a      	str	r2, [r3, #4]
  return 0;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <_isatty>:

int _isatty(int file)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005cce:	2301      	movs	r3, #1
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
	...

08005cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005d00:	4a14      	ldr	r2, [pc, #80]	; (8005d54 <_sbrk+0x5c>)
 8005d02:	4b15      	ldr	r3, [pc, #84]	; (8005d58 <_sbrk+0x60>)
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005d0c:	4b13      	ldr	r3, [pc, #76]	; (8005d5c <_sbrk+0x64>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d102      	bne.n	8005d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005d14:	4b11      	ldr	r3, [pc, #68]	; (8005d5c <_sbrk+0x64>)
 8005d16:	4a12      	ldr	r2, [pc, #72]	; (8005d60 <_sbrk+0x68>)
 8005d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005d1a:	4b10      	ldr	r3, [pc, #64]	; (8005d5c <_sbrk+0x64>)
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4413      	add	r3, r2
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d207      	bcs.n	8005d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005d28:	f00c fdcc 	bl	80128c4 <__errno>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	220c      	movs	r2, #12
 8005d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005d32:	f04f 33ff 	mov.w	r3, #4294967295
 8005d36:	e009      	b.n	8005d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005d38:	4b08      	ldr	r3, [pc, #32]	; (8005d5c <_sbrk+0x64>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005d3e:	4b07      	ldr	r3, [pc, #28]	; (8005d5c <_sbrk+0x64>)
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4413      	add	r3, r2
 8005d46:	4a05      	ldr	r2, [pc, #20]	; (8005d5c <_sbrk+0x64>)
 8005d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	20040000 	.word	0x20040000
 8005d58:	00000400 	.word	0x00000400
 8005d5c:	20000d8c 	.word	0x20000d8c
 8005d60:	20009030 	.word	0x20009030

08005d64 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005d64:	b480      	push	{r7}
 8005d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d68:	4b06      	ldr	r3, [pc, #24]	; (8005d84 <SystemInit+0x20>)
 8005d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6e:	4a05      	ldr	r2, [pc, #20]	; (8005d84 <SystemInit+0x20>)
 8005d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005d78:	bf00      	nop
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	e000ed00 	.word	0xe000ed00

08005d88 <GPS_validate>:

	return 0;
}

int GPS_validate(char *nmeastr)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
	char check[3];
	char checkcalcstr[3];
	int i;
	int calculated_check;

	i = 0;
 8005d90:	2300      	movs	r3, #0
 8005d92:	617b      	str	r3, [r7, #20]
	calculated_check = 0;
 8005d94:	2300      	movs	r3, #0
 8005d96:	613b      	str	r3, [r7, #16]

	// check to ensure that the string starts with a $
	if (nmeastr[i] == '$')
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b24      	cmp	r3, #36	; 0x24
 8005da2:	d103      	bne.n	8005dac <GPS_validate+0x24>
		i++;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	3301      	adds	r3, #1
 8005da8:	617b      	str	r3, [r7, #20]
	else
		return 0;

	//No NULL reached, 75 char largest possible NMEA message, no '*' reached
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8005daa:	e00c      	b.n	8005dc6 <GPS_validate+0x3e>
		return 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	e047      	b.n	8005e40 <GPS_validate+0xb8>
	{
		calculated_check ^= nmeastr[i]; // calculate the checksum
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	4413      	add	r3, r2
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	461a      	mov	r2, r3
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	4053      	eors	r3, r2
 8005dbe:	613b      	str	r3, [r7, #16]
		i++;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	617b      	str	r3, [r7, #20]
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	4413      	add	r3, r2
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d008      	beq.n	8005de4 <GPS_validate+0x5c>
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2b2a      	cmp	r3, #42	; 0x2a
 8005ddc:	d002      	beq.n	8005de4 <GPS_validate+0x5c>
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2b4a      	cmp	r3, #74	; 0x4a
 8005de2:	dde5      	ble.n	8005db0 <GPS_validate+0x28>
	}

	if (i >= 75)
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	2b4a      	cmp	r3, #74	; 0x4a
 8005de8:	dd01      	ble.n	8005dee <GPS_validate+0x66>
	{
		return 0; // the string was too long so return an error
 8005dea:	2300      	movs	r3, #0
 8005dec:	e028      	b.n	8005e40 <GPS_validate+0xb8>
	}

	if (nmeastr[i] == '*')
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	4413      	add	r3, r2
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b2a      	cmp	r3, #42	; 0x2a
 8005df8:	d119      	bne.n	8005e2e <GPS_validate+0xa6>
	{
		check[0] = nmeastr[i + 1];    //put hex chars in check string
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	4413      	add	r3, r2
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	733b      	strb	r3, [r7, #12]
		check[1] = nmeastr[i + 2];
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	3302      	adds	r3, #2
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	737b      	strb	r3, [r7, #13]
		check[2] = 0;
 8005e12:	2300      	movs	r3, #0
 8005e14:	73bb      	strb	r3, [r7, #14]
	}
	else
		return 0;    // no checksum separator found there for invalid

	sprintf(checkcalcstr, "%02X", calculated_check);
 8005e16:	f107 0308 	add.w	r3, r7, #8
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	490a      	ldr	r1, [pc, #40]	; (8005e48 <GPS_validate+0xc0>)
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f00c fc04 	bl	801262c <siprintf>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8005e24:	7a3a      	ldrb	r2, [r7, #8]
 8005e26:	7b3b      	ldrb	r3, [r7, #12]
			1 : 0;
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d108      	bne.n	8005e3e <GPS_validate+0xb6>
 8005e2c:	e001      	b.n	8005e32 <GPS_validate+0xaa>
		return 0;    // no checksum separator found there for invalid
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e006      	b.n	8005e40 <GPS_validate+0xb8>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8005e32:	7a7a      	ldrb	r2, [r7, #9]
 8005e34:	7b7b      	ldrb	r3, [r7, #13]
			1 : 0;
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d101      	bne.n	8005e3e <GPS_validate+0xb6>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <GPS_validate+0xb8>
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	08017e50 	.word	0x08017e50

08005e4c <GPS_parse>:

void GPS_parse(char *GPSstrParse)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08a      	sub	sp, #40	; 0x28
 8005e50:	af08      	add	r7, sp, #32
 8005e52:	6078      	str	r0, [r7, #4]
	if (!strncmp(GPSstrParse, "$GPGGA", 6))
 8005e54:	2206      	movs	r2, #6
 8005e56:	4964      	ldr	r1, [pc, #400]	; (8005fe8 <GPS_parse+0x19c>)
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f00c fc80 	bl	801275e <strncmp>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d138      	bne.n	8005ed6 <GPS_parse+0x8a>
	{
		if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c",
 8005e64:	4b61      	ldr	r3, [pc, #388]	; (8005fec <GPS_parse+0x1a0>)
 8005e66:	9307      	str	r3, [sp, #28]
 8005e68:	4b61      	ldr	r3, [pc, #388]	; (8005ff0 <GPS_parse+0x1a4>)
 8005e6a:	9306      	str	r3, [sp, #24]
 8005e6c:	4b61      	ldr	r3, [pc, #388]	; (8005ff4 <GPS_parse+0x1a8>)
 8005e6e:	9305      	str	r3, [sp, #20]
 8005e70:	4b61      	ldr	r3, [pc, #388]	; (8005ff8 <GPS_parse+0x1ac>)
 8005e72:	9304      	str	r3, [sp, #16]
 8005e74:	4b61      	ldr	r3, [pc, #388]	; (8005ffc <GPS_parse+0x1b0>)
 8005e76:	9303      	str	r3, [sp, #12]
 8005e78:	4b61      	ldr	r3, [pc, #388]	; (8006000 <GPS_parse+0x1b4>)
 8005e7a:	9302      	str	r3, [sp, #8]
 8005e7c:	4b61      	ldr	r3, [pc, #388]	; (8006004 <GPS_parse+0x1b8>)
 8005e7e:	9301      	str	r3, [sp, #4]
 8005e80:	4b61      	ldr	r3, [pc, #388]	; (8006008 <GPS_parse+0x1bc>)
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	4b61      	ldr	r3, [pc, #388]	; (800600c <GPS_parse+0x1c0>)
 8005e86:	4a62      	ldr	r2, [pc, #392]	; (8006010 <GPS_parse+0x1c4>)
 8005e88:	4962      	ldr	r1, [pc, #392]	; (8006014 <GPS_parse+0x1c8>)
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f00c fbee 	bl	801266c <siscanf>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f340 80a4 	ble.w	8005fe0 <GPS_parse+0x194>
				&GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude,
				&GPS.ew, &GPS.fix, &GPS.num_of_satelites, &GPS.horizontal_dilution_of_precision,
				&GPS.mean_sea_level_altitude, &GPS.altitude_unit) >= 1)
		{
			GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8005e98:	4b5f      	ldr	r3, [pc, #380]	; (8006018 <GPS_parse+0x1cc>)
 8005e9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8005e9e:	4b5e      	ldr	r3, [pc, #376]	; (8006018 <GPS_parse+0x1cc>)
 8005ea0:	7d1b      	ldrb	r3, [r3, #20]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8005ea8:	f000 f8da 	bl	8006060 <GPS_nmea_to_dec>
 8005eac:	eef0 7a40 	vmov.f32	s15, s0
 8005eb0:	4b59      	ldr	r3, [pc, #356]	; (8006018 <GPS_parse+0x1cc>)
 8005eb2:	edc3 7a01 	vstr	s15, [r3, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8005eb6:	4b58      	ldr	r3, [pc, #352]	; (8006018 <GPS_parse+0x1cc>)
 8005eb8:	edd3 7a06 	vldr	s15, [r3, #24]
 8005ebc:	4b56      	ldr	r3, [pc, #344]	; (8006018 <GPS_parse+0x1cc>)
 8005ebe:	7f1b      	ldrb	r3, [r3, #28]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ec6:	f000 f8cb 	bl	8006060 <GPS_nmea_to_dec>
 8005eca:	eef0 7a40 	vmov.f32	s15, s0
 8005ece:	4b52      	ldr	r3, [pc, #328]	; (8006018 <GPS_parse+0x1cc>)
 8005ed0:	edc3 7a00 	vstr	s15, [r3]
			return;
 8005ed4:	e084      	b.n	8005fe0 <GPS_parse+0x194>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPRMC", 6))
 8005ed6:	2206      	movs	r2, #6
 8005ed8:	4950      	ldr	r1, [pc, #320]	; (800601c <GPS_parse+0x1d0>)
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f00c fc3f 	bl	801275e <strncmp>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d123      	bne.n	8005f2e <GPS_parse+0xe2>
	{
		if (sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time,
 8005ee6:	4b4e      	ldr	r3, [pc, #312]	; (8006020 <GPS_parse+0x1d4>)
 8005ee8:	9305      	str	r3, [sp, #20]
 8005eea:	4b4e      	ldr	r3, [pc, #312]	; (8006024 <GPS_parse+0x1d8>)
 8005eec:	9304      	str	r3, [sp, #16]
 8005eee:	4b4e      	ldr	r3, [pc, #312]	; (8006028 <GPS_parse+0x1dc>)
 8005ef0:	9303      	str	r3, [sp, #12]
 8005ef2:	4b43      	ldr	r3, [pc, #268]	; (8006000 <GPS_parse+0x1b4>)
 8005ef4:	9302      	str	r3, [sp, #8]
 8005ef6:	4b43      	ldr	r3, [pc, #268]	; (8006004 <GPS_parse+0x1b8>)
 8005ef8:	9301      	str	r3, [sp, #4]
 8005efa:	4b43      	ldr	r3, [pc, #268]	; (8006008 <GPS_parse+0x1bc>)
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	4b43      	ldr	r3, [pc, #268]	; (800600c <GPS_parse+0x1c0>)
 8005f00:	4a43      	ldr	r2, [pc, #268]	; (8006010 <GPS_parse+0x1c4>)
 8005f02:	494a      	ldr	r1, [pc, #296]	; (800602c <GPS_parse+0x1e0>)
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f00c fbb1 	bl	801266c <siscanf>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	dd67      	ble.n	8005fe0 <GPS_parse+0x194>
				&GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew,
				&GPS.speed_over_ground, &GPS.course_over_ground, &GPS.utc_date) >= 1)
		{
			if (GPS.ns == '\0')
 8005f10:	4b41      	ldr	r3, [pc, #260]	; (8006018 <GPS_parse+0x1cc>)
 8005f12:	7d1b      	ldrb	r3, [r3, #20]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <GPS_parse+0xd2>
				GPS.ns = ' ';
 8005f18:	4b3f      	ldr	r3, [pc, #252]	; (8006018 <GPS_parse+0x1cc>)
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8005f1e:	4b3e      	ldr	r3, [pc, #248]	; (8006018 <GPS_parse+0x1cc>)
 8005f20:	7f1b      	ldrb	r3, [r3, #28]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d157      	bne.n	8005fd6 <GPS_parse+0x18a>
				GPS.ew = ' ';
 8005f26:	4b3c      	ldr	r3, [pc, #240]	; (8006018 <GPS_parse+0x1cc>)
 8005f28:	2220      	movs	r2, #32
 8005f2a:	771a      	strb	r2, [r3, #28]
			return;
 8005f2c:	e053      	b.n	8005fd6 <GPS_parse+0x18a>
		}

	}
	else if (!strncmp(GPSstrParse, "$GPGLL", 6))
 8005f2e:	2206      	movs	r2, #6
 8005f30:	493f      	ldr	r1, [pc, #252]	; (8006030 <GPS_parse+0x1e4>)
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f00c fc13 	bl	801275e <strncmp>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d11f      	bne.n	8005f7e <GPS_parse+0x132>
	{
		if (sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude,
 8005f3e:	4b3d      	ldr	r3, [pc, #244]	; (8006034 <GPS_parse+0x1e8>)
 8005f40:	9303      	str	r3, [sp, #12]
 8005f42:	4b33      	ldr	r3, [pc, #204]	; (8006010 <GPS_parse+0x1c4>)
 8005f44:	9302      	str	r3, [sp, #8]
 8005f46:	4b2e      	ldr	r3, [pc, #184]	; (8006000 <GPS_parse+0x1b4>)
 8005f48:	9301      	str	r3, [sp, #4]
 8005f4a:	4b2e      	ldr	r3, [pc, #184]	; (8006004 <GPS_parse+0x1b8>)
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	4b2e      	ldr	r3, [pc, #184]	; (8006008 <GPS_parse+0x1bc>)
 8005f50:	4a2e      	ldr	r2, [pc, #184]	; (800600c <GPS_parse+0x1c0>)
 8005f52:	4939      	ldr	r1, [pc, #228]	; (8006038 <GPS_parse+0x1ec>)
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f00c fb89 	bl	801266c <siscanf>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	dd3f      	ble.n	8005fe0 <GPS_parse+0x194>
				&GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time,
				&GPS.gll_status) >= 1)
		{
			if (GPS.ns == '\0')
 8005f60:	4b2d      	ldr	r3, [pc, #180]	; (8006018 <GPS_parse+0x1cc>)
 8005f62:	7d1b      	ldrb	r3, [r3, #20]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d102      	bne.n	8005f6e <GPS_parse+0x122>
				GPS.ns = '?';
 8005f68:	4b2b      	ldr	r3, [pc, #172]	; (8006018 <GPS_parse+0x1cc>)
 8005f6a:	223f      	movs	r2, #63	; 0x3f
 8005f6c:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8005f6e:	4b2a      	ldr	r3, [pc, #168]	; (8006018 <GPS_parse+0x1cc>)
 8005f70:	7f1b      	ldrb	r3, [r3, #28]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d131      	bne.n	8005fda <GPS_parse+0x18e>
				GPS.ew = '?';
 8005f76:	4b28      	ldr	r3, [pc, #160]	; (8006018 <GPS_parse+0x1cc>)
 8005f78:	223f      	movs	r2, #63	; 0x3f
 8005f7a:	771a      	strb	r2, [r3, #28]
			return;
 8005f7c:	e02d      	b.n	8005fda <GPS_parse+0x18e>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPVTG", 6))
 8005f7e:	2206      	movs	r2, #6
 8005f80:	492e      	ldr	r1, [pc, #184]	; (800603c <GPS_parse+0x1f0>)
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f00c fbeb 	bl	801275e <strncmp>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d128      	bne.n	8005fe0 <GPS_parse+0x194>
	{
		if (sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t,
 8005f8e:	4b2c      	ldr	r3, [pc, #176]	; (8006040 <GPS_parse+0x1f4>)
 8005f90:	9305      	str	r3, [sp, #20]
 8005f92:	4b2c      	ldr	r3, [pc, #176]	; (8006044 <GPS_parse+0x1f8>)
 8005f94:	9304      	str	r3, [sp, #16]
 8005f96:	4b2c      	ldr	r3, [pc, #176]	; (8006048 <GPS_parse+0x1fc>)
 8005f98:	9303      	str	r3, [sp, #12]
 8005f9a:	4b23      	ldr	r3, [pc, #140]	; (8006028 <GPS_parse+0x1dc>)
 8005f9c:	9302      	str	r3, [sp, #8]
 8005f9e:	4b2b      	ldr	r3, [pc, #172]	; (800604c <GPS_parse+0x200>)
 8005fa0:	9301      	str	r3, [sp, #4]
 8005fa2:	4b2b      	ldr	r3, [pc, #172]	; (8006050 <GPS_parse+0x204>)
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	4b2b      	ldr	r3, [pc, #172]	; (8006054 <GPS_parse+0x208>)
 8005fa8:	4a2b      	ldr	r2, [pc, #172]	; (8006058 <GPS_parse+0x20c>)
 8005faa:	492c      	ldr	r1, [pc, #176]	; (800605c <GPS_parse+0x210>)
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f00c fb5d 	bl	801266c <siscanf>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	dd13      	ble.n	8005fe0 <GPS_parse+0x194>
				&GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit,
				&GPS.speed_over_ground, &GPS.speed_k_unit, &GPS.speed_km,
				&GPS.speed_km_unit) >= 1)
		{
			if (GPS.ns == '\0')
 8005fb8:	4b17      	ldr	r3, [pc, #92]	; (8006018 <GPS_parse+0x1cc>)
 8005fba:	7d1b      	ldrb	r3, [r3, #20]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d102      	bne.n	8005fc6 <GPS_parse+0x17a>
				GPS.ns = '?';
 8005fc0:	4b15      	ldr	r3, [pc, #84]	; (8006018 <GPS_parse+0x1cc>)
 8005fc2:	223f      	movs	r2, #63	; 0x3f
 8005fc4:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8005fc6:	4b14      	ldr	r3, [pc, #80]	; (8006018 <GPS_parse+0x1cc>)
 8005fc8:	7f1b      	ldrb	r3, [r3, #28]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d107      	bne.n	8005fde <GPS_parse+0x192>
				GPS.ew = '?';
 8005fce:	4b12      	ldr	r3, [pc, #72]	; (8006018 <GPS_parse+0x1cc>)
 8005fd0:	223f      	movs	r2, #63	; 0x3f
 8005fd2:	771a      	strb	r2, [r3, #28]
			return;
 8005fd4:	e003      	b.n	8005fde <GPS_parse+0x192>
			return;
 8005fd6:	bf00      	nop
 8005fd8:	e002      	b.n	8005fe0 <GPS_parse+0x194>
			return;
 8005fda:	bf00      	nop
 8005fdc:	e000      	b.n	8005fe0 <GPS_parse+0x194>
			return;
 8005fde:	bf00      	nop
		}
	}
}
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	08017e58 	.word	0x08017e58
 8005fec:	2000052c 	.word	0x2000052c
 8005ff0:	20000528 	.word	0x20000528
 8005ff4:	20000524 	.word	0x20000524
 8005ff8:	20000520 	.word	0x20000520
 8005ffc:	2000051c 	.word	0x2000051c
 8006000:	20000518 	.word	0x20000518
 8006004:	20000514 	.word	0x20000514
 8006008:	20000510 	.word	0x20000510
 800600c:	2000050c 	.word	0x2000050c
 8006010:	20000508 	.word	0x20000508
 8006014:	08017e60 	.word	0x08017e60
 8006018:	200004fc 	.word	0x200004fc
 800601c:	08017e88 	.word	0x08017e88
 8006020:	20000538 	.word	0x20000538
 8006024:	20000534 	.word	0x20000534
 8006028:	20000530 	.word	0x20000530
 800602c:	08017e90 	.word	0x08017e90
 8006030:	08017eb0 	.word	0x08017eb0
 8006034:	2000053c 	.word	0x2000053c
 8006038:	08017eb8 	.word	0x08017eb8
 800603c:	08017ed4 	.word	0x08017ed4
 8006040:	20000554 	.word	0x20000554
 8006044:	20000550 	.word	0x20000550
 8006048:	2000054d 	.word	0x2000054d
 800604c:	2000054c 	.word	0x2000054c
 8006050:	20000548 	.word	0x20000548
 8006054:	20000544 	.word	0x20000544
 8006058:	20000540 	.word	0x20000540
 800605c:	08017edc 	.word	0x08017edc

08006060 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	ed87 0a01 	vstr	s0, [r7, #4]
 800606a:	4603      	mov	r3, r0
 800606c:	70fb      	strb	r3, [r7, #3]
	int degree = (int) (deg_coord / 100);
 800606e:	ed97 7a01 	vldr	s14, [r7, #4]
 8006072:	eddf 6a20 	vldr	s13, [pc, #128]	; 80060f4 <GPS_nmea_to_dec+0x94>
 8006076:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800607a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800607e:	ee17 3a90 	vmov	r3, s15
 8006082:	613b      	str	r3, [r7, #16]
	float minutes = deg_coord - degree * 100;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2264      	movs	r2, #100	; 0x64
 8006088:	fb02 f303 	mul.w	r3, r2, r3
 800608c:	ee07 3a90 	vmov	s15, r3
 8006090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006094:	ed97 7a01 	vldr	s14, [r7, #4]
 8006098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800609c:	edc7 7a03 	vstr	s15, [r7, #12]
	float dec_deg = minutes / 60;
 80060a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80060a4:	eddf 6a14 	vldr	s13, [pc, #80]	; 80060f8 <GPS_nmea_to_dec+0x98>
 80060a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060ac:	edc7 7a02 	vstr	s15, [r7, #8]
	float decimal = degree + dec_deg;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80060be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060c2:	edc7 7a05 	vstr	s15, [r7, #20]
	if (nsew == 'S' || nsew == 'W')
 80060c6:	78fb      	ldrb	r3, [r7, #3]
 80060c8:	2b53      	cmp	r3, #83	; 0x53
 80060ca:	d002      	beq.n	80060d2 <GPS_nmea_to_dec+0x72>
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	2b57      	cmp	r3, #87	; 0x57
 80060d0:	d105      	bne.n	80060de <GPS_nmea_to_dec+0x7e>
	{ // return negative
		decimal *= -1;
 80060d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80060d6:	eef1 7a67 	vneg.f32	s15, s15
 80060da:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return decimal;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	ee07 3a90 	vmov	s15, r3
}
 80060e4:	eeb0 0a67 	vmov.f32	s0, s15
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	42c80000 	.word	0x42c80000
 80060f8:	42700000 	.word	0x42700000

080060fc <HMC5883L_Init>:
#include "GY-271/HMC5883L.h"
#include "Globals.h"


uint8_t HMC5883L_Init()
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
	HMC5883L_setRange(HMC5883L_RANGE_8_1GA);
 8006100:	2007      	movs	r0, #7
 8006102:	f000 f871 	bl	80061e8 <HMC5883L_setRange>
	HMC5883L_setMeasurementMode(HMC5883L_CONTINOUS);
 8006106:	2000      	movs	r0, #0
 8006108:	f000 f8c8 	bl	800629c <HMC5883L_setMeasurementMode>
	HMC5883L_setDataRate(HMC5883L_DATARATE_30HZ);
 800610c:	2005      	movs	r0, #5
 800610e:	f000 f8e0 	bl	80062d2 <HMC5883L_setDataRate>
	HMC5883L_setSamples(HMC5883L_SAMPLES_4);
 8006112:	2002      	movs	r0, #2
 8006114:	f000 f8fc 	bl	8006310 <HMC5883L_setSamples>
	HMC5883L_setOffset(0, 0);
 8006118:	2100      	movs	r1, #0
 800611a:	2000      	movs	r0, #0
 800611c:	f000 f84e 	bl	80061bc <HMC5883L_setOffset>

	return 0;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <HMC5883L_readRaw>:

Vector HMC5883L_readRaw(void)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af00      	add	r7, sp, #0
    v.XAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_X_M) - xOffset;
 800612e:	2003      	movs	r0, #3
 8006130:	f000 f946 	bl	80063c0 <HMC5883L_readRegister16>
 8006134:	4603      	mov	r3, r0
 8006136:	461a      	mov	r2, r3
 8006138:	4b1d      	ldr	r3, [pc, #116]	; (80061b0 <HMC5883L_readRaw+0x88>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	ee07 3a90 	vmov	s15, r3
 8006142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006146:	4b1b      	ldr	r3, [pc, #108]	; (80061b4 <HMC5883L_readRaw+0x8c>)
 8006148:	edc3 7a00 	vstr	s15, [r3]
    v.YAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Y_M) - yOffset;
 800614c:	2007      	movs	r0, #7
 800614e:	f000 f937 	bl	80063c0 <HMC5883L_readRegister16>
 8006152:	4603      	mov	r3, r0
 8006154:	461a      	mov	r2, r3
 8006156:	4b18      	ldr	r3, [pc, #96]	; (80061b8 <HMC5883L_readRaw+0x90>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	ee07 3a90 	vmov	s15, r3
 8006160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006164:	4b13      	ldr	r3, [pc, #76]	; (80061b4 <HMC5883L_readRaw+0x8c>)
 8006166:	edc3 7a01 	vstr	s15, [r3, #4]
    v.ZAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Z_M);
 800616a:	2005      	movs	r0, #5
 800616c:	f000 f928 	bl	80063c0 <HMC5883L_readRegister16>
 8006170:	4603      	mov	r3, r0
 8006172:	ee07 3a90 	vmov	s15, r3
 8006176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800617a:	4b0e      	ldr	r3, [pc, #56]	; (80061b4 <HMC5883L_readRaw+0x8c>)
 800617c:	edc3 7a02 	vstr	s15, [r3, #8]

    return v;
 8006180:	4a0c      	ldr	r2, [pc, #48]	; (80061b4 <HMC5883L_readRaw+0x8c>)
 8006182:	f107 0314 	add.w	r3, r7, #20
 8006186:	ca07      	ldmia	r2, {r0, r1, r2}
 8006188:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800618c:	6979      	ldr	r1, [r7, #20]
 800618e:	69ba      	ldr	r2, [r7, #24]
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	ee06 1a90 	vmov	s13, r1
 8006196:	ee07 2a10 	vmov	s14, r2
 800619a:	ee07 3a90 	vmov	s15, r3
}
 800619e:	eeb0 0a66 	vmov.f32	s0, s13
 80061a2:	eef0 0a47 	vmov.f32	s1, s14
 80061a6:	eeb0 1a67 	vmov.f32	s2, s15
 80061aa:	3720      	adds	r7, #32
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20000408 	.word	0x20000408
 80061b4:	200003fc 	.word	0x200003fc
 80061b8:	2000040c 	.word	0x2000040c

080061bc <HMC5883L_setOffset>:

    return v;
}

void HMC5883L_setOffset(int xo, int yo)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
    xOffset = xo;
 80061c6:	4a06      	ldr	r2, [pc, #24]	; (80061e0 <HMC5883L_setOffset+0x24>)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6013      	str	r3, [r2, #0]
    yOffset = yo;
 80061cc:	4a05      	ldr	r2, [pc, #20]	; (80061e4 <HMC5883L_setOffset+0x28>)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6013      	str	r3, [r2, #0]
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	20000408 	.word	0x20000408
 80061e4:	2000040c 	.word	0x2000040c

080061e8 <HMC5883L_setRange>:

void HMC5883L_setRange(uint8_t range)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	4603      	mov	r3, r0
 80061f0:	71fb      	strb	r3, [r7, #7]
    switch(range)
 80061f2:	79fb      	ldrb	r3, [r7, #7]
 80061f4:	2b07      	cmp	r3, #7
 80061f6:	d833      	bhi.n	8006260 <HMC5883L_setRange+0x78>
 80061f8:	a201      	add	r2, pc, #4	; (adr r2, 8006200 <HMC5883L_setRange+0x18>)
 80061fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fe:	bf00      	nop
 8006200:	08006221 	.word	0x08006221
 8006204:	08006229 	.word	0x08006229
 8006208:	08006231 	.word	0x08006231
 800620c:	08006239 	.word	0x08006239
 8006210:	08006241 	.word	0x08006241
 8006214:	08006249 	.word	0x08006249
 8006218:	08006251 	.word	0x08006251
 800621c:	08006259 	.word	0x08006259
    {
	case HMC5883L_RANGE_0_88GA:
	    mG_per_LSB = 0.073f;
 8006220:	4b15      	ldr	r3, [pc, #84]	; (8006278 <HMC5883L_setRange+0x90>)
 8006222:	4a16      	ldr	r2, [pc, #88]	; (800627c <HMC5883L_setRange+0x94>)
 8006224:	601a      	str	r2, [r3, #0]
	    break;
 8006226:	e01c      	b.n	8006262 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_3GA:
	    mG_per_LSB = 0.92f;
 8006228:	4b13      	ldr	r3, [pc, #76]	; (8006278 <HMC5883L_setRange+0x90>)
 800622a:	4a15      	ldr	r2, [pc, #84]	; (8006280 <HMC5883L_setRange+0x98>)
 800622c:	601a      	str	r2, [r3, #0]
	    break;
 800622e:	e018      	b.n	8006262 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_9GA:
	    mG_per_LSB = 1.22f;
 8006230:	4b11      	ldr	r3, [pc, #68]	; (8006278 <HMC5883L_setRange+0x90>)
 8006232:	4a14      	ldr	r2, [pc, #80]	; (8006284 <HMC5883L_setRange+0x9c>)
 8006234:	601a      	str	r2, [r3, #0]
	    break;
 8006236:	e014      	b.n	8006262 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_2_5GA:
	    mG_per_LSB = 1.52f;
 8006238:	4b0f      	ldr	r3, [pc, #60]	; (8006278 <HMC5883L_setRange+0x90>)
 800623a:	4a13      	ldr	r2, [pc, #76]	; (8006288 <HMC5883L_setRange+0xa0>)
 800623c:	601a      	str	r2, [r3, #0]
	    break;
 800623e:	e010      	b.n	8006262 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4GA:
	    mG_per_LSB = 2.27f;
 8006240:	4b0d      	ldr	r3, [pc, #52]	; (8006278 <HMC5883L_setRange+0x90>)
 8006242:	4a12      	ldr	r2, [pc, #72]	; (800628c <HMC5883L_setRange+0xa4>)
 8006244:	601a      	str	r2, [r3, #0]
	    break;
 8006246:	e00c      	b.n	8006262 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4_7GA:
	    mG_per_LSB = 2.56f;
 8006248:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <HMC5883L_setRange+0x90>)
 800624a:	4a11      	ldr	r2, [pc, #68]	; (8006290 <HMC5883L_setRange+0xa8>)
 800624c:	601a      	str	r2, [r3, #0]
	    break;
 800624e:	e008      	b.n	8006262 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_5_6GA:
	    mG_per_LSB = 3.03f;
 8006250:	4b09      	ldr	r3, [pc, #36]	; (8006278 <HMC5883L_setRange+0x90>)
 8006252:	4a10      	ldr	r2, [pc, #64]	; (8006294 <HMC5883L_setRange+0xac>)
 8006254:	601a      	str	r2, [r3, #0]
	    break;
 8006256:	e004      	b.n	8006262 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_8_1GA:
	    mG_per_LSB = 4.35f;
 8006258:	4b07      	ldr	r3, [pc, #28]	; (8006278 <HMC5883L_setRange+0x90>)
 800625a:	4a0f      	ldr	r2, [pc, #60]	; (8006298 <HMC5883L_setRange+0xb0>)
 800625c:	601a      	str	r2, [r3, #0]
	    break;
 800625e:	e000      	b.n	8006262 <HMC5883L_setRange+0x7a>

	default:
	    break;
 8006260:	bf00      	nop
    }

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_B, range << 5);
 8006262:	79fb      	ldrb	r3, [r7, #7]
 8006264:	015b      	lsls	r3, r3, #5
 8006266:	b2db      	uxtb	r3, r3
 8006268:	4619      	mov	r1, r3
 800626a:	2001      	movs	r0, #1
 800626c:	f000 f870 	bl	8006350 <HMC5883L_writeRegister8>
}
 8006270:	bf00      	nop
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	200003f8 	.word	0x200003f8
 800627c:	3d958106 	.word	0x3d958106
 8006280:	3f6b851f 	.word	0x3f6b851f
 8006284:	3f9c28f6 	.word	0x3f9c28f6
 8006288:	3fc28f5c 	.word	0x3fc28f5c
 800628c:	401147ae 	.word	0x401147ae
 8006290:	4023d70a 	.word	0x4023d70a
 8006294:	4041eb85 	.word	0x4041eb85
 8006298:	408b3333 	.word	0x408b3333

0800629c <HMC5883L_setMeasurementMode>:
{
    return (uint8_t)((HMC5883L_readRegister8(HMC5883L_REG_CONFIG_B) >> 5));
}

void HMC5883L_setMeasurementMode(uint8_t mode)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	4603      	mov	r3, r0
 80062a4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_MODE);
 80062a6:	2002      	movs	r0, #2
 80062a8:	f000 f86e 	bl	8006388 <HMC5883L_readRegister8>
 80062ac:	4603      	mov	r3, r0
 80062ae:	73fb      	strb	r3, [r7, #15]
    value &= 0b11111100;
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	f023 0303 	bic.w	r3, r3, #3
 80062b6:	73fb      	strb	r3, [r7, #15]
    value |= mode;
 80062b8:	7bfa      	ldrb	r2, [r7, #15]
 80062ba:	79fb      	ldrb	r3, [r7, #7]
 80062bc:	4313      	orrs	r3, r2
 80062be:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_MODE, value);
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	4619      	mov	r1, r3
 80062c4:	2002      	movs	r0, #2
 80062c6:	f000 f843 	bl	8006350 <HMC5883L_writeRegister8>
}
 80062ca:	bf00      	nop
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <HMC5883L_setDataRate>:

    return value;
}

void HMC5883L_setDataRate(uint8_t dataRate)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	4603      	mov	r3, r0
 80062da:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 80062dc:	2000      	movs	r0, #0
 80062de:	f000 f853 	bl	8006388 <HMC5883L_readRegister8>
 80062e2:	4603      	mov	r3, r0
 80062e4:	73fb      	strb	r3, [r7, #15]
    value &= 0b11100011;
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
 80062e8:	f023 031c 	bic.w	r3, r3, #28
 80062ec:	73fb      	strb	r3, [r7, #15]
    value |= (dataRate << 2);
 80062ee:	79fb      	ldrb	r3, [r7, #7]
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	b25a      	sxtb	r2, r3
 80062f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	b25b      	sxtb	r3, r3
 80062fc:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	4619      	mov	r1, r3
 8006302:	2000      	movs	r0, #0
 8006304:	f000 f824 	bl	8006350 <HMC5883L_writeRegister8>
}
 8006308:	bf00      	nop
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <HMC5883L_setSamples>:

    return value;
}

void HMC5883L_setSamples(uint8_t samples)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	4603      	mov	r3, r0
 8006318:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 800631a:	2000      	movs	r0, #0
 800631c:	f000 f834 	bl	8006388 <HMC5883L_readRegister8>
 8006320:	4603      	mov	r3, r0
 8006322:	73fb      	strb	r3, [r7, #15]
    value &= 0b10011111;
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800632a:	73fb      	strb	r3, [r7, #15]
    value |= (samples << 5);
 800632c:	79fb      	ldrb	r3, [r7, #7]
 800632e:	015b      	lsls	r3, r3, #5
 8006330:	b25a      	sxtb	r2, r3
 8006332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006336:	4313      	orrs	r3, r2
 8006338:	b25b      	sxtb	r3, r3
 800633a:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 800633c:	7bfb      	ldrb	r3, [r7, #15]
 800633e:	4619      	mov	r1, r3
 8006340:	2000      	movs	r0, #0
 8006342:	f000 f805 	bl	8006350 <HMC5883L_writeRegister8>
}
 8006346:	bf00      	nop
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
	...

08006350 <HMC5883L_writeRegister8>:
    return value;
}

// Write byte to register
void HMC5883L_writeRegister8(uint8_t reg, uint8_t value)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af04      	add	r7, sp, #16
 8006356:	4603      	mov	r3, r0
 8006358:	460a      	mov	r2, r1
 800635a:	71fb      	strb	r3, [r7, #7]
 800635c:	4613      	mov	r3, r2
 800635e:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1 , &value, 1, 500);
 8006360:	79fb      	ldrb	r3, [r7, #7]
 8006362:	b29a      	uxth	r2, r3
 8006364:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006368:	9302      	str	r3, [sp, #8]
 800636a:	2301      	movs	r3, #1
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	1dbb      	adds	r3, r7, #6
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	2301      	movs	r3, #1
 8006374:	213c      	movs	r1, #60	; 0x3c
 8006376:	4803      	ldr	r0, [pc, #12]	; (8006384 <HMC5883L_writeRegister8+0x34>)
 8006378:	f002 fc92 	bl	8008ca0 <HAL_I2C_Mem_Write>
}
 800637c:	bf00      	nop
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	20000950 	.word	0x20000950

08006388 <HMC5883L_readRegister8>:
    return value;
}

// Read byte from register
uint8_t HMC5883L_readRegister8(uint8_t reg)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af04      	add	r7, sp, #16
 800638e:	4603      	mov	r3, r0
 8006390:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 1, 500);
 8006392:	79fb      	ldrb	r3, [r7, #7]
 8006394:	b29a      	uxth	r2, r3
 8006396:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800639a:	9302      	str	r3, [sp, #8]
 800639c:	2301      	movs	r3, #1
 800639e:	9301      	str	r3, [sp, #4]
 80063a0:	f107 030f 	add.w	r3, r7, #15
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	2301      	movs	r3, #1
 80063a8:	213c      	movs	r1, #60	; 0x3c
 80063aa:	4804      	ldr	r0, [pc, #16]	; (80063bc <HMC5883L_readRegister8+0x34>)
 80063ac:	f002 fd8c 	bl	8008ec8 <HAL_I2C_Mem_Read>
    return value;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20000950 	.word	0x20000950

080063c0 <HMC5883L_readRegister16>:

// Read word from register
int16_t HMC5883L_readRegister16(uint8_t reg)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af04      	add	r7, sp, #16
 80063c6:	4603      	mov	r3, r0
 80063c8:	71fb      	strb	r3, [r7, #7]
    int16_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 2, 500);
 80063ca:	79fb      	ldrb	r3, [r7, #7]
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80063d2:	9302      	str	r3, [sp, #8]
 80063d4:	2302      	movs	r3, #2
 80063d6:	9301      	str	r3, [sp, #4]
 80063d8:	f107 030e 	add.w	r3, r7, #14
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	2301      	movs	r3, #1
 80063e0:	213c      	movs	r1, #60	; 0x3c
 80063e2:	4804      	ldr	r0, [pc, #16]	; (80063f4 <HMC5883L_readRegister16+0x34>)
 80063e4:	f002 fd70 	bl	8008ec8 <HAL_I2C_Mem_Read>
    return value;
 80063e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	20000950 	.word	0x20000950

080063f8 <BMP280_initialize>:

/** Initialize the device with desired configuration
 * @return 1, if device is not recognized, 0 otherwise.
 * */
uint8_t BMP280_initialize(SPI_HandleTypeDef *SPIx, BMP280_t *bmp280)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
	// Disable MPU9250
	HAL_GPIO_WritePin(SPI2_IMU_CSIMU_GPIO_Port, SPI2_IMU_CSIMU_Pin, GPIO_PIN_SET);
 8006402:	2201      	movs	r2, #1
 8006404:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006408:	481a      	ldr	r0, [pc, #104]	; (8006474 <BMP280_initialize+0x7c>)
 800640a:	f002 fb9f 	bl	8008b4c <HAL_GPIO_WritePin>

	bmp280->spiHandle = SPIx;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	601a      	str	r2, [r3, #0]

    if (BMP280_getID(bmp280) != BMP280_CHIP_ID)
 8006414:	6838      	ldr	r0, [r7, #0]
 8006416:	f000 f83c 	bl	8006492 <BMP280_getID>
 800641a:	4603      	mov	r3, r0
 800641c:	2b58      	cmp	r3, #88	; 0x58
 800641e:	d001      	beq.n	8006424 <BMP280_initialize+0x2c>
    {
        return 1;
 8006420:	2301      	movs	r3, #1
 8006422:	e023      	b.n	800646c <BMP280_initialize+0x74>
    }

    // Reset device and wait
    BMP280_reset(bmp280);
 8006424:	6838      	ldr	r0, [r7, #0]
 8006426:	f000 f827 	bl	8006478 <BMP280_reset>
    HAL_Delay(500);
 800642a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800642e:	f001 fce1 	bl	8007df4 <HAL_Delay>

    // BEGIN OF CONFIGURATION ----------------------------------
    BMP280_setPressureOversampling(bmp280, oversampling_x16);
 8006432:	2105      	movs	r1, #5
 8006434:	6838      	ldr	r0, [r7, #0]
 8006436:	f000 f8ef 	bl	8006618 <BMP280_setPressureOversampling>
    BMP280_setTemperatureOversampling(bmp280, oversampling_x2);
 800643a:	2102      	movs	r1, #2
 800643c:	6838      	ldr	r0, [r7, #0]
 800643e:	f000 f90c 	bl	800665a <BMP280_setTemperatureOversampling>

    BMP280_setPowerMode(bmp280, mode_normal);
 8006442:	2103      	movs	r1, #3
 8006444:	6838      	ldr	r0, [r7, #0]
 8006446:	f000 f929 	bl	800669c <BMP280_setPowerMode>
    BMP280_setFilterCoefficient(bmp280, filter_coeff_16);
 800644a:	2104      	movs	r1, #4
 800644c:	6838      	ldr	r0, [r7, #0]
 800644e:	f000 f966 	bl	800671e <BMP280_setFilterCoefficient>
    BMP280_setStandbyTime(bmp280, standby_time_500us);
 8006452:	2100      	movs	r1, #0
 8006454:	6838      	ldr	r0, [r7, #0]
 8006456:	f000 f941 	bl	80066dc <BMP280_setStandbyTime>
    // END OF CONFIGURATION --------------------------

    BMP280_readCompensationParameters(bmp280);
 800645a:	6838      	ldr	r0, [r7, #0]
 800645c:	f000 f826 	bl	80064ac <BMP280_readCompensationParameters>
    BMP280_setReferencePressure(bmp280, 100, 50);
 8006460:	2232      	movs	r2, #50	; 0x32
 8006462:	2164      	movs	r1, #100	; 0x64
 8006464:	6838      	ldr	r0, [r7, #0]
 8006466:	f000 f89e 	bl	80065a6 <BMP280_setReferencePressure>

    return 0;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	40020c00 	.word	0x40020c00

08006478 <BMP280_reset>:

/** Perform power-on reset procedure */
void BMP280_reset(BMP280_t *bmp280)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
    BMP280_writeRegister(bmp280, BMP280_REG_RESET, BMP280_RESET_VALUE);
 8006480:	22b6      	movs	r2, #182	; 0xb6
 8006482:	21e0      	movs	r1, #224	; 0xe0
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fa25 	bl	80068d4 <BMP280_writeRegister>
}
 800648a:	bf00      	nop
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <BMP280_getID>:
/**
 * Read chip identification number.
 * @return chip ID
 * */
uint8_t BMP280_getID(BMP280_t *bmp280)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b082      	sub	sp, #8
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
    return BMP280_readRegister(bmp280, BMP280_REG_ID);
 800649a:	21d0      	movs	r1, #208	; 0xd0
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f9fd 	bl	800689c <BMP280_readRegister>
 80064a2:	4603      	mov	r3, r0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <BMP280_readCompensationParameters>:

void BMP280_readCompensationParameters(BMP280_t *bmp280)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
    uint8_t buf[24];
    BMP280_readMBRegister(bmp280, BMP280_REG_CALIB, buf, 24);
 80064b4:	f107 0208 	add.w	r2, r7, #8
 80064b8:	2318      	movs	r3, #24
 80064ba:	2188      	movs	r1, #136	; 0x88
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fa28 	bl	8006912 <BMP280_readMBRegister>
    bmp280->compensationParameters.dig_t1 = ((buf[1] << 8) | buf[0]);
 80064c2:	7a7b      	ldrb	r3, [r7, #9]
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	b21a      	sxth	r2, r3
 80064c8:	7a3b      	ldrb	r3, [r7, #8]
 80064ca:	b21b      	sxth	r3, r3
 80064cc:	4313      	orrs	r3, r2
 80064ce:	b21b      	sxth	r3, r3
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	831a      	strh	r2, [r3, #24]
    bmp280->compensationParameters.dig_t2 = ((buf[3] << 8) | buf[2]);
 80064d6:	7afb      	ldrb	r3, [r7, #11]
 80064d8:	021b      	lsls	r3, r3, #8
 80064da:	b21a      	sxth	r2, r3
 80064dc:	7abb      	ldrb	r3, [r7, #10]
 80064de:	b21b      	sxth	r3, r3
 80064e0:	4313      	orrs	r3, r2
 80064e2:	b21a      	sxth	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	835a      	strh	r2, [r3, #26]
    bmp280->compensationParameters.dig_t3 = ((buf[5] << 8) | buf[4]);
 80064e8:	7b7b      	ldrb	r3, [r7, #13]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	b21a      	sxth	r2, r3
 80064ee:	7b3b      	ldrb	r3, [r7, #12]
 80064f0:	b21b      	sxth	r3, r3
 80064f2:	4313      	orrs	r3, r2
 80064f4:	b21a      	sxth	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	839a      	strh	r2, [r3, #28]
    bmp280->compensationParameters.dig_p1 = ((buf[7] << 8) | buf[6]);
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
 80064fc:	021b      	lsls	r3, r3, #8
 80064fe:	b21a      	sxth	r2, r3
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	b21b      	sxth	r3, r3
 8006504:	4313      	orrs	r3, r2
 8006506:	b21b      	sxth	r3, r3
 8006508:	b29a      	uxth	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	83da      	strh	r2, [r3, #30]
    bmp280->compensationParameters.dig_p2 = ((buf[9] << 8) | buf[8]);
 800650e:	7c7b      	ldrb	r3, [r7, #17]
 8006510:	021b      	lsls	r3, r3, #8
 8006512:	b21a      	sxth	r2, r3
 8006514:	7c3b      	ldrb	r3, [r7, #16]
 8006516:	b21b      	sxth	r3, r3
 8006518:	4313      	orrs	r3, r2
 800651a:	b21a      	sxth	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	841a      	strh	r2, [r3, #32]
    bmp280->compensationParameters.dig_p3 = ((buf[11] << 8) | buf[10]);
 8006520:	7cfb      	ldrb	r3, [r7, #19]
 8006522:	021b      	lsls	r3, r3, #8
 8006524:	b21a      	sxth	r2, r3
 8006526:	7cbb      	ldrb	r3, [r7, #18]
 8006528:	b21b      	sxth	r3, r3
 800652a:	4313      	orrs	r3, r2
 800652c:	b21a      	sxth	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	845a      	strh	r2, [r3, #34]	; 0x22
    bmp280->compensationParameters.dig_p4 = ((buf[13] << 8) | buf[12]);
 8006532:	7d7b      	ldrb	r3, [r7, #21]
 8006534:	021b      	lsls	r3, r3, #8
 8006536:	b21a      	sxth	r2, r3
 8006538:	7d3b      	ldrb	r3, [r7, #20]
 800653a:	b21b      	sxth	r3, r3
 800653c:	4313      	orrs	r3, r2
 800653e:	b21a      	sxth	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	849a      	strh	r2, [r3, #36]	; 0x24
    bmp280->compensationParameters.dig_p5 = ((buf[15] << 8) | buf[14]);
 8006544:	7dfb      	ldrb	r3, [r7, #23]
 8006546:	021b      	lsls	r3, r3, #8
 8006548:	b21a      	sxth	r2, r3
 800654a:	7dbb      	ldrb	r3, [r7, #22]
 800654c:	b21b      	sxth	r3, r3
 800654e:	4313      	orrs	r3, r2
 8006550:	b21a      	sxth	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	84da      	strh	r2, [r3, #38]	; 0x26
    bmp280->compensationParameters.dig_p6 = ((buf[17] << 8) | buf[16]);
 8006556:	7e7b      	ldrb	r3, [r7, #25]
 8006558:	021b      	lsls	r3, r3, #8
 800655a:	b21a      	sxth	r2, r3
 800655c:	7e3b      	ldrb	r3, [r7, #24]
 800655e:	b21b      	sxth	r3, r3
 8006560:	4313      	orrs	r3, r2
 8006562:	b21a      	sxth	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	851a      	strh	r2, [r3, #40]	; 0x28
    bmp280->compensationParameters.dig_p7 = ((buf[19] << 8) | buf[18]);
 8006568:	7efb      	ldrb	r3, [r7, #27]
 800656a:	021b      	lsls	r3, r3, #8
 800656c:	b21a      	sxth	r2, r3
 800656e:	7ebb      	ldrb	r3, [r7, #26]
 8006570:	b21b      	sxth	r3, r3
 8006572:	4313      	orrs	r3, r2
 8006574:	b21a      	sxth	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	855a      	strh	r2, [r3, #42]	; 0x2a
    bmp280->compensationParameters.dig_p8 = ((buf[21] << 8) | buf[20]);
 800657a:	7f7b      	ldrb	r3, [r7, #29]
 800657c:	021b      	lsls	r3, r3, #8
 800657e:	b21a      	sxth	r2, r3
 8006580:	7f3b      	ldrb	r3, [r7, #28]
 8006582:	b21b      	sxth	r3, r3
 8006584:	4313      	orrs	r3, r2
 8006586:	b21a      	sxth	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	859a      	strh	r2, [r3, #44]	; 0x2c
    bmp280->compensationParameters.dig_p9 = ((buf[23] << 8) | buf[22]);
 800658c:	7ffb      	ldrb	r3, [r7, #31]
 800658e:	021b      	lsls	r3, r3, #8
 8006590:	b21a      	sxth	r2, r3
 8006592:	7fbb      	ldrb	r3, [r7, #30]
 8006594:	b21b      	sxth	r3, r3
 8006596:	4313      	orrs	r3, r2
 8006598:	b21a      	sxth	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 800659e:	bf00      	nop
 80065a0:	3720      	adds	r7, #32
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <BMP280_setReferencePressure>:
 * Set reference pressure for altitude calculation by averaging pressure measurements.
 * @param samples: Number of measurements to average.
 * @param delay: Delay between measurements (in ms).
 * */
void BMP280_setReferencePressure(BMP280_t *bmp280, uint16_t samples, uint8_t delay)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	460b      	mov	r3, r1
 80065b0:	807b      	strh	r3, [r7, #2]
 80065b2:	4613      	mov	r3, r2
 80065b4:	707b      	strb	r3, [r7, #1]
    HAL_Delay(500);
 80065b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80065ba:	f001 fc1b 	bl	8007df4 <HAL_Delay>
    float sum = 0;
 80065be:	f04f 0300 	mov.w	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < samples; i++)
 80065c4:	2300      	movs	r3, #0
 80065c6:	60bb      	str	r3, [r7, #8]
 80065c8:	e012      	b.n	80065f0 <BMP280_setReferencePressure+0x4a>
    {
        BMP280_measure(bmp280);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f8c8 	bl	8006760 <BMP280_measure>
        sum += bmp280->measurement.pressure;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80065d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80065da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065de:	edc7 7a03 	vstr	s15, [r7, #12]
        HAL_Delay(delay);
 80065e2:	787b      	ldrb	r3, [r7, #1]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f001 fc05 	bl	8007df4 <HAL_Delay>
    for (int i = 0; i < samples; i++)
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	3301      	adds	r3, #1
 80065ee:	60bb      	str	r3, [r7, #8]
 80065f0:	887b      	ldrh	r3, [r7, #2]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	dbe8      	blt.n	80065ca <BMP280_setReferencePressure+0x24>
    }
    bmp280->p_reference = sum / samples;
 80065f8:	887b      	ldrh	r3, [r7, #2]
 80065fa:	ee07 3a90 	vmov	s15, r3
 80065fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006602:	edd7 6a03 	vldr	s13, [r7, #12]
 8006606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8006610:	bf00      	nop
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <BMP280_setPressureOversampling>:

/** Configure pressure oversampling */
void BMP280_setPressureOversampling(BMP280_t *bmp280, uint8_t osrs_p)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 8006624:	21f4      	movs	r1, #244	; 0xf4
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f938 	bl	800689c <BMP280_readRegister>
 800662c:	4603      	mov	r3, r0
 800662e:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11100011) | (osrs_p << 2);
 8006630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006634:	f023 031c 	bic.w	r3, r3, #28
 8006638:	b25a      	sxtb	r2, r3
 800663a:	78fb      	ldrb	r3, [r7, #3]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	b25b      	sxtb	r3, r3
 8006640:	4313      	orrs	r3, r2
 8006642:	b25b      	sxtb	r3, r3
 8006644:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 8006646:	7bfb      	ldrb	r3, [r7, #15]
 8006648:	461a      	mov	r2, r3
 800664a:	21f4      	movs	r1, #244	; 0xf4
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f941 	bl	80068d4 <BMP280_writeRegister>
}
 8006652:	bf00      	nop
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <BMP280_setTemperatureOversampling>:

/** Configure temperature oversampling */
void BMP280_setTemperatureOversampling(BMP280_t *bmp280, uint8_t osrs_t)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	460b      	mov	r3, r1
 8006664:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 8006666:	21f4      	movs	r1, #244	; 0xf4
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f917 	bl	800689c <BMP280_readRegister>
 800666e:	4603      	mov	r3, r0
 8006670:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b00011111) | (osrs_t << 5);
 8006672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006676:	f003 031f 	and.w	r3, r3, #31
 800667a:	b25a      	sxtb	r2, r3
 800667c:	78fb      	ldrb	r3, [r7, #3]
 800667e:	015b      	lsls	r3, r3, #5
 8006680:	b25b      	sxtb	r3, r3
 8006682:	4313      	orrs	r3, r2
 8006684:	b25b      	sxtb	r3, r3
 8006686:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	461a      	mov	r2, r3
 800668c:	21f4      	movs	r1, #244	; 0xf4
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f920 	bl	80068d4 <BMP280_writeRegister>
}
 8006694:	bf00      	nop
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <BMP280_setPowerMode>:

/** Configure power mode */
void BMP280_setPowerMode(BMP280_t *bmp280, uint8_t mode)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 80066a8:	21f4      	movs	r1, #244	; 0xf4
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f8f6 	bl	800689c <BMP280_readRegister>
 80066b0:	4603      	mov	r3, r0
 80066b2:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11111100) | mode;
 80066b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066b8:	f023 0303 	bic.w	r3, r3, #3
 80066bc:	b25a      	sxtb	r2, r3
 80066be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	b25b      	sxtb	r3, r3
 80066c6:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
 80066ca:	461a      	mov	r2, r3
 80066cc:	21f4      	movs	r1, #244	; 0xf4
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f900 	bl	80068d4 <BMP280_writeRegister>
}
 80066d4:	bf00      	nop
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <BMP280_setStandbyTime>:

/** Configure standby time */
void BMP280_setStandbyTime(BMP280_t *bmp280, uint8_t t_sb)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 80066e8:	21f5      	movs	r1, #245	; 0xf5
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f8d6 	bl	800689c <BMP280_readRegister>
 80066f0:	4603      	mov	r3, r0
 80066f2:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b00011111) | (t_sb << 5);
 80066f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066f8:	f003 031f 	and.w	r3, r3, #31
 80066fc:	b25a      	sxtb	r2, r3
 80066fe:	78fb      	ldrb	r3, [r7, #3]
 8006700:	015b      	lsls	r3, r3, #5
 8006702:	b25b      	sxtb	r3, r3
 8006704:	4313      	orrs	r3, r2
 8006706:	b25b      	sxtb	r3, r3
 8006708:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 800670a:	7bfb      	ldrb	r3, [r7, #15]
 800670c:	461a      	mov	r2, r3
 800670e:	21f5      	movs	r1, #245	; 0xf5
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f8df 	bl	80068d4 <BMP280_writeRegister>
}
 8006716:	bf00      	nop
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <BMP280_setFilterCoefficient>:

/** Configure IIR filter */
void BMP280_setFilterCoefficient(BMP280_t *bmp280, uint8_t filter)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b084      	sub	sp, #16
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	460b      	mov	r3, r1
 8006728:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 800672a:	21f5      	movs	r1, #245	; 0xf5
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 f8b5 	bl	800689c <BMP280_readRegister>
 8006732:	4603      	mov	r3, r0
 8006734:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b11100011) | (filter << 2);
 8006736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800673a:	f023 031c 	bic.w	r3, r3, #28
 800673e:	b25a      	sxtb	r2, r3
 8006740:	78fb      	ldrb	r3, [r7, #3]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	b25b      	sxtb	r3, r3
 8006746:	4313      	orrs	r3, r2
 8006748:	b25b      	sxtb	r3, r3
 800674a:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 800674c:	7bfb      	ldrb	r3, [r7, #15]
 800674e:	461a      	mov	r2, r3
 8006750:	21f5      	movs	r1, #245	; 0xf5
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f8be 	bl	80068d4 <BMP280_writeRegister>
}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <BMP280_measure>:
/**
 * Read latest measurement from sensor and execute compensation.
 * Stores the results in measurement member variable.
 * */
void BMP280_measure(BMP280_t *bmp280)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
    uint8_t data[6];
    BMP280_readMBRegister(bmp280, BMP280_REG_DATA, data, 6);
 8006768:	f107 0208 	add.w	r2, r7, #8
 800676c:	2306      	movs	r3, #6
 800676e:	21f7      	movs	r1, #247	; 0xf7
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f8ce 	bl	8006912 <BMP280_readMBRegister>

    int32_t adc_P = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8006776:	7a3b      	ldrb	r3, [r7, #8]
 8006778:	031a      	lsls	r2, r3, #12
 800677a:	7a7b      	ldrb	r3, [r7, #9]
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	4313      	orrs	r3, r2
 8006780:	7aba      	ldrb	r2, [r7, #10]
 8006782:	0912      	lsrs	r2, r2, #4
 8006784:	b2d2      	uxtb	r2, r2
 8006786:	4313      	orrs	r3, r2
 8006788:	617b      	str	r3, [r7, #20]
    int32_t adc_T = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800678a:	7afb      	ldrb	r3, [r7, #11]
 800678c:	031a      	lsls	r2, r3, #12
 800678e:	7b3b      	ldrb	r3, [r7, #12]
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	4313      	orrs	r3, r2
 8006794:	7b7a      	ldrb	r2, [r7, #13]
 8006796:	0912      	lsrs	r2, r2, #4
 8006798:	b2d2      	uxtb	r2, r2
 800679a:	4313      	orrs	r3, r2
 800679c:	613b      	str	r3, [r7, #16]

    bmp280->measurement.temperature = (float)BMP280_compensate_temperature(bmp280, adc_T) / 100.0;
 800679e:	6939      	ldr	r1, [r7, #16]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f917 	bl	80069d4 <BMP280_compensate_temperature>
 80067a6:	ee07 0a90 	vmov	s15, r0
 80067aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067ae:	ee17 0a90 	vmov	r0, s15
 80067b2:	f7f9 fef1 	bl	8000598 <__aeabi_f2d>
 80067b6:	f04f 0200 	mov.w	r2, #0
 80067ba:	4b35      	ldr	r3, [pc, #212]	; (8006890 <BMP280_measure+0x130>)
 80067bc:	f7fa f86e 	bl	800089c <__aeabi_ddiv>
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
 80067c4:	4610      	mov	r0, r2
 80067c6:	4619      	mov	r1, r3
 80067c8:	f7fa fa36 	bl	8000c38 <__aeabi_d2f>
 80067cc:	4602      	mov	r2, r0
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	60da      	str	r2, [r3, #12]
    bmp280->measurement.pressure = (float)BMP280_compensate_pressure(bmp280, adc_P) / 256.0;
 80067d2:	6979      	ldr	r1, [r7, #20]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f953 	bl	8006a80 <BMP280_compensate_pressure>
 80067da:	ee07 0a90 	vmov	s15, r0
 80067de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e2:	ee17 0a90 	vmov	r0, s15
 80067e6:	f7f9 fed7 	bl	8000598 <__aeabi_f2d>
 80067ea:	f04f 0200 	mov.w	r2, #0
 80067ee:	4b29      	ldr	r3, [pc, #164]	; (8006894 <BMP280_measure+0x134>)
 80067f0:	f7fa f854 	bl	800089c <__aeabi_ddiv>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4610      	mov	r0, r2
 80067fa:	4619      	mov	r1, r3
 80067fc:	f7fa fa1c 	bl	8000c38 <__aeabi_d2f>
 8006800:	4602      	mov	r2, r0
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	611a      	str	r2, [r3, #16]

    if (bmp280->p_reference > 0)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	edd3 7a01 	vldr	s15, [r3, #4]
 800680c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006814:	dc00      	bgt.n	8006818 <BMP280_measure+0xb8>
    {
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
    }
}
 8006816:	e02c      	b.n	8006872 <BMP280_measure+0x112>
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	ed93 7a04 	vldr	s14, [r3, #16]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	edd3 7a01 	vldr	s15, [r3, #4]
 8006824:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006828:	ee16 0a90 	vmov	r0, s13
 800682c:	f7f9 feb4 	bl	8000598 <__aeabi_f2d>
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8006880 <BMP280_measure+0x120>
 8006838:	ec43 2b10 	vmov	d0, r2, r3
 800683c:	f010 f820 	bl	8016880 <pow>
 8006840:	ec53 2b10 	vmov	r2, r3, d0
 8006844:	f04f 0000 	mov.w	r0, #0
 8006848:	4913      	ldr	r1, [pc, #76]	; (8006898 <BMP280_measure+0x138>)
 800684a:	f7f9 fd45 	bl	80002d8 <__aeabi_dsub>
 800684e:	4602      	mov	r2, r0
 8006850:	460b      	mov	r3, r1
 8006852:	4610      	mov	r0, r2
 8006854:	4619      	mov	r1, r3
 8006856:	a30c      	add	r3, pc, #48	; (adr r3, 8006888 <BMP280_measure+0x128>)
 8006858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685c:	f7f9 fef4 	bl	8000648 <__aeabi_dmul>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	4610      	mov	r0, r2
 8006866:	4619      	mov	r1, r3
 8006868:	f7fa f9e6 	bl	8000c38 <__aeabi_d2f>
 800686c:	4602      	mov	r2, r0
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	615a      	str	r2, [r3, #20]
}
 8006872:	bf00      	nop
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	f3af 8000 	nop.w
 8006880:	1a36e2eb 	.word	0x1a36e2eb
 8006884:	3fc85bc0 	.word	0x3fc85bc0
 8006888:	00000000 	.word	0x00000000
 800688c:	4150e92d 	.word	0x4150e92d
 8006890:	40590000 	.word	0x40590000
 8006894:	40700000 	.word	0x40700000
 8006898:	3ff00000 	.word	0x3ff00000

0800689c <BMP280_readRegister>:
 * Read a register
 * @param address: Register address.
 * @return Register value.
 * */
uint8_t BMP280_readRegister(BMP280_t *bmp280, uint8_t address)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	70fb      	strb	r3, [r7, #3]
    BMP280_spiCSNlow(bmp280);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f883 	bl	80069b4 <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 80068ae:	78fb      	ldrb	r3, [r7, #3]
 80068b0:	4619      	mov	r1, r3
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f855 	bl	8006962 <BMP280_spiReadWrite>
    uint8_t value = BMP280_spiReadWrite(bmp280, 0);
 80068b8:	2100      	movs	r1, #0
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f851 	bl	8006962 <BMP280_spiReadWrite>
 80068c0:	4603      	mov	r3, r0
 80068c2:	73fb      	strb	r3, [r7, #15]
    BMP280_spiCSNhigh(bmp280);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f865 	bl	8006994 <BMP280_spiCSNhigh>
    return value;
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <BMP280_writeRegister>:
 * Write to a register
 * @param address: Register address.
 * @param value: Value to write.
 * */
void BMP280_writeRegister(BMP280_t *bmp280, uint8_t address, uint8_t value)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	460b      	mov	r3, r1
 80068de:	70fb      	strb	r3, [r7, #3]
 80068e0:	4613      	mov	r3, r2
 80068e2:	70bb      	strb	r3, [r7, #2]
    BMP280_spiCSNlow(bmp280);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f865 	bl	80069b4 <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address & BMP280_SPI_MASK_WRITE);
 80068ea:	78fb      	ldrb	r3, [r7, #3]
 80068ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f834 	bl	8006962 <BMP280_spiReadWrite>
    BMP280_spiReadWrite(bmp280, value);
 80068fa:	78bb      	ldrb	r3, [r7, #2]
 80068fc:	4619      	mov	r1, r3
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f82f 	bl	8006962 <BMP280_spiReadWrite>
    BMP280_spiCSNhigh(bmp280);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f845 	bl	8006994 <BMP280_spiCSNhigh>
}
 800690a:	bf00      	nop
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <BMP280_readMBRegister>:
 * @param address: Register address.
 * @param values: Array pointer to store values in.
 * @param length: Number of bytes to read.
 * */
void BMP280_readMBRegister(BMP280_t *bmp280, uint8_t address, uint8_t *values, uint8_t length)
{
 8006912:	b590      	push	{r4, r7, lr}
 8006914:	b085      	sub	sp, #20
 8006916:	af00      	add	r7, sp, #0
 8006918:	60f8      	str	r0, [r7, #12]
 800691a:	607a      	str	r2, [r7, #4]
 800691c:	461a      	mov	r2, r3
 800691e:	460b      	mov	r3, r1
 8006920:	72fb      	strb	r3, [r7, #11]
 8006922:	4613      	mov	r3, r2
 8006924:	72bb      	strb	r3, [r7, #10]
    BMP280_spiCSNlow(bmp280);
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f000 f844 	bl	80069b4 <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 800692c:	7afb      	ldrb	r3, [r7, #11]
 800692e:	4619      	mov	r1, r3
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f000 f816 	bl	8006962 <BMP280_spiReadWrite>
    while (length--)
 8006936:	e008      	b.n	800694a <BMP280_readMBRegister+0x38>
    {
        *values++ = BMP280_spiReadWrite(bmp280, 0);
 8006938:	687c      	ldr	r4, [r7, #4]
 800693a:	1c63      	adds	r3, r4, #1
 800693c:	607b      	str	r3, [r7, #4]
 800693e:	2100      	movs	r1, #0
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 f80e 	bl	8006962 <BMP280_spiReadWrite>
 8006946:	4603      	mov	r3, r0
 8006948:	7023      	strb	r3, [r4, #0]
    while (length--)
 800694a:	7abb      	ldrb	r3, [r7, #10]
 800694c:	1e5a      	subs	r2, r3, #1
 800694e:	72ba      	strb	r2, [r7, #10]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1f1      	bne.n	8006938 <BMP280_readMBRegister+0x26>
    }
    BMP280_spiCSNhigh(bmp280);
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 f81d 	bl	8006994 <BMP280_spiCSNhigh>
}
 800695a:	bf00      	nop
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	bd90      	pop	{r4, r7, pc}

08006962 <BMP280_spiReadWrite>:
 * SPI transmit and receive one byte simultaneously
 * @param tx_message: Transmit byte.
 * @return Received byte.
 * */
uint8_t BMP280_spiReadWrite(BMP280_t *bmp280, uint8_t tx_message)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b086      	sub	sp, #24
 8006966:	af02      	add	r7, sp, #8
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	460b      	mov	r3, r1
 800696c:	70fb      	strb	r3, [r7, #3]
    uint8_t rx_message = 255;
 800696e:	23ff      	movs	r3, #255	; 0xff
 8006970:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(bmp280->spiHandle, &tx_message, &rx_message, 1, HAL_MAX_DELAY);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6818      	ldr	r0, [r3, #0]
 8006976:	f107 020f 	add.w	r2, r7, #15
 800697a:	1cf9      	adds	r1, r7, #3
 800697c:	f04f 33ff 	mov.w	r3, #4294967295
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	2301      	movs	r3, #1
 8006984:	f004 fa8b 	bl	800ae9e <HAL_SPI_TransmitReceive>
    return rx_message;
 8006988:	7bfb      	ldrb	r3, [r7, #15]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <BMP280_spiCSNhigh>:

/** Pull chip select high (inactive) */
void BMP280_spiCSNhigh(BMP280_t *bmp280)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 800699c:	2201      	movs	r2, #1
 800699e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80069a2:	4803      	ldr	r0, [pc, #12]	; (80069b0 <BMP280_spiCSNhigh+0x1c>)
 80069a4:	f002 f8d2 	bl	8008b4c <HAL_GPIO_WritePin>
}
 80069a8:	bf00      	nop
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	40020c00 	.word	0x40020c00

080069b4 <BMP280_spiCSNlow>:

/** Pull chip select low (active) */
void BMP280_spiCSNlow(BMP280_t *bmp280)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_RESET);
 80069bc:	2200      	movs	r2, #0
 80069be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80069c2:	4803      	ldr	r0, [pc, #12]	; (80069d0 <BMP280_spiCSNlow+0x1c>)
 80069c4:	f002 f8c2 	bl	8008b4c <HAL_GPIO_WritePin>
}
 80069c8:	bf00      	nop
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	40020c00 	.word	0x40020c00

080069d4 <BMP280_compensate_temperature>:
 * Calculate sensor temperature from measurement and compensation parameters.
 * @param uncomp_temp: Raw temperature measurement.
 * @return Temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
 * */
int32_t BMP280_compensate_temperature(BMP280_t *bmp280, int32_t uncomp_temp)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
    int32_t var1, var2;
    var1 = ((((uncomp_temp / 8) - ((int32_t)bmp280->compensationParameters.dig_t1 << 1))) * ((int32_t)bmp280->compensationParameters.dig_t2)) / 2048;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	da00      	bge.n	80069e6 <BMP280_compensate_temperature+0x12>
 80069e4:	3307      	adds	r3, #7
 80069e6:	10db      	asrs	r3, r3, #3
 80069e8:	461a      	mov	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	8b1b      	ldrh	r3, [r3, #24]
 80069ee:	005b      	lsls	r3, r3, #1
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 80069f8:	fb02 f303 	mul.w	r3, r2, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	da01      	bge.n	8006a04 <BMP280_compensate_temperature+0x30>
 8006a00:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8006a04:	12db      	asrs	r3, r3, #11
 8006a06:	60fb      	str	r3, [r7, #12]
    var2 = (((((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1)) * ((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1))) / 4096) * ((int32_t)bmp280->compensationParameters.dig_t3)) / 16384;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	da00      	bge.n	8006a10 <BMP280_compensate_temperature+0x3c>
 8006a0e:	330f      	adds	r3, #15
 8006a10:	111b      	asrs	r3, r3, #4
 8006a12:	461a      	mov	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	8b1b      	ldrh	r3, [r3, #24]
 8006a18:	1ad2      	subs	r2, r2, r3
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	da00      	bge.n	8006a22 <BMP280_compensate_temperature+0x4e>
 8006a20:	330f      	adds	r3, #15
 8006a22:	111b      	asrs	r3, r3, #4
 8006a24:	4619      	mov	r1, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	8b1b      	ldrh	r3, [r3, #24]
 8006a2a:	1acb      	subs	r3, r1, r3
 8006a2c:	fb02 f303 	mul.w	r3, r2, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	da01      	bge.n	8006a38 <BMP280_compensate_temperature+0x64>
 8006a34:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006a38:	131b      	asrs	r3, r3, #12
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8006a42:	fb02 f303 	mul.w	r3, r2, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	da03      	bge.n	8006a52 <BMP280_compensate_temperature+0x7e>
 8006a4a:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8006a4e:	441a      	add	r2, r3
 8006a50:	4613      	mov	r3, r2
 8006a52:	139b      	asrs	r3, r3, #14
 8006a54:	60bb      	str	r3, [r7, #8]
    bmp280->t_fine = var1 + var2;
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	441a      	add	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	609a      	str	r2, [r3, #8]
    return (bmp280->t_fine * 5 + 128) / 256;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	689a      	ldr	r2, [r3, #8]
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	3380      	adds	r3, #128	; 0x80
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	da00      	bge.n	8006a72 <BMP280_compensate_temperature+0x9e>
 8006a70:	33ff      	adds	r3, #255	; 0xff
 8006a72:	121b      	asrs	r3, r3, #8
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <BMP280_compensate_pressure>:
 * @param uncomp_pres: Raw pressure measurement.
 * @return Pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
 * Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
 * */
uint32_t BMP280_compensate_pressure(BMP280_t *bmp280, int32_t uncomp_pres)
{
 8006a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a84:	b0d6      	sub	sp, #344	; 0x158
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 8006a8c:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
    int64_t var1, var2, p;
    var1 = ((int64_t)(bmp280->t_fine)) - 128000;
 8006a90:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	17da      	asrs	r2, r3, #31
 8006a98:	461c      	mov	r4, r3
 8006a9a:	4615      	mov	r5, r2
 8006a9c:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8006aa0:	f145 3bff 	adc.w	fp, r5, #4294967295
 8006aa4:	e9c7 ab54 	strd	sl, fp, [r7, #336]	; 0x150
    var2 = var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p6;
 8006aa8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8006aac:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006ab0:	fb03 f102 	mul.w	r1, r3, r2
 8006ab4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8006ab8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006abc:	fb02 f303 	mul.w	r3, r2, r3
 8006ac0:	18ca      	adds	r2, r1, r3
 8006ac2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006ac6:	fba3 8903 	umull	r8, r9, r3, r3
 8006aca:	eb02 0309 	add.w	r3, r2, r9
 8006ace:	4699      	mov	r9, r3
 8006ad0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006ad4:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8006ad8:	b21b      	sxth	r3, r3
 8006ada:	17da      	asrs	r2, r3, #31
 8006adc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ae0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006ae4:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8006ae8:	4603      	mov	r3, r0
 8006aea:	fb03 f209 	mul.w	r2, r3, r9
 8006aee:	460b      	mov	r3, r1
 8006af0:	fb08 f303 	mul.w	r3, r8, r3
 8006af4:	4413      	add	r3, r2
 8006af6:	4602      	mov	r2, r0
 8006af8:	fba8 1202 	umull	r1, r2, r8, r2
 8006afc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006b00:	460a      	mov	r2, r1
 8006b02:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8006b06:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b10:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8006b14:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8006b18:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + ((var1 * (int64_t)bmp280->compensationParameters.dig_p5) * 131072);
 8006b1c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006b20:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8006b24:	b21b      	sxth	r3, r3
 8006b26:	17da      	asrs	r2, r3, #31
 8006b28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b2c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8006b30:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006b34:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8006b38:	462a      	mov	r2, r5
 8006b3a:	fb02 f203 	mul.w	r2, r2, r3
 8006b3e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006b42:	4621      	mov	r1, r4
 8006b44:	fb01 f303 	mul.w	r3, r1, r3
 8006b48:	441a      	add	r2, r3
 8006b4a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006b4e:	4621      	mov	r1, r4
 8006b50:	fba3 1301 	umull	r1, r3, r3, r1
 8006b54:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8006b58:	460b      	mov	r3, r1
 8006b5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006b5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b62:	18d3      	adds	r3, r2, r3
 8006b64:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8006b68:	f04f 0000 	mov.w	r0, #0
 8006b6c:	f04f 0100 	mov.w	r1, #0
 8006b70:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 8006b74:	462b      	mov	r3, r5
 8006b76:	0459      	lsls	r1, r3, #17
 8006b78:	4623      	mov	r3, r4
 8006b7a:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8006b7e:	4623      	mov	r3, r4
 8006b80:	0458      	lsls	r0, r3, #17
 8006b82:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8006b86:	1814      	adds	r4, r2, r0
 8006b88:	67bc      	str	r4, [r7, #120]	; 0x78
 8006b8a:	414b      	adcs	r3, r1
 8006b8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b8e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006b92:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + (((int64_t)bmp280->compensationParameters.dig_p4) * 34359738368);
 8006b96:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006b9a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8006b9e:	b21b      	sxth	r3, r3
 8006ba0:	17da      	asrs	r2, r3, #31
 8006ba2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ba6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006baa:	f04f 0000 	mov.w	r0, #0
 8006bae:	f04f 0100 	mov.w	r1, #0
 8006bb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bb6:	00d9      	lsls	r1, r3, #3
 8006bb8:	2000      	movs	r0, #0
 8006bba:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8006bbe:	1814      	adds	r4, r2, r0
 8006bc0:	673c      	str	r4, [r7, #112]	; 0x70
 8006bc2:	414b      	adcs	r3, r1
 8006bc4:	677b      	str	r3, [r7, #116]	; 0x74
 8006bc6:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8006bca:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var1 = ((var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p3) / 256) + ((var1 * (int64_t)bmp280->compensationParameters.dig_p2) * 4096);
 8006bce:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8006bd2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006bd6:	fb03 f102 	mul.w	r1, r3, r2
 8006bda:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8006bde:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006be2:	fb02 f303 	mul.w	r3, r2, r3
 8006be6:	18ca      	adds	r2, r1, r3
 8006be8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006bec:	fba3 1303 	umull	r1, r3, r3, r3
 8006bf0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bfe:	18d3      	adds	r3, r2, r3
 8006c00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006c04:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006c08:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8006c0c:	b21b      	sxth	r3, r3
 8006c0e:	17da      	asrs	r2, r3, #31
 8006c10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c18:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006c22:	4642      	mov	r2, r8
 8006c24:	fb02 f203 	mul.w	r2, r2, r3
 8006c28:	464b      	mov	r3, r9
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	fb01 f303 	mul.w	r3, r1, r3
 8006c30:	4413      	add	r3, r2
 8006c32:	4622      	mov	r2, r4
 8006c34:	4641      	mov	r1, r8
 8006c36:	fba2 1201 	umull	r1, r2, r2, r1
 8006c3a:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8006c3e:	460a      	mov	r2, r1
 8006c40:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8006c44:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8006c48:	4413      	add	r3, r2
 8006c4a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006c4e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	da07      	bge.n	8006c66 <BMP280_compensate_pressure+0x1e6>
 8006c56:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8006c5a:	66b9      	str	r1, [r7, #104]	; 0x68
 8006c5c:	f143 0300 	adc.w	r3, r3, #0
 8006c60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c62:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006c66:	f04f 0000 	mov.w	r0, #0
 8006c6a:	f04f 0100 	mov.w	r1, #0
 8006c6e:	0a10      	lsrs	r0, r2, #8
 8006c70:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8006c74:	1219      	asrs	r1, r3, #8
 8006c76:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006c7a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8006c7e:	b21b      	sxth	r3, r3
 8006c80:	17da      	asrs	r2, r3, #31
 8006c82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c86:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8006c8a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006c8e:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8006c92:	464a      	mov	r2, r9
 8006c94:	fb02 f203 	mul.w	r2, r2, r3
 8006c98:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006c9c:	4644      	mov	r4, r8
 8006c9e:	fb04 f303 	mul.w	r3, r4, r3
 8006ca2:	441a      	add	r2, r3
 8006ca4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006ca8:	4644      	mov	r4, r8
 8006caa:	fba3 4304 	umull	r4, r3, r3, r4
 8006cae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006cb2:	4623      	mov	r3, r4
 8006cb4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006cb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006cbc:	18d3      	adds	r3, r2, r3
 8006cbe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006cc2:	f04f 0200 	mov.w	r2, #0
 8006cc6:	f04f 0300 	mov.w	r3, #0
 8006cca:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8006cce:	464c      	mov	r4, r9
 8006cd0:	0323      	lsls	r3, r4, #12
 8006cd2:	4644      	mov	r4, r8
 8006cd4:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8006cd8:	4644      	mov	r4, r8
 8006cda:	0322      	lsls	r2, r4, #12
 8006cdc:	1884      	adds	r4, r0, r2
 8006cde:	663c      	str	r4, [r7, #96]	; 0x60
 8006ce0:	eb41 0303 	adc.w	r3, r1, r3
 8006ce4:	667b      	str	r3, [r7, #100]	; 0x64
 8006ce6:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8006cea:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
    var1 = ((INT64_C(0x800000000000) + var1) * ((int64_t)bmp280->compensationParameters.dig_p1)) / 8589934592;
 8006cee:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8006cf2:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8006cf6:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8006cfa:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8006cfe:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006d02:	8bdb      	ldrh	r3, [r3, #30]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006d10:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8006d14:	462b      	mov	r3, r5
 8006d16:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006d1a:	4642      	mov	r2, r8
 8006d1c:	fb02 f203 	mul.w	r2, r2, r3
 8006d20:	464b      	mov	r3, r9
 8006d22:	4621      	mov	r1, r4
 8006d24:	fb01 f303 	mul.w	r3, r1, r3
 8006d28:	4413      	add	r3, r2
 8006d2a:	4622      	mov	r2, r4
 8006d2c:	4641      	mov	r1, r8
 8006d2e:	fba2 1201 	umull	r1, r2, r2, r1
 8006d32:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8006d36:	460a      	mov	r2, r1
 8006d38:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8006d3c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006d40:	4413      	add	r3, r2
 8006d42:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006d46:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	da06      	bge.n	8006d5c <BMP280_compensate_pressure+0x2dc>
 8006d4e:	1e51      	subs	r1, r2, #1
 8006d50:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d52:	f143 0301 	adc.w	r3, r3, #1
 8006d56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d58:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d5c:	f04f 0000 	mov.w	r0, #0
 8006d60:	f04f 0100 	mov.w	r1, #0
 8006d64:	1058      	asrs	r0, r3, #1
 8006d66:	17d9      	asrs	r1, r3, #31
 8006d68:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    if (var1 == 0)
 8006d6c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8006d70:	4313      	orrs	r3, r2
 8006d72:	d101      	bne.n	8006d78 <BMP280_compensate_pressure+0x2f8>
    {
        return 0;
 8006d74:	2300      	movs	r3, #0
 8006d76:	e182      	b.n	800707e <BMP280_compensate_pressure+0x5fe>
    }
    p = 1048576 - uncomp_pres;
 8006d78:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006d7c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8006d80:	17da      	asrs	r2, r3, #31
 8006d82:	653b      	str	r3, [r7, #80]	; 0x50
 8006d84:	657a      	str	r2, [r7, #84]	; 0x54
 8006d86:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8006d8a:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    p = (((((p * 2147483648U)) - var2) * 3125) / var1);
 8006d8e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8006d92:	f04f 0000 	mov.w	r0, #0
 8006d96:	f04f 0100 	mov.w	r1, #0
 8006d9a:	07d9      	lsls	r1, r3, #31
 8006d9c:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8006da0:	07d0      	lsls	r0, r2, #31
 8006da2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8006da6:	1a84      	subs	r4, r0, r2
 8006da8:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8006dac:	eb61 0303 	sbc.w	r3, r1, r3
 8006db0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006db4:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8006db8:	4622      	mov	r2, r4
 8006dba:	462b      	mov	r3, r5
 8006dbc:	1891      	adds	r1, r2, r2
 8006dbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8006dc0:	415b      	adcs	r3, r3
 8006dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006dc8:	4621      	mov	r1, r4
 8006dca:	1851      	adds	r1, r2, r1
 8006dcc:	6439      	str	r1, [r7, #64]	; 0x40
 8006dce:	4629      	mov	r1, r5
 8006dd0:	414b      	adcs	r3, r1
 8006dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	f04f 0300 	mov.w	r3, #0
 8006ddc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006de0:	4649      	mov	r1, r9
 8006de2:	018b      	lsls	r3, r1, #6
 8006de4:	4641      	mov	r1, r8
 8006de6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006dea:	4641      	mov	r1, r8
 8006dec:	018a      	lsls	r2, r1, #6
 8006dee:	4641      	mov	r1, r8
 8006df0:	1889      	adds	r1, r1, r2
 8006df2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006df4:	4649      	mov	r1, r9
 8006df6:	eb43 0101 	adc.w	r1, r3, r1
 8006dfa:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006dfc:	f04f 0200 	mov.w	r2, #0
 8006e00:	f04f 0300 	mov.w	r3, #0
 8006e04:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006e08:	4649      	mov	r1, r9
 8006e0a:	008b      	lsls	r3, r1, #2
 8006e0c:	4641      	mov	r1, r8
 8006e0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e12:	4641      	mov	r1, r8
 8006e14:	008a      	lsls	r2, r1, #2
 8006e16:	4610      	mov	r0, r2
 8006e18:	4619      	mov	r1, r3
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	4622      	mov	r2, r4
 8006e1e:	189b      	adds	r3, r3, r2
 8006e20:	633b      	str	r3, [r7, #48]	; 0x30
 8006e22:	460b      	mov	r3, r1
 8006e24:	462a      	mov	r2, r5
 8006e26:	eb42 0303 	adc.w	r3, r2, r3
 8006e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e2c:	f04f 0200 	mov.w	r2, #0
 8006e30:	f04f 0300 	mov.w	r3, #0
 8006e34:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8006e38:	4649      	mov	r1, r9
 8006e3a:	008b      	lsls	r3, r1, #2
 8006e3c:	4641      	mov	r1, r8
 8006e3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e42:	4641      	mov	r1, r8
 8006e44:	008a      	lsls	r2, r1, #2
 8006e46:	4610      	mov	r0, r2
 8006e48:	4619      	mov	r1, r3
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	4622      	mov	r2, r4
 8006e4e:	189b      	adds	r3, r3, r2
 8006e50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e54:	462b      	mov	r3, r5
 8006e56:	460a      	mov	r2, r1
 8006e58:	eb42 0303 	adc.w	r3, r2, r3
 8006e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e60:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8006e64:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006e68:	f7f9 ff36 	bl	8000cd8 <__aeabi_ldivmod>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
    var1 = (((int64_t)bmp280->compensationParameters.dig_p9) * (p / 8192) * (p / 8192)) / 33554432;
 8006e74:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006e78:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8006e7c:	b21b      	sxth	r3, r3
 8006e7e:	17da      	asrs	r2, r3, #31
 8006e80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e84:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006e88:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	da08      	bge.n	8006ea2 <BMP280_compensate_pressure+0x422>
 8006e90:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8006e94:	1851      	adds	r1, r2, r1
 8006e96:	62b9      	str	r1, [r7, #40]	; 0x28
 8006e98:	f143 0300 	adc.w	r3, r3, #0
 8006e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ea2:	f04f 0000 	mov.w	r0, #0
 8006ea6:	f04f 0100 	mov.w	r1, #0
 8006eaa:	0b50      	lsrs	r0, r2, #13
 8006eac:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8006eb0:	1359      	asrs	r1, r3, #13
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8006eba:	4629      	mov	r1, r5
 8006ebc:	fb02 f001 	mul.w	r0, r2, r1
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	fb01 f103 	mul.w	r1, r1, r3
 8006ec6:	4401      	add	r1, r0
 8006ec8:	4620      	mov	r0, r4
 8006eca:	fba0 2302 	umull	r2, r3, r0, r2
 8006ece:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006edc:	18cb      	adds	r3, r1, r3
 8006ede:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006ee2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	da08      	bge.n	8006efc <BMP280_compensate_pressure+0x47c>
 8006eea:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8006eee:	1851      	adds	r1, r2, r1
 8006ef0:	6239      	str	r1, [r7, #32]
 8006ef2:	f143 0300 	adc.w	r3, r3, #0
 8006ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ef8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006efc:	f04f 0000 	mov.w	r0, #0
 8006f00:	f04f 0100 	mov.w	r1, #0
 8006f04:	0b50      	lsrs	r0, r2, #13
 8006f06:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8006f0a:	1359      	asrs	r1, r3, #13
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8006f14:	4629      	mov	r1, r5
 8006f16:	fb02 f001 	mul.w	r0, r2, r1
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	fb01 f103 	mul.w	r1, r1, r3
 8006f20:	4401      	add	r1, r0
 8006f22:	4620      	mov	r0, r4
 8006f24:	fba0 2302 	umull	r2, r3, r0, r2
 8006f28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f36:	18cb      	adds	r3, r1, r3
 8006f38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f3c:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	da08      	bge.n	8006f56 <BMP280_compensate_pressure+0x4d6>
 8006f44:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8006f48:	1851      	adds	r1, r2, r1
 8006f4a:	61b9      	str	r1, [r7, #24]
 8006f4c:	f143 0300 	adc.w	r3, r3, #0
 8006f50:	61fb      	str	r3, [r7, #28]
 8006f52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f56:	f04f 0000 	mov.w	r0, #0
 8006f5a:	f04f 0100 	mov.w	r1, #0
 8006f5e:	0e50      	lsrs	r0, r2, #25
 8006f60:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8006f64:	1659      	asrs	r1, r3, #25
 8006f66:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    var2 = (((int64_t)bmp280->compensationParameters.dig_p8) * p) / 524288;
 8006f6a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006f6e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8006f72:	b21b      	sxth	r3, r3
 8006f74:	17da      	asrs	r2, r3, #31
 8006f76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f7a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006f7e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006f82:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8006f86:	462a      	mov	r2, r5
 8006f88:	fb02 f203 	mul.w	r2, r2, r3
 8006f8c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006f90:	4621      	mov	r1, r4
 8006f92:	fb01 f303 	mul.w	r3, r1, r3
 8006f96:	441a      	add	r2, r3
 8006f98:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	fba3 1301 	umull	r1, r3, r3, r1
 8006fa2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fb0:	18d3      	adds	r3, r2, r3
 8006fb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006fb6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8006fba:	2900      	cmp	r1, #0
 8006fbc:	da07      	bge.n	8006fce <BMP280_compensate_pressure+0x54e>
 8006fbe:	4b33      	ldr	r3, [pc, #204]	; (800708c <BMP280_compensate_pressure+0x60c>)
 8006fc0:	18c3      	adds	r3, r0, r3
 8006fc2:	613b      	str	r3, [r7, #16]
 8006fc4:	f141 0300 	adc.w	r3, r1, #0
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006fce:	f04f 0200 	mov.w	r2, #0
 8006fd2:	f04f 0300 	mov.w	r3, #0
 8006fd6:	0cc2      	lsrs	r2, r0, #19
 8006fd8:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8006fdc:	14cb      	asrs	r3, r1, #19
 8006fde:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    p = ((p + var1 + var2) / 256) + (((int64_t)bmp280->compensationParameters.dig_p7) * 16);
 8006fe2:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8006fe6:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8006fea:	1884      	adds	r4, r0, r2
 8006fec:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8006ff0:	eb41 0303 	adc.w	r3, r1, r3
 8006ff4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ff8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8006ffc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007000:	4621      	mov	r1, r4
 8007002:	1889      	adds	r1, r1, r2
 8007004:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8007008:	4629      	mov	r1, r5
 800700a:	eb43 0101 	adc.w	r1, r3, r1
 800700e:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8007012:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007016:	2b00      	cmp	r3, #0
 8007018:	da07      	bge.n	800702a <BMP280_compensate_pressure+0x5aa>
 800701a:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	f143 0300 	adc.w	r3, r3, #0
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800702a:	f04f 0000 	mov.w	r0, #0
 800702e:	f04f 0100 	mov.w	r1, #0
 8007032:	0a10      	lsrs	r0, r2, #8
 8007034:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8007038:	1219      	asrs	r1, r3, #8
 800703a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800703e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8007042:	b21b      	sxth	r3, r3
 8007044:	17da      	asrs	r2, r3, #31
 8007046:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800704a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800704e:	f04f 0200 	mov.w	r2, #0
 8007052:	f04f 0300 	mov.w	r3, #0
 8007056:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 800705a:	464c      	mov	r4, r9
 800705c:	0123      	lsls	r3, r4, #4
 800705e:	4644      	mov	r4, r8
 8007060:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8007064:	4644      	mov	r4, r8
 8007066:	0122      	lsls	r2, r4, #4
 8007068:	1884      	adds	r4, r0, r2
 800706a:	603c      	str	r4, [r7, #0]
 800706c:	eb41 0303 	adc.w	r3, r1, r3
 8007070:	607b      	str	r3, [r7, #4]
 8007072:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007076:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    return (uint32_t)p;
 800707a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
}
 800707e:	4618      	mov	r0, r3
 8007080:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8007084:	46bd      	mov	sp, r7
 8007086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800708a:	bf00      	nop
 800708c:	0007ffff 	.word	0x0007ffff

08007090 <MPU_Init>:

/// @brief Do the whole initialization of the IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_Init(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8007090:	b5b0      	push	{r4, r5, r7, lr}
 8007092:	b09c      	sub	sp, #112	; 0x70
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
	// Disable BMP280
	HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 800709a:	2201      	movs	r2, #1
 800709c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80070a0:	482c      	ldr	r0, [pc, #176]	; (8007154 <MPU_Init+0xc4>)
 80070a2:	f001 fd53 	bl	8008b4c <HAL_GPIO_WritePin>

	// Set the config parameters
	pMPU9250->settings.gFullScaleRange = GFSR_500DPS;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	pMPU9250->settings.aFullScaleRange = AFSR_2G;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	pMPU9250->settings.CS_PIN = SPI2_IMU_CSIMU_Pin;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070bc:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	pMPU9250->settings.CS_PORT = SPI2_IMU_CSIMU_GPIO_Port;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	4a24      	ldr	r2, [pc, #144]	; (8007154 <MPU_Init+0xc4>)
 80070c4:	66da      	str	r2, [r3, #108]	; 0x6c
	pMPU9250->attitude.tau = 0.98;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	4a23      	ldr	r2, [pc, #140]	; (8007158 <MPU_Init+0xc8>)
 80070ca:	651a      	str	r2, [r3, #80]	; 0x50
	pMPU9250->attitude.lastTick = 0;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	2200      	movs	r2, #0
 80070d0:	655a      	str	r2, [r3, #84]	; 0x54
	pMPU9250->attitude.dt = 0;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	f04f 0200 	mov.w	r2, #0
 80070d8:	659a      	str	r2, [r3, #88]	; 0x58

	// Check if IMU configured properly and block if it didn't
	if (MPU_begin(SPIx, pMPU9250) != true)
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f843 	bl	8007168 <MPU_begin>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d023      	beq.n	8007130 <MPU_Init+0xa0>
	{
		char str[100] = "ERROR: MPU9250 ID is wrong.";
 80070e8:	4b1c      	ldr	r3, [pc, #112]	; (800715c <MPU_Init+0xcc>)
 80070ea:	f107 040c 	add.w	r4, r7, #12
 80070ee:	461d      	mov	r5, r3
 80070f0:	6828      	ldr	r0, [r5, #0]
 80070f2:	6869      	ldr	r1, [r5, #4]
 80070f4:	68aa      	ldr	r2, [r5, #8]
 80070f6:	68eb      	ldr	r3, [r5, #12]
 80070f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070fa:	6928      	ldr	r0, [r5, #16]
 80070fc:	6969      	ldr	r1, [r5, #20]
 80070fe:	69aa      	ldr	r2, [r5, #24]
 8007100:	c407      	stmia	r4!, {r0, r1, r2}
 8007102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007106:	2248      	movs	r2, #72	; 0x48
 8007108:	2100      	movs	r1, #0
 800710a:	4618      	mov	r0, r3
 800710c:	f00b fb1f 	bl	801274e <memset>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8007110:	f107 030c 	add.w	r3, r7, #12
 8007114:	4618      	mov	r0, r3
 8007116:	f7f9 f8d3 	bl	80002c0 <strlen>
 800711a:	4603      	mov	r3, r0
 800711c:	b29a      	uxth	r2, r3
 800711e:	f107 010c 	add.w	r1, r7, #12
 8007122:	f04f 33ff 	mov.w	r3, #4294967295
 8007126:	480e      	ldr	r0, [pc, #56]	; (8007160 <MPU_Init+0xd0>)
 8007128:	f006 f900 	bl	800d32c <HAL_UART_Transmit>
		return 1;
 800712c:	2301      	movs	r3, #1
 800712e:	e00c      	b.n	800714a <MPU_Init+0xba>
	}

	// Calibrate the IMU
	HAL_UART_Transmit(&huart3, "CALIBRATING...\r\n", strlen("CALIBRATING...\r\n"), HAL_MAX_DELAY);
 8007130:	f04f 33ff 	mov.w	r3, #4294967295
 8007134:	2210      	movs	r2, #16
 8007136:	490b      	ldr	r1, [pc, #44]	; (8007164 <MPU_Init+0xd4>)
 8007138:	4809      	ldr	r0, [pc, #36]	; (8007160 <MPU_Init+0xd0>)
 800713a:	f006 f8f7 	bl	800d32c <HAL_UART_Transmit>
	MPU_calibrateGyro(SPIx, pMPU9250, 20);
 800713e:	2214      	movs	r2, #20
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f868 	bl	8007218 <MPU_calibrateGyro>

	return 0;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3770      	adds	r7, #112	; 0x70
 800714e:	46bd      	mov	sp, r7
 8007150:	bdb0      	pop	{r4, r5, r7, pc}
 8007152:	bf00      	nop
 8007154:	40020c00 	.word	0x40020c00
 8007158:	3f7ae148 	.word	0x3f7ae148
 800715c:	08017f10 	.word	0x08017f10
 8007160:	20000c14 	.word	0x20000c14
 8007164:	08017efc 	.word	0x08017efc

08007168 <MPU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af02      	add	r7, sp, #8
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
    // Initialize variables
    uint8_t check, addr, val;

    // Confirm device
    MPU_REG_READ(SPIx, pMPU9250, WHO_AM_I, &check, 1);
 8007172:	f107 030f 	add.w	r3, r7, #15
 8007176:	2201      	movs	r2, #1
 8007178:	9200      	str	r2, [sp, #0]
 800717a:	2275      	movs	r2, #117	; 0x75
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f8d4 	bl	800732c <MPU_REG_READ>
    if (check == WHO_AM_I_9250_ANS)
 8007184:	7bfb      	ldrb	r3, [r7, #15]
 8007186:	2b70      	cmp	r3, #112	; 0x70
 8007188:	d141      	bne.n	800720e <MPU_begin+0xa6>
    {
        // Startup / reset the sensor
        addr = PWR_MGMT_1;
 800718a:	236b      	movs	r3, #107	; 0x6b
 800718c:	73bb      	strb	r3, [r7, #14]
        val = 0x00;
 800718e:	2300      	movs	r3, #0
 8007190:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8007192:	f107 030d 	add.w	r3, r7, #13
 8007196:	f107 020e 	add.w	r2, r7, #14
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f8a4 	bl	80072ea <MPU_REG_WRITE>

        // Disable I2C (SPI only)
        addr = USER_CTRL;
 80071a2:	236a      	movs	r3, #106	; 0x6a
 80071a4:	73bb      	strb	r3, [r7, #14]
        val = 0x10;
 80071a6:	2310      	movs	r3, #16
 80071a8:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80071aa:	f107 030d 	add.w	r3, r7, #13
 80071ae:	f107 020e 	add.w	r2, r7, #14
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f898 	bl	80072ea <MPU_REG_WRITE>

        // Set the full scale ranges
        MPU_writeAccFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.aFullScaleRange);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80071c0:	461a      	mov	r2, r3
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f8ed 	bl	80073a4 <MPU_writeAccFullScaleRange>
        MPU_writeGyroFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.gFullScaleRange);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80071d0:	461a      	mov	r2, r3
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f94d 	bl	8007474 <MPU_writeGyroFullScaleRange>

        // Set 10 Hz LPF for Gyro in Config Register
        uint8_t addr = CONFIG;
 80071da:	231a      	movs	r3, #26
 80071dc:	733b      	strb	r3, [r7, #12]
        uint8_t val = 0x05;
 80071de:	2305      	movs	r3, #5
 80071e0:	72fb      	strb	r3, [r7, #11]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80071e2:	f107 030b 	add.w	r3, r7, #11
 80071e6:	f107 020c 	add.w	r2, r7, #12
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f87c 	bl	80072ea <MPU_REG_WRITE>

        // Set 10 Hz LPF for Accelerometer in Acc_cfg_2 Register
	    addr = ACCEL_CONFIG_2;
 80071f2:	231d      	movs	r3, #29
 80071f4:	733b      	strb	r3, [r7, #12]
	    val = 0x05;
 80071f6:	2305      	movs	r3, #5
 80071f8:	72fb      	strb	r3, [r7, #11]
	    MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80071fa:	f107 030b 	add.w	r3, r7, #11
 80071fe:	f107 020c 	add.w	r2, r7, #12
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f870 	bl	80072ea <MPU_REG_WRITE>

        return 1;
 800720a:	2301      	movs	r3, #1
 800720c:	e000      	b.n	8007210 <MPU_begin+0xa8>
    }
    else
    {
        return 0;
 800720e:	2300      	movs	r3, #0
    }
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <MPU_calibrateGyro>:
/// @brief Find offsets for each axis of gyroscope
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param numCalPoints Number of data points to average
void MPU_calibrateGyro(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint16_t numCalPoints)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	4613      	mov	r3, r2
 8007224:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 8007226:	2300      	movs	r3, #0
 8007228:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 800722a:	2300      	movs	r3, #0
 800722c:	61bb      	str	r3, [r7, #24]
    int32_t z = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	617b      	str	r3, [r7, #20]

    // Zero guard
    if (numCalPoints == 0)
 8007232:	88fb      	ldrh	r3, [r7, #6]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <MPU_calibrateGyro+0x24>
    {
        numCalPoints = 1;
 8007238:	2301      	movs	r3, #1
 800723a:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800723c:	2300      	movs	r3, #0
 800723e:	827b      	strh	r3, [r7, #18]
 8007240:	e01e      	b.n	8007280 <MPU_calibrateGyro+0x68>
    {
        MPU_readRawData(SPIx, pMPU9250);
 8007242:	68b9      	ldr	r1, [r7, #8]
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 f97f 	bl	8007548 <MPU_readRawData>
        x += pMPU9250->rawData.gx;
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007250:	461a      	mov	r2, r3
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	4413      	add	r3, r2
 8007256:	61fb      	str	r3, [r7, #28]
        y += pMPU9250->rawData.gy;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800725e:	461a      	mov	r2, r3
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	4413      	add	r3, r2
 8007264:	61bb      	str	r3, [r7, #24]
        z += pMPU9250->rawData.gz;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800726c:	461a      	mov	r2, r3
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	4413      	add	r3, r2
 8007272:	617b      	str	r3, [r7, #20]
        HAL_Delay(3);
 8007274:	2003      	movs	r0, #3
 8007276:	f000 fdbd 	bl	8007df4 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800727a:	8a7b      	ldrh	r3, [r7, #18]
 800727c:	3301      	adds	r3, #1
 800727e:	827b      	strh	r3, [r7, #18]
 8007280:	8a7a      	ldrh	r2, [r7, #18]
 8007282:	88fb      	ldrh	r3, [r7, #6]
 8007284:	429a      	cmp	r2, r3
 8007286:	d3dc      	bcc.n	8007242 <MPU_calibrateGyro+0x2a>
    }

    // Average the saved data points to find the gyroscope offset
    pMPU9250->gyroBias.x = (float)x / (float)numCalPoints;
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007292:	88fb      	ldrh	r3, [r7, #6]
 8007294:	ee07 3a90 	vmov	s15, r3
 8007298:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800729c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    pMPU9250->gyroBias.y = (float)y / (float)numCalPoints;
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	ee07 3a90 	vmov	s15, r3
 80072ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80072b0:	88fb      	ldrh	r3, [r7, #6]
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80072ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    pMPU9250->gyroBias.z = (float)z / (float)numCalPoints;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	ee07 3a90 	vmov	s15, r3
 80072ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80072ce:	88fb      	ldrh	r3, [r7, #6]
 80072d0:	ee07 3a90 	vmov	s15, r3
 80072d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80072d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
}
 80072e2:	bf00      	nop
 80072e4:	3720      	adds	r7, #32
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <MPU_REG_WRITE>:
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param pAddr Pointer to address to be written to
/// @param pVal Pointer of value to write to given address
void MPU_REG_WRITE(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t *pAddr, uint8_t *pVal)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	607a      	str	r2, [r7, #4]
 80072f6:	603b      	str	r3, [r7, #0]
    MPU_CS(pMPU9250, CS_SELECT);
 80072f8:	2100      	movs	r1, #0
 80072fa:	68b8      	ldr	r0, [r7, #8]
 80072fc:	f000 f83e 	bl	800737c <MPU_CS>
    HAL_SPI_Transmit(SPIx, pAddr, 1, SPI_TIMOUT_MS);
 8007300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007304:	2201      	movs	r2, #1
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f003 fb2a 	bl	800a962 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pVal, 1, SPI_TIMOUT_MS);
 800730e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007312:	2201      	movs	r2, #1
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f003 fb23 	bl	800a962 <HAL_SPI_Transmit>
    MPU_CS(pMPU9250, CS_DESELECT);
 800731c:	2101      	movs	r1, #1
 800731e:	68b8      	ldr	r0, [r7, #8]
 8007320:	f000 f82c 	bl	800737c <MPU_CS>
}
 8007324:	bf00      	nop
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <MPU_REG_READ>:
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param addr Address to start reading at
/// @param pRxData Pointer to data buffer
/// @param RxSize Size of data buffer
void MPU_REG_READ(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t addr, uint8_t *pRxData, uint16_t RxSize)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	603b      	str	r3, [r7, #0]
 8007338:	4613      	mov	r3, r2
 800733a:	71fb      	strb	r3, [r7, #7]
    MPU_CS(pMPU9250, CS_SELECT);
 800733c:	2100      	movs	r1, #0
 800733e:	68b8      	ldr	r0, [r7, #8]
 8007340:	f000 f81c 	bl	800737c <MPU_CS>
    uint8_t writeAddr = addr | READWRITE;
 8007344:	79fb      	ldrb	r3, [r7, #7]
 8007346:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800734a:	b2db      	uxtb	r3, r3
 800734c:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(SPIx, &writeAddr, 1, SPI_TIMOUT_MS);
 800734e:	f107 0117 	add.w	r1, r7, #23
 8007352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007356:	2201      	movs	r2, #1
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f003 fb02 	bl	800a962 <HAL_SPI_Transmit>
    HAL_SPI_Receive(SPIx, pRxData, RxSize, SPI_TIMOUT_MS);
 800735e:	8c3a      	ldrh	r2, [r7, #32]
 8007360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f003 fc69 	bl	800ac3e <HAL_SPI_Receive>
    MPU_CS(pMPU9250, CS_DESELECT);
 800736c:	2101      	movs	r1, #1
 800736e:	68b8      	ldr	r0, [r7, #8]
 8007370:	f000 f804 	bl	800737c <MPU_CS>
}
 8007374:	bf00      	nop
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <MPU_CS>:

/// @brief Set CS state to either start or end transmissions
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param state Set low to select, high to deselect
void MPU_CS(MPU9250_t *pMPU9250, uint8_t state)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(pMPU9250->settings.CS_PORT, pMPU9250->settings.CS_PIN, state);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8007392:	78fa      	ldrb	r2, [r7, #3]
 8007394:	4619      	mov	r1, r3
 8007396:	f001 fbd9 	bl	8008b4c <HAL_GPIO_WritePin>
}
 800739a:	bf00      	nop
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
	...

080073a4 <MPU_writeAccFullScaleRange>:
/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t aScale)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	4613      	mov	r3, r2
 80073b0:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = ACCEL_CONFIG;
 80073b2:	231c      	movs	r3, #28
 80073b4:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (aScale)
 80073b6:	79fb      	ldrb	r3, [r7, #7]
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d847      	bhi.n	800744c <MPU_writeAccFullScaleRange+0xa8>
 80073bc:	a201      	add	r2, pc, #4	; (adr r2, 80073c4 <MPU_writeAccFullScaleRange+0x20>)
 80073be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c2:	bf00      	nop
 80073c4:	080073d5 	.word	0x080073d5
 80073c8:	080073f3 	.word	0x080073f3
 80073cc:	08007411 	.word	0x08007411
 80073d0:	0800742f 	.word	0x0800742f
    {
    case AFSR_2G:
        pMPU9250->sensorData.aScaleFactor = 16384.0;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80073da:	615a      	str	r2, [r3, #20]
        val = 0x00;
 80073dc:	2300      	movs	r3, #0
 80073de:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80073e0:	f107 0316 	add.w	r3, r7, #22
 80073e4:	f107 0217 	add.w	r2, r7, #23
 80073e8:	68b9      	ldr	r1, [r7, #8]
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f7ff ff7d 	bl	80072ea <MPU_REG_WRITE>
        break;
 80073f0:	e03b      	b.n	800746a <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_4G:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80073f8:	615a      	str	r2, [r3, #20]
        val = 0x08;
 80073fa:	2308      	movs	r3, #8
 80073fc:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80073fe:	f107 0316 	add.w	r3, r7, #22
 8007402:	f107 0217 	add.w	r2, r7, #23
 8007406:	68b9      	ldr	r1, [r7, #8]
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f7ff ff6e 	bl	80072ea <MPU_REG_WRITE>
        break;
 800740e:	e02c      	b.n	800746a <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_8G:
        pMPU9250->sensorData.aScaleFactor = 4096.0;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8007416:	615a      	str	r2, [r3, #20]
        val = 0x10;
 8007418:	2310      	movs	r3, #16
 800741a:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800741c:	f107 0316 	add.w	r3, r7, #22
 8007420:	f107 0217 	add.w	r2, r7, #23
 8007424:	68b9      	ldr	r1, [r7, #8]
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f7ff ff5f 	bl	80072ea <MPU_REG_WRITE>
        break;
 800742c:	e01d      	b.n	800746a <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_16G:
        pMPU9250->sensorData.aScaleFactor = 2048.0;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8007434:	615a      	str	r2, [r3, #20]
        val = 0x18;
 8007436:	2318      	movs	r3, #24
 8007438:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800743a:	f107 0316 	add.w	r3, r7, #22
 800743e:	f107 0217 	add.w	r2, r7, #23
 8007442:	68b9      	ldr	r1, [r7, #8]
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f7ff ff50 	bl	80072ea <MPU_REG_WRITE>
        break;
 800744a:	e00e      	b.n	800746a <MPU_writeAccFullScaleRange+0xc6>
    default:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8007452:	615a      	str	r2, [r3, #20]
        val = 0x08;
 8007454:	2308      	movs	r3, #8
 8007456:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8007458:	f107 0316 	add.w	r3, r7, #22
 800745c:	f107 0217 	add.w	r2, r7, #23
 8007460:	68b9      	ldr	r1, [r7, #8]
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f7ff ff41 	bl	80072ea <MPU_REG_WRITE>
        break;
 8007468:	bf00      	nop
    }
}
 800746a:	bf00      	nop
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop

08007474 <MPU_writeGyroFullScaleRange>:
/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t gScale)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	4613      	mov	r3, r2
 8007480:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = GYRO_CONFIG;
 8007482:	231b      	movs	r3, #27
 8007484:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (gScale)
 8007486:	79fb      	ldrb	r3, [r7, #7]
 8007488:	2b03      	cmp	r3, #3
 800748a:	d843      	bhi.n	8007514 <MPU_writeGyroFullScaleRange+0xa0>
 800748c:	a201      	add	r2, pc, #4	; (adr r2, 8007494 <MPU_writeGyroFullScaleRange+0x20>)
 800748e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007492:	bf00      	nop
 8007494:	080074a5 	.word	0x080074a5
 8007498:	080074c1 	.word	0x080074c1
 800749c:	080074dd 	.word	0x080074dd
 80074a0:	080074f9 	.word	0x080074f9
    {
    case GFSR_250DPS:
        pMPU9250->sensorData.gScaleFactor = 131.0;
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	4a24      	ldr	r2, [pc, #144]	; (8007538 <MPU_writeGyroFullScaleRange+0xc4>)
 80074a8:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x00;
 80074aa:	2300      	movs	r3, #0
 80074ac:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80074ae:	f107 0316 	add.w	r3, r7, #22
 80074b2:	f107 0217 	add.w	r2, r7, #23
 80074b6:	68b9      	ldr	r1, [r7, #8]
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f7ff ff16 	bl	80072ea <MPU_REG_WRITE>
        break;
 80074be:	e037      	b.n	8007530 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_500DPS:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	4a1e      	ldr	r2, [pc, #120]	; (800753c <MPU_writeGyroFullScaleRange+0xc8>)
 80074c4:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x08;
 80074c6:	2308      	movs	r3, #8
 80074c8:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80074ca:	f107 0316 	add.w	r3, r7, #22
 80074ce:	f107 0217 	add.w	r2, r7, #23
 80074d2:	68b9      	ldr	r1, [r7, #8]
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f7ff ff08 	bl	80072ea <MPU_REG_WRITE>
        break;
 80074da:	e029      	b.n	8007530 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_1000DPS:
        pMPU9250->sensorData.gScaleFactor = 32.8;
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	4a18      	ldr	r2, [pc, #96]	; (8007540 <MPU_writeGyroFullScaleRange+0xcc>)
 80074e0:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x10;
 80074e2:	2310      	movs	r3, #16
 80074e4:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80074e6:	f107 0316 	add.w	r3, r7, #22
 80074ea:	f107 0217 	add.w	r2, r7, #23
 80074ee:	68b9      	ldr	r1, [r7, #8]
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f7ff fefa 	bl	80072ea <MPU_REG_WRITE>
        break;
 80074f6:	e01b      	b.n	8007530 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_2000DPS:
        pMPU9250->sensorData.gScaleFactor = 16.4;
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	4a12      	ldr	r2, [pc, #72]	; (8007544 <MPU_writeGyroFullScaleRange+0xd0>)
 80074fc:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x18;
 80074fe:	2318      	movs	r3, #24
 8007500:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8007502:	f107 0316 	add.w	r3, r7, #22
 8007506:	f107 0217 	add.w	r2, r7, #23
 800750a:	68b9      	ldr	r1, [r7, #8]
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f7ff feec 	bl	80072ea <MPU_REG_WRITE>
        break;
 8007512:	e00d      	b.n	8007530 <MPU_writeGyroFullScaleRange+0xbc>
    default:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	4a09      	ldr	r2, [pc, #36]	; (800753c <MPU_writeGyroFullScaleRange+0xc8>)
 8007518:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x08;
 800751a:	2308      	movs	r3, #8
 800751c:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800751e:	f107 0316 	add.w	r3, r7, #22
 8007522:	f107 0217 	add.w	r2, r7, #23
 8007526:	68b9      	ldr	r1, [r7, #8]
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f7ff fede 	bl	80072ea <MPU_REG_WRITE>
        break;
 800752e:	bf00      	nop
    }
}
 8007530:	bf00      	nop
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	43030000 	.word	0x43030000
 800753c:	42830000 	.word	0x42830000
 8007540:	42033333 	.word	0x42033333
 8007544:	41833333 	.word	0x41833333

08007548 <MPU_readRawData>:

/// @brief Read raw data from IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readRawData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b08e      	sub	sp, #56	; 0x38
 800754c:	af02      	add	r7, sp, #8
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
    // Init buffer
    uint8_t buf[6+2+6+24];

    // Subroutine for reading the raw data
    MPU_REG_READ(SPIx, pMPU9250, ACCEL_XOUT_H, buf, 6+2+6+24);
 8007552:	f107 0308 	add.w	r3, r7, #8
 8007556:	2226      	movs	r2, #38	; 0x26
 8007558:	9200      	str	r2, [sp, #0]
 800755a:	223b      	movs	r2, #59	; 0x3b
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff fee4 	bl	800732c <MPU_REG_READ>

    // IMPORTANT Coordinate system conversion!
    // buf[0-1] -> IC X axis -> Y Drone axis
    // buf[2-3] -> IC Y axis -> X Drone axis
    // buf[4-5] -> IC Z axis -> Z Drone axis
    pMPU9250->rawData.ay = (buf[0] << 8 | buf[1]);
 8007564:	7a3b      	ldrb	r3, [r7, #8]
 8007566:	021b      	lsls	r3, r3, #8
 8007568:	b21a      	sxth	r2, r3
 800756a:	7a7b      	ldrb	r3, [r7, #9]
 800756c:	b21b      	sxth	r3, r3
 800756e:	4313      	orrs	r3, r2
 8007570:	b21a      	sxth	r2, r3
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	805a      	strh	r2, [r3, #2]
    pMPU9250->rawData.ax = (buf[2] << 8 | buf[3]);
 8007576:	7abb      	ldrb	r3, [r7, #10]
 8007578:	021b      	lsls	r3, r3, #8
 800757a:	b21a      	sxth	r2, r3
 800757c:	7afb      	ldrb	r3, [r7, #11]
 800757e:	b21b      	sxth	r3, r3
 8007580:	4313      	orrs	r3, r2
 8007582:	b21a      	sxth	r2, r3
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	801a      	strh	r2, [r3, #0]
    pMPU9250->rawData.az = (buf[4] << 8 | buf[5]);
 8007588:	7b3b      	ldrb	r3, [r7, #12]
 800758a:	021b      	lsls	r3, r3, #8
 800758c:	b21a      	sxth	r2, r3
 800758e:	7b7b      	ldrb	r3, [r7, #13]
 8007590:	b21b      	sxth	r3, r3
 8007592:	4313      	orrs	r3, r2
 8007594:	b21a      	sxth	r2, r3
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	809a      	strh	r2, [r3, #4]

    pMPU9250->rawData.temp = buf[6] << 8 | buf[7];
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	021b      	lsls	r3, r3, #8
 800759e:	b21a      	sxth	r2, r3
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
 80075a2:	b21b      	sxth	r3, r3
 80075a4:	4313      	orrs	r3, r2
 80075a6:	b21a      	sxth	r2, r3
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	80da      	strh	r2, [r3, #6]

    // IMPORTANT Coordinate system conversion!
    // buf[ 8- 9] -> IC X axis -> -Y Drone axis
	// buf[10-11] -> IC Y axis -> -X Drone axis
	// buf[12-13] -> IC Z axis -> -Z Drone axis
    pMPU9250->rawData.gy = -(buf[8] << 8 | buf[9]);
 80075ac:	7c3b      	ldrb	r3, [r7, #16]
 80075ae:	021b      	lsls	r3, r3, #8
 80075b0:	b21a      	sxth	r2, r3
 80075b2:	7c7b      	ldrb	r3, [r7, #17]
 80075b4:	b21b      	sxth	r3, r3
 80075b6:	4313      	orrs	r3, r2
 80075b8:	b21b      	sxth	r3, r3
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	425b      	negs	r3, r3
 80075be:	b29b      	uxth	r3, r3
 80075c0:	b21a      	sxth	r2, r3
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	815a      	strh	r2, [r3, #10]
    pMPU9250->rawData.gx = -(buf[10] << 8 | buf[11]);
 80075c6:	7cbb      	ldrb	r3, [r7, #18]
 80075c8:	021b      	lsls	r3, r3, #8
 80075ca:	b21a      	sxth	r2, r3
 80075cc:	7cfb      	ldrb	r3, [r7, #19]
 80075ce:	b21b      	sxth	r3, r3
 80075d0:	4313      	orrs	r3, r2
 80075d2:	b21b      	sxth	r3, r3
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	425b      	negs	r3, r3
 80075d8:	b29b      	uxth	r3, r3
 80075da:	b21a      	sxth	r2, r3
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	811a      	strh	r2, [r3, #8]
    pMPU9250->rawData.gz = -(buf[12] << 8 | buf[13]);
 80075e0:	7d3b      	ldrb	r3, [r7, #20]
 80075e2:	021b      	lsls	r3, r3, #8
 80075e4:	b21a      	sxth	r2, r3
 80075e6:	7d7b      	ldrb	r3, [r7, #21]
 80075e8:	b21b      	sxth	r3, r3
 80075ea:	4313      	orrs	r3, r2
 80075ec:	b21b      	sxth	r3, r3
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	425b      	negs	r3, r3
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	b21a      	sxth	r2, r3
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	819a      	strh	r2, [r3, #12]

    //pMPU9250->rawData.mx = buf[14+MAGN_X_OFFS_H] << 8 | buf[14+MAGN_X_OFFS_L];
	//pMPU9250->rawData.my = buf[14+MAGN_Y_OFFS_H] << 8 | buf[14+MAGN_Y_OFFS_L];
	//pMPU9250->rawData.mz = buf[14+MAGN_Z_OFFS_H] << 8 | buf[14+MAGN_Z_OFFS_L];
}
 80075fa:	bf00      	nop
 80075fc:	3730      	adds	r7, #48	; 0x30
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	0000      	movs	r0, r0
 8007604:	0000      	movs	r0, r0
	...

08007608 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readProcessedData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
    // Get raw values from the IMU
    MPU_readRawData(SPIx, pMPU9250);
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7ff ff97 	bl	8007548 <MPU_readRawData>

    // Convert accelerometer values to g's
    pMPU9250->sensorData.ax = pMPU9250->rawData.ax / pMPU9250->sensorData.aScaleFactor;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007620:	ee07 3a90 	vmov	s15, r3
 8007624:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	ed93 7a05 	vldr	s14, [r3, #20]
 800762e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	edc3 7a06 	vstr	s15, [r3, #24]
    pMPU9250->sensorData.ay = pMPU9250->rawData.ay / pMPU9250->sensorData.aScaleFactor;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	ed93 7a05 	vldr	s14, [r3, #20]
 800764c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	edc3 7a07 	vstr	s15, [r3, #28]
    pMPU9250->sensorData.az = pMPU9250->rawData.az / pMPU9250->sensorData.aScaleFactor;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800765c:	ee07 3a90 	vmov	s15, r3
 8007660:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	ed93 7a05 	vldr	s14, [r3, #20]
 800766a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	edc3 7a08 	vstr	s15, [r3, #32]

    // Convert raw temperature data to Celsius
    pMPU9250->sensorData.temp = (pMPU9250->rawData.temp - 0) / TEMP_SENS + 21;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800767a:	4618      	mov	r0, r3
 800767c:	f7f8 ff7a 	bl	8000574 <__aeabi_i2d>
 8007680:	a336      	add	r3, pc, #216	; (adr r3, 800775c <MPU_readProcessedData+0x154>)
 8007682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007686:	f7f9 f909 	bl	800089c <__aeabi_ddiv>
 800768a:	4602      	mov	r2, r0
 800768c:	460b      	mov	r3, r1
 800768e:	4610      	mov	r0, r2
 8007690:	4619      	mov	r1, r3
 8007692:	f04f 0200 	mov.w	r2, #0
 8007696:	4b30      	ldr	r3, [pc, #192]	; (8007758 <MPU_readProcessedData+0x150>)
 8007698:	f7f8 fe20 	bl	80002dc <__adddf3>
 800769c:	4602      	mov	r2, r0
 800769e:	460b      	mov	r3, r1
 80076a0:	4610      	mov	r0, r2
 80076a2:	4619      	mov	r1, r3
 80076a4:	f7f9 fac8 	bl	8000c38 <__aeabi_d2f>
 80076a8:	4602      	mov	r2, r0
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	625a      	str	r2, [r3, #36]	; 0x24

    // Compensate for gyro bias
    pMPU9250->sensorData.gx = pMPU9250->rawData.gx - pMPU9250->gyroBias.x;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80076b4:	ee07 3a90 	vmov	s15, r3
 80076b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80076c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy = pMPU9250->rawData.gy - pMPU9250->gyroBias.y;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80076d2:	ee07 3a90 	vmov	s15, r3
 80076d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80076e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz = pMPU9250->rawData.gz - pMPU9250->gyroBias.z;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80076f0:	ee07 3a90 	vmov	s15, r3
 80076f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80076fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // Convert gyro values to deg/s
    pMPU9250->sensorData.gx /= pMPU9250->sensorData.gScaleFactor;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8007714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy /= pMPU9250->sensorData.gScaleFactor;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800772a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz /= pMPU9250->sensorData.gScaleFactor;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8007740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 800774a:	bf00      	nop
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	f3af 8000 	nop.w
 8007758:	40350000 	.word	0x40350000
 800775c:	851eb852 	.word	0x851eb852
 8007760:	4074ddeb 	.word	0x4074ddeb
 8007764:	00000000 	.word	0x00000000

08007768 <MPU_calcAttitude>:

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_calcAttitude(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8007768:	b5b0      	push	{r4, r5, r7, lr}
 800776a:	ed2d 8b02 	vpush	{d8}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
    // Read processed data
    MPU_readProcessedData(SPIx, pMPU9250);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7ff ff45 	bl	8007608 <MPU_readProcessedData>

    // Complementary filter
    float accelRoll = atan2f(pMPU9250->sensorData.ay, sqrt(pow(pMPU9250->sensorData.ax,2) + pow(pMPU9250->sensorData.az,2))) * RAD2DEG;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	ed93 8a07 	vldr	s16, [r3, #28]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	4618      	mov	r0, r3
 800778a:	f7f8 ff05 	bl	8000598 <__aeabi_f2d>
 800778e:	4602      	mov	r2, r0
 8007790:	460b      	mov	r3, r1
 8007792:	ed9f 1b89 	vldr	d1, [pc, #548]	; 80079b8 <MPU_calcAttitude+0x250>
 8007796:	ec43 2b10 	vmov	d0, r2, r3
 800779a:	f00f f871 	bl	8016880 <pow>
 800779e:	ec55 4b10 	vmov	r4, r5, d0
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7f8 fef6 	bl	8000598 <__aeabi_f2d>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	ed9f 1b81 	vldr	d1, [pc, #516]	; 80079b8 <MPU_calcAttitude+0x250>
 80077b4:	ec43 2b10 	vmov	d0, r2, r3
 80077b8:	f00f f862 	bl	8016880 <pow>
 80077bc:	ec53 2b10 	vmov	r2, r3, d0
 80077c0:	4620      	mov	r0, r4
 80077c2:	4629      	mov	r1, r5
 80077c4:	f7f8 fd8a 	bl	80002dc <__adddf3>
 80077c8:	4602      	mov	r2, r0
 80077ca:	460b      	mov	r3, r1
 80077cc:	ec43 2b17 	vmov	d7, r2, r3
 80077d0:	eeb0 0a47 	vmov.f32	s0, s14
 80077d4:	eef0 0a67 	vmov.f32	s1, s15
 80077d8:	f00f f8c2 	bl	8016960 <sqrt>
 80077dc:	ec53 2b10 	vmov	r2, r3, d0
 80077e0:	4610      	mov	r0, r2
 80077e2:	4619      	mov	r1, r3
 80077e4:	f7f9 fa28 	bl	8000c38 <__aeabi_d2f>
 80077e8:	4603      	mov	r3, r0
 80077ea:	ee00 3a90 	vmov	s1, r3
 80077ee:	eeb0 0a48 	vmov.f32	s0, s16
 80077f2:	f00f f8e1 	bl	80169b8 <atan2f>
 80077f6:	ee10 3a10 	vmov	r3, s0
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7f8 fecc 	bl	8000598 <__aeabi_f2d>
 8007800:	a370      	add	r3, pc, #448	; (adr r3, 80079c4 <MPU_calcAttitude+0x25c>)
 8007802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007806:	f7f8 ff1f 	bl	8000648 <__aeabi_dmul>
 800780a:	4602      	mov	r2, r0
 800780c:	460b      	mov	r3, r1
 800780e:	4610      	mov	r0, r2
 8007810:	4619      	mov	r1, r3
 8007812:	f7f9 fa11 	bl	8000c38 <__aeabi_d2f>
 8007816:	4603      	mov	r3, r0
 8007818:	617b      	str	r3, [r7, #20]
    float accelPitch = atan2f(-(pMPU9250->sensorData.ax), sqrt(pow(pMPU9250->sensorData.ay,2) + pow(pMPU9250->sensorData.az,2))) * RAD2DEG;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007820:	eeb1 8a67 	vneg.f32	s16, s15
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	69db      	ldr	r3, [r3, #28]
 8007828:	4618      	mov	r0, r3
 800782a:	f7f8 feb5 	bl	8000598 <__aeabi_f2d>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	ed9f 1b61 	vldr	d1, [pc, #388]	; 80079b8 <MPU_calcAttitude+0x250>
 8007836:	ec43 2b10 	vmov	d0, r2, r3
 800783a:	f00f f821 	bl	8016880 <pow>
 800783e:	ec55 4b10 	vmov	r4, r5, d0
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	4618      	mov	r0, r3
 8007848:	f7f8 fea6 	bl	8000598 <__aeabi_f2d>
 800784c:	4602      	mov	r2, r0
 800784e:	460b      	mov	r3, r1
 8007850:	ed9f 1b59 	vldr	d1, [pc, #356]	; 80079b8 <MPU_calcAttitude+0x250>
 8007854:	ec43 2b10 	vmov	d0, r2, r3
 8007858:	f00f f812 	bl	8016880 <pow>
 800785c:	ec53 2b10 	vmov	r2, r3, d0
 8007860:	4620      	mov	r0, r4
 8007862:	4629      	mov	r1, r5
 8007864:	f7f8 fd3a 	bl	80002dc <__adddf3>
 8007868:	4602      	mov	r2, r0
 800786a:	460b      	mov	r3, r1
 800786c:	ec43 2b17 	vmov	d7, r2, r3
 8007870:	eeb0 0a47 	vmov.f32	s0, s14
 8007874:	eef0 0a67 	vmov.f32	s1, s15
 8007878:	f00f f872 	bl	8016960 <sqrt>
 800787c:	ec53 2b10 	vmov	r2, r3, d0
 8007880:	4610      	mov	r0, r2
 8007882:	4619      	mov	r1, r3
 8007884:	f7f9 f9d8 	bl	8000c38 <__aeabi_d2f>
 8007888:	4603      	mov	r3, r0
 800788a:	ee00 3a90 	vmov	s1, r3
 800788e:	eeb0 0a48 	vmov.f32	s0, s16
 8007892:	f00f f891 	bl	80169b8 <atan2f>
 8007896:	ee10 3a10 	vmov	r3, s0
 800789a:	4618      	mov	r0, r3
 800789c:	f7f8 fe7c 	bl	8000598 <__aeabi_f2d>
 80078a0:	a348      	add	r3, pc, #288	; (adr r3, 80079c4 <MPU_calcAttitude+0x25c>)
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	f7f8 fecf 	bl	8000648 <__aeabi_dmul>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	4610      	mov	r0, r2
 80078b0:	4619      	mov	r1, r3
 80078b2:	f7f9 f9c1 	bl	8000c38 <__aeabi_d2f>
 80078b6:	4603      	mov	r3, r0
 80078b8:	613b      	str	r3, [r7, #16]

    // Calculating dt
    uint32_t currentTick = xTaskGetTickCount();
 80078ba:	f008 fe03 	bl	80104c4 <xTaskGetTickCount>
 80078be:	4603      	mov	r3, r0
 80078c0:	60fb      	str	r3, [r7, #12]
    if (pMPU9250->attitude.lastTick == 0 && pMPU9250->attitude.dt == 0)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d107      	bne.n	80078da <MPU_calcAttitude+0x172>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80078d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80078d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078d8:	d00e      	beq.n	80078f8 <MPU_calcAttitude+0x190>
    	{}
    else
    	pMPU9250->attitude.dt = (currentTick - pMPU9250->attitude.lastTick) / 1000.0f;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	ee07 3a90 	vmov	s15, r3
 80078e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80078ea:	eddf 6a35 	vldr	s13, [pc, #212]	; 80079c0 <MPU_calcAttitude+0x258>
 80078ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    pMPU9250->attitude.lastTick = currentTick;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	655a      	str	r2, [r3, #84]	; 0x54

    //pMPU9250->attitude.roll += (pMPU9250->sensorData.gx * pMPU9250->attitude.dt);
    pMPU9250->attitude.roll = pMPU9250->attitude.tau * (pMPU9250->attitude.roll + pMPU9250->sensorData.gx * pMPU9250->attitude.dt) + (1.0f - pMPU9250->attitude.tau) * accelRoll;
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007916:	ee66 7a27 	vmul.f32	s15, s12, s15
 800791a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800791e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007928:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800792c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007930:	edd7 7a05 	vldr	s15, [r7, #20]
 8007934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    //pMPU9250->attitude.pitch += (pMPU9250->sensorData.gy * pMPU9250->attitude.dt);
    pMPU9250->attitude.pitch = pMPU9250->attitude.tau * (pMPU9250->attitude.pitch + pMPU9250->sensorData.gy * pMPU9250->attitude.dt) + (1.0f - pMPU9250->attitude.tau) * accelPitch;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800795a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800795e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007962:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800796c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007970:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007974:	edd7 7a04 	vldr	s15, [r7, #16]
 8007978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800797c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    pMPU9250->attitude.yaw += (pMPU9250->sensorData.gz * pMPU9250->attitude.dt);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007998:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800799c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
}
 80079a6:	bf00      	nop
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	ecbd 8b02 	vpop	{d8}
 80079b0:	bdb0      	pop	{r4, r5, r7, pc}
 80079b2:	bf00      	nop
 80079b4:	f3af 8000 	nop.w
 80079b8:	00000000 	.word	0x00000000
 80079bc:	40000000 	.word	0x40000000
 80079c0:	447a0000 	.word	0x447a0000
 80079c4:	1a63cbb0 	.word	0x1a63cbb0
 80079c8:	404ca5dc 	.word	0x404ca5dc

080079cc <HCSR04_Init>:
#include "HCSR04/HCSR04.h"

extern osSemaphoreId DistSemaphoreHandle;

uint8_t HCSR04_Init(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
	pHCSR04->TRIG_GPIO = DIS_TRIG_OUT_GPIO_Port;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a21      	ldr	r2, [pc, #132]	; (8007a60 <HCSR04_Init+0x94>)
 80079da:	601a      	str	r2, [r3, #0]
	pHCSR04->TRIG_PIN = DIS_TRIG_OUT_Pin;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80079e2:	809a      	strh	r2, [r3, #4]
	pHCSR04->TIM_Instance = TIM3;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a1f      	ldr	r2, [pc, #124]	; (8007a64 <HCSR04_Init+0x98>)
 80079e8:	609a      	str	r2, [r3, #8]
	pHCSR04->IC_TIM_CH = TIM_CHANNEL_1;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	60da      	str	r2, [r3, #12]
	pHCSR04->TIM_CLK_MHz = 108;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	226c      	movs	r2, #108	; 0x6c
 80079f4:	611a      	str	r2, [r3, #16]
	pHCSR04->Triggered = false;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	751a      	strb	r2, [r3, #20]

	if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_1)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d104      	bne.n	8007a0e <HCSR04_Init+0x42>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8007a0c:	e019      	b.n	8007a42 <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_2)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	2b04      	cmp	r3, #4
 8007a14:	d104      	bne.n	8007a20 <HCSR04_Init+0x54>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2202      	movs	r2, #2
 8007a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8007a1e:	e010      	b.n	8007a42 <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_3)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	2b08      	cmp	r3, #8
 8007a26:	d104      	bne.n	8007a32 <HCSR04_Init+0x66>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2204      	movs	r2, #4
 8007a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8007a30:	e007      	b.n	8007a42 <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_4)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	2b0c      	cmp	r3, #12
 8007a38:	d103      	bne.n	8007a42 <HCSR04_Init+0x76>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2208      	movs	r2, #8
 8007a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(htim);
 8007a42:	6838      	ldr	r0, [r7, #0]
 8007a44:	f003 fe9a 	bl	800b77c <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(htim, pHCSR04->IC_TIM_CH);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6838      	ldr	r0, [r7, #0]
 8007a50:	f004 f8c0 	bl	800bbd4 <HAL_TIM_IC_Start_IT>

	return 0;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	40020c00 	.word	0x40020c00
 8007a64:	40000400 	.word	0x40000400

08007a68 <HCSR04_TMR_IC_ISR>:
	}
}


void HCSR04_TMR_IC_ISR(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
	uint32_t PS = 0;
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]

	if((htim->Instance == pHCSR04->TIM_Instance) && (htim->Channel == pHCSR04->ACTIV_CH))
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	f040 812e 	bne.w	8007ce0 <HCSR04_TMR_IC_ISR+0x278>
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	7f1a      	ldrb	r2, [r3, #28]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	f040 8126 	bne.w	8007ce0 <HCSR04_TMR_IC_ISR+0x278>
	{
		if (pHCSR04->EDGE_STATE == 0)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	7d5b      	ldrb	r3, [r3, #21]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d16d      	bne.n	8007b78 <HCSR04_TMR_IC_ISR+0x110>
		{
			// Capture T1 & Reverse The ICU Edge Polarity
			pHCSR04->T1 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6838      	ldr	r0, [r7, #0]
 8007aa4:	f004 fd80 	bl	800c5a8 <HAL_TIM_ReadCapturedValue>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	621a      	str	r2, [r3, #32]
			pHCSR04->EDGE_STATE = 1;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d108      	bne.n	8007ace <HCSR04_TMR_IC_ISR+0x66>
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6a1a      	ldr	r2, [r3, #32]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f022 020a 	bic.w	r2, r2, #10
 8007aca:	621a      	str	r2, [r3, #32]
 8007acc:	e021      	b.n	8007b12 <HCSR04_TMR_IC_ISR+0xaa>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	2b04      	cmp	r3, #4
 8007ad4:	d108      	bne.n	8007ae8 <HCSR04_TMR_IC_ISR+0x80>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	6812      	ldr	r2, [r2, #0]
 8007ae0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ae4:	6213      	str	r3, [r2, #32]
 8007ae6:	e014      	b.n	8007b12 <HCSR04_TMR_IC_ISR+0xaa>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	2b08      	cmp	r3, #8
 8007aee:	d108      	bne.n	8007b02 <HCSR04_TMR_IC_ISR+0x9a>
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	6812      	ldr	r2, [r2, #0]
 8007afa:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007afe:	6213      	str	r3, [r2, #32]
 8007b00:	e007      	b.n	8007b12 <HCSR04_TMR_IC_ISR+0xaa>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6a1b      	ldr	r3, [r3, #32]
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	6812      	ldr	r2, [r2, #0]
 8007b0c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007b10:	6213      	str	r3, [r2, #32]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d108      	bne.n	8007b2c <HCSR04_TMR_IC_ISR+0xc4>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6a1a      	ldr	r2, [r3, #32]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f042 0202 	orr.w	r2, r2, #2
 8007b28:	621a      	str	r2, [r3, #32]
 8007b2a:	e021      	b.n	8007b70 <HCSR04_TMR_IC_ISR+0x108>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d108      	bne.n	8007b46 <HCSR04_TMR_IC_ISR+0xde>
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	6812      	ldr	r2, [r2, #0]
 8007b3e:	f043 0320 	orr.w	r3, r3, #32
 8007b42:	6213      	str	r3, [r2, #32]
 8007b44:	e014      	b.n	8007b70 <HCSR04_TMR_IC_ISR+0x108>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	2b08      	cmp	r3, #8
 8007b4c:	d108      	bne.n	8007b60 <HCSR04_TMR_IC_ISR+0xf8>
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	6812      	ldr	r2, [r2, #0]
 8007b58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b5c:	6213      	str	r3, [r2, #32]
 8007b5e:	e007      	b.n	8007b70 <HCSR04_TMR_IC_ISR+0x108>
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	6812      	ldr	r2, [r2, #0]
 8007b6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007b6e:	6213      	str	r3, [r2, #32]
			pHCSR04->TMR_OVC = 0;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	82da      	strh	r2, [r3, #22]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);

			osSemaphoreRelease(DistSemaphoreHandle);
		}
	}
}
 8007b76:	e0b3      	b.n	8007ce0 <HCSR04_TMR_IC_ISR+0x278>
		else if (pHCSR04->EDGE_STATE == 1)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	7d5b      	ldrb	r3, [r3, #21]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	f040 80af 	bne.w	8007ce0 <HCSR04_TMR_IC_ISR+0x278>
			PS = pHCSR04->TIM_Instance->PSC;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b88:	60fb      	str	r3, [r7, #12]
			pHCSR04->TMR_ARR = pHCSR04->TIM_Instance->ARR;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	61da      	str	r2, [r3, #28]
			pHCSR04->T2 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6838      	ldr	r0, [r7, #0]
 8007b9c:	f004 fd04 	bl	800c5a8 <HAL_TIM_ReadCapturedValue>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	625a      	str	r2, [r3, #36]	; 0x24
			if (pHCSR04->T1 < pHCSR04->T2)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a1a      	ldr	r2, [r3, #32]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d207      	bcs.n	8007bc2 <HCSR04_TMR_IC_ISR+0x15a>
				pHCSR04->DIFF = pHCSR04->T2 - pHCSR04->T1;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	1ad2      	subs	r2, r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	629a      	str	r2, [r3, #40]	; 0x28
 8007bc0:	e00f      	b.n	8007be2 <HCSR04_TMR_IC_ISR+0x17a>
			else if (pHCSR04->T2 < pHCSR04->T1)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d209      	bcs.n	8007be2 <HCSR04_TMR_IC_ISR+0x17a>
				pHCSR04->DIFF = (pHCSR04->T2 + 65535) - pHCSR04->T1;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a1b      	ldr	r3, [r3, #32]
 8007bd6:	1ad2      	subs	r2, r2, r3
 8007bd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007bdc:	4413      	add	r3, r2
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	6293      	str	r3, [r2, #40]	; 0x28
			pHCSR04->DISTANCE = ((pHCSR04->DIFF / 1000.0f) * 340.0f / 2.0f) / (pHCSR04->TIM_CLK_MHz/(PS+1));
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be6:	ee07 3a90 	vmov	s15, r3
 8007bea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007bee:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8007ce8 <HCSR04_TMR_IC_ISR+0x280>
 8007bf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007bf6:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8007cec <HCSR04_TMR_IC_ISR+0x284>
 8007bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007bfe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007c02:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691a      	ldr	r2, [r3, #16]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c12:	ee07 3a90 	vmov	s15, r3
 8007c16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			pHCSR04->EDGE_STATE = 0;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d108      	bne.n	8007c44 <HCSR04_TMR_IC_ISR+0x1dc>
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6a1a      	ldr	r2, [r3, #32]
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f022 020a 	bic.w	r2, r2, #10
 8007c40:	621a      	str	r2, [r3, #32]
 8007c42:	e021      	b.n	8007c88 <HCSR04_TMR_IC_ISR+0x220>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	2b04      	cmp	r3, #4
 8007c4a:	d108      	bne.n	8007c5e <HCSR04_TMR_IC_ISR+0x1f6>
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	6812      	ldr	r2, [r2, #0]
 8007c56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c5a:	6213      	str	r3, [r2, #32]
 8007c5c:	e014      	b.n	8007c88 <HCSR04_TMR_IC_ISR+0x220>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	2b08      	cmp	r3, #8
 8007c64:	d108      	bne.n	8007c78 <HCSR04_TMR_IC_ISR+0x210>
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6a1b      	ldr	r3, [r3, #32]
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	6812      	ldr	r2, [r2, #0]
 8007c70:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007c74:	6213      	str	r3, [r2, #32]
 8007c76:	e007      	b.n	8007c88 <HCSR04_TMR_IC_ISR+0x220>
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	6812      	ldr	r2, [r2, #0]
 8007c82:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007c86:	6213      	str	r3, [r2, #32]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d106      	bne.n	8007c9e <HCSR04_TMR_IC_ISR+0x236>
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6a12      	ldr	r2, [r2, #32]
 8007c9a:	621a      	str	r2, [r3, #32]
 8007c9c:	e01b      	b.n	8007cd6 <HCSR04_TMR_IC_ISR+0x26e>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	2b04      	cmp	r3, #4
 8007ca4:	d106      	bne.n	8007cb4 <HCSR04_TMR_IC_ISR+0x24c>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	6812      	ldr	r2, [r2, #0]
 8007cae:	6a1b      	ldr	r3, [r3, #32]
 8007cb0:	6213      	str	r3, [r2, #32]
 8007cb2:	e010      	b.n	8007cd6 <HCSR04_TMR_IC_ISR+0x26e>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	2b08      	cmp	r3, #8
 8007cba:	d106      	bne.n	8007cca <HCSR04_TMR_IC_ISR+0x262>
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	683a      	ldr	r2, [r7, #0]
 8007cc2:	6812      	ldr	r2, [r2, #0]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	6213      	str	r3, [r2, #32]
 8007cc8:	e005      	b.n	8007cd6 <HCSR04_TMR_IC_ISR+0x26e>
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	6812      	ldr	r2, [r2, #0]
 8007cd2:	6a1b      	ldr	r3, [r3, #32]
 8007cd4:	6213      	str	r3, [r2, #32]
			osSemaphoreRelease(DistSemaphoreHandle);
 8007cd6:	4b06      	ldr	r3, [pc, #24]	; (8007cf0 <HCSR04_TMR_IC_ISR+0x288>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f007 f95e 	bl	800ef9c <osSemaphoreRelease>
}
 8007ce0:	bf00      	nop
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	447a0000 	.word	0x447a0000
 8007cec:	43aa0000 	.word	0x43aa0000
 8007cf0:	20000d34 	.word	0x20000d34

08007cf4 <HCSR04_Trigger>:

void HCSR04_Trigger(HCSR04_t* pHCSR04)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_SET);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	889b      	ldrh	r3, [r3, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	4619      	mov	r1, r3
 8007d08:	f000 ff20 	bl	8008b4c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8007d0c:	2001      	movs	r0, #1
 8007d0e:	f000 f871 	bl	8007df4 <HAL_Delay>
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_RESET);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6818      	ldr	r0, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	889b      	ldrh	r3, [r3, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	f000 ff15 	bl	8008b4c <HAL_GPIO_WritePin>
}
 8007d22:	bf00      	nop
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <HCSR04_Read>:

float HCSR04_Read(HCSR04_t* pHCSR04)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b083      	sub	sp, #12
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
	return pHCSR04->DISTANCE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d36:	ee07 3a90 	vmov	s15, r3
}
 8007d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8007d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007d80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007d4c:	480d      	ldr	r0, [pc, #52]	; (8007d84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007d4e:	490e      	ldr	r1, [pc, #56]	; (8007d88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007d50:	4a0e      	ldr	r2, [pc, #56]	; (8007d8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007d54:	e002      	b.n	8007d5c <LoopCopyDataInit>

08007d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007d5a:	3304      	adds	r3, #4

08007d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007d60:	d3f9      	bcc.n	8007d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007d62:	4a0b      	ldr	r2, [pc, #44]	; (8007d90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007d64:	4c0b      	ldr	r4, [pc, #44]	; (8007d94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007d68:	e001      	b.n	8007d6e <LoopFillZerobss>

08007d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007d6c:	3204      	adds	r2, #4

08007d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007d70:	d3fb      	bcc.n	8007d6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007d72:	f7fd fff7 	bl	8005d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007d76:	f00a fdab 	bl	80128d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007d7a:	f7fb f941 	bl	8003000 <main>
  bx  lr    
 8007d7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007d80:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8007d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007d88:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8007d8c:	08018470 	.word	0x08018470
  ldr r2, =_sbss
 8007d90:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8007d94:	2000902c 	.word	0x2000902c

08007d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007d98:	e7fe      	b.n	8007d98 <ADC_IRQHandler>

08007d9a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d9e:	2003      	movs	r0, #3
 8007da0:	f000 f8f9 	bl	8007f96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007da4:	200f      	movs	r0, #15
 8007da6:	f7fd fe55 	bl	8005a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007daa:	f7fd fb83 	bl	80054b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007db4:	b480      	push	{r7}
 8007db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007db8:	4b06      	ldr	r3, [pc, #24]	; (8007dd4 <HAL_IncTick+0x20>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	4b06      	ldr	r3, [pc, #24]	; (8007dd8 <HAL_IncTick+0x24>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	4a04      	ldr	r2, [pc, #16]	; (8007dd8 <HAL_IncTick+0x24>)
 8007dc6:	6013      	str	r3, [r2, #0]
}
 8007dc8:	bf00      	nop
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	20000010 	.word	0x20000010
 8007dd8:	20000d90 	.word	0x20000d90

08007ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	af00      	add	r7, sp, #0
  return uwTick;
 8007de0:	4b03      	ldr	r3, [pc, #12]	; (8007df0 <HAL_GetTick+0x14>)
 8007de2:	681b      	ldr	r3, [r3, #0]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	20000d90 	.word	0x20000d90

08007df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007dfc:	f7ff ffee 	bl	8007ddc <HAL_GetTick>
 8007e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0c:	d005      	beq.n	8007e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007e0e:	4b0a      	ldr	r3, [pc, #40]	; (8007e38 <HAL_Delay+0x44>)
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	461a      	mov	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	4413      	add	r3, r2
 8007e18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007e1a:	bf00      	nop
 8007e1c:	f7ff ffde 	bl	8007ddc <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d8f7      	bhi.n	8007e1c <HAL_Delay+0x28>
  {
  }
}
 8007e2c:	bf00      	nop
 8007e2e:	bf00      	nop
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	20000010 	.word	0x20000010

08007e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f003 0307 	and.w	r3, r3, #7
 8007e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e4c:	4b0b      	ldr	r3, [pc, #44]	; (8007e7c <__NVIC_SetPriorityGrouping+0x40>)
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e58:	4013      	ands	r3, r2
 8007e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007e64:	4b06      	ldr	r3, [pc, #24]	; (8007e80 <__NVIC_SetPriorityGrouping+0x44>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e6a:	4a04      	ldr	r2, [pc, #16]	; (8007e7c <__NVIC_SetPriorityGrouping+0x40>)
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	60d3      	str	r3, [r2, #12]
}
 8007e70:	bf00      	nop
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	e000ed00 	.word	0xe000ed00
 8007e80:	05fa0000 	.word	0x05fa0000

08007e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e84:	b480      	push	{r7}
 8007e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e88:	4b04      	ldr	r3, [pc, #16]	; (8007e9c <__NVIC_GetPriorityGrouping+0x18>)
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	0a1b      	lsrs	r3, r3, #8
 8007e8e:	f003 0307 	and.w	r3, r3, #7
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	e000ed00 	.word	0xe000ed00

08007ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	db0b      	blt.n	8007eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	f003 021f 	and.w	r2, r3, #31
 8007eb8:	4907      	ldr	r1, [pc, #28]	; (8007ed8 <__NVIC_EnableIRQ+0x38>)
 8007eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ebe:	095b      	lsrs	r3, r3, #5
 8007ec0:	2001      	movs	r0, #1
 8007ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8007ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007eca:	bf00      	nop
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	e000e100 	.word	0xe000e100

08007edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	6039      	str	r1, [r7, #0]
 8007ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	db0a      	blt.n	8007f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	490c      	ldr	r1, [pc, #48]	; (8007f28 <__NVIC_SetPriority+0x4c>)
 8007ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007efa:	0112      	lsls	r2, r2, #4
 8007efc:	b2d2      	uxtb	r2, r2
 8007efe:	440b      	add	r3, r1
 8007f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007f04:	e00a      	b.n	8007f1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	4908      	ldr	r1, [pc, #32]	; (8007f2c <__NVIC_SetPriority+0x50>)
 8007f0c:	79fb      	ldrb	r3, [r7, #7]
 8007f0e:	f003 030f 	and.w	r3, r3, #15
 8007f12:	3b04      	subs	r3, #4
 8007f14:	0112      	lsls	r2, r2, #4
 8007f16:	b2d2      	uxtb	r2, r2
 8007f18:	440b      	add	r3, r1
 8007f1a:	761a      	strb	r2, [r3, #24]
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	e000e100 	.word	0xe000e100
 8007f2c:	e000ed00 	.word	0xe000ed00

08007f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b089      	sub	sp, #36	; 0x24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f003 0307 	and.w	r3, r3, #7
 8007f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	f1c3 0307 	rsb	r3, r3, #7
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	bf28      	it	cs
 8007f4e:	2304      	movcs	r3, #4
 8007f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	3304      	adds	r3, #4
 8007f56:	2b06      	cmp	r3, #6
 8007f58:	d902      	bls.n	8007f60 <NVIC_EncodePriority+0x30>
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	3b03      	subs	r3, #3
 8007f5e:	e000      	b.n	8007f62 <NVIC_EncodePriority+0x32>
 8007f60:	2300      	movs	r3, #0
 8007f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f64:	f04f 32ff 	mov.w	r2, #4294967295
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6e:	43da      	mvns	r2, r3
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	401a      	ands	r2, r3
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f78:	f04f 31ff 	mov.w	r1, #4294967295
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f82:	43d9      	mvns	r1, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f88:	4313      	orrs	r3, r2
         );
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3724      	adds	r7, #36	; 0x24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b082      	sub	sp, #8
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7ff ff4c 	bl	8007e3c <__NVIC_SetPriorityGrouping>
}
 8007fa4:	bf00      	nop
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007fbe:	f7ff ff61 	bl	8007e84 <__NVIC_GetPriorityGrouping>
 8007fc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	68b9      	ldr	r1, [r7, #8]
 8007fc8:	6978      	ldr	r0, [r7, #20]
 8007fca:	f7ff ffb1 	bl	8007f30 <NVIC_EncodePriority>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7ff ff80 	bl	8007edc <__NVIC_SetPriority>
}
 8007fdc:	bf00      	nop
 8007fde:	3718      	adds	r7, #24
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	4603      	mov	r3, r0
 8007fec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7ff ff54 	bl	8007ea0 <__NVIC_EnableIRQ>
}
 8007ff8:	bf00      	nop
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800800c:	f7ff fee6 	bl	8007ddc <HAL_GetTick>
 8008010:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e099      	b.n	8008150 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f022 0201 	bic.w	r2, r2, #1
 800803a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800803c:	e00f      	b.n	800805e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800803e:	f7ff fecd 	bl	8007ddc <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	2b05      	cmp	r3, #5
 800804a:	d908      	bls.n	800805e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2220      	movs	r2, #32
 8008050:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2203      	movs	r2, #3
 8008056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e078      	b.n	8008150 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1e8      	bne.n	800803e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008074:	697a      	ldr	r2, [r7, #20]
 8008076:	4b38      	ldr	r3, [pc, #224]	; (8008158 <HAL_DMA_Init+0x158>)
 8008078:	4013      	ands	r3, r2
 800807a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800808a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008096:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a1b      	ldr	r3, [r3, #32]
 80080a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	2b04      	cmp	r3, #4
 80080b6:	d107      	bne.n	80080c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c0:	4313      	orrs	r3, r2
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	f023 0307 	bic.w	r3, r3, #7
 80080de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e4:	697a      	ldr	r2, [r7, #20]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ee:	2b04      	cmp	r3, #4
 80080f0:	d117      	bne.n	8008122 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00e      	beq.n	8008122 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fb09 	bl	800871c <DMA_CheckFifoParam>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d008      	beq.n	8008122 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2240      	movs	r2, #64	; 0x40
 8008114:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800811e:	2301      	movs	r3, #1
 8008120:	e016      	b.n	8008150 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fac0 	bl	80086b0 <DMA_CalcBaseAndBitshift>
 8008130:	4603      	mov	r3, r0
 8008132:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008138:	223f      	movs	r2, #63	; 0x3f
 800813a:	409a      	lsls	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3718      	adds	r7, #24
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	e010803f 	.word	0xe010803f

0800815c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800816a:	2300      	movs	r3, #0
 800816c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008172:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800817a:	2b01      	cmp	r3, #1
 800817c:	d101      	bne.n	8008182 <HAL_DMA_Start_IT+0x26>
 800817e:	2302      	movs	r3, #2
 8008180:	e048      	b.n	8008214 <HAL_DMA_Start_IT+0xb8>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b01      	cmp	r3, #1
 8008194:	d137      	bne.n	8008206 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2202      	movs	r2, #2
 800819a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	68b9      	ldr	r1, [r7, #8]
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f000 fa52 	bl	8008654 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b4:	223f      	movs	r2, #63	; 0x3f
 80081b6:	409a      	lsls	r2, r3
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f042 0216 	orr.w	r2, r2, #22
 80081ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	695a      	ldr	r2, [r3, #20]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80081da:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d007      	beq.n	80081f4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f042 0208 	orr.w	r2, r2, #8
 80081f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f042 0201 	orr.w	r2, r2, #1
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	e005      	b.n	8008212 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800820e:	2302      	movs	r3, #2
 8008210:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008212:	7dfb      	ldrb	r3, [r7, #23]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3718      	adds	r7, #24
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008228:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800822a:	f7ff fdd7 	bl	8007ddc <HAL_GetTick>
 800822e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b02      	cmp	r3, #2
 800823a:	d008      	beq.n	800824e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2280      	movs	r2, #128	; 0x80
 8008240:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e052      	b.n	80082f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f022 0216 	bic.w	r2, r2, #22
 800825c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	695a      	ldr	r2, [r3, #20]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800826c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008272:	2b00      	cmp	r3, #0
 8008274:	d103      	bne.n	800827e <HAL_DMA_Abort+0x62>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800827a:	2b00      	cmp	r3, #0
 800827c:	d007      	beq.n	800828e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 0208 	bic.w	r2, r2, #8
 800828c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 0201 	bic.w	r2, r2, #1
 800829c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800829e:	e013      	b.n	80082c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80082a0:	f7ff fd9c 	bl	8007ddc <HAL_GetTick>
 80082a4:	4602      	mov	r2, r0
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	2b05      	cmp	r3, #5
 80082ac:	d90c      	bls.n	80082c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2220      	movs	r2, #32
 80082b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2203      	movs	r2, #3
 80082b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e015      	b.n	80082f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1e4      	bne.n	80082a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082da:	223f      	movs	r2, #63	; 0x3f
 80082dc:	409a      	lsls	r2, r3
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b02      	cmp	r3, #2
 800830e:	d004      	beq.n	800831a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2280      	movs	r2, #128	; 0x80
 8008314:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e00c      	b.n	8008334 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2205      	movs	r2, #5
 800831e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f022 0201 	bic.w	r2, r2, #1
 8008330:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800834c:	4b8e      	ldr	r3, [pc, #568]	; (8008588 <HAL_DMA_IRQHandler+0x248>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a8e      	ldr	r2, [pc, #568]	; (800858c <HAL_DMA_IRQHandler+0x24c>)
 8008352:	fba2 2303 	umull	r2, r3, r2, r3
 8008356:	0a9b      	lsrs	r3, r3, #10
 8008358:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800835e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800836a:	2208      	movs	r2, #8
 800836c:	409a      	lsls	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	4013      	ands	r3, r2
 8008372:	2b00      	cmp	r3, #0
 8008374:	d01a      	beq.n	80083ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0304 	and.w	r3, r3, #4
 8008380:	2b00      	cmp	r3, #0
 8008382:	d013      	beq.n	80083ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f022 0204 	bic.w	r2, r2, #4
 8008392:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008398:	2208      	movs	r2, #8
 800839a:	409a      	lsls	r2, r3
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083a4:	f043 0201 	orr.w	r2, r3, #1
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b0:	2201      	movs	r2, #1
 80083b2:	409a      	lsls	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	4013      	ands	r3, r2
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d012      	beq.n	80083e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00b      	beq.n	80083e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ce:	2201      	movs	r2, #1
 80083d0:	409a      	lsls	r2, r3
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083da:	f043 0202 	orr.w	r2, r3, #2
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083e6:	2204      	movs	r2, #4
 80083e8:	409a      	lsls	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	4013      	ands	r3, r2
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d012      	beq.n	8008418 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0302 	and.w	r3, r3, #2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00b      	beq.n	8008418 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008404:	2204      	movs	r2, #4
 8008406:	409a      	lsls	r2, r3
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008410:	f043 0204 	orr.w	r2, r3, #4
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800841c:	2210      	movs	r2, #16
 800841e:	409a      	lsls	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	4013      	ands	r3, r2
 8008424:	2b00      	cmp	r3, #0
 8008426:	d043      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0308 	and.w	r3, r3, #8
 8008432:	2b00      	cmp	r3, #0
 8008434:	d03c      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800843a:	2210      	movs	r2, #16
 800843c:	409a      	lsls	r2, r3
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d018      	beq.n	8008482 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800845a:	2b00      	cmp	r3, #0
 800845c:	d108      	bne.n	8008470 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008462:	2b00      	cmp	r3, #0
 8008464:	d024      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	4798      	blx	r3
 800846e:	e01f      	b.n	80084b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008474:	2b00      	cmp	r3, #0
 8008476:	d01b      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	4798      	blx	r3
 8008480:	e016      	b.n	80084b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800848c:	2b00      	cmp	r3, #0
 800848e:	d107      	bne.n	80084a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 0208 	bic.w	r2, r2, #8
 800849e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084b4:	2220      	movs	r2, #32
 80084b6:	409a      	lsls	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4013      	ands	r3, r2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 808f 	beq.w	80085e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0310 	and.w	r3, r3, #16
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 8087 	beq.w	80085e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084d6:	2220      	movs	r2, #32
 80084d8:	409a      	lsls	r2, r3
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b05      	cmp	r3, #5
 80084e8:	d136      	bne.n	8008558 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 0216 	bic.w	r2, r2, #22
 80084f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	695a      	ldr	r2, [r3, #20]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008508:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850e:	2b00      	cmp	r3, #0
 8008510:	d103      	bne.n	800851a <HAL_DMA_IRQHandler+0x1da>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008516:	2b00      	cmp	r3, #0
 8008518:	d007      	beq.n	800852a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f022 0208 	bic.w	r2, r2, #8
 8008528:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800852e:	223f      	movs	r2, #63	; 0x3f
 8008530:	409a      	lsls	r2, r3
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800854a:	2b00      	cmp	r3, #0
 800854c:	d07e      	beq.n	800864c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	4798      	blx	r3
        }
        return;
 8008556:	e079      	b.n	800864c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008562:	2b00      	cmp	r3, #0
 8008564:	d01d      	beq.n	80085a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10d      	bne.n	8008590 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008578:	2b00      	cmp	r3, #0
 800857a:	d031      	beq.n	80085e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	4798      	blx	r3
 8008584:	e02c      	b.n	80085e0 <HAL_DMA_IRQHandler+0x2a0>
 8008586:	bf00      	nop
 8008588:	20000008 	.word	0x20000008
 800858c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008594:	2b00      	cmp	r3, #0
 8008596:	d023      	beq.n	80085e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	4798      	blx	r3
 80085a0:	e01e      	b.n	80085e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10f      	bne.n	80085d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f022 0210 	bic.w	r2, r2, #16
 80085be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d003      	beq.n	80085e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d032      	beq.n	800864e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ec:	f003 0301 	and.w	r3, r3, #1
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d022      	beq.n	800863a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2205      	movs	r2, #5
 80085f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f022 0201 	bic.w	r2, r2, #1
 800860a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	3301      	adds	r3, #1
 8008610:	60bb      	str	r3, [r7, #8]
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	429a      	cmp	r2, r3
 8008616:	d307      	bcc.n	8008628 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1f2      	bne.n	800860c <HAL_DMA_IRQHandler+0x2cc>
 8008626:	e000      	b.n	800862a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008628:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800863e:	2b00      	cmp	r3, #0
 8008640:	d005      	beq.n	800864e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	4798      	blx	r3
 800864a:	e000      	b.n	800864e <HAL_DMA_IRQHandler+0x30e>
        return;
 800864c:	bf00      	nop
    }
  }
}
 800864e:	3718      	adds	r7, #24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
 8008660:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008670:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	2b40      	cmp	r3, #64	; 0x40
 8008680:	d108      	bne.n	8008694 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008692:	e007      	b.n	80086a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	60da      	str	r2, [r3, #12]
}
 80086a4:	bf00      	nop
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	3b10      	subs	r3, #16
 80086c0:	4a13      	ldr	r2, [pc, #76]	; (8008710 <DMA_CalcBaseAndBitshift+0x60>)
 80086c2:	fba2 2303 	umull	r2, r3, r2, r3
 80086c6:	091b      	lsrs	r3, r3, #4
 80086c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80086ca:	4a12      	ldr	r2, [pc, #72]	; (8008714 <DMA_CalcBaseAndBitshift+0x64>)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	4413      	add	r3, r2
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b03      	cmp	r3, #3
 80086dc:	d908      	bls.n	80086f0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	461a      	mov	r2, r3
 80086e4:	4b0c      	ldr	r3, [pc, #48]	; (8008718 <DMA_CalcBaseAndBitshift+0x68>)
 80086e6:	4013      	ands	r3, r2
 80086e8:	1d1a      	adds	r2, r3, #4
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	659a      	str	r2, [r3, #88]	; 0x58
 80086ee:	e006      	b.n	80086fe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	4b08      	ldr	r3, [pc, #32]	; (8008718 <DMA_CalcBaseAndBitshift+0x68>)
 80086f8:	4013      	ands	r3, r2
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008702:	4618      	mov	r0, r3
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	aaaaaaab 	.word	0xaaaaaaab
 8008714:	08017fa8 	.word	0x08017fa8
 8008718:	fffffc00 	.word	0xfffffc00

0800871c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d11f      	bne.n	8008776 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2b03      	cmp	r3, #3
 800873a:	d856      	bhi.n	80087ea <DMA_CheckFifoParam+0xce>
 800873c:	a201      	add	r2, pc, #4	; (adr r2, 8008744 <DMA_CheckFifoParam+0x28>)
 800873e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008742:	bf00      	nop
 8008744:	08008755 	.word	0x08008755
 8008748:	08008767 	.word	0x08008767
 800874c:	08008755 	.word	0x08008755
 8008750:	080087eb 	.word	0x080087eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d046      	beq.n	80087ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008764:	e043      	b.n	80087ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800876e:	d140      	bne.n	80087f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008774:	e03d      	b.n	80087f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800877e:	d121      	bne.n	80087c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2b03      	cmp	r3, #3
 8008784:	d837      	bhi.n	80087f6 <DMA_CheckFifoParam+0xda>
 8008786:	a201      	add	r2, pc, #4	; (adr r2, 800878c <DMA_CheckFifoParam+0x70>)
 8008788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878c:	0800879d 	.word	0x0800879d
 8008790:	080087a3 	.word	0x080087a3
 8008794:	0800879d 	.word	0x0800879d
 8008798:	080087b5 	.word	0x080087b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	73fb      	strb	r3, [r7, #15]
      break;
 80087a0:	e030      	b.n	8008804 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d025      	beq.n	80087fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087b2:	e022      	b.n	80087fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80087bc:	d11f      	bne.n	80087fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80087c2:	e01c      	b.n	80087fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d903      	bls.n	80087d2 <DMA_CheckFifoParam+0xb6>
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	2b03      	cmp	r3, #3
 80087ce:	d003      	beq.n	80087d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80087d0:	e018      	b.n	8008804 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	73fb      	strb	r3, [r7, #15]
      break;
 80087d6:	e015      	b.n	8008804 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00e      	beq.n	8008802 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	73fb      	strb	r3, [r7, #15]
      break;
 80087e8:	e00b      	b.n	8008802 <DMA_CheckFifoParam+0xe6>
      break;
 80087ea:	bf00      	nop
 80087ec:	e00a      	b.n	8008804 <DMA_CheckFifoParam+0xe8>
      break;
 80087ee:	bf00      	nop
 80087f0:	e008      	b.n	8008804 <DMA_CheckFifoParam+0xe8>
      break;
 80087f2:	bf00      	nop
 80087f4:	e006      	b.n	8008804 <DMA_CheckFifoParam+0xe8>
      break;
 80087f6:	bf00      	nop
 80087f8:	e004      	b.n	8008804 <DMA_CheckFifoParam+0xe8>
      break;
 80087fa:	bf00      	nop
 80087fc:	e002      	b.n	8008804 <DMA_CheckFifoParam+0xe8>
      break;   
 80087fe:	bf00      	nop
 8008800:	e000      	b.n	8008804 <DMA_CheckFifoParam+0xe8>
      break;
 8008802:	bf00      	nop
    }
  } 
  
  return status; 
 8008804:	7bfb      	ldrb	r3, [r7, #15]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop

08008814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008814:	b480      	push	{r7}
 8008816:	b089      	sub	sp, #36	; 0x24
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800881e:	2300      	movs	r3, #0
 8008820:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008822:	2300      	movs	r3, #0
 8008824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008826:	2300      	movs	r3, #0
 8008828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800882a:	2300      	movs	r3, #0
 800882c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800882e:	2300      	movs	r3, #0
 8008830:	61fb      	str	r3, [r7, #28]
 8008832:	e169      	b.n	8008b08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008834:	2201      	movs	r2, #1
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	fa02 f303 	lsl.w	r3, r2, r3
 800883c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	4013      	ands	r3, r2
 8008846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	429a      	cmp	r2, r3
 800884e:	f040 8158 	bne.w	8008b02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	f003 0303 	and.w	r3, r3, #3
 800885a:	2b01      	cmp	r3, #1
 800885c:	d005      	beq.n	800886a <HAL_GPIO_Init+0x56>
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	f003 0303 	and.w	r3, r3, #3
 8008866:	2b02      	cmp	r3, #2
 8008868:	d130      	bne.n	80088cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	005b      	lsls	r3, r3, #1
 8008874:	2203      	movs	r2, #3
 8008876:	fa02 f303 	lsl.w	r3, r2, r3
 800887a:	43db      	mvns	r3, r3
 800887c:	69ba      	ldr	r2, [r7, #24]
 800887e:	4013      	ands	r3, r2
 8008880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	68da      	ldr	r2, [r3, #12]
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	fa02 f303 	lsl.w	r3, r2, r3
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	4313      	orrs	r3, r2
 8008892:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	69ba      	ldr	r2, [r7, #24]
 8008898:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80088a0:	2201      	movs	r2, #1
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	fa02 f303 	lsl.w	r3, r2, r3
 80088a8:	43db      	mvns	r3, r3
 80088aa:	69ba      	ldr	r2, [r7, #24]
 80088ac:	4013      	ands	r3, r2
 80088ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	091b      	lsrs	r3, r3, #4
 80088b6:	f003 0201 	and.w	r2, r3, #1
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	fa02 f303 	lsl.w	r3, r2, r3
 80088c0:	69ba      	ldr	r2, [r7, #24]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	69ba      	ldr	r2, [r7, #24]
 80088ca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	f003 0303 	and.w	r3, r3, #3
 80088d4:	2b03      	cmp	r3, #3
 80088d6:	d017      	beq.n	8008908 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	005b      	lsls	r3, r3, #1
 80088e2:	2203      	movs	r2, #3
 80088e4:	fa02 f303 	lsl.w	r3, r2, r3
 80088e8:	43db      	mvns	r3, r3
 80088ea:	69ba      	ldr	r2, [r7, #24]
 80088ec:	4013      	ands	r3, r2
 80088ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	689a      	ldr	r2, [r3, #8]
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	005b      	lsls	r3, r3, #1
 80088f8:	fa02 f303 	lsl.w	r3, r2, r3
 80088fc:	69ba      	ldr	r2, [r7, #24]
 80088fe:	4313      	orrs	r3, r2
 8008900:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	69ba      	ldr	r2, [r7, #24]
 8008906:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f003 0303 	and.w	r3, r3, #3
 8008910:	2b02      	cmp	r3, #2
 8008912:	d123      	bne.n	800895c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	08da      	lsrs	r2, r3, #3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3208      	adds	r2, #8
 800891c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	f003 0307 	and.w	r3, r3, #7
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	220f      	movs	r2, #15
 800892c:	fa02 f303 	lsl.w	r3, r2, r3
 8008930:	43db      	mvns	r3, r3
 8008932:	69ba      	ldr	r2, [r7, #24]
 8008934:	4013      	ands	r3, r2
 8008936:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	691a      	ldr	r2, [r3, #16]
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	f003 0307 	and.w	r3, r3, #7
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	fa02 f303 	lsl.w	r3, r2, r3
 8008948:	69ba      	ldr	r2, [r7, #24]
 800894a:	4313      	orrs	r3, r2
 800894c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	08da      	lsrs	r2, r3, #3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	3208      	adds	r2, #8
 8008956:	69b9      	ldr	r1, [r7, #24]
 8008958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	005b      	lsls	r3, r3, #1
 8008966:	2203      	movs	r2, #3
 8008968:	fa02 f303 	lsl.w	r3, r2, r3
 800896c:	43db      	mvns	r3, r3
 800896e:	69ba      	ldr	r2, [r7, #24]
 8008970:	4013      	ands	r3, r2
 8008972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	f003 0203 	and.w	r2, r3, #3
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	005b      	lsls	r3, r3, #1
 8008980:	fa02 f303 	lsl.w	r3, r2, r3
 8008984:	69ba      	ldr	r2, [r7, #24]
 8008986:	4313      	orrs	r3, r2
 8008988:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	69ba      	ldr	r2, [r7, #24]
 800898e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 80b2 	beq.w	8008b02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800899e:	4b60      	ldr	r3, [pc, #384]	; (8008b20 <HAL_GPIO_Init+0x30c>)
 80089a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a2:	4a5f      	ldr	r2, [pc, #380]	; (8008b20 <HAL_GPIO_Init+0x30c>)
 80089a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089a8:	6453      	str	r3, [r2, #68]	; 0x44
 80089aa:	4b5d      	ldr	r3, [pc, #372]	; (8008b20 <HAL_GPIO_Init+0x30c>)
 80089ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089b2:	60fb      	str	r3, [r7, #12]
 80089b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80089b6:	4a5b      	ldr	r2, [pc, #364]	; (8008b24 <HAL_GPIO_Init+0x310>)
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	089b      	lsrs	r3, r3, #2
 80089bc:	3302      	adds	r3, #2
 80089be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	f003 0303 	and.w	r3, r3, #3
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	220f      	movs	r2, #15
 80089ce:	fa02 f303 	lsl.w	r3, r2, r3
 80089d2:	43db      	mvns	r3, r3
 80089d4:	69ba      	ldr	r2, [r7, #24]
 80089d6:	4013      	ands	r3, r2
 80089d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a52      	ldr	r2, [pc, #328]	; (8008b28 <HAL_GPIO_Init+0x314>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d02b      	beq.n	8008a3a <HAL_GPIO_Init+0x226>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a51      	ldr	r2, [pc, #324]	; (8008b2c <HAL_GPIO_Init+0x318>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d025      	beq.n	8008a36 <HAL_GPIO_Init+0x222>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a50      	ldr	r2, [pc, #320]	; (8008b30 <HAL_GPIO_Init+0x31c>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d01f      	beq.n	8008a32 <HAL_GPIO_Init+0x21e>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a4f      	ldr	r2, [pc, #316]	; (8008b34 <HAL_GPIO_Init+0x320>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d019      	beq.n	8008a2e <HAL_GPIO_Init+0x21a>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a4e      	ldr	r2, [pc, #312]	; (8008b38 <HAL_GPIO_Init+0x324>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d013      	beq.n	8008a2a <HAL_GPIO_Init+0x216>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a4d      	ldr	r2, [pc, #308]	; (8008b3c <HAL_GPIO_Init+0x328>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d00d      	beq.n	8008a26 <HAL_GPIO_Init+0x212>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a4c      	ldr	r2, [pc, #304]	; (8008b40 <HAL_GPIO_Init+0x32c>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d007      	beq.n	8008a22 <HAL_GPIO_Init+0x20e>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a4b      	ldr	r2, [pc, #300]	; (8008b44 <HAL_GPIO_Init+0x330>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d101      	bne.n	8008a1e <HAL_GPIO_Init+0x20a>
 8008a1a:	2307      	movs	r3, #7
 8008a1c:	e00e      	b.n	8008a3c <HAL_GPIO_Init+0x228>
 8008a1e:	2308      	movs	r3, #8
 8008a20:	e00c      	b.n	8008a3c <HAL_GPIO_Init+0x228>
 8008a22:	2306      	movs	r3, #6
 8008a24:	e00a      	b.n	8008a3c <HAL_GPIO_Init+0x228>
 8008a26:	2305      	movs	r3, #5
 8008a28:	e008      	b.n	8008a3c <HAL_GPIO_Init+0x228>
 8008a2a:	2304      	movs	r3, #4
 8008a2c:	e006      	b.n	8008a3c <HAL_GPIO_Init+0x228>
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e004      	b.n	8008a3c <HAL_GPIO_Init+0x228>
 8008a32:	2302      	movs	r3, #2
 8008a34:	e002      	b.n	8008a3c <HAL_GPIO_Init+0x228>
 8008a36:	2301      	movs	r3, #1
 8008a38:	e000      	b.n	8008a3c <HAL_GPIO_Init+0x228>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	69fa      	ldr	r2, [r7, #28]
 8008a3e:	f002 0203 	and.w	r2, r2, #3
 8008a42:	0092      	lsls	r2, r2, #2
 8008a44:	4093      	lsls	r3, r2
 8008a46:	69ba      	ldr	r2, [r7, #24]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008a4c:	4935      	ldr	r1, [pc, #212]	; (8008b24 <HAL_GPIO_Init+0x310>)
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	089b      	lsrs	r3, r3, #2
 8008a52:	3302      	adds	r3, #2
 8008a54:	69ba      	ldr	r2, [r7, #24]
 8008a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008a5a:	4b3b      	ldr	r3, [pc, #236]	; (8008b48 <HAL_GPIO_Init+0x334>)
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	43db      	mvns	r3, r3
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	4013      	ands	r3, r2
 8008a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008a76:	69ba      	ldr	r2, [r7, #24]
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008a7e:	4a32      	ldr	r2, [pc, #200]	; (8008b48 <HAL_GPIO_Init+0x334>)
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008a84:	4b30      	ldr	r3, [pc, #192]	; (8008b48 <HAL_GPIO_Init+0x334>)
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	43db      	mvns	r3, r3
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	4013      	ands	r3, r2
 8008a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d003      	beq.n	8008aa8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008aa0:	69ba      	ldr	r2, [r7, #24]
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008aa8:	4a27      	ldr	r2, [pc, #156]	; (8008b48 <HAL_GPIO_Init+0x334>)
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008aae:	4b26      	ldr	r3, [pc, #152]	; (8008b48 <HAL_GPIO_Init+0x334>)
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	43db      	mvns	r3, r3
 8008ab8:	69ba      	ldr	r2, [r7, #24]
 8008aba:	4013      	ands	r3, r2
 8008abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008aca:	69ba      	ldr	r2, [r7, #24]
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008ad2:	4a1d      	ldr	r2, [pc, #116]	; (8008b48 <HAL_GPIO_Init+0x334>)
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008ad8:	4b1b      	ldr	r3, [pc, #108]	; (8008b48 <HAL_GPIO_Init+0x334>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	43db      	mvns	r3, r3
 8008ae2:	69ba      	ldr	r2, [r7, #24]
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d003      	beq.n	8008afc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008afc:	4a12      	ldr	r2, [pc, #72]	; (8008b48 <HAL_GPIO_Init+0x334>)
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	3301      	adds	r3, #1
 8008b06:	61fb      	str	r3, [r7, #28]
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	2b0f      	cmp	r3, #15
 8008b0c:	f67f ae92 	bls.w	8008834 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008b10:	bf00      	nop
 8008b12:	bf00      	nop
 8008b14:	3724      	adds	r7, #36	; 0x24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	40023800 	.word	0x40023800
 8008b24:	40013800 	.word	0x40013800
 8008b28:	40020000 	.word	0x40020000
 8008b2c:	40020400 	.word	0x40020400
 8008b30:	40020800 	.word	0x40020800
 8008b34:	40020c00 	.word	0x40020c00
 8008b38:	40021000 	.word	0x40021000
 8008b3c:	40021400 	.word	0x40021400
 8008b40:	40021800 	.word	0x40021800
 8008b44:	40021c00 	.word	0x40021c00
 8008b48:	40013c00 	.word	0x40013c00

08008b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	460b      	mov	r3, r1
 8008b56:	807b      	strh	r3, [r7, #2]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008b5c:	787b      	ldrb	r3, [r7, #1]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d003      	beq.n	8008b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b62:	887a      	ldrh	r2, [r7, #2]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008b68:	e003      	b.n	8008b72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008b6a:	887b      	ldrh	r3, [r7, #2]
 8008b6c:	041a      	lsls	r2, r3, #16
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	619a      	str	r2, [r3, #24]
}
 8008b72:	bf00      	nop
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
	...

08008b80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d101      	bne.n	8008b92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e07f      	b.n	8008c92 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d106      	bne.n	8008bac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7fc fcac 	bl	8005504 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2224      	movs	r2, #36	; 0x24
 8008bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f022 0201 	bic.w	r2, r2, #1
 8008bc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685a      	ldr	r2, [r3, #4]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008bd0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	689a      	ldr	r2, [r3, #8]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008be0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d107      	bne.n	8008bfa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	689a      	ldr	r2, [r3, #8]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bf6:	609a      	str	r2, [r3, #8]
 8008bf8:	e006      	b.n	8008c08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	689a      	ldr	r2, [r3, #8]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008c06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d104      	bne.n	8008c1a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	6859      	ldr	r1, [r3, #4]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	4b1d      	ldr	r3, [pc, #116]	; (8008c9c <HAL_I2C_Init+0x11c>)
 8008c26:	430b      	orrs	r3, r1
 8008c28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68da      	ldr	r2, [r3, #12]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	691a      	ldr	r2, [r3, #16]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	695b      	ldr	r3, [r3, #20]
 8008c42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	430a      	orrs	r2, r1
 8008c52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	69d9      	ldr	r1, [r3, #28]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a1a      	ldr	r2, [r3, #32]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	430a      	orrs	r2, r1
 8008c62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f042 0201 	orr.w	r2, r2, #1
 8008c72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2220      	movs	r2, #32
 8008c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3708      	adds	r7, #8
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	02008000 	.word	0x02008000

08008ca0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af02      	add	r7, sp, #8
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	4608      	mov	r0, r1
 8008caa:	4611      	mov	r1, r2
 8008cac:	461a      	mov	r2, r3
 8008cae:	4603      	mov	r3, r0
 8008cb0:	817b      	strh	r3, [r7, #10]
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	813b      	strh	r3, [r7, #8]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	2b20      	cmp	r3, #32
 8008cc4:	f040 80f9 	bne.w	8008eba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cc8:	6a3b      	ldr	r3, [r7, #32]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d002      	beq.n	8008cd4 <HAL_I2C_Mem_Write+0x34>
 8008cce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d105      	bne.n	8008ce0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cda:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e0ed      	b.n	8008ebc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d101      	bne.n	8008cee <HAL_I2C_Mem_Write+0x4e>
 8008cea:	2302      	movs	r3, #2
 8008cec:	e0e6      	b.n	8008ebc <HAL_I2C_Mem_Write+0x21c>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008cf6:	f7ff f871 	bl	8007ddc <HAL_GetTick>
 8008cfa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	2319      	movs	r3, #25
 8008d02:	2201      	movs	r2, #1
 8008d04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 fac3 	bl	8009294 <I2C_WaitOnFlagUntilTimeout>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d001      	beq.n	8008d18 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e0d1      	b.n	8008ebc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2221      	movs	r2, #33	; 0x21
 8008d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2240      	movs	r2, #64	; 0x40
 8008d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6a3a      	ldr	r2, [r7, #32]
 8008d32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008d38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008d40:	88f8      	ldrh	r0, [r7, #6]
 8008d42:	893a      	ldrh	r2, [r7, #8]
 8008d44:	8979      	ldrh	r1, [r7, #10]
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	9301      	str	r3, [sp, #4]
 8008d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	4603      	mov	r3, r0
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f000 f9d3 	bl	80090fc <I2C_RequestMemoryWrite>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d005      	beq.n	8008d68 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e0a9      	b.n	8008ebc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	2bff      	cmp	r3, #255	; 0xff
 8008d70:	d90e      	bls.n	8008d90 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	22ff      	movs	r2, #255	; 0xff
 8008d76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d7c:	b2da      	uxtb	r2, r3
 8008d7e:	8979      	ldrh	r1, [r7, #10]
 8008d80:	2300      	movs	r3, #0
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f000 fc1f 	bl	80095cc <I2C_TransferConfig>
 8008d8e:	e00f      	b.n	8008db0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	8979      	ldrh	r1, [r7, #10]
 8008da2:	2300      	movs	r3, #0
 8008da4:	9300      	str	r3, [sp, #0]
 8008da6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f000 fc0e 	bl	80095cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008db0:	697a      	ldr	r2, [r7, #20]
 8008db2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f000 faad 	bl	8009314 <I2C_WaitOnTXISFlagUntilTimeout>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d001      	beq.n	8008dc4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e07b      	b.n	8008ebc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc8:	781a      	ldrb	r2, [r3, #0]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	1c5a      	adds	r2, r3, #1
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	3b01      	subs	r3, #1
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dec:	3b01      	subs	r3, #1
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d034      	beq.n	8008e68 <HAL_I2C_Mem_Write+0x1c8>
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d130      	bne.n	8008e68 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	2180      	movs	r1, #128	; 0x80
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f000 fa3f 	bl	8009294 <I2C_WaitOnFlagUntilTimeout>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d001      	beq.n	8008e20 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e04d      	b.n	8008ebc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	2bff      	cmp	r3, #255	; 0xff
 8008e28:	d90e      	bls.n	8008e48 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	22ff      	movs	r2, #255	; 0xff
 8008e2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	8979      	ldrh	r1, [r7, #10]
 8008e38:	2300      	movs	r3, #0
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 fbc3 	bl	80095cc <I2C_TransferConfig>
 8008e46:	e00f      	b.n	8008e68 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e56:	b2da      	uxtb	r2, r3
 8008e58:	8979      	ldrh	r1, [r7, #10]
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f000 fbb2 	bl	80095cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d19e      	bne.n	8008db0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f000 fa8c 	bl	8009394 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e01a      	b.n	8008ebc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2220      	movs	r2, #32
 8008e8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6859      	ldr	r1, [r3, #4]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	4b0a      	ldr	r3, [pc, #40]	; (8008ec4 <HAL_I2C_Mem_Write+0x224>)
 8008e9a:	400b      	ands	r3, r1
 8008e9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2220      	movs	r2, #32
 8008ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	e000      	b.n	8008ebc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008eba:	2302      	movs	r3, #2
  }
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3718      	adds	r7, #24
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	fe00e800 	.word	0xfe00e800

08008ec8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b088      	sub	sp, #32
 8008ecc:	af02      	add	r7, sp, #8
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	4608      	mov	r0, r1
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	817b      	strh	r3, [r7, #10]
 8008eda:	460b      	mov	r3, r1
 8008edc:	813b      	strh	r3, [r7, #8]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b20      	cmp	r3, #32
 8008eec:	f040 80fd 	bne.w	80090ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ef0:	6a3b      	ldr	r3, [r7, #32]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d002      	beq.n	8008efc <HAL_I2C_Mem_Read+0x34>
 8008ef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d105      	bne.n	8008f08 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	e0f1      	b.n	80090ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d101      	bne.n	8008f16 <HAL_I2C_Mem_Read+0x4e>
 8008f12:	2302      	movs	r3, #2
 8008f14:	e0ea      	b.n	80090ec <HAL_I2C_Mem_Read+0x224>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008f1e:	f7fe ff5d 	bl	8007ddc <HAL_GetTick>
 8008f22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	9300      	str	r3, [sp, #0]
 8008f28:	2319      	movs	r3, #25
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f000 f9af 	bl	8009294 <I2C_WaitOnFlagUntilTimeout>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e0d5      	b.n	80090ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2222      	movs	r2, #34	; 0x22
 8008f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2240      	movs	r2, #64	; 0x40
 8008f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6a3a      	ldr	r2, [r7, #32]
 8008f5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008f60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2200      	movs	r2, #0
 8008f66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008f68:	88f8      	ldrh	r0, [r7, #6]
 8008f6a:	893a      	ldrh	r2, [r7, #8]
 8008f6c:	8979      	ldrh	r1, [r7, #10]
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	9301      	str	r3, [sp, #4]
 8008f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	4603      	mov	r3, r0
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f000 f913 	bl	80091a4 <I2C_RequestMemoryRead>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d005      	beq.n	8008f90 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e0ad      	b.n	80090ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	2bff      	cmp	r3, #255	; 0xff
 8008f98:	d90e      	bls.n	8008fb8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	22ff      	movs	r2, #255	; 0xff
 8008f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	8979      	ldrh	r1, [r7, #10]
 8008fa8:	4b52      	ldr	r3, [pc, #328]	; (80090f4 <HAL_I2C_Mem_Read+0x22c>)
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f000 fb0b 	bl	80095cc <I2C_TransferConfig>
 8008fb6:	e00f      	b.n	8008fd8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	8979      	ldrh	r1, [r7, #10]
 8008fca:	4b4a      	ldr	r3, [pc, #296]	; (80090f4 <HAL_I2C_Mem_Read+0x22c>)
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f000 fafa 	bl	80095cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fde:	2200      	movs	r2, #0
 8008fe0:	2104      	movs	r1, #4
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f000 f956 	bl	8009294 <I2C_WaitOnFlagUntilTimeout>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e07c      	b.n	80090ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffc:	b2d2      	uxtb	r2, r2
 8008ffe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009004:	1c5a      	adds	r2, r3, #1
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800900e:	3b01      	subs	r3, #1
 8009010:	b29a      	uxth	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800901a:	b29b      	uxth	r3, r3
 800901c:	3b01      	subs	r3, #1
 800901e:	b29a      	uxth	r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009028:	b29b      	uxth	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d034      	beq.n	8009098 <HAL_I2C_Mem_Read+0x1d0>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009032:	2b00      	cmp	r3, #0
 8009034:	d130      	bne.n	8009098 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903c:	2200      	movs	r2, #0
 800903e:	2180      	movs	r1, #128	; 0x80
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f000 f927 	bl	8009294 <I2C_WaitOnFlagUntilTimeout>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d001      	beq.n	8009050 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	e04d      	b.n	80090ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009054:	b29b      	uxth	r3, r3
 8009056:	2bff      	cmp	r3, #255	; 0xff
 8009058:	d90e      	bls.n	8009078 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	22ff      	movs	r2, #255	; 0xff
 800905e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009064:	b2da      	uxtb	r2, r3
 8009066:	8979      	ldrh	r1, [r7, #10]
 8009068:	2300      	movs	r3, #0
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 faab 	bl	80095cc <I2C_TransferConfig>
 8009076:	e00f      	b.n	8009098 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800907c:	b29a      	uxth	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009086:	b2da      	uxtb	r2, r3
 8009088:	8979      	ldrh	r1, [r7, #10]
 800908a:	2300      	movs	r3, #0
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 fa9a 	bl	80095cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800909c:	b29b      	uxth	r3, r3
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d19a      	bne.n	8008fd8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f000 f974 	bl	8009394 <I2C_WaitOnSTOPFlagUntilTimeout>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e01a      	b.n	80090ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2220      	movs	r2, #32
 80090bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	6859      	ldr	r1, [r3, #4]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	4b0b      	ldr	r3, [pc, #44]	; (80090f8 <HAL_I2C_Mem_Read+0x230>)
 80090ca:	400b      	ands	r3, r1
 80090cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2220      	movs	r2, #32
 80090d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	e000      	b.n	80090ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80090ea:	2302      	movs	r3, #2
  }
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3718      	adds	r7, #24
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	80002400 	.word	0x80002400
 80090f8:	fe00e800 	.word	0xfe00e800

080090fc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af02      	add	r7, sp, #8
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	4608      	mov	r0, r1
 8009106:	4611      	mov	r1, r2
 8009108:	461a      	mov	r2, r3
 800910a:	4603      	mov	r3, r0
 800910c:	817b      	strh	r3, [r7, #10]
 800910e:	460b      	mov	r3, r1
 8009110:	813b      	strh	r3, [r7, #8]
 8009112:	4613      	mov	r3, r2
 8009114:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009116:	88fb      	ldrh	r3, [r7, #6]
 8009118:	b2da      	uxtb	r2, r3
 800911a:	8979      	ldrh	r1, [r7, #10]
 800911c:	4b20      	ldr	r3, [pc, #128]	; (80091a0 <I2C_RequestMemoryWrite+0xa4>)
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f000 fa51 	bl	80095cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800912a:	69fa      	ldr	r2, [r7, #28]
 800912c:	69b9      	ldr	r1, [r7, #24]
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f000 f8f0 	bl	8009314 <I2C_WaitOnTXISFlagUntilTimeout>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d001      	beq.n	800913e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e02c      	b.n	8009198 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800913e:	88fb      	ldrh	r3, [r7, #6]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d105      	bne.n	8009150 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009144:	893b      	ldrh	r3, [r7, #8]
 8009146:	b2da      	uxtb	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	629a      	str	r2, [r3, #40]	; 0x28
 800914e:	e015      	b.n	800917c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009150:	893b      	ldrh	r3, [r7, #8]
 8009152:	0a1b      	lsrs	r3, r3, #8
 8009154:	b29b      	uxth	r3, r3
 8009156:	b2da      	uxtb	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800915e:	69fa      	ldr	r2, [r7, #28]
 8009160:	69b9      	ldr	r1, [r7, #24]
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f000 f8d6 	bl	8009314 <I2C_WaitOnTXISFlagUntilTimeout>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d001      	beq.n	8009172 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e012      	b.n	8009198 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009172:	893b      	ldrh	r3, [r7, #8]
 8009174:	b2da      	uxtb	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	2200      	movs	r2, #0
 8009184:	2180      	movs	r1, #128	; 0x80
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f000 f884 	bl	8009294 <I2C_WaitOnFlagUntilTimeout>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e000      	b.n	8009198 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	80002000 	.word	0x80002000

080091a4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af02      	add	r7, sp, #8
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	4608      	mov	r0, r1
 80091ae:	4611      	mov	r1, r2
 80091b0:	461a      	mov	r2, r3
 80091b2:	4603      	mov	r3, r0
 80091b4:	817b      	strh	r3, [r7, #10]
 80091b6:	460b      	mov	r3, r1
 80091b8:	813b      	strh	r3, [r7, #8]
 80091ba:	4613      	mov	r3, r2
 80091bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80091be:	88fb      	ldrh	r3, [r7, #6]
 80091c0:	b2da      	uxtb	r2, r3
 80091c2:	8979      	ldrh	r1, [r7, #10]
 80091c4:	4b20      	ldr	r3, [pc, #128]	; (8009248 <I2C_RequestMemoryRead+0xa4>)
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	2300      	movs	r3, #0
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 f9fe 	bl	80095cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091d0:	69fa      	ldr	r2, [r7, #28]
 80091d2:	69b9      	ldr	r1, [r7, #24]
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f000 f89d 	bl	8009314 <I2C_WaitOnTXISFlagUntilTimeout>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d001      	beq.n	80091e4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	e02c      	b.n	800923e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80091e4:	88fb      	ldrh	r3, [r7, #6]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d105      	bne.n	80091f6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80091ea:	893b      	ldrh	r3, [r7, #8]
 80091ec:	b2da      	uxtb	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	629a      	str	r2, [r3, #40]	; 0x28
 80091f4:	e015      	b.n	8009222 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80091f6:	893b      	ldrh	r3, [r7, #8]
 80091f8:	0a1b      	lsrs	r3, r3, #8
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009204:	69fa      	ldr	r2, [r7, #28]
 8009206:	69b9      	ldr	r1, [r7, #24]
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f000 f883 	bl	8009314 <I2C_WaitOnTXISFlagUntilTimeout>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d001      	beq.n	8009218 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e012      	b.n	800923e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009218:	893b      	ldrh	r3, [r7, #8]
 800921a:	b2da      	uxtb	r2, r3
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	2200      	movs	r2, #0
 800922a:	2140      	movs	r1, #64	; 0x40
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 f831 	bl	8009294 <I2C_WaitOnFlagUntilTimeout>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e000      	b.n	800923e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	80002000 	.word	0x80002000

0800924c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	f003 0302 	and.w	r3, r3, #2
 800925e:	2b02      	cmp	r3, #2
 8009260:	d103      	bne.n	800926a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2200      	movs	r2, #0
 8009268:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	699b      	ldr	r3, [r3, #24]
 8009270:	f003 0301 	and.w	r3, r3, #1
 8009274:	2b01      	cmp	r3, #1
 8009276:	d007      	beq.n	8009288 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	699a      	ldr	r2, [r3, #24]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f042 0201 	orr.w	r2, r2, #1
 8009286:	619a      	str	r2, [r3, #24]
  }
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	603b      	str	r3, [r7, #0]
 80092a0:	4613      	mov	r3, r2
 80092a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092a4:	e022      	b.n	80092ec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ac:	d01e      	beq.n	80092ec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092ae:	f7fe fd95 	bl	8007ddc <HAL_GetTick>
 80092b2:	4602      	mov	r2, r0
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	683a      	ldr	r2, [r7, #0]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d302      	bcc.n	80092c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d113      	bne.n	80092ec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c8:	f043 0220 	orr.w	r2, r3, #32
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2220      	movs	r2, #32
 80092d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	e00f      	b.n	800930c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	699a      	ldr	r2, [r3, #24]
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	4013      	ands	r3, r2
 80092f6:	68ba      	ldr	r2, [r7, #8]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	bf0c      	ite	eq
 80092fc:	2301      	moveq	r3, #1
 80092fe:	2300      	movne	r3, #0
 8009300:	b2db      	uxtb	r3, r3
 8009302:	461a      	mov	r2, r3
 8009304:	79fb      	ldrb	r3, [r7, #7]
 8009306:	429a      	cmp	r2, r3
 8009308:	d0cd      	beq.n	80092a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009320:	e02c      	b.n	800937c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	68b9      	ldr	r1, [r7, #8]
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f000 f870 	bl	800940c <I2C_IsErrorOccurred>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	e02a      	b.n	800938c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933c:	d01e      	beq.n	800937c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800933e:	f7fe fd4d 	bl	8007ddc <HAL_GetTick>
 8009342:	4602      	mov	r2, r0
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	1ad3      	subs	r3, r2, r3
 8009348:	68ba      	ldr	r2, [r7, #8]
 800934a:	429a      	cmp	r2, r3
 800934c:	d302      	bcc.n	8009354 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d113      	bne.n	800937c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009358:	f043 0220 	orr.w	r2, r3, #32
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2220      	movs	r2, #32
 8009364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2200      	movs	r2, #0
 8009374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	e007      	b.n	800938c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	f003 0302 	and.w	r3, r3, #2
 8009386:	2b02      	cmp	r3, #2
 8009388:	d1cb      	bne.n	8009322 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093a0:	e028      	b.n	80093f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	68b9      	ldr	r1, [r7, #8]
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f000 f830 	bl	800940c <I2C_IsErrorOccurred>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e026      	b.n	8009404 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093b6:	f7fe fd11 	bl	8007ddc <HAL_GetTick>
 80093ba:	4602      	mov	r2, r0
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d302      	bcc.n	80093cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d113      	bne.n	80093f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d0:	f043 0220 	orr.w	r2, r3, #32
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2220      	movs	r2, #32
 80093dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e007      	b.n	8009404 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	f003 0320 	and.w	r3, r3, #32
 80093fe:	2b20      	cmp	r3, #32
 8009400:	d1cf      	bne.n	80093a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009402:	2300      	movs	r3, #0
}
 8009404:	4618      	mov	r0, r3
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b08a      	sub	sp, #40	; 0x28
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009426:	2300      	movs	r3, #0
 8009428:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	f003 0310 	and.w	r3, r3, #16
 8009434:	2b00      	cmp	r3, #0
 8009436:	d068      	beq.n	800950a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2210      	movs	r2, #16
 800943e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009440:	e049      	b.n	80094d6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009448:	d045      	beq.n	80094d6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800944a:	f7fe fcc7 	bl	8007ddc <HAL_GetTick>
 800944e:	4602      	mov	r2, r0
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	1ad3      	subs	r3, r2, r3
 8009454:	68ba      	ldr	r2, [r7, #8]
 8009456:	429a      	cmp	r2, r3
 8009458:	d302      	bcc.n	8009460 <I2C_IsErrorOccurred+0x54>
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d13a      	bne.n	80094d6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800946a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009472:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800947e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009482:	d121      	bne.n	80094c8 <I2C_IsErrorOccurred+0xbc>
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800948a:	d01d      	beq.n	80094c8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800948c:	7cfb      	ldrb	r3, [r7, #19]
 800948e:	2b20      	cmp	r3, #32
 8009490:	d01a      	beq.n	80094c8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	685a      	ldr	r2, [r3, #4]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80094a2:	f7fe fc9b 	bl	8007ddc <HAL_GetTick>
 80094a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094a8:	e00e      	b.n	80094c8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80094aa:	f7fe fc97 	bl	8007ddc <HAL_GetTick>
 80094ae:	4602      	mov	r2, r0
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	2b19      	cmp	r3, #25
 80094b6:	d907      	bls.n	80094c8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80094b8:	6a3b      	ldr	r3, [r7, #32]
 80094ba:	f043 0320 	orr.w	r3, r3, #32
 80094be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80094c6:	e006      	b.n	80094d6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	699b      	ldr	r3, [r3, #24]
 80094ce:	f003 0320 	and.w	r3, r3, #32
 80094d2:	2b20      	cmp	r3, #32
 80094d4:	d1e9      	bne.n	80094aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	f003 0320 	and.w	r3, r3, #32
 80094e0:	2b20      	cmp	r3, #32
 80094e2:	d003      	beq.n	80094ec <I2C_IsErrorOccurred+0xe0>
 80094e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d0aa      	beq.n	8009442 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80094ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d103      	bne.n	80094fc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2220      	movs	r2, #32
 80094fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80094fc:	6a3b      	ldr	r3, [r7, #32]
 80094fe:	f043 0304 	orr.w	r3, r3, #4
 8009502:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00b      	beq.n	8009534 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	f043 0301 	orr.w	r3, r3, #1
 8009522:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f44f 7280 	mov.w	r2, #256	; 0x100
 800952c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00b      	beq.n	8009556 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800953e:	6a3b      	ldr	r3, [r7, #32]
 8009540:	f043 0308 	orr.w	r3, r3, #8
 8009544:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800954e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00b      	beq.n	8009578 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009560:	6a3b      	ldr	r3, [r7, #32]
 8009562:	f043 0302 	orr.w	r3, r3, #2
 8009566:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009570:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800957c:	2b00      	cmp	r3, #0
 800957e:	d01c      	beq.n	80095ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f7ff fe63 	bl	800924c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	6859      	ldr	r1, [r3, #4]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	4b0d      	ldr	r3, [pc, #52]	; (80095c8 <I2C_IsErrorOccurred+0x1bc>)
 8009592:	400b      	ands	r3, r1
 8009594:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800959a:	6a3b      	ldr	r3, [r7, #32]
 800959c:	431a      	orrs	r2, r3
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2220      	movs	r2, #32
 80095a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80095ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3728      	adds	r7, #40	; 0x28
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	fe00e800 	.word	0xfe00e800

080095cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b087      	sub	sp, #28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	607b      	str	r3, [r7, #4]
 80095d6:	460b      	mov	r3, r1
 80095d8:	817b      	strh	r3, [r7, #10]
 80095da:	4613      	mov	r3, r2
 80095dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095de:	897b      	ldrh	r3, [r7, #10]
 80095e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80095e4:	7a7b      	ldrb	r3, [r7, #9]
 80095e6:	041b      	lsls	r3, r3, #16
 80095e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095f2:	6a3b      	ldr	r3, [r7, #32]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	685a      	ldr	r2, [r3, #4]
 8009602:	6a3b      	ldr	r3, [r7, #32]
 8009604:	0d5b      	lsrs	r3, r3, #21
 8009606:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800960a:	4b08      	ldr	r3, [pc, #32]	; (800962c <I2C_TransferConfig+0x60>)
 800960c:	430b      	orrs	r3, r1
 800960e:	43db      	mvns	r3, r3
 8009610:	ea02 0103 	and.w	r1, r2, r3
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	430a      	orrs	r2, r1
 800961c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800961e:	bf00      	nop
 8009620:	371c      	adds	r7, #28
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	03ff63ff 	.word	0x03ff63ff

08009630 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b20      	cmp	r3, #32
 8009644:	d138      	bne.n	80096b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800964c:	2b01      	cmp	r3, #1
 800964e:	d101      	bne.n	8009654 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009650:	2302      	movs	r3, #2
 8009652:	e032      	b.n	80096ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2224      	movs	r2, #36	; 0x24
 8009660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f022 0201 	bic.w	r2, r2, #1
 8009672:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009682:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	6819      	ldr	r1, [r3, #0]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	430a      	orrs	r2, r1
 8009692:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f042 0201 	orr.w	r2, r2, #1
 80096a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2220      	movs	r2, #32
 80096a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	e000      	b.n	80096ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80096b8:	2302      	movs	r3, #2
  }
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	370c      	adds	r7, #12
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80096c6:	b480      	push	{r7}
 80096c8:	b085      	sub	sp, #20
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
 80096ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b20      	cmp	r3, #32
 80096da:	d139      	bne.n	8009750 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d101      	bne.n	80096ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80096e6:	2302      	movs	r3, #2
 80096e8:	e033      	b.n	8009752 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2201      	movs	r2, #1
 80096ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2224      	movs	r2, #36	; 0x24
 80096f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f022 0201 	bic.w	r2, r2, #1
 8009708:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009718:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	021b      	lsls	r3, r3, #8
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	4313      	orrs	r3, r2
 8009722:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f042 0201 	orr.w	r2, r2, #1
 800973a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2220      	movs	r2, #32
 8009740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800974c:	2300      	movs	r3, #0
 800974e:	e000      	b.n	8009752 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009750:	2302      	movs	r3, #2
  }
}
 8009752:	4618      	mov	r0, r3
 8009754:	3714      	adds	r7, #20
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
	...

08009760 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800976a:	4b23      	ldr	r3, [pc, #140]	; (80097f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800976c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976e:	4a22      	ldr	r2, [pc, #136]	; (80097f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8009770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009774:	6413      	str	r3, [r2, #64]	; 0x40
 8009776:	4b20      	ldr	r3, [pc, #128]	; (80097f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8009778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800977e:	603b      	str	r3, [r7, #0]
 8009780:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009782:	4b1e      	ldr	r3, [pc, #120]	; (80097fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a1d      	ldr	r2, [pc, #116]	; (80097fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8009788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800978c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800978e:	f7fe fb25 	bl	8007ddc <HAL_GetTick>
 8009792:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009794:	e009      	b.n	80097aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009796:	f7fe fb21 	bl	8007ddc <HAL_GetTick>
 800979a:	4602      	mov	r2, r0
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097a4:	d901      	bls.n	80097aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e022      	b.n	80097f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80097aa:	4b14      	ldr	r3, [pc, #80]	; (80097fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097b6:	d1ee      	bne.n	8009796 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80097b8:	4b10      	ldr	r3, [pc, #64]	; (80097fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a0f      	ldr	r2, [pc, #60]	; (80097fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80097be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80097c4:	f7fe fb0a 	bl	8007ddc <HAL_GetTick>
 80097c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80097ca:	e009      	b.n	80097e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80097cc:	f7fe fb06 	bl	8007ddc <HAL_GetTick>
 80097d0:	4602      	mov	r2, r0
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097da:	d901      	bls.n	80097e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80097dc:	2303      	movs	r3, #3
 80097de:	e007      	b.n	80097f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80097e0:	4b06      	ldr	r3, [pc, #24]	; (80097fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097ec:	d1ee      	bne.n	80097cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	40023800 	.word	0x40023800
 80097fc:	40007000 	.word	0x40007000

08009800 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009808:	2300      	movs	r3, #0
 800980a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d101      	bne.n	8009816 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e291      	b.n	8009d3a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 0301 	and.w	r3, r3, #1
 800981e:	2b00      	cmp	r3, #0
 8009820:	f000 8087 	beq.w	8009932 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009824:	4b96      	ldr	r3, [pc, #600]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	f003 030c 	and.w	r3, r3, #12
 800982c:	2b04      	cmp	r3, #4
 800982e:	d00c      	beq.n	800984a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009830:	4b93      	ldr	r3, [pc, #588]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	f003 030c 	and.w	r3, r3, #12
 8009838:	2b08      	cmp	r3, #8
 800983a:	d112      	bne.n	8009862 <HAL_RCC_OscConfig+0x62>
 800983c:	4b90      	ldr	r3, [pc, #576]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009848:	d10b      	bne.n	8009862 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800984a:	4b8d      	ldr	r3, [pc, #564]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009852:	2b00      	cmp	r3, #0
 8009854:	d06c      	beq.n	8009930 <HAL_RCC_OscConfig+0x130>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d168      	bne.n	8009930 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e26b      	b.n	8009d3a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800986a:	d106      	bne.n	800987a <HAL_RCC_OscConfig+0x7a>
 800986c:	4b84      	ldr	r3, [pc, #528]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a83      	ldr	r2, [pc, #524]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 8009872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009876:	6013      	str	r3, [r2, #0]
 8009878:	e02e      	b.n	80098d8 <HAL_RCC_OscConfig+0xd8>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d10c      	bne.n	800989c <HAL_RCC_OscConfig+0x9c>
 8009882:	4b7f      	ldr	r3, [pc, #508]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a7e      	ldr	r2, [pc, #504]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 8009888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800988c:	6013      	str	r3, [r2, #0]
 800988e:	4b7c      	ldr	r3, [pc, #496]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a7b      	ldr	r2, [pc, #492]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 8009894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009898:	6013      	str	r3, [r2, #0]
 800989a:	e01d      	b.n	80098d8 <HAL_RCC_OscConfig+0xd8>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098a4:	d10c      	bne.n	80098c0 <HAL_RCC_OscConfig+0xc0>
 80098a6:	4b76      	ldr	r3, [pc, #472]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a75      	ldr	r2, [pc, #468]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 80098ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098b0:	6013      	str	r3, [r2, #0]
 80098b2:	4b73      	ldr	r3, [pc, #460]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a72      	ldr	r2, [pc, #456]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 80098b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098bc:	6013      	str	r3, [r2, #0]
 80098be:	e00b      	b.n	80098d8 <HAL_RCC_OscConfig+0xd8>
 80098c0:	4b6f      	ldr	r3, [pc, #444]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a6e      	ldr	r2, [pc, #440]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 80098c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098ca:	6013      	str	r3, [r2, #0]
 80098cc:	4b6c      	ldr	r3, [pc, #432]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a6b      	ldr	r2, [pc, #428]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 80098d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d013      	beq.n	8009908 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098e0:	f7fe fa7c 	bl	8007ddc <HAL_GetTick>
 80098e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098e6:	e008      	b.n	80098fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098e8:	f7fe fa78 	bl	8007ddc <HAL_GetTick>
 80098ec:	4602      	mov	r2, r0
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	2b64      	cmp	r3, #100	; 0x64
 80098f4:	d901      	bls.n	80098fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e21f      	b.n	8009d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098fa:	4b61      	ldr	r3, [pc, #388]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009902:	2b00      	cmp	r3, #0
 8009904:	d0f0      	beq.n	80098e8 <HAL_RCC_OscConfig+0xe8>
 8009906:	e014      	b.n	8009932 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009908:	f7fe fa68 	bl	8007ddc <HAL_GetTick>
 800990c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800990e:	e008      	b.n	8009922 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009910:	f7fe fa64 	bl	8007ddc <HAL_GetTick>
 8009914:	4602      	mov	r2, r0
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	2b64      	cmp	r3, #100	; 0x64
 800991c:	d901      	bls.n	8009922 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800991e:	2303      	movs	r3, #3
 8009920:	e20b      	b.n	8009d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009922:	4b57      	ldr	r3, [pc, #348]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1f0      	bne.n	8009910 <HAL_RCC_OscConfig+0x110>
 800992e:	e000      	b.n	8009932 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	2b00      	cmp	r3, #0
 800993c:	d069      	beq.n	8009a12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800993e:	4b50      	ldr	r3, [pc, #320]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	f003 030c 	and.w	r3, r3, #12
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00b      	beq.n	8009962 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800994a:	4b4d      	ldr	r3, [pc, #308]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f003 030c 	and.w	r3, r3, #12
 8009952:	2b08      	cmp	r3, #8
 8009954:	d11c      	bne.n	8009990 <HAL_RCC_OscConfig+0x190>
 8009956:	4b4a      	ldr	r3, [pc, #296]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800995e:	2b00      	cmp	r3, #0
 8009960:	d116      	bne.n	8009990 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009962:	4b47      	ldr	r3, [pc, #284]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f003 0302 	and.w	r3, r3, #2
 800996a:	2b00      	cmp	r3, #0
 800996c:	d005      	beq.n	800997a <HAL_RCC_OscConfig+0x17a>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	2b01      	cmp	r3, #1
 8009974:	d001      	beq.n	800997a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e1df      	b.n	8009d3a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800997a:	4b41      	ldr	r3, [pc, #260]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	00db      	lsls	r3, r3, #3
 8009988:	493d      	ldr	r1, [pc, #244]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 800998a:	4313      	orrs	r3, r2
 800998c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800998e:	e040      	b.n	8009a12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d023      	beq.n	80099e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009998:	4b39      	ldr	r3, [pc, #228]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a38      	ldr	r2, [pc, #224]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 800999e:	f043 0301 	orr.w	r3, r3, #1
 80099a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a4:	f7fe fa1a 	bl	8007ddc <HAL_GetTick>
 80099a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099aa:	e008      	b.n	80099be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099ac:	f7fe fa16 	bl	8007ddc <HAL_GetTick>
 80099b0:	4602      	mov	r2, r0
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d901      	bls.n	80099be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e1bd      	b.n	8009d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099be:	4b30      	ldr	r3, [pc, #192]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 0302 	and.w	r3, r3, #2
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d0f0      	beq.n	80099ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099ca:	4b2d      	ldr	r3, [pc, #180]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	00db      	lsls	r3, r3, #3
 80099d8:	4929      	ldr	r1, [pc, #164]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 80099da:	4313      	orrs	r3, r2
 80099dc:	600b      	str	r3, [r1, #0]
 80099de:	e018      	b.n	8009a12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099e0:	4b27      	ldr	r3, [pc, #156]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a26      	ldr	r2, [pc, #152]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 80099e6:	f023 0301 	bic.w	r3, r3, #1
 80099ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ec:	f7fe f9f6 	bl	8007ddc <HAL_GetTick>
 80099f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099f2:	e008      	b.n	8009a06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099f4:	f7fe f9f2 	bl	8007ddc <HAL_GetTick>
 80099f8:	4602      	mov	r2, r0
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	1ad3      	subs	r3, r2, r3
 80099fe:	2b02      	cmp	r3, #2
 8009a00:	d901      	bls.n	8009a06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009a02:	2303      	movs	r3, #3
 8009a04:	e199      	b.n	8009d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a06:	4b1e      	ldr	r3, [pc, #120]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f003 0302 	and.w	r3, r3, #2
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1f0      	bne.n	80099f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 0308 	and.w	r3, r3, #8
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d038      	beq.n	8009a90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d019      	beq.n	8009a5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a26:	4b16      	ldr	r3, [pc, #88]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 8009a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a2a:	4a15      	ldr	r2, [pc, #84]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 8009a2c:	f043 0301 	orr.w	r3, r3, #1
 8009a30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a32:	f7fe f9d3 	bl	8007ddc <HAL_GetTick>
 8009a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a38:	e008      	b.n	8009a4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a3a:	f7fe f9cf 	bl	8007ddc <HAL_GetTick>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	1ad3      	subs	r3, r2, r3
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	d901      	bls.n	8009a4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009a48:	2303      	movs	r3, #3
 8009a4a:	e176      	b.n	8009d3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a4c:	4b0c      	ldr	r3, [pc, #48]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 8009a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a50:	f003 0302 	and.w	r3, r3, #2
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d0f0      	beq.n	8009a3a <HAL_RCC_OscConfig+0x23a>
 8009a58:	e01a      	b.n	8009a90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a5a:	4b09      	ldr	r3, [pc, #36]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 8009a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a5e:	4a08      	ldr	r2, [pc, #32]	; (8009a80 <HAL_RCC_OscConfig+0x280>)
 8009a60:	f023 0301 	bic.w	r3, r3, #1
 8009a64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a66:	f7fe f9b9 	bl	8007ddc <HAL_GetTick>
 8009a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a6c:	e00a      	b.n	8009a84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a6e:	f7fe f9b5 	bl	8007ddc <HAL_GetTick>
 8009a72:	4602      	mov	r2, r0
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d903      	bls.n	8009a84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	e15c      	b.n	8009d3a <HAL_RCC_OscConfig+0x53a>
 8009a80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a84:	4b91      	ldr	r3, [pc, #580]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a88:	f003 0302 	and.w	r3, r3, #2
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1ee      	bne.n	8009a6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f003 0304 	and.w	r3, r3, #4
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f000 80a4 	beq.w	8009be6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a9e:	4b8b      	ldr	r3, [pc, #556]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10d      	bne.n	8009ac6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009aaa:	4b88      	ldr	r3, [pc, #544]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aae:	4a87      	ldr	r2, [pc, #540]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8009ab6:	4b85      	ldr	r3, [pc, #532]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009abe:	60bb      	str	r3, [r7, #8]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ac6:	4b82      	ldr	r3, [pc, #520]	; (8009cd0 <HAL_RCC_OscConfig+0x4d0>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d118      	bne.n	8009b04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009ad2:	4b7f      	ldr	r3, [pc, #508]	; (8009cd0 <HAL_RCC_OscConfig+0x4d0>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a7e      	ldr	r2, [pc, #504]	; (8009cd0 <HAL_RCC_OscConfig+0x4d0>)
 8009ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ade:	f7fe f97d 	bl	8007ddc <HAL_GetTick>
 8009ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ae4:	e008      	b.n	8009af8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ae6:	f7fe f979 	bl	8007ddc <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	2b64      	cmp	r3, #100	; 0x64
 8009af2:	d901      	bls.n	8009af8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e120      	b.n	8009d3a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009af8:	4b75      	ldr	r3, [pc, #468]	; (8009cd0 <HAL_RCC_OscConfig+0x4d0>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d0f0      	beq.n	8009ae6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d106      	bne.n	8009b1a <HAL_RCC_OscConfig+0x31a>
 8009b0c:	4b6f      	ldr	r3, [pc, #444]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b10:	4a6e      	ldr	r2, [pc, #440]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009b12:	f043 0301 	orr.w	r3, r3, #1
 8009b16:	6713      	str	r3, [r2, #112]	; 0x70
 8009b18:	e02d      	b.n	8009b76 <HAL_RCC_OscConfig+0x376>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10c      	bne.n	8009b3c <HAL_RCC_OscConfig+0x33c>
 8009b22:	4b6a      	ldr	r3, [pc, #424]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b26:	4a69      	ldr	r2, [pc, #420]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009b28:	f023 0301 	bic.w	r3, r3, #1
 8009b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8009b2e:	4b67      	ldr	r3, [pc, #412]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b32:	4a66      	ldr	r2, [pc, #408]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009b34:	f023 0304 	bic.w	r3, r3, #4
 8009b38:	6713      	str	r3, [r2, #112]	; 0x70
 8009b3a:	e01c      	b.n	8009b76 <HAL_RCC_OscConfig+0x376>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	2b05      	cmp	r3, #5
 8009b42:	d10c      	bne.n	8009b5e <HAL_RCC_OscConfig+0x35e>
 8009b44:	4b61      	ldr	r3, [pc, #388]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b48:	4a60      	ldr	r2, [pc, #384]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009b4a:	f043 0304 	orr.w	r3, r3, #4
 8009b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8009b50:	4b5e      	ldr	r3, [pc, #376]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b54:	4a5d      	ldr	r2, [pc, #372]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009b56:	f043 0301 	orr.w	r3, r3, #1
 8009b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8009b5c:	e00b      	b.n	8009b76 <HAL_RCC_OscConfig+0x376>
 8009b5e:	4b5b      	ldr	r3, [pc, #364]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b62:	4a5a      	ldr	r2, [pc, #360]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009b64:	f023 0301 	bic.w	r3, r3, #1
 8009b68:	6713      	str	r3, [r2, #112]	; 0x70
 8009b6a:	4b58      	ldr	r3, [pc, #352]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b6e:	4a57      	ldr	r2, [pc, #348]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009b70:	f023 0304 	bic.w	r3, r3, #4
 8009b74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d015      	beq.n	8009baa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b7e:	f7fe f92d 	bl	8007ddc <HAL_GetTick>
 8009b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b84:	e00a      	b.n	8009b9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b86:	f7fe f929 	bl	8007ddc <HAL_GetTick>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d901      	bls.n	8009b9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	e0ce      	b.n	8009d3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b9c:	4b4b      	ldr	r3, [pc, #300]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ba0:	f003 0302 	and.w	r3, r3, #2
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d0ee      	beq.n	8009b86 <HAL_RCC_OscConfig+0x386>
 8009ba8:	e014      	b.n	8009bd4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009baa:	f7fe f917 	bl	8007ddc <HAL_GetTick>
 8009bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009bb0:	e00a      	b.n	8009bc8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bb2:	f7fe f913 	bl	8007ddc <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d901      	bls.n	8009bc8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	e0b8      	b.n	8009d3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009bc8:	4b40      	ldr	r3, [pc, #256]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bcc:	f003 0302 	and.w	r3, r3, #2
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1ee      	bne.n	8009bb2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009bd4:	7dfb      	ldrb	r3, [r7, #23]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d105      	bne.n	8009be6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bda:	4b3c      	ldr	r3, [pc, #240]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bde:	4a3b      	ldr	r2, [pc, #236]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009be4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	699b      	ldr	r3, [r3, #24]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f000 80a4 	beq.w	8009d38 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009bf0:	4b36      	ldr	r3, [pc, #216]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	f003 030c 	and.w	r3, r3, #12
 8009bf8:	2b08      	cmp	r3, #8
 8009bfa:	d06b      	beq.n	8009cd4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	699b      	ldr	r3, [r3, #24]
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	d149      	bne.n	8009c98 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c04:	4b31      	ldr	r3, [pc, #196]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a30      	ldr	r2, [pc, #192]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c10:	f7fe f8e4 	bl	8007ddc <HAL_GetTick>
 8009c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c16:	e008      	b.n	8009c2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c18:	f7fe f8e0 	bl	8007ddc <HAL_GetTick>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d901      	bls.n	8009c2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009c26:	2303      	movs	r3, #3
 8009c28:	e087      	b.n	8009d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c2a:	4b28      	ldr	r3, [pc, #160]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1f0      	bne.n	8009c18 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	69da      	ldr	r2, [r3, #28]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	431a      	orrs	r2, r3
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c44:	019b      	lsls	r3, r3, #6
 8009c46:	431a      	orrs	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c4c:	085b      	lsrs	r3, r3, #1
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	041b      	lsls	r3, r3, #16
 8009c52:	431a      	orrs	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c58:	061b      	lsls	r3, r3, #24
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	4a1b      	ldr	r2, [pc, #108]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009c5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c62:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c64:	4b19      	ldr	r3, [pc, #100]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a18      	ldr	r2, [pc, #96]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c70:	f7fe f8b4 	bl	8007ddc <HAL_GetTick>
 8009c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c76:	e008      	b.n	8009c8a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c78:	f7fe f8b0 	bl	8007ddc <HAL_GetTick>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	2b02      	cmp	r3, #2
 8009c84:	d901      	bls.n	8009c8a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009c86:	2303      	movs	r3, #3
 8009c88:	e057      	b.n	8009d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c8a:	4b10      	ldr	r3, [pc, #64]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d0f0      	beq.n	8009c78 <HAL_RCC_OscConfig+0x478>
 8009c96:	e04f      	b.n	8009d38 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c98:	4b0c      	ldr	r3, [pc, #48]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a0b      	ldr	r2, [pc, #44]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ca4:	f7fe f89a 	bl	8007ddc <HAL_GetTick>
 8009ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009caa:	e008      	b.n	8009cbe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009cac:	f7fe f896 	bl	8007ddc <HAL_GetTick>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	1ad3      	subs	r3, r2, r3
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d901      	bls.n	8009cbe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8009cba:	2303      	movs	r3, #3
 8009cbc:	e03d      	b.n	8009d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cbe:	4b03      	ldr	r3, [pc, #12]	; (8009ccc <HAL_RCC_OscConfig+0x4cc>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1f0      	bne.n	8009cac <HAL_RCC_OscConfig+0x4ac>
 8009cca:	e035      	b.n	8009d38 <HAL_RCC_OscConfig+0x538>
 8009ccc:	40023800 	.word	0x40023800
 8009cd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009cd4:	4b1b      	ldr	r3, [pc, #108]	; (8009d44 <HAL_RCC_OscConfig+0x544>)
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d028      	beq.n	8009d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d121      	bne.n	8009d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d11a      	bne.n	8009d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009d04:	4013      	ands	r3, r2
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009d0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d111      	bne.n	8009d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d1a:	085b      	lsrs	r3, r3, #1
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d107      	bne.n	8009d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d001      	beq.n	8009d38 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	e000      	b.n	8009d3a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3718      	adds	r7, #24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	40023800 	.word	0x40023800

08009d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009d52:	2300      	movs	r3, #0
 8009d54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d101      	bne.n	8009d60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e0d0      	b.n	8009f02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009d60:	4b6a      	ldr	r3, [pc, #424]	; (8009f0c <HAL_RCC_ClockConfig+0x1c4>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 030f 	and.w	r3, r3, #15
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d910      	bls.n	8009d90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d6e:	4b67      	ldr	r3, [pc, #412]	; (8009f0c <HAL_RCC_ClockConfig+0x1c4>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f023 020f 	bic.w	r2, r3, #15
 8009d76:	4965      	ldr	r1, [pc, #404]	; (8009f0c <HAL_RCC_ClockConfig+0x1c4>)
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d7e:	4b63      	ldr	r3, [pc, #396]	; (8009f0c <HAL_RCC_ClockConfig+0x1c4>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 030f 	and.w	r3, r3, #15
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d001      	beq.n	8009d90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e0b8      	b.n	8009f02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 0302 	and.w	r3, r3, #2
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d020      	beq.n	8009dde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f003 0304 	and.w	r3, r3, #4
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d005      	beq.n	8009db4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009da8:	4b59      	ldr	r3, [pc, #356]	; (8009f10 <HAL_RCC_ClockConfig+0x1c8>)
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	4a58      	ldr	r2, [pc, #352]	; (8009f10 <HAL_RCC_ClockConfig+0x1c8>)
 8009dae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009db2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 0308 	and.w	r3, r3, #8
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d005      	beq.n	8009dcc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009dc0:	4b53      	ldr	r3, [pc, #332]	; (8009f10 <HAL_RCC_ClockConfig+0x1c8>)
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	4a52      	ldr	r2, [pc, #328]	; (8009f10 <HAL_RCC_ClockConfig+0x1c8>)
 8009dc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009dca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009dcc:	4b50      	ldr	r3, [pc, #320]	; (8009f10 <HAL_RCC_ClockConfig+0x1c8>)
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	494d      	ldr	r1, [pc, #308]	; (8009f10 <HAL_RCC_ClockConfig+0x1c8>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f003 0301 	and.w	r3, r3, #1
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d040      	beq.n	8009e6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d107      	bne.n	8009e02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009df2:	4b47      	ldr	r3, [pc, #284]	; (8009f10 <HAL_RCC_ClockConfig+0x1c8>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d115      	bne.n	8009e2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e07f      	b.n	8009f02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d107      	bne.n	8009e1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e0a:	4b41      	ldr	r3, [pc, #260]	; (8009f10 <HAL_RCC_ClockConfig+0x1c8>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d109      	bne.n	8009e2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e073      	b.n	8009f02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e1a:	4b3d      	ldr	r3, [pc, #244]	; (8009f10 <HAL_RCC_ClockConfig+0x1c8>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f003 0302 	and.w	r3, r3, #2
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d101      	bne.n	8009e2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	e06b      	b.n	8009f02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009e2a:	4b39      	ldr	r3, [pc, #228]	; (8009f10 <HAL_RCC_ClockConfig+0x1c8>)
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	f023 0203 	bic.w	r2, r3, #3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	4936      	ldr	r1, [pc, #216]	; (8009f10 <HAL_RCC_ClockConfig+0x1c8>)
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e3c:	f7fd ffce 	bl	8007ddc <HAL_GetTick>
 8009e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e42:	e00a      	b.n	8009e5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e44:	f7fd ffca 	bl	8007ddc <HAL_GetTick>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d901      	bls.n	8009e5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009e56:	2303      	movs	r3, #3
 8009e58:	e053      	b.n	8009f02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e5a:	4b2d      	ldr	r3, [pc, #180]	; (8009f10 <HAL_RCC_ClockConfig+0x1c8>)
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	f003 020c 	and.w	r2, r3, #12
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d1eb      	bne.n	8009e44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009e6c:	4b27      	ldr	r3, [pc, #156]	; (8009f0c <HAL_RCC_ClockConfig+0x1c4>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f003 030f 	and.w	r3, r3, #15
 8009e74:	683a      	ldr	r2, [r7, #0]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d210      	bcs.n	8009e9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e7a:	4b24      	ldr	r3, [pc, #144]	; (8009f0c <HAL_RCC_ClockConfig+0x1c4>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f023 020f 	bic.w	r2, r3, #15
 8009e82:	4922      	ldr	r1, [pc, #136]	; (8009f0c <HAL_RCC_ClockConfig+0x1c4>)
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e8a:	4b20      	ldr	r3, [pc, #128]	; (8009f0c <HAL_RCC_ClockConfig+0x1c4>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f003 030f 	and.w	r3, r3, #15
 8009e92:	683a      	ldr	r2, [r7, #0]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d001      	beq.n	8009e9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e032      	b.n	8009f02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f003 0304 	and.w	r3, r3, #4
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d008      	beq.n	8009eba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ea8:	4b19      	ldr	r3, [pc, #100]	; (8009f10 <HAL_RCC_ClockConfig+0x1c8>)
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	4916      	ldr	r1, [pc, #88]	; (8009f10 <HAL_RCC_ClockConfig+0x1c8>)
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f003 0308 	and.w	r3, r3, #8
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d009      	beq.n	8009eda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009ec6:	4b12      	ldr	r3, [pc, #72]	; (8009f10 <HAL_RCC_ClockConfig+0x1c8>)
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	00db      	lsls	r3, r3, #3
 8009ed4:	490e      	ldr	r1, [pc, #56]	; (8009f10 <HAL_RCC_ClockConfig+0x1c8>)
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009eda:	f000 f821 	bl	8009f20 <HAL_RCC_GetSysClockFreq>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	4b0b      	ldr	r3, [pc, #44]	; (8009f10 <HAL_RCC_ClockConfig+0x1c8>)
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	091b      	lsrs	r3, r3, #4
 8009ee6:	f003 030f 	and.w	r3, r3, #15
 8009eea:	490a      	ldr	r1, [pc, #40]	; (8009f14 <HAL_RCC_ClockConfig+0x1cc>)
 8009eec:	5ccb      	ldrb	r3, [r1, r3]
 8009eee:	fa22 f303 	lsr.w	r3, r2, r3
 8009ef2:	4a09      	ldr	r2, [pc, #36]	; (8009f18 <HAL_RCC_ClockConfig+0x1d0>)
 8009ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009ef6:	4b09      	ldr	r3, [pc, #36]	; (8009f1c <HAL_RCC_ClockConfig+0x1d4>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7fb fdaa 	bl	8005a54 <HAL_InitTick>

  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	40023c00 	.word	0x40023c00
 8009f10:	40023800 	.word	0x40023800
 8009f14:	08017f90 	.word	0x08017f90
 8009f18:	20000008 	.word	0x20000008
 8009f1c:	2000000c 	.word	0x2000000c

08009f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f24:	b090      	sub	sp, #64	; 0x40
 8009f26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f30:	2300      	movs	r3, #0
 8009f32:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8009f34:	2300      	movs	r3, #0
 8009f36:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f38:	4b59      	ldr	r3, [pc, #356]	; (800a0a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	f003 030c 	and.w	r3, r3, #12
 8009f40:	2b08      	cmp	r3, #8
 8009f42:	d00d      	beq.n	8009f60 <HAL_RCC_GetSysClockFreq+0x40>
 8009f44:	2b08      	cmp	r3, #8
 8009f46:	f200 80a1 	bhi.w	800a08c <HAL_RCC_GetSysClockFreq+0x16c>
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <HAL_RCC_GetSysClockFreq+0x34>
 8009f4e:	2b04      	cmp	r3, #4
 8009f50:	d003      	beq.n	8009f5a <HAL_RCC_GetSysClockFreq+0x3a>
 8009f52:	e09b      	b.n	800a08c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009f54:	4b53      	ldr	r3, [pc, #332]	; (800a0a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8009f56:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009f58:	e09b      	b.n	800a092 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009f5a:	4b53      	ldr	r3, [pc, #332]	; (800a0a8 <HAL_RCC_GetSysClockFreq+0x188>)
 8009f5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009f5e:	e098      	b.n	800a092 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009f60:	4b4f      	ldr	r3, [pc, #316]	; (800a0a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f68:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009f6a:	4b4d      	ldr	r3, [pc, #308]	; (800a0a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d028      	beq.n	8009fc8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f76:	4b4a      	ldr	r3, [pc, #296]	; (800a0a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	099b      	lsrs	r3, r3, #6
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	623b      	str	r3, [r7, #32]
 8009f80:	627a      	str	r2, [r7, #36]	; 0x24
 8009f82:	6a3b      	ldr	r3, [r7, #32]
 8009f84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009f88:	2100      	movs	r1, #0
 8009f8a:	4b47      	ldr	r3, [pc, #284]	; (800a0a8 <HAL_RCC_GetSysClockFreq+0x188>)
 8009f8c:	fb03 f201 	mul.w	r2, r3, r1
 8009f90:	2300      	movs	r3, #0
 8009f92:	fb00 f303 	mul.w	r3, r0, r3
 8009f96:	4413      	add	r3, r2
 8009f98:	4a43      	ldr	r2, [pc, #268]	; (800a0a8 <HAL_RCC_GetSysClockFreq+0x188>)
 8009f9a:	fba0 1202 	umull	r1, r2, r0, r2
 8009f9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009fa0:	460a      	mov	r2, r1
 8009fa2:	62ba      	str	r2, [r7, #40]	; 0x28
 8009fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fa6:	4413      	add	r3, r2
 8009fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fac:	2200      	movs	r2, #0
 8009fae:	61bb      	str	r3, [r7, #24]
 8009fb0:	61fa      	str	r2, [r7, #28]
 8009fb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009fb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009fba:	f7f6 fedd 	bl	8000d78 <__aeabi_uldivmod>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fc6:	e053      	b.n	800a070 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009fc8:	4b35      	ldr	r3, [pc, #212]	; (800a0a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	099b      	lsrs	r3, r3, #6
 8009fce:	2200      	movs	r2, #0
 8009fd0:	613b      	str	r3, [r7, #16]
 8009fd2:	617a      	str	r2, [r7, #20]
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009fda:	f04f 0b00 	mov.w	fp, #0
 8009fde:	4652      	mov	r2, sl
 8009fe0:	465b      	mov	r3, fp
 8009fe2:	f04f 0000 	mov.w	r0, #0
 8009fe6:	f04f 0100 	mov.w	r1, #0
 8009fea:	0159      	lsls	r1, r3, #5
 8009fec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009ff0:	0150      	lsls	r0, r2, #5
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	ebb2 080a 	subs.w	r8, r2, sl
 8009ffa:	eb63 090b 	sbc.w	r9, r3, fp
 8009ffe:	f04f 0200 	mov.w	r2, #0
 800a002:	f04f 0300 	mov.w	r3, #0
 800a006:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a00a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a00e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a012:	ebb2 0408 	subs.w	r4, r2, r8
 800a016:	eb63 0509 	sbc.w	r5, r3, r9
 800a01a:	f04f 0200 	mov.w	r2, #0
 800a01e:	f04f 0300 	mov.w	r3, #0
 800a022:	00eb      	lsls	r3, r5, #3
 800a024:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a028:	00e2      	lsls	r2, r4, #3
 800a02a:	4614      	mov	r4, r2
 800a02c:	461d      	mov	r5, r3
 800a02e:	eb14 030a 	adds.w	r3, r4, sl
 800a032:	603b      	str	r3, [r7, #0]
 800a034:	eb45 030b 	adc.w	r3, r5, fp
 800a038:	607b      	str	r3, [r7, #4]
 800a03a:	f04f 0200 	mov.w	r2, #0
 800a03e:	f04f 0300 	mov.w	r3, #0
 800a042:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a046:	4629      	mov	r1, r5
 800a048:	028b      	lsls	r3, r1, #10
 800a04a:	4621      	mov	r1, r4
 800a04c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a050:	4621      	mov	r1, r4
 800a052:	028a      	lsls	r2, r1, #10
 800a054:	4610      	mov	r0, r2
 800a056:	4619      	mov	r1, r3
 800a058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a05a:	2200      	movs	r2, #0
 800a05c:	60bb      	str	r3, [r7, #8]
 800a05e:	60fa      	str	r2, [r7, #12]
 800a060:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a064:	f7f6 fe88 	bl	8000d78 <__aeabi_uldivmod>
 800a068:	4602      	mov	r2, r0
 800a06a:	460b      	mov	r3, r1
 800a06c:	4613      	mov	r3, r2
 800a06e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a070:	4b0b      	ldr	r3, [pc, #44]	; (800a0a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	0c1b      	lsrs	r3, r3, #16
 800a076:	f003 0303 	and.w	r3, r3, #3
 800a07a:	3301      	adds	r3, #1
 800a07c:	005b      	lsls	r3, r3, #1
 800a07e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800a080:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a084:	fbb2 f3f3 	udiv	r3, r2, r3
 800a088:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a08a:	e002      	b.n	800a092 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a08c:	4b05      	ldr	r3, [pc, #20]	; (800a0a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800a08e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a090:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800a094:	4618      	mov	r0, r3
 800a096:	3740      	adds	r7, #64	; 0x40
 800a098:	46bd      	mov	sp, r7
 800a09a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a09e:	bf00      	nop
 800a0a0:	40023800 	.word	0x40023800
 800a0a4:	00f42400 	.word	0x00f42400
 800a0a8:	017d7840 	.word	0x017d7840

0800a0ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a0b0:	4b03      	ldr	r3, [pc, #12]	; (800a0c0 <HAL_RCC_GetHCLKFreq+0x14>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	20000008 	.word	0x20000008

0800a0c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a0c8:	f7ff fff0 	bl	800a0ac <HAL_RCC_GetHCLKFreq>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	4b05      	ldr	r3, [pc, #20]	; (800a0e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	0a9b      	lsrs	r3, r3, #10
 800a0d4:	f003 0307 	and.w	r3, r3, #7
 800a0d8:	4903      	ldr	r1, [pc, #12]	; (800a0e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a0da:	5ccb      	ldrb	r3, [r1, r3]
 800a0dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	40023800 	.word	0x40023800
 800a0e8:	08017fa0 	.word	0x08017fa0

0800a0ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a0f0:	f7ff ffdc 	bl	800a0ac <HAL_RCC_GetHCLKFreq>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	4b05      	ldr	r3, [pc, #20]	; (800a10c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	0b5b      	lsrs	r3, r3, #13
 800a0fc:	f003 0307 	and.w	r3, r3, #7
 800a100:	4903      	ldr	r1, [pc, #12]	; (800a110 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a102:	5ccb      	ldrb	r3, [r1, r3]
 800a104:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a108:	4618      	mov	r0, r3
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	40023800 	.word	0x40023800
 800a110:	08017fa0 	.word	0x08017fa0

0800a114 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	220f      	movs	r2, #15
 800a122:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a124:	4b12      	ldr	r3, [pc, #72]	; (800a170 <HAL_RCC_GetClockConfig+0x5c>)
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	f003 0203 	and.w	r2, r3, #3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a130:	4b0f      	ldr	r3, [pc, #60]	; (800a170 <HAL_RCC_GetClockConfig+0x5c>)
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a13c:	4b0c      	ldr	r3, [pc, #48]	; (800a170 <HAL_RCC_GetClockConfig+0x5c>)
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a148:	4b09      	ldr	r3, [pc, #36]	; (800a170 <HAL_RCC_GetClockConfig+0x5c>)
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	08db      	lsrs	r3, r3, #3
 800a14e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a156:	4b07      	ldr	r3, [pc, #28]	; (800a174 <HAL_RCC_GetClockConfig+0x60>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f003 020f 	and.w	r2, r3, #15
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	601a      	str	r2, [r3, #0]
}
 800a162:	bf00      	nop
 800a164:	370c      	adds	r7, #12
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	40023800 	.word	0x40023800
 800a174:	40023c00 	.word	0x40023c00

0800a178 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b088      	sub	sp, #32
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a180:	2300      	movs	r3, #0
 800a182:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a184:	2300      	movs	r3, #0
 800a186:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a18c:	2300      	movs	r3, #0
 800a18e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 0301 	and.w	r3, r3, #1
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d012      	beq.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a19c:	4b65      	ldr	r3, [pc, #404]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	4a64      	ldr	r2, [pc, #400]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a1a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a1a6:	6093      	str	r3, [r2, #8]
 800a1a8:	4b62      	ldr	r3, [pc, #392]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a1aa:	689a      	ldr	r2, [r3, #8]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b0:	4960      	ldr	r1, [pc, #384]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d101      	bne.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d017      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a1ce:	4b59      	ldr	r3, [pc, #356]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a1d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1dc:	4955      	ldr	r1, [pc, #340]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1ec:	d101      	bne.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d101      	bne.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a206:	2b00      	cmp	r3, #0
 800a208:	d017      	beq.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a20a:	4b4a      	ldr	r3, [pc, #296]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a20c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a210:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a218:	4946      	ldr	r1, [pc, #280]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a21a:	4313      	orrs	r3, r2
 800a21c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a224:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a228:	d101      	bne.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800a22a:	2301      	movs	r3, #1
 800a22c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a232:	2b00      	cmp	r3, #0
 800a234:	d101      	bne.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800a236:	2301      	movs	r3, #1
 800a238:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 0320 	and.w	r3, r3, #32
 800a242:	2b00      	cmp	r3, #0
 800a244:	f000 808b 	beq.w	800a35e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a248:	4b3a      	ldr	r3, [pc, #232]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a24c:	4a39      	ldr	r2, [pc, #228]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a24e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a252:	6413      	str	r3, [r2, #64]	; 0x40
 800a254:	4b37      	ldr	r3, [pc, #220]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a25c:	60fb      	str	r3, [r7, #12]
 800a25e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a260:	4b35      	ldr	r3, [pc, #212]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a34      	ldr	r2, [pc, #208]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a26a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a26c:	f7fd fdb6 	bl	8007ddc <HAL_GetTick>
 800a270:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a272:	e008      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a274:	f7fd fdb2 	bl	8007ddc <HAL_GetTick>
 800a278:	4602      	mov	r2, r0
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	2b64      	cmp	r3, #100	; 0x64
 800a280:	d901      	bls.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a282:	2303      	movs	r3, #3
 800a284:	e2bc      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a286:	4b2c      	ldr	r3, [pc, #176]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d0f0      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a292:	4b28      	ldr	r3, [pc, #160]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a29a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d035      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d02e      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a2b0:	4b20      	ldr	r3, [pc, #128]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a2b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a2ba:	4b1e      	ldr	r3, [pc, #120]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a2bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2be:	4a1d      	ldr	r2, [pc, #116]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a2c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a2c6:	4b1b      	ldr	r3, [pc, #108]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ca:	4a1a      	ldr	r2, [pc, #104]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a2cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a2d2:	4a18      	ldr	r2, [pc, #96]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a2d8:	4b16      	ldr	r3, [pc, #88]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a2da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2dc:	f003 0301 	and.w	r3, r3, #1
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d114      	bne.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2e4:	f7fd fd7a 	bl	8007ddc <HAL_GetTick>
 800a2e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2ea:	e00a      	b.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2ec:	f7fd fd76 	bl	8007ddc <HAL_GetTick>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	1ad3      	subs	r3, r2, r3
 800a2f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d901      	bls.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800a2fe:	2303      	movs	r3, #3
 800a300:	e27e      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a302:	4b0c      	ldr	r3, [pc, #48]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a306:	f003 0302 	and.w	r3, r3, #2
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d0ee      	beq.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a31a:	d111      	bne.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800a31c:	4b05      	ldr	r3, [pc, #20]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800a328:	4b04      	ldr	r3, [pc, #16]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a32a:	400b      	ands	r3, r1
 800a32c:	4901      	ldr	r1, [pc, #4]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a32e:	4313      	orrs	r3, r2
 800a330:	608b      	str	r3, [r1, #8]
 800a332:	e00b      	b.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800a334:	40023800 	.word	0x40023800
 800a338:	40007000 	.word	0x40007000
 800a33c:	0ffffcff 	.word	0x0ffffcff
 800a340:	4ba4      	ldr	r3, [pc, #656]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	4aa3      	ldr	r2, [pc, #652]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a346:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a34a:	6093      	str	r3, [r2, #8]
 800a34c:	4ba1      	ldr	r3, [pc, #644]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a34e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a358:	499e      	ldr	r1, [pc, #632]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a35a:	4313      	orrs	r3, r2
 800a35c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 0310 	and.w	r3, r3, #16
 800a366:	2b00      	cmp	r3, #0
 800a368:	d010      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a36a:	4b9a      	ldr	r3, [pc, #616]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a36c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a370:	4a98      	ldr	r2, [pc, #608]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a372:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a376:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800a37a:	4b96      	ldr	r3, [pc, #600]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a37c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a384:	4993      	ldr	r1, [pc, #588]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a386:	4313      	orrs	r3, r2
 800a388:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00a      	beq.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a398:	4b8e      	ldr	r3, [pc, #568]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a39a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a39e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3a6:	498b      	ldr	r1, [pc, #556]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00a      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a3ba:	4b86      	ldr	r3, [pc, #536]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a3bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3c8:	4982      	ldr	r1, [pc, #520]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00a      	beq.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a3dc:	4b7d      	ldr	r3, [pc, #500]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a3de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3ea:	497a      	ldr	r1, [pc, #488]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00a      	beq.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a3fe:	4b75      	ldr	r3, [pc, #468]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a404:	f023 0203 	bic.w	r2, r3, #3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a40c:	4971      	ldr	r1, [pc, #452]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a40e:	4313      	orrs	r3, r2
 800a410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00a      	beq.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a420:	4b6c      	ldr	r3, [pc, #432]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a426:	f023 020c 	bic.w	r2, r3, #12
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42e:	4969      	ldr	r1, [pc, #420]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a430:	4313      	orrs	r3, r2
 800a432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00a      	beq.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a442:	4b64      	ldr	r3, [pc, #400]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a448:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a450:	4960      	ldr	r1, [pc, #384]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a452:	4313      	orrs	r3, r2
 800a454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00a      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a464:	4b5b      	ldr	r3, [pc, #364]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a46a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a472:	4958      	ldr	r1, [pc, #352]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a474:	4313      	orrs	r3, r2
 800a476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00a      	beq.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a486:	4b53      	ldr	r3, [pc, #332]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a48c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a494:	494f      	ldr	r1, [pc, #316]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a496:	4313      	orrs	r3, r2
 800a498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00a      	beq.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a4a8:	4b4a      	ldr	r3, [pc, #296]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a4aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4b6:	4947      	ldr	r1, [pc, #284]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00a      	beq.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a4ca:	4b42      	ldr	r3, [pc, #264]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a4cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4d8:	493e      	ldr	r1, [pc, #248]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00a      	beq.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a4ec:	4b39      	ldr	r3, [pc, #228]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a4ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4fa:	4936      	ldr	r1, [pc, #216]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d011      	beq.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a50e:	4b31      	ldr	r3, [pc, #196]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a514:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a51c:	492d      	ldr	r1, [pc, #180]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a51e:	4313      	orrs	r3, r2
 800a520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a528:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a52c:	d101      	bne.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800a52e:	2301      	movs	r3, #1
 800a530:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00a      	beq.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a53e:	4b25      	ldr	r3, [pc, #148]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a544:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a54c:	4921      	ldr	r1, [pc, #132]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a54e:	4313      	orrs	r3, r2
 800a550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d00a      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a560:	4b1c      	ldr	r3, [pc, #112]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a566:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a56e:	4919      	ldr	r1, [pc, #100]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a570:	4313      	orrs	r3, r2
 800a572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00a      	beq.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800a582:	4b14      	ldr	r3, [pc, #80]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a588:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a590:	4910      	ldr	r1, [pc, #64]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a592:	4313      	orrs	r3, r2
 800a594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d006      	beq.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x434>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f000 809d 	beq.w	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a5ac:	4b09      	ldr	r3, [pc, #36]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a08      	ldr	r2, [pc, #32]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a5b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a5b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5b8:	f7fd fc10 	bl	8007ddc <HAL_GetTick>
 800a5bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a5be:	e00b      	b.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a5c0:	f7fd fc0c 	bl	8007ddc <HAL_GetTick>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	2b64      	cmp	r3, #100	; 0x64
 800a5cc:	d904      	bls.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a5ce:	2303      	movs	r3, #3
 800a5d0:	e116      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800a5d2:	bf00      	nop
 800a5d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a5d8:	4b8b      	ldr	r3, [pc, #556]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d1ed      	bne.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 0301 	and.w	r3, r3, #1
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d017      	beq.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d113      	bne.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a5f8:	4b83      	ldr	r3, [pc, #524]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a5fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5fe:	0e1b      	lsrs	r3, r3, #24
 800a600:	f003 030f 	and.w	r3, r3, #15
 800a604:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	019a      	lsls	r2, r3, #6
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	061b      	lsls	r3, r3, #24
 800a610:	431a      	orrs	r2, r3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	071b      	lsls	r3, r3, #28
 800a618:	497b      	ldr	r1, [pc, #492]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a61a:	4313      	orrs	r3, r2
 800a61c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d004      	beq.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a630:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a634:	d00a      	beq.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d024      	beq.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a64a:	d11f      	bne.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a64c:	4b6e      	ldr	r3, [pc, #440]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a64e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a652:	0f1b      	lsrs	r3, r3, #28
 800a654:	f003 0307 	and.w	r3, r3, #7
 800a658:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	019a      	lsls	r2, r3, #6
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	061b      	lsls	r3, r3, #24
 800a666:	431a      	orrs	r2, r3
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	071b      	lsls	r3, r3, #28
 800a66c:	4966      	ldr	r1, [pc, #408]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a66e:	4313      	orrs	r3, r2
 800a670:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a674:	4b64      	ldr	r3, [pc, #400]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a67a:	f023 021f 	bic.w	r2, r3, #31
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	69db      	ldr	r3, [r3, #28]
 800a682:	3b01      	subs	r3, #1
 800a684:	4960      	ldr	r1, [pc, #384]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a686:	4313      	orrs	r3, r2
 800a688:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00d      	beq.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	019a      	lsls	r2, r3, #6
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	061b      	lsls	r3, r3, #24
 800a6a4:	431a      	orrs	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	071b      	lsls	r3, r3, #28
 800a6ac:	4956      	ldr	r1, [pc, #344]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a6b4:	4b54      	ldr	r3, [pc, #336]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a53      	ldr	r2, [pc, #332]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a6ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a6be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6c0:	f7fd fb8c 	bl	8007ddc <HAL_GetTick>
 800a6c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a6c6:	e008      	b.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a6c8:	f7fd fb88 	bl	8007ddc <HAL_GetTick>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	1ad3      	subs	r3, r2, r3
 800a6d2:	2b64      	cmp	r3, #100	; 0x64
 800a6d4:	d901      	bls.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a6d6:	2303      	movs	r3, #3
 800a6d8:	e092      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a6da:	4b4b      	ldr	r3, [pc, #300]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d0f0      	beq.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	f040 8088 	bne.w	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a6ee:	4b46      	ldr	r3, [pc, #280]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a45      	ldr	r2, [pc, #276]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a6f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6fa:	f7fd fb6f 	bl	8007ddc <HAL_GetTick>
 800a6fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a700:	e008      	b.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a702:	f7fd fb6b 	bl	8007ddc <HAL_GetTick>
 800a706:	4602      	mov	r2, r0
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	1ad3      	subs	r3, r2, r3
 800a70c:	2b64      	cmp	r3, #100	; 0x64
 800a70e:	d901      	bls.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a710:	2303      	movs	r3, #3
 800a712:	e075      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a714:	4b3c      	ldr	r3, [pc, #240]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a71c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a720:	d0ef      	beq.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d003      	beq.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a732:	2b00      	cmp	r3, #0
 800a734:	d009      	beq.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d024      	beq.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a746:	2b00      	cmp	r3, #0
 800a748:	d120      	bne.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a74a:	4b2f      	ldr	r3, [pc, #188]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a74c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a750:	0c1b      	lsrs	r3, r3, #16
 800a752:	f003 0303 	and.w	r3, r3, #3
 800a756:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	691b      	ldr	r3, [r3, #16]
 800a75c:	019a      	lsls	r2, r3, #6
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	041b      	lsls	r3, r3, #16
 800a762:	431a      	orrs	r2, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	695b      	ldr	r3, [r3, #20]
 800a768:	061b      	lsls	r3, r3, #24
 800a76a:	4927      	ldr	r1, [pc, #156]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a76c:	4313      	orrs	r3, r2
 800a76e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a772:	4b25      	ldr	r3, [pc, #148]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a778:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6a1b      	ldr	r3, [r3, #32]
 800a780:	3b01      	subs	r3, #1
 800a782:	021b      	lsls	r3, r3, #8
 800a784:	4920      	ldr	r1, [pc, #128]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a786:	4313      	orrs	r3, r2
 800a788:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a794:	2b00      	cmp	r3, #0
 800a796:	d018      	beq.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x652>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a79c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7a0:	d113      	bne.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a7a2:	4b19      	ldr	r3, [pc, #100]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a7a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7a8:	0e1b      	lsrs	r3, r3, #24
 800a7aa:	f003 030f 	and.w	r3, r3, #15
 800a7ae:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	691b      	ldr	r3, [r3, #16]
 800a7b4:	019a      	lsls	r2, r3, #6
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	699b      	ldr	r3, [r3, #24]
 800a7ba:	041b      	lsls	r3, r3, #16
 800a7bc:	431a      	orrs	r2, r3
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	061b      	lsls	r3, r3, #24
 800a7c2:	4911      	ldr	r1, [pc, #68]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a7ca:	4b0f      	ldr	r3, [pc, #60]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a0e      	ldr	r2, [pc, #56]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a7d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7d6:	f7fd fb01 	bl	8007ddc <HAL_GetTick>
 800a7da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a7dc:	e008      	b.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a7de:	f7fd fafd 	bl	8007ddc <HAL_GetTick>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	1ad3      	subs	r3, r2, r3
 800a7e8:	2b64      	cmp	r3, #100	; 0x64
 800a7ea:	d901      	bls.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	e007      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a7f0:	4b05      	ldr	r3, [pc, #20]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7fc:	d1ef      	bne.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3720      	adds	r7, #32
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	40023800 	.word	0x40023800

0800a80c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d101      	bne.n	800a81e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	e09d      	b.n	800a95a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a822:	2b00      	cmp	r3, #0
 800a824:	d108      	bne.n	800a838 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a82e:	d009      	beq.n	800a844 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	61da      	str	r2, [r3, #28]
 800a836:	e005      	b.n	800a844 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2200      	movs	r2, #0
 800a842:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b00      	cmp	r3, #0
 800a854:	d106      	bne.n	800a864 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f7fa feb0 	bl	80055c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2202      	movs	r2, #2
 800a868:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a87a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a884:	d902      	bls.n	800a88c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a886:	2300      	movs	r3, #0
 800a888:	60fb      	str	r3, [r7, #12]
 800a88a:	e002      	b.n	800a892 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a88c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a890:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a89a:	d007      	beq.n	800a8ac <HAL_SPI_Init+0xa0>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a8a4:	d002      	beq.n	800a8ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	689b      	ldr	r3, [r3, #8]
 800a8b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a8bc:	431a      	orrs	r2, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	f003 0302 	and.w	r3, r3, #2
 800a8c6:	431a      	orrs	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	695b      	ldr	r3, [r3, #20]
 800a8cc:	f003 0301 	and.w	r3, r3, #1
 800a8d0:	431a      	orrs	r2, r3
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	699b      	ldr	r3, [r3, #24]
 800a8d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a8da:	431a      	orrs	r2, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	69db      	ldr	r3, [r3, #28]
 800a8e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8e4:	431a      	orrs	r2, r3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a1b      	ldr	r3, [r3, #32]
 800a8ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8ee:	ea42 0103 	orr.w	r1, r2, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	430a      	orrs	r2, r1
 800a900:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	0c1b      	lsrs	r3, r3, #16
 800a908:	f003 0204 	and.w	r2, r3, #4
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a910:	f003 0310 	and.w	r3, r3, #16
 800a914:	431a      	orrs	r2, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a91a:	f003 0308 	and.w	r3, r3, #8
 800a91e:	431a      	orrs	r2, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a928:	ea42 0103 	orr.w	r1, r2, r3
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	430a      	orrs	r2, r1
 800a938:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	69da      	ldr	r2, [r3, #28]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a948:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b088      	sub	sp, #32
 800a966:	af00      	add	r7, sp, #0
 800a968:	60f8      	str	r0, [r7, #12]
 800a96a:	60b9      	str	r1, [r7, #8]
 800a96c:	603b      	str	r3, [r7, #0]
 800a96e:	4613      	mov	r3, r2
 800a970:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a972:	2300      	movs	r3, #0
 800a974:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d101      	bne.n	800a984 <HAL_SPI_Transmit+0x22>
 800a980:	2302      	movs	r3, #2
 800a982:	e158      	b.n	800ac36 <HAL_SPI_Transmit+0x2d4>
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a98c:	f7fd fa26 	bl	8007ddc <HAL_GetTick>
 800a990:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a992:	88fb      	ldrh	r3, [r7, #6]
 800a994:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d002      	beq.n	800a9a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a9a2:	2302      	movs	r3, #2
 800a9a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a9a6:	e13d      	b.n	800ac24 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d002      	beq.n	800a9b4 <HAL_SPI_Transmit+0x52>
 800a9ae:	88fb      	ldrh	r3, [r7, #6]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d102      	bne.n	800a9ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a9b8:	e134      	b.n	800ac24 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2203      	movs	r2, #3
 800a9be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	88fa      	ldrh	r2, [r7, #6]
 800a9d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	88fa      	ldrh	r2, [r7, #6]
 800a9d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa04:	d10f      	bne.n	800aa26 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa30:	2b40      	cmp	r3, #64	; 0x40
 800aa32:	d007      	beq.n	800aa44 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aa4c:	d94b      	bls.n	800aae6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d002      	beq.n	800aa5c <HAL_SPI_Transmit+0xfa>
 800aa56:	8afb      	ldrh	r3, [r7, #22]
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d13e      	bne.n	800aada <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa60:	881a      	ldrh	r2, [r3, #0]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa6c:	1c9a      	adds	r2, r3, #2
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800aa80:	e02b      	b.n	800aada <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	f003 0302 	and.w	r3, r3, #2
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	d112      	bne.n	800aab6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa94:	881a      	ldrh	r2, [r3, #0]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa0:	1c9a      	adds	r2, r3, #2
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	3b01      	subs	r3, #1
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aab4:	e011      	b.n	800aada <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aab6:	f7fd f991 	bl	8007ddc <HAL_GetTick>
 800aaba:	4602      	mov	r2, r0
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	1ad3      	subs	r3, r2, r3
 800aac0:	683a      	ldr	r2, [r7, #0]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d803      	bhi.n	800aace <HAL_SPI_Transmit+0x16c>
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aacc:	d102      	bne.n	800aad4 <HAL_SPI_Transmit+0x172>
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d102      	bne.n	800aada <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800aad4:	2303      	movs	r3, #3
 800aad6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800aad8:	e0a4      	b.n	800ac24 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aade:	b29b      	uxth	r3, r3
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1ce      	bne.n	800aa82 <HAL_SPI_Transmit+0x120>
 800aae4:	e07c      	b.n	800abe0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d002      	beq.n	800aaf4 <HAL_SPI_Transmit+0x192>
 800aaee:	8afb      	ldrh	r3, [r7, #22]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d170      	bne.n	800abd6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d912      	bls.n	800ab24 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab02:	881a      	ldrh	r2, [r3, #0]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab0e:	1c9a      	adds	r2, r3, #2
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	3b02      	subs	r3, #2
 800ab1c:	b29a      	uxth	r2, r3
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab22:	e058      	b.n	800abd6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	330c      	adds	r3, #12
 800ab2e:	7812      	ldrb	r2, [r2, #0]
 800ab30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab36:	1c5a      	adds	r2, r3, #1
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	3b01      	subs	r3, #1
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800ab4a:	e044      	b.n	800abd6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	f003 0302 	and.w	r3, r3, #2
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	d12b      	bne.n	800abb2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d912      	bls.n	800ab8a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab68:	881a      	ldrh	r2, [r3, #0]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab74:	1c9a      	adds	r2, r3, #2
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	3b02      	subs	r3, #2
 800ab82:	b29a      	uxth	r2, r3
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab88:	e025      	b.n	800abd6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	330c      	adds	r3, #12
 800ab94:	7812      	ldrb	r2, [r2, #0]
 800ab96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab9c:	1c5a      	adds	r2, r3, #1
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	3b01      	subs	r3, #1
 800abaa:	b29a      	uxth	r2, r3
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	87da      	strh	r2, [r3, #62]	; 0x3e
 800abb0:	e011      	b.n	800abd6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800abb2:	f7fd f913 	bl	8007ddc <HAL_GetTick>
 800abb6:	4602      	mov	r2, r0
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	683a      	ldr	r2, [r7, #0]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d803      	bhi.n	800abca <HAL_SPI_Transmit+0x268>
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc8:	d102      	bne.n	800abd0 <HAL_SPI_Transmit+0x26e>
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d102      	bne.n	800abd6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800abd0:	2303      	movs	r3, #3
 800abd2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800abd4:	e026      	b.n	800ac24 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abda:	b29b      	uxth	r3, r3
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d1b5      	bne.n	800ab4c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800abe0:	69ba      	ldr	r2, [r7, #24]
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	68f8      	ldr	r0, [r7, #12]
 800abe6:	f000 fd07 	bl	800b5f8 <SPI_EndRxTxTransaction>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d002      	beq.n	800abf6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2220      	movs	r2, #32
 800abf4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d10a      	bne.n	800ac14 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800abfe:	2300      	movs	r3, #0
 800ac00:	613b      	str	r3, [r7, #16]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	613b      	str	r3, [r7, #16]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	613b      	str	r3, [r7, #16]
 800ac12:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	77fb      	strb	r3, [r7, #31]
 800ac20:	e000      	b.n	800ac24 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800ac22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2201      	movs	r2, #1
 800ac28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ac34:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3720      	adds	r7, #32
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b088      	sub	sp, #32
 800ac42:	af02      	add	r7, sp, #8
 800ac44:	60f8      	str	r0, [r7, #12]
 800ac46:	60b9      	str	r1, [r7, #8]
 800ac48:	603b      	str	r3, [r7, #0]
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac5a:	d112      	bne.n	800ac82 <HAL_SPI_Receive+0x44>
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d10e      	bne.n	800ac82 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2204      	movs	r2, #4
 800ac68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ac6c:	88fa      	ldrh	r2, [r7, #6]
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	9300      	str	r3, [sp, #0]
 800ac72:	4613      	mov	r3, r2
 800ac74:	68ba      	ldr	r2, [r7, #8]
 800ac76:	68b9      	ldr	r1, [r7, #8]
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f000 f910 	bl	800ae9e <HAL_SPI_TransmitReceive>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	e109      	b.n	800ae96 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d101      	bne.n	800ac90 <HAL_SPI_Receive+0x52>
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	e102      	b.n	800ae96 <HAL_SPI_Receive+0x258>
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac98:	f7fd f8a0 	bl	8007ddc <HAL_GetTick>
 800ac9c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d002      	beq.n	800acb0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800acaa:	2302      	movs	r3, #2
 800acac:	75fb      	strb	r3, [r7, #23]
    goto error;
 800acae:	e0e9      	b.n	800ae84 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d002      	beq.n	800acbc <HAL_SPI_Receive+0x7e>
 800acb6:	88fb      	ldrh	r3, [r7, #6]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d102      	bne.n	800acc2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800acbc:	2301      	movs	r3, #1
 800acbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 800acc0:	e0e0      	b.n	800ae84 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2204      	movs	r2, #4
 800acc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	68ba      	ldr	r2, [r7, #8]
 800acd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	88fa      	ldrh	r2, [r7, #6]
 800acda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	88fa      	ldrh	r2, [r7, #6]
 800ace2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2200      	movs	r2, #0
 800acf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2200      	movs	r2, #0
 800acfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ad0c:	d908      	bls.n	800ad20 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	685a      	ldr	r2, [r3, #4]
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ad1c:	605a      	str	r2, [r3, #4]
 800ad1e:	e007      	b.n	800ad30 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	685a      	ldr	r2, [r3, #4]
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ad2e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad38:	d10f      	bne.n	800ad5a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ad58:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad64:	2b40      	cmp	r3, #64	; 0x40
 800ad66:	d007      	beq.n	800ad78 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad76:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ad80:	d867      	bhi.n	800ae52 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ad82:	e030      	b.n	800ade6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	f003 0301 	and.w	r3, r3, #1
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d117      	bne.n	800adc2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f103 020c 	add.w	r2, r3, #12
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9e:	7812      	ldrb	r2, [r2, #0]
 800ada0:	b2d2      	uxtb	r2, r2
 800ada2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada8:	1c5a      	adds	r2, r3, #1
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	3b01      	subs	r3, #1
 800adb8:	b29a      	uxth	r2, r3
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800adc0:	e011      	b.n	800ade6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800adc2:	f7fd f80b 	bl	8007ddc <HAL_GetTick>
 800adc6:	4602      	mov	r2, r0
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	1ad3      	subs	r3, r2, r3
 800adcc:	683a      	ldr	r2, [r7, #0]
 800adce:	429a      	cmp	r2, r3
 800add0:	d803      	bhi.n	800adda <HAL_SPI_Receive+0x19c>
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add8:	d102      	bne.n	800ade0 <HAL_SPI_Receive+0x1a2>
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d102      	bne.n	800ade6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800ade0:	2303      	movs	r3, #3
 800ade2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ade4:	e04e      	b.n	800ae84 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800adec:	b29b      	uxth	r3, r3
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d1c8      	bne.n	800ad84 <HAL_SPI_Receive+0x146>
 800adf2:	e034      	b.n	800ae5e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	f003 0301 	and.w	r3, r3, #1
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d115      	bne.n	800ae2e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	68da      	ldr	r2, [r3, #12]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0c:	b292      	uxth	r2, r2
 800ae0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae14:	1c9a      	adds	r2, r3, #2
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	3b01      	subs	r3, #1
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800ae2c:	e011      	b.n	800ae52 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae2e:	f7fc ffd5 	bl	8007ddc <HAL_GetTick>
 800ae32:	4602      	mov	r2, r0
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	683a      	ldr	r2, [r7, #0]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d803      	bhi.n	800ae46 <HAL_SPI_Receive+0x208>
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae44:	d102      	bne.n	800ae4c <HAL_SPI_Receive+0x20e>
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d102      	bne.n	800ae52 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ae50:	e018      	b.n	800ae84 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d1ca      	bne.n	800adf4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ae5e:	693a      	ldr	r2, [r7, #16]
 800ae60:	6839      	ldr	r1, [r7, #0]
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f000 fb4c 	bl	800b500 <SPI_EndRxTransaction>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d002      	beq.n	800ae74 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2220      	movs	r2, #32
 800ae72:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d002      	beq.n	800ae82 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	75fb      	strb	r3, [r7, #23]
 800ae80:	e000      	b.n	800ae84 <HAL_SPI_Receive+0x246>
  }

error :
 800ae82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ae94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3718      	adds	r7, #24
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b08a      	sub	sp, #40	; 0x28
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	60f8      	str	r0, [r7, #12]
 800aea6:	60b9      	str	r1, [r7, #8]
 800aea8:	607a      	str	r2, [r7, #4]
 800aeaa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800aeac:	2301      	movs	r3, #1
 800aeae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d101      	bne.n	800aec4 <HAL_SPI_TransmitReceive+0x26>
 800aec0:	2302      	movs	r3, #2
 800aec2:	e1fb      	b.n	800b2bc <HAL_SPI_TransmitReceive+0x41e>
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2201      	movs	r2, #1
 800aec8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aecc:	f7fc ff86 	bl	8007ddc <HAL_GetTick>
 800aed0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aed8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800aee0:	887b      	ldrh	r3, [r7, #2]
 800aee2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800aee4:	887b      	ldrh	r3, [r7, #2]
 800aee6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800aee8:	7efb      	ldrb	r3, [r7, #27]
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d00e      	beq.n	800af0c <HAL_SPI_TransmitReceive+0x6e>
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aef4:	d106      	bne.n	800af04 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d102      	bne.n	800af04 <HAL_SPI_TransmitReceive+0x66>
 800aefe:	7efb      	ldrb	r3, [r7, #27]
 800af00:	2b04      	cmp	r3, #4
 800af02:	d003      	beq.n	800af0c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800af04:	2302      	movs	r3, #2
 800af06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800af0a:	e1cd      	b.n	800b2a8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d005      	beq.n	800af1e <HAL_SPI_TransmitReceive+0x80>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d002      	beq.n	800af1e <HAL_SPI_TransmitReceive+0x80>
 800af18:	887b      	ldrh	r3, [r7, #2]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d103      	bne.n	800af26 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800af1e:	2301      	movs	r3, #1
 800af20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800af24:	e1c0      	b.n	800b2a8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	2b04      	cmp	r3, #4
 800af30:	d003      	beq.n	800af3a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2205      	movs	r2, #5
 800af36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2200      	movs	r2, #0
 800af3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	887a      	ldrh	r2, [r7, #2]
 800af4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	887a      	ldrh	r2, [r7, #2]
 800af52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	68ba      	ldr	r2, [r7, #8]
 800af5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	887a      	ldrh	r2, [r7, #2]
 800af60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	887a      	ldrh	r2, [r7, #2]
 800af66:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2200      	movs	r2, #0
 800af6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2200      	movs	r2, #0
 800af72:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800af7c:	d802      	bhi.n	800af84 <HAL_SPI_TransmitReceive+0xe6>
 800af7e:	8a3b      	ldrh	r3, [r7, #16]
 800af80:	2b01      	cmp	r3, #1
 800af82:	d908      	bls.n	800af96 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	685a      	ldr	r2, [r3, #4]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800af92:	605a      	str	r2, [r3, #4]
 800af94:	e007      	b.n	800afa6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	685a      	ldr	r2, [r3, #4]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800afa4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afb0:	2b40      	cmp	r3, #64	; 0x40
 800afb2:	d007      	beq.n	800afc4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800afcc:	d97c      	bls.n	800b0c8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d002      	beq.n	800afdc <HAL_SPI_TransmitReceive+0x13e>
 800afd6:	8a7b      	ldrh	r3, [r7, #18]
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d169      	bne.n	800b0b0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe0:	881a      	ldrh	r2, [r3, #0]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afec:	1c9a      	adds	r2, r3, #2
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	3b01      	subs	r3, #1
 800affa:	b29a      	uxth	r2, r3
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b000:	e056      	b.n	800b0b0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	689b      	ldr	r3, [r3, #8]
 800b008:	f003 0302 	and.w	r3, r3, #2
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d11b      	bne.n	800b048 <HAL_SPI_TransmitReceive+0x1aa>
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b014:	b29b      	uxth	r3, r3
 800b016:	2b00      	cmp	r3, #0
 800b018:	d016      	beq.n	800b048 <HAL_SPI_TransmitReceive+0x1aa>
 800b01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d113      	bne.n	800b048 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b024:	881a      	ldrh	r2, [r3, #0]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b030:	1c9a      	adds	r2, r3, #2
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	3b01      	subs	r3, #1
 800b03e:	b29a      	uxth	r2, r3
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b044:	2300      	movs	r3, #0
 800b046:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	f003 0301 	and.w	r3, r3, #1
 800b052:	2b01      	cmp	r3, #1
 800b054:	d11c      	bne.n	800b090 <HAL_SPI_TransmitReceive+0x1f2>
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d016      	beq.n	800b090 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	68da      	ldr	r2, [r3, #12]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06c:	b292      	uxth	r2, r2
 800b06e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b074:	1c9a      	adds	r2, r3, #2
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b080:	b29b      	uxth	r3, r3
 800b082:	3b01      	subs	r3, #1
 800b084:	b29a      	uxth	r2, r3
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b08c:	2301      	movs	r3, #1
 800b08e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b090:	f7fc fea4 	bl	8007ddc <HAL_GetTick>
 800b094:	4602      	mov	r2, r0
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	1ad3      	subs	r3, r2, r3
 800b09a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d807      	bhi.n	800b0b0 <HAL_SPI_TransmitReceive+0x212>
 800b0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a6:	d003      	beq.n	800b0b0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800b0a8:	2303      	movs	r3, #3
 800b0aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b0ae:	e0fb      	b.n	800b2a8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d1a3      	bne.n	800b002 <HAL_SPI_TransmitReceive+0x164>
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d19d      	bne.n	800b002 <HAL_SPI_TransmitReceive+0x164>
 800b0c6:	e0df      	b.n	800b288 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d003      	beq.n	800b0d8 <HAL_SPI_TransmitReceive+0x23a>
 800b0d0:	8a7b      	ldrh	r3, [r7, #18]
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	f040 80cb 	bne.w	800b26e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d912      	bls.n	800b108 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e6:	881a      	ldrh	r2, [r3, #0]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f2:	1c9a      	adds	r2, r3, #2
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	3b02      	subs	r3, #2
 800b100:	b29a      	uxth	r2, r3
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b106:	e0b2      	b.n	800b26e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	330c      	adds	r3, #12
 800b112:	7812      	ldrb	r2, [r2, #0]
 800b114:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b11a:	1c5a      	adds	r2, r3, #1
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b124:	b29b      	uxth	r3, r3
 800b126:	3b01      	subs	r3, #1
 800b128:	b29a      	uxth	r2, r3
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b12e:	e09e      	b.n	800b26e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	f003 0302 	and.w	r3, r3, #2
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d134      	bne.n	800b1a8 <HAL_SPI_TransmitReceive+0x30a>
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b142:	b29b      	uxth	r3, r3
 800b144:	2b00      	cmp	r3, #0
 800b146:	d02f      	beq.n	800b1a8 <HAL_SPI_TransmitReceive+0x30a>
 800b148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d12c      	bne.n	800b1a8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b152:	b29b      	uxth	r3, r3
 800b154:	2b01      	cmp	r3, #1
 800b156:	d912      	bls.n	800b17e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b15c:	881a      	ldrh	r2, [r3, #0]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b168:	1c9a      	adds	r2, r3, #2
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b172:	b29b      	uxth	r3, r3
 800b174:	3b02      	subs	r3, #2
 800b176:	b29a      	uxth	r2, r3
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b17c:	e012      	b.n	800b1a4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	330c      	adds	r3, #12
 800b188:	7812      	ldrb	r2, [r2, #0]
 800b18a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b190:	1c5a      	adds	r2, r3, #1
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	3b01      	subs	r3, #1
 800b19e:	b29a      	uxth	r2, r3
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	f003 0301 	and.w	r3, r3, #1
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d148      	bne.n	800b248 <HAL_SPI_TransmitReceive+0x3aa>
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d042      	beq.n	800b248 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d923      	bls.n	800b216 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	68da      	ldr	r2, [r3, #12]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d8:	b292      	uxth	r2, r2
 800b1da:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e0:	1c9a      	adds	r2, r3, #2
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	3b02      	subs	r3, #2
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	2b01      	cmp	r3, #1
 800b202:	d81f      	bhi.n	800b244 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	685a      	ldr	r2, [r3, #4]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b212:	605a      	str	r2, [r3, #4]
 800b214:	e016      	b.n	800b244 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f103 020c 	add.w	r2, r3, #12
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b222:	7812      	ldrb	r2, [r2, #0]
 800b224:	b2d2      	uxtb	r2, r2
 800b226:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b22c:	1c5a      	adds	r2, r3, #1
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b238:	b29b      	uxth	r3, r3
 800b23a:	3b01      	subs	r3, #1
 800b23c:	b29a      	uxth	r2, r3
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b244:	2301      	movs	r3, #1
 800b246:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b248:	f7fc fdc8 	bl	8007ddc <HAL_GetTick>
 800b24c:	4602      	mov	r2, r0
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	1ad3      	subs	r3, r2, r3
 800b252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b254:	429a      	cmp	r2, r3
 800b256:	d803      	bhi.n	800b260 <HAL_SPI_TransmitReceive+0x3c2>
 800b258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b25e:	d102      	bne.n	800b266 <HAL_SPI_TransmitReceive+0x3c8>
 800b260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b262:	2b00      	cmp	r3, #0
 800b264:	d103      	bne.n	800b26e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800b266:	2303      	movs	r3, #3
 800b268:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b26c:	e01c      	b.n	800b2a8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b272:	b29b      	uxth	r3, r3
 800b274:	2b00      	cmp	r3, #0
 800b276:	f47f af5b 	bne.w	800b130 <HAL_SPI_TransmitReceive+0x292>
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b280:	b29b      	uxth	r3, r3
 800b282:	2b00      	cmp	r3, #0
 800b284:	f47f af54 	bne.w	800b130 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b288:	69fa      	ldr	r2, [r7, #28]
 800b28a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b28c:	68f8      	ldr	r0, [r7, #12]
 800b28e:	f000 f9b3 	bl	800b5f8 <SPI_EndRxTxTransaction>
 800b292:	4603      	mov	r3, r0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d006      	beq.n	800b2a6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800b298:	2301      	movs	r3, #1
 800b29a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2220      	movs	r2, #32
 800b2a2:	661a      	str	r2, [r3, #96]	; 0x60
 800b2a4:	e000      	b.n	800b2a8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800b2a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b2b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3728      	adds	r7, #40	; 0x28
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b088      	sub	sp, #32
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	603b      	str	r3, [r7, #0]
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b2d4:	f7fc fd82 	bl	8007ddc <HAL_GetTick>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2dc:	1a9b      	subs	r3, r3, r2
 800b2de:	683a      	ldr	r2, [r7, #0]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b2e4:	f7fc fd7a 	bl	8007ddc <HAL_GetTick>
 800b2e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b2ea:	4b39      	ldr	r3, [pc, #228]	; (800b3d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	015b      	lsls	r3, r3, #5
 800b2f0:	0d1b      	lsrs	r3, r3, #20
 800b2f2:	69fa      	ldr	r2, [r7, #28]
 800b2f4:	fb02 f303 	mul.w	r3, r2, r3
 800b2f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b2fa:	e054      	b.n	800b3a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b302:	d050      	beq.n	800b3a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b304:	f7fc fd6a 	bl	8007ddc <HAL_GetTick>
 800b308:	4602      	mov	r2, r0
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	1ad3      	subs	r3, r2, r3
 800b30e:	69fa      	ldr	r2, [r7, #28]
 800b310:	429a      	cmp	r2, r3
 800b312:	d902      	bls.n	800b31a <SPI_WaitFlagStateUntilTimeout+0x56>
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d13d      	bne.n	800b396 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	685a      	ldr	r2, [r3, #4]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b328:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b332:	d111      	bne.n	800b358 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b33c:	d004      	beq.n	800b348 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b346:	d107      	bne.n	800b358 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b356:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b35c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b360:	d10f      	bne.n	800b382 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b370:	601a      	str	r2, [r3, #0]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b380:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2201      	movs	r2, #1
 800b386:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b392:	2303      	movs	r3, #3
 800b394:	e017      	b.n	800b3c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d101      	bne.n	800b3a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b39c:	2300      	movs	r3, #0
 800b39e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	689a      	ldr	r2, [r3, #8]
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	4013      	ands	r3, r2
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	bf0c      	ite	eq
 800b3b6:	2301      	moveq	r3, #1
 800b3b8:	2300      	movne	r3, #0
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	461a      	mov	r2, r3
 800b3be:	79fb      	ldrb	r3, [r7, #7]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d19b      	bne.n	800b2fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3720      	adds	r7, #32
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20000008 	.word	0x20000008

0800b3d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b08a      	sub	sp, #40	; 0x28
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	607a      	str	r2, [r7, #4]
 800b3e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b3e6:	f7fc fcf9 	bl	8007ddc <HAL_GetTick>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ee:	1a9b      	subs	r3, r3, r2
 800b3f0:	683a      	ldr	r2, [r7, #0]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b3f6:	f7fc fcf1 	bl	8007ddc <HAL_GetTick>
 800b3fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	330c      	adds	r3, #12
 800b402:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b404:	4b3d      	ldr	r3, [pc, #244]	; (800b4fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	4613      	mov	r3, r2
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	4413      	add	r3, r2
 800b40e:	00da      	lsls	r2, r3, #3
 800b410:	1ad3      	subs	r3, r2, r3
 800b412:	0d1b      	lsrs	r3, r3, #20
 800b414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b416:	fb02 f303 	mul.w	r3, r2, r3
 800b41a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b41c:	e060      	b.n	800b4e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b424:	d107      	bne.n	800b436 <SPI_WaitFifoStateUntilTimeout+0x62>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d104      	bne.n	800b436 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	b2db      	uxtb	r3, r3
 800b432:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b434:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b43c:	d050      	beq.n	800b4e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b43e:	f7fc fccd 	bl	8007ddc <HAL_GetTick>
 800b442:	4602      	mov	r2, r0
 800b444:	6a3b      	ldr	r3, [r7, #32]
 800b446:	1ad3      	subs	r3, r2, r3
 800b448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d902      	bls.n	800b454 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b450:	2b00      	cmp	r3, #0
 800b452:	d13d      	bne.n	800b4d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	685a      	ldr	r2, [r3, #4]
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b462:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b46c:	d111      	bne.n	800b492 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b476:	d004      	beq.n	800b482 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b480:	d107      	bne.n	800b492 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b490:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b49a:	d10f      	bne.n	800b4bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b4aa:	601a      	str	r2, [r3, #0]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b4ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b4cc:	2303      	movs	r3, #3
 800b4ce:	e010      	b.n	800b4f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b4d0:	69bb      	ldr	r3, [r7, #24]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d101      	bne.n	800b4da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	689a      	ldr	r2, [r3, #8]
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	4013      	ands	r3, r2
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d196      	bne.n	800b41e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3728      	adds	r7, #40	; 0x28
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	20000008 	.word	0x20000008

0800b500 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b088      	sub	sp, #32
 800b504:	af02      	add	r7, sp, #8
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b514:	d111      	bne.n	800b53a <SPI_EndRxTransaction+0x3a>
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b51e:	d004      	beq.n	800b52a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b528:	d107      	bne.n	800b53a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b538:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b542:	d112      	bne.n	800b56a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	2200      	movs	r2, #0
 800b54c:	2180      	movs	r1, #128	; 0x80
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	f7ff feb8 	bl	800b2c4 <SPI_WaitFlagStateUntilTimeout>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d021      	beq.n	800b59e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b55e:	f043 0220 	orr.w	r2, r3, #32
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b566:	2303      	movs	r3, #3
 800b568:	e03d      	b.n	800b5e6 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b56a:	4b21      	ldr	r3, [pc, #132]	; (800b5f0 <SPI_EndRxTransaction+0xf0>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a21      	ldr	r2, [pc, #132]	; (800b5f4 <SPI_EndRxTransaction+0xf4>)
 800b570:	fba2 2303 	umull	r2, r3, r2, r3
 800b574:	0d5b      	lsrs	r3, r3, #21
 800b576:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b57a:	fb02 f303 	mul.w	r3, r2, r3
 800b57e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d00a      	beq.n	800b59c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	3b01      	subs	r3, #1
 800b58a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b596:	2b80      	cmp	r3, #128	; 0x80
 800b598:	d0f2      	beq.n	800b580 <SPI_EndRxTransaction+0x80>
 800b59a:	e000      	b.n	800b59e <SPI_EndRxTransaction+0x9e>
        break;
 800b59c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b5a6:	d11d      	bne.n	800b5e4 <SPI_EndRxTransaction+0xe4>
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5b0:	d004      	beq.n	800b5bc <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5ba:	d113      	bne.n	800b5e4 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	9300      	str	r3, [sp, #0]
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f7ff ff03 	bl	800b3d4 <SPI_WaitFifoStateUntilTimeout>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d007      	beq.n	800b5e4 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5d8:	f043 0220 	orr.w	r2, r3, #32
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b5e0:	2303      	movs	r3, #3
 800b5e2:	e000      	b.n	800b5e6 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800b5e4:	2300      	movs	r3, #0
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3718      	adds	r7, #24
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	20000008 	.word	0x20000008
 800b5f4:	165e9f81 	.word	0x165e9f81

0800b5f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b088      	sub	sp, #32
 800b5fc:	af02      	add	r7, sp, #8
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	9300      	str	r3, [sp, #0]
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	2200      	movs	r2, #0
 800b60c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f7ff fedf 	bl	800b3d4 <SPI_WaitFifoStateUntilTimeout>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d007      	beq.n	800b62c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b620:	f043 0220 	orr.w	r2, r3, #32
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b628:	2303      	movs	r3, #3
 800b62a:	e046      	b.n	800b6ba <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b62c:	4b25      	ldr	r3, [pc, #148]	; (800b6c4 <SPI_EndRxTxTransaction+0xcc>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4a25      	ldr	r2, [pc, #148]	; (800b6c8 <SPI_EndRxTxTransaction+0xd0>)
 800b632:	fba2 2303 	umull	r2, r3, r2, r3
 800b636:	0d5b      	lsrs	r3, r3, #21
 800b638:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b63c:	fb02 f303 	mul.w	r3, r2, r3
 800b640:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b64a:	d112      	bne.n	800b672 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	2200      	movs	r2, #0
 800b654:	2180      	movs	r1, #128	; 0x80
 800b656:	68f8      	ldr	r0, [r7, #12]
 800b658:	f7ff fe34 	bl	800b2c4 <SPI_WaitFlagStateUntilTimeout>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d016      	beq.n	800b690 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b666:	f043 0220 	orr.w	r2, r3, #32
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b66e:	2303      	movs	r3, #3
 800b670:	e023      	b.n	800b6ba <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d00a      	beq.n	800b68e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	3b01      	subs	r3, #1
 800b67c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b688:	2b80      	cmp	r3, #128	; 0x80
 800b68a:	d0f2      	beq.n	800b672 <SPI_EndRxTxTransaction+0x7a>
 800b68c:	e000      	b.n	800b690 <SPI_EndRxTxTransaction+0x98>
        break;
 800b68e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	9300      	str	r3, [sp, #0]
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	2200      	movs	r2, #0
 800b698:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f7ff fe99 	bl	800b3d4 <SPI_WaitFifoStateUntilTimeout>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d007      	beq.n	800b6b8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6ac:	f043 0220 	orr.w	r2, r3, #32
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	e000      	b.n	800b6ba <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800b6b8:	2300      	movs	r3, #0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3718      	adds	r7, #24
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	20000008 	.word	0x20000008
 800b6c8:	165e9f81 	.word	0x165e9f81

0800b6cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d101      	bne.n	800b6de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e049      	b.n	800b772 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d106      	bne.n	800b6f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f7f9 ffdc 	bl	80056b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2202      	movs	r2, #2
 800b6fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	3304      	adds	r3, #4
 800b708:	4619      	mov	r1, r3
 800b70a:	4610      	mov	r0, r2
 800b70c:	f000 ffae 	bl	800c66c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2201      	movs	r2, #1
 800b714:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2201      	movs	r2, #1
 800b71c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2201      	movs	r2, #1
 800b724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2201      	movs	r2, #1
 800b72c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2201      	movs	r2, #1
 800b734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2201      	movs	r2, #1
 800b73c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2201      	movs	r2, #1
 800b744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2201      	movs	r2, #1
 800b74c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2201      	movs	r2, #1
 800b754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2201      	movs	r2, #1
 800b75c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2201      	movs	r2, #1
 800b764:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2201      	movs	r2, #1
 800b76c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b770:	2300      	movs	r3, #0
}
 800b772:	4618      	mov	r0, r3
 800b774:	3708      	adds	r7, #8
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
	...

0800b77c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d001      	beq.n	800b794 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b790:	2301      	movs	r3, #1
 800b792:	e054      	b.n	800b83e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2202      	movs	r2, #2
 800b798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	68da      	ldr	r2, [r3, #12]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f042 0201 	orr.w	r2, r2, #1
 800b7aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a26      	ldr	r2, [pc, #152]	; (800b84c <HAL_TIM_Base_Start_IT+0xd0>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d022      	beq.n	800b7fc <HAL_TIM_Base_Start_IT+0x80>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7be:	d01d      	beq.n	800b7fc <HAL_TIM_Base_Start_IT+0x80>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4a22      	ldr	r2, [pc, #136]	; (800b850 <HAL_TIM_Base_Start_IT+0xd4>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d018      	beq.n	800b7fc <HAL_TIM_Base_Start_IT+0x80>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4a21      	ldr	r2, [pc, #132]	; (800b854 <HAL_TIM_Base_Start_IT+0xd8>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d013      	beq.n	800b7fc <HAL_TIM_Base_Start_IT+0x80>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4a1f      	ldr	r2, [pc, #124]	; (800b858 <HAL_TIM_Base_Start_IT+0xdc>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d00e      	beq.n	800b7fc <HAL_TIM_Base_Start_IT+0x80>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4a1e      	ldr	r2, [pc, #120]	; (800b85c <HAL_TIM_Base_Start_IT+0xe0>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d009      	beq.n	800b7fc <HAL_TIM_Base_Start_IT+0x80>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a1c      	ldr	r2, [pc, #112]	; (800b860 <HAL_TIM_Base_Start_IT+0xe4>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d004      	beq.n	800b7fc <HAL_TIM_Base_Start_IT+0x80>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a1b      	ldr	r2, [pc, #108]	; (800b864 <HAL_TIM_Base_Start_IT+0xe8>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d115      	bne.n	800b828 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	689a      	ldr	r2, [r3, #8]
 800b802:	4b19      	ldr	r3, [pc, #100]	; (800b868 <HAL_TIM_Base_Start_IT+0xec>)
 800b804:	4013      	ands	r3, r2
 800b806:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2b06      	cmp	r3, #6
 800b80c:	d015      	beq.n	800b83a <HAL_TIM_Base_Start_IT+0xbe>
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b814:	d011      	beq.n	800b83a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f042 0201 	orr.w	r2, r2, #1
 800b824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b826:	e008      	b.n	800b83a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f042 0201 	orr.w	r2, r2, #1
 800b836:	601a      	str	r2, [r3, #0]
 800b838:	e000      	b.n	800b83c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b83a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b83c:	2300      	movs	r3, #0
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3714      	adds	r7, #20
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr
 800b84a:	bf00      	nop
 800b84c:	40010000 	.word	0x40010000
 800b850:	40000400 	.word	0x40000400
 800b854:	40000800 	.word	0x40000800
 800b858:	40000c00 	.word	0x40000c00
 800b85c:	40010400 	.word	0x40010400
 800b860:	40014000 	.word	0x40014000
 800b864:	40001800 	.word	0x40001800
 800b868:	00010007 	.word	0x00010007

0800b86c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d101      	bne.n	800b87e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b87a:	2301      	movs	r3, #1
 800b87c:	e049      	b.n	800b912 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b884:	b2db      	uxtb	r3, r3
 800b886:	2b00      	cmp	r3, #0
 800b888:	d106      	bne.n	800b898 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 f841 	bl	800b91a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2202      	movs	r2, #2
 800b89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	4610      	mov	r0, r2
 800b8ac:	f000 fede 	bl	800c66c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2201      	movs	r2, #1
 800b904:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2201      	movs	r2, #1
 800b90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b91a:	b480      	push	{r7}
 800b91c:	b083      	sub	sp, #12
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b922:	bf00      	nop
 800b924:	370c      	adds	r7, #12
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr
	...

0800b930 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d109      	bne.n	800b954 <HAL_TIM_PWM_Start+0x24>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b946:	b2db      	uxtb	r3, r3
 800b948:	2b01      	cmp	r3, #1
 800b94a:	bf14      	ite	ne
 800b94c:	2301      	movne	r3, #1
 800b94e:	2300      	moveq	r3, #0
 800b950:	b2db      	uxtb	r3, r3
 800b952:	e03c      	b.n	800b9ce <HAL_TIM_PWM_Start+0x9e>
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	2b04      	cmp	r3, #4
 800b958:	d109      	bne.n	800b96e <HAL_TIM_PWM_Start+0x3e>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b960:	b2db      	uxtb	r3, r3
 800b962:	2b01      	cmp	r3, #1
 800b964:	bf14      	ite	ne
 800b966:	2301      	movne	r3, #1
 800b968:	2300      	moveq	r3, #0
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	e02f      	b.n	800b9ce <HAL_TIM_PWM_Start+0x9e>
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	2b08      	cmp	r3, #8
 800b972:	d109      	bne.n	800b988 <HAL_TIM_PWM_Start+0x58>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	bf14      	ite	ne
 800b980:	2301      	movne	r3, #1
 800b982:	2300      	moveq	r3, #0
 800b984:	b2db      	uxtb	r3, r3
 800b986:	e022      	b.n	800b9ce <HAL_TIM_PWM_Start+0x9e>
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	2b0c      	cmp	r3, #12
 800b98c:	d109      	bne.n	800b9a2 <HAL_TIM_PWM_Start+0x72>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b994:	b2db      	uxtb	r3, r3
 800b996:	2b01      	cmp	r3, #1
 800b998:	bf14      	ite	ne
 800b99a:	2301      	movne	r3, #1
 800b99c:	2300      	moveq	r3, #0
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	e015      	b.n	800b9ce <HAL_TIM_PWM_Start+0x9e>
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	2b10      	cmp	r3, #16
 800b9a6:	d109      	bne.n	800b9bc <HAL_TIM_PWM_Start+0x8c>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	bf14      	ite	ne
 800b9b4:	2301      	movne	r3, #1
 800b9b6:	2300      	moveq	r3, #0
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	e008      	b.n	800b9ce <HAL_TIM_PWM_Start+0x9e>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	bf14      	ite	ne
 800b9c8:	2301      	movne	r3, #1
 800b9ca:	2300      	moveq	r3, #0
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d001      	beq.n	800b9d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	e092      	b.n	800bafc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d104      	bne.n	800b9e6 <HAL_TIM_PWM_Start+0xb6>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2202      	movs	r2, #2
 800b9e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b9e4:	e023      	b.n	800ba2e <HAL_TIM_PWM_Start+0xfe>
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	2b04      	cmp	r3, #4
 800b9ea:	d104      	bne.n	800b9f6 <HAL_TIM_PWM_Start+0xc6>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2202      	movs	r2, #2
 800b9f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9f4:	e01b      	b.n	800ba2e <HAL_TIM_PWM_Start+0xfe>
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	2b08      	cmp	r3, #8
 800b9fa:	d104      	bne.n	800ba06 <HAL_TIM_PWM_Start+0xd6>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2202      	movs	r2, #2
 800ba00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba04:	e013      	b.n	800ba2e <HAL_TIM_PWM_Start+0xfe>
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	2b0c      	cmp	r3, #12
 800ba0a:	d104      	bne.n	800ba16 <HAL_TIM_PWM_Start+0xe6>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2202      	movs	r2, #2
 800ba10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba14:	e00b      	b.n	800ba2e <HAL_TIM_PWM_Start+0xfe>
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b10      	cmp	r3, #16
 800ba1a:	d104      	bne.n	800ba26 <HAL_TIM_PWM_Start+0xf6>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2202      	movs	r2, #2
 800ba20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba24:	e003      	b.n	800ba2e <HAL_TIM_PWM_Start+0xfe>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2202      	movs	r2, #2
 800ba2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2201      	movs	r2, #1
 800ba34:	6839      	ldr	r1, [r7, #0]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f001 fada 	bl	800cff0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a30      	ldr	r2, [pc, #192]	; (800bb04 <HAL_TIM_PWM_Start+0x1d4>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d004      	beq.n	800ba50 <HAL_TIM_PWM_Start+0x120>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a2f      	ldr	r2, [pc, #188]	; (800bb08 <HAL_TIM_PWM_Start+0x1d8>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d101      	bne.n	800ba54 <HAL_TIM_PWM_Start+0x124>
 800ba50:	2301      	movs	r3, #1
 800ba52:	e000      	b.n	800ba56 <HAL_TIM_PWM_Start+0x126>
 800ba54:	2300      	movs	r3, #0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d007      	beq.n	800ba6a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ba68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a25      	ldr	r2, [pc, #148]	; (800bb04 <HAL_TIM_PWM_Start+0x1d4>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d022      	beq.n	800baba <HAL_TIM_PWM_Start+0x18a>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba7c:	d01d      	beq.n	800baba <HAL_TIM_PWM_Start+0x18a>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a22      	ldr	r2, [pc, #136]	; (800bb0c <HAL_TIM_PWM_Start+0x1dc>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d018      	beq.n	800baba <HAL_TIM_PWM_Start+0x18a>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a20      	ldr	r2, [pc, #128]	; (800bb10 <HAL_TIM_PWM_Start+0x1e0>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d013      	beq.n	800baba <HAL_TIM_PWM_Start+0x18a>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a1f      	ldr	r2, [pc, #124]	; (800bb14 <HAL_TIM_PWM_Start+0x1e4>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d00e      	beq.n	800baba <HAL_TIM_PWM_Start+0x18a>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a19      	ldr	r2, [pc, #100]	; (800bb08 <HAL_TIM_PWM_Start+0x1d8>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d009      	beq.n	800baba <HAL_TIM_PWM_Start+0x18a>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a1b      	ldr	r2, [pc, #108]	; (800bb18 <HAL_TIM_PWM_Start+0x1e8>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d004      	beq.n	800baba <HAL_TIM_PWM_Start+0x18a>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a19      	ldr	r2, [pc, #100]	; (800bb1c <HAL_TIM_PWM_Start+0x1ec>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d115      	bne.n	800bae6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	689a      	ldr	r2, [r3, #8]
 800bac0:	4b17      	ldr	r3, [pc, #92]	; (800bb20 <HAL_TIM_PWM_Start+0x1f0>)
 800bac2:	4013      	ands	r3, r2
 800bac4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2b06      	cmp	r3, #6
 800baca:	d015      	beq.n	800baf8 <HAL_TIM_PWM_Start+0x1c8>
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bad2:	d011      	beq.n	800baf8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f042 0201 	orr.w	r2, r2, #1
 800bae2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bae4:	e008      	b.n	800baf8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f042 0201 	orr.w	r2, r2, #1
 800baf4:	601a      	str	r2, [r3, #0]
 800baf6:	e000      	b.n	800bafa <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baf8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3710      	adds	r7, #16
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	40010000 	.word	0x40010000
 800bb08:	40010400 	.word	0x40010400
 800bb0c:	40000400 	.word	0x40000400
 800bb10:	40000800 	.word	0x40000800
 800bb14:	40000c00 	.word	0x40000c00
 800bb18:	40014000 	.word	0x40014000
 800bb1c:	40001800 	.word	0x40001800
 800bb20:	00010007 	.word	0x00010007

0800bb24 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d101      	bne.n	800bb36 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800bb32:	2301      	movs	r3, #1
 800bb34:	e049      	b.n	800bbca <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d106      	bne.n	800bb50 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f7f9 fdd0 	bl	80056f0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2202      	movs	r2, #2
 800bb54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	3304      	adds	r3, #4
 800bb60:	4619      	mov	r1, r3
 800bb62:	4610      	mov	r0, r2
 800bb64:	f000 fd82 	bl	800c66c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2201      	movs	r2, #1
 800bb74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2201      	movs	r2, #1
 800bb94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2201      	movs	r2, #1
 800bba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3708      	adds	r7, #8
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
	...

0800bbd4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d104      	bne.n	800bbf2 <HAL_TIM_IC_Start_IT+0x1e>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	e023      	b.n	800bc3a <HAL_TIM_IC_Start_IT+0x66>
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	2b04      	cmp	r3, #4
 800bbf6:	d104      	bne.n	800bc02 <HAL_TIM_IC_Start_IT+0x2e>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	e01b      	b.n	800bc3a <HAL_TIM_IC_Start_IT+0x66>
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	2b08      	cmp	r3, #8
 800bc06:	d104      	bne.n	800bc12 <HAL_TIM_IC_Start_IT+0x3e>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	e013      	b.n	800bc3a <HAL_TIM_IC_Start_IT+0x66>
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	2b0c      	cmp	r3, #12
 800bc16:	d104      	bne.n	800bc22 <HAL_TIM_IC_Start_IT+0x4e>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc1e:	b2db      	uxtb	r3, r3
 800bc20:	e00b      	b.n	800bc3a <HAL_TIM_IC_Start_IT+0x66>
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	2b10      	cmp	r3, #16
 800bc26:	d104      	bne.n	800bc32 <HAL_TIM_IC_Start_IT+0x5e>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	e003      	b.n	800bc3a <HAL_TIM_IC_Start_IT+0x66>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d104      	bne.n	800bc4c <HAL_TIM_IC_Start_IT+0x78>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	e013      	b.n	800bc74 <HAL_TIM_IC_Start_IT+0xa0>
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	2b04      	cmp	r3, #4
 800bc50:	d104      	bne.n	800bc5c <HAL_TIM_IC_Start_IT+0x88>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	e00b      	b.n	800bc74 <HAL_TIM_IC_Start_IT+0xa0>
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	2b08      	cmp	r3, #8
 800bc60:	d104      	bne.n	800bc6c <HAL_TIM_IC_Start_IT+0x98>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	e003      	b.n	800bc74 <HAL_TIM_IC_Start_IT+0xa0>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc76:	7bbb      	ldrb	r3, [r7, #14]
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d102      	bne.n	800bc82 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800bc7c:	7b7b      	ldrb	r3, [r7, #13]
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d001      	beq.n	800bc86 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800bc82:	2301      	movs	r3, #1
 800bc84:	e0e2      	b.n	800be4c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d104      	bne.n	800bc96 <HAL_TIM_IC_Start_IT+0xc2>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2202      	movs	r2, #2
 800bc90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc94:	e023      	b.n	800bcde <HAL_TIM_IC_Start_IT+0x10a>
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	2b04      	cmp	r3, #4
 800bc9a:	d104      	bne.n	800bca6 <HAL_TIM_IC_Start_IT+0xd2>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2202      	movs	r2, #2
 800bca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bca4:	e01b      	b.n	800bcde <HAL_TIM_IC_Start_IT+0x10a>
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	2b08      	cmp	r3, #8
 800bcaa:	d104      	bne.n	800bcb6 <HAL_TIM_IC_Start_IT+0xe2>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2202      	movs	r2, #2
 800bcb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bcb4:	e013      	b.n	800bcde <HAL_TIM_IC_Start_IT+0x10a>
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	2b0c      	cmp	r3, #12
 800bcba:	d104      	bne.n	800bcc6 <HAL_TIM_IC_Start_IT+0xf2>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2202      	movs	r2, #2
 800bcc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bcc4:	e00b      	b.n	800bcde <HAL_TIM_IC_Start_IT+0x10a>
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	2b10      	cmp	r3, #16
 800bcca:	d104      	bne.n	800bcd6 <HAL_TIM_IC_Start_IT+0x102>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2202      	movs	r2, #2
 800bcd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bcd4:	e003      	b.n	800bcde <HAL_TIM_IC_Start_IT+0x10a>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2202      	movs	r2, #2
 800bcda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d104      	bne.n	800bcee <HAL_TIM_IC_Start_IT+0x11a>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2202      	movs	r2, #2
 800bce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcec:	e013      	b.n	800bd16 <HAL_TIM_IC_Start_IT+0x142>
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	2b04      	cmp	r3, #4
 800bcf2:	d104      	bne.n	800bcfe <HAL_TIM_IC_Start_IT+0x12a>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2202      	movs	r2, #2
 800bcf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcfc:	e00b      	b.n	800bd16 <HAL_TIM_IC_Start_IT+0x142>
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	2b08      	cmp	r3, #8
 800bd02:	d104      	bne.n	800bd0e <HAL_TIM_IC_Start_IT+0x13a>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2202      	movs	r2, #2
 800bd08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bd0c:	e003      	b.n	800bd16 <HAL_TIM_IC_Start_IT+0x142>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2202      	movs	r2, #2
 800bd12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	2b0c      	cmp	r3, #12
 800bd1a:	d841      	bhi.n	800bda0 <HAL_TIM_IC_Start_IT+0x1cc>
 800bd1c:	a201      	add	r2, pc, #4	; (adr r2, 800bd24 <HAL_TIM_IC_Start_IT+0x150>)
 800bd1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd22:	bf00      	nop
 800bd24:	0800bd59 	.word	0x0800bd59
 800bd28:	0800bda1 	.word	0x0800bda1
 800bd2c:	0800bda1 	.word	0x0800bda1
 800bd30:	0800bda1 	.word	0x0800bda1
 800bd34:	0800bd6b 	.word	0x0800bd6b
 800bd38:	0800bda1 	.word	0x0800bda1
 800bd3c:	0800bda1 	.word	0x0800bda1
 800bd40:	0800bda1 	.word	0x0800bda1
 800bd44:	0800bd7d 	.word	0x0800bd7d
 800bd48:	0800bda1 	.word	0x0800bda1
 800bd4c:	0800bda1 	.word	0x0800bda1
 800bd50:	0800bda1 	.word	0x0800bda1
 800bd54:	0800bd8f 	.word	0x0800bd8f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	68da      	ldr	r2, [r3, #12]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f042 0202 	orr.w	r2, r2, #2
 800bd66:	60da      	str	r2, [r3, #12]
      break;
 800bd68:	e01d      	b.n	800bda6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	68da      	ldr	r2, [r3, #12]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f042 0204 	orr.w	r2, r2, #4
 800bd78:	60da      	str	r2, [r3, #12]
      break;
 800bd7a:	e014      	b.n	800bda6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68da      	ldr	r2, [r3, #12]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f042 0208 	orr.w	r2, r2, #8
 800bd8a:	60da      	str	r2, [r3, #12]
      break;
 800bd8c:	e00b      	b.n	800bda6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	68da      	ldr	r2, [r3, #12]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f042 0210 	orr.w	r2, r2, #16
 800bd9c:	60da      	str	r2, [r3, #12]
      break;
 800bd9e:	e002      	b.n	800bda6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800bda0:	2301      	movs	r3, #1
 800bda2:	73fb      	strb	r3, [r7, #15]
      break;
 800bda4:	bf00      	nop
  }

  if (status == HAL_OK)
 800bda6:	7bfb      	ldrb	r3, [r7, #15]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d14e      	bne.n	800be4a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	6839      	ldr	r1, [r7, #0]
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f001 f91b 	bl	800cff0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a25      	ldr	r2, [pc, #148]	; (800be54 <HAL_TIM_IC_Start_IT+0x280>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d022      	beq.n	800be0a <HAL_TIM_IC_Start_IT+0x236>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdcc:	d01d      	beq.n	800be0a <HAL_TIM_IC_Start_IT+0x236>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4a21      	ldr	r2, [pc, #132]	; (800be58 <HAL_TIM_IC_Start_IT+0x284>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d018      	beq.n	800be0a <HAL_TIM_IC_Start_IT+0x236>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a1f      	ldr	r2, [pc, #124]	; (800be5c <HAL_TIM_IC_Start_IT+0x288>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d013      	beq.n	800be0a <HAL_TIM_IC_Start_IT+0x236>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a1e      	ldr	r2, [pc, #120]	; (800be60 <HAL_TIM_IC_Start_IT+0x28c>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d00e      	beq.n	800be0a <HAL_TIM_IC_Start_IT+0x236>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a1c      	ldr	r2, [pc, #112]	; (800be64 <HAL_TIM_IC_Start_IT+0x290>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d009      	beq.n	800be0a <HAL_TIM_IC_Start_IT+0x236>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a1b      	ldr	r2, [pc, #108]	; (800be68 <HAL_TIM_IC_Start_IT+0x294>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d004      	beq.n	800be0a <HAL_TIM_IC_Start_IT+0x236>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a19      	ldr	r2, [pc, #100]	; (800be6c <HAL_TIM_IC_Start_IT+0x298>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d115      	bne.n	800be36 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	689a      	ldr	r2, [r3, #8]
 800be10:	4b17      	ldr	r3, [pc, #92]	; (800be70 <HAL_TIM_IC_Start_IT+0x29c>)
 800be12:	4013      	ands	r3, r2
 800be14:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	2b06      	cmp	r3, #6
 800be1a:	d015      	beq.n	800be48 <HAL_TIM_IC_Start_IT+0x274>
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be22:	d011      	beq.n	800be48 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f042 0201 	orr.w	r2, r2, #1
 800be32:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be34:	e008      	b.n	800be48 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f042 0201 	orr.w	r2, r2, #1
 800be44:	601a      	str	r2, [r3, #0]
 800be46:	e000      	b.n	800be4a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be48:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800be4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3710      	adds	r7, #16
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	40010000 	.word	0x40010000
 800be58:	40000400 	.word	0x40000400
 800be5c:	40000800 	.word	0x40000800
 800be60:	40000c00 	.word	0x40000c00
 800be64:	40010400 	.word	0x40010400
 800be68:	40014000 	.word	0x40014000
 800be6c:	40001800 	.word	0x40001800
 800be70:	00010007 	.word	0x00010007

0800be74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	691b      	ldr	r3, [r3, #16]
 800be82:	f003 0302 	and.w	r3, r3, #2
 800be86:	2b02      	cmp	r3, #2
 800be88:	d122      	bne.n	800bed0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	f003 0302 	and.w	r3, r3, #2
 800be94:	2b02      	cmp	r3, #2
 800be96:	d11b      	bne.n	800bed0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f06f 0202 	mvn.w	r2, #2
 800bea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2201      	movs	r2, #1
 800bea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	699b      	ldr	r3, [r3, #24]
 800beae:	f003 0303 	and.w	r3, r3, #3
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d003      	beq.n	800bebe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f7f7 f88e 	bl	8002fd8 <HAL_TIM_IC_CaptureCallback>
 800bebc:	e005      	b.n	800beca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 fbb6 	bl	800c630 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 fbbd 	bl	800c644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2200      	movs	r2, #0
 800bece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	691b      	ldr	r3, [r3, #16]
 800bed6:	f003 0304 	and.w	r3, r3, #4
 800beda:	2b04      	cmp	r3, #4
 800bedc:	d122      	bne.n	800bf24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	f003 0304 	and.w	r3, r3, #4
 800bee8:	2b04      	cmp	r3, #4
 800beea:	d11b      	bne.n	800bf24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f06f 0204 	mvn.w	r2, #4
 800bef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2202      	movs	r2, #2
 800befa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	699b      	ldr	r3, [r3, #24]
 800bf02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d003      	beq.n	800bf12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f7f7 f864 	bl	8002fd8 <HAL_TIM_IC_CaptureCallback>
 800bf10:	e005      	b.n	800bf1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 fb8c 	bl	800c630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 fb93 	bl	800c644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2200      	movs	r2, #0
 800bf22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	691b      	ldr	r3, [r3, #16]
 800bf2a:	f003 0308 	and.w	r3, r3, #8
 800bf2e:	2b08      	cmp	r3, #8
 800bf30:	d122      	bne.n	800bf78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	f003 0308 	and.w	r3, r3, #8
 800bf3c:	2b08      	cmp	r3, #8
 800bf3e:	d11b      	bne.n	800bf78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f06f 0208 	mvn.w	r2, #8
 800bf48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2204      	movs	r2, #4
 800bf4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	69db      	ldr	r3, [r3, #28]
 800bf56:	f003 0303 	and.w	r3, r3, #3
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d003      	beq.n	800bf66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f7f7 f83a 	bl	8002fd8 <HAL_TIM_IC_CaptureCallback>
 800bf64:	e005      	b.n	800bf72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 fb62 	bl	800c630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fb69 	bl	800c644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	691b      	ldr	r3, [r3, #16]
 800bf7e:	f003 0310 	and.w	r3, r3, #16
 800bf82:	2b10      	cmp	r3, #16
 800bf84:	d122      	bne.n	800bfcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	f003 0310 	and.w	r3, r3, #16
 800bf90:	2b10      	cmp	r3, #16
 800bf92:	d11b      	bne.n	800bfcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f06f 0210 	mvn.w	r2, #16
 800bf9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2208      	movs	r2, #8
 800bfa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	69db      	ldr	r3, [r3, #28]
 800bfaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d003      	beq.n	800bfba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f7f7 f810 	bl	8002fd8 <HAL_TIM_IC_CaptureCallback>
 800bfb8:	e005      	b.n	800bfc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 fb38 	bl	800c630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 fb3f 	bl	800c644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	f003 0301 	and.w	r3, r3, #1
 800bfd6:	2b01      	cmp	r3, #1
 800bfd8:	d10e      	bne.n	800bff8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	68db      	ldr	r3, [r3, #12]
 800bfe0:	f003 0301 	and.w	r3, r3, #1
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d107      	bne.n	800bff8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f06f 0201 	mvn.w	r2, #1
 800bff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f7f7 fdd9 	bl	8003baa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	691b      	ldr	r3, [r3, #16]
 800bffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c002:	2b80      	cmp	r3, #128	; 0x80
 800c004:	d10e      	bne.n	800c024 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	68db      	ldr	r3, [r3, #12]
 800c00c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c010:	2b80      	cmp	r3, #128	; 0x80
 800c012:	d107      	bne.n	800c024 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c01c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f001 f922 	bl	800d268 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	691b      	ldr	r3, [r3, #16]
 800c02a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c02e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c032:	d10e      	bne.n	800c052 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c03e:	2b80      	cmp	r3, #128	; 0x80
 800c040:	d107      	bne.n	800c052 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c04a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f001 f915 	bl	800d27c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	691b      	ldr	r3, [r3, #16]
 800c058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c05c:	2b40      	cmp	r3, #64	; 0x40
 800c05e:	d10e      	bne.n	800c07e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c06a:	2b40      	cmp	r3, #64	; 0x40
 800c06c:	d107      	bne.n	800c07e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 faed 	bl	800c658 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	691b      	ldr	r3, [r3, #16]
 800c084:	f003 0320 	and.w	r3, r3, #32
 800c088:	2b20      	cmp	r3, #32
 800c08a:	d10e      	bne.n	800c0aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	f003 0320 	and.w	r3, r3, #32
 800c096:	2b20      	cmp	r3, #32
 800c098:	d107      	bne.n	800c0aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f06f 0220 	mvn.w	r2, #32
 800c0a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f001 f8d5 	bl	800d254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c0aa:	bf00      	nop
 800c0ac:	3708      	adds	r7, #8
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b086      	sub	sp, #24
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	60f8      	str	r0, [r7, #12]
 800c0ba:	60b9      	str	r1, [r7, #8]
 800c0bc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d101      	bne.n	800c0d0 <HAL_TIM_IC_ConfigChannel+0x1e>
 800c0cc:	2302      	movs	r3, #2
 800c0ce:	e088      	b.n	800c1e2 <HAL_TIM_IC_ConfigChannel+0x130>
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d11b      	bne.n	800c116 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800c0ee:	f000 fdbb 	bl	800cc68 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	699a      	ldr	r2, [r3, #24]
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f022 020c 	bic.w	r2, r2, #12
 800c100:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	6999      	ldr	r1, [r3, #24]
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	689a      	ldr	r2, [r3, #8]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	430a      	orrs	r2, r1
 800c112:	619a      	str	r2, [r3, #24]
 800c114:	e060      	b.n	800c1d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2b04      	cmp	r3, #4
 800c11a:	d11c      	bne.n	800c156 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800c12c:	f000 fe3f 	bl	800cdae <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	699a      	ldr	r2, [r3, #24]
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c13e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	6999      	ldr	r1, [r3, #24]
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	021a      	lsls	r2, r3, #8
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	430a      	orrs	r2, r1
 800c152:	619a      	str	r2, [r3, #24]
 800c154:	e040      	b.n	800c1d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2b08      	cmp	r3, #8
 800c15a:	d11b      	bne.n	800c194 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800c16c:	f000 fe8c 	bl	800ce88 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	69da      	ldr	r2, [r3, #28]
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f022 020c 	bic.w	r2, r2, #12
 800c17e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	69d9      	ldr	r1, [r3, #28]
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	689a      	ldr	r2, [r3, #8]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	430a      	orrs	r2, r1
 800c190:	61da      	str	r2, [r3, #28]
 800c192:	e021      	b.n	800c1d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2b0c      	cmp	r3, #12
 800c198:	d11c      	bne.n	800c1d4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800c1aa:	f000 fea9 	bl	800cf00 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	69da      	ldr	r2, [r3, #28]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c1bc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	69d9      	ldr	r1, [r3, #28]
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	689b      	ldr	r3, [r3, #8]
 800c1c8:	021a      	lsls	r2, r3, #8
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	430a      	orrs	r2, r1
 800c1d0:	61da      	str	r2, [r3, #28]
 800c1d2:	e001      	b.n	800c1d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c1e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3718      	adds	r7, #24
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
	...

0800c1ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b086      	sub	sp, #24
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c202:	2b01      	cmp	r3, #1
 800c204:	d101      	bne.n	800c20a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c206:	2302      	movs	r3, #2
 800c208:	e0ff      	b.n	800c40a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2201      	movs	r2, #1
 800c20e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2b14      	cmp	r3, #20
 800c216:	f200 80f0 	bhi.w	800c3fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c21a:	a201      	add	r2, pc, #4	; (adr r2, 800c220 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c220:	0800c275 	.word	0x0800c275
 800c224:	0800c3fb 	.word	0x0800c3fb
 800c228:	0800c3fb 	.word	0x0800c3fb
 800c22c:	0800c3fb 	.word	0x0800c3fb
 800c230:	0800c2b5 	.word	0x0800c2b5
 800c234:	0800c3fb 	.word	0x0800c3fb
 800c238:	0800c3fb 	.word	0x0800c3fb
 800c23c:	0800c3fb 	.word	0x0800c3fb
 800c240:	0800c2f7 	.word	0x0800c2f7
 800c244:	0800c3fb 	.word	0x0800c3fb
 800c248:	0800c3fb 	.word	0x0800c3fb
 800c24c:	0800c3fb 	.word	0x0800c3fb
 800c250:	0800c337 	.word	0x0800c337
 800c254:	0800c3fb 	.word	0x0800c3fb
 800c258:	0800c3fb 	.word	0x0800c3fb
 800c25c:	0800c3fb 	.word	0x0800c3fb
 800c260:	0800c379 	.word	0x0800c379
 800c264:	0800c3fb 	.word	0x0800c3fb
 800c268:	0800c3fb 	.word	0x0800c3fb
 800c26c:	0800c3fb 	.word	0x0800c3fb
 800c270:	0800c3b9 	.word	0x0800c3b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	68b9      	ldr	r1, [r7, #8]
 800c27a:	4618      	mov	r0, r3
 800c27c:	f000 fa96 	bl	800c7ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	699a      	ldr	r2, [r3, #24]
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f042 0208 	orr.w	r2, r2, #8
 800c28e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	699a      	ldr	r2, [r3, #24]
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f022 0204 	bic.w	r2, r2, #4
 800c29e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	6999      	ldr	r1, [r3, #24]
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	691a      	ldr	r2, [r3, #16]
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	430a      	orrs	r2, r1
 800c2b0:	619a      	str	r2, [r3, #24]
      break;
 800c2b2:	e0a5      	b.n	800c400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	68b9      	ldr	r1, [r7, #8]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f000 fae8 	bl	800c890 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	699a      	ldr	r2, [r3, #24]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c2ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	699a      	ldr	r2, [r3, #24]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c2de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	6999      	ldr	r1, [r3, #24]
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	691b      	ldr	r3, [r3, #16]
 800c2ea:	021a      	lsls	r2, r3, #8
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	430a      	orrs	r2, r1
 800c2f2:	619a      	str	r2, [r3, #24]
      break;
 800c2f4:	e084      	b.n	800c400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	68b9      	ldr	r1, [r7, #8]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f000 fb3f 	bl	800c980 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	69da      	ldr	r2, [r3, #28]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f042 0208 	orr.w	r2, r2, #8
 800c310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	69da      	ldr	r2, [r3, #28]
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f022 0204 	bic.w	r2, r2, #4
 800c320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	69d9      	ldr	r1, [r3, #28]
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	691a      	ldr	r2, [r3, #16]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	430a      	orrs	r2, r1
 800c332:	61da      	str	r2, [r3, #28]
      break;
 800c334:	e064      	b.n	800c400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	68b9      	ldr	r1, [r7, #8]
 800c33c:	4618      	mov	r0, r3
 800c33e:	f000 fb95 	bl	800ca6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	69da      	ldr	r2, [r3, #28]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	69da      	ldr	r2, [r3, #28]
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	69d9      	ldr	r1, [r3, #28]
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	691b      	ldr	r3, [r3, #16]
 800c36c:	021a      	lsls	r2, r3, #8
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	430a      	orrs	r2, r1
 800c374:	61da      	str	r2, [r3, #28]
      break;
 800c376:	e043      	b.n	800c400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	68b9      	ldr	r1, [r7, #8]
 800c37e:	4618      	mov	r0, r3
 800c380:	f000 fbcc 	bl	800cb1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f042 0208 	orr.w	r2, r2, #8
 800c392:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f022 0204 	bic.w	r2, r2, #4
 800c3a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	691a      	ldr	r2, [r3, #16]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	430a      	orrs	r2, r1
 800c3b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c3b6:	e023      	b.n	800c400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	68b9      	ldr	r1, [r7, #8]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f000 fbfe 	bl	800cbc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	691b      	ldr	r3, [r3, #16]
 800c3ee:	021a      	lsls	r2, r3, #8
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	430a      	orrs	r2, r1
 800c3f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c3f8:	e002      	b.n	800c400 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	75fb      	strb	r3, [r7, #23]
      break;
 800c3fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2200      	movs	r2, #0
 800c404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c408:	7dfb      	ldrb	r3, [r7, #23]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3718      	adds	r7, #24
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop

0800c414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c41e:	2300      	movs	r3, #0
 800c420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d101      	bne.n	800c430 <HAL_TIM_ConfigClockSource+0x1c>
 800c42c:	2302      	movs	r3, #2
 800c42e:	e0b4      	b.n	800c59a <HAL_TIM_ConfigClockSource+0x186>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2201      	movs	r2, #1
 800c434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2202      	movs	r2, #2
 800c43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c448:	68ba      	ldr	r2, [r7, #8]
 800c44a:	4b56      	ldr	r3, [pc, #344]	; (800c5a4 <HAL_TIM_ConfigClockSource+0x190>)
 800c44c:	4013      	ands	r3, r2
 800c44e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	68ba      	ldr	r2, [r7, #8]
 800c45e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c468:	d03e      	beq.n	800c4e8 <HAL_TIM_ConfigClockSource+0xd4>
 800c46a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c46e:	f200 8087 	bhi.w	800c580 <HAL_TIM_ConfigClockSource+0x16c>
 800c472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c476:	f000 8086 	beq.w	800c586 <HAL_TIM_ConfigClockSource+0x172>
 800c47a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c47e:	d87f      	bhi.n	800c580 <HAL_TIM_ConfigClockSource+0x16c>
 800c480:	2b70      	cmp	r3, #112	; 0x70
 800c482:	d01a      	beq.n	800c4ba <HAL_TIM_ConfigClockSource+0xa6>
 800c484:	2b70      	cmp	r3, #112	; 0x70
 800c486:	d87b      	bhi.n	800c580 <HAL_TIM_ConfigClockSource+0x16c>
 800c488:	2b60      	cmp	r3, #96	; 0x60
 800c48a:	d050      	beq.n	800c52e <HAL_TIM_ConfigClockSource+0x11a>
 800c48c:	2b60      	cmp	r3, #96	; 0x60
 800c48e:	d877      	bhi.n	800c580 <HAL_TIM_ConfigClockSource+0x16c>
 800c490:	2b50      	cmp	r3, #80	; 0x50
 800c492:	d03c      	beq.n	800c50e <HAL_TIM_ConfigClockSource+0xfa>
 800c494:	2b50      	cmp	r3, #80	; 0x50
 800c496:	d873      	bhi.n	800c580 <HAL_TIM_ConfigClockSource+0x16c>
 800c498:	2b40      	cmp	r3, #64	; 0x40
 800c49a:	d058      	beq.n	800c54e <HAL_TIM_ConfigClockSource+0x13a>
 800c49c:	2b40      	cmp	r3, #64	; 0x40
 800c49e:	d86f      	bhi.n	800c580 <HAL_TIM_ConfigClockSource+0x16c>
 800c4a0:	2b30      	cmp	r3, #48	; 0x30
 800c4a2:	d064      	beq.n	800c56e <HAL_TIM_ConfigClockSource+0x15a>
 800c4a4:	2b30      	cmp	r3, #48	; 0x30
 800c4a6:	d86b      	bhi.n	800c580 <HAL_TIM_ConfigClockSource+0x16c>
 800c4a8:	2b20      	cmp	r3, #32
 800c4aa:	d060      	beq.n	800c56e <HAL_TIM_ConfigClockSource+0x15a>
 800c4ac:	2b20      	cmp	r3, #32
 800c4ae:	d867      	bhi.n	800c580 <HAL_TIM_ConfigClockSource+0x16c>
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d05c      	beq.n	800c56e <HAL_TIM_ConfigClockSource+0x15a>
 800c4b4:	2b10      	cmp	r3, #16
 800c4b6:	d05a      	beq.n	800c56e <HAL_TIM_ConfigClockSource+0x15a>
 800c4b8:	e062      	b.n	800c580 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c4ca:	f000 fd71 	bl	800cfb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c4dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	68ba      	ldr	r2, [r7, #8]
 800c4e4:	609a      	str	r2, [r3, #8]
      break;
 800c4e6:	e04f      	b.n	800c588 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c4f8:	f000 fd5a 	bl	800cfb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	689a      	ldr	r2, [r3, #8]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c50a:	609a      	str	r2, [r3, #8]
      break;
 800c50c:	e03c      	b.n	800c588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c51a:	461a      	mov	r2, r3
 800c51c:	f000 fc18 	bl	800cd50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2150      	movs	r1, #80	; 0x50
 800c526:	4618      	mov	r0, r3
 800c528:	f000 fd27 	bl	800cf7a <TIM_ITRx_SetConfig>
      break;
 800c52c:	e02c      	b.n	800c588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c53a:	461a      	mov	r2, r3
 800c53c:	f000 fc74 	bl	800ce28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2160      	movs	r1, #96	; 0x60
 800c546:	4618      	mov	r0, r3
 800c548:	f000 fd17 	bl	800cf7a <TIM_ITRx_SetConfig>
      break;
 800c54c:	e01c      	b.n	800c588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c55a:	461a      	mov	r2, r3
 800c55c:	f000 fbf8 	bl	800cd50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2140      	movs	r1, #64	; 0x40
 800c566:	4618      	mov	r0, r3
 800c568:	f000 fd07 	bl	800cf7a <TIM_ITRx_SetConfig>
      break;
 800c56c:	e00c      	b.n	800c588 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4619      	mov	r1, r3
 800c578:	4610      	mov	r0, r2
 800c57a:	f000 fcfe 	bl	800cf7a <TIM_ITRx_SetConfig>
      break;
 800c57e:	e003      	b.n	800c588 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c580:	2301      	movs	r3, #1
 800c582:	73fb      	strb	r3, [r7, #15]
      break;
 800c584:	e000      	b.n	800c588 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2201      	movs	r2, #1
 800c58c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c598:	7bfb      	ldrb	r3, [r7, #15]
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	fffeff88 	.word	0xfffeff88

0800c5a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b085      	sub	sp, #20
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	2b0c      	cmp	r3, #12
 800c5ba:	d831      	bhi.n	800c620 <HAL_TIM_ReadCapturedValue+0x78>
 800c5bc:	a201      	add	r2, pc, #4	; (adr r2, 800c5c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800c5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c2:	bf00      	nop
 800c5c4:	0800c5f9 	.word	0x0800c5f9
 800c5c8:	0800c621 	.word	0x0800c621
 800c5cc:	0800c621 	.word	0x0800c621
 800c5d0:	0800c621 	.word	0x0800c621
 800c5d4:	0800c603 	.word	0x0800c603
 800c5d8:	0800c621 	.word	0x0800c621
 800c5dc:	0800c621 	.word	0x0800c621
 800c5e0:	0800c621 	.word	0x0800c621
 800c5e4:	0800c60d 	.word	0x0800c60d
 800c5e8:	0800c621 	.word	0x0800c621
 800c5ec:	0800c621 	.word	0x0800c621
 800c5f0:	0800c621 	.word	0x0800c621
 800c5f4:	0800c617 	.word	0x0800c617
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5fe:	60fb      	str	r3, [r7, #12]

      break;
 800c600:	e00f      	b.n	800c622 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c608:	60fb      	str	r3, [r7, #12]

      break;
 800c60a:	e00a      	b.n	800c622 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c612:	60fb      	str	r3, [r7, #12]

      break;
 800c614:	e005      	b.n	800c622 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c61c:	60fb      	str	r3, [r7, #12]

      break;
 800c61e:	e000      	b.n	800c622 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800c620:	bf00      	nop
  }

  return tmpreg;
 800c622:	68fb      	ldr	r3, [r7, #12]
}
 800c624:	4618      	mov	r0, r3
 800c626:	3714      	adds	r7, #20
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c638:	bf00      	nop
 800c63a:	370c      	adds	r7, #12
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c64c:	bf00      	nop
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c660:	bf00      	nop
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr

0800c66c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b085      	sub	sp, #20
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	4a40      	ldr	r2, [pc, #256]	; (800c780 <TIM_Base_SetConfig+0x114>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d013      	beq.n	800c6ac <TIM_Base_SetConfig+0x40>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c68a:	d00f      	beq.n	800c6ac <TIM_Base_SetConfig+0x40>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	4a3d      	ldr	r2, [pc, #244]	; (800c784 <TIM_Base_SetConfig+0x118>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d00b      	beq.n	800c6ac <TIM_Base_SetConfig+0x40>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4a3c      	ldr	r2, [pc, #240]	; (800c788 <TIM_Base_SetConfig+0x11c>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d007      	beq.n	800c6ac <TIM_Base_SetConfig+0x40>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a3b      	ldr	r2, [pc, #236]	; (800c78c <TIM_Base_SetConfig+0x120>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d003      	beq.n	800c6ac <TIM_Base_SetConfig+0x40>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4a3a      	ldr	r2, [pc, #232]	; (800c790 <TIM_Base_SetConfig+0x124>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d108      	bne.n	800c6be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	68fa      	ldr	r2, [r7, #12]
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4a2f      	ldr	r2, [pc, #188]	; (800c780 <TIM_Base_SetConfig+0x114>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d02b      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6cc:	d027      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4a2c      	ldr	r2, [pc, #176]	; (800c784 <TIM_Base_SetConfig+0x118>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d023      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4a2b      	ldr	r2, [pc, #172]	; (800c788 <TIM_Base_SetConfig+0x11c>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d01f      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4a2a      	ldr	r2, [pc, #168]	; (800c78c <TIM_Base_SetConfig+0x120>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d01b      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	4a29      	ldr	r2, [pc, #164]	; (800c790 <TIM_Base_SetConfig+0x124>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d017      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4a28      	ldr	r2, [pc, #160]	; (800c794 <TIM_Base_SetConfig+0x128>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d013      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a27      	ldr	r2, [pc, #156]	; (800c798 <TIM_Base_SetConfig+0x12c>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d00f      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a26      	ldr	r2, [pc, #152]	; (800c79c <TIM_Base_SetConfig+0x130>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d00b      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4a25      	ldr	r2, [pc, #148]	; (800c7a0 <TIM_Base_SetConfig+0x134>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d007      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4a24      	ldr	r2, [pc, #144]	; (800c7a4 <TIM_Base_SetConfig+0x138>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d003      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	4a23      	ldr	r2, [pc, #140]	; (800c7a8 <TIM_Base_SetConfig+0x13c>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d108      	bne.n	800c730 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	68fa      	ldr	r2, [r7, #12]
 800c72c:	4313      	orrs	r3, r2
 800c72e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	695b      	ldr	r3, [r3, #20]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	689a      	ldr	r2, [r3, #8]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	4a0a      	ldr	r2, [pc, #40]	; (800c780 <TIM_Base_SetConfig+0x114>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d003      	beq.n	800c764 <TIM_Base_SetConfig+0xf8>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	4a0c      	ldr	r2, [pc, #48]	; (800c790 <TIM_Base_SetConfig+0x124>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d103      	bne.n	800c76c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	691a      	ldr	r2, [r3, #16]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2201      	movs	r2, #1
 800c770:	615a      	str	r2, [r3, #20]
}
 800c772:	bf00      	nop
 800c774:	3714      	adds	r7, #20
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr
 800c77e:	bf00      	nop
 800c780:	40010000 	.word	0x40010000
 800c784:	40000400 	.word	0x40000400
 800c788:	40000800 	.word	0x40000800
 800c78c:	40000c00 	.word	0x40000c00
 800c790:	40010400 	.word	0x40010400
 800c794:	40014000 	.word	0x40014000
 800c798:	40014400 	.word	0x40014400
 800c79c:	40014800 	.word	0x40014800
 800c7a0:	40001800 	.word	0x40001800
 800c7a4:	40001c00 	.word	0x40001c00
 800c7a8:	40002000 	.word	0x40002000

0800c7ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b087      	sub	sp, #28
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6a1b      	ldr	r3, [r3, #32]
 800c7ba:	f023 0201 	bic.w	r2, r3, #1
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6a1b      	ldr	r3, [r3, #32]
 800c7c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	699b      	ldr	r3, [r3, #24]
 800c7d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c7d4:	68fa      	ldr	r2, [r7, #12]
 800c7d6:	4b2b      	ldr	r3, [pc, #172]	; (800c884 <TIM_OC1_SetConfig+0xd8>)
 800c7d8:	4013      	ands	r3, r2
 800c7da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f023 0303 	bic.w	r3, r3, #3
 800c7e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	f023 0302 	bic.w	r3, r3, #2
 800c7f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	689b      	ldr	r3, [r3, #8]
 800c7fa:	697a      	ldr	r2, [r7, #20]
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	4a21      	ldr	r2, [pc, #132]	; (800c888 <TIM_OC1_SetConfig+0xdc>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d003      	beq.n	800c810 <TIM_OC1_SetConfig+0x64>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	4a20      	ldr	r2, [pc, #128]	; (800c88c <TIM_OC1_SetConfig+0xe0>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d10c      	bne.n	800c82a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	f023 0308 	bic.w	r3, r3, #8
 800c816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	697a      	ldr	r2, [r7, #20]
 800c81e:	4313      	orrs	r3, r2
 800c820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	f023 0304 	bic.w	r3, r3, #4
 800c828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	4a16      	ldr	r2, [pc, #88]	; (800c888 <TIM_OC1_SetConfig+0xdc>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d003      	beq.n	800c83a <TIM_OC1_SetConfig+0x8e>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4a15      	ldr	r2, [pc, #84]	; (800c88c <TIM_OC1_SetConfig+0xe0>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d111      	bne.n	800c85e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	695b      	ldr	r3, [r3, #20]
 800c84e:	693a      	ldr	r2, [r7, #16]
 800c850:	4313      	orrs	r3, r2
 800c852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	699b      	ldr	r3, [r3, #24]
 800c858:	693a      	ldr	r2, [r7, #16]
 800c85a:	4313      	orrs	r3, r2
 800c85c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	693a      	ldr	r2, [r7, #16]
 800c862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	68fa      	ldr	r2, [r7, #12]
 800c868:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	685a      	ldr	r2, [r3, #4]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	697a      	ldr	r2, [r7, #20]
 800c876:	621a      	str	r2, [r3, #32]
}
 800c878:	bf00      	nop
 800c87a:	371c      	adds	r7, #28
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr
 800c884:	fffeff8f 	.word	0xfffeff8f
 800c888:	40010000 	.word	0x40010000
 800c88c:	40010400 	.word	0x40010400

0800c890 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c890:	b480      	push	{r7}
 800c892:	b087      	sub	sp, #28
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6a1b      	ldr	r3, [r3, #32]
 800c89e:	f023 0210 	bic.w	r2, r3, #16
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6a1b      	ldr	r3, [r3, #32]
 800c8aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	699b      	ldr	r3, [r3, #24]
 800c8b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c8b8:	68fa      	ldr	r2, [r7, #12]
 800c8ba:	4b2e      	ldr	r3, [pc, #184]	; (800c974 <TIM_OC2_SetConfig+0xe4>)
 800c8bc:	4013      	ands	r3, r2
 800c8be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	021b      	lsls	r3, r3, #8
 800c8ce:	68fa      	ldr	r2, [r7, #12]
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	f023 0320 	bic.w	r3, r3, #32
 800c8da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	689b      	ldr	r3, [r3, #8]
 800c8e0:	011b      	lsls	r3, r3, #4
 800c8e2:	697a      	ldr	r2, [r7, #20]
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	4a23      	ldr	r2, [pc, #140]	; (800c978 <TIM_OC2_SetConfig+0xe8>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d003      	beq.n	800c8f8 <TIM_OC2_SetConfig+0x68>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	4a22      	ldr	r2, [pc, #136]	; (800c97c <TIM_OC2_SetConfig+0xec>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d10d      	bne.n	800c914 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	68db      	ldr	r3, [r3, #12]
 800c904:	011b      	lsls	r3, r3, #4
 800c906:	697a      	ldr	r2, [r7, #20]
 800c908:	4313      	orrs	r3, r2
 800c90a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c912:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	4a18      	ldr	r2, [pc, #96]	; (800c978 <TIM_OC2_SetConfig+0xe8>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d003      	beq.n	800c924 <TIM_OC2_SetConfig+0x94>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	4a17      	ldr	r2, [pc, #92]	; (800c97c <TIM_OC2_SetConfig+0xec>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d113      	bne.n	800c94c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c92a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c932:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	695b      	ldr	r3, [r3, #20]
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	693a      	ldr	r2, [r7, #16]
 800c93c:	4313      	orrs	r3, r2
 800c93e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	699b      	ldr	r3, [r3, #24]
 800c944:	009b      	lsls	r3, r3, #2
 800c946:	693a      	ldr	r2, [r7, #16]
 800c948:	4313      	orrs	r3, r2
 800c94a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	693a      	ldr	r2, [r7, #16]
 800c950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	68fa      	ldr	r2, [r7, #12]
 800c956:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	685a      	ldr	r2, [r3, #4]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	697a      	ldr	r2, [r7, #20]
 800c964:	621a      	str	r2, [r3, #32]
}
 800c966:	bf00      	nop
 800c968:	371c      	adds	r7, #28
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	feff8fff 	.word	0xfeff8fff
 800c978:	40010000 	.word	0x40010000
 800c97c:	40010400 	.word	0x40010400

0800c980 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c980:	b480      	push	{r7}
 800c982:	b087      	sub	sp, #28
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6a1b      	ldr	r3, [r3, #32]
 800c98e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6a1b      	ldr	r3, [r3, #32]
 800c99a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	69db      	ldr	r3, [r3, #28]
 800c9a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	4b2d      	ldr	r3, [pc, #180]	; (800ca60 <TIM_OC3_SetConfig+0xe0>)
 800c9ac:	4013      	ands	r3, r2
 800c9ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f023 0303 	bic.w	r3, r3, #3
 800c9b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	68fa      	ldr	r2, [r7, #12]
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c9c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	689b      	ldr	r3, [r3, #8]
 800c9ce:	021b      	lsls	r3, r3, #8
 800c9d0:	697a      	ldr	r2, [r7, #20]
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	4a22      	ldr	r2, [pc, #136]	; (800ca64 <TIM_OC3_SetConfig+0xe4>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d003      	beq.n	800c9e6 <TIM_OC3_SetConfig+0x66>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	4a21      	ldr	r2, [pc, #132]	; (800ca68 <TIM_OC3_SetConfig+0xe8>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d10d      	bne.n	800ca02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c9ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	021b      	lsls	r3, r3, #8
 800c9f4:	697a      	ldr	r2, [r7, #20]
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ca00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4a17      	ldr	r2, [pc, #92]	; (800ca64 <TIM_OC3_SetConfig+0xe4>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d003      	beq.n	800ca12 <TIM_OC3_SetConfig+0x92>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	4a16      	ldr	r2, [pc, #88]	; (800ca68 <TIM_OC3_SetConfig+0xe8>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d113      	bne.n	800ca3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ca20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	695b      	ldr	r3, [r3, #20]
 800ca26:	011b      	lsls	r3, r3, #4
 800ca28:	693a      	ldr	r2, [r7, #16]
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	699b      	ldr	r3, [r3, #24]
 800ca32:	011b      	lsls	r3, r3, #4
 800ca34:	693a      	ldr	r2, [r7, #16]
 800ca36:	4313      	orrs	r3, r2
 800ca38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	693a      	ldr	r2, [r7, #16]
 800ca3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	68fa      	ldr	r2, [r7, #12]
 800ca44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	685a      	ldr	r2, [r3, #4]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	697a      	ldr	r2, [r7, #20]
 800ca52:	621a      	str	r2, [r3, #32]
}
 800ca54:	bf00      	nop
 800ca56:	371c      	adds	r7, #28
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr
 800ca60:	fffeff8f 	.word	0xfffeff8f
 800ca64:	40010000 	.word	0x40010000
 800ca68:	40010400 	.word	0x40010400

0800ca6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b087      	sub	sp, #28
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6a1b      	ldr	r3, [r3, #32]
 800ca7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6a1b      	ldr	r3, [r3, #32]
 800ca86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	69db      	ldr	r3, [r3, #28]
 800ca92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	4b1e      	ldr	r3, [pc, #120]	; (800cb10 <TIM_OC4_SetConfig+0xa4>)
 800ca98:	4013      	ands	r3, r2
 800ca9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800caa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	021b      	lsls	r3, r3, #8
 800caaa:	68fa      	ldr	r2, [r7, #12]
 800caac:	4313      	orrs	r3, r2
 800caae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	031b      	lsls	r3, r3, #12
 800cabe:	693a      	ldr	r2, [r7, #16]
 800cac0:	4313      	orrs	r3, r2
 800cac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	4a13      	ldr	r2, [pc, #76]	; (800cb14 <TIM_OC4_SetConfig+0xa8>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d003      	beq.n	800cad4 <TIM_OC4_SetConfig+0x68>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	4a12      	ldr	r2, [pc, #72]	; (800cb18 <TIM_OC4_SetConfig+0xac>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d109      	bne.n	800cae8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	695b      	ldr	r3, [r3, #20]
 800cae0:	019b      	lsls	r3, r3, #6
 800cae2:	697a      	ldr	r2, [r7, #20]
 800cae4:	4313      	orrs	r3, r2
 800cae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	697a      	ldr	r2, [r7, #20]
 800caec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	68fa      	ldr	r2, [r7, #12]
 800caf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	685a      	ldr	r2, [r3, #4]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	693a      	ldr	r2, [r7, #16]
 800cb00:	621a      	str	r2, [r3, #32]
}
 800cb02:	bf00      	nop
 800cb04:	371c      	adds	r7, #28
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr
 800cb0e:	bf00      	nop
 800cb10:	feff8fff 	.word	0xfeff8fff
 800cb14:	40010000 	.word	0x40010000
 800cb18:	40010400 	.word	0x40010400

0800cb1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b087      	sub	sp, #28
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6a1b      	ldr	r3, [r3, #32]
 800cb2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6a1b      	ldr	r3, [r3, #32]
 800cb36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cb44:	68fa      	ldr	r2, [r7, #12]
 800cb46:	4b1b      	ldr	r3, [pc, #108]	; (800cbb4 <TIM_OC5_SetConfig+0x98>)
 800cb48:	4013      	ands	r3, r2
 800cb4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	68fa      	ldr	r2, [r7, #12]
 800cb52:	4313      	orrs	r3, r2
 800cb54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cb5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	689b      	ldr	r3, [r3, #8]
 800cb62:	041b      	lsls	r3, r3, #16
 800cb64:	693a      	ldr	r2, [r7, #16]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4a12      	ldr	r2, [pc, #72]	; (800cbb8 <TIM_OC5_SetConfig+0x9c>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d003      	beq.n	800cb7a <TIM_OC5_SetConfig+0x5e>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	4a11      	ldr	r2, [pc, #68]	; (800cbbc <TIM_OC5_SetConfig+0xa0>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d109      	bne.n	800cb8e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cb80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	695b      	ldr	r3, [r3, #20]
 800cb86:	021b      	lsls	r3, r3, #8
 800cb88:	697a      	ldr	r2, [r7, #20]
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	697a      	ldr	r2, [r7, #20]
 800cb92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	68fa      	ldr	r2, [r7, #12]
 800cb98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	685a      	ldr	r2, [r3, #4]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	693a      	ldr	r2, [r7, #16]
 800cba6:	621a      	str	r2, [r3, #32]
}
 800cba8:	bf00      	nop
 800cbaa:	371c      	adds	r7, #28
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr
 800cbb4:	fffeff8f 	.word	0xfffeff8f
 800cbb8:	40010000 	.word	0x40010000
 800cbbc:	40010400 	.word	0x40010400

0800cbc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b087      	sub	sp, #28
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6a1b      	ldr	r3, [r3, #32]
 800cbce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6a1b      	ldr	r3, [r3, #32]
 800cbda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cbe8:	68fa      	ldr	r2, [r7, #12]
 800cbea:	4b1c      	ldr	r3, [pc, #112]	; (800cc5c <TIM_OC6_SetConfig+0x9c>)
 800cbec:	4013      	ands	r3, r2
 800cbee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	021b      	lsls	r3, r3, #8
 800cbf6:	68fa      	ldr	r2, [r7, #12]
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cc02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	689b      	ldr	r3, [r3, #8]
 800cc08:	051b      	lsls	r3, r3, #20
 800cc0a:	693a      	ldr	r2, [r7, #16]
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	4a13      	ldr	r2, [pc, #76]	; (800cc60 <TIM_OC6_SetConfig+0xa0>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d003      	beq.n	800cc20 <TIM_OC6_SetConfig+0x60>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	4a12      	ldr	r2, [pc, #72]	; (800cc64 <TIM_OC6_SetConfig+0xa4>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d109      	bne.n	800cc34 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cc26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	695b      	ldr	r3, [r3, #20]
 800cc2c:	029b      	lsls	r3, r3, #10
 800cc2e:	697a      	ldr	r2, [r7, #20]
 800cc30:	4313      	orrs	r3, r2
 800cc32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	697a      	ldr	r2, [r7, #20]
 800cc38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	68fa      	ldr	r2, [r7, #12]
 800cc3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	685a      	ldr	r2, [r3, #4]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	693a      	ldr	r2, [r7, #16]
 800cc4c:	621a      	str	r2, [r3, #32]
}
 800cc4e:	bf00      	nop
 800cc50:	371c      	adds	r7, #28
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr
 800cc5a:	bf00      	nop
 800cc5c:	feff8fff 	.word	0xfeff8fff
 800cc60:	40010000 	.word	0x40010000
 800cc64:	40010400 	.word	0x40010400

0800cc68 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b087      	sub	sp, #28
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
 800cc74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	6a1b      	ldr	r3, [r3, #32]
 800cc7a:	f023 0201 	bic.w	r2, r3, #1
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	699b      	ldr	r3, [r3, #24]
 800cc86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	6a1b      	ldr	r3, [r3, #32]
 800cc8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	4a28      	ldr	r2, [pc, #160]	; (800cd34 <TIM_TI1_SetConfig+0xcc>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d01b      	beq.n	800ccce <TIM_TI1_SetConfig+0x66>
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc9c:	d017      	beq.n	800ccce <TIM_TI1_SetConfig+0x66>
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	4a25      	ldr	r2, [pc, #148]	; (800cd38 <TIM_TI1_SetConfig+0xd0>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d013      	beq.n	800ccce <TIM_TI1_SetConfig+0x66>
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	4a24      	ldr	r2, [pc, #144]	; (800cd3c <TIM_TI1_SetConfig+0xd4>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d00f      	beq.n	800ccce <TIM_TI1_SetConfig+0x66>
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	4a23      	ldr	r2, [pc, #140]	; (800cd40 <TIM_TI1_SetConfig+0xd8>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d00b      	beq.n	800ccce <TIM_TI1_SetConfig+0x66>
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	4a22      	ldr	r2, [pc, #136]	; (800cd44 <TIM_TI1_SetConfig+0xdc>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d007      	beq.n	800ccce <TIM_TI1_SetConfig+0x66>
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	4a21      	ldr	r2, [pc, #132]	; (800cd48 <TIM_TI1_SetConfig+0xe0>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d003      	beq.n	800ccce <TIM_TI1_SetConfig+0x66>
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	4a20      	ldr	r2, [pc, #128]	; (800cd4c <TIM_TI1_SetConfig+0xe4>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d101      	bne.n	800ccd2 <TIM_TI1_SetConfig+0x6a>
 800ccce:	2301      	movs	r3, #1
 800ccd0:	e000      	b.n	800ccd4 <TIM_TI1_SetConfig+0x6c>
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d008      	beq.n	800ccea <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	f023 0303 	bic.w	r3, r3, #3
 800ccde:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800cce0:	697a      	ldr	r2, [r7, #20]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	4313      	orrs	r3, r2
 800cce6:	617b      	str	r3, [r7, #20]
 800cce8:	e003      	b.n	800ccf2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	f043 0301 	orr.w	r3, r3, #1
 800ccf0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ccf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	011b      	lsls	r3, r3, #4
 800ccfe:	b2db      	uxtb	r3, r3
 800cd00:	697a      	ldr	r2, [r7, #20]
 800cd02:	4313      	orrs	r3, r2
 800cd04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	f023 030a 	bic.w	r3, r3, #10
 800cd0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	f003 030a 	and.w	r3, r3, #10
 800cd14:	693a      	ldr	r2, [r7, #16]
 800cd16:	4313      	orrs	r3, r2
 800cd18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	697a      	ldr	r2, [r7, #20]
 800cd1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	693a      	ldr	r2, [r7, #16]
 800cd24:	621a      	str	r2, [r3, #32]
}
 800cd26:	bf00      	nop
 800cd28:	371c      	adds	r7, #28
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr
 800cd32:	bf00      	nop
 800cd34:	40010000 	.word	0x40010000
 800cd38:	40000400 	.word	0x40000400
 800cd3c:	40000800 	.word	0x40000800
 800cd40:	40000c00 	.word	0x40000c00
 800cd44:	40010400 	.word	0x40010400
 800cd48:	40014000 	.word	0x40014000
 800cd4c:	40001800 	.word	0x40001800

0800cd50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd50:	b480      	push	{r7}
 800cd52:	b087      	sub	sp, #28
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	6a1b      	ldr	r3, [r3, #32]
 800cd60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	6a1b      	ldr	r3, [r3, #32]
 800cd66:	f023 0201 	bic.w	r2, r3, #1
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	699b      	ldr	r3, [r3, #24]
 800cd72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cd7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	011b      	lsls	r3, r3, #4
 800cd80:	693a      	ldr	r2, [r7, #16]
 800cd82:	4313      	orrs	r3, r2
 800cd84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	f023 030a 	bic.w	r3, r3, #10
 800cd8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cd8e:	697a      	ldr	r2, [r7, #20]
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	4313      	orrs	r3, r2
 800cd94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	693a      	ldr	r2, [r7, #16]
 800cd9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	697a      	ldr	r2, [r7, #20]
 800cda0:	621a      	str	r2, [r3, #32]
}
 800cda2:	bf00      	nop
 800cda4:	371c      	adds	r7, #28
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr

0800cdae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cdae:	b480      	push	{r7}
 800cdb0:	b087      	sub	sp, #28
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	60f8      	str	r0, [r7, #12]
 800cdb6:	60b9      	str	r1, [r7, #8]
 800cdb8:	607a      	str	r2, [r7, #4]
 800cdba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	6a1b      	ldr	r3, [r3, #32]
 800cdc0:	f023 0210 	bic.w	r2, r3, #16
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	699b      	ldr	r3, [r3, #24]
 800cdcc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	6a1b      	ldr	r3, [r3, #32]
 800cdd2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	021b      	lsls	r3, r3, #8
 800cde0:	697a      	ldr	r2, [r7, #20]
 800cde2:	4313      	orrs	r3, r2
 800cde4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cdec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	031b      	lsls	r3, r3, #12
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	697a      	ldr	r2, [r7, #20]
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cdfa:	693b      	ldr	r3, [r7, #16]
 800cdfc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ce00:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	011b      	lsls	r3, r3, #4
 800ce06:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ce0a:	693a      	ldr	r2, [r7, #16]
 800ce0c:	4313      	orrs	r3, r2
 800ce0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	697a      	ldr	r2, [r7, #20]
 800ce14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	693a      	ldr	r2, [r7, #16]
 800ce1a:	621a      	str	r2, [r3, #32]
}
 800ce1c:	bf00      	nop
 800ce1e:	371c      	adds	r7, #28
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b087      	sub	sp, #28
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	60f8      	str	r0, [r7, #12]
 800ce30:	60b9      	str	r1, [r7, #8]
 800ce32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	6a1b      	ldr	r3, [r3, #32]
 800ce38:	f023 0210 	bic.w	r2, r3, #16
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	699b      	ldr	r3, [r3, #24]
 800ce44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	6a1b      	ldr	r3, [r3, #32]
 800ce4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	031b      	lsls	r3, r3, #12
 800ce58:	697a      	ldr	r2, [r7, #20]
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ce64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	011b      	lsls	r3, r3, #4
 800ce6a:	693a      	ldr	r2, [r7, #16]
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	697a      	ldr	r2, [r7, #20]
 800ce74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	693a      	ldr	r2, [r7, #16]
 800ce7a:	621a      	str	r2, [r3, #32]
}
 800ce7c:	bf00      	nop
 800ce7e:	371c      	adds	r7, #28
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr

0800ce88 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b087      	sub	sp, #28
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	60b9      	str	r1, [r7, #8]
 800ce92:	607a      	str	r2, [r7, #4]
 800ce94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	6a1b      	ldr	r3, [r3, #32]
 800ce9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	69db      	ldr	r3, [r3, #28]
 800cea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	6a1b      	ldr	r3, [r3, #32]
 800ceac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	f023 0303 	bic.w	r3, r3, #3
 800ceb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ceb6:	697a      	ldr	r2, [r7, #20]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	4313      	orrs	r3, r2
 800cebc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cec4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	011b      	lsls	r3, r3, #4
 800ceca:	b2db      	uxtb	r3, r3
 800cecc:	697a      	ldr	r2, [r7, #20]
 800cece:	4313      	orrs	r3, r2
 800ced0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ced8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	021b      	lsls	r3, r3, #8
 800cede:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800cee2:	693a      	ldr	r2, [r7, #16]
 800cee4:	4313      	orrs	r3, r2
 800cee6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	697a      	ldr	r2, [r7, #20]
 800ceec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	693a      	ldr	r2, [r7, #16]
 800cef2:	621a      	str	r2, [r3, #32]
}
 800cef4:	bf00      	nop
 800cef6:	371c      	adds	r7, #28
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr

0800cf00 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b087      	sub	sp, #28
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	60b9      	str	r1, [r7, #8]
 800cf0a:	607a      	str	r2, [r7, #4]
 800cf0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	6a1b      	ldr	r3, [r3, #32]
 800cf12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	69db      	ldr	r3, [r3, #28]
 800cf1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	6a1b      	ldr	r3, [r3, #32]
 800cf24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	021b      	lsls	r3, r3, #8
 800cf32:	697a      	ldr	r2, [r7, #20]
 800cf34:	4313      	orrs	r3, r2
 800cf36:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cf3e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	031b      	lsls	r3, r3, #12
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	697a      	ldr	r2, [r7, #20]
 800cf48:	4313      	orrs	r3, r2
 800cf4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800cf52:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	031b      	lsls	r3, r3, #12
 800cf58:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800cf5c:	693a      	ldr	r2, [r7, #16]
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	697a      	ldr	r2, [r7, #20]
 800cf66:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	693a      	ldr	r2, [r7, #16]
 800cf6c:	621a      	str	r2, [r3, #32]
}
 800cf6e:	bf00      	nop
 800cf70:	371c      	adds	r7, #28
 800cf72:	46bd      	mov	sp, r7
 800cf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf78:	4770      	bx	lr

0800cf7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cf7a:	b480      	push	{r7}
 800cf7c:	b085      	sub	sp, #20
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
 800cf82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cf92:	683a      	ldr	r2, [r7, #0]
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	4313      	orrs	r3, r2
 800cf98:	f043 0307 	orr.w	r3, r3, #7
 800cf9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	68fa      	ldr	r2, [r7, #12]
 800cfa2:	609a      	str	r2, [r3, #8]
}
 800cfa4:	bf00      	nop
 800cfa6:	3714      	adds	r7, #20
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b087      	sub	sp, #28
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	60f8      	str	r0, [r7, #12]
 800cfb8:	60b9      	str	r1, [r7, #8]
 800cfba:	607a      	str	r2, [r7, #4]
 800cfbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	689b      	ldr	r3, [r3, #8]
 800cfc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cfca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	021a      	lsls	r2, r3, #8
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	431a      	orrs	r2, r3
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	697a      	ldr	r2, [r7, #20]
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	697a      	ldr	r2, [r7, #20]
 800cfe2:	609a      	str	r2, [r3, #8]
}
 800cfe4:	bf00      	nop
 800cfe6:	371c      	adds	r7, #28
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b087      	sub	sp, #28
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	f003 031f 	and.w	r3, r3, #31
 800d002:	2201      	movs	r2, #1
 800d004:	fa02 f303 	lsl.w	r3, r2, r3
 800d008:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	6a1a      	ldr	r2, [r3, #32]
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	43db      	mvns	r3, r3
 800d012:	401a      	ands	r2, r3
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	6a1a      	ldr	r2, [r3, #32]
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	f003 031f 	and.w	r3, r3, #31
 800d022:	6879      	ldr	r1, [r7, #4]
 800d024:	fa01 f303 	lsl.w	r3, r1, r3
 800d028:	431a      	orrs	r2, r3
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	621a      	str	r2, [r3, #32]
}
 800d02e:	bf00      	nop
 800d030:	371c      	adds	r7, #28
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr
	...

0800d03c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b085      	sub	sp, #20
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	d101      	bne.n	800d054 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d050:	2302      	movs	r3, #2
 800d052:	e06d      	b.n	800d130 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2201      	movs	r2, #1
 800d058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2202      	movs	r2, #2
 800d060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	689b      	ldr	r3, [r3, #8]
 800d072:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a30      	ldr	r2, [pc, #192]	; (800d13c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d004      	beq.n	800d088 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	4a2f      	ldr	r2, [pc, #188]	; (800d140 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d108      	bne.n	800d09a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d08e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	68fa      	ldr	r2, [r7, #12]
 800d096:	4313      	orrs	r3, r2
 800d098:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	68fa      	ldr	r2, [r7, #12]
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	68fa      	ldr	r2, [r7, #12]
 800d0b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a20      	ldr	r2, [pc, #128]	; (800d13c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d022      	beq.n	800d104 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0c6:	d01d      	beq.n	800d104 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a1d      	ldr	r2, [pc, #116]	; (800d144 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d018      	beq.n	800d104 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4a1c      	ldr	r2, [pc, #112]	; (800d148 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d013      	beq.n	800d104 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a1a      	ldr	r2, [pc, #104]	; (800d14c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d00e      	beq.n	800d104 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4a15      	ldr	r2, [pc, #84]	; (800d140 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d009      	beq.n	800d104 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a16      	ldr	r2, [pc, #88]	; (800d150 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d004      	beq.n	800d104 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4a15      	ldr	r2, [pc, #84]	; (800d154 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d100:	4293      	cmp	r3, r2
 800d102:	d10c      	bne.n	800d11e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d10a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	689b      	ldr	r3, [r3, #8]
 800d110:	68ba      	ldr	r2, [r7, #8]
 800d112:	4313      	orrs	r3, r2
 800d114:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	68ba      	ldr	r2, [r7, #8]
 800d11c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2201      	movs	r2, #1
 800d122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2200      	movs	r2, #0
 800d12a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3714      	adds	r7, #20
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr
 800d13c:	40010000 	.word	0x40010000
 800d140:	40010400 	.word	0x40010400
 800d144:	40000400 	.word	0x40000400
 800d148:	40000800 	.word	0x40000800
 800d14c:	40000c00 	.word	0x40000c00
 800d150:	40014000 	.word	0x40014000
 800d154:	40001800 	.word	0x40001800

0800d158 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d158:	b480      	push	{r7}
 800d15a:	b085      	sub	sp, #20
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d162:	2300      	movs	r3, #0
 800d164:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d101      	bne.n	800d174 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d170:	2302      	movs	r3, #2
 800d172:	e065      	b.n	800d240 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2201      	movs	r2, #1
 800d178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	4313      	orrs	r3, r2
 800d188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	689b      	ldr	r3, [r3, #8]
 800d194:	4313      	orrs	r3, r2
 800d196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	685b      	ldr	r3, [r3, #4]
 800d1a2:	4313      	orrs	r3, r2
 800d1a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	691b      	ldr	r3, [r3, #16]
 800d1be:	4313      	orrs	r3, r2
 800d1c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	695b      	ldr	r3, [r3, #20]
 800d1cc:	4313      	orrs	r3, r2
 800d1ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	699b      	ldr	r3, [r3, #24]
 800d1e8:	041b      	lsls	r3, r3, #16
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	4a16      	ldr	r2, [pc, #88]	; (800d24c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d004      	beq.n	800d202 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4a14      	ldr	r2, [pc, #80]	; (800d250 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d115      	bne.n	800d22e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d20c:	051b      	lsls	r3, r3, #20
 800d20e:	4313      	orrs	r3, r2
 800d210:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	69db      	ldr	r3, [r3, #28]
 800d21c:	4313      	orrs	r3, r2
 800d21e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	6a1b      	ldr	r3, [r3, #32]
 800d22a:	4313      	orrs	r3, r2
 800d22c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	68fa      	ldr	r2, [r7, #12]
 800d234:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2200      	movs	r2, #0
 800d23a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d23e:	2300      	movs	r3, #0
}
 800d240:	4618      	mov	r0, r3
 800d242:	3714      	adds	r7, #20
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr
 800d24c:	40010000 	.word	0x40010000
 800d250:	40010400 	.word	0x40010400

0800d254 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d254:	b480      	push	{r7}
 800d256:	b083      	sub	sp, #12
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d25c:	bf00      	nop
 800d25e:	370c      	adds	r7, #12
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr

0800d268 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d270:	bf00      	nop
 800d272:	370c      	adds	r7, #12
 800d274:	46bd      	mov	sp, r7
 800d276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27a:	4770      	bx	lr

0800d27c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b083      	sub	sp, #12
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d284:	bf00      	nop
 800d286:	370c      	adds	r7, #12
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr

0800d290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d101      	bne.n	800d2a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	e040      	b.n	800d324 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d106      	bne.n	800d2b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f7f8 faa0 	bl	80057f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2224      	movs	r2, #36	; 0x24
 800d2bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f022 0201 	bic.w	r2, r2, #1
 800d2cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 fc2a 	bl	800db28 <UART_SetConfig>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	2b01      	cmp	r3, #1
 800d2d8:	d101      	bne.n	800d2de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	e022      	b.n	800d324 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d002      	beq.n	800d2ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f000 fe82 	bl	800dff0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	685a      	ldr	r2, [r3, #4]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d2fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	689a      	ldr	r2, [r3, #8]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d30a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f042 0201 	orr.w	r2, r2, #1
 800d31a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f000 ff09 	bl	800e134 <UART_CheckIdleState>
 800d322:	4603      	mov	r3, r0
}
 800d324:	4618      	mov	r0, r3
 800d326:	3708      	adds	r7, #8
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b08a      	sub	sp, #40	; 0x28
 800d330:	af02      	add	r7, sp, #8
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	60b9      	str	r1, [r7, #8]
 800d336:	603b      	str	r3, [r7, #0]
 800d338:	4613      	mov	r3, r2
 800d33a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d340:	2b20      	cmp	r3, #32
 800d342:	d171      	bne.n	800d428 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d002      	beq.n	800d350 <HAL_UART_Transmit+0x24>
 800d34a:	88fb      	ldrh	r3, [r7, #6]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d101      	bne.n	800d354 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800d350:	2301      	movs	r3, #1
 800d352:	e06a      	b.n	800d42a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2200      	movs	r2, #0
 800d358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2221      	movs	r2, #33	; 0x21
 800d360:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d362:	f7fa fd3b 	bl	8007ddc <HAL_GetTick>
 800d366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	88fa      	ldrh	r2, [r7, #6]
 800d36c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	88fa      	ldrh	r2, [r7, #6]
 800d374:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	689b      	ldr	r3, [r3, #8]
 800d37c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d380:	d108      	bne.n	800d394 <HAL_UART_Transmit+0x68>
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	691b      	ldr	r3, [r3, #16]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d104      	bne.n	800d394 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800d38a:	2300      	movs	r3, #0
 800d38c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	61bb      	str	r3, [r7, #24]
 800d392:	e003      	b.n	800d39c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d398:	2300      	movs	r3, #0
 800d39a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d39c:	e02c      	b.n	800d3f8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	9300      	str	r3, [sp, #0]
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	2180      	movs	r1, #128	; 0x80
 800d3a8:	68f8      	ldr	r0, [r7, #12]
 800d3aa:	f000 fefa 	bl	800e1a2 <UART_WaitOnFlagUntilTimeout>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d001      	beq.n	800d3b8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800d3b4:	2303      	movs	r3, #3
 800d3b6:	e038      	b.n	800d42a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800d3b8:	69fb      	ldr	r3, [r7, #28]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d10b      	bne.n	800d3d6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d3be:	69bb      	ldr	r3, [r7, #24]
 800d3c0:	881b      	ldrh	r3, [r3, #0]
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d3cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	3302      	adds	r3, #2
 800d3d2:	61bb      	str	r3, [r7, #24]
 800d3d4:	e007      	b.n	800d3e6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d3d6:	69fb      	ldr	r3, [r7, #28]
 800d3d8:	781a      	ldrb	r2, [r3, #0]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	3b01      	subs	r3, #1
 800d3f0:	b29a      	uxth	r2, r3
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d3fe:	b29b      	uxth	r3, r3
 800d400:	2b00      	cmp	r3, #0
 800d402:	d1cc      	bne.n	800d39e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	9300      	str	r3, [sp, #0]
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	2200      	movs	r2, #0
 800d40c:	2140      	movs	r1, #64	; 0x40
 800d40e:	68f8      	ldr	r0, [r7, #12]
 800d410:	f000 fec7 	bl	800e1a2 <UART_WaitOnFlagUntilTimeout>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d001      	beq.n	800d41e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800d41a:	2303      	movs	r3, #3
 800d41c:	e005      	b.n	800d42a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	2220      	movs	r2, #32
 800d422:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800d424:	2300      	movs	r3, #0
 800d426:	e000      	b.n	800d42a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800d428:	2302      	movs	r3, #2
  }
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3720      	adds	r7, #32
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}

0800d432 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d432:	b580      	push	{r7, lr}
 800d434:	b08a      	sub	sp, #40	; 0x28
 800d436:	af00      	add	r7, sp, #0
 800d438:	60f8      	str	r0, [r7, #12]
 800d43a:	60b9      	str	r1, [r7, #8]
 800d43c:	4613      	mov	r3, r2
 800d43e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d446:	2b20      	cmp	r3, #32
 800d448:	d132      	bne.n	800d4b0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d002      	beq.n	800d456 <HAL_UART_Receive_IT+0x24>
 800d450:	88fb      	ldrh	r3, [r7, #6]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d101      	bne.n	800d45a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d456:	2301      	movs	r3, #1
 800d458:	e02b      	b.n	800d4b2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2200      	movs	r2, #0
 800d45e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d018      	beq.n	800d4a0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	e853 3f00 	ldrex	r3, [r3]
 800d47a:	613b      	str	r3, [r7, #16]
   return(result);
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d482:	627b      	str	r3, [r7, #36]	; 0x24
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	461a      	mov	r2, r3
 800d48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48c:	623b      	str	r3, [r7, #32]
 800d48e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d490:	69f9      	ldr	r1, [r7, #28]
 800d492:	6a3a      	ldr	r2, [r7, #32]
 800d494:	e841 2300 	strex	r3, r2, [r1]
 800d498:	61bb      	str	r3, [r7, #24]
   return(result);
 800d49a:	69bb      	ldr	r3, [r7, #24]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d1e6      	bne.n	800d46e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d4a0:	88fb      	ldrh	r3, [r7, #6]
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	68b9      	ldr	r1, [r7, #8]
 800d4a6:	68f8      	ldr	r0, [r7, #12]
 800d4a8:	f000 ff42 	bl	800e330 <UART_Start_Receive_IT>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	e000      	b.n	800d4b2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800d4b0:	2302      	movs	r3, #2
  }
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3728      	adds	r7, #40	; 0x28
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}

0800d4ba <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d4ba:	b580      	push	{r7, lr}
 800d4bc:	b08a      	sub	sp, #40	; 0x28
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	60f8      	str	r0, [r7, #12]
 800d4c2:	60b9      	str	r1, [r7, #8]
 800d4c4:	4613      	mov	r3, r2
 800d4c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4ce:	2b20      	cmp	r3, #32
 800d4d0:	d132      	bne.n	800d538 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d002      	beq.n	800d4de <HAL_UART_Receive_DMA+0x24>
 800d4d8:	88fb      	ldrh	r3, [r7, #6]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d101      	bne.n	800d4e2 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	e02b      	b.n	800d53a <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d018      	beq.n	800d528 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	e853 3f00 	ldrex	r3, [r3]
 800d502:	613b      	str	r3, [r7, #16]
   return(result);
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d50a:	627b      	str	r3, [r7, #36]	; 0x24
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	461a      	mov	r2, r3
 800d512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d514:	623b      	str	r3, [r7, #32]
 800d516:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d518:	69f9      	ldr	r1, [r7, #28]
 800d51a:	6a3a      	ldr	r2, [r7, #32]
 800d51c:	e841 2300 	strex	r3, r2, [r1]
 800d520:	61bb      	str	r3, [r7, #24]
   return(result);
 800d522:	69bb      	ldr	r3, [r7, #24]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d1e6      	bne.n	800d4f6 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d528:	88fb      	ldrh	r3, [r7, #6]
 800d52a:	461a      	mov	r2, r3
 800d52c:	68b9      	ldr	r1, [r7, #8]
 800d52e:	68f8      	ldr	r0, [r7, #12]
 800d530:	f000 ffc4 	bl	800e4bc <UART_Start_Receive_DMA>
 800d534:	4603      	mov	r3, r0
 800d536:	e000      	b.n	800d53a <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800d538:	2302      	movs	r3, #2
  }
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3728      	adds	r7, #40	; 0x28
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
	...

0800d544 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b0ba      	sub	sp, #232	; 0xe8
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	69db      	ldr	r3, [r3, #28]
 800d552:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	689b      	ldr	r3, [r3, #8]
 800d566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d56a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d56e:	f640 030f 	movw	r3, #2063	; 0x80f
 800d572:	4013      	ands	r3, r2
 800d574:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d578:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d115      	bne.n	800d5ac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800d580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d584:	f003 0320 	and.w	r3, r3, #32
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d00f      	beq.n	800d5ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d58c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d590:	f003 0320 	and.w	r3, r3, #32
 800d594:	2b00      	cmp	r3, #0
 800d596:	d009      	beq.n	800d5ac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	f000 8297 	beq.w	800dad0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	4798      	blx	r3
      }
      return;
 800d5aa:	e291      	b.n	800dad0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d5ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	f000 8117 	beq.w	800d7e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800d5b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d5ba:	f003 0301 	and.w	r3, r3, #1
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d106      	bne.n	800d5d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800d5c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d5c6:	4b85      	ldr	r3, [pc, #532]	; (800d7dc <HAL_UART_IRQHandler+0x298>)
 800d5c8:	4013      	ands	r3, r2
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	f000 810a 	beq.w	800d7e4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d5d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5d4:	f003 0301 	and.w	r3, r3, #1
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d011      	beq.n	800d600 <HAL_UART_IRQHandler+0xbc>
 800d5dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d00b      	beq.n	800d600 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	2201      	movs	r2, #1
 800d5ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5f6:	f043 0201 	orr.w	r2, r3, #1
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d604:	f003 0302 	and.w	r3, r3, #2
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d011      	beq.n	800d630 <HAL_UART_IRQHandler+0xec>
 800d60c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d610:	f003 0301 	and.w	r3, r3, #1
 800d614:	2b00      	cmp	r3, #0
 800d616:	d00b      	beq.n	800d630 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	2202      	movs	r2, #2
 800d61e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d626:	f043 0204 	orr.w	r2, r3, #4
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d634:	f003 0304 	and.w	r3, r3, #4
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d011      	beq.n	800d660 <HAL_UART_IRQHandler+0x11c>
 800d63c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d640:	f003 0301 	and.w	r3, r3, #1
 800d644:	2b00      	cmp	r3, #0
 800d646:	d00b      	beq.n	800d660 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2204      	movs	r2, #4
 800d64e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d656:	f043 0202 	orr.w	r2, r3, #2
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d664:	f003 0308 	and.w	r3, r3, #8
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d017      	beq.n	800d69c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d66c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d670:	f003 0320 	and.w	r3, r3, #32
 800d674:	2b00      	cmp	r3, #0
 800d676:	d105      	bne.n	800d684 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800d678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d67c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d680:	2b00      	cmp	r3, #0
 800d682:	d00b      	beq.n	800d69c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2208      	movs	r2, #8
 800d68a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d692:	f043 0208 	orr.w	r2, r3, #8
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d69c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d012      	beq.n	800d6ce <HAL_UART_IRQHandler+0x18a>
 800d6a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d00c      	beq.n	800d6ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d6bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6c4:	f043 0220 	orr.w	r2, r3, #32
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f000 81fd 	beq.w	800dad4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800d6da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6de:	f003 0320 	and.w	r3, r3, #32
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d00d      	beq.n	800d702 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d6e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6ea:	f003 0320 	and.w	r3, r3, #32
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d007      	beq.n	800d702 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d003      	beq.n	800d702 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d708:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	689b      	ldr	r3, [r3, #8]
 800d712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d716:	2b40      	cmp	r3, #64	; 0x40
 800d718:	d005      	beq.n	800d726 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d71a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d71e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d722:	2b00      	cmp	r3, #0
 800d724:	d04f      	beq.n	800d7c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 ff8e 	bl	800e648 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	689b      	ldr	r3, [r3, #8]
 800d732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d736:	2b40      	cmp	r3, #64	; 0x40
 800d738:	d141      	bne.n	800d7be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	3308      	adds	r3, #8
 800d740:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d744:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d748:	e853 3f00 	ldrex	r3, [r3]
 800d74c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d750:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	3308      	adds	r3, #8
 800d762:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d766:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d76a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d76e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d772:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d776:	e841 2300 	strex	r3, r2, [r1]
 800d77a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d77e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d782:	2b00      	cmp	r3, #0
 800d784:	d1d9      	bne.n	800d73a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d013      	beq.n	800d7b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d792:	4a13      	ldr	r2, [pc, #76]	; (800d7e0 <HAL_UART_IRQHandler+0x29c>)
 800d794:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7fa fdae 	bl	80082fc <HAL_DMA_Abort_IT>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d017      	beq.n	800d7d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7ac:	687a      	ldr	r2, [r7, #4]
 800d7ae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800d7b0:	4610      	mov	r0, r2
 800d7b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7b4:	e00f      	b.n	800d7d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f7f5 fbb6 	bl	8002f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7bc:	e00b      	b.n	800d7d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f7f5 fbb2 	bl	8002f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7c4:	e007      	b.n	800d7d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f7f5 fbae 	bl	8002f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800d7d4:	e17e      	b.n	800dad4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7d6:	bf00      	nop
    return;
 800d7d8:	e17c      	b.n	800dad4 <HAL_UART_IRQHandler+0x590>
 800d7da:	bf00      	nop
 800d7dc:	04000120 	.word	0x04000120
 800d7e0:	0800e8f5 	.word	0x0800e8f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	f040 814c 	bne.w	800da86 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d7ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7f2:	f003 0310 	and.w	r3, r3, #16
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	f000 8145 	beq.w	800da86 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d7fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d800:	f003 0310 	and.w	r3, r3, #16
 800d804:	2b00      	cmp	r3, #0
 800d806:	f000 813e 	beq.w	800da86 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	2210      	movs	r2, #16
 800d810:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	689b      	ldr	r3, [r3, #8]
 800d818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d81c:	2b40      	cmp	r3, #64	; 0x40
 800d81e:	f040 80b6 	bne.w	800d98e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d82e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d832:	2b00      	cmp	r3, #0
 800d834:	f000 8150 	beq.w	800dad8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d83e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d842:	429a      	cmp	r2, r3
 800d844:	f080 8148 	bcs.w	800dad8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d84e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d856:	69db      	ldr	r3, [r3, #28]
 800d858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d85c:	f000 8086 	beq.w	800d96c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d868:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d86c:	e853 3f00 	ldrex	r3, [r3]
 800d870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d874:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d87c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	461a      	mov	r2, r3
 800d886:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d88a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d88e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d892:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d896:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d89a:	e841 2300 	strex	r3, r2, [r1]
 800d89e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d8a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d1da      	bne.n	800d860 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	3308      	adds	r3, #8
 800d8b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8b4:	e853 3f00 	ldrex	r3, [r3]
 800d8b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d8ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d8bc:	f023 0301 	bic.w	r3, r3, #1
 800d8c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	3308      	adds	r3, #8
 800d8ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d8ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d8d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d8d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d8da:	e841 2300 	strex	r3, r2, [r1]
 800d8de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d8e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d1e1      	bne.n	800d8aa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	3308      	adds	r3, #8
 800d8ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d8f0:	e853 3f00 	ldrex	r3, [r3]
 800d8f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d8f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	3308      	adds	r3, #8
 800d906:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d90a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d90c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d90e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d910:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d912:	e841 2300 	strex	r3, r2, [r1]
 800d916:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d1e3      	bne.n	800d8e6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2220      	movs	r2, #32
 800d922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2200      	movs	r2, #0
 800d92a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d934:	e853 3f00 	ldrex	r3, [r3]
 800d938:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d93a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d93c:	f023 0310 	bic.w	r3, r3, #16
 800d940:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	461a      	mov	r2, r3
 800d94a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d94e:	65bb      	str	r3, [r7, #88]	; 0x58
 800d950:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d952:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d954:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d956:	e841 2300 	strex	r3, r2, [r1]
 800d95a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d95c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d1e4      	bne.n	800d92c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d966:	4618      	mov	r0, r3
 800d968:	f7fa fc58 	bl	800821c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2202      	movs	r2, #2
 800d970:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d97e:	b29b      	uxth	r3, r3
 800d980:	1ad3      	subs	r3, r2, r3
 800d982:	b29b      	uxth	r3, r3
 800d984:	4619      	mov	r1, r3
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f000 f8c2 	bl	800db10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d98c:	e0a4      	b.n	800dad8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	1ad3      	subs	r3, r2, r3
 800d99e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	f000 8096 	beq.w	800dadc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800d9b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	f000 8091 	beq.w	800dadc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c2:	e853 3f00 	ldrex	r3, [r3]
 800d9c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d9ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d9dc:	647b      	str	r3, [r7, #68]	; 0x44
 800d9de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d9e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d9e4:	e841 2300 	strex	r3, r2, [r1]
 800d9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d9ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d1e4      	bne.n	800d9ba <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	3308      	adds	r3, #8
 800d9f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fa:	e853 3f00 	ldrex	r3, [r3]
 800d9fe:	623b      	str	r3, [r7, #32]
   return(result);
 800da00:	6a3b      	ldr	r3, [r7, #32]
 800da02:	f023 0301 	bic.w	r3, r3, #1
 800da06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	3308      	adds	r3, #8
 800da10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800da14:	633a      	str	r2, [r7, #48]	; 0x30
 800da16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da1c:	e841 2300 	strex	r3, r2, [r1]
 800da20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800da22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da24:	2b00      	cmp	r3, #0
 800da26:	d1e3      	bne.n	800d9f0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2220      	movs	r2, #32
 800da2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2200      	movs	r2, #0
 800da34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2200      	movs	r2, #0
 800da3a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	e853 3f00 	ldrex	r3, [r3]
 800da48:	60fb      	str	r3, [r7, #12]
   return(result);
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	f023 0310 	bic.w	r3, r3, #16
 800da50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	461a      	mov	r2, r3
 800da5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800da5e:	61fb      	str	r3, [r7, #28]
 800da60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da62:	69b9      	ldr	r1, [r7, #24]
 800da64:	69fa      	ldr	r2, [r7, #28]
 800da66:	e841 2300 	strex	r3, r2, [r1]
 800da6a:	617b      	str	r3, [r7, #20]
   return(result);
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d1e4      	bne.n	800da3c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2202      	movs	r2, #2
 800da76:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800da78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800da7c:	4619      	mov	r1, r3
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f000 f846 	bl	800db10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800da84:	e02a      	b.n	800dadc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800da86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d00e      	beq.n	800dab0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800da92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d008      	beq.n	800dab0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d01c      	beq.n	800dae0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	4798      	blx	r3
    }
    return;
 800daae:	e017      	b.n	800dae0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d012      	beq.n	800dae2 <HAL_UART_IRQHandler+0x59e>
 800dabc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d00c      	beq.n	800dae2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f000 ff29 	bl	800e920 <UART_EndTransmit_IT>
    return;
 800dace:	e008      	b.n	800dae2 <HAL_UART_IRQHandler+0x59e>
      return;
 800dad0:	bf00      	nop
 800dad2:	e006      	b.n	800dae2 <HAL_UART_IRQHandler+0x59e>
    return;
 800dad4:	bf00      	nop
 800dad6:	e004      	b.n	800dae2 <HAL_UART_IRQHandler+0x59e>
      return;
 800dad8:	bf00      	nop
 800dada:	e002      	b.n	800dae2 <HAL_UART_IRQHandler+0x59e>
      return;
 800dadc:	bf00      	nop
 800dade:	e000      	b.n	800dae2 <HAL_UART_IRQHandler+0x59e>
    return;
 800dae0:	bf00      	nop
  }

}
 800dae2:	37e8      	adds	r7, #232	; 0xe8
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dae8:	b480      	push	{r7}
 800daea:	b083      	sub	sp, #12
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800daf0:	bf00      	nop
 800daf2:	370c      	adds	r7, #12
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800db04:	bf00      	nop
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr

0800db10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	460b      	mov	r3, r1
 800db1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800db1c:	bf00      	nop
 800db1e:	370c      	adds	r7, #12
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr

0800db28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b088      	sub	sp, #32
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800db30:	2300      	movs	r3, #0
 800db32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	689a      	ldr	r2, [r3, #8]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	691b      	ldr	r3, [r3, #16]
 800db3c:	431a      	orrs	r2, r3
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	695b      	ldr	r3, [r3, #20]
 800db42:	431a      	orrs	r2, r3
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	69db      	ldr	r3, [r3, #28]
 800db48:	4313      	orrs	r3, r2
 800db4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	681a      	ldr	r2, [r3, #0]
 800db52:	4ba6      	ldr	r3, [pc, #664]	; (800ddec <UART_SetConfig+0x2c4>)
 800db54:	4013      	ands	r3, r2
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	6812      	ldr	r2, [r2, #0]
 800db5a:	6979      	ldr	r1, [r7, #20]
 800db5c:	430b      	orrs	r3, r1
 800db5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	68da      	ldr	r2, [r3, #12]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	430a      	orrs	r2, r1
 800db74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	699b      	ldr	r3, [r3, #24]
 800db7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6a1b      	ldr	r3, [r3, #32]
 800db80:	697a      	ldr	r2, [r7, #20]
 800db82:	4313      	orrs	r3, r2
 800db84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	689b      	ldr	r3, [r3, #8]
 800db8c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	697a      	ldr	r2, [r7, #20]
 800db96:	430a      	orrs	r2, r1
 800db98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	4a94      	ldr	r2, [pc, #592]	; (800ddf0 <UART_SetConfig+0x2c8>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d120      	bne.n	800dbe6 <UART_SetConfig+0xbe>
 800dba4:	4b93      	ldr	r3, [pc, #588]	; (800ddf4 <UART_SetConfig+0x2cc>)
 800dba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbaa:	f003 0303 	and.w	r3, r3, #3
 800dbae:	2b03      	cmp	r3, #3
 800dbb0:	d816      	bhi.n	800dbe0 <UART_SetConfig+0xb8>
 800dbb2:	a201      	add	r2, pc, #4	; (adr r2, 800dbb8 <UART_SetConfig+0x90>)
 800dbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbb8:	0800dbc9 	.word	0x0800dbc9
 800dbbc:	0800dbd5 	.word	0x0800dbd5
 800dbc0:	0800dbcf 	.word	0x0800dbcf
 800dbc4:	0800dbdb 	.word	0x0800dbdb
 800dbc8:	2301      	movs	r3, #1
 800dbca:	77fb      	strb	r3, [r7, #31]
 800dbcc:	e150      	b.n	800de70 <UART_SetConfig+0x348>
 800dbce:	2302      	movs	r3, #2
 800dbd0:	77fb      	strb	r3, [r7, #31]
 800dbd2:	e14d      	b.n	800de70 <UART_SetConfig+0x348>
 800dbd4:	2304      	movs	r3, #4
 800dbd6:	77fb      	strb	r3, [r7, #31]
 800dbd8:	e14a      	b.n	800de70 <UART_SetConfig+0x348>
 800dbda:	2308      	movs	r3, #8
 800dbdc:	77fb      	strb	r3, [r7, #31]
 800dbde:	e147      	b.n	800de70 <UART_SetConfig+0x348>
 800dbe0:	2310      	movs	r3, #16
 800dbe2:	77fb      	strb	r3, [r7, #31]
 800dbe4:	e144      	b.n	800de70 <UART_SetConfig+0x348>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4a83      	ldr	r2, [pc, #524]	; (800ddf8 <UART_SetConfig+0x2d0>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d132      	bne.n	800dc56 <UART_SetConfig+0x12e>
 800dbf0:	4b80      	ldr	r3, [pc, #512]	; (800ddf4 <UART_SetConfig+0x2cc>)
 800dbf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbf6:	f003 030c 	and.w	r3, r3, #12
 800dbfa:	2b0c      	cmp	r3, #12
 800dbfc:	d828      	bhi.n	800dc50 <UART_SetConfig+0x128>
 800dbfe:	a201      	add	r2, pc, #4	; (adr r2, 800dc04 <UART_SetConfig+0xdc>)
 800dc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc04:	0800dc39 	.word	0x0800dc39
 800dc08:	0800dc51 	.word	0x0800dc51
 800dc0c:	0800dc51 	.word	0x0800dc51
 800dc10:	0800dc51 	.word	0x0800dc51
 800dc14:	0800dc45 	.word	0x0800dc45
 800dc18:	0800dc51 	.word	0x0800dc51
 800dc1c:	0800dc51 	.word	0x0800dc51
 800dc20:	0800dc51 	.word	0x0800dc51
 800dc24:	0800dc3f 	.word	0x0800dc3f
 800dc28:	0800dc51 	.word	0x0800dc51
 800dc2c:	0800dc51 	.word	0x0800dc51
 800dc30:	0800dc51 	.word	0x0800dc51
 800dc34:	0800dc4b 	.word	0x0800dc4b
 800dc38:	2300      	movs	r3, #0
 800dc3a:	77fb      	strb	r3, [r7, #31]
 800dc3c:	e118      	b.n	800de70 <UART_SetConfig+0x348>
 800dc3e:	2302      	movs	r3, #2
 800dc40:	77fb      	strb	r3, [r7, #31]
 800dc42:	e115      	b.n	800de70 <UART_SetConfig+0x348>
 800dc44:	2304      	movs	r3, #4
 800dc46:	77fb      	strb	r3, [r7, #31]
 800dc48:	e112      	b.n	800de70 <UART_SetConfig+0x348>
 800dc4a:	2308      	movs	r3, #8
 800dc4c:	77fb      	strb	r3, [r7, #31]
 800dc4e:	e10f      	b.n	800de70 <UART_SetConfig+0x348>
 800dc50:	2310      	movs	r3, #16
 800dc52:	77fb      	strb	r3, [r7, #31]
 800dc54:	e10c      	b.n	800de70 <UART_SetConfig+0x348>
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	4a68      	ldr	r2, [pc, #416]	; (800ddfc <UART_SetConfig+0x2d4>)
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d120      	bne.n	800dca2 <UART_SetConfig+0x17a>
 800dc60:	4b64      	ldr	r3, [pc, #400]	; (800ddf4 <UART_SetConfig+0x2cc>)
 800dc62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800dc6a:	2b30      	cmp	r3, #48	; 0x30
 800dc6c:	d013      	beq.n	800dc96 <UART_SetConfig+0x16e>
 800dc6e:	2b30      	cmp	r3, #48	; 0x30
 800dc70:	d814      	bhi.n	800dc9c <UART_SetConfig+0x174>
 800dc72:	2b20      	cmp	r3, #32
 800dc74:	d009      	beq.n	800dc8a <UART_SetConfig+0x162>
 800dc76:	2b20      	cmp	r3, #32
 800dc78:	d810      	bhi.n	800dc9c <UART_SetConfig+0x174>
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d002      	beq.n	800dc84 <UART_SetConfig+0x15c>
 800dc7e:	2b10      	cmp	r3, #16
 800dc80:	d006      	beq.n	800dc90 <UART_SetConfig+0x168>
 800dc82:	e00b      	b.n	800dc9c <UART_SetConfig+0x174>
 800dc84:	2300      	movs	r3, #0
 800dc86:	77fb      	strb	r3, [r7, #31]
 800dc88:	e0f2      	b.n	800de70 <UART_SetConfig+0x348>
 800dc8a:	2302      	movs	r3, #2
 800dc8c:	77fb      	strb	r3, [r7, #31]
 800dc8e:	e0ef      	b.n	800de70 <UART_SetConfig+0x348>
 800dc90:	2304      	movs	r3, #4
 800dc92:	77fb      	strb	r3, [r7, #31]
 800dc94:	e0ec      	b.n	800de70 <UART_SetConfig+0x348>
 800dc96:	2308      	movs	r3, #8
 800dc98:	77fb      	strb	r3, [r7, #31]
 800dc9a:	e0e9      	b.n	800de70 <UART_SetConfig+0x348>
 800dc9c:	2310      	movs	r3, #16
 800dc9e:	77fb      	strb	r3, [r7, #31]
 800dca0:	e0e6      	b.n	800de70 <UART_SetConfig+0x348>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	4a56      	ldr	r2, [pc, #344]	; (800de00 <UART_SetConfig+0x2d8>)
 800dca8:	4293      	cmp	r3, r2
 800dcaa:	d120      	bne.n	800dcee <UART_SetConfig+0x1c6>
 800dcac:	4b51      	ldr	r3, [pc, #324]	; (800ddf4 <UART_SetConfig+0x2cc>)
 800dcae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800dcb6:	2bc0      	cmp	r3, #192	; 0xc0
 800dcb8:	d013      	beq.n	800dce2 <UART_SetConfig+0x1ba>
 800dcba:	2bc0      	cmp	r3, #192	; 0xc0
 800dcbc:	d814      	bhi.n	800dce8 <UART_SetConfig+0x1c0>
 800dcbe:	2b80      	cmp	r3, #128	; 0x80
 800dcc0:	d009      	beq.n	800dcd6 <UART_SetConfig+0x1ae>
 800dcc2:	2b80      	cmp	r3, #128	; 0x80
 800dcc4:	d810      	bhi.n	800dce8 <UART_SetConfig+0x1c0>
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d002      	beq.n	800dcd0 <UART_SetConfig+0x1a8>
 800dcca:	2b40      	cmp	r3, #64	; 0x40
 800dccc:	d006      	beq.n	800dcdc <UART_SetConfig+0x1b4>
 800dcce:	e00b      	b.n	800dce8 <UART_SetConfig+0x1c0>
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	77fb      	strb	r3, [r7, #31]
 800dcd4:	e0cc      	b.n	800de70 <UART_SetConfig+0x348>
 800dcd6:	2302      	movs	r3, #2
 800dcd8:	77fb      	strb	r3, [r7, #31]
 800dcda:	e0c9      	b.n	800de70 <UART_SetConfig+0x348>
 800dcdc:	2304      	movs	r3, #4
 800dcde:	77fb      	strb	r3, [r7, #31]
 800dce0:	e0c6      	b.n	800de70 <UART_SetConfig+0x348>
 800dce2:	2308      	movs	r3, #8
 800dce4:	77fb      	strb	r3, [r7, #31]
 800dce6:	e0c3      	b.n	800de70 <UART_SetConfig+0x348>
 800dce8:	2310      	movs	r3, #16
 800dcea:	77fb      	strb	r3, [r7, #31]
 800dcec:	e0c0      	b.n	800de70 <UART_SetConfig+0x348>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	4a44      	ldr	r2, [pc, #272]	; (800de04 <UART_SetConfig+0x2dc>)
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d125      	bne.n	800dd44 <UART_SetConfig+0x21c>
 800dcf8:	4b3e      	ldr	r3, [pc, #248]	; (800ddf4 <UART_SetConfig+0x2cc>)
 800dcfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dd02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dd06:	d017      	beq.n	800dd38 <UART_SetConfig+0x210>
 800dd08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dd0c:	d817      	bhi.n	800dd3e <UART_SetConfig+0x216>
 800dd0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd12:	d00b      	beq.n	800dd2c <UART_SetConfig+0x204>
 800dd14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd18:	d811      	bhi.n	800dd3e <UART_SetConfig+0x216>
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d003      	beq.n	800dd26 <UART_SetConfig+0x1fe>
 800dd1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd22:	d006      	beq.n	800dd32 <UART_SetConfig+0x20a>
 800dd24:	e00b      	b.n	800dd3e <UART_SetConfig+0x216>
 800dd26:	2300      	movs	r3, #0
 800dd28:	77fb      	strb	r3, [r7, #31]
 800dd2a:	e0a1      	b.n	800de70 <UART_SetConfig+0x348>
 800dd2c:	2302      	movs	r3, #2
 800dd2e:	77fb      	strb	r3, [r7, #31]
 800dd30:	e09e      	b.n	800de70 <UART_SetConfig+0x348>
 800dd32:	2304      	movs	r3, #4
 800dd34:	77fb      	strb	r3, [r7, #31]
 800dd36:	e09b      	b.n	800de70 <UART_SetConfig+0x348>
 800dd38:	2308      	movs	r3, #8
 800dd3a:	77fb      	strb	r3, [r7, #31]
 800dd3c:	e098      	b.n	800de70 <UART_SetConfig+0x348>
 800dd3e:	2310      	movs	r3, #16
 800dd40:	77fb      	strb	r3, [r7, #31]
 800dd42:	e095      	b.n	800de70 <UART_SetConfig+0x348>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4a2f      	ldr	r2, [pc, #188]	; (800de08 <UART_SetConfig+0x2e0>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d125      	bne.n	800dd9a <UART_SetConfig+0x272>
 800dd4e:	4b29      	ldr	r3, [pc, #164]	; (800ddf4 <UART_SetConfig+0x2cc>)
 800dd50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800dd58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dd5c:	d017      	beq.n	800dd8e <UART_SetConfig+0x266>
 800dd5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dd62:	d817      	bhi.n	800dd94 <UART_SetConfig+0x26c>
 800dd64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd68:	d00b      	beq.n	800dd82 <UART_SetConfig+0x25a>
 800dd6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd6e:	d811      	bhi.n	800dd94 <UART_SetConfig+0x26c>
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d003      	beq.n	800dd7c <UART_SetConfig+0x254>
 800dd74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd78:	d006      	beq.n	800dd88 <UART_SetConfig+0x260>
 800dd7a:	e00b      	b.n	800dd94 <UART_SetConfig+0x26c>
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	77fb      	strb	r3, [r7, #31]
 800dd80:	e076      	b.n	800de70 <UART_SetConfig+0x348>
 800dd82:	2302      	movs	r3, #2
 800dd84:	77fb      	strb	r3, [r7, #31]
 800dd86:	e073      	b.n	800de70 <UART_SetConfig+0x348>
 800dd88:	2304      	movs	r3, #4
 800dd8a:	77fb      	strb	r3, [r7, #31]
 800dd8c:	e070      	b.n	800de70 <UART_SetConfig+0x348>
 800dd8e:	2308      	movs	r3, #8
 800dd90:	77fb      	strb	r3, [r7, #31]
 800dd92:	e06d      	b.n	800de70 <UART_SetConfig+0x348>
 800dd94:	2310      	movs	r3, #16
 800dd96:	77fb      	strb	r3, [r7, #31]
 800dd98:	e06a      	b.n	800de70 <UART_SetConfig+0x348>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	4a1b      	ldr	r2, [pc, #108]	; (800de0c <UART_SetConfig+0x2e4>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d138      	bne.n	800de16 <UART_SetConfig+0x2ee>
 800dda4:	4b13      	ldr	r3, [pc, #76]	; (800ddf4 <UART_SetConfig+0x2cc>)
 800dda6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ddaa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ddae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ddb2:	d017      	beq.n	800dde4 <UART_SetConfig+0x2bc>
 800ddb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ddb8:	d82a      	bhi.n	800de10 <UART_SetConfig+0x2e8>
 800ddba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ddbe:	d00b      	beq.n	800ddd8 <UART_SetConfig+0x2b0>
 800ddc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ddc4:	d824      	bhi.n	800de10 <UART_SetConfig+0x2e8>
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d003      	beq.n	800ddd2 <UART_SetConfig+0x2aa>
 800ddca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ddce:	d006      	beq.n	800ddde <UART_SetConfig+0x2b6>
 800ddd0:	e01e      	b.n	800de10 <UART_SetConfig+0x2e8>
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	77fb      	strb	r3, [r7, #31]
 800ddd6:	e04b      	b.n	800de70 <UART_SetConfig+0x348>
 800ddd8:	2302      	movs	r3, #2
 800ddda:	77fb      	strb	r3, [r7, #31]
 800dddc:	e048      	b.n	800de70 <UART_SetConfig+0x348>
 800ddde:	2304      	movs	r3, #4
 800dde0:	77fb      	strb	r3, [r7, #31]
 800dde2:	e045      	b.n	800de70 <UART_SetConfig+0x348>
 800dde4:	2308      	movs	r3, #8
 800dde6:	77fb      	strb	r3, [r7, #31]
 800dde8:	e042      	b.n	800de70 <UART_SetConfig+0x348>
 800ddea:	bf00      	nop
 800ddec:	efff69f3 	.word	0xefff69f3
 800ddf0:	40011000 	.word	0x40011000
 800ddf4:	40023800 	.word	0x40023800
 800ddf8:	40004400 	.word	0x40004400
 800ddfc:	40004800 	.word	0x40004800
 800de00:	40004c00 	.word	0x40004c00
 800de04:	40005000 	.word	0x40005000
 800de08:	40011400 	.word	0x40011400
 800de0c:	40007800 	.word	0x40007800
 800de10:	2310      	movs	r3, #16
 800de12:	77fb      	strb	r3, [r7, #31]
 800de14:	e02c      	b.n	800de70 <UART_SetConfig+0x348>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a72      	ldr	r2, [pc, #456]	; (800dfe4 <UART_SetConfig+0x4bc>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d125      	bne.n	800de6c <UART_SetConfig+0x344>
 800de20:	4b71      	ldr	r3, [pc, #452]	; (800dfe8 <UART_SetConfig+0x4c0>)
 800de22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800de2a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800de2e:	d017      	beq.n	800de60 <UART_SetConfig+0x338>
 800de30:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800de34:	d817      	bhi.n	800de66 <UART_SetConfig+0x33e>
 800de36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de3a:	d00b      	beq.n	800de54 <UART_SetConfig+0x32c>
 800de3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de40:	d811      	bhi.n	800de66 <UART_SetConfig+0x33e>
 800de42:	2b00      	cmp	r3, #0
 800de44:	d003      	beq.n	800de4e <UART_SetConfig+0x326>
 800de46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de4a:	d006      	beq.n	800de5a <UART_SetConfig+0x332>
 800de4c:	e00b      	b.n	800de66 <UART_SetConfig+0x33e>
 800de4e:	2300      	movs	r3, #0
 800de50:	77fb      	strb	r3, [r7, #31]
 800de52:	e00d      	b.n	800de70 <UART_SetConfig+0x348>
 800de54:	2302      	movs	r3, #2
 800de56:	77fb      	strb	r3, [r7, #31]
 800de58:	e00a      	b.n	800de70 <UART_SetConfig+0x348>
 800de5a:	2304      	movs	r3, #4
 800de5c:	77fb      	strb	r3, [r7, #31]
 800de5e:	e007      	b.n	800de70 <UART_SetConfig+0x348>
 800de60:	2308      	movs	r3, #8
 800de62:	77fb      	strb	r3, [r7, #31]
 800de64:	e004      	b.n	800de70 <UART_SetConfig+0x348>
 800de66:	2310      	movs	r3, #16
 800de68:	77fb      	strb	r3, [r7, #31]
 800de6a:	e001      	b.n	800de70 <UART_SetConfig+0x348>
 800de6c:	2310      	movs	r3, #16
 800de6e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	69db      	ldr	r3, [r3, #28]
 800de74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de78:	d15b      	bne.n	800df32 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800de7a:	7ffb      	ldrb	r3, [r7, #31]
 800de7c:	2b08      	cmp	r3, #8
 800de7e:	d828      	bhi.n	800ded2 <UART_SetConfig+0x3aa>
 800de80:	a201      	add	r2, pc, #4	; (adr r2, 800de88 <UART_SetConfig+0x360>)
 800de82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de86:	bf00      	nop
 800de88:	0800dead 	.word	0x0800dead
 800de8c:	0800deb5 	.word	0x0800deb5
 800de90:	0800debd 	.word	0x0800debd
 800de94:	0800ded3 	.word	0x0800ded3
 800de98:	0800dec3 	.word	0x0800dec3
 800de9c:	0800ded3 	.word	0x0800ded3
 800dea0:	0800ded3 	.word	0x0800ded3
 800dea4:	0800ded3 	.word	0x0800ded3
 800dea8:	0800decb 	.word	0x0800decb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800deac:	f7fc f90a 	bl	800a0c4 <HAL_RCC_GetPCLK1Freq>
 800deb0:	61b8      	str	r0, [r7, #24]
        break;
 800deb2:	e013      	b.n	800dedc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800deb4:	f7fc f91a 	bl	800a0ec <HAL_RCC_GetPCLK2Freq>
 800deb8:	61b8      	str	r0, [r7, #24]
        break;
 800deba:	e00f      	b.n	800dedc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800debc:	4b4b      	ldr	r3, [pc, #300]	; (800dfec <UART_SetConfig+0x4c4>)
 800debe:	61bb      	str	r3, [r7, #24]
        break;
 800dec0:	e00c      	b.n	800dedc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dec2:	f7fc f82d 	bl	8009f20 <HAL_RCC_GetSysClockFreq>
 800dec6:	61b8      	str	r0, [r7, #24]
        break;
 800dec8:	e008      	b.n	800dedc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800deca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dece:	61bb      	str	r3, [r7, #24]
        break;
 800ded0:	e004      	b.n	800dedc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ded2:	2300      	movs	r3, #0
 800ded4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ded6:	2301      	movs	r3, #1
 800ded8:	77bb      	strb	r3, [r7, #30]
        break;
 800deda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dedc:	69bb      	ldr	r3, [r7, #24]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d074      	beq.n	800dfcc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800dee2:	69bb      	ldr	r3, [r7, #24]
 800dee4:	005a      	lsls	r2, r3, #1
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	085b      	lsrs	r3, r3, #1
 800deec:	441a      	add	r2, r3
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	685b      	ldr	r3, [r3, #4]
 800def2:	fbb2 f3f3 	udiv	r3, r2, r3
 800def6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	2b0f      	cmp	r3, #15
 800defc:	d916      	bls.n	800df2c <UART_SetConfig+0x404>
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df04:	d212      	bcs.n	800df2c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	b29b      	uxth	r3, r3
 800df0a:	f023 030f 	bic.w	r3, r3, #15
 800df0e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	085b      	lsrs	r3, r3, #1
 800df14:	b29b      	uxth	r3, r3
 800df16:	f003 0307 	and.w	r3, r3, #7
 800df1a:	b29a      	uxth	r2, r3
 800df1c:	89fb      	ldrh	r3, [r7, #14]
 800df1e:	4313      	orrs	r3, r2
 800df20:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	89fa      	ldrh	r2, [r7, #14]
 800df28:	60da      	str	r2, [r3, #12]
 800df2a:	e04f      	b.n	800dfcc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800df2c:	2301      	movs	r3, #1
 800df2e:	77bb      	strb	r3, [r7, #30]
 800df30:	e04c      	b.n	800dfcc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800df32:	7ffb      	ldrb	r3, [r7, #31]
 800df34:	2b08      	cmp	r3, #8
 800df36:	d828      	bhi.n	800df8a <UART_SetConfig+0x462>
 800df38:	a201      	add	r2, pc, #4	; (adr r2, 800df40 <UART_SetConfig+0x418>)
 800df3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df3e:	bf00      	nop
 800df40:	0800df65 	.word	0x0800df65
 800df44:	0800df6d 	.word	0x0800df6d
 800df48:	0800df75 	.word	0x0800df75
 800df4c:	0800df8b 	.word	0x0800df8b
 800df50:	0800df7b 	.word	0x0800df7b
 800df54:	0800df8b 	.word	0x0800df8b
 800df58:	0800df8b 	.word	0x0800df8b
 800df5c:	0800df8b 	.word	0x0800df8b
 800df60:	0800df83 	.word	0x0800df83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800df64:	f7fc f8ae 	bl	800a0c4 <HAL_RCC_GetPCLK1Freq>
 800df68:	61b8      	str	r0, [r7, #24]
        break;
 800df6a:	e013      	b.n	800df94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800df6c:	f7fc f8be 	bl	800a0ec <HAL_RCC_GetPCLK2Freq>
 800df70:	61b8      	str	r0, [r7, #24]
        break;
 800df72:	e00f      	b.n	800df94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800df74:	4b1d      	ldr	r3, [pc, #116]	; (800dfec <UART_SetConfig+0x4c4>)
 800df76:	61bb      	str	r3, [r7, #24]
        break;
 800df78:	e00c      	b.n	800df94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800df7a:	f7fb ffd1 	bl	8009f20 <HAL_RCC_GetSysClockFreq>
 800df7e:	61b8      	str	r0, [r7, #24]
        break;
 800df80:	e008      	b.n	800df94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df86:	61bb      	str	r3, [r7, #24]
        break;
 800df88:	e004      	b.n	800df94 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800df8a:	2300      	movs	r3, #0
 800df8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800df8e:	2301      	movs	r3, #1
 800df90:	77bb      	strb	r3, [r7, #30]
        break;
 800df92:	bf00      	nop
    }

    if (pclk != 0U)
 800df94:	69bb      	ldr	r3, [r7, #24]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d018      	beq.n	800dfcc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	085a      	lsrs	r2, r3, #1
 800dfa0:	69bb      	ldr	r3, [r7, #24]
 800dfa2:	441a      	add	r2, r3
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	685b      	ldr	r3, [r3, #4]
 800dfa8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	2b0f      	cmp	r3, #15
 800dfb2:	d909      	bls.n	800dfc8 <UART_SetConfig+0x4a0>
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfba:	d205      	bcs.n	800dfc8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	b29a      	uxth	r2, r3
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	60da      	str	r2, [r3, #12]
 800dfc6:	e001      	b.n	800dfcc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800dfc8:	2301      	movs	r3, #1
 800dfca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800dfd8:	7fbb      	ldrb	r3, [r7, #30]
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3720      	adds	r7, #32
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	40007c00 	.word	0x40007c00
 800dfe8:	40023800 	.word	0x40023800
 800dfec:	00f42400 	.word	0x00f42400

0800dff0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dff0:	b480      	push	{r7}
 800dff2:	b083      	sub	sp, #12
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffc:	f003 0301 	and.w	r3, r3, #1
 800e000:	2b00      	cmp	r3, #0
 800e002:	d00a      	beq.n	800e01a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	430a      	orrs	r2, r1
 800e018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e01e:	f003 0302 	and.w	r3, r3, #2
 800e022:	2b00      	cmp	r3, #0
 800e024:	d00a      	beq.n	800e03c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	430a      	orrs	r2, r1
 800e03a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e040:	f003 0304 	and.w	r3, r3, #4
 800e044:	2b00      	cmp	r3, #0
 800e046:	d00a      	beq.n	800e05e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	430a      	orrs	r2, r1
 800e05c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e062:	f003 0308 	and.w	r3, r3, #8
 800e066:	2b00      	cmp	r3, #0
 800e068:	d00a      	beq.n	800e080 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	430a      	orrs	r2, r1
 800e07e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e084:	f003 0310 	and.w	r3, r3, #16
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d00a      	beq.n	800e0a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	430a      	orrs	r2, r1
 800e0a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a6:	f003 0320 	and.w	r3, r3, #32
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d00a      	beq.n	800e0c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	689b      	ldr	r3, [r3, #8]
 800e0b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	430a      	orrs	r2, r1
 800e0c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d01a      	beq.n	800e106 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	430a      	orrs	r2, r1
 800e0e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0ee:	d10a      	bne.n	800e106 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	430a      	orrs	r2, r1
 800e104:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e10a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d00a      	beq.n	800e128 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	430a      	orrs	r2, r1
 800e126:	605a      	str	r2, [r3, #4]
  }
}
 800e128:	bf00      	nop
 800e12a:	370c      	adds	r7, #12
 800e12c:	46bd      	mov	sp, r7
 800e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e132:	4770      	bx	lr

0800e134 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b086      	sub	sp, #24
 800e138:	af02      	add	r7, sp, #8
 800e13a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2200      	movs	r2, #0
 800e140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e144:	f7f9 fe4a 	bl	8007ddc <HAL_GetTick>
 800e148:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f003 0308 	and.w	r3, r3, #8
 800e154:	2b08      	cmp	r3, #8
 800e156:	d10e      	bne.n	800e176 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e158:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e15c:	9300      	str	r3, [sp, #0]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	2200      	movs	r2, #0
 800e162:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f000 f81b 	bl	800e1a2 <UART_WaitOnFlagUntilTimeout>
 800e16c:	4603      	mov	r3, r0
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d001      	beq.n	800e176 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e172:	2303      	movs	r3, #3
 800e174:	e011      	b.n	800e19a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2220      	movs	r2, #32
 800e17a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2220      	movs	r2, #32
 800e180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2200      	movs	r2, #0
 800e188:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2200      	movs	r2, #0
 800e194:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800e198:	2300      	movs	r3, #0
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3710      	adds	r7, #16
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}

0800e1a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e1a2:	b580      	push	{r7, lr}
 800e1a4:	b09c      	sub	sp, #112	; 0x70
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	60f8      	str	r0, [r7, #12]
 800e1aa:	60b9      	str	r1, [r7, #8]
 800e1ac:	603b      	str	r3, [r7, #0]
 800e1ae:	4613      	mov	r3, r2
 800e1b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e1b2:	e0a7      	b.n	800e304 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e1b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ba:	f000 80a3 	beq.w	800e304 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e1be:	f7f9 fe0d 	bl	8007ddc <HAL_GetTick>
 800e1c2:	4602      	mov	r2, r0
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	1ad3      	subs	r3, r2, r3
 800e1c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d302      	bcc.n	800e1d4 <UART_WaitOnFlagUntilTimeout+0x32>
 800e1ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d13f      	bne.n	800e254 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1dc:	e853 3f00 	ldrex	r3, [r3]
 800e1e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e1e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e1e8:	667b      	str	r3, [r7, #100]	; 0x64
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	461a      	mov	r2, r3
 800e1f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e1f4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e1f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e1fa:	e841 2300 	strex	r3, r2, [r1]
 800e1fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e202:	2b00      	cmp	r3, #0
 800e204:	d1e6      	bne.n	800e1d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	3308      	adds	r3, #8
 800e20c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e20e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e210:	e853 3f00 	ldrex	r3, [r3]
 800e214:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e218:	f023 0301 	bic.w	r3, r3, #1
 800e21c:	663b      	str	r3, [r7, #96]	; 0x60
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	3308      	adds	r3, #8
 800e224:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e226:	64ba      	str	r2, [r7, #72]	; 0x48
 800e228:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e22a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e22c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e22e:	e841 2300 	strex	r3, r2, [r1]
 800e232:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e236:	2b00      	cmp	r3, #0
 800e238:	d1e5      	bne.n	800e206 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	2220      	movs	r2, #32
 800e23e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2220      	movs	r2, #32
 800e244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2200      	movs	r2, #0
 800e24c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800e250:	2303      	movs	r3, #3
 800e252:	e068      	b.n	800e326 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	f003 0304 	and.w	r3, r3, #4
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d050      	beq.n	800e304 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	69db      	ldr	r3, [r3, #28]
 800e268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e26c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e270:	d148      	bne.n	800e304 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e27a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e284:	e853 3f00 	ldrex	r3, [r3]
 800e288:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e290:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	461a      	mov	r2, r3
 800e298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e29a:	637b      	str	r3, [r7, #52]	; 0x34
 800e29c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e29e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e2a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2a2:	e841 2300 	strex	r3, r2, [r1]
 800e2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d1e6      	bne.n	800e27c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	3308      	adds	r3, #8
 800e2b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	e853 3f00 	ldrex	r3, [r3]
 800e2bc:	613b      	str	r3, [r7, #16]
   return(result);
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	f023 0301 	bic.w	r3, r3, #1
 800e2c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	3308      	adds	r3, #8
 800e2cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e2ce:	623a      	str	r2, [r7, #32]
 800e2d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2d2:	69f9      	ldr	r1, [r7, #28]
 800e2d4:	6a3a      	ldr	r2, [r7, #32]
 800e2d6:	e841 2300 	strex	r3, r2, [r1]
 800e2da:	61bb      	str	r3, [r7, #24]
   return(result);
 800e2dc:	69bb      	ldr	r3, [r7, #24]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d1e5      	bne.n	800e2ae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2220      	movs	r2, #32
 800e2e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2220      	movs	r2, #32
 800e2ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2220      	movs	r2, #32
 800e2f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800e300:	2303      	movs	r3, #3
 800e302:	e010      	b.n	800e326 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	69da      	ldr	r2, [r3, #28]
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	4013      	ands	r3, r2
 800e30e:	68ba      	ldr	r2, [r7, #8]
 800e310:	429a      	cmp	r2, r3
 800e312:	bf0c      	ite	eq
 800e314:	2301      	moveq	r3, #1
 800e316:	2300      	movne	r3, #0
 800e318:	b2db      	uxtb	r3, r3
 800e31a:	461a      	mov	r2, r3
 800e31c:	79fb      	ldrb	r3, [r7, #7]
 800e31e:	429a      	cmp	r2, r3
 800e320:	f43f af48 	beq.w	800e1b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e324:	2300      	movs	r3, #0
}
 800e326:	4618      	mov	r0, r3
 800e328:	3770      	adds	r7, #112	; 0x70
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
	...

0800e330 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e330:	b480      	push	{r7}
 800e332:	b097      	sub	sp, #92	; 0x5c
 800e334:	af00      	add	r7, sp, #0
 800e336:	60f8      	str	r0, [r7, #12]
 800e338:	60b9      	str	r1, [r7, #8]
 800e33a:	4613      	mov	r3, r2
 800e33c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	68ba      	ldr	r2, [r7, #8]
 800e342:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	88fa      	ldrh	r2, [r7, #6]
 800e348:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	88fa      	ldrh	r2, [r7, #6]
 800e350:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2200      	movs	r2, #0
 800e358:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	689b      	ldr	r3, [r3, #8]
 800e35e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e362:	d10e      	bne.n	800e382 <UART_Start_Receive_IT+0x52>
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	691b      	ldr	r3, [r3, #16]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d105      	bne.n	800e378 <UART_Start_Receive_IT+0x48>
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e372:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e376:	e02d      	b.n	800e3d4 <UART_Start_Receive_IT+0xa4>
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	22ff      	movs	r2, #255	; 0xff
 800e37c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e380:	e028      	b.n	800e3d4 <UART_Start_Receive_IT+0xa4>
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	689b      	ldr	r3, [r3, #8]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d10d      	bne.n	800e3a6 <UART_Start_Receive_IT+0x76>
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	691b      	ldr	r3, [r3, #16]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d104      	bne.n	800e39c <UART_Start_Receive_IT+0x6c>
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	22ff      	movs	r2, #255	; 0xff
 800e396:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e39a:	e01b      	b.n	800e3d4 <UART_Start_Receive_IT+0xa4>
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	227f      	movs	r2, #127	; 0x7f
 800e3a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e3a4:	e016      	b.n	800e3d4 <UART_Start_Receive_IT+0xa4>
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	689b      	ldr	r3, [r3, #8]
 800e3aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e3ae:	d10d      	bne.n	800e3cc <UART_Start_Receive_IT+0x9c>
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	691b      	ldr	r3, [r3, #16]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d104      	bne.n	800e3c2 <UART_Start_Receive_IT+0x92>
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	227f      	movs	r2, #127	; 0x7f
 800e3bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e3c0:	e008      	b.n	800e3d4 <UART_Start_Receive_IT+0xa4>
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	223f      	movs	r2, #63	; 0x3f
 800e3c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e3ca:	e003      	b.n	800e3d4 <UART_Start_Receive_IT+0xa4>
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2222      	movs	r2, #34	; 0x22
 800e3e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	3308      	adds	r3, #8
 800e3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ee:	e853 3f00 	ldrex	r3, [r3]
 800e3f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f6:	f043 0301 	orr.w	r3, r3, #1
 800e3fa:	657b      	str	r3, [r7, #84]	; 0x54
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	3308      	adds	r3, #8
 800e402:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e404:	64ba      	str	r2, [r7, #72]	; 0x48
 800e406:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e408:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e40a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e40c:	e841 2300 	strex	r3, r2, [r1]
 800e410:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e414:	2b00      	cmp	r3, #0
 800e416:	d1e5      	bne.n	800e3e4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	689b      	ldr	r3, [r3, #8]
 800e41c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e420:	d107      	bne.n	800e432 <UART_Start_Receive_IT+0x102>
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	691b      	ldr	r3, [r3, #16]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d103      	bne.n	800e432 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	4a21      	ldr	r2, [pc, #132]	; (800e4b4 <UART_Start_Receive_IT+0x184>)
 800e42e:	669a      	str	r2, [r3, #104]	; 0x68
 800e430:	e002      	b.n	800e438 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	4a20      	ldr	r2, [pc, #128]	; (800e4b8 <UART_Start_Receive_IT+0x188>)
 800e436:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	691b      	ldr	r3, [r3, #16]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d019      	beq.n	800e474 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e448:	e853 3f00 	ldrex	r3, [r3]
 800e44c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e450:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e454:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	461a      	mov	r2, r3
 800e45c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e45e:	637b      	str	r3, [r7, #52]	; 0x34
 800e460:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e462:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e466:	e841 2300 	strex	r3, r2, [r1]
 800e46a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d1e6      	bne.n	800e440 <UART_Start_Receive_IT+0x110>
 800e472:	e018      	b.n	800e4a6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	e853 3f00 	ldrex	r3, [r3]
 800e480:	613b      	str	r3, [r7, #16]
   return(result);
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	f043 0320 	orr.w	r3, r3, #32
 800e488:	653b      	str	r3, [r7, #80]	; 0x50
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	461a      	mov	r2, r3
 800e490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e492:	623b      	str	r3, [r7, #32]
 800e494:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e496:	69f9      	ldr	r1, [r7, #28]
 800e498:	6a3a      	ldr	r2, [r7, #32]
 800e49a:	e841 2300 	strex	r3, r2, [r1]
 800e49e:	61bb      	str	r3, [r7, #24]
   return(result);
 800e4a0:	69bb      	ldr	r3, [r7, #24]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d1e6      	bne.n	800e474 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800e4a6:	2300      	movs	r3, #0
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	375c      	adds	r7, #92	; 0x5c
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b2:	4770      	bx	lr
 800e4b4:	0800eadb 	.word	0x0800eadb
 800e4b8:	0800e975 	.word	0x0800e975

0800e4bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b096      	sub	sp, #88	; 0x58
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	4613      	mov	r3, r2
 800e4c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	68ba      	ldr	r2, [r7, #8]
 800e4ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	88fa      	ldrh	r2, [r7, #6]
 800e4d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2222      	movs	r2, #34	; 0x22
 800e4e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d028      	beq.n	800e542 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4f4:	4a3e      	ldr	r2, [pc, #248]	; (800e5f0 <UART_Start_Receive_DMA+0x134>)
 800e4f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4fc:	4a3d      	ldr	r2, [pc, #244]	; (800e5f4 <UART_Start_Receive_DMA+0x138>)
 800e4fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e504:	4a3c      	ldr	r2, [pc, #240]	; (800e5f8 <UART_Start_Receive_DMA+0x13c>)
 800e506:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e50c:	2200      	movs	r2, #0
 800e50e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	3324      	adds	r3, #36	; 0x24
 800e51a:	4619      	mov	r1, r3
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e520:	461a      	mov	r2, r3
 800e522:	88fb      	ldrh	r3, [r7, #6]
 800e524:	f7f9 fe1a 	bl	800815c <HAL_DMA_Start_IT>
 800e528:	4603      	mov	r3, r0
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d009      	beq.n	800e542 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2210      	movs	r2, #16
 800e532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	2220      	movs	r2, #32
 800e53a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800e53e:	2301      	movs	r3, #1
 800e540:	e051      	b.n	800e5e6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	691b      	ldr	r3, [r3, #16]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d018      	beq.n	800e57c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e552:	e853 3f00 	ldrex	r3, [r3]
 800e556:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e55a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e55e:	657b      	str	r3, [r7, #84]	; 0x54
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	461a      	mov	r2, r3
 800e566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e568:	64bb      	str	r3, [r7, #72]	; 0x48
 800e56a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e56c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e56e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e570:	e841 2300 	strex	r3, r2, [r1]
 800e574:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d1e6      	bne.n	800e54a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	3308      	adds	r3, #8
 800e582:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e586:	e853 3f00 	ldrex	r3, [r3]
 800e58a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58e:	f043 0301 	orr.w	r3, r3, #1
 800e592:	653b      	str	r3, [r7, #80]	; 0x50
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	3308      	adds	r3, #8
 800e59a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e59c:	637a      	str	r2, [r7, #52]	; 0x34
 800e59e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e5a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5a4:	e841 2300 	strex	r3, r2, [r1]
 800e5a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d1e5      	bne.n	800e57c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	3308      	adds	r3, #8
 800e5b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	e853 3f00 	ldrex	r3, [r3]
 800e5be:	613b      	str	r3, [r7, #16]
   return(result);
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	3308      	adds	r3, #8
 800e5ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e5d0:	623a      	str	r2, [r7, #32]
 800e5d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d4:	69f9      	ldr	r1, [r7, #28]
 800e5d6:	6a3a      	ldr	r2, [r7, #32]
 800e5d8:	e841 2300 	strex	r3, r2, [r1]
 800e5dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800e5de:	69bb      	ldr	r3, [r7, #24]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d1e5      	bne.n	800e5b0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800e5e4:	2300      	movs	r3, #0
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3758      	adds	r7, #88	; 0x58
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	0800e711 	.word	0x0800e711
 800e5f4:	0800e839 	.word	0x0800e839
 800e5f8:	0800e877 	.word	0x0800e877

0800e5fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	b089      	sub	sp, #36	; 0x24
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	e853 3f00 	ldrex	r3, [r3]
 800e610:	60bb      	str	r3, [r7, #8]
   return(result);
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e618:	61fb      	str	r3, [r7, #28]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	461a      	mov	r2, r3
 800e620:	69fb      	ldr	r3, [r7, #28]
 800e622:	61bb      	str	r3, [r7, #24]
 800e624:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e626:	6979      	ldr	r1, [r7, #20]
 800e628:	69ba      	ldr	r2, [r7, #24]
 800e62a:	e841 2300 	strex	r3, r2, [r1]
 800e62e:	613b      	str	r3, [r7, #16]
   return(result);
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d1e6      	bne.n	800e604 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2220      	movs	r2, #32
 800e63a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800e63c:	bf00      	nop
 800e63e:	3724      	adds	r7, #36	; 0x24
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr

0800e648 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e648:	b480      	push	{r7}
 800e64a:	b095      	sub	sp, #84	; 0x54
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e658:	e853 3f00 	ldrex	r3, [r3]
 800e65c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e660:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e664:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	461a      	mov	r2, r3
 800e66c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e66e:	643b      	str	r3, [r7, #64]	; 0x40
 800e670:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e672:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e674:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e676:	e841 2300 	strex	r3, r2, [r1]
 800e67a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d1e6      	bne.n	800e650 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	3308      	adds	r3, #8
 800e688:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e68a:	6a3b      	ldr	r3, [r7, #32]
 800e68c:	e853 3f00 	ldrex	r3, [r3]
 800e690:	61fb      	str	r3, [r7, #28]
   return(result);
 800e692:	69fb      	ldr	r3, [r7, #28]
 800e694:	f023 0301 	bic.w	r3, r3, #1
 800e698:	64bb      	str	r3, [r7, #72]	; 0x48
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	3308      	adds	r3, #8
 800e6a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e6a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e6a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6aa:	e841 2300 	strex	r3, r2, [r1]
 800e6ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d1e5      	bne.n	800e682 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6ba:	2b01      	cmp	r3, #1
 800e6bc:	d118      	bne.n	800e6f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	e853 3f00 	ldrex	r3, [r3]
 800e6ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	f023 0310 	bic.w	r3, r3, #16
 800e6d2:	647b      	str	r3, [r7, #68]	; 0x44
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	461a      	mov	r2, r3
 800e6da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6dc:	61bb      	str	r3, [r7, #24]
 800e6de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6e0:	6979      	ldr	r1, [r7, #20]
 800e6e2:	69ba      	ldr	r2, [r7, #24]
 800e6e4:	e841 2300 	strex	r3, r2, [r1]
 800e6e8:	613b      	str	r3, [r7, #16]
   return(result);
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d1e6      	bne.n	800e6be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2220      	movs	r2, #32
 800e6f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2200      	movs	r2, #0
 800e702:	669a      	str	r2, [r3, #104]	; 0x68
}
 800e704:	bf00      	nop
 800e706:	3754      	adds	r7, #84	; 0x54
 800e708:	46bd      	mov	sp, r7
 800e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70e:	4770      	bx	lr

0800e710 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b09c      	sub	sp, #112	; 0x70
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e71c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	69db      	ldr	r3, [r3, #28]
 800e722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e726:	d071      	beq.n	800e80c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e72a:	2200      	movs	r2, #0
 800e72c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e738:	e853 3f00 	ldrex	r3, [r3]
 800e73c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e73e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e744:	66bb      	str	r3, [r7, #104]	; 0x68
 800e746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	461a      	mov	r2, r3
 800e74c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e74e:	65bb      	str	r3, [r7, #88]	; 0x58
 800e750:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e752:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e754:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e756:	e841 2300 	strex	r3, r2, [r1]
 800e75a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e75c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d1e6      	bne.n	800e730 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	3308      	adds	r3, #8
 800e768:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76c:	e853 3f00 	ldrex	r3, [r3]
 800e770:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e774:	f023 0301 	bic.w	r3, r3, #1
 800e778:	667b      	str	r3, [r7, #100]	; 0x64
 800e77a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	3308      	adds	r3, #8
 800e780:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e782:	647a      	str	r2, [r7, #68]	; 0x44
 800e784:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e786:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e788:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e78a:	e841 2300 	strex	r3, r2, [r1]
 800e78e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e792:	2b00      	cmp	r3, #0
 800e794:	d1e5      	bne.n	800e762 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	3308      	adds	r3, #8
 800e79c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a0:	e853 3f00 	ldrex	r3, [r3]
 800e7a4:	623b      	str	r3, [r7, #32]
   return(result);
 800e7a6:	6a3b      	ldr	r3, [r7, #32]
 800e7a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e7ac:	663b      	str	r3, [r7, #96]	; 0x60
 800e7ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	3308      	adds	r3, #8
 800e7b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e7b6:	633a      	str	r2, [r7, #48]	; 0x30
 800e7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7be:	e841 2300 	strex	r3, r2, [r1]
 800e7c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d1e5      	bne.n	800e796 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e7ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7cc:	2220      	movs	r2, #32
 800e7ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e7d6:	2b01      	cmp	r3, #1
 800e7d8:	d118      	bne.n	800e80c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	e853 3f00 	ldrex	r3, [r3]
 800e7e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f023 0310 	bic.w	r3, r3, #16
 800e7ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	461a      	mov	r2, r3
 800e7f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7f8:	61fb      	str	r3, [r7, #28]
 800e7fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7fc:	69b9      	ldr	r1, [r7, #24]
 800e7fe:	69fa      	ldr	r2, [r7, #28]
 800e800:	e841 2300 	strex	r3, r2, [r1]
 800e804:	617b      	str	r3, [r7, #20]
   return(result);
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d1e6      	bne.n	800e7da <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e80c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e80e:	2200      	movs	r2, #0
 800e810:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e816:	2b01      	cmp	r3, #1
 800e818:	d107      	bne.n	800e82a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e81a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e81c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e820:	4619      	mov	r1, r3
 800e822:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e824:	f7ff f974 	bl	800db10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e828:	e002      	b.n	800e830 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800e82a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e82c:	f7f4 fada 	bl	8002de4 <HAL_UART_RxCpltCallback>
}
 800e830:	bf00      	nop
 800e832:	3770      	adds	r7, #112	; 0x70
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}

0800e838 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b084      	sub	sp, #16
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e844:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	2201      	movs	r2, #1
 800e84a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e850:	2b01      	cmp	r3, #1
 800e852:	d109      	bne.n	800e868 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e85a:	085b      	lsrs	r3, r3, #1
 800e85c:	b29b      	uxth	r3, r3
 800e85e:	4619      	mov	r1, r3
 800e860:	68f8      	ldr	r0, [r7, #12]
 800e862:	f7ff f955 	bl	800db10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e866:	e002      	b.n	800e86e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e868:	68f8      	ldr	r0, [r7, #12]
 800e86a:	f7ff f947 	bl	800dafc <HAL_UART_RxHalfCpltCallback>
}
 800e86e:	bf00      	nop
 800e870:	3710      	adds	r7, #16
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e876:	b580      	push	{r7, lr}
 800e878:	b086      	sub	sp, #24
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e882:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e888:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e890:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	689b      	ldr	r3, [r3, #8]
 800e898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e89c:	2b80      	cmp	r3, #128	; 0x80
 800e89e:	d109      	bne.n	800e8b4 <UART_DMAError+0x3e>
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	2b21      	cmp	r3, #33	; 0x21
 800e8a4:	d106      	bne.n	800e8b4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800e8ae:	6978      	ldr	r0, [r7, #20]
 800e8b0:	f7ff fea4 	bl	800e5fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	689b      	ldr	r3, [r3, #8]
 800e8ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8be:	2b40      	cmp	r3, #64	; 0x40
 800e8c0:	d109      	bne.n	800e8d6 <UART_DMAError+0x60>
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2b22      	cmp	r3, #34	; 0x22
 800e8c6:	d106      	bne.n	800e8d6 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800e8d0:	6978      	ldr	r0, [r7, #20]
 800e8d2:	f7ff feb9 	bl	800e648 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8dc:	f043 0210 	orr.w	r2, r3, #16
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e8e6:	6978      	ldr	r0, [r7, #20]
 800e8e8:	f7f4 fb1e 	bl	8002f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e8ec:	bf00      	nop
 800e8ee:	3718      	adds	r7, #24
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e900:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	2200      	movs	r2, #0
 800e906:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	2200      	movs	r2, #0
 800e90e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e912:	68f8      	ldr	r0, [r7, #12]
 800e914:	f7f4 fb08 	bl	8002f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e918:	bf00      	nop
 800e91a:	3710      	adds	r7, #16
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b088      	sub	sp, #32
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	e853 3f00 	ldrex	r3, [r3]
 800e934:	60bb      	str	r3, [r7, #8]
   return(result);
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e93c:	61fb      	str	r3, [r7, #28]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	461a      	mov	r2, r3
 800e944:	69fb      	ldr	r3, [r7, #28]
 800e946:	61bb      	str	r3, [r7, #24]
 800e948:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e94a:	6979      	ldr	r1, [r7, #20]
 800e94c:	69ba      	ldr	r2, [r7, #24]
 800e94e:	e841 2300 	strex	r3, r2, [r1]
 800e952:	613b      	str	r3, [r7, #16]
   return(result);
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d1e6      	bne.n	800e928 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2220      	movs	r2, #32
 800e95e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2200      	movs	r2, #0
 800e964:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f7ff f8be 	bl	800dae8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e96c:	bf00      	nop
 800e96e:	3720      	adds	r7, #32
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b096      	sub	sp, #88	; 0x58
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e982:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e98c:	2b22      	cmp	r3, #34	; 0x22
 800e98e:	f040 8098 	bne.w	800eac2 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e998:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e99c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e9a0:	b2d9      	uxtb	r1, r3
 800e9a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e9a6:	b2da      	uxtb	r2, r3
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9ac:	400a      	ands	r2, r1
 800e9ae:	b2d2      	uxtb	r2, r2
 800e9b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9b6:	1c5a      	adds	r2, r3, #1
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e9c2:	b29b      	uxth	r3, r3
 800e9c4:	3b01      	subs	r3, #1
 800e9c6:	b29a      	uxth	r2, r3
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d17b      	bne.n	800ead2 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e2:	e853 3f00 	ldrex	r3, [r3]
 800e9e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e9ee:	653b      	str	r3, [r7, #80]	; 0x50
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9f8:	647b      	str	r3, [r7, #68]	; 0x44
 800e9fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e9fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea00:	e841 2300 	strex	r3, r2, [r1]
 800ea04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ea06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d1e6      	bne.n	800e9da <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	3308      	adds	r3, #8
 800ea12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea16:	e853 3f00 	ldrex	r3, [r3]
 800ea1a:	623b      	str	r3, [r7, #32]
   return(result);
 800ea1c:	6a3b      	ldr	r3, [r7, #32]
 800ea1e:	f023 0301 	bic.w	r3, r3, #1
 800ea22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	3308      	adds	r3, #8
 800ea2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ea2c:	633a      	str	r2, [r7, #48]	; 0x30
 800ea2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea34:	e841 2300 	strex	r3, r2, [r1]
 800ea38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d1e5      	bne.n	800ea0c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2220      	movs	r2, #32
 800ea44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2200      	movs	r2, #0
 800ea52:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea58:	2b01      	cmp	r3, #1
 800ea5a:	d12e      	bne.n	800eaba <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	e853 3f00 	ldrex	r3, [r3]
 800ea6e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f023 0310 	bic.w	r3, r3, #16
 800ea76:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea80:	61fb      	str	r3, [r7, #28]
 800ea82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea84:	69b9      	ldr	r1, [r7, #24]
 800ea86:	69fa      	ldr	r2, [r7, #28]
 800ea88:	e841 2300 	strex	r3, r2, [r1]
 800ea8c:	617b      	str	r3, [r7, #20]
   return(result);
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d1e6      	bne.n	800ea62 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	69db      	ldr	r3, [r3, #28]
 800ea9a:	f003 0310 	and.w	r3, r3, #16
 800ea9e:	2b10      	cmp	r3, #16
 800eaa0:	d103      	bne.n	800eaaa <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	2210      	movs	r2, #16
 800eaa8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800eab0:	4619      	mov	r1, r3
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f7ff f82c 	bl	800db10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eab8:	e00b      	b.n	800ead2 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f7f4 f992 	bl	8002de4 <HAL_UART_RxCpltCallback>
}
 800eac0:	e007      	b.n	800ead2 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	699a      	ldr	r2, [r3, #24]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	f042 0208 	orr.w	r2, r2, #8
 800ead0:	619a      	str	r2, [r3, #24]
}
 800ead2:	bf00      	nop
 800ead4:	3758      	adds	r7, #88	; 0x58
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}

0800eada <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800eada:	b580      	push	{r7, lr}
 800eadc:	b096      	sub	sp, #88	; 0x58
 800eade:	af00      	add	r7, sp, #0
 800eae0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eae8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eaf2:	2b22      	cmp	r3, #34	; 0x22
 800eaf4:	f040 8098 	bne.w	800ec28 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eafe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb06:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800eb08:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800eb0c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800eb10:	4013      	ands	r3, r2
 800eb12:	b29a      	uxth	r2, r3
 800eb14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb16:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb1c:	1c9a      	adds	r2, r3, #2
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800eb28:	b29b      	uxth	r3, r3
 800eb2a:	3b01      	subs	r3, #1
 800eb2c:	b29a      	uxth	r2, r3
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800eb3a:	b29b      	uxth	r3, r3
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d17b      	bne.n	800ec38 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb48:	e853 3f00 	ldrex	r3, [r3]
 800eb4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eb54:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	461a      	mov	r2, r3
 800eb5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb5e:	643b      	str	r3, [r7, #64]	; 0x40
 800eb60:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eb64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eb66:	e841 2300 	strex	r3, r2, [r1]
 800eb6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d1e6      	bne.n	800eb40 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	3308      	adds	r3, #8
 800eb78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb7a:	6a3b      	ldr	r3, [r7, #32]
 800eb7c:	e853 3f00 	ldrex	r3, [r3]
 800eb80:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb82:	69fb      	ldr	r3, [r7, #28]
 800eb84:	f023 0301 	bic.w	r3, r3, #1
 800eb88:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	3308      	adds	r3, #8
 800eb90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb92:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eb94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb9a:	e841 2300 	strex	r3, r2, [r1]
 800eb9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d1e5      	bne.n	800eb72 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2220      	movs	r2, #32
 800ebaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ebbe:	2b01      	cmp	r3, #1
 800ebc0:	d12e      	bne.n	800ec20 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	e853 3f00 	ldrex	r3, [r3]
 800ebd4:	60bb      	str	r3, [r7, #8]
   return(result);
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	f023 0310 	bic.w	r3, r3, #16
 800ebdc:	647b      	str	r3, [r7, #68]	; 0x44
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebe6:	61bb      	str	r3, [r7, #24]
 800ebe8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebea:	6979      	ldr	r1, [r7, #20]
 800ebec:	69ba      	ldr	r2, [r7, #24]
 800ebee:	e841 2300 	strex	r3, r2, [r1]
 800ebf2:	613b      	str	r3, [r7, #16]
   return(result);
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d1e6      	bne.n	800ebc8 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	69db      	ldr	r3, [r3, #28]
 800ec00:	f003 0310 	and.w	r3, r3, #16
 800ec04:	2b10      	cmp	r3, #16
 800ec06:	d103      	bne.n	800ec10 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	2210      	movs	r2, #16
 800ec0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ec16:	4619      	mov	r1, r3
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f7fe ff79 	bl	800db10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ec1e:	e00b      	b.n	800ec38 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f7f4 f8df 	bl	8002de4 <HAL_UART_RxCpltCallback>
}
 800ec26:	e007      	b.n	800ec38 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	699a      	ldr	r2, [r3, #24]
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f042 0208 	orr.w	r2, r2, #8
 800ec36:	619a      	str	r2, [r3, #24]
}
 800ec38:	bf00      	nop
 800ec3a:	3758      	adds	r7, #88	; 0x58
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ec40:	b480      	push	{r7}
 800ec42:	b085      	sub	sp, #20
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	4603      	mov	r3, r0
 800ec48:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ec4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ec52:	2b84      	cmp	r3, #132	; 0x84
 800ec54:	d005      	beq.n	800ec62 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ec56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	4413      	add	r3, r2
 800ec5e:	3303      	adds	r3, #3
 800ec60:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ec62:	68fb      	ldr	r3, [r7, #12]
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3714      	adds	r7, #20
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr

0800ec70 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ec70:	b480      	push	{r7}
 800ec72:	b083      	sub	sp, #12
 800ec74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec76:	f3ef 8305 	mrs	r3, IPSR
 800ec7a:	607b      	str	r3, [r7, #4]
  return(result);
 800ec7c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	bf14      	ite	ne
 800ec82:	2301      	movne	r3, #1
 800ec84:	2300      	moveq	r3, #0
 800ec86:	b2db      	uxtb	r3, r3
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	370c      	adds	r7, #12
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec92:	4770      	bx	lr

0800ec94 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ec98:	f001 fafa 	bl	8010290 <vTaskStartScheduler>
  
  return osOK;
 800ec9c:	2300      	movs	r3, #0
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	bd80      	pop	{r7, pc}

0800eca2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800eca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eca4:	b089      	sub	sp, #36	; 0x24
 800eca6:	af04      	add	r7, sp, #16
 800eca8:	6078      	str	r0, [r7, #4]
 800ecaa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	695b      	ldr	r3, [r3, #20]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d020      	beq.n	800ecf6 <osThreadCreate+0x54>
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	699b      	ldr	r3, [r3, #24]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d01c      	beq.n	800ecf6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	685c      	ldr	r4, [r3, #4]
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	691e      	ldr	r6, [r3, #16]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7ff ffb6 	bl	800ec40 <makeFreeRtosPriority>
 800ecd4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	695b      	ldr	r3, [r3, #20]
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ecde:	9202      	str	r2, [sp, #8]
 800ece0:	9301      	str	r3, [sp, #4]
 800ece2:	9100      	str	r1, [sp, #0]
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	4632      	mov	r2, r6
 800ece8:	4629      	mov	r1, r5
 800ecea:	4620      	mov	r0, r4
 800ecec:	f001 f864 	bl	800fdb8 <xTaskCreateStatic>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	60fb      	str	r3, [r7, #12]
 800ecf4:	e01c      	b.n	800ed30 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	685c      	ldr	r4, [r3, #4]
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ed02:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7ff ff98 	bl	800ec40 <makeFreeRtosPriority>
 800ed10:	4602      	mov	r2, r0
 800ed12:	f107 030c 	add.w	r3, r7, #12
 800ed16:	9301      	str	r3, [sp, #4]
 800ed18:	9200      	str	r2, [sp, #0]
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	4632      	mov	r2, r6
 800ed1e:	4629      	mov	r1, r5
 800ed20:	4620      	mov	r0, r4
 800ed22:	f001 f8ac 	bl	800fe7e <xTaskCreate>
 800ed26:	4603      	mov	r3, r0
 800ed28:	2b01      	cmp	r3, #1
 800ed2a:	d001      	beq.n	800ed30 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	e000      	b.n	800ed32 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ed30:	68fb      	ldr	r3, [r7, #12]
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3714      	adds	r7, #20
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ed3a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ed3a:	b580      	push	{r7, lr}
 800ed3c:	b084      	sub	sp, #16
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d001      	beq.n	800ed50 <osDelay+0x16>
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	e000      	b.n	800ed52 <osDelay+0x18>
 800ed50:	2301      	movs	r3, #1
 800ed52:	4618      	mov	r0, r3
 800ed54:	f001 fa66 	bl	8010224 <vTaskDelay>
  
  return osOK;
 800ed58:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3710      	adds	r7, #16
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}

0800ed62 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ed62:	b580      	push	{r7, lr}
 800ed64:	b082      	sub	sp, #8
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d007      	beq.n	800ed82 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	685b      	ldr	r3, [r3, #4]
 800ed76:	4619      	mov	r1, r3
 800ed78:	2001      	movs	r0, #1
 800ed7a:	f000 fb84 	bl	800f486 <xQueueCreateMutexStatic>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	e003      	b.n	800ed8a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800ed82:	2001      	movs	r0, #1
 800ed84:	f000 fb67 	bl	800f456 <xQueueCreateMutex>
 800ed88:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3708      	adds	r7, #8
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
	...

0800ed94 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b084      	sub	sp, #16
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ed9e:	2300      	movs	r3, #0
 800eda0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d101      	bne.n	800edac <osMutexWait+0x18>
    return osErrorParameter;
 800eda8:	2380      	movs	r3, #128	; 0x80
 800edaa:	e03a      	b.n	800ee22 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800edac:	2300      	movs	r3, #0
 800edae:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edb6:	d103      	bne.n	800edc0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800edb8:	f04f 33ff 	mov.w	r3, #4294967295
 800edbc:	60fb      	str	r3, [r7, #12]
 800edbe:	e009      	b.n	800edd4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d006      	beq.n	800edd4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d101      	bne.n	800edd4 <osMutexWait+0x40>
      ticks = 1;
 800edd0:	2301      	movs	r3, #1
 800edd2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800edd4:	f7ff ff4c 	bl	800ec70 <inHandlerMode>
 800edd8:	4603      	mov	r3, r0
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d017      	beq.n	800ee0e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800edde:	f107 0308 	add.w	r3, r7, #8
 800ede2:	461a      	mov	r2, r3
 800ede4:	2100      	movs	r1, #0
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f000 fe18 	bl	800fa1c <xQueueReceiveFromISR>
 800edec:	4603      	mov	r3, r0
 800edee:	2b01      	cmp	r3, #1
 800edf0:	d001      	beq.n	800edf6 <osMutexWait+0x62>
      return osErrorOS;
 800edf2:	23ff      	movs	r3, #255	; 0xff
 800edf4:	e015      	b.n	800ee22 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d011      	beq.n	800ee20 <osMutexWait+0x8c>
 800edfc:	4b0b      	ldr	r3, [pc, #44]	; (800ee2c <osMutexWait+0x98>)
 800edfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee02:	601a      	str	r2, [r3, #0]
 800ee04:	f3bf 8f4f 	dsb	sy
 800ee08:	f3bf 8f6f 	isb	sy
 800ee0c:	e008      	b.n	800ee20 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800ee0e:	68f9      	ldr	r1, [r7, #12]
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f000 fcef 	bl	800f7f4 <xQueueSemaphoreTake>
 800ee16:	4603      	mov	r3, r0
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d001      	beq.n	800ee20 <osMutexWait+0x8c>
    return osErrorOS;
 800ee1c:	23ff      	movs	r3, #255	; 0xff
 800ee1e:	e000      	b.n	800ee22 <osMutexWait+0x8e>
  }
  
  return osOK;
 800ee20:	2300      	movs	r3, #0
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3710      	adds	r7, #16
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}
 800ee2a:	bf00      	nop
 800ee2c:	e000ed04 	.word	0xe000ed04

0800ee30 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b084      	sub	sp, #16
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800ee40:	f7ff ff16 	bl	800ec70 <inHandlerMode>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d016      	beq.n	800ee78 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ee4a:	f107 0308 	add.w	r3, r7, #8
 800ee4e:	4619      	mov	r1, r3
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f000 fc39 	bl	800f6c8 <xQueueGiveFromISR>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d001      	beq.n	800ee60 <osMutexRelease+0x30>
      return osErrorOS;
 800ee5c:	23ff      	movs	r3, #255	; 0xff
 800ee5e:	e017      	b.n	800ee90 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d013      	beq.n	800ee8e <osMutexRelease+0x5e>
 800ee66:	4b0c      	ldr	r3, [pc, #48]	; (800ee98 <osMutexRelease+0x68>)
 800ee68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee6c:	601a      	str	r2, [r3, #0]
 800ee6e:	f3bf 8f4f 	dsb	sy
 800ee72:	f3bf 8f6f 	isb	sy
 800ee76:	e00a      	b.n	800ee8e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800ee78:	2300      	movs	r3, #0
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	2100      	movs	r1, #0
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f000 fb1c 	bl	800f4bc <xQueueGenericSend>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b01      	cmp	r3, #1
 800ee88:	d001      	beq.n	800ee8e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800ee8a:	23ff      	movs	r3, #255	; 0xff
 800ee8c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3710      	adds	r7, #16
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}
 800ee98:	e000ed04 	.word	0xe000ed04

0800ee9c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b086      	sub	sp, #24
 800eea0:	af02      	add	r7, sp, #8
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	685b      	ldr	r3, [r3, #4]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d00f      	beq.n	800eece <osSemaphoreCreate+0x32>
    if (count == 1) {
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	2b01      	cmp	r3, #1
 800eeb2:	d10a      	bne.n	800eeca <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	685b      	ldr	r3, [r3, #4]
 800eeb8:	2203      	movs	r2, #3
 800eeba:	9200      	str	r2, [sp, #0]
 800eebc:	2200      	movs	r2, #0
 800eebe:	2100      	movs	r1, #0
 800eec0:	2001      	movs	r0, #1
 800eec2:	f000 f9cb 	bl	800f25c <xQueueGenericCreateStatic>
 800eec6:	4603      	mov	r3, r0
 800eec8:	e016      	b.n	800eef8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800eeca:	2300      	movs	r3, #0
 800eecc:	e014      	b.n	800eef8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	2b01      	cmp	r3, #1
 800eed2:	d110      	bne.n	800eef6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800eed4:	2203      	movs	r2, #3
 800eed6:	2100      	movs	r1, #0
 800eed8:	2001      	movs	r0, #1
 800eeda:	f000 fa41 	bl	800f360 <xQueueGenericCreate>
 800eede:	60f8      	str	r0, [r7, #12]
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d005      	beq.n	800eef2 <osSemaphoreCreate+0x56>
 800eee6:	2300      	movs	r3, #0
 800eee8:	2200      	movs	r2, #0
 800eeea:	2100      	movs	r1, #0
 800eeec:	68f8      	ldr	r0, [r7, #12]
 800eeee:	f000 fae5 	bl	800f4bc <xQueueGenericSend>
      return sema;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	e000      	b.n	800eef8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800eef6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3710      	adds	r7, #16
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}

0800ef00 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b084      	sub	sp, #16
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d101      	bne.n	800ef18 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800ef14:	2380      	movs	r3, #128	; 0x80
 800ef16:	e03a      	b.n	800ef8e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800ef18:	2300      	movs	r3, #0
 800ef1a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef22:	d103      	bne.n	800ef2c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800ef24:	f04f 33ff 	mov.w	r3, #4294967295
 800ef28:	60fb      	str	r3, [r7, #12]
 800ef2a:	e009      	b.n	800ef40 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d006      	beq.n	800ef40 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d101      	bne.n	800ef40 <osSemaphoreWait+0x40>
      ticks = 1;
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ef40:	f7ff fe96 	bl	800ec70 <inHandlerMode>
 800ef44:	4603      	mov	r3, r0
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d017      	beq.n	800ef7a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ef4a:	f107 0308 	add.w	r3, r7, #8
 800ef4e:	461a      	mov	r2, r3
 800ef50:	2100      	movs	r1, #0
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f000 fd62 	bl	800fa1c <xQueueReceiveFromISR>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	2b01      	cmp	r3, #1
 800ef5c:	d001      	beq.n	800ef62 <osSemaphoreWait+0x62>
      return osErrorOS;
 800ef5e:	23ff      	movs	r3, #255	; 0xff
 800ef60:	e015      	b.n	800ef8e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d011      	beq.n	800ef8c <osSemaphoreWait+0x8c>
 800ef68:	4b0b      	ldr	r3, [pc, #44]	; (800ef98 <osSemaphoreWait+0x98>)
 800ef6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef6e:	601a      	str	r2, [r3, #0]
 800ef70:	f3bf 8f4f 	dsb	sy
 800ef74:	f3bf 8f6f 	isb	sy
 800ef78:	e008      	b.n	800ef8c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ef7a:	68f9      	ldr	r1, [r7, #12]
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f000 fc39 	bl	800f7f4 <xQueueSemaphoreTake>
 800ef82:	4603      	mov	r3, r0
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d001      	beq.n	800ef8c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800ef88:	23ff      	movs	r3, #255	; 0xff
 800ef8a:	e000      	b.n	800ef8e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ef8c:	2300      	movs	r3, #0
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3710      	adds	r7, #16
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
 800ef96:	bf00      	nop
 800ef98:	e000ed04 	.word	0xe000ed04

0800ef9c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800efa4:	2300      	movs	r3, #0
 800efa6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800efa8:	2300      	movs	r3, #0
 800efaa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800efac:	f7ff fe60 	bl	800ec70 <inHandlerMode>
 800efb0:	4603      	mov	r3, r0
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d016      	beq.n	800efe4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800efb6:	f107 0308 	add.w	r3, r7, #8
 800efba:	4619      	mov	r1, r3
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f000 fb83 	bl	800f6c8 <xQueueGiveFromISR>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b01      	cmp	r3, #1
 800efc6:	d001      	beq.n	800efcc <osSemaphoreRelease+0x30>
      return osErrorOS;
 800efc8:	23ff      	movs	r3, #255	; 0xff
 800efca:	e017      	b.n	800effc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d013      	beq.n	800effa <osSemaphoreRelease+0x5e>
 800efd2:	4b0c      	ldr	r3, [pc, #48]	; (800f004 <osSemaphoreRelease+0x68>)
 800efd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efd8:	601a      	str	r2, [r3, #0]
 800efda:	f3bf 8f4f 	dsb	sy
 800efde:	f3bf 8f6f 	isb	sy
 800efe2:	e00a      	b.n	800effa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800efe4:	2300      	movs	r3, #0
 800efe6:	2200      	movs	r2, #0
 800efe8:	2100      	movs	r1, #0
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f000 fa66 	bl	800f4bc <xQueueGenericSend>
 800eff0:	4603      	mov	r3, r0
 800eff2:	2b01      	cmp	r3, #1
 800eff4:	d001      	beq.n	800effa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800eff6:	23ff      	movs	r3, #255	; 0xff
 800eff8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800effa:	68fb      	ldr	r3, [r7, #12]
}
 800effc:	4618      	mov	r0, r3
 800effe:	3710      	adds	r7, #16
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}
 800f004:	e000ed04 	.word	0xe000ed04

0800f008 <osSemaphoreGetCount>:
* @brief  Returns the current count value of a counting semaphore
* @param  semaphore_id  semaphore_id ID obtained by \ref osSemaphoreCreate.
* @retval  count value
*/
uint32_t osSemaphoreGetCount(osSemaphoreId semaphore_id)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b082      	sub	sp, #8
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
  return uxSemaphoreGetCount(semaphore_id);
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f000 fd89 	bl	800fb28 <uxQueueMessagesWaiting>
 800f016:	4603      	mov	r3, r0
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3708      	adds	r7, #8
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f020:	b480      	push	{r7}
 800f022:	b083      	sub	sp, #12
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f103 0208 	add.w	r2, r3, #8
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f04f 32ff 	mov.w	r2, #4294967295
 800f038:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f103 0208 	add.w	r2, r3, #8
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f103 0208 	add.w	r2, r3, #8
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2200      	movs	r2, #0
 800f052:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f054:	bf00      	nop
 800f056:	370c      	adds	r7, #12
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr

0800f060 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f060:	b480      	push	{r7}
 800f062:	b083      	sub	sp, #12
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2200      	movs	r2, #0
 800f06c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f06e:	bf00      	nop
 800f070:	370c      	adds	r7, #12
 800f072:	46bd      	mov	sp, r7
 800f074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f078:	4770      	bx	lr

0800f07a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f07a:	b480      	push	{r7}
 800f07c:	b085      	sub	sp, #20
 800f07e:	af00      	add	r7, sp, #0
 800f080:	6078      	str	r0, [r7, #4]
 800f082:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	685b      	ldr	r3, [r3, #4]
 800f088:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	68fa      	ldr	r2, [r7, #12]
 800f08e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	689a      	ldr	r2, [r3, #8]
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	689b      	ldr	r3, [r3, #8]
 800f09c:	683a      	ldr	r2, [r7, #0]
 800f09e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	683a      	ldr	r2, [r7, #0]
 800f0a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	687a      	ldr	r2, [r7, #4]
 800f0aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	1c5a      	adds	r2, r3, #1
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	601a      	str	r2, [r3, #0]
}
 800f0b6:	bf00      	nop
 800f0b8:	3714      	adds	r7, #20
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c0:	4770      	bx	lr

0800f0c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f0c2:	b480      	push	{r7}
 800f0c4:	b085      	sub	sp, #20
 800f0c6:	af00      	add	r7, sp, #0
 800f0c8:	6078      	str	r0, [r7, #4]
 800f0ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0d8:	d103      	bne.n	800f0e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	691b      	ldr	r3, [r3, #16]
 800f0de:	60fb      	str	r3, [r7, #12]
 800f0e0:	e00c      	b.n	800f0fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	3308      	adds	r3, #8
 800f0e6:	60fb      	str	r3, [r7, #12]
 800f0e8:	e002      	b.n	800f0f0 <vListInsert+0x2e>
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	60fb      	str	r3, [r7, #12]
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	68ba      	ldr	r2, [r7, #8]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d2f6      	bcs.n	800f0ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	685a      	ldr	r2, [r3, #4]
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	683a      	ldr	r2, [r7, #0]
 800f10a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	68fa      	ldr	r2, [r7, #12]
 800f110:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	683a      	ldr	r2, [r7, #0]
 800f116:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	687a      	ldr	r2, [r7, #4]
 800f11c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	1c5a      	adds	r2, r3, #1
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	601a      	str	r2, [r3, #0]
}
 800f128:	bf00      	nop
 800f12a:	3714      	adds	r7, #20
 800f12c:	46bd      	mov	sp, r7
 800f12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f132:	4770      	bx	lr

0800f134 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f134:	b480      	push	{r7}
 800f136:	b085      	sub	sp, #20
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	691b      	ldr	r3, [r3, #16]
 800f140:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	685b      	ldr	r3, [r3, #4]
 800f146:	687a      	ldr	r2, [r7, #4]
 800f148:	6892      	ldr	r2, [r2, #8]
 800f14a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	689b      	ldr	r3, [r3, #8]
 800f150:	687a      	ldr	r2, [r7, #4]
 800f152:	6852      	ldr	r2, [r2, #4]
 800f154:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	687a      	ldr	r2, [r7, #4]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d103      	bne.n	800f168 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	689a      	ldr	r2, [r3, #8]
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2200      	movs	r2, #0
 800f16c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	1e5a      	subs	r2, r3, #1
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	681b      	ldr	r3, [r3, #0]
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3714      	adds	r7, #20
 800f180:	46bd      	mov	sp, r7
 800f182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f186:	4770      	bx	lr

0800f188 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b084      	sub	sp, #16
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d10c      	bne.n	800f1b6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a0:	b672      	cpsid	i
 800f1a2:	f383 8811 	msr	BASEPRI, r3
 800f1a6:	f3bf 8f6f 	isb	sy
 800f1aa:	f3bf 8f4f 	dsb	sy
 800f1ae:	b662      	cpsie	i
 800f1b0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f1b2:	bf00      	nop
 800f1b4:	e7fe      	b.n	800f1b4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800f1b6:	f001 fff1 	bl	801119c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681a      	ldr	r2, [r3, #0]
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1c2:	68f9      	ldr	r1, [r7, #12]
 800f1c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f1c6:	fb01 f303 	mul.w	r3, r1, r3
 800f1ca:	441a      	add	r2, r3
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681a      	ldr	r2, [r3, #0]
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681a      	ldr	r2, [r3, #0]
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1e6:	3b01      	subs	r3, #1
 800f1e8:	68f9      	ldr	r1, [r7, #12]
 800f1ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f1ec:	fb01 f303 	mul.w	r3, r1, r3
 800f1f0:	441a      	add	r2, r3
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	22ff      	movs	r2, #255	; 0xff
 800f1fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	22ff      	movs	r2, #255	; 0xff
 800f202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d114      	bne.n	800f236 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	691b      	ldr	r3, [r3, #16]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d01a      	beq.n	800f24a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	3310      	adds	r3, #16
 800f218:	4618      	mov	r0, r3
 800f21a:	f001 faa7 	bl	801076c <xTaskRemoveFromEventList>
 800f21e:	4603      	mov	r3, r0
 800f220:	2b00      	cmp	r3, #0
 800f222:	d012      	beq.n	800f24a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f224:	4b0c      	ldr	r3, [pc, #48]	; (800f258 <xQueueGenericReset+0xd0>)
 800f226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f22a:	601a      	str	r2, [r3, #0]
 800f22c:	f3bf 8f4f 	dsb	sy
 800f230:	f3bf 8f6f 	isb	sy
 800f234:	e009      	b.n	800f24a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	3310      	adds	r3, #16
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7ff fef0 	bl	800f020 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	3324      	adds	r3, #36	; 0x24
 800f244:	4618      	mov	r0, r3
 800f246:	f7ff feeb 	bl	800f020 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f24a:	f001 ffdb 	bl	8011204 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f24e:	2301      	movs	r3, #1
}
 800f250:	4618      	mov	r0, r3
 800f252:	3710      	adds	r7, #16
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}
 800f258:	e000ed04 	.word	0xe000ed04

0800f25c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b08e      	sub	sp, #56	; 0x38
 800f260:	af02      	add	r7, sp, #8
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	60b9      	str	r1, [r7, #8]
 800f266:	607a      	str	r2, [r7, #4]
 800f268:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d10c      	bne.n	800f28a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800f270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f274:	b672      	cpsid	i
 800f276:	f383 8811 	msr	BASEPRI, r3
 800f27a:	f3bf 8f6f 	isb	sy
 800f27e:	f3bf 8f4f 	dsb	sy
 800f282:	b662      	cpsie	i
 800f284:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f286:	bf00      	nop
 800f288:	e7fe      	b.n	800f288 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d10c      	bne.n	800f2aa <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800f290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f294:	b672      	cpsid	i
 800f296:	f383 8811 	msr	BASEPRI, r3
 800f29a:	f3bf 8f6f 	isb	sy
 800f29e:	f3bf 8f4f 	dsb	sy
 800f2a2:	b662      	cpsie	i
 800f2a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f2a6:	bf00      	nop
 800f2a8:	e7fe      	b.n	800f2a8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d002      	beq.n	800f2b6 <xQueueGenericCreateStatic+0x5a>
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d001      	beq.n	800f2ba <xQueueGenericCreateStatic+0x5e>
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	e000      	b.n	800f2bc <xQueueGenericCreateStatic+0x60>
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d10c      	bne.n	800f2da <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800f2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c4:	b672      	cpsid	i
 800f2c6:	f383 8811 	msr	BASEPRI, r3
 800f2ca:	f3bf 8f6f 	isb	sy
 800f2ce:	f3bf 8f4f 	dsb	sy
 800f2d2:	b662      	cpsie	i
 800f2d4:	623b      	str	r3, [r7, #32]
}
 800f2d6:	bf00      	nop
 800f2d8:	e7fe      	b.n	800f2d8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d102      	bne.n	800f2e6 <xQueueGenericCreateStatic+0x8a>
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d101      	bne.n	800f2ea <xQueueGenericCreateStatic+0x8e>
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	e000      	b.n	800f2ec <xQueueGenericCreateStatic+0x90>
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d10c      	bne.n	800f30a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800f2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f4:	b672      	cpsid	i
 800f2f6:	f383 8811 	msr	BASEPRI, r3
 800f2fa:	f3bf 8f6f 	isb	sy
 800f2fe:	f3bf 8f4f 	dsb	sy
 800f302:	b662      	cpsie	i
 800f304:	61fb      	str	r3, [r7, #28]
}
 800f306:	bf00      	nop
 800f308:	e7fe      	b.n	800f308 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f30a:	2348      	movs	r3, #72	; 0x48
 800f30c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	2b48      	cmp	r3, #72	; 0x48
 800f312:	d00c      	beq.n	800f32e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800f314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f318:	b672      	cpsid	i
 800f31a:	f383 8811 	msr	BASEPRI, r3
 800f31e:	f3bf 8f6f 	isb	sy
 800f322:	f3bf 8f4f 	dsb	sy
 800f326:	b662      	cpsie	i
 800f328:	61bb      	str	r3, [r7, #24]
}
 800f32a:	bf00      	nop
 800f32c:	e7fe      	b.n	800f32c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f32e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f336:	2b00      	cmp	r3, #0
 800f338:	d00d      	beq.n	800f356 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f33c:	2201      	movs	r2, #1
 800f33e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f342:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f348:	9300      	str	r3, [sp, #0]
 800f34a:	4613      	mov	r3, r2
 800f34c:	687a      	ldr	r2, [r7, #4]
 800f34e:	68b9      	ldr	r1, [r7, #8]
 800f350:	68f8      	ldr	r0, [r7, #12]
 800f352:	f000 f847 	bl	800f3e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f358:	4618      	mov	r0, r3
 800f35a:	3730      	adds	r7, #48	; 0x30
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}

0800f360 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f360:	b580      	push	{r7, lr}
 800f362:	b08a      	sub	sp, #40	; 0x28
 800f364:	af02      	add	r7, sp, #8
 800f366:	60f8      	str	r0, [r7, #12]
 800f368:	60b9      	str	r1, [r7, #8]
 800f36a:	4613      	mov	r3, r2
 800f36c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d10c      	bne.n	800f38e <xQueueGenericCreate+0x2e>
	__asm volatile
 800f374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f378:	b672      	cpsid	i
 800f37a:	f383 8811 	msr	BASEPRI, r3
 800f37e:	f3bf 8f6f 	isb	sy
 800f382:	f3bf 8f4f 	dsb	sy
 800f386:	b662      	cpsie	i
 800f388:	613b      	str	r3, [r7, #16]
}
 800f38a:	bf00      	nop
 800f38c:	e7fe      	b.n	800f38c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d102      	bne.n	800f39a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f394:	2300      	movs	r3, #0
 800f396:	61fb      	str	r3, [r7, #28]
 800f398:	e004      	b.n	800f3a4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	68ba      	ldr	r2, [r7, #8]
 800f39e:	fb02 f303 	mul.w	r3, r2, r3
 800f3a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f3a4:	69fb      	ldr	r3, [r7, #28]
 800f3a6:	3348      	adds	r3, #72	; 0x48
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f002 f823 	bl	80113f4 <pvPortMalloc>
 800f3ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f3b0:	69bb      	ldr	r3, [r7, #24]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d011      	beq.n	800f3da <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f3b6:	69bb      	ldr	r3, [r7, #24]
 800f3b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	3348      	adds	r3, #72	; 0x48
 800f3be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f3c0:	69bb      	ldr	r3, [r7, #24]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f3c8:	79fa      	ldrb	r2, [r7, #7]
 800f3ca:	69bb      	ldr	r3, [r7, #24]
 800f3cc:	9300      	str	r3, [sp, #0]
 800f3ce:	4613      	mov	r3, r2
 800f3d0:	697a      	ldr	r2, [r7, #20]
 800f3d2:	68b9      	ldr	r1, [r7, #8]
 800f3d4:	68f8      	ldr	r0, [r7, #12]
 800f3d6:	f000 f805 	bl	800f3e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f3da:	69bb      	ldr	r3, [r7, #24]
	}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3720      	adds	r7, #32
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}

0800f3e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b084      	sub	sp, #16
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	60b9      	str	r1, [r7, #8]
 800f3ee:	607a      	str	r2, [r7, #4]
 800f3f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f3f2:	68bb      	ldr	r3, [r7, #8]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d103      	bne.n	800f400 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f3f8:	69bb      	ldr	r3, [r7, #24]
 800f3fa:	69ba      	ldr	r2, [r7, #24]
 800f3fc:	601a      	str	r2, [r3, #0]
 800f3fe:	e002      	b.n	800f406 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f400:	69bb      	ldr	r3, [r7, #24]
 800f402:	687a      	ldr	r2, [r7, #4]
 800f404:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f406:	69bb      	ldr	r3, [r7, #24]
 800f408:	68fa      	ldr	r2, [r7, #12]
 800f40a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f40c:	69bb      	ldr	r3, [r7, #24]
 800f40e:	68ba      	ldr	r2, [r7, #8]
 800f410:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f412:	2101      	movs	r1, #1
 800f414:	69b8      	ldr	r0, [r7, #24]
 800f416:	f7ff feb7 	bl	800f188 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f41a:	bf00      	nop
 800f41c:	3710      	adds	r7, #16
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}

0800f422 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f422:	b580      	push	{r7, lr}
 800f424:	b082      	sub	sp, #8
 800f426:	af00      	add	r7, sp, #0
 800f428:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d00e      	beq.n	800f44e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2200      	movs	r2, #0
 800f434:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2200      	movs	r2, #0
 800f43a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2200      	movs	r2, #0
 800f440:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f442:	2300      	movs	r3, #0
 800f444:	2200      	movs	r2, #0
 800f446:	2100      	movs	r1, #0
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f000 f837 	bl	800f4bc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f44e:	bf00      	nop
 800f450:	3708      	adds	r7, #8
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}

0800f456 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f456:	b580      	push	{r7, lr}
 800f458:	b086      	sub	sp, #24
 800f45a:	af00      	add	r7, sp, #0
 800f45c:	4603      	mov	r3, r0
 800f45e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f460:	2301      	movs	r3, #1
 800f462:	617b      	str	r3, [r7, #20]
 800f464:	2300      	movs	r3, #0
 800f466:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f468:	79fb      	ldrb	r3, [r7, #7]
 800f46a:	461a      	mov	r2, r3
 800f46c:	6939      	ldr	r1, [r7, #16]
 800f46e:	6978      	ldr	r0, [r7, #20]
 800f470:	f7ff ff76 	bl	800f360 <xQueueGenericCreate>
 800f474:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f476:	68f8      	ldr	r0, [r7, #12]
 800f478:	f7ff ffd3 	bl	800f422 <prvInitialiseMutex>

		return xNewQueue;
 800f47c:	68fb      	ldr	r3, [r7, #12]
	}
 800f47e:	4618      	mov	r0, r3
 800f480:	3718      	adds	r7, #24
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}

0800f486 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f486:	b580      	push	{r7, lr}
 800f488:	b088      	sub	sp, #32
 800f48a:	af02      	add	r7, sp, #8
 800f48c:	4603      	mov	r3, r0
 800f48e:	6039      	str	r1, [r7, #0]
 800f490:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f492:	2301      	movs	r3, #1
 800f494:	617b      	str	r3, [r7, #20]
 800f496:	2300      	movs	r3, #0
 800f498:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f49a:	79fb      	ldrb	r3, [r7, #7]
 800f49c:	9300      	str	r3, [sp, #0]
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	6939      	ldr	r1, [r7, #16]
 800f4a4:	6978      	ldr	r0, [r7, #20]
 800f4a6:	f7ff fed9 	bl	800f25c <xQueueGenericCreateStatic>
 800f4aa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f4ac:	68f8      	ldr	r0, [r7, #12]
 800f4ae:	f7ff ffb8 	bl	800f422 <prvInitialiseMutex>

		return xNewQueue;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
	}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3718      	adds	r7, #24
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}

0800f4bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b08e      	sub	sp, #56	; 0x38
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	60f8      	str	r0, [r7, #12]
 800f4c4:	60b9      	str	r1, [r7, #8]
 800f4c6:	607a      	str	r2, [r7, #4]
 800f4c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d10c      	bne.n	800f4f2 <xQueueGenericSend+0x36>
	__asm volatile
 800f4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4dc:	b672      	cpsid	i
 800f4de:	f383 8811 	msr	BASEPRI, r3
 800f4e2:	f3bf 8f6f 	isb	sy
 800f4e6:	f3bf 8f4f 	dsb	sy
 800f4ea:	b662      	cpsie	i
 800f4ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f4ee:	bf00      	nop
 800f4f0:	e7fe      	b.n	800f4f0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d103      	bne.n	800f500 <xQueueGenericSend+0x44>
 800f4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d101      	bne.n	800f504 <xQueueGenericSend+0x48>
 800f500:	2301      	movs	r3, #1
 800f502:	e000      	b.n	800f506 <xQueueGenericSend+0x4a>
 800f504:	2300      	movs	r3, #0
 800f506:	2b00      	cmp	r3, #0
 800f508:	d10c      	bne.n	800f524 <xQueueGenericSend+0x68>
	__asm volatile
 800f50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f50e:	b672      	cpsid	i
 800f510:	f383 8811 	msr	BASEPRI, r3
 800f514:	f3bf 8f6f 	isb	sy
 800f518:	f3bf 8f4f 	dsb	sy
 800f51c:	b662      	cpsie	i
 800f51e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f520:	bf00      	nop
 800f522:	e7fe      	b.n	800f522 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	2b02      	cmp	r3, #2
 800f528:	d103      	bne.n	800f532 <xQueueGenericSend+0x76>
 800f52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f52e:	2b01      	cmp	r3, #1
 800f530:	d101      	bne.n	800f536 <xQueueGenericSend+0x7a>
 800f532:	2301      	movs	r3, #1
 800f534:	e000      	b.n	800f538 <xQueueGenericSend+0x7c>
 800f536:	2300      	movs	r3, #0
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d10c      	bne.n	800f556 <xQueueGenericSend+0x9a>
	__asm volatile
 800f53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f540:	b672      	cpsid	i
 800f542:	f383 8811 	msr	BASEPRI, r3
 800f546:	f3bf 8f6f 	isb	sy
 800f54a:	f3bf 8f4f 	dsb	sy
 800f54e:	b662      	cpsie	i
 800f550:	623b      	str	r3, [r7, #32]
}
 800f552:	bf00      	nop
 800f554:	e7fe      	b.n	800f554 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f556:	f001 fad1 	bl	8010afc <xTaskGetSchedulerState>
 800f55a:	4603      	mov	r3, r0
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d102      	bne.n	800f566 <xQueueGenericSend+0xaa>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d101      	bne.n	800f56a <xQueueGenericSend+0xae>
 800f566:	2301      	movs	r3, #1
 800f568:	e000      	b.n	800f56c <xQueueGenericSend+0xb0>
 800f56a:	2300      	movs	r3, #0
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d10c      	bne.n	800f58a <xQueueGenericSend+0xce>
	__asm volatile
 800f570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f574:	b672      	cpsid	i
 800f576:	f383 8811 	msr	BASEPRI, r3
 800f57a:	f3bf 8f6f 	isb	sy
 800f57e:	f3bf 8f4f 	dsb	sy
 800f582:	b662      	cpsie	i
 800f584:	61fb      	str	r3, [r7, #28]
}
 800f586:	bf00      	nop
 800f588:	e7fe      	b.n	800f588 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f58a:	f001 fe07 	bl	801119c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f596:	429a      	cmp	r2, r3
 800f598:	d302      	bcc.n	800f5a0 <xQueueGenericSend+0xe4>
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	2b02      	cmp	r3, #2
 800f59e:	d129      	bne.n	800f5f4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f5a0:	683a      	ldr	r2, [r7, #0]
 800f5a2:	68b9      	ldr	r1, [r7, #8]
 800f5a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5a6:	f000 faf7 	bl	800fb98 <prvCopyDataToQueue>
 800f5aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d010      	beq.n	800f5d6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b6:	3324      	adds	r3, #36	; 0x24
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f001 f8d7 	bl	801076c <xTaskRemoveFromEventList>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d013      	beq.n	800f5ec <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f5c4:	4b3f      	ldr	r3, [pc, #252]	; (800f6c4 <xQueueGenericSend+0x208>)
 800f5c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5ca:	601a      	str	r2, [r3, #0]
 800f5cc:	f3bf 8f4f 	dsb	sy
 800f5d0:	f3bf 8f6f 	isb	sy
 800f5d4:	e00a      	b.n	800f5ec <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d007      	beq.n	800f5ec <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f5dc:	4b39      	ldr	r3, [pc, #228]	; (800f6c4 <xQueueGenericSend+0x208>)
 800f5de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5e2:	601a      	str	r2, [r3, #0]
 800f5e4:	f3bf 8f4f 	dsb	sy
 800f5e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f5ec:	f001 fe0a 	bl	8011204 <vPortExitCritical>
				return pdPASS;
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	e063      	b.n	800f6bc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d103      	bne.n	800f602 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f5fa:	f001 fe03 	bl	8011204 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f5fe:	2300      	movs	r3, #0
 800f600:	e05c      	b.n	800f6bc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f604:	2b00      	cmp	r3, #0
 800f606:	d106      	bne.n	800f616 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f608:	f107 0314 	add.w	r3, r7, #20
 800f60c:	4618      	mov	r0, r3
 800f60e:	f001 f911 	bl	8010834 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f612:	2301      	movs	r3, #1
 800f614:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f616:	f001 fdf5 	bl	8011204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f61a:	f000 fea7 	bl	801036c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f61e:	f001 fdbd 	bl	801119c <vPortEnterCritical>
 800f622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f624:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f628:	b25b      	sxtb	r3, r3
 800f62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f62e:	d103      	bne.n	800f638 <xQueueGenericSend+0x17c>
 800f630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f632:	2200      	movs	r2, #0
 800f634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f63a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f63e:	b25b      	sxtb	r3, r3
 800f640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f644:	d103      	bne.n	800f64e <xQueueGenericSend+0x192>
 800f646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f648:	2200      	movs	r2, #0
 800f64a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f64e:	f001 fdd9 	bl	8011204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f652:	1d3a      	adds	r2, r7, #4
 800f654:	f107 0314 	add.w	r3, r7, #20
 800f658:	4611      	mov	r1, r2
 800f65a:	4618      	mov	r0, r3
 800f65c:	f001 f900 	bl	8010860 <xTaskCheckForTimeOut>
 800f660:	4603      	mov	r3, r0
 800f662:	2b00      	cmp	r3, #0
 800f664:	d124      	bne.n	800f6b0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f666:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f668:	f000 fb8e 	bl	800fd88 <prvIsQueueFull>
 800f66c:	4603      	mov	r3, r0
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d018      	beq.n	800f6a4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f674:	3310      	adds	r3, #16
 800f676:	687a      	ldr	r2, [r7, #4]
 800f678:	4611      	mov	r1, r2
 800f67a:	4618      	mov	r0, r3
 800f67c:	f001 f850 	bl	8010720 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f682:	f000 fb19 	bl	800fcb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f686:	f000 fe7f 	bl	8010388 <xTaskResumeAll>
 800f68a:	4603      	mov	r3, r0
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	f47f af7c 	bne.w	800f58a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800f692:	4b0c      	ldr	r3, [pc, #48]	; (800f6c4 <xQueueGenericSend+0x208>)
 800f694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f698:	601a      	str	r2, [r3, #0]
 800f69a:	f3bf 8f4f 	dsb	sy
 800f69e:	f3bf 8f6f 	isb	sy
 800f6a2:	e772      	b.n	800f58a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f6a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6a6:	f000 fb07 	bl	800fcb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f6aa:	f000 fe6d 	bl	8010388 <xTaskResumeAll>
 800f6ae:	e76c      	b.n	800f58a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f6b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6b2:	f000 fb01 	bl	800fcb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f6b6:	f000 fe67 	bl	8010388 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f6ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3738      	adds	r7, #56	; 0x38
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}
 800f6c4:	e000ed04 	.word	0xe000ed04

0800f6c8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b08e      	sub	sp, #56	; 0x38
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d10c      	bne.n	800f6f6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800f6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e0:	b672      	cpsid	i
 800f6e2:	f383 8811 	msr	BASEPRI, r3
 800f6e6:	f3bf 8f6f 	isb	sy
 800f6ea:	f3bf 8f4f 	dsb	sy
 800f6ee:	b662      	cpsie	i
 800f6f0:	623b      	str	r3, [r7, #32]
}
 800f6f2:	bf00      	nop
 800f6f4:	e7fe      	b.n	800f6f4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d00c      	beq.n	800f718 <xQueueGiveFromISR+0x50>
	__asm volatile
 800f6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f702:	b672      	cpsid	i
 800f704:	f383 8811 	msr	BASEPRI, r3
 800f708:	f3bf 8f6f 	isb	sy
 800f70c:	f3bf 8f4f 	dsb	sy
 800f710:	b662      	cpsie	i
 800f712:	61fb      	str	r3, [r7, #28]
}
 800f714:	bf00      	nop
 800f716:	e7fe      	b.n	800f716 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d103      	bne.n	800f728 <xQueueGiveFromISR+0x60>
 800f720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f722:	689b      	ldr	r3, [r3, #8]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d101      	bne.n	800f72c <xQueueGiveFromISR+0x64>
 800f728:	2301      	movs	r3, #1
 800f72a:	e000      	b.n	800f72e <xQueueGiveFromISR+0x66>
 800f72c:	2300      	movs	r3, #0
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d10c      	bne.n	800f74c <xQueueGiveFromISR+0x84>
	__asm volatile
 800f732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f736:	b672      	cpsid	i
 800f738:	f383 8811 	msr	BASEPRI, r3
 800f73c:	f3bf 8f6f 	isb	sy
 800f740:	f3bf 8f4f 	dsb	sy
 800f744:	b662      	cpsie	i
 800f746:	61bb      	str	r3, [r7, #24]
}
 800f748:	bf00      	nop
 800f74a:	e7fe      	b.n	800f74a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f74c:	f001 fe0e 	bl	801136c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f750:	f3ef 8211 	mrs	r2, BASEPRI
 800f754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f758:	b672      	cpsid	i
 800f75a:	f383 8811 	msr	BASEPRI, r3
 800f75e:	f3bf 8f6f 	isb	sy
 800f762:	f3bf 8f4f 	dsb	sy
 800f766:	b662      	cpsie	i
 800f768:	617a      	str	r2, [r7, #20]
 800f76a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f76c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f76e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f774:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f77a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f77c:	429a      	cmp	r2, r3
 800f77e:	d22b      	bcs.n	800f7d8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f782:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f78c:	1c5a      	adds	r2, r3, #1
 800f78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f790:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f792:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f79a:	d112      	bne.n	800f7c2 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d016      	beq.n	800f7d2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a6:	3324      	adds	r3, #36	; 0x24
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f000 ffdf 	bl	801076c <xTaskRemoveFromEventList>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d00e      	beq.n	800f7d2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d00b      	beq.n	800f7d2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	2201      	movs	r2, #1
 800f7be:	601a      	str	r2, [r3, #0]
 800f7c0:	e007      	b.n	800f7d2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f7c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7c6:	3301      	adds	r3, #1
 800f7c8:	b2db      	uxtb	r3, r3
 800f7ca:	b25a      	sxtb	r2, r3
 800f7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	637b      	str	r3, [r7, #52]	; 0x34
 800f7d6:	e001      	b.n	800f7dc <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f7d8:	2300      	movs	r3, #0
 800f7da:	637b      	str	r3, [r7, #52]	; 0x34
 800f7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7de:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f7e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	3738      	adds	r7, #56	; 0x38
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd80      	pop	{r7, pc}
	...

0800f7f4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b08e      	sub	sp, #56	; 0x38
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f7fe:	2300      	movs	r3, #0
 800f800:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f806:	2300      	movs	r3, #0
 800f808:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d10c      	bne.n	800f82a <xQueueSemaphoreTake+0x36>
	__asm volatile
 800f810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f814:	b672      	cpsid	i
 800f816:	f383 8811 	msr	BASEPRI, r3
 800f81a:	f3bf 8f6f 	isb	sy
 800f81e:	f3bf 8f4f 	dsb	sy
 800f822:	b662      	cpsie	i
 800f824:	623b      	str	r3, [r7, #32]
}
 800f826:	bf00      	nop
 800f828:	e7fe      	b.n	800f828 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d00c      	beq.n	800f84c <xQueueSemaphoreTake+0x58>
	__asm volatile
 800f832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f836:	b672      	cpsid	i
 800f838:	f383 8811 	msr	BASEPRI, r3
 800f83c:	f3bf 8f6f 	isb	sy
 800f840:	f3bf 8f4f 	dsb	sy
 800f844:	b662      	cpsie	i
 800f846:	61fb      	str	r3, [r7, #28]
}
 800f848:	bf00      	nop
 800f84a:	e7fe      	b.n	800f84a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f84c:	f001 f956 	bl	8010afc <xTaskGetSchedulerState>
 800f850:	4603      	mov	r3, r0
 800f852:	2b00      	cmp	r3, #0
 800f854:	d102      	bne.n	800f85c <xQueueSemaphoreTake+0x68>
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d101      	bne.n	800f860 <xQueueSemaphoreTake+0x6c>
 800f85c:	2301      	movs	r3, #1
 800f85e:	e000      	b.n	800f862 <xQueueSemaphoreTake+0x6e>
 800f860:	2300      	movs	r3, #0
 800f862:	2b00      	cmp	r3, #0
 800f864:	d10c      	bne.n	800f880 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800f866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f86a:	b672      	cpsid	i
 800f86c:	f383 8811 	msr	BASEPRI, r3
 800f870:	f3bf 8f6f 	isb	sy
 800f874:	f3bf 8f4f 	dsb	sy
 800f878:	b662      	cpsie	i
 800f87a:	61bb      	str	r3, [r7, #24]
}
 800f87c:	bf00      	nop
 800f87e:	e7fe      	b.n	800f87e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f880:	f001 fc8c 	bl	801119c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f888:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d024      	beq.n	800f8da <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f892:	1e5a      	subs	r2, r3, #1
 800f894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f896:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d104      	bne.n	800f8aa <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f8a0:	f001 faf2 	bl	8010e88 <pvTaskIncrementMutexHeldCount>
 800f8a4:	4602      	mov	r2, r0
 800f8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ac:	691b      	ldr	r3, [r3, #16]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d00f      	beq.n	800f8d2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b4:	3310      	adds	r3, #16
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f000 ff58 	bl	801076c <xTaskRemoveFromEventList>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d007      	beq.n	800f8d2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f8c2:	4b55      	ldr	r3, [pc, #340]	; (800fa18 <xQueueSemaphoreTake+0x224>)
 800f8c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8c8:	601a      	str	r2, [r3, #0]
 800f8ca:	f3bf 8f4f 	dsb	sy
 800f8ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f8d2:	f001 fc97 	bl	8011204 <vPortExitCritical>
				return pdPASS;
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	e099      	b.n	800fa0e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d113      	bne.n	800f908 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d00c      	beq.n	800f900 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800f8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ea:	b672      	cpsid	i
 800f8ec:	f383 8811 	msr	BASEPRI, r3
 800f8f0:	f3bf 8f6f 	isb	sy
 800f8f4:	f3bf 8f4f 	dsb	sy
 800f8f8:	b662      	cpsie	i
 800f8fa:	617b      	str	r3, [r7, #20]
}
 800f8fc:	bf00      	nop
 800f8fe:	e7fe      	b.n	800f8fe <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f900:	f001 fc80 	bl	8011204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f904:	2300      	movs	r3, #0
 800f906:	e082      	b.n	800fa0e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d106      	bne.n	800f91c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f90e:	f107 030c 	add.w	r3, r7, #12
 800f912:	4618      	mov	r0, r3
 800f914:	f000 ff8e 	bl	8010834 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f918:	2301      	movs	r3, #1
 800f91a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f91c:	f001 fc72 	bl	8011204 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f920:	f000 fd24 	bl	801036c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f924:	f001 fc3a 	bl	801119c <vPortEnterCritical>
 800f928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f92a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f92e:	b25b      	sxtb	r3, r3
 800f930:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f934:	d103      	bne.n	800f93e <xQueueSemaphoreTake+0x14a>
 800f936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f938:	2200      	movs	r2, #0
 800f93a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f944:	b25b      	sxtb	r3, r3
 800f946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f94a:	d103      	bne.n	800f954 <xQueueSemaphoreTake+0x160>
 800f94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f94e:	2200      	movs	r2, #0
 800f950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f954:	f001 fc56 	bl	8011204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f958:	463a      	mov	r2, r7
 800f95a:	f107 030c 	add.w	r3, r7, #12
 800f95e:	4611      	mov	r1, r2
 800f960:	4618      	mov	r0, r3
 800f962:	f000 ff7d 	bl	8010860 <xTaskCheckForTimeOut>
 800f966:	4603      	mov	r3, r0
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d132      	bne.n	800f9d2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f96c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f96e:	f000 f9f5 	bl	800fd5c <prvIsQueueEmpty>
 800f972:	4603      	mov	r3, r0
 800f974:	2b00      	cmp	r3, #0
 800f976:	d026      	beq.n	800f9c6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d109      	bne.n	800f994 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800f980:	f001 fc0c 	bl	801119c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f986:	689b      	ldr	r3, [r3, #8]
 800f988:	4618      	mov	r0, r3
 800f98a:	f001 f8d5 	bl	8010b38 <xTaskPriorityInherit>
 800f98e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f990:	f001 fc38 	bl	8011204 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f996:	3324      	adds	r3, #36	; 0x24
 800f998:	683a      	ldr	r2, [r7, #0]
 800f99a:	4611      	mov	r1, r2
 800f99c:	4618      	mov	r0, r3
 800f99e:	f000 febf 	bl	8010720 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f9a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9a4:	f000 f988 	bl	800fcb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f9a8:	f000 fcee 	bl	8010388 <xTaskResumeAll>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	f47f af66 	bne.w	800f880 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800f9b4:	4b18      	ldr	r3, [pc, #96]	; (800fa18 <xQueueSemaphoreTake+0x224>)
 800f9b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9ba:	601a      	str	r2, [r3, #0]
 800f9bc:	f3bf 8f4f 	dsb	sy
 800f9c0:	f3bf 8f6f 	isb	sy
 800f9c4:	e75c      	b.n	800f880 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f9c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9c8:	f000 f976 	bl	800fcb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f9cc:	f000 fcdc 	bl	8010388 <xTaskResumeAll>
 800f9d0:	e756      	b.n	800f880 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f9d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9d4:	f000 f970 	bl	800fcb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f9d8:	f000 fcd6 	bl	8010388 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f9dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9de:	f000 f9bd 	bl	800fd5c <prvIsQueueEmpty>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	f43f af4b 	beq.w	800f880 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d00d      	beq.n	800fa0c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800f9f0:	f001 fbd4 	bl	801119c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f9f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9f6:	f000 f8b7 	bl	800fb68 <prvGetDisinheritPriorityAfterTimeout>
 800f9fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9fe:	689b      	ldr	r3, [r3, #8]
 800fa00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa02:	4618      	mov	r0, r3
 800fa04:	f001 f9a2 	bl	8010d4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fa08:	f001 fbfc 	bl	8011204 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fa0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3738      	adds	r7, #56	; 0x38
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
 800fa16:	bf00      	nop
 800fa18:	e000ed04 	.word	0xe000ed04

0800fa1c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b08e      	sub	sp, #56	; 0x38
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	60f8      	str	r0, [r7, #12]
 800fa24:	60b9      	str	r1, [r7, #8]
 800fa26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fa2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d10c      	bne.n	800fa4c <xQueueReceiveFromISR+0x30>
	__asm volatile
 800fa32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa36:	b672      	cpsid	i
 800fa38:	f383 8811 	msr	BASEPRI, r3
 800fa3c:	f3bf 8f6f 	isb	sy
 800fa40:	f3bf 8f4f 	dsb	sy
 800fa44:	b662      	cpsie	i
 800fa46:	623b      	str	r3, [r7, #32]
}
 800fa48:	bf00      	nop
 800fa4a:	e7fe      	b.n	800fa4a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d103      	bne.n	800fa5a <xQueueReceiveFromISR+0x3e>
 800fa52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d101      	bne.n	800fa5e <xQueueReceiveFromISR+0x42>
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	e000      	b.n	800fa60 <xQueueReceiveFromISR+0x44>
 800fa5e:	2300      	movs	r3, #0
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d10c      	bne.n	800fa7e <xQueueReceiveFromISR+0x62>
	__asm volatile
 800fa64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa68:	b672      	cpsid	i
 800fa6a:	f383 8811 	msr	BASEPRI, r3
 800fa6e:	f3bf 8f6f 	isb	sy
 800fa72:	f3bf 8f4f 	dsb	sy
 800fa76:	b662      	cpsie	i
 800fa78:	61fb      	str	r3, [r7, #28]
}
 800fa7a:	bf00      	nop
 800fa7c:	e7fe      	b.n	800fa7c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fa7e:	f001 fc75 	bl	801136c <vPortValidateInterruptPriority>
	__asm volatile
 800fa82:	f3ef 8211 	mrs	r2, BASEPRI
 800fa86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa8a:	b672      	cpsid	i
 800fa8c:	f383 8811 	msr	BASEPRI, r3
 800fa90:	f3bf 8f6f 	isb	sy
 800fa94:	f3bf 8f4f 	dsb	sy
 800fa98:	b662      	cpsie	i
 800fa9a:	61ba      	str	r2, [r7, #24]
 800fa9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fa9e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800faa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800faa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faa6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800faa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d02f      	beq.n	800fb0e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800faae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fab8:	68b9      	ldr	r1, [r7, #8]
 800faba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fabc:	f000 f8d6 	bl	800fc6c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fac2:	1e5a      	subs	r2, r3, #1
 800fac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fac8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800facc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fad0:	d112      	bne.n	800faf8 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad4:	691b      	ldr	r3, [r3, #16]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d016      	beq.n	800fb08 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fadc:	3310      	adds	r3, #16
 800fade:	4618      	mov	r0, r3
 800fae0:	f000 fe44 	bl	801076c <xTaskRemoveFromEventList>
 800fae4:	4603      	mov	r3, r0
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d00e      	beq.n	800fb08 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d00b      	beq.n	800fb08 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2201      	movs	r2, #1
 800faf4:	601a      	str	r2, [r3, #0]
 800faf6:	e007      	b.n	800fb08 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800faf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fafc:	3301      	adds	r3, #1
 800fafe:	b2db      	uxtb	r3, r3
 800fb00:	b25a      	sxtb	r2, r3
 800fb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800fb08:	2301      	movs	r3, #1
 800fb0a:	637b      	str	r3, [r7, #52]	; 0x34
 800fb0c:	e001      	b.n	800fb12 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	637b      	str	r3, [r7, #52]	; 0x34
 800fb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb14:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	f383 8811 	msr	BASEPRI, r3
}
 800fb1c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fb1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3738      	adds	r7, #56	; 0x38
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b084      	sub	sp, #16
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d10c      	bne.n	800fb50 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800fb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb3a:	b672      	cpsid	i
 800fb3c:	f383 8811 	msr	BASEPRI, r3
 800fb40:	f3bf 8f6f 	isb	sy
 800fb44:	f3bf 8f4f 	dsb	sy
 800fb48:	b662      	cpsie	i
 800fb4a:	60bb      	str	r3, [r7, #8]
}
 800fb4c:	bf00      	nop
 800fb4e:	e7fe      	b.n	800fb4e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800fb50:	f001 fb24 	bl	801119c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb58:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800fb5a:	f001 fb53 	bl	8011204 <vPortExitCritical>

	return uxReturn;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800fb60:	4618      	mov	r0, r3
 800fb62:	3710      	adds	r7, #16
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}

0800fb68 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fb68:	b480      	push	{r7}
 800fb6a:	b085      	sub	sp, #20
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d006      	beq.n	800fb86 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	f1c3 0307 	rsb	r3, r3, #7
 800fb82:	60fb      	str	r3, [r7, #12]
 800fb84:	e001      	b.n	800fb8a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fb86:	2300      	movs	r3, #0
 800fb88:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
	}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3714      	adds	r7, #20
 800fb90:	46bd      	mov	sp, r7
 800fb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb96:	4770      	bx	lr

0800fb98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b086      	sub	sp, #24
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	60b9      	str	r1, [r7, #8]
 800fba2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fba4:	2300      	movs	r3, #0
 800fba6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d10d      	bne.n	800fbd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d14d      	bne.n	800fc5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	689b      	ldr	r3, [r3, #8]
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f001 f838 	bl	8010c38 <xTaskPriorityDisinherit>
 800fbc8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	609a      	str	r2, [r3, #8]
 800fbd0:	e043      	b.n	800fc5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d119      	bne.n	800fc0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	6858      	ldr	r0, [r3, #4]
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	68b9      	ldr	r1, [r7, #8]
 800fbe4:	f002 fe9b 	bl	801291e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	685a      	ldr	r2, [r3, #4]
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbf0:	441a      	add	r2, r3
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	685a      	ldr	r2, [r3, #4]
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	689b      	ldr	r3, [r3, #8]
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	d32b      	bcc.n	800fc5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	681a      	ldr	r2, [r3, #0]
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	605a      	str	r2, [r3, #4]
 800fc0a:	e026      	b.n	800fc5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	68d8      	ldr	r0, [r3, #12]
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc14:	461a      	mov	r2, r3
 800fc16:	68b9      	ldr	r1, [r7, #8]
 800fc18:	f002 fe81 	bl	801291e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	68da      	ldr	r2, [r3, #12]
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc24:	425b      	negs	r3, r3
 800fc26:	441a      	add	r2, r3
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	68da      	ldr	r2, [r3, #12]
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d207      	bcs.n	800fc48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	689a      	ldr	r2, [r3, #8]
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc40:	425b      	negs	r3, r3
 800fc42:	441a      	add	r2, r3
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2b02      	cmp	r3, #2
 800fc4c:	d105      	bne.n	800fc5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d002      	beq.n	800fc5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fc54:	693b      	ldr	r3, [r7, #16]
 800fc56:	3b01      	subs	r3, #1
 800fc58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	1c5a      	adds	r2, r3, #1
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fc62:	697b      	ldr	r3, [r7, #20]
}
 800fc64:	4618      	mov	r0, r3
 800fc66:	3718      	adds	r7, #24
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}

0800fc6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b082      	sub	sp, #8
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d018      	beq.n	800fcb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	68da      	ldr	r2, [r3, #12]
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc86:	441a      	add	r2, r3
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	68da      	ldr	r2, [r3, #12]
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	689b      	ldr	r3, [r3, #8]
 800fc94:	429a      	cmp	r2, r3
 800fc96:	d303      	bcc.n	800fca0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681a      	ldr	r2, [r3, #0]
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	68d9      	ldr	r1, [r3, #12]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fca8:	461a      	mov	r2, r3
 800fcaa:	6838      	ldr	r0, [r7, #0]
 800fcac:	f002 fe37 	bl	801291e <memcpy>
	}
}
 800fcb0:	bf00      	nop
 800fcb2:	3708      	adds	r7, #8
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b084      	sub	sp, #16
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fcc0:	f001 fa6c 	bl	801119c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fcca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fccc:	e011      	b.n	800fcf2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d012      	beq.n	800fcfc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	3324      	adds	r3, #36	; 0x24
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f000 fd46 	bl	801076c <xTaskRemoveFromEventList>
 800fce0:	4603      	mov	r3, r0
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d001      	beq.n	800fcea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fce6:	f000 fe21 	bl	801092c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fcea:	7bfb      	ldrb	r3, [r7, #15]
 800fcec:	3b01      	subs	r3, #1
 800fcee:	b2db      	uxtb	r3, r3
 800fcf0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fcf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	dce9      	bgt.n	800fcce <prvUnlockQueue+0x16>
 800fcfa:	e000      	b.n	800fcfe <prvUnlockQueue+0x46>
					break;
 800fcfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	22ff      	movs	r2, #255	; 0xff
 800fd02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fd06:	f001 fa7d 	bl	8011204 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fd0a:	f001 fa47 	bl	801119c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fd16:	e011      	b.n	800fd3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	691b      	ldr	r3, [r3, #16]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d012      	beq.n	800fd46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	3310      	adds	r3, #16
 800fd24:	4618      	mov	r0, r3
 800fd26:	f000 fd21 	bl	801076c <xTaskRemoveFromEventList>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d001      	beq.n	800fd34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fd30:	f000 fdfc 	bl	801092c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fd34:	7bbb      	ldrb	r3, [r7, #14]
 800fd36:	3b01      	subs	r3, #1
 800fd38:	b2db      	uxtb	r3, r3
 800fd3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fd3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	dce9      	bgt.n	800fd18 <prvUnlockQueue+0x60>
 800fd44:	e000      	b.n	800fd48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fd46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	22ff      	movs	r2, #255	; 0xff
 800fd4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fd50:	f001 fa58 	bl	8011204 <vPortExitCritical>
}
 800fd54:	bf00      	nop
 800fd56:	3710      	adds	r7, #16
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}

0800fd5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b084      	sub	sp, #16
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fd64:	f001 fa1a 	bl	801119c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d102      	bne.n	800fd76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fd70:	2301      	movs	r3, #1
 800fd72:	60fb      	str	r3, [r7, #12]
 800fd74:	e001      	b.n	800fd7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fd76:	2300      	movs	r3, #0
 800fd78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fd7a:	f001 fa43 	bl	8011204 <vPortExitCritical>

	return xReturn;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3710      	adds	r7, #16
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b084      	sub	sp, #16
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fd90:	f001 fa04 	bl	801119c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d102      	bne.n	800fda6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fda0:	2301      	movs	r3, #1
 800fda2:	60fb      	str	r3, [r7, #12]
 800fda4:	e001      	b.n	800fdaa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fda6:	2300      	movs	r3, #0
 800fda8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fdaa:	f001 fa2b 	bl	8011204 <vPortExitCritical>

	return xReturn;
 800fdae:	68fb      	ldr	r3, [r7, #12]
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3710      	adds	r7, #16
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b08e      	sub	sp, #56	; 0x38
 800fdbc:	af04      	add	r7, sp, #16
 800fdbe:	60f8      	str	r0, [r7, #12]
 800fdc0:	60b9      	str	r1, [r7, #8]
 800fdc2:	607a      	str	r2, [r7, #4]
 800fdc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fdc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d10c      	bne.n	800fde6 <xTaskCreateStatic+0x2e>
	__asm volatile
 800fdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdd0:	b672      	cpsid	i
 800fdd2:	f383 8811 	msr	BASEPRI, r3
 800fdd6:	f3bf 8f6f 	isb	sy
 800fdda:	f3bf 8f4f 	dsb	sy
 800fdde:	b662      	cpsie	i
 800fde0:	623b      	str	r3, [r7, #32]
}
 800fde2:	bf00      	nop
 800fde4:	e7fe      	b.n	800fde4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800fde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d10c      	bne.n	800fe06 <xTaskCreateStatic+0x4e>
	__asm volatile
 800fdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf0:	b672      	cpsid	i
 800fdf2:	f383 8811 	msr	BASEPRI, r3
 800fdf6:	f3bf 8f6f 	isb	sy
 800fdfa:	f3bf 8f4f 	dsb	sy
 800fdfe:	b662      	cpsie	i
 800fe00:	61fb      	str	r3, [r7, #28]
}
 800fe02:	bf00      	nop
 800fe04:	e7fe      	b.n	800fe04 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fe06:	23a0      	movs	r3, #160	; 0xa0
 800fe08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fe0a:	693b      	ldr	r3, [r7, #16]
 800fe0c:	2ba0      	cmp	r3, #160	; 0xa0
 800fe0e:	d00c      	beq.n	800fe2a <xTaskCreateStatic+0x72>
	__asm volatile
 800fe10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe14:	b672      	cpsid	i
 800fe16:	f383 8811 	msr	BASEPRI, r3
 800fe1a:	f3bf 8f6f 	isb	sy
 800fe1e:	f3bf 8f4f 	dsb	sy
 800fe22:	b662      	cpsie	i
 800fe24:	61bb      	str	r3, [r7, #24]
}
 800fe26:	bf00      	nop
 800fe28:	e7fe      	b.n	800fe28 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fe2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fe2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d01e      	beq.n	800fe70 <xTaskCreateStatic+0xb8>
 800fe32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d01b      	beq.n	800fe70 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fe38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fe3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fe42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe44:	2202      	movs	r2, #2
 800fe46:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	9303      	str	r3, [sp, #12]
 800fe4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe50:	9302      	str	r3, [sp, #8]
 800fe52:	f107 0314 	add.w	r3, r7, #20
 800fe56:	9301      	str	r3, [sp, #4]
 800fe58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe5a:	9300      	str	r3, [sp, #0]
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	687a      	ldr	r2, [r7, #4]
 800fe60:	68b9      	ldr	r1, [r7, #8]
 800fe62:	68f8      	ldr	r0, [r7, #12]
 800fe64:	f000 f850 	bl	800ff08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fe68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe6a:	f000 f8ed 	bl	8010048 <prvAddNewTaskToReadyList>
 800fe6e:	e001      	b.n	800fe74 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800fe70:	2300      	movs	r3, #0
 800fe72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fe74:	697b      	ldr	r3, [r7, #20]
	}
 800fe76:	4618      	mov	r0, r3
 800fe78:	3728      	adds	r7, #40	; 0x28
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}

0800fe7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fe7e:	b580      	push	{r7, lr}
 800fe80:	b08c      	sub	sp, #48	; 0x30
 800fe82:	af04      	add	r7, sp, #16
 800fe84:	60f8      	str	r0, [r7, #12]
 800fe86:	60b9      	str	r1, [r7, #8]
 800fe88:	603b      	str	r3, [r7, #0]
 800fe8a:	4613      	mov	r3, r2
 800fe8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fe8e:	88fb      	ldrh	r3, [r7, #6]
 800fe90:	009b      	lsls	r3, r3, #2
 800fe92:	4618      	mov	r0, r3
 800fe94:	f001 faae 	bl	80113f4 <pvPortMalloc>
 800fe98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d00e      	beq.n	800febe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fea0:	20a0      	movs	r0, #160	; 0xa0
 800fea2:	f001 faa7 	bl	80113f4 <pvPortMalloc>
 800fea6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fea8:	69fb      	ldr	r3, [r7, #28]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d003      	beq.n	800feb6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800feae:	69fb      	ldr	r3, [r7, #28]
 800feb0:	697a      	ldr	r2, [r7, #20]
 800feb2:	631a      	str	r2, [r3, #48]	; 0x30
 800feb4:	e005      	b.n	800fec2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800feb6:	6978      	ldr	r0, [r7, #20]
 800feb8:	f001 fb66 	bl	8011588 <vPortFree>
 800febc:	e001      	b.n	800fec2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800febe:	2300      	movs	r3, #0
 800fec0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fec2:	69fb      	ldr	r3, [r7, #28]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d017      	beq.n	800fef8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fec8:	69fb      	ldr	r3, [r7, #28]
 800feca:	2200      	movs	r2, #0
 800fecc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fed0:	88fa      	ldrh	r2, [r7, #6]
 800fed2:	2300      	movs	r3, #0
 800fed4:	9303      	str	r3, [sp, #12]
 800fed6:	69fb      	ldr	r3, [r7, #28]
 800fed8:	9302      	str	r3, [sp, #8]
 800feda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fedc:	9301      	str	r3, [sp, #4]
 800fede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee0:	9300      	str	r3, [sp, #0]
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	68b9      	ldr	r1, [r7, #8]
 800fee6:	68f8      	ldr	r0, [r7, #12]
 800fee8:	f000 f80e 	bl	800ff08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800feec:	69f8      	ldr	r0, [r7, #28]
 800feee:	f000 f8ab 	bl	8010048 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fef2:	2301      	movs	r3, #1
 800fef4:	61bb      	str	r3, [r7, #24]
 800fef6:	e002      	b.n	800fefe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fef8:	f04f 33ff 	mov.w	r3, #4294967295
 800fefc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fefe:	69bb      	ldr	r3, [r7, #24]
	}
 800ff00:	4618      	mov	r0, r3
 800ff02:	3720      	adds	r7, #32
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}

0800ff08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b088      	sub	sp, #32
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	60f8      	str	r0, [r7, #12]
 800ff10:	60b9      	str	r1, [r7, #8]
 800ff12:	607a      	str	r2, [r7, #4]
 800ff14:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ff16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff1a:	6879      	ldr	r1, [r7, #4]
 800ff1c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ff20:	440b      	add	r3, r1
 800ff22:	009b      	lsls	r3, r3, #2
 800ff24:	4413      	add	r3, r2
 800ff26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ff28:	69bb      	ldr	r3, [r7, #24]
 800ff2a:	f023 0307 	bic.w	r3, r3, #7
 800ff2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ff30:	69bb      	ldr	r3, [r7, #24]
 800ff32:	f003 0307 	and.w	r3, r3, #7
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d00c      	beq.n	800ff54 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800ff3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff3e:	b672      	cpsid	i
 800ff40:	f383 8811 	msr	BASEPRI, r3
 800ff44:	f3bf 8f6f 	isb	sy
 800ff48:	f3bf 8f4f 	dsb	sy
 800ff4c:	b662      	cpsie	i
 800ff4e:	617b      	str	r3, [r7, #20]
}
 800ff50:	bf00      	nop
 800ff52:	e7fe      	b.n	800ff52 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d01f      	beq.n	800ff9a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	61fb      	str	r3, [r7, #28]
 800ff5e:	e012      	b.n	800ff86 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ff60:	68ba      	ldr	r2, [r7, #8]
 800ff62:	69fb      	ldr	r3, [r7, #28]
 800ff64:	4413      	add	r3, r2
 800ff66:	7819      	ldrb	r1, [r3, #0]
 800ff68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff6a:	69fb      	ldr	r3, [r7, #28]
 800ff6c:	4413      	add	r3, r2
 800ff6e:	3334      	adds	r3, #52	; 0x34
 800ff70:	460a      	mov	r2, r1
 800ff72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ff74:	68ba      	ldr	r2, [r7, #8]
 800ff76:	69fb      	ldr	r3, [r7, #28]
 800ff78:	4413      	add	r3, r2
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d006      	beq.n	800ff8e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ff80:	69fb      	ldr	r3, [r7, #28]
 800ff82:	3301      	adds	r3, #1
 800ff84:	61fb      	str	r3, [r7, #28]
 800ff86:	69fb      	ldr	r3, [r7, #28]
 800ff88:	2b0f      	cmp	r3, #15
 800ff8a:	d9e9      	bls.n	800ff60 <prvInitialiseNewTask+0x58>
 800ff8c:	e000      	b.n	800ff90 <prvInitialiseNewTask+0x88>
			{
				break;
 800ff8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ff90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff92:	2200      	movs	r2, #0
 800ff94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ff98:	e003      	b.n	800ffa2 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ff9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ffa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffa4:	2b06      	cmp	r3, #6
 800ffa6:	d901      	bls.n	800ffac <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ffa8:	2306      	movs	r3, #6
 800ffaa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ffac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ffb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ffb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ffb6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ffb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffba:	2200      	movs	r2, #0
 800ffbc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ffbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc0:	3304      	adds	r3, #4
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7ff f84c 	bl	800f060 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ffc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffca:	3318      	adds	r3, #24
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f7ff f847 	bl	800f060 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ffd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffda:	f1c3 0207 	rsb	r2, r3, #7
 800ffde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffe0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ffe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffe6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ffe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffea:	2200      	movs	r2, #0
 800ffec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff2:	2200      	movs	r2, #0
 800fff4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fffa:	334c      	adds	r3, #76	; 0x4c
 800fffc:	224c      	movs	r2, #76	; 0x4c
 800fffe:	2100      	movs	r1, #0
 8010000:	4618      	mov	r0, r3
 8010002:	f002 fba4 	bl	801274e <memset>
 8010006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010008:	4a0c      	ldr	r2, [pc, #48]	; (801003c <prvInitialiseNewTask+0x134>)
 801000a:	651a      	str	r2, [r3, #80]	; 0x50
 801000c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801000e:	4a0c      	ldr	r2, [pc, #48]	; (8010040 <prvInitialiseNewTask+0x138>)
 8010010:	655a      	str	r2, [r3, #84]	; 0x54
 8010012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010014:	4a0b      	ldr	r2, [pc, #44]	; (8010044 <prvInitialiseNewTask+0x13c>)
 8010016:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010018:	683a      	ldr	r2, [r7, #0]
 801001a:	68f9      	ldr	r1, [r7, #12]
 801001c:	69b8      	ldr	r0, [r7, #24]
 801001e:	f000 ffad 	bl	8010f7c <pxPortInitialiseStack>
 8010022:	4602      	mov	r2, r0
 8010024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010026:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801002a:	2b00      	cmp	r3, #0
 801002c:	d002      	beq.n	8010034 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801002e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010032:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010034:	bf00      	nop
 8010036:	3720      	adds	r7, #32
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}
 801003c:	20008ee0 	.word	0x20008ee0
 8010040:	20008f48 	.word	0x20008f48
 8010044:	20008fb0 	.word	0x20008fb0

08010048 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b082      	sub	sp, #8
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010050:	f001 f8a4 	bl	801119c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010054:	4b2a      	ldr	r3, [pc, #168]	; (8010100 <prvAddNewTaskToReadyList+0xb8>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	3301      	adds	r3, #1
 801005a:	4a29      	ldr	r2, [pc, #164]	; (8010100 <prvAddNewTaskToReadyList+0xb8>)
 801005c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801005e:	4b29      	ldr	r3, [pc, #164]	; (8010104 <prvAddNewTaskToReadyList+0xbc>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d109      	bne.n	801007a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010066:	4a27      	ldr	r2, [pc, #156]	; (8010104 <prvAddNewTaskToReadyList+0xbc>)
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801006c:	4b24      	ldr	r3, [pc, #144]	; (8010100 <prvAddNewTaskToReadyList+0xb8>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	2b01      	cmp	r3, #1
 8010072:	d110      	bne.n	8010096 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010074:	f000 fc7e 	bl	8010974 <prvInitialiseTaskLists>
 8010078:	e00d      	b.n	8010096 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801007a:	4b23      	ldr	r3, [pc, #140]	; (8010108 <prvAddNewTaskToReadyList+0xc0>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d109      	bne.n	8010096 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010082:	4b20      	ldr	r3, [pc, #128]	; (8010104 <prvAddNewTaskToReadyList+0xbc>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801008c:	429a      	cmp	r2, r3
 801008e:	d802      	bhi.n	8010096 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010090:	4a1c      	ldr	r2, [pc, #112]	; (8010104 <prvAddNewTaskToReadyList+0xbc>)
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010096:	4b1d      	ldr	r3, [pc, #116]	; (801010c <prvAddNewTaskToReadyList+0xc4>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	3301      	adds	r3, #1
 801009c:	4a1b      	ldr	r2, [pc, #108]	; (801010c <prvAddNewTaskToReadyList+0xc4>)
 801009e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100a4:	2201      	movs	r2, #1
 80100a6:	409a      	lsls	r2, r3
 80100a8:	4b19      	ldr	r3, [pc, #100]	; (8010110 <prvAddNewTaskToReadyList+0xc8>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	4313      	orrs	r3, r2
 80100ae:	4a18      	ldr	r2, [pc, #96]	; (8010110 <prvAddNewTaskToReadyList+0xc8>)
 80100b0:	6013      	str	r3, [r2, #0]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100b6:	4613      	mov	r3, r2
 80100b8:	009b      	lsls	r3, r3, #2
 80100ba:	4413      	add	r3, r2
 80100bc:	009b      	lsls	r3, r3, #2
 80100be:	4a15      	ldr	r2, [pc, #84]	; (8010114 <prvAddNewTaskToReadyList+0xcc>)
 80100c0:	441a      	add	r2, r3
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	3304      	adds	r3, #4
 80100c6:	4619      	mov	r1, r3
 80100c8:	4610      	mov	r0, r2
 80100ca:	f7fe ffd6 	bl	800f07a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80100ce:	f001 f899 	bl	8011204 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80100d2:	4b0d      	ldr	r3, [pc, #52]	; (8010108 <prvAddNewTaskToReadyList+0xc0>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d00e      	beq.n	80100f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80100da:	4b0a      	ldr	r3, [pc, #40]	; (8010104 <prvAddNewTaskToReadyList+0xbc>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100e4:	429a      	cmp	r2, r3
 80100e6:	d207      	bcs.n	80100f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80100e8:	4b0b      	ldr	r3, [pc, #44]	; (8010118 <prvAddNewTaskToReadyList+0xd0>)
 80100ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100ee:	601a      	str	r2, [r3, #0]
 80100f0:	f3bf 8f4f 	dsb	sy
 80100f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80100f8:	bf00      	nop
 80100fa:	3708      	adds	r7, #8
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}
 8010100:	20000e94 	.word	0x20000e94
 8010104:	20000d94 	.word	0x20000d94
 8010108:	20000ea0 	.word	0x20000ea0
 801010c:	20000eb0 	.word	0x20000eb0
 8010110:	20000e9c 	.word	0x20000e9c
 8010114:	20000d98 	.word	0x20000d98
 8010118:	e000ed04 	.word	0xe000ed04

0801011c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801011c:	b580      	push	{r7, lr}
 801011e:	b08a      	sub	sp, #40	; 0x28
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8010126:	2300      	movs	r3, #0
 8010128:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d10c      	bne.n	801014a <vTaskDelayUntil+0x2e>
	__asm volatile
 8010130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010134:	b672      	cpsid	i
 8010136:	f383 8811 	msr	BASEPRI, r3
 801013a:	f3bf 8f6f 	isb	sy
 801013e:	f3bf 8f4f 	dsb	sy
 8010142:	b662      	cpsie	i
 8010144:	617b      	str	r3, [r7, #20]
}
 8010146:	bf00      	nop
 8010148:	e7fe      	b.n	8010148 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d10c      	bne.n	801016a <vTaskDelayUntil+0x4e>
	__asm volatile
 8010150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010154:	b672      	cpsid	i
 8010156:	f383 8811 	msr	BASEPRI, r3
 801015a:	f3bf 8f6f 	isb	sy
 801015e:	f3bf 8f4f 	dsb	sy
 8010162:	b662      	cpsie	i
 8010164:	613b      	str	r3, [r7, #16]
}
 8010166:	bf00      	nop
 8010168:	e7fe      	b.n	8010168 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 801016a:	4b2b      	ldr	r3, [pc, #172]	; (8010218 <vTaskDelayUntil+0xfc>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d00c      	beq.n	801018c <vTaskDelayUntil+0x70>
	__asm volatile
 8010172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010176:	b672      	cpsid	i
 8010178:	f383 8811 	msr	BASEPRI, r3
 801017c:	f3bf 8f6f 	isb	sy
 8010180:	f3bf 8f4f 	dsb	sy
 8010184:	b662      	cpsie	i
 8010186:	60fb      	str	r3, [r7, #12]
}
 8010188:	bf00      	nop
 801018a:	e7fe      	b.n	801018a <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 801018c:	f000 f8ee 	bl	801036c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8010190:	4b22      	ldr	r3, [pc, #136]	; (801021c <vTaskDelayUntil+0x100>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	683a      	ldr	r2, [r7, #0]
 801019c:	4413      	add	r3, r2
 801019e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	6a3a      	ldr	r2, [r7, #32]
 80101a6:	429a      	cmp	r2, r3
 80101a8:	d20b      	bcs.n	80101c2 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	69fa      	ldr	r2, [r7, #28]
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d211      	bcs.n	80101d8 <vTaskDelayUntil+0xbc>
 80101b4:	69fa      	ldr	r2, [r7, #28]
 80101b6:	6a3b      	ldr	r3, [r7, #32]
 80101b8:	429a      	cmp	r2, r3
 80101ba:	d90d      	bls.n	80101d8 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 80101bc:	2301      	movs	r3, #1
 80101be:	627b      	str	r3, [r7, #36]	; 0x24
 80101c0:	e00a      	b.n	80101d8 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	69fa      	ldr	r2, [r7, #28]
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d303      	bcc.n	80101d4 <vTaskDelayUntil+0xb8>
 80101cc:	69fa      	ldr	r2, [r7, #28]
 80101ce:	6a3b      	ldr	r3, [r7, #32]
 80101d0:	429a      	cmp	r2, r3
 80101d2:	d901      	bls.n	80101d8 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 80101d4:	2301      	movs	r3, #1
 80101d6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	69fa      	ldr	r2, [r7, #28]
 80101dc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80101de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d006      	beq.n	80101f2 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80101e4:	69fa      	ldr	r2, [r7, #28]
 80101e6:	6a3b      	ldr	r3, [r7, #32]
 80101e8:	1ad3      	subs	r3, r2, r3
 80101ea:	2100      	movs	r1, #0
 80101ec:	4618      	mov	r0, r3
 80101ee:	f000 fe5f 	bl	8010eb0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80101f2:	f000 f8c9 	bl	8010388 <xTaskResumeAll>
 80101f6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80101f8:	69bb      	ldr	r3, [r7, #24]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d107      	bne.n	801020e <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 80101fe:	4b08      	ldr	r3, [pc, #32]	; (8010220 <vTaskDelayUntil+0x104>)
 8010200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010204:	601a      	str	r2, [r3, #0]
 8010206:	f3bf 8f4f 	dsb	sy
 801020a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801020e:	bf00      	nop
 8010210:	3728      	adds	r7, #40	; 0x28
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}
 8010216:	bf00      	nop
 8010218:	20000ebc 	.word	0x20000ebc
 801021c:	20000e98 	.word	0x20000e98
 8010220:	e000ed04 	.word	0xe000ed04

08010224 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010224:	b580      	push	{r7, lr}
 8010226:	b084      	sub	sp, #16
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801022c:	2300      	movs	r3, #0
 801022e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d019      	beq.n	801026a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010236:	4b14      	ldr	r3, [pc, #80]	; (8010288 <vTaskDelay+0x64>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d00c      	beq.n	8010258 <vTaskDelay+0x34>
	__asm volatile
 801023e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010242:	b672      	cpsid	i
 8010244:	f383 8811 	msr	BASEPRI, r3
 8010248:	f3bf 8f6f 	isb	sy
 801024c:	f3bf 8f4f 	dsb	sy
 8010250:	b662      	cpsie	i
 8010252:	60bb      	str	r3, [r7, #8]
}
 8010254:	bf00      	nop
 8010256:	e7fe      	b.n	8010256 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8010258:	f000 f888 	bl	801036c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801025c:	2100      	movs	r1, #0
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f000 fe26 	bl	8010eb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010264:	f000 f890 	bl	8010388 <xTaskResumeAll>
 8010268:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d107      	bne.n	8010280 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8010270:	4b06      	ldr	r3, [pc, #24]	; (801028c <vTaskDelay+0x68>)
 8010272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010276:	601a      	str	r2, [r3, #0]
 8010278:	f3bf 8f4f 	dsb	sy
 801027c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010280:	bf00      	nop
 8010282:	3710      	adds	r7, #16
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}
 8010288:	20000ebc 	.word	0x20000ebc
 801028c:	e000ed04 	.word	0xe000ed04

08010290 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b08a      	sub	sp, #40	; 0x28
 8010294:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010296:	2300      	movs	r3, #0
 8010298:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801029a:	2300      	movs	r3, #0
 801029c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801029e:	463a      	mov	r2, r7
 80102a0:	1d39      	adds	r1, r7, #4
 80102a2:	f107 0308 	add.w	r3, r7, #8
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7f2 fd82 	bl	8002db0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80102ac:	6839      	ldr	r1, [r7, #0]
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	68ba      	ldr	r2, [r7, #8]
 80102b2:	9202      	str	r2, [sp, #8]
 80102b4:	9301      	str	r3, [sp, #4]
 80102b6:	2300      	movs	r3, #0
 80102b8:	9300      	str	r3, [sp, #0]
 80102ba:	2300      	movs	r3, #0
 80102bc:	460a      	mov	r2, r1
 80102be:	4923      	ldr	r1, [pc, #140]	; (801034c <vTaskStartScheduler+0xbc>)
 80102c0:	4823      	ldr	r0, [pc, #140]	; (8010350 <vTaskStartScheduler+0xc0>)
 80102c2:	f7ff fd79 	bl	800fdb8 <xTaskCreateStatic>
 80102c6:	4603      	mov	r3, r0
 80102c8:	4a22      	ldr	r2, [pc, #136]	; (8010354 <vTaskStartScheduler+0xc4>)
 80102ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80102cc:	4b21      	ldr	r3, [pc, #132]	; (8010354 <vTaskStartScheduler+0xc4>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d002      	beq.n	80102da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80102d4:	2301      	movs	r3, #1
 80102d6:	617b      	str	r3, [r7, #20]
 80102d8:	e001      	b.n	80102de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80102da:	2300      	movs	r3, #0
 80102dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80102de:	697b      	ldr	r3, [r7, #20]
 80102e0:	2b01      	cmp	r3, #1
 80102e2:	d11d      	bne.n	8010320 <vTaskStartScheduler+0x90>
	__asm volatile
 80102e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102e8:	b672      	cpsid	i
 80102ea:	f383 8811 	msr	BASEPRI, r3
 80102ee:	f3bf 8f6f 	isb	sy
 80102f2:	f3bf 8f4f 	dsb	sy
 80102f6:	b662      	cpsie	i
 80102f8:	613b      	str	r3, [r7, #16]
}
 80102fa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80102fc:	4b16      	ldr	r3, [pc, #88]	; (8010358 <vTaskStartScheduler+0xc8>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	334c      	adds	r3, #76	; 0x4c
 8010302:	4a16      	ldr	r2, [pc, #88]	; (801035c <vTaskStartScheduler+0xcc>)
 8010304:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010306:	4b16      	ldr	r3, [pc, #88]	; (8010360 <vTaskStartScheduler+0xd0>)
 8010308:	f04f 32ff 	mov.w	r2, #4294967295
 801030c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801030e:	4b15      	ldr	r3, [pc, #84]	; (8010364 <vTaskStartScheduler+0xd4>)
 8010310:	2201      	movs	r2, #1
 8010312:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010314:	4b14      	ldr	r3, [pc, #80]	; (8010368 <vTaskStartScheduler+0xd8>)
 8010316:	2200      	movs	r2, #0
 8010318:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801031a:	f000 fec1 	bl	80110a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801031e:	e010      	b.n	8010342 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010326:	d10c      	bne.n	8010342 <vTaskStartScheduler+0xb2>
	__asm volatile
 8010328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801032c:	b672      	cpsid	i
 801032e:	f383 8811 	msr	BASEPRI, r3
 8010332:	f3bf 8f6f 	isb	sy
 8010336:	f3bf 8f4f 	dsb	sy
 801033a:	b662      	cpsie	i
 801033c:	60fb      	str	r3, [r7, #12]
}
 801033e:	bf00      	nop
 8010340:	e7fe      	b.n	8010340 <vTaskStartScheduler+0xb0>
}
 8010342:	bf00      	nop
 8010344:	3718      	adds	r7, #24
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}
 801034a:	bf00      	nop
 801034c:	08017f2c 	.word	0x08017f2c
 8010350:	08010945 	.word	0x08010945
 8010354:	20000eb8 	.word	0x20000eb8
 8010358:	20000d94 	.word	0x20000d94
 801035c:	20000070 	.word	0x20000070
 8010360:	20000eb4 	.word	0x20000eb4
 8010364:	20000ea0 	.word	0x20000ea0
 8010368:	20000e98 	.word	0x20000e98

0801036c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801036c:	b480      	push	{r7}
 801036e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010370:	4b04      	ldr	r3, [pc, #16]	; (8010384 <vTaskSuspendAll+0x18>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	3301      	adds	r3, #1
 8010376:	4a03      	ldr	r2, [pc, #12]	; (8010384 <vTaskSuspendAll+0x18>)
 8010378:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801037a:	bf00      	nop
 801037c:	46bd      	mov	sp, r7
 801037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010382:	4770      	bx	lr
 8010384:	20000ebc 	.word	0x20000ebc

08010388 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b084      	sub	sp, #16
 801038c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801038e:	2300      	movs	r3, #0
 8010390:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010392:	2300      	movs	r3, #0
 8010394:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010396:	4b42      	ldr	r3, [pc, #264]	; (80104a0 <xTaskResumeAll+0x118>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d10c      	bne.n	80103b8 <xTaskResumeAll+0x30>
	__asm volatile
 801039e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a2:	b672      	cpsid	i
 80103a4:	f383 8811 	msr	BASEPRI, r3
 80103a8:	f3bf 8f6f 	isb	sy
 80103ac:	f3bf 8f4f 	dsb	sy
 80103b0:	b662      	cpsie	i
 80103b2:	603b      	str	r3, [r7, #0]
}
 80103b4:	bf00      	nop
 80103b6:	e7fe      	b.n	80103b6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80103b8:	f000 fef0 	bl	801119c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80103bc:	4b38      	ldr	r3, [pc, #224]	; (80104a0 <xTaskResumeAll+0x118>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	3b01      	subs	r3, #1
 80103c2:	4a37      	ldr	r2, [pc, #220]	; (80104a0 <xTaskResumeAll+0x118>)
 80103c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80103c6:	4b36      	ldr	r3, [pc, #216]	; (80104a0 <xTaskResumeAll+0x118>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d161      	bne.n	8010492 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80103ce:	4b35      	ldr	r3, [pc, #212]	; (80104a4 <xTaskResumeAll+0x11c>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d05d      	beq.n	8010492 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80103d6:	e02e      	b.n	8010436 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103d8:	4b33      	ldr	r3, [pc, #204]	; (80104a8 <xTaskResumeAll+0x120>)
 80103da:	68db      	ldr	r3, [r3, #12]
 80103dc:	68db      	ldr	r3, [r3, #12]
 80103de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	3318      	adds	r3, #24
 80103e4:	4618      	mov	r0, r3
 80103e6:	f7fe fea5 	bl	800f134 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	3304      	adds	r3, #4
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7fe fea0 	bl	800f134 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103f8:	2201      	movs	r2, #1
 80103fa:	409a      	lsls	r2, r3
 80103fc:	4b2b      	ldr	r3, [pc, #172]	; (80104ac <xTaskResumeAll+0x124>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	4313      	orrs	r3, r2
 8010402:	4a2a      	ldr	r2, [pc, #168]	; (80104ac <xTaskResumeAll+0x124>)
 8010404:	6013      	str	r3, [r2, #0]
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801040a:	4613      	mov	r3, r2
 801040c:	009b      	lsls	r3, r3, #2
 801040e:	4413      	add	r3, r2
 8010410:	009b      	lsls	r3, r3, #2
 8010412:	4a27      	ldr	r2, [pc, #156]	; (80104b0 <xTaskResumeAll+0x128>)
 8010414:	441a      	add	r2, r3
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	3304      	adds	r3, #4
 801041a:	4619      	mov	r1, r3
 801041c:	4610      	mov	r0, r2
 801041e:	f7fe fe2c 	bl	800f07a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010426:	4b23      	ldr	r3, [pc, #140]	; (80104b4 <xTaskResumeAll+0x12c>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801042c:	429a      	cmp	r2, r3
 801042e:	d302      	bcc.n	8010436 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8010430:	4b21      	ldr	r3, [pc, #132]	; (80104b8 <xTaskResumeAll+0x130>)
 8010432:	2201      	movs	r2, #1
 8010434:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010436:	4b1c      	ldr	r3, [pc, #112]	; (80104a8 <xTaskResumeAll+0x120>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d1cc      	bne.n	80103d8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d001      	beq.n	8010448 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010444:	f000 fb3a 	bl	8010abc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010448:	4b1c      	ldr	r3, [pc, #112]	; (80104bc <xTaskResumeAll+0x134>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d010      	beq.n	8010476 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010454:	f000 f846 	bl	80104e4 <xTaskIncrementTick>
 8010458:	4603      	mov	r3, r0
 801045a:	2b00      	cmp	r3, #0
 801045c:	d002      	beq.n	8010464 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801045e:	4b16      	ldr	r3, [pc, #88]	; (80104b8 <xTaskResumeAll+0x130>)
 8010460:	2201      	movs	r2, #1
 8010462:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	3b01      	subs	r3, #1
 8010468:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d1f1      	bne.n	8010454 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8010470:	4b12      	ldr	r3, [pc, #72]	; (80104bc <xTaskResumeAll+0x134>)
 8010472:	2200      	movs	r2, #0
 8010474:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010476:	4b10      	ldr	r3, [pc, #64]	; (80104b8 <xTaskResumeAll+0x130>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d009      	beq.n	8010492 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801047e:	2301      	movs	r3, #1
 8010480:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010482:	4b0f      	ldr	r3, [pc, #60]	; (80104c0 <xTaskResumeAll+0x138>)
 8010484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010488:	601a      	str	r2, [r3, #0]
 801048a:	f3bf 8f4f 	dsb	sy
 801048e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010492:	f000 feb7 	bl	8011204 <vPortExitCritical>

	return xAlreadyYielded;
 8010496:	68bb      	ldr	r3, [r7, #8]
}
 8010498:	4618      	mov	r0, r3
 801049a:	3710      	adds	r7, #16
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}
 80104a0:	20000ebc 	.word	0x20000ebc
 80104a4:	20000e94 	.word	0x20000e94
 80104a8:	20000e54 	.word	0x20000e54
 80104ac:	20000e9c 	.word	0x20000e9c
 80104b0:	20000d98 	.word	0x20000d98
 80104b4:	20000d94 	.word	0x20000d94
 80104b8:	20000ea8 	.word	0x20000ea8
 80104bc:	20000ea4 	.word	0x20000ea4
 80104c0:	e000ed04 	.word	0xe000ed04

080104c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80104c4:	b480      	push	{r7}
 80104c6:	b083      	sub	sp, #12
 80104c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80104ca:	4b05      	ldr	r3, [pc, #20]	; (80104e0 <xTaskGetTickCount+0x1c>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80104d0:	687b      	ldr	r3, [r7, #4]
}
 80104d2:	4618      	mov	r0, r3
 80104d4:	370c      	adds	r7, #12
 80104d6:	46bd      	mov	sp, r7
 80104d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104dc:	4770      	bx	lr
 80104de:	bf00      	nop
 80104e0:	20000e98 	.word	0x20000e98

080104e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b086      	sub	sp, #24
 80104e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80104ea:	2300      	movs	r3, #0
 80104ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80104ee:	4b4f      	ldr	r3, [pc, #316]	; (801062c <xTaskIncrementTick+0x148>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	f040 808a 	bne.w	801060c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80104f8:	4b4d      	ldr	r3, [pc, #308]	; (8010630 <xTaskIncrementTick+0x14c>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	3301      	adds	r3, #1
 80104fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010500:	4a4b      	ldr	r2, [pc, #300]	; (8010630 <xTaskIncrementTick+0x14c>)
 8010502:	693b      	ldr	r3, [r7, #16]
 8010504:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d122      	bne.n	8010552 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 801050c:	4b49      	ldr	r3, [pc, #292]	; (8010634 <xTaskIncrementTick+0x150>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d00c      	beq.n	8010530 <xTaskIncrementTick+0x4c>
	__asm volatile
 8010516:	f04f 0350 	mov.w	r3, #80	; 0x50
 801051a:	b672      	cpsid	i
 801051c:	f383 8811 	msr	BASEPRI, r3
 8010520:	f3bf 8f6f 	isb	sy
 8010524:	f3bf 8f4f 	dsb	sy
 8010528:	b662      	cpsie	i
 801052a:	603b      	str	r3, [r7, #0]
}
 801052c:	bf00      	nop
 801052e:	e7fe      	b.n	801052e <xTaskIncrementTick+0x4a>
 8010530:	4b40      	ldr	r3, [pc, #256]	; (8010634 <xTaskIncrementTick+0x150>)
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	60fb      	str	r3, [r7, #12]
 8010536:	4b40      	ldr	r3, [pc, #256]	; (8010638 <xTaskIncrementTick+0x154>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	4a3e      	ldr	r2, [pc, #248]	; (8010634 <xTaskIncrementTick+0x150>)
 801053c:	6013      	str	r3, [r2, #0]
 801053e:	4a3e      	ldr	r2, [pc, #248]	; (8010638 <xTaskIncrementTick+0x154>)
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	6013      	str	r3, [r2, #0]
 8010544:	4b3d      	ldr	r3, [pc, #244]	; (801063c <xTaskIncrementTick+0x158>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	3301      	adds	r3, #1
 801054a:	4a3c      	ldr	r2, [pc, #240]	; (801063c <xTaskIncrementTick+0x158>)
 801054c:	6013      	str	r3, [r2, #0]
 801054e:	f000 fab5 	bl	8010abc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010552:	4b3b      	ldr	r3, [pc, #236]	; (8010640 <xTaskIncrementTick+0x15c>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	693a      	ldr	r2, [r7, #16]
 8010558:	429a      	cmp	r2, r3
 801055a:	d348      	bcc.n	80105ee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801055c:	4b35      	ldr	r3, [pc, #212]	; (8010634 <xTaskIncrementTick+0x150>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d104      	bne.n	8010570 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010566:	4b36      	ldr	r3, [pc, #216]	; (8010640 <xTaskIncrementTick+0x15c>)
 8010568:	f04f 32ff 	mov.w	r2, #4294967295
 801056c:	601a      	str	r2, [r3, #0]
					break;
 801056e:	e03e      	b.n	80105ee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010570:	4b30      	ldr	r3, [pc, #192]	; (8010634 <xTaskIncrementTick+0x150>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	68db      	ldr	r3, [r3, #12]
 8010576:	68db      	ldr	r3, [r3, #12]
 8010578:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	685b      	ldr	r3, [r3, #4]
 801057e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010580:	693a      	ldr	r2, [r7, #16]
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	429a      	cmp	r2, r3
 8010586:	d203      	bcs.n	8010590 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010588:	4a2d      	ldr	r2, [pc, #180]	; (8010640 <xTaskIncrementTick+0x15c>)
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801058e:	e02e      	b.n	80105ee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	3304      	adds	r3, #4
 8010594:	4618      	mov	r0, r3
 8010596:	f7fe fdcd 	bl	800f134 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d004      	beq.n	80105ac <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	3318      	adds	r3, #24
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7fe fdc4 	bl	800f134 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105b0:	2201      	movs	r2, #1
 80105b2:	409a      	lsls	r2, r3
 80105b4:	4b23      	ldr	r3, [pc, #140]	; (8010644 <xTaskIncrementTick+0x160>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	4313      	orrs	r3, r2
 80105ba:	4a22      	ldr	r2, [pc, #136]	; (8010644 <xTaskIncrementTick+0x160>)
 80105bc:	6013      	str	r3, [r2, #0]
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105c2:	4613      	mov	r3, r2
 80105c4:	009b      	lsls	r3, r3, #2
 80105c6:	4413      	add	r3, r2
 80105c8:	009b      	lsls	r3, r3, #2
 80105ca:	4a1f      	ldr	r2, [pc, #124]	; (8010648 <xTaskIncrementTick+0x164>)
 80105cc:	441a      	add	r2, r3
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	3304      	adds	r3, #4
 80105d2:	4619      	mov	r1, r3
 80105d4:	4610      	mov	r0, r2
 80105d6:	f7fe fd50 	bl	800f07a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105de:	4b1b      	ldr	r3, [pc, #108]	; (801064c <xTaskIncrementTick+0x168>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105e4:	429a      	cmp	r2, r3
 80105e6:	d3b9      	bcc.n	801055c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80105e8:	2301      	movs	r3, #1
 80105ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80105ec:	e7b6      	b.n	801055c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80105ee:	4b17      	ldr	r3, [pc, #92]	; (801064c <xTaskIncrementTick+0x168>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105f4:	4914      	ldr	r1, [pc, #80]	; (8010648 <xTaskIncrementTick+0x164>)
 80105f6:	4613      	mov	r3, r2
 80105f8:	009b      	lsls	r3, r3, #2
 80105fa:	4413      	add	r3, r2
 80105fc:	009b      	lsls	r3, r3, #2
 80105fe:	440b      	add	r3, r1
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	2b01      	cmp	r3, #1
 8010604:	d907      	bls.n	8010616 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8010606:	2301      	movs	r3, #1
 8010608:	617b      	str	r3, [r7, #20]
 801060a:	e004      	b.n	8010616 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801060c:	4b10      	ldr	r3, [pc, #64]	; (8010650 <xTaskIncrementTick+0x16c>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	3301      	adds	r3, #1
 8010612:	4a0f      	ldr	r2, [pc, #60]	; (8010650 <xTaskIncrementTick+0x16c>)
 8010614:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010616:	4b0f      	ldr	r3, [pc, #60]	; (8010654 <xTaskIncrementTick+0x170>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d001      	beq.n	8010622 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 801061e:	2301      	movs	r3, #1
 8010620:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010622:	697b      	ldr	r3, [r7, #20]
}
 8010624:	4618      	mov	r0, r3
 8010626:	3718      	adds	r7, #24
 8010628:	46bd      	mov	sp, r7
 801062a:	bd80      	pop	{r7, pc}
 801062c:	20000ebc 	.word	0x20000ebc
 8010630:	20000e98 	.word	0x20000e98
 8010634:	20000e4c 	.word	0x20000e4c
 8010638:	20000e50 	.word	0x20000e50
 801063c:	20000eac 	.word	0x20000eac
 8010640:	20000eb4 	.word	0x20000eb4
 8010644:	20000e9c 	.word	0x20000e9c
 8010648:	20000d98 	.word	0x20000d98
 801064c:	20000d94 	.word	0x20000d94
 8010650:	20000ea4 	.word	0x20000ea4
 8010654:	20000ea8 	.word	0x20000ea8

08010658 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010658:	b480      	push	{r7}
 801065a:	b087      	sub	sp, #28
 801065c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801065e:	4b2a      	ldr	r3, [pc, #168]	; (8010708 <vTaskSwitchContext+0xb0>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d003      	beq.n	801066e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010666:	4b29      	ldr	r3, [pc, #164]	; (801070c <vTaskSwitchContext+0xb4>)
 8010668:	2201      	movs	r2, #1
 801066a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801066c:	e046      	b.n	80106fc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801066e:	4b27      	ldr	r3, [pc, #156]	; (801070c <vTaskSwitchContext+0xb4>)
 8010670:	2200      	movs	r2, #0
 8010672:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010674:	4b26      	ldr	r3, [pc, #152]	; (8010710 <vTaskSwitchContext+0xb8>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	fab3 f383 	clz	r3, r3
 8010680:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010682:	7afb      	ldrb	r3, [r7, #11]
 8010684:	f1c3 031f 	rsb	r3, r3, #31
 8010688:	617b      	str	r3, [r7, #20]
 801068a:	4922      	ldr	r1, [pc, #136]	; (8010714 <vTaskSwitchContext+0xbc>)
 801068c:	697a      	ldr	r2, [r7, #20]
 801068e:	4613      	mov	r3, r2
 8010690:	009b      	lsls	r3, r3, #2
 8010692:	4413      	add	r3, r2
 8010694:	009b      	lsls	r3, r3, #2
 8010696:	440b      	add	r3, r1
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d10c      	bne.n	80106b8 <vTaskSwitchContext+0x60>
	__asm volatile
 801069e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a2:	b672      	cpsid	i
 80106a4:	f383 8811 	msr	BASEPRI, r3
 80106a8:	f3bf 8f6f 	isb	sy
 80106ac:	f3bf 8f4f 	dsb	sy
 80106b0:	b662      	cpsie	i
 80106b2:	607b      	str	r3, [r7, #4]
}
 80106b4:	bf00      	nop
 80106b6:	e7fe      	b.n	80106b6 <vTaskSwitchContext+0x5e>
 80106b8:	697a      	ldr	r2, [r7, #20]
 80106ba:	4613      	mov	r3, r2
 80106bc:	009b      	lsls	r3, r3, #2
 80106be:	4413      	add	r3, r2
 80106c0:	009b      	lsls	r3, r3, #2
 80106c2:	4a14      	ldr	r2, [pc, #80]	; (8010714 <vTaskSwitchContext+0xbc>)
 80106c4:	4413      	add	r3, r2
 80106c6:	613b      	str	r3, [r7, #16]
 80106c8:	693b      	ldr	r3, [r7, #16]
 80106ca:	685b      	ldr	r3, [r3, #4]
 80106cc:	685a      	ldr	r2, [r3, #4]
 80106ce:	693b      	ldr	r3, [r7, #16]
 80106d0:	605a      	str	r2, [r3, #4]
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	685a      	ldr	r2, [r3, #4]
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	3308      	adds	r3, #8
 80106da:	429a      	cmp	r2, r3
 80106dc:	d104      	bne.n	80106e8 <vTaskSwitchContext+0x90>
 80106de:	693b      	ldr	r3, [r7, #16]
 80106e0:	685b      	ldr	r3, [r3, #4]
 80106e2:	685a      	ldr	r2, [r3, #4]
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	605a      	str	r2, [r3, #4]
 80106e8:	693b      	ldr	r3, [r7, #16]
 80106ea:	685b      	ldr	r3, [r3, #4]
 80106ec:	68db      	ldr	r3, [r3, #12]
 80106ee:	4a0a      	ldr	r2, [pc, #40]	; (8010718 <vTaskSwitchContext+0xc0>)
 80106f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80106f2:	4b09      	ldr	r3, [pc, #36]	; (8010718 <vTaskSwitchContext+0xc0>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	334c      	adds	r3, #76	; 0x4c
 80106f8:	4a08      	ldr	r2, [pc, #32]	; (801071c <vTaskSwitchContext+0xc4>)
 80106fa:	6013      	str	r3, [r2, #0]
}
 80106fc:	bf00      	nop
 80106fe:	371c      	adds	r7, #28
 8010700:	46bd      	mov	sp, r7
 8010702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010706:	4770      	bx	lr
 8010708:	20000ebc 	.word	0x20000ebc
 801070c:	20000ea8 	.word	0x20000ea8
 8010710:	20000e9c 	.word	0x20000e9c
 8010714:	20000d98 	.word	0x20000d98
 8010718:	20000d94 	.word	0x20000d94
 801071c:	20000070 	.word	0x20000070

08010720 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b084      	sub	sp, #16
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
 8010728:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d10c      	bne.n	801074a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8010730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010734:	b672      	cpsid	i
 8010736:	f383 8811 	msr	BASEPRI, r3
 801073a:	f3bf 8f6f 	isb	sy
 801073e:	f3bf 8f4f 	dsb	sy
 8010742:	b662      	cpsie	i
 8010744:	60fb      	str	r3, [r7, #12]
}
 8010746:	bf00      	nop
 8010748:	e7fe      	b.n	8010748 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801074a:	4b07      	ldr	r3, [pc, #28]	; (8010768 <vTaskPlaceOnEventList+0x48>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	3318      	adds	r3, #24
 8010750:	4619      	mov	r1, r3
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f7fe fcb5 	bl	800f0c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010758:	2101      	movs	r1, #1
 801075a:	6838      	ldr	r0, [r7, #0]
 801075c:	f000 fba8 	bl	8010eb0 <prvAddCurrentTaskToDelayedList>
}
 8010760:	bf00      	nop
 8010762:	3710      	adds	r7, #16
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}
 8010768:	20000d94 	.word	0x20000d94

0801076c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b086      	sub	sp, #24
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	68db      	ldr	r3, [r3, #12]
 8010778:	68db      	ldr	r3, [r3, #12]
 801077a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801077c:	693b      	ldr	r3, [r7, #16]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d10c      	bne.n	801079c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8010782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010786:	b672      	cpsid	i
 8010788:	f383 8811 	msr	BASEPRI, r3
 801078c:	f3bf 8f6f 	isb	sy
 8010790:	f3bf 8f4f 	dsb	sy
 8010794:	b662      	cpsie	i
 8010796:	60fb      	str	r3, [r7, #12]
}
 8010798:	bf00      	nop
 801079a:	e7fe      	b.n	801079a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801079c:	693b      	ldr	r3, [r7, #16]
 801079e:	3318      	adds	r3, #24
 80107a0:	4618      	mov	r0, r3
 80107a2:	f7fe fcc7 	bl	800f134 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80107a6:	4b1d      	ldr	r3, [pc, #116]	; (801081c <xTaskRemoveFromEventList+0xb0>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d11c      	bne.n	80107e8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	3304      	adds	r3, #4
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7fe fcbe 	bl	800f134 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80107b8:	693b      	ldr	r3, [r7, #16]
 80107ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107bc:	2201      	movs	r2, #1
 80107be:	409a      	lsls	r2, r3
 80107c0:	4b17      	ldr	r3, [pc, #92]	; (8010820 <xTaskRemoveFromEventList+0xb4>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	4313      	orrs	r3, r2
 80107c6:	4a16      	ldr	r2, [pc, #88]	; (8010820 <xTaskRemoveFromEventList+0xb4>)
 80107c8:	6013      	str	r3, [r2, #0]
 80107ca:	693b      	ldr	r3, [r7, #16]
 80107cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107ce:	4613      	mov	r3, r2
 80107d0:	009b      	lsls	r3, r3, #2
 80107d2:	4413      	add	r3, r2
 80107d4:	009b      	lsls	r3, r3, #2
 80107d6:	4a13      	ldr	r2, [pc, #76]	; (8010824 <xTaskRemoveFromEventList+0xb8>)
 80107d8:	441a      	add	r2, r3
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	3304      	adds	r3, #4
 80107de:	4619      	mov	r1, r3
 80107e0:	4610      	mov	r0, r2
 80107e2:	f7fe fc4a 	bl	800f07a <vListInsertEnd>
 80107e6:	e005      	b.n	80107f4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80107e8:	693b      	ldr	r3, [r7, #16]
 80107ea:	3318      	adds	r3, #24
 80107ec:	4619      	mov	r1, r3
 80107ee:	480e      	ldr	r0, [pc, #56]	; (8010828 <xTaskRemoveFromEventList+0xbc>)
 80107f0:	f7fe fc43 	bl	800f07a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80107f4:	693b      	ldr	r3, [r7, #16]
 80107f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107f8:	4b0c      	ldr	r3, [pc, #48]	; (801082c <xTaskRemoveFromEventList+0xc0>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107fe:	429a      	cmp	r2, r3
 8010800:	d905      	bls.n	801080e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010802:	2301      	movs	r3, #1
 8010804:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010806:	4b0a      	ldr	r3, [pc, #40]	; (8010830 <xTaskRemoveFromEventList+0xc4>)
 8010808:	2201      	movs	r2, #1
 801080a:	601a      	str	r2, [r3, #0]
 801080c:	e001      	b.n	8010812 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801080e:	2300      	movs	r3, #0
 8010810:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010812:	697b      	ldr	r3, [r7, #20]
}
 8010814:	4618      	mov	r0, r3
 8010816:	3718      	adds	r7, #24
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}
 801081c:	20000ebc 	.word	0x20000ebc
 8010820:	20000e9c 	.word	0x20000e9c
 8010824:	20000d98 	.word	0x20000d98
 8010828:	20000e54 	.word	0x20000e54
 801082c:	20000d94 	.word	0x20000d94
 8010830:	20000ea8 	.word	0x20000ea8

08010834 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010834:	b480      	push	{r7}
 8010836:	b083      	sub	sp, #12
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801083c:	4b06      	ldr	r3, [pc, #24]	; (8010858 <vTaskInternalSetTimeOutState+0x24>)
 801083e:	681a      	ldr	r2, [r3, #0]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010844:	4b05      	ldr	r3, [pc, #20]	; (801085c <vTaskInternalSetTimeOutState+0x28>)
 8010846:	681a      	ldr	r2, [r3, #0]
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	605a      	str	r2, [r3, #4]
}
 801084c:	bf00      	nop
 801084e:	370c      	adds	r7, #12
 8010850:	46bd      	mov	sp, r7
 8010852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010856:	4770      	bx	lr
 8010858:	20000eac 	.word	0x20000eac
 801085c:	20000e98 	.word	0x20000e98

08010860 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b088      	sub	sp, #32
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d10c      	bne.n	801088a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8010870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010874:	b672      	cpsid	i
 8010876:	f383 8811 	msr	BASEPRI, r3
 801087a:	f3bf 8f6f 	isb	sy
 801087e:	f3bf 8f4f 	dsb	sy
 8010882:	b662      	cpsie	i
 8010884:	613b      	str	r3, [r7, #16]
}
 8010886:	bf00      	nop
 8010888:	e7fe      	b.n	8010888 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d10c      	bne.n	80108aa <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8010890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010894:	b672      	cpsid	i
 8010896:	f383 8811 	msr	BASEPRI, r3
 801089a:	f3bf 8f6f 	isb	sy
 801089e:	f3bf 8f4f 	dsb	sy
 80108a2:	b662      	cpsie	i
 80108a4:	60fb      	str	r3, [r7, #12]
}
 80108a6:	bf00      	nop
 80108a8:	e7fe      	b.n	80108a8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80108aa:	f000 fc77 	bl	801119c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80108ae:	4b1d      	ldr	r3, [pc, #116]	; (8010924 <xTaskCheckForTimeOut+0xc4>)
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	685b      	ldr	r3, [r3, #4]
 80108b8:	69ba      	ldr	r2, [r7, #24]
 80108ba:	1ad3      	subs	r3, r2, r3
 80108bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108c6:	d102      	bne.n	80108ce <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80108c8:	2300      	movs	r3, #0
 80108ca:	61fb      	str	r3, [r7, #28]
 80108cc:	e023      	b.n	8010916 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681a      	ldr	r2, [r3, #0]
 80108d2:	4b15      	ldr	r3, [pc, #84]	; (8010928 <xTaskCheckForTimeOut+0xc8>)
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d007      	beq.n	80108ea <xTaskCheckForTimeOut+0x8a>
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	685b      	ldr	r3, [r3, #4]
 80108de:	69ba      	ldr	r2, [r7, #24]
 80108e0:	429a      	cmp	r2, r3
 80108e2:	d302      	bcc.n	80108ea <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80108e4:	2301      	movs	r3, #1
 80108e6:	61fb      	str	r3, [r7, #28]
 80108e8:	e015      	b.n	8010916 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	697a      	ldr	r2, [r7, #20]
 80108f0:	429a      	cmp	r2, r3
 80108f2:	d20b      	bcs.n	801090c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	681a      	ldr	r2, [r3, #0]
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	1ad2      	subs	r2, r2, r3
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010900:	6878      	ldr	r0, [r7, #4]
 8010902:	f7ff ff97 	bl	8010834 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010906:	2300      	movs	r3, #0
 8010908:	61fb      	str	r3, [r7, #28]
 801090a:	e004      	b.n	8010916 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	2200      	movs	r2, #0
 8010910:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010912:	2301      	movs	r3, #1
 8010914:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010916:	f000 fc75 	bl	8011204 <vPortExitCritical>

	return xReturn;
 801091a:	69fb      	ldr	r3, [r7, #28]
}
 801091c:	4618      	mov	r0, r3
 801091e:	3720      	adds	r7, #32
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}
 8010924:	20000e98 	.word	0x20000e98
 8010928:	20000eac 	.word	0x20000eac

0801092c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801092c:	b480      	push	{r7}
 801092e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010930:	4b03      	ldr	r3, [pc, #12]	; (8010940 <vTaskMissedYield+0x14>)
 8010932:	2201      	movs	r2, #1
 8010934:	601a      	str	r2, [r3, #0]
}
 8010936:	bf00      	nop
 8010938:	46bd      	mov	sp, r7
 801093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093e:	4770      	bx	lr
 8010940:	20000ea8 	.word	0x20000ea8

08010944 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b082      	sub	sp, #8
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801094c:	f000 f852 	bl	80109f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010950:	4b06      	ldr	r3, [pc, #24]	; (801096c <prvIdleTask+0x28>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	2b01      	cmp	r3, #1
 8010956:	d9f9      	bls.n	801094c <prvIdleTask+0x8>
			{
				taskYIELD();
 8010958:	4b05      	ldr	r3, [pc, #20]	; (8010970 <prvIdleTask+0x2c>)
 801095a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801095e:	601a      	str	r2, [r3, #0]
 8010960:	f3bf 8f4f 	dsb	sy
 8010964:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010968:	e7f0      	b.n	801094c <prvIdleTask+0x8>
 801096a:	bf00      	nop
 801096c:	20000d98 	.word	0x20000d98
 8010970:	e000ed04 	.word	0xe000ed04

08010974 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b082      	sub	sp, #8
 8010978:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801097a:	2300      	movs	r3, #0
 801097c:	607b      	str	r3, [r7, #4]
 801097e:	e00c      	b.n	801099a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010980:	687a      	ldr	r2, [r7, #4]
 8010982:	4613      	mov	r3, r2
 8010984:	009b      	lsls	r3, r3, #2
 8010986:	4413      	add	r3, r2
 8010988:	009b      	lsls	r3, r3, #2
 801098a:	4a12      	ldr	r2, [pc, #72]	; (80109d4 <prvInitialiseTaskLists+0x60>)
 801098c:	4413      	add	r3, r2
 801098e:	4618      	mov	r0, r3
 8010990:	f7fe fb46 	bl	800f020 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	3301      	adds	r3, #1
 8010998:	607b      	str	r3, [r7, #4]
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	2b06      	cmp	r3, #6
 801099e:	d9ef      	bls.n	8010980 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80109a0:	480d      	ldr	r0, [pc, #52]	; (80109d8 <prvInitialiseTaskLists+0x64>)
 80109a2:	f7fe fb3d 	bl	800f020 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80109a6:	480d      	ldr	r0, [pc, #52]	; (80109dc <prvInitialiseTaskLists+0x68>)
 80109a8:	f7fe fb3a 	bl	800f020 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80109ac:	480c      	ldr	r0, [pc, #48]	; (80109e0 <prvInitialiseTaskLists+0x6c>)
 80109ae:	f7fe fb37 	bl	800f020 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80109b2:	480c      	ldr	r0, [pc, #48]	; (80109e4 <prvInitialiseTaskLists+0x70>)
 80109b4:	f7fe fb34 	bl	800f020 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80109b8:	480b      	ldr	r0, [pc, #44]	; (80109e8 <prvInitialiseTaskLists+0x74>)
 80109ba:	f7fe fb31 	bl	800f020 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80109be:	4b0b      	ldr	r3, [pc, #44]	; (80109ec <prvInitialiseTaskLists+0x78>)
 80109c0:	4a05      	ldr	r2, [pc, #20]	; (80109d8 <prvInitialiseTaskLists+0x64>)
 80109c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80109c4:	4b0a      	ldr	r3, [pc, #40]	; (80109f0 <prvInitialiseTaskLists+0x7c>)
 80109c6:	4a05      	ldr	r2, [pc, #20]	; (80109dc <prvInitialiseTaskLists+0x68>)
 80109c8:	601a      	str	r2, [r3, #0]
}
 80109ca:	bf00      	nop
 80109cc:	3708      	adds	r7, #8
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	20000d98 	.word	0x20000d98
 80109d8:	20000e24 	.word	0x20000e24
 80109dc:	20000e38 	.word	0x20000e38
 80109e0:	20000e54 	.word	0x20000e54
 80109e4:	20000e68 	.word	0x20000e68
 80109e8:	20000e80 	.word	0x20000e80
 80109ec:	20000e4c 	.word	0x20000e4c
 80109f0:	20000e50 	.word	0x20000e50

080109f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b082      	sub	sp, #8
 80109f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80109fa:	e019      	b.n	8010a30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80109fc:	f000 fbce 	bl	801119c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a00:	4b10      	ldr	r3, [pc, #64]	; (8010a44 <prvCheckTasksWaitingTermination+0x50>)
 8010a02:	68db      	ldr	r3, [r3, #12]
 8010a04:	68db      	ldr	r3, [r3, #12]
 8010a06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	3304      	adds	r3, #4
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7fe fb91 	bl	800f134 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010a12:	4b0d      	ldr	r3, [pc, #52]	; (8010a48 <prvCheckTasksWaitingTermination+0x54>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	3b01      	subs	r3, #1
 8010a18:	4a0b      	ldr	r2, [pc, #44]	; (8010a48 <prvCheckTasksWaitingTermination+0x54>)
 8010a1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010a1c:	4b0b      	ldr	r3, [pc, #44]	; (8010a4c <prvCheckTasksWaitingTermination+0x58>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	3b01      	subs	r3, #1
 8010a22:	4a0a      	ldr	r2, [pc, #40]	; (8010a4c <prvCheckTasksWaitingTermination+0x58>)
 8010a24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010a26:	f000 fbed 	bl	8011204 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f000 f810 	bl	8010a50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010a30:	4b06      	ldr	r3, [pc, #24]	; (8010a4c <prvCheckTasksWaitingTermination+0x58>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d1e1      	bne.n	80109fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010a38:	bf00      	nop
 8010a3a:	bf00      	nop
 8010a3c:	3708      	adds	r7, #8
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
 8010a42:	bf00      	nop
 8010a44:	20000e68 	.word	0x20000e68
 8010a48:	20000e94 	.word	0x20000e94
 8010a4c:	20000e7c 	.word	0x20000e7c

08010a50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b084      	sub	sp, #16
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	334c      	adds	r3, #76	; 0x4c
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f001 fea5 	bl	80127ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d108      	bne.n	8010a7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a70:	4618      	mov	r0, r3
 8010a72:	f000 fd89 	bl	8011588 <vPortFree>
				vPortFree( pxTCB );
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f000 fd86 	bl	8011588 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010a7c:	e01a      	b.n	8010ab4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010a84:	2b01      	cmp	r3, #1
 8010a86:	d103      	bne.n	8010a90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010a88:	6878      	ldr	r0, [r7, #4]
 8010a8a:	f000 fd7d 	bl	8011588 <vPortFree>
	}
 8010a8e:	e011      	b.n	8010ab4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010a96:	2b02      	cmp	r3, #2
 8010a98:	d00c      	beq.n	8010ab4 <prvDeleteTCB+0x64>
	__asm volatile
 8010a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a9e:	b672      	cpsid	i
 8010aa0:	f383 8811 	msr	BASEPRI, r3
 8010aa4:	f3bf 8f6f 	isb	sy
 8010aa8:	f3bf 8f4f 	dsb	sy
 8010aac:	b662      	cpsie	i
 8010aae:	60fb      	str	r3, [r7, #12]
}
 8010ab0:	bf00      	nop
 8010ab2:	e7fe      	b.n	8010ab2 <prvDeleteTCB+0x62>
	}
 8010ab4:	bf00      	nop
 8010ab6:	3710      	adds	r7, #16
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}

08010abc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010abc:	b480      	push	{r7}
 8010abe:	b083      	sub	sp, #12
 8010ac0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010ac2:	4b0c      	ldr	r3, [pc, #48]	; (8010af4 <prvResetNextTaskUnblockTime+0x38>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d104      	bne.n	8010ad6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010acc:	4b0a      	ldr	r3, [pc, #40]	; (8010af8 <prvResetNextTaskUnblockTime+0x3c>)
 8010ace:	f04f 32ff 	mov.w	r2, #4294967295
 8010ad2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010ad4:	e008      	b.n	8010ae8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ad6:	4b07      	ldr	r3, [pc, #28]	; (8010af4 <prvResetNextTaskUnblockTime+0x38>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	68db      	ldr	r3, [r3, #12]
 8010adc:	68db      	ldr	r3, [r3, #12]
 8010ade:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	685b      	ldr	r3, [r3, #4]
 8010ae4:	4a04      	ldr	r2, [pc, #16]	; (8010af8 <prvResetNextTaskUnblockTime+0x3c>)
 8010ae6:	6013      	str	r3, [r2, #0]
}
 8010ae8:	bf00      	nop
 8010aea:	370c      	adds	r7, #12
 8010aec:	46bd      	mov	sp, r7
 8010aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af2:	4770      	bx	lr
 8010af4:	20000e4c 	.word	0x20000e4c
 8010af8:	20000eb4 	.word	0x20000eb4

08010afc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010afc:	b480      	push	{r7}
 8010afe:	b083      	sub	sp, #12
 8010b00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010b02:	4b0b      	ldr	r3, [pc, #44]	; (8010b30 <xTaskGetSchedulerState+0x34>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d102      	bne.n	8010b10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	607b      	str	r3, [r7, #4]
 8010b0e:	e008      	b.n	8010b22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b10:	4b08      	ldr	r3, [pc, #32]	; (8010b34 <xTaskGetSchedulerState+0x38>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d102      	bne.n	8010b1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010b18:	2302      	movs	r3, #2
 8010b1a:	607b      	str	r3, [r7, #4]
 8010b1c:	e001      	b.n	8010b22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010b1e:	2300      	movs	r3, #0
 8010b20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010b22:	687b      	ldr	r3, [r7, #4]
	}
 8010b24:	4618      	mov	r0, r3
 8010b26:	370c      	adds	r7, #12
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2e:	4770      	bx	lr
 8010b30:	20000ea0 	.word	0x20000ea0
 8010b34:	20000ebc 	.word	0x20000ebc

08010b38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b084      	sub	sp, #16
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010b44:	2300      	movs	r3, #0
 8010b46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d069      	beq.n	8010c22 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b52:	4b36      	ldr	r3, [pc, #216]	; (8010c2c <xTaskPriorityInherit+0xf4>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	d259      	bcs.n	8010c10 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010b5c:	68bb      	ldr	r3, [r7, #8]
 8010b5e:	699b      	ldr	r3, [r3, #24]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	db06      	blt.n	8010b72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b64:	4b31      	ldr	r3, [pc, #196]	; (8010c2c <xTaskPriorityInherit+0xf4>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b6a:	f1c3 0207 	rsb	r2, r3, #7
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010b72:	68bb      	ldr	r3, [r7, #8]
 8010b74:	6959      	ldr	r1, [r3, #20]
 8010b76:	68bb      	ldr	r3, [r7, #8]
 8010b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b7a:	4613      	mov	r3, r2
 8010b7c:	009b      	lsls	r3, r3, #2
 8010b7e:	4413      	add	r3, r2
 8010b80:	009b      	lsls	r3, r3, #2
 8010b82:	4a2b      	ldr	r2, [pc, #172]	; (8010c30 <xTaskPriorityInherit+0xf8>)
 8010b84:	4413      	add	r3, r2
 8010b86:	4299      	cmp	r1, r3
 8010b88:	d13a      	bne.n	8010c00 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	3304      	adds	r3, #4
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7fe fad0 	bl	800f134 <uxListRemove>
 8010b94:	4603      	mov	r3, r0
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d115      	bne.n	8010bc6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b9e:	4924      	ldr	r1, [pc, #144]	; (8010c30 <xTaskPriorityInherit+0xf8>)
 8010ba0:	4613      	mov	r3, r2
 8010ba2:	009b      	lsls	r3, r3, #2
 8010ba4:	4413      	add	r3, r2
 8010ba6:	009b      	lsls	r3, r3, #2
 8010ba8:	440b      	add	r3, r1
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d10a      	bne.n	8010bc6 <xTaskPriorityInherit+0x8e>
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bb4:	2201      	movs	r2, #1
 8010bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8010bba:	43da      	mvns	r2, r3
 8010bbc:	4b1d      	ldr	r3, [pc, #116]	; (8010c34 <xTaskPriorityInherit+0xfc>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	4013      	ands	r3, r2
 8010bc2:	4a1c      	ldr	r2, [pc, #112]	; (8010c34 <xTaskPriorityInherit+0xfc>)
 8010bc4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010bc6:	4b19      	ldr	r3, [pc, #100]	; (8010c2c <xTaskPriorityInherit+0xf4>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bd4:	2201      	movs	r2, #1
 8010bd6:	409a      	lsls	r2, r3
 8010bd8:	4b16      	ldr	r3, [pc, #88]	; (8010c34 <xTaskPriorityInherit+0xfc>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	4313      	orrs	r3, r2
 8010bde:	4a15      	ldr	r2, [pc, #84]	; (8010c34 <xTaskPriorityInherit+0xfc>)
 8010be0:	6013      	str	r3, [r2, #0]
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010be6:	4613      	mov	r3, r2
 8010be8:	009b      	lsls	r3, r3, #2
 8010bea:	4413      	add	r3, r2
 8010bec:	009b      	lsls	r3, r3, #2
 8010bee:	4a10      	ldr	r2, [pc, #64]	; (8010c30 <xTaskPriorityInherit+0xf8>)
 8010bf0:	441a      	add	r2, r3
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	3304      	adds	r3, #4
 8010bf6:	4619      	mov	r1, r3
 8010bf8:	4610      	mov	r0, r2
 8010bfa:	f7fe fa3e 	bl	800f07a <vListInsertEnd>
 8010bfe:	e004      	b.n	8010c0a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010c00:	4b0a      	ldr	r3, [pc, #40]	; (8010c2c <xTaskPriorityInherit+0xf4>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	60fb      	str	r3, [r7, #12]
 8010c0e:	e008      	b.n	8010c22 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010c14:	4b05      	ldr	r3, [pc, #20]	; (8010c2c <xTaskPriorityInherit+0xf4>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d201      	bcs.n	8010c22 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010c1e:	2301      	movs	r3, #1
 8010c20:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010c22:	68fb      	ldr	r3, [r7, #12]
	}
 8010c24:	4618      	mov	r0, r3
 8010c26:	3710      	adds	r7, #16
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}
 8010c2c:	20000d94 	.word	0x20000d94
 8010c30:	20000d98 	.word	0x20000d98
 8010c34:	20000e9c 	.word	0x20000e9c

08010c38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b086      	sub	sp, #24
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010c44:	2300      	movs	r3, #0
 8010c46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d072      	beq.n	8010d34 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010c4e:	4b3c      	ldr	r3, [pc, #240]	; (8010d40 <xTaskPriorityDisinherit+0x108>)
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	693a      	ldr	r2, [r7, #16]
 8010c54:	429a      	cmp	r2, r3
 8010c56:	d00c      	beq.n	8010c72 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8010c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c5c:	b672      	cpsid	i
 8010c5e:	f383 8811 	msr	BASEPRI, r3
 8010c62:	f3bf 8f6f 	isb	sy
 8010c66:	f3bf 8f4f 	dsb	sy
 8010c6a:	b662      	cpsie	i
 8010c6c:	60fb      	str	r3, [r7, #12]
}
 8010c6e:	bf00      	nop
 8010c70:	e7fe      	b.n	8010c70 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d10c      	bne.n	8010c94 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8010c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c7e:	b672      	cpsid	i
 8010c80:	f383 8811 	msr	BASEPRI, r3
 8010c84:	f3bf 8f6f 	isb	sy
 8010c88:	f3bf 8f4f 	dsb	sy
 8010c8c:	b662      	cpsie	i
 8010c8e:	60bb      	str	r3, [r7, #8]
}
 8010c90:	bf00      	nop
 8010c92:	e7fe      	b.n	8010c92 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8010c94:	693b      	ldr	r3, [r7, #16]
 8010c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010c98:	1e5a      	subs	r2, r3, #1
 8010c9a:	693b      	ldr	r3, [r7, #16]
 8010c9c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ca2:	693b      	ldr	r3, [r7, #16]
 8010ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	d044      	beq.n	8010d34 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d140      	bne.n	8010d34 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010cb2:	693b      	ldr	r3, [r7, #16]
 8010cb4:	3304      	adds	r3, #4
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7fe fa3c 	bl	800f134 <uxListRemove>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d115      	bne.n	8010cee <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cc6:	491f      	ldr	r1, [pc, #124]	; (8010d44 <xTaskPriorityDisinherit+0x10c>)
 8010cc8:	4613      	mov	r3, r2
 8010cca:	009b      	lsls	r3, r3, #2
 8010ccc:	4413      	add	r3, r2
 8010cce:	009b      	lsls	r3, r3, #2
 8010cd0:	440b      	add	r3, r1
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d10a      	bne.n	8010cee <xTaskPriorityDisinherit+0xb6>
 8010cd8:	693b      	ldr	r3, [r7, #16]
 8010cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cdc:	2201      	movs	r2, #1
 8010cde:	fa02 f303 	lsl.w	r3, r2, r3
 8010ce2:	43da      	mvns	r2, r3
 8010ce4:	4b18      	ldr	r3, [pc, #96]	; (8010d48 <xTaskPriorityDisinherit+0x110>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	4013      	ands	r3, r2
 8010cea:	4a17      	ldr	r2, [pc, #92]	; (8010d48 <xTaskPriorityDisinherit+0x110>)
 8010cec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010cf2:	693b      	ldr	r3, [r7, #16]
 8010cf4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010cf6:	693b      	ldr	r3, [r7, #16]
 8010cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cfa:	f1c3 0207 	rsb	r2, r3, #7
 8010cfe:	693b      	ldr	r3, [r7, #16]
 8010d00:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010d02:	693b      	ldr	r3, [r7, #16]
 8010d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d06:	2201      	movs	r2, #1
 8010d08:	409a      	lsls	r2, r3
 8010d0a:	4b0f      	ldr	r3, [pc, #60]	; (8010d48 <xTaskPriorityDisinherit+0x110>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	4313      	orrs	r3, r2
 8010d10:	4a0d      	ldr	r2, [pc, #52]	; (8010d48 <xTaskPriorityDisinherit+0x110>)
 8010d12:	6013      	str	r3, [r2, #0]
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d18:	4613      	mov	r3, r2
 8010d1a:	009b      	lsls	r3, r3, #2
 8010d1c:	4413      	add	r3, r2
 8010d1e:	009b      	lsls	r3, r3, #2
 8010d20:	4a08      	ldr	r2, [pc, #32]	; (8010d44 <xTaskPriorityDisinherit+0x10c>)
 8010d22:	441a      	add	r2, r3
 8010d24:	693b      	ldr	r3, [r7, #16]
 8010d26:	3304      	adds	r3, #4
 8010d28:	4619      	mov	r1, r3
 8010d2a:	4610      	mov	r0, r2
 8010d2c:	f7fe f9a5 	bl	800f07a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010d30:	2301      	movs	r3, #1
 8010d32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010d34:	697b      	ldr	r3, [r7, #20]
	}
 8010d36:	4618      	mov	r0, r3
 8010d38:	3718      	adds	r7, #24
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	20000d94 	.word	0x20000d94
 8010d44:	20000d98 	.word	0x20000d98
 8010d48:	20000e9c 	.word	0x20000e9c

08010d4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b088      	sub	sp, #32
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
 8010d54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	f000 8087 	beq.w	8010e74 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010d66:	69bb      	ldr	r3, [r7, #24]
 8010d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d10c      	bne.n	8010d88 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8010d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d72:	b672      	cpsid	i
 8010d74:	f383 8811 	msr	BASEPRI, r3
 8010d78:	f3bf 8f6f 	isb	sy
 8010d7c:	f3bf 8f4f 	dsb	sy
 8010d80:	b662      	cpsie	i
 8010d82:	60fb      	str	r3, [r7, #12]
}
 8010d84:	bf00      	nop
 8010d86:	e7fe      	b.n	8010d86 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010d88:	69bb      	ldr	r3, [r7, #24]
 8010d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d8c:	683a      	ldr	r2, [r7, #0]
 8010d8e:	429a      	cmp	r2, r3
 8010d90:	d902      	bls.n	8010d98 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	61fb      	str	r3, [r7, #28]
 8010d96:	e002      	b.n	8010d9e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010d98:	69bb      	ldr	r3, [r7, #24]
 8010d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d9c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010d9e:	69bb      	ldr	r3, [r7, #24]
 8010da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010da2:	69fa      	ldr	r2, [r7, #28]
 8010da4:	429a      	cmp	r2, r3
 8010da6:	d065      	beq.n	8010e74 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010da8:	69bb      	ldr	r3, [r7, #24]
 8010daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010dac:	697a      	ldr	r2, [r7, #20]
 8010dae:	429a      	cmp	r2, r3
 8010db0:	d160      	bne.n	8010e74 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010db2:	4b32      	ldr	r3, [pc, #200]	; (8010e7c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	69ba      	ldr	r2, [r7, #24]
 8010db8:	429a      	cmp	r2, r3
 8010dba:	d10c      	bne.n	8010dd6 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8010dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc0:	b672      	cpsid	i
 8010dc2:	f383 8811 	msr	BASEPRI, r3
 8010dc6:	f3bf 8f6f 	isb	sy
 8010dca:	f3bf 8f4f 	dsb	sy
 8010dce:	b662      	cpsie	i
 8010dd0:	60bb      	str	r3, [r7, #8]
}
 8010dd2:	bf00      	nop
 8010dd4:	e7fe      	b.n	8010dd4 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010dd6:	69bb      	ldr	r3, [r7, #24]
 8010dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dda:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010ddc:	69bb      	ldr	r3, [r7, #24]
 8010dde:	69fa      	ldr	r2, [r7, #28]
 8010de0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010de2:	69bb      	ldr	r3, [r7, #24]
 8010de4:	699b      	ldr	r3, [r3, #24]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	db04      	blt.n	8010df4 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010dea:	69fb      	ldr	r3, [r7, #28]
 8010dec:	f1c3 0207 	rsb	r2, r3, #7
 8010df0:	69bb      	ldr	r3, [r7, #24]
 8010df2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010df4:	69bb      	ldr	r3, [r7, #24]
 8010df6:	6959      	ldr	r1, [r3, #20]
 8010df8:	693a      	ldr	r2, [r7, #16]
 8010dfa:	4613      	mov	r3, r2
 8010dfc:	009b      	lsls	r3, r3, #2
 8010dfe:	4413      	add	r3, r2
 8010e00:	009b      	lsls	r3, r3, #2
 8010e02:	4a1f      	ldr	r2, [pc, #124]	; (8010e80 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8010e04:	4413      	add	r3, r2
 8010e06:	4299      	cmp	r1, r3
 8010e08:	d134      	bne.n	8010e74 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010e0a:	69bb      	ldr	r3, [r7, #24]
 8010e0c:	3304      	adds	r3, #4
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f7fe f990 	bl	800f134 <uxListRemove>
 8010e14:	4603      	mov	r3, r0
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d115      	bne.n	8010e46 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010e1a:	69bb      	ldr	r3, [r7, #24]
 8010e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e1e:	4918      	ldr	r1, [pc, #96]	; (8010e80 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8010e20:	4613      	mov	r3, r2
 8010e22:	009b      	lsls	r3, r3, #2
 8010e24:	4413      	add	r3, r2
 8010e26:	009b      	lsls	r3, r3, #2
 8010e28:	440b      	add	r3, r1
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d10a      	bne.n	8010e46 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8010e30:	69bb      	ldr	r3, [r7, #24]
 8010e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e34:	2201      	movs	r2, #1
 8010e36:	fa02 f303 	lsl.w	r3, r2, r3
 8010e3a:	43da      	mvns	r2, r3
 8010e3c:	4b11      	ldr	r3, [pc, #68]	; (8010e84 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	4013      	ands	r3, r2
 8010e42:	4a10      	ldr	r2, [pc, #64]	; (8010e84 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010e44:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010e46:	69bb      	ldr	r3, [r7, #24]
 8010e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e4a:	2201      	movs	r2, #1
 8010e4c:	409a      	lsls	r2, r3
 8010e4e:	4b0d      	ldr	r3, [pc, #52]	; (8010e84 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	4313      	orrs	r3, r2
 8010e54:	4a0b      	ldr	r2, [pc, #44]	; (8010e84 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010e56:	6013      	str	r3, [r2, #0]
 8010e58:	69bb      	ldr	r3, [r7, #24]
 8010e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e5c:	4613      	mov	r3, r2
 8010e5e:	009b      	lsls	r3, r3, #2
 8010e60:	4413      	add	r3, r2
 8010e62:	009b      	lsls	r3, r3, #2
 8010e64:	4a06      	ldr	r2, [pc, #24]	; (8010e80 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8010e66:	441a      	add	r2, r3
 8010e68:	69bb      	ldr	r3, [r7, #24]
 8010e6a:	3304      	adds	r3, #4
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	4610      	mov	r0, r2
 8010e70:	f7fe f903 	bl	800f07a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010e74:	bf00      	nop
 8010e76:	3720      	adds	r7, #32
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}
 8010e7c:	20000d94 	.word	0x20000d94
 8010e80:	20000d98 	.word	0x20000d98
 8010e84:	20000e9c 	.word	0x20000e9c

08010e88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010e88:	b480      	push	{r7}
 8010e8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010e8c:	4b07      	ldr	r3, [pc, #28]	; (8010eac <pvTaskIncrementMutexHeldCount+0x24>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d004      	beq.n	8010e9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010e94:	4b05      	ldr	r3, [pc, #20]	; (8010eac <pvTaskIncrementMutexHeldCount+0x24>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010e9a:	3201      	adds	r2, #1
 8010e9c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8010e9e:	4b03      	ldr	r3, [pc, #12]	; (8010eac <pvTaskIncrementMutexHeldCount+0x24>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
	}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eaa:	4770      	bx	lr
 8010eac:	20000d94 	.word	0x20000d94

08010eb0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b084      	sub	sp, #16
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
 8010eb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010eba:	4b29      	ldr	r3, [pc, #164]	; (8010f60 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010ec0:	4b28      	ldr	r3, [pc, #160]	; (8010f64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	3304      	adds	r3, #4
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7fe f934 	bl	800f134 <uxListRemove>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d10b      	bne.n	8010eea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010ed2:	4b24      	ldr	r3, [pc, #144]	; (8010f64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ed8:	2201      	movs	r2, #1
 8010eda:	fa02 f303 	lsl.w	r3, r2, r3
 8010ede:	43da      	mvns	r2, r3
 8010ee0:	4b21      	ldr	r3, [pc, #132]	; (8010f68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	4013      	ands	r3, r2
 8010ee6:	4a20      	ldr	r2, [pc, #128]	; (8010f68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010ee8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ef0:	d10a      	bne.n	8010f08 <prvAddCurrentTaskToDelayedList+0x58>
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d007      	beq.n	8010f08 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010ef8:	4b1a      	ldr	r3, [pc, #104]	; (8010f64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	3304      	adds	r3, #4
 8010efe:	4619      	mov	r1, r3
 8010f00:	481a      	ldr	r0, [pc, #104]	; (8010f6c <prvAddCurrentTaskToDelayedList+0xbc>)
 8010f02:	f7fe f8ba 	bl	800f07a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010f06:	e026      	b.n	8010f56 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010f08:	68fa      	ldr	r2, [r7, #12]
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	4413      	add	r3, r2
 8010f0e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010f10:	4b14      	ldr	r3, [pc, #80]	; (8010f64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	68ba      	ldr	r2, [r7, #8]
 8010f16:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010f18:	68ba      	ldr	r2, [r7, #8]
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d209      	bcs.n	8010f34 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010f20:	4b13      	ldr	r3, [pc, #76]	; (8010f70 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010f22:	681a      	ldr	r2, [r3, #0]
 8010f24:	4b0f      	ldr	r3, [pc, #60]	; (8010f64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	3304      	adds	r3, #4
 8010f2a:	4619      	mov	r1, r3
 8010f2c:	4610      	mov	r0, r2
 8010f2e:	f7fe f8c8 	bl	800f0c2 <vListInsert>
}
 8010f32:	e010      	b.n	8010f56 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010f34:	4b0f      	ldr	r3, [pc, #60]	; (8010f74 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010f36:	681a      	ldr	r2, [r3, #0]
 8010f38:	4b0a      	ldr	r3, [pc, #40]	; (8010f64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	3304      	adds	r3, #4
 8010f3e:	4619      	mov	r1, r3
 8010f40:	4610      	mov	r0, r2
 8010f42:	f7fe f8be 	bl	800f0c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010f46:	4b0c      	ldr	r3, [pc, #48]	; (8010f78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	68ba      	ldr	r2, [r7, #8]
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	d202      	bcs.n	8010f56 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010f50:	4a09      	ldr	r2, [pc, #36]	; (8010f78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010f52:	68bb      	ldr	r3, [r7, #8]
 8010f54:	6013      	str	r3, [r2, #0]
}
 8010f56:	bf00      	nop
 8010f58:	3710      	adds	r7, #16
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	20000e98 	.word	0x20000e98
 8010f64:	20000d94 	.word	0x20000d94
 8010f68:	20000e9c 	.word	0x20000e9c
 8010f6c:	20000e80 	.word	0x20000e80
 8010f70:	20000e50 	.word	0x20000e50
 8010f74:	20000e4c 	.word	0x20000e4c
 8010f78:	20000eb4 	.word	0x20000eb4

08010f7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	b085      	sub	sp, #20
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	60f8      	str	r0, [r7, #12]
 8010f84:	60b9      	str	r1, [r7, #8]
 8010f86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	3b04      	subs	r3, #4
 8010f8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010f94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	3b04      	subs	r3, #4
 8010f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010f9c:	68bb      	ldr	r3, [r7, #8]
 8010f9e:	f023 0201 	bic.w	r2, r3, #1
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	3b04      	subs	r3, #4
 8010faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010fac:	4a0c      	ldr	r2, [pc, #48]	; (8010fe0 <pxPortInitialiseStack+0x64>)
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	3b14      	subs	r3, #20
 8010fb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010fb8:	687a      	ldr	r2, [r7, #4]
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	3b04      	subs	r3, #4
 8010fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	f06f 0202 	mvn.w	r2, #2
 8010fca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	3b20      	subs	r3, #32
 8010fd0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010fd2:	68fb      	ldr	r3, [r7, #12]
}
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	3714      	adds	r7, #20
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fde:	4770      	bx	lr
 8010fe0:	08010fe5 	.word	0x08010fe5

08010fe4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b085      	sub	sp, #20
 8010fe8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010fea:	2300      	movs	r3, #0
 8010fec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010fee:	4b14      	ldr	r3, [pc, #80]	; (8011040 <prvTaskExitError+0x5c>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ff6:	d00c      	beq.n	8011012 <prvTaskExitError+0x2e>
	__asm volatile
 8010ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ffc:	b672      	cpsid	i
 8010ffe:	f383 8811 	msr	BASEPRI, r3
 8011002:	f3bf 8f6f 	isb	sy
 8011006:	f3bf 8f4f 	dsb	sy
 801100a:	b662      	cpsie	i
 801100c:	60fb      	str	r3, [r7, #12]
}
 801100e:	bf00      	nop
 8011010:	e7fe      	b.n	8011010 <prvTaskExitError+0x2c>
	__asm volatile
 8011012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011016:	b672      	cpsid	i
 8011018:	f383 8811 	msr	BASEPRI, r3
 801101c:	f3bf 8f6f 	isb	sy
 8011020:	f3bf 8f4f 	dsb	sy
 8011024:	b662      	cpsie	i
 8011026:	60bb      	str	r3, [r7, #8]
}
 8011028:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801102a:	bf00      	nop
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d0fc      	beq.n	801102c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011032:	bf00      	nop
 8011034:	bf00      	nop
 8011036:	3714      	adds	r7, #20
 8011038:	46bd      	mov	sp, r7
 801103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103e:	4770      	bx	lr
 8011040:	20000014 	.word	0x20000014
	...

08011050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011050:	4b07      	ldr	r3, [pc, #28]	; (8011070 <pxCurrentTCBConst2>)
 8011052:	6819      	ldr	r1, [r3, #0]
 8011054:	6808      	ldr	r0, [r1, #0]
 8011056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801105a:	f380 8809 	msr	PSP, r0
 801105e:	f3bf 8f6f 	isb	sy
 8011062:	f04f 0000 	mov.w	r0, #0
 8011066:	f380 8811 	msr	BASEPRI, r0
 801106a:	4770      	bx	lr
 801106c:	f3af 8000 	nop.w

08011070 <pxCurrentTCBConst2>:
 8011070:	20000d94 	.word	0x20000d94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011074:	bf00      	nop
 8011076:	bf00      	nop

08011078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011078:	4808      	ldr	r0, [pc, #32]	; (801109c <prvPortStartFirstTask+0x24>)
 801107a:	6800      	ldr	r0, [r0, #0]
 801107c:	6800      	ldr	r0, [r0, #0]
 801107e:	f380 8808 	msr	MSP, r0
 8011082:	f04f 0000 	mov.w	r0, #0
 8011086:	f380 8814 	msr	CONTROL, r0
 801108a:	b662      	cpsie	i
 801108c:	b661      	cpsie	f
 801108e:	f3bf 8f4f 	dsb	sy
 8011092:	f3bf 8f6f 	isb	sy
 8011096:	df00      	svc	0
 8011098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801109a:	bf00      	nop
 801109c:	e000ed08 	.word	0xe000ed08

080110a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b084      	sub	sp, #16
 80110a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80110a6:	4b37      	ldr	r3, [pc, #220]	; (8011184 <xPortStartScheduler+0xe4>)
 80110a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	781b      	ldrb	r3, [r3, #0]
 80110ae:	b2db      	uxtb	r3, r3
 80110b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	22ff      	movs	r2, #255	; 0xff
 80110b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	781b      	ldrb	r3, [r3, #0]
 80110bc:	b2db      	uxtb	r3, r3
 80110be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80110c0:	78fb      	ldrb	r3, [r7, #3]
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80110c8:	b2da      	uxtb	r2, r3
 80110ca:	4b2f      	ldr	r3, [pc, #188]	; (8011188 <xPortStartScheduler+0xe8>)
 80110cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80110ce:	4b2f      	ldr	r3, [pc, #188]	; (801118c <xPortStartScheduler+0xec>)
 80110d0:	2207      	movs	r2, #7
 80110d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80110d4:	e009      	b.n	80110ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80110d6:	4b2d      	ldr	r3, [pc, #180]	; (801118c <xPortStartScheduler+0xec>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	3b01      	subs	r3, #1
 80110dc:	4a2b      	ldr	r2, [pc, #172]	; (801118c <xPortStartScheduler+0xec>)
 80110de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80110e0:	78fb      	ldrb	r3, [r7, #3]
 80110e2:	b2db      	uxtb	r3, r3
 80110e4:	005b      	lsls	r3, r3, #1
 80110e6:	b2db      	uxtb	r3, r3
 80110e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80110ea:	78fb      	ldrb	r3, [r7, #3]
 80110ec:	b2db      	uxtb	r3, r3
 80110ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110f2:	2b80      	cmp	r3, #128	; 0x80
 80110f4:	d0ef      	beq.n	80110d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80110f6:	4b25      	ldr	r3, [pc, #148]	; (801118c <xPortStartScheduler+0xec>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	f1c3 0307 	rsb	r3, r3, #7
 80110fe:	2b04      	cmp	r3, #4
 8011100:	d00c      	beq.n	801111c <xPortStartScheduler+0x7c>
	__asm volatile
 8011102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011106:	b672      	cpsid	i
 8011108:	f383 8811 	msr	BASEPRI, r3
 801110c:	f3bf 8f6f 	isb	sy
 8011110:	f3bf 8f4f 	dsb	sy
 8011114:	b662      	cpsie	i
 8011116:	60bb      	str	r3, [r7, #8]
}
 8011118:	bf00      	nop
 801111a:	e7fe      	b.n	801111a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801111c:	4b1b      	ldr	r3, [pc, #108]	; (801118c <xPortStartScheduler+0xec>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	021b      	lsls	r3, r3, #8
 8011122:	4a1a      	ldr	r2, [pc, #104]	; (801118c <xPortStartScheduler+0xec>)
 8011124:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011126:	4b19      	ldr	r3, [pc, #100]	; (801118c <xPortStartScheduler+0xec>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801112e:	4a17      	ldr	r2, [pc, #92]	; (801118c <xPortStartScheduler+0xec>)
 8011130:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	b2da      	uxtb	r2, r3
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801113a:	4b15      	ldr	r3, [pc, #84]	; (8011190 <xPortStartScheduler+0xf0>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	4a14      	ldr	r2, [pc, #80]	; (8011190 <xPortStartScheduler+0xf0>)
 8011140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011144:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011146:	4b12      	ldr	r3, [pc, #72]	; (8011190 <xPortStartScheduler+0xf0>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	4a11      	ldr	r2, [pc, #68]	; (8011190 <xPortStartScheduler+0xf0>)
 801114c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011150:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011152:	f000 f8dd 	bl	8011310 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011156:	4b0f      	ldr	r3, [pc, #60]	; (8011194 <xPortStartScheduler+0xf4>)
 8011158:	2200      	movs	r2, #0
 801115a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801115c:	f000 f8fc 	bl	8011358 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011160:	4b0d      	ldr	r3, [pc, #52]	; (8011198 <xPortStartScheduler+0xf8>)
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	4a0c      	ldr	r2, [pc, #48]	; (8011198 <xPortStartScheduler+0xf8>)
 8011166:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801116a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801116c:	f7ff ff84 	bl	8011078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011170:	f7ff fa72 	bl	8010658 <vTaskSwitchContext>
	prvTaskExitError();
 8011174:	f7ff ff36 	bl	8010fe4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011178:	2300      	movs	r3, #0
}
 801117a:	4618      	mov	r0, r3
 801117c:	3710      	adds	r7, #16
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}
 8011182:	bf00      	nop
 8011184:	e000e400 	.word	0xe000e400
 8011188:	20000ec0 	.word	0x20000ec0
 801118c:	20000ec4 	.word	0x20000ec4
 8011190:	e000ed20 	.word	0xe000ed20
 8011194:	20000014 	.word	0x20000014
 8011198:	e000ef34 	.word	0xe000ef34

0801119c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801119c:	b480      	push	{r7}
 801119e:	b083      	sub	sp, #12
 80111a0:	af00      	add	r7, sp, #0
	__asm volatile
 80111a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a6:	b672      	cpsid	i
 80111a8:	f383 8811 	msr	BASEPRI, r3
 80111ac:	f3bf 8f6f 	isb	sy
 80111b0:	f3bf 8f4f 	dsb	sy
 80111b4:	b662      	cpsie	i
 80111b6:	607b      	str	r3, [r7, #4]
}
 80111b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80111ba:	4b10      	ldr	r3, [pc, #64]	; (80111fc <vPortEnterCritical+0x60>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	3301      	adds	r3, #1
 80111c0:	4a0e      	ldr	r2, [pc, #56]	; (80111fc <vPortEnterCritical+0x60>)
 80111c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80111c4:	4b0d      	ldr	r3, [pc, #52]	; (80111fc <vPortEnterCritical+0x60>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	2b01      	cmp	r3, #1
 80111ca:	d111      	bne.n	80111f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80111cc:	4b0c      	ldr	r3, [pc, #48]	; (8011200 <vPortEnterCritical+0x64>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	b2db      	uxtb	r3, r3
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d00c      	beq.n	80111f0 <vPortEnterCritical+0x54>
	__asm volatile
 80111d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111da:	b672      	cpsid	i
 80111dc:	f383 8811 	msr	BASEPRI, r3
 80111e0:	f3bf 8f6f 	isb	sy
 80111e4:	f3bf 8f4f 	dsb	sy
 80111e8:	b662      	cpsie	i
 80111ea:	603b      	str	r3, [r7, #0]
}
 80111ec:	bf00      	nop
 80111ee:	e7fe      	b.n	80111ee <vPortEnterCritical+0x52>
	}
}
 80111f0:	bf00      	nop
 80111f2:	370c      	adds	r7, #12
 80111f4:	46bd      	mov	sp, r7
 80111f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fa:	4770      	bx	lr
 80111fc:	20000014 	.word	0x20000014
 8011200:	e000ed04 	.word	0xe000ed04

08011204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011204:	b480      	push	{r7}
 8011206:	b083      	sub	sp, #12
 8011208:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801120a:	4b13      	ldr	r3, [pc, #76]	; (8011258 <vPortExitCritical+0x54>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d10c      	bne.n	801122c <vPortExitCritical+0x28>
	__asm volatile
 8011212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011216:	b672      	cpsid	i
 8011218:	f383 8811 	msr	BASEPRI, r3
 801121c:	f3bf 8f6f 	isb	sy
 8011220:	f3bf 8f4f 	dsb	sy
 8011224:	b662      	cpsie	i
 8011226:	607b      	str	r3, [r7, #4]
}
 8011228:	bf00      	nop
 801122a:	e7fe      	b.n	801122a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801122c:	4b0a      	ldr	r3, [pc, #40]	; (8011258 <vPortExitCritical+0x54>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	3b01      	subs	r3, #1
 8011232:	4a09      	ldr	r2, [pc, #36]	; (8011258 <vPortExitCritical+0x54>)
 8011234:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011236:	4b08      	ldr	r3, [pc, #32]	; (8011258 <vPortExitCritical+0x54>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d105      	bne.n	801124a <vPortExitCritical+0x46>
 801123e:	2300      	movs	r3, #0
 8011240:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	f383 8811 	msr	BASEPRI, r3
}
 8011248:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801124a:	bf00      	nop
 801124c:	370c      	adds	r7, #12
 801124e:	46bd      	mov	sp, r7
 8011250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011254:	4770      	bx	lr
 8011256:	bf00      	nop
 8011258:	20000014 	.word	0x20000014
 801125c:	00000000 	.word	0x00000000

08011260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011260:	f3ef 8009 	mrs	r0, PSP
 8011264:	f3bf 8f6f 	isb	sy
 8011268:	4b15      	ldr	r3, [pc, #84]	; (80112c0 <pxCurrentTCBConst>)
 801126a:	681a      	ldr	r2, [r3, #0]
 801126c:	f01e 0f10 	tst.w	lr, #16
 8011270:	bf08      	it	eq
 8011272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801127a:	6010      	str	r0, [r2, #0]
 801127c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011280:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011284:	b672      	cpsid	i
 8011286:	f380 8811 	msr	BASEPRI, r0
 801128a:	f3bf 8f4f 	dsb	sy
 801128e:	f3bf 8f6f 	isb	sy
 8011292:	b662      	cpsie	i
 8011294:	f7ff f9e0 	bl	8010658 <vTaskSwitchContext>
 8011298:	f04f 0000 	mov.w	r0, #0
 801129c:	f380 8811 	msr	BASEPRI, r0
 80112a0:	bc09      	pop	{r0, r3}
 80112a2:	6819      	ldr	r1, [r3, #0]
 80112a4:	6808      	ldr	r0, [r1, #0]
 80112a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112aa:	f01e 0f10 	tst.w	lr, #16
 80112ae:	bf08      	it	eq
 80112b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80112b4:	f380 8809 	msr	PSP, r0
 80112b8:	f3bf 8f6f 	isb	sy
 80112bc:	4770      	bx	lr
 80112be:	bf00      	nop

080112c0 <pxCurrentTCBConst>:
 80112c0:	20000d94 	.word	0x20000d94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80112c4:	bf00      	nop
 80112c6:	bf00      	nop

080112c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b082      	sub	sp, #8
 80112cc:	af00      	add	r7, sp, #0
	__asm volatile
 80112ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112d2:	b672      	cpsid	i
 80112d4:	f383 8811 	msr	BASEPRI, r3
 80112d8:	f3bf 8f6f 	isb	sy
 80112dc:	f3bf 8f4f 	dsb	sy
 80112e0:	b662      	cpsie	i
 80112e2:	607b      	str	r3, [r7, #4]
}
 80112e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80112e6:	f7ff f8fd 	bl	80104e4 <xTaskIncrementTick>
 80112ea:	4603      	mov	r3, r0
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d003      	beq.n	80112f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80112f0:	4b06      	ldr	r3, [pc, #24]	; (801130c <SysTick_Handler+0x44>)
 80112f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112f6:	601a      	str	r2, [r3, #0]
 80112f8:	2300      	movs	r3, #0
 80112fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	f383 8811 	msr	BASEPRI, r3
}
 8011302:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011304:	bf00      	nop
 8011306:	3708      	adds	r7, #8
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}
 801130c:	e000ed04 	.word	0xe000ed04

08011310 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011310:	b480      	push	{r7}
 8011312:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011314:	4b0b      	ldr	r3, [pc, #44]	; (8011344 <vPortSetupTimerInterrupt+0x34>)
 8011316:	2200      	movs	r2, #0
 8011318:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801131a:	4b0b      	ldr	r3, [pc, #44]	; (8011348 <vPortSetupTimerInterrupt+0x38>)
 801131c:	2200      	movs	r2, #0
 801131e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011320:	4b0a      	ldr	r3, [pc, #40]	; (801134c <vPortSetupTimerInterrupt+0x3c>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	4a0a      	ldr	r2, [pc, #40]	; (8011350 <vPortSetupTimerInterrupt+0x40>)
 8011326:	fba2 2303 	umull	r2, r3, r2, r3
 801132a:	099b      	lsrs	r3, r3, #6
 801132c:	4a09      	ldr	r2, [pc, #36]	; (8011354 <vPortSetupTimerInterrupt+0x44>)
 801132e:	3b01      	subs	r3, #1
 8011330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011332:	4b04      	ldr	r3, [pc, #16]	; (8011344 <vPortSetupTimerInterrupt+0x34>)
 8011334:	2207      	movs	r2, #7
 8011336:	601a      	str	r2, [r3, #0]
}
 8011338:	bf00      	nop
 801133a:	46bd      	mov	sp, r7
 801133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011340:	4770      	bx	lr
 8011342:	bf00      	nop
 8011344:	e000e010 	.word	0xe000e010
 8011348:	e000e018 	.word	0xe000e018
 801134c:	20000008 	.word	0x20000008
 8011350:	10624dd3 	.word	0x10624dd3
 8011354:	e000e014 	.word	0xe000e014

08011358 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011358:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011368 <vPortEnableVFP+0x10>
 801135c:	6801      	ldr	r1, [r0, #0]
 801135e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011362:	6001      	str	r1, [r0, #0]
 8011364:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011366:	bf00      	nop
 8011368:	e000ed88 	.word	0xe000ed88

0801136c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801136c:	b480      	push	{r7}
 801136e:	b085      	sub	sp, #20
 8011370:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011372:	f3ef 8305 	mrs	r3, IPSR
 8011376:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	2b0f      	cmp	r3, #15
 801137c:	d916      	bls.n	80113ac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801137e:	4a19      	ldr	r2, [pc, #100]	; (80113e4 <vPortValidateInterruptPriority+0x78>)
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	4413      	add	r3, r2
 8011384:	781b      	ldrb	r3, [r3, #0]
 8011386:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011388:	4b17      	ldr	r3, [pc, #92]	; (80113e8 <vPortValidateInterruptPriority+0x7c>)
 801138a:	781b      	ldrb	r3, [r3, #0]
 801138c:	7afa      	ldrb	r2, [r7, #11]
 801138e:	429a      	cmp	r2, r3
 8011390:	d20c      	bcs.n	80113ac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8011392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011396:	b672      	cpsid	i
 8011398:	f383 8811 	msr	BASEPRI, r3
 801139c:	f3bf 8f6f 	isb	sy
 80113a0:	f3bf 8f4f 	dsb	sy
 80113a4:	b662      	cpsie	i
 80113a6:	607b      	str	r3, [r7, #4]
}
 80113a8:	bf00      	nop
 80113aa:	e7fe      	b.n	80113aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80113ac:	4b0f      	ldr	r3, [pc, #60]	; (80113ec <vPortValidateInterruptPriority+0x80>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80113b4:	4b0e      	ldr	r3, [pc, #56]	; (80113f0 <vPortValidateInterruptPriority+0x84>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	429a      	cmp	r2, r3
 80113ba:	d90c      	bls.n	80113d6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80113bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113c0:	b672      	cpsid	i
 80113c2:	f383 8811 	msr	BASEPRI, r3
 80113c6:	f3bf 8f6f 	isb	sy
 80113ca:	f3bf 8f4f 	dsb	sy
 80113ce:	b662      	cpsie	i
 80113d0:	603b      	str	r3, [r7, #0]
}
 80113d2:	bf00      	nop
 80113d4:	e7fe      	b.n	80113d4 <vPortValidateInterruptPriority+0x68>
	}
 80113d6:	bf00      	nop
 80113d8:	3714      	adds	r7, #20
 80113da:	46bd      	mov	sp, r7
 80113dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e0:	4770      	bx	lr
 80113e2:	bf00      	nop
 80113e4:	e000e3f0 	.word	0xe000e3f0
 80113e8:	20000ec0 	.word	0x20000ec0
 80113ec:	e000ed0c 	.word	0xe000ed0c
 80113f0:	20000ec4 	.word	0x20000ec4

080113f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b08a      	sub	sp, #40	; 0x28
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80113fc:	2300      	movs	r3, #0
 80113fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011400:	f7fe ffb4 	bl	801036c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011404:	4b5b      	ldr	r3, [pc, #364]	; (8011574 <pvPortMalloc+0x180>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d101      	bne.n	8011410 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801140c:	f000 f91a 	bl	8011644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011410:	4b59      	ldr	r3, [pc, #356]	; (8011578 <pvPortMalloc+0x184>)
 8011412:	681a      	ldr	r2, [r3, #0]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	4013      	ands	r3, r2
 8011418:	2b00      	cmp	r3, #0
 801141a:	f040 8092 	bne.w	8011542 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d01f      	beq.n	8011464 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8011424:	2208      	movs	r2, #8
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	4413      	add	r3, r2
 801142a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	f003 0307 	and.w	r3, r3, #7
 8011432:	2b00      	cmp	r3, #0
 8011434:	d016      	beq.n	8011464 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f023 0307 	bic.w	r3, r3, #7
 801143c:	3308      	adds	r3, #8
 801143e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f003 0307 	and.w	r3, r3, #7
 8011446:	2b00      	cmp	r3, #0
 8011448:	d00c      	beq.n	8011464 <pvPortMalloc+0x70>
	__asm volatile
 801144a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801144e:	b672      	cpsid	i
 8011450:	f383 8811 	msr	BASEPRI, r3
 8011454:	f3bf 8f6f 	isb	sy
 8011458:	f3bf 8f4f 	dsb	sy
 801145c:	b662      	cpsie	i
 801145e:	617b      	str	r3, [r7, #20]
}
 8011460:	bf00      	nop
 8011462:	e7fe      	b.n	8011462 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d06b      	beq.n	8011542 <pvPortMalloc+0x14e>
 801146a:	4b44      	ldr	r3, [pc, #272]	; (801157c <pvPortMalloc+0x188>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	687a      	ldr	r2, [r7, #4]
 8011470:	429a      	cmp	r2, r3
 8011472:	d866      	bhi.n	8011542 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011474:	4b42      	ldr	r3, [pc, #264]	; (8011580 <pvPortMalloc+0x18c>)
 8011476:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011478:	4b41      	ldr	r3, [pc, #260]	; (8011580 <pvPortMalloc+0x18c>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801147e:	e004      	b.n	801148a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8011480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011482:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801148c:	685b      	ldr	r3, [r3, #4]
 801148e:	687a      	ldr	r2, [r7, #4]
 8011490:	429a      	cmp	r2, r3
 8011492:	d903      	bls.n	801149c <pvPortMalloc+0xa8>
 8011494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d1f1      	bne.n	8011480 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801149c:	4b35      	ldr	r3, [pc, #212]	; (8011574 <pvPortMalloc+0x180>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114a2:	429a      	cmp	r2, r3
 80114a4:	d04d      	beq.n	8011542 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80114a6:	6a3b      	ldr	r3, [r7, #32]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	2208      	movs	r2, #8
 80114ac:	4413      	add	r3, r2
 80114ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80114b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b2:	681a      	ldr	r2, [r3, #0]
 80114b4:	6a3b      	ldr	r3, [r7, #32]
 80114b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80114b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ba:	685a      	ldr	r2, [r3, #4]
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	1ad2      	subs	r2, r2, r3
 80114c0:	2308      	movs	r3, #8
 80114c2:	005b      	lsls	r3, r3, #1
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d921      	bls.n	801150c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80114c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	4413      	add	r3, r2
 80114ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80114d0:	69bb      	ldr	r3, [r7, #24]
 80114d2:	f003 0307 	and.w	r3, r3, #7
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d00c      	beq.n	80114f4 <pvPortMalloc+0x100>
	__asm volatile
 80114da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114de:	b672      	cpsid	i
 80114e0:	f383 8811 	msr	BASEPRI, r3
 80114e4:	f3bf 8f6f 	isb	sy
 80114e8:	f3bf 8f4f 	dsb	sy
 80114ec:	b662      	cpsie	i
 80114ee:	613b      	str	r3, [r7, #16]
}
 80114f0:	bf00      	nop
 80114f2:	e7fe      	b.n	80114f2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80114f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f6:	685a      	ldr	r2, [r3, #4]
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	1ad2      	subs	r2, r2, r3
 80114fc:	69bb      	ldr	r3, [r7, #24]
 80114fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011502:	687a      	ldr	r2, [r7, #4]
 8011504:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011506:	69b8      	ldr	r0, [r7, #24]
 8011508:	f000 f8fe 	bl	8011708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801150c:	4b1b      	ldr	r3, [pc, #108]	; (801157c <pvPortMalloc+0x188>)
 801150e:	681a      	ldr	r2, [r3, #0]
 8011510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011512:	685b      	ldr	r3, [r3, #4]
 8011514:	1ad3      	subs	r3, r2, r3
 8011516:	4a19      	ldr	r2, [pc, #100]	; (801157c <pvPortMalloc+0x188>)
 8011518:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801151a:	4b18      	ldr	r3, [pc, #96]	; (801157c <pvPortMalloc+0x188>)
 801151c:	681a      	ldr	r2, [r3, #0]
 801151e:	4b19      	ldr	r3, [pc, #100]	; (8011584 <pvPortMalloc+0x190>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	429a      	cmp	r2, r3
 8011524:	d203      	bcs.n	801152e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011526:	4b15      	ldr	r3, [pc, #84]	; (801157c <pvPortMalloc+0x188>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	4a16      	ldr	r2, [pc, #88]	; (8011584 <pvPortMalloc+0x190>)
 801152c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011530:	685a      	ldr	r2, [r3, #4]
 8011532:	4b11      	ldr	r3, [pc, #68]	; (8011578 <pvPortMalloc+0x184>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	431a      	orrs	r2, r3
 8011538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801153a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801153e:	2200      	movs	r2, #0
 8011540:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011542:	f7fe ff21 	bl	8010388 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011546:	69fb      	ldr	r3, [r7, #28]
 8011548:	f003 0307 	and.w	r3, r3, #7
 801154c:	2b00      	cmp	r3, #0
 801154e:	d00c      	beq.n	801156a <pvPortMalloc+0x176>
	__asm volatile
 8011550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011554:	b672      	cpsid	i
 8011556:	f383 8811 	msr	BASEPRI, r3
 801155a:	f3bf 8f6f 	isb	sy
 801155e:	f3bf 8f4f 	dsb	sy
 8011562:	b662      	cpsie	i
 8011564:	60fb      	str	r3, [r7, #12]
}
 8011566:	bf00      	nop
 8011568:	e7fe      	b.n	8011568 <pvPortMalloc+0x174>
	return pvReturn;
 801156a:	69fb      	ldr	r3, [r7, #28]
}
 801156c:	4618      	mov	r0, r3
 801156e:	3728      	adds	r7, #40	; 0x28
 8011570:	46bd      	mov	sp, r7
 8011572:	bd80      	pop	{r7, pc}
 8011574:	20008ed0 	.word	0x20008ed0
 8011578:	20008edc 	.word	0x20008edc
 801157c:	20008ed4 	.word	0x20008ed4
 8011580:	20008ec8 	.word	0x20008ec8
 8011584:	20008ed8 	.word	0x20008ed8

08011588 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b086      	sub	sp, #24
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d04c      	beq.n	8011634 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801159a:	2308      	movs	r3, #8
 801159c:	425b      	negs	r3, r3
 801159e:	697a      	ldr	r2, [r7, #20]
 80115a0:	4413      	add	r3, r2
 80115a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80115a8:	693b      	ldr	r3, [r7, #16]
 80115aa:	685a      	ldr	r2, [r3, #4]
 80115ac:	4b23      	ldr	r3, [pc, #140]	; (801163c <vPortFree+0xb4>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	4013      	ands	r3, r2
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d10c      	bne.n	80115d0 <vPortFree+0x48>
	__asm volatile
 80115b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115ba:	b672      	cpsid	i
 80115bc:	f383 8811 	msr	BASEPRI, r3
 80115c0:	f3bf 8f6f 	isb	sy
 80115c4:	f3bf 8f4f 	dsb	sy
 80115c8:	b662      	cpsie	i
 80115ca:	60fb      	str	r3, [r7, #12]
}
 80115cc:	bf00      	nop
 80115ce:	e7fe      	b.n	80115ce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80115d0:	693b      	ldr	r3, [r7, #16]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d00c      	beq.n	80115f2 <vPortFree+0x6a>
	__asm volatile
 80115d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115dc:	b672      	cpsid	i
 80115de:	f383 8811 	msr	BASEPRI, r3
 80115e2:	f3bf 8f6f 	isb	sy
 80115e6:	f3bf 8f4f 	dsb	sy
 80115ea:	b662      	cpsie	i
 80115ec:	60bb      	str	r3, [r7, #8]
}
 80115ee:	bf00      	nop
 80115f0:	e7fe      	b.n	80115f0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80115f2:	693b      	ldr	r3, [r7, #16]
 80115f4:	685a      	ldr	r2, [r3, #4]
 80115f6:	4b11      	ldr	r3, [pc, #68]	; (801163c <vPortFree+0xb4>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	4013      	ands	r3, r2
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d019      	beq.n	8011634 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011600:	693b      	ldr	r3, [r7, #16]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d115      	bne.n	8011634 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011608:	693b      	ldr	r3, [r7, #16]
 801160a:	685a      	ldr	r2, [r3, #4]
 801160c:	4b0b      	ldr	r3, [pc, #44]	; (801163c <vPortFree+0xb4>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	43db      	mvns	r3, r3
 8011612:	401a      	ands	r2, r3
 8011614:	693b      	ldr	r3, [r7, #16]
 8011616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011618:	f7fe fea8 	bl	801036c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801161c:	693b      	ldr	r3, [r7, #16]
 801161e:	685a      	ldr	r2, [r3, #4]
 8011620:	4b07      	ldr	r3, [pc, #28]	; (8011640 <vPortFree+0xb8>)
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	4413      	add	r3, r2
 8011626:	4a06      	ldr	r2, [pc, #24]	; (8011640 <vPortFree+0xb8>)
 8011628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801162a:	6938      	ldr	r0, [r7, #16]
 801162c:	f000 f86c 	bl	8011708 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011630:	f7fe feaa 	bl	8010388 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011634:	bf00      	nop
 8011636:	3718      	adds	r7, #24
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}
 801163c:	20008edc 	.word	0x20008edc
 8011640:	20008ed4 	.word	0x20008ed4

08011644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011644:	b480      	push	{r7}
 8011646:	b085      	sub	sp, #20
 8011648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801164a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801164e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011650:	4b27      	ldr	r3, [pc, #156]	; (80116f0 <prvHeapInit+0xac>)
 8011652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	f003 0307 	and.w	r3, r3, #7
 801165a:	2b00      	cmp	r3, #0
 801165c:	d00c      	beq.n	8011678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	3307      	adds	r3, #7
 8011662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	f023 0307 	bic.w	r3, r3, #7
 801166a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801166c:	68ba      	ldr	r2, [r7, #8]
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	1ad3      	subs	r3, r2, r3
 8011672:	4a1f      	ldr	r2, [pc, #124]	; (80116f0 <prvHeapInit+0xac>)
 8011674:	4413      	add	r3, r2
 8011676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801167c:	4a1d      	ldr	r2, [pc, #116]	; (80116f4 <prvHeapInit+0xb0>)
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011682:	4b1c      	ldr	r3, [pc, #112]	; (80116f4 <prvHeapInit+0xb0>)
 8011684:	2200      	movs	r2, #0
 8011686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	68ba      	ldr	r2, [r7, #8]
 801168c:	4413      	add	r3, r2
 801168e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011690:	2208      	movs	r2, #8
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	1a9b      	subs	r3, r3, r2
 8011696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	f023 0307 	bic.w	r3, r3, #7
 801169e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	4a15      	ldr	r2, [pc, #84]	; (80116f8 <prvHeapInit+0xb4>)
 80116a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80116a6:	4b14      	ldr	r3, [pc, #80]	; (80116f8 <prvHeapInit+0xb4>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	2200      	movs	r2, #0
 80116ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80116ae:	4b12      	ldr	r3, [pc, #72]	; (80116f8 <prvHeapInit+0xb4>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	2200      	movs	r2, #0
 80116b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	68fa      	ldr	r2, [r7, #12]
 80116be:	1ad2      	subs	r2, r2, r3
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80116c4:	4b0c      	ldr	r3, [pc, #48]	; (80116f8 <prvHeapInit+0xb4>)
 80116c6:	681a      	ldr	r2, [r3, #0]
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80116cc:	683b      	ldr	r3, [r7, #0]
 80116ce:	685b      	ldr	r3, [r3, #4]
 80116d0:	4a0a      	ldr	r2, [pc, #40]	; (80116fc <prvHeapInit+0xb8>)
 80116d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	685b      	ldr	r3, [r3, #4]
 80116d8:	4a09      	ldr	r2, [pc, #36]	; (8011700 <prvHeapInit+0xbc>)
 80116da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80116dc:	4b09      	ldr	r3, [pc, #36]	; (8011704 <prvHeapInit+0xc0>)
 80116de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80116e2:	601a      	str	r2, [r3, #0]
}
 80116e4:	bf00      	nop
 80116e6:	3714      	adds	r7, #20
 80116e8:	46bd      	mov	sp, r7
 80116ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ee:	4770      	bx	lr
 80116f0:	20000ec8 	.word	0x20000ec8
 80116f4:	20008ec8 	.word	0x20008ec8
 80116f8:	20008ed0 	.word	0x20008ed0
 80116fc:	20008ed8 	.word	0x20008ed8
 8011700:	20008ed4 	.word	0x20008ed4
 8011704:	20008edc 	.word	0x20008edc

08011708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011708:	b480      	push	{r7}
 801170a:	b085      	sub	sp, #20
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011710:	4b28      	ldr	r3, [pc, #160]	; (80117b4 <prvInsertBlockIntoFreeList+0xac>)
 8011712:	60fb      	str	r3, [r7, #12]
 8011714:	e002      	b.n	801171c <prvInsertBlockIntoFreeList+0x14>
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	60fb      	str	r3, [r7, #12]
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	687a      	ldr	r2, [r7, #4]
 8011722:	429a      	cmp	r2, r3
 8011724:	d8f7      	bhi.n	8011716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	685b      	ldr	r3, [r3, #4]
 801172e:	68ba      	ldr	r2, [r7, #8]
 8011730:	4413      	add	r3, r2
 8011732:	687a      	ldr	r2, [r7, #4]
 8011734:	429a      	cmp	r2, r3
 8011736:	d108      	bne.n	801174a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	685a      	ldr	r2, [r3, #4]
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	685b      	ldr	r3, [r3, #4]
 8011740:	441a      	add	r2, r3
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	685b      	ldr	r3, [r3, #4]
 8011752:	68ba      	ldr	r2, [r7, #8]
 8011754:	441a      	add	r2, r3
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	429a      	cmp	r2, r3
 801175c:	d118      	bne.n	8011790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	681a      	ldr	r2, [r3, #0]
 8011762:	4b15      	ldr	r3, [pc, #84]	; (80117b8 <prvInsertBlockIntoFreeList+0xb0>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	429a      	cmp	r2, r3
 8011768:	d00d      	beq.n	8011786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	685a      	ldr	r2, [r3, #4]
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	685b      	ldr	r3, [r3, #4]
 8011774:	441a      	add	r2, r3
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	681a      	ldr	r2, [r3, #0]
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	601a      	str	r2, [r3, #0]
 8011784:	e008      	b.n	8011798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011786:	4b0c      	ldr	r3, [pc, #48]	; (80117b8 <prvInsertBlockIntoFreeList+0xb0>)
 8011788:	681a      	ldr	r2, [r3, #0]
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	601a      	str	r2, [r3, #0]
 801178e:	e003      	b.n	8011798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011798:	68fa      	ldr	r2, [r7, #12]
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	429a      	cmp	r2, r3
 801179e:	d002      	beq.n	80117a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	687a      	ldr	r2, [r7, #4]
 80117a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80117a6:	bf00      	nop
 80117a8:	3714      	adds	r7, #20
 80117aa:	46bd      	mov	sp, r7
 80117ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b0:	4770      	bx	lr
 80117b2:	bf00      	nop
 80117b4:	20008ec8 	.word	0x20008ec8
 80117b8:	20008ed0 	.word	0x20008ed0

080117bc <__cvt>:
 80117bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80117c0:	ec55 4b10 	vmov	r4, r5, d0
 80117c4:	2d00      	cmp	r5, #0
 80117c6:	460e      	mov	r6, r1
 80117c8:	4619      	mov	r1, r3
 80117ca:	462b      	mov	r3, r5
 80117cc:	bfbb      	ittet	lt
 80117ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80117d2:	461d      	movlt	r5, r3
 80117d4:	2300      	movge	r3, #0
 80117d6:	232d      	movlt	r3, #45	; 0x2d
 80117d8:	700b      	strb	r3, [r1, #0]
 80117da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80117e0:	4691      	mov	r9, r2
 80117e2:	f023 0820 	bic.w	r8, r3, #32
 80117e6:	bfbc      	itt	lt
 80117e8:	4622      	movlt	r2, r4
 80117ea:	4614      	movlt	r4, r2
 80117ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80117f0:	d005      	beq.n	80117fe <__cvt+0x42>
 80117f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80117f6:	d100      	bne.n	80117fa <__cvt+0x3e>
 80117f8:	3601      	adds	r6, #1
 80117fa:	2102      	movs	r1, #2
 80117fc:	e000      	b.n	8011800 <__cvt+0x44>
 80117fe:	2103      	movs	r1, #3
 8011800:	ab03      	add	r3, sp, #12
 8011802:	9301      	str	r3, [sp, #4]
 8011804:	ab02      	add	r3, sp, #8
 8011806:	9300      	str	r3, [sp, #0]
 8011808:	ec45 4b10 	vmov	d0, r4, r5
 801180c:	4653      	mov	r3, sl
 801180e:	4632      	mov	r2, r6
 8011810:	f001 f922 	bl	8012a58 <_dtoa_r>
 8011814:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011818:	4607      	mov	r7, r0
 801181a:	d102      	bne.n	8011822 <__cvt+0x66>
 801181c:	f019 0f01 	tst.w	r9, #1
 8011820:	d022      	beq.n	8011868 <__cvt+0xac>
 8011822:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011826:	eb07 0906 	add.w	r9, r7, r6
 801182a:	d110      	bne.n	801184e <__cvt+0x92>
 801182c:	783b      	ldrb	r3, [r7, #0]
 801182e:	2b30      	cmp	r3, #48	; 0x30
 8011830:	d10a      	bne.n	8011848 <__cvt+0x8c>
 8011832:	2200      	movs	r2, #0
 8011834:	2300      	movs	r3, #0
 8011836:	4620      	mov	r0, r4
 8011838:	4629      	mov	r1, r5
 801183a:	f7ef f96d 	bl	8000b18 <__aeabi_dcmpeq>
 801183e:	b918      	cbnz	r0, 8011848 <__cvt+0x8c>
 8011840:	f1c6 0601 	rsb	r6, r6, #1
 8011844:	f8ca 6000 	str.w	r6, [sl]
 8011848:	f8da 3000 	ldr.w	r3, [sl]
 801184c:	4499      	add	r9, r3
 801184e:	2200      	movs	r2, #0
 8011850:	2300      	movs	r3, #0
 8011852:	4620      	mov	r0, r4
 8011854:	4629      	mov	r1, r5
 8011856:	f7ef f95f 	bl	8000b18 <__aeabi_dcmpeq>
 801185a:	b108      	cbz	r0, 8011860 <__cvt+0xa4>
 801185c:	f8cd 900c 	str.w	r9, [sp, #12]
 8011860:	2230      	movs	r2, #48	; 0x30
 8011862:	9b03      	ldr	r3, [sp, #12]
 8011864:	454b      	cmp	r3, r9
 8011866:	d307      	bcc.n	8011878 <__cvt+0xbc>
 8011868:	9b03      	ldr	r3, [sp, #12]
 801186a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801186c:	1bdb      	subs	r3, r3, r7
 801186e:	4638      	mov	r0, r7
 8011870:	6013      	str	r3, [r2, #0]
 8011872:	b004      	add	sp, #16
 8011874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011878:	1c59      	adds	r1, r3, #1
 801187a:	9103      	str	r1, [sp, #12]
 801187c:	701a      	strb	r2, [r3, #0]
 801187e:	e7f0      	b.n	8011862 <__cvt+0xa6>

08011880 <__exponent>:
 8011880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011882:	4603      	mov	r3, r0
 8011884:	2900      	cmp	r1, #0
 8011886:	bfb8      	it	lt
 8011888:	4249      	neglt	r1, r1
 801188a:	f803 2b02 	strb.w	r2, [r3], #2
 801188e:	bfb4      	ite	lt
 8011890:	222d      	movlt	r2, #45	; 0x2d
 8011892:	222b      	movge	r2, #43	; 0x2b
 8011894:	2909      	cmp	r1, #9
 8011896:	7042      	strb	r2, [r0, #1]
 8011898:	dd2a      	ble.n	80118f0 <__exponent+0x70>
 801189a:	f10d 0207 	add.w	r2, sp, #7
 801189e:	4617      	mov	r7, r2
 80118a0:	260a      	movs	r6, #10
 80118a2:	4694      	mov	ip, r2
 80118a4:	fb91 f5f6 	sdiv	r5, r1, r6
 80118a8:	fb06 1415 	mls	r4, r6, r5, r1
 80118ac:	3430      	adds	r4, #48	; 0x30
 80118ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80118b2:	460c      	mov	r4, r1
 80118b4:	2c63      	cmp	r4, #99	; 0x63
 80118b6:	f102 32ff 	add.w	r2, r2, #4294967295
 80118ba:	4629      	mov	r1, r5
 80118bc:	dcf1      	bgt.n	80118a2 <__exponent+0x22>
 80118be:	3130      	adds	r1, #48	; 0x30
 80118c0:	f1ac 0402 	sub.w	r4, ip, #2
 80118c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80118c8:	1c41      	adds	r1, r0, #1
 80118ca:	4622      	mov	r2, r4
 80118cc:	42ba      	cmp	r2, r7
 80118ce:	d30a      	bcc.n	80118e6 <__exponent+0x66>
 80118d0:	f10d 0209 	add.w	r2, sp, #9
 80118d4:	eba2 020c 	sub.w	r2, r2, ip
 80118d8:	42bc      	cmp	r4, r7
 80118da:	bf88      	it	hi
 80118dc:	2200      	movhi	r2, #0
 80118de:	4413      	add	r3, r2
 80118e0:	1a18      	subs	r0, r3, r0
 80118e2:	b003      	add	sp, #12
 80118e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80118ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 80118ee:	e7ed      	b.n	80118cc <__exponent+0x4c>
 80118f0:	2330      	movs	r3, #48	; 0x30
 80118f2:	3130      	adds	r1, #48	; 0x30
 80118f4:	7083      	strb	r3, [r0, #2]
 80118f6:	70c1      	strb	r1, [r0, #3]
 80118f8:	1d03      	adds	r3, r0, #4
 80118fa:	e7f1      	b.n	80118e0 <__exponent+0x60>

080118fc <_printf_float>:
 80118fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011900:	ed2d 8b02 	vpush	{d8}
 8011904:	b08d      	sub	sp, #52	; 0x34
 8011906:	460c      	mov	r4, r1
 8011908:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801190c:	4616      	mov	r6, r2
 801190e:	461f      	mov	r7, r3
 8011910:	4605      	mov	r5, r0
 8011912:	f000 ff37 	bl	8012784 <_localeconv_r>
 8011916:	f8d0 a000 	ldr.w	sl, [r0]
 801191a:	4650      	mov	r0, sl
 801191c:	f7ee fcd0 	bl	80002c0 <strlen>
 8011920:	2300      	movs	r3, #0
 8011922:	930a      	str	r3, [sp, #40]	; 0x28
 8011924:	6823      	ldr	r3, [r4, #0]
 8011926:	9305      	str	r3, [sp, #20]
 8011928:	f8d8 3000 	ldr.w	r3, [r8]
 801192c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011930:	3307      	adds	r3, #7
 8011932:	f023 0307 	bic.w	r3, r3, #7
 8011936:	f103 0208 	add.w	r2, r3, #8
 801193a:	f8c8 2000 	str.w	r2, [r8]
 801193e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011942:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011946:	9307      	str	r3, [sp, #28]
 8011948:	f8cd 8018 	str.w	r8, [sp, #24]
 801194c:	ee08 0a10 	vmov	s16, r0
 8011950:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8011954:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011958:	4b9e      	ldr	r3, [pc, #632]	; (8011bd4 <_printf_float+0x2d8>)
 801195a:	f04f 32ff 	mov.w	r2, #4294967295
 801195e:	f7ef f90d 	bl	8000b7c <__aeabi_dcmpun>
 8011962:	bb88      	cbnz	r0, 80119c8 <_printf_float+0xcc>
 8011964:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011968:	4b9a      	ldr	r3, [pc, #616]	; (8011bd4 <_printf_float+0x2d8>)
 801196a:	f04f 32ff 	mov.w	r2, #4294967295
 801196e:	f7ef f8e7 	bl	8000b40 <__aeabi_dcmple>
 8011972:	bb48      	cbnz	r0, 80119c8 <_printf_float+0xcc>
 8011974:	2200      	movs	r2, #0
 8011976:	2300      	movs	r3, #0
 8011978:	4640      	mov	r0, r8
 801197a:	4649      	mov	r1, r9
 801197c:	f7ef f8d6 	bl	8000b2c <__aeabi_dcmplt>
 8011980:	b110      	cbz	r0, 8011988 <_printf_float+0x8c>
 8011982:	232d      	movs	r3, #45	; 0x2d
 8011984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011988:	4a93      	ldr	r2, [pc, #588]	; (8011bd8 <_printf_float+0x2dc>)
 801198a:	4b94      	ldr	r3, [pc, #592]	; (8011bdc <_printf_float+0x2e0>)
 801198c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011990:	bf94      	ite	ls
 8011992:	4690      	movls	r8, r2
 8011994:	4698      	movhi	r8, r3
 8011996:	2303      	movs	r3, #3
 8011998:	6123      	str	r3, [r4, #16]
 801199a:	9b05      	ldr	r3, [sp, #20]
 801199c:	f023 0304 	bic.w	r3, r3, #4
 80119a0:	6023      	str	r3, [r4, #0]
 80119a2:	f04f 0900 	mov.w	r9, #0
 80119a6:	9700      	str	r7, [sp, #0]
 80119a8:	4633      	mov	r3, r6
 80119aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80119ac:	4621      	mov	r1, r4
 80119ae:	4628      	mov	r0, r5
 80119b0:	f000 f9da 	bl	8011d68 <_printf_common>
 80119b4:	3001      	adds	r0, #1
 80119b6:	f040 8090 	bne.w	8011ada <_printf_float+0x1de>
 80119ba:	f04f 30ff 	mov.w	r0, #4294967295
 80119be:	b00d      	add	sp, #52	; 0x34
 80119c0:	ecbd 8b02 	vpop	{d8}
 80119c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119c8:	4642      	mov	r2, r8
 80119ca:	464b      	mov	r3, r9
 80119cc:	4640      	mov	r0, r8
 80119ce:	4649      	mov	r1, r9
 80119d0:	f7ef f8d4 	bl	8000b7c <__aeabi_dcmpun>
 80119d4:	b140      	cbz	r0, 80119e8 <_printf_float+0xec>
 80119d6:	464b      	mov	r3, r9
 80119d8:	2b00      	cmp	r3, #0
 80119da:	bfbc      	itt	lt
 80119dc:	232d      	movlt	r3, #45	; 0x2d
 80119de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80119e2:	4a7f      	ldr	r2, [pc, #508]	; (8011be0 <_printf_float+0x2e4>)
 80119e4:	4b7f      	ldr	r3, [pc, #508]	; (8011be4 <_printf_float+0x2e8>)
 80119e6:	e7d1      	b.n	801198c <_printf_float+0x90>
 80119e8:	6863      	ldr	r3, [r4, #4]
 80119ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80119ee:	9206      	str	r2, [sp, #24]
 80119f0:	1c5a      	adds	r2, r3, #1
 80119f2:	d13f      	bne.n	8011a74 <_printf_float+0x178>
 80119f4:	2306      	movs	r3, #6
 80119f6:	6063      	str	r3, [r4, #4]
 80119f8:	9b05      	ldr	r3, [sp, #20]
 80119fa:	6861      	ldr	r1, [r4, #4]
 80119fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011a00:	2300      	movs	r3, #0
 8011a02:	9303      	str	r3, [sp, #12]
 8011a04:	ab0a      	add	r3, sp, #40	; 0x28
 8011a06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011a0a:	ab09      	add	r3, sp, #36	; 0x24
 8011a0c:	ec49 8b10 	vmov	d0, r8, r9
 8011a10:	9300      	str	r3, [sp, #0]
 8011a12:	6022      	str	r2, [r4, #0]
 8011a14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011a18:	4628      	mov	r0, r5
 8011a1a:	f7ff fecf 	bl	80117bc <__cvt>
 8011a1e:	9b06      	ldr	r3, [sp, #24]
 8011a20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a22:	2b47      	cmp	r3, #71	; 0x47
 8011a24:	4680      	mov	r8, r0
 8011a26:	d108      	bne.n	8011a3a <_printf_float+0x13e>
 8011a28:	1cc8      	adds	r0, r1, #3
 8011a2a:	db02      	blt.n	8011a32 <_printf_float+0x136>
 8011a2c:	6863      	ldr	r3, [r4, #4]
 8011a2e:	4299      	cmp	r1, r3
 8011a30:	dd41      	ble.n	8011ab6 <_printf_float+0x1ba>
 8011a32:	f1ab 0302 	sub.w	r3, fp, #2
 8011a36:	fa5f fb83 	uxtb.w	fp, r3
 8011a3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011a3e:	d820      	bhi.n	8011a82 <_printf_float+0x186>
 8011a40:	3901      	subs	r1, #1
 8011a42:	465a      	mov	r2, fp
 8011a44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011a48:	9109      	str	r1, [sp, #36]	; 0x24
 8011a4a:	f7ff ff19 	bl	8011880 <__exponent>
 8011a4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a50:	1813      	adds	r3, r2, r0
 8011a52:	2a01      	cmp	r2, #1
 8011a54:	4681      	mov	r9, r0
 8011a56:	6123      	str	r3, [r4, #16]
 8011a58:	dc02      	bgt.n	8011a60 <_printf_float+0x164>
 8011a5a:	6822      	ldr	r2, [r4, #0]
 8011a5c:	07d2      	lsls	r2, r2, #31
 8011a5e:	d501      	bpl.n	8011a64 <_printf_float+0x168>
 8011a60:	3301      	adds	r3, #1
 8011a62:	6123      	str	r3, [r4, #16]
 8011a64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d09c      	beq.n	80119a6 <_printf_float+0xaa>
 8011a6c:	232d      	movs	r3, #45	; 0x2d
 8011a6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a72:	e798      	b.n	80119a6 <_printf_float+0xaa>
 8011a74:	9a06      	ldr	r2, [sp, #24]
 8011a76:	2a47      	cmp	r2, #71	; 0x47
 8011a78:	d1be      	bne.n	80119f8 <_printf_float+0xfc>
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d1bc      	bne.n	80119f8 <_printf_float+0xfc>
 8011a7e:	2301      	movs	r3, #1
 8011a80:	e7b9      	b.n	80119f6 <_printf_float+0xfa>
 8011a82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011a86:	d118      	bne.n	8011aba <_printf_float+0x1be>
 8011a88:	2900      	cmp	r1, #0
 8011a8a:	6863      	ldr	r3, [r4, #4]
 8011a8c:	dd0b      	ble.n	8011aa6 <_printf_float+0x1aa>
 8011a8e:	6121      	str	r1, [r4, #16]
 8011a90:	b913      	cbnz	r3, 8011a98 <_printf_float+0x19c>
 8011a92:	6822      	ldr	r2, [r4, #0]
 8011a94:	07d0      	lsls	r0, r2, #31
 8011a96:	d502      	bpl.n	8011a9e <_printf_float+0x1a2>
 8011a98:	3301      	adds	r3, #1
 8011a9a:	440b      	add	r3, r1
 8011a9c:	6123      	str	r3, [r4, #16]
 8011a9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011aa0:	f04f 0900 	mov.w	r9, #0
 8011aa4:	e7de      	b.n	8011a64 <_printf_float+0x168>
 8011aa6:	b913      	cbnz	r3, 8011aae <_printf_float+0x1b2>
 8011aa8:	6822      	ldr	r2, [r4, #0]
 8011aaa:	07d2      	lsls	r2, r2, #31
 8011aac:	d501      	bpl.n	8011ab2 <_printf_float+0x1b6>
 8011aae:	3302      	adds	r3, #2
 8011ab0:	e7f4      	b.n	8011a9c <_printf_float+0x1a0>
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	e7f2      	b.n	8011a9c <_printf_float+0x1a0>
 8011ab6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011abc:	4299      	cmp	r1, r3
 8011abe:	db05      	blt.n	8011acc <_printf_float+0x1d0>
 8011ac0:	6823      	ldr	r3, [r4, #0]
 8011ac2:	6121      	str	r1, [r4, #16]
 8011ac4:	07d8      	lsls	r0, r3, #31
 8011ac6:	d5ea      	bpl.n	8011a9e <_printf_float+0x1a2>
 8011ac8:	1c4b      	adds	r3, r1, #1
 8011aca:	e7e7      	b.n	8011a9c <_printf_float+0x1a0>
 8011acc:	2900      	cmp	r1, #0
 8011ace:	bfd4      	ite	le
 8011ad0:	f1c1 0202 	rsble	r2, r1, #2
 8011ad4:	2201      	movgt	r2, #1
 8011ad6:	4413      	add	r3, r2
 8011ad8:	e7e0      	b.n	8011a9c <_printf_float+0x1a0>
 8011ada:	6823      	ldr	r3, [r4, #0]
 8011adc:	055a      	lsls	r2, r3, #21
 8011ade:	d407      	bmi.n	8011af0 <_printf_float+0x1f4>
 8011ae0:	6923      	ldr	r3, [r4, #16]
 8011ae2:	4642      	mov	r2, r8
 8011ae4:	4631      	mov	r1, r6
 8011ae6:	4628      	mov	r0, r5
 8011ae8:	47b8      	blx	r7
 8011aea:	3001      	adds	r0, #1
 8011aec:	d12c      	bne.n	8011b48 <_printf_float+0x24c>
 8011aee:	e764      	b.n	80119ba <_printf_float+0xbe>
 8011af0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011af4:	f240 80e0 	bls.w	8011cb8 <_printf_float+0x3bc>
 8011af8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011afc:	2200      	movs	r2, #0
 8011afe:	2300      	movs	r3, #0
 8011b00:	f7ef f80a 	bl	8000b18 <__aeabi_dcmpeq>
 8011b04:	2800      	cmp	r0, #0
 8011b06:	d034      	beq.n	8011b72 <_printf_float+0x276>
 8011b08:	4a37      	ldr	r2, [pc, #220]	; (8011be8 <_printf_float+0x2ec>)
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	4631      	mov	r1, r6
 8011b0e:	4628      	mov	r0, r5
 8011b10:	47b8      	blx	r7
 8011b12:	3001      	adds	r0, #1
 8011b14:	f43f af51 	beq.w	80119ba <_printf_float+0xbe>
 8011b18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	db02      	blt.n	8011b26 <_printf_float+0x22a>
 8011b20:	6823      	ldr	r3, [r4, #0]
 8011b22:	07d8      	lsls	r0, r3, #31
 8011b24:	d510      	bpl.n	8011b48 <_printf_float+0x24c>
 8011b26:	ee18 3a10 	vmov	r3, s16
 8011b2a:	4652      	mov	r2, sl
 8011b2c:	4631      	mov	r1, r6
 8011b2e:	4628      	mov	r0, r5
 8011b30:	47b8      	blx	r7
 8011b32:	3001      	adds	r0, #1
 8011b34:	f43f af41 	beq.w	80119ba <_printf_float+0xbe>
 8011b38:	f04f 0800 	mov.w	r8, #0
 8011b3c:	f104 091a 	add.w	r9, r4, #26
 8011b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b42:	3b01      	subs	r3, #1
 8011b44:	4543      	cmp	r3, r8
 8011b46:	dc09      	bgt.n	8011b5c <_printf_float+0x260>
 8011b48:	6823      	ldr	r3, [r4, #0]
 8011b4a:	079b      	lsls	r3, r3, #30
 8011b4c:	f100 8107 	bmi.w	8011d5e <_printf_float+0x462>
 8011b50:	68e0      	ldr	r0, [r4, #12]
 8011b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b54:	4298      	cmp	r0, r3
 8011b56:	bfb8      	it	lt
 8011b58:	4618      	movlt	r0, r3
 8011b5a:	e730      	b.n	80119be <_printf_float+0xc2>
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	464a      	mov	r2, r9
 8011b60:	4631      	mov	r1, r6
 8011b62:	4628      	mov	r0, r5
 8011b64:	47b8      	blx	r7
 8011b66:	3001      	adds	r0, #1
 8011b68:	f43f af27 	beq.w	80119ba <_printf_float+0xbe>
 8011b6c:	f108 0801 	add.w	r8, r8, #1
 8011b70:	e7e6      	b.n	8011b40 <_printf_float+0x244>
 8011b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	dc39      	bgt.n	8011bec <_printf_float+0x2f0>
 8011b78:	4a1b      	ldr	r2, [pc, #108]	; (8011be8 <_printf_float+0x2ec>)
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	4631      	mov	r1, r6
 8011b7e:	4628      	mov	r0, r5
 8011b80:	47b8      	blx	r7
 8011b82:	3001      	adds	r0, #1
 8011b84:	f43f af19 	beq.w	80119ba <_printf_float+0xbe>
 8011b88:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011b8c:	4313      	orrs	r3, r2
 8011b8e:	d102      	bne.n	8011b96 <_printf_float+0x29a>
 8011b90:	6823      	ldr	r3, [r4, #0]
 8011b92:	07d9      	lsls	r1, r3, #31
 8011b94:	d5d8      	bpl.n	8011b48 <_printf_float+0x24c>
 8011b96:	ee18 3a10 	vmov	r3, s16
 8011b9a:	4652      	mov	r2, sl
 8011b9c:	4631      	mov	r1, r6
 8011b9e:	4628      	mov	r0, r5
 8011ba0:	47b8      	blx	r7
 8011ba2:	3001      	adds	r0, #1
 8011ba4:	f43f af09 	beq.w	80119ba <_printf_float+0xbe>
 8011ba8:	f04f 0900 	mov.w	r9, #0
 8011bac:	f104 0a1a 	add.w	sl, r4, #26
 8011bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bb2:	425b      	negs	r3, r3
 8011bb4:	454b      	cmp	r3, r9
 8011bb6:	dc01      	bgt.n	8011bbc <_printf_float+0x2c0>
 8011bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bba:	e792      	b.n	8011ae2 <_printf_float+0x1e6>
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	4652      	mov	r2, sl
 8011bc0:	4631      	mov	r1, r6
 8011bc2:	4628      	mov	r0, r5
 8011bc4:	47b8      	blx	r7
 8011bc6:	3001      	adds	r0, #1
 8011bc8:	f43f aef7 	beq.w	80119ba <_printf_float+0xbe>
 8011bcc:	f109 0901 	add.w	r9, r9, #1
 8011bd0:	e7ee      	b.n	8011bb0 <_printf_float+0x2b4>
 8011bd2:	bf00      	nop
 8011bd4:	7fefffff 	.word	0x7fefffff
 8011bd8:	08017fb0 	.word	0x08017fb0
 8011bdc:	08017fb4 	.word	0x08017fb4
 8011be0:	08017fb8 	.word	0x08017fb8
 8011be4:	08017fbc 	.word	0x08017fbc
 8011be8:	08018348 	.word	0x08018348
 8011bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011bee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011bf0:	429a      	cmp	r2, r3
 8011bf2:	bfa8      	it	ge
 8011bf4:	461a      	movge	r2, r3
 8011bf6:	2a00      	cmp	r2, #0
 8011bf8:	4691      	mov	r9, r2
 8011bfa:	dc37      	bgt.n	8011c6c <_printf_float+0x370>
 8011bfc:	f04f 0b00 	mov.w	fp, #0
 8011c00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011c04:	f104 021a 	add.w	r2, r4, #26
 8011c08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011c0a:	9305      	str	r3, [sp, #20]
 8011c0c:	eba3 0309 	sub.w	r3, r3, r9
 8011c10:	455b      	cmp	r3, fp
 8011c12:	dc33      	bgt.n	8011c7c <_printf_float+0x380>
 8011c14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	db3b      	blt.n	8011c94 <_printf_float+0x398>
 8011c1c:	6823      	ldr	r3, [r4, #0]
 8011c1e:	07da      	lsls	r2, r3, #31
 8011c20:	d438      	bmi.n	8011c94 <_printf_float+0x398>
 8011c22:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011c26:	eba2 0903 	sub.w	r9, r2, r3
 8011c2a:	9b05      	ldr	r3, [sp, #20]
 8011c2c:	1ad2      	subs	r2, r2, r3
 8011c2e:	4591      	cmp	r9, r2
 8011c30:	bfa8      	it	ge
 8011c32:	4691      	movge	r9, r2
 8011c34:	f1b9 0f00 	cmp.w	r9, #0
 8011c38:	dc35      	bgt.n	8011ca6 <_printf_float+0x3aa>
 8011c3a:	f04f 0800 	mov.w	r8, #0
 8011c3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011c42:	f104 0a1a 	add.w	sl, r4, #26
 8011c46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c4a:	1a9b      	subs	r3, r3, r2
 8011c4c:	eba3 0309 	sub.w	r3, r3, r9
 8011c50:	4543      	cmp	r3, r8
 8011c52:	f77f af79 	ble.w	8011b48 <_printf_float+0x24c>
 8011c56:	2301      	movs	r3, #1
 8011c58:	4652      	mov	r2, sl
 8011c5a:	4631      	mov	r1, r6
 8011c5c:	4628      	mov	r0, r5
 8011c5e:	47b8      	blx	r7
 8011c60:	3001      	adds	r0, #1
 8011c62:	f43f aeaa 	beq.w	80119ba <_printf_float+0xbe>
 8011c66:	f108 0801 	add.w	r8, r8, #1
 8011c6a:	e7ec      	b.n	8011c46 <_printf_float+0x34a>
 8011c6c:	4613      	mov	r3, r2
 8011c6e:	4631      	mov	r1, r6
 8011c70:	4642      	mov	r2, r8
 8011c72:	4628      	mov	r0, r5
 8011c74:	47b8      	blx	r7
 8011c76:	3001      	adds	r0, #1
 8011c78:	d1c0      	bne.n	8011bfc <_printf_float+0x300>
 8011c7a:	e69e      	b.n	80119ba <_printf_float+0xbe>
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	4631      	mov	r1, r6
 8011c80:	4628      	mov	r0, r5
 8011c82:	9205      	str	r2, [sp, #20]
 8011c84:	47b8      	blx	r7
 8011c86:	3001      	adds	r0, #1
 8011c88:	f43f ae97 	beq.w	80119ba <_printf_float+0xbe>
 8011c8c:	9a05      	ldr	r2, [sp, #20]
 8011c8e:	f10b 0b01 	add.w	fp, fp, #1
 8011c92:	e7b9      	b.n	8011c08 <_printf_float+0x30c>
 8011c94:	ee18 3a10 	vmov	r3, s16
 8011c98:	4652      	mov	r2, sl
 8011c9a:	4631      	mov	r1, r6
 8011c9c:	4628      	mov	r0, r5
 8011c9e:	47b8      	blx	r7
 8011ca0:	3001      	adds	r0, #1
 8011ca2:	d1be      	bne.n	8011c22 <_printf_float+0x326>
 8011ca4:	e689      	b.n	80119ba <_printf_float+0xbe>
 8011ca6:	9a05      	ldr	r2, [sp, #20]
 8011ca8:	464b      	mov	r3, r9
 8011caa:	4442      	add	r2, r8
 8011cac:	4631      	mov	r1, r6
 8011cae:	4628      	mov	r0, r5
 8011cb0:	47b8      	blx	r7
 8011cb2:	3001      	adds	r0, #1
 8011cb4:	d1c1      	bne.n	8011c3a <_printf_float+0x33e>
 8011cb6:	e680      	b.n	80119ba <_printf_float+0xbe>
 8011cb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cba:	2a01      	cmp	r2, #1
 8011cbc:	dc01      	bgt.n	8011cc2 <_printf_float+0x3c6>
 8011cbe:	07db      	lsls	r3, r3, #31
 8011cc0:	d53a      	bpl.n	8011d38 <_printf_float+0x43c>
 8011cc2:	2301      	movs	r3, #1
 8011cc4:	4642      	mov	r2, r8
 8011cc6:	4631      	mov	r1, r6
 8011cc8:	4628      	mov	r0, r5
 8011cca:	47b8      	blx	r7
 8011ccc:	3001      	adds	r0, #1
 8011cce:	f43f ae74 	beq.w	80119ba <_printf_float+0xbe>
 8011cd2:	ee18 3a10 	vmov	r3, s16
 8011cd6:	4652      	mov	r2, sl
 8011cd8:	4631      	mov	r1, r6
 8011cda:	4628      	mov	r0, r5
 8011cdc:	47b8      	blx	r7
 8011cde:	3001      	adds	r0, #1
 8011ce0:	f43f ae6b 	beq.w	80119ba <_printf_float+0xbe>
 8011ce4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011ce8:	2200      	movs	r2, #0
 8011cea:	2300      	movs	r3, #0
 8011cec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8011cf0:	f7ee ff12 	bl	8000b18 <__aeabi_dcmpeq>
 8011cf4:	b9d8      	cbnz	r0, 8011d2e <_printf_float+0x432>
 8011cf6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011cfa:	f108 0201 	add.w	r2, r8, #1
 8011cfe:	4631      	mov	r1, r6
 8011d00:	4628      	mov	r0, r5
 8011d02:	47b8      	blx	r7
 8011d04:	3001      	adds	r0, #1
 8011d06:	d10e      	bne.n	8011d26 <_printf_float+0x42a>
 8011d08:	e657      	b.n	80119ba <_printf_float+0xbe>
 8011d0a:	2301      	movs	r3, #1
 8011d0c:	4652      	mov	r2, sl
 8011d0e:	4631      	mov	r1, r6
 8011d10:	4628      	mov	r0, r5
 8011d12:	47b8      	blx	r7
 8011d14:	3001      	adds	r0, #1
 8011d16:	f43f ae50 	beq.w	80119ba <_printf_float+0xbe>
 8011d1a:	f108 0801 	add.w	r8, r8, #1
 8011d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d20:	3b01      	subs	r3, #1
 8011d22:	4543      	cmp	r3, r8
 8011d24:	dcf1      	bgt.n	8011d0a <_printf_float+0x40e>
 8011d26:	464b      	mov	r3, r9
 8011d28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011d2c:	e6da      	b.n	8011ae4 <_printf_float+0x1e8>
 8011d2e:	f04f 0800 	mov.w	r8, #0
 8011d32:	f104 0a1a 	add.w	sl, r4, #26
 8011d36:	e7f2      	b.n	8011d1e <_printf_float+0x422>
 8011d38:	2301      	movs	r3, #1
 8011d3a:	4642      	mov	r2, r8
 8011d3c:	e7df      	b.n	8011cfe <_printf_float+0x402>
 8011d3e:	2301      	movs	r3, #1
 8011d40:	464a      	mov	r2, r9
 8011d42:	4631      	mov	r1, r6
 8011d44:	4628      	mov	r0, r5
 8011d46:	47b8      	blx	r7
 8011d48:	3001      	adds	r0, #1
 8011d4a:	f43f ae36 	beq.w	80119ba <_printf_float+0xbe>
 8011d4e:	f108 0801 	add.w	r8, r8, #1
 8011d52:	68e3      	ldr	r3, [r4, #12]
 8011d54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011d56:	1a5b      	subs	r3, r3, r1
 8011d58:	4543      	cmp	r3, r8
 8011d5a:	dcf0      	bgt.n	8011d3e <_printf_float+0x442>
 8011d5c:	e6f8      	b.n	8011b50 <_printf_float+0x254>
 8011d5e:	f04f 0800 	mov.w	r8, #0
 8011d62:	f104 0919 	add.w	r9, r4, #25
 8011d66:	e7f4      	b.n	8011d52 <_printf_float+0x456>

08011d68 <_printf_common>:
 8011d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d6c:	4616      	mov	r6, r2
 8011d6e:	4699      	mov	r9, r3
 8011d70:	688a      	ldr	r2, [r1, #8]
 8011d72:	690b      	ldr	r3, [r1, #16]
 8011d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011d78:	4293      	cmp	r3, r2
 8011d7a:	bfb8      	it	lt
 8011d7c:	4613      	movlt	r3, r2
 8011d7e:	6033      	str	r3, [r6, #0]
 8011d80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011d84:	4607      	mov	r7, r0
 8011d86:	460c      	mov	r4, r1
 8011d88:	b10a      	cbz	r2, 8011d8e <_printf_common+0x26>
 8011d8a:	3301      	adds	r3, #1
 8011d8c:	6033      	str	r3, [r6, #0]
 8011d8e:	6823      	ldr	r3, [r4, #0]
 8011d90:	0699      	lsls	r1, r3, #26
 8011d92:	bf42      	ittt	mi
 8011d94:	6833      	ldrmi	r3, [r6, #0]
 8011d96:	3302      	addmi	r3, #2
 8011d98:	6033      	strmi	r3, [r6, #0]
 8011d9a:	6825      	ldr	r5, [r4, #0]
 8011d9c:	f015 0506 	ands.w	r5, r5, #6
 8011da0:	d106      	bne.n	8011db0 <_printf_common+0x48>
 8011da2:	f104 0a19 	add.w	sl, r4, #25
 8011da6:	68e3      	ldr	r3, [r4, #12]
 8011da8:	6832      	ldr	r2, [r6, #0]
 8011daa:	1a9b      	subs	r3, r3, r2
 8011dac:	42ab      	cmp	r3, r5
 8011dae:	dc26      	bgt.n	8011dfe <_printf_common+0x96>
 8011db0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011db4:	1e13      	subs	r3, r2, #0
 8011db6:	6822      	ldr	r2, [r4, #0]
 8011db8:	bf18      	it	ne
 8011dba:	2301      	movne	r3, #1
 8011dbc:	0692      	lsls	r2, r2, #26
 8011dbe:	d42b      	bmi.n	8011e18 <_printf_common+0xb0>
 8011dc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011dc4:	4649      	mov	r1, r9
 8011dc6:	4638      	mov	r0, r7
 8011dc8:	47c0      	blx	r8
 8011dca:	3001      	adds	r0, #1
 8011dcc:	d01e      	beq.n	8011e0c <_printf_common+0xa4>
 8011dce:	6823      	ldr	r3, [r4, #0]
 8011dd0:	6922      	ldr	r2, [r4, #16]
 8011dd2:	f003 0306 	and.w	r3, r3, #6
 8011dd6:	2b04      	cmp	r3, #4
 8011dd8:	bf02      	ittt	eq
 8011dda:	68e5      	ldreq	r5, [r4, #12]
 8011ddc:	6833      	ldreq	r3, [r6, #0]
 8011dde:	1aed      	subeq	r5, r5, r3
 8011de0:	68a3      	ldr	r3, [r4, #8]
 8011de2:	bf0c      	ite	eq
 8011de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011de8:	2500      	movne	r5, #0
 8011dea:	4293      	cmp	r3, r2
 8011dec:	bfc4      	itt	gt
 8011dee:	1a9b      	subgt	r3, r3, r2
 8011df0:	18ed      	addgt	r5, r5, r3
 8011df2:	2600      	movs	r6, #0
 8011df4:	341a      	adds	r4, #26
 8011df6:	42b5      	cmp	r5, r6
 8011df8:	d11a      	bne.n	8011e30 <_printf_common+0xc8>
 8011dfa:	2000      	movs	r0, #0
 8011dfc:	e008      	b.n	8011e10 <_printf_common+0xa8>
 8011dfe:	2301      	movs	r3, #1
 8011e00:	4652      	mov	r2, sl
 8011e02:	4649      	mov	r1, r9
 8011e04:	4638      	mov	r0, r7
 8011e06:	47c0      	blx	r8
 8011e08:	3001      	adds	r0, #1
 8011e0a:	d103      	bne.n	8011e14 <_printf_common+0xac>
 8011e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e14:	3501      	adds	r5, #1
 8011e16:	e7c6      	b.n	8011da6 <_printf_common+0x3e>
 8011e18:	18e1      	adds	r1, r4, r3
 8011e1a:	1c5a      	adds	r2, r3, #1
 8011e1c:	2030      	movs	r0, #48	; 0x30
 8011e1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011e22:	4422      	add	r2, r4
 8011e24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011e28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011e2c:	3302      	adds	r3, #2
 8011e2e:	e7c7      	b.n	8011dc0 <_printf_common+0x58>
 8011e30:	2301      	movs	r3, #1
 8011e32:	4622      	mov	r2, r4
 8011e34:	4649      	mov	r1, r9
 8011e36:	4638      	mov	r0, r7
 8011e38:	47c0      	blx	r8
 8011e3a:	3001      	adds	r0, #1
 8011e3c:	d0e6      	beq.n	8011e0c <_printf_common+0xa4>
 8011e3e:	3601      	adds	r6, #1
 8011e40:	e7d9      	b.n	8011df6 <_printf_common+0x8e>
	...

08011e44 <_printf_i>:
 8011e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011e48:	7e0f      	ldrb	r7, [r1, #24]
 8011e4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011e4c:	2f78      	cmp	r7, #120	; 0x78
 8011e4e:	4691      	mov	r9, r2
 8011e50:	4680      	mov	r8, r0
 8011e52:	460c      	mov	r4, r1
 8011e54:	469a      	mov	sl, r3
 8011e56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011e5a:	d807      	bhi.n	8011e6c <_printf_i+0x28>
 8011e5c:	2f62      	cmp	r7, #98	; 0x62
 8011e5e:	d80a      	bhi.n	8011e76 <_printf_i+0x32>
 8011e60:	2f00      	cmp	r7, #0
 8011e62:	f000 80d4 	beq.w	801200e <_printf_i+0x1ca>
 8011e66:	2f58      	cmp	r7, #88	; 0x58
 8011e68:	f000 80c0 	beq.w	8011fec <_printf_i+0x1a8>
 8011e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011e70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011e74:	e03a      	b.n	8011eec <_printf_i+0xa8>
 8011e76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011e7a:	2b15      	cmp	r3, #21
 8011e7c:	d8f6      	bhi.n	8011e6c <_printf_i+0x28>
 8011e7e:	a101      	add	r1, pc, #4	; (adr r1, 8011e84 <_printf_i+0x40>)
 8011e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011e84:	08011edd 	.word	0x08011edd
 8011e88:	08011ef1 	.word	0x08011ef1
 8011e8c:	08011e6d 	.word	0x08011e6d
 8011e90:	08011e6d 	.word	0x08011e6d
 8011e94:	08011e6d 	.word	0x08011e6d
 8011e98:	08011e6d 	.word	0x08011e6d
 8011e9c:	08011ef1 	.word	0x08011ef1
 8011ea0:	08011e6d 	.word	0x08011e6d
 8011ea4:	08011e6d 	.word	0x08011e6d
 8011ea8:	08011e6d 	.word	0x08011e6d
 8011eac:	08011e6d 	.word	0x08011e6d
 8011eb0:	08011ff5 	.word	0x08011ff5
 8011eb4:	08011f1d 	.word	0x08011f1d
 8011eb8:	08011faf 	.word	0x08011faf
 8011ebc:	08011e6d 	.word	0x08011e6d
 8011ec0:	08011e6d 	.word	0x08011e6d
 8011ec4:	08012017 	.word	0x08012017
 8011ec8:	08011e6d 	.word	0x08011e6d
 8011ecc:	08011f1d 	.word	0x08011f1d
 8011ed0:	08011e6d 	.word	0x08011e6d
 8011ed4:	08011e6d 	.word	0x08011e6d
 8011ed8:	08011fb7 	.word	0x08011fb7
 8011edc:	682b      	ldr	r3, [r5, #0]
 8011ede:	1d1a      	adds	r2, r3, #4
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	602a      	str	r2, [r5, #0]
 8011ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011eec:	2301      	movs	r3, #1
 8011eee:	e09f      	b.n	8012030 <_printf_i+0x1ec>
 8011ef0:	6820      	ldr	r0, [r4, #0]
 8011ef2:	682b      	ldr	r3, [r5, #0]
 8011ef4:	0607      	lsls	r7, r0, #24
 8011ef6:	f103 0104 	add.w	r1, r3, #4
 8011efa:	6029      	str	r1, [r5, #0]
 8011efc:	d501      	bpl.n	8011f02 <_printf_i+0xbe>
 8011efe:	681e      	ldr	r6, [r3, #0]
 8011f00:	e003      	b.n	8011f0a <_printf_i+0xc6>
 8011f02:	0646      	lsls	r6, r0, #25
 8011f04:	d5fb      	bpl.n	8011efe <_printf_i+0xba>
 8011f06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011f0a:	2e00      	cmp	r6, #0
 8011f0c:	da03      	bge.n	8011f16 <_printf_i+0xd2>
 8011f0e:	232d      	movs	r3, #45	; 0x2d
 8011f10:	4276      	negs	r6, r6
 8011f12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f16:	485a      	ldr	r0, [pc, #360]	; (8012080 <_printf_i+0x23c>)
 8011f18:	230a      	movs	r3, #10
 8011f1a:	e012      	b.n	8011f42 <_printf_i+0xfe>
 8011f1c:	682b      	ldr	r3, [r5, #0]
 8011f1e:	6820      	ldr	r0, [r4, #0]
 8011f20:	1d19      	adds	r1, r3, #4
 8011f22:	6029      	str	r1, [r5, #0]
 8011f24:	0605      	lsls	r5, r0, #24
 8011f26:	d501      	bpl.n	8011f2c <_printf_i+0xe8>
 8011f28:	681e      	ldr	r6, [r3, #0]
 8011f2a:	e002      	b.n	8011f32 <_printf_i+0xee>
 8011f2c:	0641      	lsls	r1, r0, #25
 8011f2e:	d5fb      	bpl.n	8011f28 <_printf_i+0xe4>
 8011f30:	881e      	ldrh	r6, [r3, #0]
 8011f32:	4853      	ldr	r0, [pc, #332]	; (8012080 <_printf_i+0x23c>)
 8011f34:	2f6f      	cmp	r7, #111	; 0x6f
 8011f36:	bf0c      	ite	eq
 8011f38:	2308      	moveq	r3, #8
 8011f3a:	230a      	movne	r3, #10
 8011f3c:	2100      	movs	r1, #0
 8011f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011f42:	6865      	ldr	r5, [r4, #4]
 8011f44:	60a5      	str	r5, [r4, #8]
 8011f46:	2d00      	cmp	r5, #0
 8011f48:	bfa2      	ittt	ge
 8011f4a:	6821      	ldrge	r1, [r4, #0]
 8011f4c:	f021 0104 	bicge.w	r1, r1, #4
 8011f50:	6021      	strge	r1, [r4, #0]
 8011f52:	b90e      	cbnz	r6, 8011f58 <_printf_i+0x114>
 8011f54:	2d00      	cmp	r5, #0
 8011f56:	d04b      	beq.n	8011ff0 <_printf_i+0x1ac>
 8011f58:	4615      	mov	r5, r2
 8011f5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8011f5e:	fb03 6711 	mls	r7, r3, r1, r6
 8011f62:	5dc7      	ldrb	r7, [r0, r7]
 8011f64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011f68:	4637      	mov	r7, r6
 8011f6a:	42bb      	cmp	r3, r7
 8011f6c:	460e      	mov	r6, r1
 8011f6e:	d9f4      	bls.n	8011f5a <_printf_i+0x116>
 8011f70:	2b08      	cmp	r3, #8
 8011f72:	d10b      	bne.n	8011f8c <_printf_i+0x148>
 8011f74:	6823      	ldr	r3, [r4, #0]
 8011f76:	07de      	lsls	r6, r3, #31
 8011f78:	d508      	bpl.n	8011f8c <_printf_i+0x148>
 8011f7a:	6923      	ldr	r3, [r4, #16]
 8011f7c:	6861      	ldr	r1, [r4, #4]
 8011f7e:	4299      	cmp	r1, r3
 8011f80:	bfde      	ittt	le
 8011f82:	2330      	movle	r3, #48	; 0x30
 8011f84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011f88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011f8c:	1b52      	subs	r2, r2, r5
 8011f8e:	6122      	str	r2, [r4, #16]
 8011f90:	f8cd a000 	str.w	sl, [sp]
 8011f94:	464b      	mov	r3, r9
 8011f96:	aa03      	add	r2, sp, #12
 8011f98:	4621      	mov	r1, r4
 8011f9a:	4640      	mov	r0, r8
 8011f9c:	f7ff fee4 	bl	8011d68 <_printf_common>
 8011fa0:	3001      	adds	r0, #1
 8011fa2:	d14a      	bne.n	801203a <_printf_i+0x1f6>
 8011fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8011fa8:	b004      	add	sp, #16
 8011faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fae:	6823      	ldr	r3, [r4, #0]
 8011fb0:	f043 0320 	orr.w	r3, r3, #32
 8011fb4:	6023      	str	r3, [r4, #0]
 8011fb6:	4833      	ldr	r0, [pc, #204]	; (8012084 <_printf_i+0x240>)
 8011fb8:	2778      	movs	r7, #120	; 0x78
 8011fba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011fbe:	6823      	ldr	r3, [r4, #0]
 8011fc0:	6829      	ldr	r1, [r5, #0]
 8011fc2:	061f      	lsls	r7, r3, #24
 8011fc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8011fc8:	d402      	bmi.n	8011fd0 <_printf_i+0x18c>
 8011fca:	065f      	lsls	r7, r3, #25
 8011fcc:	bf48      	it	mi
 8011fce:	b2b6      	uxthmi	r6, r6
 8011fd0:	07df      	lsls	r7, r3, #31
 8011fd2:	bf48      	it	mi
 8011fd4:	f043 0320 	orrmi.w	r3, r3, #32
 8011fd8:	6029      	str	r1, [r5, #0]
 8011fda:	bf48      	it	mi
 8011fdc:	6023      	strmi	r3, [r4, #0]
 8011fde:	b91e      	cbnz	r6, 8011fe8 <_printf_i+0x1a4>
 8011fe0:	6823      	ldr	r3, [r4, #0]
 8011fe2:	f023 0320 	bic.w	r3, r3, #32
 8011fe6:	6023      	str	r3, [r4, #0]
 8011fe8:	2310      	movs	r3, #16
 8011fea:	e7a7      	b.n	8011f3c <_printf_i+0xf8>
 8011fec:	4824      	ldr	r0, [pc, #144]	; (8012080 <_printf_i+0x23c>)
 8011fee:	e7e4      	b.n	8011fba <_printf_i+0x176>
 8011ff0:	4615      	mov	r5, r2
 8011ff2:	e7bd      	b.n	8011f70 <_printf_i+0x12c>
 8011ff4:	682b      	ldr	r3, [r5, #0]
 8011ff6:	6826      	ldr	r6, [r4, #0]
 8011ff8:	6961      	ldr	r1, [r4, #20]
 8011ffa:	1d18      	adds	r0, r3, #4
 8011ffc:	6028      	str	r0, [r5, #0]
 8011ffe:	0635      	lsls	r5, r6, #24
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	d501      	bpl.n	8012008 <_printf_i+0x1c4>
 8012004:	6019      	str	r1, [r3, #0]
 8012006:	e002      	b.n	801200e <_printf_i+0x1ca>
 8012008:	0670      	lsls	r0, r6, #25
 801200a:	d5fb      	bpl.n	8012004 <_printf_i+0x1c0>
 801200c:	8019      	strh	r1, [r3, #0]
 801200e:	2300      	movs	r3, #0
 8012010:	6123      	str	r3, [r4, #16]
 8012012:	4615      	mov	r5, r2
 8012014:	e7bc      	b.n	8011f90 <_printf_i+0x14c>
 8012016:	682b      	ldr	r3, [r5, #0]
 8012018:	1d1a      	adds	r2, r3, #4
 801201a:	602a      	str	r2, [r5, #0]
 801201c:	681d      	ldr	r5, [r3, #0]
 801201e:	6862      	ldr	r2, [r4, #4]
 8012020:	2100      	movs	r1, #0
 8012022:	4628      	mov	r0, r5
 8012024:	f7ee f8fc 	bl	8000220 <memchr>
 8012028:	b108      	cbz	r0, 801202e <_printf_i+0x1ea>
 801202a:	1b40      	subs	r0, r0, r5
 801202c:	6060      	str	r0, [r4, #4]
 801202e:	6863      	ldr	r3, [r4, #4]
 8012030:	6123      	str	r3, [r4, #16]
 8012032:	2300      	movs	r3, #0
 8012034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012038:	e7aa      	b.n	8011f90 <_printf_i+0x14c>
 801203a:	6923      	ldr	r3, [r4, #16]
 801203c:	462a      	mov	r2, r5
 801203e:	4649      	mov	r1, r9
 8012040:	4640      	mov	r0, r8
 8012042:	47d0      	blx	sl
 8012044:	3001      	adds	r0, #1
 8012046:	d0ad      	beq.n	8011fa4 <_printf_i+0x160>
 8012048:	6823      	ldr	r3, [r4, #0]
 801204a:	079b      	lsls	r3, r3, #30
 801204c:	d413      	bmi.n	8012076 <_printf_i+0x232>
 801204e:	68e0      	ldr	r0, [r4, #12]
 8012050:	9b03      	ldr	r3, [sp, #12]
 8012052:	4298      	cmp	r0, r3
 8012054:	bfb8      	it	lt
 8012056:	4618      	movlt	r0, r3
 8012058:	e7a6      	b.n	8011fa8 <_printf_i+0x164>
 801205a:	2301      	movs	r3, #1
 801205c:	4632      	mov	r2, r6
 801205e:	4649      	mov	r1, r9
 8012060:	4640      	mov	r0, r8
 8012062:	47d0      	blx	sl
 8012064:	3001      	adds	r0, #1
 8012066:	d09d      	beq.n	8011fa4 <_printf_i+0x160>
 8012068:	3501      	adds	r5, #1
 801206a:	68e3      	ldr	r3, [r4, #12]
 801206c:	9903      	ldr	r1, [sp, #12]
 801206e:	1a5b      	subs	r3, r3, r1
 8012070:	42ab      	cmp	r3, r5
 8012072:	dcf2      	bgt.n	801205a <_printf_i+0x216>
 8012074:	e7eb      	b.n	801204e <_printf_i+0x20a>
 8012076:	2500      	movs	r5, #0
 8012078:	f104 0619 	add.w	r6, r4, #25
 801207c:	e7f5      	b.n	801206a <_printf_i+0x226>
 801207e:	bf00      	nop
 8012080:	08017fc0 	.word	0x08017fc0
 8012084:	08017fd1 	.word	0x08017fd1

08012088 <_scanf_float>:
 8012088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801208c:	b087      	sub	sp, #28
 801208e:	4617      	mov	r7, r2
 8012090:	9303      	str	r3, [sp, #12]
 8012092:	688b      	ldr	r3, [r1, #8]
 8012094:	1e5a      	subs	r2, r3, #1
 8012096:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801209a:	bf83      	ittte	hi
 801209c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80120a0:	195b      	addhi	r3, r3, r5
 80120a2:	9302      	strhi	r3, [sp, #8]
 80120a4:	2300      	movls	r3, #0
 80120a6:	bf86      	itte	hi
 80120a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80120ac:	608b      	strhi	r3, [r1, #8]
 80120ae:	9302      	strls	r3, [sp, #8]
 80120b0:	680b      	ldr	r3, [r1, #0]
 80120b2:	468b      	mov	fp, r1
 80120b4:	2500      	movs	r5, #0
 80120b6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80120ba:	f84b 3b1c 	str.w	r3, [fp], #28
 80120be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80120c2:	4680      	mov	r8, r0
 80120c4:	460c      	mov	r4, r1
 80120c6:	465e      	mov	r6, fp
 80120c8:	46aa      	mov	sl, r5
 80120ca:	46a9      	mov	r9, r5
 80120cc:	9501      	str	r5, [sp, #4]
 80120ce:	68a2      	ldr	r2, [r4, #8]
 80120d0:	b152      	cbz	r2, 80120e8 <_scanf_float+0x60>
 80120d2:	683b      	ldr	r3, [r7, #0]
 80120d4:	781b      	ldrb	r3, [r3, #0]
 80120d6:	2b4e      	cmp	r3, #78	; 0x4e
 80120d8:	d864      	bhi.n	80121a4 <_scanf_float+0x11c>
 80120da:	2b40      	cmp	r3, #64	; 0x40
 80120dc:	d83c      	bhi.n	8012158 <_scanf_float+0xd0>
 80120de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80120e2:	b2c8      	uxtb	r0, r1
 80120e4:	280e      	cmp	r0, #14
 80120e6:	d93a      	bls.n	801215e <_scanf_float+0xd6>
 80120e8:	f1b9 0f00 	cmp.w	r9, #0
 80120ec:	d003      	beq.n	80120f6 <_scanf_float+0x6e>
 80120ee:	6823      	ldr	r3, [r4, #0]
 80120f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80120f4:	6023      	str	r3, [r4, #0]
 80120f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80120fa:	f1ba 0f01 	cmp.w	sl, #1
 80120fe:	f200 8113 	bhi.w	8012328 <_scanf_float+0x2a0>
 8012102:	455e      	cmp	r6, fp
 8012104:	f200 8105 	bhi.w	8012312 <_scanf_float+0x28a>
 8012108:	2501      	movs	r5, #1
 801210a:	4628      	mov	r0, r5
 801210c:	b007      	add	sp, #28
 801210e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012112:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012116:	2a0d      	cmp	r2, #13
 8012118:	d8e6      	bhi.n	80120e8 <_scanf_float+0x60>
 801211a:	a101      	add	r1, pc, #4	; (adr r1, 8012120 <_scanf_float+0x98>)
 801211c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012120:	0801225f 	.word	0x0801225f
 8012124:	080120e9 	.word	0x080120e9
 8012128:	080120e9 	.word	0x080120e9
 801212c:	080120e9 	.word	0x080120e9
 8012130:	080122bf 	.word	0x080122bf
 8012134:	08012297 	.word	0x08012297
 8012138:	080120e9 	.word	0x080120e9
 801213c:	080120e9 	.word	0x080120e9
 8012140:	0801226d 	.word	0x0801226d
 8012144:	080120e9 	.word	0x080120e9
 8012148:	080120e9 	.word	0x080120e9
 801214c:	080120e9 	.word	0x080120e9
 8012150:	080120e9 	.word	0x080120e9
 8012154:	08012225 	.word	0x08012225
 8012158:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801215c:	e7db      	b.n	8012116 <_scanf_float+0x8e>
 801215e:	290e      	cmp	r1, #14
 8012160:	d8c2      	bhi.n	80120e8 <_scanf_float+0x60>
 8012162:	a001      	add	r0, pc, #4	; (adr r0, 8012168 <_scanf_float+0xe0>)
 8012164:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012168:	08012217 	.word	0x08012217
 801216c:	080120e9 	.word	0x080120e9
 8012170:	08012217 	.word	0x08012217
 8012174:	080122ab 	.word	0x080122ab
 8012178:	080120e9 	.word	0x080120e9
 801217c:	080121c5 	.word	0x080121c5
 8012180:	08012201 	.word	0x08012201
 8012184:	08012201 	.word	0x08012201
 8012188:	08012201 	.word	0x08012201
 801218c:	08012201 	.word	0x08012201
 8012190:	08012201 	.word	0x08012201
 8012194:	08012201 	.word	0x08012201
 8012198:	08012201 	.word	0x08012201
 801219c:	08012201 	.word	0x08012201
 80121a0:	08012201 	.word	0x08012201
 80121a4:	2b6e      	cmp	r3, #110	; 0x6e
 80121a6:	d809      	bhi.n	80121bc <_scanf_float+0x134>
 80121a8:	2b60      	cmp	r3, #96	; 0x60
 80121aa:	d8b2      	bhi.n	8012112 <_scanf_float+0x8a>
 80121ac:	2b54      	cmp	r3, #84	; 0x54
 80121ae:	d077      	beq.n	80122a0 <_scanf_float+0x218>
 80121b0:	2b59      	cmp	r3, #89	; 0x59
 80121b2:	d199      	bne.n	80120e8 <_scanf_float+0x60>
 80121b4:	2d07      	cmp	r5, #7
 80121b6:	d197      	bne.n	80120e8 <_scanf_float+0x60>
 80121b8:	2508      	movs	r5, #8
 80121ba:	e029      	b.n	8012210 <_scanf_float+0x188>
 80121bc:	2b74      	cmp	r3, #116	; 0x74
 80121be:	d06f      	beq.n	80122a0 <_scanf_float+0x218>
 80121c0:	2b79      	cmp	r3, #121	; 0x79
 80121c2:	e7f6      	b.n	80121b2 <_scanf_float+0x12a>
 80121c4:	6821      	ldr	r1, [r4, #0]
 80121c6:	05c8      	lsls	r0, r1, #23
 80121c8:	d51a      	bpl.n	8012200 <_scanf_float+0x178>
 80121ca:	9b02      	ldr	r3, [sp, #8]
 80121cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80121d0:	6021      	str	r1, [r4, #0]
 80121d2:	f109 0901 	add.w	r9, r9, #1
 80121d6:	b11b      	cbz	r3, 80121e0 <_scanf_float+0x158>
 80121d8:	3b01      	subs	r3, #1
 80121da:	3201      	adds	r2, #1
 80121dc:	9302      	str	r3, [sp, #8]
 80121de:	60a2      	str	r2, [r4, #8]
 80121e0:	68a3      	ldr	r3, [r4, #8]
 80121e2:	3b01      	subs	r3, #1
 80121e4:	60a3      	str	r3, [r4, #8]
 80121e6:	6923      	ldr	r3, [r4, #16]
 80121e8:	3301      	adds	r3, #1
 80121ea:	6123      	str	r3, [r4, #16]
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	3b01      	subs	r3, #1
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	607b      	str	r3, [r7, #4]
 80121f4:	f340 8084 	ble.w	8012300 <_scanf_float+0x278>
 80121f8:	683b      	ldr	r3, [r7, #0]
 80121fa:	3301      	adds	r3, #1
 80121fc:	603b      	str	r3, [r7, #0]
 80121fe:	e766      	b.n	80120ce <_scanf_float+0x46>
 8012200:	eb1a 0f05 	cmn.w	sl, r5
 8012204:	f47f af70 	bne.w	80120e8 <_scanf_float+0x60>
 8012208:	6822      	ldr	r2, [r4, #0]
 801220a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801220e:	6022      	str	r2, [r4, #0]
 8012210:	f806 3b01 	strb.w	r3, [r6], #1
 8012214:	e7e4      	b.n	80121e0 <_scanf_float+0x158>
 8012216:	6822      	ldr	r2, [r4, #0]
 8012218:	0610      	lsls	r0, r2, #24
 801221a:	f57f af65 	bpl.w	80120e8 <_scanf_float+0x60>
 801221e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012222:	e7f4      	b.n	801220e <_scanf_float+0x186>
 8012224:	f1ba 0f00 	cmp.w	sl, #0
 8012228:	d10e      	bne.n	8012248 <_scanf_float+0x1c0>
 801222a:	f1b9 0f00 	cmp.w	r9, #0
 801222e:	d10e      	bne.n	801224e <_scanf_float+0x1c6>
 8012230:	6822      	ldr	r2, [r4, #0]
 8012232:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012236:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801223a:	d108      	bne.n	801224e <_scanf_float+0x1c6>
 801223c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012240:	6022      	str	r2, [r4, #0]
 8012242:	f04f 0a01 	mov.w	sl, #1
 8012246:	e7e3      	b.n	8012210 <_scanf_float+0x188>
 8012248:	f1ba 0f02 	cmp.w	sl, #2
 801224c:	d055      	beq.n	80122fa <_scanf_float+0x272>
 801224e:	2d01      	cmp	r5, #1
 8012250:	d002      	beq.n	8012258 <_scanf_float+0x1d0>
 8012252:	2d04      	cmp	r5, #4
 8012254:	f47f af48 	bne.w	80120e8 <_scanf_float+0x60>
 8012258:	3501      	adds	r5, #1
 801225a:	b2ed      	uxtb	r5, r5
 801225c:	e7d8      	b.n	8012210 <_scanf_float+0x188>
 801225e:	f1ba 0f01 	cmp.w	sl, #1
 8012262:	f47f af41 	bne.w	80120e8 <_scanf_float+0x60>
 8012266:	f04f 0a02 	mov.w	sl, #2
 801226a:	e7d1      	b.n	8012210 <_scanf_float+0x188>
 801226c:	b97d      	cbnz	r5, 801228e <_scanf_float+0x206>
 801226e:	f1b9 0f00 	cmp.w	r9, #0
 8012272:	f47f af3c 	bne.w	80120ee <_scanf_float+0x66>
 8012276:	6822      	ldr	r2, [r4, #0]
 8012278:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801227c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012280:	f47f af39 	bne.w	80120f6 <_scanf_float+0x6e>
 8012284:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012288:	6022      	str	r2, [r4, #0]
 801228a:	2501      	movs	r5, #1
 801228c:	e7c0      	b.n	8012210 <_scanf_float+0x188>
 801228e:	2d03      	cmp	r5, #3
 8012290:	d0e2      	beq.n	8012258 <_scanf_float+0x1d0>
 8012292:	2d05      	cmp	r5, #5
 8012294:	e7de      	b.n	8012254 <_scanf_float+0x1cc>
 8012296:	2d02      	cmp	r5, #2
 8012298:	f47f af26 	bne.w	80120e8 <_scanf_float+0x60>
 801229c:	2503      	movs	r5, #3
 801229e:	e7b7      	b.n	8012210 <_scanf_float+0x188>
 80122a0:	2d06      	cmp	r5, #6
 80122a2:	f47f af21 	bne.w	80120e8 <_scanf_float+0x60>
 80122a6:	2507      	movs	r5, #7
 80122a8:	e7b2      	b.n	8012210 <_scanf_float+0x188>
 80122aa:	6822      	ldr	r2, [r4, #0]
 80122ac:	0591      	lsls	r1, r2, #22
 80122ae:	f57f af1b 	bpl.w	80120e8 <_scanf_float+0x60>
 80122b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80122b6:	6022      	str	r2, [r4, #0]
 80122b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80122bc:	e7a8      	b.n	8012210 <_scanf_float+0x188>
 80122be:	6822      	ldr	r2, [r4, #0]
 80122c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80122c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80122c8:	d006      	beq.n	80122d8 <_scanf_float+0x250>
 80122ca:	0550      	lsls	r0, r2, #21
 80122cc:	f57f af0c 	bpl.w	80120e8 <_scanf_float+0x60>
 80122d0:	f1b9 0f00 	cmp.w	r9, #0
 80122d4:	f43f af0f 	beq.w	80120f6 <_scanf_float+0x6e>
 80122d8:	0591      	lsls	r1, r2, #22
 80122da:	bf58      	it	pl
 80122dc:	9901      	ldrpl	r1, [sp, #4]
 80122de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80122e2:	bf58      	it	pl
 80122e4:	eba9 0101 	subpl.w	r1, r9, r1
 80122e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80122ec:	bf58      	it	pl
 80122ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80122f2:	6022      	str	r2, [r4, #0]
 80122f4:	f04f 0900 	mov.w	r9, #0
 80122f8:	e78a      	b.n	8012210 <_scanf_float+0x188>
 80122fa:	f04f 0a03 	mov.w	sl, #3
 80122fe:	e787      	b.n	8012210 <_scanf_float+0x188>
 8012300:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012304:	4639      	mov	r1, r7
 8012306:	4640      	mov	r0, r8
 8012308:	4798      	blx	r3
 801230a:	2800      	cmp	r0, #0
 801230c:	f43f aedf 	beq.w	80120ce <_scanf_float+0x46>
 8012310:	e6ea      	b.n	80120e8 <_scanf_float+0x60>
 8012312:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012316:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801231a:	463a      	mov	r2, r7
 801231c:	4640      	mov	r0, r8
 801231e:	4798      	blx	r3
 8012320:	6923      	ldr	r3, [r4, #16]
 8012322:	3b01      	subs	r3, #1
 8012324:	6123      	str	r3, [r4, #16]
 8012326:	e6ec      	b.n	8012102 <_scanf_float+0x7a>
 8012328:	1e6b      	subs	r3, r5, #1
 801232a:	2b06      	cmp	r3, #6
 801232c:	d825      	bhi.n	801237a <_scanf_float+0x2f2>
 801232e:	2d02      	cmp	r5, #2
 8012330:	d836      	bhi.n	80123a0 <_scanf_float+0x318>
 8012332:	455e      	cmp	r6, fp
 8012334:	f67f aee8 	bls.w	8012108 <_scanf_float+0x80>
 8012338:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801233c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012340:	463a      	mov	r2, r7
 8012342:	4640      	mov	r0, r8
 8012344:	4798      	blx	r3
 8012346:	6923      	ldr	r3, [r4, #16]
 8012348:	3b01      	subs	r3, #1
 801234a:	6123      	str	r3, [r4, #16]
 801234c:	e7f1      	b.n	8012332 <_scanf_float+0x2aa>
 801234e:	9802      	ldr	r0, [sp, #8]
 8012350:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012354:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012358:	9002      	str	r0, [sp, #8]
 801235a:	463a      	mov	r2, r7
 801235c:	4640      	mov	r0, r8
 801235e:	4798      	blx	r3
 8012360:	6923      	ldr	r3, [r4, #16]
 8012362:	3b01      	subs	r3, #1
 8012364:	6123      	str	r3, [r4, #16]
 8012366:	f10a 3aff 	add.w	sl, sl, #4294967295
 801236a:	fa5f fa8a 	uxtb.w	sl, sl
 801236e:	f1ba 0f02 	cmp.w	sl, #2
 8012372:	d1ec      	bne.n	801234e <_scanf_float+0x2c6>
 8012374:	3d03      	subs	r5, #3
 8012376:	b2ed      	uxtb	r5, r5
 8012378:	1b76      	subs	r6, r6, r5
 801237a:	6823      	ldr	r3, [r4, #0]
 801237c:	05da      	lsls	r2, r3, #23
 801237e:	d52f      	bpl.n	80123e0 <_scanf_float+0x358>
 8012380:	055b      	lsls	r3, r3, #21
 8012382:	d510      	bpl.n	80123a6 <_scanf_float+0x31e>
 8012384:	455e      	cmp	r6, fp
 8012386:	f67f aebf 	bls.w	8012108 <_scanf_float+0x80>
 801238a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801238e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012392:	463a      	mov	r2, r7
 8012394:	4640      	mov	r0, r8
 8012396:	4798      	blx	r3
 8012398:	6923      	ldr	r3, [r4, #16]
 801239a:	3b01      	subs	r3, #1
 801239c:	6123      	str	r3, [r4, #16]
 801239e:	e7f1      	b.n	8012384 <_scanf_float+0x2fc>
 80123a0:	46aa      	mov	sl, r5
 80123a2:	9602      	str	r6, [sp, #8]
 80123a4:	e7df      	b.n	8012366 <_scanf_float+0x2de>
 80123a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80123aa:	6923      	ldr	r3, [r4, #16]
 80123ac:	2965      	cmp	r1, #101	; 0x65
 80123ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80123b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80123b6:	6123      	str	r3, [r4, #16]
 80123b8:	d00c      	beq.n	80123d4 <_scanf_float+0x34c>
 80123ba:	2945      	cmp	r1, #69	; 0x45
 80123bc:	d00a      	beq.n	80123d4 <_scanf_float+0x34c>
 80123be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80123c2:	463a      	mov	r2, r7
 80123c4:	4640      	mov	r0, r8
 80123c6:	4798      	blx	r3
 80123c8:	6923      	ldr	r3, [r4, #16]
 80123ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80123ce:	3b01      	subs	r3, #1
 80123d0:	1eb5      	subs	r5, r6, #2
 80123d2:	6123      	str	r3, [r4, #16]
 80123d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80123d8:	463a      	mov	r2, r7
 80123da:	4640      	mov	r0, r8
 80123dc:	4798      	blx	r3
 80123de:	462e      	mov	r6, r5
 80123e0:	6825      	ldr	r5, [r4, #0]
 80123e2:	f015 0510 	ands.w	r5, r5, #16
 80123e6:	d158      	bne.n	801249a <_scanf_float+0x412>
 80123e8:	7035      	strb	r5, [r6, #0]
 80123ea:	6823      	ldr	r3, [r4, #0]
 80123ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80123f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80123f4:	d11c      	bne.n	8012430 <_scanf_float+0x3a8>
 80123f6:	9b01      	ldr	r3, [sp, #4]
 80123f8:	454b      	cmp	r3, r9
 80123fa:	eba3 0209 	sub.w	r2, r3, r9
 80123fe:	d124      	bne.n	801244a <_scanf_float+0x3c2>
 8012400:	2200      	movs	r2, #0
 8012402:	4659      	mov	r1, fp
 8012404:	4640      	mov	r0, r8
 8012406:	f002 fcd3 	bl	8014db0 <_strtod_r>
 801240a:	9b03      	ldr	r3, [sp, #12]
 801240c:	6821      	ldr	r1, [r4, #0]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	f011 0f02 	tst.w	r1, #2
 8012414:	ec57 6b10 	vmov	r6, r7, d0
 8012418:	f103 0204 	add.w	r2, r3, #4
 801241c:	d020      	beq.n	8012460 <_scanf_float+0x3d8>
 801241e:	9903      	ldr	r1, [sp, #12]
 8012420:	600a      	str	r2, [r1, #0]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	e9c3 6700 	strd	r6, r7, [r3]
 8012428:	68e3      	ldr	r3, [r4, #12]
 801242a:	3301      	adds	r3, #1
 801242c:	60e3      	str	r3, [r4, #12]
 801242e:	e66c      	b.n	801210a <_scanf_float+0x82>
 8012430:	9b04      	ldr	r3, [sp, #16]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d0e4      	beq.n	8012400 <_scanf_float+0x378>
 8012436:	9905      	ldr	r1, [sp, #20]
 8012438:	230a      	movs	r3, #10
 801243a:	462a      	mov	r2, r5
 801243c:	3101      	adds	r1, #1
 801243e:	4640      	mov	r0, r8
 8012440:	f002 fd3e 	bl	8014ec0 <_strtol_r>
 8012444:	9b04      	ldr	r3, [sp, #16]
 8012446:	9e05      	ldr	r6, [sp, #20]
 8012448:	1ac2      	subs	r2, r0, r3
 801244a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801244e:	429e      	cmp	r6, r3
 8012450:	bf28      	it	cs
 8012452:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012456:	4912      	ldr	r1, [pc, #72]	; (80124a0 <_scanf_float+0x418>)
 8012458:	4630      	mov	r0, r6
 801245a:	f000 f8e7 	bl	801262c <siprintf>
 801245e:	e7cf      	b.n	8012400 <_scanf_float+0x378>
 8012460:	f011 0f04 	tst.w	r1, #4
 8012464:	9903      	ldr	r1, [sp, #12]
 8012466:	600a      	str	r2, [r1, #0]
 8012468:	d1db      	bne.n	8012422 <_scanf_float+0x39a>
 801246a:	f8d3 8000 	ldr.w	r8, [r3]
 801246e:	ee10 2a10 	vmov	r2, s0
 8012472:	ee10 0a10 	vmov	r0, s0
 8012476:	463b      	mov	r3, r7
 8012478:	4639      	mov	r1, r7
 801247a:	f7ee fb7f 	bl	8000b7c <__aeabi_dcmpun>
 801247e:	b128      	cbz	r0, 801248c <_scanf_float+0x404>
 8012480:	4808      	ldr	r0, [pc, #32]	; (80124a4 <_scanf_float+0x41c>)
 8012482:	f000 fa5b 	bl	801293c <nanf>
 8012486:	ed88 0a00 	vstr	s0, [r8]
 801248a:	e7cd      	b.n	8012428 <_scanf_float+0x3a0>
 801248c:	4630      	mov	r0, r6
 801248e:	4639      	mov	r1, r7
 8012490:	f7ee fbd2 	bl	8000c38 <__aeabi_d2f>
 8012494:	f8c8 0000 	str.w	r0, [r8]
 8012498:	e7c6      	b.n	8012428 <_scanf_float+0x3a0>
 801249a:	2500      	movs	r5, #0
 801249c:	e635      	b.n	801210a <_scanf_float+0x82>
 801249e:	bf00      	nop
 80124a0:	08017fe2 	.word	0x08017fe2
 80124a4:	08018390 	.word	0x08018390

080124a8 <std>:
 80124a8:	2300      	movs	r3, #0
 80124aa:	b510      	push	{r4, lr}
 80124ac:	4604      	mov	r4, r0
 80124ae:	e9c0 3300 	strd	r3, r3, [r0]
 80124b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80124b6:	6083      	str	r3, [r0, #8]
 80124b8:	8181      	strh	r1, [r0, #12]
 80124ba:	6643      	str	r3, [r0, #100]	; 0x64
 80124bc:	81c2      	strh	r2, [r0, #14]
 80124be:	6183      	str	r3, [r0, #24]
 80124c0:	4619      	mov	r1, r3
 80124c2:	2208      	movs	r2, #8
 80124c4:	305c      	adds	r0, #92	; 0x5c
 80124c6:	f000 f942 	bl	801274e <memset>
 80124ca:	4b0d      	ldr	r3, [pc, #52]	; (8012500 <std+0x58>)
 80124cc:	6263      	str	r3, [r4, #36]	; 0x24
 80124ce:	4b0d      	ldr	r3, [pc, #52]	; (8012504 <std+0x5c>)
 80124d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80124d2:	4b0d      	ldr	r3, [pc, #52]	; (8012508 <std+0x60>)
 80124d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80124d6:	4b0d      	ldr	r3, [pc, #52]	; (801250c <std+0x64>)
 80124d8:	6323      	str	r3, [r4, #48]	; 0x30
 80124da:	4b0d      	ldr	r3, [pc, #52]	; (8012510 <std+0x68>)
 80124dc:	6224      	str	r4, [r4, #32]
 80124de:	429c      	cmp	r4, r3
 80124e0:	d006      	beq.n	80124f0 <std+0x48>
 80124e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80124e6:	4294      	cmp	r4, r2
 80124e8:	d002      	beq.n	80124f0 <std+0x48>
 80124ea:	33d0      	adds	r3, #208	; 0xd0
 80124ec:	429c      	cmp	r4, r3
 80124ee:	d105      	bne.n	80124fc <std+0x54>
 80124f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80124f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124f8:	f000 ba0e 	b.w	8012918 <__retarget_lock_init_recursive>
 80124fc:	bd10      	pop	{r4, pc}
 80124fe:	bf00      	nop
 8012500:	080126c5 	.word	0x080126c5
 8012504:	080126eb 	.word	0x080126eb
 8012508:	08012723 	.word	0x08012723
 801250c:	08012747 	.word	0x08012747
 8012510:	20008ee0 	.word	0x20008ee0

08012514 <stdio_exit_handler>:
 8012514:	4a02      	ldr	r2, [pc, #8]	; (8012520 <stdio_exit_handler+0xc>)
 8012516:	4903      	ldr	r1, [pc, #12]	; (8012524 <stdio_exit_handler+0x10>)
 8012518:	4803      	ldr	r0, [pc, #12]	; (8012528 <stdio_exit_handler+0x14>)
 801251a:	f000 b869 	b.w	80125f0 <_fwalk_sglue>
 801251e:	bf00      	nop
 8012520:	20000018 	.word	0x20000018
 8012524:	080158c1 	.word	0x080158c1
 8012528:	20000024 	.word	0x20000024

0801252c <cleanup_stdio>:
 801252c:	6841      	ldr	r1, [r0, #4]
 801252e:	4b0c      	ldr	r3, [pc, #48]	; (8012560 <cleanup_stdio+0x34>)
 8012530:	4299      	cmp	r1, r3
 8012532:	b510      	push	{r4, lr}
 8012534:	4604      	mov	r4, r0
 8012536:	d001      	beq.n	801253c <cleanup_stdio+0x10>
 8012538:	f003 f9c2 	bl	80158c0 <_fflush_r>
 801253c:	68a1      	ldr	r1, [r4, #8]
 801253e:	4b09      	ldr	r3, [pc, #36]	; (8012564 <cleanup_stdio+0x38>)
 8012540:	4299      	cmp	r1, r3
 8012542:	d002      	beq.n	801254a <cleanup_stdio+0x1e>
 8012544:	4620      	mov	r0, r4
 8012546:	f003 f9bb 	bl	80158c0 <_fflush_r>
 801254a:	68e1      	ldr	r1, [r4, #12]
 801254c:	4b06      	ldr	r3, [pc, #24]	; (8012568 <cleanup_stdio+0x3c>)
 801254e:	4299      	cmp	r1, r3
 8012550:	d004      	beq.n	801255c <cleanup_stdio+0x30>
 8012552:	4620      	mov	r0, r4
 8012554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012558:	f003 b9b2 	b.w	80158c0 <_fflush_r>
 801255c:	bd10      	pop	{r4, pc}
 801255e:	bf00      	nop
 8012560:	20008ee0 	.word	0x20008ee0
 8012564:	20008f48 	.word	0x20008f48
 8012568:	20008fb0 	.word	0x20008fb0

0801256c <global_stdio_init.part.0>:
 801256c:	b510      	push	{r4, lr}
 801256e:	4b0b      	ldr	r3, [pc, #44]	; (801259c <global_stdio_init.part.0+0x30>)
 8012570:	4c0b      	ldr	r4, [pc, #44]	; (80125a0 <global_stdio_init.part.0+0x34>)
 8012572:	4a0c      	ldr	r2, [pc, #48]	; (80125a4 <global_stdio_init.part.0+0x38>)
 8012574:	601a      	str	r2, [r3, #0]
 8012576:	4620      	mov	r0, r4
 8012578:	2200      	movs	r2, #0
 801257a:	2104      	movs	r1, #4
 801257c:	f7ff ff94 	bl	80124a8 <std>
 8012580:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012584:	2201      	movs	r2, #1
 8012586:	2109      	movs	r1, #9
 8012588:	f7ff ff8e 	bl	80124a8 <std>
 801258c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012590:	2202      	movs	r2, #2
 8012592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012596:	2112      	movs	r1, #18
 8012598:	f7ff bf86 	b.w	80124a8 <std>
 801259c:	20009018 	.word	0x20009018
 80125a0:	20008ee0 	.word	0x20008ee0
 80125a4:	08012515 	.word	0x08012515

080125a8 <__sfp_lock_acquire>:
 80125a8:	4801      	ldr	r0, [pc, #4]	; (80125b0 <__sfp_lock_acquire+0x8>)
 80125aa:	f000 b9b6 	b.w	801291a <__retarget_lock_acquire_recursive>
 80125ae:	bf00      	nop
 80125b0:	20009021 	.word	0x20009021

080125b4 <__sfp_lock_release>:
 80125b4:	4801      	ldr	r0, [pc, #4]	; (80125bc <__sfp_lock_release+0x8>)
 80125b6:	f000 b9b1 	b.w	801291c <__retarget_lock_release_recursive>
 80125ba:	bf00      	nop
 80125bc:	20009021 	.word	0x20009021

080125c0 <__sinit>:
 80125c0:	b510      	push	{r4, lr}
 80125c2:	4604      	mov	r4, r0
 80125c4:	f7ff fff0 	bl	80125a8 <__sfp_lock_acquire>
 80125c8:	6a23      	ldr	r3, [r4, #32]
 80125ca:	b11b      	cbz	r3, 80125d4 <__sinit+0x14>
 80125cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125d0:	f7ff bff0 	b.w	80125b4 <__sfp_lock_release>
 80125d4:	4b04      	ldr	r3, [pc, #16]	; (80125e8 <__sinit+0x28>)
 80125d6:	6223      	str	r3, [r4, #32]
 80125d8:	4b04      	ldr	r3, [pc, #16]	; (80125ec <__sinit+0x2c>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d1f5      	bne.n	80125cc <__sinit+0xc>
 80125e0:	f7ff ffc4 	bl	801256c <global_stdio_init.part.0>
 80125e4:	e7f2      	b.n	80125cc <__sinit+0xc>
 80125e6:	bf00      	nop
 80125e8:	0801252d 	.word	0x0801252d
 80125ec:	20009018 	.word	0x20009018

080125f0 <_fwalk_sglue>:
 80125f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125f4:	4607      	mov	r7, r0
 80125f6:	4688      	mov	r8, r1
 80125f8:	4614      	mov	r4, r2
 80125fa:	2600      	movs	r6, #0
 80125fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012600:	f1b9 0901 	subs.w	r9, r9, #1
 8012604:	d505      	bpl.n	8012612 <_fwalk_sglue+0x22>
 8012606:	6824      	ldr	r4, [r4, #0]
 8012608:	2c00      	cmp	r4, #0
 801260a:	d1f7      	bne.n	80125fc <_fwalk_sglue+0xc>
 801260c:	4630      	mov	r0, r6
 801260e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012612:	89ab      	ldrh	r3, [r5, #12]
 8012614:	2b01      	cmp	r3, #1
 8012616:	d907      	bls.n	8012628 <_fwalk_sglue+0x38>
 8012618:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801261c:	3301      	adds	r3, #1
 801261e:	d003      	beq.n	8012628 <_fwalk_sglue+0x38>
 8012620:	4629      	mov	r1, r5
 8012622:	4638      	mov	r0, r7
 8012624:	47c0      	blx	r8
 8012626:	4306      	orrs	r6, r0
 8012628:	3568      	adds	r5, #104	; 0x68
 801262a:	e7e9      	b.n	8012600 <_fwalk_sglue+0x10>

0801262c <siprintf>:
 801262c:	b40e      	push	{r1, r2, r3}
 801262e:	b500      	push	{lr}
 8012630:	b09c      	sub	sp, #112	; 0x70
 8012632:	ab1d      	add	r3, sp, #116	; 0x74
 8012634:	9002      	str	r0, [sp, #8]
 8012636:	9006      	str	r0, [sp, #24]
 8012638:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801263c:	4809      	ldr	r0, [pc, #36]	; (8012664 <siprintf+0x38>)
 801263e:	9107      	str	r1, [sp, #28]
 8012640:	9104      	str	r1, [sp, #16]
 8012642:	4909      	ldr	r1, [pc, #36]	; (8012668 <siprintf+0x3c>)
 8012644:	f853 2b04 	ldr.w	r2, [r3], #4
 8012648:	9105      	str	r1, [sp, #20]
 801264a:	6800      	ldr	r0, [r0, #0]
 801264c:	9301      	str	r3, [sp, #4]
 801264e:	a902      	add	r1, sp, #8
 8012650:	f002 fc92 	bl	8014f78 <_svfiprintf_r>
 8012654:	9b02      	ldr	r3, [sp, #8]
 8012656:	2200      	movs	r2, #0
 8012658:	701a      	strb	r2, [r3, #0]
 801265a:	b01c      	add	sp, #112	; 0x70
 801265c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012660:	b003      	add	sp, #12
 8012662:	4770      	bx	lr
 8012664:	20000070 	.word	0x20000070
 8012668:	ffff0208 	.word	0xffff0208

0801266c <siscanf>:
 801266c:	b40e      	push	{r1, r2, r3}
 801266e:	b510      	push	{r4, lr}
 8012670:	b09f      	sub	sp, #124	; 0x7c
 8012672:	ac21      	add	r4, sp, #132	; 0x84
 8012674:	f44f 7101 	mov.w	r1, #516	; 0x204
 8012678:	f854 2b04 	ldr.w	r2, [r4], #4
 801267c:	9201      	str	r2, [sp, #4]
 801267e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8012682:	9004      	str	r0, [sp, #16]
 8012684:	9008      	str	r0, [sp, #32]
 8012686:	f7ed fe1b 	bl	80002c0 <strlen>
 801268a:	4b0c      	ldr	r3, [pc, #48]	; (80126bc <siscanf+0x50>)
 801268c:	9005      	str	r0, [sp, #20]
 801268e:	9009      	str	r0, [sp, #36]	; 0x24
 8012690:	930d      	str	r3, [sp, #52]	; 0x34
 8012692:	480b      	ldr	r0, [pc, #44]	; (80126c0 <siscanf+0x54>)
 8012694:	9a01      	ldr	r2, [sp, #4]
 8012696:	6800      	ldr	r0, [r0, #0]
 8012698:	9403      	str	r4, [sp, #12]
 801269a:	2300      	movs	r3, #0
 801269c:	9311      	str	r3, [sp, #68]	; 0x44
 801269e:	9316      	str	r3, [sp, #88]	; 0x58
 80126a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80126a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80126a8:	a904      	add	r1, sp, #16
 80126aa:	4623      	mov	r3, r4
 80126ac:	f002 fdbc 	bl	8015228 <__ssvfiscanf_r>
 80126b0:	b01f      	add	sp, #124	; 0x7c
 80126b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126b6:	b003      	add	sp, #12
 80126b8:	4770      	bx	lr
 80126ba:	bf00      	nop
 80126bc:	080126e7 	.word	0x080126e7
 80126c0:	20000070 	.word	0x20000070

080126c4 <__sread>:
 80126c4:	b510      	push	{r4, lr}
 80126c6:	460c      	mov	r4, r1
 80126c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126cc:	f000 f8d6 	bl	801287c <_read_r>
 80126d0:	2800      	cmp	r0, #0
 80126d2:	bfab      	itete	ge
 80126d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80126d6:	89a3      	ldrhlt	r3, [r4, #12]
 80126d8:	181b      	addge	r3, r3, r0
 80126da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80126de:	bfac      	ite	ge
 80126e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80126e2:	81a3      	strhlt	r3, [r4, #12]
 80126e4:	bd10      	pop	{r4, pc}

080126e6 <__seofread>:
 80126e6:	2000      	movs	r0, #0
 80126e8:	4770      	bx	lr

080126ea <__swrite>:
 80126ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126ee:	461f      	mov	r7, r3
 80126f0:	898b      	ldrh	r3, [r1, #12]
 80126f2:	05db      	lsls	r3, r3, #23
 80126f4:	4605      	mov	r5, r0
 80126f6:	460c      	mov	r4, r1
 80126f8:	4616      	mov	r6, r2
 80126fa:	d505      	bpl.n	8012708 <__swrite+0x1e>
 80126fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012700:	2302      	movs	r3, #2
 8012702:	2200      	movs	r2, #0
 8012704:	f000 f8a8 	bl	8012858 <_lseek_r>
 8012708:	89a3      	ldrh	r3, [r4, #12]
 801270a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801270e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012712:	81a3      	strh	r3, [r4, #12]
 8012714:	4632      	mov	r2, r6
 8012716:	463b      	mov	r3, r7
 8012718:	4628      	mov	r0, r5
 801271a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801271e:	f000 b8bf 	b.w	80128a0 <_write_r>

08012722 <__sseek>:
 8012722:	b510      	push	{r4, lr}
 8012724:	460c      	mov	r4, r1
 8012726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801272a:	f000 f895 	bl	8012858 <_lseek_r>
 801272e:	1c43      	adds	r3, r0, #1
 8012730:	89a3      	ldrh	r3, [r4, #12]
 8012732:	bf15      	itete	ne
 8012734:	6560      	strne	r0, [r4, #84]	; 0x54
 8012736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801273a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801273e:	81a3      	strheq	r3, [r4, #12]
 8012740:	bf18      	it	ne
 8012742:	81a3      	strhne	r3, [r4, #12]
 8012744:	bd10      	pop	{r4, pc}

08012746 <__sclose>:
 8012746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801274a:	f000 b81f 	b.w	801278c <_close_r>

0801274e <memset>:
 801274e:	4402      	add	r2, r0
 8012750:	4603      	mov	r3, r0
 8012752:	4293      	cmp	r3, r2
 8012754:	d100      	bne.n	8012758 <memset+0xa>
 8012756:	4770      	bx	lr
 8012758:	f803 1b01 	strb.w	r1, [r3], #1
 801275c:	e7f9      	b.n	8012752 <memset+0x4>

0801275e <strncmp>:
 801275e:	b510      	push	{r4, lr}
 8012760:	b16a      	cbz	r2, 801277e <strncmp+0x20>
 8012762:	3901      	subs	r1, #1
 8012764:	1884      	adds	r4, r0, r2
 8012766:	f810 2b01 	ldrb.w	r2, [r0], #1
 801276a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801276e:	429a      	cmp	r2, r3
 8012770:	d103      	bne.n	801277a <strncmp+0x1c>
 8012772:	42a0      	cmp	r0, r4
 8012774:	d001      	beq.n	801277a <strncmp+0x1c>
 8012776:	2a00      	cmp	r2, #0
 8012778:	d1f5      	bne.n	8012766 <strncmp+0x8>
 801277a:	1ad0      	subs	r0, r2, r3
 801277c:	bd10      	pop	{r4, pc}
 801277e:	4610      	mov	r0, r2
 8012780:	e7fc      	b.n	801277c <strncmp+0x1e>
	...

08012784 <_localeconv_r>:
 8012784:	4800      	ldr	r0, [pc, #0]	; (8012788 <_localeconv_r+0x4>)
 8012786:	4770      	bx	lr
 8012788:	20000164 	.word	0x20000164

0801278c <_close_r>:
 801278c:	b538      	push	{r3, r4, r5, lr}
 801278e:	4d06      	ldr	r5, [pc, #24]	; (80127a8 <_close_r+0x1c>)
 8012790:	2300      	movs	r3, #0
 8012792:	4604      	mov	r4, r0
 8012794:	4608      	mov	r0, r1
 8012796:	602b      	str	r3, [r5, #0]
 8012798:	f7f3 fa79 	bl	8005c8e <_close>
 801279c:	1c43      	adds	r3, r0, #1
 801279e:	d102      	bne.n	80127a6 <_close_r+0x1a>
 80127a0:	682b      	ldr	r3, [r5, #0]
 80127a2:	b103      	cbz	r3, 80127a6 <_close_r+0x1a>
 80127a4:	6023      	str	r3, [r4, #0]
 80127a6:	bd38      	pop	{r3, r4, r5, pc}
 80127a8:	2000901c 	.word	0x2000901c

080127ac <_reclaim_reent>:
 80127ac:	4b29      	ldr	r3, [pc, #164]	; (8012854 <_reclaim_reent+0xa8>)
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	4283      	cmp	r3, r0
 80127b2:	b570      	push	{r4, r5, r6, lr}
 80127b4:	4604      	mov	r4, r0
 80127b6:	d04b      	beq.n	8012850 <_reclaim_reent+0xa4>
 80127b8:	69c3      	ldr	r3, [r0, #28]
 80127ba:	b143      	cbz	r3, 80127ce <_reclaim_reent+0x22>
 80127bc:	68db      	ldr	r3, [r3, #12]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d144      	bne.n	801284c <_reclaim_reent+0xa0>
 80127c2:	69e3      	ldr	r3, [r4, #28]
 80127c4:	6819      	ldr	r1, [r3, #0]
 80127c6:	b111      	cbz	r1, 80127ce <_reclaim_reent+0x22>
 80127c8:	4620      	mov	r0, r4
 80127ca:	f000 ff37 	bl	801363c <_free_r>
 80127ce:	6961      	ldr	r1, [r4, #20]
 80127d0:	b111      	cbz	r1, 80127d8 <_reclaim_reent+0x2c>
 80127d2:	4620      	mov	r0, r4
 80127d4:	f000 ff32 	bl	801363c <_free_r>
 80127d8:	69e1      	ldr	r1, [r4, #28]
 80127da:	b111      	cbz	r1, 80127e2 <_reclaim_reent+0x36>
 80127dc:	4620      	mov	r0, r4
 80127de:	f000 ff2d 	bl	801363c <_free_r>
 80127e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80127e4:	b111      	cbz	r1, 80127ec <_reclaim_reent+0x40>
 80127e6:	4620      	mov	r0, r4
 80127e8:	f000 ff28 	bl	801363c <_free_r>
 80127ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80127ee:	b111      	cbz	r1, 80127f6 <_reclaim_reent+0x4a>
 80127f0:	4620      	mov	r0, r4
 80127f2:	f000 ff23 	bl	801363c <_free_r>
 80127f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80127f8:	b111      	cbz	r1, 8012800 <_reclaim_reent+0x54>
 80127fa:	4620      	mov	r0, r4
 80127fc:	f000 ff1e 	bl	801363c <_free_r>
 8012800:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012802:	b111      	cbz	r1, 801280a <_reclaim_reent+0x5e>
 8012804:	4620      	mov	r0, r4
 8012806:	f000 ff19 	bl	801363c <_free_r>
 801280a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801280c:	b111      	cbz	r1, 8012814 <_reclaim_reent+0x68>
 801280e:	4620      	mov	r0, r4
 8012810:	f000 ff14 	bl	801363c <_free_r>
 8012814:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012816:	b111      	cbz	r1, 801281e <_reclaim_reent+0x72>
 8012818:	4620      	mov	r0, r4
 801281a:	f000 ff0f 	bl	801363c <_free_r>
 801281e:	6a23      	ldr	r3, [r4, #32]
 8012820:	b1b3      	cbz	r3, 8012850 <_reclaim_reent+0xa4>
 8012822:	4620      	mov	r0, r4
 8012824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012828:	4718      	bx	r3
 801282a:	5949      	ldr	r1, [r1, r5]
 801282c:	b941      	cbnz	r1, 8012840 <_reclaim_reent+0x94>
 801282e:	3504      	adds	r5, #4
 8012830:	69e3      	ldr	r3, [r4, #28]
 8012832:	2d80      	cmp	r5, #128	; 0x80
 8012834:	68d9      	ldr	r1, [r3, #12]
 8012836:	d1f8      	bne.n	801282a <_reclaim_reent+0x7e>
 8012838:	4620      	mov	r0, r4
 801283a:	f000 feff 	bl	801363c <_free_r>
 801283e:	e7c0      	b.n	80127c2 <_reclaim_reent+0x16>
 8012840:	680e      	ldr	r6, [r1, #0]
 8012842:	4620      	mov	r0, r4
 8012844:	f000 fefa 	bl	801363c <_free_r>
 8012848:	4631      	mov	r1, r6
 801284a:	e7ef      	b.n	801282c <_reclaim_reent+0x80>
 801284c:	2500      	movs	r5, #0
 801284e:	e7ef      	b.n	8012830 <_reclaim_reent+0x84>
 8012850:	bd70      	pop	{r4, r5, r6, pc}
 8012852:	bf00      	nop
 8012854:	20000070 	.word	0x20000070

08012858 <_lseek_r>:
 8012858:	b538      	push	{r3, r4, r5, lr}
 801285a:	4d07      	ldr	r5, [pc, #28]	; (8012878 <_lseek_r+0x20>)
 801285c:	4604      	mov	r4, r0
 801285e:	4608      	mov	r0, r1
 8012860:	4611      	mov	r1, r2
 8012862:	2200      	movs	r2, #0
 8012864:	602a      	str	r2, [r5, #0]
 8012866:	461a      	mov	r2, r3
 8012868:	f7f3 fa38 	bl	8005cdc <_lseek>
 801286c:	1c43      	adds	r3, r0, #1
 801286e:	d102      	bne.n	8012876 <_lseek_r+0x1e>
 8012870:	682b      	ldr	r3, [r5, #0]
 8012872:	b103      	cbz	r3, 8012876 <_lseek_r+0x1e>
 8012874:	6023      	str	r3, [r4, #0]
 8012876:	bd38      	pop	{r3, r4, r5, pc}
 8012878:	2000901c 	.word	0x2000901c

0801287c <_read_r>:
 801287c:	b538      	push	{r3, r4, r5, lr}
 801287e:	4d07      	ldr	r5, [pc, #28]	; (801289c <_read_r+0x20>)
 8012880:	4604      	mov	r4, r0
 8012882:	4608      	mov	r0, r1
 8012884:	4611      	mov	r1, r2
 8012886:	2200      	movs	r2, #0
 8012888:	602a      	str	r2, [r5, #0]
 801288a:	461a      	mov	r2, r3
 801288c:	f7f3 f9c6 	bl	8005c1c <_read>
 8012890:	1c43      	adds	r3, r0, #1
 8012892:	d102      	bne.n	801289a <_read_r+0x1e>
 8012894:	682b      	ldr	r3, [r5, #0]
 8012896:	b103      	cbz	r3, 801289a <_read_r+0x1e>
 8012898:	6023      	str	r3, [r4, #0]
 801289a:	bd38      	pop	{r3, r4, r5, pc}
 801289c:	2000901c 	.word	0x2000901c

080128a0 <_write_r>:
 80128a0:	b538      	push	{r3, r4, r5, lr}
 80128a2:	4d07      	ldr	r5, [pc, #28]	; (80128c0 <_write_r+0x20>)
 80128a4:	4604      	mov	r4, r0
 80128a6:	4608      	mov	r0, r1
 80128a8:	4611      	mov	r1, r2
 80128aa:	2200      	movs	r2, #0
 80128ac:	602a      	str	r2, [r5, #0]
 80128ae:	461a      	mov	r2, r3
 80128b0:	f7f3 f9d1 	bl	8005c56 <_write>
 80128b4:	1c43      	adds	r3, r0, #1
 80128b6:	d102      	bne.n	80128be <_write_r+0x1e>
 80128b8:	682b      	ldr	r3, [r5, #0]
 80128ba:	b103      	cbz	r3, 80128be <_write_r+0x1e>
 80128bc:	6023      	str	r3, [r4, #0]
 80128be:	bd38      	pop	{r3, r4, r5, pc}
 80128c0:	2000901c 	.word	0x2000901c

080128c4 <__errno>:
 80128c4:	4b01      	ldr	r3, [pc, #4]	; (80128cc <__errno+0x8>)
 80128c6:	6818      	ldr	r0, [r3, #0]
 80128c8:	4770      	bx	lr
 80128ca:	bf00      	nop
 80128cc:	20000070 	.word	0x20000070

080128d0 <__libc_init_array>:
 80128d0:	b570      	push	{r4, r5, r6, lr}
 80128d2:	4d0d      	ldr	r5, [pc, #52]	; (8012908 <__libc_init_array+0x38>)
 80128d4:	4c0d      	ldr	r4, [pc, #52]	; (801290c <__libc_init_array+0x3c>)
 80128d6:	1b64      	subs	r4, r4, r5
 80128d8:	10a4      	asrs	r4, r4, #2
 80128da:	2600      	movs	r6, #0
 80128dc:	42a6      	cmp	r6, r4
 80128de:	d109      	bne.n	80128f4 <__libc_init_array+0x24>
 80128e0:	4d0b      	ldr	r5, [pc, #44]	; (8012910 <__libc_init_array+0x40>)
 80128e2:	4c0c      	ldr	r4, [pc, #48]	; (8012914 <__libc_init_array+0x44>)
 80128e4:	f005 f8ae 	bl	8017a44 <_init>
 80128e8:	1b64      	subs	r4, r4, r5
 80128ea:	10a4      	asrs	r4, r4, #2
 80128ec:	2600      	movs	r6, #0
 80128ee:	42a6      	cmp	r6, r4
 80128f0:	d105      	bne.n	80128fe <__libc_init_array+0x2e>
 80128f2:	bd70      	pop	{r4, r5, r6, pc}
 80128f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80128f8:	4798      	blx	r3
 80128fa:	3601      	adds	r6, #1
 80128fc:	e7ee      	b.n	80128dc <__libc_init_array+0xc>
 80128fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8012902:	4798      	blx	r3
 8012904:	3601      	adds	r6, #1
 8012906:	e7f2      	b.n	80128ee <__libc_init_array+0x1e>
 8012908:	08018468 	.word	0x08018468
 801290c:	08018468 	.word	0x08018468
 8012910:	08018468 	.word	0x08018468
 8012914:	0801846c 	.word	0x0801846c

08012918 <__retarget_lock_init_recursive>:
 8012918:	4770      	bx	lr

0801291a <__retarget_lock_acquire_recursive>:
 801291a:	4770      	bx	lr

0801291c <__retarget_lock_release_recursive>:
 801291c:	4770      	bx	lr

0801291e <memcpy>:
 801291e:	440a      	add	r2, r1
 8012920:	4291      	cmp	r1, r2
 8012922:	f100 33ff 	add.w	r3, r0, #4294967295
 8012926:	d100      	bne.n	801292a <memcpy+0xc>
 8012928:	4770      	bx	lr
 801292a:	b510      	push	{r4, lr}
 801292c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012930:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012934:	4291      	cmp	r1, r2
 8012936:	d1f9      	bne.n	801292c <memcpy+0xe>
 8012938:	bd10      	pop	{r4, pc}
	...

0801293c <nanf>:
 801293c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012944 <nanf+0x8>
 8012940:	4770      	bx	lr
 8012942:	bf00      	nop
 8012944:	7fc00000 	.word	0x7fc00000

08012948 <quorem>:
 8012948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801294c:	6903      	ldr	r3, [r0, #16]
 801294e:	690c      	ldr	r4, [r1, #16]
 8012950:	42a3      	cmp	r3, r4
 8012952:	4607      	mov	r7, r0
 8012954:	db7e      	blt.n	8012a54 <quorem+0x10c>
 8012956:	3c01      	subs	r4, #1
 8012958:	f101 0814 	add.w	r8, r1, #20
 801295c:	f100 0514 	add.w	r5, r0, #20
 8012960:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012964:	9301      	str	r3, [sp, #4]
 8012966:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801296a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801296e:	3301      	adds	r3, #1
 8012970:	429a      	cmp	r2, r3
 8012972:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012976:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801297a:	fbb2 f6f3 	udiv	r6, r2, r3
 801297e:	d331      	bcc.n	80129e4 <quorem+0x9c>
 8012980:	f04f 0e00 	mov.w	lr, #0
 8012984:	4640      	mov	r0, r8
 8012986:	46ac      	mov	ip, r5
 8012988:	46f2      	mov	sl, lr
 801298a:	f850 2b04 	ldr.w	r2, [r0], #4
 801298e:	b293      	uxth	r3, r2
 8012990:	fb06 e303 	mla	r3, r6, r3, lr
 8012994:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012998:	0c1a      	lsrs	r2, r3, #16
 801299a:	b29b      	uxth	r3, r3
 801299c:	ebaa 0303 	sub.w	r3, sl, r3
 80129a0:	f8dc a000 	ldr.w	sl, [ip]
 80129a4:	fa13 f38a 	uxtah	r3, r3, sl
 80129a8:	fb06 220e 	mla	r2, r6, lr, r2
 80129ac:	9300      	str	r3, [sp, #0]
 80129ae:	9b00      	ldr	r3, [sp, #0]
 80129b0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80129b4:	b292      	uxth	r2, r2
 80129b6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80129ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80129be:	f8bd 3000 	ldrh.w	r3, [sp]
 80129c2:	4581      	cmp	r9, r0
 80129c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80129c8:	f84c 3b04 	str.w	r3, [ip], #4
 80129cc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80129d0:	d2db      	bcs.n	801298a <quorem+0x42>
 80129d2:	f855 300b 	ldr.w	r3, [r5, fp]
 80129d6:	b92b      	cbnz	r3, 80129e4 <quorem+0x9c>
 80129d8:	9b01      	ldr	r3, [sp, #4]
 80129da:	3b04      	subs	r3, #4
 80129dc:	429d      	cmp	r5, r3
 80129de:	461a      	mov	r2, r3
 80129e0:	d32c      	bcc.n	8012a3c <quorem+0xf4>
 80129e2:	613c      	str	r4, [r7, #16]
 80129e4:	4638      	mov	r0, r7
 80129e6:	f001 f9ef 	bl	8013dc8 <__mcmp>
 80129ea:	2800      	cmp	r0, #0
 80129ec:	db22      	blt.n	8012a34 <quorem+0xec>
 80129ee:	3601      	adds	r6, #1
 80129f0:	4629      	mov	r1, r5
 80129f2:	2000      	movs	r0, #0
 80129f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80129f8:	f8d1 c000 	ldr.w	ip, [r1]
 80129fc:	b293      	uxth	r3, r2
 80129fe:	1ac3      	subs	r3, r0, r3
 8012a00:	0c12      	lsrs	r2, r2, #16
 8012a02:	fa13 f38c 	uxtah	r3, r3, ip
 8012a06:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012a0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012a0e:	b29b      	uxth	r3, r3
 8012a10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012a14:	45c1      	cmp	r9, r8
 8012a16:	f841 3b04 	str.w	r3, [r1], #4
 8012a1a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012a1e:	d2e9      	bcs.n	80129f4 <quorem+0xac>
 8012a20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012a24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012a28:	b922      	cbnz	r2, 8012a34 <quorem+0xec>
 8012a2a:	3b04      	subs	r3, #4
 8012a2c:	429d      	cmp	r5, r3
 8012a2e:	461a      	mov	r2, r3
 8012a30:	d30a      	bcc.n	8012a48 <quorem+0x100>
 8012a32:	613c      	str	r4, [r7, #16]
 8012a34:	4630      	mov	r0, r6
 8012a36:	b003      	add	sp, #12
 8012a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a3c:	6812      	ldr	r2, [r2, #0]
 8012a3e:	3b04      	subs	r3, #4
 8012a40:	2a00      	cmp	r2, #0
 8012a42:	d1ce      	bne.n	80129e2 <quorem+0x9a>
 8012a44:	3c01      	subs	r4, #1
 8012a46:	e7c9      	b.n	80129dc <quorem+0x94>
 8012a48:	6812      	ldr	r2, [r2, #0]
 8012a4a:	3b04      	subs	r3, #4
 8012a4c:	2a00      	cmp	r2, #0
 8012a4e:	d1f0      	bne.n	8012a32 <quorem+0xea>
 8012a50:	3c01      	subs	r4, #1
 8012a52:	e7eb      	b.n	8012a2c <quorem+0xe4>
 8012a54:	2000      	movs	r0, #0
 8012a56:	e7ee      	b.n	8012a36 <quorem+0xee>

08012a58 <_dtoa_r>:
 8012a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a5c:	ed2d 8b04 	vpush	{d8-d9}
 8012a60:	69c5      	ldr	r5, [r0, #28]
 8012a62:	b093      	sub	sp, #76	; 0x4c
 8012a64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012a68:	ec57 6b10 	vmov	r6, r7, d0
 8012a6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012a70:	9107      	str	r1, [sp, #28]
 8012a72:	4604      	mov	r4, r0
 8012a74:	920a      	str	r2, [sp, #40]	; 0x28
 8012a76:	930d      	str	r3, [sp, #52]	; 0x34
 8012a78:	b975      	cbnz	r5, 8012a98 <_dtoa_r+0x40>
 8012a7a:	2010      	movs	r0, #16
 8012a7c:	f000 fe2a 	bl	80136d4 <malloc>
 8012a80:	4602      	mov	r2, r0
 8012a82:	61e0      	str	r0, [r4, #28]
 8012a84:	b920      	cbnz	r0, 8012a90 <_dtoa_r+0x38>
 8012a86:	4bae      	ldr	r3, [pc, #696]	; (8012d40 <_dtoa_r+0x2e8>)
 8012a88:	21ef      	movs	r1, #239	; 0xef
 8012a8a:	48ae      	ldr	r0, [pc, #696]	; (8012d44 <_dtoa_r+0x2ec>)
 8012a8c:	f002 ffe8 	bl	8015a60 <__assert_func>
 8012a90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012a94:	6005      	str	r5, [r0, #0]
 8012a96:	60c5      	str	r5, [r0, #12]
 8012a98:	69e3      	ldr	r3, [r4, #28]
 8012a9a:	6819      	ldr	r1, [r3, #0]
 8012a9c:	b151      	cbz	r1, 8012ab4 <_dtoa_r+0x5c>
 8012a9e:	685a      	ldr	r2, [r3, #4]
 8012aa0:	604a      	str	r2, [r1, #4]
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	4093      	lsls	r3, r2
 8012aa6:	608b      	str	r3, [r1, #8]
 8012aa8:	4620      	mov	r0, r4
 8012aaa:	f000 ff07 	bl	80138bc <_Bfree>
 8012aae:	69e3      	ldr	r3, [r4, #28]
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	601a      	str	r2, [r3, #0]
 8012ab4:	1e3b      	subs	r3, r7, #0
 8012ab6:	bfbb      	ittet	lt
 8012ab8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012abc:	9303      	strlt	r3, [sp, #12]
 8012abe:	2300      	movge	r3, #0
 8012ac0:	2201      	movlt	r2, #1
 8012ac2:	bfac      	ite	ge
 8012ac4:	f8c8 3000 	strge.w	r3, [r8]
 8012ac8:	f8c8 2000 	strlt.w	r2, [r8]
 8012acc:	4b9e      	ldr	r3, [pc, #632]	; (8012d48 <_dtoa_r+0x2f0>)
 8012ace:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012ad2:	ea33 0308 	bics.w	r3, r3, r8
 8012ad6:	d11b      	bne.n	8012b10 <_dtoa_r+0xb8>
 8012ad8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012ada:	f242 730f 	movw	r3, #9999	; 0x270f
 8012ade:	6013      	str	r3, [r2, #0]
 8012ae0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8012ae4:	4333      	orrs	r3, r6
 8012ae6:	f000 8593 	beq.w	8013610 <_dtoa_r+0xbb8>
 8012aea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012aec:	b963      	cbnz	r3, 8012b08 <_dtoa_r+0xb0>
 8012aee:	4b97      	ldr	r3, [pc, #604]	; (8012d4c <_dtoa_r+0x2f4>)
 8012af0:	e027      	b.n	8012b42 <_dtoa_r+0xea>
 8012af2:	4b97      	ldr	r3, [pc, #604]	; (8012d50 <_dtoa_r+0x2f8>)
 8012af4:	9300      	str	r3, [sp, #0]
 8012af6:	3308      	adds	r3, #8
 8012af8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012afa:	6013      	str	r3, [r2, #0]
 8012afc:	9800      	ldr	r0, [sp, #0]
 8012afe:	b013      	add	sp, #76	; 0x4c
 8012b00:	ecbd 8b04 	vpop	{d8-d9}
 8012b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b08:	4b90      	ldr	r3, [pc, #576]	; (8012d4c <_dtoa_r+0x2f4>)
 8012b0a:	9300      	str	r3, [sp, #0]
 8012b0c:	3303      	adds	r3, #3
 8012b0e:	e7f3      	b.n	8012af8 <_dtoa_r+0xa0>
 8012b10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012b14:	2200      	movs	r2, #0
 8012b16:	ec51 0b17 	vmov	r0, r1, d7
 8012b1a:	eeb0 8a47 	vmov.f32	s16, s14
 8012b1e:	eef0 8a67 	vmov.f32	s17, s15
 8012b22:	2300      	movs	r3, #0
 8012b24:	f7ed fff8 	bl	8000b18 <__aeabi_dcmpeq>
 8012b28:	4681      	mov	r9, r0
 8012b2a:	b160      	cbz	r0, 8012b46 <_dtoa_r+0xee>
 8012b2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012b2e:	2301      	movs	r3, #1
 8012b30:	6013      	str	r3, [r2, #0]
 8012b32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	f000 8568 	beq.w	801360a <_dtoa_r+0xbb2>
 8012b3a:	4b86      	ldr	r3, [pc, #536]	; (8012d54 <_dtoa_r+0x2fc>)
 8012b3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012b3e:	6013      	str	r3, [r2, #0]
 8012b40:	3b01      	subs	r3, #1
 8012b42:	9300      	str	r3, [sp, #0]
 8012b44:	e7da      	b.n	8012afc <_dtoa_r+0xa4>
 8012b46:	aa10      	add	r2, sp, #64	; 0x40
 8012b48:	a911      	add	r1, sp, #68	; 0x44
 8012b4a:	4620      	mov	r0, r4
 8012b4c:	eeb0 0a48 	vmov.f32	s0, s16
 8012b50:	eef0 0a68 	vmov.f32	s1, s17
 8012b54:	f001 fa4e 	bl	8013ff4 <__d2b>
 8012b58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012b5c:	4682      	mov	sl, r0
 8012b5e:	2d00      	cmp	r5, #0
 8012b60:	d07f      	beq.n	8012c62 <_dtoa_r+0x20a>
 8012b62:	ee18 3a90 	vmov	r3, s17
 8012b66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b6a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8012b6e:	ec51 0b18 	vmov	r0, r1, d8
 8012b72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012b76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012b7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8012b7e:	4619      	mov	r1, r3
 8012b80:	2200      	movs	r2, #0
 8012b82:	4b75      	ldr	r3, [pc, #468]	; (8012d58 <_dtoa_r+0x300>)
 8012b84:	f7ed fba8 	bl	80002d8 <__aeabi_dsub>
 8012b88:	a367      	add	r3, pc, #412	; (adr r3, 8012d28 <_dtoa_r+0x2d0>)
 8012b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b8e:	f7ed fd5b 	bl	8000648 <__aeabi_dmul>
 8012b92:	a367      	add	r3, pc, #412	; (adr r3, 8012d30 <_dtoa_r+0x2d8>)
 8012b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b98:	f7ed fba0 	bl	80002dc <__adddf3>
 8012b9c:	4606      	mov	r6, r0
 8012b9e:	4628      	mov	r0, r5
 8012ba0:	460f      	mov	r7, r1
 8012ba2:	f7ed fce7 	bl	8000574 <__aeabi_i2d>
 8012ba6:	a364      	add	r3, pc, #400	; (adr r3, 8012d38 <_dtoa_r+0x2e0>)
 8012ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bac:	f7ed fd4c 	bl	8000648 <__aeabi_dmul>
 8012bb0:	4602      	mov	r2, r0
 8012bb2:	460b      	mov	r3, r1
 8012bb4:	4630      	mov	r0, r6
 8012bb6:	4639      	mov	r1, r7
 8012bb8:	f7ed fb90 	bl	80002dc <__adddf3>
 8012bbc:	4606      	mov	r6, r0
 8012bbe:	460f      	mov	r7, r1
 8012bc0:	f7ed fff2 	bl	8000ba8 <__aeabi_d2iz>
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	4683      	mov	fp, r0
 8012bc8:	2300      	movs	r3, #0
 8012bca:	4630      	mov	r0, r6
 8012bcc:	4639      	mov	r1, r7
 8012bce:	f7ed ffad 	bl	8000b2c <__aeabi_dcmplt>
 8012bd2:	b148      	cbz	r0, 8012be8 <_dtoa_r+0x190>
 8012bd4:	4658      	mov	r0, fp
 8012bd6:	f7ed fccd 	bl	8000574 <__aeabi_i2d>
 8012bda:	4632      	mov	r2, r6
 8012bdc:	463b      	mov	r3, r7
 8012bde:	f7ed ff9b 	bl	8000b18 <__aeabi_dcmpeq>
 8012be2:	b908      	cbnz	r0, 8012be8 <_dtoa_r+0x190>
 8012be4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012be8:	f1bb 0f16 	cmp.w	fp, #22
 8012bec:	d857      	bhi.n	8012c9e <_dtoa_r+0x246>
 8012bee:	4b5b      	ldr	r3, [pc, #364]	; (8012d5c <_dtoa_r+0x304>)
 8012bf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf8:	ec51 0b18 	vmov	r0, r1, d8
 8012bfc:	f7ed ff96 	bl	8000b2c <__aeabi_dcmplt>
 8012c00:	2800      	cmp	r0, #0
 8012c02:	d04e      	beq.n	8012ca2 <_dtoa_r+0x24a>
 8012c04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012c08:	2300      	movs	r3, #0
 8012c0a:	930c      	str	r3, [sp, #48]	; 0x30
 8012c0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012c0e:	1b5b      	subs	r3, r3, r5
 8012c10:	1e5a      	subs	r2, r3, #1
 8012c12:	bf45      	ittet	mi
 8012c14:	f1c3 0301 	rsbmi	r3, r3, #1
 8012c18:	9305      	strmi	r3, [sp, #20]
 8012c1a:	2300      	movpl	r3, #0
 8012c1c:	2300      	movmi	r3, #0
 8012c1e:	9206      	str	r2, [sp, #24]
 8012c20:	bf54      	ite	pl
 8012c22:	9305      	strpl	r3, [sp, #20]
 8012c24:	9306      	strmi	r3, [sp, #24]
 8012c26:	f1bb 0f00 	cmp.w	fp, #0
 8012c2a:	db3c      	blt.n	8012ca6 <_dtoa_r+0x24e>
 8012c2c:	9b06      	ldr	r3, [sp, #24]
 8012c2e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012c32:	445b      	add	r3, fp
 8012c34:	9306      	str	r3, [sp, #24]
 8012c36:	2300      	movs	r3, #0
 8012c38:	9308      	str	r3, [sp, #32]
 8012c3a:	9b07      	ldr	r3, [sp, #28]
 8012c3c:	2b09      	cmp	r3, #9
 8012c3e:	d868      	bhi.n	8012d12 <_dtoa_r+0x2ba>
 8012c40:	2b05      	cmp	r3, #5
 8012c42:	bfc4      	itt	gt
 8012c44:	3b04      	subgt	r3, #4
 8012c46:	9307      	strgt	r3, [sp, #28]
 8012c48:	9b07      	ldr	r3, [sp, #28]
 8012c4a:	f1a3 0302 	sub.w	r3, r3, #2
 8012c4e:	bfcc      	ite	gt
 8012c50:	2500      	movgt	r5, #0
 8012c52:	2501      	movle	r5, #1
 8012c54:	2b03      	cmp	r3, #3
 8012c56:	f200 8085 	bhi.w	8012d64 <_dtoa_r+0x30c>
 8012c5a:	e8df f003 	tbb	[pc, r3]
 8012c5e:	3b2e      	.short	0x3b2e
 8012c60:	5839      	.short	0x5839
 8012c62:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012c66:	441d      	add	r5, r3
 8012c68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012c6c:	2b20      	cmp	r3, #32
 8012c6e:	bfc1      	itttt	gt
 8012c70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012c74:	fa08 f803 	lslgt.w	r8, r8, r3
 8012c78:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8012c7c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8012c80:	bfd6      	itet	le
 8012c82:	f1c3 0320 	rsble	r3, r3, #32
 8012c86:	ea48 0003 	orrgt.w	r0, r8, r3
 8012c8a:	fa06 f003 	lslle.w	r0, r6, r3
 8012c8e:	f7ed fc61 	bl	8000554 <__aeabi_ui2d>
 8012c92:	2201      	movs	r2, #1
 8012c94:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8012c98:	3d01      	subs	r5, #1
 8012c9a:	920e      	str	r2, [sp, #56]	; 0x38
 8012c9c:	e76f      	b.n	8012b7e <_dtoa_r+0x126>
 8012c9e:	2301      	movs	r3, #1
 8012ca0:	e7b3      	b.n	8012c0a <_dtoa_r+0x1b2>
 8012ca2:	900c      	str	r0, [sp, #48]	; 0x30
 8012ca4:	e7b2      	b.n	8012c0c <_dtoa_r+0x1b4>
 8012ca6:	9b05      	ldr	r3, [sp, #20]
 8012ca8:	eba3 030b 	sub.w	r3, r3, fp
 8012cac:	9305      	str	r3, [sp, #20]
 8012cae:	f1cb 0300 	rsb	r3, fp, #0
 8012cb2:	9308      	str	r3, [sp, #32]
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8012cb8:	e7bf      	b.n	8012c3a <_dtoa_r+0x1e2>
 8012cba:	2300      	movs	r3, #0
 8012cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8012cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	dc52      	bgt.n	8012d6a <_dtoa_r+0x312>
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	9301      	str	r3, [sp, #4]
 8012cc8:	9304      	str	r3, [sp, #16]
 8012cca:	461a      	mov	r2, r3
 8012ccc:	920a      	str	r2, [sp, #40]	; 0x28
 8012cce:	e00b      	b.n	8012ce8 <_dtoa_r+0x290>
 8012cd0:	2301      	movs	r3, #1
 8012cd2:	e7f3      	b.n	8012cbc <_dtoa_r+0x264>
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8012cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cda:	445b      	add	r3, fp
 8012cdc:	9301      	str	r3, [sp, #4]
 8012cde:	3301      	adds	r3, #1
 8012ce0:	2b01      	cmp	r3, #1
 8012ce2:	9304      	str	r3, [sp, #16]
 8012ce4:	bfb8      	it	lt
 8012ce6:	2301      	movlt	r3, #1
 8012ce8:	69e0      	ldr	r0, [r4, #28]
 8012cea:	2100      	movs	r1, #0
 8012cec:	2204      	movs	r2, #4
 8012cee:	f102 0614 	add.w	r6, r2, #20
 8012cf2:	429e      	cmp	r6, r3
 8012cf4:	d93d      	bls.n	8012d72 <_dtoa_r+0x31a>
 8012cf6:	6041      	str	r1, [r0, #4]
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	f000 fd9f 	bl	801383c <_Balloc>
 8012cfe:	9000      	str	r0, [sp, #0]
 8012d00:	2800      	cmp	r0, #0
 8012d02:	d139      	bne.n	8012d78 <_dtoa_r+0x320>
 8012d04:	4b16      	ldr	r3, [pc, #88]	; (8012d60 <_dtoa_r+0x308>)
 8012d06:	4602      	mov	r2, r0
 8012d08:	f240 11af 	movw	r1, #431	; 0x1af
 8012d0c:	e6bd      	b.n	8012a8a <_dtoa_r+0x32>
 8012d0e:	2301      	movs	r3, #1
 8012d10:	e7e1      	b.n	8012cd6 <_dtoa_r+0x27e>
 8012d12:	2501      	movs	r5, #1
 8012d14:	2300      	movs	r3, #0
 8012d16:	9307      	str	r3, [sp, #28]
 8012d18:	9509      	str	r5, [sp, #36]	; 0x24
 8012d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8012d1e:	9301      	str	r3, [sp, #4]
 8012d20:	9304      	str	r3, [sp, #16]
 8012d22:	2200      	movs	r2, #0
 8012d24:	2312      	movs	r3, #18
 8012d26:	e7d1      	b.n	8012ccc <_dtoa_r+0x274>
 8012d28:	636f4361 	.word	0x636f4361
 8012d2c:	3fd287a7 	.word	0x3fd287a7
 8012d30:	8b60c8b3 	.word	0x8b60c8b3
 8012d34:	3fc68a28 	.word	0x3fc68a28
 8012d38:	509f79fb 	.word	0x509f79fb
 8012d3c:	3fd34413 	.word	0x3fd34413
 8012d40:	08017ff4 	.word	0x08017ff4
 8012d44:	0801800b 	.word	0x0801800b
 8012d48:	7ff00000 	.word	0x7ff00000
 8012d4c:	08017ff0 	.word	0x08017ff0
 8012d50:	08017fe7 	.word	0x08017fe7
 8012d54:	08018349 	.word	0x08018349
 8012d58:	3ff80000 	.word	0x3ff80000
 8012d5c:	080180f8 	.word	0x080180f8
 8012d60:	08018063 	.word	0x08018063
 8012d64:	2301      	movs	r3, #1
 8012d66:	9309      	str	r3, [sp, #36]	; 0x24
 8012d68:	e7d7      	b.n	8012d1a <_dtoa_r+0x2c2>
 8012d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d6c:	9301      	str	r3, [sp, #4]
 8012d6e:	9304      	str	r3, [sp, #16]
 8012d70:	e7ba      	b.n	8012ce8 <_dtoa_r+0x290>
 8012d72:	3101      	adds	r1, #1
 8012d74:	0052      	lsls	r2, r2, #1
 8012d76:	e7ba      	b.n	8012cee <_dtoa_r+0x296>
 8012d78:	69e3      	ldr	r3, [r4, #28]
 8012d7a:	9a00      	ldr	r2, [sp, #0]
 8012d7c:	601a      	str	r2, [r3, #0]
 8012d7e:	9b04      	ldr	r3, [sp, #16]
 8012d80:	2b0e      	cmp	r3, #14
 8012d82:	f200 80a8 	bhi.w	8012ed6 <_dtoa_r+0x47e>
 8012d86:	2d00      	cmp	r5, #0
 8012d88:	f000 80a5 	beq.w	8012ed6 <_dtoa_r+0x47e>
 8012d8c:	f1bb 0f00 	cmp.w	fp, #0
 8012d90:	dd38      	ble.n	8012e04 <_dtoa_r+0x3ac>
 8012d92:	4bc0      	ldr	r3, [pc, #768]	; (8013094 <_dtoa_r+0x63c>)
 8012d94:	f00b 020f 	and.w	r2, fp, #15
 8012d98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d9c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012da0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012da4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8012da8:	d019      	beq.n	8012dde <_dtoa_r+0x386>
 8012daa:	4bbb      	ldr	r3, [pc, #748]	; (8013098 <_dtoa_r+0x640>)
 8012dac:	ec51 0b18 	vmov	r0, r1, d8
 8012db0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012db4:	f7ed fd72 	bl	800089c <__aeabi_ddiv>
 8012db8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012dbc:	f008 080f 	and.w	r8, r8, #15
 8012dc0:	2503      	movs	r5, #3
 8012dc2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013098 <_dtoa_r+0x640>
 8012dc6:	f1b8 0f00 	cmp.w	r8, #0
 8012dca:	d10a      	bne.n	8012de2 <_dtoa_r+0x38a>
 8012dcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012dd0:	4632      	mov	r2, r6
 8012dd2:	463b      	mov	r3, r7
 8012dd4:	f7ed fd62 	bl	800089c <__aeabi_ddiv>
 8012dd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ddc:	e02b      	b.n	8012e36 <_dtoa_r+0x3de>
 8012dde:	2502      	movs	r5, #2
 8012de0:	e7ef      	b.n	8012dc2 <_dtoa_r+0x36a>
 8012de2:	f018 0f01 	tst.w	r8, #1
 8012de6:	d008      	beq.n	8012dfa <_dtoa_r+0x3a2>
 8012de8:	4630      	mov	r0, r6
 8012dea:	4639      	mov	r1, r7
 8012dec:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012df0:	f7ed fc2a 	bl	8000648 <__aeabi_dmul>
 8012df4:	3501      	adds	r5, #1
 8012df6:	4606      	mov	r6, r0
 8012df8:	460f      	mov	r7, r1
 8012dfa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012dfe:	f109 0908 	add.w	r9, r9, #8
 8012e02:	e7e0      	b.n	8012dc6 <_dtoa_r+0x36e>
 8012e04:	f000 809f 	beq.w	8012f46 <_dtoa_r+0x4ee>
 8012e08:	f1cb 0600 	rsb	r6, fp, #0
 8012e0c:	4ba1      	ldr	r3, [pc, #644]	; (8013094 <_dtoa_r+0x63c>)
 8012e0e:	4fa2      	ldr	r7, [pc, #648]	; (8013098 <_dtoa_r+0x640>)
 8012e10:	f006 020f 	and.w	r2, r6, #15
 8012e14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e1c:	ec51 0b18 	vmov	r0, r1, d8
 8012e20:	f7ed fc12 	bl	8000648 <__aeabi_dmul>
 8012e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e28:	1136      	asrs	r6, r6, #4
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	2502      	movs	r5, #2
 8012e2e:	2e00      	cmp	r6, #0
 8012e30:	d17e      	bne.n	8012f30 <_dtoa_r+0x4d8>
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d1d0      	bne.n	8012dd8 <_dtoa_r+0x380>
 8012e36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e38:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	f000 8084 	beq.w	8012f4a <_dtoa_r+0x4f2>
 8012e42:	4b96      	ldr	r3, [pc, #600]	; (801309c <_dtoa_r+0x644>)
 8012e44:	2200      	movs	r2, #0
 8012e46:	4640      	mov	r0, r8
 8012e48:	4649      	mov	r1, r9
 8012e4a:	f7ed fe6f 	bl	8000b2c <__aeabi_dcmplt>
 8012e4e:	2800      	cmp	r0, #0
 8012e50:	d07b      	beq.n	8012f4a <_dtoa_r+0x4f2>
 8012e52:	9b04      	ldr	r3, [sp, #16]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d078      	beq.n	8012f4a <_dtoa_r+0x4f2>
 8012e58:	9b01      	ldr	r3, [sp, #4]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	dd39      	ble.n	8012ed2 <_dtoa_r+0x47a>
 8012e5e:	4b90      	ldr	r3, [pc, #576]	; (80130a0 <_dtoa_r+0x648>)
 8012e60:	2200      	movs	r2, #0
 8012e62:	4640      	mov	r0, r8
 8012e64:	4649      	mov	r1, r9
 8012e66:	f7ed fbef 	bl	8000648 <__aeabi_dmul>
 8012e6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e6e:	9e01      	ldr	r6, [sp, #4]
 8012e70:	f10b 37ff 	add.w	r7, fp, #4294967295
 8012e74:	3501      	adds	r5, #1
 8012e76:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012e7a:	4628      	mov	r0, r5
 8012e7c:	f7ed fb7a 	bl	8000574 <__aeabi_i2d>
 8012e80:	4642      	mov	r2, r8
 8012e82:	464b      	mov	r3, r9
 8012e84:	f7ed fbe0 	bl	8000648 <__aeabi_dmul>
 8012e88:	4b86      	ldr	r3, [pc, #536]	; (80130a4 <_dtoa_r+0x64c>)
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	f7ed fa26 	bl	80002dc <__adddf3>
 8012e90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012e94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e98:	9303      	str	r3, [sp, #12]
 8012e9a:	2e00      	cmp	r6, #0
 8012e9c:	d158      	bne.n	8012f50 <_dtoa_r+0x4f8>
 8012e9e:	4b82      	ldr	r3, [pc, #520]	; (80130a8 <_dtoa_r+0x650>)
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	4640      	mov	r0, r8
 8012ea4:	4649      	mov	r1, r9
 8012ea6:	f7ed fa17 	bl	80002d8 <__aeabi_dsub>
 8012eaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012eae:	4680      	mov	r8, r0
 8012eb0:	4689      	mov	r9, r1
 8012eb2:	f7ed fe59 	bl	8000b68 <__aeabi_dcmpgt>
 8012eb6:	2800      	cmp	r0, #0
 8012eb8:	f040 8296 	bne.w	80133e8 <_dtoa_r+0x990>
 8012ebc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012ec0:	4640      	mov	r0, r8
 8012ec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ec6:	4649      	mov	r1, r9
 8012ec8:	f7ed fe30 	bl	8000b2c <__aeabi_dcmplt>
 8012ecc:	2800      	cmp	r0, #0
 8012ece:	f040 8289 	bne.w	80133e4 <_dtoa_r+0x98c>
 8012ed2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012ed6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	f2c0 814e 	blt.w	801317a <_dtoa_r+0x722>
 8012ede:	f1bb 0f0e 	cmp.w	fp, #14
 8012ee2:	f300 814a 	bgt.w	801317a <_dtoa_r+0x722>
 8012ee6:	4b6b      	ldr	r3, [pc, #428]	; (8013094 <_dtoa_r+0x63c>)
 8012ee8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012eec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	f280 80dc 	bge.w	80130b0 <_dtoa_r+0x658>
 8012ef8:	9b04      	ldr	r3, [sp, #16]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	f300 80d8 	bgt.w	80130b0 <_dtoa_r+0x658>
 8012f00:	f040 826f 	bne.w	80133e2 <_dtoa_r+0x98a>
 8012f04:	4b68      	ldr	r3, [pc, #416]	; (80130a8 <_dtoa_r+0x650>)
 8012f06:	2200      	movs	r2, #0
 8012f08:	4640      	mov	r0, r8
 8012f0a:	4649      	mov	r1, r9
 8012f0c:	f7ed fb9c 	bl	8000648 <__aeabi_dmul>
 8012f10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012f14:	f7ed fe1e 	bl	8000b54 <__aeabi_dcmpge>
 8012f18:	9e04      	ldr	r6, [sp, #16]
 8012f1a:	4637      	mov	r7, r6
 8012f1c:	2800      	cmp	r0, #0
 8012f1e:	f040 8245 	bne.w	80133ac <_dtoa_r+0x954>
 8012f22:	9d00      	ldr	r5, [sp, #0]
 8012f24:	2331      	movs	r3, #49	; 0x31
 8012f26:	f805 3b01 	strb.w	r3, [r5], #1
 8012f2a:	f10b 0b01 	add.w	fp, fp, #1
 8012f2e:	e241      	b.n	80133b4 <_dtoa_r+0x95c>
 8012f30:	07f2      	lsls	r2, r6, #31
 8012f32:	d505      	bpl.n	8012f40 <_dtoa_r+0x4e8>
 8012f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012f38:	f7ed fb86 	bl	8000648 <__aeabi_dmul>
 8012f3c:	3501      	adds	r5, #1
 8012f3e:	2301      	movs	r3, #1
 8012f40:	1076      	asrs	r6, r6, #1
 8012f42:	3708      	adds	r7, #8
 8012f44:	e773      	b.n	8012e2e <_dtoa_r+0x3d6>
 8012f46:	2502      	movs	r5, #2
 8012f48:	e775      	b.n	8012e36 <_dtoa_r+0x3de>
 8012f4a:	9e04      	ldr	r6, [sp, #16]
 8012f4c:	465f      	mov	r7, fp
 8012f4e:	e792      	b.n	8012e76 <_dtoa_r+0x41e>
 8012f50:	9900      	ldr	r1, [sp, #0]
 8012f52:	4b50      	ldr	r3, [pc, #320]	; (8013094 <_dtoa_r+0x63c>)
 8012f54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012f58:	4431      	add	r1, r6
 8012f5a:	9102      	str	r1, [sp, #8]
 8012f5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012f5e:	eeb0 9a47 	vmov.f32	s18, s14
 8012f62:	eef0 9a67 	vmov.f32	s19, s15
 8012f66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012f6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012f6e:	2900      	cmp	r1, #0
 8012f70:	d044      	beq.n	8012ffc <_dtoa_r+0x5a4>
 8012f72:	494e      	ldr	r1, [pc, #312]	; (80130ac <_dtoa_r+0x654>)
 8012f74:	2000      	movs	r0, #0
 8012f76:	f7ed fc91 	bl	800089c <__aeabi_ddiv>
 8012f7a:	ec53 2b19 	vmov	r2, r3, d9
 8012f7e:	f7ed f9ab 	bl	80002d8 <__aeabi_dsub>
 8012f82:	9d00      	ldr	r5, [sp, #0]
 8012f84:	ec41 0b19 	vmov	d9, r0, r1
 8012f88:	4649      	mov	r1, r9
 8012f8a:	4640      	mov	r0, r8
 8012f8c:	f7ed fe0c 	bl	8000ba8 <__aeabi_d2iz>
 8012f90:	4606      	mov	r6, r0
 8012f92:	f7ed faef 	bl	8000574 <__aeabi_i2d>
 8012f96:	4602      	mov	r2, r0
 8012f98:	460b      	mov	r3, r1
 8012f9a:	4640      	mov	r0, r8
 8012f9c:	4649      	mov	r1, r9
 8012f9e:	f7ed f99b 	bl	80002d8 <__aeabi_dsub>
 8012fa2:	3630      	adds	r6, #48	; 0x30
 8012fa4:	f805 6b01 	strb.w	r6, [r5], #1
 8012fa8:	ec53 2b19 	vmov	r2, r3, d9
 8012fac:	4680      	mov	r8, r0
 8012fae:	4689      	mov	r9, r1
 8012fb0:	f7ed fdbc 	bl	8000b2c <__aeabi_dcmplt>
 8012fb4:	2800      	cmp	r0, #0
 8012fb6:	d164      	bne.n	8013082 <_dtoa_r+0x62a>
 8012fb8:	4642      	mov	r2, r8
 8012fba:	464b      	mov	r3, r9
 8012fbc:	4937      	ldr	r1, [pc, #220]	; (801309c <_dtoa_r+0x644>)
 8012fbe:	2000      	movs	r0, #0
 8012fc0:	f7ed f98a 	bl	80002d8 <__aeabi_dsub>
 8012fc4:	ec53 2b19 	vmov	r2, r3, d9
 8012fc8:	f7ed fdb0 	bl	8000b2c <__aeabi_dcmplt>
 8012fcc:	2800      	cmp	r0, #0
 8012fce:	f040 80b6 	bne.w	801313e <_dtoa_r+0x6e6>
 8012fd2:	9b02      	ldr	r3, [sp, #8]
 8012fd4:	429d      	cmp	r5, r3
 8012fd6:	f43f af7c 	beq.w	8012ed2 <_dtoa_r+0x47a>
 8012fda:	4b31      	ldr	r3, [pc, #196]	; (80130a0 <_dtoa_r+0x648>)
 8012fdc:	ec51 0b19 	vmov	r0, r1, d9
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	f7ed fb31 	bl	8000648 <__aeabi_dmul>
 8012fe6:	4b2e      	ldr	r3, [pc, #184]	; (80130a0 <_dtoa_r+0x648>)
 8012fe8:	ec41 0b19 	vmov	d9, r0, r1
 8012fec:	2200      	movs	r2, #0
 8012fee:	4640      	mov	r0, r8
 8012ff0:	4649      	mov	r1, r9
 8012ff2:	f7ed fb29 	bl	8000648 <__aeabi_dmul>
 8012ff6:	4680      	mov	r8, r0
 8012ff8:	4689      	mov	r9, r1
 8012ffa:	e7c5      	b.n	8012f88 <_dtoa_r+0x530>
 8012ffc:	ec51 0b17 	vmov	r0, r1, d7
 8013000:	f7ed fb22 	bl	8000648 <__aeabi_dmul>
 8013004:	9b02      	ldr	r3, [sp, #8]
 8013006:	9d00      	ldr	r5, [sp, #0]
 8013008:	930f      	str	r3, [sp, #60]	; 0x3c
 801300a:	ec41 0b19 	vmov	d9, r0, r1
 801300e:	4649      	mov	r1, r9
 8013010:	4640      	mov	r0, r8
 8013012:	f7ed fdc9 	bl	8000ba8 <__aeabi_d2iz>
 8013016:	4606      	mov	r6, r0
 8013018:	f7ed faac 	bl	8000574 <__aeabi_i2d>
 801301c:	3630      	adds	r6, #48	; 0x30
 801301e:	4602      	mov	r2, r0
 8013020:	460b      	mov	r3, r1
 8013022:	4640      	mov	r0, r8
 8013024:	4649      	mov	r1, r9
 8013026:	f7ed f957 	bl	80002d8 <__aeabi_dsub>
 801302a:	f805 6b01 	strb.w	r6, [r5], #1
 801302e:	9b02      	ldr	r3, [sp, #8]
 8013030:	429d      	cmp	r5, r3
 8013032:	4680      	mov	r8, r0
 8013034:	4689      	mov	r9, r1
 8013036:	f04f 0200 	mov.w	r2, #0
 801303a:	d124      	bne.n	8013086 <_dtoa_r+0x62e>
 801303c:	4b1b      	ldr	r3, [pc, #108]	; (80130ac <_dtoa_r+0x654>)
 801303e:	ec51 0b19 	vmov	r0, r1, d9
 8013042:	f7ed f94b 	bl	80002dc <__adddf3>
 8013046:	4602      	mov	r2, r0
 8013048:	460b      	mov	r3, r1
 801304a:	4640      	mov	r0, r8
 801304c:	4649      	mov	r1, r9
 801304e:	f7ed fd8b 	bl	8000b68 <__aeabi_dcmpgt>
 8013052:	2800      	cmp	r0, #0
 8013054:	d173      	bne.n	801313e <_dtoa_r+0x6e6>
 8013056:	ec53 2b19 	vmov	r2, r3, d9
 801305a:	4914      	ldr	r1, [pc, #80]	; (80130ac <_dtoa_r+0x654>)
 801305c:	2000      	movs	r0, #0
 801305e:	f7ed f93b 	bl	80002d8 <__aeabi_dsub>
 8013062:	4602      	mov	r2, r0
 8013064:	460b      	mov	r3, r1
 8013066:	4640      	mov	r0, r8
 8013068:	4649      	mov	r1, r9
 801306a:	f7ed fd5f 	bl	8000b2c <__aeabi_dcmplt>
 801306e:	2800      	cmp	r0, #0
 8013070:	f43f af2f 	beq.w	8012ed2 <_dtoa_r+0x47a>
 8013074:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013076:	1e6b      	subs	r3, r5, #1
 8013078:	930f      	str	r3, [sp, #60]	; 0x3c
 801307a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801307e:	2b30      	cmp	r3, #48	; 0x30
 8013080:	d0f8      	beq.n	8013074 <_dtoa_r+0x61c>
 8013082:	46bb      	mov	fp, r7
 8013084:	e04a      	b.n	801311c <_dtoa_r+0x6c4>
 8013086:	4b06      	ldr	r3, [pc, #24]	; (80130a0 <_dtoa_r+0x648>)
 8013088:	f7ed fade 	bl	8000648 <__aeabi_dmul>
 801308c:	4680      	mov	r8, r0
 801308e:	4689      	mov	r9, r1
 8013090:	e7bd      	b.n	801300e <_dtoa_r+0x5b6>
 8013092:	bf00      	nop
 8013094:	080180f8 	.word	0x080180f8
 8013098:	080180d0 	.word	0x080180d0
 801309c:	3ff00000 	.word	0x3ff00000
 80130a0:	40240000 	.word	0x40240000
 80130a4:	401c0000 	.word	0x401c0000
 80130a8:	40140000 	.word	0x40140000
 80130ac:	3fe00000 	.word	0x3fe00000
 80130b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80130b4:	9d00      	ldr	r5, [sp, #0]
 80130b6:	4642      	mov	r2, r8
 80130b8:	464b      	mov	r3, r9
 80130ba:	4630      	mov	r0, r6
 80130bc:	4639      	mov	r1, r7
 80130be:	f7ed fbed 	bl	800089c <__aeabi_ddiv>
 80130c2:	f7ed fd71 	bl	8000ba8 <__aeabi_d2iz>
 80130c6:	9001      	str	r0, [sp, #4]
 80130c8:	f7ed fa54 	bl	8000574 <__aeabi_i2d>
 80130cc:	4642      	mov	r2, r8
 80130ce:	464b      	mov	r3, r9
 80130d0:	f7ed faba 	bl	8000648 <__aeabi_dmul>
 80130d4:	4602      	mov	r2, r0
 80130d6:	460b      	mov	r3, r1
 80130d8:	4630      	mov	r0, r6
 80130da:	4639      	mov	r1, r7
 80130dc:	f7ed f8fc 	bl	80002d8 <__aeabi_dsub>
 80130e0:	9e01      	ldr	r6, [sp, #4]
 80130e2:	9f04      	ldr	r7, [sp, #16]
 80130e4:	3630      	adds	r6, #48	; 0x30
 80130e6:	f805 6b01 	strb.w	r6, [r5], #1
 80130ea:	9e00      	ldr	r6, [sp, #0]
 80130ec:	1bae      	subs	r6, r5, r6
 80130ee:	42b7      	cmp	r7, r6
 80130f0:	4602      	mov	r2, r0
 80130f2:	460b      	mov	r3, r1
 80130f4:	d134      	bne.n	8013160 <_dtoa_r+0x708>
 80130f6:	f7ed f8f1 	bl	80002dc <__adddf3>
 80130fa:	4642      	mov	r2, r8
 80130fc:	464b      	mov	r3, r9
 80130fe:	4606      	mov	r6, r0
 8013100:	460f      	mov	r7, r1
 8013102:	f7ed fd31 	bl	8000b68 <__aeabi_dcmpgt>
 8013106:	b9c8      	cbnz	r0, 801313c <_dtoa_r+0x6e4>
 8013108:	4642      	mov	r2, r8
 801310a:	464b      	mov	r3, r9
 801310c:	4630      	mov	r0, r6
 801310e:	4639      	mov	r1, r7
 8013110:	f7ed fd02 	bl	8000b18 <__aeabi_dcmpeq>
 8013114:	b110      	cbz	r0, 801311c <_dtoa_r+0x6c4>
 8013116:	9b01      	ldr	r3, [sp, #4]
 8013118:	07db      	lsls	r3, r3, #31
 801311a:	d40f      	bmi.n	801313c <_dtoa_r+0x6e4>
 801311c:	4651      	mov	r1, sl
 801311e:	4620      	mov	r0, r4
 8013120:	f000 fbcc 	bl	80138bc <_Bfree>
 8013124:	2300      	movs	r3, #0
 8013126:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013128:	702b      	strb	r3, [r5, #0]
 801312a:	f10b 0301 	add.w	r3, fp, #1
 801312e:	6013      	str	r3, [r2, #0]
 8013130:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013132:	2b00      	cmp	r3, #0
 8013134:	f43f ace2 	beq.w	8012afc <_dtoa_r+0xa4>
 8013138:	601d      	str	r5, [r3, #0]
 801313a:	e4df      	b.n	8012afc <_dtoa_r+0xa4>
 801313c:	465f      	mov	r7, fp
 801313e:	462b      	mov	r3, r5
 8013140:	461d      	mov	r5, r3
 8013142:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013146:	2a39      	cmp	r2, #57	; 0x39
 8013148:	d106      	bne.n	8013158 <_dtoa_r+0x700>
 801314a:	9a00      	ldr	r2, [sp, #0]
 801314c:	429a      	cmp	r2, r3
 801314e:	d1f7      	bne.n	8013140 <_dtoa_r+0x6e8>
 8013150:	9900      	ldr	r1, [sp, #0]
 8013152:	2230      	movs	r2, #48	; 0x30
 8013154:	3701      	adds	r7, #1
 8013156:	700a      	strb	r2, [r1, #0]
 8013158:	781a      	ldrb	r2, [r3, #0]
 801315a:	3201      	adds	r2, #1
 801315c:	701a      	strb	r2, [r3, #0]
 801315e:	e790      	b.n	8013082 <_dtoa_r+0x62a>
 8013160:	4ba3      	ldr	r3, [pc, #652]	; (80133f0 <_dtoa_r+0x998>)
 8013162:	2200      	movs	r2, #0
 8013164:	f7ed fa70 	bl	8000648 <__aeabi_dmul>
 8013168:	2200      	movs	r2, #0
 801316a:	2300      	movs	r3, #0
 801316c:	4606      	mov	r6, r0
 801316e:	460f      	mov	r7, r1
 8013170:	f7ed fcd2 	bl	8000b18 <__aeabi_dcmpeq>
 8013174:	2800      	cmp	r0, #0
 8013176:	d09e      	beq.n	80130b6 <_dtoa_r+0x65e>
 8013178:	e7d0      	b.n	801311c <_dtoa_r+0x6c4>
 801317a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801317c:	2a00      	cmp	r2, #0
 801317e:	f000 80ca 	beq.w	8013316 <_dtoa_r+0x8be>
 8013182:	9a07      	ldr	r2, [sp, #28]
 8013184:	2a01      	cmp	r2, #1
 8013186:	f300 80ad 	bgt.w	80132e4 <_dtoa_r+0x88c>
 801318a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801318c:	2a00      	cmp	r2, #0
 801318e:	f000 80a5 	beq.w	80132dc <_dtoa_r+0x884>
 8013192:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013196:	9e08      	ldr	r6, [sp, #32]
 8013198:	9d05      	ldr	r5, [sp, #20]
 801319a:	9a05      	ldr	r2, [sp, #20]
 801319c:	441a      	add	r2, r3
 801319e:	9205      	str	r2, [sp, #20]
 80131a0:	9a06      	ldr	r2, [sp, #24]
 80131a2:	2101      	movs	r1, #1
 80131a4:	441a      	add	r2, r3
 80131a6:	4620      	mov	r0, r4
 80131a8:	9206      	str	r2, [sp, #24]
 80131aa:	f000 fc87 	bl	8013abc <__i2b>
 80131ae:	4607      	mov	r7, r0
 80131b0:	b165      	cbz	r5, 80131cc <_dtoa_r+0x774>
 80131b2:	9b06      	ldr	r3, [sp, #24]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	dd09      	ble.n	80131cc <_dtoa_r+0x774>
 80131b8:	42ab      	cmp	r3, r5
 80131ba:	9a05      	ldr	r2, [sp, #20]
 80131bc:	bfa8      	it	ge
 80131be:	462b      	movge	r3, r5
 80131c0:	1ad2      	subs	r2, r2, r3
 80131c2:	9205      	str	r2, [sp, #20]
 80131c4:	9a06      	ldr	r2, [sp, #24]
 80131c6:	1aed      	subs	r5, r5, r3
 80131c8:	1ad3      	subs	r3, r2, r3
 80131ca:	9306      	str	r3, [sp, #24]
 80131cc:	9b08      	ldr	r3, [sp, #32]
 80131ce:	b1f3      	cbz	r3, 801320e <_dtoa_r+0x7b6>
 80131d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	f000 80a3 	beq.w	801331e <_dtoa_r+0x8c6>
 80131d8:	2e00      	cmp	r6, #0
 80131da:	dd10      	ble.n	80131fe <_dtoa_r+0x7a6>
 80131dc:	4639      	mov	r1, r7
 80131de:	4632      	mov	r2, r6
 80131e0:	4620      	mov	r0, r4
 80131e2:	f000 fd2b 	bl	8013c3c <__pow5mult>
 80131e6:	4652      	mov	r2, sl
 80131e8:	4601      	mov	r1, r0
 80131ea:	4607      	mov	r7, r0
 80131ec:	4620      	mov	r0, r4
 80131ee:	f000 fc7b 	bl	8013ae8 <__multiply>
 80131f2:	4651      	mov	r1, sl
 80131f4:	4680      	mov	r8, r0
 80131f6:	4620      	mov	r0, r4
 80131f8:	f000 fb60 	bl	80138bc <_Bfree>
 80131fc:	46c2      	mov	sl, r8
 80131fe:	9b08      	ldr	r3, [sp, #32]
 8013200:	1b9a      	subs	r2, r3, r6
 8013202:	d004      	beq.n	801320e <_dtoa_r+0x7b6>
 8013204:	4651      	mov	r1, sl
 8013206:	4620      	mov	r0, r4
 8013208:	f000 fd18 	bl	8013c3c <__pow5mult>
 801320c:	4682      	mov	sl, r0
 801320e:	2101      	movs	r1, #1
 8013210:	4620      	mov	r0, r4
 8013212:	f000 fc53 	bl	8013abc <__i2b>
 8013216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013218:	2b00      	cmp	r3, #0
 801321a:	4606      	mov	r6, r0
 801321c:	f340 8081 	ble.w	8013322 <_dtoa_r+0x8ca>
 8013220:	461a      	mov	r2, r3
 8013222:	4601      	mov	r1, r0
 8013224:	4620      	mov	r0, r4
 8013226:	f000 fd09 	bl	8013c3c <__pow5mult>
 801322a:	9b07      	ldr	r3, [sp, #28]
 801322c:	2b01      	cmp	r3, #1
 801322e:	4606      	mov	r6, r0
 8013230:	dd7a      	ble.n	8013328 <_dtoa_r+0x8d0>
 8013232:	f04f 0800 	mov.w	r8, #0
 8013236:	6933      	ldr	r3, [r6, #16]
 8013238:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801323c:	6918      	ldr	r0, [r3, #16]
 801323e:	f000 fbef 	bl	8013a20 <__hi0bits>
 8013242:	f1c0 0020 	rsb	r0, r0, #32
 8013246:	9b06      	ldr	r3, [sp, #24]
 8013248:	4418      	add	r0, r3
 801324a:	f010 001f 	ands.w	r0, r0, #31
 801324e:	f000 8094 	beq.w	801337a <_dtoa_r+0x922>
 8013252:	f1c0 0320 	rsb	r3, r0, #32
 8013256:	2b04      	cmp	r3, #4
 8013258:	f340 8085 	ble.w	8013366 <_dtoa_r+0x90e>
 801325c:	9b05      	ldr	r3, [sp, #20]
 801325e:	f1c0 001c 	rsb	r0, r0, #28
 8013262:	4403      	add	r3, r0
 8013264:	9305      	str	r3, [sp, #20]
 8013266:	9b06      	ldr	r3, [sp, #24]
 8013268:	4403      	add	r3, r0
 801326a:	4405      	add	r5, r0
 801326c:	9306      	str	r3, [sp, #24]
 801326e:	9b05      	ldr	r3, [sp, #20]
 8013270:	2b00      	cmp	r3, #0
 8013272:	dd05      	ble.n	8013280 <_dtoa_r+0x828>
 8013274:	4651      	mov	r1, sl
 8013276:	461a      	mov	r2, r3
 8013278:	4620      	mov	r0, r4
 801327a:	f000 fd39 	bl	8013cf0 <__lshift>
 801327e:	4682      	mov	sl, r0
 8013280:	9b06      	ldr	r3, [sp, #24]
 8013282:	2b00      	cmp	r3, #0
 8013284:	dd05      	ble.n	8013292 <_dtoa_r+0x83a>
 8013286:	4631      	mov	r1, r6
 8013288:	461a      	mov	r2, r3
 801328a:	4620      	mov	r0, r4
 801328c:	f000 fd30 	bl	8013cf0 <__lshift>
 8013290:	4606      	mov	r6, r0
 8013292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013294:	2b00      	cmp	r3, #0
 8013296:	d072      	beq.n	801337e <_dtoa_r+0x926>
 8013298:	4631      	mov	r1, r6
 801329a:	4650      	mov	r0, sl
 801329c:	f000 fd94 	bl	8013dc8 <__mcmp>
 80132a0:	2800      	cmp	r0, #0
 80132a2:	da6c      	bge.n	801337e <_dtoa_r+0x926>
 80132a4:	2300      	movs	r3, #0
 80132a6:	4651      	mov	r1, sl
 80132a8:	220a      	movs	r2, #10
 80132aa:	4620      	mov	r0, r4
 80132ac:	f000 fb28 	bl	8013900 <__multadd>
 80132b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80132b6:	4682      	mov	sl, r0
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	f000 81b0 	beq.w	801361e <_dtoa_r+0xbc6>
 80132be:	2300      	movs	r3, #0
 80132c0:	4639      	mov	r1, r7
 80132c2:	220a      	movs	r2, #10
 80132c4:	4620      	mov	r0, r4
 80132c6:	f000 fb1b 	bl	8013900 <__multadd>
 80132ca:	9b01      	ldr	r3, [sp, #4]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	4607      	mov	r7, r0
 80132d0:	f300 8096 	bgt.w	8013400 <_dtoa_r+0x9a8>
 80132d4:	9b07      	ldr	r3, [sp, #28]
 80132d6:	2b02      	cmp	r3, #2
 80132d8:	dc59      	bgt.n	801338e <_dtoa_r+0x936>
 80132da:	e091      	b.n	8013400 <_dtoa_r+0x9a8>
 80132dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80132de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80132e2:	e758      	b.n	8013196 <_dtoa_r+0x73e>
 80132e4:	9b04      	ldr	r3, [sp, #16]
 80132e6:	1e5e      	subs	r6, r3, #1
 80132e8:	9b08      	ldr	r3, [sp, #32]
 80132ea:	42b3      	cmp	r3, r6
 80132ec:	bfbf      	itttt	lt
 80132ee:	9b08      	ldrlt	r3, [sp, #32]
 80132f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80132f2:	9608      	strlt	r6, [sp, #32]
 80132f4:	1af3      	sublt	r3, r6, r3
 80132f6:	bfb4      	ite	lt
 80132f8:	18d2      	addlt	r2, r2, r3
 80132fa:	1b9e      	subge	r6, r3, r6
 80132fc:	9b04      	ldr	r3, [sp, #16]
 80132fe:	bfbc      	itt	lt
 8013300:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8013302:	2600      	movlt	r6, #0
 8013304:	2b00      	cmp	r3, #0
 8013306:	bfb7      	itett	lt
 8013308:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801330c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013310:	1a9d      	sublt	r5, r3, r2
 8013312:	2300      	movlt	r3, #0
 8013314:	e741      	b.n	801319a <_dtoa_r+0x742>
 8013316:	9e08      	ldr	r6, [sp, #32]
 8013318:	9d05      	ldr	r5, [sp, #20]
 801331a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801331c:	e748      	b.n	80131b0 <_dtoa_r+0x758>
 801331e:	9a08      	ldr	r2, [sp, #32]
 8013320:	e770      	b.n	8013204 <_dtoa_r+0x7ac>
 8013322:	9b07      	ldr	r3, [sp, #28]
 8013324:	2b01      	cmp	r3, #1
 8013326:	dc19      	bgt.n	801335c <_dtoa_r+0x904>
 8013328:	9b02      	ldr	r3, [sp, #8]
 801332a:	b9bb      	cbnz	r3, 801335c <_dtoa_r+0x904>
 801332c:	9b03      	ldr	r3, [sp, #12]
 801332e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013332:	b99b      	cbnz	r3, 801335c <_dtoa_r+0x904>
 8013334:	9b03      	ldr	r3, [sp, #12]
 8013336:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801333a:	0d1b      	lsrs	r3, r3, #20
 801333c:	051b      	lsls	r3, r3, #20
 801333e:	b183      	cbz	r3, 8013362 <_dtoa_r+0x90a>
 8013340:	9b05      	ldr	r3, [sp, #20]
 8013342:	3301      	adds	r3, #1
 8013344:	9305      	str	r3, [sp, #20]
 8013346:	9b06      	ldr	r3, [sp, #24]
 8013348:	3301      	adds	r3, #1
 801334a:	9306      	str	r3, [sp, #24]
 801334c:	f04f 0801 	mov.w	r8, #1
 8013350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013352:	2b00      	cmp	r3, #0
 8013354:	f47f af6f 	bne.w	8013236 <_dtoa_r+0x7de>
 8013358:	2001      	movs	r0, #1
 801335a:	e774      	b.n	8013246 <_dtoa_r+0x7ee>
 801335c:	f04f 0800 	mov.w	r8, #0
 8013360:	e7f6      	b.n	8013350 <_dtoa_r+0x8f8>
 8013362:	4698      	mov	r8, r3
 8013364:	e7f4      	b.n	8013350 <_dtoa_r+0x8f8>
 8013366:	d082      	beq.n	801326e <_dtoa_r+0x816>
 8013368:	9a05      	ldr	r2, [sp, #20]
 801336a:	331c      	adds	r3, #28
 801336c:	441a      	add	r2, r3
 801336e:	9205      	str	r2, [sp, #20]
 8013370:	9a06      	ldr	r2, [sp, #24]
 8013372:	441a      	add	r2, r3
 8013374:	441d      	add	r5, r3
 8013376:	9206      	str	r2, [sp, #24]
 8013378:	e779      	b.n	801326e <_dtoa_r+0x816>
 801337a:	4603      	mov	r3, r0
 801337c:	e7f4      	b.n	8013368 <_dtoa_r+0x910>
 801337e:	9b04      	ldr	r3, [sp, #16]
 8013380:	2b00      	cmp	r3, #0
 8013382:	dc37      	bgt.n	80133f4 <_dtoa_r+0x99c>
 8013384:	9b07      	ldr	r3, [sp, #28]
 8013386:	2b02      	cmp	r3, #2
 8013388:	dd34      	ble.n	80133f4 <_dtoa_r+0x99c>
 801338a:	9b04      	ldr	r3, [sp, #16]
 801338c:	9301      	str	r3, [sp, #4]
 801338e:	9b01      	ldr	r3, [sp, #4]
 8013390:	b963      	cbnz	r3, 80133ac <_dtoa_r+0x954>
 8013392:	4631      	mov	r1, r6
 8013394:	2205      	movs	r2, #5
 8013396:	4620      	mov	r0, r4
 8013398:	f000 fab2 	bl	8013900 <__multadd>
 801339c:	4601      	mov	r1, r0
 801339e:	4606      	mov	r6, r0
 80133a0:	4650      	mov	r0, sl
 80133a2:	f000 fd11 	bl	8013dc8 <__mcmp>
 80133a6:	2800      	cmp	r0, #0
 80133a8:	f73f adbb 	bgt.w	8012f22 <_dtoa_r+0x4ca>
 80133ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133ae:	9d00      	ldr	r5, [sp, #0]
 80133b0:	ea6f 0b03 	mvn.w	fp, r3
 80133b4:	f04f 0800 	mov.w	r8, #0
 80133b8:	4631      	mov	r1, r6
 80133ba:	4620      	mov	r0, r4
 80133bc:	f000 fa7e 	bl	80138bc <_Bfree>
 80133c0:	2f00      	cmp	r7, #0
 80133c2:	f43f aeab 	beq.w	801311c <_dtoa_r+0x6c4>
 80133c6:	f1b8 0f00 	cmp.w	r8, #0
 80133ca:	d005      	beq.n	80133d8 <_dtoa_r+0x980>
 80133cc:	45b8      	cmp	r8, r7
 80133ce:	d003      	beq.n	80133d8 <_dtoa_r+0x980>
 80133d0:	4641      	mov	r1, r8
 80133d2:	4620      	mov	r0, r4
 80133d4:	f000 fa72 	bl	80138bc <_Bfree>
 80133d8:	4639      	mov	r1, r7
 80133da:	4620      	mov	r0, r4
 80133dc:	f000 fa6e 	bl	80138bc <_Bfree>
 80133e0:	e69c      	b.n	801311c <_dtoa_r+0x6c4>
 80133e2:	2600      	movs	r6, #0
 80133e4:	4637      	mov	r7, r6
 80133e6:	e7e1      	b.n	80133ac <_dtoa_r+0x954>
 80133e8:	46bb      	mov	fp, r7
 80133ea:	4637      	mov	r7, r6
 80133ec:	e599      	b.n	8012f22 <_dtoa_r+0x4ca>
 80133ee:	bf00      	nop
 80133f0:	40240000 	.word	0x40240000
 80133f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	f000 80c8 	beq.w	801358c <_dtoa_r+0xb34>
 80133fc:	9b04      	ldr	r3, [sp, #16]
 80133fe:	9301      	str	r3, [sp, #4]
 8013400:	2d00      	cmp	r5, #0
 8013402:	dd05      	ble.n	8013410 <_dtoa_r+0x9b8>
 8013404:	4639      	mov	r1, r7
 8013406:	462a      	mov	r2, r5
 8013408:	4620      	mov	r0, r4
 801340a:	f000 fc71 	bl	8013cf0 <__lshift>
 801340e:	4607      	mov	r7, r0
 8013410:	f1b8 0f00 	cmp.w	r8, #0
 8013414:	d05b      	beq.n	80134ce <_dtoa_r+0xa76>
 8013416:	6879      	ldr	r1, [r7, #4]
 8013418:	4620      	mov	r0, r4
 801341a:	f000 fa0f 	bl	801383c <_Balloc>
 801341e:	4605      	mov	r5, r0
 8013420:	b928      	cbnz	r0, 801342e <_dtoa_r+0x9d6>
 8013422:	4b83      	ldr	r3, [pc, #524]	; (8013630 <_dtoa_r+0xbd8>)
 8013424:	4602      	mov	r2, r0
 8013426:	f240 21ef 	movw	r1, #751	; 0x2ef
 801342a:	f7ff bb2e 	b.w	8012a8a <_dtoa_r+0x32>
 801342e:	693a      	ldr	r2, [r7, #16]
 8013430:	3202      	adds	r2, #2
 8013432:	0092      	lsls	r2, r2, #2
 8013434:	f107 010c 	add.w	r1, r7, #12
 8013438:	300c      	adds	r0, #12
 801343a:	f7ff fa70 	bl	801291e <memcpy>
 801343e:	2201      	movs	r2, #1
 8013440:	4629      	mov	r1, r5
 8013442:	4620      	mov	r0, r4
 8013444:	f000 fc54 	bl	8013cf0 <__lshift>
 8013448:	9b00      	ldr	r3, [sp, #0]
 801344a:	3301      	adds	r3, #1
 801344c:	9304      	str	r3, [sp, #16]
 801344e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013452:	4413      	add	r3, r2
 8013454:	9308      	str	r3, [sp, #32]
 8013456:	9b02      	ldr	r3, [sp, #8]
 8013458:	f003 0301 	and.w	r3, r3, #1
 801345c:	46b8      	mov	r8, r7
 801345e:	9306      	str	r3, [sp, #24]
 8013460:	4607      	mov	r7, r0
 8013462:	9b04      	ldr	r3, [sp, #16]
 8013464:	4631      	mov	r1, r6
 8013466:	3b01      	subs	r3, #1
 8013468:	4650      	mov	r0, sl
 801346a:	9301      	str	r3, [sp, #4]
 801346c:	f7ff fa6c 	bl	8012948 <quorem>
 8013470:	4641      	mov	r1, r8
 8013472:	9002      	str	r0, [sp, #8]
 8013474:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013478:	4650      	mov	r0, sl
 801347a:	f000 fca5 	bl	8013dc8 <__mcmp>
 801347e:	463a      	mov	r2, r7
 8013480:	9005      	str	r0, [sp, #20]
 8013482:	4631      	mov	r1, r6
 8013484:	4620      	mov	r0, r4
 8013486:	f000 fcbb 	bl	8013e00 <__mdiff>
 801348a:	68c2      	ldr	r2, [r0, #12]
 801348c:	4605      	mov	r5, r0
 801348e:	bb02      	cbnz	r2, 80134d2 <_dtoa_r+0xa7a>
 8013490:	4601      	mov	r1, r0
 8013492:	4650      	mov	r0, sl
 8013494:	f000 fc98 	bl	8013dc8 <__mcmp>
 8013498:	4602      	mov	r2, r0
 801349a:	4629      	mov	r1, r5
 801349c:	4620      	mov	r0, r4
 801349e:	9209      	str	r2, [sp, #36]	; 0x24
 80134a0:	f000 fa0c 	bl	80138bc <_Bfree>
 80134a4:	9b07      	ldr	r3, [sp, #28]
 80134a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80134a8:	9d04      	ldr	r5, [sp, #16]
 80134aa:	ea43 0102 	orr.w	r1, r3, r2
 80134ae:	9b06      	ldr	r3, [sp, #24]
 80134b0:	4319      	orrs	r1, r3
 80134b2:	d110      	bne.n	80134d6 <_dtoa_r+0xa7e>
 80134b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80134b8:	d029      	beq.n	801350e <_dtoa_r+0xab6>
 80134ba:	9b05      	ldr	r3, [sp, #20]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	dd02      	ble.n	80134c6 <_dtoa_r+0xa6e>
 80134c0:	9b02      	ldr	r3, [sp, #8]
 80134c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80134c6:	9b01      	ldr	r3, [sp, #4]
 80134c8:	f883 9000 	strb.w	r9, [r3]
 80134cc:	e774      	b.n	80133b8 <_dtoa_r+0x960>
 80134ce:	4638      	mov	r0, r7
 80134d0:	e7ba      	b.n	8013448 <_dtoa_r+0x9f0>
 80134d2:	2201      	movs	r2, #1
 80134d4:	e7e1      	b.n	801349a <_dtoa_r+0xa42>
 80134d6:	9b05      	ldr	r3, [sp, #20]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	db04      	blt.n	80134e6 <_dtoa_r+0xa8e>
 80134dc:	9907      	ldr	r1, [sp, #28]
 80134de:	430b      	orrs	r3, r1
 80134e0:	9906      	ldr	r1, [sp, #24]
 80134e2:	430b      	orrs	r3, r1
 80134e4:	d120      	bne.n	8013528 <_dtoa_r+0xad0>
 80134e6:	2a00      	cmp	r2, #0
 80134e8:	dded      	ble.n	80134c6 <_dtoa_r+0xa6e>
 80134ea:	4651      	mov	r1, sl
 80134ec:	2201      	movs	r2, #1
 80134ee:	4620      	mov	r0, r4
 80134f0:	f000 fbfe 	bl	8013cf0 <__lshift>
 80134f4:	4631      	mov	r1, r6
 80134f6:	4682      	mov	sl, r0
 80134f8:	f000 fc66 	bl	8013dc8 <__mcmp>
 80134fc:	2800      	cmp	r0, #0
 80134fe:	dc03      	bgt.n	8013508 <_dtoa_r+0xab0>
 8013500:	d1e1      	bne.n	80134c6 <_dtoa_r+0xa6e>
 8013502:	f019 0f01 	tst.w	r9, #1
 8013506:	d0de      	beq.n	80134c6 <_dtoa_r+0xa6e>
 8013508:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801350c:	d1d8      	bne.n	80134c0 <_dtoa_r+0xa68>
 801350e:	9a01      	ldr	r2, [sp, #4]
 8013510:	2339      	movs	r3, #57	; 0x39
 8013512:	7013      	strb	r3, [r2, #0]
 8013514:	462b      	mov	r3, r5
 8013516:	461d      	mov	r5, r3
 8013518:	3b01      	subs	r3, #1
 801351a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801351e:	2a39      	cmp	r2, #57	; 0x39
 8013520:	d06c      	beq.n	80135fc <_dtoa_r+0xba4>
 8013522:	3201      	adds	r2, #1
 8013524:	701a      	strb	r2, [r3, #0]
 8013526:	e747      	b.n	80133b8 <_dtoa_r+0x960>
 8013528:	2a00      	cmp	r2, #0
 801352a:	dd07      	ble.n	801353c <_dtoa_r+0xae4>
 801352c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013530:	d0ed      	beq.n	801350e <_dtoa_r+0xab6>
 8013532:	9a01      	ldr	r2, [sp, #4]
 8013534:	f109 0301 	add.w	r3, r9, #1
 8013538:	7013      	strb	r3, [r2, #0]
 801353a:	e73d      	b.n	80133b8 <_dtoa_r+0x960>
 801353c:	9b04      	ldr	r3, [sp, #16]
 801353e:	9a08      	ldr	r2, [sp, #32]
 8013540:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013544:	4293      	cmp	r3, r2
 8013546:	d043      	beq.n	80135d0 <_dtoa_r+0xb78>
 8013548:	4651      	mov	r1, sl
 801354a:	2300      	movs	r3, #0
 801354c:	220a      	movs	r2, #10
 801354e:	4620      	mov	r0, r4
 8013550:	f000 f9d6 	bl	8013900 <__multadd>
 8013554:	45b8      	cmp	r8, r7
 8013556:	4682      	mov	sl, r0
 8013558:	f04f 0300 	mov.w	r3, #0
 801355c:	f04f 020a 	mov.w	r2, #10
 8013560:	4641      	mov	r1, r8
 8013562:	4620      	mov	r0, r4
 8013564:	d107      	bne.n	8013576 <_dtoa_r+0xb1e>
 8013566:	f000 f9cb 	bl	8013900 <__multadd>
 801356a:	4680      	mov	r8, r0
 801356c:	4607      	mov	r7, r0
 801356e:	9b04      	ldr	r3, [sp, #16]
 8013570:	3301      	adds	r3, #1
 8013572:	9304      	str	r3, [sp, #16]
 8013574:	e775      	b.n	8013462 <_dtoa_r+0xa0a>
 8013576:	f000 f9c3 	bl	8013900 <__multadd>
 801357a:	4639      	mov	r1, r7
 801357c:	4680      	mov	r8, r0
 801357e:	2300      	movs	r3, #0
 8013580:	220a      	movs	r2, #10
 8013582:	4620      	mov	r0, r4
 8013584:	f000 f9bc 	bl	8013900 <__multadd>
 8013588:	4607      	mov	r7, r0
 801358a:	e7f0      	b.n	801356e <_dtoa_r+0xb16>
 801358c:	9b04      	ldr	r3, [sp, #16]
 801358e:	9301      	str	r3, [sp, #4]
 8013590:	9d00      	ldr	r5, [sp, #0]
 8013592:	4631      	mov	r1, r6
 8013594:	4650      	mov	r0, sl
 8013596:	f7ff f9d7 	bl	8012948 <quorem>
 801359a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801359e:	9b00      	ldr	r3, [sp, #0]
 80135a0:	f805 9b01 	strb.w	r9, [r5], #1
 80135a4:	1aea      	subs	r2, r5, r3
 80135a6:	9b01      	ldr	r3, [sp, #4]
 80135a8:	4293      	cmp	r3, r2
 80135aa:	dd07      	ble.n	80135bc <_dtoa_r+0xb64>
 80135ac:	4651      	mov	r1, sl
 80135ae:	2300      	movs	r3, #0
 80135b0:	220a      	movs	r2, #10
 80135b2:	4620      	mov	r0, r4
 80135b4:	f000 f9a4 	bl	8013900 <__multadd>
 80135b8:	4682      	mov	sl, r0
 80135ba:	e7ea      	b.n	8013592 <_dtoa_r+0xb3a>
 80135bc:	9b01      	ldr	r3, [sp, #4]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	bfc8      	it	gt
 80135c2:	461d      	movgt	r5, r3
 80135c4:	9b00      	ldr	r3, [sp, #0]
 80135c6:	bfd8      	it	le
 80135c8:	2501      	movle	r5, #1
 80135ca:	441d      	add	r5, r3
 80135cc:	f04f 0800 	mov.w	r8, #0
 80135d0:	4651      	mov	r1, sl
 80135d2:	2201      	movs	r2, #1
 80135d4:	4620      	mov	r0, r4
 80135d6:	f000 fb8b 	bl	8013cf0 <__lshift>
 80135da:	4631      	mov	r1, r6
 80135dc:	4682      	mov	sl, r0
 80135de:	f000 fbf3 	bl	8013dc8 <__mcmp>
 80135e2:	2800      	cmp	r0, #0
 80135e4:	dc96      	bgt.n	8013514 <_dtoa_r+0xabc>
 80135e6:	d102      	bne.n	80135ee <_dtoa_r+0xb96>
 80135e8:	f019 0f01 	tst.w	r9, #1
 80135ec:	d192      	bne.n	8013514 <_dtoa_r+0xabc>
 80135ee:	462b      	mov	r3, r5
 80135f0:	461d      	mov	r5, r3
 80135f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80135f6:	2a30      	cmp	r2, #48	; 0x30
 80135f8:	d0fa      	beq.n	80135f0 <_dtoa_r+0xb98>
 80135fa:	e6dd      	b.n	80133b8 <_dtoa_r+0x960>
 80135fc:	9a00      	ldr	r2, [sp, #0]
 80135fe:	429a      	cmp	r2, r3
 8013600:	d189      	bne.n	8013516 <_dtoa_r+0xabe>
 8013602:	f10b 0b01 	add.w	fp, fp, #1
 8013606:	2331      	movs	r3, #49	; 0x31
 8013608:	e796      	b.n	8013538 <_dtoa_r+0xae0>
 801360a:	4b0a      	ldr	r3, [pc, #40]	; (8013634 <_dtoa_r+0xbdc>)
 801360c:	f7ff ba99 	b.w	8012b42 <_dtoa_r+0xea>
 8013610:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013612:	2b00      	cmp	r3, #0
 8013614:	f47f aa6d 	bne.w	8012af2 <_dtoa_r+0x9a>
 8013618:	4b07      	ldr	r3, [pc, #28]	; (8013638 <_dtoa_r+0xbe0>)
 801361a:	f7ff ba92 	b.w	8012b42 <_dtoa_r+0xea>
 801361e:	9b01      	ldr	r3, [sp, #4]
 8013620:	2b00      	cmp	r3, #0
 8013622:	dcb5      	bgt.n	8013590 <_dtoa_r+0xb38>
 8013624:	9b07      	ldr	r3, [sp, #28]
 8013626:	2b02      	cmp	r3, #2
 8013628:	f73f aeb1 	bgt.w	801338e <_dtoa_r+0x936>
 801362c:	e7b0      	b.n	8013590 <_dtoa_r+0xb38>
 801362e:	bf00      	nop
 8013630:	08018063 	.word	0x08018063
 8013634:	08018348 	.word	0x08018348
 8013638:	08017fe7 	.word	0x08017fe7

0801363c <_free_r>:
 801363c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801363e:	2900      	cmp	r1, #0
 8013640:	d044      	beq.n	80136cc <_free_r+0x90>
 8013642:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013646:	9001      	str	r0, [sp, #4]
 8013648:	2b00      	cmp	r3, #0
 801364a:	f1a1 0404 	sub.w	r4, r1, #4
 801364e:	bfb8      	it	lt
 8013650:	18e4      	addlt	r4, r4, r3
 8013652:	f000 f8e7 	bl	8013824 <__malloc_lock>
 8013656:	4a1e      	ldr	r2, [pc, #120]	; (80136d0 <_free_r+0x94>)
 8013658:	9801      	ldr	r0, [sp, #4]
 801365a:	6813      	ldr	r3, [r2, #0]
 801365c:	b933      	cbnz	r3, 801366c <_free_r+0x30>
 801365e:	6063      	str	r3, [r4, #4]
 8013660:	6014      	str	r4, [r2, #0]
 8013662:	b003      	add	sp, #12
 8013664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013668:	f000 b8e2 	b.w	8013830 <__malloc_unlock>
 801366c:	42a3      	cmp	r3, r4
 801366e:	d908      	bls.n	8013682 <_free_r+0x46>
 8013670:	6825      	ldr	r5, [r4, #0]
 8013672:	1961      	adds	r1, r4, r5
 8013674:	428b      	cmp	r3, r1
 8013676:	bf01      	itttt	eq
 8013678:	6819      	ldreq	r1, [r3, #0]
 801367a:	685b      	ldreq	r3, [r3, #4]
 801367c:	1949      	addeq	r1, r1, r5
 801367e:	6021      	streq	r1, [r4, #0]
 8013680:	e7ed      	b.n	801365e <_free_r+0x22>
 8013682:	461a      	mov	r2, r3
 8013684:	685b      	ldr	r3, [r3, #4]
 8013686:	b10b      	cbz	r3, 801368c <_free_r+0x50>
 8013688:	42a3      	cmp	r3, r4
 801368a:	d9fa      	bls.n	8013682 <_free_r+0x46>
 801368c:	6811      	ldr	r1, [r2, #0]
 801368e:	1855      	adds	r5, r2, r1
 8013690:	42a5      	cmp	r5, r4
 8013692:	d10b      	bne.n	80136ac <_free_r+0x70>
 8013694:	6824      	ldr	r4, [r4, #0]
 8013696:	4421      	add	r1, r4
 8013698:	1854      	adds	r4, r2, r1
 801369a:	42a3      	cmp	r3, r4
 801369c:	6011      	str	r1, [r2, #0]
 801369e:	d1e0      	bne.n	8013662 <_free_r+0x26>
 80136a0:	681c      	ldr	r4, [r3, #0]
 80136a2:	685b      	ldr	r3, [r3, #4]
 80136a4:	6053      	str	r3, [r2, #4]
 80136a6:	440c      	add	r4, r1
 80136a8:	6014      	str	r4, [r2, #0]
 80136aa:	e7da      	b.n	8013662 <_free_r+0x26>
 80136ac:	d902      	bls.n	80136b4 <_free_r+0x78>
 80136ae:	230c      	movs	r3, #12
 80136b0:	6003      	str	r3, [r0, #0]
 80136b2:	e7d6      	b.n	8013662 <_free_r+0x26>
 80136b4:	6825      	ldr	r5, [r4, #0]
 80136b6:	1961      	adds	r1, r4, r5
 80136b8:	428b      	cmp	r3, r1
 80136ba:	bf04      	itt	eq
 80136bc:	6819      	ldreq	r1, [r3, #0]
 80136be:	685b      	ldreq	r3, [r3, #4]
 80136c0:	6063      	str	r3, [r4, #4]
 80136c2:	bf04      	itt	eq
 80136c4:	1949      	addeq	r1, r1, r5
 80136c6:	6021      	streq	r1, [r4, #0]
 80136c8:	6054      	str	r4, [r2, #4]
 80136ca:	e7ca      	b.n	8013662 <_free_r+0x26>
 80136cc:	b003      	add	sp, #12
 80136ce:	bd30      	pop	{r4, r5, pc}
 80136d0:	20009024 	.word	0x20009024

080136d4 <malloc>:
 80136d4:	4b02      	ldr	r3, [pc, #8]	; (80136e0 <malloc+0xc>)
 80136d6:	4601      	mov	r1, r0
 80136d8:	6818      	ldr	r0, [r3, #0]
 80136da:	f000 b823 	b.w	8013724 <_malloc_r>
 80136de:	bf00      	nop
 80136e0:	20000070 	.word	0x20000070

080136e4 <sbrk_aligned>:
 80136e4:	b570      	push	{r4, r5, r6, lr}
 80136e6:	4e0e      	ldr	r6, [pc, #56]	; (8013720 <sbrk_aligned+0x3c>)
 80136e8:	460c      	mov	r4, r1
 80136ea:	6831      	ldr	r1, [r6, #0]
 80136ec:	4605      	mov	r5, r0
 80136ee:	b911      	cbnz	r1, 80136f6 <sbrk_aligned+0x12>
 80136f0:	f002 f99c 	bl	8015a2c <_sbrk_r>
 80136f4:	6030      	str	r0, [r6, #0]
 80136f6:	4621      	mov	r1, r4
 80136f8:	4628      	mov	r0, r5
 80136fa:	f002 f997 	bl	8015a2c <_sbrk_r>
 80136fe:	1c43      	adds	r3, r0, #1
 8013700:	d00a      	beq.n	8013718 <sbrk_aligned+0x34>
 8013702:	1cc4      	adds	r4, r0, #3
 8013704:	f024 0403 	bic.w	r4, r4, #3
 8013708:	42a0      	cmp	r0, r4
 801370a:	d007      	beq.n	801371c <sbrk_aligned+0x38>
 801370c:	1a21      	subs	r1, r4, r0
 801370e:	4628      	mov	r0, r5
 8013710:	f002 f98c 	bl	8015a2c <_sbrk_r>
 8013714:	3001      	adds	r0, #1
 8013716:	d101      	bne.n	801371c <sbrk_aligned+0x38>
 8013718:	f04f 34ff 	mov.w	r4, #4294967295
 801371c:	4620      	mov	r0, r4
 801371e:	bd70      	pop	{r4, r5, r6, pc}
 8013720:	20009028 	.word	0x20009028

08013724 <_malloc_r>:
 8013724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013728:	1ccd      	adds	r5, r1, #3
 801372a:	f025 0503 	bic.w	r5, r5, #3
 801372e:	3508      	adds	r5, #8
 8013730:	2d0c      	cmp	r5, #12
 8013732:	bf38      	it	cc
 8013734:	250c      	movcc	r5, #12
 8013736:	2d00      	cmp	r5, #0
 8013738:	4607      	mov	r7, r0
 801373a:	db01      	blt.n	8013740 <_malloc_r+0x1c>
 801373c:	42a9      	cmp	r1, r5
 801373e:	d905      	bls.n	801374c <_malloc_r+0x28>
 8013740:	230c      	movs	r3, #12
 8013742:	603b      	str	r3, [r7, #0]
 8013744:	2600      	movs	r6, #0
 8013746:	4630      	mov	r0, r6
 8013748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801374c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013820 <_malloc_r+0xfc>
 8013750:	f000 f868 	bl	8013824 <__malloc_lock>
 8013754:	f8d8 3000 	ldr.w	r3, [r8]
 8013758:	461c      	mov	r4, r3
 801375a:	bb5c      	cbnz	r4, 80137b4 <_malloc_r+0x90>
 801375c:	4629      	mov	r1, r5
 801375e:	4638      	mov	r0, r7
 8013760:	f7ff ffc0 	bl	80136e4 <sbrk_aligned>
 8013764:	1c43      	adds	r3, r0, #1
 8013766:	4604      	mov	r4, r0
 8013768:	d155      	bne.n	8013816 <_malloc_r+0xf2>
 801376a:	f8d8 4000 	ldr.w	r4, [r8]
 801376e:	4626      	mov	r6, r4
 8013770:	2e00      	cmp	r6, #0
 8013772:	d145      	bne.n	8013800 <_malloc_r+0xdc>
 8013774:	2c00      	cmp	r4, #0
 8013776:	d048      	beq.n	801380a <_malloc_r+0xe6>
 8013778:	6823      	ldr	r3, [r4, #0]
 801377a:	4631      	mov	r1, r6
 801377c:	4638      	mov	r0, r7
 801377e:	eb04 0903 	add.w	r9, r4, r3
 8013782:	f002 f953 	bl	8015a2c <_sbrk_r>
 8013786:	4581      	cmp	r9, r0
 8013788:	d13f      	bne.n	801380a <_malloc_r+0xe6>
 801378a:	6821      	ldr	r1, [r4, #0]
 801378c:	1a6d      	subs	r5, r5, r1
 801378e:	4629      	mov	r1, r5
 8013790:	4638      	mov	r0, r7
 8013792:	f7ff ffa7 	bl	80136e4 <sbrk_aligned>
 8013796:	3001      	adds	r0, #1
 8013798:	d037      	beq.n	801380a <_malloc_r+0xe6>
 801379a:	6823      	ldr	r3, [r4, #0]
 801379c:	442b      	add	r3, r5
 801379e:	6023      	str	r3, [r4, #0]
 80137a0:	f8d8 3000 	ldr.w	r3, [r8]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d038      	beq.n	801381a <_malloc_r+0xf6>
 80137a8:	685a      	ldr	r2, [r3, #4]
 80137aa:	42a2      	cmp	r2, r4
 80137ac:	d12b      	bne.n	8013806 <_malloc_r+0xe2>
 80137ae:	2200      	movs	r2, #0
 80137b0:	605a      	str	r2, [r3, #4]
 80137b2:	e00f      	b.n	80137d4 <_malloc_r+0xb0>
 80137b4:	6822      	ldr	r2, [r4, #0]
 80137b6:	1b52      	subs	r2, r2, r5
 80137b8:	d41f      	bmi.n	80137fa <_malloc_r+0xd6>
 80137ba:	2a0b      	cmp	r2, #11
 80137bc:	d917      	bls.n	80137ee <_malloc_r+0xca>
 80137be:	1961      	adds	r1, r4, r5
 80137c0:	42a3      	cmp	r3, r4
 80137c2:	6025      	str	r5, [r4, #0]
 80137c4:	bf18      	it	ne
 80137c6:	6059      	strne	r1, [r3, #4]
 80137c8:	6863      	ldr	r3, [r4, #4]
 80137ca:	bf08      	it	eq
 80137cc:	f8c8 1000 	streq.w	r1, [r8]
 80137d0:	5162      	str	r2, [r4, r5]
 80137d2:	604b      	str	r3, [r1, #4]
 80137d4:	4638      	mov	r0, r7
 80137d6:	f104 060b 	add.w	r6, r4, #11
 80137da:	f000 f829 	bl	8013830 <__malloc_unlock>
 80137de:	f026 0607 	bic.w	r6, r6, #7
 80137e2:	1d23      	adds	r3, r4, #4
 80137e4:	1af2      	subs	r2, r6, r3
 80137e6:	d0ae      	beq.n	8013746 <_malloc_r+0x22>
 80137e8:	1b9b      	subs	r3, r3, r6
 80137ea:	50a3      	str	r3, [r4, r2]
 80137ec:	e7ab      	b.n	8013746 <_malloc_r+0x22>
 80137ee:	42a3      	cmp	r3, r4
 80137f0:	6862      	ldr	r2, [r4, #4]
 80137f2:	d1dd      	bne.n	80137b0 <_malloc_r+0x8c>
 80137f4:	f8c8 2000 	str.w	r2, [r8]
 80137f8:	e7ec      	b.n	80137d4 <_malloc_r+0xb0>
 80137fa:	4623      	mov	r3, r4
 80137fc:	6864      	ldr	r4, [r4, #4]
 80137fe:	e7ac      	b.n	801375a <_malloc_r+0x36>
 8013800:	4634      	mov	r4, r6
 8013802:	6876      	ldr	r6, [r6, #4]
 8013804:	e7b4      	b.n	8013770 <_malloc_r+0x4c>
 8013806:	4613      	mov	r3, r2
 8013808:	e7cc      	b.n	80137a4 <_malloc_r+0x80>
 801380a:	230c      	movs	r3, #12
 801380c:	603b      	str	r3, [r7, #0]
 801380e:	4638      	mov	r0, r7
 8013810:	f000 f80e 	bl	8013830 <__malloc_unlock>
 8013814:	e797      	b.n	8013746 <_malloc_r+0x22>
 8013816:	6025      	str	r5, [r4, #0]
 8013818:	e7dc      	b.n	80137d4 <_malloc_r+0xb0>
 801381a:	605b      	str	r3, [r3, #4]
 801381c:	deff      	udf	#255	; 0xff
 801381e:	bf00      	nop
 8013820:	20009024 	.word	0x20009024

08013824 <__malloc_lock>:
 8013824:	4801      	ldr	r0, [pc, #4]	; (801382c <__malloc_lock+0x8>)
 8013826:	f7ff b878 	b.w	801291a <__retarget_lock_acquire_recursive>
 801382a:	bf00      	nop
 801382c:	20009020 	.word	0x20009020

08013830 <__malloc_unlock>:
 8013830:	4801      	ldr	r0, [pc, #4]	; (8013838 <__malloc_unlock+0x8>)
 8013832:	f7ff b873 	b.w	801291c <__retarget_lock_release_recursive>
 8013836:	bf00      	nop
 8013838:	20009020 	.word	0x20009020

0801383c <_Balloc>:
 801383c:	b570      	push	{r4, r5, r6, lr}
 801383e:	69c6      	ldr	r6, [r0, #28]
 8013840:	4604      	mov	r4, r0
 8013842:	460d      	mov	r5, r1
 8013844:	b976      	cbnz	r6, 8013864 <_Balloc+0x28>
 8013846:	2010      	movs	r0, #16
 8013848:	f7ff ff44 	bl	80136d4 <malloc>
 801384c:	4602      	mov	r2, r0
 801384e:	61e0      	str	r0, [r4, #28]
 8013850:	b920      	cbnz	r0, 801385c <_Balloc+0x20>
 8013852:	4b18      	ldr	r3, [pc, #96]	; (80138b4 <_Balloc+0x78>)
 8013854:	4818      	ldr	r0, [pc, #96]	; (80138b8 <_Balloc+0x7c>)
 8013856:	216b      	movs	r1, #107	; 0x6b
 8013858:	f002 f902 	bl	8015a60 <__assert_func>
 801385c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013860:	6006      	str	r6, [r0, #0]
 8013862:	60c6      	str	r6, [r0, #12]
 8013864:	69e6      	ldr	r6, [r4, #28]
 8013866:	68f3      	ldr	r3, [r6, #12]
 8013868:	b183      	cbz	r3, 801388c <_Balloc+0x50>
 801386a:	69e3      	ldr	r3, [r4, #28]
 801386c:	68db      	ldr	r3, [r3, #12]
 801386e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013872:	b9b8      	cbnz	r0, 80138a4 <_Balloc+0x68>
 8013874:	2101      	movs	r1, #1
 8013876:	fa01 f605 	lsl.w	r6, r1, r5
 801387a:	1d72      	adds	r2, r6, #5
 801387c:	0092      	lsls	r2, r2, #2
 801387e:	4620      	mov	r0, r4
 8013880:	f002 f90c 	bl	8015a9c <_calloc_r>
 8013884:	b160      	cbz	r0, 80138a0 <_Balloc+0x64>
 8013886:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801388a:	e00e      	b.n	80138aa <_Balloc+0x6e>
 801388c:	2221      	movs	r2, #33	; 0x21
 801388e:	2104      	movs	r1, #4
 8013890:	4620      	mov	r0, r4
 8013892:	f002 f903 	bl	8015a9c <_calloc_r>
 8013896:	69e3      	ldr	r3, [r4, #28]
 8013898:	60f0      	str	r0, [r6, #12]
 801389a:	68db      	ldr	r3, [r3, #12]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d1e4      	bne.n	801386a <_Balloc+0x2e>
 80138a0:	2000      	movs	r0, #0
 80138a2:	bd70      	pop	{r4, r5, r6, pc}
 80138a4:	6802      	ldr	r2, [r0, #0]
 80138a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80138aa:	2300      	movs	r3, #0
 80138ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80138b0:	e7f7      	b.n	80138a2 <_Balloc+0x66>
 80138b2:	bf00      	nop
 80138b4:	08017ff4 	.word	0x08017ff4
 80138b8:	08018074 	.word	0x08018074

080138bc <_Bfree>:
 80138bc:	b570      	push	{r4, r5, r6, lr}
 80138be:	69c6      	ldr	r6, [r0, #28]
 80138c0:	4605      	mov	r5, r0
 80138c2:	460c      	mov	r4, r1
 80138c4:	b976      	cbnz	r6, 80138e4 <_Bfree+0x28>
 80138c6:	2010      	movs	r0, #16
 80138c8:	f7ff ff04 	bl	80136d4 <malloc>
 80138cc:	4602      	mov	r2, r0
 80138ce:	61e8      	str	r0, [r5, #28]
 80138d0:	b920      	cbnz	r0, 80138dc <_Bfree+0x20>
 80138d2:	4b09      	ldr	r3, [pc, #36]	; (80138f8 <_Bfree+0x3c>)
 80138d4:	4809      	ldr	r0, [pc, #36]	; (80138fc <_Bfree+0x40>)
 80138d6:	218f      	movs	r1, #143	; 0x8f
 80138d8:	f002 f8c2 	bl	8015a60 <__assert_func>
 80138dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80138e0:	6006      	str	r6, [r0, #0]
 80138e2:	60c6      	str	r6, [r0, #12]
 80138e4:	b13c      	cbz	r4, 80138f6 <_Bfree+0x3a>
 80138e6:	69eb      	ldr	r3, [r5, #28]
 80138e8:	6862      	ldr	r2, [r4, #4]
 80138ea:	68db      	ldr	r3, [r3, #12]
 80138ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80138f0:	6021      	str	r1, [r4, #0]
 80138f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80138f6:	bd70      	pop	{r4, r5, r6, pc}
 80138f8:	08017ff4 	.word	0x08017ff4
 80138fc:	08018074 	.word	0x08018074

08013900 <__multadd>:
 8013900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013904:	690d      	ldr	r5, [r1, #16]
 8013906:	4607      	mov	r7, r0
 8013908:	460c      	mov	r4, r1
 801390a:	461e      	mov	r6, r3
 801390c:	f101 0c14 	add.w	ip, r1, #20
 8013910:	2000      	movs	r0, #0
 8013912:	f8dc 3000 	ldr.w	r3, [ip]
 8013916:	b299      	uxth	r1, r3
 8013918:	fb02 6101 	mla	r1, r2, r1, r6
 801391c:	0c1e      	lsrs	r6, r3, #16
 801391e:	0c0b      	lsrs	r3, r1, #16
 8013920:	fb02 3306 	mla	r3, r2, r6, r3
 8013924:	b289      	uxth	r1, r1
 8013926:	3001      	adds	r0, #1
 8013928:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801392c:	4285      	cmp	r5, r0
 801392e:	f84c 1b04 	str.w	r1, [ip], #4
 8013932:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013936:	dcec      	bgt.n	8013912 <__multadd+0x12>
 8013938:	b30e      	cbz	r6, 801397e <__multadd+0x7e>
 801393a:	68a3      	ldr	r3, [r4, #8]
 801393c:	42ab      	cmp	r3, r5
 801393e:	dc19      	bgt.n	8013974 <__multadd+0x74>
 8013940:	6861      	ldr	r1, [r4, #4]
 8013942:	4638      	mov	r0, r7
 8013944:	3101      	adds	r1, #1
 8013946:	f7ff ff79 	bl	801383c <_Balloc>
 801394a:	4680      	mov	r8, r0
 801394c:	b928      	cbnz	r0, 801395a <__multadd+0x5a>
 801394e:	4602      	mov	r2, r0
 8013950:	4b0c      	ldr	r3, [pc, #48]	; (8013984 <__multadd+0x84>)
 8013952:	480d      	ldr	r0, [pc, #52]	; (8013988 <__multadd+0x88>)
 8013954:	21ba      	movs	r1, #186	; 0xba
 8013956:	f002 f883 	bl	8015a60 <__assert_func>
 801395a:	6922      	ldr	r2, [r4, #16]
 801395c:	3202      	adds	r2, #2
 801395e:	f104 010c 	add.w	r1, r4, #12
 8013962:	0092      	lsls	r2, r2, #2
 8013964:	300c      	adds	r0, #12
 8013966:	f7fe ffda 	bl	801291e <memcpy>
 801396a:	4621      	mov	r1, r4
 801396c:	4638      	mov	r0, r7
 801396e:	f7ff ffa5 	bl	80138bc <_Bfree>
 8013972:	4644      	mov	r4, r8
 8013974:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013978:	3501      	adds	r5, #1
 801397a:	615e      	str	r6, [r3, #20]
 801397c:	6125      	str	r5, [r4, #16]
 801397e:	4620      	mov	r0, r4
 8013980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013984:	08018063 	.word	0x08018063
 8013988:	08018074 	.word	0x08018074

0801398c <__s2b>:
 801398c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013990:	460c      	mov	r4, r1
 8013992:	4615      	mov	r5, r2
 8013994:	461f      	mov	r7, r3
 8013996:	2209      	movs	r2, #9
 8013998:	3308      	adds	r3, #8
 801399a:	4606      	mov	r6, r0
 801399c:	fb93 f3f2 	sdiv	r3, r3, r2
 80139a0:	2100      	movs	r1, #0
 80139a2:	2201      	movs	r2, #1
 80139a4:	429a      	cmp	r2, r3
 80139a6:	db09      	blt.n	80139bc <__s2b+0x30>
 80139a8:	4630      	mov	r0, r6
 80139aa:	f7ff ff47 	bl	801383c <_Balloc>
 80139ae:	b940      	cbnz	r0, 80139c2 <__s2b+0x36>
 80139b0:	4602      	mov	r2, r0
 80139b2:	4b19      	ldr	r3, [pc, #100]	; (8013a18 <__s2b+0x8c>)
 80139b4:	4819      	ldr	r0, [pc, #100]	; (8013a1c <__s2b+0x90>)
 80139b6:	21d3      	movs	r1, #211	; 0xd3
 80139b8:	f002 f852 	bl	8015a60 <__assert_func>
 80139bc:	0052      	lsls	r2, r2, #1
 80139be:	3101      	adds	r1, #1
 80139c0:	e7f0      	b.n	80139a4 <__s2b+0x18>
 80139c2:	9b08      	ldr	r3, [sp, #32]
 80139c4:	6143      	str	r3, [r0, #20]
 80139c6:	2d09      	cmp	r5, #9
 80139c8:	f04f 0301 	mov.w	r3, #1
 80139cc:	6103      	str	r3, [r0, #16]
 80139ce:	dd16      	ble.n	80139fe <__s2b+0x72>
 80139d0:	f104 0909 	add.w	r9, r4, #9
 80139d4:	46c8      	mov	r8, r9
 80139d6:	442c      	add	r4, r5
 80139d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80139dc:	4601      	mov	r1, r0
 80139de:	3b30      	subs	r3, #48	; 0x30
 80139e0:	220a      	movs	r2, #10
 80139e2:	4630      	mov	r0, r6
 80139e4:	f7ff ff8c 	bl	8013900 <__multadd>
 80139e8:	45a0      	cmp	r8, r4
 80139ea:	d1f5      	bne.n	80139d8 <__s2b+0x4c>
 80139ec:	f1a5 0408 	sub.w	r4, r5, #8
 80139f0:	444c      	add	r4, r9
 80139f2:	1b2d      	subs	r5, r5, r4
 80139f4:	1963      	adds	r3, r4, r5
 80139f6:	42bb      	cmp	r3, r7
 80139f8:	db04      	blt.n	8013a04 <__s2b+0x78>
 80139fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139fe:	340a      	adds	r4, #10
 8013a00:	2509      	movs	r5, #9
 8013a02:	e7f6      	b.n	80139f2 <__s2b+0x66>
 8013a04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013a08:	4601      	mov	r1, r0
 8013a0a:	3b30      	subs	r3, #48	; 0x30
 8013a0c:	220a      	movs	r2, #10
 8013a0e:	4630      	mov	r0, r6
 8013a10:	f7ff ff76 	bl	8013900 <__multadd>
 8013a14:	e7ee      	b.n	80139f4 <__s2b+0x68>
 8013a16:	bf00      	nop
 8013a18:	08018063 	.word	0x08018063
 8013a1c:	08018074 	.word	0x08018074

08013a20 <__hi0bits>:
 8013a20:	0c03      	lsrs	r3, r0, #16
 8013a22:	041b      	lsls	r3, r3, #16
 8013a24:	b9d3      	cbnz	r3, 8013a5c <__hi0bits+0x3c>
 8013a26:	0400      	lsls	r0, r0, #16
 8013a28:	2310      	movs	r3, #16
 8013a2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013a2e:	bf04      	itt	eq
 8013a30:	0200      	lsleq	r0, r0, #8
 8013a32:	3308      	addeq	r3, #8
 8013a34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013a38:	bf04      	itt	eq
 8013a3a:	0100      	lsleq	r0, r0, #4
 8013a3c:	3304      	addeq	r3, #4
 8013a3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013a42:	bf04      	itt	eq
 8013a44:	0080      	lsleq	r0, r0, #2
 8013a46:	3302      	addeq	r3, #2
 8013a48:	2800      	cmp	r0, #0
 8013a4a:	db05      	blt.n	8013a58 <__hi0bits+0x38>
 8013a4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013a50:	f103 0301 	add.w	r3, r3, #1
 8013a54:	bf08      	it	eq
 8013a56:	2320      	moveq	r3, #32
 8013a58:	4618      	mov	r0, r3
 8013a5a:	4770      	bx	lr
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	e7e4      	b.n	8013a2a <__hi0bits+0xa>

08013a60 <__lo0bits>:
 8013a60:	6803      	ldr	r3, [r0, #0]
 8013a62:	f013 0207 	ands.w	r2, r3, #7
 8013a66:	d00c      	beq.n	8013a82 <__lo0bits+0x22>
 8013a68:	07d9      	lsls	r1, r3, #31
 8013a6a:	d422      	bmi.n	8013ab2 <__lo0bits+0x52>
 8013a6c:	079a      	lsls	r2, r3, #30
 8013a6e:	bf49      	itett	mi
 8013a70:	085b      	lsrmi	r3, r3, #1
 8013a72:	089b      	lsrpl	r3, r3, #2
 8013a74:	6003      	strmi	r3, [r0, #0]
 8013a76:	2201      	movmi	r2, #1
 8013a78:	bf5c      	itt	pl
 8013a7a:	6003      	strpl	r3, [r0, #0]
 8013a7c:	2202      	movpl	r2, #2
 8013a7e:	4610      	mov	r0, r2
 8013a80:	4770      	bx	lr
 8013a82:	b299      	uxth	r1, r3
 8013a84:	b909      	cbnz	r1, 8013a8a <__lo0bits+0x2a>
 8013a86:	0c1b      	lsrs	r3, r3, #16
 8013a88:	2210      	movs	r2, #16
 8013a8a:	b2d9      	uxtb	r1, r3
 8013a8c:	b909      	cbnz	r1, 8013a92 <__lo0bits+0x32>
 8013a8e:	3208      	adds	r2, #8
 8013a90:	0a1b      	lsrs	r3, r3, #8
 8013a92:	0719      	lsls	r1, r3, #28
 8013a94:	bf04      	itt	eq
 8013a96:	091b      	lsreq	r3, r3, #4
 8013a98:	3204      	addeq	r2, #4
 8013a9a:	0799      	lsls	r1, r3, #30
 8013a9c:	bf04      	itt	eq
 8013a9e:	089b      	lsreq	r3, r3, #2
 8013aa0:	3202      	addeq	r2, #2
 8013aa2:	07d9      	lsls	r1, r3, #31
 8013aa4:	d403      	bmi.n	8013aae <__lo0bits+0x4e>
 8013aa6:	085b      	lsrs	r3, r3, #1
 8013aa8:	f102 0201 	add.w	r2, r2, #1
 8013aac:	d003      	beq.n	8013ab6 <__lo0bits+0x56>
 8013aae:	6003      	str	r3, [r0, #0]
 8013ab0:	e7e5      	b.n	8013a7e <__lo0bits+0x1e>
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	e7e3      	b.n	8013a7e <__lo0bits+0x1e>
 8013ab6:	2220      	movs	r2, #32
 8013ab8:	e7e1      	b.n	8013a7e <__lo0bits+0x1e>
	...

08013abc <__i2b>:
 8013abc:	b510      	push	{r4, lr}
 8013abe:	460c      	mov	r4, r1
 8013ac0:	2101      	movs	r1, #1
 8013ac2:	f7ff febb 	bl	801383c <_Balloc>
 8013ac6:	4602      	mov	r2, r0
 8013ac8:	b928      	cbnz	r0, 8013ad6 <__i2b+0x1a>
 8013aca:	4b05      	ldr	r3, [pc, #20]	; (8013ae0 <__i2b+0x24>)
 8013acc:	4805      	ldr	r0, [pc, #20]	; (8013ae4 <__i2b+0x28>)
 8013ace:	f240 1145 	movw	r1, #325	; 0x145
 8013ad2:	f001 ffc5 	bl	8015a60 <__assert_func>
 8013ad6:	2301      	movs	r3, #1
 8013ad8:	6144      	str	r4, [r0, #20]
 8013ada:	6103      	str	r3, [r0, #16]
 8013adc:	bd10      	pop	{r4, pc}
 8013ade:	bf00      	nop
 8013ae0:	08018063 	.word	0x08018063
 8013ae4:	08018074 	.word	0x08018074

08013ae8 <__multiply>:
 8013ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aec:	4691      	mov	r9, r2
 8013aee:	690a      	ldr	r2, [r1, #16]
 8013af0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013af4:	429a      	cmp	r2, r3
 8013af6:	bfb8      	it	lt
 8013af8:	460b      	movlt	r3, r1
 8013afa:	460c      	mov	r4, r1
 8013afc:	bfbc      	itt	lt
 8013afe:	464c      	movlt	r4, r9
 8013b00:	4699      	movlt	r9, r3
 8013b02:	6927      	ldr	r7, [r4, #16]
 8013b04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013b08:	68a3      	ldr	r3, [r4, #8]
 8013b0a:	6861      	ldr	r1, [r4, #4]
 8013b0c:	eb07 060a 	add.w	r6, r7, sl
 8013b10:	42b3      	cmp	r3, r6
 8013b12:	b085      	sub	sp, #20
 8013b14:	bfb8      	it	lt
 8013b16:	3101      	addlt	r1, #1
 8013b18:	f7ff fe90 	bl	801383c <_Balloc>
 8013b1c:	b930      	cbnz	r0, 8013b2c <__multiply+0x44>
 8013b1e:	4602      	mov	r2, r0
 8013b20:	4b44      	ldr	r3, [pc, #272]	; (8013c34 <__multiply+0x14c>)
 8013b22:	4845      	ldr	r0, [pc, #276]	; (8013c38 <__multiply+0x150>)
 8013b24:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8013b28:	f001 ff9a 	bl	8015a60 <__assert_func>
 8013b2c:	f100 0514 	add.w	r5, r0, #20
 8013b30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013b34:	462b      	mov	r3, r5
 8013b36:	2200      	movs	r2, #0
 8013b38:	4543      	cmp	r3, r8
 8013b3a:	d321      	bcc.n	8013b80 <__multiply+0x98>
 8013b3c:	f104 0314 	add.w	r3, r4, #20
 8013b40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013b44:	f109 0314 	add.w	r3, r9, #20
 8013b48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013b4c:	9202      	str	r2, [sp, #8]
 8013b4e:	1b3a      	subs	r2, r7, r4
 8013b50:	3a15      	subs	r2, #21
 8013b52:	f022 0203 	bic.w	r2, r2, #3
 8013b56:	3204      	adds	r2, #4
 8013b58:	f104 0115 	add.w	r1, r4, #21
 8013b5c:	428f      	cmp	r7, r1
 8013b5e:	bf38      	it	cc
 8013b60:	2204      	movcc	r2, #4
 8013b62:	9201      	str	r2, [sp, #4]
 8013b64:	9a02      	ldr	r2, [sp, #8]
 8013b66:	9303      	str	r3, [sp, #12]
 8013b68:	429a      	cmp	r2, r3
 8013b6a:	d80c      	bhi.n	8013b86 <__multiply+0x9e>
 8013b6c:	2e00      	cmp	r6, #0
 8013b6e:	dd03      	ble.n	8013b78 <__multiply+0x90>
 8013b70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d05b      	beq.n	8013c30 <__multiply+0x148>
 8013b78:	6106      	str	r6, [r0, #16]
 8013b7a:	b005      	add	sp, #20
 8013b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b80:	f843 2b04 	str.w	r2, [r3], #4
 8013b84:	e7d8      	b.n	8013b38 <__multiply+0x50>
 8013b86:	f8b3 a000 	ldrh.w	sl, [r3]
 8013b8a:	f1ba 0f00 	cmp.w	sl, #0
 8013b8e:	d024      	beq.n	8013bda <__multiply+0xf2>
 8013b90:	f104 0e14 	add.w	lr, r4, #20
 8013b94:	46a9      	mov	r9, r5
 8013b96:	f04f 0c00 	mov.w	ip, #0
 8013b9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013b9e:	f8d9 1000 	ldr.w	r1, [r9]
 8013ba2:	fa1f fb82 	uxth.w	fp, r2
 8013ba6:	b289      	uxth	r1, r1
 8013ba8:	fb0a 110b 	mla	r1, sl, fp, r1
 8013bac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013bb0:	f8d9 2000 	ldr.w	r2, [r9]
 8013bb4:	4461      	add	r1, ip
 8013bb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013bba:	fb0a c20b 	mla	r2, sl, fp, ip
 8013bbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013bc2:	b289      	uxth	r1, r1
 8013bc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013bc8:	4577      	cmp	r7, lr
 8013bca:	f849 1b04 	str.w	r1, [r9], #4
 8013bce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013bd2:	d8e2      	bhi.n	8013b9a <__multiply+0xb2>
 8013bd4:	9a01      	ldr	r2, [sp, #4]
 8013bd6:	f845 c002 	str.w	ip, [r5, r2]
 8013bda:	9a03      	ldr	r2, [sp, #12]
 8013bdc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013be0:	3304      	adds	r3, #4
 8013be2:	f1b9 0f00 	cmp.w	r9, #0
 8013be6:	d021      	beq.n	8013c2c <__multiply+0x144>
 8013be8:	6829      	ldr	r1, [r5, #0]
 8013bea:	f104 0c14 	add.w	ip, r4, #20
 8013bee:	46ae      	mov	lr, r5
 8013bf0:	f04f 0a00 	mov.w	sl, #0
 8013bf4:	f8bc b000 	ldrh.w	fp, [ip]
 8013bf8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013bfc:	fb09 220b 	mla	r2, r9, fp, r2
 8013c00:	4452      	add	r2, sl
 8013c02:	b289      	uxth	r1, r1
 8013c04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013c08:	f84e 1b04 	str.w	r1, [lr], #4
 8013c0c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013c10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013c14:	f8be 1000 	ldrh.w	r1, [lr]
 8013c18:	fb09 110a 	mla	r1, r9, sl, r1
 8013c1c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8013c20:	4567      	cmp	r7, ip
 8013c22:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013c26:	d8e5      	bhi.n	8013bf4 <__multiply+0x10c>
 8013c28:	9a01      	ldr	r2, [sp, #4]
 8013c2a:	50a9      	str	r1, [r5, r2]
 8013c2c:	3504      	adds	r5, #4
 8013c2e:	e799      	b.n	8013b64 <__multiply+0x7c>
 8013c30:	3e01      	subs	r6, #1
 8013c32:	e79b      	b.n	8013b6c <__multiply+0x84>
 8013c34:	08018063 	.word	0x08018063
 8013c38:	08018074 	.word	0x08018074

08013c3c <__pow5mult>:
 8013c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c40:	4615      	mov	r5, r2
 8013c42:	f012 0203 	ands.w	r2, r2, #3
 8013c46:	4606      	mov	r6, r0
 8013c48:	460f      	mov	r7, r1
 8013c4a:	d007      	beq.n	8013c5c <__pow5mult+0x20>
 8013c4c:	4c25      	ldr	r4, [pc, #148]	; (8013ce4 <__pow5mult+0xa8>)
 8013c4e:	3a01      	subs	r2, #1
 8013c50:	2300      	movs	r3, #0
 8013c52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013c56:	f7ff fe53 	bl	8013900 <__multadd>
 8013c5a:	4607      	mov	r7, r0
 8013c5c:	10ad      	asrs	r5, r5, #2
 8013c5e:	d03d      	beq.n	8013cdc <__pow5mult+0xa0>
 8013c60:	69f4      	ldr	r4, [r6, #28]
 8013c62:	b97c      	cbnz	r4, 8013c84 <__pow5mult+0x48>
 8013c64:	2010      	movs	r0, #16
 8013c66:	f7ff fd35 	bl	80136d4 <malloc>
 8013c6a:	4602      	mov	r2, r0
 8013c6c:	61f0      	str	r0, [r6, #28]
 8013c6e:	b928      	cbnz	r0, 8013c7c <__pow5mult+0x40>
 8013c70:	4b1d      	ldr	r3, [pc, #116]	; (8013ce8 <__pow5mult+0xac>)
 8013c72:	481e      	ldr	r0, [pc, #120]	; (8013cec <__pow5mult+0xb0>)
 8013c74:	f240 11b3 	movw	r1, #435	; 0x1b3
 8013c78:	f001 fef2 	bl	8015a60 <__assert_func>
 8013c7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013c80:	6004      	str	r4, [r0, #0]
 8013c82:	60c4      	str	r4, [r0, #12]
 8013c84:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8013c88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013c8c:	b94c      	cbnz	r4, 8013ca2 <__pow5mult+0x66>
 8013c8e:	f240 2171 	movw	r1, #625	; 0x271
 8013c92:	4630      	mov	r0, r6
 8013c94:	f7ff ff12 	bl	8013abc <__i2b>
 8013c98:	2300      	movs	r3, #0
 8013c9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8013c9e:	4604      	mov	r4, r0
 8013ca0:	6003      	str	r3, [r0, #0]
 8013ca2:	f04f 0900 	mov.w	r9, #0
 8013ca6:	07eb      	lsls	r3, r5, #31
 8013ca8:	d50a      	bpl.n	8013cc0 <__pow5mult+0x84>
 8013caa:	4639      	mov	r1, r7
 8013cac:	4622      	mov	r2, r4
 8013cae:	4630      	mov	r0, r6
 8013cb0:	f7ff ff1a 	bl	8013ae8 <__multiply>
 8013cb4:	4639      	mov	r1, r7
 8013cb6:	4680      	mov	r8, r0
 8013cb8:	4630      	mov	r0, r6
 8013cba:	f7ff fdff 	bl	80138bc <_Bfree>
 8013cbe:	4647      	mov	r7, r8
 8013cc0:	106d      	asrs	r5, r5, #1
 8013cc2:	d00b      	beq.n	8013cdc <__pow5mult+0xa0>
 8013cc4:	6820      	ldr	r0, [r4, #0]
 8013cc6:	b938      	cbnz	r0, 8013cd8 <__pow5mult+0x9c>
 8013cc8:	4622      	mov	r2, r4
 8013cca:	4621      	mov	r1, r4
 8013ccc:	4630      	mov	r0, r6
 8013cce:	f7ff ff0b 	bl	8013ae8 <__multiply>
 8013cd2:	6020      	str	r0, [r4, #0]
 8013cd4:	f8c0 9000 	str.w	r9, [r0]
 8013cd8:	4604      	mov	r4, r0
 8013cda:	e7e4      	b.n	8013ca6 <__pow5mult+0x6a>
 8013cdc:	4638      	mov	r0, r7
 8013cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ce2:	bf00      	nop
 8013ce4:	080181c0 	.word	0x080181c0
 8013ce8:	08017ff4 	.word	0x08017ff4
 8013cec:	08018074 	.word	0x08018074

08013cf0 <__lshift>:
 8013cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cf4:	460c      	mov	r4, r1
 8013cf6:	6849      	ldr	r1, [r1, #4]
 8013cf8:	6923      	ldr	r3, [r4, #16]
 8013cfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013cfe:	68a3      	ldr	r3, [r4, #8]
 8013d00:	4607      	mov	r7, r0
 8013d02:	4691      	mov	r9, r2
 8013d04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013d08:	f108 0601 	add.w	r6, r8, #1
 8013d0c:	42b3      	cmp	r3, r6
 8013d0e:	db0b      	blt.n	8013d28 <__lshift+0x38>
 8013d10:	4638      	mov	r0, r7
 8013d12:	f7ff fd93 	bl	801383c <_Balloc>
 8013d16:	4605      	mov	r5, r0
 8013d18:	b948      	cbnz	r0, 8013d2e <__lshift+0x3e>
 8013d1a:	4602      	mov	r2, r0
 8013d1c:	4b28      	ldr	r3, [pc, #160]	; (8013dc0 <__lshift+0xd0>)
 8013d1e:	4829      	ldr	r0, [pc, #164]	; (8013dc4 <__lshift+0xd4>)
 8013d20:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8013d24:	f001 fe9c 	bl	8015a60 <__assert_func>
 8013d28:	3101      	adds	r1, #1
 8013d2a:	005b      	lsls	r3, r3, #1
 8013d2c:	e7ee      	b.n	8013d0c <__lshift+0x1c>
 8013d2e:	2300      	movs	r3, #0
 8013d30:	f100 0114 	add.w	r1, r0, #20
 8013d34:	f100 0210 	add.w	r2, r0, #16
 8013d38:	4618      	mov	r0, r3
 8013d3a:	4553      	cmp	r3, sl
 8013d3c:	db33      	blt.n	8013da6 <__lshift+0xb6>
 8013d3e:	6920      	ldr	r0, [r4, #16]
 8013d40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013d44:	f104 0314 	add.w	r3, r4, #20
 8013d48:	f019 091f 	ands.w	r9, r9, #31
 8013d4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013d50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013d54:	d02b      	beq.n	8013dae <__lshift+0xbe>
 8013d56:	f1c9 0e20 	rsb	lr, r9, #32
 8013d5a:	468a      	mov	sl, r1
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	6818      	ldr	r0, [r3, #0]
 8013d60:	fa00 f009 	lsl.w	r0, r0, r9
 8013d64:	4310      	orrs	r0, r2
 8013d66:	f84a 0b04 	str.w	r0, [sl], #4
 8013d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d6e:	459c      	cmp	ip, r3
 8013d70:	fa22 f20e 	lsr.w	r2, r2, lr
 8013d74:	d8f3      	bhi.n	8013d5e <__lshift+0x6e>
 8013d76:	ebac 0304 	sub.w	r3, ip, r4
 8013d7a:	3b15      	subs	r3, #21
 8013d7c:	f023 0303 	bic.w	r3, r3, #3
 8013d80:	3304      	adds	r3, #4
 8013d82:	f104 0015 	add.w	r0, r4, #21
 8013d86:	4584      	cmp	ip, r0
 8013d88:	bf38      	it	cc
 8013d8a:	2304      	movcc	r3, #4
 8013d8c:	50ca      	str	r2, [r1, r3]
 8013d8e:	b10a      	cbz	r2, 8013d94 <__lshift+0xa4>
 8013d90:	f108 0602 	add.w	r6, r8, #2
 8013d94:	3e01      	subs	r6, #1
 8013d96:	4638      	mov	r0, r7
 8013d98:	612e      	str	r6, [r5, #16]
 8013d9a:	4621      	mov	r1, r4
 8013d9c:	f7ff fd8e 	bl	80138bc <_Bfree>
 8013da0:	4628      	mov	r0, r5
 8013da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013da6:	f842 0f04 	str.w	r0, [r2, #4]!
 8013daa:	3301      	adds	r3, #1
 8013dac:	e7c5      	b.n	8013d3a <__lshift+0x4a>
 8013dae:	3904      	subs	r1, #4
 8013db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8013db4:	f841 2f04 	str.w	r2, [r1, #4]!
 8013db8:	459c      	cmp	ip, r3
 8013dba:	d8f9      	bhi.n	8013db0 <__lshift+0xc0>
 8013dbc:	e7ea      	b.n	8013d94 <__lshift+0xa4>
 8013dbe:	bf00      	nop
 8013dc0:	08018063 	.word	0x08018063
 8013dc4:	08018074 	.word	0x08018074

08013dc8 <__mcmp>:
 8013dc8:	b530      	push	{r4, r5, lr}
 8013dca:	6902      	ldr	r2, [r0, #16]
 8013dcc:	690c      	ldr	r4, [r1, #16]
 8013dce:	1b12      	subs	r2, r2, r4
 8013dd0:	d10e      	bne.n	8013df0 <__mcmp+0x28>
 8013dd2:	f100 0314 	add.w	r3, r0, #20
 8013dd6:	3114      	adds	r1, #20
 8013dd8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013ddc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013de0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013de4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013de8:	42a5      	cmp	r5, r4
 8013dea:	d003      	beq.n	8013df4 <__mcmp+0x2c>
 8013dec:	d305      	bcc.n	8013dfa <__mcmp+0x32>
 8013dee:	2201      	movs	r2, #1
 8013df0:	4610      	mov	r0, r2
 8013df2:	bd30      	pop	{r4, r5, pc}
 8013df4:	4283      	cmp	r3, r0
 8013df6:	d3f3      	bcc.n	8013de0 <__mcmp+0x18>
 8013df8:	e7fa      	b.n	8013df0 <__mcmp+0x28>
 8013dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8013dfe:	e7f7      	b.n	8013df0 <__mcmp+0x28>

08013e00 <__mdiff>:
 8013e00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e04:	460c      	mov	r4, r1
 8013e06:	4606      	mov	r6, r0
 8013e08:	4611      	mov	r1, r2
 8013e0a:	4620      	mov	r0, r4
 8013e0c:	4690      	mov	r8, r2
 8013e0e:	f7ff ffdb 	bl	8013dc8 <__mcmp>
 8013e12:	1e05      	subs	r5, r0, #0
 8013e14:	d110      	bne.n	8013e38 <__mdiff+0x38>
 8013e16:	4629      	mov	r1, r5
 8013e18:	4630      	mov	r0, r6
 8013e1a:	f7ff fd0f 	bl	801383c <_Balloc>
 8013e1e:	b930      	cbnz	r0, 8013e2e <__mdiff+0x2e>
 8013e20:	4b3a      	ldr	r3, [pc, #232]	; (8013f0c <__mdiff+0x10c>)
 8013e22:	4602      	mov	r2, r0
 8013e24:	f240 2137 	movw	r1, #567	; 0x237
 8013e28:	4839      	ldr	r0, [pc, #228]	; (8013f10 <__mdiff+0x110>)
 8013e2a:	f001 fe19 	bl	8015a60 <__assert_func>
 8013e2e:	2301      	movs	r3, #1
 8013e30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013e34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e38:	bfa4      	itt	ge
 8013e3a:	4643      	movge	r3, r8
 8013e3c:	46a0      	movge	r8, r4
 8013e3e:	4630      	mov	r0, r6
 8013e40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013e44:	bfa6      	itte	ge
 8013e46:	461c      	movge	r4, r3
 8013e48:	2500      	movge	r5, #0
 8013e4a:	2501      	movlt	r5, #1
 8013e4c:	f7ff fcf6 	bl	801383c <_Balloc>
 8013e50:	b920      	cbnz	r0, 8013e5c <__mdiff+0x5c>
 8013e52:	4b2e      	ldr	r3, [pc, #184]	; (8013f0c <__mdiff+0x10c>)
 8013e54:	4602      	mov	r2, r0
 8013e56:	f240 2145 	movw	r1, #581	; 0x245
 8013e5a:	e7e5      	b.n	8013e28 <__mdiff+0x28>
 8013e5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013e60:	6926      	ldr	r6, [r4, #16]
 8013e62:	60c5      	str	r5, [r0, #12]
 8013e64:	f104 0914 	add.w	r9, r4, #20
 8013e68:	f108 0514 	add.w	r5, r8, #20
 8013e6c:	f100 0e14 	add.w	lr, r0, #20
 8013e70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013e74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013e78:	f108 0210 	add.w	r2, r8, #16
 8013e7c:	46f2      	mov	sl, lr
 8013e7e:	2100      	movs	r1, #0
 8013e80:	f859 3b04 	ldr.w	r3, [r9], #4
 8013e84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013e88:	fa11 f88b 	uxtah	r8, r1, fp
 8013e8c:	b299      	uxth	r1, r3
 8013e8e:	0c1b      	lsrs	r3, r3, #16
 8013e90:	eba8 0801 	sub.w	r8, r8, r1
 8013e94:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013e98:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013e9c:	fa1f f888 	uxth.w	r8, r8
 8013ea0:	1419      	asrs	r1, r3, #16
 8013ea2:	454e      	cmp	r6, r9
 8013ea4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013ea8:	f84a 3b04 	str.w	r3, [sl], #4
 8013eac:	d8e8      	bhi.n	8013e80 <__mdiff+0x80>
 8013eae:	1b33      	subs	r3, r6, r4
 8013eb0:	3b15      	subs	r3, #21
 8013eb2:	f023 0303 	bic.w	r3, r3, #3
 8013eb6:	3304      	adds	r3, #4
 8013eb8:	3415      	adds	r4, #21
 8013eba:	42a6      	cmp	r6, r4
 8013ebc:	bf38      	it	cc
 8013ebe:	2304      	movcc	r3, #4
 8013ec0:	441d      	add	r5, r3
 8013ec2:	4473      	add	r3, lr
 8013ec4:	469e      	mov	lr, r3
 8013ec6:	462e      	mov	r6, r5
 8013ec8:	4566      	cmp	r6, ip
 8013eca:	d30e      	bcc.n	8013eea <__mdiff+0xea>
 8013ecc:	f10c 0203 	add.w	r2, ip, #3
 8013ed0:	1b52      	subs	r2, r2, r5
 8013ed2:	f022 0203 	bic.w	r2, r2, #3
 8013ed6:	3d03      	subs	r5, #3
 8013ed8:	45ac      	cmp	ip, r5
 8013eda:	bf38      	it	cc
 8013edc:	2200      	movcc	r2, #0
 8013ede:	4413      	add	r3, r2
 8013ee0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013ee4:	b17a      	cbz	r2, 8013f06 <__mdiff+0x106>
 8013ee6:	6107      	str	r7, [r0, #16]
 8013ee8:	e7a4      	b.n	8013e34 <__mdiff+0x34>
 8013eea:	f856 8b04 	ldr.w	r8, [r6], #4
 8013eee:	fa11 f288 	uxtah	r2, r1, r8
 8013ef2:	1414      	asrs	r4, r2, #16
 8013ef4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013ef8:	b292      	uxth	r2, r2
 8013efa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013efe:	f84e 2b04 	str.w	r2, [lr], #4
 8013f02:	1421      	asrs	r1, r4, #16
 8013f04:	e7e0      	b.n	8013ec8 <__mdiff+0xc8>
 8013f06:	3f01      	subs	r7, #1
 8013f08:	e7ea      	b.n	8013ee0 <__mdiff+0xe0>
 8013f0a:	bf00      	nop
 8013f0c:	08018063 	.word	0x08018063
 8013f10:	08018074 	.word	0x08018074

08013f14 <__ulp>:
 8013f14:	b082      	sub	sp, #8
 8013f16:	ed8d 0b00 	vstr	d0, [sp]
 8013f1a:	9a01      	ldr	r2, [sp, #4]
 8013f1c:	4b0f      	ldr	r3, [pc, #60]	; (8013f5c <__ulp+0x48>)
 8013f1e:	4013      	ands	r3, r2
 8013f20:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	dc08      	bgt.n	8013f3a <__ulp+0x26>
 8013f28:	425b      	negs	r3, r3
 8013f2a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8013f2e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013f32:	da04      	bge.n	8013f3e <__ulp+0x2a>
 8013f34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013f38:	4113      	asrs	r3, r2
 8013f3a:	2200      	movs	r2, #0
 8013f3c:	e008      	b.n	8013f50 <__ulp+0x3c>
 8013f3e:	f1a2 0314 	sub.w	r3, r2, #20
 8013f42:	2b1e      	cmp	r3, #30
 8013f44:	bfda      	itte	le
 8013f46:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8013f4a:	40da      	lsrle	r2, r3
 8013f4c:	2201      	movgt	r2, #1
 8013f4e:	2300      	movs	r3, #0
 8013f50:	4619      	mov	r1, r3
 8013f52:	4610      	mov	r0, r2
 8013f54:	ec41 0b10 	vmov	d0, r0, r1
 8013f58:	b002      	add	sp, #8
 8013f5a:	4770      	bx	lr
 8013f5c:	7ff00000 	.word	0x7ff00000

08013f60 <__b2d>:
 8013f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f64:	6906      	ldr	r6, [r0, #16]
 8013f66:	f100 0814 	add.w	r8, r0, #20
 8013f6a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013f6e:	1f37      	subs	r7, r6, #4
 8013f70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013f74:	4610      	mov	r0, r2
 8013f76:	f7ff fd53 	bl	8013a20 <__hi0bits>
 8013f7a:	f1c0 0320 	rsb	r3, r0, #32
 8013f7e:	280a      	cmp	r0, #10
 8013f80:	600b      	str	r3, [r1, #0]
 8013f82:	491b      	ldr	r1, [pc, #108]	; (8013ff0 <__b2d+0x90>)
 8013f84:	dc15      	bgt.n	8013fb2 <__b2d+0x52>
 8013f86:	f1c0 0c0b 	rsb	ip, r0, #11
 8013f8a:	fa22 f30c 	lsr.w	r3, r2, ip
 8013f8e:	45b8      	cmp	r8, r7
 8013f90:	ea43 0501 	orr.w	r5, r3, r1
 8013f94:	bf34      	ite	cc
 8013f96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013f9a:	2300      	movcs	r3, #0
 8013f9c:	3015      	adds	r0, #21
 8013f9e:	fa02 f000 	lsl.w	r0, r2, r0
 8013fa2:	fa23 f30c 	lsr.w	r3, r3, ip
 8013fa6:	4303      	orrs	r3, r0
 8013fa8:	461c      	mov	r4, r3
 8013faa:	ec45 4b10 	vmov	d0, r4, r5
 8013fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fb2:	45b8      	cmp	r8, r7
 8013fb4:	bf3a      	itte	cc
 8013fb6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013fba:	f1a6 0708 	subcc.w	r7, r6, #8
 8013fbe:	2300      	movcs	r3, #0
 8013fc0:	380b      	subs	r0, #11
 8013fc2:	d012      	beq.n	8013fea <__b2d+0x8a>
 8013fc4:	f1c0 0120 	rsb	r1, r0, #32
 8013fc8:	fa23 f401 	lsr.w	r4, r3, r1
 8013fcc:	4082      	lsls	r2, r0
 8013fce:	4322      	orrs	r2, r4
 8013fd0:	4547      	cmp	r7, r8
 8013fd2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8013fd6:	bf8c      	ite	hi
 8013fd8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013fdc:	2200      	movls	r2, #0
 8013fde:	4083      	lsls	r3, r0
 8013fe0:	40ca      	lsrs	r2, r1
 8013fe2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013fe6:	4313      	orrs	r3, r2
 8013fe8:	e7de      	b.n	8013fa8 <__b2d+0x48>
 8013fea:	ea42 0501 	orr.w	r5, r2, r1
 8013fee:	e7db      	b.n	8013fa8 <__b2d+0x48>
 8013ff0:	3ff00000 	.word	0x3ff00000

08013ff4 <__d2b>:
 8013ff4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013ff8:	460f      	mov	r7, r1
 8013ffa:	2101      	movs	r1, #1
 8013ffc:	ec59 8b10 	vmov	r8, r9, d0
 8014000:	4616      	mov	r6, r2
 8014002:	f7ff fc1b 	bl	801383c <_Balloc>
 8014006:	4604      	mov	r4, r0
 8014008:	b930      	cbnz	r0, 8014018 <__d2b+0x24>
 801400a:	4602      	mov	r2, r0
 801400c:	4b24      	ldr	r3, [pc, #144]	; (80140a0 <__d2b+0xac>)
 801400e:	4825      	ldr	r0, [pc, #148]	; (80140a4 <__d2b+0xb0>)
 8014010:	f240 310f 	movw	r1, #783	; 0x30f
 8014014:	f001 fd24 	bl	8015a60 <__assert_func>
 8014018:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801401c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014020:	bb2d      	cbnz	r5, 801406e <__d2b+0x7a>
 8014022:	9301      	str	r3, [sp, #4]
 8014024:	f1b8 0300 	subs.w	r3, r8, #0
 8014028:	d026      	beq.n	8014078 <__d2b+0x84>
 801402a:	4668      	mov	r0, sp
 801402c:	9300      	str	r3, [sp, #0]
 801402e:	f7ff fd17 	bl	8013a60 <__lo0bits>
 8014032:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014036:	b1e8      	cbz	r0, 8014074 <__d2b+0x80>
 8014038:	f1c0 0320 	rsb	r3, r0, #32
 801403c:	fa02 f303 	lsl.w	r3, r2, r3
 8014040:	430b      	orrs	r3, r1
 8014042:	40c2      	lsrs	r2, r0
 8014044:	6163      	str	r3, [r4, #20]
 8014046:	9201      	str	r2, [sp, #4]
 8014048:	9b01      	ldr	r3, [sp, #4]
 801404a:	61a3      	str	r3, [r4, #24]
 801404c:	2b00      	cmp	r3, #0
 801404e:	bf14      	ite	ne
 8014050:	2202      	movne	r2, #2
 8014052:	2201      	moveq	r2, #1
 8014054:	6122      	str	r2, [r4, #16]
 8014056:	b1bd      	cbz	r5, 8014088 <__d2b+0x94>
 8014058:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801405c:	4405      	add	r5, r0
 801405e:	603d      	str	r5, [r7, #0]
 8014060:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014064:	6030      	str	r0, [r6, #0]
 8014066:	4620      	mov	r0, r4
 8014068:	b003      	add	sp, #12
 801406a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801406e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014072:	e7d6      	b.n	8014022 <__d2b+0x2e>
 8014074:	6161      	str	r1, [r4, #20]
 8014076:	e7e7      	b.n	8014048 <__d2b+0x54>
 8014078:	a801      	add	r0, sp, #4
 801407a:	f7ff fcf1 	bl	8013a60 <__lo0bits>
 801407e:	9b01      	ldr	r3, [sp, #4]
 8014080:	6163      	str	r3, [r4, #20]
 8014082:	3020      	adds	r0, #32
 8014084:	2201      	movs	r2, #1
 8014086:	e7e5      	b.n	8014054 <__d2b+0x60>
 8014088:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801408c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014090:	6038      	str	r0, [r7, #0]
 8014092:	6918      	ldr	r0, [r3, #16]
 8014094:	f7ff fcc4 	bl	8013a20 <__hi0bits>
 8014098:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801409c:	e7e2      	b.n	8014064 <__d2b+0x70>
 801409e:	bf00      	nop
 80140a0:	08018063 	.word	0x08018063
 80140a4:	08018074 	.word	0x08018074

080140a8 <__ratio>:
 80140a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140ac:	4688      	mov	r8, r1
 80140ae:	4669      	mov	r1, sp
 80140b0:	4681      	mov	r9, r0
 80140b2:	f7ff ff55 	bl	8013f60 <__b2d>
 80140b6:	a901      	add	r1, sp, #4
 80140b8:	4640      	mov	r0, r8
 80140ba:	ec55 4b10 	vmov	r4, r5, d0
 80140be:	f7ff ff4f 	bl	8013f60 <__b2d>
 80140c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80140c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80140ca:	eba3 0c02 	sub.w	ip, r3, r2
 80140ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 80140d2:	1a9b      	subs	r3, r3, r2
 80140d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80140d8:	ec51 0b10 	vmov	r0, r1, d0
 80140dc:	2b00      	cmp	r3, #0
 80140de:	bfd6      	itet	le
 80140e0:	460a      	movle	r2, r1
 80140e2:	462a      	movgt	r2, r5
 80140e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80140e8:	468b      	mov	fp, r1
 80140ea:	462f      	mov	r7, r5
 80140ec:	bfd4      	ite	le
 80140ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80140f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80140f6:	4620      	mov	r0, r4
 80140f8:	ee10 2a10 	vmov	r2, s0
 80140fc:	465b      	mov	r3, fp
 80140fe:	4639      	mov	r1, r7
 8014100:	f7ec fbcc 	bl	800089c <__aeabi_ddiv>
 8014104:	ec41 0b10 	vmov	d0, r0, r1
 8014108:	b003      	add	sp, #12
 801410a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801410e <__copybits>:
 801410e:	3901      	subs	r1, #1
 8014110:	b570      	push	{r4, r5, r6, lr}
 8014112:	1149      	asrs	r1, r1, #5
 8014114:	6914      	ldr	r4, [r2, #16]
 8014116:	3101      	adds	r1, #1
 8014118:	f102 0314 	add.w	r3, r2, #20
 801411c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014120:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014124:	1f05      	subs	r5, r0, #4
 8014126:	42a3      	cmp	r3, r4
 8014128:	d30c      	bcc.n	8014144 <__copybits+0x36>
 801412a:	1aa3      	subs	r3, r4, r2
 801412c:	3b11      	subs	r3, #17
 801412e:	f023 0303 	bic.w	r3, r3, #3
 8014132:	3211      	adds	r2, #17
 8014134:	42a2      	cmp	r2, r4
 8014136:	bf88      	it	hi
 8014138:	2300      	movhi	r3, #0
 801413a:	4418      	add	r0, r3
 801413c:	2300      	movs	r3, #0
 801413e:	4288      	cmp	r0, r1
 8014140:	d305      	bcc.n	801414e <__copybits+0x40>
 8014142:	bd70      	pop	{r4, r5, r6, pc}
 8014144:	f853 6b04 	ldr.w	r6, [r3], #4
 8014148:	f845 6f04 	str.w	r6, [r5, #4]!
 801414c:	e7eb      	b.n	8014126 <__copybits+0x18>
 801414e:	f840 3b04 	str.w	r3, [r0], #4
 8014152:	e7f4      	b.n	801413e <__copybits+0x30>

08014154 <__any_on>:
 8014154:	f100 0214 	add.w	r2, r0, #20
 8014158:	6900      	ldr	r0, [r0, #16]
 801415a:	114b      	asrs	r3, r1, #5
 801415c:	4298      	cmp	r0, r3
 801415e:	b510      	push	{r4, lr}
 8014160:	db11      	blt.n	8014186 <__any_on+0x32>
 8014162:	dd0a      	ble.n	801417a <__any_on+0x26>
 8014164:	f011 011f 	ands.w	r1, r1, #31
 8014168:	d007      	beq.n	801417a <__any_on+0x26>
 801416a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801416e:	fa24 f001 	lsr.w	r0, r4, r1
 8014172:	fa00 f101 	lsl.w	r1, r0, r1
 8014176:	428c      	cmp	r4, r1
 8014178:	d10b      	bne.n	8014192 <__any_on+0x3e>
 801417a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801417e:	4293      	cmp	r3, r2
 8014180:	d803      	bhi.n	801418a <__any_on+0x36>
 8014182:	2000      	movs	r0, #0
 8014184:	bd10      	pop	{r4, pc}
 8014186:	4603      	mov	r3, r0
 8014188:	e7f7      	b.n	801417a <__any_on+0x26>
 801418a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801418e:	2900      	cmp	r1, #0
 8014190:	d0f5      	beq.n	801417e <__any_on+0x2a>
 8014192:	2001      	movs	r0, #1
 8014194:	e7f6      	b.n	8014184 <__any_on+0x30>

08014196 <sulp>:
 8014196:	b570      	push	{r4, r5, r6, lr}
 8014198:	4604      	mov	r4, r0
 801419a:	460d      	mov	r5, r1
 801419c:	ec45 4b10 	vmov	d0, r4, r5
 80141a0:	4616      	mov	r6, r2
 80141a2:	f7ff feb7 	bl	8013f14 <__ulp>
 80141a6:	ec51 0b10 	vmov	r0, r1, d0
 80141aa:	b17e      	cbz	r6, 80141cc <sulp+0x36>
 80141ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80141b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	dd09      	ble.n	80141cc <sulp+0x36>
 80141b8:	051b      	lsls	r3, r3, #20
 80141ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80141be:	2400      	movs	r4, #0
 80141c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80141c4:	4622      	mov	r2, r4
 80141c6:	462b      	mov	r3, r5
 80141c8:	f7ec fa3e 	bl	8000648 <__aeabi_dmul>
 80141cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080141d0 <_strtod_l>:
 80141d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141d4:	ed2d 8b02 	vpush	{d8}
 80141d8:	b09b      	sub	sp, #108	; 0x6c
 80141da:	4604      	mov	r4, r0
 80141dc:	9213      	str	r2, [sp, #76]	; 0x4c
 80141de:	2200      	movs	r2, #0
 80141e0:	9216      	str	r2, [sp, #88]	; 0x58
 80141e2:	460d      	mov	r5, r1
 80141e4:	f04f 0800 	mov.w	r8, #0
 80141e8:	f04f 0900 	mov.w	r9, #0
 80141ec:	460a      	mov	r2, r1
 80141ee:	9215      	str	r2, [sp, #84]	; 0x54
 80141f0:	7811      	ldrb	r1, [r2, #0]
 80141f2:	292b      	cmp	r1, #43	; 0x2b
 80141f4:	d04c      	beq.n	8014290 <_strtod_l+0xc0>
 80141f6:	d83a      	bhi.n	801426e <_strtod_l+0x9e>
 80141f8:	290d      	cmp	r1, #13
 80141fa:	d834      	bhi.n	8014266 <_strtod_l+0x96>
 80141fc:	2908      	cmp	r1, #8
 80141fe:	d834      	bhi.n	801426a <_strtod_l+0x9a>
 8014200:	2900      	cmp	r1, #0
 8014202:	d03d      	beq.n	8014280 <_strtod_l+0xb0>
 8014204:	2200      	movs	r2, #0
 8014206:	920a      	str	r2, [sp, #40]	; 0x28
 8014208:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801420a:	7832      	ldrb	r2, [r6, #0]
 801420c:	2a30      	cmp	r2, #48	; 0x30
 801420e:	f040 80b4 	bne.w	801437a <_strtod_l+0x1aa>
 8014212:	7872      	ldrb	r2, [r6, #1]
 8014214:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8014218:	2a58      	cmp	r2, #88	; 0x58
 801421a:	d170      	bne.n	80142fe <_strtod_l+0x12e>
 801421c:	9302      	str	r3, [sp, #8]
 801421e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014220:	9301      	str	r3, [sp, #4]
 8014222:	ab16      	add	r3, sp, #88	; 0x58
 8014224:	9300      	str	r3, [sp, #0]
 8014226:	4a8e      	ldr	r2, [pc, #568]	; (8014460 <_strtod_l+0x290>)
 8014228:	ab17      	add	r3, sp, #92	; 0x5c
 801422a:	a915      	add	r1, sp, #84	; 0x54
 801422c:	4620      	mov	r0, r4
 801422e:	f001 fcb3 	bl	8015b98 <__gethex>
 8014232:	f010 070f 	ands.w	r7, r0, #15
 8014236:	4605      	mov	r5, r0
 8014238:	d005      	beq.n	8014246 <_strtod_l+0x76>
 801423a:	2f06      	cmp	r7, #6
 801423c:	d12a      	bne.n	8014294 <_strtod_l+0xc4>
 801423e:	3601      	adds	r6, #1
 8014240:	2300      	movs	r3, #0
 8014242:	9615      	str	r6, [sp, #84]	; 0x54
 8014244:	930a      	str	r3, [sp, #40]	; 0x28
 8014246:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014248:	2b00      	cmp	r3, #0
 801424a:	f040 857f 	bne.w	8014d4c <_strtod_l+0xb7c>
 801424e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014250:	b1db      	cbz	r3, 801428a <_strtod_l+0xba>
 8014252:	4642      	mov	r2, r8
 8014254:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014258:	ec43 2b10 	vmov	d0, r2, r3
 801425c:	b01b      	add	sp, #108	; 0x6c
 801425e:	ecbd 8b02 	vpop	{d8}
 8014262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014266:	2920      	cmp	r1, #32
 8014268:	d1cc      	bne.n	8014204 <_strtod_l+0x34>
 801426a:	3201      	adds	r2, #1
 801426c:	e7bf      	b.n	80141ee <_strtod_l+0x1e>
 801426e:	292d      	cmp	r1, #45	; 0x2d
 8014270:	d1c8      	bne.n	8014204 <_strtod_l+0x34>
 8014272:	2101      	movs	r1, #1
 8014274:	910a      	str	r1, [sp, #40]	; 0x28
 8014276:	1c51      	adds	r1, r2, #1
 8014278:	9115      	str	r1, [sp, #84]	; 0x54
 801427a:	7852      	ldrb	r2, [r2, #1]
 801427c:	2a00      	cmp	r2, #0
 801427e:	d1c3      	bne.n	8014208 <_strtod_l+0x38>
 8014280:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014282:	9515      	str	r5, [sp, #84]	; 0x54
 8014284:	2b00      	cmp	r3, #0
 8014286:	f040 855f 	bne.w	8014d48 <_strtod_l+0xb78>
 801428a:	4642      	mov	r2, r8
 801428c:	464b      	mov	r3, r9
 801428e:	e7e3      	b.n	8014258 <_strtod_l+0x88>
 8014290:	2100      	movs	r1, #0
 8014292:	e7ef      	b.n	8014274 <_strtod_l+0xa4>
 8014294:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014296:	b13a      	cbz	r2, 80142a8 <_strtod_l+0xd8>
 8014298:	2135      	movs	r1, #53	; 0x35
 801429a:	a818      	add	r0, sp, #96	; 0x60
 801429c:	f7ff ff37 	bl	801410e <__copybits>
 80142a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80142a2:	4620      	mov	r0, r4
 80142a4:	f7ff fb0a 	bl	80138bc <_Bfree>
 80142a8:	3f01      	subs	r7, #1
 80142aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80142ac:	2f04      	cmp	r7, #4
 80142ae:	d806      	bhi.n	80142be <_strtod_l+0xee>
 80142b0:	e8df f007 	tbb	[pc, r7]
 80142b4:	201d0314 	.word	0x201d0314
 80142b8:	14          	.byte	0x14
 80142b9:	00          	.byte	0x00
 80142ba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80142be:	05e9      	lsls	r1, r5, #23
 80142c0:	bf48      	it	mi
 80142c2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80142c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80142ca:	0d1b      	lsrs	r3, r3, #20
 80142cc:	051b      	lsls	r3, r3, #20
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d1b9      	bne.n	8014246 <_strtod_l+0x76>
 80142d2:	f7fe faf7 	bl	80128c4 <__errno>
 80142d6:	2322      	movs	r3, #34	; 0x22
 80142d8:	6003      	str	r3, [r0, #0]
 80142da:	e7b4      	b.n	8014246 <_strtod_l+0x76>
 80142dc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80142e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80142e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80142e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80142ec:	e7e7      	b.n	80142be <_strtod_l+0xee>
 80142ee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014468 <_strtod_l+0x298>
 80142f2:	e7e4      	b.n	80142be <_strtod_l+0xee>
 80142f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80142f8:	f04f 38ff 	mov.w	r8, #4294967295
 80142fc:	e7df      	b.n	80142be <_strtod_l+0xee>
 80142fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014300:	1c5a      	adds	r2, r3, #1
 8014302:	9215      	str	r2, [sp, #84]	; 0x54
 8014304:	785b      	ldrb	r3, [r3, #1]
 8014306:	2b30      	cmp	r3, #48	; 0x30
 8014308:	d0f9      	beq.n	80142fe <_strtod_l+0x12e>
 801430a:	2b00      	cmp	r3, #0
 801430c:	d09b      	beq.n	8014246 <_strtod_l+0x76>
 801430e:	2301      	movs	r3, #1
 8014310:	f04f 0a00 	mov.w	sl, #0
 8014314:	9304      	str	r3, [sp, #16]
 8014316:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014318:	930b      	str	r3, [sp, #44]	; 0x2c
 801431a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801431e:	46d3      	mov	fp, sl
 8014320:	220a      	movs	r2, #10
 8014322:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014324:	7806      	ldrb	r6, [r0, #0]
 8014326:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801432a:	b2d9      	uxtb	r1, r3
 801432c:	2909      	cmp	r1, #9
 801432e:	d926      	bls.n	801437e <_strtod_l+0x1ae>
 8014330:	494c      	ldr	r1, [pc, #304]	; (8014464 <_strtod_l+0x294>)
 8014332:	2201      	movs	r2, #1
 8014334:	f7fe fa13 	bl	801275e <strncmp>
 8014338:	2800      	cmp	r0, #0
 801433a:	d030      	beq.n	801439e <_strtod_l+0x1ce>
 801433c:	2000      	movs	r0, #0
 801433e:	4632      	mov	r2, r6
 8014340:	9005      	str	r0, [sp, #20]
 8014342:	465e      	mov	r6, fp
 8014344:	4603      	mov	r3, r0
 8014346:	2a65      	cmp	r2, #101	; 0x65
 8014348:	d001      	beq.n	801434e <_strtod_l+0x17e>
 801434a:	2a45      	cmp	r2, #69	; 0x45
 801434c:	d113      	bne.n	8014376 <_strtod_l+0x1a6>
 801434e:	b91e      	cbnz	r6, 8014358 <_strtod_l+0x188>
 8014350:	9a04      	ldr	r2, [sp, #16]
 8014352:	4302      	orrs	r2, r0
 8014354:	d094      	beq.n	8014280 <_strtod_l+0xb0>
 8014356:	2600      	movs	r6, #0
 8014358:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801435a:	1c6a      	adds	r2, r5, #1
 801435c:	9215      	str	r2, [sp, #84]	; 0x54
 801435e:	786a      	ldrb	r2, [r5, #1]
 8014360:	2a2b      	cmp	r2, #43	; 0x2b
 8014362:	d074      	beq.n	801444e <_strtod_l+0x27e>
 8014364:	2a2d      	cmp	r2, #45	; 0x2d
 8014366:	d078      	beq.n	801445a <_strtod_l+0x28a>
 8014368:	f04f 0c00 	mov.w	ip, #0
 801436c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014370:	2909      	cmp	r1, #9
 8014372:	d97f      	bls.n	8014474 <_strtod_l+0x2a4>
 8014374:	9515      	str	r5, [sp, #84]	; 0x54
 8014376:	2700      	movs	r7, #0
 8014378:	e09e      	b.n	80144b8 <_strtod_l+0x2e8>
 801437a:	2300      	movs	r3, #0
 801437c:	e7c8      	b.n	8014310 <_strtod_l+0x140>
 801437e:	f1bb 0f08 	cmp.w	fp, #8
 8014382:	bfd8      	it	le
 8014384:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014386:	f100 0001 	add.w	r0, r0, #1
 801438a:	bfda      	itte	le
 801438c:	fb02 3301 	mlale	r3, r2, r1, r3
 8014390:	9309      	strle	r3, [sp, #36]	; 0x24
 8014392:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8014396:	f10b 0b01 	add.w	fp, fp, #1
 801439a:	9015      	str	r0, [sp, #84]	; 0x54
 801439c:	e7c1      	b.n	8014322 <_strtod_l+0x152>
 801439e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80143a0:	1c5a      	adds	r2, r3, #1
 80143a2:	9215      	str	r2, [sp, #84]	; 0x54
 80143a4:	785a      	ldrb	r2, [r3, #1]
 80143a6:	f1bb 0f00 	cmp.w	fp, #0
 80143aa:	d037      	beq.n	801441c <_strtod_l+0x24c>
 80143ac:	9005      	str	r0, [sp, #20]
 80143ae:	465e      	mov	r6, fp
 80143b0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80143b4:	2b09      	cmp	r3, #9
 80143b6:	d912      	bls.n	80143de <_strtod_l+0x20e>
 80143b8:	2301      	movs	r3, #1
 80143ba:	e7c4      	b.n	8014346 <_strtod_l+0x176>
 80143bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80143be:	1c5a      	adds	r2, r3, #1
 80143c0:	9215      	str	r2, [sp, #84]	; 0x54
 80143c2:	785a      	ldrb	r2, [r3, #1]
 80143c4:	3001      	adds	r0, #1
 80143c6:	2a30      	cmp	r2, #48	; 0x30
 80143c8:	d0f8      	beq.n	80143bc <_strtod_l+0x1ec>
 80143ca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80143ce:	2b08      	cmp	r3, #8
 80143d0:	f200 84c1 	bhi.w	8014d56 <_strtod_l+0xb86>
 80143d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80143d6:	9005      	str	r0, [sp, #20]
 80143d8:	2000      	movs	r0, #0
 80143da:	930b      	str	r3, [sp, #44]	; 0x2c
 80143dc:	4606      	mov	r6, r0
 80143de:	3a30      	subs	r2, #48	; 0x30
 80143e0:	f100 0301 	add.w	r3, r0, #1
 80143e4:	d014      	beq.n	8014410 <_strtod_l+0x240>
 80143e6:	9905      	ldr	r1, [sp, #20]
 80143e8:	4419      	add	r1, r3
 80143ea:	9105      	str	r1, [sp, #20]
 80143ec:	4633      	mov	r3, r6
 80143ee:	eb00 0c06 	add.w	ip, r0, r6
 80143f2:	210a      	movs	r1, #10
 80143f4:	4563      	cmp	r3, ip
 80143f6:	d113      	bne.n	8014420 <_strtod_l+0x250>
 80143f8:	1833      	adds	r3, r6, r0
 80143fa:	2b08      	cmp	r3, #8
 80143fc:	f106 0601 	add.w	r6, r6, #1
 8014400:	4406      	add	r6, r0
 8014402:	dc1a      	bgt.n	801443a <_strtod_l+0x26a>
 8014404:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014406:	230a      	movs	r3, #10
 8014408:	fb03 2301 	mla	r3, r3, r1, r2
 801440c:	9309      	str	r3, [sp, #36]	; 0x24
 801440e:	2300      	movs	r3, #0
 8014410:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014412:	1c51      	adds	r1, r2, #1
 8014414:	9115      	str	r1, [sp, #84]	; 0x54
 8014416:	7852      	ldrb	r2, [r2, #1]
 8014418:	4618      	mov	r0, r3
 801441a:	e7c9      	b.n	80143b0 <_strtod_l+0x1e0>
 801441c:	4658      	mov	r0, fp
 801441e:	e7d2      	b.n	80143c6 <_strtod_l+0x1f6>
 8014420:	2b08      	cmp	r3, #8
 8014422:	f103 0301 	add.w	r3, r3, #1
 8014426:	dc03      	bgt.n	8014430 <_strtod_l+0x260>
 8014428:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801442a:	434f      	muls	r7, r1
 801442c:	9709      	str	r7, [sp, #36]	; 0x24
 801442e:	e7e1      	b.n	80143f4 <_strtod_l+0x224>
 8014430:	2b10      	cmp	r3, #16
 8014432:	bfd8      	it	le
 8014434:	fb01 fa0a 	mulle.w	sl, r1, sl
 8014438:	e7dc      	b.n	80143f4 <_strtod_l+0x224>
 801443a:	2e10      	cmp	r6, #16
 801443c:	bfdc      	itt	le
 801443e:	230a      	movle	r3, #10
 8014440:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8014444:	e7e3      	b.n	801440e <_strtod_l+0x23e>
 8014446:	2300      	movs	r3, #0
 8014448:	9305      	str	r3, [sp, #20]
 801444a:	2301      	movs	r3, #1
 801444c:	e780      	b.n	8014350 <_strtod_l+0x180>
 801444e:	f04f 0c00 	mov.w	ip, #0
 8014452:	1caa      	adds	r2, r5, #2
 8014454:	9215      	str	r2, [sp, #84]	; 0x54
 8014456:	78aa      	ldrb	r2, [r5, #2]
 8014458:	e788      	b.n	801436c <_strtod_l+0x19c>
 801445a:	f04f 0c01 	mov.w	ip, #1
 801445e:	e7f8      	b.n	8014452 <_strtod_l+0x282>
 8014460:	080181d0 	.word	0x080181d0
 8014464:	080181cc 	.word	0x080181cc
 8014468:	7ff00000 	.word	0x7ff00000
 801446c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801446e:	1c51      	adds	r1, r2, #1
 8014470:	9115      	str	r1, [sp, #84]	; 0x54
 8014472:	7852      	ldrb	r2, [r2, #1]
 8014474:	2a30      	cmp	r2, #48	; 0x30
 8014476:	d0f9      	beq.n	801446c <_strtod_l+0x29c>
 8014478:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801447c:	2908      	cmp	r1, #8
 801447e:	f63f af7a 	bhi.w	8014376 <_strtod_l+0x1a6>
 8014482:	3a30      	subs	r2, #48	; 0x30
 8014484:	9208      	str	r2, [sp, #32]
 8014486:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014488:	920c      	str	r2, [sp, #48]	; 0x30
 801448a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801448c:	1c57      	adds	r7, r2, #1
 801448e:	9715      	str	r7, [sp, #84]	; 0x54
 8014490:	7852      	ldrb	r2, [r2, #1]
 8014492:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014496:	f1be 0f09 	cmp.w	lr, #9
 801449a:	d938      	bls.n	801450e <_strtod_l+0x33e>
 801449c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801449e:	1a7f      	subs	r7, r7, r1
 80144a0:	2f08      	cmp	r7, #8
 80144a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80144a6:	dc03      	bgt.n	80144b0 <_strtod_l+0x2e0>
 80144a8:	9908      	ldr	r1, [sp, #32]
 80144aa:	428f      	cmp	r7, r1
 80144ac:	bfa8      	it	ge
 80144ae:	460f      	movge	r7, r1
 80144b0:	f1bc 0f00 	cmp.w	ip, #0
 80144b4:	d000      	beq.n	80144b8 <_strtod_l+0x2e8>
 80144b6:	427f      	negs	r7, r7
 80144b8:	2e00      	cmp	r6, #0
 80144ba:	d14f      	bne.n	801455c <_strtod_l+0x38c>
 80144bc:	9904      	ldr	r1, [sp, #16]
 80144be:	4301      	orrs	r1, r0
 80144c0:	f47f aec1 	bne.w	8014246 <_strtod_l+0x76>
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	f47f aedb 	bne.w	8014280 <_strtod_l+0xb0>
 80144ca:	2a69      	cmp	r2, #105	; 0x69
 80144cc:	d029      	beq.n	8014522 <_strtod_l+0x352>
 80144ce:	dc26      	bgt.n	801451e <_strtod_l+0x34e>
 80144d0:	2a49      	cmp	r2, #73	; 0x49
 80144d2:	d026      	beq.n	8014522 <_strtod_l+0x352>
 80144d4:	2a4e      	cmp	r2, #78	; 0x4e
 80144d6:	f47f aed3 	bne.w	8014280 <_strtod_l+0xb0>
 80144da:	499b      	ldr	r1, [pc, #620]	; (8014748 <_strtod_l+0x578>)
 80144dc:	a815      	add	r0, sp, #84	; 0x54
 80144de:	f001 fd9b 	bl	8016018 <__match>
 80144e2:	2800      	cmp	r0, #0
 80144e4:	f43f aecc 	beq.w	8014280 <_strtod_l+0xb0>
 80144e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80144ea:	781b      	ldrb	r3, [r3, #0]
 80144ec:	2b28      	cmp	r3, #40	; 0x28
 80144ee:	d12f      	bne.n	8014550 <_strtod_l+0x380>
 80144f0:	4996      	ldr	r1, [pc, #600]	; (801474c <_strtod_l+0x57c>)
 80144f2:	aa18      	add	r2, sp, #96	; 0x60
 80144f4:	a815      	add	r0, sp, #84	; 0x54
 80144f6:	f001 fda3 	bl	8016040 <__hexnan>
 80144fa:	2805      	cmp	r0, #5
 80144fc:	d128      	bne.n	8014550 <_strtod_l+0x380>
 80144fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014500:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014504:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014508:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801450c:	e69b      	b.n	8014246 <_strtod_l+0x76>
 801450e:	9f08      	ldr	r7, [sp, #32]
 8014510:	210a      	movs	r1, #10
 8014512:	fb01 2107 	mla	r1, r1, r7, r2
 8014516:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801451a:	9208      	str	r2, [sp, #32]
 801451c:	e7b5      	b.n	801448a <_strtod_l+0x2ba>
 801451e:	2a6e      	cmp	r2, #110	; 0x6e
 8014520:	e7d9      	b.n	80144d6 <_strtod_l+0x306>
 8014522:	498b      	ldr	r1, [pc, #556]	; (8014750 <_strtod_l+0x580>)
 8014524:	a815      	add	r0, sp, #84	; 0x54
 8014526:	f001 fd77 	bl	8016018 <__match>
 801452a:	2800      	cmp	r0, #0
 801452c:	f43f aea8 	beq.w	8014280 <_strtod_l+0xb0>
 8014530:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014532:	4988      	ldr	r1, [pc, #544]	; (8014754 <_strtod_l+0x584>)
 8014534:	3b01      	subs	r3, #1
 8014536:	a815      	add	r0, sp, #84	; 0x54
 8014538:	9315      	str	r3, [sp, #84]	; 0x54
 801453a:	f001 fd6d 	bl	8016018 <__match>
 801453e:	b910      	cbnz	r0, 8014546 <_strtod_l+0x376>
 8014540:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014542:	3301      	adds	r3, #1
 8014544:	9315      	str	r3, [sp, #84]	; 0x54
 8014546:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8014764 <_strtod_l+0x594>
 801454a:	f04f 0800 	mov.w	r8, #0
 801454e:	e67a      	b.n	8014246 <_strtod_l+0x76>
 8014550:	4881      	ldr	r0, [pc, #516]	; (8014758 <_strtod_l+0x588>)
 8014552:	f001 fa7d 	bl	8015a50 <nan>
 8014556:	ec59 8b10 	vmov	r8, r9, d0
 801455a:	e674      	b.n	8014246 <_strtod_l+0x76>
 801455c:	9b05      	ldr	r3, [sp, #20]
 801455e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014560:	1afb      	subs	r3, r7, r3
 8014562:	f1bb 0f00 	cmp.w	fp, #0
 8014566:	bf08      	it	eq
 8014568:	46b3      	moveq	fp, r6
 801456a:	2e10      	cmp	r6, #16
 801456c:	9308      	str	r3, [sp, #32]
 801456e:	4635      	mov	r5, r6
 8014570:	bfa8      	it	ge
 8014572:	2510      	movge	r5, #16
 8014574:	f7eb ffee 	bl	8000554 <__aeabi_ui2d>
 8014578:	2e09      	cmp	r6, #9
 801457a:	4680      	mov	r8, r0
 801457c:	4689      	mov	r9, r1
 801457e:	dd13      	ble.n	80145a8 <_strtod_l+0x3d8>
 8014580:	4b76      	ldr	r3, [pc, #472]	; (801475c <_strtod_l+0x58c>)
 8014582:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014586:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801458a:	f7ec f85d 	bl	8000648 <__aeabi_dmul>
 801458e:	4680      	mov	r8, r0
 8014590:	4650      	mov	r0, sl
 8014592:	4689      	mov	r9, r1
 8014594:	f7eb ffde 	bl	8000554 <__aeabi_ui2d>
 8014598:	4602      	mov	r2, r0
 801459a:	460b      	mov	r3, r1
 801459c:	4640      	mov	r0, r8
 801459e:	4649      	mov	r1, r9
 80145a0:	f7eb fe9c 	bl	80002dc <__adddf3>
 80145a4:	4680      	mov	r8, r0
 80145a6:	4689      	mov	r9, r1
 80145a8:	2e0f      	cmp	r6, #15
 80145aa:	dc38      	bgt.n	801461e <_strtod_l+0x44e>
 80145ac:	9b08      	ldr	r3, [sp, #32]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	f43f ae49 	beq.w	8014246 <_strtod_l+0x76>
 80145b4:	dd24      	ble.n	8014600 <_strtod_l+0x430>
 80145b6:	2b16      	cmp	r3, #22
 80145b8:	dc0b      	bgt.n	80145d2 <_strtod_l+0x402>
 80145ba:	4968      	ldr	r1, [pc, #416]	; (801475c <_strtod_l+0x58c>)
 80145bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80145c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80145c4:	4642      	mov	r2, r8
 80145c6:	464b      	mov	r3, r9
 80145c8:	f7ec f83e 	bl	8000648 <__aeabi_dmul>
 80145cc:	4680      	mov	r8, r0
 80145ce:	4689      	mov	r9, r1
 80145d0:	e639      	b.n	8014246 <_strtod_l+0x76>
 80145d2:	9a08      	ldr	r2, [sp, #32]
 80145d4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80145d8:	4293      	cmp	r3, r2
 80145da:	db20      	blt.n	801461e <_strtod_l+0x44e>
 80145dc:	4c5f      	ldr	r4, [pc, #380]	; (801475c <_strtod_l+0x58c>)
 80145de:	f1c6 060f 	rsb	r6, r6, #15
 80145e2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80145e6:	4642      	mov	r2, r8
 80145e8:	464b      	mov	r3, r9
 80145ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80145ee:	f7ec f82b 	bl	8000648 <__aeabi_dmul>
 80145f2:	9b08      	ldr	r3, [sp, #32]
 80145f4:	1b9e      	subs	r6, r3, r6
 80145f6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80145fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80145fe:	e7e3      	b.n	80145c8 <_strtod_l+0x3f8>
 8014600:	9b08      	ldr	r3, [sp, #32]
 8014602:	3316      	adds	r3, #22
 8014604:	db0b      	blt.n	801461e <_strtod_l+0x44e>
 8014606:	9b05      	ldr	r3, [sp, #20]
 8014608:	1bdf      	subs	r7, r3, r7
 801460a:	4b54      	ldr	r3, [pc, #336]	; (801475c <_strtod_l+0x58c>)
 801460c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8014610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014614:	4640      	mov	r0, r8
 8014616:	4649      	mov	r1, r9
 8014618:	f7ec f940 	bl	800089c <__aeabi_ddiv>
 801461c:	e7d6      	b.n	80145cc <_strtod_l+0x3fc>
 801461e:	9b08      	ldr	r3, [sp, #32]
 8014620:	1b75      	subs	r5, r6, r5
 8014622:	441d      	add	r5, r3
 8014624:	2d00      	cmp	r5, #0
 8014626:	dd70      	ble.n	801470a <_strtod_l+0x53a>
 8014628:	f015 030f 	ands.w	r3, r5, #15
 801462c:	d00a      	beq.n	8014644 <_strtod_l+0x474>
 801462e:	494b      	ldr	r1, [pc, #300]	; (801475c <_strtod_l+0x58c>)
 8014630:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014634:	4642      	mov	r2, r8
 8014636:	464b      	mov	r3, r9
 8014638:	e9d1 0100 	ldrd	r0, r1, [r1]
 801463c:	f7ec f804 	bl	8000648 <__aeabi_dmul>
 8014640:	4680      	mov	r8, r0
 8014642:	4689      	mov	r9, r1
 8014644:	f035 050f 	bics.w	r5, r5, #15
 8014648:	d04d      	beq.n	80146e6 <_strtod_l+0x516>
 801464a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801464e:	dd22      	ble.n	8014696 <_strtod_l+0x4c6>
 8014650:	2500      	movs	r5, #0
 8014652:	46ab      	mov	fp, r5
 8014654:	9509      	str	r5, [sp, #36]	; 0x24
 8014656:	9505      	str	r5, [sp, #20]
 8014658:	2322      	movs	r3, #34	; 0x22
 801465a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8014764 <_strtod_l+0x594>
 801465e:	6023      	str	r3, [r4, #0]
 8014660:	f04f 0800 	mov.w	r8, #0
 8014664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014666:	2b00      	cmp	r3, #0
 8014668:	f43f aded 	beq.w	8014246 <_strtod_l+0x76>
 801466c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801466e:	4620      	mov	r0, r4
 8014670:	f7ff f924 	bl	80138bc <_Bfree>
 8014674:	9905      	ldr	r1, [sp, #20]
 8014676:	4620      	mov	r0, r4
 8014678:	f7ff f920 	bl	80138bc <_Bfree>
 801467c:	4659      	mov	r1, fp
 801467e:	4620      	mov	r0, r4
 8014680:	f7ff f91c 	bl	80138bc <_Bfree>
 8014684:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014686:	4620      	mov	r0, r4
 8014688:	f7ff f918 	bl	80138bc <_Bfree>
 801468c:	4629      	mov	r1, r5
 801468e:	4620      	mov	r0, r4
 8014690:	f7ff f914 	bl	80138bc <_Bfree>
 8014694:	e5d7      	b.n	8014246 <_strtod_l+0x76>
 8014696:	4b32      	ldr	r3, [pc, #200]	; (8014760 <_strtod_l+0x590>)
 8014698:	9304      	str	r3, [sp, #16]
 801469a:	2300      	movs	r3, #0
 801469c:	112d      	asrs	r5, r5, #4
 801469e:	4640      	mov	r0, r8
 80146a0:	4649      	mov	r1, r9
 80146a2:	469a      	mov	sl, r3
 80146a4:	2d01      	cmp	r5, #1
 80146a6:	dc21      	bgt.n	80146ec <_strtod_l+0x51c>
 80146a8:	b10b      	cbz	r3, 80146ae <_strtod_l+0x4de>
 80146aa:	4680      	mov	r8, r0
 80146ac:	4689      	mov	r9, r1
 80146ae:	492c      	ldr	r1, [pc, #176]	; (8014760 <_strtod_l+0x590>)
 80146b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80146b4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80146b8:	4642      	mov	r2, r8
 80146ba:	464b      	mov	r3, r9
 80146bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80146c0:	f7eb ffc2 	bl	8000648 <__aeabi_dmul>
 80146c4:	4b27      	ldr	r3, [pc, #156]	; (8014764 <_strtod_l+0x594>)
 80146c6:	460a      	mov	r2, r1
 80146c8:	400b      	ands	r3, r1
 80146ca:	4927      	ldr	r1, [pc, #156]	; (8014768 <_strtod_l+0x598>)
 80146cc:	428b      	cmp	r3, r1
 80146ce:	4680      	mov	r8, r0
 80146d0:	d8be      	bhi.n	8014650 <_strtod_l+0x480>
 80146d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80146d6:	428b      	cmp	r3, r1
 80146d8:	bf86      	itte	hi
 80146da:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801476c <_strtod_l+0x59c>
 80146de:	f04f 38ff 	movhi.w	r8, #4294967295
 80146e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80146e6:	2300      	movs	r3, #0
 80146e8:	9304      	str	r3, [sp, #16]
 80146ea:	e07b      	b.n	80147e4 <_strtod_l+0x614>
 80146ec:	07ea      	lsls	r2, r5, #31
 80146ee:	d505      	bpl.n	80146fc <_strtod_l+0x52c>
 80146f0:	9b04      	ldr	r3, [sp, #16]
 80146f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146f6:	f7eb ffa7 	bl	8000648 <__aeabi_dmul>
 80146fa:	2301      	movs	r3, #1
 80146fc:	9a04      	ldr	r2, [sp, #16]
 80146fe:	3208      	adds	r2, #8
 8014700:	f10a 0a01 	add.w	sl, sl, #1
 8014704:	106d      	asrs	r5, r5, #1
 8014706:	9204      	str	r2, [sp, #16]
 8014708:	e7cc      	b.n	80146a4 <_strtod_l+0x4d4>
 801470a:	d0ec      	beq.n	80146e6 <_strtod_l+0x516>
 801470c:	426d      	negs	r5, r5
 801470e:	f015 020f 	ands.w	r2, r5, #15
 8014712:	d00a      	beq.n	801472a <_strtod_l+0x55a>
 8014714:	4b11      	ldr	r3, [pc, #68]	; (801475c <_strtod_l+0x58c>)
 8014716:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801471a:	4640      	mov	r0, r8
 801471c:	4649      	mov	r1, r9
 801471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014722:	f7ec f8bb 	bl	800089c <__aeabi_ddiv>
 8014726:	4680      	mov	r8, r0
 8014728:	4689      	mov	r9, r1
 801472a:	112d      	asrs	r5, r5, #4
 801472c:	d0db      	beq.n	80146e6 <_strtod_l+0x516>
 801472e:	2d1f      	cmp	r5, #31
 8014730:	dd1e      	ble.n	8014770 <_strtod_l+0x5a0>
 8014732:	2500      	movs	r5, #0
 8014734:	46ab      	mov	fp, r5
 8014736:	9509      	str	r5, [sp, #36]	; 0x24
 8014738:	9505      	str	r5, [sp, #20]
 801473a:	2322      	movs	r3, #34	; 0x22
 801473c:	f04f 0800 	mov.w	r8, #0
 8014740:	f04f 0900 	mov.w	r9, #0
 8014744:	6023      	str	r3, [r4, #0]
 8014746:	e78d      	b.n	8014664 <_strtod_l+0x494>
 8014748:	08017fbd 	.word	0x08017fbd
 801474c:	080181e4 	.word	0x080181e4
 8014750:	08017fb5 	.word	0x08017fb5
 8014754:	08017fea 	.word	0x08017fea
 8014758:	08018390 	.word	0x08018390
 801475c:	080180f8 	.word	0x080180f8
 8014760:	080180d0 	.word	0x080180d0
 8014764:	7ff00000 	.word	0x7ff00000
 8014768:	7ca00000 	.word	0x7ca00000
 801476c:	7fefffff 	.word	0x7fefffff
 8014770:	f015 0310 	ands.w	r3, r5, #16
 8014774:	bf18      	it	ne
 8014776:	236a      	movne	r3, #106	; 0x6a
 8014778:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8014b1c <_strtod_l+0x94c>
 801477c:	9304      	str	r3, [sp, #16]
 801477e:	4640      	mov	r0, r8
 8014780:	4649      	mov	r1, r9
 8014782:	2300      	movs	r3, #0
 8014784:	07ea      	lsls	r2, r5, #31
 8014786:	d504      	bpl.n	8014792 <_strtod_l+0x5c2>
 8014788:	e9da 2300 	ldrd	r2, r3, [sl]
 801478c:	f7eb ff5c 	bl	8000648 <__aeabi_dmul>
 8014790:	2301      	movs	r3, #1
 8014792:	106d      	asrs	r5, r5, #1
 8014794:	f10a 0a08 	add.w	sl, sl, #8
 8014798:	d1f4      	bne.n	8014784 <_strtod_l+0x5b4>
 801479a:	b10b      	cbz	r3, 80147a0 <_strtod_l+0x5d0>
 801479c:	4680      	mov	r8, r0
 801479e:	4689      	mov	r9, r1
 80147a0:	9b04      	ldr	r3, [sp, #16]
 80147a2:	b1bb      	cbz	r3, 80147d4 <_strtod_l+0x604>
 80147a4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80147a8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	4649      	mov	r1, r9
 80147b0:	dd10      	ble.n	80147d4 <_strtod_l+0x604>
 80147b2:	2b1f      	cmp	r3, #31
 80147b4:	f340 811e 	ble.w	80149f4 <_strtod_l+0x824>
 80147b8:	2b34      	cmp	r3, #52	; 0x34
 80147ba:	bfde      	ittt	le
 80147bc:	f04f 33ff 	movle.w	r3, #4294967295
 80147c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80147c4:	4093      	lslle	r3, r2
 80147c6:	f04f 0800 	mov.w	r8, #0
 80147ca:	bfcc      	ite	gt
 80147cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80147d0:	ea03 0901 	andle.w	r9, r3, r1
 80147d4:	2200      	movs	r2, #0
 80147d6:	2300      	movs	r3, #0
 80147d8:	4640      	mov	r0, r8
 80147da:	4649      	mov	r1, r9
 80147dc:	f7ec f99c 	bl	8000b18 <__aeabi_dcmpeq>
 80147e0:	2800      	cmp	r0, #0
 80147e2:	d1a6      	bne.n	8014732 <_strtod_l+0x562>
 80147e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147e6:	9300      	str	r3, [sp, #0]
 80147e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80147ea:	4633      	mov	r3, r6
 80147ec:	465a      	mov	r2, fp
 80147ee:	4620      	mov	r0, r4
 80147f0:	f7ff f8cc 	bl	801398c <__s2b>
 80147f4:	9009      	str	r0, [sp, #36]	; 0x24
 80147f6:	2800      	cmp	r0, #0
 80147f8:	f43f af2a 	beq.w	8014650 <_strtod_l+0x480>
 80147fc:	9a08      	ldr	r2, [sp, #32]
 80147fe:	9b05      	ldr	r3, [sp, #20]
 8014800:	2a00      	cmp	r2, #0
 8014802:	eba3 0307 	sub.w	r3, r3, r7
 8014806:	bfa8      	it	ge
 8014808:	2300      	movge	r3, #0
 801480a:	930c      	str	r3, [sp, #48]	; 0x30
 801480c:	2500      	movs	r5, #0
 801480e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014812:	9312      	str	r3, [sp, #72]	; 0x48
 8014814:	46ab      	mov	fp, r5
 8014816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014818:	4620      	mov	r0, r4
 801481a:	6859      	ldr	r1, [r3, #4]
 801481c:	f7ff f80e 	bl	801383c <_Balloc>
 8014820:	9005      	str	r0, [sp, #20]
 8014822:	2800      	cmp	r0, #0
 8014824:	f43f af18 	beq.w	8014658 <_strtod_l+0x488>
 8014828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801482a:	691a      	ldr	r2, [r3, #16]
 801482c:	3202      	adds	r2, #2
 801482e:	f103 010c 	add.w	r1, r3, #12
 8014832:	0092      	lsls	r2, r2, #2
 8014834:	300c      	adds	r0, #12
 8014836:	f7fe f872 	bl	801291e <memcpy>
 801483a:	ec49 8b10 	vmov	d0, r8, r9
 801483e:	aa18      	add	r2, sp, #96	; 0x60
 8014840:	a917      	add	r1, sp, #92	; 0x5c
 8014842:	4620      	mov	r0, r4
 8014844:	f7ff fbd6 	bl	8013ff4 <__d2b>
 8014848:	ec49 8b18 	vmov	d8, r8, r9
 801484c:	9016      	str	r0, [sp, #88]	; 0x58
 801484e:	2800      	cmp	r0, #0
 8014850:	f43f af02 	beq.w	8014658 <_strtod_l+0x488>
 8014854:	2101      	movs	r1, #1
 8014856:	4620      	mov	r0, r4
 8014858:	f7ff f930 	bl	8013abc <__i2b>
 801485c:	4683      	mov	fp, r0
 801485e:	2800      	cmp	r0, #0
 8014860:	f43f aefa 	beq.w	8014658 <_strtod_l+0x488>
 8014864:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014866:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014868:	2e00      	cmp	r6, #0
 801486a:	bfab      	itete	ge
 801486c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801486e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8014870:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8014872:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8014876:	bfac      	ite	ge
 8014878:	eb06 0a03 	addge.w	sl, r6, r3
 801487c:	1b9f      	sublt	r7, r3, r6
 801487e:	9b04      	ldr	r3, [sp, #16]
 8014880:	1af6      	subs	r6, r6, r3
 8014882:	4416      	add	r6, r2
 8014884:	4ba0      	ldr	r3, [pc, #640]	; (8014b08 <_strtod_l+0x938>)
 8014886:	3e01      	subs	r6, #1
 8014888:	429e      	cmp	r6, r3
 801488a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801488e:	f280 80c4 	bge.w	8014a1a <_strtod_l+0x84a>
 8014892:	1b9b      	subs	r3, r3, r6
 8014894:	2b1f      	cmp	r3, #31
 8014896:	eba2 0203 	sub.w	r2, r2, r3
 801489a:	f04f 0101 	mov.w	r1, #1
 801489e:	f300 80b0 	bgt.w	8014a02 <_strtod_l+0x832>
 80148a2:	fa01 f303 	lsl.w	r3, r1, r3
 80148a6:	930e      	str	r3, [sp, #56]	; 0x38
 80148a8:	2300      	movs	r3, #0
 80148aa:	930d      	str	r3, [sp, #52]	; 0x34
 80148ac:	eb0a 0602 	add.w	r6, sl, r2
 80148b0:	9b04      	ldr	r3, [sp, #16]
 80148b2:	45b2      	cmp	sl, r6
 80148b4:	4417      	add	r7, r2
 80148b6:	441f      	add	r7, r3
 80148b8:	4653      	mov	r3, sl
 80148ba:	bfa8      	it	ge
 80148bc:	4633      	movge	r3, r6
 80148be:	42bb      	cmp	r3, r7
 80148c0:	bfa8      	it	ge
 80148c2:	463b      	movge	r3, r7
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	bfc2      	ittt	gt
 80148c8:	1af6      	subgt	r6, r6, r3
 80148ca:	1aff      	subgt	r7, r7, r3
 80148cc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80148d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	dd17      	ble.n	8014906 <_strtod_l+0x736>
 80148d6:	4659      	mov	r1, fp
 80148d8:	461a      	mov	r2, r3
 80148da:	4620      	mov	r0, r4
 80148dc:	f7ff f9ae 	bl	8013c3c <__pow5mult>
 80148e0:	4683      	mov	fp, r0
 80148e2:	2800      	cmp	r0, #0
 80148e4:	f43f aeb8 	beq.w	8014658 <_strtod_l+0x488>
 80148e8:	4601      	mov	r1, r0
 80148ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80148ec:	4620      	mov	r0, r4
 80148ee:	f7ff f8fb 	bl	8013ae8 <__multiply>
 80148f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80148f4:	2800      	cmp	r0, #0
 80148f6:	f43f aeaf 	beq.w	8014658 <_strtod_l+0x488>
 80148fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80148fc:	4620      	mov	r0, r4
 80148fe:	f7fe ffdd 	bl	80138bc <_Bfree>
 8014902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014904:	9316      	str	r3, [sp, #88]	; 0x58
 8014906:	2e00      	cmp	r6, #0
 8014908:	f300 808c 	bgt.w	8014a24 <_strtod_l+0x854>
 801490c:	9b08      	ldr	r3, [sp, #32]
 801490e:	2b00      	cmp	r3, #0
 8014910:	dd08      	ble.n	8014924 <_strtod_l+0x754>
 8014912:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014914:	9905      	ldr	r1, [sp, #20]
 8014916:	4620      	mov	r0, r4
 8014918:	f7ff f990 	bl	8013c3c <__pow5mult>
 801491c:	9005      	str	r0, [sp, #20]
 801491e:	2800      	cmp	r0, #0
 8014920:	f43f ae9a 	beq.w	8014658 <_strtod_l+0x488>
 8014924:	2f00      	cmp	r7, #0
 8014926:	dd08      	ble.n	801493a <_strtod_l+0x76a>
 8014928:	9905      	ldr	r1, [sp, #20]
 801492a:	463a      	mov	r2, r7
 801492c:	4620      	mov	r0, r4
 801492e:	f7ff f9df 	bl	8013cf0 <__lshift>
 8014932:	9005      	str	r0, [sp, #20]
 8014934:	2800      	cmp	r0, #0
 8014936:	f43f ae8f 	beq.w	8014658 <_strtod_l+0x488>
 801493a:	f1ba 0f00 	cmp.w	sl, #0
 801493e:	dd08      	ble.n	8014952 <_strtod_l+0x782>
 8014940:	4659      	mov	r1, fp
 8014942:	4652      	mov	r2, sl
 8014944:	4620      	mov	r0, r4
 8014946:	f7ff f9d3 	bl	8013cf0 <__lshift>
 801494a:	4683      	mov	fp, r0
 801494c:	2800      	cmp	r0, #0
 801494e:	f43f ae83 	beq.w	8014658 <_strtod_l+0x488>
 8014952:	9a05      	ldr	r2, [sp, #20]
 8014954:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014956:	4620      	mov	r0, r4
 8014958:	f7ff fa52 	bl	8013e00 <__mdiff>
 801495c:	4605      	mov	r5, r0
 801495e:	2800      	cmp	r0, #0
 8014960:	f43f ae7a 	beq.w	8014658 <_strtod_l+0x488>
 8014964:	68c3      	ldr	r3, [r0, #12]
 8014966:	930b      	str	r3, [sp, #44]	; 0x2c
 8014968:	2300      	movs	r3, #0
 801496a:	60c3      	str	r3, [r0, #12]
 801496c:	4659      	mov	r1, fp
 801496e:	f7ff fa2b 	bl	8013dc8 <__mcmp>
 8014972:	2800      	cmp	r0, #0
 8014974:	da60      	bge.n	8014a38 <_strtod_l+0x868>
 8014976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014978:	ea53 0308 	orrs.w	r3, r3, r8
 801497c:	f040 8084 	bne.w	8014a88 <_strtod_l+0x8b8>
 8014980:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014984:	2b00      	cmp	r3, #0
 8014986:	d17f      	bne.n	8014a88 <_strtod_l+0x8b8>
 8014988:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801498c:	0d1b      	lsrs	r3, r3, #20
 801498e:	051b      	lsls	r3, r3, #20
 8014990:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014994:	d978      	bls.n	8014a88 <_strtod_l+0x8b8>
 8014996:	696b      	ldr	r3, [r5, #20]
 8014998:	b913      	cbnz	r3, 80149a0 <_strtod_l+0x7d0>
 801499a:	692b      	ldr	r3, [r5, #16]
 801499c:	2b01      	cmp	r3, #1
 801499e:	dd73      	ble.n	8014a88 <_strtod_l+0x8b8>
 80149a0:	4629      	mov	r1, r5
 80149a2:	2201      	movs	r2, #1
 80149a4:	4620      	mov	r0, r4
 80149a6:	f7ff f9a3 	bl	8013cf0 <__lshift>
 80149aa:	4659      	mov	r1, fp
 80149ac:	4605      	mov	r5, r0
 80149ae:	f7ff fa0b 	bl	8013dc8 <__mcmp>
 80149b2:	2800      	cmp	r0, #0
 80149b4:	dd68      	ble.n	8014a88 <_strtod_l+0x8b8>
 80149b6:	9904      	ldr	r1, [sp, #16]
 80149b8:	4a54      	ldr	r2, [pc, #336]	; (8014b0c <_strtod_l+0x93c>)
 80149ba:	464b      	mov	r3, r9
 80149bc:	2900      	cmp	r1, #0
 80149be:	f000 8084 	beq.w	8014aca <_strtod_l+0x8fa>
 80149c2:	ea02 0109 	and.w	r1, r2, r9
 80149c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80149ca:	dc7e      	bgt.n	8014aca <_strtod_l+0x8fa>
 80149cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80149d0:	f77f aeb3 	ble.w	801473a <_strtod_l+0x56a>
 80149d4:	4b4e      	ldr	r3, [pc, #312]	; (8014b10 <_strtod_l+0x940>)
 80149d6:	4640      	mov	r0, r8
 80149d8:	4649      	mov	r1, r9
 80149da:	2200      	movs	r2, #0
 80149dc:	f7eb fe34 	bl	8000648 <__aeabi_dmul>
 80149e0:	4b4a      	ldr	r3, [pc, #296]	; (8014b0c <_strtod_l+0x93c>)
 80149e2:	400b      	ands	r3, r1
 80149e4:	4680      	mov	r8, r0
 80149e6:	4689      	mov	r9, r1
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	f47f ae3f 	bne.w	801466c <_strtod_l+0x49c>
 80149ee:	2322      	movs	r3, #34	; 0x22
 80149f0:	6023      	str	r3, [r4, #0]
 80149f2:	e63b      	b.n	801466c <_strtod_l+0x49c>
 80149f4:	f04f 32ff 	mov.w	r2, #4294967295
 80149f8:	fa02 f303 	lsl.w	r3, r2, r3
 80149fc:	ea03 0808 	and.w	r8, r3, r8
 8014a00:	e6e8      	b.n	80147d4 <_strtod_l+0x604>
 8014a02:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014a06:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014a0a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014a0e:	36e2      	adds	r6, #226	; 0xe2
 8014a10:	fa01 f306 	lsl.w	r3, r1, r6
 8014a14:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8014a18:	e748      	b.n	80148ac <_strtod_l+0x6dc>
 8014a1a:	2100      	movs	r1, #0
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8014a22:	e743      	b.n	80148ac <_strtod_l+0x6dc>
 8014a24:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014a26:	4632      	mov	r2, r6
 8014a28:	4620      	mov	r0, r4
 8014a2a:	f7ff f961 	bl	8013cf0 <__lshift>
 8014a2e:	9016      	str	r0, [sp, #88]	; 0x58
 8014a30:	2800      	cmp	r0, #0
 8014a32:	f47f af6b 	bne.w	801490c <_strtod_l+0x73c>
 8014a36:	e60f      	b.n	8014658 <_strtod_l+0x488>
 8014a38:	46ca      	mov	sl, r9
 8014a3a:	d171      	bne.n	8014b20 <_strtod_l+0x950>
 8014a3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014a42:	b352      	cbz	r2, 8014a9a <_strtod_l+0x8ca>
 8014a44:	4a33      	ldr	r2, [pc, #204]	; (8014b14 <_strtod_l+0x944>)
 8014a46:	4293      	cmp	r3, r2
 8014a48:	d12a      	bne.n	8014aa0 <_strtod_l+0x8d0>
 8014a4a:	9b04      	ldr	r3, [sp, #16]
 8014a4c:	4641      	mov	r1, r8
 8014a4e:	b1fb      	cbz	r3, 8014a90 <_strtod_l+0x8c0>
 8014a50:	4b2e      	ldr	r3, [pc, #184]	; (8014b0c <_strtod_l+0x93c>)
 8014a52:	ea09 0303 	and.w	r3, r9, r3
 8014a56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8014a5e:	d81a      	bhi.n	8014a96 <_strtod_l+0x8c6>
 8014a60:	0d1b      	lsrs	r3, r3, #20
 8014a62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014a66:	fa02 f303 	lsl.w	r3, r2, r3
 8014a6a:	4299      	cmp	r1, r3
 8014a6c:	d118      	bne.n	8014aa0 <_strtod_l+0x8d0>
 8014a6e:	4b2a      	ldr	r3, [pc, #168]	; (8014b18 <_strtod_l+0x948>)
 8014a70:	459a      	cmp	sl, r3
 8014a72:	d102      	bne.n	8014a7a <_strtod_l+0x8aa>
 8014a74:	3101      	adds	r1, #1
 8014a76:	f43f adef 	beq.w	8014658 <_strtod_l+0x488>
 8014a7a:	4b24      	ldr	r3, [pc, #144]	; (8014b0c <_strtod_l+0x93c>)
 8014a7c:	ea0a 0303 	and.w	r3, sl, r3
 8014a80:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8014a84:	f04f 0800 	mov.w	r8, #0
 8014a88:	9b04      	ldr	r3, [sp, #16]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d1a2      	bne.n	80149d4 <_strtod_l+0x804>
 8014a8e:	e5ed      	b.n	801466c <_strtod_l+0x49c>
 8014a90:	f04f 33ff 	mov.w	r3, #4294967295
 8014a94:	e7e9      	b.n	8014a6a <_strtod_l+0x89a>
 8014a96:	4613      	mov	r3, r2
 8014a98:	e7e7      	b.n	8014a6a <_strtod_l+0x89a>
 8014a9a:	ea53 0308 	orrs.w	r3, r3, r8
 8014a9e:	d08a      	beq.n	80149b6 <_strtod_l+0x7e6>
 8014aa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014aa2:	b1e3      	cbz	r3, 8014ade <_strtod_l+0x90e>
 8014aa4:	ea13 0f0a 	tst.w	r3, sl
 8014aa8:	d0ee      	beq.n	8014a88 <_strtod_l+0x8b8>
 8014aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014aac:	9a04      	ldr	r2, [sp, #16]
 8014aae:	4640      	mov	r0, r8
 8014ab0:	4649      	mov	r1, r9
 8014ab2:	b1c3      	cbz	r3, 8014ae6 <_strtod_l+0x916>
 8014ab4:	f7ff fb6f 	bl	8014196 <sulp>
 8014ab8:	4602      	mov	r2, r0
 8014aba:	460b      	mov	r3, r1
 8014abc:	ec51 0b18 	vmov	r0, r1, d8
 8014ac0:	f7eb fc0c 	bl	80002dc <__adddf3>
 8014ac4:	4680      	mov	r8, r0
 8014ac6:	4689      	mov	r9, r1
 8014ac8:	e7de      	b.n	8014a88 <_strtod_l+0x8b8>
 8014aca:	4013      	ands	r3, r2
 8014acc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014ad0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8014ad4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8014ad8:	f04f 38ff 	mov.w	r8, #4294967295
 8014adc:	e7d4      	b.n	8014a88 <_strtod_l+0x8b8>
 8014ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ae0:	ea13 0f08 	tst.w	r3, r8
 8014ae4:	e7e0      	b.n	8014aa8 <_strtod_l+0x8d8>
 8014ae6:	f7ff fb56 	bl	8014196 <sulp>
 8014aea:	4602      	mov	r2, r0
 8014aec:	460b      	mov	r3, r1
 8014aee:	ec51 0b18 	vmov	r0, r1, d8
 8014af2:	f7eb fbf1 	bl	80002d8 <__aeabi_dsub>
 8014af6:	2200      	movs	r2, #0
 8014af8:	2300      	movs	r3, #0
 8014afa:	4680      	mov	r8, r0
 8014afc:	4689      	mov	r9, r1
 8014afe:	f7ec f80b 	bl	8000b18 <__aeabi_dcmpeq>
 8014b02:	2800      	cmp	r0, #0
 8014b04:	d0c0      	beq.n	8014a88 <_strtod_l+0x8b8>
 8014b06:	e618      	b.n	801473a <_strtod_l+0x56a>
 8014b08:	fffffc02 	.word	0xfffffc02
 8014b0c:	7ff00000 	.word	0x7ff00000
 8014b10:	39500000 	.word	0x39500000
 8014b14:	000fffff 	.word	0x000fffff
 8014b18:	7fefffff 	.word	0x7fefffff
 8014b1c:	080181f8 	.word	0x080181f8
 8014b20:	4659      	mov	r1, fp
 8014b22:	4628      	mov	r0, r5
 8014b24:	f7ff fac0 	bl	80140a8 <__ratio>
 8014b28:	ec57 6b10 	vmov	r6, r7, d0
 8014b2c:	ee10 0a10 	vmov	r0, s0
 8014b30:	2200      	movs	r2, #0
 8014b32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014b36:	4639      	mov	r1, r7
 8014b38:	f7ec f802 	bl	8000b40 <__aeabi_dcmple>
 8014b3c:	2800      	cmp	r0, #0
 8014b3e:	d071      	beq.n	8014c24 <_strtod_l+0xa54>
 8014b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d17c      	bne.n	8014c40 <_strtod_l+0xa70>
 8014b46:	f1b8 0f00 	cmp.w	r8, #0
 8014b4a:	d15a      	bne.n	8014c02 <_strtod_l+0xa32>
 8014b4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d15d      	bne.n	8014c10 <_strtod_l+0xa40>
 8014b54:	4b90      	ldr	r3, [pc, #576]	; (8014d98 <_strtod_l+0xbc8>)
 8014b56:	2200      	movs	r2, #0
 8014b58:	4630      	mov	r0, r6
 8014b5a:	4639      	mov	r1, r7
 8014b5c:	f7eb ffe6 	bl	8000b2c <__aeabi_dcmplt>
 8014b60:	2800      	cmp	r0, #0
 8014b62:	d15c      	bne.n	8014c1e <_strtod_l+0xa4e>
 8014b64:	4630      	mov	r0, r6
 8014b66:	4639      	mov	r1, r7
 8014b68:	4b8c      	ldr	r3, [pc, #560]	; (8014d9c <_strtod_l+0xbcc>)
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	f7eb fd6c 	bl	8000648 <__aeabi_dmul>
 8014b70:	4606      	mov	r6, r0
 8014b72:	460f      	mov	r7, r1
 8014b74:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014b78:	9606      	str	r6, [sp, #24]
 8014b7a:	9307      	str	r3, [sp, #28]
 8014b7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014b80:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8014b84:	4b86      	ldr	r3, [pc, #536]	; (8014da0 <_strtod_l+0xbd0>)
 8014b86:	ea0a 0303 	and.w	r3, sl, r3
 8014b8a:	930d      	str	r3, [sp, #52]	; 0x34
 8014b8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014b8e:	4b85      	ldr	r3, [pc, #532]	; (8014da4 <_strtod_l+0xbd4>)
 8014b90:	429a      	cmp	r2, r3
 8014b92:	f040 8090 	bne.w	8014cb6 <_strtod_l+0xae6>
 8014b96:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8014b9a:	ec49 8b10 	vmov	d0, r8, r9
 8014b9e:	f7ff f9b9 	bl	8013f14 <__ulp>
 8014ba2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014ba6:	ec51 0b10 	vmov	r0, r1, d0
 8014baa:	f7eb fd4d 	bl	8000648 <__aeabi_dmul>
 8014bae:	4642      	mov	r2, r8
 8014bb0:	464b      	mov	r3, r9
 8014bb2:	f7eb fb93 	bl	80002dc <__adddf3>
 8014bb6:	460b      	mov	r3, r1
 8014bb8:	4979      	ldr	r1, [pc, #484]	; (8014da0 <_strtod_l+0xbd0>)
 8014bba:	4a7b      	ldr	r2, [pc, #492]	; (8014da8 <_strtod_l+0xbd8>)
 8014bbc:	4019      	ands	r1, r3
 8014bbe:	4291      	cmp	r1, r2
 8014bc0:	4680      	mov	r8, r0
 8014bc2:	d944      	bls.n	8014c4e <_strtod_l+0xa7e>
 8014bc4:	ee18 2a90 	vmov	r2, s17
 8014bc8:	4b78      	ldr	r3, [pc, #480]	; (8014dac <_strtod_l+0xbdc>)
 8014bca:	429a      	cmp	r2, r3
 8014bcc:	d104      	bne.n	8014bd8 <_strtod_l+0xa08>
 8014bce:	ee18 3a10 	vmov	r3, s16
 8014bd2:	3301      	adds	r3, #1
 8014bd4:	f43f ad40 	beq.w	8014658 <_strtod_l+0x488>
 8014bd8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8014dac <_strtod_l+0xbdc>
 8014bdc:	f04f 38ff 	mov.w	r8, #4294967295
 8014be0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014be2:	4620      	mov	r0, r4
 8014be4:	f7fe fe6a 	bl	80138bc <_Bfree>
 8014be8:	9905      	ldr	r1, [sp, #20]
 8014bea:	4620      	mov	r0, r4
 8014bec:	f7fe fe66 	bl	80138bc <_Bfree>
 8014bf0:	4659      	mov	r1, fp
 8014bf2:	4620      	mov	r0, r4
 8014bf4:	f7fe fe62 	bl	80138bc <_Bfree>
 8014bf8:	4629      	mov	r1, r5
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	f7fe fe5e 	bl	80138bc <_Bfree>
 8014c00:	e609      	b.n	8014816 <_strtod_l+0x646>
 8014c02:	f1b8 0f01 	cmp.w	r8, #1
 8014c06:	d103      	bne.n	8014c10 <_strtod_l+0xa40>
 8014c08:	f1b9 0f00 	cmp.w	r9, #0
 8014c0c:	f43f ad95 	beq.w	801473a <_strtod_l+0x56a>
 8014c10:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8014d68 <_strtod_l+0xb98>
 8014c14:	4f60      	ldr	r7, [pc, #384]	; (8014d98 <_strtod_l+0xbc8>)
 8014c16:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014c1a:	2600      	movs	r6, #0
 8014c1c:	e7ae      	b.n	8014b7c <_strtod_l+0x9ac>
 8014c1e:	4f5f      	ldr	r7, [pc, #380]	; (8014d9c <_strtod_l+0xbcc>)
 8014c20:	2600      	movs	r6, #0
 8014c22:	e7a7      	b.n	8014b74 <_strtod_l+0x9a4>
 8014c24:	4b5d      	ldr	r3, [pc, #372]	; (8014d9c <_strtod_l+0xbcc>)
 8014c26:	4630      	mov	r0, r6
 8014c28:	4639      	mov	r1, r7
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	f7eb fd0c 	bl	8000648 <__aeabi_dmul>
 8014c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c32:	4606      	mov	r6, r0
 8014c34:	460f      	mov	r7, r1
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d09c      	beq.n	8014b74 <_strtod_l+0x9a4>
 8014c3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8014c3e:	e79d      	b.n	8014b7c <_strtod_l+0x9ac>
 8014c40:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8014d70 <_strtod_l+0xba0>
 8014c44:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014c48:	ec57 6b17 	vmov	r6, r7, d7
 8014c4c:	e796      	b.n	8014b7c <_strtod_l+0x9ac>
 8014c4e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8014c52:	9b04      	ldr	r3, [sp, #16]
 8014c54:	46ca      	mov	sl, r9
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d1c2      	bne.n	8014be0 <_strtod_l+0xa10>
 8014c5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014c5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014c60:	0d1b      	lsrs	r3, r3, #20
 8014c62:	051b      	lsls	r3, r3, #20
 8014c64:	429a      	cmp	r2, r3
 8014c66:	d1bb      	bne.n	8014be0 <_strtod_l+0xa10>
 8014c68:	4630      	mov	r0, r6
 8014c6a:	4639      	mov	r1, r7
 8014c6c:	f7ec f89c 	bl	8000da8 <__aeabi_d2lz>
 8014c70:	f7eb fcbc 	bl	80005ec <__aeabi_l2d>
 8014c74:	4602      	mov	r2, r0
 8014c76:	460b      	mov	r3, r1
 8014c78:	4630      	mov	r0, r6
 8014c7a:	4639      	mov	r1, r7
 8014c7c:	f7eb fb2c 	bl	80002d8 <__aeabi_dsub>
 8014c80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014c82:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014c86:	ea43 0308 	orr.w	r3, r3, r8
 8014c8a:	4313      	orrs	r3, r2
 8014c8c:	4606      	mov	r6, r0
 8014c8e:	460f      	mov	r7, r1
 8014c90:	d054      	beq.n	8014d3c <_strtod_l+0xb6c>
 8014c92:	a339      	add	r3, pc, #228	; (adr r3, 8014d78 <_strtod_l+0xba8>)
 8014c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c98:	f7eb ff48 	bl	8000b2c <__aeabi_dcmplt>
 8014c9c:	2800      	cmp	r0, #0
 8014c9e:	f47f ace5 	bne.w	801466c <_strtod_l+0x49c>
 8014ca2:	a337      	add	r3, pc, #220	; (adr r3, 8014d80 <_strtod_l+0xbb0>)
 8014ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ca8:	4630      	mov	r0, r6
 8014caa:	4639      	mov	r1, r7
 8014cac:	f7eb ff5c 	bl	8000b68 <__aeabi_dcmpgt>
 8014cb0:	2800      	cmp	r0, #0
 8014cb2:	d095      	beq.n	8014be0 <_strtod_l+0xa10>
 8014cb4:	e4da      	b.n	801466c <_strtod_l+0x49c>
 8014cb6:	9b04      	ldr	r3, [sp, #16]
 8014cb8:	b333      	cbz	r3, 8014d08 <_strtod_l+0xb38>
 8014cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014cbc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014cc0:	d822      	bhi.n	8014d08 <_strtod_l+0xb38>
 8014cc2:	a331      	add	r3, pc, #196	; (adr r3, 8014d88 <_strtod_l+0xbb8>)
 8014cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cc8:	4630      	mov	r0, r6
 8014cca:	4639      	mov	r1, r7
 8014ccc:	f7eb ff38 	bl	8000b40 <__aeabi_dcmple>
 8014cd0:	b1a0      	cbz	r0, 8014cfc <_strtod_l+0xb2c>
 8014cd2:	4639      	mov	r1, r7
 8014cd4:	4630      	mov	r0, r6
 8014cd6:	f7eb ff8f 	bl	8000bf8 <__aeabi_d2uiz>
 8014cda:	2801      	cmp	r0, #1
 8014cdc:	bf38      	it	cc
 8014cde:	2001      	movcc	r0, #1
 8014ce0:	f7eb fc38 	bl	8000554 <__aeabi_ui2d>
 8014ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ce6:	4606      	mov	r6, r0
 8014ce8:	460f      	mov	r7, r1
 8014cea:	bb23      	cbnz	r3, 8014d36 <_strtod_l+0xb66>
 8014cec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014cf0:	9010      	str	r0, [sp, #64]	; 0x40
 8014cf2:	9311      	str	r3, [sp, #68]	; 0x44
 8014cf4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014cf8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8014cfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014cfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014d00:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014d04:	1a9b      	subs	r3, r3, r2
 8014d06:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d08:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8014d0c:	eeb0 0a48 	vmov.f32	s0, s16
 8014d10:	eef0 0a68 	vmov.f32	s1, s17
 8014d14:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8014d18:	f7ff f8fc 	bl	8013f14 <__ulp>
 8014d1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8014d20:	ec53 2b10 	vmov	r2, r3, d0
 8014d24:	f7eb fc90 	bl	8000648 <__aeabi_dmul>
 8014d28:	ec53 2b18 	vmov	r2, r3, d8
 8014d2c:	f7eb fad6 	bl	80002dc <__adddf3>
 8014d30:	4680      	mov	r8, r0
 8014d32:	4689      	mov	r9, r1
 8014d34:	e78d      	b.n	8014c52 <_strtod_l+0xa82>
 8014d36:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8014d3a:	e7db      	b.n	8014cf4 <_strtod_l+0xb24>
 8014d3c:	a314      	add	r3, pc, #80	; (adr r3, 8014d90 <_strtod_l+0xbc0>)
 8014d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d42:	f7eb fef3 	bl	8000b2c <__aeabi_dcmplt>
 8014d46:	e7b3      	b.n	8014cb0 <_strtod_l+0xae0>
 8014d48:	2300      	movs	r3, #0
 8014d4a:	930a      	str	r3, [sp, #40]	; 0x28
 8014d4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014d4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d50:	6013      	str	r3, [r2, #0]
 8014d52:	f7ff ba7c 	b.w	801424e <_strtod_l+0x7e>
 8014d56:	2a65      	cmp	r2, #101	; 0x65
 8014d58:	f43f ab75 	beq.w	8014446 <_strtod_l+0x276>
 8014d5c:	2a45      	cmp	r2, #69	; 0x45
 8014d5e:	f43f ab72 	beq.w	8014446 <_strtod_l+0x276>
 8014d62:	2301      	movs	r3, #1
 8014d64:	f7ff bbaa 	b.w	80144bc <_strtod_l+0x2ec>
 8014d68:	00000000 	.word	0x00000000
 8014d6c:	bff00000 	.word	0xbff00000
 8014d70:	00000000 	.word	0x00000000
 8014d74:	3ff00000 	.word	0x3ff00000
 8014d78:	94a03595 	.word	0x94a03595
 8014d7c:	3fdfffff 	.word	0x3fdfffff
 8014d80:	35afe535 	.word	0x35afe535
 8014d84:	3fe00000 	.word	0x3fe00000
 8014d88:	ffc00000 	.word	0xffc00000
 8014d8c:	41dfffff 	.word	0x41dfffff
 8014d90:	94a03595 	.word	0x94a03595
 8014d94:	3fcfffff 	.word	0x3fcfffff
 8014d98:	3ff00000 	.word	0x3ff00000
 8014d9c:	3fe00000 	.word	0x3fe00000
 8014da0:	7ff00000 	.word	0x7ff00000
 8014da4:	7fe00000 	.word	0x7fe00000
 8014da8:	7c9fffff 	.word	0x7c9fffff
 8014dac:	7fefffff 	.word	0x7fefffff

08014db0 <_strtod_r>:
 8014db0:	4b01      	ldr	r3, [pc, #4]	; (8014db8 <_strtod_r+0x8>)
 8014db2:	f7ff ba0d 	b.w	80141d0 <_strtod_l>
 8014db6:	bf00      	nop
 8014db8:	20000074 	.word	0x20000074

08014dbc <_strtol_l.constprop.0>:
 8014dbc:	2b01      	cmp	r3, #1
 8014dbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014dc2:	d001      	beq.n	8014dc8 <_strtol_l.constprop.0+0xc>
 8014dc4:	2b24      	cmp	r3, #36	; 0x24
 8014dc6:	d906      	bls.n	8014dd6 <_strtol_l.constprop.0+0x1a>
 8014dc8:	f7fd fd7c 	bl	80128c4 <__errno>
 8014dcc:	2316      	movs	r3, #22
 8014dce:	6003      	str	r3, [r0, #0]
 8014dd0:	2000      	movs	r0, #0
 8014dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dd6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014ebc <_strtol_l.constprop.0+0x100>
 8014dda:	460d      	mov	r5, r1
 8014ddc:	462e      	mov	r6, r5
 8014dde:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014de2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8014de6:	f017 0708 	ands.w	r7, r7, #8
 8014dea:	d1f7      	bne.n	8014ddc <_strtol_l.constprop.0+0x20>
 8014dec:	2c2d      	cmp	r4, #45	; 0x2d
 8014dee:	d132      	bne.n	8014e56 <_strtol_l.constprop.0+0x9a>
 8014df0:	782c      	ldrb	r4, [r5, #0]
 8014df2:	2701      	movs	r7, #1
 8014df4:	1cb5      	adds	r5, r6, #2
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d05b      	beq.n	8014eb2 <_strtol_l.constprop.0+0xf6>
 8014dfa:	2b10      	cmp	r3, #16
 8014dfc:	d109      	bne.n	8014e12 <_strtol_l.constprop.0+0x56>
 8014dfe:	2c30      	cmp	r4, #48	; 0x30
 8014e00:	d107      	bne.n	8014e12 <_strtol_l.constprop.0+0x56>
 8014e02:	782c      	ldrb	r4, [r5, #0]
 8014e04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014e08:	2c58      	cmp	r4, #88	; 0x58
 8014e0a:	d14d      	bne.n	8014ea8 <_strtol_l.constprop.0+0xec>
 8014e0c:	786c      	ldrb	r4, [r5, #1]
 8014e0e:	2310      	movs	r3, #16
 8014e10:	3502      	adds	r5, #2
 8014e12:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014e16:	f108 38ff 	add.w	r8, r8, #4294967295
 8014e1a:	f04f 0e00 	mov.w	lr, #0
 8014e1e:	fbb8 f9f3 	udiv	r9, r8, r3
 8014e22:	4676      	mov	r6, lr
 8014e24:	fb03 8a19 	mls	sl, r3, r9, r8
 8014e28:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014e2c:	f1bc 0f09 	cmp.w	ip, #9
 8014e30:	d816      	bhi.n	8014e60 <_strtol_l.constprop.0+0xa4>
 8014e32:	4664      	mov	r4, ip
 8014e34:	42a3      	cmp	r3, r4
 8014e36:	dd24      	ble.n	8014e82 <_strtol_l.constprop.0+0xc6>
 8014e38:	f1be 3fff 	cmp.w	lr, #4294967295
 8014e3c:	d008      	beq.n	8014e50 <_strtol_l.constprop.0+0x94>
 8014e3e:	45b1      	cmp	r9, r6
 8014e40:	d31c      	bcc.n	8014e7c <_strtol_l.constprop.0+0xc0>
 8014e42:	d101      	bne.n	8014e48 <_strtol_l.constprop.0+0x8c>
 8014e44:	45a2      	cmp	sl, r4
 8014e46:	db19      	blt.n	8014e7c <_strtol_l.constprop.0+0xc0>
 8014e48:	fb06 4603 	mla	r6, r6, r3, r4
 8014e4c:	f04f 0e01 	mov.w	lr, #1
 8014e50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014e54:	e7e8      	b.n	8014e28 <_strtol_l.constprop.0+0x6c>
 8014e56:	2c2b      	cmp	r4, #43	; 0x2b
 8014e58:	bf04      	itt	eq
 8014e5a:	782c      	ldrbeq	r4, [r5, #0]
 8014e5c:	1cb5      	addeq	r5, r6, #2
 8014e5e:	e7ca      	b.n	8014df6 <_strtol_l.constprop.0+0x3a>
 8014e60:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014e64:	f1bc 0f19 	cmp.w	ip, #25
 8014e68:	d801      	bhi.n	8014e6e <_strtol_l.constprop.0+0xb2>
 8014e6a:	3c37      	subs	r4, #55	; 0x37
 8014e6c:	e7e2      	b.n	8014e34 <_strtol_l.constprop.0+0x78>
 8014e6e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014e72:	f1bc 0f19 	cmp.w	ip, #25
 8014e76:	d804      	bhi.n	8014e82 <_strtol_l.constprop.0+0xc6>
 8014e78:	3c57      	subs	r4, #87	; 0x57
 8014e7a:	e7db      	b.n	8014e34 <_strtol_l.constprop.0+0x78>
 8014e7c:	f04f 3eff 	mov.w	lr, #4294967295
 8014e80:	e7e6      	b.n	8014e50 <_strtol_l.constprop.0+0x94>
 8014e82:	f1be 3fff 	cmp.w	lr, #4294967295
 8014e86:	d105      	bne.n	8014e94 <_strtol_l.constprop.0+0xd8>
 8014e88:	2322      	movs	r3, #34	; 0x22
 8014e8a:	6003      	str	r3, [r0, #0]
 8014e8c:	4646      	mov	r6, r8
 8014e8e:	b942      	cbnz	r2, 8014ea2 <_strtol_l.constprop.0+0xe6>
 8014e90:	4630      	mov	r0, r6
 8014e92:	e79e      	b.n	8014dd2 <_strtol_l.constprop.0+0x16>
 8014e94:	b107      	cbz	r7, 8014e98 <_strtol_l.constprop.0+0xdc>
 8014e96:	4276      	negs	r6, r6
 8014e98:	2a00      	cmp	r2, #0
 8014e9a:	d0f9      	beq.n	8014e90 <_strtol_l.constprop.0+0xd4>
 8014e9c:	f1be 0f00 	cmp.w	lr, #0
 8014ea0:	d000      	beq.n	8014ea4 <_strtol_l.constprop.0+0xe8>
 8014ea2:	1e69      	subs	r1, r5, #1
 8014ea4:	6011      	str	r1, [r2, #0]
 8014ea6:	e7f3      	b.n	8014e90 <_strtol_l.constprop.0+0xd4>
 8014ea8:	2430      	movs	r4, #48	; 0x30
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d1b1      	bne.n	8014e12 <_strtol_l.constprop.0+0x56>
 8014eae:	2308      	movs	r3, #8
 8014eb0:	e7af      	b.n	8014e12 <_strtol_l.constprop.0+0x56>
 8014eb2:	2c30      	cmp	r4, #48	; 0x30
 8014eb4:	d0a5      	beq.n	8014e02 <_strtol_l.constprop.0+0x46>
 8014eb6:	230a      	movs	r3, #10
 8014eb8:	e7ab      	b.n	8014e12 <_strtol_l.constprop.0+0x56>
 8014eba:	bf00      	nop
 8014ebc:	08018221 	.word	0x08018221

08014ec0 <_strtol_r>:
 8014ec0:	f7ff bf7c 	b.w	8014dbc <_strtol_l.constprop.0>

08014ec4 <__ssputs_r>:
 8014ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ec8:	688e      	ldr	r6, [r1, #8]
 8014eca:	461f      	mov	r7, r3
 8014ecc:	42be      	cmp	r6, r7
 8014ece:	680b      	ldr	r3, [r1, #0]
 8014ed0:	4682      	mov	sl, r0
 8014ed2:	460c      	mov	r4, r1
 8014ed4:	4690      	mov	r8, r2
 8014ed6:	d82c      	bhi.n	8014f32 <__ssputs_r+0x6e>
 8014ed8:	898a      	ldrh	r2, [r1, #12]
 8014eda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014ede:	d026      	beq.n	8014f2e <__ssputs_r+0x6a>
 8014ee0:	6965      	ldr	r5, [r4, #20]
 8014ee2:	6909      	ldr	r1, [r1, #16]
 8014ee4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014ee8:	eba3 0901 	sub.w	r9, r3, r1
 8014eec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014ef0:	1c7b      	adds	r3, r7, #1
 8014ef2:	444b      	add	r3, r9
 8014ef4:	106d      	asrs	r5, r5, #1
 8014ef6:	429d      	cmp	r5, r3
 8014ef8:	bf38      	it	cc
 8014efa:	461d      	movcc	r5, r3
 8014efc:	0553      	lsls	r3, r2, #21
 8014efe:	d527      	bpl.n	8014f50 <__ssputs_r+0x8c>
 8014f00:	4629      	mov	r1, r5
 8014f02:	f7fe fc0f 	bl	8013724 <_malloc_r>
 8014f06:	4606      	mov	r6, r0
 8014f08:	b360      	cbz	r0, 8014f64 <__ssputs_r+0xa0>
 8014f0a:	6921      	ldr	r1, [r4, #16]
 8014f0c:	464a      	mov	r2, r9
 8014f0e:	f7fd fd06 	bl	801291e <memcpy>
 8014f12:	89a3      	ldrh	r3, [r4, #12]
 8014f14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f1c:	81a3      	strh	r3, [r4, #12]
 8014f1e:	6126      	str	r6, [r4, #16]
 8014f20:	6165      	str	r5, [r4, #20]
 8014f22:	444e      	add	r6, r9
 8014f24:	eba5 0509 	sub.w	r5, r5, r9
 8014f28:	6026      	str	r6, [r4, #0]
 8014f2a:	60a5      	str	r5, [r4, #8]
 8014f2c:	463e      	mov	r6, r7
 8014f2e:	42be      	cmp	r6, r7
 8014f30:	d900      	bls.n	8014f34 <__ssputs_r+0x70>
 8014f32:	463e      	mov	r6, r7
 8014f34:	6820      	ldr	r0, [r4, #0]
 8014f36:	4632      	mov	r2, r6
 8014f38:	4641      	mov	r1, r8
 8014f3a:	f000 fd5c 	bl	80159f6 <memmove>
 8014f3e:	68a3      	ldr	r3, [r4, #8]
 8014f40:	1b9b      	subs	r3, r3, r6
 8014f42:	60a3      	str	r3, [r4, #8]
 8014f44:	6823      	ldr	r3, [r4, #0]
 8014f46:	4433      	add	r3, r6
 8014f48:	6023      	str	r3, [r4, #0]
 8014f4a:	2000      	movs	r0, #0
 8014f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f50:	462a      	mov	r2, r5
 8014f52:	f001 f922 	bl	801619a <_realloc_r>
 8014f56:	4606      	mov	r6, r0
 8014f58:	2800      	cmp	r0, #0
 8014f5a:	d1e0      	bne.n	8014f1e <__ssputs_r+0x5a>
 8014f5c:	6921      	ldr	r1, [r4, #16]
 8014f5e:	4650      	mov	r0, sl
 8014f60:	f7fe fb6c 	bl	801363c <_free_r>
 8014f64:	230c      	movs	r3, #12
 8014f66:	f8ca 3000 	str.w	r3, [sl]
 8014f6a:	89a3      	ldrh	r3, [r4, #12]
 8014f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f70:	81a3      	strh	r3, [r4, #12]
 8014f72:	f04f 30ff 	mov.w	r0, #4294967295
 8014f76:	e7e9      	b.n	8014f4c <__ssputs_r+0x88>

08014f78 <_svfiprintf_r>:
 8014f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f7c:	4698      	mov	r8, r3
 8014f7e:	898b      	ldrh	r3, [r1, #12]
 8014f80:	061b      	lsls	r3, r3, #24
 8014f82:	b09d      	sub	sp, #116	; 0x74
 8014f84:	4607      	mov	r7, r0
 8014f86:	460d      	mov	r5, r1
 8014f88:	4614      	mov	r4, r2
 8014f8a:	d50e      	bpl.n	8014faa <_svfiprintf_r+0x32>
 8014f8c:	690b      	ldr	r3, [r1, #16]
 8014f8e:	b963      	cbnz	r3, 8014faa <_svfiprintf_r+0x32>
 8014f90:	2140      	movs	r1, #64	; 0x40
 8014f92:	f7fe fbc7 	bl	8013724 <_malloc_r>
 8014f96:	6028      	str	r0, [r5, #0]
 8014f98:	6128      	str	r0, [r5, #16]
 8014f9a:	b920      	cbnz	r0, 8014fa6 <_svfiprintf_r+0x2e>
 8014f9c:	230c      	movs	r3, #12
 8014f9e:	603b      	str	r3, [r7, #0]
 8014fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8014fa4:	e0d0      	b.n	8015148 <_svfiprintf_r+0x1d0>
 8014fa6:	2340      	movs	r3, #64	; 0x40
 8014fa8:	616b      	str	r3, [r5, #20]
 8014faa:	2300      	movs	r3, #0
 8014fac:	9309      	str	r3, [sp, #36]	; 0x24
 8014fae:	2320      	movs	r3, #32
 8014fb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014fb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8014fb8:	2330      	movs	r3, #48	; 0x30
 8014fba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015160 <_svfiprintf_r+0x1e8>
 8014fbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014fc2:	f04f 0901 	mov.w	r9, #1
 8014fc6:	4623      	mov	r3, r4
 8014fc8:	469a      	mov	sl, r3
 8014fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014fce:	b10a      	cbz	r2, 8014fd4 <_svfiprintf_r+0x5c>
 8014fd0:	2a25      	cmp	r2, #37	; 0x25
 8014fd2:	d1f9      	bne.n	8014fc8 <_svfiprintf_r+0x50>
 8014fd4:	ebba 0b04 	subs.w	fp, sl, r4
 8014fd8:	d00b      	beq.n	8014ff2 <_svfiprintf_r+0x7a>
 8014fda:	465b      	mov	r3, fp
 8014fdc:	4622      	mov	r2, r4
 8014fde:	4629      	mov	r1, r5
 8014fe0:	4638      	mov	r0, r7
 8014fe2:	f7ff ff6f 	bl	8014ec4 <__ssputs_r>
 8014fe6:	3001      	adds	r0, #1
 8014fe8:	f000 80a9 	beq.w	801513e <_svfiprintf_r+0x1c6>
 8014fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fee:	445a      	add	r2, fp
 8014ff0:	9209      	str	r2, [sp, #36]	; 0x24
 8014ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	f000 80a1 	beq.w	801513e <_svfiprintf_r+0x1c6>
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8015002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015006:	f10a 0a01 	add.w	sl, sl, #1
 801500a:	9304      	str	r3, [sp, #16]
 801500c:	9307      	str	r3, [sp, #28]
 801500e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015012:	931a      	str	r3, [sp, #104]	; 0x68
 8015014:	4654      	mov	r4, sl
 8015016:	2205      	movs	r2, #5
 8015018:	f814 1b01 	ldrb.w	r1, [r4], #1
 801501c:	4850      	ldr	r0, [pc, #320]	; (8015160 <_svfiprintf_r+0x1e8>)
 801501e:	f7eb f8ff 	bl	8000220 <memchr>
 8015022:	9a04      	ldr	r2, [sp, #16]
 8015024:	b9d8      	cbnz	r0, 801505e <_svfiprintf_r+0xe6>
 8015026:	06d0      	lsls	r0, r2, #27
 8015028:	bf44      	itt	mi
 801502a:	2320      	movmi	r3, #32
 801502c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015030:	0711      	lsls	r1, r2, #28
 8015032:	bf44      	itt	mi
 8015034:	232b      	movmi	r3, #43	; 0x2b
 8015036:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801503a:	f89a 3000 	ldrb.w	r3, [sl]
 801503e:	2b2a      	cmp	r3, #42	; 0x2a
 8015040:	d015      	beq.n	801506e <_svfiprintf_r+0xf6>
 8015042:	9a07      	ldr	r2, [sp, #28]
 8015044:	4654      	mov	r4, sl
 8015046:	2000      	movs	r0, #0
 8015048:	f04f 0c0a 	mov.w	ip, #10
 801504c:	4621      	mov	r1, r4
 801504e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015052:	3b30      	subs	r3, #48	; 0x30
 8015054:	2b09      	cmp	r3, #9
 8015056:	d94d      	bls.n	80150f4 <_svfiprintf_r+0x17c>
 8015058:	b1b0      	cbz	r0, 8015088 <_svfiprintf_r+0x110>
 801505a:	9207      	str	r2, [sp, #28]
 801505c:	e014      	b.n	8015088 <_svfiprintf_r+0x110>
 801505e:	eba0 0308 	sub.w	r3, r0, r8
 8015062:	fa09 f303 	lsl.w	r3, r9, r3
 8015066:	4313      	orrs	r3, r2
 8015068:	9304      	str	r3, [sp, #16]
 801506a:	46a2      	mov	sl, r4
 801506c:	e7d2      	b.n	8015014 <_svfiprintf_r+0x9c>
 801506e:	9b03      	ldr	r3, [sp, #12]
 8015070:	1d19      	adds	r1, r3, #4
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	9103      	str	r1, [sp, #12]
 8015076:	2b00      	cmp	r3, #0
 8015078:	bfbb      	ittet	lt
 801507a:	425b      	neglt	r3, r3
 801507c:	f042 0202 	orrlt.w	r2, r2, #2
 8015080:	9307      	strge	r3, [sp, #28]
 8015082:	9307      	strlt	r3, [sp, #28]
 8015084:	bfb8      	it	lt
 8015086:	9204      	strlt	r2, [sp, #16]
 8015088:	7823      	ldrb	r3, [r4, #0]
 801508a:	2b2e      	cmp	r3, #46	; 0x2e
 801508c:	d10c      	bne.n	80150a8 <_svfiprintf_r+0x130>
 801508e:	7863      	ldrb	r3, [r4, #1]
 8015090:	2b2a      	cmp	r3, #42	; 0x2a
 8015092:	d134      	bne.n	80150fe <_svfiprintf_r+0x186>
 8015094:	9b03      	ldr	r3, [sp, #12]
 8015096:	1d1a      	adds	r2, r3, #4
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	9203      	str	r2, [sp, #12]
 801509c:	2b00      	cmp	r3, #0
 801509e:	bfb8      	it	lt
 80150a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80150a4:	3402      	adds	r4, #2
 80150a6:	9305      	str	r3, [sp, #20]
 80150a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015170 <_svfiprintf_r+0x1f8>
 80150ac:	7821      	ldrb	r1, [r4, #0]
 80150ae:	2203      	movs	r2, #3
 80150b0:	4650      	mov	r0, sl
 80150b2:	f7eb f8b5 	bl	8000220 <memchr>
 80150b6:	b138      	cbz	r0, 80150c8 <_svfiprintf_r+0x150>
 80150b8:	9b04      	ldr	r3, [sp, #16]
 80150ba:	eba0 000a 	sub.w	r0, r0, sl
 80150be:	2240      	movs	r2, #64	; 0x40
 80150c0:	4082      	lsls	r2, r0
 80150c2:	4313      	orrs	r3, r2
 80150c4:	3401      	adds	r4, #1
 80150c6:	9304      	str	r3, [sp, #16]
 80150c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150cc:	4825      	ldr	r0, [pc, #148]	; (8015164 <_svfiprintf_r+0x1ec>)
 80150ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80150d2:	2206      	movs	r2, #6
 80150d4:	f7eb f8a4 	bl	8000220 <memchr>
 80150d8:	2800      	cmp	r0, #0
 80150da:	d038      	beq.n	801514e <_svfiprintf_r+0x1d6>
 80150dc:	4b22      	ldr	r3, [pc, #136]	; (8015168 <_svfiprintf_r+0x1f0>)
 80150de:	bb1b      	cbnz	r3, 8015128 <_svfiprintf_r+0x1b0>
 80150e0:	9b03      	ldr	r3, [sp, #12]
 80150e2:	3307      	adds	r3, #7
 80150e4:	f023 0307 	bic.w	r3, r3, #7
 80150e8:	3308      	adds	r3, #8
 80150ea:	9303      	str	r3, [sp, #12]
 80150ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150ee:	4433      	add	r3, r6
 80150f0:	9309      	str	r3, [sp, #36]	; 0x24
 80150f2:	e768      	b.n	8014fc6 <_svfiprintf_r+0x4e>
 80150f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80150f8:	460c      	mov	r4, r1
 80150fa:	2001      	movs	r0, #1
 80150fc:	e7a6      	b.n	801504c <_svfiprintf_r+0xd4>
 80150fe:	2300      	movs	r3, #0
 8015100:	3401      	adds	r4, #1
 8015102:	9305      	str	r3, [sp, #20]
 8015104:	4619      	mov	r1, r3
 8015106:	f04f 0c0a 	mov.w	ip, #10
 801510a:	4620      	mov	r0, r4
 801510c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015110:	3a30      	subs	r2, #48	; 0x30
 8015112:	2a09      	cmp	r2, #9
 8015114:	d903      	bls.n	801511e <_svfiprintf_r+0x1a6>
 8015116:	2b00      	cmp	r3, #0
 8015118:	d0c6      	beq.n	80150a8 <_svfiprintf_r+0x130>
 801511a:	9105      	str	r1, [sp, #20]
 801511c:	e7c4      	b.n	80150a8 <_svfiprintf_r+0x130>
 801511e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015122:	4604      	mov	r4, r0
 8015124:	2301      	movs	r3, #1
 8015126:	e7f0      	b.n	801510a <_svfiprintf_r+0x192>
 8015128:	ab03      	add	r3, sp, #12
 801512a:	9300      	str	r3, [sp, #0]
 801512c:	462a      	mov	r2, r5
 801512e:	4b0f      	ldr	r3, [pc, #60]	; (801516c <_svfiprintf_r+0x1f4>)
 8015130:	a904      	add	r1, sp, #16
 8015132:	4638      	mov	r0, r7
 8015134:	f7fc fbe2 	bl	80118fc <_printf_float>
 8015138:	1c42      	adds	r2, r0, #1
 801513a:	4606      	mov	r6, r0
 801513c:	d1d6      	bne.n	80150ec <_svfiprintf_r+0x174>
 801513e:	89ab      	ldrh	r3, [r5, #12]
 8015140:	065b      	lsls	r3, r3, #25
 8015142:	f53f af2d 	bmi.w	8014fa0 <_svfiprintf_r+0x28>
 8015146:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015148:	b01d      	add	sp, #116	; 0x74
 801514a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801514e:	ab03      	add	r3, sp, #12
 8015150:	9300      	str	r3, [sp, #0]
 8015152:	462a      	mov	r2, r5
 8015154:	4b05      	ldr	r3, [pc, #20]	; (801516c <_svfiprintf_r+0x1f4>)
 8015156:	a904      	add	r1, sp, #16
 8015158:	4638      	mov	r0, r7
 801515a:	f7fc fe73 	bl	8011e44 <_printf_i>
 801515e:	e7eb      	b.n	8015138 <_svfiprintf_r+0x1c0>
 8015160:	08018321 	.word	0x08018321
 8015164:	0801832b 	.word	0x0801832b
 8015168:	080118fd 	.word	0x080118fd
 801516c:	08014ec5 	.word	0x08014ec5
 8015170:	08018327 	.word	0x08018327

08015174 <_sungetc_r>:
 8015174:	b538      	push	{r3, r4, r5, lr}
 8015176:	1c4b      	adds	r3, r1, #1
 8015178:	4614      	mov	r4, r2
 801517a:	d103      	bne.n	8015184 <_sungetc_r+0x10>
 801517c:	f04f 35ff 	mov.w	r5, #4294967295
 8015180:	4628      	mov	r0, r5
 8015182:	bd38      	pop	{r3, r4, r5, pc}
 8015184:	8993      	ldrh	r3, [r2, #12]
 8015186:	f023 0320 	bic.w	r3, r3, #32
 801518a:	8193      	strh	r3, [r2, #12]
 801518c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801518e:	6852      	ldr	r2, [r2, #4]
 8015190:	b2cd      	uxtb	r5, r1
 8015192:	b18b      	cbz	r3, 80151b8 <_sungetc_r+0x44>
 8015194:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015196:	4293      	cmp	r3, r2
 8015198:	dd08      	ble.n	80151ac <_sungetc_r+0x38>
 801519a:	6823      	ldr	r3, [r4, #0]
 801519c:	1e5a      	subs	r2, r3, #1
 801519e:	6022      	str	r2, [r4, #0]
 80151a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80151a4:	6863      	ldr	r3, [r4, #4]
 80151a6:	3301      	adds	r3, #1
 80151a8:	6063      	str	r3, [r4, #4]
 80151aa:	e7e9      	b.n	8015180 <_sungetc_r+0xc>
 80151ac:	4621      	mov	r1, r4
 80151ae:	f000 fbe8 	bl	8015982 <__submore>
 80151b2:	2800      	cmp	r0, #0
 80151b4:	d0f1      	beq.n	801519a <_sungetc_r+0x26>
 80151b6:	e7e1      	b.n	801517c <_sungetc_r+0x8>
 80151b8:	6921      	ldr	r1, [r4, #16]
 80151ba:	6823      	ldr	r3, [r4, #0]
 80151bc:	b151      	cbz	r1, 80151d4 <_sungetc_r+0x60>
 80151be:	4299      	cmp	r1, r3
 80151c0:	d208      	bcs.n	80151d4 <_sungetc_r+0x60>
 80151c2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80151c6:	42a9      	cmp	r1, r5
 80151c8:	d104      	bne.n	80151d4 <_sungetc_r+0x60>
 80151ca:	3b01      	subs	r3, #1
 80151cc:	3201      	adds	r2, #1
 80151ce:	6023      	str	r3, [r4, #0]
 80151d0:	6062      	str	r2, [r4, #4]
 80151d2:	e7d5      	b.n	8015180 <_sungetc_r+0xc>
 80151d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80151d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80151dc:	6363      	str	r3, [r4, #52]	; 0x34
 80151de:	2303      	movs	r3, #3
 80151e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80151e2:	4623      	mov	r3, r4
 80151e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80151e8:	6023      	str	r3, [r4, #0]
 80151ea:	2301      	movs	r3, #1
 80151ec:	e7dc      	b.n	80151a8 <_sungetc_r+0x34>

080151ee <__ssrefill_r>:
 80151ee:	b510      	push	{r4, lr}
 80151f0:	460c      	mov	r4, r1
 80151f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80151f4:	b169      	cbz	r1, 8015212 <__ssrefill_r+0x24>
 80151f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80151fa:	4299      	cmp	r1, r3
 80151fc:	d001      	beq.n	8015202 <__ssrefill_r+0x14>
 80151fe:	f7fe fa1d 	bl	801363c <_free_r>
 8015202:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015204:	6063      	str	r3, [r4, #4]
 8015206:	2000      	movs	r0, #0
 8015208:	6360      	str	r0, [r4, #52]	; 0x34
 801520a:	b113      	cbz	r3, 8015212 <__ssrefill_r+0x24>
 801520c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801520e:	6023      	str	r3, [r4, #0]
 8015210:	bd10      	pop	{r4, pc}
 8015212:	6923      	ldr	r3, [r4, #16]
 8015214:	6023      	str	r3, [r4, #0]
 8015216:	2300      	movs	r3, #0
 8015218:	6063      	str	r3, [r4, #4]
 801521a:	89a3      	ldrh	r3, [r4, #12]
 801521c:	f043 0320 	orr.w	r3, r3, #32
 8015220:	81a3      	strh	r3, [r4, #12]
 8015222:	f04f 30ff 	mov.w	r0, #4294967295
 8015226:	e7f3      	b.n	8015210 <__ssrefill_r+0x22>

08015228 <__ssvfiscanf_r>:
 8015228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801522c:	460c      	mov	r4, r1
 801522e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8015232:	2100      	movs	r1, #0
 8015234:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8015238:	49a6      	ldr	r1, [pc, #664]	; (80154d4 <__ssvfiscanf_r+0x2ac>)
 801523a:	91a0      	str	r1, [sp, #640]	; 0x280
 801523c:	f10d 0804 	add.w	r8, sp, #4
 8015240:	49a5      	ldr	r1, [pc, #660]	; (80154d8 <__ssvfiscanf_r+0x2b0>)
 8015242:	4fa6      	ldr	r7, [pc, #664]	; (80154dc <__ssvfiscanf_r+0x2b4>)
 8015244:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80154e0 <__ssvfiscanf_r+0x2b8>
 8015248:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801524c:	4606      	mov	r6, r0
 801524e:	91a1      	str	r1, [sp, #644]	; 0x284
 8015250:	9300      	str	r3, [sp, #0]
 8015252:	7813      	ldrb	r3, [r2, #0]
 8015254:	2b00      	cmp	r3, #0
 8015256:	f000 815a 	beq.w	801550e <__ssvfiscanf_r+0x2e6>
 801525a:	5cf9      	ldrb	r1, [r7, r3]
 801525c:	f011 0108 	ands.w	r1, r1, #8
 8015260:	f102 0501 	add.w	r5, r2, #1
 8015264:	d019      	beq.n	801529a <__ssvfiscanf_r+0x72>
 8015266:	6863      	ldr	r3, [r4, #4]
 8015268:	2b00      	cmp	r3, #0
 801526a:	dd0f      	ble.n	801528c <__ssvfiscanf_r+0x64>
 801526c:	6823      	ldr	r3, [r4, #0]
 801526e:	781a      	ldrb	r2, [r3, #0]
 8015270:	5cba      	ldrb	r2, [r7, r2]
 8015272:	0712      	lsls	r2, r2, #28
 8015274:	d401      	bmi.n	801527a <__ssvfiscanf_r+0x52>
 8015276:	462a      	mov	r2, r5
 8015278:	e7eb      	b.n	8015252 <__ssvfiscanf_r+0x2a>
 801527a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801527c:	3201      	adds	r2, #1
 801527e:	9245      	str	r2, [sp, #276]	; 0x114
 8015280:	6862      	ldr	r2, [r4, #4]
 8015282:	3301      	adds	r3, #1
 8015284:	3a01      	subs	r2, #1
 8015286:	6062      	str	r2, [r4, #4]
 8015288:	6023      	str	r3, [r4, #0]
 801528a:	e7ec      	b.n	8015266 <__ssvfiscanf_r+0x3e>
 801528c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801528e:	4621      	mov	r1, r4
 8015290:	4630      	mov	r0, r6
 8015292:	4798      	blx	r3
 8015294:	2800      	cmp	r0, #0
 8015296:	d0e9      	beq.n	801526c <__ssvfiscanf_r+0x44>
 8015298:	e7ed      	b.n	8015276 <__ssvfiscanf_r+0x4e>
 801529a:	2b25      	cmp	r3, #37	; 0x25
 801529c:	d012      	beq.n	80152c4 <__ssvfiscanf_r+0x9c>
 801529e:	469a      	mov	sl, r3
 80152a0:	6863      	ldr	r3, [r4, #4]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	f340 8091 	ble.w	80153ca <__ssvfiscanf_r+0x1a2>
 80152a8:	6822      	ldr	r2, [r4, #0]
 80152aa:	7813      	ldrb	r3, [r2, #0]
 80152ac:	4553      	cmp	r3, sl
 80152ae:	f040 812e 	bne.w	801550e <__ssvfiscanf_r+0x2e6>
 80152b2:	6863      	ldr	r3, [r4, #4]
 80152b4:	3b01      	subs	r3, #1
 80152b6:	6063      	str	r3, [r4, #4]
 80152b8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80152ba:	3201      	adds	r2, #1
 80152bc:	3301      	adds	r3, #1
 80152be:	6022      	str	r2, [r4, #0]
 80152c0:	9345      	str	r3, [sp, #276]	; 0x114
 80152c2:	e7d8      	b.n	8015276 <__ssvfiscanf_r+0x4e>
 80152c4:	9141      	str	r1, [sp, #260]	; 0x104
 80152c6:	9143      	str	r1, [sp, #268]	; 0x10c
 80152c8:	7853      	ldrb	r3, [r2, #1]
 80152ca:	2b2a      	cmp	r3, #42	; 0x2a
 80152cc:	bf02      	ittt	eq
 80152ce:	2310      	moveq	r3, #16
 80152d0:	1c95      	addeq	r5, r2, #2
 80152d2:	9341      	streq	r3, [sp, #260]	; 0x104
 80152d4:	220a      	movs	r2, #10
 80152d6:	46aa      	mov	sl, r5
 80152d8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80152dc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80152e0:	2b09      	cmp	r3, #9
 80152e2:	d91c      	bls.n	801531e <__ssvfiscanf_r+0xf6>
 80152e4:	487e      	ldr	r0, [pc, #504]	; (80154e0 <__ssvfiscanf_r+0x2b8>)
 80152e6:	2203      	movs	r2, #3
 80152e8:	f7ea ff9a 	bl	8000220 <memchr>
 80152ec:	b138      	cbz	r0, 80152fe <__ssvfiscanf_r+0xd6>
 80152ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80152f0:	eba0 0009 	sub.w	r0, r0, r9
 80152f4:	2301      	movs	r3, #1
 80152f6:	4083      	lsls	r3, r0
 80152f8:	4313      	orrs	r3, r2
 80152fa:	9341      	str	r3, [sp, #260]	; 0x104
 80152fc:	4655      	mov	r5, sl
 80152fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015302:	2b78      	cmp	r3, #120	; 0x78
 8015304:	d806      	bhi.n	8015314 <__ssvfiscanf_r+0xec>
 8015306:	2b57      	cmp	r3, #87	; 0x57
 8015308:	d810      	bhi.n	801532c <__ssvfiscanf_r+0x104>
 801530a:	2b25      	cmp	r3, #37	; 0x25
 801530c:	d0c7      	beq.n	801529e <__ssvfiscanf_r+0x76>
 801530e:	d857      	bhi.n	80153c0 <__ssvfiscanf_r+0x198>
 8015310:	2b00      	cmp	r3, #0
 8015312:	d065      	beq.n	80153e0 <__ssvfiscanf_r+0x1b8>
 8015314:	2303      	movs	r3, #3
 8015316:	9347      	str	r3, [sp, #284]	; 0x11c
 8015318:	230a      	movs	r3, #10
 801531a:	9342      	str	r3, [sp, #264]	; 0x108
 801531c:	e076      	b.n	801540c <__ssvfiscanf_r+0x1e4>
 801531e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8015320:	fb02 1103 	mla	r1, r2, r3, r1
 8015324:	3930      	subs	r1, #48	; 0x30
 8015326:	9143      	str	r1, [sp, #268]	; 0x10c
 8015328:	4655      	mov	r5, sl
 801532a:	e7d4      	b.n	80152d6 <__ssvfiscanf_r+0xae>
 801532c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8015330:	2a20      	cmp	r2, #32
 8015332:	d8ef      	bhi.n	8015314 <__ssvfiscanf_r+0xec>
 8015334:	a101      	add	r1, pc, #4	; (adr r1, 801533c <__ssvfiscanf_r+0x114>)
 8015336:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801533a:	bf00      	nop
 801533c:	080153ef 	.word	0x080153ef
 8015340:	08015315 	.word	0x08015315
 8015344:	08015315 	.word	0x08015315
 8015348:	0801544d 	.word	0x0801544d
 801534c:	08015315 	.word	0x08015315
 8015350:	08015315 	.word	0x08015315
 8015354:	08015315 	.word	0x08015315
 8015358:	08015315 	.word	0x08015315
 801535c:	08015315 	.word	0x08015315
 8015360:	08015315 	.word	0x08015315
 8015364:	08015315 	.word	0x08015315
 8015368:	08015463 	.word	0x08015463
 801536c:	08015449 	.word	0x08015449
 8015370:	080153c7 	.word	0x080153c7
 8015374:	080153c7 	.word	0x080153c7
 8015378:	080153c7 	.word	0x080153c7
 801537c:	08015315 	.word	0x08015315
 8015380:	08015405 	.word	0x08015405
 8015384:	08015315 	.word	0x08015315
 8015388:	08015315 	.word	0x08015315
 801538c:	08015315 	.word	0x08015315
 8015390:	08015315 	.word	0x08015315
 8015394:	08015473 	.word	0x08015473
 8015398:	08015441 	.word	0x08015441
 801539c:	080153e7 	.word	0x080153e7
 80153a0:	08015315 	.word	0x08015315
 80153a4:	08015315 	.word	0x08015315
 80153a8:	0801546f 	.word	0x0801546f
 80153ac:	08015315 	.word	0x08015315
 80153b0:	08015449 	.word	0x08015449
 80153b4:	08015315 	.word	0x08015315
 80153b8:	08015315 	.word	0x08015315
 80153bc:	080153ef 	.word	0x080153ef
 80153c0:	3b45      	subs	r3, #69	; 0x45
 80153c2:	2b02      	cmp	r3, #2
 80153c4:	d8a6      	bhi.n	8015314 <__ssvfiscanf_r+0xec>
 80153c6:	2305      	movs	r3, #5
 80153c8:	e01f      	b.n	801540a <__ssvfiscanf_r+0x1e2>
 80153ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80153cc:	4621      	mov	r1, r4
 80153ce:	4630      	mov	r0, r6
 80153d0:	4798      	blx	r3
 80153d2:	2800      	cmp	r0, #0
 80153d4:	f43f af68 	beq.w	80152a8 <__ssvfiscanf_r+0x80>
 80153d8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80153da:	2800      	cmp	r0, #0
 80153dc:	f040 808d 	bne.w	80154fa <__ssvfiscanf_r+0x2d2>
 80153e0:	f04f 30ff 	mov.w	r0, #4294967295
 80153e4:	e08f      	b.n	8015506 <__ssvfiscanf_r+0x2de>
 80153e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80153e8:	f042 0220 	orr.w	r2, r2, #32
 80153ec:	9241      	str	r2, [sp, #260]	; 0x104
 80153ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80153f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80153f4:	9241      	str	r2, [sp, #260]	; 0x104
 80153f6:	2210      	movs	r2, #16
 80153f8:	2b6f      	cmp	r3, #111	; 0x6f
 80153fa:	9242      	str	r2, [sp, #264]	; 0x108
 80153fc:	bf34      	ite	cc
 80153fe:	2303      	movcc	r3, #3
 8015400:	2304      	movcs	r3, #4
 8015402:	e002      	b.n	801540a <__ssvfiscanf_r+0x1e2>
 8015404:	2300      	movs	r3, #0
 8015406:	9342      	str	r3, [sp, #264]	; 0x108
 8015408:	2303      	movs	r3, #3
 801540a:	9347      	str	r3, [sp, #284]	; 0x11c
 801540c:	6863      	ldr	r3, [r4, #4]
 801540e:	2b00      	cmp	r3, #0
 8015410:	dd3d      	ble.n	801548e <__ssvfiscanf_r+0x266>
 8015412:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015414:	0659      	lsls	r1, r3, #25
 8015416:	d404      	bmi.n	8015422 <__ssvfiscanf_r+0x1fa>
 8015418:	6823      	ldr	r3, [r4, #0]
 801541a:	781a      	ldrb	r2, [r3, #0]
 801541c:	5cba      	ldrb	r2, [r7, r2]
 801541e:	0712      	lsls	r2, r2, #28
 8015420:	d43c      	bmi.n	801549c <__ssvfiscanf_r+0x274>
 8015422:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8015424:	2b02      	cmp	r3, #2
 8015426:	dc4b      	bgt.n	80154c0 <__ssvfiscanf_r+0x298>
 8015428:	466b      	mov	r3, sp
 801542a:	4622      	mov	r2, r4
 801542c:	a941      	add	r1, sp, #260	; 0x104
 801542e:	4630      	mov	r0, r6
 8015430:	f000 f872 	bl	8015518 <_scanf_chars>
 8015434:	2801      	cmp	r0, #1
 8015436:	d06a      	beq.n	801550e <__ssvfiscanf_r+0x2e6>
 8015438:	2802      	cmp	r0, #2
 801543a:	f47f af1c 	bne.w	8015276 <__ssvfiscanf_r+0x4e>
 801543e:	e7cb      	b.n	80153d8 <__ssvfiscanf_r+0x1b0>
 8015440:	2308      	movs	r3, #8
 8015442:	9342      	str	r3, [sp, #264]	; 0x108
 8015444:	2304      	movs	r3, #4
 8015446:	e7e0      	b.n	801540a <__ssvfiscanf_r+0x1e2>
 8015448:	220a      	movs	r2, #10
 801544a:	e7d5      	b.n	80153f8 <__ssvfiscanf_r+0x1d0>
 801544c:	4629      	mov	r1, r5
 801544e:	4640      	mov	r0, r8
 8015450:	f000 fa5e 	bl	8015910 <__sccl>
 8015454:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801545a:	9341      	str	r3, [sp, #260]	; 0x104
 801545c:	4605      	mov	r5, r0
 801545e:	2301      	movs	r3, #1
 8015460:	e7d3      	b.n	801540a <__ssvfiscanf_r+0x1e2>
 8015462:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015468:	9341      	str	r3, [sp, #260]	; 0x104
 801546a:	2300      	movs	r3, #0
 801546c:	e7cd      	b.n	801540a <__ssvfiscanf_r+0x1e2>
 801546e:	2302      	movs	r3, #2
 8015470:	e7cb      	b.n	801540a <__ssvfiscanf_r+0x1e2>
 8015472:	9841      	ldr	r0, [sp, #260]	; 0x104
 8015474:	06c3      	lsls	r3, r0, #27
 8015476:	f53f aefe 	bmi.w	8015276 <__ssvfiscanf_r+0x4e>
 801547a:	9b00      	ldr	r3, [sp, #0]
 801547c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801547e:	1d19      	adds	r1, r3, #4
 8015480:	9100      	str	r1, [sp, #0]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	07c0      	lsls	r0, r0, #31
 8015486:	bf4c      	ite	mi
 8015488:	801a      	strhmi	r2, [r3, #0]
 801548a:	601a      	strpl	r2, [r3, #0]
 801548c:	e6f3      	b.n	8015276 <__ssvfiscanf_r+0x4e>
 801548e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015490:	4621      	mov	r1, r4
 8015492:	4630      	mov	r0, r6
 8015494:	4798      	blx	r3
 8015496:	2800      	cmp	r0, #0
 8015498:	d0bb      	beq.n	8015412 <__ssvfiscanf_r+0x1ea>
 801549a:	e79d      	b.n	80153d8 <__ssvfiscanf_r+0x1b0>
 801549c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801549e:	3201      	adds	r2, #1
 80154a0:	9245      	str	r2, [sp, #276]	; 0x114
 80154a2:	6862      	ldr	r2, [r4, #4]
 80154a4:	3a01      	subs	r2, #1
 80154a6:	2a00      	cmp	r2, #0
 80154a8:	6062      	str	r2, [r4, #4]
 80154aa:	dd02      	ble.n	80154b2 <__ssvfiscanf_r+0x28a>
 80154ac:	3301      	adds	r3, #1
 80154ae:	6023      	str	r3, [r4, #0]
 80154b0:	e7b2      	b.n	8015418 <__ssvfiscanf_r+0x1f0>
 80154b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80154b4:	4621      	mov	r1, r4
 80154b6:	4630      	mov	r0, r6
 80154b8:	4798      	blx	r3
 80154ba:	2800      	cmp	r0, #0
 80154bc:	d0ac      	beq.n	8015418 <__ssvfiscanf_r+0x1f0>
 80154be:	e78b      	b.n	80153d8 <__ssvfiscanf_r+0x1b0>
 80154c0:	2b04      	cmp	r3, #4
 80154c2:	dc0f      	bgt.n	80154e4 <__ssvfiscanf_r+0x2bc>
 80154c4:	466b      	mov	r3, sp
 80154c6:	4622      	mov	r2, r4
 80154c8:	a941      	add	r1, sp, #260	; 0x104
 80154ca:	4630      	mov	r0, r6
 80154cc:	f000 f87e 	bl	80155cc <_scanf_i>
 80154d0:	e7b0      	b.n	8015434 <__ssvfiscanf_r+0x20c>
 80154d2:	bf00      	nop
 80154d4:	08015175 	.word	0x08015175
 80154d8:	080151ef 	.word	0x080151ef
 80154dc:	08018221 	.word	0x08018221
 80154e0:	08018327 	.word	0x08018327
 80154e4:	4b0b      	ldr	r3, [pc, #44]	; (8015514 <__ssvfiscanf_r+0x2ec>)
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	f43f aec5 	beq.w	8015276 <__ssvfiscanf_r+0x4e>
 80154ec:	466b      	mov	r3, sp
 80154ee:	4622      	mov	r2, r4
 80154f0:	a941      	add	r1, sp, #260	; 0x104
 80154f2:	4630      	mov	r0, r6
 80154f4:	f7fc fdc8 	bl	8012088 <_scanf_float>
 80154f8:	e79c      	b.n	8015434 <__ssvfiscanf_r+0x20c>
 80154fa:	89a3      	ldrh	r3, [r4, #12]
 80154fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8015500:	bf18      	it	ne
 8015502:	f04f 30ff 	movne.w	r0, #4294967295
 8015506:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801550a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801550e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015510:	e7f9      	b.n	8015506 <__ssvfiscanf_r+0x2de>
 8015512:	bf00      	nop
 8015514:	08012089 	.word	0x08012089

08015518 <_scanf_chars>:
 8015518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801551c:	4615      	mov	r5, r2
 801551e:	688a      	ldr	r2, [r1, #8]
 8015520:	4680      	mov	r8, r0
 8015522:	460c      	mov	r4, r1
 8015524:	b932      	cbnz	r2, 8015534 <_scanf_chars+0x1c>
 8015526:	698a      	ldr	r2, [r1, #24]
 8015528:	2a00      	cmp	r2, #0
 801552a:	bf0c      	ite	eq
 801552c:	2201      	moveq	r2, #1
 801552e:	f04f 32ff 	movne.w	r2, #4294967295
 8015532:	608a      	str	r2, [r1, #8]
 8015534:	6822      	ldr	r2, [r4, #0]
 8015536:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80155c8 <_scanf_chars+0xb0>
 801553a:	06d1      	lsls	r1, r2, #27
 801553c:	bf5f      	itttt	pl
 801553e:	681a      	ldrpl	r2, [r3, #0]
 8015540:	1d11      	addpl	r1, r2, #4
 8015542:	6019      	strpl	r1, [r3, #0]
 8015544:	6816      	ldrpl	r6, [r2, #0]
 8015546:	2700      	movs	r7, #0
 8015548:	69a0      	ldr	r0, [r4, #24]
 801554a:	b188      	cbz	r0, 8015570 <_scanf_chars+0x58>
 801554c:	2801      	cmp	r0, #1
 801554e:	d107      	bne.n	8015560 <_scanf_chars+0x48>
 8015550:	682a      	ldr	r2, [r5, #0]
 8015552:	7811      	ldrb	r1, [r2, #0]
 8015554:	6962      	ldr	r2, [r4, #20]
 8015556:	5c52      	ldrb	r2, [r2, r1]
 8015558:	b952      	cbnz	r2, 8015570 <_scanf_chars+0x58>
 801555a:	2f00      	cmp	r7, #0
 801555c:	d031      	beq.n	80155c2 <_scanf_chars+0xaa>
 801555e:	e022      	b.n	80155a6 <_scanf_chars+0x8e>
 8015560:	2802      	cmp	r0, #2
 8015562:	d120      	bne.n	80155a6 <_scanf_chars+0x8e>
 8015564:	682b      	ldr	r3, [r5, #0]
 8015566:	781b      	ldrb	r3, [r3, #0]
 8015568:	f819 3003 	ldrb.w	r3, [r9, r3]
 801556c:	071b      	lsls	r3, r3, #28
 801556e:	d41a      	bmi.n	80155a6 <_scanf_chars+0x8e>
 8015570:	6823      	ldr	r3, [r4, #0]
 8015572:	06da      	lsls	r2, r3, #27
 8015574:	bf5e      	ittt	pl
 8015576:	682b      	ldrpl	r3, [r5, #0]
 8015578:	781b      	ldrbpl	r3, [r3, #0]
 801557a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801557e:	682a      	ldr	r2, [r5, #0]
 8015580:	686b      	ldr	r3, [r5, #4]
 8015582:	3201      	adds	r2, #1
 8015584:	602a      	str	r2, [r5, #0]
 8015586:	68a2      	ldr	r2, [r4, #8]
 8015588:	3b01      	subs	r3, #1
 801558a:	3a01      	subs	r2, #1
 801558c:	606b      	str	r3, [r5, #4]
 801558e:	3701      	adds	r7, #1
 8015590:	60a2      	str	r2, [r4, #8]
 8015592:	b142      	cbz	r2, 80155a6 <_scanf_chars+0x8e>
 8015594:	2b00      	cmp	r3, #0
 8015596:	dcd7      	bgt.n	8015548 <_scanf_chars+0x30>
 8015598:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801559c:	4629      	mov	r1, r5
 801559e:	4640      	mov	r0, r8
 80155a0:	4798      	blx	r3
 80155a2:	2800      	cmp	r0, #0
 80155a4:	d0d0      	beq.n	8015548 <_scanf_chars+0x30>
 80155a6:	6823      	ldr	r3, [r4, #0]
 80155a8:	f013 0310 	ands.w	r3, r3, #16
 80155ac:	d105      	bne.n	80155ba <_scanf_chars+0xa2>
 80155ae:	68e2      	ldr	r2, [r4, #12]
 80155b0:	3201      	adds	r2, #1
 80155b2:	60e2      	str	r2, [r4, #12]
 80155b4:	69a2      	ldr	r2, [r4, #24]
 80155b6:	b102      	cbz	r2, 80155ba <_scanf_chars+0xa2>
 80155b8:	7033      	strb	r3, [r6, #0]
 80155ba:	6923      	ldr	r3, [r4, #16]
 80155bc:	443b      	add	r3, r7
 80155be:	6123      	str	r3, [r4, #16]
 80155c0:	2000      	movs	r0, #0
 80155c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80155c6:	bf00      	nop
 80155c8:	08018221 	.word	0x08018221

080155cc <_scanf_i>:
 80155cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155d0:	4698      	mov	r8, r3
 80155d2:	4b74      	ldr	r3, [pc, #464]	; (80157a4 <_scanf_i+0x1d8>)
 80155d4:	460c      	mov	r4, r1
 80155d6:	4682      	mov	sl, r0
 80155d8:	4616      	mov	r6, r2
 80155da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80155de:	b087      	sub	sp, #28
 80155e0:	ab03      	add	r3, sp, #12
 80155e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80155e6:	4b70      	ldr	r3, [pc, #448]	; (80157a8 <_scanf_i+0x1dc>)
 80155e8:	69a1      	ldr	r1, [r4, #24]
 80155ea:	4a70      	ldr	r2, [pc, #448]	; (80157ac <_scanf_i+0x1e0>)
 80155ec:	2903      	cmp	r1, #3
 80155ee:	bf18      	it	ne
 80155f0:	461a      	movne	r2, r3
 80155f2:	68a3      	ldr	r3, [r4, #8]
 80155f4:	9201      	str	r2, [sp, #4]
 80155f6:	1e5a      	subs	r2, r3, #1
 80155f8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80155fc:	bf88      	it	hi
 80155fe:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015602:	4627      	mov	r7, r4
 8015604:	bf82      	ittt	hi
 8015606:	eb03 0905 	addhi.w	r9, r3, r5
 801560a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801560e:	60a3      	strhi	r3, [r4, #8]
 8015610:	f857 3b1c 	ldr.w	r3, [r7], #28
 8015614:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8015618:	bf98      	it	ls
 801561a:	f04f 0900 	movls.w	r9, #0
 801561e:	6023      	str	r3, [r4, #0]
 8015620:	463d      	mov	r5, r7
 8015622:	f04f 0b00 	mov.w	fp, #0
 8015626:	6831      	ldr	r1, [r6, #0]
 8015628:	ab03      	add	r3, sp, #12
 801562a:	7809      	ldrb	r1, [r1, #0]
 801562c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8015630:	2202      	movs	r2, #2
 8015632:	f7ea fdf5 	bl	8000220 <memchr>
 8015636:	b328      	cbz	r0, 8015684 <_scanf_i+0xb8>
 8015638:	f1bb 0f01 	cmp.w	fp, #1
 801563c:	d159      	bne.n	80156f2 <_scanf_i+0x126>
 801563e:	6862      	ldr	r2, [r4, #4]
 8015640:	b92a      	cbnz	r2, 801564e <_scanf_i+0x82>
 8015642:	6822      	ldr	r2, [r4, #0]
 8015644:	2308      	movs	r3, #8
 8015646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801564a:	6063      	str	r3, [r4, #4]
 801564c:	6022      	str	r2, [r4, #0]
 801564e:	6822      	ldr	r2, [r4, #0]
 8015650:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8015654:	6022      	str	r2, [r4, #0]
 8015656:	68a2      	ldr	r2, [r4, #8]
 8015658:	1e51      	subs	r1, r2, #1
 801565a:	60a1      	str	r1, [r4, #8]
 801565c:	b192      	cbz	r2, 8015684 <_scanf_i+0xb8>
 801565e:	6832      	ldr	r2, [r6, #0]
 8015660:	1c51      	adds	r1, r2, #1
 8015662:	6031      	str	r1, [r6, #0]
 8015664:	7812      	ldrb	r2, [r2, #0]
 8015666:	f805 2b01 	strb.w	r2, [r5], #1
 801566a:	6872      	ldr	r2, [r6, #4]
 801566c:	3a01      	subs	r2, #1
 801566e:	2a00      	cmp	r2, #0
 8015670:	6072      	str	r2, [r6, #4]
 8015672:	dc07      	bgt.n	8015684 <_scanf_i+0xb8>
 8015674:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8015678:	4631      	mov	r1, r6
 801567a:	4650      	mov	r0, sl
 801567c:	4790      	blx	r2
 801567e:	2800      	cmp	r0, #0
 8015680:	f040 8085 	bne.w	801578e <_scanf_i+0x1c2>
 8015684:	f10b 0b01 	add.w	fp, fp, #1
 8015688:	f1bb 0f03 	cmp.w	fp, #3
 801568c:	d1cb      	bne.n	8015626 <_scanf_i+0x5a>
 801568e:	6863      	ldr	r3, [r4, #4]
 8015690:	b90b      	cbnz	r3, 8015696 <_scanf_i+0xca>
 8015692:	230a      	movs	r3, #10
 8015694:	6063      	str	r3, [r4, #4]
 8015696:	6863      	ldr	r3, [r4, #4]
 8015698:	4945      	ldr	r1, [pc, #276]	; (80157b0 <_scanf_i+0x1e4>)
 801569a:	6960      	ldr	r0, [r4, #20]
 801569c:	1ac9      	subs	r1, r1, r3
 801569e:	f000 f937 	bl	8015910 <__sccl>
 80156a2:	f04f 0b00 	mov.w	fp, #0
 80156a6:	68a3      	ldr	r3, [r4, #8]
 80156a8:	6822      	ldr	r2, [r4, #0]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d03d      	beq.n	801572a <_scanf_i+0x15e>
 80156ae:	6831      	ldr	r1, [r6, #0]
 80156b0:	6960      	ldr	r0, [r4, #20]
 80156b2:	f891 c000 	ldrb.w	ip, [r1]
 80156b6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80156ba:	2800      	cmp	r0, #0
 80156bc:	d035      	beq.n	801572a <_scanf_i+0x15e>
 80156be:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80156c2:	d124      	bne.n	801570e <_scanf_i+0x142>
 80156c4:	0510      	lsls	r0, r2, #20
 80156c6:	d522      	bpl.n	801570e <_scanf_i+0x142>
 80156c8:	f10b 0b01 	add.w	fp, fp, #1
 80156cc:	f1b9 0f00 	cmp.w	r9, #0
 80156d0:	d003      	beq.n	80156da <_scanf_i+0x10e>
 80156d2:	3301      	adds	r3, #1
 80156d4:	f109 39ff 	add.w	r9, r9, #4294967295
 80156d8:	60a3      	str	r3, [r4, #8]
 80156da:	6873      	ldr	r3, [r6, #4]
 80156dc:	3b01      	subs	r3, #1
 80156de:	2b00      	cmp	r3, #0
 80156e0:	6073      	str	r3, [r6, #4]
 80156e2:	dd1b      	ble.n	801571c <_scanf_i+0x150>
 80156e4:	6833      	ldr	r3, [r6, #0]
 80156e6:	3301      	adds	r3, #1
 80156e8:	6033      	str	r3, [r6, #0]
 80156ea:	68a3      	ldr	r3, [r4, #8]
 80156ec:	3b01      	subs	r3, #1
 80156ee:	60a3      	str	r3, [r4, #8]
 80156f0:	e7d9      	b.n	80156a6 <_scanf_i+0xda>
 80156f2:	f1bb 0f02 	cmp.w	fp, #2
 80156f6:	d1ae      	bne.n	8015656 <_scanf_i+0x8a>
 80156f8:	6822      	ldr	r2, [r4, #0]
 80156fa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80156fe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8015702:	d1bf      	bne.n	8015684 <_scanf_i+0xb8>
 8015704:	2310      	movs	r3, #16
 8015706:	6063      	str	r3, [r4, #4]
 8015708:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801570c:	e7a2      	b.n	8015654 <_scanf_i+0x88>
 801570e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8015712:	6022      	str	r2, [r4, #0]
 8015714:	780b      	ldrb	r3, [r1, #0]
 8015716:	f805 3b01 	strb.w	r3, [r5], #1
 801571a:	e7de      	b.n	80156da <_scanf_i+0x10e>
 801571c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015720:	4631      	mov	r1, r6
 8015722:	4650      	mov	r0, sl
 8015724:	4798      	blx	r3
 8015726:	2800      	cmp	r0, #0
 8015728:	d0df      	beq.n	80156ea <_scanf_i+0x11e>
 801572a:	6823      	ldr	r3, [r4, #0]
 801572c:	05d9      	lsls	r1, r3, #23
 801572e:	d50d      	bpl.n	801574c <_scanf_i+0x180>
 8015730:	42bd      	cmp	r5, r7
 8015732:	d909      	bls.n	8015748 <_scanf_i+0x17c>
 8015734:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015738:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801573c:	4632      	mov	r2, r6
 801573e:	4650      	mov	r0, sl
 8015740:	4798      	blx	r3
 8015742:	f105 39ff 	add.w	r9, r5, #4294967295
 8015746:	464d      	mov	r5, r9
 8015748:	42bd      	cmp	r5, r7
 801574a:	d028      	beq.n	801579e <_scanf_i+0x1d2>
 801574c:	6822      	ldr	r2, [r4, #0]
 801574e:	f012 0210 	ands.w	r2, r2, #16
 8015752:	d113      	bne.n	801577c <_scanf_i+0x1b0>
 8015754:	702a      	strb	r2, [r5, #0]
 8015756:	6863      	ldr	r3, [r4, #4]
 8015758:	9e01      	ldr	r6, [sp, #4]
 801575a:	4639      	mov	r1, r7
 801575c:	4650      	mov	r0, sl
 801575e:	47b0      	blx	r6
 8015760:	f8d8 3000 	ldr.w	r3, [r8]
 8015764:	6821      	ldr	r1, [r4, #0]
 8015766:	1d1a      	adds	r2, r3, #4
 8015768:	f8c8 2000 	str.w	r2, [r8]
 801576c:	f011 0f20 	tst.w	r1, #32
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	d00f      	beq.n	8015794 <_scanf_i+0x1c8>
 8015774:	6018      	str	r0, [r3, #0]
 8015776:	68e3      	ldr	r3, [r4, #12]
 8015778:	3301      	adds	r3, #1
 801577a:	60e3      	str	r3, [r4, #12]
 801577c:	6923      	ldr	r3, [r4, #16]
 801577e:	1bed      	subs	r5, r5, r7
 8015780:	445d      	add	r5, fp
 8015782:	442b      	add	r3, r5
 8015784:	6123      	str	r3, [r4, #16]
 8015786:	2000      	movs	r0, #0
 8015788:	b007      	add	sp, #28
 801578a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801578e:	f04f 0b00 	mov.w	fp, #0
 8015792:	e7ca      	b.n	801572a <_scanf_i+0x15e>
 8015794:	07ca      	lsls	r2, r1, #31
 8015796:	bf4c      	ite	mi
 8015798:	8018      	strhmi	r0, [r3, #0]
 801579a:	6018      	strpl	r0, [r3, #0]
 801579c:	e7eb      	b.n	8015776 <_scanf_i+0x1aa>
 801579e:	2001      	movs	r0, #1
 80157a0:	e7f2      	b.n	8015788 <_scanf_i+0x1bc>
 80157a2:	bf00      	nop
 80157a4:	08017f34 	.word	0x08017f34
 80157a8:	080162dd 	.word	0x080162dd
 80157ac:	08014ec1 	.word	0x08014ec1
 80157b0:	08018342 	.word	0x08018342

080157b4 <__sflush_r>:
 80157b4:	898a      	ldrh	r2, [r1, #12]
 80157b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157ba:	4605      	mov	r5, r0
 80157bc:	0710      	lsls	r0, r2, #28
 80157be:	460c      	mov	r4, r1
 80157c0:	d458      	bmi.n	8015874 <__sflush_r+0xc0>
 80157c2:	684b      	ldr	r3, [r1, #4]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	dc05      	bgt.n	80157d4 <__sflush_r+0x20>
 80157c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	dc02      	bgt.n	80157d4 <__sflush_r+0x20>
 80157ce:	2000      	movs	r0, #0
 80157d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80157d6:	2e00      	cmp	r6, #0
 80157d8:	d0f9      	beq.n	80157ce <__sflush_r+0x1a>
 80157da:	2300      	movs	r3, #0
 80157dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80157e0:	682f      	ldr	r7, [r5, #0]
 80157e2:	6a21      	ldr	r1, [r4, #32]
 80157e4:	602b      	str	r3, [r5, #0]
 80157e6:	d032      	beq.n	801584e <__sflush_r+0x9a>
 80157e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80157ea:	89a3      	ldrh	r3, [r4, #12]
 80157ec:	075a      	lsls	r2, r3, #29
 80157ee:	d505      	bpl.n	80157fc <__sflush_r+0x48>
 80157f0:	6863      	ldr	r3, [r4, #4]
 80157f2:	1ac0      	subs	r0, r0, r3
 80157f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80157f6:	b10b      	cbz	r3, 80157fc <__sflush_r+0x48>
 80157f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80157fa:	1ac0      	subs	r0, r0, r3
 80157fc:	2300      	movs	r3, #0
 80157fe:	4602      	mov	r2, r0
 8015800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015802:	6a21      	ldr	r1, [r4, #32]
 8015804:	4628      	mov	r0, r5
 8015806:	47b0      	blx	r6
 8015808:	1c43      	adds	r3, r0, #1
 801580a:	89a3      	ldrh	r3, [r4, #12]
 801580c:	d106      	bne.n	801581c <__sflush_r+0x68>
 801580e:	6829      	ldr	r1, [r5, #0]
 8015810:	291d      	cmp	r1, #29
 8015812:	d82b      	bhi.n	801586c <__sflush_r+0xb8>
 8015814:	4a29      	ldr	r2, [pc, #164]	; (80158bc <__sflush_r+0x108>)
 8015816:	410a      	asrs	r2, r1
 8015818:	07d6      	lsls	r6, r2, #31
 801581a:	d427      	bmi.n	801586c <__sflush_r+0xb8>
 801581c:	2200      	movs	r2, #0
 801581e:	6062      	str	r2, [r4, #4]
 8015820:	04d9      	lsls	r1, r3, #19
 8015822:	6922      	ldr	r2, [r4, #16]
 8015824:	6022      	str	r2, [r4, #0]
 8015826:	d504      	bpl.n	8015832 <__sflush_r+0x7e>
 8015828:	1c42      	adds	r2, r0, #1
 801582a:	d101      	bne.n	8015830 <__sflush_r+0x7c>
 801582c:	682b      	ldr	r3, [r5, #0]
 801582e:	b903      	cbnz	r3, 8015832 <__sflush_r+0x7e>
 8015830:	6560      	str	r0, [r4, #84]	; 0x54
 8015832:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015834:	602f      	str	r7, [r5, #0]
 8015836:	2900      	cmp	r1, #0
 8015838:	d0c9      	beq.n	80157ce <__sflush_r+0x1a>
 801583a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801583e:	4299      	cmp	r1, r3
 8015840:	d002      	beq.n	8015848 <__sflush_r+0x94>
 8015842:	4628      	mov	r0, r5
 8015844:	f7fd fefa 	bl	801363c <_free_r>
 8015848:	2000      	movs	r0, #0
 801584a:	6360      	str	r0, [r4, #52]	; 0x34
 801584c:	e7c0      	b.n	80157d0 <__sflush_r+0x1c>
 801584e:	2301      	movs	r3, #1
 8015850:	4628      	mov	r0, r5
 8015852:	47b0      	blx	r6
 8015854:	1c41      	adds	r1, r0, #1
 8015856:	d1c8      	bne.n	80157ea <__sflush_r+0x36>
 8015858:	682b      	ldr	r3, [r5, #0]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d0c5      	beq.n	80157ea <__sflush_r+0x36>
 801585e:	2b1d      	cmp	r3, #29
 8015860:	d001      	beq.n	8015866 <__sflush_r+0xb2>
 8015862:	2b16      	cmp	r3, #22
 8015864:	d101      	bne.n	801586a <__sflush_r+0xb6>
 8015866:	602f      	str	r7, [r5, #0]
 8015868:	e7b1      	b.n	80157ce <__sflush_r+0x1a>
 801586a:	89a3      	ldrh	r3, [r4, #12]
 801586c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015870:	81a3      	strh	r3, [r4, #12]
 8015872:	e7ad      	b.n	80157d0 <__sflush_r+0x1c>
 8015874:	690f      	ldr	r7, [r1, #16]
 8015876:	2f00      	cmp	r7, #0
 8015878:	d0a9      	beq.n	80157ce <__sflush_r+0x1a>
 801587a:	0793      	lsls	r3, r2, #30
 801587c:	680e      	ldr	r6, [r1, #0]
 801587e:	bf08      	it	eq
 8015880:	694b      	ldreq	r3, [r1, #20]
 8015882:	600f      	str	r7, [r1, #0]
 8015884:	bf18      	it	ne
 8015886:	2300      	movne	r3, #0
 8015888:	eba6 0807 	sub.w	r8, r6, r7
 801588c:	608b      	str	r3, [r1, #8]
 801588e:	f1b8 0f00 	cmp.w	r8, #0
 8015892:	dd9c      	ble.n	80157ce <__sflush_r+0x1a>
 8015894:	6a21      	ldr	r1, [r4, #32]
 8015896:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015898:	4643      	mov	r3, r8
 801589a:	463a      	mov	r2, r7
 801589c:	4628      	mov	r0, r5
 801589e:	47b0      	blx	r6
 80158a0:	2800      	cmp	r0, #0
 80158a2:	dc06      	bgt.n	80158b2 <__sflush_r+0xfe>
 80158a4:	89a3      	ldrh	r3, [r4, #12]
 80158a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80158aa:	81a3      	strh	r3, [r4, #12]
 80158ac:	f04f 30ff 	mov.w	r0, #4294967295
 80158b0:	e78e      	b.n	80157d0 <__sflush_r+0x1c>
 80158b2:	4407      	add	r7, r0
 80158b4:	eba8 0800 	sub.w	r8, r8, r0
 80158b8:	e7e9      	b.n	801588e <__sflush_r+0xda>
 80158ba:	bf00      	nop
 80158bc:	dfbffffe 	.word	0xdfbffffe

080158c0 <_fflush_r>:
 80158c0:	b538      	push	{r3, r4, r5, lr}
 80158c2:	690b      	ldr	r3, [r1, #16]
 80158c4:	4605      	mov	r5, r0
 80158c6:	460c      	mov	r4, r1
 80158c8:	b913      	cbnz	r3, 80158d0 <_fflush_r+0x10>
 80158ca:	2500      	movs	r5, #0
 80158cc:	4628      	mov	r0, r5
 80158ce:	bd38      	pop	{r3, r4, r5, pc}
 80158d0:	b118      	cbz	r0, 80158da <_fflush_r+0x1a>
 80158d2:	6a03      	ldr	r3, [r0, #32]
 80158d4:	b90b      	cbnz	r3, 80158da <_fflush_r+0x1a>
 80158d6:	f7fc fe73 	bl	80125c0 <__sinit>
 80158da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d0f3      	beq.n	80158ca <_fflush_r+0xa>
 80158e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80158e4:	07d0      	lsls	r0, r2, #31
 80158e6:	d404      	bmi.n	80158f2 <_fflush_r+0x32>
 80158e8:	0599      	lsls	r1, r3, #22
 80158ea:	d402      	bmi.n	80158f2 <_fflush_r+0x32>
 80158ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80158ee:	f7fd f814 	bl	801291a <__retarget_lock_acquire_recursive>
 80158f2:	4628      	mov	r0, r5
 80158f4:	4621      	mov	r1, r4
 80158f6:	f7ff ff5d 	bl	80157b4 <__sflush_r>
 80158fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80158fc:	07da      	lsls	r2, r3, #31
 80158fe:	4605      	mov	r5, r0
 8015900:	d4e4      	bmi.n	80158cc <_fflush_r+0xc>
 8015902:	89a3      	ldrh	r3, [r4, #12]
 8015904:	059b      	lsls	r3, r3, #22
 8015906:	d4e1      	bmi.n	80158cc <_fflush_r+0xc>
 8015908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801590a:	f7fd f807 	bl	801291c <__retarget_lock_release_recursive>
 801590e:	e7dd      	b.n	80158cc <_fflush_r+0xc>

08015910 <__sccl>:
 8015910:	b570      	push	{r4, r5, r6, lr}
 8015912:	780b      	ldrb	r3, [r1, #0]
 8015914:	4604      	mov	r4, r0
 8015916:	2b5e      	cmp	r3, #94	; 0x5e
 8015918:	bf0b      	itete	eq
 801591a:	784b      	ldrbeq	r3, [r1, #1]
 801591c:	1c4a      	addne	r2, r1, #1
 801591e:	1c8a      	addeq	r2, r1, #2
 8015920:	2100      	movne	r1, #0
 8015922:	bf08      	it	eq
 8015924:	2101      	moveq	r1, #1
 8015926:	3801      	subs	r0, #1
 8015928:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801592c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8015930:	42a8      	cmp	r0, r5
 8015932:	d1fb      	bne.n	801592c <__sccl+0x1c>
 8015934:	b90b      	cbnz	r3, 801593a <__sccl+0x2a>
 8015936:	1e50      	subs	r0, r2, #1
 8015938:	bd70      	pop	{r4, r5, r6, pc}
 801593a:	f081 0101 	eor.w	r1, r1, #1
 801593e:	54e1      	strb	r1, [r4, r3]
 8015940:	4610      	mov	r0, r2
 8015942:	4602      	mov	r2, r0
 8015944:	f812 5b01 	ldrb.w	r5, [r2], #1
 8015948:	2d2d      	cmp	r5, #45	; 0x2d
 801594a:	d005      	beq.n	8015958 <__sccl+0x48>
 801594c:	2d5d      	cmp	r5, #93	; 0x5d
 801594e:	d016      	beq.n	801597e <__sccl+0x6e>
 8015950:	2d00      	cmp	r5, #0
 8015952:	d0f1      	beq.n	8015938 <__sccl+0x28>
 8015954:	462b      	mov	r3, r5
 8015956:	e7f2      	b.n	801593e <__sccl+0x2e>
 8015958:	7846      	ldrb	r6, [r0, #1]
 801595a:	2e5d      	cmp	r6, #93	; 0x5d
 801595c:	d0fa      	beq.n	8015954 <__sccl+0x44>
 801595e:	42b3      	cmp	r3, r6
 8015960:	dcf8      	bgt.n	8015954 <__sccl+0x44>
 8015962:	3002      	adds	r0, #2
 8015964:	461a      	mov	r2, r3
 8015966:	3201      	adds	r2, #1
 8015968:	4296      	cmp	r6, r2
 801596a:	54a1      	strb	r1, [r4, r2]
 801596c:	dcfb      	bgt.n	8015966 <__sccl+0x56>
 801596e:	1af2      	subs	r2, r6, r3
 8015970:	3a01      	subs	r2, #1
 8015972:	1c5d      	adds	r5, r3, #1
 8015974:	42b3      	cmp	r3, r6
 8015976:	bfa8      	it	ge
 8015978:	2200      	movge	r2, #0
 801597a:	18ab      	adds	r3, r5, r2
 801597c:	e7e1      	b.n	8015942 <__sccl+0x32>
 801597e:	4610      	mov	r0, r2
 8015980:	e7da      	b.n	8015938 <__sccl+0x28>

08015982 <__submore>:
 8015982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015986:	460c      	mov	r4, r1
 8015988:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801598a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801598e:	4299      	cmp	r1, r3
 8015990:	d11d      	bne.n	80159ce <__submore+0x4c>
 8015992:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015996:	f7fd fec5 	bl	8013724 <_malloc_r>
 801599a:	b918      	cbnz	r0, 80159a4 <__submore+0x22>
 801599c:	f04f 30ff 	mov.w	r0, #4294967295
 80159a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80159a8:	63a3      	str	r3, [r4, #56]	; 0x38
 80159aa:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80159ae:	6360      	str	r0, [r4, #52]	; 0x34
 80159b0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80159b4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80159b8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80159bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80159c0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80159c4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80159c8:	6020      	str	r0, [r4, #0]
 80159ca:	2000      	movs	r0, #0
 80159cc:	e7e8      	b.n	80159a0 <__submore+0x1e>
 80159ce:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80159d0:	0077      	lsls	r7, r6, #1
 80159d2:	463a      	mov	r2, r7
 80159d4:	f000 fbe1 	bl	801619a <_realloc_r>
 80159d8:	4605      	mov	r5, r0
 80159da:	2800      	cmp	r0, #0
 80159dc:	d0de      	beq.n	801599c <__submore+0x1a>
 80159de:	eb00 0806 	add.w	r8, r0, r6
 80159e2:	4601      	mov	r1, r0
 80159e4:	4632      	mov	r2, r6
 80159e6:	4640      	mov	r0, r8
 80159e8:	f7fc ff99 	bl	801291e <memcpy>
 80159ec:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80159f0:	f8c4 8000 	str.w	r8, [r4]
 80159f4:	e7e9      	b.n	80159ca <__submore+0x48>

080159f6 <memmove>:
 80159f6:	4288      	cmp	r0, r1
 80159f8:	b510      	push	{r4, lr}
 80159fa:	eb01 0402 	add.w	r4, r1, r2
 80159fe:	d902      	bls.n	8015a06 <memmove+0x10>
 8015a00:	4284      	cmp	r4, r0
 8015a02:	4623      	mov	r3, r4
 8015a04:	d807      	bhi.n	8015a16 <memmove+0x20>
 8015a06:	1e43      	subs	r3, r0, #1
 8015a08:	42a1      	cmp	r1, r4
 8015a0a:	d008      	beq.n	8015a1e <memmove+0x28>
 8015a0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015a10:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015a14:	e7f8      	b.n	8015a08 <memmove+0x12>
 8015a16:	4402      	add	r2, r0
 8015a18:	4601      	mov	r1, r0
 8015a1a:	428a      	cmp	r2, r1
 8015a1c:	d100      	bne.n	8015a20 <memmove+0x2a>
 8015a1e:	bd10      	pop	{r4, pc}
 8015a20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015a24:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015a28:	e7f7      	b.n	8015a1a <memmove+0x24>
	...

08015a2c <_sbrk_r>:
 8015a2c:	b538      	push	{r3, r4, r5, lr}
 8015a2e:	4d06      	ldr	r5, [pc, #24]	; (8015a48 <_sbrk_r+0x1c>)
 8015a30:	2300      	movs	r3, #0
 8015a32:	4604      	mov	r4, r0
 8015a34:	4608      	mov	r0, r1
 8015a36:	602b      	str	r3, [r5, #0]
 8015a38:	f7f0 f95e 	bl	8005cf8 <_sbrk>
 8015a3c:	1c43      	adds	r3, r0, #1
 8015a3e:	d102      	bne.n	8015a46 <_sbrk_r+0x1a>
 8015a40:	682b      	ldr	r3, [r5, #0]
 8015a42:	b103      	cbz	r3, 8015a46 <_sbrk_r+0x1a>
 8015a44:	6023      	str	r3, [r4, #0]
 8015a46:	bd38      	pop	{r3, r4, r5, pc}
 8015a48:	2000901c 	.word	0x2000901c
 8015a4c:	00000000 	.word	0x00000000

08015a50 <nan>:
 8015a50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015a58 <nan+0x8>
 8015a54:	4770      	bx	lr
 8015a56:	bf00      	nop
 8015a58:	00000000 	.word	0x00000000
 8015a5c:	7ff80000 	.word	0x7ff80000

08015a60 <__assert_func>:
 8015a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015a62:	4614      	mov	r4, r2
 8015a64:	461a      	mov	r2, r3
 8015a66:	4b09      	ldr	r3, [pc, #36]	; (8015a8c <__assert_func+0x2c>)
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	4605      	mov	r5, r0
 8015a6c:	68d8      	ldr	r0, [r3, #12]
 8015a6e:	b14c      	cbz	r4, 8015a84 <__assert_func+0x24>
 8015a70:	4b07      	ldr	r3, [pc, #28]	; (8015a90 <__assert_func+0x30>)
 8015a72:	9100      	str	r1, [sp, #0]
 8015a74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015a78:	4906      	ldr	r1, [pc, #24]	; (8015a94 <__assert_func+0x34>)
 8015a7a:	462b      	mov	r3, r5
 8015a7c:	f000 fc3e 	bl	80162fc <fiprintf>
 8015a80:	f000 fc4e 	bl	8016320 <abort>
 8015a84:	4b04      	ldr	r3, [pc, #16]	; (8015a98 <__assert_func+0x38>)
 8015a86:	461c      	mov	r4, r3
 8015a88:	e7f3      	b.n	8015a72 <__assert_func+0x12>
 8015a8a:	bf00      	nop
 8015a8c:	20000070 	.word	0x20000070
 8015a90:	08018355 	.word	0x08018355
 8015a94:	08018362 	.word	0x08018362
 8015a98:	08018390 	.word	0x08018390

08015a9c <_calloc_r>:
 8015a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015a9e:	fba1 2402 	umull	r2, r4, r1, r2
 8015aa2:	b94c      	cbnz	r4, 8015ab8 <_calloc_r+0x1c>
 8015aa4:	4611      	mov	r1, r2
 8015aa6:	9201      	str	r2, [sp, #4]
 8015aa8:	f7fd fe3c 	bl	8013724 <_malloc_r>
 8015aac:	9a01      	ldr	r2, [sp, #4]
 8015aae:	4605      	mov	r5, r0
 8015ab0:	b930      	cbnz	r0, 8015ac0 <_calloc_r+0x24>
 8015ab2:	4628      	mov	r0, r5
 8015ab4:	b003      	add	sp, #12
 8015ab6:	bd30      	pop	{r4, r5, pc}
 8015ab8:	220c      	movs	r2, #12
 8015aba:	6002      	str	r2, [r0, #0]
 8015abc:	2500      	movs	r5, #0
 8015abe:	e7f8      	b.n	8015ab2 <_calloc_r+0x16>
 8015ac0:	4621      	mov	r1, r4
 8015ac2:	f7fc fe44 	bl	801274e <memset>
 8015ac6:	e7f4      	b.n	8015ab2 <_calloc_r+0x16>

08015ac8 <rshift>:
 8015ac8:	6903      	ldr	r3, [r0, #16]
 8015aca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015ace:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ad2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015ad6:	f100 0414 	add.w	r4, r0, #20
 8015ada:	dd45      	ble.n	8015b68 <rshift+0xa0>
 8015adc:	f011 011f 	ands.w	r1, r1, #31
 8015ae0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015ae4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015ae8:	d10c      	bne.n	8015b04 <rshift+0x3c>
 8015aea:	f100 0710 	add.w	r7, r0, #16
 8015aee:	4629      	mov	r1, r5
 8015af0:	42b1      	cmp	r1, r6
 8015af2:	d334      	bcc.n	8015b5e <rshift+0x96>
 8015af4:	1a9b      	subs	r3, r3, r2
 8015af6:	009b      	lsls	r3, r3, #2
 8015af8:	1eea      	subs	r2, r5, #3
 8015afa:	4296      	cmp	r6, r2
 8015afc:	bf38      	it	cc
 8015afe:	2300      	movcc	r3, #0
 8015b00:	4423      	add	r3, r4
 8015b02:	e015      	b.n	8015b30 <rshift+0x68>
 8015b04:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015b08:	f1c1 0820 	rsb	r8, r1, #32
 8015b0c:	40cf      	lsrs	r7, r1
 8015b0e:	f105 0e04 	add.w	lr, r5, #4
 8015b12:	46a1      	mov	r9, r4
 8015b14:	4576      	cmp	r6, lr
 8015b16:	46f4      	mov	ip, lr
 8015b18:	d815      	bhi.n	8015b46 <rshift+0x7e>
 8015b1a:	1a9a      	subs	r2, r3, r2
 8015b1c:	0092      	lsls	r2, r2, #2
 8015b1e:	3a04      	subs	r2, #4
 8015b20:	3501      	adds	r5, #1
 8015b22:	42ae      	cmp	r6, r5
 8015b24:	bf38      	it	cc
 8015b26:	2200      	movcc	r2, #0
 8015b28:	18a3      	adds	r3, r4, r2
 8015b2a:	50a7      	str	r7, [r4, r2]
 8015b2c:	b107      	cbz	r7, 8015b30 <rshift+0x68>
 8015b2e:	3304      	adds	r3, #4
 8015b30:	1b1a      	subs	r2, r3, r4
 8015b32:	42a3      	cmp	r3, r4
 8015b34:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015b38:	bf08      	it	eq
 8015b3a:	2300      	moveq	r3, #0
 8015b3c:	6102      	str	r2, [r0, #16]
 8015b3e:	bf08      	it	eq
 8015b40:	6143      	streq	r3, [r0, #20]
 8015b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b46:	f8dc c000 	ldr.w	ip, [ip]
 8015b4a:	fa0c fc08 	lsl.w	ip, ip, r8
 8015b4e:	ea4c 0707 	orr.w	r7, ip, r7
 8015b52:	f849 7b04 	str.w	r7, [r9], #4
 8015b56:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015b5a:	40cf      	lsrs	r7, r1
 8015b5c:	e7da      	b.n	8015b14 <rshift+0x4c>
 8015b5e:	f851 cb04 	ldr.w	ip, [r1], #4
 8015b62:	f847 cf04 	str.w	ip, [r7, #4]!
 8015b66:	e7c3      	b.n	8015af0 <rshift+0x28>
 8015b68:	4623      	mov	r3, r4
 8015b6a:	e7e1      	b.n	8015b30 <rshift+0x68>

08015b6c <__hexdig_fun>:
 8015b6c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015b70:	2b09      	cmp	r3, #9
 8015b72:	d802      	bhi.n	8015b7a <__hexdig_fun+0xe>
 8015b74:	3820      	subs	r0, #32
 8015b76:	b2c0      	uxtb	r0, r0
 8015b78:	4770      	bx	lr
 8015b7a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015b7e:	2b05      	cmp	r3, #5
 8015b80:	d801      	bhi.n	8015b86 <__hexdig_fun+0x1a>
 8015b82:	3847      	subs	r0, #71	; 0x47
 8015b84:	e7f7      	b.n	8015b76 <__hexdig_fun+0xa>
 8015b86:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015b8a:	2b05      	cmp	r3, #5
 8015b8c:	d801      	bhi.n	8015b92 <__hexdig_fun+0x26>
 8015b8e:	3827      	subs	r0, #39	; 0x27
 8015b90:	e7f1      	b.n	8015b76 <__hexdig_fun+0xa>
 8015b92:	2000      	movs	r0, #0
 8015b94:	4770      	bx	lr
	...

08015b98 <__gethex>:
 8015b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b9c:	4617      	mov	r7, r2
 8015b9e:	680a      	ldr	r2, [r1, #0]
 8015ba0:	b085      	sub	sp, #20
 8015ba2:	f102 0b02 	add.w	fp, r2, #2
 8015ba6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015baa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015bae:	4681      	mov	r9, r0
 8015bb0:	468a      	mov	sl, r1
 8015bb2:	9302      	str	r3, [sp, #8]
 8015bb4:	32fe      	adds	r2, #254	; 0xfe
 8015bb6:	eb02 030b 	add.w	r3, r2, fp
 8015bba:	46d8      	mov	r8, fp
 8015bbc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8015bc0:	9301      	str	r3, [sp, #4]
 8015bc2:	2830      	cmp	r0, #48	; 0x30
 8015bc4:	d0f7      	beq.n	8015bb6 <__gethex+0x1e>
 8015bc6:	f7ff ffd1 	bl	8015b6c <__hexdig_fun>
 8015bca:	4604      	mov	r4, r0
 8015bcc:	2800      	cmp	r0, #0
 8015bce:	d138      	bne.n	8015c42 <__gethex+0xaa>
 8015bd0:	49a7      	ldr	r1, [pc, #668]	; (8015e70 <__gethex+0x2d8>)
 8015bd2:	2201      	movs	r2, #1
 8015bd4:	4640      	mov	r0, r8
 8015bd6:	f7fc fdc2 	bl	801275e <strncmp>
 8015bda:	4606      	mov	r6, r0
 8015bdc:	2800      	cmp	r0, #0
 8015bde:	d169      	bne.n	8015cb4 <__gethex+0x11c>
 8015be0:	f898 0001 	ldrb.w	r0, [r8, #1]
 8015be4:	465d      	mov	r5, fp
 8015be6:	f7ff ffc1 	bl	8015b6c <__hexdig_fun>
 8015bea:	2800      	cmp	r0, #0
 8015bec:	d064      	beq.n	8015cb8 <__gethex+0x120>
 8015bee:	465a      	mov	r2, fp
 8015bf0:	7810      	ldrb	r0, [r2, #0]
 8015bf2:	2830      	cmp	r0, #48	; 0x30
 8015bf4:	4690      	mov	r8, r2
 8015bf6:	f102 0201 	add.w	r2, r2, #1
 8015bfa:	d0f9      	beq.n	8015bf0 <__gethex+0x58>
 8015bfc:	f7ff ffb6 	bl	8015b6c <__hexdig_fun>
 8015c00:	2301      	movs	r3, #1
 8015c02:	fab0 f480 	clz	r4, r0
 8015c06:	0964      	lsrs	r4, r4, #5
 8015c08:	465e      	mov	r6, fp
 8015c0a:	9301      	str	r3, [sp, #4]
 8015c0c:	4642      	mov	r2, r8
 8015c0e:	4615      	mov	r5, r2
 8015c10:	3201      	adds	r2, #1
 8015c12:	7828      	ldrb	r0, [r5, #0]
 8015c14:	f7ff ffaa 	bl	8015b6c <__hexdig_fun>
 8015c18:	2800      	cmp	r0, #0
 8015c1a:	d1f8      	bne.n	8015c0e <__gethex+0x76>
 8015c1c:	4994      	ldr	r1, [pc, #592]	; (8015e70 <__gethex+0x2d8>)
 8015c1e:	2201      	movs	r2, #1
 8015c20:	4628      	mov	r0, r5
 8015c22:	f7fc fd9c 	bl	801275e <strncmp>
 8015c26:	b978      	cbnz	r0, 8015c48 <__gethex+0xb0>
 8015c28:	b946      	cbnz	r6, 8015c3c <__gethex+0xa4>
 8015c2a:	1c6e      	adds	r6, r5, #1
 8015c2c:	4632      	mov	r2, r6
 8015c2e:	4615      	mov	r5, r2
 8015c30:	3201      	adds	r2, #1
 8015c32:	7828      	ldrb	r0, [r5, #0]
 8015c34:	f7ff ff9a 	bl	8015b6c <__hexdig_fun>
 8015c38:	2800      	cmp	r0, #0
 8015c3a:	d1f8      	bne.n	8015c2e <__gethex+0x96>
 8015c3c:	1b73      	subs	r3, r6, r5
 8015c3e:	009e      	lsls	r6, r3, #2
 8015c40:	e004      	b.n	8015c4c <__gethex+0xb4>
 8015c42:	2400      	movs	r4, #0
 8015c44:	4626      	mov	r6, r4
 8015c46:	e7e1      	b.n	8015c0c <__gethex+0x74>
 8015c48:	2e00      	cmp	r6, #0
 8015c4a:	d1f7      	bne.n	8015c3c <__gethex+0xa4>
 8015c4c:	782b      	ldrb	r3, [r5, #0]
 8015c4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015c52:	2b50      	cmp	r3, #80	; 0x50
 8015c54:	d13d      	bne.n	8015cd2 <__gethex+0x13a>
 8015c56:	786b      	ldrb	r3, [r5, #1]
 8015c58:	2b2b      	cmp	r3, #43	; 0x2b
 8015c5a:	d02f      	beq.n	8015cbc <__gethex+0x124>
 8015c5c:	2b2d      	cmp	r3, #45	; 0x2d
 8015c5e:	d031      	beq.n	8015cc4 <__gethex+0x12c>
 8015c60:	1c69      	adds	r1, r5, #1
 8015c62:	f04f 0b00 	mov.w	fp, #0
 8015c66:	7808      	ldrb	r0, [r1, #0]
 8015c68:	f7ff ff80 	bl	8015b6c <__hexdig_fun>
 8015c6c:	1e42      	subs	r2, r0, #1
 8015c6e:	b2d2      	uxtb	r2, r2
 8015c70:	2a18      	cmp	r2, #24
 8015c72:	d82e      	bhi.n	8015cd2 <__gethex+0x13a>
 8015c74:	f1a0 0210 	sub.w	r2, r0, #16
 8015c78:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015c7c:	f7ff ff76 	bl	8015b6c <__hexdig_fun>
 8015c80:	f100 3cff 	add.w	ip, r0, #4294967295
 8015c84:	fa5f fc8c 	uxtb.w	ip, ip
 8015c88:	f1bc 0f18 	cmp.w	ip, #24
 8015c8c:	d91d      	bls.n	8015cca <__gethex+0x132>
 8015c8e:	f1bb 0f00 	cmp.w	fp, #0
 8015c92:	d000      	beq.n	8015c96 <__gethex+0xfe>
 8015c94:	4252      	negs	r2, r2
 8015c96:	4416      	add	r6, r2
 8015c98:	f8ca 1000 	str.w	r1, [sl]
 8015c9c:	b1dc      	cbz	r4, 8015cd6 <__gethex+0x13e>
 8015c9e:	9b01      	ldr	r3, [sp, #4]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	bf14      	ite	ne
 8015ca4:	f04f 0800 	movne.w	r8, #0
 8015ca8:	f04f 0806 	moveq.w	r8, #6
 8015cac:	4640      	mov	r0, r8
 8015cae:	b005      	add	sp, #20
 8015cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cb4:	4645      	mov	r5, r8
 8015cb6:	4626      	mov	r6, r4
 8015cb8:	2401      	movs	r4, #1
 8015cba:	e7c7      	b.n	8015c4c <__gethex+0xb4>
 8015cbc:	f04f 0b00 	mov.w	fp, #0
 8015cc0:	1ca9      	adds	r1, r5, #2
 8015cc2:	e7d0      	b.n	8015c66 <__gethex+0xce>
 8015cc4:	f04f 0b01 	mov.w	fp, #1
 8015cc8:	e7fa      	b.n	8015cc0 <__gethex+0x128>
 8015cca:	230a      	movs	r3, #10
 8015ccc:	fb03 0002 	mla	r0, r3, r2, r0
 8015cd0:	e7d0      	b.n	8015c74 <__gethex+0xdc>
 8015cd2:	4629      	mov	r1, r5
 8015cd4:	e7e0      	b.n	8015c98 <__gethex+0x100>
 8015cd6:	eba5 0308 	sub.w	r3, r5, r8
 8015cda:	3b01      	subs	r3, #1
 8015cdc:	4621      	mov	r1, r4
 8015cde:	2b07      	cmp	r3, #7
 8015ce0:	dc0a      	bgt.n	8015cf8 <__gethex+0x160>
 8015ce2:	4648      	mov	r0, r9
 8015ce4:	f7fd fdaa 	bl	801383c <_Balloc>
 8015ce8:	4604      	mov	r4, r0
 8015cea:	b940      	cbnz	r0, 8015cfe <__gethex+0x166>
 8015cec:	4b61      	ldr	r3, [pc, #388]	; (8015e74 <__gethex+0x2dc>)
 8015cee:	4602      	mov	r2, r0
 8015cf0:	21e4      	movs	r1, #228	; 0xe4
 8015cf2:	4861      	ldr	r0, [pc, #388]	; (8015e78 <__gethex+0x2e0>)
 8015cf4:	f7ff feb4 	bl	8015a60 <__assert_func>
 8015cf8:	3101      	adds	r1, #1
 8015cfa:	105b      	asrs	r3, r3, #1
 8015cfc:	e7ef      	b.n	8015cde <__gethex+0x146>
 8015cfe:	f100 0a14 	add.w	sl, r0, #20
 8015d02:	2300      	movs	r3, #0
 8015d04:	495a      	ldr	r1, [pc, #360]	; (8015e70 <__gethex+0x2d8>)
 8015d06:	f8cd a004 	str.w	sl, [sp, #4]
 8015d0a:	469b      	mov	fp, r3
 8015d0c:	45a8      	cmp	r8, r5
 8015d0e:	d342      	bcc.n	8015d96 <__gethex+0x1fe>
 8015d10:	9801      	ldr	r0, [sp, #4]
 8015d12:	f840 bb04 	str.w	fp, [r0], #4
 8015d16:	eba0 000a 	sub.w	r0, r0, sl
 8015d1a:	1080      	asrs	r0, r0, #2
 8015d1c:	6120      	str	r0, [r4, #16]
 8015d1e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8015d22:	4658      	mov	r0, fp
 8015d24:	f7fd fe7c 	bl	8013a20 <__hi0bits>
 8015d28:	683d      	ldr	r5, [r7, #0]
 8015d2a:	eba8 0000 	sub.w	r0, r8, r0
 8015d2e:	42a8      	cmp	r0, r5
 8015d30:	dd59      	ble.n	8015de6 <__gethex+0x24e>
 8015d32:	eba0 0805 	sub.w	r8, r0, r5
 8015d36:	4641      	mov	r1, r8
 8015d38:	4620      	mov	r0, r4
 8015d3a:	f7fe fa0b 	bl	8014154 <__any_on>
 8015d3e:	4683      	mov	fp, r0
 8015d40:	b1b8      	cbz	r0, 8015d72 <__gethex+0x1da>
 8015d42:	f108 33ff 	add.w	r3, r8, #4294967295
 8015d46:	1159      	asrs	r1, r3, #5
 8015d48:	f003 021f 	and.w	r2, r3, #31
 8015d4c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015d50:	f04f 0b01 	mov.w	fp, #1
 8015d54:	fa0b f202 	lsl.w	r2, fp, r2
 8015d58:	420a      	tst	r2, r1
 8015d5a:	d00a      	beq.n	8015d72 <__gethex+0x1da>
 8015d5c:	455b      	cmp	r3, fp
 8015d5e:	dd06      	ble.n	8015d6e <__gethex+0x1d6>
 8015d60:	f1a8 0102 	sub.w	r1, r8, #2
 8015d64:	4620      	mov	r0, r4
 8015d66:	f7fe f9f5 	bl	8014154 <__any_on>
 8015d6a:	2800      	cmp	r0, #0
 8015d6c:	d138      	bne.n	8015de0 <__gethex+0x248>
 8015d6e:	f04f 0b02 	mov.w	fp, #2
 8015d72:	4641      	mov	r1, r8
 8015d74:	4620      	mov	r0, r4
 8015d76:	f7ff fea7 	bl	8015ac8 <rshift>
 8015d7a:	4446      	add	r6, r8
 8015d7c:	68bb      	ldr	r3, [r7, #8]
 8015d7e:	42b3      	cmp	r3, r6
 8015d80:	da41      	bge.n	8015e06 <__gethex+0x26e>
 8015d82:	4621      	mov	r1, r4
 8015d84:	4648      	mov	r0, r9
 8015d86:	f7fd fd99 	bl	80138bc <_Bfree>
 8015d8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	6013      	str	r3, [r2, #0]
 8015d90:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8015d94:	e78a      	b.n	8015cac <__gethex+0x114>
 8015d96:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8015d9a:	2a2e      	cmp	r2, #46	; 0x2e
 8015d9c:	d014      	beq.n	8015dc8 <__gethex+0x230>
 8015d9e:	2b20      	cmp	r3, #32
 8015da0:	d106      	bne.n	8015db0 <__gethex+0x218>
 8015da2:	9b01      	ldr	r3, [sp, #4]
 8015da4:	f843 bb04 	str.w	fp, [r3], #4
 8015da8:	f04f 0b00 	mov.w	fp, #0
 8015dac:	9301      	str	r3, [sp, #4]
 8015dae:	465b      	mov	r3, fp
 8015db0:	7828      	ldrb	r0, [r5, #0]
 8015db2:	9303      	str	r3, [sp, #12]
 8015db4:	f7ff feda 	bl	8015b6c <__hexdig_fun>
 8015db8:	9b03      	ldr	r3, [sp, #12]
 8015dba:	f000 000f 	and.w	r0, r0, #15
 8015dbe:	4098      	lsls	r0, r3
 8015dc0:	ea4b 0b00 	orr.w	fp, fp, r0
 8015dc4:	3304      	adds	r3, #4
 8015dc6:	e7a1      	b.n	8015d0c <__gethex+0x174>
 8015dc8:	45a8      	cmp	r8, r5
 8015dca:	d8e8      	bhi.n	8015d9e <__gethex+0x206>
 8015dcc:	2201      	movs	r2, #1
 8015dce:	4628      	mov	r0, r5
 8015dd0:	9303      	str	r3, [sp, #12]
 8015dd2:	f7fc fcc4 	bl	801275e <strncmp>
 8015dd6:	4926      	ldr	r1, [pc, #152]	; (8015e70 <__gethex+0x2d8>)
 8015dd8:	9b03      	ldr	r3, [sp, #12]
 8015dda:	2800      	cmp	r0, #0
 8015ddc:	d1df      	bne.n	8015d9e <__gethex+0x206>
 8015dde:	e795      	b.n	8015d0c <__gethex+0x174>
 8015de0:	f04f 0b03 	mov.w	fp, #3
 8015de4:	e7c5      	b.n	8015d72 <__gethex+0x1da>
 8015de6:	da0b      	bge.n	8015e00 <__gethex+0x268>
 8015de8:	eba5 0800 	sub.w	r8, r5, r0
 8015dec:	4621      	mov	r1, r4
 8015dee:	4642      	mov	r2, r8
 8015df0:	4648      	mov	r0, r9
 8015df2:	f7fd ff7d 	bl	8013cf0 <__lshift>
 8015df6:	eba6 0608 	sub.w	r6, r6, r8
 8015dfa:	4604      	mov	r4, r0
 8015dfc:	f100 0a14 	add.w	sl, r0, #20
 8015e00:	f04f 0b00 	mov.w	fp, #0
 8015e04:	e7ba      	b.n	8015d7c <__gethex+0x1e4>
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	42b3      	cmp	r3, r6
 8015e0a:	dd73      	ble.n	8015ef4 <__gethex+0x35c>
 8015e0c:	1b9e      	subs	r6, r3, r6
 8015e0e:	42b5      	cmp	r5, r6
 8015e10:	dc34      	bgt.n	8015e7c <__gethex+0x2e4>
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	2b02      	cmp	r3, #2
 8015e16:	d023      	beq.n	8015e60 <__gethex+0x2c8>
 8015e18:	2b03      	cmp	r3, #3
 8015e1a:	d025      	beq.n	8015e68 <__gethex+0x2d0>
 8015e1c:	2b01      	cmp	r3, #1
 8015e1e:	d115      	bne.n	8015e4c <__gethex+0x2b4>
 8015e20:	42b5      	cmp	r5, r6
 8015e22:	d113      	bne.n	8015e4c <__gethex+0x2b4>
 8015e24:	2d01      	cmp	r5, #1
 8015e26:	d10b      	bne.n	8015e40 <__gethex+0x2a8>
 8015e28:	9a02      	ldr	r2, [sp, #8]
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	6013      	str	r3, [r2, #0]
 8015e2e:	2301      	movs	r3, #1
 8015e30:	6123      	str	r3, [r4, #16]
 8015e32:	f8ca 3000 	str.w	r3, [sl]
 8015e36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e38:	f04f 0862 	mov.w	r8, #98	; 0x62
 8015e3c:	601c      	str	r4, [r3, #0]
 8015e3e:	e735      	b.n	8015cac <__gethex+0x114>
 8015e40:	1e69      	subs	r1, r5, #1
 8015e42:	4620      	mov	r0, r4
 8015e44:	f7fe f986 	bl	8014154 <__any_on>
 8015e48:	2800      	cmp	r0, #0
 8015e4a:	d1ed      	bne.n	8015e28 <__gethex+0x290>
 8015e4c:	4621      	mov	r1, r4
 8015e4e:	4648      	mov	r0, r9
 8015e50:	f7fd fd34 	bl	80138bc <_Bfree>
 8015e54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015e56:	2300      	movs	r3, #0
 8015e58:	6013      	str	r3, [r2, #0]
 8015e5a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8015e5e:	e725      	b.n	8015cac <__gethex+0x114>
 8015e60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d1f2      	bne.n	8015e4c <__gethex+0x2b4>
 8015e66:	e7df      	b.n	8015e28 <__gethex+0x290>
 8015e68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d1dc      	bne.n	8015e28 <__gethex+0x290>
 8015e6e:	e7ed      	b.n	8015e4c <__gethex+0x2b4>
 8015e70:	080181cc 	.word	0x080181cc
 8015e74:	08018063 	.word	0x08018063
 8015e78:	08018391 	.word	0x08018391
 8015e7c:	f106 38ff 	add.w	r8, r6, #4294967295
 8015e80:	f1bb 0f00 	cmp.w	fp, #0
 8015e84:	d133      	bne.n	8015eee <__gethex+0x356>
 8015e86:	f1b8 0f00 	cmp.w	r8, #0
 8015e8a:	d004      	beq.n	8015e96 <__gethex+0x2fe>
 8015e8c:	4641      	mov	r1, r8
 8015e8e:	4620      	mov	r0, r4
 8015e90:	f7fe f960 	bl	8014154 <__any_on>
 8015e94:	4683      	mov	fp, r0
 8015e96:	ea4f 1268 	mov.w	r2, r8, asr #5
 8015e9a:	2301      	movs	r3, #1
 8015e9c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015ea0:	f008 081f 	and.w	r8, r8, #31
 8015ea4:	fa03 f308 	lsl.w	r3, r3, r8
 8015ea8:	4213      	tst	r3, r2
 8015eaa:	4631      	mov	r1, r6
 8015eac:	4620      	mov	r0, r4
 8015eae:	bf18      	it	ne
 8015eb0:	f04b 0b02 	orrne.w	fp, fp, #2
 8015eb4:	1bad      	subs	r5, r5, r6
 8015eb6:	f7ff fe07 	bl	8015ac8 <rshift>
 8015eba:	687e      	ldr	r6, [r7, #4]
 8015ebc:	f04f 0802 	mov.w	r8, #2
 8015ec0:	f1bb 0f00 	cmp.w	fp, #0
 8015ec4:	d04a      	beq.n	8015f5c <__gethex+0x3c4>
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	2b02      	cmp	r3, #2
 8015eca:	d016      	beq.n	8015efa <__gethex+0x362>
 8015ecc:	2b03      	cmp	r3, #3
 8015ece:	d018      	beq.n	8015f02 <__gethex+0x36a>
 8015ed0:	2b01      	cmp	r3, #1
 8015ed2:	d109      	bne.n	8015ee8 <__gethex+0x350>
 8015ed4:	f01b 0f02 	tst.w	fp, #2
 8015ed8:	d006      	beq.n	8015ee8 <__gethex+0x350>
 8015eda:	f8da 3000 	ldr.w	r3, [sl]
 8015ede:	ea4b 0b03 	orr.w	fp, fp, r3
 8015ee2:	f01b 0f01 	tst.w	fp, #1
 8015ee6:	d10f      	bne.n	8015f08 <__gethex+0x370>
 8015ee8:	f048 0810 	orr.w	r8, r8, #16
 8015eec:	e036      	b.n	8015f5c <__gethex+0x3c4>
 8015eee:	f04f 0b01 	mov.w	fp, #1
 8015ef2:	e7d0      	b.n	8015e96 <__gethex+0x2fe>
 8015ef4:	f04f 0801 	mov.w	r8, #1
 8015ef8:	e7e2      	b.n	8015ec0 <__gethex+0x328>
 8015efa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015efc:	f1c3 0301 	rsb	r3, r3, #1
 8015f00:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d0ef      	beq.n	8015ee8 <__gethex+0x350>
 8015f08:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015f0c:	f104 0214 	add.w	r2, r4, #20
 8015f10:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8015f14:	9301      	str	r3, [sp, #4]
 8015f16:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	4694      	mov	ip, r2
 8015f1e:	f852 1b04 	ldr.w	r1, [r2], #4
 8015f22:	f1b1 3fff 	cmp.w	r1, #4294967295
 8015f26:	d01e      	beq.n	8015f66 <__gethex+0x3ce>
 8015f28:	3101      	adds	r1, #1
 8015f2a:	f8cc 1000 	str.w	r1, [ip]
 8015f2e:	f1b8 0f02 	cmp.w	r8, #2
 8015f32:	f104 0214 	add.w	r2, r4, #20
 8015f36:	d13d      	bne.n	8015fb4 <__gethex+0x41c>
 8015f38:	683b      	ldr	r3, [r7, #0]
 8015f3a:	3b01      	subs	r3, #1
 8015f3c:	42ab      	cmp	r3, r5
 8015f3e:	d10b      	bne.n	8015f58 <__gethex+0x3c0>
 8015f40:	1169      	asrs	r1, r5, #5
 8015f42:	2301      	movs	r3, #1
 8015f44:	f005 051f 	and.w	r5, r5, #31
 8015f48:	fa03 f505 	lsl.w	r5, r3, r5
 8015f4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015f50:	421d      	tst	r5, r3
 8015f52:	bf18      	it	ne
 8015f54:	f04f 0801 	movne.w	r8, #1
 8015f58:	f048 0820 	orr.w	r8, r8, #32
 8015f5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f5e:	601c      	str	r4, [r3, #0]
 8015f60:	9b02      	ldr	r3, [sp, #8]
 8015f62:	601e      	str	r6, [r3, #0]
 8015f64:	e6a2      	b.n	8015cac <__gethex+0x114>
 8015f66:	4290      	cmp	r0, r2
 8015f68:	f842 3c04 	str.w	r3, [r2, #-4]
 8015f6c:	d8d6      	bhi.n	8015f1c <__gethex+0x384>
 8015f6e:	68a2      	ldr	r2, [r4, #8]
 8015f70:	4593      	cmp	fp, r2
 8015f72:	db17      	blt.n	8015fa4 <__gethex+0x40c>
 8015f74:	6861      	ldr	r1, [r4, #4]
 8015f76:	4648      	mov	r0, r9
 8015f78:	3101      	adds	r1, #1
 8015f7a:	f7fd fc5f 	bl	801383c <_Balloc>
 8015f7e:	4682      	mov	sl, r0
 8015f80:	b918      	cbnz	r0, 8015f8a <__gethex+0x3f2>
 8015f82:	4b1b      	ldr	r3, [pc, #108]	; (8015ff0 <__gethex+0x458>)
 8015f84:	4602      	mov	r2, r0
 8015f86:	2184      	movs	r1, #132	; 0x84
 8015f88:	e6b3      	b.n	8015cf2 <__gethex+0x15a>
 8015f8a:	6922      	ldr	r2, [r4, #16]
 8015f8c:	3202      	adds	r2, #2
 8015f8e:	f104 010c 	add.w	r1, r4, #12
 8015f92:	0092      	lsls	r2, r2, #2
 8015f94:	300c      	adds	r0, #12
 8015f96:	f7fc fcc2 	bl	801291e <memcpy>
 8015f9a:	4621      	mov	r1, r4
 8015f9c:	4648      	mov	r0, r9
 8015f9e:	f7fd fc8d 	bl	80138bc <_Bfree>
 8015fa2:	4654      	mov	r4, sl
 8015fa4:	6922      	ldr	r2, [r4, #16]
 8015fa6:	1c51      	adds	r1, r2, #1
 8015fa8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015fac:	6121      	str	r1, [r4, #16]
 8015fae:	2101      	movs	r1, #1
 8015fb0:	6151      	str	r1, [r2, #20]
 8015fb2:	e7bc      	b.n	8015f2e <__gethex+0x396>
 8015fb4:	6921      	ldr	r1, [r4, #16]
 8015fb6:	4559      	cmp	r1, fp
 8015fb8:	dd0b      	ble.n	8015fd2 <__gethex+0x43a>
 8015fba:	2101      	movs	r1, #1
 8015fbc:	4620      	mov	r0, r4
 8015fbe:	f7ff fd83 	bl	8015ac8 <rshift>
 8015fc2:	68bb      	ldr	r3, [r7, #8]
 8015fc4:	3601      	adds	r6, #1
 8015fc6:	42b3      	cmp	r3, r6
 8015fc8:	f6ff aedb 	blt.w	8015d82 <__gethex+0x1ea>
 8015fcc:	f04f 0801 	mov.w	r8, #1
 8015fd0:	e7c2      	b.n	8015f58 <__gethex+0x3c0>
 8015fd2:	f015 051f 	ands.w	r5, r5, #31
 8015fd6:	d0f9      	beq.n	8015fcc <__gethex+0x434>
 8015fd8:	9b01      	ldr	r3, [sp, #4]
 8015fda:	441a      	add	r2, r3
 8015fdc:	f1c5 0520 	rsb	r5, r5, #32
 8015fe0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8015fe4:	f7fd fd1c 	bl	8013a20 <__hi0bits>
 8015fe8:	42a8      	cmp	r0, r5
 8015fea:	dbe6      	blt.n	8015fba <__gethex+0x422>
 8015fec:	e7ee      	b.n	8015fcc <__gethex+0x434>
 8015fee:	bf00      	nop
 8015ff0:	08018063 	.word	0x08018063

08015ff4 <L_shift>:
 8015ff4:	f1c2 0208 	rsb	r2, r2, #8
 8015ff8:	0092      	lsls	r2, r2, #2
 8015ffa:	b570      	push	{r4, r5, r6, lr}
 8015ffc:	f1c2 0620 	rsb	r6, r2, #32
 8016000:	6843      	ldr	r3, [r0, #4]
 8016002:	6804      	ldr	r4, [r0, #0]
 8016004:	fa03 f506 	lsl.w	r5, r3, r6
 8016008:	432c      	orrs	r4, r5
 801600a:	40d3      	lsrs	r3, r2
 801600c:	6004      	str	r4, [r0, #0]
 801600e:	f840 3f04 	str.w	r3, [r0, #4]!
 8016012:	4288      	cmp	r0, r1
 8016014:	d3f4      	bcc.n	8016000 <L_shift+0xc>
 8016016:	bd70      	pop	{r4, r5, r6, pc}

08016018 <__match>:
 8016018:	b530      	push	{r4, r5, lr}
 801601a:	6803      	ldr	r3, [r0, #0]
 801601c:	3301      	adds	r3, #1
 801601e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016022:	b914      	cbnz	r4, 801602a <__match+0x12>
 8016024:	6003      	str	r3, [r0, #0]
 8016026:	2001      	movs	r0, #1
 8016028:	bd30      	pop	{r4, r5, pc}
 801602a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801602e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016032:	2d19      	cmp	r5, #25
 8016034:	bf98      	it	ls
 8016036:	3220      	addls	r2, #32
 8016038:	42a2      	cmp	r2, r4
 801603a:	d0f0      	beq.n	801601e <__match+0x6>
 801603c:	2000      	movs	r0, #0
 801603e:	e7f3      	b.n	8016028 <__match+0x10>

08016040 <__hexnan>:
 8016040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016044:	680b      	ldr	r3, [r1, #0]
 8016046:	6801      	ldr	r1, [r0, #0]
 8016048:	115e      	asrs	r6, r3, #5
 801604a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801604e:	f013 031f 	ands.w	r3, r3, #31
 8016052:	b087      	sub	sp, #28
 8016054:	bf18      	it	ne
 8016056:	3604      	addne	r6, #4
 8016058:	2500      	movs	r5, #0
 801605a:	1f37      	subs	r7, r6, #4
 801605c:	4682      	mov	sl, r0
 801605e:	4690      	mov	r8, r2
 8016060:	9301      	str	r3, [sp, #4]
 8016062:	f846 5c04 	str.w	r5, [r6, #-4]
 8016066:	46b9      	mov	r9, r7
 8016068:	463c      	mov	r4, r7
 801606a:	9502      	str	r5, [sp, #8]
 801606c:	46ab      	mov	fp, r5
 801606e:	784a      	ldrb	r2, [r1, #1]
 8016070:	1c4b      	adds	r3, r1, #1
 8016072:	9303      	str	r3, [sp, #12]
 8016074:	b342      	cbz	r2, 80160c8 <__hexnan+0x88>
 8016076:	4610      	mov	r0, r2
 8016078:	9105      	str	r1, [sp, #20]
 801607a:	9204      	str	r2, [sp, #16]
 801607c:	f7ff fd76 	bl	8015b6c <__hexdig_fun>
 8016080:	2800      	cmp	r0, #0
 8016082:	d14f      	bne.n	8016124 <__hexnan+0xe4>
 8016084:	9a04      	ldr	r2, [sp, #16]
 8016086:	9905      	ldr	r1, [sp, #20]
 8016088:	2a20      	cmp	r2, #32
 801608a:	d818      	bhi.n	80160be <__hexnan+0x7e>
 801608c:	9b02      	ldr	r3, [sp, #8]
 801608e:	459b      	cmp	fp, r3
 8016090:	dd13      	ble.n	80160ba <__hexnan+0x7a>
 8016092:	454c      	cmp	r4, r9
 8016094:	d206      	bcs.n	80160a4 <__hexnan+0x64>
 8016096:	2d07      	cmp	r5, #7
 8016098:	dc04      	bgt.n	80160a4 <__hexnan+0x64>
 801609a:	462a      	mov	r2, r5
 801609c:	4649      	mov	r1, r9
 801609e:	4620      	mov	r0, r4
 80160a0:	f7ff ffa8 	bl	8015ff4 <L_shift>
 80160a4:	4544      	cmp	r4, r8
 80160a6:	d950      	bls.n	801614a <__hexnan+0x10a>
 80160a8:	2300      	movs	r3, #0
 80160aa:	f1a4 0904 	sub.w	r9, r4, #4
 80160ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80160b2:	f8cd b008 	str.w	fp, [sp, #8]
 80160b6:	464c      	mov	r4, r9
 80160b8:	461d      	mov	r5, r3
 80160ba:	9903      	ldr	r1, [sp, #12]
 80160bc:	e7d7      	b.n	801606e <__hexnan+0x2e>
 80160be:	2a29      	cmp	r2, #41	; 0x29
 80160c0:	d155      	bne.n	801616e <__hexnan+0x12e>
 80160c2:	3102      	adds	r1, #2
 80160c4:	f8ca 1000 	str.w	r1, [sl]
 80160c8:	f1bb 0f00 	cmp.w	fp, #0
 80160cc:	d04f      	beq.n	801616e <__hexnan+0x12e>
 80160ce:	454c      	cmp	r4, r9
 80160d0:	d206      	bcs.n	80160e0 <__hexnan+0xa0>
 80160d2:	2d07      	cmp	r5, #7
 80160d4:	dc04      	bgt.n	80160e0 <__hexnan+0xa0>
 80160d6:	462a      	mov	r2, r5
 80160d8:	4649      	mov	r1, r9
 80160da:	4620      	mov	r0, r4
 80160dc:	f7ff ff8a 	bl	8015ff4 <L_shift>
 80160e0:	4544      	cmp	r4, r8
 80160e2:	d934      	bls.n	801614e <__hexnan+0x10e>
 80160e4:	f1a8 0204 	sub.w	r2, r8, #4
 80160e8:	4623      	mov	r3, r4
 80160ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80160ee:	f842 1f04 	str.w	r1, [r2, #4]!
 80160f2:	429f      	cmp	r7, r3
 80160f4:	d2f9      	bcs.n	80160ea <__hexnan+0xaa>
 80160f6:	1b3b      	subs	r3, r7, r4
 80160f8:	f023 0303 	bic.w	r3, r3, #3
 80160fc:	3304      	adds	r3, #4
 80160fe:	3e03      	subs	r6, #3
 8016100:	3401      	adds	r4, #1
 8016102:	42a6      	cmp	r6, r4
 8016104:	bf38      	it	cc
 8016106:	2304      	movcc	r3, #4
 8016108:	4443      	add	r3, r8
 801610a:	2200      	movs	r2, #0
 801610c:	f843 2b04 	str.w	r2, [r3], #4
 8016110:	429f      	cmp	r7, r3
 8016112:	d2fb      	bcs.n	801610c <__hexnan+0xcc>
 8016114:	683b      	ldr	r3, [r7, #0]
 8016116:	b91b      	cbnz	r3, 8016120 <__hexnan+0xe0>
 8016118:	4547      	cmp	r7, r8
 801611a:	d126      	bne.n	801616a <__hexnan+0x12a>
 801611c:	2301      	movs	r3, #1
 801611e:	603b      	str	r3, [r7, #0]
 8016120:	2005      	movs	r0, #5
 8016122:	e025      	b.n	8016170 <__hexnan+0x130>
 8016124:	3501      	adds	r5, #1
 8016126:	2d08      	cmp	r5, #8
 8016128:	f10b 0b01 	add.w	fp, fp, #1
 801612c:	dd06      	ble.n	801613c <__hexnan+0xfc>
 801612e:	4544      	cmp	r4, r8
 8016130:	d9c3      	bls.n	80160ba <__hexnan+0x7a>
 8016132:	2300      	movs	r3, #0
 8016134:	f844 3c04 	str.w	r3, [r4, #-4]
 8016138:	2501      	movs	r5, #1
 801613a:	3c04      	subs	r4, #4
 801613c:	6822      	ldr	r2, [r4, #0]
 801613e:	f000 000f 	and.w	r0, r0, #15
 8016142:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016146:	6020      	str	r0, [r4, #0]
 8016148:	e7b7      	b.n	80160ba <__hexnan+0x7a>
 801614a:	2508      	movs	r5, #8
 801614c:	e7b5      	b.n	80160ba <__hexnan+0x7a>
 801614e:	9b01      	ldr	r3, [sp, #4]
 8016150:	2b00      	cmp	r3, #0
 8016152:	d0df      	beq.n	8016114 <__hexnan+0xd4>
 8016154:	f1c3 0320 	rsb	r3, r3, #32
 8016158:	f04f 32ff 	mov.w	r2, #4294967295
 801615c:	40da      	lsrs	r2, r3
 801615e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016162:	4013      	ands	r3, r2
 8016164:	f846 3c04 	str.w	r3, [r6, #-4]
 8016168:	e7d4      	b.n	8016114 <__hexnan+0xd4>
 801616a:	3f04      	subs	r7, #4
 801616c:	e7d2      	b.n	8016114 <__hexnan+0xd4>
 801616e:	2004      	movs	r0, #4
 8016170:	b007      	add	sp, #28
 8016172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016176 <__ascii_mbtowc>:
 8016176:	b082      	sub	sp, #8
 8016178:	b901      	cbnz	r1, 801617c <__ascii_mbtowc+0x6>
 801617a:	a901      	add	r1, sp, #4
 801617c:	b142      	cbz	r2, 8016190 <__ascii_mbtowc+0x1a>
 801617e:	b14b      	cbz	r3, 8016194 <__ascii_mbtowc+0x1e>
 8016180:	7813      	ldrb	r3, [r2, #0]
 8016182:	600b      	str	r3, [r1, #0]
 8016184:	7812      	ldrb	r2, [r2, #0]
 8016186:	1e10      	subs	r0, r2, #0
 8016188:	bf18      	it	ne
 801618a:	2001      	movne	r0, #1
 801618c:	b002      	add	sp, #8
 801618e:	4770      	bx	lr
 8016190:	4610      	mov	r0, r2
 8016192:	e7fb      	b.n	801618c <__ascii_mbtowc+0x16>
 8016194:	f06f 0001 	mvn.w	r0, #1
 8016198:	e7f8      	b.n	801618c <__ascii_mbtowc+0x16>

0801619a <_realloc_r>:
 801619a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801619e:	4680      	mov	r8, r0
 80161a0:	4614      	mov	r4, r2
 80161a2:	460e      	mov	r6, r1
 80161a4:	b921      	cbnz	r1, 80161b0 <_realloc_r+0x16>
 80161a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80161aa:	4611      	mov	r1, r2
 80161ac:	f7fd baba 	b.w	8013724 <_malloc_r>
 80161b0:	b92a      	cbnz	r2, 80161be <_realloc_r+0x24>
 80161b2:	f7fd fa43 	bl	801363c <_free_r>
 80161b6:	4625      	mov	r5, r4
 80161b8:	4628      	mov	r0, r5
 80161ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161be:	f000 f8b6 	bl	801632e <_malloc_usable_size_r>
 80161c2:	4284      	cmp	r4, r0
 80161c4:	4607      	mov	r7, r0
 80161c6:	d802      	bhi.n	80161ce <_realloc_r+0x34>
 80161c8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80161cc:	d812      	bhi.n	80161f4 <_realloc_r+0x5a>
 80161ce:	4621      	mov	r1, r4
 80161d0:	4640      	mov	r0, r8
 80161d2:	f7fd faa7 	bl	8013724 <_malloc_r>
 80161d6:	4605      	mov	r5, r0
 80161d8:	2800      	cmp	r0, #0
 80161da:	d0ed      	beq.n	80161b8 <_realloc_r+0x1e>
 80161dc:	42bc      	cmp	r4, r7
 80161de:	4622      	mov	r2, r4
 80161e0:	4631      	mov	r1, r6
 80161e2:	bf28      	it	cs
 80161e4:	463a      	movcs	r2, r7
 80161e6:	f7fc fb9a 	bl	801291e <memcpy>
 80161ea:	4631      	mov	r1, r6
 80161ec:	4640      	mov	r0, r8
 80161ee:	f7fd fa25 	bl	801363c <_free_r>
 80161f2:	e7e1      	b.n	80161b8 <_realloc_r+0x1e>
 80161f4:	4635      	mov	r5, r6
 80161f6:	e7df      	b.n	80161b8 <_realloc_r+0x1e>

080161f8 <_strtoul_l.constprop.0>:
 80161f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80161fc:	4f36      	ldr	r7, [pc, #216]	; (80162d8 <_strtoul_l.constprop.0+0xe0>)
 80161fe:	4686      	mov	lr, r0
 8016200:	460d      	mov	r5, r1
 8016202:	4628      	mov	r0, r5
 8016204:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016208:	5d3e      	ldrb	r6, [r7, r4]
 801620a:	f016 0608 	ands.w	r6, r6, #8
 801620e:	d1f8      	bne.n	8016202 <_strtoul_l.constprop.0+0xa>
 8016210:	2c2d      	cmp	r4, #45	; 0x2d
 8016212:	d130      	bne.n	8016276 <_strtoul_l.constprop.0+0x7e>
 8016214:	782c      	ldrb	r4, [r5, #0]
 8016216:	2601      	movs	r6, #1
 8016218:	1c85      	adds	r5, r0, #2
 801621a:	2b00      	cmp	r3, #0
 801621c:	d057      	beq.n	80162ce <_strtoul_l.constprop.0+0xd6>
 801621e:	2b10      	cmp	r3, #16
 8016220:	d109      	bne.n	8016236 <_strtoul_l.constprop.0+0x3e>
 8016222:	2c30      	cmp	r4, #48	; 0x30
 8016224:	d107      	bne.n	8016236 <_strtoul_l.constprop.0+0x3e>
 8016226:	7828      	ldrb	r0, [r5, #0]
 8016228:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801622c:	2858      	cmp	r0, #88	; 0x58
 801622e:	d149      	bne.n	80162c4 <_strtoul_l.constprop.0+0xcc>
 8016230:	786c      	ldrb	r4, [r5, #1]
 8016232:	2310      	movs	r3, #16
 8016234:	3502      	adds	r5, #2
 8016236:	f04f 38ff 	mov.w	r8, #4294967295
 801623a:	2700      	movs	r7, #0
 801623c:	fbb8 f8f3 	udiv	r8, r8, r3
 8016240:	fb03 f908 	mul.w	r9, r3, r8
 8016244:	ea6f 0909 	mvn.w	r9, r9
 8016248:	4638      	mov	r0, r7
 801624a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801624e:	f1bc 0f09 	cmp.w	ip, #9
 8016252:	d815      	bhi.n	8016280 <_strtoul_l.constprop.0+0x88>
 8016254:	4664      	mov	r4, ip
 8016256:	42a3      	cmp	r3, r4
 8016258:	dd23      	ble.n	80162a2 <_strtoul_l.constprop.0+0xaa>
 801625a:	f1b7 3fff 	cmp.w	r7, #4294967295
 801625e:	d007      	beq.n	8016270 <_strtoul_l.constprop.0+0x78>
 8016260:	4580      	cmp	r8, r0
 8016262:	d31b      	bcc.n	801629c <_strtoul_l.constprop.0+0xa4>
 8016264:	d101      	bne.n	801626a <_strtoul_l.constprop.0+0x72>
 8016266:	45a1      	cmp	r9, r4
 8016268:	db18      	blt.n	801629c <_strtoul_l.constprop.0+0xa4>
 801626a:	fb00 4003 	mla	r0, r0, r3, r4
 801626e:	2701      	movs	r7, #1
 8016270:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016274:	e7e9      	b.n	801624a <_strtoul_l.constprop.0+0x52>
 8016276:	2c2b      	cmp	r4, #43	; 0x2b
 8016278:	bf04      	itt	eq
 801627a:	782c      	ldrbeq	r4, [r5, #0]
 801627c:	1c85      	addeq	r5, r0, #2
 801627e:	e7cc      	b.n	801621a <_strtoul_l.constprop.0+0x22>
 8016280:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016284:	f1bc 0f19 	cmp.w	ip, #25
 8016288:	d801      	bhi.n	801628e <_strtoul_l.constprop.0+0x96>
 801628a:	3c37      	subs	r4, #55	; 0x37
 801628c:	e7e3      	b.n	8016256 <_strtoul_l.constprop.0+0x5e>
 801628e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016292:	f1bc 0f19 	cmp.w	ip, #25
 8016296:	d804      	bhi.n	80162a2 <_strtoul_l.constprop.0+0xaa>
 8016298:	3c57      	subs	r4, #87	; 0x57
 801629a:	e7dc      	b.n	8016256 <_strtoul_l.constprop.0+0x5e>
 801629c:	f04f 37ff 	mov.w	r7, #4294967295
 80162a0:	e7e6      	b.n	8016270 <_strtoul_l.constprop.0+0x78>
 80162a2:	1c7b      	adds	r3, r7, #1
 80162a4:	d106      	bne.n	80162b4 <_strtoul_l.constprop.0+0xbc>
 80162a6:	2322      	movs	r3, #34	; 0x22
 80162a8:	f8ce 3000 	str.w	r3, [lr]
 80162ac:	4638      	mov	r0, r7
 80162ae:	b932      	cbnz	r2, 80162be <_strtoul_l.constprop.0+0xc6>
 80162b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80162b4:	b106      	cbz	r6, 80162b8 <_strtoul_l.constprop.0+0xc0>
 80162b6:	4240      	negs	r0, r0
 80162b8:	2a00      	cmp	r2, #0
 80162ba:	d0f9      	beq.n	80162b0 <_strtoul_l.constprop.0+0xb8>
 80162bc:	b107      	cbz	r7, 80162c0 <_strtoul_l.constprop.0+0xc8>
 80162be:	1e69      	subs	r1, r5, #1
 80162c0:	6011      	str	r1, [r2, #0]
 80162c2:	e7f5      	b.n	80162b0 <_strtoul_l.constprop.0+0xb8>
 80162c4:	2430      	movs	r4, #48	; 0x30
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d1b5      	bne.n	8016236 <_strtoul_l.constprop.0+0x3e>
 80162ca:	2308      	movs	r3, #8
 80162cc:	e7b3      	b.n	8016236 <_strtoul_l.constprop.0+0x3e>
 80162ce:	2c30      	cmp	r4, #48	; 0x30
 80162d0:	d0a9      	beq.n	8016226 <_strtoul_l.constprop.0+0x2e>
 80162d2:	230a      	movs	r3, #10
 80162d4:	e7af      	b.n	8016236 <_strtoul_l.constprop.0+0x3e>
 80162d6:	bf00      	nop
 80162d8:	08018221 	.word	0x08018221

080162dc <_strtoul_r>:
 80162dc:	f7ff bf8c 	b.w	80161f8 <_strtoul_l.constprop.0>

080162e0 <__ascii_wctomb>:
 80162e0:	b149      	cbz	r1, 80162f6 <__ascii_wctomb+0x16>
 80162e2:	2aff      	cmp	r2, #255	; 0xff
 80162e4:	bf85      	ittet	hi
 80162e6:	238a      	movhi	r3, #138	; 0x8a
 80162e8:	6003      	strhi	r3, [r0, #0]
 80162ea:	700a      	strbls	r2, [r1, #0]
 80162ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80162f0:	bf98      	it	ls
 80162f2:	2001      	movls	r0, #1
 80162f4:	4770      	bx	lr
 80162f6:	4608      	mov	r0, r1
 80162f8:	4770      	bx	lr
	...

080162fc <fiprintf>:
 80162fc:	b40e      	push	{r1, r2, r3}
 80162fe:	b503      	push	{r0, r1, lr}
 8016300:	4601      	mov	r1, r0
 8016302:	ab03      	add	r3, sp, #12
 8016304:	4805      	ldr	r0, [pc, #20]	; (801631c <fiprintf+0x20>)
 8016306:	f853 2b04 	ldr.w	r2, [r3], #4
 801630a:	6800      	ldr	r0, [r0, #0]
 801630c:	9301      	str	r3, [sp, #4]
 801630e:	f000 f83f 	bl	8016390 <_vfiprintf_r>
 8016312:	b002      	add	sp, #8
 8016314:	f85d eb04 	ldr.w	lr, [sp], #4
 8016318:	b003      	add	sp, #12
 801631a:	4770      	bx	lr
 801631c:	20000070 	.word	0x20000070

08016320 <abort>:
 8016320:	b508      	push	{r3, lr}
 8016322:	2006      	movs	r0, #6
 8016324:	f000 fa0c 	bl	8016740 <raise>
 8016328:	2001      	movs	r0, #1
 801632a:	f7ef fc6d 	bl	8005c08 <_exit>

0801632e <_malloc_usable_size_r>:
 801632e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016332:	1f18      	subs	r0, r3, #4
 8016334:	2b00      	cmp	r3, #0
 8016336:	bfbc      	itt	lt
 8016338:	580b      	ldrlt	r3, [r1, r0]
 801633a:	18c0      	addlt	r0, r0, r3
 801633c:	4770      	bx	lr

0801633e <__sfputc_r>:
 801633e:	6893      	ldr	r3, [r2, #8]
 8016340:	3b01      	subs	r3, #1
 8016342:	2b00      	cmp	r3, #0
 8016344:	b410      	push	{r4}
 8016346:	6093      	str	r3, [r2, #8]
 8016348:	da08      	bge.n	801635c <__sfputc_r+0x1e>
 801634a:	6994      	ldr	r4, [r2, #24]
 801634c:	42a3      	cmp	r3, r4
 801634e:	db01      	blt.n	8016354 <__sfputc_r+0x16>
 8016350:	290a      	cmp	r1, #10
 8016352:	d103      	bne.n	801635c <__sfputc_r+0x1e>
 8016354:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016358:	f000 b934 	b.w	80165c4 <__swbuf_r>
 801635c:	6813      	ldr	r3, [r2, #0]
 801635e:	1c58      	adds	r0, r3, #1
 8016360:	6010      	str	r0, [r2, #0]
 8016362:	7019      	strb	r1, [r3, #0]
 8016364:	4608      	mov	r0, r1
 8016366:	f85d 4b04 	ldr.w	r4, [sp], #4
 801636a:	4770      	bx	lr

0801636c <__sfputs_r>:
 801636c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801636e:	4606      	mov	r6, r0
 8016370:	460f      	mov	r7, r1
 8016372:	4614      	mov	r4, r2
 8016374:	18d5      	adds	r5, r2, r3
 8016376:	42ac      	cmp	r4, r5
 8016378:	d101      	bne.n	801637e <__sfputs_r+0x12>
 801637a:	2000      	movs	r0, #0
 801637c:	e007      	b.n	801638e <__sfputs_r+0x22>
 801637e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016382:	463a      	mov	r2, r7
 8016384:	4630      	mov	r0, r6
 8016386:	f7ff ffda 	bl	801633e <__sfputc_r>
 801638a:	1c43      	adds	r3, r0, #1
 801638c:	d1f3      	bne.n	8016376 <__sfputs_r+0xa>
 801638e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016390 <_vfiprintf_r>:
 8016390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016394:	460d      	mov	r5, r1
 8016396:	b09d      	sub	sp, #116	; 0x74
 8016398:	4614      	mov	r4, r2
 801639a:	4698      	mov	r8, r3
 801639c:	4606      	mov	r6, r0
 801639e:	b118      	cbz	r0, 80163a8 <_vfiprintf_r+0x18>
 80163a0:	6a03      	ldr	r3, [r0, #32]
 80163a2:	b90b      	cbnz	r3, 80163a8 <_vfiprintf_r+0x18>
 80163a4:	f7fc f90c 	bl	80125c0 <__sinit>
 80163a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80163aa:	07d9      	lsls	r1, r3, #31
 80163ac:	d405      	bmi.n	80163ba <_vfiprintf_r+0x2a>
 80163ae:	89ab      	ldrh	r3, [r5, #12]
 80163b0:	059a      	lsls	r2, r3, #22
 80163b2:	d402      	bmi.n	80163ba <_vfiprintf_r+0x2a>
 80163b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80163b6:	f7fc fab0 	bl	801291a <__retarget_lock_acquire_recursive>
 80163ba:	89ab      	ldrh	r3, [r5, #12]
 80163bc:	071b      	lsls	r3, r3, #28
 80163be:	d501      	bpl.n	80163c4 <_vfiprintf_r+0x34>
 80163c0:	692b      	ldr	r3, [r5, #16]
 80163c2:	b99b      	cbnz	r3, 80163ec <_vfiprintf_r+0x5c>
 80163c4:	4629      	mov	r1, r5
 80163c6:	4630      	mov	r0, r6
 80163c8:	f000 f93a 	bl	8016640 <__swsetup_r>
 80163cc:	b170      	cbz	r0, 80163ec <_vfiprintf_r+0x5c>
 80163ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80163d0:	07dc      	lsls	r4, r3, #31
 80163d2:	d504      	bpl.n	80163de <_vfiprintf_r+0x4e>
 80163d4:	f04f 30ff 	mov.w	r0, #4294967295
 80163d8:	b01d      	add	sp, #116	; 0x74
 80163da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163de:	89ab      	ldrh	r3, [r5, #12]
 80163e0:	0598      	lsls	r0, r3, #22
 80163e2:	d4f7      	bmi.n	80163d4 <_vfiprintf_r+0x44>
 80163e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80163e6:	f7fc fa99 	bl	801291c <__retarget_lock_release_recursive>
 80163ea:	e7f3      	b.n	80163d4 <_vfiprintf_r+0x44>
 80163ec:	2300      	movs	r3, #0
 80163ee:	9309      	str	r3, [sp, #36]	; 0x24
 80163f0:	2320      	movs	r3, #32
 80163f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80163f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80163fa:	2330      	movs	r3, #48	; 0x30
 80163fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80165b0 <_vfiprintf_r+0x220>
 8016400:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016404:	f04f 0901 	mov.w	r9, #1
 8016408:	4623      	mov	r3, r4
 801640a:	469a      	mov	sl, r3
 801640c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016410:	b10a      	cbz	r2, 8016416 <_vfiprintf_r+0x86>
 8016412:	2a25      	cmp	r2, #37	; 0x25
 8016414:	d1f9      	bne.n	801640a <_vfiprintf_r+0x7a>
 8016416:	ebba 0b04 	subs.w	fp, sl, r4
 801641a:	d00b      	beq.n	8016434 <_vfiprintf_r+0xa4>
 801641c:	465b      	mov	r3, fp
 801641e:	4622      	mov	r2, r4
 8016420:	4629      	mov	r1, r5
 8016422:	4630      	mov	r0, r6
 8016424:	f7ff ffa2 	bl	801636c <__sfputs_r>
 8016428:	3001      	adds	r0, #1
 801642a:	f000 80a9 	beq.w	8016580 <_vfiprintf_r+0x1f0>
 801642e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016430:	445a      	add	r2, fp
 8016432:	9209      	str	r2, [sp, #36]	; 0x24
 8016434:	f89a 3000 	ldrb.w	r3, [sl]
 8016438:	2b00      	cmp	r3, #0
 801643a:	f000 80a1 	beq.w	8016580 <_vfiprintf_r+0x1f0>
 801643e:	2300      	movs	r3, #0
 8016440:	f04f 32ff 	mov.w	r2, #4294967295
 8016444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016448:	f10a 0a01 	add.w	sl, sl, #1
 801644c:	9304      	str	r3, [sp, #16]
 801644e:	9307      	str	r3, [sp, #28]
 8016450:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016454:	931a      	str	r3, [sp, #104]	; 0x68
 8016456:	4654      	mov	r4, sl
 8016458:	2205      	movs	r2, #5
 801645a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801645e:	4854      	ldr	r0, [pc, #336]	; (80165b0 <_vfiprintf_r+0x220>)
 8016460:	f7e9 fede 	bl	8000220 <memchr>
 8016464:	9a04      	ldr	r2, [sp, #16]
 8016466:	b9d8      	cbnz	r0, 80164a0 <_vfiprintf_r+0x110>
 8016468:	06d1      	lsls	r1, r2, #27
 801646a:	bf44      	itt	mi
 801646c:	2320      	movmi	r3, #32
 801646e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016472:	0713      	lsls	r3, r2, #28
 8016474:	bf44      	itt	mi
 8016476:	232b      	movmi	r3, #43	; 0x2b
 8016478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801647c:	f89a 3000 	ldrb.w	r3, [sl]
 8016480:	2b2a      	cmp	r3, #42	; 0x2a
 8016482:	d015      	beq.n	80164b0 <_vfiprintf_r+0x120>
 8016484:	9a07      	ldr	r2, [sp, #28]
 8016486:	4654      	mov	r4, sl
 8016488:	2000      	movs	r0, #0
 801648a:	f04f 0c0a 	mov.w	ip, #10
 801648e:	4621      	mov	r1, r4
 8016490:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016494:	3b30      	subs	r3, #48	; 0x30
 8016496:	2b09      	cmp	r3, #9
 8016498:	d94d      	bls.n	8016536 <_vfiprintf_r+0x1a6>
 801649a:	b1b0      	cbz	r0, 80164ca <_vfiprintf_r+0x13a>
 801649c:	9207      	str	r2, [sp, #28]
 801649e:	e014      	b.n	80164ca <_vfiprintf_r+0x13a>
 80164a0:	eba0 0308 	sub.w	r3, r0, r8
 80164a4:	fa09 f303 	lsl.w	r3, r9, r3
 80164a8:	4313      	orrs	r3, r2
 80164aa:	9304      	str	r3, [sp, #16]
 80164ac:	46a2      	mov	sl, r4
 80164ae:	e7d2      	b.n	8016456 <_vfiprintf_r+0xc6>
 80164b0:	9b03      	ldr	r3, [sp, #12]
 80164b2:	1d19      	adds	r1, r3, #4
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	9103      	str	r1, [sp, #12]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	bfbb      	ittet	lt
 80164bc:	425b      	neglt	r3, r3
 80164be:	f042 0202 	orrlt.w	r2, r2, #2
 80164c2:	9307      	strge	r3, [sp, #28]
 80164c4:	9307      	strlt	r3, [sp, #28]
 80164c6:	bfb8      	it	lt
 80164c8:	9204      	strlt	r2, [sp, #16]
 80164ca:	7823      	ldrb	r3, [r4, #0]
 80164cc:	2b2e      	cmp	r3, #46	; 0x2e
 80164ce:	d10c      	bne.n	80164ea <_vfiprintf_r+0x15a>
 80164d0:	7863      	ldrb	r3, [r4, #1]
 80164d2:	2b2a      	cmp	r3, #42	; 0x2a
 80164d4:	d134      	bne.n	8016540 <_vfiprintf_r+0x1b0>
 80164d6:	9b03      	ldr	r3, [sp, #12]
 80164d8:	1d1a      	adds	r2, r3, #4
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	9203      	str	r2, [sp, #12]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	bfb8      	it	lt
 80164e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80164e6:	3402      	adds	r4, #2
 80164e8:	9305      	str	r3, [sp, #20]
 80164ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80165c0 <_vfiprintf_r+0x230>
 80164ee:	7821      	ldrb	r1, [r4, #0]
 80164f0:	2203      	movs	r2, #3
 80164f2:	4650      	mov	r0, sl
 80164f4:	f7e9 fe94 	bl	8000220 <memchr>
 80164f8:	b138      	cbz	r0, 801650a <_vfiprintf_r+0x17a>
 80164fa:	9b04      	ldr	r3, [sp, #16]
 80164fc:	eba0 000a 	sub.w	r0, r0, sl
 8016500:	2240      	movs	r2, #64	; 0x40
 8016502:	4082      	lsls	r2, r0
 8016504:	4313      	orrs	r3, r2
 8016506:	3401      	adds	r4, #1
 8016508:	9304      	str	r3, [sp, #16]
 801650a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801650e:	4829      	ldr	r0, [pc, #164]	; (80165b4 <_vfiprintf_r+0x224>)
 8016510:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016514:	2206      	movs	r2, #6
 8016516:	f7e9 fe83 	bl	8000220 <memchr>
 801651a:	2800      	cmp	r0, #0
 801651c:	d03f      	beq.n	801659e <_vfiprintf_r+0x20e>
 801651e:	4b26      	ldr	r3, [pc, #152]	; (80165b8 <_vfiprintf_r+0x228>)
 8016520:	bb1b      	cbnz	r3, 801656a <_vfiprintf_r+0x1da>
 8016522:	9b03      	ldr	r3, [sp, #12]
 8016524:	3307      	adds	r3, #7
 8016526:	f023 0307 	bic.w	r3, r3, #7
 801652a:	3308      	adds	r3, #8
 801652c:	9303      	str	r3, [sp, #12]
 801652e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016530:	443b      	add	r3, r7
 8016532:	9309      	str	r3, [sp, #36]	; 0x24
 8016534:	e768      	b.n	8016408 <_vfiprintf_r+0x78>
 8016536:	fb0c 3202 	mla	r2, ip, r2, r3
 801653a:	460c      	mov	r4, r1
 801653c:	2001      	movs	r0, #1
 801653e:	e7a6      	b.n	801648e <_vfiprintf_r+0xfe>
 8016540:	2300      	movs	r3, #0
 8016542:	3401      	adds	r4, #1
 8016544:	9305      	str	r3, [sp, #20]
 8016546:	4619      	mov	r1, r3
 8016548:	f04f 0c0a 	mov.w	ip, #10
 801654c:	4620      	mov	r0, r4
 801654e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016552:	3a30      	subs	r2, #48	; 0x30
 8016554:	2a09      	cmp	r2, #9
 8016556:	d903      	bls.n	8016560 <_vfiprintf_r+0x1d0>
 8016558:	2b00      	cmp	r3, #0
 801655a:	d0c6      	beq.n	80164ea <_vfiprintf_r+0x15a>
 801655c:	9105      	str	r1, [sp, #20]
 801655e:	e7c4      	b.n	80164ea <_vfiprintf_r+0x15a>
 8016560:	fb0c 2101 	mla	r1, ip, r1, r2
 8016564:	4604      	mov	r4, r0
 8016566:	2301      	movs	r3, #1
 8016568:	e7f0      	b.n	801654c <_vfiprintf_r+0x1bc>
 801656a:	ab03      	add	r3, sp, #12
 801656c:	9300      	str	r3, [sp, #0]
 801656e:	462a      	mov	r2, r5
 8016570:	4b12      	ldr	r3, [pc, #72]	; (80165bc <_vfiprintf_r+0x22c>)
 8016572:	a904      	add	r1, sp, #16
 8016574:	4630      	mov	r0, r6
 8016576:	f7fb f9c1 	bl	80118fc <_printf_float>
 801657a:	4607      	mov	r7, r0
 801657c:	1c78      	adds	r0, r7, #1
 801657e:	d1d6      	bne.n	801652e <_vfiprintf_r+0x19e>
 8016580:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016582:	07d9      	lsls	r1, r3, #31
 8016584:	d405      	bmi.n	8016592 <_vfiprintf_r+0x202>
 8016586:	89ab      	ldrh	r3, [r5, #12]
 8016588:	059a      	lsls	r2, r3, #22
 801658a:	d402      	bmi.n	8016592 <_vfiprintf_r+0x202>
 801658c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801658e:	f7fc f9c5 	bl	801291c <__retarget_lock_release_recursive>
 8016592:	89ab      	ldrh	r3, [r5, #12]
 8016594:	065b      	lsls	r3, r3, #25
 8016596:	f53f af1d 	bmi.w	80163d4 <_vfiprintf_r+0x44>
 801659a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801659c:	e71c      	b.n	80163d8 <_vfiprintf_r+0x48>
 801659e:	ab03      	add	r3, sp, #12
 80165a0:	9300      	str	r3, [sp, #0]
 80165a2:	462a      	mov	r2, r5
 80165a4:	4b05      	ldr	r3, [pc, #20]	; (80165bc <_vfiprintf_r+0x22c>)
 80165a6:	a904      	add	r1, sp, #16
 80165a8:	4630      	mov	r0, r6
 80165aa:	f7fb fc4b 	bl	8011e44 <_printf_i>
 80165ae:	e7e4      	b.n	801657a <_vfiprintf_r+0x1ea>
 80165b0:	08018321 	.word	0x08018321
 80165b4:	0801832b 	.word	0x0801832b
 80165b8:	080118fd 	.word	0x080118fd
 80165bc:	0801636d 	.word	0x0801636d
 80165c0:	08018327 	.word	0x08018327

080165c4 <__swbuf_r>:
 80165c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165c6:	460e      	mov	r6, r1
 80165c8:	4614      	mov	r4, r2
 80165ca:	4605      	mov	r5, r0
 80165cc:	b118      	cbz	r0, 80165d6 <__swbuf_r+0x12>
 80165ce:	6a03      	ldr	r3, [r0, #32]
 80165d0:	b90b      	cbnz	r3, 80165d6 <__swbuf_r+0x12>
 80165d2:	f7fb fff5 	bl	80125c0 <__sinit>
 80165d6:	69a3      	ldr	r3, [r4, #24]
 80165d8:	60a3      	str	r3, [r4, #8]
 80165da:	89a3      	ldrh	r3, [r4, #12]
 80165dc:	071a      	lsls	r2, r3, #28
 80165de:	d525      	bpl.n	801662c <__swbuf_r+0x68>
 80165e0:	6923      	ldr	r3, [r4, #16]
 80165e2:	b31b      	cbz	r3, 801662c <__swbuf_r+0x68>
 80165e4:	6823      	ldr	r3, [r4, #0]
 80165e6:	6922      	ldr	r2, [r4, #16]
 80165e8:	1a98      	subs	r0, r3, r2
 80165ea:	6963      	ldr	r3, [r4, #20]
 80165ec:	b2f6      	uxtb	r6, r6
 80165ee:	4283      	cmp	r3, r0
 80165f0:	4637      	mov	r7, r6
 80165f2:	dc04      	bgt.n	80165fe <__swbuf_r+0x3a>
 80165f4:	4621      	mov	r1, r4
 80165f6:	4628      	mov	r0, r5
 80165f8:	f7ff f962 	bl	80158c0 <_fflush_r>
 80165fc:	b9e0      	cbnz	r0, 8016638 <__swbuf_r+0x74>
 80165fe:	68a3      	ldr	r3, [r4, #8]
 8016600:	3b01      	subs	r3, #1
 8016602:	60a3      	str	r3, [r4, #8]
 8016604:	6823      	ldr	r3, [r4, #0]
 8016606:	1c5a      	adds	r2, r3, #1
 8016608:	6022      	str	r2, [r4, #0]
 801660a:	701e      	strb	r6, [r3, #0]
 801660c:	6962      	ldr	r2, [r4, #20]
 801660e:	1c43      	adds	r3, r0, #1
 8016610:	429a      	cmp	r2, r3
 8016612:	d004      	beq.n	801661e <__swbuf_r+0x5a>
 8016614:	89a3      	ldrh	r3, [r4, #12]
 8016616:	07db      	lsls	r3, r3, #31
 8016618:	d506      	bpl.n	8016628 <__swbuf_r+0x64>
 801661a:	2e0a      	cmp	r6, #10
 801661c:	d104      	bne.n	8016628 <__swbuf_r+0x64>
 801661e:	4621      	mov	r1, r4
 8016620:	4628      	mov	r0, r5
 8016622:	f7ff f94d 	bl	80158c0 <_fflush_r>
 8016626:	b938      	cbnz	r0, 8016638 <__swbuf_r+0x74>
 8016628:	4638      	mov	r0, r7
 801662a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801662c:	4621      	mov	r1, r4
 801662e:	4628      	mov	r0, r5
 8016630:	f000 f806 	bl	8016640 <__swsetup_r>
 8016634:	2800      	cmp	r0, #0
 8016636:	d0d5      	beq.n	80165e4 <__swbuf_r+0x20>
 8016638:	f04f 37ff 	mov.w	r7, #4294967295
 801663c:	e7f4      	b.n	8016628 <__swbuf_r+0x64>
	...

08016640 <__swsetup_r>:
 8016640:	b538      	push	{r3, r4, r5, lr}
 8016642:	4b2a      	ldr	r3, [pc, #168]	; (80166ec <__swsetup_r+0xac>)
 8016644:	4605      	mov	r5, r0
 8016646:	6818      	ldr	r0, [r3, #0]
 8016648:	460c      	mov	r4, r1
 801664a:	b118      	cbz	r0, 8016654 <__swsetup_r+0x14>
 801664c:	6a03      	ldr	r3, [r0, #32]
 801664e:	b90b      	cbnz	r3, 8016654 <__swsetup_r+0x14>
 8016650:	f7fb ffb6 	bl	80125c0 <__sinit>
 8016654:	89a3      	ldrh	r3, [r4, #12]
 8016656:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801665a:	0718      	lsls	r0, r3, #28
 801665c:	d422      	bmi.n	80166a4 <__swsetup_r+0x64>
 801665e:	06d9      	lsls	r1, r3, #27
 8016660:	d407      	bmi.n	8016672 <__swsetup_r+0x32>
 8016662:	2309      	movs	r3, #9
 8016664:	602b      	str	r3, [r5, #0]
 8016666:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801666a:	81a3      	strh	r3, [r4, #12]
 801666c:	f04f 30ff 	mov.w	r0, #4294967295
 8016670:	e034      	b.n	80166dc <__swsetup_r+0x9c>
 8016672:	0758      	lsls	r0, r3, #29
 8016674:	d512      	bpl.n	801669c <__swsetup_r+0x5c>
 8016676:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016678:	b141      	cbz	r1, 801668c <__swsetup_r+0x4c>
 801667a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801667e:	4299      	cmp	r1, r3
 8016680:	d002      	beq.n	8016688 <__swsetup_r+0x48>
 8016682:	4628      	mov	r0, r5
 8016684:	f7fc ffda 	bl	801363c <_free_r>
 8016688:	2300      	movs	r3, #0
 801668a:	6363      	str	r3, [r4, #52]	; 0x34
 801668c:	89a3      	ldrh	r3, [r4, #12]
 801668e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016692:	81a3      	strh	r3, [r4, #12]
 8016694:	2300      	movs	r3, #0
 8016696:	6063      	str	r3, [r4, #4]
 8016698:	6923      	ldr	r3, [r4, #16]
 801669a:	6023      	str	r3, [r4, #0]
 801669c:	89a3      	ldrh	r3, [r4, #12]
 801669e:	f043 0308 	orr.w	r3, r3, #8
 80166a2:	81a3      	strh	r3, [r4, #12]
 80166a4:	6923      	ldr	r3, [r4, #16]
 80166a6:	b94b      	cbnz	r3, 80166bc <__swsetup_r+0x7c>
 80166a8:	89a3      	ldrh	r3, [r4, #12]
 80166aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80166ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80166b2:	d003      	beq.n	80166bc <__swsetup_r+0x7c>
 80166b4:	4621      	mov	r1, r4
 80166b6:	4628      	mov	r0, r5
 80166b8:	f000 f884 	bl	80167c4 <__smakebuf_r>
 80166bc:	89a0      	ldrh	r0, [r4, #12]
 80166be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80166c2:	f010 0301 	ands.w	r3, r0, #1
 80166c6:	d00a      	beq.n	80166de <__swsetup_r+0x9e>
 80166c8:	2300      	movs	r3, #0
 80166ca:	60a3      	str	r3, [r4, #8]
 80166cc:	6963      	ldr	r3, [r4, #20]
 80166ce:	425b      	negs	r3, r3
 80166d0:	61a3      	str	r3, [r4, #24]
 80166d2:	6923      	ldr	r3, [r4, #16]
 80166d4:	b943      	cbnz	r3, 80166e8 <__swsetup_r+0xa8>
 80166d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80166da:	d1c4      	bne.n	8016666 <__swsetup_r+0x26>
 80166dc:	bd38      	pop	{r3, r4, r5, pc}
 80166de:	0781      	lsls	r1, r0, #30
 80166e0:	bf58      	it	pl
 80166e2:	6963      	ldrpl	r3, [r4, #20]
 80166e4:	60a3      	str	r3, [r4, #8]
 80166e6:	e7f4      	b.n	80166d2 <__swsetup_r+0x92>
 80166e8:	2000      	movs	r0, #0
 80166ea:	e7f7      	b.n	80166dc <__swsetup_r+0x9c>
 80166ec:	20000070 	.word	0x20000070

080166f0 <_raise_r>:
 80166f0:	291f      	cmp	r1, #31
 80166f2:	b538      	push	{r3, r4, r5, lr}
 80166f4:	4604      	mov	r4, r0
 80166f6:	460d      	mov	r5, r1
 80166f8:	d904      	bls.n	8016704 <_raise_r+0x14>
 80166fa:	2316      	movs	r3, #22
 80166fc:	6003      	str	r3, [r0, #0]
 80166fe:	f04f 30ff 	mov.w	r0, #4294967295
 8016702:	bd38      	pop	{r3, r4, r5, pc}
 8016704:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8016706:	b112      	cbz	r2, 801670e <_raise_r+0x1e>
 8016708:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801670c:	b94b      	cbnz	r3, 8016722 <_raise_r+0x32>
 801670e:	4620      	mov	r0, r4
 8016710:	f000 f830 	bl	8016774 <_getpid_r>
 8016714:	462a      	mov	r2, r5
 8016716:	4601      	mov	r1, r0
 8016718:	4620      	mov	r0, r4
 801671a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801671e:	f000 b817 	b.w	8016750 <_kill_r>
 8016722:	2b01      	cmp	r3, #1
 8016724:	d00a      	beq.n	801673c <_raise_r+0x4c>
 8016726:	1c59      	adds	r1, r3, #1
 8016728:	d103      	bne.n	8016732 <_raise_r+0x42>
 801672a:	2316      	movs	r3, #22
 801672c:	6003      	str	r3, [r0, #0]
 801672e:	2001      	movs	r0, #1
 8016730:	e7e7      	b.n	8016702 <_raise_r+0x12>
 8016732:	2400      	movs	r4, #0
 8016734:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016738:	4628      	mov	r0, r5
 801673a:	4798      	blx	r3
 801673c:	2000      	movs	r0, #0
 801673e:	e7e0      	b.n	8016702 <_raise_r+0x12>

08016740 <raise>:
 8016740:	4b02      	ldr	r3, [pc, #8]	; (801674c <raise+0xc>)
 8016742:	4601      	mov	r1, r0
 8016744:	6818      	ldr	r0, [r3, #0]
 8016746:	f7ff bfd3 	b.w	80166f0 <_raise_r>
 801674a:	bf00      	nop
 801674c:	20000070 	.word	0x20000070

08016750 <_kill_r>:
 8016750:	b538      	push	{r3, r4, r5, lr}
 8016752:	4d07      	ldr	r5, [pc, #28]	; (8016770 <_kill_r+0x20>)
 8016754:	2300      	movs	r3, #0
 8016756:	4604      	mov	r4, r0
 8016758:	4608      	mov	r0, r1
 801675a:	4611      	mov	r1, r2
 801675c:	602b      	str	r3, [r5, #0]
 801675e:	f7ef fa43 	bl	8005be8 <_kill>
 8016762:	1c43      	adds	r3, r0, #1
 8016764:	d102      	bne.n	801676c <_kill_r+0x1c>
 8016766:	682b      	ldr	r3, [r5, #0]
 8016768:	b103      	cbz	r3, 801676c <_kill_r+0x1c>
 801676a:	6023      	str	r3, [r4, #0]
 801676c:	bd38      	pop	{r3, r4, r5, pc}
 801676e:	bf00      	nop
 8016770:	2000901c 	.word	0x2000901c

08016774 <_getpid_r>:
 8016774:	f7ef ba30 	b.w	8005bd8 <_getpid>

08016778 <__swhatbuf_r>:
 8016778:	b570      	push	{r4, r5, r6, lr}
 801677a:	460c      	mov	r4, r1
 801677c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016780:	2900      	cmp	r1, #0
 8016782:	b096      	sub	sp, #88	; 0x58
 8016784:	4615      	mov	r5, r2
 8016786:	461e      	mov	r6, r3
 8016788:	da0d      	bge.n	80167a6 <__swhatbuf_r+0x2e>
 801678a:	89a3      	ldrh	r3, [r4, #12]
 801678c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016790:	f04f 0100 	mov.w	r1, #0
 8016794:	bf0c      	ite	eq
 8016796:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801679a:	2340      	movne	r3, #64	; 0x40
 801679c:	2000      	movs	r0, #0
 801679e:	6031      	str	r1, [r6, #0]
 80167a0:	602b      	str	r3, [r5, #0]
 80167a2:	b016      	add	sp, #88	; 0x58
 80167a4:	bd70      	pop	{r4, r5, r6, pc}
 80167a6:	466a      	mov	r2, sp
 80167a8:	f000 f848 	bl	801683c <_fstat_r>
 80167ac:	2800      	cmp	r0, #0
 80167ae:	dbec      	blt.n	801678a <__swhatbuf_r+0x12>
 80167b0:	9901      	ldr	r1, [sp, #4]
 80167b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80167b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80167ba:	4259      	negs	r1, r3
 80167bc:	4159      	adcs	r1, r3
 80167be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80167c2:	e7eb      	b.n	801679c <__swhatbuf_r+0x24>

080167c4 <__smakebuf_r>:
 80167c4:	898b      	ldrh	r3, [r1, #12]
 80167c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80167c8:	079d      	lsls	r5, r3, #30
 80167ca:	4606      	mov	r6, r0
 80167cc:	460c      	mov	r4, r1
 80167ce:	d507      	bpl.n	80167e0 <__smakebuf_r+0x1c>
 80167d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80167d4:	6023      	str	r3, [r4, #0]
 80167d6:	6123      	str	r3, [r4, #16]
 80167d8:	2301      	movs	r3, #1
 80167da:	6163      	str	r3, [r4, #20]
 80167dc:	b002      	add	sp, #8
 80167de:	bd70      	pop	{r4, r5, r6, pc}
 80167e0:	ab01      	add	r3, sp, #4
 80167e2:	466a      	mov	r2, sp
 80167e4:	f7ff ffc8 	bl	8016778 <__swhatbuf_r>
 80167e8:	9900      	ldr	r1, [sp, #0]
 80167ea:	4605      	mov	r5, r0
 80167ec:	4630      	mov	r0, r6
 80167ee:	f7fc ff99 	bl	8013724 <_malloc_r>
 80167f2:	b948      	cbnz	r0, 8016808 <__smakebuf_r+0x44>
 80167f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80167f8:	059a      	lsls	r2, r3, #22
 80167fa:	d4ef      	bmi.n	80167dc <__smakebuf_r+0x18>
 80167fc:	f023 0303 	bic.w	r3, r3, #3
 8016800:	f043 0302 	orr.w	r3, r3, #2
 8016804:	81a3      	strh	r3, [r4, #12]
 8016806:	e7e3      	b.n	80167d0 <__smakebuf_r+0xc>
 8016808:	89a3      	ldrh	r3, [r4, #12]
 801680a:	6020      	str	r0, [r4, #0]
 801680c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016810:	81a3      	strh	r3, [r4, #12]
 8016812:	9b00      	ldr	r3, [sp, #0]
 8016814:	6163      	str	r3, [r4, #20]
 8016816:	9b01      	ldr	r3, [sp, #4]
 8016818:	6120      	str	r0, [r4, #16]
 801681a:	b15b      	cbz	r3, 8016834 <__smakebuf_r+0x70>
 801681c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016820:	4630      	mov	r0, r6
 8016822:	f000 f81d 	bl	8016860 <_isatty_r>
 8016826:	b128      	cbz	r0, 8016834 <__smakebuf_r+0x70>
 8016828:	89a3      	ldrh	r3, [r4, #12]
 801682a:	f023 0303 	bic.w	r3, r3, #3
 801682e:	f043 0301 	orr.w	r3, r3, #1
 8016832:	81a3      	strh	r3, [r4, #12]
 8016834:	89a3      	ldrh	r3, [r4, #12]
 8016836:	431d      	orrs	r5, r3
 8016838:	81a5      	strh	r5, [r4, #12]
 801683a:	e7cf      	b.n	80167dc <__smakebuf_r+0x18>

0801683c <_fstat_r>:
 801683c:	b538      	push	{r3, r4, r5, lr}
 801683e:	4d07      	ldr	r5, [pc, #28]	; (801685c <_fstat_r+0x20>)
 8016840:	2300      	movs	r3, #0
 8016842:	4604      	mov	r4, r0
 8016844:	4608      	mov	r0, r1
 8016846:	4611      	mov	r1, r2
 8016848:	602b      	str	r3, [r5, #0]
 801684a:	f7ef fa2c 	bl	8005ca6 <_fstat>
 801684e:	1c43      	adds	r3, r0, #1
 8016850:	d102      	bne.n	8016858 <_fstat_r+0x1c>
 8016852:	682b      	ldr	r3, [r5, #0]
 8016854:	b103      	cbz	r3, 8016858 <_fstat_r+0x1c>
 8016856:	6023      	str	r3, [r4, #0]
 8016858:	bd38      	pop	{r3, r4, r5, pc}
 801685a:	bf00      	nop
 801685c:	2000901c 	.word	0x2000901c

08016860 <_isatty_r>:
 8016860:	b538      	push	{r3, r4, r5, lr}
 8016862:	4d06      	ldr	r5, [pc, #24]	; (801687c <_isatty_r+0x1c>)
 8016864:	2300      	movs	r3, #0
 8016866:	4604      	mov	r4, r0
 8016868:	4608      	mov	r0, r1
 801686a:	602b      	str	r3, [r5, #0]
 801686c:	f7ef fa2b 	bl	8005cc6 <_isatty>
 8016870:	1c43      	adds	r3, r0, #1
 8016872:	d102      	bne.n	801687a <_isatty_r+0x1a>
 8016874:	682b      	ldr	r3, [r5, #0]
 8016876:	b103      	cbz	r3, 801687a <_isatty_r+0x1a>
 8016878:	6023      	str	r3, [r4, #0]
 801687a:	bd38      	pop	{r3, r4, r5, pc}
 801687c:	2000901c 	.word	0x2000901c

08016880 <pow>:
 8016880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016882:	ed2d 8b02 	vpush	{d8}
 8016886:	eeb0 8a40 	vmov.f32	s16, s0
 801688a:	eef0 8a60 	vmov.f32	s17, s1
 801688e:	ec55 4b11 	vmov	r4, r5, d1
 8016892:	f000 f979 	bl	8016b88 <__ieee754_pow>
 8016896:	4622      	mov	r2, r4
 8016898:	462b      	mov	r3, r5
 801689a:	4620      	mov	r0, r4
 801689c:	4629      	mov	r1, r5
 801689e:	ec57 6b10 	vmov	r6, r7, d0
 80168a2:	f7ea f96b 	bl	8000b7c <__aeabi_dcmpun>
 80168a6:	2800      	cmp	r0, #0
 80168a8:	d13b      	bne.n	8016922 <pow+0xa2>
 80168aa:	ec51 0b18 	vmov	r0, r1, d8
 80168ae:	2200      	movs	r2, #0
 80168b0:	2300      	movs	r3, #0
 80168b2:	f7ea f931 	bl	8000b18 <__aeabi_dcmpeq>
 80168b6:	b1b8      	cbz	r0, 80168e8 <pow+0x68>
 80168b8:	2200      	movs	r2, #0
 80168ba:	2300      	movs	r3, #0
 80168bc:	4620      	mov	r0, r4
 80168be:	4629      	mov	r1, r5
 80168c0:	f7ea f92a 	bl	8000b18 <__aeabi_dcmpeq>
 80168c4:	2800      	cmp	r0, #0
 80168c6:	d146      	bne.n	8016956 <pow+0xd6>
 80168c8:	ec45 4b10 	vmov	d0, r4, r5
 80168cc:	f000 f876 	bl	80169bc <finite>
 80168d0:	b338      	cbz	r0, 8016922 <pow+0xa2>
 80168d2:	2200      	movs	r2, #0
 80168d4:	2300      	movs	r3, #0
 80168d6:	4620      	mov	r0, r4
 80168d8:	4629      	mov	r1, r5
 80168da:	f7ea f927 	bl	8000b2c <__aeabi_dcmplt>
 80168de:	b300      	cbz	r0, 8016922 <pow+0xa2>
 80168e0:	f7fb fff0 	bl	80128c4 <__errno>
 80168e4:	2322      	movs	r3, #34	; 0x22
 80168e6:	e01b      	b.n	8016920 <pow+0xa0>
 80168e8:	ec47 6b10 	vmov	d0, r6, r7
 80168ec:	f000 f866 	bl	80169bc <finite>
 80168f0:	b9e0      	cbnz	r0, 801692c <pow+0xac>
 80168f2:	eeb0 0a48 	vmov.f32	s0, s16
 80168f6:	eef0 0a68 	vmov.f32	s1, s17
 80168fa:	f000 f85f 	bl	80169bc <finite>
 80168fe:	b1a8      	cbz	r0, 801692c <pow+0xac>
 8016900:	ec45 4b10 	vmov	d0, r4, r5
 8016904:	f000 f85a 	bl	80169bc <finite>
 8016908:	b180      	cbz	r0, 801692c <pow+0xac>
 801690a:	4632      	mov	r2, r6
 801690c:	463b      	mov	r3, r7
 801690e:	4630      	mov	r0, r6
 8016910:	4639      	mov	r1, r7
 8016912:	f7ea f933 	bl	8000b7c <__aeabi_dcmpun>
 8016916:	2800      	cmp	r0, #0
 8016918:	d0e2      	beq.n	80168e0 <pow+0x60>
 801691a:	f7fb ffd3 	bl	80128c4 <__errno>
 801691e:	2321      	movs	r3, #33	; 0x21
 8016920:	6003      	str	r3, [r0, #0]
 8016922:	ecbd 8b02 	vpop	{d8}
 8016926:	ec47 6b10 	vmov	d0, r6, r7
 801692a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801692c:	2200      	movs	r2, #0
 801692e:	2300      	movs	r3, #0
 8016930:	4630      	mov	r0, r6
 8016932:	4639      	mov	r1, r7
 8016934:	f7ea f8f0 	bl	8000b18 <__aeabi_dcmpeq>
 8016938:	2800      	cmp	r0, #0
 801693a:	d0f2      	beq.n	8016922 <pow+0xa2>
 801693c:	eeb0 0a48 	vmov.f32	s0, s16
 8016940:	eef0 0a68 	vmov.f32	s1, s17
 8016944:	f000 f83a 	bl	80169bc <finite>
 8016948:	2800      	cmp	r0, #0
 801694a:	d0ea      	beq.n	8016922 <pow+0xa2>
 801694c:	ec45 4b10 	vmov	d0, r4, r5
 8016950:	f000 f834 	bl	80169bc <finite>
 8016954:	e7c3      	b.n	80168de <pow+0x5e>
 8016956:	4f01      	ldr	r7, [pc, #4]	; (801695c <pow+0xdc>)
 8016958:	2600      	movs	r6, #0
 801695a:	e7e2      	b.n	8016922 <pow+0xa2>
 801695c:	3ff00000 	.word	0x3ff00000

08016960 <sqrt>:
 8016960:	b538      	push	{r3, r4, r5, lr}
 8016962:	ed2d 8b02 	vpush	{d8}
 8016966:	ec55 4b10 	vmov	r4, r5, d0
 801696a:	f000 f833 	bl	80169d4 <__ieee754_sqrt>
 801696e:	4622      	mov	r2, r4
 8016970:	462b      	mov	r3, r5
 8016972:	4620      	mov	r0, r4
 8016974:	4629      	mov	r1, r5
 8016976:	eeb0 8a40 	vmov.f32	s16, s0
 801697a:	eef0 8a60 	vmov.f32	s17, s1
 801697e:	f7ea f8fd 	bl	8000b7c <__aeabi_dcmpun>
 8016982:	b990      	cbnz	r0, 80169aa <sqrt+0x4a>
 8016984:	2200      	movs	r2, #0
 8016986:	2300      	movs	r3, #0
 8016988:	4620      	mov	r0, r4
 801698a:	4629      	mov	r1, r5
 801698c:	f7ea f8ce 	bl	8000b2c <__aeabi_dcmplt>
 8016990:	b158      	cbz	r0, 80169aa <sqrt+0x4a>
 8016992:	f7fb ff97 	bl	80128c4 <__errno>
 8016996:	2321      	movs	r3, #33	; 0x21
 8016998:	6003      	str	r3, [r0, #0]
 801699a:	2200      	movs	r2, #0
 801699c:	2300      	movs	r3, #0
 801699e:	4610      	mov	r0, r2
 80169a0:	4619      	mov	r1, r3
 80169a2:	f7e9 ff7b 	bl	800089c <__aeabi_ddiv>
 80169a6:	ec41 0b18 	vmov	d8, r0, r1
 80169aa:	eeb0 0a48 	vmov.f32	s0, s16
 80169ae:	eef0 0a68 	vmov.f32	s1, s17
 80169b2:	ecbd 8b02 	vpop	{d8}
 80169b6:	bd38      	pop	{r3, r4, r5, pc}

080169b8 <atan2f>:
 80169b8:	f000 be1a 	b.w	80175f0 <__ieee754_atan2f>

080169bc <finite>:
 80169bc:	b082      	sub	sp, #8
 80169be:	ed8d 0b00 	vstr	d0, [sp]
 80169c2:	9801      	ldr	r0, [sp, #4]
 80169c4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80169c8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80169cc:	0fc0      	lsrs	r0, r0, #31
 80169ce:	b002      	add	sp, #8
 80169d0:	4770      	bx	lr
	...

080169d4 <__ieee754_sqrt>:
 80169d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169d8:	ec55 4b10 	vmov	r4, r5, d0
 80169dc:	4e67      	ldr	r6, [pc, #412]	; (8016b7c <__ieee754_sqrt+0x1a8>)
 80169de:	43ae      	bics	r6, r5
 80169e0:	ee10 0a10 	vmov	r0, s0
 80169e4:	ee10 2a10 	vmov	r2, s0
 80169e8:	4629      	mov	r1, r5
 80169ea:	462b      	mov	r3, r5
 80169ec:	d10d      	bne.n	8016a0a <__ieee754_sqrt+0x36>
 80169ee:	f7e9 fe2b 	bl	8000648 <__aeabi_dmul>
 80169f2:	4602      	mov	r2, r0
 80169f4:	460b      	mov	r3, r1
 80169f6:	4620      	mov	r0, r4
 80169f8:	4629      	mov	r1, r5
 80169fa:	f7e9 fc6f 	bl	80002dc <__adddf3>
 80169fe:	4604      	mov	r4, r0
 8016a00:	460d      	mov	r5, r1
 8016a02:	ec45 4b10 	vmov	d0, r4, r5
 8016a06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a0a:	2d00      	cmp	r5, #0
 8016a0c:	dc0b      	bgt.n	8016a26 <__ieee754_sqrt+0x52>
 8016a0e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016a12:	4326      	orrs	r6, r4
 8016a14:	d0f5      	beq.n	8016a02 <__ieee754_sqrt+0x2e>
 8016a16:	b135      	cbz	r5, 8016a26 <__ieee754_sqrt+0x52>
 8016a18:	f7e9 fc5e 	bl	80002d8 <__aeabi_dsub>
 8016a1c:	4602      	mov	r2, r0
 8016a1e:	460b      	mov	r3, r1
 8016a20:	f7e9 ff3c 	bl	800089c <__aeabi_ddiv>
 8016a24:	e7eb      	b.n	80169fe <__ieee754_sqrt+0x2a>
 8016a26:	1509      	asrs	r1, r1, #20
 8016a28:	f000 808d 	beq.w	8016b46 <__ieee754_sqrt+0x172>
 8016a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016a30:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8016a34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016a38:	07c9      	lsls	r1, r1, #31
 8016a3a:	bf5c      	itt	pl
 8016a3c:	005b      	lslpl	r3, r3, #1
 8016a3e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8016a42:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016a46:	bf58      	it	pl
 8016a48:	0052      	lslpl	r2, r2, #1
 8016a4a:	2500      	movs	r5, #0
 8016a4c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8016a50:	1076      	asrs	r6, r6, #1
 8016a52:	0052      	lsls	r2, r2, #1
 8016a54:	f04f 0e16 	mov.w	lr, #22
 8016a58:	46ac      	mov	ip, r5
 8016a5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8016a5e:	eb0c 0001 	add.w	r0, ip, r1
 8016a62:	4298      	cmp	r0, r3
 8016a64:	bfde      	ittt	le
 8016a66:	1a1b      	suble	r3, r3, r0
 8016a68:	eb00 0c01 	addle.w	ip, r0, r1
 8016a6c:	186d      	addle	r5, r5, r1
 8016a6e:	005b      	lsls	r3, r3, #1
 8016a70:	f1be 0e01 	subs.w	lr, lr, #1
 8016a74:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8016a78:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8016a7c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8016a80:	d1ed      	bne.n	8016a5e <__ieee754_sqrt+0x8a>
 8016a82:	4674      	mov	r4, lr
 8016a84:	2720      	movs	r7, #32
 8016a86:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8016a8a:	4563      	cmp	r3, ip
 8016a8c:	eb01 000e 	add.w	r0, r1, lr
 8016a90:	dc02      	bgt.n	8016a98 <__ieee754_sqrt+0xc4>
 8016a92:	d113      	bne.n	8016abc <__ieee754_sqrt+0xe8>
 8016a94:	4290      	cmp	r0, r2
 8016a96:	d811      	bhi.n	8016abc <__ieee754_sqrt+0xe8>
 8016a98:	2800      	cmp	r0, #0
 8016a9a:	eb00 0e01 	add.w	lr, r0, r1
 8016a9e:	da57      	bge.n	8016b50 <__ieee754_sqrt+0x17c>
 8016aa0:	f1be 0f00 	cmp.w	lr, #0
 8016aa4:	db54      	blt.n	8016b50 <__ieee754_sqrt+0x17c>
 8016aa6:	f10c 0801 	add.w	r8, ip, #1
 8016aaa:	eba3 030c 	sub.w	r3, r3, ip
 8016aae:	4290      	cmp	r0, r2
 8016ab0:	bf88      	it	hi
 8016ab2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8016ab6:	1a12      	subs	r2, r2, r0
 8016ab8:	440c      	add	r4, r1
 8016aba:	46c4      	mov	ip, r8
 8016abc:	005b      	lsls	r3, r3, #1
 8016abe:	3f01      	subs	r7, #1
 8016ac0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8016ac4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8016ac8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8016acc:	d1dd      	bne.n	8016a8a <__ieee754_sqrt+0xb6>
 8016ace:	4313      	orrs	r3, r2
 8016ad0:	d01b      	beq.n	8016b0a <__ieee754_sqrt+0x136>
 8016ad2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8016b80 <__ieee754_sqrt+0x1ac>
 8016ad6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8016b84 <__ieee754_sqrt+0x1b0>
 8016ada:	e9da 0100 	ldrd	r0, r1, [sl]
 8016ade:	e9db 2300 	ldrd	r2, r3, [fp]
 8016ae2:	f7e9 fbf9 	bl	80002d8 <__aeabi_dsub>
 8016ae6:	e9da 8900 	ldrd	r8, r9, [sl]
 8016aea:	4602      	mov	r2, r0
 8016aec:	460b      	mov	r3, r1
 8016aee:	4640      	mov	r0, r8
 8016af0:	4649      	mov	r1, r9
 8016af2:	f7ea f825 	bl	8000b40 <__aeabi_dcmple>
 8016af6:	b140      	cbz	r0, 8016b0a <__ieee754_sqrt+0x136>
 8016af8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8016afc:	e9da 0100 	ldrd	r0, r1, [sl]
 8016b00:	e9db 2300 	ldrd	r2, r3, [fp]
 8016b04:	d126      	bne.n	8016b54 <__ieee754_sqrt+0x180>
 8016b06:	3501      	adds	r5, #1
 8016b08:	463c      	mov	r4, r7
 8016b0a:	106a      	asrs	r2, r5, #1
 8016b0c:	0863      	lsrs	r3, r4, #1
 8016b0e:	07e9      	lsls	r1, r5, #31
 8016b10:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016b14:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8016b18:	bf48      	it	mi
 8016b1a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8016b1e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8016b22:	461c      	mov	r4, r3
 8016b24:	e76d      	b.n	8016a02 <__ieee754_sqrt+0x2e>
 8016b26:	0ad3      	lsrs	r3, r2, #11
 8016b28:	3815      	subs	r0, #21
 8016b2a:	0552      	lsls	r2, r2, #21
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d0fa      	beq.n	8016b26 <__ieee754_sqrt+0x152>
 8016b30:	02dc      	lsls	r4, r3, #11
 8016b32:	d50a      	bpl.n	8016b4a <__ieee754_sqrt+0x176>
 8016b34:	f1c1 0420 	rsb	r4, r1, #32
 8016b38:	fa22 f404 	lsr.w	r4, r2, r4
 8016b3c:	1e4d      	subs	r5, r1, #1
 8016b3e:	408a      	lsls	r2, r1
 8016b40:	4323      	orrs	r3, r4
 8016b42:	1b41      	subs	r1, r0, r5
 8016b44:	e772      	b.n	8016a2c <__ieee754_sqrt+0x58>
 8016b46:	4608      	mov	r0, r1
 8016b48:	e7f0      	b.n	8016b2c <__ieee754_sqrt+0x158>
 8016b4a:	005b      	lsls	r3, r3, #1
 8016b4c:	3101      	adds	r1, #1
 8016b4e:	e7ef      	b.n	8016b30 <__ieee754_sqrt+0x15c>
 8016b50:	46e0      	mov	r8, ip
 8016b52:	e7aa      	b.n	8016aaa <__ieee754_sqrt+0xd6>
 8016b54:	f7e9 fbc2 	bl	80002dc <__adddf3>
 8016b58:	e9da 8900 	ldrd	r8, r9, [sl]
 8016b5c:	4602      	mov	r2, r0
 8016b5e:	460b      	mov	r3, r1
 8016b60:	4640      	mov	r0, r8
 8016b62:	4649      	mov	r1, r9
 8016b64:	f7e9 ffe2 	bl	8000b2c <__aeabi_dcmplt>
 8016b68:	b120      	cbz	r0, 8016b74 <__ieee754_sqrt+0x1a0>
 8016b6a:	1ca0      	adds	r0, r4, #2
 8016b6c:	bf08      	it	eq
 8016b6e:	3501      	addeq	r5, #1
 8016b70:	3402      	adds	r4, #2
 8016b72:	e7ca      	b.n	8016b0a <__ieee754_sqrt+0x136>
 8016b74:	3401      	adds	r4, #1
 8016b76:	f024 0401 	bic.w	r4, r4, #1
 8016b7a:	e7c6      	b.n	8016b0a <__ieee754_sqrt+0x136>
 8016b7c:	7ff00000 	.word	0x7ff00000
 8016b80:	200001e0 	.word	0x200001e0
 8016b84:	200001e8 	.word	0x200001e8

08016b88 <__ieee754_pow>:
 8016b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b8c:	ed2d 8b06 	vpush	{d8-d10}
 8016b90:	b089      	sub	sp, #36	; 0x24
 8016b92:	ed8d 1b00 	vstr	d1, [sp]
 8016b96:	e9dd 2900 	ldrd	r2, r9, [sp]
 8016b9a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8016b9e:	ea58 0102 	orrs.w	r1, r8, r2
 8016ba2:	ec57 6b10 	vmov	r6, r7, d0
 8016ba6:	d115      	bne.n	8016bd4 <__ieee754_pow+0x4c>
 8016ba8:	19b3      	adds	r3, r6, r6
 8016baa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8016bae:	4152      	adcs	r2, r2
 8016bb0:	4299      	cmp	r1, r3
 8016bb2:	4b89      	ldr	r3, [pc, #548]	; (8016dd8 <__ieee754_pow+0x250>)
 8016bb4:	4193      	sbcs	r3, r2
 8016bb6:	f080 84d1 	bcs.w	801755c <__ieee754_pow+0x9d4>
 8016bba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016bbe:	4630      	mov	r0, r6
 8016bc0:	4639      	mov	r1, r7
 8016bc2:	f7e9 fb8b 	bl	80002dc <__adddf3>
 8016bc6:	ec41 0b10 	vmov	d0, r0, r1
 8016bca:	b009      	add	sp, #36	; 0x24
 8016bcc:	ecbd 8b06 	vpop	{d8-d10}
 8016bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bd4:	4b81      	ldr	r3, [pc, #516]	; (8016ddc <__ieee754_pow+0x254>)
 8016bd6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8016bda:	429c      	cmp	r4, r3
 8016bdc:	ee10 aa10 	vmov	sl, s0
 8016be0:	463d      	mov	r5, r7
 8016be2:	dc06      	bgt.n	8016bf2 <__ieee754_pow+0x6a>
 8016be4:	d101      	bne.n	8016bea <__ieee754_pow+0x62>
 8016be6:	2e00      	cmp	r6, #0
 8016be8:	d1e7      	bne.n	8016bba <__ieee754_pow+0x32>
 8016bea:	4598      	cmp	r8, r3
 8016bec:	dc01      	bgt.n	8016bf2 <__ieee754_pow+0x6a>
 8016bee:	d10f      	bne.n	8016c10 <__ieee754_pow+0x88>
 8016bf0:	b172      	cbz	r2, 8016c10 <__ieee754_pow+0x88>
 8016bf2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8016bf6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8016bfa:	ea55 050a 	orrs.w	r5, r5, sl
 8016bfe:	d1dc      	bne.n	8016bba <__ieee754_pow+0x32>
 8016c00:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016c04:	18db      	adds	r3, r3, r3
 8016c06:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8016c0a:	4152      	adcs	r2, r2
 8016c0c:	429d      	cmp	r5, r3
 8016c0e:	e7d0      	b.n	8016bb2 <__ieee754_pow+0x2a>
 8016c10:	2d00      	cmp	r5, #0
 8016c12:	da3b      	bge.n	8016c8c <__ieee754_pow+0x104>
 8016c14:	4b72      	ldr	r3, [pc, #456]	; (8016de0 <__ieee754_pow+0x258>)
 8016c16:	4598      	cmp	r8, r3
 8016c18:	dc51      	bgt.n	8016cbe <__ieee754_pow+0x136>
 8016c1a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8016c1e:	4598      	cmp	r8, r3
 8016c20:	f340 84ab 	ble.w	801757a <__ieee754_pow+0x9f2>
 8016c24:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016c28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016c2c:	2b14      	cmp	r3, #20
 8016c2e:	dd0f      	ble.n	8016c50 <__ieee754_pow+0xc8>
 8016c30:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016c34:	fa22 f103 	lsr.w	r1, r2, r3
 8016c38:	fa01 f303 	lsl.w	r3, r1, r3
 8016c3c:	4293      	cmp	r3, r2
 8016c3e:	f040 849c 	bne.w	801757a <__ieee754_pow+0x9f2>
 8016c42:	f001 0101 	and.w	r1, r1, #1
 8016c46:	f1c1 0302 	rsb	r3, r1, #2
 8016c4a:	9304      	str	r3, [sp, #16]
 8016c4c:	b182      	cbz	r2, 8016c70 <__ieee754_pow+0xe8>
 8016c4e:	e05f      	b.n	8016d10 <__ieee754_pow+0x188>
 8016c50:	2a00      	cmp	r2, #0
 8016c52:	d15b      	bne.n	8016d0c <__ieee754_pow+0x184>
 8016c54:	f1c3 0314 	rsb	r3, r3, #20
 8016c58:	fa48 f103 	asr.w	r1, r8, r3
 8016c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8016c60:	4543      	cmp	r3, r8
 8016c62:	f040 8487 	bne.w	8017574 <__ieee754_pow+0x9ec>
 8016c66:	f001 0101 	and.w	r1, r1, #1
 8016c6a:	f1c1 0302 	rsb	r3, r1, #2
 8016c6e:	9304      	str	r3, [sp, #16]
 8016c70:	4b5c      	ldr	r3, [pc, #368]	; (8016de4 <__ieee754_pow+0x25c>)
 8016c72:	4598      	cmp	r8, r3
 8016c74:	d132      	bne.n	8016cdc <__ieee754_pow+0x154>
 8016c76:	f1b9 0f00 	cmp.w	r9, #0
 8016c7a:	f280 8477 	bge.w	801756c <__ieee754_pow+0x9e4>
 8016c7e:	4959      	ldr	r1, [pc, #356]	; (8016de4 <__ieee754_pow+0x25c>)
 8016c80:	4632      	mov	r2, r6
 8016c82:	463b      	mov	r3, r7
 8016c84:	2000      	movs	r0, #0
 8016c86:	f7e9 fe09 	bl	800089c <__aeabi_ddiv>
 8016c8a:	e79c      	b.n	8016bc6 <__ieee754_pow+0x3e>
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	9304      	str	r3, [sp, #16]
 8016c90:	2a00      	cmp	r2, #0
 8016c92:	d13d      	bne.n	8016d10 <__ieee754_pow+0x188>
 8016c94:	4b51      	ldr	r3, [pc, #324]	; (8016ddc <__ieee754_pow+0x254>)
 8016c96:	4598      	cmp	r8, r3
 8016c98:	d1ea      	bne.n	8016c70 <__ieee754_pow+0xe8>
 8016c9a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016c9e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016ca2:	ea53 030a 	orrs.w	r3, r3, sl
 8016ca6:	f000 8459 	beq.w	801755c <__ieee754_pow+0x9d4>
 8016caa:	4b4f      	ldr	r3, [pc, #316]	; (8016de8 <__ieee754_pow+0x260>)
 8016cac:	429c      	cmp	r4, r3
 8016cae:	dd08      	ble.n	8016cc2 <__ieee754_pow+0x13a>
 8016cb0:	f1b9 0f00 	cmp.w	r9, #0
 8016cb4:	f2c0 8456 	blt.w	8017564 <__ieee754_pow+0x9dc>
 8016cb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016cbc:	e783      	b.n	8016bc6 <__ieee754_pow+0x3e>
 8016cbe:	2302      	movs	r3, #2
 8016cc0:	e7e5      	b.n	8016c8e <__ieee754_pow+0x106>
 8016cc2:	f1b9 0f00 	cmp.w	r9, #0
 8016cc6:	f04f 0000 	mov.w	r0, #0
 8016cca:	f04f 0100 	mov.w	r1, #0
 8016cce:	f6bf af7a 	bge.w	8016bc6 <__ieee754_pow+0x3e>
 8016cd2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016cd6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016cda:	e774      	b.n	8016bc6 <__ieee754_pow+0x3e>
 8016cdc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8016ce0:	d106      	bne.n	8016cf0 <__ieee754_pow+0x168>
 8016ce2:	4632      	mov	r2, r6
 8016ce4:	463b      	mov	r3, r7
 8016ce6:	4630      	mov	r0, r6
 8016ce8:	4639      	mov	r1, r7
 8016cea:	f7e9 fcad 	bl	8000648 <__aeabi_dmul>
 8016cee:	e76a      	b.n	8016bc6 <__ieee754_pow+0x3e>
 8016cf0:	4b3e      	ldr	r3, [pc, #248]	; (8016dec <__ieee754_pow+0x264>)
 8016cf2:	4599      	cmp	r9, r3
 8016cf4:	d10c      	bne.n	8016d10 <__ieee754_pow+0x188>
 8016cf6:	2d00      	cmp	r5, #0
 8016cf8:	db0a      	blt.n	8016d10 <__ieee754_pow+0x188>
 8016cfa:	ec47 6b10 	vmov	d0, r6, r7
 8016cfe:	b009      	add	sp, #36	; 0x24
 8016d00:	ecbd 8b06 	vpop	{d8-d10}
 8016d04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d08:	f7ff be64 	b.w	80169d4 <__ieee754_sqrt>
 8016d0c:	2300      	movs	r3, #0
 8016d0e:	9304      	str	r3, [sp, #16]
 8016d10:	ec47 6b10 	vmov	d0, r6, r7
 8016d14:	f000 fc62 	bl	80175dc <fabs>
 8016d18:	ec51 0b10 	vmov	r0, r1, d0
 8016d1c:	f1ba 0f00 	cmp.w	sl, #0
 8016d20:	d129      	bne.n	8016d76 <__ieee754_pow+0x1ee>
 8016d22:	b124      	cbz	r4, 8016d2e <__ieee754_pow+0x1a6>
 8016d24:	4b2f      	ldr	r3, [pc, #188]	; (8016de4 <__ieee754_pow+0x25c>)
 8016d26:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8016d2a:	429a      	cmp	r2, r3
 8016d2c:	d123      	bne.n	8016d76 <__ieee754_pow+0x1ee>
 8016d2e:	f1b9 0f00 	cmp.w	r9, #0
 8016d32:	da05      	bge.n	8016d40 <__ieee754_pow+0x1b8>
 8016d34:	4602      	mov	r2, r0
 8016d36:	460b      	mov	r3, r1
 8016d38:	2000      	movs	r0, #0
 8016d3a:	492a      	ldr	r1, [pc, #168]	; (8016de4 <__ieee754_pow+0x25c>)
 8016d3c:	f7e9 fdae 	bl	800089c <__aeabi_ddiv>
 8016d40:	2d00      	cmp	r5, #0
 8016d42:	f6bf af40 	bge.w	8016bc6 <__ieee754_pow+0x3e>
 8016d46:	9b04      	ldr	r3, [sp, #16]
 8016d48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016d4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016d50:	431c      	orrs	r4, r3
 8016d52:	d108      	bne.n	8016d66 <__ieee754_pow+0x1de>
 8016d54:	4602      	mov	r2, r0
 8016d56:	460b      	mov	r3, r1
 8016d58:	4610      	mov	r0, r2
 8016d5a:	4619      	mov	r1, r3
 8016d5c:	f7e9 fabc 	bl	80002d8 <__aeabi_dsub>
 8016d60:	4602      	mov	r2, r0
 8016d62:	460b      	mov	r3, r1
 8016d64:	e78f      	b.n	8016c86 <__ieee754_pow+0xfe>
 8016d66:	9b04      	ldr	r3, [sp, #16]
 8016d68:	2b01      	cmp	r3, #1
 8016d6a:	f47f af2c 	bne.w	8016bc6 <__ieee754_pow+0x3e>
 8016d6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016d72:	4619      	mov	r1, r3
 8016d74:	e727      	b.n	8016bc6 <__ieee754_pow+0x3e>
 8016d76:	0feb      	lsrs	r3, r5, #31
 8016d78:	3b01      	subs	r3, #1
 8016d7a:	9306      	str	r3, [sp, #24]
 8016d7c:	9a06      	ldr	r2, [sp, #24]
 8016d7e:	9b04      	ldr	r3, [sp, #16]
 8016d80:	4313      	orrs	r3, r2
 8016d82:	d102      	bne.n	8016d8a <__ieee754_pow+0x202>
 8016d84:	4632      	mov	r2, r6
 8016d86:	463b      	mov	r3, r7
 8016d88:	e7e6      	b.n	8016d58 <__ieee754_pow+0x1d0>
 8016d8a:	4b19      	ldr	r3, [pc, #100]	; (8016df0 <__ieee754_pow+0x268>)
 8016d8c:	4598      	cmp	r8, r3
 8016d8e:	f340 80fb 	ble.w	8016f88 <__ieee754_pow+0x400>
 8016d92:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016d96:	4598      	cmp	r8, r3
 8016d98:	4b13      	ldr	r3, [pc, #76]	; (8016de8 <__ieee754_pow+0x260>)
 8016d9a:	dd0c      	ble.n	8016db6 <__ieee754_pow+0x22e>
 8016d9c:	429c      	cmp	r4, r3
 8016d9e:	dc0f      	bgt.n	8016dc0 <__ieee754_pow+0x238>
 8016da0:	f1b9 0f00 	cmp.w	r9, #0
 8016da4:	da0f      	bge.n	8016dc6 <__ieee754_pow+0x23e>
 8016da6:	2000      	movs	r0, #0
 8016da8:	b009      	add	sp, #36	; 0x24
 8016daa:	ecbd 8b06 	vpop	{d8-d10}
 8016dae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016db2:	f000 be3e 	b.w	8017a32 <__math_oflow>
 8016db6:	429c      	cmp	r4, r3
 8016db8:	dbf2      	blt.n	8016da0 <__ieee754_pow+0x218>
 8016dba:	4b0a      	ldr	r3, [pc, #40]	; (8016de4 <__ieee754_pow+0x25c>)
 8016dbc:	429c      	cmp	r4, r3
 8016dbe:	dd19      	ble.n	8016df4 <__ieee754_pow+0x26c>
 8016dc0:	f1b9 0f00 	cmp.w	r9, #0
 8016dc4:	dcef      	bgt.n	8016da6 <__ieee754_pow+0x21e>
 8016dc6:	2000      	movs	r0, #0
 8016dc8:	b009      	add	sp, #36	; 0x24
 8016dca:	ecbd 8b06 	vpop	{d8-d10}
 8016dce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dd2:	f000 be25 	b.w	8017a20 <__math_uflow>
 8016dd6:	bf00      	nop
 8016dd8:	fff00000 	.word	0xfff00000
 8016ddc:	7ff00000 	.word	0x7ff00000
 8016de0:	433fffff 	.word	0x433fffff
 8016de4:	3ff00000 	.word	0x3ff00000
 8016de8:	3fefffff 	.word	0x3fefffff
 8016dec:	3fe00000 	.word	0x3fe00000
 8016df0:	41e00000 	.word	0x41e00000
 8016df4:	4b60      	ldr	r3, [pc, #384]	; (8016f78 <__ieee754_pow+0x3f0>)
 8016df6:	2200      	movs	r2, #0
 8016df8:	f7e9 fa6e 	bl	80002d8 <__aeabi_dsub>
 8016dfc:	a354      	add	r3, pc, #336	; (adr r3, 8016f50 <__ieee754_pow+0x3c8>)
 8016dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e02:	4604      	mov	r4, r0
 8016e04:	460d      	mov	r5, r1
 8016e06:	f7e9 fc1f 	bl	8000648 <__aeabi_dmul>
 8016e0a:	a353      	add	r3, pc, #332	; (adr r3, 8016f58 <__ieee754_pow+0x3d0>)
 8016e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e10:	4606      	mov	r6, r0
 8016e12:	460f      	mov	r7, r1
 8016e14:	4620      	mov	r0, r4
 8016e16:	4629      	mov	r1, r5
 8016e18:	f7e9 fc16 	bl	8000648 <__aeabi_dmul>
 8016e1c:	4b57      	ldr	r3, [pc, #348]	; (8016f7c <__ieee754_pow+0x3f4>)
 8016e1e:	4682      	mov	sl, r0
 8016e20:	468b      	mov	fp, r1
 8016e22:	2200      	movs	r2, #0
 8016e24:	4620      	mov	r0, r4
 8016e26:	4629      	mov	r1, r5
 8016e28:	f7e9 fc0e 	bl	8000648 <__aeabi_dmul>
 8016e2c:	4602      	mov	r2, r0
 8016e2e:	460b      	mov	r3, r1
 8016e30:	a14b      	add	r1, pc, #300	; (adr r1, 8016f60 <__ieee754_pow+0x3d8>)
 8016e32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016e36:	f7e9 fa4f 	bl	80002d8 <__aeabi_dsub>
 8016e3a:	4622      	mov	r2, r4
 8016e3c:	462b      	mov	r3, r5
 8016e3e:	f7e9 fc03 	bl	8000648 <__aeabi_dmul>
 8016e42:	4602      	mov	r2, r0
 8016e44:	460b      	mov	r3, r1
 8016e46:	2000      	movs	r0, #0
 8016e48:	494d      	ldr	r1, [pc, #308]	; (8016f80 <__ieee754_pow+0x3f8>)
 8016e4a:	f7e9 fa45 	bl	80002d8 <__aeabi_dsub>
 8016e4e:	4622      	mov	r2, r4
 8016e50:	4680      	mov	r8, r0
 8016e52:	4689      	mov	r9, r1
 8016e54:	462b      	mov	r3, r5
 8016e56:	4620      	mov	r0, r4
 8016e58:	4629      	mov	r1, r5
 8016e5a:	f7e9 fbf5 	bl	8000648 <__aeabi_dmul>
 8016e5e:	4602      	mov	r2, r0
 8016e60:	460b      	mov	r3, r1
 8016e62:	4640      	mov	r0, r8
 8016e64:	4649      	mov	r1, r9
 8016e66:	f7e9 fbef 	bl	8000648 <__aeabi_dmul>
 8016e6a:	a33f      	add	r3, pc, #252	; (adr r3, 8016f68 <__ieee754_pow+0x3e0>)
 8016e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e70:	f7e9 fbea 	bl	8000648 <__aeabi_dmul>
 8016e74:	4602      	mov	r2, r0
 8016e76:	460b      	mov	r3, r1
 8016e78:	4650      	mov	r0, sl
 8016e7a:	4659      	mov	r1, fp
 8016e7c:	f7e9 fa2c 	bl	80002d8 <__aeabi_dsub>
 8016e80:	4602      	mov	r2, r0
 8016e82:	460b      	mov	r3, r1
 8016e84:	4680      	mov	r8, r0
 8016e86:	4689      	mov	r9, r1
 8016e88:	4630      	mov	r0, r6
 8016e8a:	4639      	mov	r1, r7
 8016e8c:	f7e9 fa26 	bl	80002dc <__adddf3>
 8016e90:	2000      	movs	r0, #0
 8016e92:	4632      	mov	r2, r6
 8016e94:	463b      	mov	r3, r7
 8016e96:	4604      	mov	r4, r0
 8016e98:	460d      	mov	r5, r1
 8016e9a:	f7e9 fa1d 	bl	80002d8 <__aeabi_dsub>
 8016e9e:	4602      	mov	r2, r0
 8016ea0:	460b      	mov	r3, r1
 8016ea2:	4640      	mov	r0, r8
 8016ea4:	4649      	mov	r1, r9
 8016ea6:	f7e9 fa17 	bl	80002d8 <__aeabi_dsub>
 8016eaa:	9b04      	ldr	r3, [sp, #16]
 8016eac:	9a06      	ldr	r2, [sp, #24]
 8016eae:	3b01      	subs	r3, #1
 8016eb0:	4313      	orrs	r3, r2
 8016eb2:	4682      	mov	sl, r0
 8016eb4:	468b      	mov	fp, r1
 8016eb6:	f040 81e7 	bne.w	8017288 <__ieee754_pow+0x700>
 8016eba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8016f70 <__ieee754_pow+0x3e8>
 8016ebe:	eeb0 8a47 	vmov.f32	s16, s14
 8016ec2:	eef0 8a67 	vmov.f32	s17, s15
 8016ec6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016eca:	2600      	movs	r6, #0
 8016ecc:	4632      	mov	r2, r6
 8016ece:	463b      	mov	r3, r7
 8016ed0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ed4:	f7e9 fa00 	bl	80002d8 <__aeabi_dsub>
 8016ed8:	4622      	mov	r2, r4
 8016eda:	462b      	mov	r3, r5
 8016edc:	f7e9 fbb4 	bl	8000648 <__aeabi_dmul>
 8016ee0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016ee4:	4680      	mov	r8, r0
 8016ee6:	4689      	mov	r9, r1
 8016ee8:	4650      	mov	r0, sl
 8016eea:	4659      	mov	r1, fp
 8016eec:	f7e9 fbac 	bl	8000648 <__aeabi_dmul>
 8016ef0:	4602      	mov	r2, r0
 8016ef2:	460b      	mov	r3, r1
 8016ef4:	4640      	mov	r0, r8
 8016ef6:	4649      	mov	r1, r9
 8016ef8:	f7e9 f9f0 	bl	80002dc <__adddf3>
 8016efc:	4632      	mov	r2, r6
 8016efe:	463b      	mov	r3, r7
 8016f00:	4680      	mov	r8, r0
 8016f02:	4689      	mov	r9, r1
 8016f04:	4620      	mov	r0, r4
 8016f06:	4629      	mov	r1, r5
 8016f08:	f7e9 fb9e 	bl	8000648 <__aeabi_dmul>
 8016f0c:	460b      	mov	r3, r1
 8016f0e:	4604      	mov	r4, r0
 8016f10:	460d      	mov	r5, r1
 8016f12:	4602      	mov	r2, r0
 8016f14:	4649      	mov	r1, r9
 8016f16:	4640      	mov	r0, r8
 8016f18:	f7e9 f9e0 	bl	80002dc <__adddf3>
 8016f1c:	4b19      	ldr	r3, [pc, #100]	; (8016f84 <__ieee754_pow+0x3fc>)
 8016f1e:	4299      	cmp	r1, r3
 8016f20:	ec45 4b19 	vmov	d9, r4, r5
 8016f24:	4606      	mov	r6, r0
 8016f26:	460f      	mov	r7, r1
 8016f28:	468b      	mov	fp, r1
 8016f2a:	f340 82f0 	ble.w	801750e <__ieee754_pow+0x986>
 8016f2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016f32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016f36:	4303      	orrs	r3, r0
 8016f38:	f000 81e4 	beq.w	8017304 <__ieee754_pow+0x77c>
 8016f3c:	ec51 0b18 	vmov	r0, r1, d8
 8016f40:	2200      	movs	r2, #0
 8016f42:	2300      	movs	r3, #0
 8016f44:	f7e9 fdf2 	bl	8000b2c <__aeabi_dcmplt>
 8016f48:	3800      	subs	r0, #0
 8016f4a:	bf18      	it	ne
 8016f4c:	2001      	movne	r0, #1
 8016f4e:	e72b      	b.n	8016da8 <__ieee754_pow+0x220>
 8016f50:	60000000 	.word	0x60000000
 8016f54:	3ff71547 	.word	0x3ff71547
 8016f58:	f85ddf44 	.word	0xf85ddf44
 8016f5c:	3e54ae0b 	.word	0x3e54ae0b
 8016f60:	55555555 	.word	0x55555555
 8016f64:	3fd55555 	.word	0x3fd55555
 8016f68:	652b82fe 	.word	0x652b82fe
 8016f6c:	3ff71547 	.word	0x3ff71547
 8016f70:	00000000 	.word	0x00000000
 8016f74:	bff00000 	.word	0xbff00000
 8016f78:	3ff00000 	.word	0x3ff00000
 8016f7c:	3fd00000 	.word	0x3fd00000
 8016f80:	3fe00000 	.word	0x3fe00000
 8016f84:	408fffff 	.word	0x408fffff
 8016f88:	4bd5      	ldr	r3, [pc, #852]	; (80172e0 <__ieee754_pow+0x758>)
 8016f8a:	402b      	ands	r3, r5
 8016f8c:	2200      	movs	r2, #0
 8016f8e:	b92b      	cbnz	r3, 8016f9c <__ieee754_pow+0x414>
 8016f90:	4bd4      	ldr	r3, [pc, #848]	; (80172e4 <__ieee754_pow+0x75c>)
 8016f92:	f7e9 fb59 	bl	8000648 <__aeabi_dmul>
 8016f96:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8016f9a:	460c      	mov	r4, r1
 8016f9c:	1523      	asrs	r3, r4, #20
 8016f9e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016fa2:	4413      	add	r3, r2
 8016fa4:	9305      	str	r3, [sp, #20]
 8016fa6:	4bd0      	ldr	r3, [pc, #832]	; (80172e8 <__ieee754_pow+0x760>)
 8016fa8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016fac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016fb0:	429c      	cmp	r4, r3
 8016fb2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016fb6:	dd08      	ble.n	8016fca <__ieee754_pow+0x442>
 8016fb8:	4bcc      	ldr	r3, [pc, #816]	; (80172ec <__ieee754_pow+0x764>)
 8016fba:	429c      	cmp	r4, r3
 8016fbc:	f340 8162 	ble.w	8017284 <__ieee754_pow+0x6fc>
 8016fc0:	9b05      	ldr	r3, [sp, #20]
 8016fc2:	3301      	adds	r3, #1
 8016fc4:	9305      	str	r3, [sp, #20]
 8016fc6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8016fca:	2400      	movs	r4, #0
 8016fcc:	00e3      	lsls	r3, r4, #3
 8016fce:	9307      	str	r3, [sp, #28]
 8016fd0:	4bc7      	ldr	r3, [pc, #796]	; (80172f0 <__ieee754_pow+0x768>)
 8016fd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016fd6:	ed93 7b00 	vldr	d7, [r3]
 8016fda:	4629      	mov	r1, r5
 8016fdc:	ec53 2b17 	vmov	r2, r3, d7
 8016fe0:	eeb0 9a47 	vmov.f32	s18, s14
 8016fe4:	eef0 9a67 	vmov.f32	s19, s15
 8016fe8:	4682      	mov	sl, r0
 8016fea:	f7e9 f975 	bl	80002d8 <__aeabi_dsub>
 8016fee:	4652      	mov	r2, sl
 8016ff0:	4606      	mov	r6, r0
 8016ff2:	460f      	mov	r7, r1
 8016ff4:	462b      	mov	r3, r5
 8016ff6:	ec51 0b19 	vmov	r0, r1, d9
 8016ffa:	f7e9 f96f 	bl	80002dc <__adddf3>
 8016ffe:	4602      	mov	r2, r0
 8017000:	460b      	mov	r3, r1
 8017002:	2000      	movs	r0, #0
 8017004:	49bb      	ldr	r1, [pc, #748]	; (80172f4 <__ieee754_pow+0x76c>)
 8017006:	f7e9 fc49 	bl	800089c <__aeabi_ddiv>
 801700a:	ec41 0b1a 	vmov	d10, r0, r1
 801700e:	4602      	mov	r2, r0
 8017010:	460b      	mov	r3, r1
 8017012:	4630      	mov	r0, r6
 8017014:	4639      	mov	r1, r7
 8017016:	f7e9 fb17 	bl	8000648 <__aeabi_dmul>
 801701a:	2300      	movs	r3, #0
 801701c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017020:	9302      	str	r3, [sp, #8]
 8017022:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017026:	46ab      	mov	fp, r5
 8017028:	106d      	asrs	r5, r5, #1
 801702a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801702e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8017032:	ec41 0b18 	vmov	d8, r0, r1
 8017036:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801703a:	2200      	movs	r2, #0
 801703c:	4640      	mov	r0, r8
 801703e:	4649      	mov	r1, r9
 8017040:	4614      	mov	r4, r2
 8017042:	461d      	mov	r5, r3
 8017044:	f7e9 fb00 	bl	8000648 <__aeabi_dmul>
 8017048:	4602      	mov	r2, r0
 801704a:	460b      	mov	r3, r1
 801704c:	4630      	mov	r0, r6
 801704e:	4639      	mov	r1, r7
 8017050:	f7e9 f942 	bl	80002d8 <__aeabi_dsub>
 8017054:	ec53 2b19 	vmov	r2, r3, d9
 8017058:	4606      	mov	r6, r0
 801705a:	460f      	mov	r7, r1
 801705c:	4620      	mov	r0, r4
 801705e:	4629      	mov	r1, r5
 8017060:	f7e9 f93a 	bl	80002d8 <__aeabi_dsub>
 8017064:	4602      	mov	r2, r0
 8017066:	460b      	mov	r3, r1
 8017068:	4650      	mov	r0, sl
 801706a:	4659      	mov	r1, fp
 801706c:	f7e9 f934 	bl	80002d8 <__aeabi_dsub>
 8017070:	4642      	mov	r2, r8
 8017072:	464b      	mov	r3, r9
 8017074:	f7e9 fae8 	bl	8000648 <__aeabi_dmul>
 8017078:	4602      	mov	r2, r0
 801707a:	460b      	mov	r3, r1
 801707c:	4630      	mov	r0, r6
 801707e:	4639      	mov	r1, r7
 8017080:	f7e9 f92a 	bl	80002d8 <__aeabi_dsub>
 8017084:	ec53 2b1a 	vmov	r2, r3, d10
 8017088:	f7e9 fade 	bl	8000648 <__aeabi_dmul>
 801708c:	ec53 2b18 	vmov	r2, r3, d8
 8017090:	ec41 0b19 	vmov	d9, r0, r1
 8017094:	ec51 0b18 	vmov	r0, r1, d8
 8017098:	f7e9 fad6 	bl	8000648 <__aeabi_dmul>
 801709c:	a37c      	add	r3, pc, #496	; (adr r3, 8017290 <__ieee754_pow+0x708>)
 801709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170a2:	4604      	mov	r4, r0
 80170a4:	460d      	mov	r5, r1
 80170a6:	f7e9 facf 	bl	8000648 <__aeabi_dmul>
 80170aa:	a37b      	add	r3, pc, #492	; (adr r3, 8017298 <__ieee754_pow+0x710>)
 80170ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170b0:	f7e9 f914 	bl	80002dc <__adddf3>
 80170b4:	4622      	mov	r2, r4
 80170b6:	462b      	mov	r3, r5
 80170b8:	f7e9 fac6 	bl	8000648 <__aeabi_dmul>
 80170bc:	a378      	add	r3, pc, #480	; (adr r3, 80172a0 <__ieee754_pow+0x718>)
 80170be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170c2:	f7e9 f90b 	bl	80002dc <__adddf3>
 80170c6:	4622      	mov	r2, r4
 80170c8:	462b      	mov	r3, r5
 80170ca:	f7e9 fabd 	bl	8000648 <__aeabi_dmul>
 80170ce:	a376      	add	r3, pc, #472	; (adr r3, 80172a8 <__ieee754_pow+0x720>)
 80170d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170d4:	f7e9 f902 	bl	80002dc <__adddf3>
 80170d8:	4622      	mov	r2, r4
 80170da:	462b      	mov	r3, r5
 80170dc:	f7e9 fab4 	bl	8000648 <__aeabi_dmul>
 80170e0:	a373      	add	r3, pc, #460	; (adr r3, 80172b0 <__ieee754_pow+0x728>)
 80170e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170e6:	f7e9 f8f9 	bl	80002dc <__adddf3>
 80170ea:	4622      	mov	r2, r4
 80170ec:	462b      	mov	r3, r5
 80170ee:	f7e9 faab 	bl	8000648 <__aeabi_dmul>
 80170f2:	a371      	add	r3, pc, #452	; (adr r3, 80172b8 <__ieee754_pow+0x730>)
 80170f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170f8:	f7e9 f8f0 	bl	80002dc <__adddf3>
 80170fc:	4622      	mov	r2, r4
 80170fe:	4606      	mov	r6, r0
 8017100:	460f      	mov	r7, r1
 8017102:	462b      	mov	r3, r5
 8017104:	4620      	mov	r0, r4
 8017106:	4629      	mov	r1, r5
 8017108:	f7e9 fa9e 	bl	8000648 <__aeabi_dmul>
 801710c:	4602      	mov	r2, r0
 801710e:	460b      	mov	r3, r1
 8017110:	4630      	mov	r0, r6
 8017112:	4639      	mov	r1, r7
 8017114:	f7e9 fa98 	bl	8000648 <__aeabi_dmul>
 8017118:	4642      	mov	r2, r8
 801711a:	4604      	mov	r4, r0
 801711c:	460d      	mov	r5, r1
 801711e:	464b      	mov	r3, r9
 8017120:	ec51 0b18 	vmov	r0, r1, d8
 8017124:	f7e9 f8da 	bl	80002dc <__adddf3>
 8017128:	ec53 2b19 	vmov	r2, r3, d9
 801712c:	f7e9 fa8c 	bl	8000648 <__aeabi_dmul>
 8017130:	4622      	mov	r2, r4
 8017132:	462b      	mov	r3, r5
 8017134:	f7e9 f8d2 	bl	80002dc <__adddf3>
 8017138:	4642      	mov	r2, r8
 801713a:	4682      	mov	sl, r0
 801713c:	468b      	mov	fp, r1
 801713e:	464b      	mov	r3, r9
 8017140:	4640      	mov	r0, r8
 8017142:	4649      	mov	r1, r9
 8017144:	f7e9 fa80 	bl	8000648 <__aeabi_dmul>
 8017148:	4b6b      	ldr	r3, [pc, #428]	; (80172f8 <__ieee754_pow+0x770>)
 801714a:	2200      	movs	r2, #0
 801714c:	4606      	mov	r6, r0
 801714e:	460f      	mov	r7, r1
 8017150:	f7e9 f8c4 	bl	80002dc <__adddf3>
 8017154:	4652      	mov	r2, sl
 8017156:	465b      	mov	r3, fp
 8017158:	f7e9 f8c0 	bl	80002dc <__adddf3>
 801715c:	2000      	movs	r0, #0
 801715e:	4604      	mov	r4, r0
 8017160:	460d      	mov	r5, r1
 8017162:	4602      	mov	r2, r0
 8017164:	460b      	mov	r3, r1
 8017166:	4640      	mov	r0, r8
 8017168:	4649      	mov	r1, r9
 801716a:	f7e9 fa6d 	bl	8000648 <__aeabi_dmul>
 801716e:	4b62      	ldr	r3, [pc, #392]	; (80172f8 <__ieee754_pow+0x770>)
 8017170:	4680      	mov	r8, r0
 8017172:	4689      	mov	r9, r1
 8017174:	2200      	movs	r2, #0
 8017176:	4620      	mov	r0, r4
 8017178:	4629      	mov	r1, r5
 801717a:	f7e9 f8ad 	bl	80002d8 <__aeabi_dsub>
 801717e:	4632      	mov	r2, r6
 8017180:	463b      	mov	r3, r7
 8017182:	f7e9 f8a9 	bl	80002d8 <__aeabi_dsub>
 8017186:	4602      	mov	r2, r0
 8017188:	460b      	mov	r3, r1
 801718a:	4650      	mov	r0, sl
 801718c:	4659      	mov	r1, fp
 801718e:	f7e9 f8a3 	bl	80002d8 <__aeabi_dsub>
 8017192:	ec53 2b18 	vmov	r2, r3, d8
 8017196:	f7e9 fa57 	bl	8000648 <__aeabi_dmul>
 801719a:	4622      	mov	r2, r4
 801719c:	4606      	mov	r6, r0
 801719e:	460f      	mov	r7, r1
 80171a0:	462b      	mov	r3, r5
 80171a2:	ec51 0b19 	vmov	r0, r1, d9
 80171a6:	f7e9 fa4f 	bl	8000648 <__aeabi_dmul>
 80171aa:	4602      	mov	r2, r0
 80171ac:	460b      	mov	r3, r1
 80171ae:	4630      	mov	r0, r6
 80171b0:	4639      	mov	r1, r7
 80171b2:	f7e9 f893 	bl	80002dc <__adddf3>
 80171b6:	4606      	mov	r6, r0
 80171b8:	460f      	mov	r7, r1
 80171ba:	4602      	mov	r2, r0
 80171bc:	460b      	mov	r3, r1
 80171be:	4640      	mov	r0, r8
 80171c0:	4649      	mov	r1, r9
 80171c2:	f7e9 f88b 	bl	80002dc <__adddf3>
 80171c6:	a33e      	add	r3, pc, #248	; (adr r3, 80172c0 <__ieee754_pow+0x738>)
 80171c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171cc:	2000      	movs	r0, #0
 80171ce:	4604      	mov	r4, r0
 80171d0:	460d      	mov	r5, r1
 80171d2:	f7e9 fa39 	bl	8000648 <__aeabi_dmul>
 80171d6:	4642      	mov	r2, r8
 80171d8:	ec41 0b18 	vmov	d8, r0, r1
 80171dc:	464b      	mov	r3, r9
 80171de:	4620      	mov	r0, r4
 80171e0:	4629      	mov	r1, r5
 80171e2:	f7e9 f879 	bl	80002d8 <__aeabi_dsub>
 80171e6:	4602      	mov	r2, r0
 80171e8:	460b      	mov	r3, r1
 80171ea:	4630      	mov	r0, r6
 80171ec:	4639      	mov	r1, r7
 80171ee:	f7e9 f873 	bl	80002d8 <__aeabi_dsub>
 80171f2:	a335      	add	r3, pc, #212	; (adr r3, 80172c8 <__ieee754_pow+0x740>)
 80171f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171f8:	f7e9 fa26 	bl	8000648 <__aeabi_dmul>
 80171fc:	a334      	add	r3, pc, #208	; (adr r3, 80172d0 <__ieee754_pow+0x748>)
 80171fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017202:	4606      	mov	r6, r0
 8017204:	460f      	mov	r7, r1
 8017206:	4620      	mov	r0, r4
 8017208:	4629      	mov	r1, r5
 801720a:	f7e9 fa1d 	bl	8000648 <__aeabi_dmul>
 801720e:	4602      	mov	r2, r0
 8017210:	460b      	mov	r3, r1
 8017212:	4630      	mov	r0, r6
 8017214:	4639      	mov	r1, r7
 8017216:	f7e9 f861 	bl	80002dc <__adddf3>
 801721a:	9a07      	ldr	r2, [sp, #28]
 801721c:	4b37      	ldr	r3, [pc, #220]	; (80172fc <__ieee754_pow+0x774>)
 801721e:	4413      	add	r3, r2
 8017220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017224:	f7e9 f85a 	bl	80002dc <__adddf3>
 8017228:	4682      	mov	sl, r0
 801722a:	9805      	ldr	r0, [sp, #20]
 801722c:	468b      	mov	fp, r1
 801722e:	f7e9 f9a1 	bl	8000574 <__aeabi_i2d>
 8017232:	9a07      	ldr	r2, [sp, #28]
 8017234:	4b32      	ldr	r3, [pc, #200]	; (8017300 <__ieee754_pow+0x778>)
 8017236:	4413      	add	r3, r2
 8017238:	e9d3 8900 	ldrd	r8, r9, [r3]
 801723c:	4606      	mov	r6, r0
 801723e:	460f      	mov	r7, r1
 8017240:	4652      	mov	r2, sl
 8017242:	465b      	mov	r3, fp
 8017244:	ec51 0b18 	vmov	r0, r1, d8
 8017248:	f7e9 f848 	bl	80002dc <__adddf3>
 801724c:	4642      	mov	r2, r8
 801724e:	464b      	mov	r3, r9
 8017250:	f7e9 f844 	bl	80002dc <__adddf3>
 8017254:	4632      	mov	r2, r6
 8017256:	463b      	mov	r3, r7
 8017258:	f7e9 f840 	bl	80002dc <__adddf3>
 801725c:	2000      	movs	r0, #0
 801725e:	4632      	mov	r2, r6
 8017260:	463b      	mov	r3, r7
 8017262:	4604      	mov	r4, r0
 8017264:	460d      	mov	r5, r1
 8017266:	f7e9 f837 	bl	80002d8 <__aeabi_dsub>
 801726a:	4642      	mov	r2, r8
 801726c:	464b      	mov	r3, r9
 801726e:	f7e9 f833 	bl	80002d8 <__aeabi_dsub>
 8017272:	ec53 2b18 	vmov	r2, r3, d8
 8017276:	f7e9 f82f 	bl	80002d8 <__aeabi_dsub>
 801727a:	4602      	mov	r2, r0
 801727c:	460b      	mov	r3, r1
 801727e:	4650      	mov	r0, sl
 8017280:	4659      	mov	r1, fp
 8017282:	e610      	b.n	8016ea6 <__ieee754_pow+0x31e>
 8017284:	2401      	movs	r4, #1
 8017286:	e6a1      	b.n	8016fcc <__ieee754_pow+0x444>
 8017288:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80172d8 <__ieee754_pow+0x750>
 801728c:	e617      	b.n	8016ebe <__ieee754_pow+0x336>
 801728e:	bf00      	nop
 8017290:	4a454eef 	.word	0x4a454eef
 8017294:	3fca7e28 	.word	0x3fca7e28
 8017298:	93c9db65 	.word	0x93c9db65
 801729c:	3fcd864a 	.word	0x3fcd864a
 80172a0:	a91d4101 	.word	0xa91d4101
 80172a4:	3fd17460 	.word	0x3fd17460
 80172a8:	518f264d 	.word	0x518f264d
 80172ac:	3fd55555 	.word	0x3fd55555
 80172b0:	db6fabff 	.word	0xdb6fabff
 80172b4:	3fdb6db6 	.word	0x3fdb6db6
 80172b8:	33333303 	.word	0x33333303
 80172bc:	3fe33333 	.word	0x3fe33333
 80172c0:	e0000000 	.word	0xe0000000
 80172c4:	3feec709 	.word	0x3feec709
 80172c8:	dc3a03fd 	.word	0xdc3a03fd
 80172cc:	3feec709 	.word	0x3feec709
 80172d0:	145b01f5 	.word	0x145b01f5
 80172d4:	be3e2fe0 	.word	0xbe3e2fe0
 80172d8:	00000000 	.word	0x00000000
 80172dc:	3ff00000 	.word	0x3ff00000
 80172e0:	7ff00000 	.word	0x7ff00000
 80172e4:	43400000 	.word	0x43400000
 80172e8:	0003988e 	.word	0x0003988e
 80172ec:	000bb679 	.word	0x000bb679
 80172f0:	080183f8 	.word	0x080183f8
 80172f4:	3ff00000 	.word	0x3ff00000
 80172f8:	40080000 	.word	0x40080000
 80172fc:	08018418 	.word	0x08018418
 8017300:	08018408 	.word	0x08018408
 8017304:	a3b3      	add	r3, pc, #716	; (adr r3, 80175d4 <__ieee754_pow+0xa4c>)
 8017306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801730a:	4640      	mov	r0, r8
 801730c:	4649      	mov	r1, r9
 801730e:	f7e8 ffe5 	bl	80002dc <__adddf3>
 8017312:	4622      	mov	r2, r4
 8017314:	ec41 0b1a 	vmov	d10, r0, r1
 8017318:	462b      	mov	r3, r5
 801731a:	4630      	mov	r0, r6
 801731c:	4639      	mov	r1, r7
 801731e:	f7e8 ffdb 	bl	80002d8 <__aeabi_dsub>
 8017322:	4602      	mov	r2, r0
 8017324:	460b      	mov	r3, r1
 8017326:	ec51 0b1a 	vmov	r0, r1, d10
 801732a:	f7e9 fc1d 	bl	8000b68 <__aeabi_dcmpgt>
 801732e:	2800      	cmp	r0, #0
 8017330:	f47f ae04 	bne.w	8016f3c <__ieee754_pow+0x3b4>
 8017334:	4aa2      	ldr	r2, [pc, #648]	; (80175c0 <__ieee754_pow+0xa38>)
 8017336:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801733a:	4293      	cmp	r3, r2
 801733c:	f340 8107 	ble.w	801754e <__ieee754_pow+0x9c6>
 8017340:	151b      	asrs	r3, r3, #20
 8017342:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8017346:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801734a:	fa4a fa03 	asr.w	sl, sl, r3
 801734e:	44da      	add	sl, fp
 8017350:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8017354:	489b      	ldr	r0, [pc, #620]	; (80175c4 <__ieee754_pow+0xa3c>)
 8017356:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801735a:	4108      	asrs	r0, r1
 801735c:	ea00 030a 	and.w	r3, r0, sl
 8017360:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8017364:	f1c1 0114 	rsb	r1, r1, #20
 8017368:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801736c:	fa4a fa01 	asr.w	sl, sl, r1
 8017370:	f1bb 0f00 	cmp.w	fp, #0
 8017374:	f04f 0200 	mov.w	r2, #0
 8017378:	4620      	mov	r0, r4
 801737a:	4629      	mov	r1, r5
 801737c:	bfb8      	it	lt
 801737e:	f1ca 0a00 	rsblt	sl, sl, #0
 8017382:	f7e8 ffa9 	bl	80002d8 <__aeabi_dsub>
 8017386:	ec41 0b19 	vmov	d9, r0, r1
 801738a:	4642      	mov	r2, r8
 801738c:	464b      	mov	r3, r9
 801738e:	ec51 0b19 	vmov	r0, r1, d9
 8017392:	f7e8 ffa3 	bl	80002dc <__adddf3>
 8017396:	a37a      	add	r3, pc, #488	; (adr r3, 8017580 <__ieee754_pow+0x9f8>)
 8017398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801739c:	2000      	movs	r0, #0
 801739e:	4604      	mov	r4, r0
 80173a0:	460d      	mov	r5, r1
 80173a2:	f7e9 f951 	bl	8000648 <__aeabi_dmul>
 80173a6:	ec53 2b19 	vmov	r2, r3, d9
 80173aa:	4606      	mov	r6, r0
 80173ac:	460f      	mov	r7, r1
 80173ae:	4620      	mov	r0, r4
 80173b0:	4629      	mov	r1, r5
 80173b2:	f7e8 ff91 	bl	80002d8 <__aeabi_dsub>
 80173b6:	4602      	mov	r2, r0
 80173b8:	460b      	mov	r3, r1
 80173ba:	4640      	mov	r0, r8
 80173bc:	4649      	mov	r1, r9
 80173be:	f7e8 ff8b 	bl	80002d8 <__aeabi_dsub>
 80173c2:	a371      	add	r3, pc, #452	; (adr r3, 8017588 <__ieee754_pow+0xa00>)
 80173c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173c8:	f7e9 f93e 	bl	8000648 <__aeabi_dmul>
 80173cc:	a370      	add	r3, pc, #448	; (adr r3, 8017590 <__ieee754_pow+0xa08>)
 80173ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173d2:	4680      	mov	r8, r0
 80173d4:	4689      	mov	r9, r1
 80173d6:	4620      	mov	r0, r4
 80173d8:	4629      	mov	r1, r5
 80173da:	f7e9 f935 	bl	8000648 <__aeabi_dmul>
 80173de:	4602      	mov	r2, r0
 80173e0:	460b      	mov	r3, r1
 80173e2:	4640      	mov	r0, r8
 80173e4:	4649      	mov	r1, r9
 80173e6:	f7e8 ff79 	bl	80002dc <__adddf3>
 80173ea:	4604      	mov	r4, r0
 80173ec:	460d      	mov	r5, r1
 80173ee:	4602      	mov	r2, r0
 80173f0:	460b      	mov	r3, r1
 80173f2:	4630      	mov	r0, r6
 80173f4:	4639      	mov	r1, r7
 80173f6:	f7e8 ff71 	bl	80002dc <__adddf3>
 80173fa:	4632      	mov	r2, r6
 80173fc:	463b      	mov	r3, r7
 80173fe:	4680      	mov	r8, r0
 8017400:	4689      	mov	r9, r1
 8017402:	f7e8 ff69 	bl	80002d8 <__aeabi_dsub>
 8017406:	4602      	mov	r2, r0
 8017408:	460b      	mov	r3, r1
 801740a:	4620      	mov	r0, r4
 801740c:	4629      	mov	r1, r5
 801740e:	f7e8 ff63 	bl	80002d8 <__aeabi_dsub>
 8017412:	4642      	mov	r2, r8
 8017414:	4606      	mov	r6, r0
 8017416:	460f      	mov	r7, r1
 8017418:	464b      	mov	r3, r9
 801741a:	4640      	mov	r0, r8
 801741c:	4649      	mov	r1, r9
 801741e:	f7e9 f913 	bl	8000648 <__aeabi_dmul>
 8017422:	a35d      	add	r3, pc, #372	; (adr r3, 8017598 <__ieee754_pow+0xa10>)
 8017424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017428:	4604      	mov	r4, r0
 801742a:	460d      	mov	r5, r1
 801742c:	f7e9 f90c 	bl	8000648 <__aeabi_dmul>
 8017430:	a35b      	add	r3, pc, #364	; (adr r3, 80175a0 <__ieee754_pow+0xa18>)
 8017432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017436:	f7e8 ff4f 	bl	80002d8 <__aeabi_dsub>
 801743a:	4622      	mov	r2, r4
 801743c:	462b      	mov	r3, r5
 801743e:	f7e9 f903 	bl	8000648 <__aeabi_dmul>
 8017442:	a359      	add	r3, pc, #356	; (adr r3, 80175a8 <__ieee754_pow+0xa20>)
 8017444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017448:	f7e8 ff48 	bl	80002dc <__adddf3>
 801744c:	4622      	mov	r2, r4
 801744e:	462b      	mov	r3, r5
 8017450:	f7e9 f8fa 	bl	8000648 <__aeabi_dmul>
 8017454:	a356      	add	r3, pc, #344	; (adr r3, 80175b0 <__ieee754_pow+0xa28>)
 8017456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801745a:	f7e8 ff3d 	bl	80002d8 <__aeabi_dsub>
 801745e:	4622      	mov	r2, r4
 8017460:	462b      	mov	r3, r5
 8017462:	f7e9 f8f1 	bl	8000648 <__aeabi_dmul>
 8017466:	a354      	add	r3, pc, #336	; (adr r3, 80175b8 <__ieee754_pow+0xa30>)
 8017468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801746c:	f7e8 ff36 	bl	80002dc <__adddf3>
 8017470:	4622      	mov	r2, r4
 8017472:	462b      	mov	r3, r5
 8017474:	f7e9 f8e8 	bl	8000648 <__aeabi_dmul>
 8017478:	4602      	mov	r2, r0
 801747a:	460b      	mov	r3, r1
 801747c:	4640      	mov	r0, r8
 801747e:	4649      	mov	r1, r9
 8017480:	f7e8 ff2a 	bl	80002d8 <__aeabi_dsub>
 8017484:	4604      	mov	r4, r0
 8017486:	460d      	mov	r5, r1
 8017488:	4602      	mov	r2, r0
 801748a:	460b      	mov	r3, r1
 801748c:	4640      	mov	r0, r8
 801748e:	4649      	mov	r1, r9
 8017490:	f7e9 f8da 	bl	8000648 <__aeabi_dmul>
 8017494:	2200      	movs	r2, #0
 8017496:	ec41 0b19 	vmov	d9, r0, r1
 801749a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801749e:	4620      	mov	r0, r4
 80174a0:	4629      	mov	r1, r5
 80174a2:	f7e8 ff19 	bl	80002d8 <__aeabi_dsub>
 80174a6:	4602      	mov	r2, r0
 80174a8:	460b      	mov	r3, r1
 80174aa:	ec51 0b19 	vmov	r0, r1, d9
 80174ae:	f7e9 f9f5 	bl	800089c <__aeabi_ddiv>
 80174b2:	4632      	mov	r2, r6
 80174b4:	4604      	mov	r4, r0
 80174b6:	460d      	mov	r5, r1
 80174b8:	463b      	mov	r3, r7
 80174ba:	4640      	mov	r0, r8
 80174bc:	4649      	mov	r1, r9
 80174be:	f7e9 f8c3 	bl	8000648 <__aeabi_dmul>
 80174c2:	4632      	mov	r2, r6
 80174c4:	463b      	mov	r3, r7
 80174c6:	f7e8 ff09 	bl	80002dc <__adddf3>
 80174ca:	4602      	mov	r2, r0
 80174cc:	460b      	mov	r3, r1
 80174ce:	4620      	mov	r0, r4
 80174d0:	4629      	mov	r1, r5
 80174d2:	f7e8 ff01 	bl	80002d8 <__aeabi_dsub>
 80174d6:	4642      	mov	r2, r8
 80174d8:	464b      	mov	r3, r9
 80174da:	f7e8 fefd 	bl	80002d8 <__aeabi_dsub>
 80174de:	460b      	mov	r3, r1
 80174e0:	4602      	mov	r2, r0
 80174e2:	4939      	ldr	r1, [pc, #228]	; (80175c8 <__ieee754_pow+0xa40>)
 80174e4:	2000      	movs	r0, #0
 80174e6:	f7e8 fef7 	bl	80002d8 <__aeabi_dsub>
 80174ea:	ec41 0b10 	vmov	d0, r0, r1
 80174ee:	ee10 3a90 	vmov	r3, s1
 80174f2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80174f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80174fa:	da2b      	bge.n	8017554 <__ieee754_pow+0x9cc>
 80174fc:	4650      	mov	r0, sl
 80174fe:	f000 f9f3 	bl	80178e8 <scalbn>
 8017502:	ec51 0b10 	vmov	r0, r1, d0
 8017506:	ec53 2b18 	vmov	r2, r3, d8
 801750a:	f7ff bbee 	b.w	8016cea <__ieee754_pow+0x162>
 801750e:	4b2f      	ldr	r3, [pc, #188]	; (80175cc <__ieee754_pow+0xa44>)
 8017510:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8017514:	429e      	cmp	r6, r3
 8017516:	f77f af0d 	ble.w	8017334 <__ieee754_pow+0x7ac>
 801751a:	4b2d      	ldr	r3, [pc, #180]	; (80175d0 <__ieee754_pow+0xa48>)
 801751c:	440b      	add	r3, r1
 801751e:	4303      	orrs	r3, r0
 8017520:	d009      	beq.n	8017536 <__ieee754_pow+0x9ae>
 8017522:	ec51 0b18 	vmov	r0, r1, d8
 8017526:	2200      	movs	r2, #0
 8017528:	2300      	movs	r3, #0
 801752a:	f7e9 faff 	bl	8000b2c <__aeabi_dcmplt>
 801752e:	3800      	subs	r0, #0
 8017530:	bf18      	it	ne
 8017532:	2001      	movne	r0, #1
 8017534:	e448      	b.n	8016dc8 <__ieee754_pow+0x240>
 8017536:	4622      	mov	r2, r4
 8017538:	462b      	mov	r3, r5
 801753a:	f7e8 fecd 	bl	80002d8 <__aeabi_dsub>
 801753e:	4642      	mov	r2, r8
 8017540:	464b      	mov	r3, r9
 8017542:	f7e9 fb07 	bl	8000b54 <__aeabi_dcmpge>
 8017546:	2800      	cmp	r0, #0
 8017548:	f43f aef4 	beq.w	8017334 <__ieee754_pow+0x7ac>
 801754c:	e7e9      	b.n	8017522 <__ieee754_pow+0x99a>
 801754e:	f04f 0a00 	mov.w	sl, #0
 8017552:	e71a      	b.n	801738a <__ieee754_pow+0x802>
 8017554:	ec51 0b10 	vmov	r0, r1, d0
 8017558:	4619      	mov	r1, r3
 801755a:	e7d4      	b.n	8017506 <__ieee754_pow+0x97e>
 801755c:	491a      	ldr	r1, [pc, #104]	; (80175c8 <__ieee754_pow+0xa40>)
 801755e:	2000      	movs	r0, #0
 8017560:	f7ff bb31 	b.w	8016bc6 <__ieee754_pow+0x3e>
 8017564:	2000      	movs	r0, #0
 8017566:	2100      	movs	r1, #0
 8017568:	f7ff bb2d 	b.w	8016bc6 <__ieee754_pow+0x3e>
 801756c:	4630      	mov	r0, r6
 801756e:	4639      	mov	r1, r7
 8017570:	f7ff bb29 	b.w	8016bc6 <__ieee754_pow+0x3e>
 8017574:	9204      	str	r2, [sp, #16]
 8017576:	f7ff bb7b 	b.w	8016c70 <__ieee754_pow+0xe8>
 801757a:	2300      	movs	r3, #0
 801757c:	f7ff bb65 	b.w	8016c4a <__ieee754_pow+0xc2>
 8017580:	00000000 	.word	0x00000000
 8017584:	3fe62e43 	.word	0x3fe62e43
 8017588:	fefa39ef 	.word	0xfefa39ef
 801758c:	3fe62e42 	.word	0x3fe62e42
 8017590:	0ca86c39 	.word	0x0ca86c39
 8017594:	be205c61 	.word	0xbe205c61
 8017598:	72bea4d0 	.word	0x72bea4d0
 801759c:	3e663769 	.word	0x3e663769
 80175a0:	c5d26bf1 	.word	0xc5d26bf1
 80175a4:	3ebbbd41 	.word	0x3ebbbd41
 80175a8:	af25de2c 	.word	0xaf25de2c
 80175ac:	3f11566a 	.word	0x3f11566a
 80175b0:	16bebd93 	.word	0x16bebd93
 80175b4:	3f66c16c 	.word	0x3f66c16c
 80175b8:	5555553e 	.word	0x5555553e
 80175bc:	3fc55555 	.word	0x3fc55555
 80175c0:	3fe00000 	.word	0x3fe00000
 80175c4:	fff00000 	.word	0xfff00000
 80175c8:	3ff00000 	.word	0x3ff00000
 80175cc:	4090cbff 	.word	0x4090cbff
 80175d0:	3f6f3400 	.word	0x3f6f3400
 80175d4:	652b82fe 	.word	0x652b82fe
 80175d8:	3c971547 	.word	0x3c971547

080175dc <fabs>:
 80175dc:	ec51 0b10 	vmov	r0, r1, d0
 80175e0:	ee10 2a10 	vmov	r2, s0
 80175e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80175e8:	ec43 2b10 	vmov	d0, r2, r3
 80175ec:	4770      	bx	lr
	...

080175f0 <__ieee754_atan2f>:
 80175f0:	ee10 2a90 	vmov	r2, s1
 80175f4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80175f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80175fc:	b510      	push	{r4, lr}
 80175fe:	eef0 7a40 	vmov.f32	s15, s0
 8017602:	dc06      	bgt.n	8017612 <__ieee754_atan2f+0x22>
 8017604:	ee10 0a10 	vmov	r0, s0
 8017608:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801760c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017610:	dd04      	ble.n	801761c <__ieee754_atan2f+0x2c>
 8017612:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8017616:	eeb0 0a67 	vmov.f32	s0, s15
 801761a:	bd10      	pop	{r4, pc}
 801761c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8017620:	d103      	bne.n	801762a <__ieee754_atan2f+0x3a>
 8017622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017626:	f000 b883 	b.w	8017730 <atanf>
 801762a:	1794      	asrs	r4, r2, #30
 801762c:	f004 0402 	and.w	r4, r4, #2
 8017630:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8017634:	b943      	cbnz	r3, 8017648 <__ieee754_atan2f+0x58>
 8017636:	2c02      	cmp	r4, #2
 8017638:	d05e      	beq.n	80176f8 <__ieee754_atan2f+0x108>
 801763a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801770c <__ieee754_atan2f+0x11c>
 801763e:	2c03      	cmp	r4, #3
 8017640:	bf08      	it	eq
 8017642:	eef0 7a47 	vmoveq.f32	s15, s14
 8017646:	e7e6      	b.n	8017616 <__ieee754_atan2f+0x26>
 8017648:	b941      	cbnz	r1, 801765c <__ieee754_atan2f+0x6c>
 801764a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8017710 <__ieee754_atan2f+0x120>
 801764e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8017714 <__ieee754_atan2f+0x124>
 8017652:	2800      	cmp	r0, #0
 8017654:	bfb8      	it	lt
 8017656:	eef0 7a47 	vmovlt.f32	s15, s14
 801765a:	e7dc      	b.n	8017616 <__ieee754_atan2f+0x26>
 801765c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8017660:	d110      	bne.n	8017684 <__ieee754_atan2f+0x94>
 8017662:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017666:	f104 34ff 	add.w	r4, r4, #4294967295
 801766a:	d107      	bne.n	801767c <__ieee754_atan2f+0x8c>
 801766c:	2c02      	cmp	r4, #2
 801766e:	d846      	bhi.n	80176fe <__ieee754_atan2f+0x10e>
 8017670:	4b29      	ldr	r3, [pc, #164]	; (8017718 <__ieee754_atan2f+0x128>)
 8017672:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8017676:	edd3 7a00 	vldr	s15, [r3]
 801767a:	e7cc      	b.n	8017616 <__ieee754_atan2f+0x26>
 801767c:	2c02      	cmp	r4, #2
 801767e:	d841      	bhi.n	8017704 <__ieee754_atan2f+0x114>
 8017680:	4b26      	ldr	r3, [pc, #152]	; (801771c <__ieee754_atan2f+0x12c>)
 8017682:	e7f6      	b.n	8017672 <__ieee754_atan2f+0x82>
 8017684:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017688:	d0df      	beq.n	801764a <__ieee754_atan2f+0x5a>
 801768a:	1a5b      	subs	r3, r3, r1
 801768c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8017690:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8017694:	da1a      	bge.n	80176cc <__ieee754_atan2f+0xdc>
 8017696:	2a00      	cmp	r2, #0
 8017698:	da01      	bge.n	801769e <__ieee754_atan2f+0xae>
 801769a:	313c      	adds	r1, #60	; 0x3c
 801769c:	db19      	blt.n	80176d2 <__ieee754_atan2f+0xe2>
 801769e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80176a2:	f000 f919 	bl	80178d8 <fabsf>
 80176a6:	f000 f843 	bl	8017730 <atanf>
 80176aa:	eef0 7a40 	vmov.f32	s15, s0
 80176ae:	2c01      	cmp	r4, #1
 80176b0:	d012      	beq.n	80176d8 <__ieee754_atan2f+0xe8>
 80176b2:	2c02      	cmp	r4, #2
 80176b4:	d017      	beq.n	80176e6 <__ieee754_atan2f+0xf6>
 80176b6:	2c00      	cmp	r4, #0
 80176b8:	d0ad      	beq.n	8017616 <__ieee754_atan2f+0x26>
 80176ba:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8017720 <__ieee754_atan2f+0x130>
 80176be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80176c2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8017724 <__ieee754_atan2f+0x134>
 80176c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80176ca:	e7a4      	b.n	8017616 <__ieee754_atan2f+0x26>
 80176cc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8017710 <__ieee754_atan2f+0x120>
 80176d0:	e7ed      	b.n	80176ae <__ieee754_atan2f+0xbe>
 80176d2:	eddf 7a15 	vldr	s15, [pc, #84]	; 8017728 <__ieee754_atan2f+0x138>
 80176d6:	e7ea      	b.n	80176ae <__ieee754_atan2f+0xbe>
 80176d8:	ee17 3a90 	vmov	r3, s15
 80176dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80176e0:	ee07 3a90 	vmov	s15, r3
 80176e4:	e797      	b.n	8017616 <__ieee754_atan2f+0x26>
 80176e6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8017720 <__ieee754_atan2f+0x130>
 80176ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80176ee:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8017724 <__ieee754_atan2f+0x134>
 80176f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80176f6:	e78e      	b.n	8017616 <__ieee754_atan2f+0x26>
 80176f8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8017724 <__ieee754_atan2f+0x134>
 80176fc:	e78b      	b.n	8017616 <__ieee754_atan2f+0x26>
 80176fe:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801772c <__ieee754_atan2f+0x13c>
 8017702:	e788      	b.n	8017616 <__ieee754_atan2f+0x26>
 8017704:	eddf 7a08 	vldr	s15, [pc, #32]	; 8017728 <__ieee754_atan2f+0x138>
 8017708:	e785      	b.n	8017616 <__ieee754_atan2f+0x26>
 801770a:	bf00      	nop
 801770c:	c0490fdb 	.word	0xc0490fdb
 8017710:	3fc90fdb 	.word	0x3fc90fdb
 8017714:	bfc90fdb 	.word	0xbfc90fdb
 8017718:	08018428 	.word	0x08018428
 801771c:	08018434 	.word	0x08018434
 8017720:	33bbbd2e 	.word	0x33bbbd2e
 8017724:	40490fdb 	.word	0x40490fdb
 8017728:	00000000 	.word	0x00000000
 801772c:	3f490fdb 	.word	0x3f490fdb

08017730 <atanf>:
 8017730:	b538      	push	{r3, r4, r5, lr}
 8017732:	ee10 5a10 	vmov	r5, s0
 8017736:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801773a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801773e:	eef0 7a40 	vmov.f32	s15, s0
 8017742:	db10      	blt.n	8017766 <atanf+0x36>
 8017744:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8017748:	dd04      	ble.n	8017754 <atanf+0x24>
 801774a:	ee70 7a00 	vadd.f32	s15, s0, s0
 801774e:	eeb0 0a67 	vmov.f32	s0, s15
 8017752:	bd38      	pop	{r3, r4, r5, pc}
 8017754:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801788c <atanf+0x15c>
 8017758:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8017890 <atanf+0x160>
 801775c:	2d00      	cmp	r5, #0
 801775e:	bfd8      	it	le
 8017760:	eef0 7a47 	vmovle.f32	s15, s14
 8017764:	e7f3      	b.n	801774e <atanf+0x1e>
 8017766:	4b4b      	ldr	r3, [pc, #300]	; (8017894 <atanf+0x164>)
 8017768:	429c      	cmp	r4, r3
 801776a:	dc10      	bgt.n	801778e <atanf+0x5e>
 801776c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8017770:	da0a      	bge.n	8017788 <atanf+0x58>
 8017772:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8017898 <atanf+0x168>
 8017776:	ee30 7a07 	vadd.f32	s14, s0, s14
 801777a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801777e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017786:	dce2      	bgt.n	801774e <atanf+0x1e>
 8017788:	f04f 33ff 	mov.w	r3, #4294967295
 801778c:	e013      	b.n	80177b6 <atanf+0x86>
 801778e:	f000 f8a3 	bl	80178d8 <fabsf>
 8017792:	4b42      	ldr	r3, [pc, #264]	; (801789c <atanf+0x16c>)
 8017794:	429c      	cmp	r4, r3
 8017796:	dc4f      	bgt.n	8017838 <atanf+0x108>
 8017798:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801779c:	429c      	cmp	r4, r3
 801779e:	dc41      	bgt.n	8017824 <atanf+0xf4>
 80177a0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80177a4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80177a8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80177ac:	2300      	movs	r3, #0
 80177ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 80177b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80177b6:	1c5a      	adds	r2, r3, #1
 80177b8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80177bc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80178a0 <atanf+0x170>
 80177c0:	eddf 5a38 	vldr	s11, [pc, #224]	; 80178a4 <atanf+0x174>
 80177c4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80178a8 <atanf+0x178>
 80177c8:	ee66 6a06 	vmul.f32	s13, s12, s12
 80177cc:	eee6 5a87 	vfma.f32	s11, s13, s14
 80177d0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80178ac <atanf+0x17c>
 80177d4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80177d8:	eddf 5a35 	vldr	s11, [pc, #212]	; 80178b0 <atanf+0x180>
 80177dc:	eee7 5a26 	vfma.f32	s11, s14, s13
 80177e0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80178b4 <atanf+0x184>
 80177e4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80177e8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80178b8 <atanf+0x188>
 80177ec:	eee7 5a26 	vfma.f32	s11, s14, s13
 80177f0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80178bc <atanf+0x18c>
 80177f4:	eea6 5a87 	vfma.f32	s10, s13, s14
 80177f8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80178c0 <atanf+0x190>
 80177fc:	eea5 7a26 	vfma.f32	s14, s10, s13
 8017800:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80178c4 <atanf+0x194>
 8017804:	eea7 5a26 	vfma.f32	s10, s14, s13
 8017808:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80178c8 <atanf+0x198>
 801780c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8017810:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017814:	eea5 7a86 	vfma.f32	s14, s11, s12
 8017818:	ee27 7a87 	vmul.f32	s14, s15, s14
 801781c:	d121      	bne.n	8017862 <atanf+0x132>
 801781e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017822:	e794      	b.n	801774e <atanf+0x1e>
 8017824:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017828:	ee30 7a67 	vsub.f32	s14, s0, s15
 801782c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017830:	2301      	movs	r3, #1
 8017832:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017836:	e7be      	b.n	80177b6 <atanf+0x86>
 8017838:	4b24      	ldr	r3, [pc, #144]	; (80178cc <atanf+0x19c>)
 801783a:	429c      	cmp	r4, r3
 801783c:	dc0b      	bgt.n	8017856 <atanf+0x126>
 801783e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8017842:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017846:	eea0 7a27 	vfma.f32	s14, s0, s15
 801784a:	2302      	movs	r3, #2
 801784c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8017850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017854:	e7af      	b.n	80177b6 <atanf+0x86>
 8017856:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801785a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801785e:	2303      	movs	r3, #3
 8017860:	e7a9      	b.n	80177b6 <atanf+0x86>
 8017862:	4a1b      	ldr	r2, [pc, #108]	; (80178d0 <atanf+0x1a0>)
 8017864:	491b      	ldr	r1, [pc, #108]	; (80178d4 <atanf+0x1a4>)
 8017866:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801786a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801786e:	edd3 6a00 	vldr	s13, [r3]
 8017872:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017876:	2d00      	cmp	r5, #0
 8017878:	ee37 7a67 	vsub.f32	s14, s14, s15
 801787c:	edd2 7a00 	vldr	s15, [r2]
 8017880:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017884:	bfb8      	it	lt
 8017886:	eef1 7a67 	vneglt.f32	s15, s15
 801788a:	e760      	b.n	801774e <atanf+0x1e>
 801788c:	3fc90fdb 	.word	0x3fc90fdb
 8017890:	bfc90fdb 	.word	0xbfc90fdb
 8017894:	3edfffff 	.word	0x3edfffff
 8017898:	7149f2ca 	.word	0x7149f2ca
 801789c:	3f97ffff 	.word	0x3f97ffff
 80178a0:	3c8569d7 	.word	0x3c8569d7
 80178a4:	3d4bda59 	.word	0x3d4bda59
 80178a8:	bd6ef16b 	.word	0xbd6ef16b
 80178ac:	3d886b35 	.word	0x3d886b35
 80178b0:	3dba2e6e 	.word	0x3dba2e6e
 80178b4:	3e124925 	.word	0x3e124925
 80178b8:	3eaaaaab 	.word	0x3eaaaaab
 80178bc:	bd15a221 	.word	0xbd15a221
 80178c0:	bd9d8795 	.word	0xbd9d8795
 80178c4:	bde38e38 	.word	0xbde38e38
 80178c8:	be4ccccd 	.word	0xbe4ccccd
 80178cc:	401bffff 	.word	0x401bffff
 80178d0:	08018440 	.word	0x08018440
 80178d4:	08018450 	.word	0x08018450

080178d8 <fabsf>:
 80178d8:	ee10 3a10 	vmov	r3, s0
 80178dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80178e0:	ee00 3a10 	vmov	s0, r3
 80178e4:	4770      	bx	lr
	...

080178e8 <scalbn>:
 80178e8:	b570      	push	{r4, r5, r6, lr}
 80178ea:	ec55 4b10 	vmov	r4, r5, d0
 80178ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80178f2:	4606      	mov	r6, r0
 80178f4:	462b      	mov	r3, r5
 80178f6:	b999      	cbnz	r1, 8017920 <scalbn+0x38>
 80178f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80178fc:	4323      	orrs	r3, r4
 80178fe:	d03f      	beq.n	8017980 <scalbn+0x98>
 8017900:	4b35      	ldr	r3, [pc, #212]	; (80179d8 <scalbn+0xf0>)
 8017902:	4629      	mov	r1, r5
 8017904:	ee10 0a10 	vmov	r0, s0
 8017908:	2200      	movs	r2, #0
 801790a:	f7e8 fe9d 	bl	8000648 <__aeabi_dmul>
 801790e:	4b33      	ldr	r3, [pc, #204]	; (80179dc <scalbn+0xf4>)
 8017910:	429e      	cmp	r6, r3
 8017912:	4604      	mov	r4, r0
 8017914:	460d      	mov	r5, r1
 8017916:	da10      	bge.n	801793a <scalbn+0x52>
 8017918:	a327      	add	r3, pc, #156	; (adr r3, 80179b8 <scalbn+0xd0>)
 801791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801791e:	e01f      	b.n	8017960 <scalbn+0x78>
 8017920:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8017924:	4291      	cmp	r1, r2
 8017926:	d10c      	bne.n	8017942 <scalbn+0x5a>
 8017928:	ee10 2a10 	vmov	r2, s0
 801792c:	4620      	mov	r0, r4
 801792e:	4629      	mov	r1, r5
 8017930:	f7e8 fcd4 	bl	80002dc <__adddf3>
 8017934:	4604      	mov	r4, r0
 8017936:	460d      	mov	r5, r1
 8017938:	e022      	b.n	8017980 <scalbn+0x98>
 801793a:	460b      	mov	r3, r1
 801793c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8017940:	3936      	subs	r1, #54	; 0x36
 8017942:	f24c 3250 	movw	r2, #50000	; 0xc350
 8017946:	4296      	cmp	r6, r2
 8017948:	dd0d      	ble.n	8017966 <scalbn+0x7e>
 801794a:	2d00      	cmp	r5, #0
 801794c:	a11c      	add	r1, pc, #112	; (adr r1, 80179c0 <scalbn+0xd8>)
 801794e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017952:	da02      	bge.n	801795a <scalbn+0x72>
 8017954:	a11c      	add	r1, pc, #112	; (adr r1, 80179c8 <scalbn+0xe0>)
 8017956:	e9d1 0100 	ldrd	r0, r1, [r1]
 801795a:	a319      	add	r3, pc, #100	; (adr r3, 80179c0 <scalbn+0xd8>)
 801795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017960:	f7e8 fe72 	bl	8000648 <__aeabi_dmul>
 8017964:	e7e6      	b.n	8017934 <scalbn+0x4c>
 8017966:	1872      	adds	r2, r6, r1
 8017968:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801796c:	428a      	cmp	r2, r1
 801796e:	dcec      	bgt.n	801794a <scalbn+0x62>
 8017970:	2a00      	cmp	r2, #0
 8017972:	dd08      	ble.n	8017986 <scalbn+0x9e>
 8017974:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017978:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801797c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017980:	ec45 4b10 	vmov	d0, r4, r5
 8017984:	bd70      	pop	{r4, r5, r6, pc}
 8017986:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801798a:	da08      	bge.n	801799e <scalbn+0xb6>
 801798c:	2d00      	cmp	r5, #0
 801798e:	a10a      	add	r1, pc, #40	; (adr r1, 80179b8 <scalbn+0xd0>)
 8017990:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017994:	dac0      	bge.n	8017918 <scalbn+0x30>
 8017996:	a10e      	add	r1, pc, #56	; (adr r1, 80179d0 <scalbn+0xe8>)
 8017998:	e9d1 0100 	ldrd	r0, r1, [r1]
 801799c:	e7bc      	b.n	8017918 <scalbn+0x30>
 801799e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80179a2:	3236      	adds	r2, #54	; 0x36
 80179a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80179a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80179ac:	4620      	mov	r0, r4
 80179ae:	4b0c      	ldr	r3, [pc, #48]	; (80179e0 <scalbn+0xf8>)
 80179b0:	2200      	movs	r2, #0
 80179b2:	e7d5      	b.n	8017960 <scalbn+0x78>
 80179b4:	f3af 8000 	nop.w
 80179b8:	c2f8f359 	.word	0xc2f8f359
 80179bc:	01a56e1f 	.word	0x01a56e1f
 80179c0:	8800759c 	.word	0x8800759c
 80179c4:	7e37e43c 	.word	0x7e37e43c
 80179c8:	8800759c 	.word	0x8800759c
 80179cc:	fe37e43c 	.word	0xfe37e43c
 80179d0:	c2f8f359 	.word	0xc2f8f359
 80179d4:	81a56e1f 	.word	0x81a56e1f
 80179d8:	43500000 	.word	0x43500000
 80179dc:	ffff3cb0 	.word	0xffff3cb0
 80179e0:	3c900000 	.word	0x3c900000

080179e4 <with_errno>:
 80179e4:	b570      	push	{r4, r5, r6, lr}
 80179e6:	4604      	mov	r4, r0
 80179e8:	460d      	mov	r5, r1
 80179ea:	4616      	mov	r6, r2
 80179ec:	f7fa ff6a 	bl	80128c4 <__errno>
 80179f0:	4629      	mov	r1, r5
 80179f2:	6006      	str	r6, [r0, #0]
 80179f4:	4620      	mov	r0, r4
 80179f6:	bd70      	pop	{r4, r5, r6, pc}

080179f8 <xflow>:
 80179f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80179fa:	4614      	mov	r4, r2
 80179fc:	461d      	mov	r5, r3
 80179fe:	b108      	cbz	r0, 8017a04 <xflow+0xc>
 8017a00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017a04:	e9cd 2300 	strd	r2, r3, [sp]
 8017a08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017a0c:	4620      	mov	r0, r4
 8017a0e:	4629      	mov	r1, r5
 8017a10:	f7e8 fe1a 	bl	8000648 <__aeabi_dmul>
 8017a14:	2222      	movs	r2, #34	; 0x22
 8017a16:	b003      	add	sp, #12
 8017a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a1c:	f7ff bfe2 	b.w	80179e4 <with_errno>

08017a20 <__math_uflow>:
 8017a20:	b508      	push	{r3, lr}
 8017a22:	2200      	movs	r2, #0
 8017a24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8017a28:	f7ff ffe6 	bl	80179f8 <xflow>
 8017a2c:	ec41 0b10 	vmov	d0, r0, r1
 8017a30:	bd08      	pop	{r3, pc}

08017a32 <__math_oflow>:
 8017a32:	b508      	push	{r3, lr}
 8017a34:	2200      	movs	r2, #0
 8017a36:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8017a3a:	f7ff ffdd 	bl	80179f8 <xflow>
 8017a3e:	ec41 0b10 	vmov	d0, r0, r1
 8017a42:	bd08      	pop	{r3, pc}

08017a44 <_init>:
 8017a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a46:	bf00      	nop
 8017a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a4a:	bc08      	pop	{r3}
 8017a4c:	469e      	mov	lr, r3
 8017a4e:	4770      	bx	lr

08017a50 <_fini>:
 8017a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a52:	bf00      	nop
 8017a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a56:	bc08      	pop	{r3}
 8017a58:	469e      	mov	lr, r3
 8017a5a:	4770      	bx	lr
