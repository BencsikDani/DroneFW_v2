
DroneFW_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b894  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e88  0801ba78  0801ba78  0002ba78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c900  0801c900  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801c900  0801c900  0002c900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c908  0801c908  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c908  0801c908  0002c908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c90c  0801c90c  0002c90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801c910  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008e68  200001f0  0801cb00  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009058  0801cb00  00039058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002bfc5  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006363  00000000  00000000  0005c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fa8  00000000  00000000  00062590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001873  00000000  00000000  00064538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b669  00000000  00000000  00065dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e263  00000000  00000000  00091414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eee4c  00000000  00000000  000bf677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a104  00000000  00000000  001ae4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001b85c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801ba5c 	.word	0x0801ba5c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0801ba5c 	.word	0x0801ba5c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_ldivmod>:
 8000cd8:	b97b      	cbnz	r3, 8000cfa <__aeabi_ldivmod+0x22>
 8000cda:	b972      	cbnz	r2, 8000cfa <__aeabi_ldivmod+0x22>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bfbe      	ittt	lt
 8000ce0:	2000      	movlt	r0, #0
 8000ce2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ce6:	e006      	blt.n	8000cf6 <__aeabi_ldivmod+0x1e>
 8000ce8:	bf08      	it	eq
 8000cea:	2800      	cmpeq	r0, #0
 8000cec:	bf1c      	itt	ne
 8000cee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cf2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf6:	f000 b9f1 	b.w	80010dc <__aeabi_idiv0>
 8000cfa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d02:	2900      	cmp	r1, #0
 8000d04:	db09      	blt.n	8000d1a <__aeabi_ldivmod+0x42>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db1a      	blt.n	8000d40 <__aeabi_ldivmod+0x68>
 8000d0a:	f000 f883 	bl	8000e14 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4770      	bx	lr
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db1b      	blt.n	8000d5c <__aeabi_ldivmod+0x84>
 8000d24:	f000 f876 	bl	8000e14 <__udivmoddi4>
 8000d28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d30:	b004      	add	sp, #16
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	4252      	negs	r2, r2
 8000d3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3e:	4770      	bx	lr
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	f000 f865 	bl	8000e14 <__udivmoddi4>
 8000d4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d52:	b004      	add	sp, #16
 8000d54:	4240      	negs	r0, r0
 8000d56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5a:	4770      	bx	lr
 8000d5c:	4252      	negs	r2, r2
 8000d5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d62:	f000 f857 	bl	8000e14 <__udivmoddi4>
 8000d66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6e:	b004      	add	sp, #16
 8000d70:	4252      	negs	r2, r2
 8000d72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_uldivmod>:
 8000d78:	b953      	cbnz	r3, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7a:	b94a      	cbnz	r2, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bf08      	it	eq
 8000d80:	2800      	cmpeq	r0, #0
 8000d82:	bf1c      	itt	ne
 8000d84:	f04f 31ff 	movne.w	r1, #4294967295
 8000d88:	f04f 30ff 	movne.w	r0, #4294967295
 8000d8c:	f000 b9a6 	b.w	80010dc <__aeabi_idiv0>
 8000d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d98:	f000 f83c 	bl	8000e14 <__udivmoddi4>
 8000d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da4:	b004      	add	sp, #16
 8000da6:	4770      	bx	lr

08000da8 <__aeabi_d2lz>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	2200      	movs	r2, #0
 8000dac:	2300      	movs	r3, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	460d      	mov	r5, r1
 8000db2:	f7ff febb 	bl	8000b2c <__aeabi_dcmplt>
 8000db6:	b928      	cbnz	r0, 8000dc4 <__aeabi_d2lz+0x1c>
 8000db8:	4620      	mov	r0, r4
 8000dba:	4629      	mov	r1, r5
 8000dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc0:	f000 b80a 	b.w	8000dd8 <__aeabi_d2ulz>
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dca:	f000 f805 	bl	8000dd8 <__aeabi_d2ulz>
 8000dce:	4240      	negs	r0, r0
 8000dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd4:	bd38      	pop	{r3, r4, r5, pc}
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_d2ulz>:
 8000dd8:	b5d0      	push	{r4, r6, r7, lr}
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__aeabi_d2ulz+0x34>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4606      	mov	r6, r0
 8000de0:	460f      	mov	r7, r1
 8000de2:	f7ff fc31 	bl	8000648 <__aeabi_dmul>
 8000de6:	f7ff ff07 	bl	8000bf8 <__aeabi_d2uiz>
 8000dea:	4604      	mov	r4, r0
 8000dec:	f7ff fbb2 	bl	8000554 <__aeabi_ui2d>
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <__aeabi_d2ulz+0x38>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f7ff fc28 	bl	8000648 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	4639      	mov	r1, r7
 8000e00:	f7ff fa6a 	bl	80002d8 <__aeabi_dsub>
 8000e04:	f7ff fef8 	bl	8000bf8 <__aeabi_d2uiz>
 8000e08:	4621      	mov	r1, r4
 8000e0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e0c:	3df00000 	.word	0x3df00000
 8000e10:	41f00000 	.word	0x41f00000

08000e14 <__udivmoddi4>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	9e08      	ldr	r6, [sp, #32]
 8000e1a:	460d      	mov	r5, r1
 8000e1c:	4604      	mov	r4, r0
 8000e1e:	460f      	mov	r7, r1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d14a      	bne.n	8000eba <__udivmoddi4+0xa6>
 8000e24:	428a      	cmp	r2, r1
 8000e26:	4694      	mov	ip, r2
 8000e28:	d965      	bls.n	8000ef6 <__udivmoddi4+0xe2>
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	b143      	cbz	r3, 8000e42 <__udivmoddi4+0x2e>
 8000e30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e34:	f1c3 0220 	rsb	r2, r3, #32
 8000e38:	409f      	lsls	r7, r3
 8000e3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3e:	4317      	orrs	r7, r2
 8000e40:	409c      	lsls	r4, r3
 8000e42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e46:	fa1f f58c 	uxth.w	r5, ip
 8000e4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e4e:	0c22      	lsrs	r2, r4, #16
 8000e50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e58:	fb01 f005 	mul.w	r0, r1, r5
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	d90a      	bls.n	8000e76 <__udivmoddi4+0x62>
 8000e60:	eb1c 0202 	adds.w	r2, ip, r2
 8000e64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e68:	f080 811c 	bcs.w	80010a4 <__udivmoddi4+0x290>
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	f240 8119 	bls.w	80010a4 <__udivmoddi4+0x290>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4462      	add	r2, ip
 8000e76:	1a12      	subs	r2, r2, r0
 8000e78:	b2a4      	uxth	r4, r4
 8000e7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e86:	fb00 f505 	mul.w	r5, r0, r5
 8000e8a:	42a5      	cmp	r5, r4
 8000e8c:	d90a      	bls.n	8000ea4 <__udivmoddi4+0x90>
 8000e8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e96:	f080 8107 	bcs.w	80010a8 <__udivmoddi4+0x294>
 8000e9a:	42a5      	cmp	r5, r4
 8000e9c:	f240 8104 	bls.w	80010a8 <__udivmoddi4+0x294>
 8000ea0:	4464      	add	r4, ip
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	2100      	movs	r1, #0
 8000eac:	b11e      	cbz	r6, 8000eb6 <__udivmoddi4+0xa2>
 8000eae:	40dc      	lsrs	r4, r3
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0xbc>
 8000ebe:	2e00      	cmp	r6, #0
 8000ec0:	f000 80ed 	beq.w	800109e <__udivmoddi4+0x28a>
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed0:	fab3 f183 	clz	r1, r3
 8000ed4:	2900      	cmp	r1, #0
 8000ed6:	d149      	bne.n	8000f6c <__udivmoddi4+0x158>
 8000ed8:	42ab      	cmp	r3, r5
 8000eda:	d302      	bcc.n	8000ee2 <__udivmoddi4+0xce>
 8000edc:	4282      	cmp	r2, r0
 8000ede:	f200 80f8 	bhi.w	80010d2 <__udivmoddi4+0x2be>
 8000ee2:	1a84      	subs	r4, r0, r2
 8000ee4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ee8:	2001      	movs	r0, #1
 8000eea:	4617      	mov	r7, r2
 8000eec:	2e00      	cmp	r6, #0
 8000eee:	d0e2      	beq.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ef4:	e7df      	b.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef6:	b902      	cbnz	r2, 8000efa <__udivmoddi4+0xe6>
 8000ef8:	deff      	udf	#255	; 0xff
 8000efa:	fab2 f382 	clz	r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f040 8090 	bne.w	8001024 <__udivmoddi4+0x210>
 8000f04:	1a8a      	subs	r2, r1, r2
 8000f06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f0a:	fa1f fe8c 	uxth.w	lr, ip
 8000f0e:	2101      	movs	r1, #1
 8000f10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f14:	fb07 2015 	mls	r0, r7, r5, r2
 8000f18:	0c22      	lsrs	r2, r4, #16
 8000f1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f1e:	fb0e f005 	mul.w	r0, lr, r5
 8000f22:	4290      	cmp	r0, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x124>
 8000f26:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x122>
 8000f30:	4290      	cmp	r0, r2
 8000f32:	f200 80cb 	bhi.w	80010cc <__udivmoddi4+0x2b8>
 8000f36:	4645      	mov	r5, r8
 8000f38:	1a12      	subs	r2, r2, r0
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f40:	fb07 2210 	mls	r2, r7, r0, r2
 8000f44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f48:	fb0e fe00 	mul.w	lr, lr, r0
 8000f4c:	45a6      	cmp	lr, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x14e>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f58:	d202      	bcs.n	8000f60 <__udivmoddi4+0x14c>
 8000f5a:	45a6      	cmp	lr, r4
 8000f5c:	f200 80bb 	bhi.w	80010d6 <__udivmoddi4+0x2c2>
 8000f60:	4610      	mov	r0, r2
 8000f62:	eba4 040e 	sub.w	r4, r4, lr
 8000f66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f6a:	e79f      	b.n	8000eac <__udivmoddi4+0x98>
 8000f6c:	f1c1 0720 	rsb	r7, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f82:	40fd      	lsrs	r5, r7
 8000f84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f88:	4323      	orrs	r3, r4
 8000f8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f8e:	fa1f fe8c 	uxth.w	lr, ip
 8000f92:	fb09 5518 	mls	r5, r9, r8, r5
 8000f96:	0c1c      	lsrs	r4, r3, #16
 8000f98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000fa0:	42a5      	cmp	r5, r4
 8000fa2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fa6:	fa00 f001 	lsl.w	r0, r0, r1
 8000faa:	d90b      	bls.n	8000fc4 <__udivmoddi4+0x1b0>
 8000fac:	eb1c 0404 	adds.w	r4, ip, r4
 8000fb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fb4:	f080 8088 	bcs.w	80010c8 <__udivmoddi4+0x2b4>
 8000fb8:	42a5      	cmp	r5, r4
 8000fba:	f240 8085 	bls.w	80010c8 <__udivmoddi4+0x2b4>
 8000fbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000fc2:	4464      	add	r4, ip
 8000fc4:	1b64      	subs	r4, r4, r5
 8000fc6:	b29d      	uxth	r5, r3
 8000fc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000fd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fd8:	45a6      	cmp	lr, r4
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x1da>
 8000fdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fe4:	d26c      	bcs.n	80010c0 <__udivmoddi4+0x2ac>
 8000fe6:	45a6      	cmp	lr, r4
 8000fe8:	d96a      	bls.n	80010c0 <__udivmoddi4+0x2ac>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	4464      	add	r4, ip
 8000fee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ff2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ff6:	eba4 040e 	sub.w	r4, r4, lr
 8000ffa:	42ac      	cmp	r4, r5
 8000ffc:	46c8      	mov	r8, r9
 8000ffe:	46ae      	mov	lr, r5
 8001000:	d356      	bcc.n	80010b0 <__udivmoddi4+0x29c>
 8001002:	d053      	beq.n	80010ac <__udivmoddi4+0x298>
 8001004:	b156      	cbz	r6, 800101c <__udivmoddi4+0x208>
 8001006:	ebb0 0208 	subs.w	r2, r0, r8
 800100a:	eb64 040e 	sbc.w	r4, r4, lr
 800100e:	fa04 f707 	lsl.w	r7, r4, r7
 8001012:	40ca      	lsrs	r2, r1
 8001014:	40cc      	lsrs	r4, r1
 8001016:	4317      	orrs	r7, r2
 8001018:	e9c6 7400 	strd	r7, r4, [r6]
 800101c:	4618      	mov	r0, r3
 800101e:	2100      	movs	r1, #0
 8001020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001024:	f1c3 0120 	rsb	r1, r3, #32
 8001028:	fa02 fc03 	lsl.w	ip, r2, r3
 800102c:	fa20 f201 	lsr.w	r2, r0, r1
 8001030:	fa25 f101 	lsr.w	r1, r5, r1
 8001034:	409d      	lsls	r5, r3
 8001036:	432a      	orrs	r2, r5
 8001038:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103c:	fa1f fe8c 	uxth.w	lr, ip
 8001040:	fbb1 f0f7 	udiv	r0, r1, r7
 8001044:	fb07 1510 	mls	r5, r7, r0, r1
 8001048:	0c11      	lsrs	r1, r2, #16
 800104a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800104e:	fb00 f50e 	mul.w	r5, r0, lr
 8001052:	428d      	cmp	r5, r1
 8001054:	fa04 f403 	lsl.w	r4, r4, r3
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x258>
 800105a:	eb1c 0101 	adds.w	r1, ip, r1
 800105e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001062:	d22f      	bcs.n	80010c4 <__udivmoddi4+0x2b0>
 8001064:	428d      	cmp	r5, r1
 8001066:	d92d      	bls.n	80010c4 <__udivmoddi4+0x2b0>
 8001068:	3802      	subs	r0, #2
 800106a:	4461      	add	r1, ip
 800106c:	1b49      	subs	r1, r1, r5
 800106e:	b292      	uxth	r2, r2
 8001070:	fbb1 f5f7 	udiv	r5, r1, r7
 8001074:	fb07 1115 	mls	r1, r7, r5, r1
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	fb05 f10e 	mul.w	r1, r5, lr
 8001080:	4291      	cmp	r1, r2
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x282>
 8001084:	eb1c 0202 	adds.w	r2, ip, r2
 8001088:	f105 38ff 	add.w	r8, r5, #4294967295
 800108c:	d216      	bcs.n	80010bc <__udivmoddi4+0x2a8>
 800108e:	4291      	cmp	r1, r2
 8001090:	d914      	bls.n	80010bc <__udivmoddi4+0x2a8>
 8001092:	3d02      	subs	r5, #2
 8001094:	4462      	add	r2, ip
 8001096:	1a52      	subs	r2, r2, r1
 8001098:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800109c:	e738      	b.n	8000f10 <__udivmoddi4+0xfc>
 800109e:	4631      	mov	r1, r6
 80010a0:	4630      	mov	r0, r6
 80010a2:	e708      	b.n	8000eb6 <__udivmoddi4+0xa2>
 80010a4:	4639      	mov	r1, r7
 80010a6:	e6e6      	b.n	8000e76 <__udivmoddi4+0x62>
 80010a8:	4610      	mov	r0, r2
 80010aa:	e6fb      	b.n	8000ea4 <__udivmoddi4+0x90>
 80010ac:	4548      	cmp	r0, r9
 80010ae:	d2a9      	bcs.n	8001004 <__udivmoddi4+0x1f0>
 80010b0:	ebb9 0802 	subs.w	r8, r9, r2
 80010b4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010b8:	3b01      	subs	r3, #1
 80010ba:	e7a3      	b.n	8001004 <__udivmoddi4+0x1f0>
 80010bc:	4645      	mov	r5, r8
 80010be:	e7ea      	b.n	8001096 <__udivmoddi4+0x282>
 80010c0:	462b      	mov	r3, r5
 80010c2:	e794      	b.n	8000fee <__udivmoddi4+0x1da>
 80010c4:	4640      	mov	r0, r8
 80010c6:	e7d1      	b.n	800106c <__udivmoddi4+0x258>
 80010c8:	46d0      	mov	r8, sl
 80010ca:	e77b      	b.n	8000fc4 <__udivmoddi4+0x1b0>
 80010cc:	3d02      	subs	r5, #2
 80010ce:	4462      	add	r2, ip
 80010d0:	e732      	b.n	8000f38 <__udivmoddi4+0x124>
 80010d2:	4608      	mov	r0, r1
 80010d4:	e70a      	b.n	8000eec <__udivmoddi4+0xd8>
 80010d6:	4464      	add	r4, ip
 80010d8:	3802      	subs	r0, #2
 80010da:	e742      	b.n	8000f62 <__udivmoddi4+0x14e>

080010dc <__aeabi_idiv0>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <PIDController_Update>:
	// Reset lastTick
	pid->lastTick = 0;
}

float PIDController_Update(PIDController *pid, float reference, float measurement)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80010ec:	edc7 0a01 	vstr	s1, [r7, #4]
	// Check if enough time has passed for the T sample time
	bool run = false;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t currentTick = xTaskGetTickCount();
 80010f6:	f012 f841 	bl	801317c <xTaskGetTickCount>
 80010fa:	4603      	mov	r3, r0
 80010fc:	623b      	str	r3, [r7, #32]
	// First run after initialization
	if (pid->lastTick == 0)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d106      	bne.n	8001114 <PIDController_Update+0x34>
	{
		run = true;
 8001106:	2301      	movs	r3, #1
 8001108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pid->lastTick = currentTick;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6a3a      	ldr	r2, [r7, #32]
 8001110:	611a      	str	r2, [r3, #16]
 8001112:	e01a      	b.n	800114a <PIDController_Update+0x6a>
	}
	// If enough time has passed (Tick's unit is ms, while T's unit is s)
	else if (currentTick - pid->lastTick >= (pid->T * 1000))
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	6a3a      	ldr	r2, [r7, #32]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	ee07 3a90 	vmov	s15, r3
 8001120:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	edd3 7a03 	vldr	s15, [r3, #12]
 800112a:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80012d4 <PIDController_Update+0x1f4>
 800112e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001132:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113a:	db03      	blt.n	8001144 <PIDController_Update+0x64>
		run = true;
 800113c:	2301      	movs	r3, #1
 800113e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001142:	e002      	b.n	800114a <PIDController_Update+0x6a>
	// If it is too early
	else
		run = false;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	pid->lastTick = currentTick;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6a3a      	ldr	r2, [r7, #32]
 800114e:	611a      	str	r2, [r3, #16]

	// PID algorithm
	if (run)
 8001150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80b7 	beq.w	80012c8 <PIDController_Update+0x1e8>
	{
		//Error signal
		float error = reference - measurement;
 800115a:	ed97 7a02 	vldr	s14, [r7, #8]
 800115e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001166:	edc7 7a07 	vstr	s15, [r7, #28]

		// Proportional
		float proportional_result = pid->Kp * error;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	ed97 7a07 	vldr	s14, [r7, #28]
 8001174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001178:	edc7 7a06 	vstr	s15, [r7, #24]

		// Integral with Anti-windup
		if (!pid->antiWindup)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001182:	f083 0301 	eor.w	r3, r3, #1
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d019      	beq.n	80011c0 <PIDController_Update+0xe0>
		{
			pid->integrator = pid->integrator + error * pid->T;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	edd3 6a03 	vldr	s13, [r3, #12]
 8001198:	edd7 7a07 	vldr	s15, [r7, #28]
 800119c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			pid->integrator_result = pid->Ki * pid->integrator;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80011b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		}

		// Derivative
		pid->differentiator = -(measurement - pid->prev_measurement) / pid->T;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80011c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80011ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ce:	eef1 6a67 	vneg.f32	s13, s15
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	ed93 7a03 	vldr	s14, [r3, #12]
 80011d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		pid->differentiator_result = pid->Kd * pid->differentiator;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80011ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		// Store previous measurement for later use
		pid->prev_measurement = measurement;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	63da      	str	r2, [r3, #60]	; 0x3c
		// Store previous measurement for later use
		//pid->prev_measurement = measurement;


		// Compute output
		pid->out = proportional_result + pid->integrator_result + pid->differentiator_result;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001204:	edd7 7a06 	vldr	s15, [r7, #24]
 8001208:	ee37 7a27 	vadd.f32	s14, s14, s15
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		float pre_saturation_output = pid->out;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	617b      	str	r3, [r7, #20]

		// Saturating (clamping) the output
		if (pid->out > pid->limMax)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	edd3 7a08 	vldr	s15, [r3, #32]
 800122e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001236:	dd04      	ble.n	8001242 <PIDController_Update+0x162>
			pid->out = pid->limMax;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6a1a      	ldr	r2, [r3, #32]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	641a      	str	r2, [r3, #64]	; 0x40
 8001240:	e00e      	b.n	8001260 <PIDController_Update+0x180>
		else if (pid->out < pid->limMin)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	edd3 7a07 	vldr	s15, [r3, #28]
 800124e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	d503      	bpl.n	8001260 <PIDController_Update+0x180>
			pid->out = pid->limMin;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	69da      	ldr	r2, [r3, #28]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	641a      	str	r2, [r3, #64]	; 0x40

		// Anti-windup check
		// If clamping had an effect...
		if (pre_saturation_output != pid->out
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001266:	ed97 7a05 	vldr	s14, [r7, #20]
 800126a:	eeb4 7a67 	vcmp.f32	s14, s15
 800126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001272:	d020      	beq.n	80012b6 <PIDController_Update+0x1d6>
				// ...and if the integrator is trying to make saturation worse
				&& ((pre_saturation_output > 0 && error > 0) || (pre_saturation_output < 0 && error < 0)))
 8001274:	edd7 7a05 	vldr	s15, [r7, #20]
 8001278:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	dd06      	ble.n	8001290 <PIDController_Update+0x1b0>
 8001282:	edd7 7a07 	vldr	s15, [r7, #28]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	dc0d      	bgt.n	80012ac <PIDController_Update+0x1cc>
 8001290:	edd7 7a05 	vldr	s15, [r7, #20]
 8001294:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129c:	d50b      	bpl.n	80012b6 <PIDController_Update+0x1d6>
 800129e:	edd7 7a07 	vldr	s15, [r7, #28]
 80012a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012aa:	d504      	bpl.n	80012b6 <PIDController_Update+0x1d6>
			pid->antiWindup = true;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80012b4:	e003      	b.n	80012be <PIDController_Update+0x1de>
		else
			pid->antiWindup = false;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24


		return 0;
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	e7ff      	b.n	80012c8 <PIDController_Update+0x1e8>
	}
}
 80012c8:	eeb0 0a67 	vmov.f32	s0, s15
 80012cc:	3728      	adds	r7, #40	; 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	447a0000 	.word	0x447a0000

080012d8 <DoublePIDController_Init>:

void DoublePIDController_Init(DoublePIDController *pid)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	// Clear Anti-windup flag
	pid->outer.antiWindup = false;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	pid->inner.antiWindup = false;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// Clear controller variables
	pid->outer.integrator = 0.0f;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	66da      	str	r2, [r3, #108]	; 0x6c
	pid->inner.integrator = 0.0f;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
	pid->outer.differentiator  = 0.0f;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	679a      	str	r2, [r3, #120]	; 0x78
	pid->inner.differentiator  = 0.0f;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	635a      	str	r2, [r3, #52]	; 0x34

	pid->outer.prev_measurement = 0.0f;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	pid->inner.prev_measurement = 0.0f;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	63da      	str	r2, [r3, #60]	; 0x3c

	// Clear output
	pid->outer.out = 0.0f;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	pid->inner.out = 0.0f;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	641a      	str	r2, [r3, #64]	; 0x40
	// Calculate low-pass filter parameters
	//pid->tau = 5 * pid->T;
	//pid->alpha = ( 2*pid->T ) / ( 2*pid->tau + pid->T );

	// Reset lastTick
	pid->outer.lastTick = 0;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	655a      	str	r2, [r3, #84]	; 0x54
	pid->inner.lastTick = 0;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <DoublePIDController_Update>:

float DoublePIDController_Update(DoublePIDController *pid, float outer_reference, float outer_measurement, float inner_measurement)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	ed87 0a02 	vstr	s0, [r7, #8]
 8001358:	edc7 0a01 	vstr	s1, [r7, #4]
 800135c:	ed87 1a00 	vstr	s2, [r7]
	// Check if enough time has passed for the T sample time
	// I use the outer PID's properties for that
	bool run = false;
 8001360:	2300      	movs	r3, #0
 8001362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentTick = xTaskGetTickCount();
 8001366:	f011 ff09 	bl	801317c <xTaskGetTickCount>
 800136a:	4603      	mov	r3, r0
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
	// First run after initialization
	if (pid->outer.lastTick == 0)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001372:	2b00      	cmp	r3, #0
 8001374:	d106      	bne.n	8001384 <DoublePIDController_Update+0x38>
	{
		run = true;
 8001376:	2301      	movs	r3, #1
 8001378:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		pid->outer.lastTick = currentTick;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001380:	655a      	str	r2, [r3, #84]	; 0x54
 8001382:	e01a      	b.n	80013ba <DoublePIDController_Update+0x6e>
	}
	// If enough time has passed (Tick's unit is ms, while T's unit is s)
	else if (currentTick - pid->outer.lastTick >= (pid->outer.T * 1000))
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800139a:	eddf 6abe 	vldr	s13, [pc, #760]	; 8001694 <DoublePIDController_Update+0x348>
 800139e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	db03      	blt.n	80013b4 <DoublePIDController_Update+0x68>
		run = true;
 80013ac:	2301      	movs	r3, #1
 80013ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80013b2:	e002      	b.n	80013ba <DoublePIDController_Update+0x6e>
	// If it is too early
	else
		run = false;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	pid->outer.lastTick = currentTick;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013be:	655a      	str	r2, [r3, #84]	; 0x54

	// PID algorithm
	if (run)
 80013c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 8160 	beq.w	800168a <DoublePIDController_Update+0x33e>
	{
		// Outer PID Controller
		//Error signal
		float outer_error = outer_reference - outer_measurement;
 80013ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80013ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		// Proportional
		float outer_proportional_result = pid->outer.Kp * outer_error;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80013e0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e8:	edc7 7a08 	vstr	s15, [r7, #32]

		// Integral with Anti-windup
		if (!pid->outer.antiWindup)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80013f2:	f083 0301 	eor.w	r3, r3, #1
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d019      	beq.n	8001430 <DoublePIDController_Update+0xe4>
		{
			pid->outer.integrator = pid->outer.integrator + outer_error * pid->outer.T;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8001408:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800140c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			pid->outer.integrator_result = pid->outer.Ki * pid->outer.integrator;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		}

		// Derivative
		pid->outer.differentiator = -inner_measurement;
 8001430:	edd7 7a00 	vldr	s15, [r7]
 8001434:	eef1 7a67 	vneg.f32	s15, s15
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		pid->outer.differentiator_result = pid->outer.Kd * pid->outer.differentiator;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800144a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
		// Derivative with low-pass filter
		//pid->outer.differentiator = 0.4f * pid->outer.differentiator + 0.6f * (-inner_measurement);
		//pid->outer.differentiator_result = pid->outer.Kd * pid->outer.differentiator;

		// Compute output
		pid->outer.out = outer_proportional_result + pid->outer.integrator_result + pid->outer.differentiator_result;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800145a:	edd7 7a08 	vldr	s15, [r7, #32]
 800145e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		float outer_pre_saturation_output = pid->outer.out;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001478:	61fb      	str	r3, [r7, #28]

		// Saturating (clamping) the output
		if (pid->outer.out > pid->outer.limMax)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	dd05      	ble.n	800149c <DoublePIDController_Update+0x150>
			pid->outer.out = pid->outer.limMax;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800149a:	e00f      	b.n	80014bc <DoublePIDController_Update+0x170>
		else if (pid->outer.out < pid->outer.limMin)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80014a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b0:	d504      	bpl.n	80014bc <DoublePIDController_Update+0x170>
			pid->outer.out = pid->outer.limMin;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

		// Anti-windup check
		// If clamping had an effect...
		if (outer_pre_saturation_output != pid->outer.out
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80014c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80014c6:	eeb4 7a67 	vcmp.f32	s14, s15
 80014ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ce:	d020      	beq.n	8001512 <DoublePIDController_Update+0x1c6>
				// ...and if the integrator is trying to make saturation worse
				&& ((outer_pre_saturation_output > 0 && outer_error > 0) || (outer_pre_saturation_output < 0 && outer_error < 0)))
 80014d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80014d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	dd06      	ble.n	80014ec <DoublePIDController_Update+0x1a0>
 80014de:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ea:	dc0d      	bgt.n	8001508 <DoublePIDController_Update+0x1bc>
 80014ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80014f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f8:	d50b      	bpl.n	8001512 <DoublePIDController_Update+0x1c6>
 80014fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001506:	d504      	bpl.n	8001512 <DoublePIDController_Update+0x1c6>
			pid->outer.antiWindup = true;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001510:	e003      	b.n	800151a <DoublePIDController_Update+0x1ce>
		else
			pid->outer.antiWindup = false;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68



		// Inner PID Controller
		//Error signal
		float inner_error = pid->outer.out - inner_measurement;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8001520:	edd7 7a00 	vldr	s15, [r7]
 8001524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001528:	edc7 7a06 	vstr	s15, [r7, #24]

		// Proportional
		float inner_proportional_result = pid->inner.Kp * inner_error;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	ed97 7a06 	vldr	s14, [r7, #24]
 8001536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153a:	edc7 7a05 	vstr	s15, [r7, #20]

		// Integral with Anti-windup
		if (!pid->inner.antiWindup)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001544:	f083 0301 	eor.w	r3, r3, #1
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d019      	beq.n	8001582 <DoublePIDController_Update+0x236>
		{
			pid->inner.integrator = pid->inner.integrator + inner_error * pid->inner.T;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	edd3 6a03 	vldr	s13, [r3, #12]
 800155a:	edd7 7a06 	vldr	s15, [r7, #24]
 800155e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			pid->inner.integrator_result = pid->inner.Ki * pid->inner.integrator;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		}

		// Derivative
		pid->inner.differentiator =-(inner_measurement - pid->inner.prev_measurement) / pid->inner.T;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001588:	ed97 7a00 	vldr	s14, [r7]
 800158c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001590:	eef1 6a67 	vneg.f32	s13, s15
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	ed93 7a03 	vldr	s14, [r3, #12]
 800159a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		pid->inner.differentiator_result = pid->inner.Kd * pid->inner.differentiator;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80015b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		// Store previous measurement for later use
		pid->inner.prev_measurement = inner_measurement;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	63da      	str	r2, [r3, #60]	; 0x3c
		//pid->inner.differentiator_result = pid->inner.Kd * pid->inner.differentiator;
		// Store previous measurement for later use
		//pid->inner.prev_measurement = inner_measurement;

		// Compute output
		pid->inner.out = inner_proportional_result + pid->inner.integrator_result + pid->inner.differentiator_result;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80015c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80015d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		float inner_pre_saturation_output = pid->inner.out;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	613b      	str	r3, [r7, #16]

		// Saturating (clamping) the output
		if (pid->inner.out > pid->inner.limMax)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	edd3 7a08 	vldr	s15, [r3, #32]
 80015f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f8:	dd04      	ble.n	8001604 <DoublePIDController_Update+0x2b8>
			pid->inner.out = pid->inner.limMax;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6a1a      	ldr	r2, [r3, #32]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	641a      	str	r2, [r3, #64]	; 0x40
 8001602:	e00e      	b.n	8001622 <DoublePIDController_Update+0x2d6>
		else if (pid->inner.out < pid->inner.limMin)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001610:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001618:	d503      	bpl.n	8001622 <DoublePIDController_Update+0x2d6>
			pid->inner.out = pid->inner.limMin;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	69da      	ldr	r2, [r3, #28]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	641a      	str	r2, [r3, #64]	; 0x40

		// Anti-windup check
		// If clamping had an effect...
		if (inner_pre_saturation_output != pid->inner.out
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001628:	ed97 7a04 	vldr	s14, [r7, #16]
 800162c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001634:	d020      	beq.n	8001678 <DoublePIDController_Update+0x32c>
				// ...and if the integrator is trying to make saturation worse
				&& ((inner_pre_saturation_output > 0 && inner_error > 0) || (inner_pre_saturation_output < 0 && inner_error < 0)))
 8001636:	edd7 7a04 	vldr	s15, [r7, #16]
 800163a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800163e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001642:	dd06      	ble.n	8001652 <DoublePIDController_Update+0x306>
 8001644:	edd7 7a06 	vldr	s15, [r7, #24]
 8001648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001650:	dc0d      	bgt.n	800166e <DoublePIDController_Update+0x322>
 8001652:	edd7 7a04 	vldr	s15, [r7, #16]
 8001656:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800165a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165e:	d50b      	bpl.n	8001678 <DoublePIDController_Update+0x32c>
 8001660:	edd7 7a06 	vldr	s15, [r7, #24]
 8001664:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166c:	d504      	bpl.n	8001678 <DoublePIDController_Update+0x32c>
			pid->inner.antiWindup = true;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001676:	e003      	b.n	8001680 <DoublePIDController_Update+0x334>
		else
			pid->inner.antiWindup = false;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24


		return 0;
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	ee07 3a90 	vmov	s15, r3
 8001688:	e7ff      	b.n	800168a <DoublePIDController_Update+0x33e>
	}
}
 800168a:	eeb0 0a67 	vmov.f32	s0, s15
 800168e:	3730      	adds	r7, #48	; 0x30
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	447a0000 	.word	0x447a0000

08001698 <Log>:
#include "string.h"

extern UART_HandleTypeDef huart3;

void Log(const char* msg)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b09c      	sub	sp, #112	; 0x70
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	if (DebugIsOn)
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <Log+0x44>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d014      	beq.n	80016d2 <Log+0x3a>
	{
		char str[100];

		sprintf(str, "%s\r\n", msg);
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	490c      	ldr	r1, [pc, #48]	; (80016e0 <Log+0x48>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f013 fe13 	bl	80152dc <siprintf>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe fe00 	bl	80002c0 <strlen>
 80016c0:	4603      	mov	r3, r0
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	f107 010c 	add.w	r1, r7, #12
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
 80016cc:	4805      	ldr	r0, [pc, #20]	; (80016e4 <Log+0x4c>)
 80016ce:	f00e fc89 	bl	800ffe4 <HAL_UART_Transmit>
	}
}
 80016d2:	bf00      	nop
 80016d4:	3770      	adds	r7, #112	; 0x70
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000020c 	.word	0x2000020c
 80016e0:	0801ba78 	.word	0x0801ba78
 80016e4:	20000c40 	.word	0x20000c40

080016e8 <FloatToUint8s>:

volatile uint8_t Spi1Buffer[64] = { 0 };
volatile uint8_t Spi1ReceivedData[64] = { 0 };

void FloatToUint8s(float* src, uint8_t* array, int position)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
	memcpy(array+position, src, sizeof(float));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	4413      	add	r3, r2
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	601a      	str	r2, [r3, #0]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <FloatFromUint8s>:

void FloatFromUint8s(uint8_t* array, int position, float* dest)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  memcpy(dest, array+position, sizeof(float));
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	4413      	add	r3, r2
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	601a      	str	r2, [r3, #0]
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <Uint16ToUint8s>:

void Uint16ToUint8s(uint16_t* src, uint8_t* array, int position)
{
 8001732:	b480      	push	{r7}
 8001734:	b085      	sub	sp, #20
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
	memcpy(array+position, src, sizeof(uint16_t));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	4413      	add	r3, r2
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	8812      	ldrh	r2, [r2, #0]
 8001748:	b292      	uxth	r2, r2
 800174a:	801a      	strh	r2, [r3, #0]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <Int16ToUint8s>:

void Int16ToUint8s(int16_t* src, uint8_t* array, int position)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
	memcpy(array+position, src, sizeof(int16_t));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	4413      	add	r3, r2
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	8812      	ldrh	r2, [r2, #0]
 800176e:	b292      	uxth	r2, r2
 8001770:	801a      	strh	r2, [r3, #0]
}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <LPF_Init>:
#include "LPF.h"

void LPF_Init(LPF *lpf)
{
 800177e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	lpf->prevU = 0.0;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
	lpf->prevY = 0.0;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	605a      	str	r2, [r3, #4]

	lpf->tau = 1.0 / lpf->f_cutoff;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	ed93 7a03 	vldr	s14, [r3, #12]
 800179e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	edc3 7a04 	vstr	s15, [r3, #16]

	lpf->alpha = lpf->T / (2.0 * lpf->tau + lpf->T);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fef1 	bl	8000598 <__aeabi_f2d>
 80017b6:	4604      	mov	r4, r0
 80017b8:	460d      	mov	r5, r1
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe feea 	bl	8000598 <__aeabi_f2d>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	f7fe fd88 	bl	80002dc <__adddf3>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4690      	mov	r8, r2
 80017d2:	4699      	mov	r9, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fedd 	bl	8000598 <__aeabi_f2d>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4640      	mov	r0, r8
 80017e4:	4649      	mov	r1, r9
 80017e6:	f7fe fd79 	bl	80002dc <__adddf3>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4620      	mov	r0, r4
 80017f0:	4629      	mov	r1, r5
 80017f2:	f7ff f853 	bl	800089c <__aeabi_ddiv>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	f7ff fa1b 	bl	8000c38 <__aeabi_d2f>
 8001802:	4602      	mov	r2, r0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	615a      	str	r2, [r3, #20]
	lpf->beta = (2.0 * lpf->tau - lpf->T) / (2.0 * lpf->tau + lpf->T);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fec3 	bl	8000598 <__aeabi_f2d>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	f7fe fd61 	bl	80002dc <__adddf3>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4614      	mov	r4, r2
 8001820:	461d      	mov	r5, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe feb6 	bl	8000598 <__aeabi_f2d>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4620      	mov	r0, r4
 8001832:	4629      	mov	r1, r5
 8001834:	f7fe fd50 	bl	80002d8 <__aeabi_dsub>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4614      	mov	r4, r2
 800183e:	461d      	mov	r5, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fea7 	bl	8000598 <__aeabi_f2d>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	f7fe fd45 	bl	80002dc <__adddf3>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4690      	mov	r8, r2
 8001858:	4699      	mov	r9, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fe9a 	bl	8000598 <__aeabi_f2d>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4640      	mov	r0, r8
 800186a:	4649      	mov	r1, r9
 800186c:	f7fe fd36 	bl	80002dc <__adddf3>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4620      	mov	r0, r4
 8001876:	4629      	mov	r1, r5
 8001878:	f7ff f810 	bl	800089c <__aeabi_ddiv>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	f7ff f9d8 	bl	8000c38 <__aeabi_d2f>
 8001888:	4602      	mov	r2, r0
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	619a      	str	r2, [r3, #24]
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001898 <LPF_Calculate>:

float LPF_Calculate(LPF *lpf, float U)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	ed87 0a00 	vstr	s0, [r7]
	float Y = lpf->alpha * (U + lpf->prevU) + lpf->beta * lpf->prevY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	ed93 7a05 	vldr	s14, [r3, #20]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	edd3 6a00 	vldr	s13, [r3]
 80018b0:	edd7 7a00 	vldr	s15, [r7]
 80018b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	edd3 6a06 	vldr	s13, [r3, #24]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80018c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d0:	edc7 7a03 	vstr	s15, [r7, #12]

	lpf->prevU = U;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	601a      	str	r2, [r3, #0]
	lpf->prevY = Y;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	605a      	str	r2, [r3, #4]

	return Y;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	ee07 3a90 	vmov	s15, r3
}
 80018e6:	eeb0 0a67 	vmov.f32	s0, s15
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <TaskController>:
extern osMutexId ImuMutexHandle;
extern osMutexId RemoteDataMutexHandle;
extern osMutexId ControllerMutexHandle;

void TaskController(void const *argument)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 80018fc:	23c8      	movs	r3, #200	; 0xc8
 80018fe:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8001900:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	613b      	str	r3, [r7, #16]
//	PID_Pitch_AngVel.limMax = 500; // Motor control unit
//	PIDController_Init(&PID_Pitch_AngVel);

	// Roll
	// Outer
	DPID_Roll.outer.Kp = 10;
 800190c:	4b81      	ldr	r3, [pc, #516]	; (8001b14 <TaskController+0x220>)
 800190e:	4a82      	ldr	r2, [pc, #520]	; (8001b18 <TaskController+0x224>)
 8001910:	645a      	str	r2, [r3, #68]	; 0x44
	DPID_Roll.outer.Ki = 5;
 8001912:	4b80      	ldr	r3, [pc, #512]	; (8001b14 <TaskController+0x220>)
 8001914:	4a81      	ldr	r2, [pc, #516]	; (8001b1c <TaskController+0x228>)
 8001916:	649a      	str	r2, [r3, #72]	; 0x48
	DPID_Roll.outer.Kd = 0.15;
 8001918:	4b7e      	ldr	r3, [pc, #504]	; (8001b14 <TaskController+0x220>)
 800191a:	4a81      	ldr	r2, [pc, #516]	; (8001b20 <TaskController+0x22c>)
 800191c:	64da      	str	r2, [r3, #76]	; 0x4c
	DPID_Roll.outer.T = 0.005;
 800191e:	4b7d      	ldr	r3, [pc, #500]	; (8001b14 <TaskController+0x220>)
 8001920:	4a80      	ldr	r2, [pc, #512]	; (8001b24 <TaskController+0x230>)
 8001922:	651a      	str	r2, [r3, #80]	; 0x50
	DPID_Roll.outer.limMin = -50;
 8001924:	4b7b      	ldr	r3, [pc, #492]	; (8001b14 <TaskController+0x220>)
 8001926:	4a80      	ldr	r2, [pc, #512]	; (8001b28 <TaskController+0x234>)
 8001928:	661a      	str	r2, [r3, #96]	; 0x60
	DPID_Roll.outer.limMax = 50;
 800192a:	4b7a      	ldr	r3, [pc, #488]	; (8001b14 <TaskController+0x220>)
 800192c:	4a7f      	ldr	r2, [pc, #508]	; (8001b2c <TaskController+0x238>)
 800192e:	665a      	str	r2, [r3, #100]	; 0x64
	// Inner
	DPID_Roll.inner.Kp = 1.5;
 8001930:	4b78      	ldr	r3, [pc, #480]	; (8001b14 <TaskController+0x220>)
 8001932:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001936:	601a      	str	r2, [r3, #0]
	DPID_Roll.inner.Ki = 0;
 8001938:	4b76      	ldr	r3, [pc, #472]	; (8001b14 <TaskController+0x220>)
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	605a      	str	r2, [r3, #4]
	DPID_Roll.inner.Kd = 0.1;
 8001940:	4b74      	ldr	r3, [pc, #464]	; (8001b14 <TaskController+0x220>)
 8001942:	4a7b      	ldr	r2, [pc, #492]	; (8001b30 <TaskController+0x23c>)
 8001944:	609a      	str	r2, [r3, #8]
	DPID_Roll.inner.T = 0.005;
 8001946:	4b73      	ldr	r3, [pc, #460]	; (8001b14 <TaskController+0x220>)
 8001948:	4a76      	ldr	r2, [pc, #472]	; (8001b24 <TaskController+0x230>)
 800194a:	60da      	str	r2, [r3, #12]
	DPID_Roll.inner.limMin = -500;
 800194c:	4b71      	ldr	r3, [pc, #452]	; (8001b14 <TaskController+0x220>)
 800194e:	4a79      	ldr	r2, [pc, #484]	; (8001b34 <TaskController+0x240>)
 8001950:	61da      	str	r2, [r3, #28]
	DPID_Roll.inner.limMax = 500;
 8001952:	4b70      	ldr	r3, [pc, #448]	; (8001b14 <TaskController+0x220>)
 8001954:	4a78      	ldr	r2, [pc, #480]	; (8001b38 <TaskController+0x244>)
 8001956:	621a      	str	r2, [r3, #32]
	// Init
	DoublePIDController_Init(&DPID_Roll);
 8001958:	486e      	ldr	r0, [pc, #440]	; (8001b14 <TaskController+0x220>)
 800195a:	f7ff fcbd 	bl	80012d8 <DoublePIDController_Init>

	// Pitch
	// Outer
	DPID_Pitch.outer.Kp = 0;
 800195e:	4b77      	ldr	r3, [pc, #476]	; (8001b3c <TaskController+0x248>)
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	645a      	str	r2, [r3, #68]	; 0x44
	DPID_Pitch.outer.Ki = 0;
 8001966:	4b75      	ldr	r3, [pc, #468]	; (8001b3c <TaskController+0x248>)
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	649a      	str	r2, [r3, #72]	; 0x48
	DPID_Pitch.outer.Kd = 0;
 800196e:	4b73      	ldr	r3, [pc, #460]	; (8001b3c <TaskController+0x248>)
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	64da      	str	r2, [r3, #76]	; 0x4c
	DPID_Pitch.outer.T = 0.005;
 8001976:	4b71      	ldr	r3, [pc, #452]	; (8001b3c <TaskController+0x248>)
 8001978:	4a6a      	ldr	r2, [pc, #424]	; (8001b24 <TaskController+0x230>)
 800197a:	651a      	str	r2, [r3, #80]	; 0x50
	DPID_Pitch.outer.limMin = -50;
 800197c:	4b6f      	ldr	r3, [pc, #444]	; (8001b3c <TaskController+0x248>)
 800197e:	4a6a      	ldr	r2, [pc, #424]	; (8001b28 <TaskController+0x234>)
 8001980:	661a      	str	r2, [r3, #96]	; 0x60
	DPID_Pitch.outer.limMax = 50;
 8001982:	4b6e      	ldr	r3, [pc, #440]	; (8001b3c <TaskController+0x248>)
 8001984:	4a69      	ldr	r2, [pc, #420]	; (8001b2c <TaskController+0x238>)
 8001986:	665a      	str	r2, [r3, #100]	; 0x64
	// Inner
	DPID_Pitch.inner.Kp = 0;
 8001988:	4b6c      	ldr	r3, [pc, #432]	; (8001b3c <TaskController+0x248>)
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
	DPID_Pitch.inner.Ki = 0;
 8001990:	4b6a      	ldr	r3, [pc, #424]	; (8001b3c <TaskController+0x248>)
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	605a      	str	r2, [r3, #4]
	DPID_Pitch.inner.Kd = 0;
 8001998:	4b68      	ldr	r3, [pc, #416]	; (8001b3c <TaskController+0x248>)
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
	DPID_Pitch.inner.T = 0.005;
 80019a0:	4b66      	ldr	r3, [pc, #408]	; (8001b3c <TaskController+0x248>)
 80019a2:	4a60      	ldr	r2, [pc, #384]	; (8001b24 <TaskController+0x230>)
 80019a4:	60da      	str	r2, [r3, #12]
	DPID_Pitch.inner.limMin = -500;
 80019a6:	4b65      	ldr	r3, [pc, #404]	; (8001b3c <TaskController+0x248>)
 80019a8:	4a62      	ldr	r2, [pc, #392]	; (8001b34 <TaskController+0x240>)
 80019aa:	61da      	str	r2, [r3, #28]
	DPID_Pitch.inner.limMax = 500;
 80019ac:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <TaskController+0x248>)
 80019ae:	4a62      	ldr	r2, [pc, #392]	; (8001b38 <TaskController+0x244>)
 80019b0:	621a      	str	r2, [r3, #32]
	// Init
	DoublePIDController_Init(&DPID_Pitch);
 80019b2:	4862      	ldr	r0, [pc, #392]	; (8001b3c <TaskController+0x248>)
 80019b4:	f7ff fc90 	bl	80012d8 <DoublePIDController_Init>


	xLastWakeTime = xTaskGetTickCount();
 80019b8:	f011 fbe0 	bl	801317c <xTaskGetTickCount>
 80019bc:	4603      	mov	r3, r0
 80019be:	60bb      	str	r3, [r7, #8]
	// Infinite loop
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	6939      	ldr	r1, [r7, #16]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f011 fa04 	bl	8012dd4 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 80019cc:	f011 fbd6 	bl	801317c <xTaskGetTickCount>
 80019d0:	60f8      	str	r0, [r7, #12]

		if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK
 80019d2:	4b5b      	ldr	r3, [pc, #364]	; (8001b40 <TaskController+0x24c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f04f 31ff 	mov.w	r1, #4294967295
 80019da:	4618      	mov	r0, r3
 80019dc:	f010 f836 	bl	8011a4c <osMutexWait>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f040 8134 	bne.w	8001c50 <TaskController+0x35c>
				&& osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK
 80019e8:	4b56      	ldr	r3, [pc, #344]	; (8001b44 <TaskController+0x250>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f04f 31ff 	mov.w	r1, #4294967295
 80019f0:	4618      	mov	r0, r3
 80019f2:	f010 f82b 	bl	8011a4c <osMutexWait>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f040 8129 	bne.w	8001c50 <TaskController+0x35c>
				&& osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 80019fe:	4b52      	ldr	r3, [pc, #328]	; (8001b48 <TaskController+0x254>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f04f 31ff 	mov.w	r1, #4294967295
 8001a06:	4618      	mov	r0, r3
 8001a08:	f010 f820 	bl	8011a4c <osMutexWait>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f040 811e 	bne.w	8001c50 <TaskController+0x35c>
		{
			if (SWC > 490)
 8001a14:	4b4d      	ldr	r3, [pc, #308]	; (8001b4c <TaskController+0x258>)
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8001a1c:	d90f      	bls.n	8001a3e <TaskController+0x14a>
//				PID_Roll_Attitude.integrator = 0;
//				PID_Roll_AngVel.integrator = 0;
//				PID_Pitch_Attitude.integrator = 0;
//				PID_Pitch_AngVel.integrator = 0;

				DPID_Roll.outer.integrator = 0.0;
 8001a1e:	4b3d      	ldr	r3, [pc, #244]	; (8001b14 <TaskController+0x220>)
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	66da      	str	r2, [r3, #108]	; 0x6c
				DPID_Roll.inner.integrator = 0.0;
 8001a26:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <TaskController+0x220>)
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	629a      	str	r2, [r3, #40]	; 0x28
				DPID_Pitch.outer.integrator = 0.0;
 8001a2e:	4b43      	ldr	r3, [pc, #268]	; (8001b3c <TaskController+0x248>)
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	66da      	str	r2, [r3, #108]	; 0x6c
				DPID_Pitch.inner.integrator = 0.0;
 8001a36:	4b41      	ldr	r3, [pc, #260]	; (8001b3c <TaskController+0x248>)
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	629a      	str	r2, [r3, #40]	; 0x28
			}

			if (Tune_single_true_double_false)
 8001a3e:	4b44      	ldr	r3, [pc, #272]	; (8001b50 <TaskController+0x25c>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 8098 	beq.w	8001b78 <TaskController+0x284>
			{
				DPID_Roll.outer.Kd = VRA / 200.0;
 8001a48:	4b42      	ldr	r3, [pc, #264]	; (8001b54 <TaskController+0x260>)
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fd91 	bl	8000574 <__aeabi_i2d>
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	4b40      	ldr	r3, [pc, #256]	; (8001b58 <TaskController+0x264>)
 8001a58:	f7fe ff20 	bl	800089c <__aeabi_ddiv>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	f7ff f8e8 	bl	8000c38 <__aeabi_d2f>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4a2a      	ldr	r2, [pc, #168]	; (8001b14 <TaskController+0x220>)
 8001a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
				DPID_Roll.inner.Kd = VRB / 1000.0;
 8001a6e:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <TaskController+0x268>)
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fd7e 	bl	8000574 <__aeabi_i2d>
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	4b38      	ldr	r3, [pc, #224]	; (8001b60 <TaskController+0x26c>)
 8001a7e:	f7fe ff0d 	bl	800089c <__aeabi_ddiv>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f7ff f8d5 	bl	8000c38 <__aeabi_d2f>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4a20      	ldr	r2, [pc, #128]	; (8001b14 <TaskController+0x220>)
 8001a92:	6093      	str	r3, [r2, #8]

				// Roll
				PIDController_Update(&DPID_Roll.inner, (Roll_in / 10.0f), GyroData[0]);
 8001a94:	4b33      	ldr	r3, [pc, #204]	; (8001b64 <TaskController+0x270>)
 8001a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001aa6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001aaa:	4b2f      	ldr	r3, [pc, #188]	; (8001b68 <TaskController+0x274>)
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	eef0 0a67 	vmov.f32	s1, s15
 8001ab4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab8:	4816      	ldr	r0, [pc, #88]	; (8001b14 <TaskController+0x220>)
 8001aba:	f7ff fb11 	bl	80010e0 <PIDController_Update>
				Roll_controlled = (int16_t)(DPID_Roll.inner.out);
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <TaskController+0x220>)
 8001ac0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ac8:	ee17 3a90 	vmov	r3, s15
 8001acc:	b21a      	sxth	r2, r3
 8001ace:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <TaskController+0x278>)
 8001ad0:	801a      	strh	r2, [r3, #0]

				// Pitch
				PIDController_Update(&DPID_Pitch.inner, (Pitch_in / 10.0f), GyroData[1]);
 8001ad2:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <TaskController+0x27c>)
 8001ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad8:	ee07 3a90 	vmov	s15, r3
 8001adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001ae4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <TaskController+0x274>)
 8001aea:	edd3 7a01 	vldr	s15, [r3, #4]
 8001aee:	eef0 0a67 	vmov.f32	s1, s15
 8001af2:	eeb0 0a47 	vmov.f32	s0, s14
 8001af6:	4811      	ldr	r0, [pc, #68]	; (8001b3c <TaskController+0x248>)
 8001af8:	f7ff faf2 	bl	80010e0 <PIDController_Update>
				Pitch_controlled = (int16_t)(DPID_Pitch.inner.out);
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <TaskController+0x248>)
 8001afe:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001b02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b06:	ee17 3a90 	vmov	r3, s15
 8001b0a:	b21a      	sxth	r2, r3
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <TaskController+0x280>)
 8001b0e:	801a      	strh	r2, [r3, #0]
 8001b10:	e09e      	b.n	8001c50 <TaskController+0x35c>
 8001b12:	bf00      	nop
 8001b14:	20000218 	.word	0x20000218
 8001b18:	41200000 	.word	0x41200000
 8001b1c:	40a00000 	.word	0x40a00000
 8001b20:	3e19999a 	.word	0x3e19999a
 8001b24:	3ba3d70a 	.word	0x3ba3d70a
 8001b28:	c2480000 	.word	0xc2480000
 8001b2c:	42480000 	.word	0x42480000
 8001b30:	3dcccccd 	.word	0x3dcccccd
 8001b34:	c3fa0000 	.word	0xc3fa0000
 8001b38:	43fa0000 	.word	0x43fa0000
 8001b3c:	200002a0 	.word	0x200002a0
 8001b40:	20000d5c 	.word	0x20000d5c
 8001b44:	20000d48 	.word	0x20000d48
 8001b48:	20000d4c 	.word	0x20000d4c
 8001b4c:	20000338 	.word	0x20000338
 8001b50:	2000020d 	.word	0x2000020d
 8001b54:	2000033c 	.word	0x2000033c
 8001b58:	40690000 	.word	0x40690000
 8001b5c:	2000033e 	.word	0x2000033e
 8001b60:	408f4000 	.word	0x408f4000
 8001b64:	2000032a 	.word	0x2000032a
 8001b68:	200003c4 	.word	0x200003c4
 8001b6c:	2000032c 	.word	0x2000032c
 8001b70:	2000032e 	.word	0x2000032e
 8001b74:	20000330 	.word	0x20000330
			}
			else
			{
				DPID_Roll.outer.Kd = VRA / 200.0;
 8001b78:	4b3d      	ldr	r3, [pc, #244]	; (8001c70 <TaskController+0x37c>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fcf9 	bl	8000574 <__aeabi_i2d>
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	4b3b      	ldr	r3, [pc, #236]	; (8001c74 <TaskController+0x380>)
 8001b88:	f7fe fe88 	bl	800089c <__aeabi_ddiv>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	f7ff f850 	bl	8000c38 <__aeabi_d2f>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4a37      	ldr	r2, [pc, #220]	; (8001c78 <TaskController+0x384>)
 8001b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
				DPID_Roll.inner.Kd = VRB / 1000.0;
 8001b9e:	4b37      	ldr	r3, [pc, #220]	; (8001c7c <TaskController+0x388>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fce6 	bl	8000574 <__aeabi_i2d>
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <TaskController+0x38c>)
 8001bae:	f7fe fe75 	bl	800089c <__aeabi_ddiv>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f7ff f83d 	bl	8000c38 <__aeabi_d2f>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	4a2d      	ldr	r2, [pc, #180]	; (8001c78 <TaskController+0x384>)
 8001bc2:	6093      	str	r3, [r2, #8]

				// Roll
				//DoublePIDController_Update(&DPID_Roll, (Roll_in / 25.0f), Fusion_output.angle.roll, GyroData[0]);
				DoublePIDController_Update(&DPID_Roll, (SWD / 70.0f), Fusion_output.angle.roll, GyroData[0]);
 8001bc4:	4b2f      	ldr	r3, [pc, #188]	; (8001c84 <TaskController+0x390>)
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	ee07 3a90 	vmov	s15, r3
 8001bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd0:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001c88 <TaskController+0x394>
 8001bd4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bd8:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <TaskController+0x398>)
 8001bda:	edd3 7a00 	vldr	s15, [r3]
 8001bde:	4b2c      	ldr	r3, [pc, #176]	; (8001c90 <TaskController+0x39c>)
 8001be0:	edd3 6a00 	vldr	s13, [r3]
 8001be4:	eeb0 1a66 	vmov.f32	s2, s13
 8001be8:	eef0 0a67 	vmov.f32	s1, s15
 8001bec:	eeb0 0a47 	vmov.f32	s0, s14
 8001bf0:	4821      	ldr	r0, [pc, #132]	; (8001c78 <TaskController+0x384>)
 8001bf2:	f7ff fbab 	bl	800134c <DoublePIDController_Update>
				Roll_controlled = (int16_t)(DPID_Roll.inner.out);
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <TaskController+0x384>)
 8001bf8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001bfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c00:	ee17 3a90 	vmov	r3, s15
 8001c04:	b21a      	sxth	r2, r3
 8001c06:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <TaskController+0x3a0>)
 8001c08:	801a      	strh	r2, [r3, #0]

				// Pitch
				//DoublePIDController_Update(&DPID_Pitch, (Pitch_in / 25.0f), Fusion_output.angle.pitch, GyroData[1]);
				DoublePIDController_Update(&DPID_Pitch, (SWD / 50.0f), Fusion_output.angle.pitch, GyroData[1]);
 8001c0a:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <TaskController+0x390>)
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	ee07 3a90 	vmov	s15, r3
 8001c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c16:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001c98 <TaskController+0x3a4>
 8001c1a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <TaskController+0x398>)
 8001c20:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c24:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <TaskController+0x39c>)
 8001c26:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c2a:	eeb0 1a66 	vmov.f32	s2, s13
 8001c2e:	eef0 0a67 	vmov.f32	s1, s15
 8001c32:	eeb0 0a47 	vmov.f32	s0, s14
 8001c36:	4819      	ldr	r0, [pc, #100]	; (8001c9c <TaskController+0x3a8>)
 8001c38:	f7ff fb88 	bl	800134c <DoublePIDController_Update>
				Pitch_controlled = (int16_t)(DPID_Pitch.inner.out);
 8001c3c:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <TaskController+0x3a8>)
 8001c3e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001c42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c46:	ee17 3a90 	vmov	r3, s15
 8001c4a:	b21a      	sxth	r2, r3
 8001c4c:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <TaskController+0x3ac>)
 8001c4e:	801a      	strh	r2, [r3, #0]
//			//sprintf(str, "%1.2f\r\n", PID_Roll_AngVel.out);
//			//sprintf(str, "%d\r\n", Roll_controlled);
//			sprintf(str, "%1.2f, %d\r\n", PID_Roll_AngVel.out, Roll_controlled);
//			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}
		osMutexRelease(ControllerMutexHandle);
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <TaskController+0x3b0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f00f ff47 	bl	8011ae8 <osMutexRelease>
		osMutexRelease(RemoteDataMutexHandle);
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <TaskController+0x3b4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f00f ff42 	bl	8011ae8 <osMutexRelease>
		osMutexRelease(ImuMutexHandle);
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <TaskController+0x3b8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f00f ff3d 	bl	8011ae8 <osMutexRelease>
	{
 8001c6e:	e6a7      	b.n	80019c0 <TaskController+0xcc>
 8001c70:	2000033c 	.word	0x2000033c
 8001c74:	40690000 	.word	0x40690000
 8001c78:	20000218 	.word	0x20000218
 8001c7c:	2000033e 	.word	0x2000033e
 8001c80:	408f4000 	.word	0x408f4000
 8001c84:	2000033a 	.word	0x2000033a
 8001c88:	428c0000 	.word	0x428c0000
 8001c8c:	200003dc 	.word	0x200003dc
 8001c90:	200003c4 	.word	0x200003c4
 8001c94:	2000032c 	.word	0x2000032c
 8001c98:	42480000 	.word	0x42480000
 8001c9c:	200002a0 	.word	0x200002a0
 8001ca0:	20000330 	.word	0x20000330
 8001ca4:	20000d5c 	.word	0x20000d5c
 8001ca8:	20000d48 	.word	0x20000d48
 8001cac:	20000d4c 	.word	0x20000d4c

08001cb0 <TaskDiagnostics>:
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;
extern osMutexId ControllerMutexHandle;

void TaskDiagnostics(void const *argument)
{
 8001cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb4:	f5ad 7d5a 	sub.w	sp, sp, #872	; 0x368
 8001cb8:	af14      	add	r7, sp, #80	; 0x50
 8001cba:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001cbe:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8001cc2:	6018      	str	r0, [r3, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5; //Hz
 8001cc4:	2305      	movs	r3, #5
 8001cc6:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8001cca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cce:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8001cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd6:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
	char UARTstr[512];
	uint8_t SpiIntData[64];
	uint8_t SpiFloatData1[64];
	uint8_t SpiFloatData2[64];

	SpiIntData[0] = (uint8_t)('i');
 8001cda:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001cde:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001ce2:	2269      	movs	r2, #105	; 0x69
 8001ce4:	701a      	strb	r2, [r3, #0]
	SpiFloatData1[0] = (uint8_t)('f');
 8001ce6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001cea:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001cee:	2266      	movs	r2, #102	; 0x66
 8001cf0:	701a      	strb	r2, [r3, #0]
	SpiFloatData2[0] = (uint8_t)('g');
 8001cf2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001cf6:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8001cfa:	2267      	movs	r2, #103	; 0x67
 8001cfc:	701a      	strb	r2, [r3, #0]

	xLastWakeTime = xTaskGetTickCount();
 8001cfe:	f011 fa3d 	bl	801317c <xTaskGetTickCount>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8001d08:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8001d0c:	f8d7 1310 	ldr.w	r1, [r7, #784]	; 0x310
 8001d10:	4618      	mov	r0, r3
 8001d12:	f011 f85f 	bl	8012dd4 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8001d16:	f011 fa31 	bl	801317c <xTaskGetTickCount>
 8001d1a:	f8c7 030c 	str.w	r0, [r7, #780]	; 0x30c

		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001d1e:	4bc3      	ldr	r3, [pc, #780]	; (800202c <TaskDiagnostics+0x37c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f04f 31ff 	mov.w	r1, #4294967295
 8001d26:	4618      	mov	r0, r3
 8001d28:	f00f fe90 	bl	8011a4c <osMutexWait>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 811d 	bne.w	8001f6e <TaskDiagnostics+0x2be>
		{
			uint16_t Throttle1 = (uint16_t)(TIM1->CCR1-1000);
 8001d34:	4bbe      	ldr	r3, [pc, #760]	; (8002030 <TaskDiagnostics+0x380>)
 8001d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001d44:	f2a3 23d2 	subw	r3, r3, #722	; 0x2d2
 8001d48:	801a      	strh	r2, [r3, #0]
			uint16_t Throttle2 = (uint16_t)(TIM1->CCR2-1000);
 8001d4a:	4bb9      	ldr	r3, [pc, #740]	; (8002030 <TaskDiagnostics+0x380>)
 8001d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001d5a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8001d5e:	801a      	strh	r2, [r3, #0]
			uint16_t Throttle3 = (uint16_t)(TIM1->CCR3-1000);
 8001d60:	4bb3      	ldr	r3, [pc, #716]	; (8002030 <TaskDiagnostics+0x380>)
 8001d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001d70:	f2a3 23d6 	subw	r3, r3, #726	; 0x2d6
 8001d74:	801a      	strh	r2, [r3, #0]
			uint16_t Throttle4 = (uint16_t)(TIM1->CCR4-1000);
 8001d76:	4bae      	ldr	r3, [pc, #696]	; (8002030 <TaskDiagnostics+0x380>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001d86:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8001d8a:	801a      	strh	r2, [r3, #0]

			sprintf(UARTstr, "Throttle: (%d) %d %d %d %d\r\n", Throttle_in, Throttle1, Throttle2, Throttle3, Throttle4);
 8001d8c:	4ba9      	ldr	r3, [pc, #676]	; (8002034 <TaskDiagnostics+0x384>)
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	461c      	mov	r4, r3
 8001d92:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001d96:	f2a3 23d2 	subw	r3, r3, #722	; 0x2d2
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	461d      	mov	r5, r3
 8001d9e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001da2:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001dae:	f2a3 23d6 	subw	r3, r3, #726	; 0x2d6
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001dba:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001dc4:	9302      	str	r3, [sp, #8]
 8001dc6:	9101      	str	r1, [sp, #4]
 8001dc8:	9200      	str	r2, [sp, #0]
 8001dca:	462b      	mov	r3, r5
 8001dcc:	4622      	mov	r2, r4
 8001dce:	499a      	ldr	r1, [pc, #616]	; (8002038 <TaskDiagnostics+0x388>)
 8001dd0:	f004 fb48 	bl	8006464 <sprintf_>
			Uint16ToUint8s(&Throttle_in, SpiIntData, 1);
 8001dd4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001dd8:	2201      	movs	r2, #1
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4895      	ldr	r0, [pc, #596]	; (8002034 <TaskDiagnostics+0x384>)
 8001dde:	f7ff fca8 	bl	8001732 <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle1, SpiIntData, 3);
 8001de2:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001de6:	f107 0346 	add.w	r3, r7, #70	; 0x46
 8001dea:	2203      	movs	r2, #3
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fca0 	bl	8001732 <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle2, SpiIntData, 5);
 8001df2:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001df6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dfa:	2205      	movs	r2, #5
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fc98 	bl	8001732 <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle3, SpiIntData, 7);
 8001e02:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001e06:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8001e0a:	2207      	movs	r2, #7
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fc90 	bl	8001732 <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle4, SpiIntData, 9);
 8001e12:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001e16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e1a:	2209      	movs	r2, #9
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fc88 	bl	8001732 <Uint16ToUint8s>

			sprintf(UARTstr, "%sPitch: %d\r\n", UARTstr, Pitch_in);
 8001e22:	4b86      	ldr	r3, [pc, #536]	; (800203c <TaskDiagnostics+0x38c>)
 8001e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e28:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001e2c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001e30:	4983      	ldr	r1, [pc, #524]	; (8002040 <TaskDiagnostics+0x390>)
 8001e32:	f004 fb17 	bl	8006464 <sprintf_>
			Int16ToUint8s(&Pitch_in, SpiIntData, 11);
 8001e36:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e3a:	220b      	movs	r2, #11
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	487f      	ldr	r0, [pc, #508]	; (800203c <TaskDiagnostics+0x38c>)
 8001e40:	f7ff fc8a 	bl	8001758 <Int16ToUint8s>

			int16_t Roll_in_devided = Roll_in / 10;
 8001e44:	4b7f      	ldr	r3, [pc, #508]	; (8002044 <TaskDiagnostics+0x394>)
 8001e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4a:	4a7f      	ldr	r2, [pc, #508]	; (8002048 <TaskDiagnostics+0x398>)
 8001e4c:	fb82 1203 	smull	r1, r2, r2, r3
 8001e50:	1092      	asrs	r2, r2, #2
 8001e52:	17db      	asrs	r3, r3, #31
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	b21a      	sxth	r2, r3
 8001e58:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001e5c:	f2a3 23da 	subw	r3, r3, #730	; 0x2da
 8001e60:	801a      	strh	r2, [r3, #0]
			sprintf(UARTstr, "%sRoll: %d\r\n", UARTstr, Roll_in_devided);
 8001e62:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001e66:	f2a3 23da 	subw	r3, r3, #730	; 0x2da
 8001e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001e72:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001e76:	4975      	ldr	r1, [pc, #468]	; (800204c <TaskDiagnostics+0x39c>)
 8001e78:	f004 faf4 	bl	8006464 <sprintf_>
			Int16ToUint8s(&Roll_in_devided, SpiIntData, 13);
 8001e7c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001e80:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8001e84:	220d      	movs	r2, #13
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fc66 	bl	8001758 <Int16ToUint8s>

			sprintf(UARTstr, "%sYaw: %d\r\n", UARTstr, Yaw_in);
 8001e8c:	4b70      	ldr	r3, [pc, #448]	; (8002050 <TaskDiagnostics+0x3a0>)
 8001e8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e92:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001e96:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001e9a:	496e      	ldr	r1, [pc, #440]	; (8002054 <TaskDiagnostics+0x3a4>)
 8001e9c:	f004 fae2 	bl	8006464 <sprintf_>
			Int16ToUint8s(&Yaw_in, SpiIntData, 15);
 8001ea0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4869      	ldr	r0, [pc, #420]	; (8002050 <TaskDiagnostics+0x3a0>)
 8001eaa:	f7ff fc55 	bl	8001758 <Int16ToUint8s>

			sprintf(UARTstr, "%sSWA: %d\r\n", UARTstr, SWA);
 8001eae:	4b6a      	ldr	r3, [pc, #424]	; (8002058 <TaskDiagnostics+0x3a8>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001eb6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001eba:	4968      	ldr	r1, [pc, #416]	; (800205c <TaskDiagnostics+0x3ac>)
 8001ebc:	f004 fad2 	bl	8006464 <sprintf_>
			Uint16ToUint8s(&SWA, SpiIntData, 17);
 8001ec0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ec4:	2211      	movs	r2, #17
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4863      	ldr	r0, [pc, #396]	; (8002058 <TaskDiagnostics+0x3a8>)
 8001eca:	f7ff fc32 	bl	8001732 <Uint16ToUint8s>

			sprintf(UARTstr, "%sSWB: %d\r\n", UARTstr, SWB);
 8001ece:	4b64      	ldr	r3, [pc, #400]	; (8002060 <TaskDiagnostics+0x3b0>)
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001ed6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001eda:	4962      	ldr	r1, [pc, #392]	; (8002064 <TaskDiagnostics+0x3b4>)
 8001edc:	f004 fac2 	bl	8006464 <sprintf_>
			Uint16ToUint8s(&SWB, SpiIntData, 19);
 8001ee0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ee4:	2213      	movs	r2, #19
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	485d      	ldr	r0, [pc, #372]	; (8002060 <TaskDiagnostics+0x3b0>)
 8001eea:	f7ff fc22 	bl	8001732 <Uint16ToUint8s>

			sprintf(UARTstr, "%sSWC: %d\r\n", UARTstr, SWC);
 8001eee:	4b5e      	ldr	r3, [pc, #376]	; (8002068 <TaskDiagnostics+0x3b8>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001ef6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001efa:	495c      	ldr	r1, [pc, #368]	; (800206c <TaskDiagnostics+0x3bc>)
 8001efc:	f004 fab2 	bl	8006464 <sprintf_>
			Uint16ToUint8s(&SWC, SpiIntData, 21);
 8001f00:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f04:	2215      	movs	r2, #21
 8001f06:	4619      	mov	r1, r3
 8001f08:	4857      	ldr	r0, [pc, #348]	; (8002068 <TaskDiagnostics+0x3b8>)
 8001f0a:	f7ff fc12 	bl	8001732 <Uint16ToUint8s>

			sprintf(UARTstr, "%sSWD: %d\r\n", UARTstr, SWD);
 8001f0e:	4b58      	ldr	r3, [pc, #352]	; (8002070 <TaskDiagnostics+0x3c0>)
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001f16:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001f1a:	4956      	ldr	r1, [pc, #344]	; (8002074 <TaskDiagnostics+0x3c4>)
 8001f1c:	f004 faa2 	bl	8006464 <sprintf_>
			Uint16ToUint8s(&SWD, SpiIntData, 23);
 8001f20:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f24:	2217      	movs	r2, #23
 8001f26:	4619      	mov	r1, r3
 8001f28:	4851      	ldr	r0, [pc, #324]	; (8002070 <TaskDiagnostics+0x3c0>)
 8001f2a:	f7ff fc02 	bl	8001732 <Uint16ToUint8s>

			sprintf(UARTstr, "%sVRA: %d\r\n", UARTstr, VRA);
 8001f2e:	4b52      	ldr	r3, [pc, #328]	; (8002078 <TaskDiagnostics+0x3c8>)
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001f36:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001f3a:	4950      	ldr	r1, [pc, #320]	; (800207c <TaskDiagnostics+0x3cc>)
 8001f3c:	f004 fa92 	bl	8006464 <sprintf_>
			Uint16ToUint8s(&VRA, SpiIntData, 25);
 8001f40:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f44:	2219      	movs	r2, #25
 8001f46:	4619      	mov	r1, r3
 8001f48:	484b      	ldr	r0, [pc, #300]	; (8002078 <TaskDiagnostics+0x3c8>)
 8001f4a:	f7ff fbf2 	bl	8001732 <Uint16ToUint8s>

			sprintf(UARTstr, "%sVRB: %d\r\n", UARTstr, VRB);
 8001f4e:	4b4c      	ldr	r3, [pc, #304]	; (8002080 <TaskDiagnostics+0x3d0>)
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001f56:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001f5a:	494a      	ldr	r1, [pc, #296]	; (8002084 <TaskDiagnostics+0x3d4>)
 8001f5c:	f004 fa82 	bl	8006464 <sprintf_>
			Uint16ToUint8s(&VRB, SpiIntData, 27);
 8001f60:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f64:	221b      	movs	r2, #27
 8001f66:	4619      	mov	r1, r3
 8001f68:	4845      	ldr	r0, [pc, #276]	; (8002080 <TaskDiagnostics+0x3d0>)
 8001f6a:	f7ff fbe2 	bl	8001732 <Uint16ToUint8s>
		}
		osMutexRelease(RemoteDataMutexHandle);
 8001f6e:	4b2f      	ldr	r3, [pc, #188]	; (800202c <TaskDiagnostics+0x37c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f00f fdb8 	bl	8011ae8 <osMutexRelease>

		if (IsImuAvailable)
 8001f78:	4b43      	ldr	r3, [pc, #268]	; (8002088 <TaskDiagnostics+0x3d8>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 8127 	beq.w	80021d0 <TaskDiagnostics+0x520>
		{
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 8001f82:	4b42      	ldr	r3, [pc, #264]	; (800208c <TaskDiagnostics+0x3dc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f00f fd5e 	bl	8011a4c <osMutexWait>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 8117 	bne.w	80021c6 <TaskDiagnostics+0x516>
			{
				sprintf(UARTstr,
 8001f98:	4b3d      	ldr	r3, [pc, #244]	; (8002090 <TaskDiagnostics+0x3e0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fafb 	bl	8000598 <__aeabi_f2d>
 8001fa2:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
						"%sTemp: %.4f\r\nAcc:  %1.4f ; %1.4f ; %1.4f\r\nGyro: %1.4f ; %1.4f ; %1.4f\r\nRoll: %1.2f ° ; Pitch: %1.2f ° ; Yaw: %1.2f °\r\n",
						UARTstr,
						TempData,
						AccData[0], AccData[1], AccData[2],
 8001fa6:	4b3b      	ldr	r3, [pc, #236]	; (8002094 <TaskDiagnostics+0x3e4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe faf4 	bl	8000598 <__aeabi_f2d>
 8001fb0:	e9c7 0108 	strd	r0, r1, [r7, #32]
						AccData[0], AccData[1], AccData[2],
 8001fb4:	4b37      	ldr	r3, [pc, #220]	; (8002094 <TaskDiagnostics+0x3e4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe faed 	bl	8000598 <__aeabi_f2d>
 8001fbe:	e9c7 0106 	strd	r0, r1, [r7, #24]
						AccData[0], AccData[1], AccData[2],
 8001fc2:	4b34      	ldr	r3, [pc, #208]	; (8002094 <TaskDiagnostics+0x3e4>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fae6 	bl	8000598 <__aeabi_f2d>
 8001fcc:	e9c7 0104 	strd	r0, r1, [r7, #16]
						GyroData[0], GyroData[1], GyroData[2],
 8001fd0:	4b31      	ldr	r3, [pc, #196]	; (8002098 <TaskDiagnostics+0x3e8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fadf 	bl	8000598 <__aeabi_f2d>
 8001fda:	e9c7 0102 	strd	r0, r1, [r7, #8]
						GyroData[0], GyroData[1], GyroData[2],
 8001fde:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <TaskDiagnostics+0x3e8>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fad8 	bl	8000598 <__aeabi_f2d>
 8001fe8:	e9c7 0100 	strd	r0, r1, [r7]
						GyroData[0], GyroData[1], GyroData[2],
 8001fec:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <TaskDiagnostics+0x3e8>)
 8001fee:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fad1 	bl	8000598 <__aeabi_f2d>
 8001ff6:	4682      	mov	sl, r0
 8001ff8:	468b      	mov	fp, r1
 8001ffa:	4b28      	ldr	r3, [pc, #160]	; (800209c <TaskDiagnostics+0x3ec>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe faca 	bl	8000598 <__aeabi_f2d>
 8002004:	4680      	mov	r8, r0
 8002006:	4689      	mov	r9, r1
 8002008:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <TaskDiagnostics+0x3f0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fac3 	bl	8000598 <__aeabi_f2d>
 8002012:	4604      	mov	r4, r0
 8002014:	460d      	mov	r5, r1
 8002016:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <TaskDiagnostics+0x3f4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fabc 	bl	8000598 <__aeabi_f2d>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002028:	e03e      	b.n	80020a8 <TaskDiagnostics+0x3f8>
 800202a:	bf00      	nop
 800202c:	20000d48 	.word	0x20000d48
 8002030:	40010000 	.word	0x40010000
 8002034:	20000328 	.word	0x20000328
 8002038:	0801ba88 	.word	0x0801ba88
 800203c:	2000032e 	.word	0x2000032e
 8002040:	0801baa8 	.word	0x0801baa8
 8002044:	2000032a 	.word	0x2000032a
 8002048:	66666667 	.word	0x66666667
 800204c:	0801bab8 	.word	0x0801bab8
 8002050:	20000332 	.word	0x20000332
 8002054:	0801bac8 	.word	0x0801bac8
 8002058:	20000334 	.word	0x20000334
 800205c:	0801bad4 	.word	0x0801bad4
 8002060:	20000336 	.word	0x20000336
 8002064:	0801bae0 	.word	0x0801bae0
 8002068:	20000338 	.word	0x20000338
 800206c:	0801baec 	.word	0x0801baec
 8002070:	2000033a 	.word	0x2000033a
 8002074:	0801baf8 	.word	0x0801baf8
 8002078:	2000033c 	.word	0x2000033c
 800207c:	0801bb04 	.word	0x0801bb04
 8002080:	2000033e 	.word	0x2000033e
 8002084:	0801bb10 	.word	0x0801bb10
 8002088:	20000214 	.word	0x20000214
 800208c:	20000d4c 	.word	0x20000d4c
 8002090:	200003c0 	.word	0x200003c0
 8002094:	200003b4 	.word	0x200003b4
 8002098:	200003c4 	.word	0x200003c4
 800209c:	200003d0 	.word	0x200003d0
 80020a0:	200003d4 	.word	0x200003d4
 80020a4:	200003d8 	.word	0x200003d8
 80020a8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80020ac:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80020b0:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 80020b4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80020b8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 80020bc:	ed97 7b00 	vldr	d7, [r7]
 80020c0:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80020c4:	ed97 7b02 	vldr	d7, [r7, #8]
 80020c8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80020cc:	ed97 7b04 	vldr	d7, [r7, #16]
 80020d0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80020d4:	ed97 7b06 	vldr	d7, [r7, #24]
 80020d8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80020dc:	ed97 7b08 	vldr	d7, [r7, #32]
 80020e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80020e4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80020e8:	ed8d 7b00 	vstr	d7, [sp]
 80020ec:	460a      	mov	r2, r1
 80020ee:	496b      	ldr	r1, [pc, #428]	; (800229c <TaskDiagnostics+0x5ec>)
 80020f0:	f004 f9b8 	bl	8006464 <sprintf_>
						Roll_measured, Pitch_measured, Yaw_measured);
				FloatToUint8s(&TempData, SpiFloatData1, 1);
 80020f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80020f8:	2201      	movs	r2, #1
 80020fa:	4619      	mov	r1, r3
 80020fc:	4868      	ldr	r0, [pc, #416]	; (80022a0 <TaskDiagnostics+0x5f0>)
 80020fe:	f7ff faf3 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(AccData, SpiFloatData1, 5);
 8002102:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002106:	2205      	movs	r2, #5
 8002108:	4619      	mov	r1, r3
 800210a:	4866      	ldr	r0, [pc, #408]	; (80022a4 <TaskDiagnostics+0x5f4>)
 800210c:	f7ff faec 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(AccData+1, SpiFloatData1, 9);
 8002110:	4865      	ldr	r0, [pc, #404]	; (80022a8 <TaskDiagnostics+0x5f8>)
 8002112:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002116:	2209      	movs	r2, #9
 8002118:	4619      	mov	r1, r3
 800211a:	f7ff fae5 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(AccData+2, SpiFloatData1, 13);
 800211e:	4863      	ldr	r0, [pc, #396]	; (80022ac <TaskDiagnostics+0x5fc>)
 8002120:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002124:	220d      	movs	r2, #13
 8002126:	4619      	mov	r1, r3
 8002128:	f7ff fade 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(GyroData, SpiFloatData1, 17);
 800212c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002130:	2211      	movs	r2, #17
 8002132:	4619      	mov	r1, r3
 8002134:	485e      	ldr	r0, [pc, #376]	; (80022b0 <TaskDiagnostics+0x600>)
 8002136:	f7ff fad7 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(GyroData+1, SpiFloatData1, 21);
 800213a:	485e      	ldr	r0, [pc, #376]	; (80022b4 <TaskDiagnostics+0x604>)
 800213c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002140:	2215      	movs	r2, #21
 8002142:	4619      	mov	r1, r3
 8002144:	f7ff fad0 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(GyroData+2, SpiFloatData1, 25);
 8002148:	485b      	ldr	r0, [pc, #364]	; (80022b8 <TaskDiagnostics+0x608>)
 800214a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800214e:	2219      	movs	r2, #25
 8002150:	4619      	mov	r1, r3
 8002152:	f7ff fac9 	bl	80016e8 <FloatToUint8s>

				sprintf(UARTstr,
 8002156:	4b59      	ldr	r3, [pc, #356]	; (80022bc <TaskDiagnostics+0x60c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fa1c 	bl	8000598 <__aeabi_f2d>
 8002160:	4604      	mov	r4, r0
 8002162:	460d      	mov	r5, r1
 8002164:	4b56      	ldr	r3, [pc, #344]	; (80022c0 <TaskDiagnostics+0x610>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe fa15 	bl	8000598 <__aeabi_f2d>
 800216e:	4680      	mov	r8, r0
 8002170:	4689      	mov	r9, r1
 8002172:	4b54      	ldr	r3, [pc, #336]	; (80022c4 <TaskDiagnostics+0x614>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fa0e 	bl	8000598 <__aeabi_f2d>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002184:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8002188:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800218c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002190:	e9cd 4500 	strd	r4, r5, [sp]
 8002194:	460a      	mov	r2, r1
 8002196:	494c      	ldr	r1, [pc, #304]	; (80022c8 <TaskDiagnostics+0x618>)
 8002198:	f004 f964 	bl	8006464 <sprintf_>
						"%sBMP_Temp: %.4f\r\nBMP_Pres: %.4f\r\nBMP_Alt: %.4f\r\n",
						UARTstr,
						BMP_Temp, BMP_Pres, BMP_Alt);
				FloatToUint8s(&BMP_Temp, SpiFloatData1, 29);
 800219c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80021a0:	221d      	movs	r2, #29
 80021a2:	4619      	mov	r1, r3
 80021a4:	4845      	ldr	r0, [pc, #276]	; (80022bc <TaskDiagnostics+0x60c>)
 80021a6:	f7ff fa9f 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(&BMP_Pres, SpiFloatData1, 33);
 80021aa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80021ae:	2221      	movs	r2, #33	; 0x21
 80021b0:	4619      	mov	r1, r3
 80021b2:	4843      	ldr	r0, [pc, #268]	; (80022c0 <TaskDiagnostics+0x610>)
 80021b4:	f7ff fa98 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(&BMP_Alt, SpiFloatData1, 37);
 80021b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80021bc:	2225      	movs	r2, #37	; 0x25
 80021be:	4619      	mov	r1, r3
 80021c0:	4840      	ldr	r0, [pc, #256]	; (80022c4 <TaskDiagnostics+0x614>)
 80021c2:	f7ff fa91 	bl	80016e8 <FloatToUint8s>
			}
			osMutexRelease(ImuMutexHandle);
 80021c6:	4b41      	ldr	r3, [pc, #260]	; (80022cc <TaskDiagnostics+0x61c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f00f fc8c 	bl	8011ae8 <osMutexRelease>
				FloatToUint8s(&MAG_dir, SpiFloatData1, 53);
			}
			osMutexRelease(MagnMutexHandle);
		}

		if (IsDistAvailable)
 80021d0:	4b3f      	ldr	r3, [pc, #252]	; (80022d0 <TaskDiagnostics+0x620>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d026      	beq.n	8002226 <TaskDiagnostics+0x576>
		{
			if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 80021d8:	4b3e      	ldr	r3, [pc, #248]	; (80022d4 <TaskDiagnostics+0x624>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f04f 31ff 	mov.w	r1, #4294967295
 80021e0:	4618      	mov	r0, r3
 80021e2:	f00f fc33 	bl	8011a4c <osMutexWait>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d117      	bne.n	800221c <TaskDiagnostics+0x56c>
			{
				sprintf(UARTstr, "%sDistance: %.0f mm\r\n", UARTstr, Distance);
 80021ec:	4b3a      	ldr	r3, [pc, #232]	; (80022d8 <TaskDiagnostics+0x628>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f9d1 	bl	8000598 <__aeabi_f2d>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80021fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8002202:	e9cd 2300 	strd	r2, r3, [sp]
 8002206:	460a      	mov	r2, r1
 8002208:	4934      	ldr	r1, [pc, #208]	; (80022dc <TaskDiagnostics+0x62c>)
 800220a:	f004 f92b 	bl	8006464 <sprintf_>
				FloatToUint8s(&Distance, SpiFloatData1, 57);
 800220e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002212:	2239      	movs	r2, #57	; 0x39
 8002214:	4619      	mov	r1, r3
 8002216:	4830      	ldr	r0, [pc, #192]	; (80022d8 <TaskDiagnostics+0x628>)
 8002218:	f7ff fa66 	bl	80016e8 <FloatToUint8s>
			}
			osMutexRelease(DistMutexHandle);
 800221c:	4b2d      	ldr	r3, [pc, #180]	; (80022d4 <TaskDiagnostics+0x624>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f00f fc61 	bl	8011ae8 <osMutexRelease>
				SpiIntData[32] = (uint8_t)GPS.altitude_unit;
			}
			osMutexRelease(GpsDataMutexHandle);
		}

		sprintf(UARTstr, "%s\r\n\r\n", UARTstr);
 8002226:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800222a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800222e:	492c      	ldr	r1, [pc, #176]	; (80022e0 <TaskDiagnostics+0x630>)
 8002230:	4618      	mov	r0, r3
 8002232:	f004 f917 	bl	8006464 <sprintf_>

		// Sending log info
		if (Diag)
 8002236:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <TaskDiagnostics+0x634>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f43f ad64 	beq.w	8001d08 <TaskDiagnostics+0x58>
		{
			HAL_UART_Transmit(&huart3, UARTstr, strlen(UARTstr), HAL_MAX_DELAY);
 8002240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe f83b 	bl	80002c0 <strlen>
 800224a:	4603      	mov	r3, r0
 800224c:	b29a      	uxth	r2, r3
 800224e:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
 8002256:	4824      	ldr	r0, [pc, #144]	; (80022e8 <TaskDiagnostics+0x638>)
 8002258:	f00d fec4 	bl	800ffe4 <HAL_UART_Transmit>

			HAL_SPI_Transmit(&hspi1, SpiIntData, 64, HAL_MAX_DELAY);
 800225c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002260:	f04f 33ff 	mov.w	r3, #4294967295
 8002264:	2240      	movs	r2, #64	; 0x40
 8002266:	4821      	ldr	r0, [pc, #132]	; (80022ec <TaskDiagnostics+0x63c>)
 8002268:	f00b f9d7 	bl	800d61a <HAL_SPI_Transmit>
			osDelay(10);
 800226c:	200a      	movs	r0, #10
 800226e:	f00f fbc0 	bl	80119f2 <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData1, 64, HAL_MAX_DELAY);
 8002272:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
 800227a:	2240      	movs	r2, #64	; 0x40
 800227c:	481b      	ldr	r0, [pc, #108]	; (80022ec <TaskDiagnostics+0x63c>)
 800227e:	f00b f9cc 	bl	800d61a <HAL_SPI_Transmit>
			osDelay(10);
 8002282:	200a      	movs	r0, #10
 8002284:	f00f fbb5 	bl	80119f2 <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData2, 64, HAL_MAX_DELAY);
 8002288:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800228c:	f04f 33ff 	mov.w	r3, #4294967295
 8002290:	2240      	movs	r2, #64	; 0x40
 8002292:	4816      	ldr	r0, [pc, #88]	; (80022ec <TaskDiagnostics+0x63c>)
 8002294:	f00b f9c1 	bl	800d61a <HAL_SPI_Transmit>
	{
 8002298:	e536      	b.n	8001d08 <TaskDiagnostics+0x58>
 800229a:	bf00      	nop
 800229c:	0801bb1c 	.word	0x0801bb1c
 80022a0:	200003c0 	.word	0x200003c0
 80022a4:	200003b4 	.word	0x200003b4
 80022a8:	200003b8 	.word	0x200003b8
 80022ac:	200003bc 	.word	0x200003bc
 80022b0:	200003c4 	.word	0x200003c4
 80022b4:	200003c8 	.word	0x200003c8
 80022b8:	200003cc 	.word	0x200003cc
 80022bc:	20000418 	.word	0x20000418
 80022c0:	2000041c 	.word	0x2000041c
 80022c4:	20000420 	.word	0x20000420
 80022c8:	0801bb98 	.word	0x0801bb98
 80022cc:	20000d4c 	.word	0x20000d4c
 80022d0:	20000216 	.word	0x20000216
 80022d4:	20000d54 	.word	0x20000d54
 80022d8:	20000484 	.word	0x20000484
 80022dc:	0801bbcc 	.word	0x0801bbcc
 80022e0:	0801bbe4 	.word	0x0801bbe4
 80022e4:	20000000 	.word	0x20000000
 80022e8:	20000c40 	.word	0x20000c40
 80022ec:	200009d0 	.word	0x200009d0

080022f0 <ConvertToPwm>:
extern TIM_HandleTypeDef htim1;
extern osMutexId RemoteDataMutexHandle;
extern osMutexId ControllerMutexHandle;

uint32_t ConvertToPwm(int32_t raw)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	// Norm raw data to 0-1000
	if (raw < 0)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	da02      	bge.n	8002304 <ConvertToPwm+0x14>
		raw = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	e006      	b.n	8002312 <ConvertToPwm+0x22>
	else if (raw > 1000)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800230a:	dd02      	ble.n	8002312 <ConvertToPwm+0x22>
		raw = 1000;
 800230c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002310:	607b      	str	r3, [r7, #4]

	// Add 50, so the range will be 1000-2000
	return (uint32_t)(raw + 1000);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <TaskMotor>:

void TaskMotor(void const *argument)
{
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b08b      	sub	sp, #44	; 0x2c
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 800232c:	23c8      	movs	r3, #200	; 0xc8
 800232e:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8002330:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fbb2 f3f3 	udiv	r3, r2, r3
 800233a:	613b      	str	r3, [r7, #16]

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800233c:	2100      	movs	r1, #0
 800233e:	4879      	ldr	r0, [pc, #484]	; (8002524 <TaskMotor+0x200>)
 8002340:	f00c f952 	bl	800e5e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002344:	2104      	movs	r1, #4
 8002346:	4877      	ldr	r0, [pc, #476]	; (8002524 <TaskMotor+0x200>)
 8002348:	f00c f94e 	bl	800e5e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800234c:	2108      	movs	r1, #8
 800234e:	4875      	ldr	r0, [pc, #468]	; (8002524 <TaskMotor+0x200>)
 8002350:	f00c f94a 	bl	800e5e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002354:	210c      	movs	r1, #12
 8002356:	4873      	ldr	r0, [pc, #460]	; (8002524 <TaskMotor+0x200>)
 8002358:	f00c f946 	bl	800e5e8 <HAL_TIM_PWM_Start>
	uint8_t ESC1_start_signal;
	uint8_t ESC2_start_signal;
	uint8_t ESC3_start_signal;
	uint8_t ESC4_start_signal;

	TIM1->CCR1 = (uint32_t) (50);
 800235c:	4b72      	ldr	r3, [pc, #456]	; (8002528 <TaskMotor+0x204>)
 800235e:	2232      	movs	r2, #50	; 0x32
 8002360:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (uint32_t) (50);
 8002362:	4b71      	ldr	r3, [pc, #452]	; (8002528 <TaskMotor+0x204>)
 8002364:	2232      	movs	r2, #50	; 0x32
 8002366:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (uint32_t) (50);
 8002368:	4b6f      	ldr	r3, [pc, #444]	; (8002528 <TaskMotor+0x204>)
 800236a:	2232      	movs	r2, #50	; 0x32
 800236c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = (uint32_t) (50);
 800236e:	4b6e      	ldr	r3, [pc, #440]	; (8002528 <TaskMotor+0x204>)
 8002370:	2232      	movs	r2, #50	; 0x32
 8002372:	641a      	str	r2, [r3, #64]	; 0x40

	xLastWakeTime = xTaskGetTickCount();
 8002374:	f010 ff02 	bl	801317c <xTaskGetTickCount>
 8002378:	4603      	mov	r3, r0
 800237a:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 800237c:	f107 0308 	add.w	r3, r7, #8
 8002380:	6939      	ldr	r1, [r7, #16]
 8002382:	4618      	mov	r0, r3
 8002384:	f010 fd26 	bl	8012dd4 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8002388:	f010 fef8 	bl	801317c <xTaskGetTickCount>
 800238c:	60f8      	str	r0, [r7, #12]

		//Log("Mot - RDMutEnter");
		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 800238e:	4b67      	ldr	r3, [pc, #412]	; (800252c <TaskMotor+0x208>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f04f 31ff 	mov.w	r1, #4294967295
 8002396:	4618      	mov	r0, r3
 8002398:	f00f fb58 	bl	8011a4c <osMutexWait>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f040 80ba 	bne.w	8002518 <TaskMotor+0x1f4>
		{
			// Hardware safety
			if (SWA < 10)
 80023a4:	4b62      	ldr	r3, [pc, #392]	; (8002530 <TaskMotor+0x20c>)
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	2b09      	cmp	r3, #9
 80023aa:	d806      	bhi.n	80023ba <TaskMotor+0x96>
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_SET);
 80023ac:	2201      	movs	r2, #1
 80023ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023b2:	4860      	ldr	r0, [pc, #384]	; (8002534 <TaskMotor+0x210>)
 80023b4:	f009 fa26 	bl	800b804 <HAL_GPIO_WritePin>
 80023b8:	e005      	b.n	80023c6 <TaskMotor+0xa2>

			else
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 80023ba:	2200      	movs	r2, #0
 80023bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023c0:	485c      	ldr	r0, [pc, #368]	; (8002534 <TaskMotor+0x210>)
 80023c2:	f009 fa1f 	bl	800b804 <HAL_GPIO_WritePin>

			// Software safety
			if (SWB < 10)
 80023c6:	4b5c      	ldr	r3, [pc, #368]	; (8002538 <TaskMotor+0x214>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	2b09      	cmp	r3, #9
 80023cc:	d803      	bhi.n	80023d6 <TaskMotor+0xb2>
				Rotors = false;
 80023ce:	4b5b      	ldr	r3, [pc, #364]	; (800253c <TaskMotor+0x218>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
 80023d4:	e002      	b.n	80023dc <TaskMotor+0xb8>
			else
				Rotors = true;
 80023d6:	4b59      	ldr	r3, [pc, #356]	; (800253c <TaskMotor+0x218>)
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]

			// Setting PWM speed
			if (Rotors)
 80023dc:	4b57      	ldr	r3, [pc, #348]	; (800253c <TaskMotor+0x218>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 8081 	beq.w	80024e8 <TaskMotor+0x1c4>
				int32_t ESC1_Speed;
				int32_t ESC2_Speed;
				int32_t ESC3_Speed;
				int32_t ESC4_Speed;

				if (Throttle_in > 10)
 80023e6:	4b56      	ldr	r3, [pc, #344]	; (8002540 <TaskMotor+0x21c>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	2b0a      	cmp	r3, #10
 80023ec:	d95b      	bls.n	80024a6 <TaskMotor+0x182>
				{
					if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK)
 80023ee:	4b55      	ldr	r3, [pc, #340]	; (8002544 <TaskMotor+0x220>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f04f 31ff 	mov.w	r1, #4294967295
 80023f6:	4618      	mov	r0, r3
 80023f8:	f00f fb28 	bl	8011a4c <osMutexWait>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d14b      	bne.n	800249a <TaskMotor+0x176>
					{
						ESC1_Speed = Throttle_in + Roll_controlled  - (Pitch_in/5); //- (Yaw_in/5);
 8002402:	4b4f      	ldr	r3, [pc, #316]	; (8002540 <TaskMotor+0x21c>)
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	4b4f      	ldr	r3, [pc, #316]	; (8002548 <TaskMotor+0x224>)
 800240a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800240e:	441a      	add	r2, r3
 8002410:	4b4e      	ldr	r3, [pc, #312]	; (800254c <TaskMotor+0x228>)
 8002412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002416:	494e      	ldr	r1, [pc, #312]	; (8002550 <TaskMotor+0x22c>)
 8002418:	fb81 0103 	smull	r0, r1, r1, r3
 800241c:	1049      	asrs	r1, r1, #1
 800241e:	17db      	asrs	r3, r3, #31
 8002420:	1acb      	subs	r3, r1, r3
 8002422:	b21b      	sxth	r3, r3
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
						ESC2_Speed = Throttle_in - Roll_controlled - (Pitch_in/5); //+ (Yaw_in/5);
 8002428:	4b45      	ldr	r3, [pc, #276]	; (8002540 <TaskMotor+0x21c>)
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	4b46      	ldr	r3, [pc, #280]	; (8002548 <TaskMotor+0x224>)
 8002430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002434:	1ad2      	subs	r2, r2, r3
 8002436:	4b45      	ldr	r3, [pc, #276]	; (800254c <TaskMotor+0x228>)
 8002438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800243c:	4944      	ldr	r1, [pc, #272]	; (8002550 <TaskMotor+0x22c>)
 800243e:	fb81 0103 	smull	r0, r1, r1, r3
 8002442:	1049      	asrs	r1, r1, #1
 8002444:	17db      	asrs	r3, r3, #31
 8002446:	1acb      	subs	r3, r1, r3
 8002448:	b21b      	sxth	r3, r3
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	623b      	str	r3, [r7, #32]
						ESC3_Speed = Throttle_in - Roll_controlled  + (Pitch_in/5); //- (Yaw_in/5);
 800244e:	4b3c      	ldr	r3, [pc, #240]	; (8002540 <TaskMotor+0x21c>)
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	4b3c      	ldr	r3, [pc, #240]	; (8002548 <TaskMotor+0x224>)
 8002456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800245a:	1ad2      	subs	r2, r2, r3
 800245c:	4b3b      	ldr	r3, [pc, #236]	; (800254c <TaskMotor+0x228>)
 800245e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002462:	493b      	ldr	r1, [pc, #236]	; (8002550 <TaskMotor+0x22c>)
 8002464:	fb81 0103 	smull	r0, r1, r1, r3
 8002468:	1049      	asrs	r1, r1, #1
 800246a:	17db      	asrs	r3, r3, #31
 800246c:	1acb      	subs	r3, r1, r3
 800246e:	b21b      	sxth	r3, r3
 8002470:	4413      	add	r3, r2
 8002472:	61fb      	str	r3, [r7, #28]
						ESC4_Speed = Throttle_in + Roll_controlled  + (Pitch_in/5); // + (Yaw_in/5);
 8002474:	4b32      	ldr	r3, [pc, #200]	; (8002540 <TaskMotor+0x21c>)
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	4b33      	ldr	r3, [pc, #204]	; (8002548 <TaskMotor+0x224>)
 800247c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002480:	441a      	add	r2, r3
 8002482:	4b32      	ldr	r3, [pc, #200]	; (800254c <TaskMotor+0x228>)
 8002484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002488:	4931      	ldr	r1, [pc, #196]	; (8002550 <TaskMotor+0x22c>)
 800248a:	fb81 0103 	smull	r0, r1, r1, r3
 800248e:	1049      	asrs	r1, r1, #1
 8002490:	17db      	asrs	r3, r3, #31
 8002492:	1acb      	subs	r3, r1, r3
 8002494:	b21b      	sxth	r3, r3
 8002496:	4413      	add	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
					}
					osMutexRelease(ControllerMutexHandle);
 800249a:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <TaskMotor+0x220>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f00f fb22 	bl	8011ae8 <osMutexRelease>
 80024a4:	e007      	b.n	80024b6 <TaskMotor+0x192>
				}
				else
				{
					ESC1_Speed = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
					ESC2_Speed = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	623b      	str	r3, [r7, #32]
					ESC3_Speed = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
					ESC4_Speed = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
				}

				TIM1->CCR1 = ConvertToPwm(ESC1_Speed);
 80024b6:	4c1c      	ldr	r4, [pc, #112]	; (8002528 <TaskMotor+0x204>)
 80024b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024ba:	f7ff ff19 	bl	80022f0 <ConvertToPwm>
 80024be:	4603      	mov	r3, r0
 80024c0:	6363      	str	r3, [r4, #52]	; 0x34
				TIM1->CCR2 = ConvertToPwm(ESC2_Speed);
 80024c2:	4c19      	ldr	r4, [pc, #100]	; (8002528 <TaskMotor+0x204>)
 80024c4:	6a38      	ldr	r0, [r7, #32]
 80024c6:	f7ff ff13 	bl	80022f0 <ConvertToPwm>
 80024ca:	4603      	mov	r3, r0
 80024cc:	63a3      	str	r3, [r4, #56]	; 0x38
				TIM1->CCR3 = ConvertToPwm(ESC3_Speed);
 80024ce:	4c16      	ldr	r4, [pc, #88]	; (8002528 <TaskMotor+0x204>)
 80024d0:	69f8      	ldr	r0, [r7, #28]
 80024d2:	f7ff ff0d 	bl	80022f0 <ConvertToPwm>
 80024d6:	4603      	mov	r3, r0
 80024d8:	63e3      	str	r3, [r4, #60]	; 0x3c
				TIM1->CCR4 = ConvertToPwm(ESC4_Speed);
 80024da:	4c13      	ldr	r4, [pc, #76]	; (8002528 <TaskMotor+0x204>)
 80024dc:	69b8      	ldr	r0, [r7, #24]
 80024de:	f7ff ff07 	bl	80022f0 <ConvertToPwm>
 80024e2:	4603      	mov	r3, r0
 80024e4:	6423      	str	r3, [r4, #64]	; 0x40
 80024e6:	e017      	b.n	8002518 <TaskMotor+0x1f4>
			}
			else
			{
				TIM1->CCR1 = ConvertToPwm(0);
 80024e8:	4c0f      	ldr	r4, [pc, #60]	; (8002528 <TaskMotor+0x204>)
 80024ea:	2000      	movs	r0, #0
 80024ec:	f7ff ff00 	bl	80022f0 <ConvertToPwm>
 80024f0:	4603      	mov	r3, r0
 80024f2:	6363      	str	r3, [r4, #52]	; 0x34
				TIM1->CCR2 = ConvertToPwm(0);
 80024f4:	4c0c      	ldr	r4, [pc, #48]	; (8002528 <TaskMotor+0x204>)
 80024f6:	2000      	movs	r0, #0
 80024f8:	f7ff fefa 	bl	80022f0 <ConvertToPwm>
 80024fc:	4603      	mov	r3, r0
 80024fe:	63a3      	str	r3, [r4, #56]	; 0x38
				TIM1->CCR3 = ConvertToPwm(0);
 8002500:	4c09      	ldr	r4, [pc, #36]	; (8002528 <TaskMotor+0x204>)
 8002502:	2000      	movs	r0, #0
 8002504:	f7ff fef4 	bl	80022f0 <ConvertToPwm>
 8002508:	4603      	mov	r3, r0
 800250a:	63e3      	str	r3, [r4, #60]	; 0x3c
				TIM1->CCR4 = ConvertToPwm(0);
 800250c:	4c06      	ldr	r4, [pc, #24]	; (8002528 <TaskMotor+0x204>)
 800250e:	2000      	movs	r0, #0
 8002510:	f7ff feee 	bl	80022f0 <ConvertToPwm>
 8002514:	4603      	mov	r3, r0
 8002516:	6423      	str	r3, [r4, #64]	; 0x40
			}
		}
		osMutexRelease(RemoteDataMutexHandle);
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <TaskMotor+0x208>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f00f fae3 	bl	8011ae8 <osMutexRelease>
	{
 8002522:	e72b      	b.n	800237c <TaskMotor+0x58>
 8002524:	20000a98 	.word	0x20000a98
 8002528:	40010000 	.word	0x40010000
 800252c:	20000d48 	.word	0x20000d48
 8002530:	20000334 	.word	0x20000334
 8002534:	40021000 	.word	0x40021000
 8002538:	20000336 	.word	0x20000336
 800253c:	20000002 	.word	0x20000002
 8002540:	20000328 	.word	0x20000328
 8002544:	20000d5c 	.word	0x20000d5c
 8002548:	2000032c 	.word	0x2000032c
 800254c:	2000032e 	.word	0x2000032e
 8002550:	66666667 	.word	0x66666667

08002554 <TaskPower>:
#include "Globals.h"

void TaskPower(void const *argument)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1; //Hz
 800255c:	2301      	movs	r3, #1
 800255e:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8002560:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	fbb2 f3f3 	udiv	r3, r2, r3
 800256a:	613b      	str	r3, [r7, #16]

	// ...

	xLastWakeTime = xTaskGetTickCount();
 800256c:	f010 fe06 	bl	801317c <xTaskGetTickCount>
 8002570:	4603      	mov	r3, r0
 8002572:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for (;;)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8002574:	f107 0308 	add.w	r3, r7, #8
 8002578:	6939      	ldr	r1, [r7, #16]
 800257a:	4618      	mov	r0, r3
 800257c:	f010 fc2a 	bl	8012dd4 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8002580:	f010 fdfc 	bl	801317c <xTaskGetTickCount>
 8002584:	60f8      	str	r0, [r7, #12]
	{
 8002586:	e7f5      	b.n	8002574 <TaskPower+0x20>

08002588 <TaskRemote>:
// Task Remote
// - Starts Interrupt UART communication with the Receiver
// - If a complete package of data has arrived from the Remote Controller to the Buffer,
//   it processes that and saves it to the corresponding Global variables.
void TaskRemote(void const *argument)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	; 0x28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50; //Hz
 8002590:	2332      	movs	r3, #50	; 0x32
 8002592:	61bb      	str	r3, [r7, #24]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8002594:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	fbb2 f3f3 	udiv	r3, r2, r3
 800259e:	617b      	str	r3, [r7, #20]

	static uint16_t channelValues[IBUS_MAXCHANNELS];// Output values of the channels (1000 ... 2000)

	HAL_UART_Receive_DMA(&huart2, &Uart2Buffer, 64);
 80025a0:	2240      	movs	r2, #64	; 0x40
 80025a2:	496b      	ldr	r1, [pc, #428]	; (8002750 <TaskRemote+0x1c8>)
 80025a4:	486b      	ldr	r0, [pc, #428]	; (8002754 <TaskRemote+0x1cc>)
 80025a6:	f00d fde4 	bl	8010172 <HAL_UART_Receive_DMA>

	xLastWakeTime = xTaskGetTickCount();
 80025aa:	f010 fde7 	bl	801317c <xTaskGetTickCount>
 80025ae:	4603      	mov	r3, r0
 80025b0:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	while (1)
	{
		//Log("R-WS");
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 80025b2:	f107 030c 	add.w	r3, r7, #12
 80025b6:	6979      	ldr	r1, [r7, #20]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f010 fc0b 	bl	8012dd4 <vTaskDelayUntil>
		//Log("R-WE");

		TickType_t time = xTaskGetTickCount();
 80025be:	f010 fddd 	bl	801317c <xTaskGetTickCount>
 80025c2:	6138      	str	r0, [r7, #16]

		//Log("R-RBFS-WS");
		if (osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever) == osOK)
 80025c4:	4b64      	ldr	r3, [pc, #400]	; (8002758 <TaskRemote+0x1d0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f04f 31ff 	mov.w	r1, #4294967295
 80025cc:	4618      	mov	r0, r3
 80025ce:	f00f faf3 	bl	8011bb8 <osSemaphoreWait>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1ec      	bne.n	80025b2 <TaskRemote+0x2a>
		{
			//Log("R-RBFS-WE");

			//Find the last complete 32 bit iBus packet in the 64 bit RemoteBuffer
			//Log("R-RBM-WS");
			if (osMutexWait(RemoteBufferMutexHandle, osWaitForever) == osOK)
 80025d8:	4b60      	ldr	r3, [pc, #384]	; (800275c <TaskRemote+0x1d4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f04f 31ff 	mov.w	r1, #4294967295
 80025e0:	4618      	mov	r0, r3
 80025e2:	f00f fa33 	bl	8011a4c <osMutexWait>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d12f      	bne.n	800264c <TaskRemote+0xc4>
			{
				//Log("R-RBM-WE");

				for (int i = 32; i >= 0; i--)
 80025ec:	2320      	movs	r3, #32
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
 80025f0:	e024      	b.n	800263c <TaskRemote+0xb4>
				{
					if (RemoteBuffer[i] == 0x20 && RemoteBuffer[i+1] == 0x40)
 80025f2:	4a5b      	ldr	r2, [pc, #364]	; (8002760 <TaskRemote+0x1d8>)
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	4413      	add	r3, r2
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d11a      	bne.n	8002636 <TaskRemote+0xae>
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	3301      	adds	r3, #1
 8002604:	4a56      	ldr	r2, [pc, #344]	; (8002760 <TaskRemote+0x1d8>)
 8002606:	5cd3      	ldrb	r3, [r2, r3]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b40      	cmp	r3, #64	; 0x40
 800260c:	d113      	bne.n	8002636 <TaskRemote+0xae>
					{
						for (int j = 0; j < IBUS_PACKET_SIZE; j++)
 800260e:	2300      	movs	r3, #0
 8002610:	623b      	str	r3, [r7, #32]
 8002612:	e00d      	b.n	8002630 <TaskRemote+0xa8>
							LastIbusPacket[j] = RemoteBuffer[i+j];
 8002614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	4413      	add	r3, r2
 800261a:	4a51      	ldr	r2, [pc, #324]	; (8002760 <TaskRemote+0x1d8>)
 800261c:	5cd3      	ldrb	r3, [r2, r3]
 800261e:	b2d9      	uxtb	r1, r3
 8002620:	4a50      	ldr	r2, [pc, #320]	; (8002764 <TaskRemote+0x1dc>)
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	4413      	add	r3, r2
 8002626:	460a      	mov	r2, r1
 8002628:	701a      	strb	r2, [r3, #0]
						for (int j = 0; j < IBUS_PACKET_SIZE; j++)
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	3301      	adds	r3, #1
 800262e:	623b      	str	r3, [r7, #32]
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	2b1f      	cmp	r3, #31
 8002634:	ddee      	ble.n	8002614 <TaskRemote+0x8c>
				for (int i = 32; i >= 0; i--)
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	3b01      	subs	r3, #1
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	2b00      	cmp	r3, #0
 8002640:	dad7      	bge.n	80025f2 <TaskRemote+0x6a>
					}
				}

				//Log("R-RBM-RS");
				osMutexRelease(RemoteBufferMutexHandle);
 8002642:	4b46      	ldr	r3, [pc, #280]	; (800275c <TaskRemote+0x1d4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f00f fa4e 	bl	8011ae8 <osMutexRelease>
			// And cycle through the raw data and convert it to actual integer values
			// ibus pattern example:
			// i=0  1     2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21  22 23 24  25  26 27  28 28  30 31
			//   20 40    DB 5  DC 5  54 5  DC 5  E8 3  D0 7  D2 5  E8 3  DC 5  DC 5   DC 5   DC 5   DC 5   DC 5   DA F3
			// | Header | CH1 | CH2 | CH3 | CH4 | CH5 | CH6 | CH7 | CH8 | CH9 | CH10 | CH11 | CH12 | CH13 | CH14 | Checksum |
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 800264c:	2300      	movs	r3, #0
 800264e:	61fb      	str	r3, [r7, #28]
 8002650:	e018      	b.n	8002684 <TaskRemote+0xfc>
				channelValues[i] = (LastIbusPacket[3 + 2 * i] << 8) + LastIbusPacket[2 + 2 * i];
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	3303      	adds	r3, #3
 8002658:	4a42      	ldr	r2, [pc, #264]	; (8002764 <TaskRemote+0x1dc>)
 800265a:	5cd3      	ldrb	r3, [r2, r3]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	b29b      	uxth	r3, r3
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	b29a      	uxth	r2, r3
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	3301      	adds	r3, #1
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	493e      	ldr	r1, [pc, #248]	; (8002764 <TaskRemote+0x1dc>)
 800266c:	5ccb      	ldrb	r3, [r1, r3]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	b29b      	uxth	r3, r3
 8002672:	4413      	add	r3, r2
 8002674:	b299      	uxth	r1, r3
 8002676:	4a3c      	ldr	r2, [pc, #240]	; (8002768 <TaskRemote+0x1e0>)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3301      	adds	r3, #1
 8002682:	61fb      	str	r3, [r7, #28]
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	2b09      	cmp	r3, #9
 8002688:	dde3      	ble.n	8002652 <TaskRemote+0xca>

			// Setting the speed
			//Log("R-RDM-WS");
			if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 800268a:	4b38      	ldr	r3, [pc, #224]	; (800276c <TaskRemote+0x1e4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f04f 31ff 	mov.w	r1, #4294967295
 8002692:	4618      	mov	r0, r3
 8002694:	f00f f9da 	bl	8011a4c <osMutexWait>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d151      	bne.n	8002742 <TaskRemote+0x1ba>
//						sprintf(str, "%d ", channelValues[i]);
//						HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
//					}
//					HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

				Throttle_in = channelValues[THROTTLE_CHANNEL] - 1000;
 800269e:	4b32      	ldr	r3, [pc, #200]	; (8002768 <TaskRemote+0x1e0>)
 80026a0:	889b      	ldrh	r3, [r3, #4]
 80026a2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	4b31      	ldr	r3, [pc, #196]	; (8002770 <TaskRemote+0x1e8>)
 80026aa:	801a      	strh	r2, [r3, #0]
				// Limit input Throttle, so the Controllers can keep the drone stable at high RPM, too
				if (Throttle_in > 800)
 80026ac:	4b30      	ldr	r3, [pc, #192]	; (8002770 <TaskRemote+0x1e8>)
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80026b4:	d903      	bls.n	80026be <TaskRemote+0x136>
					Throttle_in = 800;
 80026b6:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <TaskRemote+0x1e8>)
 80026b8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80026bc:	801a      	strh	r2, [r3, #0]

				Pitch_in = channelValues[PITCH_CHANNEL] - 1500;
 80026be:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <TaskRemote+0x1e0>)
 80026c0:	885b      	ldrh	r3, [r3, #2]
 80026c2:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	b21a      	sxth	r2, r3
 80026ca:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <TaskRemote+0x1ec>)
 80026cc:	801a      	strh	r2, [r3, #0]
				Roll_in = channelValues[ROLL_CHANNEL] - 1500;
 80026ce:	4b26      	ldr	r3, [pc, #152]	; (8002768 <TaskRemote+0x1e0>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	b21a      	sxth	r2, r3
 80026da:	4b27      	ldr	r3, [pc, #156]	; (8002778 <TaskRemote+0x1f0>)
 80026dc:	801a      	strh	r2, [r3, #0]
				Yaw_in = channelValues[YAW_CHANNEL] - 1500;
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <TaskRemote+0x1e0>)
 80026e0:	88db      	ldrh	r3, [r3, #6]
 80026e2:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	b21a      	sxth	r2, r3
 80026ea:	4b24      	ldr	r3, [pc, #144]	; (800277c <TaskRemote+0x1f4>)
 80026ec:	801a      	strh	r2, [r3, #0]

				SWA = channelValues[SWA_CHANNEL] - 1000;
 80026ee:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <TaskRemote+0x1e0>)
 80026f0:	891b      	ldrh	r3, [r3, #8]
 80026f2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	4b21      	ldr	r3, [pc, #132]	; (8002780 <TaskRemote+0x1f8>)
 80026fa:	801a      	strh	r2, [r3, #0]
				SWB = channelValues[SWB_CHANNEL] - 1000;
 80026fc:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <TaskRemote+0x1e0>)
 80026fe:	895b      	ldrh	r3, [r3, #10]
 8002700:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002704:	b29a      	uxth	r2, r3
 8002706:	4b1f      	ldr	r3, [pc, #124]	; (8002784 <TaskRemote+0x1fc>)
 8002708:	801a      	strh	r2, [r3, #0]
				SWC = channelValues[SWC_CHANNEL] - 1000;
 800270a:	4b17      	ldr	r3, [pc, #92]	; (8002768 <TaskRemote+0x1e0>)
 800270c:	899b      	ldrh	r3, [r3, #12]
 800270e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002712:	b29a      	uxth	r2, r3
 8002714:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <TaskRemote+0x200>)
 8002716:	801a      	strh	r2, [r3, #0]
				SWD = channelValues[SWD_CHANNEL] - 1000;
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <TaskRemote+0x1e0>)
 800271a:	89db      	ldrh	r3, [r3, #14]
 800271c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002720:	b29a      	uxth	r2, r3
 8002722:	4b1a      	ldr	r3, [pc, #104]	; (800278c <TaskRemote+0x204>)
 8002724:	801a      	strh	r2, [r3, #0]
				VRA = channelValues[VRA_CHANNEL] - 1000;
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <TaskRemote+0x1e0>)
 8002728:	8a1b      	ldrh	r3, [r3, #16]
 800272a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800272e:	b29a      	uxth	r2, r3
 8002730:	4b17      	ldr	r3, [pc, #92]	; (8002790 <TaskRemote+0x208>)
 8002732:	801a      	strh	r2, [r3, #0]
				VRB = channelValues[VRB_CHANNEL] - 1000;
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <TaskRemote+0x1e0>)
 8002736:	8a5b      	ldrh	r3, [r3, #18]
 8002738:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800273c:	b29a      	uxth	r2, r3
 800273e:	4b15      	ldr	r3, [pc, #84]	; (8002794 <TaskRemote+0x20c>)
 8002740:	801a      	strh	r2, [r3, #0]
				//HAL_UART_Transmit(&huart3, str1, 11, HAL_MAX_DELAY);


			}
			//Log("R-RDM-RS");
			osMutexRelease(RemoteDataMutexHandle);
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <TaskRemote+0x1e4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f00f f9ce 	bl	8011ae8 <osMutexRelease>
	{
 800274c:	e731      	b.n	80025b2 <TaskRemote+0x2a>
 800274e:	bf00      	nop
 8002750:	20000488 	.word	0x20000488
 8002754:	20000bb8 	.word	0x20000bb8
 8002758:	20000d68 	.word	0x20000d68
 800275c:	20000d58 	.word	0x20000d58
 8002760:	200004c8 	.word	0x200004c8
 8002764:	20000508 	.word	0x20000508
 8002768:	200006c8 	.word	0x200006c8
 800276c:	20000d48 	.word	0x20000d48
 8002770:	20000328 	.word	0x20000328
 8002774:	2000032e 	.word	0x2000032e
 8002778:	2000032a 	.word	0x2000032a
 800277c:	20000332 	.word	0x20000332
 8002780:	20000334 	.word	0x20000334
 8002784:	20000336 	.word	0x20000336
 8002788:	20000338 	.word	0x20000338
 800278c:	2000033a 	.word	0x2000033a
 8002790:	2000033c 	.word	0x2000033c
 8002794:	2000033e 	.word	0x2000033e

08002798 <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 80027a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80027a6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80027bc <FusionRadiansToDegrees+0x24>
 80027aa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80027ae:	eeb0 0a67 	vmov.f32	s0, s15
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	42652ee0 	.word	0x42652ee0

080027c0 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 80027ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80027ce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80027d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027da:	d802      	bhi.n	80027e2 <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 80027dc:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8002810 <FusionAsin+0x50>
 80027e0:	e011      	b.n	8002806 <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 80027e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80027e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f2:	db02      	blt.n	80027fa <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 80027f4:	eddf 7a07 	vldr	s15, [pc, #28]	; 8002814 <FusionAsin+0x54>
 80027f8:	e005      	b.n	8002806 <FusionAsin+0x46>
    }
    return asinf(value);
 80027fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80027fe:	f016 ff07 	bl	8019610 <asinf>
 8002802:	eef0 7a40 	vmov.f32	s15, s0
}
 8002806:	eeb0 0a67 	vmov.f32	s0, s15
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	bfc90fdb 	.word	0xbfc90fdb
 8002814:	3fc90fdb 	.word	0x3fc90fdb

08002818 <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8002818:	b480      	push	{r7}
 800281a:	b091      	sub	sp, #68	; 0x44
 800281c:	af00      	add	r7, sp, #0
 800281e:	eeb0 5a40 	vmov.f32	s10, s0
 8002822:	eef0 5a60 	vmov.f32	s11, s1
 8002826:	eeb0 6a41 	vmov.f32	s12, s2
 800282a:	eef0 6a61 	vmov.f32	s13, s3
 800282e:	eeb0 7a42 	vmov.f32	s14, s4
 8002832:	eef0 7a62 	vmov.f32	s15, s5
 8002836:	ed87 5a07 	vstr	s10, [r7, #28]
 800283a:	edc7 5a08 	vstr	s11, [r7, #32]
 800283e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8002842:	edc7 6a04 	vstr	s13, [r7, #16]
 8002846:	ed87 7a05 	vstr	s14, [r7, #20]
 800284a:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 800284e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002852:	edd7 7a04 	vldr	s15, [r7, #16]
 8002856:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800285a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 800285e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002862:	edd7 7a05 	vldr	s15, [r7, #20]
 8002866:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800286a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 800286e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002872:	edd7 7a06 	vldr	s15, [r7, #24]
 8002876:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800287a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800287e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002882:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002886:	ca07      	ldmia	r2, {r0, r1, r2}
 8002888:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800288c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800288e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002892:	ee06 1a90 	vmov	s13, r1
 8002896:	ee07 2a10 	vmov	s14, r2
 800289a:	ee07 3a90 	vmov	s15, r3
}
 800289e:	eeb0 0a66 	vmov.f32	s0, s13
 80028a2:	eef0 0a47 	vmov.f32	s1, s14
 80028a6:	eeb0 1a67 	vmov.f32	s2, s15
 80028aa:	3744      	adds	r7, #68	; 0x44
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80028b4:	b480      	push	{r7}
 80028b6:	b091      	sub	sp, #68	; 0x44
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	eeb0 5a40 	vmov.f32	s10, s0
 80028be:	eef0 5a60 	vmov.f32	s11, s1
 80028c2:	eeb0 6a41 	vmov.f32	s12, s2
 80028c6:	eef0 6a61 	vmov.f32	s13, s3
 80028ca:	eeb0 7a42 	vmov.f32	s14, s4
 80028ce:	eef0 7a62 	vmov.f32	s15, s5
 80028d2:	ed87 5a07 	vstr	s10, [r7, #28]
 80028d6:	edc7 5a08 	vstr	s11, [r7, #32]
 80028da:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80028de:	edc7 6a04 	vstr	s13, [r7, #16]
 80028e2:	ed87 7a05 	vstr	s14, [r7, #20]
 80028e6:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 80028ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80028ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80028f2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80028f6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 80028fa:	ed97 7a08 	vldr	s14, [r7, #32]
 80028fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002902:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002906:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800290a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800290e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002912:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002916:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800291a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800291e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002922:	ca07      	ldmia	r2, {r0, r1, r2}
 8002924:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002928:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800292a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800292c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800292e:	ee06 1a90 	vmov	s13, r1
 8002932:	ee07 2a10 	vmov	s14, r2
 8002936:	ee07 3a90 	vmov	s15, r3
}
 800293a:	eeb0 0a66 	vmov.f32	s0, s13
 800293e:	eef0 0a47 	vmov.f32	s1, s14
 8002942:	eeb0 1a67 	vmov.f32	s2, s15
 8002946:	3744      	adds	r7, #68	; 0x44
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8002950:	b084      	sub	sp, #16
 8002952:	b480      	push	{r7}
 8002954:	b08f      	sub	sp, #60	; 0x3c
 8002956:	af00      	add	r7, sp, #0
 8002958:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 800295c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8002960:	eef0 6a40 	vmov.f32	s13, s0
 8002964:	eeb0 7a60 	vmov.f32	s14, s1
 8002968:	eef0 7a41 	vmov.f32	s15, s2
 800296c:	edc7 6a05 	vstr	s13, [r7, #20]
 8002970:	ed87 7a06 	vstr	s14, [r7, #24]
 8002974:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 8002978:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800297c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002980:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002984:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002988:	edd7 7a06 	vldr	s15, [r7, #24]
 800298c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002990:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002994:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002998:	edd7 7a07 	vldr	s15, [r7, #28]
 800299c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80029a4:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 80029a8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80029ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80029b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029b4:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80029b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80029bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029c4:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80029c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80029cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80029d4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 80029d8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80029dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80029e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e4:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80029e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80029ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029f4:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80029f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80029fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a00:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002a04:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 8002a08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a0c:	f107 0220 	add.w	r2, r7, #32
 8002a10:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1c:	ee06 1a90 	vmov	s13, r1
 8002a20:	ee07 2a10 	vmov	s14, r2
 8002a24:	ee07 3a90 	vmov	s15, r3
#undef R
}
 8002a28:	eeb0 0a66 	vmov.f32	s0, s13
 8002a2c:	eef0 0a47 	vmov.f32	s1, s14
 8002a30:	eeb0 1a67 	vmov.f32	s2, s15
 8002a34:	373c      	adds	r7, #60	; 0x3c
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	b004      	add	sp, #16
 8002a3e:	4770      	bx	lr

08002a40 <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b090      	sub	sp, #64	; 0x40
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	eeb0 6a40 	vmov.f32	s12, s0
 8002a4a:	eef0 6a60 	vmov.f32	s13, s1
 8002a4e:	eeb0 7a41 	vmov.f32	s14, s2
 8002a52:	eef0 7a61 	vmov.f32	s15, s3
 8002a56:	ed87 6a04 	vstr	s12, [r7, #16]
 8002a5a:	edc7 6a05 	vstr	s13, [r7, #20]
 8002a5e:	ed87 7a06 	vstr	s14, [r7, #24]
 8002a62:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 8002a66:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a72:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 8002a7e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a82:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a8a:	edd7 6a06 	vldr	s13, [r7, #24]
 8002a8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a96:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002a9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aae:	eef0 0a67 	vmov.f32	s1, s15
 8002ab2:	eeb0 0a66 	vmov.f32	s0, s13
 8002ab6:	f016 fdd7 	bl	8019668 <atan2f>
 8002aba:	eef0 7a40 	vmov.f32	s15, s0
 8002abe:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac2:	f7ff fe69 	bl	8002798 <FusionRadiansToDegrees>
 8002ac6:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8002aca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 8002ace:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ad2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ad6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ada:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ade:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ae2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002aee:	eeb0 0a67 	vmov.f32	s0, s15
 8002af2:	f7ff fe65 	bl	80027c0 <FusionAsin>
 8002af6:	eef0 7a40 	vmov.f32	s15, s0
 8002afa:	eeb0 0a67 	vmov.f32	s0, s15
 8002afe:	f7ff fe4b 	bl	8002798 <FusionRadiansToDegrees>
 8002b02:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8002b06:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 8002b0a:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b16:	edd7 6a05 	vldr	s13, [r7, #20]
 8002b1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b22:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002b26:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b32:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b3a:	eef0 0a67 	vmov.f32	s1, s15
 8002b3e:	eeb0 0a66 	vmov.f32	s0, s13
 8002b42:	f016 fd91 	bl	8019668 <atan2f>
 8002b46:	eef0 7a40 	vmov.f32	s15, s0
 8002b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b4e:	f7ff fe23 	bl	8002798 <FusionRadiansToDegrees>
 8002b52:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8002b56:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 8002b5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b5e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002b62:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6e:	ee06 1a90 	vmov	s13, r1
 8002b72:	ee07 2a10 	vmov	s14, r2
 8002b76:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8002b7a:	eeb0 0a66 	vmov.f32	s0, s13
 8002b7e:	eef0 0a47 	vmov.f32	s1, s14
 8002b82:	eeb0 1a67 	vmov.f32	s2, s15
 8002b86:	3740      	adds	r7, #64	; 0x40
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <FusionCalibrationInertial>:
 * @param misalignment Misalignment matrix.
 * @param sensitivity Sensitivity.
 * @param offset Offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationInertial(const FusionVector uncalibrated, const FusionMatrix misalignment, const FusionVector sensitivity, const FusionVector offset) {
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	b5b0      	push	{r4, r5, r7, lr}
 8002b90:	b09e      	sub	sp, #120	; 0x78
 8002b92:	af06      	add	r7, sp, #24
 8002b94:	eef0 4a41 	vmov.f32	s9, s2
 8002b98:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8002b9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002ba0:	eeb0 5a61 	vmov.f32	s10, s3
 8002ba4:	eef0 5a42 	vmov.f32	s11, s4
 8002ba8:	eeb0 6a62 	vmov.f32	s12, s5
 8002bac:	eef0 6a43 	vmov.f32	s13, s6
 8002bb0:	eeb0 7a63 	vmov.f32	s14, s7
 8002bb4:	eef0 7a44 	vmov.f32	s15, s8
 8002bb8:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 8002bbc:	edc7 0a0c 	vstr	s1, [r7, #48]	; 0x30
 8002bc0:	edc7 4a0d 	vstr	s9, [r7, #52]	; 0x34
 8002bc4:	ed87 5a08 	vstr	s10, [r7, #32]
 8002bc8:	edc7 5a09 	vstr	s11, [r7, #36]	; 0x24
 8002bcc:	ed87 6a0a 	vstr	s12, [r7, #40]	; 0x28
 8002bd0:	edc7 6a05 	vstr	s13, [r7, #20]
 8002bd4:	ed87 7a06 	vstr	s14, [r7, #24]
 8002bd8:	edc7 7a07 	vstr	s15, [r7, #28]
    return FusionMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, offset), sensitivity));
 8002bdc:	ed97 5a05 	vldr	s10, [r7, #20]
 8002be0:	edd7 5a06 	vldr	s11, [r7, #24]
 8002be4:	ed97 6a07 	vldr	s12, [r7, #28]
 8002be8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002bec:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002bf0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002bf4:	eef0 1a45 	vmov.f32	s3, s10
 8002bf8:	eeb0 2a65 	vmov.f32	s4, s11
 8002bfc:	eef0 2a46 	vmov.f32	s5, s12
 8002c00:	eeb0 0a66 	vmov.f32	s0, s13
 8002c04:	eef0 0a47 	vmov.f32	s1, s14
 8002c08:	eeb0 1a67 	vmov.f32	s2, s15
 8002c0c:	f7ff fe04 	bl	8002818 <FusionVectorSubtract>
 8002c10:	eef0 6a40 	vmov.f32	s13, s0
 8002c14:	eeb0 7a60 	vmov.f32	s14, s1
 8002c18:	eef0 7a41 	vmov.f32	s15, s2
 8002c1c:	edc7 6a12 	vstr	s13, [r7, #72]	; 0x48
 8002c20:	ed87 7a13 	vstr	s14, [r7, #76]	; 0x4c
 8002c24:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002c28:	ed97 5a08 	vldr	s10, [r7, #32]
 8002c2c:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 8002c30:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8002c34:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002c38:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002c3c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002c40:	eef0 1a45 	vmov.f32	s3, s10
 8002c44:	eeb0 2a65 	vmov.f32	s4, s11
 8002c48:	eef0 2a46 	vmov.f32	s5, s12
 8002c4c:	eeb0 0a66 	vmov.f32	s0, s13
 8002c50:	eef0 0a47 	vmov.f32	s1, s14
 8002c54:	eeb0 1a67 	vmov.f32	s2, s15
 8002c58:	f7ff fe2c 	bl	80028b4 <FusionVectorHadamardProduct>
 8002c5c:	eef0 6a40 	vmov.f32	s13, s0
 8002c60:	eeb0 7a60 	vmov.f32	s14, s1
 8002c64:	eef0 7a41 	vmov.f32	s15, s2
 8002c68:	edc7 6a15 	vstr	s13, [r7, #84]	; 0x54
 8002c6c:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58
 8002c70:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 8002c74:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002c78:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002c7c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002c80:	466d      	mov	r5, sp
 8002c82:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8002c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	602b      	str	r3, [r5, #0]
 8002c8e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c94:	eeb0 0a66 	vmov.f32	s0, s13
 8002c98:	eef0 0a47 	vmov.f32	s1, s14
 8002c9c:	eeb0 1a67 	vmov.f32	s2, s15
 8002ca0:	f7ff fe56 	bl	8002950 <FusionMatrixMultiplyVector>
 8002ca4:	eef0 6a40 	vmov.f32	s13, s0
 8002ca8:	eeb0 7a60 	vmov.f32	s14, s1
 8002cac:	eef0 7a41 	vmov.f32	s15, s2
 8002cb0:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 8002cb4:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 8002cb8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8002cbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002cbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc2:	ee06 1a90 	vmov	s13, r1
 8002cc6:	ee07 2a10 	vmov	s14, r2
 8002cca:	ee07 3a90 	vmov	s15, r3
}
 8002cce:	eeb0 0a66 	vmov.f32	s0, s13
 8002cd2:	eef0 0a47 	vmov.f32	s1, s14
 8002cd6:	eeb0 1a67 	vmov.f32	s2, s15
 8002cda:	3760      	adds	r7, #96	; 0x60
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002ce2:	b004      	add	sp, #16
 8002ce4:	4770      	bx	lr

08002ce6 <FusionCalibrationMagnetic>:
 * @param uncalibrated Uncalibrated measurement.
 * @param softIronMatrix Soft-iron matrix.
 * @param hardIronOffset Hard-iron offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationMagnetic(const FusionVector uncalibrated, const FusionMatrix softIronMatrix, const FusionVector hardIronOffset) {
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	b5b0      	push	{r4, r5, r7, lr}
 8002cea:	b096      	sub	sp, #88	; 0x58
 8002cec:	af06      	add	r7, sp, #24
 8002cee:	eeb0 5a40 	vmov.f32	s10, s0
 8002cf2:	eef0 5a60 	vmov.f32	s11, s1
 8002cf6:	eeb0 6a41 	vmov.f32	s12, s2
 8002cfa:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002cfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002d02:	eef0 6a61 	vmov.f32	s13, s3
 8002d06:	eeb0 7a42 	vmov.f32	s14, s4
 8002d0a:	eef0 7a62 	vmov.f32	s15, s5
 8002d0e:	ed87 5a07 	vstr	s10, [r7, #28]
 8002d12:	edc7 5a08 	vstr	s11, [r7, #32]
 8002d16:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8002d1a:	edc7 6a04 	vstr	s13, [r7, #16]
 8002d1e:	ed87 7a05 	vstr	s14, [r7, #20]
 8002d22:	edc7 7a06 	vstr	s15, [r7, #24]
    return FusionMatrixMultiplyVector(softIronMatrix, FusionVectorSubtract(uncalibrated, hardIronOffset));
 8002d26:	ed97 5a04 	vldr	s10, [r7, #16]
 8002d2a:	edd7 5a05 	vldr	s11, [r7, #20]
 8002d2e:	ed97 6a06 	vldr	s12, [r7, #24]
 8002d32:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d36:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d3e:	eef0 1a45 	vmov.f32	s3, s10
 8002d42:	eeb0 2a65 	vmov.f32	s4, s11
 8002d46:	eef0 2a46 	vmov.f32	s5, s12
 8002d4a:	eeb0 0a66 	vmov.f32	s0, s13
 8002d4e:	eef0 0a47 	vmov.f32	s1, s14
 8002d52:	eeb0 1a67 	vmov.f32	s2, s15
 8002d56:	f7ff fd5f 	bl	8002818 <FusionVectorSubtract>
 8002d5a:	eef0 6a40 	vmov.f32	s13, s0
 8002d5e:	eeb0 7a60 	vmov.f32	s14, s1
 8002d62:	eef0 7a41 	vmov.f32	s15, s2
 8002d66:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 8002d6a:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8002d6e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8002d72:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002d76:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002d7a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002d7e:	466d      	mov	r5, sp
 8002d80:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8002d84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d88:	6823      	ldr	r3, [r4, #0]
 8002d8a:	602b      	str	r3, [r5, #0]
 8002d8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d92:	eeb0 0a66 	vmov.f32	s0, s13
 8002d96:	eef0 0a47 	vmov.f32	s1, s14
 8002d9a:	eeb0 1a67 	vmov.f32	s2, s15
 8002d9e:	f7ff fdd7 	bl	8002950 <FusionMatrixMultiplyVector>
 8002da2:	eef0 6a40 	vmov.f32	s13, s0
 8002da6:	eeb0 7a60 	vmov.f32	s14, s1
 8002daa:	eef0 7a41 	vmov.f32	s15, s2
 8002dae:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8002db2:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8002db6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8002dba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	ee06 1a90 	vmov	s13, r1
 8002dc4:	ee07 2a10 	vmov	s14, r2
 8002dc8:	ee07 3a90 	vmov	s15, r3
}
 8002dcc:	eeb0 0a66 	vmov.f32	s0, s13
 8002dd0:	eef0 0a47 	vmov.f32	s1, s14
 8002dd4:	eeb0 1a67 	vmov.f32	s2, s15
 8002dd8:	3740      	adds	r7, #64	; 0x40
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002de0:	b004      	add	sp, #16
 8002de2:	4770      	bx	lr
 8002de4:	0000      	movs	r0, r0
	...

08002de8 <TaskSensorData>:
extern osMutexId ImuMutexHandle;
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;

void TaskSensorData(void const *argument)
{
 8002de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dea:	b0e5      	sub	sp, #404	; 0x194
 8002dec:	af06      	add	r7, sp, #24
 8002dee:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002df2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002df6:	6018      	str	r0, [r3, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 8002df8:	23c8      	movs	r3, #200	; 0xc8
 8002dfa:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8002dfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e02:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

	bool Recalibrate = false;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177


	LPF GyroLPF[3];

	GyroLPF[0].T = 1.0 / xFrequency;
 8002e14:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8002e18:	f7fd fb9c 	bl	8000554 <__aeabi_ui2d>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	f04f 0000 	mov.w	r0, #0
 8002e24:	49cf      	ldr	r1, [pc, #828]	; (8003164 <TaskSensorData+0x37c>)
 8002e26:	f7fd fd39 	bl	800089c <__aeabi_ddiv>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4610      	mov	r0, r2
 8002e30:	4619      	mov	r1, r3
 8002e32:	f7fd ff01 	bl	8000c38 <__aeabi_d2f>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	GyroLPF[0].f_cutoff = 50;
 8002e3c:	4bca      	ldr	r3, [pc, #808]	; (8003168 <TaskSensorData+0x380>)
 8002e3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	LPF_Init(&(GyroLPF[0]));
 8002e42:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe fc99 	bl	800177e <LPF_Init>

	GyroLPF[1].T = 1.0 / xFrequency;
 8002e4c:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8002e50:	f7fd fb80 	bl	8000554 <__aeabi_ui2d>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	f04f 0000 	mov.w	r0, #0
 8002e5c:	49c1      	ldr	r1, [pc, #772]	; (8003164 <TaskSensorData+0x37c>)
 8002e5e:	f7fd fd1d 	bl	800089c <__aeabi_ddiv>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f7fd fee5 	bl	8000c38 <__aeabi_d2f>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	GyroLPF[1].f_cutoff = 50;
 8002e74:	4bbc      	ldr	r3, [pc, #752]	; (8003168 <TaskSensorData+0x380>)
 8002e76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	LPF_Init(&(GyroLPF[1]));
 8002e7a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002e7e:	331c      	adds	r3, #28
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe fc7c 	bl	800177e <LPF_Init>

	GyroLPF[2].T = 1.0 / xFrequency;
 8002e86:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8002e8a:	f7fd fb63 	bl	8000554 <__aeabi_ui2d>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	f04f 0000 	mov.w	r0, #0
 8002e96:	49b3      	ldr	r1, [pc, #716]	; (8003164 <TaskSensorData+0x37c>)
 8002e98:	f7fd fd00 	bl	800089c <__aeabi_ddiv>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f7fd fec8 	bl	8000c38 <__aeabi_d2f>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	GyroLPF[2].f_cutoff = 50;
 8002eae:	4bae      	ldr	r3, [pc, #696]	; (8003168 <TaskSensorData+0x380>)
 8002eb0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	LPF_Init(&(GyroLPF[2]));
 8002eb4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002eb8:	3338      	adds	r3, #56	; 0x38
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe fc5f 	bl	800177e <LPF_Init>
	// Fusion algorithm

	// Define calibration (replace with actual calibration data if available)
	const FusionMatrix gyroscopeMisalignment = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f};
	const FusionVector gyroscopeSensitivity = {1.0f, 1.0f, 1.0f};
	const FusionVector gyroscopeOffset = {0.0f, 0.0f, 0.0f};
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	const FusionMatrix accelerometerMisalignment = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f};
	const FusionVector accelerometerSensitivity = {1.0f, 1.0f, 1.0f};
	const FusionVector accelerometerOffset = {0.0f, 0.0f, 0.0f};
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	const FusionMatrix softIronMatrix = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f};
	const FusionVector hardIronOffset = {0.0f, 0.0f, 0.0f};
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

	// Initialize
	FusionOffset offset;
	FusionAhrs ahrs;

	FusionOffsetInitialise(&offset, xFrequency);
 8002f08:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002f0c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f10:	4618      	mov	r0, r3
 8002f12:	f005 fd85 	bl	8008a20 <FusionOffsetInitialise>
	FusionAhrsInitialise(&ahrs);
 8002f16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f004 fc2e 	bl	800777c <FusionAhrsInitialise>

	// Set AHRS algorithm settings
	FusionAhrsSettings fusionSettings;
	fusionSettings.convention = FusionConventionNwu;
 8002f20:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002f24:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f28:	2200      	movs	r2, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
	fusionSettings.gain = 0.5f;
 8002f2c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002f30:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f34:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002f38:	605a      	str	r2, [r3, #4]
	fusionSettings.gyroscopeRange = 2000.0f;
 8002f3a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002f3e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f42:	4a8a      	ldr	r2, [pc, #552]	; (800316c <TaskSensorData+0x384>)
 8002f44:	609a      	str	r2, [r3, #8]
	fusionSettings.accelerationRejection = 10.0f;
 8002f46:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002f4a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f4e:	4a88      	ldr	r2, [pc, #544]	; (8003170 <TaskSensorData+0x388>)
 8002f50:	60da      	str	r2, [r3, #12]
	fusionSettings.magneticRejection = 10.0f;
 8002f52:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002f56:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f5a:	4a85      	ldr	r2, [pc, #532]	; (8003170 <TaskSensorData+0x388>)
 8002f5c:	611a      	str	r2, [r3, #16]
	fusionSettings.recoveryTriggerPeriod = 5.0f * xFrequency;
 8002f5e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002f62:	ee07 3a90 	vmov	s15, r3
 8002f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f6a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f76:	ee17 2a90 	vmov	r2, s15
 8002f7a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002f7e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f82:	615a      	str	r2, [r3, #20]
	FusionAhrsSetSettings(&ahrs, &fusionSettings);
 8002f84:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f88:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f004 fc76 	bl	8007880 <FusionAhrsSetSettings>



	xLastWakeTime = xTaskGetTickCount();
 8002f94:	f010 f8f2 	bl	801317c <xTaskGetTickCount>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8002f9e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8002fa2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f00f ff14 	bl	8012dd4 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8002fac:	f010 f8e6 	bl	801317c <xTaskGetTickCount>
 8002fb0:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168

		// IMU Data
		if (IsImuAvailable)
 8002fb4:	4b6f      	ldr	r3, [pc, #444]	; (8003174 <TaskSensorData+0x38c>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 825e 	beq.w	800347a <TaskSensorData+0x692>
		{
			Log("SD-RDM-WS");
 8002fbe:	486e      	ldr	r0, [pc, #440]	; (8003178 <TaskSensorData+0x390>)
 8002fc0:	f7fe fb6a 	bl	8001698 <Log>
			if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8002fc4:	4b6d      	ldr	r3, [pc, #436]	; (800317c <TaskSensorData+0x394>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f00e fd3d 	bl	8011a4c <osMutexWait>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10b      	bne.n	8002ff0 <TaskSensorData+0x208>
			{
				Log("SD-RDM-WE");
 8002fd8:	4869      	ldr	r0, [pc, #420]	; (8003180 <TaskSensorData+0x398>)
 8002fda:	f7fe fb5d 	bl	8001698 <Log>
				if (SWC > 990)
 8002fde:	4b69      	ldr	r3, [pc, #420]	; (8003184 <TaskSensorData+0x39c>)
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	f240 32de 	movw	r2, #990	; 0x3de
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d902      	bls.n	8002ff0 <TaskSensorData+0x208>
				{
					Recalibrate = true;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
				}
			}
			Log("SD-RDM-RS");
 8002ff0:	4865      	ldr	r0, [pc, #404]	; (8003188 <TaskSensorData+0x3a0>)
 8002ff2:	f7fe fb51 	bl	8001698 <Log>
			osMutexRelease(RemoteDataMutexHandle);
 8002ff6:	4b61      	ldr	r3, [pc, #388]	; (800317c <TaskSensorData+0x394>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f00e fd74 	bl	8011ae8 <osMutexRelease>
			Log("SD-RDM-RE");
 8003000:	4862      	ldr	r0, [pc, #392]	; (800318c <TaskSensorData+0x3a4>)
 8003002:	f7fe fb49 	bl	8001698 <Log>

			//MPU9250_GetData(AccData, &TempData, GyroData, MagData, false);
			//MPU_readRawData(&hspi2, &MPU9250);
			MPU_readProcessedData(&hspi2, &MPU9250);
 8003006:	4962      	ldr	r1, [pc, #392]	; (8003190 <TaskSensorData+0x3a8>)
 8003008:	4862      	ldr	r0, [pc, #392]	; (8003194 <TaskSensorData+0x3ac>)
 800300a:	f007 fa8d 	bl	800a528 <MPU_readProcessedData>
			//MPU_calcAttitude(&hspi2, &MPU9250);

			BMP280_measure(&BMP280);
 800300e:	4862      	ldr	r0, [pc, #392]	; (8003198 <TaskSensorData+0x3b0>)
 8003010:	f006 fafa 	bl	8009608 <BMP280_measure>

			Log("SD-IM-WS");
 8003014:	4861      	ldr	r0, [pc, #388]	; (800319c <TaskSensorData+0x3b4>)
 8003016:	f7fe fb3f 	bl	8001698 <Log>
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 800301a:	4b61      	ldr	r3, [pc, #388]	; (80031a0 <TaskSensorData+0x3b8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f04f 31ff 	mov.w	r1, #4294967295
 8003022:	4618      	mov	r0, r3
 8003024:	f00e fd12 	bl	8011a4c <osMutexWait>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	f040 821a 	bne.w	8003464 <TaskSensorData+0x67c>
			{
				Log("SD-IM-WE");
 8003030:	485c      	ldr	r0, [pc, #368]	; (80031a4 <TaskSensorData+0x3bc>)
 8003032:	f7fe fb31 	bl	8001698 <Log>
				if (Recalibrate)
 8003036:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00e      	beq.n	800305c <TaskSensorData+0x274>
				{
					HAL_UART_Transmit(&huart3, "CALIBRATING...\r\n", strlen("CALIBRATING...\r\n"), HAL_MAX_DELAY);
 800303e:	f04f 33ff 	mov.w	r3, #4294967295
 8003042:	2210      	movs	r2, #16
 8003044:	4958      	ldr	r1, [pc, #352]	; (80031a8 <TaskSensorData+0x3c0>)
 8003046:	4859      	ldr	r0, [pc, #356]	; (80031ac <TaskSensorData+0x3c4>)
 8003048:	f00c ffcc 	bl	800ffe4 <HAL_UART_Transmit>
					MPU_calibrateGyro(&hspi2, &MPU9250, 20);
 800304c:	2214      	movs	r2, #20
 800304e:	4950      	ldr	r1, [pc, #320]	; (8003190 <TaskSensorData+0x3a8>)
 8003050:	4850      	ldr	r0, [pc, #320]	; (8003194 <TaskSensorData+0x3ac>)
 8003052:	f007 f86e 	bl	800a132 <MPU_calibrateGyro>

					Recalibrate = false;
 8003056:	2300      	movs	r3, #0
 8003058:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
				}

				AccData[0] = MPU9250.sensorData.ax;
 800305c:	4b4c      	ldr	r3, [pc, #304]	; (8003190 <TaskSensorData+0x3a8>)
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	4a53      	ldr	r2, [pc, #332]	; (80031b0 <TaskSensorData+0x3c8>)
 8003062:	6013      	str	r3, [r2, #0]
				AccData[1] = MPU9250.sensorData.ay;
 8003064:	4b4a      	ldr	r3, [pc, #296]	; (8003190 <TaskSensorData+0x3a8>)
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	4a51      	ldr	r2, [pc, #324]	; (80031b0 <TaskSensorData+0x3c8>)
 800306a:	6053      	str	r3, [r2, #4]
				AccData[2] = MPU9250.sensorData.az;
 800306c:	4b48      	ldr	r3, [pc, #288]	; (8003190 <TaskSensorData+0x3a8>)
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	4a4f      	ldr	r2, [pc, #316]	; (80031b0 <TaskSensorData+0x3c8>)
 8003072:	6093      	str	r3, [r2, #8]
				TempData = MPU9250.sensorData.temp;
 8003074:	4b46      	ldr	r3, [pc, #280]	; (8003190 <TaskSensorData+0x3a8>)
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	4a4e      	ldr	r2, [pc, #312]	; (80031b4 <TaskSensorData+0x3cc>)
 800307a:	6013      	str	r3, [r2, #0]
				//GyroData[0] = MPU9250.sensorData.gx;
				//GyroData[1] = MPU9250.sensorData.gy;
				//GyroData[2] = MPU9250.sensorData.gz;
				GyroData[0] = LPF_Calculate(&(GyroLPF[0]), MPU9250.sensorData.gx);
 800307c:	4b44      	ldr	r3, [pc, #272]	; (8003190 <TaskSensorData+0x3a8>)
 800307e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003082:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003086:	eeb0 0a67 	vmov.f32	s0, s15
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe fc04 	bl	8001898 <LPF_Calculate>
 8003090:	eef0 7a40 	vmov.f32	s15, s0
 8003094:	4b48      	ldr	r3, [pc, #288]	; (80031b8 <TaskSensorData+0x3d0>)
 8003096:	edc3 7a00 	vstr	s15, [r3]
				GyroData[1] = LPF_Calculate(&(GyroLPF[1]), MPU9250.sensorData.gy);
 800309a:	4b3d      	ldr	r3, [pc, #244]	; (8003190 <TaskSensorData+0x3a8>)
 800309c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80030a0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80030a4:	331c      	adds	r3, #28
 80030a6:	eeb0 0a67 	vmov.f32	s0, s15
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe fbf4 	bl	8001898 <LPF_Calculate>
 80030b0:	eef0 7a40 	vmov.f32	s15, s0
 80030b4:	4b40      	ldr	r3, [pc, #256]	; (80031b8 <TaskSensorData+0x3d0>)
 80030b6:	edc3 7a01 	vstr	s15, [r3, #4]
				GyroData[2] = LPF_Calculate(&(GyroLPF[2]), MPU9250.sensorData.gz);
 80030ba:	4b35      	ldr	r3, [pc, #212]	; (8003190 <TaskSensorData+0x3a8>)
 80030bc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80030c0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80030c4:	3338      	adds	r3, #56	; 0x38
 80030c6:	eeb0 0a67 	vmov.f32	s0, s15
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe fbe4 	bl	8001898 <LPF_Calculate>
 80030d0:	eef0 7a40 	vmov.f32	s15, s0
 80030d4:	4b38      	ldr	r3, [pc, #224]	; (80031b8 <TaskSensorData+0x3d0>)
 80030d6:	edc3 7a02 	vstr	s15, [r3, #8]


				// Acquire latest sensor data
				//const clock_t timestamp = clock(); // replace this with actual gyroscope timestamp

				FusionVector accelerometer = {AccData[0], AccData[1], AccData[2]}; // replace this with actual accelerometer data in g
 80030da:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <TaskSensorData+0x3c8>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80030e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <TaskSensorData+0x3c8>)
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80030f0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	4b2e      	ldr	r3, [pc, #184]	; (80031b0 <TaskSensorData+0x3c8>)
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80030fe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003102:	609a      	str	r2, [r3, #8]
				FusionVector gyroscope = {GyroData[0], GyroData[1], GyroData[2]}; // replace this with actual gyroscope data in degrees/s
 8003104:	4b2c      	ldr	r3, [pc, #176]	; (80031b8 <TaskSensorData+0x3d0>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800310c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	4b29      	ldr	r3, [pc, #164]	; (80031b8 <TaskSensorData+0x3d0>)
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800311a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800311e:	605a      	str	r2, [r3, #4]
 8003120:	4b25      	ldr	r3, [pc, #148]	; (80031b8 <TaskSensorData+0x3d0>)
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003128:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800312c:	609a      	str	r2, [r3, #8]
				FusionVector magnetometer = {1.0f, 0.0f, 0.0f}; // replace this with actual magnetometer data in arbitrary units
 800312e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003132:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003136:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003140:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800314e:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	609a      	str	r2, [r3, #8]

				// Apply run-time calibration
				gyroscope = FusionCalibrationInertial(gyroscope, gyroscopeMisalignment, gyroscopeSensitivity, gyroscopeOffset);
 8003158:	edd7 3a3d 	vldr	s7, [r7, #244]	; 0xf4
 800315c:	ed97 4a3e 	vldr	s8, [r7, #248]	; 0xf8
 8003160:	e02c      	b.n	80031bc <TaskSensorData+0x3d4>
 8003162:	bf00      	nop
 8003164:	3ff00000 	.word	0x3ff00000
 8003168:	42480000 	.word	0x42480000
 800316c:	44fa0000 	.word	0x44fa0000
 8003170:	41200000 	.word	0x41200000
 8003174:	20000214 	.word	0x20000214
 8003178:	0801bbec 	.word	0x0801bbec
 800317c:	20000d48 	.word	0x20000d48
 8003180:	0801bbf8 	.word	0x0801bbf8
 8003184:	20000338 	.word	0x20000338
 8003188:	0801bc04 	.word	0x0801bc04
 800318c:	0801bc10 	.word	0x0801bc10
 8003190:	20000340 	.word	0x20000340
 8003194:	20000a34 	.word	0x20000a34
 8003198:	200003e8 	.word	0x200003e8
 800319c:	0801bc1c 	.word	0x0801bc1c
 80031a0:	20000d4c 	.word	0x20000d4c
 80031a4:	0801bc28 	.word	0x0801bc28
 80031a8:	0801bc34 	.word	0x0801bc34
 80031ac:	20000c40 	.word	0x20000c40
 80031b0:	200003b4 	.word	0x200003b4
 80031b4:	200003c0 	.word	0x200003c0
 80031b8:	200003c4 	.word	0x200003c4
 80031bc:	edd7 4a3f 	vldr	s9, [r7, #252]	; 0xfc
 80031c0:	4bdf      	ldr	r3, [pc, #892]	; (8003540 <TaskSensorData+0x758>)
 80031c2:	ed93 5a00 	vldr	s10, [r3]
 80031c6:	edd3 5a01 	vldr	s11, [r3, #4]
 80031ca:	ed93 6a02 	vldr	s12, [r3, #8]
 80031ce:	4edd      	ldr	r6, [pc, #884]	; (8003544 <TaskSensorData+0x75c>)
 80031d0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80031d4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80031d8:	edd3 6a00 	vldr	s13, [r3]
 80031dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80031e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80031e4:	466d      	mov	r5, sp
 80031e6:	f106 0410 	add.w	r4, r6, #16
 80031ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ee:	6823      	ldr	r3, [r4, #0]
 80031f0:	602b      	str	r3, [r5, #0]
 80031f2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80031f6:	eeb0 3a63 	vmov.f32	s6, s7
 80031fa:	eef0 3a44 	vmov.f32	s7, s8
 80031fe:	eeb0 4a64 	vmov.f32	s8, s9
 8003202:	eef0 1a45 	vmov.f32	s3, s10
 8003206:	eeb0 2a65 	vmov.f32	s4, s11
 800320a:	eef0 2a46 	vmov.f32	s5, s12
 800320e:	eeb0 0a66 	vmov.f32	s0, s13
 8003212:	eef0 0a47 	vmov.f32	s1, s14
 8003216:	eeb0 1a67 	vmov.f32	s2, s15
 800321a:	f7ff fcb7 	bl	8002b8c <FusionCalibrationInertial>
 800321e:	eef0 6a40 	vmov.f32	s13, s0
 8003222:	eeb0 7a60 	vmov.f32	s14, s1
 8003226:	eef0 7a41 	vmov.f32	s15, s2
 800322a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800322e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003232:	edc3 6a00 	vstr	s13, [r3]
 8003236:	ed83 7a01 	vstr	s14, [r3, #4]
 800323a:	edc3 7a02 	vstr	s15, [r3, #8]
				accelerometer = FusionCalibrationInertial(accelerometer, accelerometerMisalignment, accelerometerSensitivity, accelerometerOffset);
 800323e:	edd7 3a3a 	vldr	s7, [r7, #232]	; 0xe8
 8003242:	ed97 4a3b 	vldr	s8, [r7, #236]	; 0xec
 8003246:	edd7 4a3c 	vldr	s9, [r7, #240]	; 0xf0
 800324a:	4bbf      	ldr	r3, [pc, #764]	; (8003548 <TaskSensorData+0x760>)
 800324c:	ed93 5a00 	vldr	s10, [r3]
 8003250:	edd3 5a01 	vldr	s11, [r3, #4]
 8003254:	ed93 6a02 	vldr	s12, [r3, #8]
 8003258:	4ebc      	ldr	r6, [pc, #752]	; (800354c <TaskSensorData+0x764>)
 800325a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800325e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003262:	edd3 6a00 	vldr	s13, [r3]
 8003266:	ed93 7a01 	vldr	s14, [r3, #4]
 800326a:	edd3 7a02 	vldr	s15, [r3, #8]
 800326e:	466d      	mov	r5, sp
 8003270:	f106 0410 	add.w	r4, r6, #16
 8003274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003276:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	602b      	str	r3, [r5, #0]
 800327c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003280:	eeb0 3a63 	vmov.f32	s6, s7
 8003284:	eef0 3a44 	vmov.f32	s7, s8
 8003288:	eeb0 4a64 	vmov.f32	s8, s9
 800328c:	eef0 1a45 	vmov.f32	s3, s10
 8003290:	eeb0 2a65 	vmov.f32	s4, s11
 8003294:	eef0 2a46 	vmov.f32	s5, s12
 8003298:	eeb0 0a66 	vmov.f32	s0, s13
 800329c:	eef0 0a47 	vmov.f32	s1, s14
 80032a0:	eeb0 1a67 	vmov.f32	s2, s15
 80032a4:	f7ff fc72 	bl	8002b8c <FusionCalibrationInertial>
 80032a8:	eef0 6a40 	vmov.f32	s13, s0
 80032ac:	eeb0 7a60 	vmov.f32	s14, s1
 80032b0:	eef0 7a41 	vmov.f32	s15, s2
 80032b4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80032b8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80032bc:	edc3 6a00 	vstr	s13, [r3]
 80032c0:	ed83 7a01 	vstr	s14, [r3, #4]
 80032c4:	edc3 7a02 	vstr	s15, [r3, #8]
				magnetometer = FusionCalibrationMagnetic(magnetometer, softIronMatrix, hardIronOffset);
 80032c8:	ed97 5a37 	vldr	s10, [r7, #220]	; 0xdc
 80032cc:	edd7 5a38 	vldr	s11, [r7, #224]	; 0xe0
 80032d0:	ed97 6a39 	vldr	s12, [r7, #228]	; 0xe4
 80032d4:	4e9e      	ldr	r6, [pc, #632]	; (8003550 <TaskSensorData+0x768>)
 80032d6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80032da:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80032de:	edd3 6a00 	vldr	s13, [r3]
 80032e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80032e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80032ea:	466d      	mov	r5, sp
 80032ec:	f106 0410 	add.w	r4, r6, #16
 80032f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	602b      	str	r3, [r5, #0]
 80032f8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80032fc:	eef0 1a45 	vmov.f32	s3, s10
 8003300:	eeb0 2a65 	vmov.f32	s4, s11
 8003304:	eef0 2a46 	vmov.f32	s5, s12
 8003308:	eeb0 0a66 	vmov.f32	s0, s13
 800330c:	eef0 0a47 	vmov.f32	s1, s14
 8003310:	eeb0 1a67 	vmov.f32	s2, s15
 8003314:	f7ff fce7 	bl	8002ce6 <FusionCalibrationMagnetic>
 8003318:	eef0 6a40 	vmov.f32	s13, s0
 800331c:	eeb0 7a60 	vmov.f32	s14, s1
 8003320:	eef0 7a41 	vmov.f32	s15, s2
 8003324:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003328:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800332c:	edc3 6a00 	vstr	s13, [r3]
 8003330:	ed83 7a01 	vstr	s14, [r3, #4]
 8003334:	edc3 7a02 	vstr	s15, [r3, #8]

				// Update gyroscope offset correction algorithm
				gyroscope = FusionOffsetUpdate(&offset, gyroscope);
 8003338:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800333c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003340:	edd3 6a00 	vldr	s13, [r3]
 8003344:	ed93 7a01 	vldr	s14, [r3, #4]
 8003348:	edd3 7a02 	vldr	s15, [r3, #8]
 800334c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003350:	eeb0 0a66 	vmov.f32	s0, s13
 8003354:	eef0 0a47 	vmov.f32	s1, s14
 8003358:	eeb0 1a67 	vmov.f32	s2, s15
 800335c:	4618      	mov	r0, r3
 800335e:	f005 fb91 	bl	8008a84 <FusionOffsetUpdate>
 8003362:	eef0 6a40 	vmov.f32	s13, s0
 8003366:	eeb0 7a60 	vmov.f32	s14, s1
 800336a:	eef0 7a41 	vmov.f32	s15, s2
 800336e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003372:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003376:	edc3 6a00 	vstr	s13, [r3]
 800337a:	ed83 7a01 	vstr	s14, [r3, #4]
 800337e:	edc3 7a02 	vstr	s15, [r3, #8]
				//const float deltaTime = (float) (timestamp - previousTimestamp) / (float) CLOCKS_PER_SEC;
				//previousTimestamp = timestamp;

				// Update gyroscope AHRS algorithm
				//FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, 1.0f / xFrequency);
				FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, 1.0f / xFrequency);
 8003382:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003386:	ee07 3a90 	vmov	s15, r3
 800338a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003392:	eec7 4a27 	vdiv.f32	s9, s14, s15
 8003396:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800339a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800339e:	ed93 5a00 	vldr	s10, [r3]
 80033a2:	edd3 5a01 	vldr	s11, [r3, #4]
 80033a6:	ed93 6a02 	vldr	s12, [r3, #8]
 80033aa:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80033ae:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80033b2:	edd3 6a00 	vldr	s13, [r3]
 80033b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80033ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80033be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033c2:	eeb0 3a64 	vmov.f32	s6, s9
 80033c6:	eef0 1a45 	vmov.f32	s3, s10
 80033ca:	eeb0 2a65 	vmov.f32	s4, s11
 80033ce:	eef0 2a46 	vmov.f32	s5, s12
 80033d2:	eeb0 0a66 	vmov.f32	s0, s13
 80033d6:	eef0 0a47 	vmov.f32	s1, s14
 80033da:	eeb0 1a67 	vmov.f32	s2, s15
 80033de:	4618      	mov	r0, r3
 80033e0:	f005 f92a 	bl	8008638 <FusionAhrsUpdateNoMagnetometer>

				// Algorithm outputs
				Fusion_output = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 80033e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033e8:	4618      	mov	r0, r3
 80033ea:	f005 f97f 	bl	80086ec <FusionAhrsGetQuaternion>
 80033ee:	eeb0 6a40 	vmov.f32	s12, s0
 80033f2:	eef0 6a60 	vmov.f32	s13, s1
 80033f6:	eeb0 7a41 	vmov.f32	s14, s2
 80033fa:	eef0 7a61 	vmov.f32	s15, s3
 80033fe:	ed87 6a56 	vstr	s12, [r7, #344]	; 0x158
 8003402:	edc7 6a57 	vstr	s13, [r7, #348]	; 0x15c
 8003406:	ed87 7a58 	vstr	s14, [r7, #352]	; 0x160
 800340a:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
 800340e:	ed97 6a56 	vldr	s12, [r7, #344]	; 0x158
 8003412:	edd7 6a57 	vldr	s13, [r7, #348]	; 0x15c
 8003416:	ed97 7a58 	vldr	s14, [r7, #352]	; 0x160
 800341a:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 800341e:	eeb0 0a46 	vmov.f32	s0, s12
 8003422:	eef0 0a66 	vmov.f32	s1, s13
 8003426:	eeb0 1a47 	vmov.f32	s2, s14
 800342a:	eef0 1a67 	vmov.f32	s3, s15
 800342e:	f7ff fb07 	bl	8002a40 <FusionQuaternionToEuler>
 8003432:	eef0 6a40 	vmov.f32	s13, s0
 8003436:	eeb0 7a60 	vmov.f32	s14, s1
 800343a:	eef0 7a41 	vmov.f32	s15, s2
 800343e:	4b45      	ldr	r3, [pc, #276]	; (8003554 <TaskSensorData+0x76c>)
 8003440:	edc3 6a00 	vstr	s13, [r3]
 8003444:	ed83 7a01 	vstr	s14, [r3, #4]
 8003448:	edc3 7a02 	vstr	s15, [r3, #8]




				BMP_Temp = BMP280.measurement.temperature;
 800344c:	4b42      	ldr	r3, [pc, #264]	; (8003558 <TaskSensorData+0x770>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	4a42      	ldr	r2, [pc, #264]	; (800355c <TaskSensorData+0x774>)
 8003452:	6013      	str	r3, [r2, #0]
				BMP_Pres = BMP280.measurement.pressure;
 8003454:	4b40      	ldr	r3, [pc, #256]	; (8003558 <TaskSensorData+0x770>)
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	4a41      	ldr	r2, [pc, #260]	; (8003560 <TaskSensorData+0x778>)
 800345a:	6013      	str	r3, [r2, #0]
				BMP_Alt = BMP280.measurement.altitude;
 800345c:	4b3e      	ldr	r3, [pc, #248]	; (8003558 <TaskSensorData+0x770>)
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	4a40      	ldr	r2, [pc, #256]	; (8003564 <TaskSensorData+0x77c>)
 8003462:	6013      	str	r3, [r2, #0]

			}
			Log("SD-IM-RS");
 8003464:	4840      	ldr	r0, [pc, #256]	; (8003568 <TaskSensorData+0x780>)
 8003466:	f7fe f917 	bl	8001698 <Log>
			osMutexRelease(ImuMutexHandle);
 800346a:	4b40      	ldr	r3, [pc, #256]	; (800356c <TaskSensorData+0x784>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f00e fb3a 	bl	8011ae8 <osMutexRelease>
			Log("SD-IM-RE");
 8003474:	483e      	ldr	r0, [pc, #248]	; (8003570 <TaskSensorData+0x788>)
 8003476:	f7fe f90f 	bl	8001698 <Log>
		}

		// Magnetometer Data
		if (IsMagnAvailable)
 800347a:	4b3e      	ldr	r3, [pc, #248]	; (8003574 <TaskSensorData+0x78c>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 8130 	beq.w	80036e4 <TaskSensorData+0x8fc>
		{
			Log("SD-MM-WS");
 8003484:	483c      	ldr	r0, [pc, #240]	; (8003578 <TaskSensorData+0x790>)
 8003486:	f7fe f907 	bl	8001698 <Log>
			if (osMutexWait(MagnMutexHandle, osWaitForever) == osOK)
 800348a:	4b3c      	ldr	r3, [pc, #240]	; (800357c <TaskSensorData+0x794>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f04f 31ff 	mov.w	r1, #4294967295
 8003492:	4618      	mov	r0, r3
 8003494:	f00e fada 	bl	8011a4c <osMutexWait>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	f040 8117 	bne.w	80036ce <TaskSensorData+0x8e6>
			{
				Log("SD-MM-WE");
 80034a0:	4837      	ldr	r0, [pc, #220]	; (8003580 <TaskSensorData+0x798>)
 80034a2:	f7fe f8f9 	bl	8001698 <Log>

				struct Vector res = HMC5883L_readRaw();
 80034a6:	f005 fd93 	bl	8008fd0 <HMC5883L_readRaw>
 80034aa:	eef0 6a40 	vmov.f32	s13, s0
 80034ae:	eeb0 7a60 	vmov.f32	s14, s1
 80034b2:	eef0 7a41 	vmov.f32	s15, s2
 80034b6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80034ba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80034be:	edc3 6a00 	vstr	s13, [r3]
 80034c2:	ed83 7a01 	vstr	s14, [r3, #4]
 80034c6:	edc3 7a02 	vstr	s15, [r3, #8]
				MAG_X_RAW = res.XAxis;
 80034ca:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80034ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a2b      	ldr	r2, [pc, #172]	; (8003584 <TaskSensorData+0x79c>)
 80034d6:	6013      	str	r3, [r2, #0]
				MAG_Y_RAW = res.YAxis;
 80034d8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80034dc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	4a29      	ldr	r2, [pc, #164]	; (8003588 <TaskSensorData+0x7a0>)
 80034e4:	6013      	str	r3, [r2, #0]
				MAG_Z_RAW = res.ZAxis;
 80034e6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80034ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	4a26      	ldr	r2, [pc, #152]	; (800358c <TaskSensorData+0x7a4>)
 80034f2:	6013      	str	r3, [r2, #0]
				//MAG_Y_NORM = MAG_Y_RAW / magnitude;
				//MAG_Z_NORM = MAG_Z_RAW / magnitude;

				//MAG_dir = atan2f(MAG_X_NORM, MAG_Y_NORM)*180.0f/M_PI;

				if (MAG_Y_RAW != 0)
 80034f4:	4b24      	ldr	r3, [pc, #144]	; (8003588 <TaskSensorData+0x7a0>)
 80034f6:	edd3 7a00 	vldr	s15, [r3]
 80034fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80034fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003502:	f000 8093 	beq.w	800362c <TaskSensorData+0x844>
				{
					if (MAG_Y_RAW > 0)
 8003506:	4b20      	ldr	r3, [pc, #128]	; (8003588 <TaskSensorData+0x7a0>)
 8003508:	edd3 7a00 	vldr	s15, [r3]
 800350c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003514:	dd56      	ble.n	80035c4 <TaskSensorData+0x7dc>
						MAG_dir = 90.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 8003516:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <TaskSensorData+0x79c>)
 8003518:	edd3 7a00 	vldr	s15, [r3]
 800351c:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <TaskSensorData+0x7a0>)
 800351e:	ed93 7a00 	vldr	s14, [r3]
 8003522:	eef0 0a47 	vmov.f32	s1, s14
 8003526:	eeb0 0a67 	vmov.f32	s0, s15
 800352a:	f016 f89d 	bl	8019668 <atan2f>
 800352e:	eef0 7a40 	vmov.f32	s15, s0
 8003532:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003590 <TaskSensorData+0x7a8>
 8003536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800353a:	ee17 0a90 	vmov	r0, s15
 800353e:	e029      	b.n	8003594 <TaskSensorData+0x7ac>
 8003540:	0801bf94 	.word	0x0801bf94
 8003544:	0801bf70 	.word	0x0801bf70
 8003548:	0801bfc4 	.word	0x0801bfc4
 800354c:	0801bfa0 	.word	0x0801bfa0
 8003550:	0801bfd0 	.word	0x0801bfd0
 8003554:	200003dc 	.word	0x200003dc
 8003558:	200003e8 	.word	0x200003e8
 800355c:	20000418 	.word	0x20000418
 8003560:	2000041c 	.word	0x2000041c
 8003564:	20000420 	.word	0x20000420
 8003568:	0801bc48 	.word	0x0801bc48
 800356c:	20000d4c 	.word	0x20000d4c
 8003570:	0801bc54 	.word	0x0801bc54
 8003574:	20000215 	.word	0x20000215
 8003578:	0801bc60 	.word	0x0801bc60
 800357c:	20000d44 	.word	0x20000d44
 8003580:	0801bc6c 	.word	0x0801bc6c
 8003584:	2000043c 	.word	0x2000043c
 8003588:	20000440 	.word	0x20000440
 800358c:	20000444 	.word	0x20000444
 8003590:	43340000 	.word	0x43340000
 8003594:	f7fd f800 	bl	8000598 <__aeabi_f2d>
 8003598:	a395      	add	r3, pc, #596	; (adr r3, 80037f0 <TaskSensorData+0xa08>)
 800359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359e:	f7fd f97d 	bl	800089c <__aeabi_ddiv>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	f04f 0000 	mov.w	r0, #0
 80035aa:	4995      	ldr	r1, [pc, #596]	; (8003800 <TaskSensorData+0xa18>)
 80035ac:	f7fc fe94 	bl	80002d8 <__aeabi_dsub>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4610      	mov	r0, r2
 80035b6:	4619      	mov	r1, r3
 80035b8:	f7fd fb3e 	bl	8000c38 <__aeabi_d2f>
 80035bc:	4603      	mov	r3, r0
 80035be:	4a91      	ldr	r2, [pc, #580]	; (8003804 <TaskSensorData+0xa1c>)
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e053      	b.n	800366c <TaskSensorData+0x884>
					else if (MAG_Y_RAW < 0)
 80035c4:	4b90      	ldr	r3, [pc, #576]	; (8003808 <TaskSensorData+0xa20>)
 80035c6:	edd3 7a00 	vldr	s15, [r3]
 80035ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d2:	d54b      	bpl.n	800366c <TaskSensorData+0x884>
						MAG_dir = 270.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 80035d4:	4b8d      	ldr	r3, [pc, #564]	; (800380c <TaskSensorData+0xa24>)
 80035d6:	edd3 7a00 	vldr	s15, [r3]
 80035da:	4b8b      	ldr	r3, [pc, #556]	; (8003808 <TaskSensorData+0xa20>)
 80035dc:	ed93 7a00 	vldr	s14, [r3]
 80035e0:	eef0 0a47 	vmov.f32	s1, s14
 80035e4:	eeb0 0a67 	vmov.f32	s0, s15
 80035e8:	f016 f83e 	bl	8019668 <atan2f>
 80035ec:	eef0 7a40 	vmov.f32	s15, s0
 80035f0:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8003810 <TaskSensorData+0xa28>
 80035f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035f8:	ee17 0a90 	vmov	r0, s15
 80035fc:	f7fc ffcc 	bl	8000598 <__aeabi_f2d>
 8003600:	a37b      	add	r3, pc, #492	; (adr r3, 80037f0 <TaskSensorData+0xa08>)
 8003602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003606:	f7fd f949 	bl	800089c <__aeabi_ddiv>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	a17a      	add	r1, pc, #488	; (adr r1, 80037f8 <TaskSensorData+0xa10>)
 8003610:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003614:	f7fc fe60 	bl	80002d8 <__aeabi_dsub>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4610      	mov	r0, r2
 800361e:	4619      	mov	r1, r3
 8003620:	f7fd fb0a 	bl	8000c38 <__aeabi_d2f>
 8003624:	4603      	mov	r3, r0
 8003626:	4a77      	ldr	r2, [pc, #476]	; (8003804 <TaskSensorData+0xa1c>)
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	e01f      	b.n	800366c <TaskSensorData+0x884>
				}
				else if (MAG_Y_RAW == 0)
 800362c:	4b76      	ldr	r3, [pc, #472]	; (8003808 <TaskSensorData+0xa20>)
 800362e:	edd3 7a00 	vldr	s15, [r3]
 8003632:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800363a:	d117      	bne.n	800366c <TaskSensorData+0x884>
				{
					if (MAG_X_RAW > 0)
 800363c:	4b73      	ldr	r3, [pc, #460]	; (800380c <TaskSensorData+0xa24>)
 800363e:	edd3 7a00 	vldr	s15, [r3]
 8003642:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364a:	dd04      	ble.n	8003656 <TaskSensorData+0x86e>
						MAG_dir = 0.0f;
 800364c:	4b6d      	ldr	r3, [pc, #436]	; (8003804 <TaskSensorData+0xa1c>)
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	e00a      	b.n	800366c <TaskSensorData+0x884>
					else if (MAG_X_RAW < 0)
 8003656:	4b6d      	ldr	r3, [pc, #436]	; (800380c <TaskSensorData+0xa24>)
 8003658:	edd3 7a00 	vldr	s15, [r3]
 800365c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003664:	d502      	bpl.n	800366c <TaskSensorData+0x884>
						MAG_dir = 180.0f;
 8003666:	4b67      	ldr	r3, [pc, #412]	; (8003804 <TaskSensorData+0xa1c>)
 8003668:	4a6a      	ldr	r2, [pc, #424]	; (8003814 <TaskSensorData+0xa2c>)
 800366a:	601a      	str	r2, [r3, #0]

				}

				MAG_dir += declination;
 800366c:	4b65      	ldr	r3, [pc, #404]	; (8003804 <TaskSensorData+0xa1c>)
 800366e:	ed93 7a00 	vldr	s14, [r3]
 8003672:	4b69      	ldr	r3, [pc, #420]	; (8003818 <TaskSensorData+0xa30>)
 8003674:	edd3 7a00 	vldr	s15, [r3]
 8003678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800367c:	4b61      	ldr	r3, [pc, #388]	; (8003804 <TaskSensorData+0xa1c>)
 800367e:	edc3 7a00 	vstr	s15, [r3]

				if (MAG_dir < 0)
 8003682:	4b60      	ldr	r3, [pc, #384]	; (8003804 <TaskSensorData+0xa1c>)
 8003684:	edd3 7a00 	vldr	s15, [r3]
 8003688:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800368c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003690:	d509      	bpl.n	80036a6 <TaskSensorData+0x8be>
					MAG_dir += 360.0f;
 8003692:	4b5c      	ldr	r3, [pc, #368]	; (8003804 <TaskSensorData+0xa1c>)
 8003694:	edd3 7a00 	vldr	s15, [r3]
 8003698:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800381c <TaskSensorData+0xa34>
 800369c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036a0:	4b58      	ldr	r3, [pc, #352]	; (8003804 <TaskSensorData+0xa1c>)
 80036a2:	edc3 7a00 	vstr	s15, [r3]
				if (MAG_dir > 360.0f)
 80036a6:	4b57      	ldr	r3, [pc, #348]	; (8003804 <TaskSensorData+0xa1c>)
 80036a8:	edd3 7a00 	vldr	s15, [r3]
 80036ac:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800381c <TaskSensorData+0xa34>
 80036b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b8:	dd09      	ble.n	80036ce <TaskSensorData+0x8e6>
					MAG_dir -= 360.0f;
 80036ba:	4b52      	ldr	r3, [pc, #328]	; (8003804 <TaskSensorData+0xa1c>)
 80036bc:	edd3 7a00 	vldr	s15, [r3]
 80036c0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800381c <TaskSensorData+0xa34>
 80036c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036c8:	4b4e      	ldr	r3, [pc, #312]	; (8003804 <TaskSensorData+0xa1c>)
 80036ca:	edc3 7a00 	vstr	s15, [r3]
			}
			Log("SD-MM-RS");
 80036ce:	4854      	ldr	r0, [pc, #336]	; (8003820 <TaskSensorData+0xa38>)
 80036d0:	f7fd ffe2 	bl	8001698 <Log>
			osMutexRelease(MagnMutexHandle);
 80036d4:	4b53      	ldr	r3, [pc, #332]	; (8003824 <TaskSensorData+0xa3c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f00e fa05 	bl	8011ae8 <osMutexRelease>
			Log("SD-MM-RE");
 80036de:	4852      	ldr	r0, [pc, #328]	; (8003828 <TaskSensorData+0xa40>)
 80036e0:	f7fd ffda 	bl	8001698 <Log>
		}

		// Distance Data
		if (IsDistAvailable)
 80036e4:	4b51      	ldr	r3, [pc, #324]	; (800382c <TaskSensorData+0xa44>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d046      	beq.n	800377a <TaskSensorData+0x992>
		{
			//Log("SD-DA");
			if (!HCSR04.Triggered)
 80036ec:	4b50      	ldr	r3, [pc, #320]	; (8003830 <TaskSensorData+0xa48>)
 80036ee:	7d1b      	ldrb	r3, [r3, #20]
 80036f0:	f083 0301 	eor.w	r3, r3, #1
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d006      	beq.n	8003708 <TaskSensorData+0x920>
			{
				HCSR04_Trigger(&HCSR04);
 80036fa:	484d      	ldr	r0, [pc, #308]	; (8003830 <TaskSensorData+0xa48>)
 80036fc:	f007 f956 	bl	800a9ac <HCSR04_Trigger>
				HCSR04.Triggered = true;
 8003700:	4b4b      	ldr	r3, [pc, #300]	; (8003830 <TaskSensorData+0xa48>)
 8003702:	2201      	movs	r2, #1
 8003704:	751a      	strb	r2, [r3, #20]
 8003706:	e038      	b.n	800377a <TaskSensorData+0x992>
			}
			else if (HCSR04.Triggered)
 8003708:	4b49      	ldr	r3, [pc, #292]	; (8003830 <TaskSensorData+0xa48>)
 800370a:	7d1b      	ldrb	r3, [r3, #20]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d034      	beq.n	800377a <TaskSensorData+0x992>
			{
				Log("SD-DS-WS");
 8003710:	4848      	ldr	r0, [pc, #288]	; (8003834 <TaskSensorData+0xa4c>)
 8003712:	f7fd ffc1 	bl	8001698 <Log>
				if (osSemaphoreWait(DistSemaphoreHandle, 0) == osOK)
 8003716:	4b48      	ldr	r3, [pc, #288]	; (8003838 <TaskSensorData+0xa50>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f00e fa4b 	bl	8011bb8 <osSemaphoreWait>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d128      	bne.n	800377a <TaskSensorData+0x992>
				{
					Log("SD-DS-WE");
 8003728:	4844      	ldr	r0, [pc, #272]	; (800383c <TaskSensorData+0xa54>)
 800372a:	f7fd ffb5 	bl	8001698 <Log>
					Log("SD-DM-WS");
 800372e:	4844      	ldr	r0, [pc, #272]	; (8003840 <TaskSensorData+0xa58>)
 8003730:	f7fd ffb2 	bl	8001698 <Log>
					if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 8003734:	4b43      	ldr	r3, [pc, #268]	; (8003844 <TaskSensorData+0xa5c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f04f 31ff 	mov.w	r1, #4294967295
 800373c:	4618      	mov	r0, r3
 800373e:	f00e f985 	bl	8011a4c <osMutexWait>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10a      	bne.n	800375e <TaskSensorData+0x976>
					{
						Log("SD-DM-WE");
 8003748:	483f      	ldr	r0, [pc, #252]	; (8003848 <TaskSensorData+0xa60>)
 800374a:	f7fd ffa5 	bl	8001698 <Log>

						Distance = HCSR04_Read(&HCSR04);
 800374e:	4838      	ldr	r0, [pc, #224]	; (8003830 <TaskSensorData+0xa48>)
 8003750:	f007 f947 	bl	800a9e2 <HCSR04_Read>
 8003754:	eef0 7a40 	vmov.f32	s15, s0
 8003758:	4b3c      	ldr	r3, [pc, #240]	; (800384c <TaskSensorData+0xa64>)
 800375a:	edc3 7a00 	vstr	s15, [r3]
					}
					Log("SD-DM-RS");
 800375e:	483c      	ldr	r0, [pc, #240]	; (8003850 <TaskSensorData+0xa68>)
 8003760:	f7fd ff9a 	bl	8001698 <Log>
					osMutexRelease(DistMutexHandle);
 8003764:	4b37      	ldr	r3, [pc, #220]	; (8003844 <TaskSensorData+0xa5c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f00e f9bd 	bl	8011ae8 <osMutexRelease>
					Log("SD-DM-RE");
 800376e:	4839      	ldr	r0, [pc, #228]	; (8003854 <TaskSensorData+0xa6c>)
 8003770:	f7fd ff92 	bl	8001698 <Log>

					HCSR04.Triggered = false;
 8003774:	4b2e      	ldr	r3, [pc, #184]	; (8003830 <TaskSensorData+0xa48>)
 8003776:	2200      	movs	r2, #0
 8003778:	751a      	strb	r2, [r3, #20]
				}
			}
		}

		// GPS Data
		if (IsGpsAvailable)
 800377a:	4b37      	ldr	r3, [pc, #220]	; (8003858 <TaskSensorData+0xa70>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f43f ac0d 	beq.w	8002f9e <TaskSensorData+0x1b6>
		{
			//Log("SD-GA");
			if (osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever) == osOK)
 8003784:	4b35      	ldr	r3, [pc, #212]	; (800385c <TaskSensorData+0xa74>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f04f 31ff 	mov.w	r1, #4294967295
 800378c:	4618      	mov	r0, r3
 800378e:	f00e fa13 	bl	8011bb8 <osSemaphoreWait>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	f47f ac02 	bne.w	8002f9e <TaskSensorData+0x1b6>
			{
				if (ProcessGPSPackageBuffer)
 800379a:	4b31      	ldr	r3, [pc, #196]	; (8003860 <TaskSensorData+0xa78>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f43f abfc 	beq.w	8002f9e <TaskSensorData+0x1b6>
				{
					//HAL_UART_Transmit(&huart3, GPSPackageBuffer, GPS_BUFFSIZE, HAL_MAX_DELAY);
					//HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

					if (osMutexWait(GpsDataMutexHandle, osWaitForever) == osOK)
 80037a6:	4b2f      	ldr	r3, [pc, #188]	; (8003864 <TaskSensorData+0xa7c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f04f 31ff 	mov.w	r1, #4294967295
 80037ae:	4618      	mov	r0, r3
 80037b0:	f00e f94c 	bl	8011a4c <osMutexWait>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10d      	bne.n	80037d6 <TaskSensorData+0x9ee>
					{
						if (GPS_validate((char*) GPSPackageBuffer))
 80037ba:	482b      	ldr	r0, [pc, #172]	; (8003868 <TaskSensorData+0xa80>)
 80037bc:	f005 fa38 	bl	8008c30 <GPS_validate>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <TaskSensorData+0x9e4>
							GPS_parse((char*) GPSPackageBuffer);
 80037c6:	4828      	ldr	r0, [pc, #160]	; (8003868 <TaskSensorData+0xa80>)
 80037c8:	f005 fa94 	bl	8008cf4 <GPS_parse>
						memset(GPSPackageBuffer, 0, sizeof(GPSPackageBuffer));
 80037cc:	22ff      	movs	r2, #255	; 0xff
 80037ce:	2100      	movs	r1, #0
 80037d0:	4825      	ldr	r0, [pc, #148]	; (8003868 <TaskSensorData+0xa80>)
 80037d2:	f011 fe14 	bl	80153fe <memset>
					}
					osMutexRelease(GpsDataMutexHandle);
 80037d6:	4b23      	ldr	r3, [pc, #140]	; (8003864 <TaskSensorData+0xa7c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f00e f984 	bl	8011ae8 <osMutexRelease>

					ProcessGPSPackageBuffer = false;
 80037e0:	4b1f      	ldr	r3, [pc, #124]	; (8003860 <TaskSensorData+0xa78>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	701a      	strb	r2, [r3, #0]
	{
 80037e6:	f7ff bbda 	b.w	8002f9e <TaskSensorData+0x1b6>
 80037ea:	bf00      	nop
 80037ec:	f3af 8000 	nop.w
 80037f0:	54442d18 	.word	0x54442d18
 80037f4:	400921fb 	.word	0x400921fb
 80037f8:	00000000 	.word	0x00000000
 80037fc:	4070e000 	.word	0x4070e000
 8003800:	40568000 	.word	0x40568000
 8003804:	20000448 	.word	0x20000448
 8003808:	20000440 	.word	0x20000440
 800380c:	2000043c 	.word	0x2000043c
 8003810:	43340000 	.word	0x43340000
 8003814:	43340000 	.word	0x43340000
 8003818:	20000004 	.word	0x20000004
 800381c:	43b40000 	.word	0x43b40000
 8003820:	0801bc78 	.word	0x0801bc78
 8003824:	20000d44 	.word	0x20000d44
 8003828:	0801bc84 	.word	0x0801bc84
 800382c:	20000216 	.word	0x20000216
 8003830:	2000044c 	.word	0x2000044c
 8003834:	0801bc90 	.word	0x0801bc90
 8003838:	20000d60 	.word	0x20000d60
 800383c:	0801bc9c 	.word	0x0801bc9c
 8003840:	0801bca8 	.word	0x0801bca8
 8003844:	20000d54 	.word	0x20000d54
 8003848:	0801bcb4 	.word	0x0801bcb4
 800384c:	20000484 	.word	0x20000484
 8003850:	0801bcc0 	.word	0x0801bcc0
 8003854:	0801bccc 	.word	0x0801bccc
 8003858:	20000217 	.word	0x20000217
 800385c:	20000d64 	.word	0x20000d64
 8003860:	20000687 	.word	0x20000687
 8003864:	20000d50 	.word	0x20000d50
 8003868:	20000588 	.word	0x20000588

0800386c <TaskTune>:
extern osMutexId ImuMutexHandle;;
extern osMutexId RemoteDataMutexHandle;


void TaskTune(void const *argument)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b0ba      	sub	sp, #232	; 0xe8
 8003870:	af02      	add	r7, sp, #8
 8003872:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100; //Hz
 8003874:	2364      	movs	r3, #100	; 0x64
 8003876:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 800387a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800387e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003882:	fbb2 f3f3 	udiv	r3, r2, r3
 8003886:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

	//HAL_SPI_Receive_IT(&hspi1, Spi1Buffer, 64);

	uint8_t SpiTuneData1[64];
	uint8_t SpiTuneData2[64];
	SpiTuneData1[0] = (uint8_t)('t');
 800388a:	2374      	movs	r3, #116	; 0x74
 800388c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	SpiTuneData2[0] = (uint8_t)('u');
 8003890:	2375      	movs	r3, #117	; 0x75
 8003892:	773b      	strb	r3, [r7, #28]


	// PID controllers to be tuned
	PIDController* PID1 = &DPID_Roll.outer;
 8003894:	4bb4      	ldr	r3, [pc, #720]	; (8003b68 <TaskTune+0x2fc>)
 8003896:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	int16_t PID1_ref_devided; // Calculated in every cycle
	float PID1_ref_devided_float; // Needed only for single loop tuning
	float* PID1_meas = &(Fusion_output.angle.roll);
 800389a:	4bb4      	ldr	r3, [pc, #720]	; (8003b6c <TaskTune+0x300>)
 800389c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	float* PID1_out = &(PID1->out);
 80038a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038a4:	3340      	adds	r3, #64	; 0x40
 80038a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	PIDController* PID2 = &DPID_Roll.inner;
 80038aa:	4bb1      	ldr	r3, [pc, #708]	; (8003b70 <TaskTune+0x304>)
 80038ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	float* PID2_ref = &(PID1->out);
 80038b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038b4:	3340      	adds	r3, #64	; 0x40
 80038b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	//float* PID2_ref = &(Fusion_output.angle.roll);
	float* PID2_meas = GyroData;
 80038ba:	4bae      	ldr	r3, [pc, #696]	; (8003b74 <TaskTune+0x308>)
 80038bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	//float* PID2_meas = &Roll_measured;
	int16_t* PID2_out = &Roll_controlled;
 80038c0:	4bad      	ldr	r3, [pc, #692]	; (8003b78 <TaskTune+0x30c>)
 80038c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	PIDController* PID3 = &DPID_Pitch.outer;
 80038c6:	4bad      	ldr	r3, [pc, #692]	; (8003b7c <TaskTune+0x310>)
 80038c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	int16_t PID3_ref_devided; // Calculated in every cycle
	float PID3_ref_devided_float; // Needed only for single loop tuning
	float* PID3_meas = &(Fusion_output.angle.pitch);
 80038cc:	4bac      	ldr	r3, [pc, #688]	; (8003b80 <TaskTune+0x314>)
 80038ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float* PID3_out = &(PID3->out);
 80038d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038d6:	3340      	adds	r3, #64	; 0x40
 80038d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	PIDController* PID4 = &DPID_Pitch.inner;
 80038dc:	4ba9      	ldr	r3, [pc, #676]	; (8003b84 <TaskTune+0x318>)
 80038de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float* PID4_ref = &(PID3->out);
 80038e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038e6:	3340      	adds	r3, #64	; 0x40
 80038e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float* PID4_meas = GyroData+1;
 80038ec:	4ba6      	ldr	r3, [pc, #664]	; (8003b88 <TaskTune+0x31c>)
 80038ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	int16_t* PID4_out = &Pitch_controlled;
 80038f2:	4ba6      	ldr	r3, [pc, #664]	; (8003b8c <TaskTune+0x320>)
 80038f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0


	xLastWakeTime = xTaskGetTickCount();
 80038f8:	f00f fc40 	bl	801317c <xTaskGetTickCount>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8003902:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003906:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800390a:	4618      	mov	r0, r3
 800390c:	f00f fa62 	bl	8012dd4 <vTaskDelayUntil>

		if (Tune)
 8003910:	4b9f      	ldr	r3, [pc, #636]	; (8003b90 <TaskTune+0x324>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 8178 	beq.w	8003c0a <TaskTune+0x39e>
		{
			if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK
 800391a:	4b9e      	ldr	r3, [pc, #632]	; (8003b94 <TaskTune+0x328>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f04f 31ff 	mov.w	r1, #4294967295
 8003922:	4618      	mov	r0, r3
 8003924:	f00e f892 	bl	8011a4c <osMutexWait>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	f040 815e 	bne.w	8003bec <TaskTune+0x380>
					&& osMutexWait(ImuMutexHandle, osWaitForever) == osOK
 8003930:	4b99      	ldr	r3, [pc, #612]	; (8003b98 <TaskTune+0x32c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f04f 31ff 	mov.w	r1, #4294967295
 8003938:	4618      	mov	r0, r3
 800393a:	f00e f887 	bl	8011a4c <osMutexWait>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	f040 8153 	bne.w	8003bec <TaskTune+0x380>
					&& osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8003946:	4b95      	ldr	r3, [pc, #596]	; (8003b9c <TaskTune+0x330>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f04f 31ff 	mov.w	r1, #4294967295
 800394e:	4618      	mov	r0, r3
 8003950:	f00e f87c 	bl	8011a4c <osMutexWait>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	f040 8148 	bne.w	8003bec <TaskTune+0x380>
//				else
//					Tune_single_true_double_false = true;

				// Pack PID1 data
				//Gains
				FloatToUint8s(&(PID1->Kp), SpiTuneData1, 1);
 800395c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003960:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003964:	2201      	movs	r2, #1
 8003966:	4618      	mov	r0, r3
 8003968:	f7fd febe 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(&(PID1->Ki), SpiTuneData1, 5);
 800396c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003970:	3304      	adds	r3, #4
 8003972:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003976:	2205      	movs	r2, #5
 8003978:	4618      	mov	r0, r3
 800397a:	f7fd feb5 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(&(PID1->Kd), SpiTuneData1, 9);
 800397e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003982:	3308      	adds	r3, #8
 8003984:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003988:	2209      	movs	r2, #9
 800398a:	4618      	mov	r0, r3
 800398c:	f7fd feac 	bl	80016e8 <FloatToUint8s>
				// Reference -> Calculated in every cycle
				//PID1_ref_devided = Roll_in / 25;
				PID1_ref_devided = SWD / 70;
 8003990:	4b83      	ldr	r3, [pc, #524]	; (8003ba0 <TaskTune+0x334>)
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	085b      	lsrs	r3, r3, #1
 8003996:	4a83      	ldr	r2, [pc, #524]	; (8003ba4 <TaskTune+0x338>)
 8003998:	fba2 2303 	umull	r2, r3, r2, r3
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	b29b      	uxth	r3, r3
 80039a0:	b21b      	sxth	r3, r3
 80039a2:	837b      	strh	r3, [r7, #26]
				Int16ToUint8s(&PID1_ref_devided, SpiTuneData1, 13);
 80039a4:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80039a8:	f107 031a 	add.w	r3, r7, #26
 80039ac:	220d      	movs	r2, #13
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fd fed2 	bl	8001758 <Int16ToUint8s>
				// Measurement
				FloatToUint8s(PID1_meas, SpiTuneData1, 15);
 80039b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80039b8:	220f      	movs	r2, #15
 80039ba:	4619      	mov	r1, r3
 80039bc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80039c0:	f7fd fe92 	bl	80016e8 <FloatToUint8s>
				// Output
				FloatToUint8s(PID1_out, SpiTuneData1, 19);
 80039c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80039c8:	2213      	movs	r2, #19
 80039ca:	4619      	mov	r1, r3
 80039cc:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80039d0:	f7fd fe8a 	bl	80016e8 <FloatToUint8s>


				// Pack PID2 data
				// Gains
				FloatToUint8s(&(PID2->Kp), SpiTuneData1, 23);
 80039d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80039d8:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80039dc:	2217      	movs	r2, #23
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd fe82 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(&(PID2->Ki), SpiTuneData1, 27);
 80039e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80039e8:	3304      	adds	r3, #4
 80039ea:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80039ee:	221b      	movs	r2, #27
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fd fe79 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(&(PID2->Kd), SpiTuneData1, 31);
 80039f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80039fa:	3308      	adds	r3, #8
 80039fc:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003a00:	221f      	movs	r2, #31
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fd fe70 	bl	80016e8 <FloatToUint8s>
				// Reference
				if (Tune_single_true_double_false)
 8003a08:	4b67      	ldr	r3, [pc, #412]	; (8003ba8 <TaskTune+0x33c>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01b      	beq.n	8003a48 <TaskTune+0x1dc>
				{
					PID1_ref_devided_float = Roll_in / 10.0;
 8003a10:	4b66      	ldr	r3, [pc, #408]	; (8003bac <TaskTune+0x340>)
 8003a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fc fdac 	bl	8000574 <__aeabi_i2d>
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	4b63      	ldr	r3, [pc, #396]	; (8003bb0 <TaskTune+0x344>)
 8003a22:	f7fc ff3b 	bl	800089c <__aeabi_ddiv>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f7fd f903 	bl	8000c38 <__aeabi_d2f>
 8003a32:	4603      	mov	r3, r0
 8003a34:	617b      	str	r3, [r7, #20]
					FloatToUint8s(&PID1_ref_devided_float, SpiTuneData1, 35);
 8003a36:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003a3a:	f107 0314 	add.w	r3, r7, #20
 8003a3e:	2223      	movs	r2, #35	; 0x23
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fd fe51 	bl	80016e8 <FloatToUint8s>
 8003a46:	e007      	b.n	8003a58 <TaskTune+0x1ec>
				}
				else
					FloatToUint8s(PID2_ref, SpiTuneData1, 35);
 8003a48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003a4c:	2223      	movs	r2, #35	; 0x23
 8003a4e:	4619      	mov	r1, r3
 8003a50:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8003a54:	f7fd fe48 	bl	80016e8 <FloatToUint8s>
				// Measurement
				FloatToUint8s(PID2_meas, SpiTuneData1, 39);
 8003a58:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003a5c:	2227      	movs	r2, #39	; 0x27
 8003a5e:	4619      	mov	r1, r3
 8003a60:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8003a64:	f7fd fe40 	bl	80016e8 <FloatToUint8s>
				// Output
				Int16ToUint8s(PID2_out, SpiTuneData1, 43);
 8003a68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003a6c:	222b      	movs	r2, #43	; 0x2b
 8003a6e:	4619      	mov	r1, r3
 8003a70:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8003a74:	f7fd fe70 	bl	8001758 <Int16ToUint8s>


				// Pack PID3 data
				//Gains
				FloatToUint8s(&(PID3->Kp), SpiTuneData2, 1);
 8003a78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a7c:	f107 011c 	add.w	r1, r7, #28
 8003a80:	2201      	movs	r2, #1
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fd fe30 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(&(PID3->Ki), SpiTuneData2, 5);
 8003a88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	f107 011c 	add.w	r1, r7, #28
 8003a92:	2205      	movs	r2, #5
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fd fe27 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(&(PID3->Kd), SpiTuneData2, 9);
 8003a9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	f107 011c 	add.w	r1, r7, #28
 8003aa4:	2209      	movs	r2, #9
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fd fe1e 	bl	80016e8 <FloatToUint8s>
				// Reference -> Calculated in every cycle
				PID3_ref_devided = Pitch_in / 25;
 8003aac:	4b41      	ldr	r3, [pc, #260]	; (8003bb4 <TaskTune+0x348>)
 8003aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ab2:	4a41      	ldr	r2, [pc, #260]	; (8003bb8 <TaskTune+0x34c>)
 8003ab4:	fb82 1203 	smull	r1, r2, r2, r3
 8003ab8:	10d2      	asrs	r2, r2, #3
 8003aba:	17db      	asrs	r3, r3, #31
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	b21b      	sxth	r3, r3
 8003ac0:	827b      	strh	r3, [r7, #18]
				Int16ToUint8s(&PID3_ref_devided, SpiTuneData2, 13);
 8003ac2:	f107 011c 	add.w	r1, r7, #28
 8003ac6:	f107 0312 	add.w	r3, r7, #18
 8003aca:	220d      	movs	r2, #13
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fd fe43 	bl	8001758 <Int16ToUint8s>
				// Measurement
				FloatToUint8s(PID3_meas, SpiTuneData2, 15);
 8003ad2:	f107 031c 	add.w	r3, r7, #28
 8003ad6:	220f      	movs	r2, #15
 8003ad8:	4619      	mov	r1, r3
 8003ada:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8003ade:	f7fd fe03 	bl	80016e8 <FloatToUint8s>
				// Output
				FloatToUint8s(PID3_out, SpiTuneData2, 19);
 8003ae2:	f107 031c 	add.w	r3, r7, #28
 8003ae6:	2213      	movs	r2, #19
 8003ae8:	4619      	mov	r1, r3
 8003aea:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8003aee:	f7fd fdfb 	bl	80016e8 <FloatToUint8s>


				// Pack PID4 data
				// Gains
				FloatToUint8s(&(PID4->Kp), SpiTuneData2, 23);
 8003af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003af6:	f107 011c 	add.w	r1, r7, #28
 8003afa:	2217      	movs	r2, #23
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fd fdf3 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(&(PID4->Ki), SpiTuneData2, 27);
 8003b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b06:	3304      	adds	r3, #4
 8003b08:	f107 011c 	add.w	r1, r7, #28
 8003b0c:	221b      	movs	r2, #27
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fd fdea 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(&(PID4->Kd), SpiTuneData2, 31);
 8003b14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b18:	3308      	adds	r3, #8
 8003b1a:	f107 011c 	add.w	r1, r7, #28
 8003b1e:	221f      	movs	r2, #31
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fd fde1 	bl	80016e8 <FloatToUint8s>
				// Reference
				if (Tune_single_true_double_false)
 8003b26:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <TaskTune+0x33c>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d046      	beq.n	8003bbc <TaskTune+0x350>
				{
					PID3_ref_devided_float = Pitch_in / 10.0;
 8003b2e:	4b21      	ldr	r3, [pc, #132]	; (8003bb4 <TaskTune+0x348>)
 8003b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fc fd1d 	bl	8000574 <__aeabi_i2d>
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	4b1c      	ldr	r3, [pc, #112]	; (8003bb0 <TaskTune+0x344>)
 8003b40:	f7fc feac 	bl	800089c <__aeabi_ddiv>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	f7fd f874 	bl	8000c38 <__aeabi_d2f>
 8003b50:	4603      	mov	r3, r0
 8003b52:	60fb      	str	r3, [r7, #12]
					FloatToUint8s(&PID3_ref_devided_float, SpiTuneData2, 35);
 8003b54:	f107 011c 	add.w	r1, r7, #28
 8003b58:	f107 030c 	add.w	r3, r7, #12
 8003b5c:	2223      	movs	r2, #35	; 0x23
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd fdc2 	bl	80016e8 <FloatToUint8s>
 8003b64:	e032      	b.n	8003bcc <TaskTune+0x360>
 8003b66:	bf00      	nop
 8003b68:	2000025c 	.word	0x2000025c
 8003b6c:	200003dc 	.word	0x200003dc
 8003b70:	20000218 	.word	0x20000218
 8003b74:	200003c4 	.word	0x200003c4
 8003b78:	2000032c 	.word	0x2000032c
 8003b7c:	200002e4 	.word	0x200002e4
 8003b80:	200003e0 	.word	0x200003e0
 8003b84:	200002a0 	.word	0x200002a0
 8003b88:	200003c8 	.word	0x200003c8
 8003b8c:	20000330 	.word	0x20000330
 8003b90:	20000001 	.word	0x20000001
 8003b94:	20000d5c 	.word	0x20000d5c
 8003b98:	20000d4c 	.word	0x20000d4c
 8003b9c:	20000d48 	.word	0x20000d48
 8003ba0:	2000033a 	.word	0x2000033a
 8003ba4:	ea0ea0eb 	.word	0xea0ea0eb
 8003ba8:	2000020d 	.word	0x2000020d
 8003bac:	2000032a 	.word	0x2000032a
 8003bb0:	40240000 	.word	0x40240000
 8003bb4:	2000032e 	.word	0x2000032e
 8003bb8:	51eb851f 	.word	0x51eb851f
				}
				else
					FloatToUint8s(PID4_ref, SpiTuneData2, 35);
 8003bbc:	f107 031c 	add.w	r3, r7, #28
 8003bc0:	2223      	movs	r2, #35	; 0x23
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003bc8:	f7fd fd8e 	bl	80016e8 <FloatToUint8s>
				// Measurement
				FloatToUint8s(PID4_meas, SpiTuneData2, 39);
 8003bcc:	f107 031c 	add.w	r3, r7, #28
 8003bd0:	2227      	movs	r2, #39	; 0x27
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003bd8:	f7fd fd86 	bl	80016e8 <FloatToUint8s>
				// Output
				Int16ToUint8s(PID4_out, SpiTuneData2, 43);
 8003bdc:	f107 031c 	add.w	r3, r7, #28
 8003be0:	222b      	movs	r2, #43	; 0x2b
 8003be2:	4619      	mov	r1, r3
 8003be4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8003be8:	f7fd fdb6 	bl	8001758 <Int16ToUint8s>
			}
			osMutexRelease(ControllerMutexHandle);
 8003bec:	4b65      	ldr	r3, [pc, #404]	; (8003d84 <TaskTune+0x518>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f00d ff79 	bl	8011ae8 <osMutexRelease>
			osMutexRelease(ImuMutexHandle);
 8003bf6:	4b64      	ldr	r3, [pc, #400]	; (8003d88 <TaskTune+0x51c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f00d ff74 	bl	8011ae8 <osMutexRelease>
			osMutexRelease(RemoteDataMutexHandle);
 8003c00:	4b62      	ldr	r3, [pc, #392]	; (8003d8c <TaskTune+0x520>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f00d ff6f 	bl	8011ae8 <osMutexRelease>
		}

		// Send packed data and receive tune data
		HAL_SPI_TransmitReceive(&hspi1, SpiTuneData1, Spi1Buffer, 64, HAL_MAX_DELAY);
 8003c0a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	2340      	movs	r3, #64	; 0x40
 8003c16:	4a5e      	ldr	r2, [pc, #376]	; (8003d90 <TaskTune+0x524>)
 8003c18:	485e      	ldr	r0, [pc, #376]	; (8003d94 <TaskTune+0x528>)
 8003c1a:	f009 ff9c 	bl	800db56 <HAL_SPI_TransmitReceive>
		osDelay(5);
 8003c1e:	2005      	movs	r0, #5
 8003c20:	f00d fee7 	bl	80119f2 <osDelay>
		HAL_SPI_TransmitReceive(&hspi1, SpiTuneData2, Spi1Buffer, 64, HAL_MAX_DELAY);
 8003c24:	f107 011c 	add.w	r1, r7, #28
 8003c28:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	2340      	movs	r3, #64	; 0x40
 8003c30:	4a57      	ldr	r2, [pc, #348]	; (8003d90 <TaskTune+0x524>)
 8003c32:	4858      	ldr	r0, [pc, #352]	; (8003d94 <TaskTune+0x528>)
 8003c34:	f009 ff8f 	bl	800db56 <HAL_SPI_TransmitReceive>

		// Tune controllers based on the received data
		float float_value = 0;
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]
		FloatFromUint8s(Spi1Buffer, 3, &float_value);
 8003c3e:	f107 0308 	add.w	r3, r7, #8
 8003c42:	461a      	mov	r2, r3
 8003c44:	2103      	movs	r1, #3
 8003c46:	4852      	ldr	r0, [pc, #328]	; (8003d90 <TaskTune+0x524>)
 8003c48:	f7fd fd60 	bl	800170c <FloatFromUint8s>

		if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK)
 8003c4c:	4b4d      	ldr	r3, [pc, #308]	; (8003d84 <TaskTune+0x518>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f04f 31ff 	mov.w	r1, #4294967295
 8003c54:	4618      	mov	r0, r3
 8003c56:	f00d fef9 	bl	8011a4c <osMutexWait>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f040 808b 	bne.w	8003d78 <TaskTune+0x50c>
		{
			if (Spi1Buffer[1] == 1) // PID1
 8003c62:	4b4b      	ldr	r3, [pc, #300]	; (8003d90 <TaskTune+0x524>)
 8003c64:	785b      	ldrb	r3, [r3, #1]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d11d      	bne.n	8003ca8 <TaskTune+0x43c>
			{
				if (Spi1Buffer[2] == 'p')
 8003c6c:	4b48      	ldr	r3, [pc, #288]	; (8003d90 <TaskTune+0x524>)
 8003c6e:	789b      	ldrb	r3, [r3, #2]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b70      	cmp	r3, #112	; 0x70
 8003c74:	d104      	bne.n	8003c80 <TaskTune+0x414>
					PID1->Kp = float_value;
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	e07b      	b.n	8003d78 <TaskTune+0x50c>
				else if (Spi1Buffer[2] == 'i')
 8003c80:	4b43      	ldr	r3, [pc, #268]	; (8003d90 <TaskTune+0x524>)
 8003c82:	789b      	ldrb	r3, [r3, #2]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b69      	cmp	r3, #105	; 0x69
 8003c88:	d104      	bne.n	8003c94 <TaskTune+0x428>
					PID1->Ki = float_value;
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c90:	605a      	str	r2, [r3, #4]
 8003c92:	e071      	b.n	8003d78 <TaskTune+0x50c>
				else if (Spi1Buffer[2] == 'd')
 8003c94:	4b3e      	ldr	r3, [pc, #248]	; (8003d90 <TaskTune+0x524>)
 8003c96:	789b      	ldrb	r3, [r3, #2]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b64      	cmp	r3, #100	; 0x64
 8003c9c:	d16c      	bne.n	8003d78 <TaskTune+0x50c>
					PID1->Kd = float_value;
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ca4:	609a      	str	r2, [r3, #8]
 8003ca6:	e067      	b.n	8003d78 <TaskTune+0x50c>
			}
			else if (Spi1Buffer[1] == 2) // PID2
 8003ca8:	4b39      	ldr	r3, [pc, #228]	; (8003d90 <TaskTune+0x524>)
 8003caa:	785b      	ldrb	r3, [r3, #1]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d11d      	bne.n	8003cee <TaskTune+0x482>
			{
				if (Spi1Buffer[2] == 'p')
 8003cb2:	4b37      	ldr	r3, [pc, #220]	; (8003d90 <TaskTune+0x524>)
 8003cb4:	789b      	ldrb	r3, [r3, #2]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b70      	cmp	r3, #112	; 0x70
 8003cba:	d104      	bne.n	8003cc6 <TaskTune+0x45a>
					PID2->Kp = float_value;
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	e058      	b.n	8003d78 <TaskTune+0x50c>
				else if (Spi1Buffer[2] == 'i')
 8003cc6:	4b32      	ldr	r3, [pc, #200]	; (8003d90 <TaskTune+0x524>)
 8003cc8:	789b      	ldrb	r3, [r3, #2]
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b69      	cmp	r3, #105	; 0x69
 8003cce:	d104      	bne.n	8003cda <TaskTune+0x46e>
					PID2->Ki = float_value;
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cd6:	605a      	str	r2, [r3, #4]
 8003cd8:	e04e      	b.n	8003d78 <TaskTune+0x50c>
				else if (Spi1Buffer[2] == 'd')
 8003cda:	4b2d      	ldr	r3, [pc, #180]	; (8003d90 <TaskTune+0x524>)
 8003cdc:	789b      	ldrb	r3, [r3, #2]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b64      	cmp	r3, #100	; 0x64
 8003ce2:	d149      	bne.n	8003d78 <TaskTune+0x50c>
					PID2->Kd = float_value;
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cea:	609a      	str	r2, [r3, #8]
 8003cec:	e044      	b.n	8003d78 <TaskTune+0x50c>
			}
			else if (Spi1Buffer[1] == 3) // PID3
 8003cee:	4b28      	ldr	r3, [pc, #160]	; (8003d90 <TaskTune+0x524>)
 8003cf0:	785b      	ldrb	r3, [r3, #1]
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	d11d      	bne.n	8003d34 <TaskTune+0x4c8>
			{
				if (Spi1Buffer[2] == 'p')
 8003cf8:	4b25      	ldr	r3, [pc, #148]	; (8003d90 <TaskTune+0x524>)
 8003cfa:	789b      	ldrb	r3, [r3, #2]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b70      	cmp	r3, #112	; 0x70
 8003d00:	d104      	bne.n	8003d0c <TaskTune+0x4a0>
					PID3->Kp = float_value;
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	e035      	b.n	8003d78 <TaskTune+0x50c>
				else if (Spi1Buffer[2] == 'i')
 8003d0c:	4b20      	ldr	r3, [pc, #128]	; (8003d90 <TaskTune+0x524>)
 8003d0e:	789b      	ldrb	r3, [r3, #2]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b69      	cmp	r3, #105	; 0x69
 8003d14:	d104      	bne.n	8003d20 <TaskTune+0x4b4>
					PID3->Ki = float_value;
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	e02b      	b.n	8003d78 <TaskTune+0x50c>
				else if (Spi1Buffer[2] == 'd')
 8003d20:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <TaskTune+0x524>)
 8003d22:	789b      	ldrb	r3, [r3, #2]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b64      	cmp	r3, #100	; 0x64
 8003d28:	d126      	bne.n	8003d78 <TaskTune+0x50c>
					PID3->Kd = float_value;
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d30:	609a      	str	r2, [r3, #8]
 8003d32:	e021      	b.n	8003d78 <TaskTune+0x50c>
			}
			else if (Spi1Buffer[1] == 4) // PID4
 8003d34:	4b16      	ldr	r3, [pc, #88]	; (8003d90 <TaskTune+0x524>)
 8003d36:	785b      	ldrb	r3, [r3, #1]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d11c      	bne.n	8003d78 <TaskTune+0x50c>
			{
				if (Spi1Buffer[2] == 'p')
 8003d3e:	4b14      	ldr	r3, [pc, #80]	; (8003d90 <TaskTune+0x524>)
 8003d40:	789b      	ldrb	r3, [r3, #2]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b70      	cmp	r3, #112	; 0x70
 8003d46:	d104      	bne.n	8003d52 <TaskTune+0x4e6>
					PID4->Kp = float_value;
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	e012      	b.n	8003d78 <TaskTune+0x50c>
				else if (Spi1Buffer[2] == 'i')
 8003d52:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <TaskTune+0x524>)
 8003d54:	789b      	ldrb	r3, [r3, #2]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b69      	cmp	r3, #105	; 0x69
 8003d5a:	d104      	bne.n	8003d66 <TaskTune+0x4fa>
					PID4->Ki = float_value;
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d62:	605a      	str	r2, [r3, #4]
 8003d64:	e008      	b.n	8003d78 <TaskTune+0x50c>
				else if (Spi1Buffer[2] == 'd')
 8003d66:	4b0a      	ldr	r3, [pc, #40]	; (8003d90 <TaskTune+0x524>)
 8003d68:	789b      	ldrb	r3, [r3, #2]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b64      	cmp	r3, #100	; 0x64
 8003d6e:	d103      	bne.n	8003d78 <TaskTune+0x50c>
					PID4->Kd = float_value;
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d76:	609a      	str	r2, [r3, #8]
			}
		}
		osMutexRelease(ControllerMutexHandle);
 8003d78:	4b02      	ldr	r3, [pc, #8]	; (8003d84 <TaskTune+0x518>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f00d feb3 	bl	8011ae8 <osMutexRelease>
	{
 8003d82:	e5be      	b.n	8003902 <TaskTune+0x96>
 8003d84:	20000d5c 	.word	0x20000d5c
 8003d88:	20000d4c 	.word	0x20000d4c
 8003d8c:	20000d48 	.word	0x20000d48
 8003d90:	20000688 	.word	0x20000688
 8003d94:	200009d0 	.word	0x200009d0

08003d98 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4a07      	ldr	r2, [pc, #28]	; (8003dc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003da8:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	4a06      	ldr	r2, [pc, #24]	; (8003dc8 <vApplicationGetIdleTaskMemory+0x30>)
 8003dae:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2280      	movs	r2, #128	; 0x80
 8003db4:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	200006dc 	.word	0x200006dc
 8003dc8:	2000077c 	.word	0x2000077c

08003dcc <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a42      	ldr	r2, [pc, #264]	; (8003ee0 <HAL_UART_RxCpltCallback+0x114>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d130      	bne.n	8003e3e <HAL_UART_RxCpltCallback+0x72>
	{
		//Log("U2CB");
		Uart2CallbackCounter++;
 8003ddc:	4b41      	ldr	r3, [pc, #260]	; (8003ee4 <HAL_UART_RxCpltCallback+0x118>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3301      	adds	r3, #1
 8003de2:	4a40      	ldr	r2, [pc, #256]	; (8003ee4 <HAL_UART_RxCpltCallback+0x118>)
 8003de4:	6013      	str	r3, [r2, #0]

		if (osMutexWait(RemoteBufferMutexHandle, 0) == osOK)
 8003de6:	4b40      	ldr	r3, [pc, #256]	; (8003ee8 <HAL_UART_RxCpltCallback+0x11c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2100      	movs	r1, #0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f00d fe2d 	bl	8011a4c <osMutexWait>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d11c      	bne.n	8003e32 <HAL_UART_RxCpltCallback+0x66>
		{
			//Log("U2CB-RBM-WE");
			for (int i = 0; i < REM_BUF_SIZE; i++)
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	e00c      	b.n	8003e18 <HAL_UART_RxCpltCallback+0x4c>
				RemoteBuffer[i] = Uart2Buffer[i];
 8003dfe:	4a3b      	ldr	r2, [pc, #236]	; (8003eec <HAL_UART_RxCpltCallback+0x120>)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4413      	add	r3, r2
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	b2d9      	uxtb	r1, r3
 8003e08:	4a39      	ldr	r2, [pc, #228]	; (8003ef0 <HAL_UART_RxCpltCallback+0x124>)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	460a      	mov	r2, r1
 8003e10:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < REM_BUF_SIZE; i++)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	3301      	adds	r3, #1
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b3f      	cmp	r3, #63	; 0x3f
 8003e1c:	ddef      	ble.n	8003dfe <HAL_UART_RxCpltCallback+0x32>

			osMutexRelease(RemoteBufferMutexHandle);
 8003e1e:	4b32      	ldr	r3, [pc, #200]	; (8003ee8 <HAL_UART_RxCpltCallback+0x11c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f00d fe60 	bl	8011ae8 <osMutexRelease>

			// Signal to TaskTemote
			osSemaphoreRelease(RemoteBufferFullSemaphoreHandle);
 8003e28:	4b32      	ldr	r3, [pc, #200]	; (8003ef4 <HAL_UART_RxCpltCallback+0x128>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f00d ff11 	bl	8011c54 <osSemaphoreRelease>
//				sprintf(str, "UART Receive Error: [%d]\r\n", Uart2CallbackCounter);
//				HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
//			}
//		}

		HAL_UART_Receive_IT(&huart2, &Uart2Buffer, 64);
 8003e32:	2240      	movs	r2, #64	; 0x40
 8003e34:	492d      	ldr	r1, [pc, #180]	; (8003eec <HAL_UART_RxCpltCallback+0x120>)
 8003e36:	482a      	ldr	r0, [pc, #168]	; (8003ee0 <HAL_UART_RxCpltCallback+0x114>)
 8003e38:	f00c f957 	bl	80100ea <HAL_UART_Receive_IT>
			//HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}

		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
	}
}
 8003e3c:	e04b      	b.n	8003ed6 <HAL_UART_RxCpltCallback+0x10a>
	else if (huart == &huart4)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a2d      	ldr	r2, [pc, #180]	; (8003ef8 <HAL_UART_RxCpltCallback+0x12c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d147      	bne.n	8003ed6 <HAL_UART_RxCpltCallback+0x10a>
		if ((GPSPackageIndex == 0 && Uart4Buffer == '$')
 8003e46:	4b2d      	ldr	r3, [pc, #180]	; (8003efc <HAL_UART_RxCpltCallback+0x130>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d104      	bne.n	8003e5a <HAL_UART_RxCpltCallback+0x8e>
 8003e50:	4b2b      	ldr	r3, [pc, #172]	; (8003f00 <HAL_UART_RxCpltCallback+0x134>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b24      	cmp	r3, #36	; 0x24
 8003e58:	d013      	beq.n	8003e82 <HAL_UART_RxCpltCallback+0xb6>
				|| (GPSPackageIndex == 1 && Uart4Buffer == 'G')
 8003e5a:	4b28      	ldr	r3, [pc, #160]	; (8003efc <HAL_UART_RxCpltCallback+0x130>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d104      	bne.n	8003e6e <HAL_UART_RxCpltCallback+0xa2>
 8003e64:	4b26      	ldr	r3, [pc, #152]	; (8003f00 <HAL_UART_RxCpltCallback+0x134>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b47      	cmp	r3, #71	; 0x47
 8003e6c:	d009      	beq.n	8003e82 <HAL_UART_RxCpltCallback+0xb6>
				|| (1 < GPSPackageIndex && GPSPackageIndex < GPS_BUFFSIZE))
 8003e6e:	4b23      	ldr	r3, [pc, #140]	; (8003efc <HAL_UART_RxCpltCallback+0x130>)
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d926      	bls.n	8003ec6 <HAL_UART_RxCpltCallback+0xfa>
 8003e78:	4b20      	ldr	r3, [pc, #128]	; (8003efc <HAL_UART_RxCpltCallback+0x130>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2bff      	cmp	r3, #255	; 0xff
 8003e80:	d021      	beq.n	8003ec6 <HAL_UART_RxCpltCallback+0xfa>
			GPSPackageBuffer[GPSPackageIndex] = Uart4Buffer;
 8003e82:	4b1e      	ldr	r3, [pc, #120]	; (8003efc <HAL_UART_RxCpltCallback+0x130>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <HAL_UART_RxCpltCallback+0x134>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	b2d9      	uxtb	r1, r3
 8003e90:	4b1c      	ldr	r3, [pc, #112]	; (8003f04 <HAL_UART_RxCpltCallback+0x138>)
 8003e92:	5499      	strb	r1, [r3, r2]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8003e94:	4b19      	ldr	r3, [pc, #100]	; (8003efc <HAL_UART_RxCpltCallback+0x130>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2bfd      	cmp	r3, #253	; 0xfd
 8003e9c:	d807      	bhi.n	8003eae <HAL_UART_RxCpltCallback+0xe2>
				GPSPackageIndex++;
 8003e9e:	4b17      	ldr	r3, [pc, #92]	; (8003efc <HAL_UART_RxCpltCallback+0x130>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	4b14      	ldr	r3, [pc, #80]	; (8003efc <HAL_UART_RxCpltCallback+0x130>)
 8003eaa:	701a      	strb	r2, [r3, #0]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8003eac:	e00e      	b.n	8003ecc <HAL_UART_RxCpltCallback+0x100>
				GPSPackageIndex = 0;
 8003eae:	4b13      	ldr	r3, [pc, #76]	; (8003efc <HAL_UART_RxCpltCallback+0x130>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	701a      	strb	r2, [r3, #0]
				ProcessGPSPackageBuffer = true;
 8003eb4:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <HAL_UART_RxCpltCallback+0x13c>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	701a      	strb	r2, [r3, #0]
				osSemaphoreRelease(GpsBufferSemaphoreHandle);
 8003eba:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <HAL_UART_RxCpltCallback+0x140>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f00d fec8 	bl	8011c54 <osSemaphoreRelease>
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8003ec4:	e002      	b.n	8003ecc <HAL_UART_RxCpltCallback+0x100>
			GPSPackageIndex = 0;
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <HAL_UART_RxCpltCallback+0x130>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
 8003ecc:	2201      	movs	r2, #1
 8003ece:	490c      	ldr	r1, [pc, #48]	; (8003f00 <HAL_UART_RxCpltCallback+0x134>)
 8003ed0:	4809      	ldr	r0, [pc, #36]	; (8003ef8 <HAL_UART_RxCpltCallback+0x12c>)
 8003ed2:	f00c f94e 	bl	8010172 <HAL_UART_Receive_DMA>
}
 8003ed6:	bf00      	nop
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000bb8 	.word	0x20000bb8
 8003ee4:	20000210 	.word	0x20000210
 8003ee8:	20000d58 	.word	0x20000d58
 8003eec:	20000488 	.word	0x20000488
 8003ef0:	200004c8 	.word	0x200004c8
 8003ef4:	20000d68 	.word	0x20000d68
 8003ef8:	20000b30 	.word	0x20000b30
 8003efc:	20000585 	.word	0x20000585
 8003f00:	20000584 	.word	0x20000584
 8003f04:	20000588 	.word	0x20000588
 8003f08:	20000687 	.word	0x20000687
 8003f0c:	20000d64 	.word	0x20000d64

08003f10 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08a      	sub	sp, #40	; 0x28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a23      	ldr	r2, [pc, #140]	; (8003fa8 <HAL_UART_ErrorCallback+0x98>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d11c      	bne.n	8003f5a <HAL_UART_ErrorCallback+0x4a>
	{
		if (huart->ErrorCode != 0)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d03a      	beq.n	8003fa0 <HAL_UART_ErrorCallback+0x90>
		{
			//Diag = false;

			char str[32];
			sprintf(str, "UART2 Error Callback: %d\r\n", huart->ErrorCode);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003f30:	f107 0308 	add.w	r3, r7, #8
 8003f34:	491d      	ldr	r1, [pc, #116]	; (8003fac <HAL_UART_ErrorCallback+0x9c>)
 8003f36:	4618      	mov	r0, r3
 8003f38:	f002 fa94 	bl	8006464 <sprintf_>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8003f3c:	f107 0308 	add.w	r3, r7, #8
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fc f9bd 	bl	80002c0 <strlen>
 8003f46:	4603      	mov	r3, r0
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	f107 0108 	add.w	r1, r7, #8
 8003f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f52:	4817      	ldr	r0, [pc, #92]	; (8003fb0 <HAL_UART_ErrorCallback+0xa0>)
 8003f54:	f00c f846 	bl	800ffe4 <HAL_UART_Transmit>
			char str[32];
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}
	}
}
 8003f58:	e022      	b.n	8003fa0 <HAL_UART_ErrorCallback+0x90>
	else if (huart == &huart4)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a15      	ldr	r2, [pc, #84]	; (8003fb4 <HAL_UART_ErrorCallback+0xa4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d11e      	bne.n	8003fa0 <HAL_UART_ErrorCallback+0x90>
		if (huart->ErrorCode != 0)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d019      	beq.n	8003fa0 <HAL_UART_ErrorCallback+0x90>
			Diag = false;
 8003f6c:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <HAL_UART_ErrorCallback+0xa8>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	701a      	strb	r2, [r3, #0]
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003f78:	f107 0308 	add.w	r3, r7, #8
 8003f7c:	490f      	ldr	r1, [pc, #60]	; (8003fbc <HAL_UART_ErrorCallback+0xac>)
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f002 fa70 	bl	8006464 <sprintf_>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8003f84:	f107 0308 	add.w	r3, r7, #8
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fc f999 	bl	80002c0 <strlen>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	f107 0108 	add.w	r1, r7, #8
 8003f96:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9a:	4805      	ldr	r0, [pc, #20]	; (8003fb0 <HAL_UART_ErrorCallback+0xa0>)
 8003f9c:	f00c f822 	bl	800ffe4 <HAL_UART_Transmit>
}
 8003fa0:	bf00      	nop
 8003fa2:	3728      	adds	r7, #40	; 0x28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	20000bb8 	.word	0x20000bb8
 8003fac:	0801bcd8 	.word	0x0801bcd8
 8003fb0:	20000c40 	.word	0x20000c40
 8003fb4:	20000b30 	.word	0x20000b30
 8003fb8:	20000000 	.word	0x20000000
 8003fbc:	0801bcf4 	.word	0x0801bcf4

08003fc0 <HAL_TIM_IC_CaptureCallback>:
			}
		}
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a05      	ldr	r2, [pc, #20]	; (8003fe0 <HAL_TIM_IC_CaptureCallback+0x20>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d103      	bne.n	8003fd8 <HAL_TIM_IC_CaptureCallback+0x18>
	{
		HCSR04_TMR_IC_ISR(&HCSR04, htim);
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	4804      	ldr	r0, [pc, #16]	; (8003fe4 <HAL_TIM_IC_CaptureCallback+0x24>)
 8003fd4:	f006 fba4 	bl	800a720 <HCSR04_TMR_IC_ISR>
	}
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	20000ae4 	.word	0x20000ae4
 8003fe4:	2000044c 	.word	0x2000044c

08003fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fe8:	b5b0      	push	{r4, r5, r7, lr}
 8003fea:	b0c6      	sub	sp, #280	; 0x118
 8003fec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fee:	f006 fd30 	bl	800aa52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ff2:	f000 f9eb 	bl	80043cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ff6:	f000 fce7 	bl	80049c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003ffa:	f000 fcc7 	bl	800498c <MX_DMA_Init>
  MX_SPI1_Init();
 8003ffe:	f000 fa91 	bl	8004524 <MX_SPI1_Init>
  MX_SPI2_Init();
 8004002:	f000 facd 	bl	80045a0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8004006:	f000 fb09 	bl	800461c <MX_TIM1_Init>
  MX_TIM3_Init();
 800400a:	f000 fbd7 	bl	80047bc <MX_TIM3_Init>
  MX_UART4_Init();
 800400e:	f000 fc29 	bl	8004864 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8004012:	f000 fc57 	bl	80048c4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8004016:	f000 fa45 	bl	80044a4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800401a:	f000 fc87 	bl	800492c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Init IMU
  	if(MPU_Init(&hspi2, &MPU9250) == 0 && BMP280_initialize(&hspi2, &BMP280) == 0)
 800401e:	4916      	ldr	r1, [pc, #88]	; (8004078 <main+0x90>)
 8004020:	4816      	ldr	r0, [pc, #88]	; (800407c <main+0x94>)
 8004022:	f005 ff89 	bl	8009f38 <MPU_Init>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10a      	bne.n	8004042 <main+0x5a>
 800402c:	4914      	ldr	r1, [pc, #80]	; (8004080 <main+0x98>)
 800402e:	4813      	ldr	r0, [pc, #76]	; (800407c <main+0x94>)
 8004030:	f005 f936 	bl	80092a0 <BMP280_initialize>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d103      	bne.n	8004042 <main+0x5a>
  		IsImuAvailable = true;
 800403a:	4b12      	ldr	r3, [pc, #72]	; (8004084 <main+0x9c>)
 800403c:	2201      	movs	r2, #1
 800403e:	701a      	strb	r2, [r3, #0]
 8004040:	e002      	b.n	8004048 <main+0x60>
  	else
  		IsImuAvailable = false;
 8004042:	4b10      	ldr	r3, [pc, #64]	; (8004084 <main+0x9c>)
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]

  	// Init Magnetometer
  	if (HMC5883L_Init() == 0)
 8004048:	f004 ffac 	bl	8008fa4 <HMC5883L_Init>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d103      	bne.n	800405a <main+0x72>
  		IsMagnAvailable = true;
 8004052:	4b0d      	ldr	r3, [pc, #52]	; (8004088 <main+0xa0>)
 8004054:	2201      	movs	r2, #1
 8004056:	701a      	strb	r2, [r3, #0]
 8004058:	e002      	b.n	8004060 <main+0x78>
  	else
  		IsMagnAvailable = false;
 800405a:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <main+0xa0>)
 800405c:	2200      	movs	r2, #0
 800405e:	701a      	strb	r2, [r3, #0]

  	// Init Distance sensor
  	if (HCSR04_Init(&HCSR04, &htim3) == 0)
 8004060:	490a      	ldr	r1, [pc, #40]	; (800408c <main+0xa4>)
 8004062:	480b      	ldr	r0, [pc, #44]	; (8004090 <main+0xa8>)
 8004064:	f006 fb0e 	bl	800a684 <HCSR04_Init>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d114      	bne.n	8004098 <main+0xb0>
  		IsDistAvailable = false;
 800406e:	4b09      	ldr	r3, [pc, #36]	; (8004094 <main+0xac>)
 8004070:	2200      	movs	r2, #0
 8004072:	701a      	strb	r2, [r3, #0]
 8004074:	e013      	b.n	800409e <main+0xb6>
 8004076:	bf00      	nop
 8004078:	20000340 	.word	0x20000340
 800407c:	20000a34 	.word	0x20000a34
 8004080:	200003e8 	.word	0x200003e8
 8004084:	20000214 	.word	0x20000214
 8004088:	20000215 	.word	0x20000215
 800408c:	20000ae4 	.word	0x20000ae4
 8004090:	2000044c 	.word	0x2000044c
 8004094:	20000216 	.word	0x20000216
  	else
  		IsDistAvailable = false;
 8004098:	4bb3      	ldr	r3, [pc, #716]	; (8004368 <main+0x380>)
 800409a:	2200      	movs	r2, #0
 800409c:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MagnMutex */
  osMutexDef(MagnMutex);
 800409e:	2300      	movs	r3, #0
 80040a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80040a4:	2300      	movs	r3, #0
 80040a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  MagnMutexHandle = osMutexCreate(osMutex(MagnMutex));
 80040aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80040ae:	4618      	mov	r0, r3
 80040b0:	f00d fcb3 	bl	8011a1a <osMutexCreate>
 80040b4:	4603      	mov	r3, r0
 80040b6:	4aad      	ldr	r2, [pc, #692]	; (800436c <main+0x384>)
 80040b8:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteDataMutex */
  osMutexDef(RemoteDataMutex);
 80040ba:	2300      	movs	r3, #0
 80040bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80040c0:	2300      	movs	r3, #0
 80040c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RemoteDataMutexHandle = osMutexCreate(osMutex(RemoteDataMutex));
 80040c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040ca:	4618      	mov	r0, r3
 80040cc:	f00d fca5 	bl	8011a1a <osMutexCreate>
 80040d0:	4603      	mov	r3, r0
 80040d2:	4aa7      	ldr	r2, [pc, #668]	; (8004370 <main+0x388>)
 80040d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of ImuMutex */
  osMutexDef(ImuMutex);
 80040d6:	2300      	movs	r3, #0
 80040d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80040dc:	2300      	movs	r3, #0
 80040de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  ImuMutexHandle = osMutexCreate(osMutex(ImuMutex));
 80040e2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80040e6:	4618      	mov	r0, r3
 80040e8:	f00d fc97 	bl	8011a1a <osMutexCreate>
 80040ec:	4603      	mov	r3, r0
 80040ee:	4aa1      	ldr	r2, [pc, #644]	; (8004374 <main+0x38c>)
 80040f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsDataMutex */
  osMutexDef(GpsDataMutex);
 80040f2:	2300      	movs	r3, #0
 80040f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80040f8:	2300      	movs	r3, #0
 80040fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  GpsDataMutexHandle = osMutexCreate(osMutex(GpsDataMutex));
 80040fe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004102:	4618      	mov	r0, r3
 8004104:	f00d fc89 	bl	8011a1a <osMutexCreate>
 8004108:	4603      	mov	r3, r0
 800410a:	4a9b      	ldr	r2, [pc, #620]	; (8004378 <main+0x390>)
 800410c:	6013      	str	r3, [r2, #0]

  /* definition and creation of DistMutex */
  osMutexDef(DistMutex);
 800410e:	2300      	movs	r3, #0
 8004110:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004114:	2300      	movs	r3, #0
 8004116:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  DistMutexHandle = osMutexCreate(osMutex(DistMutex));
 800411a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800411e:	4618      	mov	r0, r3
 8004120:	f00d fc7b 	bl	8011a1a <osMutexCreate>
 8004124:	4603      	mov	r3, r0
 8004126:	4a95      	ldr	r2, [pc, #596]	; (800437c <main+0x394>)
 8004128:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferMutex */
  osMutexDef(RemoteBufferMutex);
 800412a:	2300      	movs	r3, #0
 800412c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004130:	2300      	movs	r3, #0
 8004132:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RemoteBufferMutexHandle = osMutexCreate(osMutex(RemoteBufferMutex));
 8004136:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800413a:	4618      	mov	r0, r3
 800413c:	f00d fc6d 	bl	8011a1a <osMutexCreate>
 8004140:	4603      	mov	r3, r0
 8004142:	4a8f      	ldr	r2, [pc, #572]	; (8004380 <main+0x398>)
 8004144:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControllerMutex */
  osMutexDef(ControllerMutex);
 8004146:	2300      	movs	r3, #0
 8004148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800414c:	2300      	movs	r3, #0
 800414e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  ControllerMutexHandle = osMutexCreate(osMutex(ControllerMutex));
 8004152:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004156:	4618      	mov	r0, r3
 8004158:	f00d fc5f 	bl	8011a1a <osMutexCreate>
 800415c:	4603      	mov	r3, r0
 800415e:	4a89      	ldr	r2, [pc, #548]	; (8004384 <main+0x39c>)
 8004160:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */

	osMutexRelease(MagnMutexHandle);
 8004162:	4b82      	ldr	r3, [pc, #520]	; (800436c <main+0x384>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f00d fcbe 	bl	8011ae8 <osMutexRelease>
	osMutexRelease(RemoteDataMutexHandle);
 800416c:	4b80      	ldr	r3, [pc, #512]	; (8004370 <main+0x388>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f00d fcb9 	bl	8011ae8 <osMutexRelease>
	osMutexRelease(ImuMutexHandle);
 8004176:	4b7f      	ldr	r3, [pc, #508]	; (8004374 <main+0x38c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f00d fcb4 	bl	8011ae8 <osMutexRelease>
	osMutexRelease(GpsDataMutexHandle);
 8004180:	4b7d      	ldr	r3, [pc, #500]	; (8004378 <main+0x390>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4618      	mov	r0, r3
 8004186:	f00d fcaf 	bl	8011ae8 <osMutexRelease>
	osMutexRelease(RemoteBufferMutexHandle);
 800418a:	4b7d      	ldr	r3, [pc, #500]	; (8004380 <main+0x398>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f00d fcaa 	bl	8011ae8 <osMutexRelease>
	osMutexRelease(ControllerMutexHandle);
 8004194:	4b7b      	ldr	r3, [pc, #492]	; (8004384 <main+0x39c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4618      	mov	r0, r3
 800419a:	f00d fca5 	bl	8011ae8 <osMutexRelease>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of DistSemaphore */
  osSemaphoreDef(DistSemaphore);
 800419e:	2300      	movs	r3, #0
 80041a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041a4:	2300      	movs	r3, #0
 80041a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  DistSemaphoreHandle = osSemaphoreCreate(osSemaphore(DistSemaphore), 1);
 80041aa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80041ae:	2101      	movs	r1, #1
 80041b0:	4618      	mov	r0, r3
 80041b2:	f00d fccf 	bl	8011b54 <osSemaphoreCreate>
 80041b6:	4603      	mov	r3, r0
 80041b8:	4a73      	ldr	r2, [pc, #460]	; (8004388 <main+0x3a0>)
 80041ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsBufferSemaphore */
  osSemaphoreDef(GpsBufferSemaphore);
 80041bc:	2300      	movs	r3, #0
 80041be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041c2:	2300      	movs	r3, #0
 80041c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GpsBufferSemaphoreHandle = osSemaphoreCreate(osSemaphore(GpsBufferSemaphore), 1);
 80041c8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80041cc:	2101      	movs	r1, #1
 80041ce:	4618      	mov	r0, r3
 80041d0:	f00d fcc0 	bl	8011b54 <osSemaphoreCreate>
 80041d4:	4603      	mov	r3, r0
 80041d6:	4a6d      	ldr	r2, [pc, #436]	; (800438c <main+0x3a4>)
 80041d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferFullSemaphore */
  osSemaphoreDef(RemoteBufferFullSemaphore);
 80041da:	2300      	movs	r3, #0
 80041dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041e0:	2300      	movs	r3, #0
 80041e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RemoteBufferFullSemaphoreHandle = osSemaphoreCreate(osSemaphore(RemoteBufferFullSemaphore), 1);
 80041e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80041ea:	2101      	movs	r1, #1
 80041ec:	4618      	mov	r0, r3
 80041ee:	f00d fcb1 	bl	8011b54 <osSemaphoreCreate>
 80041f2:	4603      	mov	r3, r0
 80041f4:	4a66      	ldr	r2, [pc, #408]	; (8004390 <main+0x3a8>)
 80041f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  if (osSemaphoreGetCount(DistSemaphoreHandle) == 1)
 80041f8:	4b63      	ldr	r3, [pc, #396]	; (8004388 <main+0x3a0>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f00d fd5f 	bl	8011cc0 <osSemaphoreGetCount>
 8004202:	4603      	mov	r3, r0
 8004204:	2b01      	cmp	r3, #1
 8004206:	d106      	bne.n	8004216 <main+0x22e>
  	  osSemaphoreWait(DistSemaphoreHandle, osWaitForever);
 8004208:	4b5f      	ldr	r3, [pc, #380]	; (8004388 <main+0x3a0>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f04f 31ff 	mov.w	r1, #4294967295
 8004210:	4618      	mov	r0, r3
 8004212:	f00d fcd1 	bl	8011bb8 <osSemaphoreWait>
  if (osSemaphoreGetCount(GpsBufferSemaphoreHandle) == 1)
 8004216:	4b5d      	ldr	r3, [pc, #372]	; (800438c <main+0x3a4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f00d fd50 	bl	8011cc0 <osSemaphoreGetCount>
 8004220:	4603      	mov	r3, r0
 8004222:	2b01      	cmp	r3, #1
 8004224:	d106      	bne.n	8004234 <main+0x24c>
  	  osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever);
 8004226:	4b59      	ldr	r3, [pc, #356]	; (800438c <main+0x3a4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f04f 31ff 	mov.w	r1, #4294967295
 800422e:	4618      	mov	r0, r3
 8004230:	f00d fcc2 	bl	8011bb8 <osSemaphoreWait>

  if (osSemaphoreGetCount(RemoteBufferFullSemaphoreHandle) == 1)
 8004234:	4b56      	ldr	r3, [pc, #344]	; (8004390 <main+0x3a8>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f00d fd41 	bl	8011cc0 <osSemaphoreGetCount>
 800423e:	4603      	mov	r3, r0
 8004240:	2b01      	cmp	r3, #1
 8004242:	d106      	bne.n	8004252 <main+0x26a>
  	  osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever);
 8004244:	4b52      	ldr	r3, [pc, #328]	; (8004390 <main+0x3a8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f04f 31ff 	mov.w	r1, #4294967295
 800424c:	4618      	mov	r0, r3
 800424e:	f00d fcb3 	bl	8011bb8 <osSemaphoreWait>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskSensorData */
  osThreadDef(TaskSensorData, RunTaskSensorData, osPriorityHigh, 0, 512);
 8004252:	4b50      	ldr	r3, [pc, #320]	; (8004394 <main+0x3ac>)
 8004254:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8004258:	461d      	mov	r5, r3
 800425a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800425c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800425e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004262:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSensorDataHandle = osThreadCreate(osThread(TaskSensorData), NULL);
 8004266:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800426a:	2100      	movs	r1, #0
 800426c:	4618      	mov	r0, r3
 800426e:	f00d fb74 	bl	801195a <osThreadCreate>
 8004272:	4603      	mov	r3, r0
 8004274:	4a48      	ldr	r2, [pc, #288]	; (8004398 <main+0x3b0>)
 8004276:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskController */
  osThreadDef(TaskController, RunTaskController, osPriorityAboveNormal, 0, 512);
 8004278:	4b48      	ldr	r3, [pc, #288]	; (800439c <main+0x3b4>)
 800427a:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800427e:	461d      	mov	r5, r3
 8004280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004284:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004288:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskControllerHandle = osThreadCreate(osThread(TaskController), NULL);
 800428c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004290:	2100      	movs	r1, #0
 8004292:	4618      	mov	r0, r3
 8004294:	f00d fb61 	bl	801195a <osThreadCreate>
 8004298:	4603      	mov	r3, r0
 800429a:	4a41      	ldr	r2, [pc, #260]	; (80043a0 <main+0x3b8>)
 800429c:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskRemote */
  osThreadDef(TaskRemote, RunTaskRemote, osPriorityRealtime, 0, 512);
 800429e:	4b41      	ldr	r3, [pc, #260]	; (80043a4 <main+0x3bc>)
 80042a0:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80042a4:	461d      	mov	r5, r3
 80042a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80042ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskRemoteHandle = osThreadCreate(osThread(TaskRemote), NULL);
 80042b2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f00d fb4e 	bl	801195a <osThreadCreate>
 80042be:	4603      	mov	r3, r0
 80042c0:	4a39      	ldr	r2, [pc, #228]	; (80043a8 <main+0x3c0>)
 80042c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskMotor */
  osThreadDef(TaskMotor, RunTaskMotor, osPriorityNormal, 0, 256);
 80042c4:	4b39      	ldr	r3, [pc, #228]	; (80043ac <main+0x3c4>)
 80042c6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80042ca:	461d      	mov	r5, r3
 80042cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80042d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskMotorHandle = osThreadCreate(osThread(TaskMotor), NULL);
 80042d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f00d fb3b 	bl	801195a <osThreadCreate>
 80042e4:	4603      	mov	r3, r0
 80042e6:	4a32      	ldr	r2, [pc, #200]	; (80043b0 <main+0x3c8>)
 80042e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskPower */
  osThreadDef(TaskPower, RunTaskPower, osPriorityBelowNormal, 0, 256);
 80042ea:	4b32      	ldr	r3, [pc, #200]	; (80043b4 <main+0x3cc>)
 80042ec:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80042f0:	461d      	mov	r5, r3
 80042f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80042fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskPowerHandle = osThreadCreate(osThread(TaskPower), NULL);
 80042fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004302:	2100      	movs	r1, #0
 8004304:	4618      	mov	r0, r3
 8004306:	f00d fb28 	bl	801195a <osThreadCreate>
 800430a:	4603      	mov	r3, r0
 800430c:	4a2a      	ldr	r2, [pc, #168]	; (80043b8 <main+0x3d0>)
 800430e:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskDiagnostics */
  osThreadDef(TaskDiagnostics, RunTaskDiagnostics, osPriorityLow, 0, 2048);
 8004310:	4b2a      	ldr	r3, [pc, #168]	; (80043bc <main+0x3d4>)
 8004312:	f107 0420 	add.w	r4, r7, #32
 8004316:	461d      	mov	r5, r3
 8004318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800431a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800431c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004320:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDiagnosticsHandle = osThreadCreate(osThread(TaskDiagnostics), NULL);
 8004324:	f107 0320 	add.w	r3, r7, #32
 8004328:	2100      	movs	r1, #0
 800432a:	4618      	mov	r0, r3
 800432c:	f00d fb15 	bl	801195a <osThreadCreate>
 8004330:	4603      	mov	r3, r0
 8004332:	4a23      	ldr	r2, [pc, #140]	; (80043c0 <main+0x3d8>)
 8004334:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTune */
  osThreadDef(TaskTune, RunTaskTune, osPriorityBelowNormal, 0, 512);
 8004336:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800433a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800433e:	4a21      	ldr	r2, [pc, #132]	; (80043c4 <main+0x3dc>)
 8004340:	461c      	mov	r4, r3
 8004342:	4615      	mov	r5, r2
 8004344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004348:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800434c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTuneHandle = osThreadCreate(osThread(TaskTune), NULL);
 8004350:	1d3b      	adds	r3, r7, #4
 8004352:	2100      	movs	r1, #0
 8004354:	4618      	mov	r0, r3
 8004356:	f00d fb00 	bl	801195a <osThreadCreate>
 800435a:	4603      	mov	r3, r0
 800435c:	4a1a      	ldr	r2, [pc, #104]	; (80043c8 <main+0x3e0>)
 800435e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004360:	f00d faf4 	bl	801194c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8004364:	e7fe      	b.n	8004364 <main+0x37c>
 8004366:	bf00      	nop
 8004368:	20000216 	.word	0x20000216
 800436c:	20000d44 	.word	0x20000d44
 8004370:	20000d48 	.word	0x20000d48
 8004374:	20000d4c 	.word	0x20000d4c
 8004378:	20000d50 	.word	0x20000d50
 800437c:	20000d54 	.word	0x20000d54
 8004380:	20000d58 	.word	0x20000d58
 8004384:	20000d5c 	.word	0x20000d5c
 8004388:	20000d60 	.word	0x20000d60
 800438c:	20000d64 	.word	0x20000d64
 8004390:	20000d68 	.word	0x20000d68
 8004394:	0801bd3c 	.word	0x0801bd3c
 8004398:	20000d28 	.word	0x20000d28
 800439c:	0801bd68 	.word	0x0801bd68
 80043a0:	20000d2c 	.word	0x20000d2c
 80043a4:	0801bd90 	.word	0x0801bd90
 80043a8:	20000d30 	.word	0x20000d30
 80043ac:	0801bdb8 	.word	0x0801bdb8
 80043b0:	20000d34 	.word	0x20000d34
 80043b4:	0801bde0 	.word	0x0801bde0
 80043b8:	20000d38 	.word	0x20000d38
 80043bc:	0801be0c 	.word	0x0801be0c
 80043c0:	20000d3c 	.word	0x20000d3c
 80043c4:	0801be34 	.word	0x0801be34
 80043c8:	20000d40 	.word	0x20000d40

080043cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b094      	sub	sp, #80	; 0x50
 80043d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043d2:	f107 0320 	add.w	r3, r7, #32
 80043d6:	2230      	movs	r2, #48	; 0x30
 80043d8:	2100      	movs	r1, #0
 80043da:	4618      	mov	r0, r3
 80043dc:	f011 f80f 	bl	80153fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043e0:	f107 030c 	add.w	r3, r7, #12
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	605a      	str	r2, [r3, #4]
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	60da      	str	r2, [r3, #12]
 80043ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80043f0:	4b2a      	ldr	r3, [pc, #168]	; (800449c <SystemClock_Config+0xd0>)
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	4a29      	ldr	r2, [pc, #164]	; (800449c <SystemClock_Config+0xd0>)
 80043f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043fa:	6413      	str	r3, [r2, #64]	; 0x40
 80043fc:	4b27      	ldr	r3, [pc, #156]	; (800449c <SystemClock_Config+0xd0>)
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004404:	60bb      	str	r3, [r7, #8]
 8004406:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004408:	4b25      	ldr	r3, [pc, #148]	; (80044a0 <SystemClock_Config+0xd4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a24      	ldr	r2, [pc, #144]	; (80044a0 <SystemClock_Config+0xd4>)
 800440e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	4b22      	ldr	r3, [pc, #136]	; (80044a0 <SystemClock_Config+0xd4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800441c:	607b      	str	r3, [r7, #4]
 800441e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004420:	2302      	movs	r3, #2
 8004422:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004424:	2301      	movs	r3, #1
 8004426:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004428:	2310      	movs	r3, #16
 800442a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800442c:	2302      	movs	r3, #2
 800442e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004430:	2300      	movs	r3, #0
 8004432:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004434:	2308      	movs	r3, #8
 8004436:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8004438:	23d8      	movs	r3, #216	; 0xd8
 800443a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800443c:	2302      	movs	r3, #2
 800443e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004440:	2302      	movs	r3, #2
 8004442:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004444:	f107 0320 	add.w	r3, r7, #32
 8004448:	4618      	mov	r0, r3
 800444a:	f008 f835 	bl	800c4b8 <HAL_RCC_OscConfig>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004454:	f000 fbac 	bl	8004bb0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004458:	f007 ffde 	bl	800c418 <HAL_PWREx_EnableOverDrive>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004462:	f000 fba5 	bl	8004bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004466:	230f      	movs	r3, #15
 8004468:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800446a:	2302      	movs	r3, #2
 800446c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800446e:	2300      	movs	r3, #0
 8004470:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004472:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004476:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800447c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800447e:	f107 030c 	add.w	r3, r7, #12
 8004482:	2107      	movs	r1, #7
 8004484:	4618      	mov	r0, r3
 8004486:	f008 fabb 	bl	800ca00 <HAL_RCC_ClockConfig>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8004490:	f000 fb8e 	bl	8004bb0 <Error_Handler>
  }
}
 8004494:	bf00      	nop
 8004496:	3750      	adds	r7, #80	; 0x50
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40023800 	.word	0x40023800
 80044a0:	40007000 	.word	0x40007000

080044a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80044a8:	4b1b      	ldr	r3, [pc, #108]	; (8004518 <MX_I2C1_Init+0x74>)
 80044aa:	4a1c      	ldr	r2, [pc, #112]	; (800451c <MX_I2C1_Init+0x78>)
 80044ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xA0404E72;
 80044ae:	4b1a      	ldr	r3, [pc, #104]	; (8004518 <MX_I2C1_Init+0x74>)
 80044b0:	4a1b      	ldr	r2, [pc, #108]	; (8004520 <MX_I2C1_Init+0x7c>)
 80044b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80044b4:	4b18      	ldr	r3, [pc, #96]	; (8004518 <MX_I2C1_Init+0x74>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80044ba:	4b17      	ldr	r3, [pc, #92]	; (8004518 <MX_I2C1_Init+0x74>)
 80044bc:	2201      	movs	r2, #1
 80044be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80044c0:	4b15      	ldr	r3, [pc, #84]	; (8004518 <MX_I2C1_Init+0x74>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80044c6:	4b14      	ldr	r3, [pc, #80]	; (8004518 <MX_I2C1_Init+0x74>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80044cc:	4b12      	ldr	r3, [pc, #72]	; (8004518 <MX_I2C1_Init+0x74>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80044d2:	4b11      	ldr	r3, [pc, #68]	; (8004518 <MX_I2C1_Init+0x74>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80044d8:	4b0f      	ldr	r3, [pc, #60]	; (8004518 <MX_I2C1_Init+0x74>)
 80044da:	2200      	movs	r2, #0
 80044dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80044de:	480e      	ldr	r0, [pc, #56]	; (8004518 <MX_I2C1_Init+0x74>)
 80044e0:	f007 f9aa 	bl	800b838 <HAL_I2C_Init>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80044ea:	f000 fb61 	bl	8004bb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80044ee:	2100      	movs	r1, #0
 80044f0:	4809      	ldr	r0, [pc, #36]	; (8004518 <MX_I2C1_Init+0x74>)
 80044f2:	f007 fef9 	bl	800c2e8 <HAL_I2CEx_ConfigAnalogFilter>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80044fc:	f000 fb58 	bl	8004bb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004500:	2100      	movs	r1, #0
 8004502:	4805      	ldr	r0, [pc, #20]	; (8004518 <MX_I2C1_Init+0x74>)
 8004504:	f007 ff3b 	bl	800c37e <HAL_I2CEx_ConfigDigitalFilter>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800450e:	f000 fb4f 	bl	8004bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004512:	bf00      	nop
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	2000097c 	.word	0x2000097c
 800451c:	40005400 	.word	0x40005400
 8004520:	a0404e72 	.word	0xa0404e72

08004524 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004528:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <MX_SPI1_Init+0x74>)
 800452a:	4a1c      	ldr	r2, [pc, #112]	; (800459c <MX_SPI1_Init+0x78>)
 800452c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800452e:	4b1a      	ldr	r3, [pc, #104]	; (8004598 <MX_SPI1_Init+0x74>)
 8004530:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004534:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004536:	4b18      	ldr	r3, [pc, #96]	; (8004598 <MX_SPI1_Init+0x74>)
 8004538:	2200      	movs	r2, #0
 800453a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800453c:	4b16      	ldr	r3, [pc, #88]	; (8004598 <MX_SPI1_Init+0x74>)
 800453e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004542:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004544:	4b14      	ldr	r3, [pc, #80]	; (8004598 <MX_SPI1_Init+0x74>)
 8004546:	2202      	movs	r2, #2
 8004548:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800454a:	4b13      	ldr	r3, [pc, #76]	; (8004598 <MX_SPI1_Init+0x74>)
 800454c:	2201      	movs	r2, #1
 800454e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8004550:	4b11      	ldr	r3, [pc, #68]	; (8004598 <MX_SPI1_Init+0x74>)
 8004552:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004556:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004558:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <MX_SPI1_Init+0x74>)
 800455a:	2220      	movs	r2, #32
 800455c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800455e:	4b0e      	ldr	r3, [pc, #56]	; (8004598 <MX_SPI1_Init+0x74>)
 8004560:	2200      	movs	r2, #0
 8004562:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004564:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <MX_SPI1_Init+0x74>)
 8004566:	2200      	movs	r2, #0
 8004568:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800456a:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <MX_SPI1_Init+0x74>)
 800456c:	2200      	movs	r2, #0
 800456e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004570:	4b09      	ldr	r3, [pc, #36]	; (8004598 <MX_SPI1_Init+0x74>)
 8004572:	2207      	movs	r2, #7
 8004574:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004576:	4b08      	ldr	r3, [pc, #32]	; (8004598 <MX_SPI1_Init+0x74>)
 8004578:	2200      	movs	r2, #0
 800457a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <MX_SPI1_Init+0x74>)
 800457e:	2200      	movs	r2, #0
 8004580:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004582:	4805      	ldr	r0, [pc, #20]	; (8004598 <MX_SPI1_Init+0x74>)
 8004584:	f008 ff9e 	bl	800d4c4 <HAL_SPI_Init>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800458e:	f000 fb0f 	bl	8004bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004592:	bf00      	nop
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	200009d0 	.word	0x200009d0
 800459c:	40013000 	.word	0x40013000

080045a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80045a4:	4b1b      	ldr	r3, [pc, #108]	; (8004614 <MX_SPI2_Init+0x74>)
 80045a6:	4a1c      	ldr	r2, [pc, #112]	; (8004618 <MX_SPI2_Init+0x78>)
 80045a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80045aa:	4b1a      	ldr	r3, [pc, #104]	; (8004614 <MX_SPI2_Init+0x74>)
 80045ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80045b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80045b2:	4b18      	ldr	r3, [pc, #96]	; (8004614 <MX_SPI2_Init+0x74>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80045b8:	4b16      	ldr	r3, [pc, #88]	; (8004614 <MX_SPI2_Init+0x74>)
 80045ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80045be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80045c0:	4b14      	ldr	r3, [pc, #80]	; (8004614 <MX_SPI2_Init+0x74>)
 80045c2:	2202      	movs	r2, #2
 80045c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80045c6:	4b13      	ldr	r3, [pc, #76]	; (8004614 <MX_SPI2_Init+0x74>)
 80045c8:	2201      	movs	r2, #1
 80045ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80045cc:	4b11      	ldr	r3, [pc, #68]	; (8004614 <MX_SPI2_Init+0x74>)
 80045ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80045d4:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <MX_SPI2_Init+0x74>)
 80045d6:	2228      	movs	r2, #40	; 0x28
 80045d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80045da:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <MX_SPI2_Init+0x74>)
 80045dc:	2200      	movs	r2, #0
 80045de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80045e0:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <MX_SPI2_Init+0x74>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045e6:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <MX_SPI2_Init+0x74>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80045ec:	4b09      	ldr	r3, [pc, #36]	; (8004614 <MX_SPI2_Init+0x74>)
 80045ee:	2207      	movs	r2, #7
 80045f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80045f2:	4b08      	ldr	r3, [pc, #32]	; (8004614 <MX_SPI2_Init+0x74>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80045f8:	4b06      	ldr	r3, [pc, #24]	; (8004614 <MX_SPI2_Init+0x74>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80045fe:	4805      	ldr	r0, [pc, #20]	; (8004614 <MX_SPI2_Init+0x74>)
 8004600:	f008 ff60 	bl	800d4c4 <HAL_SPI_Init>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800460a:	f000 fad1 	bl	8004bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800460e:	bf00      	nop
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000a34 	.word	0x20000a34
 8004618:	40003800 	.word	0x40003800

0800461c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b09a      	sub	sp, #104	; 0x68
 8004620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004622:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	605a      	str	r2, [r3, #4]
 800462c:	609a      	str	r2, [r3, #8]
 800462e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004630:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	605a      	str	r2, [r3, #4]
 800463a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800463c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	605a      	str	r2, [r3, #4]
 8004646:	609a      	str	r2, [r3, #8]
 8004648:	60da      	str	r2, [r3, #12]
 800464a:	611a      	str	r2, [r3, #16]
 800464c:	615a      	str	r2, [r3, #20]
 800464e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004650:	1d3b      	adds	r3, r7, #4
 8004652:	222c      	movs	r2, #44	; 0x2c
 8004654:	2100      	movs	r1, #0
 8004656:	4618      	mov	r0, r3
 8004658:	f010 fed1 	bl	80153fe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800465c:	4b55      	ldr	r3, [pc, #340]	; (80047b4 <MX_TIM1_Init+0x198>)
 800465e:	4a56      	ldr	r2, [pc, #344]	; (80047b8 <MX_TIM1_Init+0x19c>)
 8004660:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 8004662:	4b54      	ldr	r3, [pc, #336]	; (80047b4 <MX_TIM1_Init+0x198>)
 8004664:	22d7      	movs	r2, #215	; 0xd7
 8004666:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004668:	4b52      	ldr	r3, [pc, #328]	; (80047b4 <MX_TIM1_Init+0x198>)
 800466a:	2200      	movs	r2, #0
 800466c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800466e:	4b51      	ldr	r3, [pc, #324]	; (80047b4 <MX_TIM1_Init+0x198>)
 8004670:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004674:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004676:	4b4f      	ldr	r3, [pc, #316]	; (80047b4 <MX_TIM1_Init+0x198>)
 8004678:	2200      	movs	r2, #0
 800467a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800467c:	4b4d      	ldr	r3, [pc, #308]	; (80047b4 <MX_TIM1_Init+0x198>)
 800467e:	2200      	movs	r2, #0
 8004680:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004682:	4b4c      	ldr	r3, [pc, #304]	; (80047b4 <MX_TIM1_Init+0x198>)
 8004684:	2280      	movs	r2, #128	; 0x80
 8004686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004688:	484a      	ldr	r0, [pc, #296]	; (80047b4 <MX_TIM1_Init+0x198>)
 800468a:	f009 fe7b 	bl	800e384 <HAL_TIM_Base_Init>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004694:	f000 fa8c 	bl	8004bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800469c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800469e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80046a2:	4619      	mov	r1, r3
 80046a4:	4843      	ldr	r0, [pc, #268]	; (80047b4 <MX_TIM1_Init+0x198>)
 80046a6:	f00a fd11 	bl	800f0cc <HAL_TIM_ConfigClockSource>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80046b0:	f000 fa7e 	bl	8004bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80046b4:	483f      	ldr	r0, [pc, #252]	; (80047b4 <MX_TIM1_Init+0x198>)
 80046b6:	f009 ff35 	bl	800e524 <HAL_TIM_PWM_Init>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80046c0:	f000 fa76 	bl	8004bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046c4:	2300      	movs	r3, #0
 80046c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80046c8:	2300      	movs	r3, #0
 80046ca:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046cc:	2300      	movs	r3, #0
 80046ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80046d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80046d4:	4619      	mov	r1, r3
 80046d6:	4837      	ldr	r0, [pc, #220]	; (80047b4 <MX_TIM1_Init+0x198>)
 80046d8:	f00b fb0c 	bl	800fcf4 <HAL_TIMEx_MasterConfigSynchronization>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80046e2:	f000 fa65 	bl	8004bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046e6:	2360      	movs	r3, #96	; 0x60
 80046e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80046ea:	2300      	movs	r3, #0
 80046ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046ee:	2300      	movs	r3, #0
 80046f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80046f2:	2300      	movs	r3, #0
 80046f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80046f6:	2304      	movs	r3, #4
 80046f8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80046fa:	2300      	movs	r3, #0
 80046fc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80046fe:	2300      	movs	r3, #0
 8004700:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004702:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004706:	2200      	movs	r2, #0
 8004708:	4619      	mov	r1, r3
 800470a:	482a      	ldr	r0, [pc, #168]	; (80047b4 <MX_TIM1_Init+0x198>)
 800470c:	f00a fbca 	bl	800eea4 <HAL_TIM_PWM_ConfigChannel>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8004716:	f000 fa4b 	bl	8004bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800471a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800471e:	2204      	movs	r2, #4
 8004720:	4619      	mov	r1, r3
 8004722:	4824      	ldr	r0, [pc, #144]	; (80047b4 <MX_TIM1_Init+0x198>)
 8004724:	f00a fbbe 	bl	800eea4 <HAL_TIM_PWM_ConfigChannel>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800472e:	f000 fa3f 	bl	8004bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004732:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004736:	2208      	movs	r2, #8
 8004738:	4619      	mov	r1, r3
 800473a:	481e      	ldr	r0, [pc, #120]	; (80047b4 <MX_TIM1_Init+0x198>)
 800473c:	f00a fbb2 	bl	800eea4 <HAL_TIM_PWM_ConfigChannel>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8004746:	f000 fa33 	bl	8004bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800474a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800474e:	220c      	movs	r2, #12
 8004750:	4619      	mov	r1, r3
 8004752:	4818      	ldr	r0, [pc, #96]	; (80047b4 <MX_TIM1_Init+0x198>)
 8004754:	f00a fba6 	bl	800eea4 <HAL_TIM_PWM_ConfigChannel>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800475e:	f000 fa27 	bl	8004bb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004762:	2300      	movs	r3, #0
 8004764:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004766:	2300      	movs	r3, #0
 8004768:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800476e:	2300      	movs	r3, #0
 8004770:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004772:	2300      	movs	r3, #0
 8004774:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800477a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800477c:	2300      	movs	r3, #0
 800477e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004780:	2300      	movs	r3, #0
 8004782:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004784:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800478a:	2300      	movs	r3, #0
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800478e:	2300      	movs	r3, #0
 8004790:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004792:	1d3b      	adds	r3, r7, #4
 8004794:	4619      	mov	r1, r3
 8004796:	4807      	ldr	r0, [pc, #28]	; (80047b4 <MX_TIM1_Init+0x198>)
 8004798:	f00b fb3a 	bl	800fe10 <HAL_TIMEx_ConfigBreakDeadTime>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 80047a2:	f000 fa05 	bl	8004bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80047a6:	4803      	ldr	r0, [pc, #12]	; (80047b4 <MX_TIM1_Init+0x198>)
 80047a8:	f001 ffe2 	bl	8006770 <HAL_TIM_MspPostInit>

}
 80047ac:	bf00      	nop
 80047ae:	3768      	adds	r7, #104	; 0x68
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20000a98 	.word	0x20000a98
 80047b8:	40010000 	.word	0x40010000

080047bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047c2:	f107 0314 	add.w	r3, r7, #20
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	605a      	str	r2, [r3, #4]
 80047cc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80047ce:	1d3b      	adds	r3, r7, #4
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	609a      	str	r2, [r3, #8]
 80047d8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80047da:	4b20      	ldr	r3, [pc, #128]	; (800485c <MX_TIM3_Init+0xa0>)
 80047dc:	4a20      	ldr	r2, [pc, #128]	; (8004860 <MX_TIM3_Init+0xa4>)
 80047de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 80047e0:	4b1e      	ldr	r3, [pc, #120]	; (800485c <MX_TIM3_Init+0xa0>)
 80047e2:	226b      	movs	r2, #107	; 0x6b
 80047e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047e6:	4b1d      	ldr	r3, [pc, #116]	; (800485c <MX_TIM3_Init+0xa0>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 80047ec:	4b1b      	ldr	r3, [pc, #108]	; (800485c <MX_TIM3_Init+0xa0>)
 80047ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80047f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047f4:	4b19      	ldr	r3, [pc, #100]	; (800485c <MX_TIM3_Init+0xa0>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80047fa:	4b18      	ldr	r3, [pc, #96]	; (800485c <MX_TIM3_Init+0xa0>)
 80047fc:	2280      	movs	r2, #128	; 0x80
 80047fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004800:	4816      	ldr	r0, [pc, #88]	; (800485c <MX_TIM3_Init+0xa0>)
 8004802:	f009 ffeb 	bl	800e7dc <HAL_TIM_IC_Init>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800480c:	f000 f9d0 	bl	8004bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004814:	2300      	movs	r3, #0
 8004816:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004818:	f107 0314 	add.w	r3, r7, #20
 800481c:	4619      	mov	r1, r3
 800481e:	480f      	ldr	r0, [pc, #60]	; (800485c <MX_TIM3_Init+0xa0>)
 8004820:	f00b fa68 	bl	800fcf4 <HAL_TIMEx_MasterConfigSynchronization>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800482a:	f000 f9c1 	bl	8004bb0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800482e:	2300      	movs	r3, #0
 8004830:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004832:	2301      	movs	r3, #1
 8004834:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800483a:	2300      	movs	r3, #0
 800483c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800483e:	1d3b      	adds	r3, r7, #4
 8004840:	2200      	movs	r2, #0
 8004842:	4619      	mov	r1, r3
 8004844:	4805      	ldr	r0, [pc, #20]	; (800485c <MX_TIM3_Init+0xa0>)
 8004846:	f00a fa90 	bl	800ed6a <HAL_TIM_IC_ConfigChannel>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004850:	f000 f9ae 	bl	8004bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004854:	bf00      	nop
 8004856:	3720      	adds	r7, #32
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	20000ae4 	.word	0x20000ae4
 8004860:	40000400 	.word	0x40000400

08004864 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004868:	4b14      	ldr	r3, [pc, #80]	; (80048bc <MX_UART4_Init+0x58>)
 800486a:	4a15      	ldr	r2, [pc, #84]	; (80048c0 <MX_UART4_Init+0x5c>)
 800486c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800486e:	4b13      	ldr	r3, [pc, #76]	; (80048bc <MX_UART4_Init+0x58>)
 8004870:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004874:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004876:	4b11      	ldr	r3, [pc, #68]	; (80048bc <MX_UART4_Init+0x58>)
 8004878:	2200      	movs	r2, #0
 800487a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800487c:	4b0f      	ldr	r3, [pc, #60]	; (80048bc <MX_UART4_Init+0x58>)
 800487e:	2200      	movs	r2, #0
 8004880:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004882:	4b0e      	ldr	r3, [pc, #56]	; (80048bc <MX_UART4_Init+0x58>)
 8004884:	2200      	movs	r2, #0
 8004886:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004888:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <MX_UART4_Init+0x58>)
 800488a:	220c      	movs	r2, #12
 800488c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800488e:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <MX_UART4_Init+0x58>)
 8004890:	2200      	movs	r2, #0
 8004892:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004894:	4b09      	ldr	r3, [pc, #36]	; (80048bc <MX_UART4_Init+0x58>)
 8004896:	2200      	movs	r2, #0
 8004898:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800489a:	4b08      	ldr	r3, [pc, #32]	; (80048bc <MX_UART4_Init+0x58>)
 800489c:	2200      	movs	r2, #0
 800489e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048a0:	4b06      	ldr	r3, [pc, #24]	; (80048bc <MX_UART4_Init+0x58>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80048a6:	4805      	ldr	r0, [pc, #20]	; (80048bc <MX_UART4_Init+0x58>)
 80048a8:	f00b fb4e 	bl	800ff48 <HAL_UART_Init>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80048b2:	f000 f97d 	bl	8004bb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80048b6:	bf00      	nop
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20000b30 	.word	0x20000b30
 80048c0:	40004c00 	.word	0x40004c00

080048c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80048c8:	4b16      	ldr	r3, [pc, #88]	; (8004924 <MX_USART2_UART_Init+0x60>)
 80048ca:	4a17      	ldr	r2, [pc, #92]	; (8004928 <MX_USART2_UART_Init+0x64>)
 80048cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80048ce:	4b15      	ldr	r3, [pc, #84]	; (8004924 <MX_USART2_UART_Init+0x60>)
 80048d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80048d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80048d6:	4b13      	ldr	r3, [pc, #76]	; (8004924 <MX_USART2_UART_Init+0x60>)
 80048d8:	2200      	movs	r2, #0
 80048da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80048dc:	4b11      	ldr	r3, [pc, #68]	; (8004924 <MX_USART2_UART_Init+0x60>)
 80048de:	2200      	movs	r2, #0
 80048e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80048e2:	4b10      	ldr	r3, [pc, #64]	; (8004924 <MX_USART2_UART_Init+0x60>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80048e8:	4b0e      	ldr	r3, [pc, #56]	; (8004924 <MX_USART2_UART_Init+0x60>)
 80048ea:	2204      	movs	r2, #4
 80048ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048ee:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <MX_USART2_UART_Init+0x60>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80048f4:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <MX_USART2_UART_Init+0x60>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048fa:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <MX_USART2_UART_Init+0x60>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8004900:	4b08      	ldr	r3, [pc, #32]	; (8004924 <MX_USART2_UART_Init+0x60>)
 8004902:	2210      	movs	r2, #16
 8004904:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8004906:	4b07      	ldr	r3, [pc, #28]	; (8004924 <MX_USART2_UART_Init+0x60>)
 8004908:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800490c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800490e:	4805      	ldr	r0, [pc, #20]	; (8004924 <MX_USART2_UART_Init+0x60>)
 8004910:	f00b fb1a 	bl	800ff48 <HAL_UART_Init>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800491a:	f000 f949 	bl	8004bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800491e:	bf00      	nop
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20000bb8 	.word	0x20000bb8
 8004928:	40004400 	.word	0x40004400

0800492c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004930:	4b14      	ldr	r3, [pc, #80]	; (8004984 <MX_USART3_UART_Init+0x58>)
 8004932:	4a15      	ldr	r2, [pc, #84]	; (8004988 <MX_USART3_UART_Init+0x5c>)
 8004934:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8004936:	4b13      	ldr	r3, [pc, #76]	; (8004984 <MX_USART3_UART_Init+0x58>)
 8004938:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800493c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800493e:	4b11      	ldr	r3, [pc, #68]	; (8004984 <MX_USART3_UART_Init+0x58>)
 8004940:	2200      	movs	r2, #0
 8004942:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004944:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <MX_USART3_UART_Init+0x58>)
 8004946:	2200      	movs	r2, #0
 8004948:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800494a:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <MX_USART3_UART_Init+0x58>)
 800494c:	2200      	movs	r2, #0
 800494e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8004950:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <MX_USART3_UART_Init+0x58>)
 8004952:	2208      	movs	r2, #8
 8004954:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <MX_USART3_UART_Init+0x58>)
 8004958:	2200      	movs	r2, #0
 800495a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800495c:	4b09      	ldr	r3, [pc, #36]	; (8004984 <MX_USART3_UART_Init+0x58>)
 800495e:	2200      	movs	r2, #0
 8004960:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004962:	4b08      	ldr	r3, [pc, #32]	; (8004984 <MX_USART3_UART_Init+0x58>)
 8004964:	2200      	movs	r2, #0
 8004966:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004968:	4b06      	ldr	r3, [pc, #24]	; (8004984 <MX_USART3_UART_Init+0x58>)
 800496a:	2200      	movs	r2, #0
 800496c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800496e:	4805      	ldr	r0, [pc, #20]	; (8004984 <MX_USART3_UART_Init+0x58>)
 8004970:	f00b faea 	bl	800ff48 <HAL_UART_Init>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800497a:	f000 f919 	bl	8004bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000c40 	.word	0x20000c40
 8004988:	40004800 	.word	0x40004800

0800498c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004992:	4b0c      	ldr	r3, [pc, #48]	; (80049c4 <MX_DMA_Init+0x38>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	4a0b      	ldr	r2, [pc, #44]	; (80049c4 <MX_DMA_Init+0x38>)
 8004998:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800499c:	6313      	str	r3, [r2, #48]	; 0x30
 800499e:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <MX_DMA_Init+0x38>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049a6:	607b      	str	r3, [r7, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 8, 0);
 80049aa:	2200      	movs	r2, #0
 80049ac:	2108      	movs	r1, #8
 80049ae:	2010      	movs	r0, #16
 80049b0:	f006 f958 	bl	800ac64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80049b4:	2010      	movs	r0, #16
 80049b6:	f006 f971 	bl	800ac9c <HAL_NVIC_EnableIRQ>

}
 80049ba:	bf00      	nop
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40023800 	.word	0x40023800

080049c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08a      	sub	sp, #40	; 0x28
 80049cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ce:	f107 0314 	add.w	r3, r7, #20
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	605a      	str	r2, [r3, #4]
 80049d8:	609a      	str	r2, [r3, #8]
 80049da:	60da      	str	r2, [r3, #12]
 80049dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049de:	4b41      	ldr	r3, [pc, #260]	; (8004ae4 <MX_GPIO_Init+0x11c>)
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	4a40      	ldr	r2, [pc, #256]	; (8004ae4 <MX_GPIO_Init+0x11c>)
 80049e4:	f043 0301 	orr.w	r3, r3, #1
 80049e8:	6313      	str	r3, [r2, #48]	; 0x30
 80049ea:	4b3e      	ldr	r3, [pc, #248]	; (8004ae4 <MX_GPIO_Init+0x11c>)
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80049f6:	4b3b      	ldr	r3, [pc, #236]	; (8004ae4 <MX_GPIO_Init+0x11c>)
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	4a3a      	ldr	r2, [pc, #232]	; (8004ae4 <MX_GPIO_Init+0x11c>)
 80049fc:	f043 0310 	orr.w	r3, r3, #16
 8004a00:	6313      	str	r3, [r2, #48]	; 0x30
 8004a02:	4b38      	ldr	r3, [pc, #224]	; (8004ae4 <MX_GPIO_Init+0x11c>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	f003 0310 	and.w	r3, r3, #16
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a0e:	4b35      	ldr	r3, [pc, #212]	; (8004ae4 <MX_GPIO_Init+0x11c>)
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	4a34      	ldr	r2, [pc, #208]	; (8004ae4 <MX_GPIO_Init+0x11c>)
 8004a14:	f043 0302 	orr.w	r3, r3, #2
 8004a18:	6313      	str	r3, [r2, #48]	; 0x30
 8004a1a:	4b32      	ldr	r3, [pc, #200]	; (8004ae4 <MX_GPIO_Init+0x11c>)
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	60bb      	str	r3, [r7, #8]
 8004a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a26:	4b2f      	ldr	r3, [pc, #188]	; (8004ae4 <MX_GPIO_Init+0x11c>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	4a2e      	ldr	r2, [pc, #184]	; (8004ae4 <MX_GPIO_Init+0x11c>)
 8004a2c:	f043 0308 	orr.w	r3, r3, #8
 8004a30:	6313      	str	r3, [r2, #48]	; 0x30
 8004a32:	4b2c      	ldr	r3, [pc, #176]	; (8004ae4 <MX_GPIO_Init+0x11c>)
 8004a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	607b      	str	r3, [r7, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a3e:	4b29      	ldr	r3, [pc, #164]	; (8004ae4 <MX_GPIO_Init+0x11c>)
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	4a28      	ldr	r2, [pc, #160]	; (8004ae4 <MX_GPIO_Init+0x11c>)
 8004a44:	f043 0304 	orr.w	r3, r3, #4
 8004a48:	6313      	str	r3, [r2, #48]	; 0x30
 8004a4a:	4b26      	ldr	r3, [pc, #152]	; (8004ae4 <MX_GPIO_Init+0x11c>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 8004a56:	2200      	movs	r2, #0
 8004a58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a5c:	4822      	ldr	r0, [pc, #136]	; (8004ae8 <MX_GPIO_Init+0x120>)
 8004a5e:	f006 fed1 	bl	800b804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8004a62:	2200      	movs	r2, #0
 8004a64:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8004a68:	4820      	ldr	r0, [pc, #128]	; (8004aec <MX_GPIO_Init+0x124>)
 8004a6a:	f006 fecb 	bl	800b804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPS_PPS_IN_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_IN_Pin;
 8004a6e:	2304      	movs	r3, #4
 8004a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_PPS_IN_GPIO_Port, &GPIO_InitStruct);
 8004a7a:	f107 0314 	add.w	r3, r7, #20
 8004a7e:	4619      	mov	r1, r3
 8004a80:	481b      	ldr	r0, [pc, #108]	; (8004af0 <MX_GPIO_Init+0x128>)
 8004a82:	f006 fd23 	bl	800b4cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_DOWN_OUT_Pin */
  GPIO_InitStruct.Pin = ESC_DOWN_OUT_Pin;
 8004a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a90:	2300      	movs	r3, #0
 8004a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a94:	2300      	movs	r3, #0
 8004a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESC_DOWN_OUT_GPIO_Port, &GPIO_InitStruct);
 8004a98:	f107 0314 	add.w	r3, r7, #20
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4812      	ldr	r0, [pc, #72]	; (8004ae8 <MX_GPIO_Init+0x120>)
 8004aa0:	f006 fd14 	bl	800b4cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_IMU_CSIMU_Pin SPI2_IMU_CSBM_Pin DIS_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin;
 8004aa4:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8004aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ab6:	f107 0314 	add.w	r3, r7, #20
 8004aba:	4619      	mov	r1, r3
 8004abc:	480b      	ldr	r0, [pc, #44]	; (8004aec <MX_GPIO_Init+0x124>)
 8004abe:	f006 fd05 	bl	800b4cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_RDY_IN_Pin */
  GPIO_InitStruct.Pin = MAG_RDY_IN_Pin;
 8004ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004acc:	2300      	movs	r3, #0
 8004ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAG_RDY_IN_GPIO_Port, &GPIO_InitStruct);
 8004ad0:	f107 0314 	add.w	r3, r7, #20
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4807      	ldr	r0, [pc, #28]	; (8004af4 <MX_GPIO_Init+0x12c>)
 8004ad8:	f006 fcf8 	bl	800b4cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004adc:	bf00      	nop
 8004ade:	3728      	adds	r7, #40	; 0x28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40020c00 	.word	0x40020c00
 8004af0:	40020000 	.word	0x40020000
 8004af4:	40020400 	.word	0x40020400

08004af8 <RunTaskSensorData>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RunTaskSensorData */
void RunTaskSensorData(void const * argument)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TaskSensorData(argument);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7fe f971 	bl	8002de8 <TaskSensorData>
  /* USER CODE END 5 */
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <RunTaskController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskController */
void RunTaskController(void const * argument)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskController */
	TaskController(argument);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fc feec 	bl	80018f4 <TaskController>
  /* USER CODE END RunTaskController */
}
 8004b1c:	bf00      	nop
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <RunTaskRemote>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskRemote */
void RunTaskRemote(void const * argument)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskRemote */
	TaskRemote(argument);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7fd fd2b 	bl	8002588 <TaskRemote>
  /* USER CODE END RunTaskRemote */
}
 8004b32:	bf00      	nop
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <RunTaskMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskMotor */
void RunTaskMotor(void const * argument)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskMotor */
	TaskMotor(argument);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fd fbee 	bl	8002324 <TaskMotor>
  /* USER CODE END RunTaskMotor */
}
 8004b48:	bf00      	nop
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <RunTaskPower>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskPower */
void RunTaskPower(void const * argument)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskPower */
	TaskPower(argument);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7fd fcfb 	bl	8002554 <TaskPower>
  /* USER CODE END RunTaskPower */
}
 8004b5e:	bf00      	nop
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <RunTaskDiagnostics>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskDiagnostics */
void RunTaskDiagnostics(void const * argument)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b082      	sub	sp, #8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskDiagnostics */
	TaskDiagnostics(argument);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fd f89e 	bl	8001cb0 <TaskDiagnostics>
  /* USER CODE END RunTaskDiagnostics */
}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <RunTaskTune>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskTune */
void RunTaskTune(void const * argument)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskTune */
	TaskTune(argument);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7fe fe71 	bl	800386c <TaskTune>
  /* USER CODE END RunTaskTune */
}
 8004b8a:	bf00      	nop
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b082      	sub	sp, #8
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004ba4:	f005 ff62 	bl	800aa6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004ba8:	bf00      	nop
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004bb4:	b672      	cpsid	i
}
 8004bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004bb8:	e7fe      	b.n	8004bb8 <Error_Handler+0x8>

08004bba <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b085      	sub	sp, #20
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	603b      	str	r3, [r7, #0]
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d204      	bcs.n	8004bdc <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	7bfa      	ldrb	r2, [r7, #15]
 8004bda:	701a      	strb	r2, [r3, #0]
  }
}
 8004bdc:	bf00      	nop
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	607a      	str	r2, [r7, #4]
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8004bf8:	bf00      	nop
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	e002      	b.n	8004c1a <_strnlen_s+0x16>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3301      	adds	r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d004      	beq.n	8004c2c <_strnlen_s+0x28>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	1e5a      	subs	r2, r3, #1
 8004c26:	603a      	str	r2, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1f3      	bne.n	8004c14 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	1ad3      	subs	r3, r2, r3
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	4603      	mov	r3, r0
 8004c46:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	2b2f      	cmp	r3, #47	; 0x2f
 8004c4c:	d904      	bls.n	8004c58 <_is_digit+0x1a>
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	2b39      	cmp	r3, #57	; 0x39
 8004c52:	d801      	bhi.n	8004c58 <_is_digit+0x1a>
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <_is_digit+0x1c>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	b2db      	uxtb	r3, r3
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8004c78:	e00e      	b.n	8004c98 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	4618      	mov	r0, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	1c59      	adds	r1, r3, #1
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6011      	str	r1, [r2, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	4403      	add	r3, r0
 8004c94:	3b30      	subs	r3, #48	; 0x30
 8004c96:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff ffcd 	bl	8004c3e <_is_digit>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1e7      	bne.n	8004c7a <_atoi+0xe>
  }
  return i;
 8004caa:	68fb      	ldr	r3, [r7, #12]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8004cb4:	b590      	push	{r4, r7, lr}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8004cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d125      	bne.n	8004d1c <_out_rev+0x68>
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d120      	bne.n	8004d1c <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8004cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	e00a      	b.n	8004cf6 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	1c53      	adds	r3, r2, #1
 8004ce4:	607b      	str	r3, [r7, #4]
 8004ce6:	68fc      	ldr	r4, [r7, #12]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	2020      	movs	r0, #32
 8004cee:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d3f0      	bcc.n	8004ce0 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8004cfe:	e00d      	b.n	8004d1c <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8004d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d02:	3b01      	subs	r3, #1
 8004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0a:	4413      	add	r3, r2
 8004d0c:	7818      	ldrb	r0, [r3, #0]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	1c53      	adds	r3, r2, #1
 8004d12:	607b      	str	r3, [r7, #4]
 8004d14:	68fc      	ldr	r4, [r7, #12]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	47a0      	blx	r4
  while (len) {
 8004d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1ee      	bne.n	8004d00 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8004d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00e      	beq.n	8004d4a <_out_rev+0x96>
    while (idx - start_idx < width) {
 8004d2c:	e007      	b.n	8004d3e <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	1c53      	adds	r3, r2, #1
 8004d32:	607b      	str	r3, [r7, #4]
 8004d34:	68fc      	ldr	r4, [r7, #12]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	2020      	movs	r0, #32
 8004d3c:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d8f1      	bhi.n	8004d2e <_out_rev+0x7a>
    }
  }

  return idx;
 8004d4a:	687b      	ldr	r3, [r7, #4]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	371c      	adds	r7, #28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd90      	pop	{r4, r7, pc}

08004d54 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af04      	add	r7, sp, #16
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8004d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d136      	bne.n	8004dda <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8004d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d018      	beq.n	8004da4 <_ntoa_format+0x50>
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d013      	beq.n	8004da4 <_ntoa_format+0x50>
 8004d7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d104      	bne.n	8004d8e <_ntoa_format+0x3a>
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d86:	f003 030c 	and.w	r3, r3, #12
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <_ntoa_format+0x50>
      width--;
 8004d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d90:	3b01      	subs	r3, #1
 8004d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004d94:	e006      	b.n	8004da4 <_ntoa_format+0x50>
      buf[len++] = '0';
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	61fa      	str	r2, [r7, #28]
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	4413      	add	r3, r2
 8004da0:	2230      	movs	r2, #48	; 0x30
 8004da2:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d20a      	bcs.n	8004dc2 <_ntoa_format+0x6e>
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	2b1f      	cmp	r3, #31
 8004db0:	d9f1      	bls.n	8004d96 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004db2:	e006      	b.n	8004dc2 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	61fa      	str	r2, [r7, #28]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	2230      	movs	r2, #48	; 0x30
 8004dc0:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d006      	beq.n	8004dda <_ntoa_format+0x86>
 8004dcc:	69fa      	ldr	r2, [r7, #28]
 8004dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d202      	bcs.n	8004dda <_ntoa_format+0x86>
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	2b1f      	cmp	r3, #31
 8004dd8:	d9ec      	bls.n	8004db4 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8004dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ddc:	f003 0310 	and.w	r3, r3, #16
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d058      	beq.n	8004e96 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8004de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d116      	bne.n	8004e1c <_ntoa_format+0xc8>
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d013      	beq.n	8004e1c <_ntoa_format+0xc8>
 8004df4:	69fa      	ldr	r2, [r7, #28]
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d003      	beq.n	8004e04 <_ntoa_format+0xb0>
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d10b      	bne.n	8004e1c <_ntoa_format+0xc8>
      len--;
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <_ntoa_format+0xc8>
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	2b10      	cmp	r3, #16
 8004e14:	d102      	bne.n	8004e1c <_ntoa_format+0xc8>
        len--;
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	2b10      	cmp	r3, #16
 8004e20:	d10f      	bne.n	8004e42 <_ntoa_format+0xee>
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10a      	bne.n	8004e42 <_ntoa_format+0xee>
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	2b1f      	cmp	r3, #31
 8004e30:	d807      	bhi.n	8004e42 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	61fa      	str	r2, [r7, #28]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	2278      	movs	r2, #120	; 0x78
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	e01f      	b.n	8004e82 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	2b10      	cmp	r3, #16
 8004e46:	d10f      	bne.n	8004e68 <_ntoa_format+0x114>
 8004e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <_ntoa_format+0x114>
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	2b1f      	cmp	r3, #31
 8004e56:	d807      	bhi.n	8004e68 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	61fa      	str	r2, [r7, #28]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	4413      	add	r3, r2
 8004e62:	2258      	movs	r2, #88	; 0x58
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	e00c      	b.n	8004e82 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d109      	bne.n	8004e82 <_ntoa_format+0x12e>
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	2b1f      	cmp	r3, #31
 8004e72:	d806      	bhi.n	8004e82 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	61fa      	str	r2, [r7, #28]
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	2262      	movs	r2, #98	; 0x62
 8004e80:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	2b1f      	cmp	r3, #31
 8004e86:	d806      	bhi.n	8004e96 <_ntoa_format+0x142>
      buf[len++] = '0';
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	61fa      	str	r2, [r7, #28]
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	4413      	add	r3, r2
 8004e92:	2230      	movs	r2, #48	; 0x30
 8004e94:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	2b1f      	cmp	r3, #31
 8004e9a:	d824      	bhi.n	8004ee6 <_ntoa_format+0x192>
    if (negative) {
 8004e9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d007      	beq.n	8004eb4 <_ntoa_format+0x160>
      buf[len++] = '-';
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	61fa      	str	r2, [r7, #28]
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	4413      	add	r3, r2
 8004eae:	222d      	movs	r2, #45	; 0x2d
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	e018      	b.n	8004ee6 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d007      	beq.n	8004ece <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	61fa      	str	r2, [r7, #28]
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	222b      	movs	r2, #43	; 0x2b
 8004eca:	701a      	strb	r2, [r3, #0]
 8004ecc:	e00b      	b.n	8004ee6 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d006      	beq.n	8004ee6 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	61fa      	str	r2, [r7, #28]
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee8:	9303      	str	r3, [sp, #12]
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	9302      	str	r3, [sp, #8]
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	9301      	str	r3, [sp, #4]
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f7ff fed9 	bl	8004cb4 <_out_rev>
 8004f02:	4603      	mov	r3, r0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b096      	sub	sp, #88	; 0x58
 8004f10:	af08      	add	r7, sp, #32
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8004f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d103      	bne.n	8004f2c <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8004f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f26:	f023 0310 	bic.w	r3, r3, #16
 8004f2a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8004f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <_ntoa_long+0x30>
 8004f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d032      	beq.n	8004fa2 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8004f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f40:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f44:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004f46:	fb01 f202 	mul.w	r2, r1, r2
 8004f4a:	1a9b      	subs	r3, r3, r2
 8004f4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8004f50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f54:	2b09      	cmp	r3, #9
 8004f56:	d804      	bhi.n	8004f62 <_ntoa_long+0x56>
 8004f58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f5c:	3330      	adds	r3, #48	; 0x30
 8004f5e:	b2da      	uxtb	r2, r3
 8004f60:	e00d      	b.n	8004f7e <_ntoa_long+0x72>
 8004f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <_ntoa_long+0x64>
 8004f6c:	2241      	movs	r2, #65	; 0x41
 8004f6e:	e000      	b.n	8004f72 <_ntoa_long+0x66>
 8004f70:	2261      	movs	r2, #97	; 0x61
 8004f72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f76:	4413      	add	r3, r2
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	3b0a      	subs	r3, #10
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f80:	1c59      	adds	r1, r3, #1
 8004f82:	6379      	str	r1, [r7, #52]	; 0x34
 8004f84:	3338      	adds	r3, #56	; 0x38
 8004f86:	443b      	add	r3, r7
 8004f88:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8004f8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f94:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8004f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <_ntoa_long+0x96>
 8004f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9e:	2b1f      	cmp	r3, #31
 8004fa0:	d9cc      	bls.n	8004f3c <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8004fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fa4:	9306      	str	r3, [sp, #24]
 8004fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa8:	9305      	str	r3, [sp, #20]
 8004faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fac:	9304      	str	r3, [sp, #16]
 8004fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fb0:	9303      	str	r3, [sp, #12]
 8004fb2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004fb6:	9302      	str	r3, [sp, #8]
 8004fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fba:	9301      	str	r3, [sp, #4]
 8004fbc:	f107 0310 	add.w	r3, r7, #16
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	68b9      	ldr	r1, [r7, #8]
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f7ff fec3 	bl	8004d54 <_ntoa_format>
 8004fce:	4603      	mov	r3, r0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3738      	adds	r7, #56	; 0x38
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b096      	sub	sp, #88	; 0x58
 8004fdc:	af08      	add	r7, sp, #32
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8004fea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	d103      	bne.n	8004ffa <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8004ff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ff4:	f023 0310 	bic.w	r3, r3, #16
 8004ff8:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8004ffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <_ntoa_long_long+0x34>
 8005004:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005008:	4313      	orrs	r3, r2
 800500a:	d037      	beq.n	800507c <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 800500c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005010:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005014:	f7fb feb0 	bl	8000d78 <__aeabi_uldivmod>
 8005018:	4613      	mov	r3, r2
 800501a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800501e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005022:	2b09      	cmp	r3, #9
 8005024:	d804      	bhi.n	8005030 <_ntoa_long_long+0x58>
 8005026:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800502a:	3330      	adds	r3, #48	; 0x30
 800502c:	b2da      	uxtb	r2, r3
 800502e:	e00d      	b.n	800504c <_ntoa_long_long+0x74>
 8005030:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <_ntoa_long_long+0x66>
 800503a:	2241      	movs	r2, #65	; 0x41
 800503c:	e000      	b.n	8005040 <_ntoa_long_long+0x68>
 800503e:	2261      	movs	r2, #97	; 0x61
 8005040:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005044:	4413      	add	r3, r2
 8005046:	b2db      	uxtb	r3, r3
 8005048:	3b0a      	subs	r3, #10
 800504a:	b2da      	uxtb	r2, r3
 800504c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504e:	1c59      	adds	r1, r3, #1
 8005050:	6379      	str	r1, [r7, #52]	; 0x34
 8005052:	3338      	adds	r3, #56	; 0x38
 8005054:	443b      	add	r3, r7
 8005056:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800505a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800505e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005062:	f7fb fe89 	bl	8000d78 <__aeabi_uldivmod>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800506e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005072:	4313      	orrs	r3, r2
 8005074:	d002      	beq.n	800507c <_ntoa_long_long+0xa4>
 8005076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005078:	2b1f      	cmp	r3, #31
 800507a:	d9c7      	bls.n	800500c <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800507c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800507e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005080:	9206      	str	r2, [sp, #24]
 8005082:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005084:	9205      	str	r2, [sp, #20]
 8005086:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005088:	9204      	str	r2, [sp, #16]
 800508a:	9303      	str	r3, [sp, #12]
 800508c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005090:	9302      	str	r3, [sp, #8]
 8005092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005094:	9301      	str	r3, [sp, #4]
 8005096:	f107 0310 	add.w	r3, r7, #16
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f7ff fe56 	bl	8004d54 <_ntoa_format>
 80050a8:	4603      	mov	r3, r0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3738      	adds	r7, #56	; 0x38
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	0000      	movs	r0, r0
 80050b4:	0000      	movs	r0, r0
	...

080050b8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80050b8:	b590      	push	{r4, r7, lr}
 80050ba:	b09d      	sub	sp, #116	; 0x74
 80050bc:	af04      	add	r7, sp, #16
 80050be:	6178      	str	r0, [r7, #20]
 80050c0:	6139      	str	r1, [r7, #16]
 80050c2:	60fa      	str	r2, [r7, #12]
 80050c4:	60bb      	str	r3, [r7, #8]
 80050c6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	f04f 0300 	mov.w	r3, #0
 80050d6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80050da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050e2:	f7fb fd19 	bl	8000b18 <__aeabi_dcmpeq>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10f      	bne.n	800510c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80050ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050ee:	9303      	str	r3, [sp, #12]
 80050f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050f2:	9302      	str	r3, [sp, #8]
 80050f4:	2303      	movs	r3, #3
 80050f6:	9301      	str	r3, [sp, #4]
 80050f8:	4ba7      	ldr	r3, [pc, #668]	; (8005398 <_ftoa+0x2e0>)
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	6939      	ldr	r1, [r7, #16]
 8005102:	6978      	ldr	r0, [r7, #20]
 8005104:	f7ff fdd6 	bl	8004cb4 <_out_rev>
 8005108:	4603      	mov	r3, r0
 800510a:	e222      	b.n	8005552 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 800510c:	f04f 32ff 	mov.w	r2, #4294967295
 8005110:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8005114:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005118:	f7fb fd08 	bl	8000b2c <__aeabi_dcmplt>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00f      	beq.n	8005142 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8005122:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005124:	9303      	str	r3, [sp, #12]
 8005126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005128:	9302      	str	r3, [sp, #8]
 800512a:	2304      	movs	r3, #4
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	4b9b      	ldr	r3, [pc, #620]	; (800539c <_ftoa+0x2e4>)
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	6939      	ldr	r1, [r7, #16]
 8005138:	6978      	ldr	r0, [r7, #20]
 800513a:	f7ff fdbb 	bl	8004cb4 <_out_rev>
 800513e:	4603      	mov	r3, r0
 8005140:	e207      	b.n	8005552 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8005142:	f04f 32ff 	mov.w	r2, #4294967295
 8005146:	4b96      	ldr	r3, [pc, #600]	; (80053a0 <_ftoa+0x2e8>)
 8005148:	e9d7 0100 	ldrd	r0, r1, [r7]
 800514c:	f7fb fd0c 	bl	8000b68 <__aeabi_dcmpgt>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d01d      	beq.n	8005192 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8005156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <_ftoa+0xac>
 8005160:	4b90      	ldr	r3, [pc, #576]	; (80053a4 <_ftoa+0x2ec>)
 8005162:	e000      	b.n	8005166 <_ftoa+0xae>
 8005164:	4b90      	ldr	r3, [pc, #576]	; (80053a8 <_ftoa+0x2f0>)
 8005166:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005168:	f002 0204 	and.w	r2, r2, #4
 800516c:	2a00      	cmp	r2, #0
 800516e:	d001      	beq.n	8005174 <_ftoa+0xbc>
 8005170:	2204      	movs	r2, #4
 8005172:	e000      	b.n	8005176 <_ftoa+0xbe>
 8005174:	2203      	movs	r2, #3
 8005176:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005178:	9103      	str	r1, [sp, #12]
 800517a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800517c:	9102      	str	r1, [sp, #8]
 800517e:	9201      	str	r2, [sp, #4]
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	6939      	ldr	r1, [r7, #16]
 8005188:	6978      	ldr	r0, [r7, #20]
 800518a:	f7ff fd93 	bl	8004cb4 <_out_rev>
 800518e:	4603      	mov	r3, r0
 8005190:	e1df      	b.n	8005552 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8005192:	a37d      	add	r3, pc, #500	; (adr r3, 8005388 <_ftoa+0x2d0>)
 8005194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005198:	e9d7 0100 	ldrd	r0, r1, [r7]
 800519c:	f7fb fce4 	bl	8000b68 <__aeabi_dcmpgt>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d109      	bne.n	80051ba <_ftoa+0x102>
 80051a6:	a37a      	add	r3, pc, #488	; (adr r3, 8005390 <_ftoa+0x2d8>)
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051b0:	f7fb fcbc 	bl	8000b2c <__aeabi_dcmplt>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00f      	beq.n	80051da <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80051ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051bc:	9302      	str	r3, [sp, #8]
 80051be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051c0:	9301      	str	r3, [sp, #4]
 80051c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	ed97 0b00 	vldr	d0, [r7]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	6939      	ldr	r1, [r7, #16]
 80051d0:	6978      	ldr	r0, [r7, #20]
 80051d2:	f000 f9c9 	bl	8005568 <_etoa>
 80051d6:	4603      	mov	r3, r0
 80051d8:	e1bb      	b.n	8005552 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80051da:	2300      	movs	r3, #0
 80051dc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051ec:	f7fb fc9e 	bl	8000b2c <__aeabi_dcmplt>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00e      	beq.n	8005214 <_ftoa+0x15c>
    negative = true;
 80051f6:	2301      	movs	r3, #1
 80051f8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 80051fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005200:	f04f 0000 	mov.w	r0, #0
 8005204:	f04f 0100 	mov.w	r1, #0
 8005208:	f7fb f866 	bl	80002d8 <__aeabi_dsub>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8005214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10d      	bne.n	800523a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800521e:	2306      	movs	r3, #6
 8005220:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8005222:	e00a      	b.n	800523a <_ftoa+0x182>
    buf[len++] = '0';
 8005224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	65fa      	str	r2, [r7, #92]	; 0x5c
 800522a:	3360      	adds	r3, #96	; 0x60
 800522c:	443b      	add	r3, r7
 800522e:	2230      	movs	r2, #48	; 0x30
 8005230:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8005234:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005236:	3b01      	subs	r3, #1
 8005238:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800523a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800523c:	2b1f      	cmp	r3, #31
 800523e:	d802      	bhi.n	8005246 <_ftoa+0x18e>
 8005240:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005242:	2b09      	cmp	r3, #9
 8005244:	d8ee      	bhi.n	8005224 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8005246:	e9d7 0100 	ldrd	r0, r1, [r7]
 800524a:	f7fb fcad 	bl	8000ba8 <__aeabi_d2iz>
 800524e:	4603      	mov	r3, r0
 8005250:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8005252:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005254:	f7fb f98e 	bl	8000574 <__aeabi_i2d>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005260:	f7fb f83a 	bl	80002d8 <__aeabi_dsub>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4610      	mov	r0, r2
 800526a:	4619      	mov	r1, r3
 800526c:	4a4f      	ldr	r2, [pc, #316]	; (80053ac <_ftoa+0x2f4>)
 800526e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	4413      	add	r3, r2
 8005274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005278:	f7fb f9e6 	bl	8000648 <__aeabi_dmul>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8005284:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005288:	f7fb fcb6 	bl	8000bf8 <__aeabi_d2uiz>
 800528c:	4603      	mov	r3, r0
 800528e:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8005290:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005292:	f7fb f95f 	bl	8000554 <__aeabi_ui2d>
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800529e:	f7fb f81b 	bl	80002d8 <__aeabi_dsub>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 80052aa:	f04f 0200 	mov.w	r2, #0
 80052ae:	4b40      	ldr	r3, [pc, #256]	; (80053b0 <_ftoa+0x2f8>)
 80052b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80052b4:	f7fb fc58 	bl	8000b68 <__aeabi_dcmpgt>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d016      	beq.n	80052ec <_ftoa+0x234>
    ++frac;
 80052be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c0:	3301      	adds	r3, #1
 80052c2:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80052c4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80052c6:	f7fb f945 	bl	8000554 <__aeabi_ui2d>
 80052ca:	4a38      	ldr	r2, [pc, #224]	; (80053ac <_ftoa+0x2f4>)
 80052cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	4413      	add	r3, r2
 80052d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d6:	f7fb fc3d 	bl	8000b54 <__aeabi_dcmpge>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01a      	beq.n	8005316 <_ftoa+0x25e>
      frac = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 80052e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e6:	3301      	adds	r3, #1
 80052e8:	657b      	str	r3, [r7, #84]	; 0x54
 80052ea:	e014      	b.n	8005316 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	4b2f      	ldr	r3, [pc, #188]	; (80053b0 <_ftoa+0x2f8>)
 80052f2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80052f6:	f7fb fc19 	bl	8000b2c <__aeabi_dcmplt>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10a      	bne.n	8005316 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8005300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005302:	2b00      	cmp	r3, #0
 8005304:	d004      	beq.n	8005310 <_ftoa+0x258>
 8005306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8005310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005312:	3301      	adds	r3, #1
 8005314:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8005316:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005318:	2b00      	cmp	r3, #0
 800531a:	d14b      	bne.n	80053b4 <_ftoa+0x2fc>
    diff = value - (double)whole;
 800531c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800531e:	f7fb f929 	bl	8000574 <__aeabi_i2d>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	e9d7 0100 	ldrd	r0, r1, [r7]
 800532a:	f7fa ffd5 	bl	80002d8 <__aeabi_dsub>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8005336:	2301      	movs	r3, #1
 8005338:	461c      	mov	r4, r3
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	4b1c      	ldr	r3, [pc, #112]	; (80053b0 <_ftoa+0x2f8>)
 8005340:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005344:	f7fb fbf2 	bl	8000b2c <__aeabi_dcmplt>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <_ftoa+0x29a>
 800534e:	2300      	movs	r3, #0
 8005350:	461c      	mov	r4, r3
 8005352:	b2e3      	uxtb	r3, r4
 8005354:	f083 0301 	eor.w	r3, r3, #1
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d109      	bne.n	8005372 <_ftoa+0x2ba>
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	4b13      	ldr	r3, [pc, #76]	; (80053b0 <_ftoa+0x2f8>)
 8005364:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005368:	f7fb fbfe 	bl	8000b68 <__aeabi_dcmpgt>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d064      	beq.n	800543c <_ftoa+0x384>
 8005372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 8081 	beq.w	8005480 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800537e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005380:	3301      	adds	r3, #1
 8005382:	657b      	str	r3, [r7, #84]	; 0x54
 8005384:	e07c      	b.n	8005480 <_ftoa+0x3c8>
 8005386:	bf00      	nop
 8005388:	00000000 	.word	0x00000000
 800538c:	41cdcd65 	.word	0x41cdcd65
 8005390:	00000000 	.word	0x00000000
 8005394:	c1cdcd65 	.word	0xc1cdcd65
 8005398:	0801be50 	.word	0x0801be50
 800539c:	0801be54 	.word	0x0801be54
 80053a0:	7fefffff 	.word	0x7fefffff
 80053a4:	0801be5c 	.word	0x0801be5c
 80053a8:	0801be64 	.word	0x0801be64
 80053ac:	0801bff8 	.word	0x0801bff8
 80053b0:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 80053b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80053b8:	e01f      	b.n	80053fa <_ftoa+0x342>
      --count;
 80053ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053bc:	3b01      	subs	r3, #1
 80053be:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 80053c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80053c2:	4b66      	ldr	r3, [pc, #408]	; (800555c <_ftoa+0x4a4>)
 80053c4:	fba3 2301 	umull	r2, r3, r3, r1
 80053c8:	08da      	lsrs	r2, r3, #3
 80053ca:	4613      	mov	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	1aca      	subs	r2, r1, r3
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053d8:	1c59      	adds	r1, r3, #1
 80053da:	65f9      	str	r1, [r7, #92]	; 0x5c
 80053dc:	3230      	adds	r2, #48	; 0x30
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	3360      	adds	r3, #96	; 0x60
 80053e2:	443b      	add	r3, r7
 80053e4:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80053e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ea:	4a5c      	ldr	r2, [pc, #368]	; (800555c <_ftoa+0x4a4>)
 80053ec:	fba2 2303 	umull	r2, r3, r2, r3
 80053f0:	08db      	lsrs	r3, r3, #3
 80053f2:	653b      	str	r3, [r7, #80]	; 0x50
 80053f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80053fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053fc:	2b1f      	cmp	r3, #31
 80053fe:	d9dc      	bls.n	80053ba <_ftoa+0x302>
 8005400:	e009      	b.n	8005416 <_ftoa+0x35e>
        break;
 8005402:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8005404:	e007      	b.n	8005416 <_ftoa+0x35e>
      buf[len++] = '0';
 8005406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800540c:	3360      	adds	r3, #96	; 0x60
 800540e:	443b      	add	r3, r7
 8005410:	2230      	movs	r2, #48	; 0x30
 8005412:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8005416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005418:	2b1f      	cmp	r3, #31
 800541a:	d804      	bhi.n	8005426 <_ftoa+0x36e>
 800541c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800541e:	1e5a      	subs	r2, r3, #1
 8005420:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1ef      	bne.n	8005406 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005428:	2b1f      	cmp	r3, #31
 800542a:	d829      	bhi.n	8005480 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 800542c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005432:	3360      	adds	r3, #96	; 0x60
 8005434:	443b      	add	r3, r7
 8005436:	222e      	movs	r2, #46	; 0x2e
 8005438:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800543c:	e020      	b.n	8005480 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 800543e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005440:	4b47      	ldr	r3, [pc, #284]	; (8005560 <_ftoa+0x4a8>)
 8005442:	fb83 1302 	smull	r1, r3, r3, r2
 8005446:	1099      	asrs	r1, r3, #2
 8005448:	17d3      	asrs	r3, r2, #31
 800544a:	1ac9      	subs	r1, r1, r3
 800544c:	460b      	mov	r3, r1
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	1ad1      	subs	r1, r2, r3
 8005456:	b2ca      	uxtb	r2, r1
 8005458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800545a:	1c59      	adds	r1, r3, #1
 800545c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800545e:	3230      	adds	r2, #48	; 0x30
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	3360      	adds	r3, #96	; 0x60
 8005464:	443b      	add	r3, r7
 8005466:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800546a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800546c:	4a3c      	ldr	r2, [pc, #240]	; (8005560 <_ftoa+0x4a8>)
 800546e:	fb82 1203 	smull	r1, r2, r2, r3
 8005472:	1092      	asrs	r2, r2, #2
 8005474:	17db      	asrs	r3, r3, #31
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	657b      	str	r3, [r7, #84]	; 0x54
 800547a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005480:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005482:	2b1f      	cmp	r3, #31
 8005484:	d9db      	bls.n	800543e <_ftoa+0x386>
 8005486:	e000      	b.n	800548a <_ftoa+0x3d2>
      break;
 8005488:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800548a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d123      	bne.n	80054dc <_ftoa+0x424>
 8005494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d01e      	beq.n	80054dc <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800549e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d014      	beq.n	80054ce <_ftoa+0x416>
 80054a4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d104      	bne.n	80054b6 <_ftoa+0x3fe>
 80054ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054ae:	f003 030c 	and.w	r3, r3, #12
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00b      	beq.n	80054ce <_ftoa+0x416>
      width--;
 80054b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054b8:	3b01      	subs	r3, #1
 80054ba:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80054bc:	e007      	b.n	80054ce <_ftoa+0x416>
      buf[len++] = '0';
 80054be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80054c4:	3360      	adds	r3, #96	; 0x60
 80054c6:	443b      	add	r3, r7
 80054c8:	2230      	movs	r2, #48	; 0x30
 80054ca:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80054ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d202      	bcs.n	80054dc <_ftoa+0x424>
 80054d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054d8:	2b1f      	cmp	r3, #31
 80054da:	d9f0      	bls.n	80054be <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80054dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054de:	2b1f      	cmp	r3, #31
 80054e0:	d827      	bhi.n	8005532 <_ftoa+0x47a>
    if (negative) {
 80054e2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d008      	beq.n	80054fc <_ftoa+0x444>
      buf[len++] = '-';
 80054ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80054f0:	3360      	adds	r3, #96	; 0x60
 80054f2:	443b      	add	r3, r7
 80054f4:	222d      	movs	r2, #45	; 0x2d
 80054f6:	f803 2c48 	strb.w	r2, [r3, #-72]
 80054fa:	e01a      	b.n	8005532 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 80054fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	d008      	beq.n	8005518 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8005506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800550c:	3360      	adds	r3, #96	; 0x60
 800550e:	443b      	add	r3, r7
 8005510:	222b      	movs	r2, #43	; 0x2b
 8005512:	f803 2c48 	strb.w	r2, [r3, #-72]
 8005516:	e00c      	b.n	8005532 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8005518:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b00      	cmp	r3, #0
 8005520:	d007      	beq.n	8005532 <_ftoa+0x47a>
      buf[len++] = ' ';
 8005522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005528:	3360      	adds	r3, #96	; 0x60
 800552a:	443b      	add	r3, r7
 800552c:	2220      	movs	r2, #32
 800552e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8005532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005534:	9303      	str	r3, [sp, #12]
 8005536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005538:	9302      	str	r3, [sp, #8]
 800553a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	f107 0318 	add.w	r3, r7, #24
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	6939      	ldr	r1, [r7, #16]
 800554a:	6978      	ldr	r0, [r7, #20]
 800554c:	f7ff fbb2 	bl	8004cb4 <_out_rev>
 8005550:	4603      	mov	r3, r0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3764      	adds	r7, #100	; 0x64
 8005556:	46bd      	mov	sp, r7
 8005558:	bd90      	pop	{r4, r7, pc}
 800555a:	bf00      	nop
 800555c:	cccccccd 	.word	0xcccccccd
 8005560:	66666667 	.word	0x66666667
 8005564:	00000000 	.word	0x00000000

08005568 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556c:	b09f      	sub	sp, #124	; 0x7c
 800556e:	af06      	add	r7, sp, #24
 8005570:	6278      	str	r0, [r7, #36]	; 0x24
 8005572:	6239      	str	r1, [r7, #32]
 8005574:	61fa      	str	r2, [r7, #28]
 8005576:	61bb      	str	r3, [r7, #24]
 8005578:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800557c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005580:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005584:	f7fb fac8 	bl	8000b18 <__aeabi_dcmpeq>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d014      	beq.n	80055b8 <_etoa+0x50>
 800558e:	f04f 32ff 	mov.w	r2, #4294967295
 8005592:	4bc1      	ldr	r3, [pc, #772]	; (8005898 <_etoa+0x330>)
 8005594:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005598:	f7fb fae6 	bl	8000b68 <__aeabi_dcmpgt>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10a      	bne.n	80055b8 <_etoa+0x50>
 80055a2:	f04f 32ff 	mov.w	r2, #4294967295
 80055a6:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80055aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80055ae:	f7fb fabd 	bl	8000b2c <__aeabi_dcmplt>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d012      	beq.n	80055de <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80055b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055bc:	9302      	str	r3, [sp, #8]
 80055be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055c2:	9301      	str	r3, [sp, #4]
 80055c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	ed97 0b04 	vldr	d0, [r7, #16]
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	69fa      	ldr	r2, [r7, #28]
 80055d2:	6a39      	ldr	r1, [r7, #32]
 80055d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055d6:	f7ff fd6f 	bl	80050b8 <_ftoa>
 80055da:	4603      	mov	r3, r0
 80055dc:	e23f      	b.n	8005a5e <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 80055de:	2301      	movs	r3, #1
 80055e0:	461e      	mov	r6, r3
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80055ee:	f7fb fa9d 	bl	8000b2c <__aeabi_dcmplt>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <_etoa+0x94>
 80055f8:	2300      	movs	r3, #0
 80055fa:	461e      	mov	r6, r3
 80055fc:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8005600:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005604:	2b00      	cmp	r3, #0
 8005606:	d009      	beq.n	800561c <_etoa+0xb4>
    value = -value;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	603b      	str	r3, [r7, #0]
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005612:	607b      	str	r3, [r7, #4]
 8005614:	ed97 7b00 	vldr	d7, [r7]
 8005618:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800561c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005624:	2b00      	cmp	r3, #0
 8005626:	d102      	bne.n	800562e <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8005628:	2306      	movs	r3, #6
 800562a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800562e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005632:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8005636:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	0d0a      	lsrs	r2, r1, #20
 8005644:	2300      	movs	r3, #0
 8005646:	4613      	mov	r3, r2
 8005648:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800564c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005650:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8005652:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005656:	4690      	mov	r8, r2
 8005658:	f3c3 0913 	ubfx	r9, r3, #0, #20
 800565c:	4644      	mov	r4, r8
 800565e:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8005662:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005666:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800566a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800566c:	f7fa ff82 	bl	8000574 <__aeabi_i2d>
 8005670:	a37d      	add	r3, pc, #500	; (adr r3, 8005868 <_etoa+0x300>)
 8005672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005676:	f7fa ffe7 	bl	8000648 <__aeabi_dmul>
 800567a:	4602      	mov	r2, r0
 800567c:	460b      	mov	r3, r1
 800567e:	4610      	mov	r0, r2
 8005680:	4619      	mov	r1, r3
 8005682:	a37b      	add	r3, pc, #492	; (adr r3, 8005870 <_etoa+0x308>)
 8005684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005688:	f7fa fe28 	bl	80002dc <__adddf3>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4614      	mov	r4, r2
 8005692:	461d      	mov	r5, r3
 8005694:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	4b7f      	ldr	r3, [pc, #508]	; (800589c <_etoa+0x334>)
 800569e:	f7fa fe1b 	bl	80002d8 <__aeabi_dsub>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	4610      	mov	r0, r2
 80056a8:	4619      	mov	r1, r3
 80056aa:	a373      	add	r3, pc, #460	; (adr r3, 8005878 <_etoa+0x310>)
 80056ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b0:	f7fa ffca 	bl	8000648 <__aeabi_dmul>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4620      	mov	r0, r4
 80056ba:	4629      	mov	r1, r5
 80056bc:	f7fa fe0e 	bl	80002dc <__adddf3>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4610      	mov	r0, r2
 80056c6:	4619      	mov	r1, r3
 80056c8:	f7fb fa6e 	bl	8000ba8 <__aeabi_d2iz>
 80056cc:	4603      	mov	r3, r0
 80056ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80056d0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80056d2:	f7fa ff4f 	bl	8000574 <__aeabi_i2d>
 80056d6:	a36a      	add	r3, pc, #424	; (adr r3, 8005880 <_etoa+0x318>)
 80056d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056dc:	f7fa ffb4 	bl	8000648 <__aeabi_dmul>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4610      	mov	r0, r2
 80056e6:	4619      	mov	r1, r3
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	4b6c      	ldr	r3, [pc, #432]	; (80058a0 <_etoa+0x338>)
 80056ee:	f7fa fdf5 	bl	80002dc <__adddf3>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	4610      	mov	r0, r2
 80056f8:	4619      	mov	r1, r3
 80056fa:	f7fb fa55 	bl	8000ba8 <__aeabi_d2iz>
 80056fe:	4603      	mov	r3, r0
 8005700:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8005702:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005704:	f7fa ff36 	bl	8000574 <__aeabi_i2d>
 8005708:	a35f      	add	r3, pc, #380	; (adr r3, 8005888 <_etoa+0x320>)
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	f7fa ff9b 	bl	8000648 <__aeabi_dmul>
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	4614      	mov	r4, r2
 8005718:	461d      	mov	r5, r3
 800571a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800571c:	f7fa ff2a 	bl	8000574 <__aeabi_i2d>
 8005720:	a35b      	add	r3, pc, #364	; (adr r3, 8005890 <_etoa+0x328>)
 8005722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005726:	f7fa ff8f 	bl	8000648 <__aeabi_dmul>
 800572a:	4602      	mov	r2, r0
 800572c:	460b      	mov	r3, r1
 800572e:	4620      	mov	r0, r4
 8005730:	4629      	mov	r1, r5
 8005732:	f7fa fdd1 	bl	80002d8 <__aeabi_dsub>
 8005736:	4602      	mov	r2, r0
 8005738:	460b      	mov	r3, r1
 800573a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 800573e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005742:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005746:	f7fa ff7f 	bl	8000648 <__aeabi_dmul>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8005752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005754:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8005758:	17da      	asrs	r2, r3, #31
 800575a:	469a      	mov	sl, r3
 800575c:	4693      	mov	fp, r2
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800576a:	2200      	movs	r2, #0
 800576c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8005770:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8005774:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	f7fa fdae 	bl	80002dc <__adddf3>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	4690      	mov	r8, r2
 8005786:	4699      	mov	r9, r3
 8005788:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800578c:	f04f 0000 	mov.w	r0, #0
 8005790:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005794:	f7fa fda0 	bl	80002d8 <__aeabi_dsub>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4692      	mov	sl, r2
 800579e:	469b      	mov	fp, r3
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	4b3f      	ldr	r3, [pc, #252]	; (80058a4 <_etoa+0x33c>)
 80057a6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80057aa:	f7fb f877 	bl	800089c <__aeabi_ddiv>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	4610      	mov	r0, r2
 80057b4:	4619      	mov	r1, r3
 80057b6:	f04f 0200 	mov.w	r2, #0
 80057ba:	4b3b      	ldr	r3, [pc, #236]	; (80058a8 <_etoa+0x340>)
 80057bc:	f7fa fd8e 	bl	80002dc <__adddf3>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80057c8:	f7fb f868 	bl	800089c <__aeabi_ddiv>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4610      	mov	r0, r2
 80057d2:	4619      	mov	r1, r3
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	4b34      	ldr	r3, [pc, #208]	; (80058ac <_etoa+0x344>)
 80057da:	f7fa fd7f 	bl	80002dc <__adddf3>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80057e6:	f7fb f859 	bl	800089c <__aeabi_ddiv>
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	4650      	mov	r0, sl
 80057f0:	4659      	mov	r1, fp
 80057f2:	f7fa fd73 	bl	80002dc <__adddf3>
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	4640      	mov	r0, r8
 80057fc:	4649      	mov	r1, r9
 80057fe:	f7fb f84d 	bl	800089c <__aeabi_ddiv>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	4610      	mov	r0, r2
 8005808:	4619      	mov	r1, r3
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	4b28      	ldr	r3, [pc, #160]	; (80058b0 <_etoa+0x348>)
 8005810:	f7fa fd64 	bl	80002dc <__adddf3>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4620      	mov	r0, r4
 800581a:	4629      	mov	r1, r5
 800581c:	f7fa ff14 	bl	8000648 <__aeabi_dmul>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8005828:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800582c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005830:	f7fb f97c 	bl	8000b2c <__aeabi_dcmplt>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00d      	beq.n	8005856 <_etoa+0x2ee>
    expval--;
 800583a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800583c:	3b01      	subs	r3, #1
 800583e:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8005840:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005844:	f04f 0200 	mov.w	r2, #0
 8005848:	4b17      	ldr	r3, [pc, #92]	; (80058a8 <_etoa+0x340>)
 800584a:	f7fb f827 	bl	800089c <__aeabi_ddiv>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8005856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005858:	2b63      	cmp	r3, #99	; 0x63
 800585a:	dc2b      	bgt.n	80058b4 <_etoa+0x34c>
 800585c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800585e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8005862:	db27      	blt.n	80058b4 <_etoa+0x34c>
 8005864:	2304      	movs	r3, #4
 8005866:	e026      	b.n	80058b6 <_etoa+0x34e>
 8005868:	509f79fb 	.word	0x509f79fb
 800586c:	3fd34413 	.word	0x3fd34413
 8005870:	8b60c8b3 	.word	0x8b60c8b3
 8005874:	3fc68a28 	.word	0x3fc68a28
 8005878:	636f4361 	.word	0x636f4361
 800587c:	3fd287a7 	.word	0x3fd287a7
 8005880:	0979a371 	.word	0x0979a371
 8005884:	400a934f 	.word	0x400a934f
 8005888:	bbb55516 	.word	0xbbb55516
 800588c:	40026bb1 	.word	0x40026bb1
 8005890:	fefa39ef 	.word	0xfefa39ef
 8005894:	3fe62e42 	.word	0x3fe62e42
 8005898:	7fefffff 	.word	0x7fefffff
 800589c:	3ff80000 	.word	0x3ff80000
 80058a0:	3fe00000 	.word	0x3fe00000
 80058a4:	402c0000 	.word	0x402c0000
 80058a8:	40240000 	.word	0x40240000
 80058ac:	40180000 	.word	0x40180000
 80058b0:	3ff00000 	.word	0x3ff00000
 80058b4:	2305      	movs	r3, #5
 80058b6:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80058b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d03d      	beq.n	8005940 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80058c4:	a368      	add	r3, pc, #416	; (adr r3, 8005a68 <_etoa+0x500>)
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80058ce:	f7fb f941 	bl	8000b54 <__aeabi_dcmpge>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d024      	beq.n	8005922 <_etoa+0x3ba>
 80058d8:	a365      	add	r3, pc, #404	; (adr r3, 8005a70 <_etoa+0x508>)
 80058da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80058e2:	f7fb f923 	bl	8000b2c <__aeabi_dcmplt>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d01a      	beq.n	8005922 <_etoa+0x3ba>
      if ((int)prec > expval) {
 80058ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058f2:	429a      	cmp	r2, r3
 80058f4:	da07      	bge.n	8005906 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 80058f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80058fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	3b01      	subs	r3, #1
 8005900:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005904:	e002      	b.n	800590c <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8005906:	2300      	movs	r3, #0
 8005908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800590c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005910:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005914:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005920:	e00e      	b.n	8005940 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8005922:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <_etoa+0x3d8>
 800592a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800592e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005932:	2b00      	cmp	r3, #0
 8005934:	d004      	beq.n	8005940 <_etoa+0x3d8>
        --prec;
 8005936:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800593a:	3b01      	subs	r3, #1
 800593c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8005940:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005944:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8005946:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800594a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800594c:	429a      	cmp	r2, r3
 800594e:	d904      	bls.n	800595a <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8005950:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	657b      	str	r3, [r7, #84]	; 0x54
 8005958:	e001      	b.n	800595e <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800595e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d004      	beq.n	8005974 <_etoa+0x40c>
 800596a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8005974:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005976:	2b00      	cmp	r3, #0
 8005978:	d009      	beq.n	800598e <_etoa+0x426>
    value /= conv.F;
 800597a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800597e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005982:	f7fa ff8b 	bl	800089c <__aeabi_ddiv>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8005992:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005996:	2b00      	cmp	r3, #0
 8005998:	d006      	beq.n	80059a8 <_etoa+0x440>
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	e003      	b.n	80059b0 <_etoa+0x448>
 80059a8:	ed97 7b04 	vldr	d7, [r7, #16]
 80059ac:	ed87 7b02 	vstr	d7, [r7, #8]
 80059b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059b8:	9302      	str	r3, [sp, #8]
 80059ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059bc:	9301      	str	r3, [sp, #4]
 80059be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	ed97 0b02 	vldr	d0, [r7, #8]
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	69fa      	ldr	r2, [r7, #28]
 80059cc:	6a39      	ldr	r1, [r7, #32]
 80059ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059d0:	f7ff fb72 	bl	80050b8 <_ftoa>
 80059d4:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 80059d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d03f      	beq.n	8005a5c <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80059dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <_etoa+0x484>
 80059e8:	2045      	movs	r0, #69	; 0x45
 80059ea:	e000      	b.n	80059ee <_etoa+0x486>
 80059ec:	2065      	movs	r0, #101	; 0x65
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	1c53      	adds	r3, r2, #1
 80059f2:	61fb      	str	r3, [r7, #28]
 80059f4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	6a39      	ldr	r1, [r7, #32]
 80059fa:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80059fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	bfb8      	it	lt
 8005a02:	425b      	neglt	r3, r3
 8005a04:	4618      	mov	r0, r3
 8005a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a08:	0fdb      	lsrs	r3, r3, #31
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a0e:	3a01      	subs	r2, #1
 8005a10:	2105      	movs	r1, #5
 8005a12:	9105      	str	r1, [sp, #20]
 8005a14:	9204      	str	r2, [sp, #16]
 8005a16:	2200      	movs	r2, #0
 8005a18:	9203      	str	r2, [sp, #12]
 8005a1a:	220a      	movs	r2, #10
 8005a1c:	9202      	str	r2, [sp, #8]
 8005a1e:	9301      	str	r3, [sp, #4]
 8005a20:	9000      	str	r0, [sp, #0]
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	6a39      	ldr	r1, [r7, #32]
 8005a28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a2a:	f7ff fa6f 	bl	8004f0c <_ntoa_long>
 8005a2e:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8005a30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00f      	beq.n	8005a5c <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8005a3c:	e007      	b.n	8005a4e <_etoa+0x4e6>
 8005a3e:	69fa      	ldr	r2, [r7, #28]
 8005a40:	1c53      	adds	r3, r2, #1
 8005a42:	61fb      	str	r3, [r7, #28]
 8005a44:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	6a39      	ldr	r1, [r7, #32]
 8005a4a:	2020      	movs	r0, #32
 8005a4c:	47a0      	blx	r4
 8005a4e:	69fa      	ldr	r2, [r7, #28]
 8005a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d8f0      	bhi.n	8005a3e <_etoa+0x4d6>
    }
  }
  return idx;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3764      	adds	r7, #100	; 0x64
 8005a62:	46bd      	mov	sp, r7
 8005a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a68:	eb1c432d 	.word	0xeb1c432d
 8005a6c:	3f1a36e2 	.word	0x3f1a36e2
 8005a70:	00000000 	.word	0x00000000
 8005a74:	412e8480 	.word	0x412e8480

08005a78 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8005a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7c:	b0a3      	sub	sp, #140	; 0x8c
 8005a7e:	af0a      	add	r7, sp, #40	; 0x28
 8005a80:	6178      	str	r0, [r7, #20]
 8005a82:	6139      	str	r1, [r7, #16]
 8005a84:	60fa      	str	r2, [r7, #12]
 8005a86:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f040 84cf 	bne.w	8006432 <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 8005a94:	4ba8      	ldr	r3, [pc, #672]	; (8005d38 <_vsnprintf+0x2c0>)
 8005a96:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8005a98:	f000 bccb 	b.w	8006432 <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b25      	cmp	r3, #37	; 0x25
 8005aa2:	d00d      	beq.n	8005ac0 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	7818      	ldrb	r0, [r3, #0]
 8005aa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005aaa:	1c53      	adds	r3, r2, #1
 8005aac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aae:	697c      	ldr	r4, [r7, #20]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6939      	ldr	r1, [r7, #16]
 8005ab4:	47a0      	blx	r4
      format++;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	60bb      	str	r3, [r7, #8]
      continue;
 8005abc:	f000 bcb9 	b.w	8006432 <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	3b20      	subs	r3, #32
 8005ad0:	2b10      	cmp	r3, #16
 8005ad2:	d857      	bhi.n	8005b84 <_vsnprintf+0x10c>
 8005ad4:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <_vsnprintf+0x64>)
 8005ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005b5d 	.word	0x08005b5d
 8005ae0:	08005b85 	.word	0x08005b85
 8005ae4:	08005b85 	.word	0x08005b85
 8005ae8:	08005b71 	.word	0x08005b71
 8005aec:	08005b85 	.word	0x08005b85
 8005af0:	08005b85 	.word	0x08005b85
 8005af4:	08005b85 	.word	0x08005b85
 8005af8:	08005b85 	.word	0x08005b85
 8005afc:	08005b85 	.word	0x08005b85
 8005b00:	08005b85 	.word	0x08005b85
 8005b04:	08005b85 	.word	0x08005b85
 8005b08:	08005b49 	.word	0x08005b49
 8005b0c:	08005b85 	.word	0x08005b85
 8005b10:	08005b35 	.word	0x08005b35
 8005b14:	08005b85 	.word	0x08005b85
 8005b18:	08005b85 	.word	0x08005b85
 8005b1c:	08005b21 	.word	0x08005b21
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8005b20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b22:	f043 0301 	orr.w	r3, r3, #1
 8005b26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	60bb      	str	r3, [r7, #8]
 8005b2e:	2301      	movs	r3, #1
 8005b30:	653b      	str	r3, [r7, #80]	; 0x50
 8005b32:	e02a      	b.n	8005b8a <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8005b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b36:	f043 0302 	orr.w	r3, r3, #2
 8005b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	60bb      	str	r3, [r7, #8]
 8005b42:	2301      	movs	r3, #1
 8005b44:	653b      	str	r3, [r7, #80]	; 0x50
 8005b46:	e020      	b.n	8005b8a <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8005b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b4a:	f043 0304 	orr.w	r3, r3, #4
 8005b4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	3301      	adds	r3, #1
 8005b54:	60bb      	str	r3, [r7, #8]
 8005b56:	2301      	movs	r3, #1
 8005b58:	653b      	str	r3, [r7, #80]	; 0x50
 8005b5a:	e016      	b.n	8005b8a <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8005b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b5e:	f043 0308 	orr.w	r3, r3, #8
 8005b62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	3301      	adds	r3, #1
 8005b68:	60bb      	str	r3, [r7, #8]
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	653b      	str	r3, [r7, #80]	; 0x50
 8005b6e:	e00c      	b.n	8005b8a <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8005b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b72:	f043 0310 	orr.w	r3, r3, #16
 8005b76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	60bb      	str	r3, [r7, #8]
 8005b7e:	2301      	movs	r3, #1
 8005b80:	653b      	str	r3, [r7, #80]	; 0x50
 8005b82:	e002      	b.n	8005b8a <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8005b84:	2300      	movs	r3, #0
 8005b86:	653b      	str	r3, [r7, #80]	; 0x50
 8005b88:	bf00      	nop
      }
    } while (n);
 8005b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d19c      	bne.n	8005aca <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7ff f850 	bl	8004c3e <_is_digit>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d006      	beq.n	8005bb2 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8005ba4:	f107 0308 	add.w	r3, r7, #8
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff f85f 	bl	8004c6c <_atoi>
 8005bae:	65b8      	str	r0, [r7, #88]	; 0x58
 8005bb0:	e01a      	b.n	8005be8 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8005bb8:	d116      	bne.n	8005be8 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8005bba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bbe:	1d1a      	adds	r2, r3, #4
 8005bc0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	da07      	bge.n	8005bde <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8005bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bd0:	f043 0302 	orr.w	r3, r3, #2
 8005bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8005bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd8:	425b      	negs	r3, r3
 8005bda:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bdc:	e001      	b.n	8005be2 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8005bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be0:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	3301      	adds	r3, #1
 8005be6:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b2e      	cmp	r3, #46	; 0x2e
 8005bf2:	d127      	bne.n	8005c44 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8005bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff f819 	bl	8004c3e <_is_digit>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d006      	beq.n	8005c20 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8005c12:	f107 0308 	add.w	r3, r7, #8
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff f828 	bl	8004c6c <_atoi>
 8005c1c:	6578      	str	r0, [r7, #84]	; 0x54
 8005c1e:	e011      	b.n	8005c44 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b2a      	cmp	r3, #42	; 0x2a
 8005c26:	d10d      	bne.n	8005c44 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8005c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c2c:	1d1a      	adds	r2, r3, #4
 8005c2e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8005c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005c3c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	3301      	adds	r3, #1
 8005c42:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	3b68      	subs	r3, #104	; 0x68
 8005c4a:	2b12      	cmp	r3, #18
 8005c4c:	d866      	bhi.n	8005d1c <_vsnprintf+0x2a4>
 8005c4e:	a201      	add	r2, pc, #4	; (adr r2, 8005c54 <_vsnprintf+0x1dc>)
 8005c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c54:	08005cc7 	.word	0x08005cc7
 8005c58:	08005d1d 	.word	0x08005d1d
 8005c5c:	08005cfd 	.word	0x08005cfd
 8005c60:	08005d1d 	.word	0x08005d1d
 8005c64:	08005ca1 	.word	0x08005ca1
 8005c68:	08005d1d 	.word	0x08005d1d
 8005c6c:	08005d1d 	.word	0x08005d1d
 8005c70:	08005d1d 	.word	0x08005d1d
 8005c74:	08005d1d 	.word	0x08005d1d
 8005c78:	08005d1d 	.word	0x08005d1d
 8005c7c:	08005d1d 	.word	0x08005d1d
 8005c80:	08005d1d 	.word	0x08005d1d
 8005c84:	08005ced 	.word	0x08005ced
 8005c88:	08005d1d 	.word	0x08005d1d
 8005c8c:	08005d1d 	.word	0x08005d1d
 8005c90:	08005d1d 	.word	0x08005d1d
 8005c94:	08005d1d 	.word	0x08005d1d
 8005c98:	08005d1d 	.word	0x08005d1d
 8005c9c:	08005d0d 	.word	0x08005d0d
      case 'l' :
        flags |= FLAGS_LONG;
 8005ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	3301      	adds	r3, #1
 8005cac:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b6c      	cmp	r3, #108	; 0x6c
 8005cb4:	d134      	bne.n	8005d20 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8005cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	60bb      	str	r3, [r7, #8]
        }
        break;
 8005cc4:	e02c      	b.n	8005d20 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8005cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b68      	cmp	r3, #104	; 0x68
 8005cda:	d123      	bne.n	8005d24 <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 8005cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	60bb      	str	r3, [r7, #8]
        }
        break;
 8005cea:	e01b      	b.n	8005d24 <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	60bb      	str	r3, [r7, #8]
        break;
 8005cfa:	e014      	b.n	8005d26 <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d02:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	3301      	adds	r3, #1
 8005d08:	60bb      	str	r3, [r7, #8]
        break;
 8005d0a:	e00c      	b.n	8005d26 <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005d0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d12:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	3301      	adds	r3, #1
 8005d18:	60bb      	str	r3, [r7, #8]
        break;
 8005d1a:	e004      	b.n	8005d26 <_vsnprintf+0x2ae>
      default :
        break;
 8005d1c:	bf00      	nop
 8005d1e:	e002      	b.n	8005d26 <_vsnprintf+0x2ae>
        break;
 8005d20:	bf00      	nop
 8005d22:	e000      	b.n	8005d26 <_vsnprintf+0x2ae>
        break;
 8005d24:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b67      	cmp	r3, #103	; 0x67
 8005d2c:	f300 80b8 	bgt.w	8005ea0 <_vsnprintf+0x428>
 8005d30:	2b25      	cmp	r3, #37	; 0x25
 8005d32:	da27      	bge.n	8005d84 <_vsnprintf+0x30c>
 8005d34:	e370      	b.n	8006418 <_vsnprintf+0x9a0>
 8005d36:	bf00      	nop
 8005d38:	08004be9 	.word	0x08004be9
 8005d3c:	3b69      	subs	r3, #105	; 0x69
 8005d3e:	2201      	movs	r2, #1
 8005d40:	fa02 f303 	lsl.w	r3, r2, r3
 8005d44:	f249 0241 	movw	r2, #36929	; 0x9041
 8005d48:	401a      	ands	r2, r3
 8005d4a:	2a00      	cmp	r2, #0
 8005d4c:	bf14      	ite	ne
 8005d4e:	2201      	movne	r2, #1
 8005d50:	2200      	moveq	r2, #0
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	2a00      	cmp	r2, #0
 8005d56:	f040 80aa 	bne.w	8005eae <_vsnprintf+0x436>
 8005d5a:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8005d5e:	2a00      	cmp	r2, #0
 8005d60:	bf14      	ite	ne
 8005d62:	2201      	movne	r2, #1
 8005d64:	2200      	moveq	r2, #0
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	2a00      	cmp	r2, #0
 8005d6a:	f040 82fb 	bne.w	8006364 <_vsnprintf+0x8ec>
 8005d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	bf14      	ite	ne
 8005d76:	2301      	movne	r3, #1
 8005d78:	2300      	moveq	r3, #0
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f040 828d 	bne.w	800629c <_vsnprintf+0x824>
 8005d82:	e349      	b.n	8006418 <_vsnprintf+0x9a0>
 8005d84:	3b25      	subs	r3, #37	; 0x25
 8005d86:	2b42      	cmp	r3, #66	; 0x42
 8005d88:	f200 8346 	bhi.w	8006418 <_vsnprintf+0x9a0>
 8005d8c:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <_vsnprintf+0x31c>)
 8005d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d92:	bf00      	nop
 8005d94:	08006401 	.word	0x08006401
 8005d98:	08006419 	.word	0x08006419
 8005d9c:	08006419 	.word	0x08006419
 8005da0:	08006419 	.word	0x08006419
 8005da4:	08006419 	.word	0x08006419
 8005da8:	08006419 	.word	0x08006419
 8005dac:	08006419 	.word	0x08006419
 8005db0:	08006419 	.word	0x08006419
 8005db4:	08006419 	.word	0x08006419
 8005db8:	08006419 	.word	0x08006419
 8005dbc:	08006419 	.word	0x08006419
 8005dc0:	08006419 	.word	0x08006419
 8005dc4:	08006419 	.word	0x08006419
 8005dc8:	08006419 	.word	0x08006419
 8005dcc:	08006419 	.word	0x08006419
 8005dd0:	08006419 	.word	0x08006419
 8005dd4:	08006419 	.word	0x08006419
 8005dd8:	08006419 	.word	0x08006419
 8005ddc:	08006419 	.word	0x08006419
 8005de0:	08006419 	.word	0x08006419
 8005de4:	08006419 	.word	0x08006419
 8005de8:	08006419 	.word	0x08006419
 8005dec:	08006419 	.word	0x08006419
 8005df0:	08006419 	.word	0x08006419
 8005df4:	08006419 	.word	0x08006419
 8005df8:	08006419 	.word	0x08006419
 8005dfc:	08006419 	.word	0x08006419
 8005e00:	08006419 	.word	0x08006419
 8005e04:	08006419 	.word	0x08006419
 8005e08:	08006419 	.word	0x08006419
 8005e0c:	08006419 	.word	0x08006419
 8005e10:	08006419 	.word	0x08006419
 8005e14:	080061b5 	.word	0x080061b5
 8005e18:	08006165 	.word	0x08006165
 8005e1c:	080061b5 	.word	0x080061b5
 8005e20:	08006419 	.word	0x08006419
 8005e24:	08006419 	.word	0x08006419
 8005e28:	08006419 	.word	0x08006419
 8005e2c:	08006419 	.word	0x08006419
 8005e30:	08006419 	.word	0x08006419
 8005e34:	08006419 	.word	0x08006419
 8005e38:	08006419 	.word	0x08006419
 8005e3c:	08006419 	.word	0x08006419
 8005e40:	08006419 	.word	0x08006419
 8005e44:	08006419 	.word	0x08006419
 8005e48:	08006419 	.word	0x08006419
 8005e4c:	08006419 	.word	0x08006419
 8005e50:	08006419 	.word	0x08006419
 8005e54:	08006419 	.word	0x08006419
 8005e58:	08006419 	.word	0x08006419
 8005e5c:	08006419 	.word	0x08006419
 8005e60:	08005eaf 	.word	0x08005eaf
 8005e64:	08006419 	.word	0x08006419
 8005e68:	08006419 	.word	0x08006419
 8005e6c:	08006419 	.word	0x08006419
 8005e70:	08006419 	.word	0x08006419
 8005e74:	08006419 	.word	0x08006419
 8005e78:	08006419 	.word	0x08006419
 8005e7c:	08006419 	.word	0x08006419
 8005e80:	08006419 	.word	0x08006419
 8005e84:	08006419 	.word	0x08006419
 8005e88:	08005eaf 	.word	0x08005eaf
 8005e8c:	08006225 	.word	0x08006225
 8005e90:	08005eaf 	.word	0x08005eaf
 8005e94:	080061b5 	.word	0x080061b5
 8005e98:	08006165 	.word	0x08006165
 8005e9c:	080061b5 	.word	0x080061b5
 8005ea0:	2b78      	cmp	r3, #120	; 0x78
 8005ea2:	f300 82b9 	bgt.w	8006418 <_vsnprintf+0x9a0>
 8005ea6:	2b69      	cmp	r3, #105	; 0x69
 8005ea8:	f6bf af48 	bge.w	8005d3c <_vsnprintf+0x2c4>
 8005eac:	e2b4      	b.n	8006418 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b78      	cmp	r3, #120	; 0x78
 8005eb4:	d003      	beq.n	8005ebe <_vsnprintf+0x446>
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b58      	cmp	r3, #88	; 0x58
 8005ebc:	d102      	bne.n	8005ec4 <_vsnprintf+0x44c>
          base = 16U;
 8005ebe:	2310      	movs	r3, #16
 8005ec0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ec2:	e013      	b.n	8005eec <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b6f      	cmp	r3, #111	; 0x6f
 8005eca:	d102      	bne.n	8005ed2 <_vsnprintf+0x45a>
          base =  8U;
 8005ecc:	2308      	movs	r3, #8
 8005ece:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ed0:	e00c      	b.n	8005eec <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b62      	cmp	r3, #98	; 0x62
 8005ed8:	d102      	bne.n	8005ee0 <_vsnprintf+0x468>
          base =  2U;
 8005eda:	2302      	movs	r3, #2
 8005edc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ede:	e005      	b.n	8005eec <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 8005ee0:	230a      	movs	r3, #10
 8005ee2:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8005ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ee6:	f023 0310 	bic.w	r3, r3, #16
 8005eea:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b58      	cmp	r3, #88	; 0x58
 8005ef2:	d103      	bne.n	8005efc <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 8005ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ef6:	f043 0320 	orr.w	r3, r3, #32
 8005efa:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2b69      	cmp	r3, #105	; 0x69
 8005f02:	d007      	beq.n	8005f14 <_vsnprintf+0x49c>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2b64      	cmp	r3, #100	; 0x64
 8005f0a:	d003      	beq.n	8005f14 <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8005f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f0e:	f023 030c 	bic.w	r3, r3, #12
 8005f12:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8005f14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 8005f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f20:	f023 0301 	bic.w	r3, r3, #1
 8005f24:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b69      	cmp	r3, #105	; 0x69
 8005f2c:	d004      	beq.n	8005f38 <_vsnprintf+0x4c0>
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b64      	cmp	r3, #100	; 0x64
 8005f34:	f040 8098 	bne.w	8006068 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8005f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d031      	beq.n	8005fa6 <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8005f42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f46:	3307      	adds	r3, #7
 8005f48:	f023 0307 	bic.w	r3, r3, #7
 8005f4c:	f103 0208 	add.w	r2, r3, #8
 8005f50:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	da06      	bge.n	8005f72 <_vsnprintf+0x4fa>
 8005f64:	2100      	movs	r1, #0
 8005f66:	f1d2 0800 	rsbs	r8, r2, #0
 8005f6a:	eb61 0903 	sbc.w	r9, r1, r3
 8005f6e:	4642      	mov	r2, r8
 8005f70:	464b      	mov	r3, r9
 8005f72:	69f9      	ldr	r1, [r7, #28]
 8005f74:	0fc9      	lsrs	r1, r1, #31
 8005f76:	b2c9      	uxtb	r1, r1
 8005f78:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005f7a:	2400      	movs	r4, #0
 8005f7c:	4682      	mov	sl, r0
 8005f7e:	46a3      	mov	fp, r4
 8005f80:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005f82:	9008      	str	r0, [sp, #32]
 8005f84:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005f86:	9007      	str	r0, [sp, #28]
 8005f88:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005f8a:	9006      	str	r0, [sp, #24]
 8005f8c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8005f90:	9102      	str	r1, [sp, #8]
 8005f92:	e9cd 2300 	strd	r2, r3, [sp]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f9a:	6939      	ldr	r1, [r7, #16]
 8005f9c:	6978      	ldr	r0, [r7, #20]
 8005f9e:	f7ff f81b 	bl	8004fd8 <_ntoa_long_long>
 8005fa2:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8005fa4:	e0da      	b.n	800615c <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8005fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d020      	beq.n	8005ff2 <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 8005fb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fb4:	1d1a      	adds	r2, r3, #4
 8005fb6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	bfb8      	it	lt
 8005fc4:	425b      	neglt	r3, r3
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	0fdb      	lsrs	r3, r3, #31
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fd0:	9205      	str	r2, [sp, #20]
 8005fd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fd4:	9204      	str	r2, [sp, #16]
 8005fd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005fd8:	9203      	str	r2, [sp, #12]
 8005fda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fdc:	9202      	str	r2, [sp, #8]
 8005fde:	9301      	str	r3, [sp, #4]
 8005fe0:	9100      	str	r1, [sp, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fe6:	6939      	ldr	r1, [r7, #16]
 8005fe8:	6978      	ldr	r0, [r7, #20]
 8005fea:	f7fe ff8f 	bl	8004f0c <_ntoa_long>
 8005fee:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8005ff0:	e0b4      	b.n	800615c <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8005ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <_vsnprintf+0x594>
 8005ffc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006000:	1d1a      	adds	r2, r3, #4
 8006002:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	b2db      	uxtb	r3, r3
 800600a:	e012      	b.n	8006032 <_vsnprintf+0x5ba>
 800600c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800600e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006012:	2b00      	cmp	r3, #0
 8006014:	d007      	beq.n	8006026 <_vsnprintf+0x5ae>
 8006016:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800601a:	1d1a      	adds	r2, r3, #4
 800601c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	b21b      	sxth	r3, r3
 8006024:	e005      	b.n	8006032 <_vsnprintf+0x5ba>
 8006026:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800602a:	1d1a      	adds	r2, r3, #4
 800602c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8006034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006036:	2b00      	cmp	r3, #0
 8006038:	bfb8      	it	lt
 800603a:	425b      	neglt	r3, r3
 800603c:	4619      	mov	r1, r3
 800603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006040:	0fdb      	lsrs	r3, r3, #31
 8006042:	b2db      	uxtb	r3, r3
 8006044:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006046:	9205      	str	r2, [sp, #20]
 8006048:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800604a:	9204      	str	r2, [sp, #16]
 800604c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800604e:	9203      	str	r2, [sp, #12]
 8006050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006052:	9202      	str	r2, [sp, #8]
 8006054:	9301      	str	r3, [sp, #4]
 8006056:	9100      	str	r1, [sp, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800605c:	6939      	ldr	r1, [r7, #16]
 800605e:	6978      	ldr	r0, [r7, #20]
 8006060:	f7fe ff54 	bl	8004f0c <_ntoa_long>
 8006064:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8006066:	e079      	b.n	800615c <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8006068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800606a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800606e:	2b00      	cmp	r3, #0
 8006070:	d022      	beq.n	80060b8 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8006072:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006076:	3307      	adds	r3, #7
 8006078:	f023 0307 	bic.w	r3, r3, #7
 800607c:	f103 0208 	add.w	r2, r3, #8
 8006080:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800608a:	2000      	movs	r0, #0
 800608c:	460d      	mov	r5, r1
 800608e:	4606      	mov	r6, r0
 8006090:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006092:	9108      	str	r1, [sp, #32]
 8006094:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006096:	9107      	str	r1, [sp, #28]
 8006098:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800609a:	9106      	str	r1, [sp, #24]
 800609c:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80060a0:	2100      	movs	r1, #0
 80060a2:	9102      	str	r1, [sp, #8]
 80060a4:	e9cd 2300 	strd	r2, r3, [sp]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060ac:	6939      	ldr	r1, [r7, #16]
 80060ae:	6978      	ldr	r0, [r7, #20]
 80060b0:	f7fe ff92 	bl	8004fd8 <_ntoa_long_long>
 80060b4:	64f8      	str	r0, [r7, #76]	; 0x4c
 80060b6:	e051      	b.n	800615c <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80060b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d018      	beq.n	80060f4 <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80060c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060c6:	1d1a      	adds	r2, r3, #4
 80060c8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060d0:	9205      	str	r2, [sp, #20]
 80060d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060d4:	9204      	str	r2, [sp, #16]
 80060d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060d8:	9203      	str	r2, [sp, #12]
 80060da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060dc:	9202      	str	r2, [sp, #8]
 80060de:	2200      	movs	r2, #0
 80060e0:	9201      	str	r2, [sp, #4]
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060e8:	6939      	ldr	r1, [r7, #16]
 80060ea:	6978      	ldr	r0, [r7, #20]
 80060ec:	f7fe ff0e 	bl	8004f0c <_ntoa_long>
 80060f0:	64f8      	str	r0, [r7, #76]	; 0x4c
 80060f2:	e033      	b.n	800615c <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80060f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d007      	beq.n	800610e <_vsnprintf+0x696>
 80060fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006102:	1d1a      	adds	r2, r3, #4
 8006104:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	b2db      	uxtb	r3, r3
 800610c:	e012      	b.n	8006134 <_vsnprintf+0x6bc>
 800610e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006114:	2b00      	cmp	r3, #0
 8006116:	d007      	beq.n	8006128 <_vsnprintf+0x6b0>
 8006118:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800611c:	1d1a      	adds	r2, r3, #4
 800611e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	b29b      	uxth	r3, r3
 8006126:	e005      	b.n	8006134 <_vsnprintf+0x6bc>
 8006128:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800612c:	1d1a      	adds	r2, r3, #4
 800612e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8006136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006138:	9305      	str	r3, [sp, #20]
 800613a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800613c:	9304      	str	r3, [sp, #16]
 800613e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006140:	9303      	str	r3, [sp, #12]
 8006142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006144:	9302      	str	r3, [sp, #8]
 8006146:	2300      	movs	r3, #0
 8006148:	9301      	str	r3, [sp, #4]
 800614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006152:	6939      	ldr	r1, [r7, #16]
 8006154:	6978      	ldr	r0, [r7, #20]
 8006156:	f7fe fed9 	bl	8004f0c <_ntoa_long>
 800615a:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	3301      	adds	r3, #1
 8006160:	60bb      	str	r3, [r7, #8]
        break;
 8006162:	e166      	b.n	8006432 <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b46      	cmp	r3, #70	; 0x46
 800616a:	d103      	bne.n	8006174 <_vsnprintf+0x6fc>
 800616c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800616e:	f043 0320 	orr.w	r3, r3, #32
 8006172:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8006174:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006178:	3307      	adds	r3, #7
 800617a:	f023 0307 	bic.w	r3, r3, #7
 800617e:	f103 0208 	add.w	r2, r3, #8
 8006182:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006186:	ed93 7b00 	vldr	d7, [r3]
 800618a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800618c:	9302      	str	r3, [sp, #8]
 800618e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	eeb0 0a47 	vmov.f32	s0, s14
 800619a:	eef0 0a67 	vmov.f32	s1, s15
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061a2:	6939      	ldr	r1, [r7, #16]
 80061a4:	6978      	ldr	r0, [r7, #20]
 80061a6:	f7fe ff87 	bl	80050b8 <_ftoa>
 80061aa:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	3301      	adds	r3, #1
 80061b0:	60bb      	str	r3, [r7, #8]
        break;
 80061b2:	e13e      	b.n	8006432 <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	2b67      	cmp	r3, #103	; 0x67
 80061ba:	d003      	beq.n	80061c4 <_vsnprintf+0x74c>
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b47      	cmp	r3, #71	; 0x47
 80061c2:	d103      	bne.n	80061cc <_vsnprintf+0x754>
 80061c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80061ca:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b45      	cmp	r3, #69	; 0x45
 80061d2:	d003      	beq.n	80061dc <_vsnprintf+0x764>
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2b47      	cmp	r3, #71	; 0x47
 80061da:	d103      	bne.n	80061e4 <_vsnprintf+0x76c>
 80061dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061de:	f043 0320 	orr.w	r3, r3, #32
 80061e2:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80061e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061e8:	3307      	adds	r3, #7
 80061ea:	f023 0307 	bic.w	r3, r3, #7
 80061ee:	f103 0208 	add.w	r2, r3, #8
 80061f2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80061f6:	ed93 7b00 	vldr	d7, [r3]
 80061fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061fc:	9302      	str	r3, [sp, #8]
 80061fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006200:	9301      	str	r3, [sp, #4]
 8006202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	eeb0 0a47 	vmov.f32	s0, s14
 800620a:	eef0 0a67 	vmov.f32	s1, s15
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006212:	6939      	ldr	r1, [r7, #16]
 8006214:	6978      	ldr	r0, [r7, #20]
 8006216:	f7ff f9a7 	bl	8005568 <_etoa>
 800621a:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	3301      	adds	r3, #1
 8006220:	60bb      	str	r3, [r7, #8]
        break;
 8006222:	e106      	b.n	8006432 <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8006224:	2301      	movs	r3, #1
 8006226:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8006228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10e      	bne.n	8006250 <_vsnprintf+0x7d8>
          while (l++ < width) {
 8006232:	e007      	b.n	8006244 <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 8006234:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006236:	1c53      	adds	r3, r2, #1
 8006238:	64fb      	str	r3, [r7, #76]	; 0x4c
 800623a:	697c      	ldr	r4, [r7, #20]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6939      	ldr	r1, [r7, #16]
 8006240:	2020      	movs	r0, #32
 8006242:	47a0      	blx	r4
          while (l++ < width) {
 8006244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	647a      	str	r2, [r7, #68]	; 0x44
 800624a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800624c:	429a      	cmp	r2, r3
 800624e:	d8f1      	bhi.n	8006234 <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8006250:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006254:	1d1a      	adds	r2, r3, #4
 8006256:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	b2d8      	uxtb	r0, r3
 800625e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006260:	1c53      	adds	r3, r2, #1
 8006262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006264:	697c      	ldr	r4, [r7, #20]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6939      	ldr	r1, [r7, #16]
 800626a:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800626c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00e      	beq.n	8006294 <_vsnprintf+0x81c>
          while (l++ < width) {
 8006276:	e007      	b.n	8006288 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8006278:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800627a:	1c53      	adds	r3, r2, #1
 800627c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800627e:	697c      	ldr	r4, [r7, #20]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6939      	ldr	r1, [r7, #16]
 8006284:	2020      	movs	r0, #32
 8006286:	47a0      	blx	r4
          while (l++ < width) {
 8006288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	647a      	str	r2, [r7, #68]	; 0x44
 800628e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006290:	429a      	cmp	r2, r3
 8006292:	d8f1      	bhi.n	8006278 <_vsnprintf+0x800>
          }
        }
        format++;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	3301      	adds	r3, #1
 8006298:	60bb      	str	r3, [r7, #8]
        break;
 800629a:	e0ca      	b.n	8006432 <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800629c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062a0:	1d1a      	adds	r2, r3, #4
 80062a2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80062aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <_vsnprintf+0x83c>
 80062b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062b2:	e001      	b.n	80062b8 <_vsnprintf+0x840>
 80062b4:	f04f 33ff 	mov.w	r3, #4294967295
 80062b8:	4619      	mov	r1, r3
 80062ba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80062bc:	f7fe fca2 	bl	8004c04 <_strnlen_s>
 80062c0:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80062c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d005      	beq.n	80062d8 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 80062cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062d0:	4293      	cmp	r3, r2
 80062d2:	bf28      	it	cs
 80062d4:	4613      	movcs	r3, r2
 80062d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 80062d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d11a      	bne.n	8006318 <_vsnprintf+0x8a0>
          while (l++ < width) {
 80062e2:	e007      	b.n	80062f4 <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 80062e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062e6:	1c53      	adds	r3, r2, #1
 80062e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ea:	697c      	ldr	r4, [r7, #20]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6939      	ldr	r1, [r7, #16]
 80062f0:	2020      	movs	r0, #32
 80062f2:	47a0      	blx	r4
          while (l++ < width) {
 80062f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f6:	1c5a      	adds	r2, r3, #1
 80062f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80062fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d8f1      	bhi.n	80062e4 <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8006300:	e00a      	b.n	8006318 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 8006302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	643a      	str	r2, [r7, #64]	; 0x40
 8006308:	7818      	ldrb	r0, [r3, #0]
 800630a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800630c:	1c53      	adds	r3, r2, #1
 800630e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006310:	697c      	ldr	r4, [r7, #20]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6939      	ldr	r1, [r7, #16]
 8006316:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8006318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d009      	beq.n	8006334 <_vsnprintf+0x8bc>
 8006320:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0eb      	beq.n	8006302 <_vsnprintf+0x88a>
 800632a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800632c:	1e5a      	subs	r2, r3, #1
 800632e:	657a      	str	r2, [r7, #84]	; 0x54
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e6      	bne.n	8006302 <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8006334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00e      	beq.n	800635c <_vsnprintf+0x8e4>
          while (l++ < width) {
 800633e:	e007      	b.n	8006350 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8006340:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006342:	1c53      	adds	r3, r2, #1
 8006344:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006346:	697c      	ldr	r4, [r7, #20]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6939      	ldr	r1, [r7, #16]
 800634c:	2020      	movs	r0, #32
 800634e:	47a0      	blx	r4
          while (l++ < width) {
 8006350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006356:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006358:	429a      	cmp	r2, r3
 800635a:	d8f1      	bhi.n	8006340 <_vsnprintf+0x8c8>
          }
        }
        format++;
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	3301      	adds	r3, #1
 8006360:	60bb      	str	r3, [r7, #8]
        break;
 8006362:	e066      	b.n	8006432 <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8006364:	2308      	movs	r3, #8
 8006366:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8006368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800636a:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800636e:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8006370:	2300      	movs	r3, #0
 8006372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8006376:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800637a:	2b00      	cmp	r3, #0
 800637c:	d023      	beq.n	80063c6 <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800637e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006382:	1d1a      	adds	r2, r3, #4
 8006384:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	2300      	movs	r3, #0
 800638e:	603a      	str	r2, [r7, #0]
 8006390:	607b      	str	r3, [r7, #4]
 8006392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006394:	9308      	str	r3, [sp, #32]
 8006396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006398:	9307      	str	r3, [sp, #28]
 800639a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800639c:	9306      	str	r3, [sp, #24]
 800639e:	f04f 0210 	mov.w	r2, #16
 80063a2:	f04f 0300 	mov.w	r3, #0
 80063a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80063aa:	2300      	movs	r3, #0
 80063ac:	9302      	str	r3, [sp, #8]
 80063ae:	e9d7 3400 	ldrd	r3, r4, [r7]
 80063b2:	e9cd 3400 	strd	r3, r4, [sp]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063ba:	6939      	ldr	r1, [r7, #16]
 80063bc:	6978      	ldr	r0, [r7, #20]
 80063be:	f7fe fe0b 	bl	8004fd8 <_ntoa_long_long>
 80063c2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80063c4:	e018      	b.n	80063f8 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80063c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063ca:	1d1a      	adds	r2, r3, #4
 80063cc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063d6:	9305      	str	r3, [sp, #20]
 80063d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063da:	9304      	str	r3, [sp, #16]
 80063dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063de:	9303      	str	r3, [sp, #12]
 80063e0:	2310      	movs	r3, #16
 80063e2:	9302      	str	r3, [sp, #8]
 80063e4:	2300      	movs	r3, #0
 80063e6:	9301      	str	r3, [sp, #4]
 80063e8:	9200      	str	r2, [sp, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063ee:	6939      	ldr	r1, [r7, #16]
 80063f0:	6978      	ldr	r0, [r7, #20]
 80063f2:	f7fe fd8b 	bl	8004f0c <_ntoa_long>
 80063f6:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	3301      	adds	r3, #1
 80063fc:	60bb      	str	r3, [r7, #8]
        break;
 80063fe:	e018      	b.n	8006432 <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8006400:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006402:	1c53      	adds	r3, r2, #1
 8006404:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006406:	697c      	ldr	r4, [r7, #20]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6939      	ldr	r1, [r7, #16]
 800640c:	2025      	movs	r0, #37	; 0x25
 800640e:	47a0      	blx	r4
        format++;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	3301      	adds	r3, #1
 8006414:	60bb      	str	r3, [r7, #8]
        break;
 8006416:	e00c      	b.n	8006432 <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	7818      	ldrb	r0, [r3, #0]
 800641c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800641e:	1c53      	adds	r3, r2, #1
 8006420:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006422:	697c      	ldr	r4, [r7, #20]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6939      	ldr	r1, [r7, #16]
 8006428:	47a0      	blx	r4
        format++;
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	3301      	adds	r3, #1
 800642e:	60bb      	str	r3, [r7, #8]
        break;
 8006430:	bf00      	nop
  while (*format)
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	f47f ab30 	bne.w	8005a9c <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800643c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	429a      	cmp	r2, r3
 8006442:	d302      	bcc.n	800644a <_vsnprintf+0x9d2>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	1e5a      	subs	r2, r3, #1
 8006448:	e000      	b.n	800644c <_vsnprintf+0x9d4>
 800644a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800644c:	697c      	ldr	r4, [r7, #20]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6939      	ldr	r1, [r7, #16]
 8006452:	2000      	movs	r0, #0
 8006454:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8006456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006458:	4618      	mov	r0, r3
 800645a:	3764      	adds	r7, #100	; 0x64
 800645c:	46bd      	mov	sp, r7
 800645e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006462:	bf00      	nop

08006464 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 8006464:	b40e      	push	{r1, r2, r3}
 8006466:	b580      	push	{r7, lr}
 8006468:	b087      	sub	sp, #28
 800646a:	af02      	add	r7, sp, #8
 800646c:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 800646e:	f107 0320 	add.w	r3, r7, #32
 8006472:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	f04f 32ff 	mov.w	r2, #4294967295
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	4805      	ldr	r0, [pc, #20]	; (8006498 <sprintf_+0x34>)
 8006482:	f7ff faf9 	bl	8005a78 <_vsnprintf>
 8006486:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8006488:	68fb      	ldr	r3, [r7, #12]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006494:	b003      	add	sp, #12
 8006496:	4770      	bx	lr
 8006498:	08004bbb 	.word	0x08004bbb

0800649c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80064a2:	4b11      	ldr	r3, [pc, #68]	; (80064e8 <HAL_MspInit+0x4c>)
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	4a10      	ldr	r2, [pc, #64]	; (80064e8 <HAL_MspInit+0x4c>)
 80064a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ac:	6413      	str	r3, [r2, #64]	; 0x40
 80064ae:	4b0e      	ldr	r3, [pc, #56]	; (80064e8 <HAL_MspInit+0x4c>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b6:	607b      	str	r3, [r7, #4]
 80064b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064ba:	4b0b      	ldr	r3, [pc, #44]	; (80064e8 <HAL_MspInit+0x4c>)
 80064bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064be:	4a0a      	ldr	r2, [pc, #40]	; (80064e8 <HAL_MspInit+0x4c>)
 80064c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064c4:	6453      	str	r3, [r2, #68]	; 0x44
 80064c6:	4b08      	ldr	r3, [pc, #32]	; (80064e8 <HAL_MspInit+0x4c>)
 80064c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80064d2:	2200      	movs	r2, #0
 80064d4:	210f      	movs	r1, #15
 80064d6:	f06f 0001 	mvn.w	r0, #1
 80064da:	f004 fbc3 	bl	800ac64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	40023800 	.word	0x40023800

080064ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b0aa      	sub	sp, #168	; 0xa8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064f4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80064f8:	2200      	movs	r2, #0
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	605a      	str	r2, [r3, #4]
 80064fe:	609a      	str	r2, [r3, #8]
 8006500:	60da      	str	r2, [r3, #12]
 8006502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006504:	f107 0314 	add.w	r3, r7, #20
 8006508:	2280      	movs	r2, #128	; 0x80
 800650a:	2100      	movs	r1, #0
 800650c:	4618      	mov	r0, r3
 800650e:	f00e ff76 	bl	80153fe <memset>
  if(hi2c->Instance==I2C1)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a22      	ldr	r2, [pc, #136]	; (80065a0 <HAL_I2C_MspInit+0xb4>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d13c      	bne.n	8006596 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800651c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006520:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8006522:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006526:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006528:	f107 0314 	add.w	r3, r7, #20
 800652c:	4618      	mov	r0, r3
 800652e:	f006 fc7f 	bl	800ce30 <HAL_RCCEx_PeriphCLKConfig>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8006538:	f7fe fb3a 	bl	8004bb0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800653c:	4b19      	ldr	r3, [pc, #100]	; (80065a4 <HAL_I2C_MspInit+0xb8>)
 800653e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006540:	4a18      	ldr	r2, [pc, #96]	; (80065a4 <HAL_I2C_MspInit+0xb8>)
 8006542:	f043 0302 	orr.w	r3, r3, #2
 8006546:	6313      	str	r3, [r2, #48]	; 0x30
 8006548:	4b16      	ldr	r3, [pc, #88]	; (80065a4 <HAL_I2C_MspInit+0xb8>)
 800654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	613b      	str	r3, [r7, #16]
 8006552:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_MAG_SCL_Pin|I2C1_MAG_SDA_Pin;
 8006554:	23c0      	movs	r3, #192	; 0xc0
 8006556:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800655a:	2312      	movs	r3, #18
 800655c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006560:	2300      	movs	r3, #0
 8006562:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006566:	2303      	movs	r3, #3
 8006568:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800656c:	2304      	movs	r3, #4
 800656e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006572:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006576:	4619      	mov	r1, r3
 8006578:	480b      	ldr	r0, [pc, #44]	; (80065a8 <HAL_I2C_MspInit+0xbc>)
 800657a:	f004 ffa7 	bl	800b4cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800657e:	4b09      	ldr	r3, [pc, #36]	; (80065a4 <HAL_I2C_MspInit+0xb8>)
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	4a08      	ldr	r2, [pc, #32]	; (80065a4 <HAL_I2C_MspInit+0xb8>)
 8006584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006588:	6413      	str	r3, [r2, #64]	; 0x40
 800658a:	4b06      	ldr	r3, [pc, #24]	; (80065a4 <HAL_I2C_MspInit+0xb8>)
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006596:	bf00      	nop
 8006598:	37a8      	adds	r7, #168	; 0xa8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	40005400 	.word	0x40005400
 80065a4:	40023800 	.word	0x40023800
 80065a8:	40020400 	.word	0x40020400

080065ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08c      	sub	sp, #48	; 0x30
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065b4:	f107 031c 	add.w	r3, r7, #28
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]
 80065bc:	605a      	str	r2, [r3, #4]
 80065be:	609a      	str	r2, [r3, #8]
 80065c0:	60da      	str	r2, [r3, #12]
 80065c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a2e      	ldr	r2, [pc, #184]	; (8006684 <HAL_SPI_MspInit+0xd8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d128      	bne.n	8006620 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80065ce:	4b2e      	ldr	r3, [pc, #184]	; (8006688 <HAL_SPI_MspInit+0xdc>)
 80065d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d2:	4a2d      	ldr	r2, [pc, #180]	; (8006688 <HAL_SPI_MspInit+0xdc>)
 80065d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065d8:	6453      	str	r3, [r2, #68]	; 0x44
 80065da:	4b2b      	ldr	r3, [pc, #172]	; (8006688 <HAL_SPI_MspInit+0xdc>)
 80065dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065e2:	61bb      	str	r3, [r7, #24]
 80065e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065e6:	4b28      	ldr	r3, [pc, #160]	; (8006688 <HAL_SPI_MspInit+0xdc>)
 80065e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ea:	4a27      	ldr	r2, [pc, #156]	; (8006688 <HAL_SPI_MspInit+0xdc>)
 80065ec:	f043 0301 	orr.w	r3, r3, #1
 80065f0:	6313      	str	r3, [r2, #48]	; 0x30
 80065f2:	4b25      	ldr	r3, [pc, #148]	; (8006688 <HAL_SPI_MspInit+0xdc>)
 80065f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_ESP_NSS_Pin|SPI1_ESP_SCK_Pin|SPI1_ESP_MISO_Pin|SPI1_ESP_MOSI_Pin;
 80065fe:	23f0      	movs	r3, #240	; 0xf0
 8006600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006602:	2302      	movs	r3, #2
 8006604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006606:	2300      	movs	r3, #0
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800660a:	2303      	movs	r3, #3
 800660c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800660e:	2305      	movs	r3, #5
 8006610:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006612:	f107 031c 	add.w	r3, r7, #28
 8006616:	4619      	mov	r1, r3
 8006618:	481c      	ldr	r0, [pc, #112]	; (800668c <HAL_SPI_MspInit+0xe0>)
 800661a:	f004 ff57 	bl	800b4cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800661e:	e02d      	b.n	800667c <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI2)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a1a      	ldr	r2, [pc, #104]	; (8006690 <HAL_SPI_MspInit+0xe4>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d128      	bne.n	800667c <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800662a:	4b17      	ldr	r3, [pc, #92]	; (8006688 <HAL_SPI_MspInit+0xdc>)
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	4a16      	ldr	r2, [pc, #88]	; (8006688 <HAL_SPI_MspInit+0xdc>)
 8006630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006634:	6413      	str	r3, [r2, #64]	; 0x40
 8006636:	4b14      	ldr	r3, [pc, #80]	; (8006688 <HAL_SPI_MspInit+0xdc>)
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800663e:	613b      	str	r3, [r7, #16]
 8006640:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006642:	4b11      	ldr	r3, [pc, #68]	; (8006688 <HAL_SPI_MspInit+0xdc>)
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	4a10      	ldr	r2, [pc, #64]	; (8006688 <HAL_SPI_MspInit+0xdc>)
 8006648:	f043 0302 	orr.w	r3, r3, #2
 800664c:	6313      	str	r3, [r2, #48]	; 0x30
 800664e:	4b0e      	ldr	r3, [pc, #56]	; (8006688 <HAL_SPI_MspInit+0xdc>)
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_IMU_SCK_Pin|SPI2_IMU_MISO_Pin|SPI2_IMU_MOSI_Pin;
 800665a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800665e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006660:	2302      	movs	r3, #2
 8006662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006664:	2300      	movs	r3, #0
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006668:	2303      	movs	r3, #3
 800666a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800666c:	2305      	movs	r3, #5
 800666e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006670:	f107 031c 	add.w	r3, r7, #28
 8006674:	4619      	mov	r1, r3
 8006676:	4807      	ldr	r0, [pc, #28]	; (8006694 <HAL_SPI_MspInit+0xe8>)
 8006678:	f004 ff28 	bl	800b4cc <HAL_GPIO_Init>
}
 800667c:	bf00      	nop
 800667e:	3730      	adds	r7, #48	; 0x30
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	40013000 	.word	0x40013000
 8006688:	40023800 	.word	0x40023800
 800668c:	40020000 	.word	0x40020000
 8006690:	40003800 	.word	0x40003800
 8006694:	40020400 	.word	0x40020400

08006698 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a0a      	ldr	r2, [pc, #40]	; (80066d0 <HAL_TIM_Base_MspInit+0x38>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d10b      	bne.n	80066c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80066aa:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <HAL_TIM_Base_MspInit+0x3c>)
 80066ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ae:	4a09      	ldr	r2, [pc, #36]	; (80066d4 <HAL_TIM_Base_MspInit+0x3c>)
 80066b0:	f043 0301 	orr.w	r3, r3, #1
 80066b4:	6453      	str	r3, [r2, #68]	; 0x44
 80066b6:	4b07      	ldr	r3, [pc, #28]	; (80066d4 <HAL_TIM_Base_MspInit+0x3c>)
 80066b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80066c2:	bf00      	nop
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	40010000 	.word	0x40010000
 80066d4:	40023800 	.word	0x40023800

080066d8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08a      	sub	sp, #40	; 0x28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066e0:	f107 0314 	add.w	r3, r7, #20
 80066e4:	2200      	movs	r2, #0
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	605a      	str	r2, [r3, #4]
 80066ea:	609a      	str	r2, [r3, #8]
 80066ec:	60da      	str	r2, [r3, #12]
 80066ee:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a1b      	ldr	r2, [pc, #108]	; (8006764 <HAL_TIM_IC_MspInit+0x8c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d12f      	bne.n	800675a <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80066fa:	4b1b      	ldr	r3, [pc, #108]	; (8006768 <HAL_TIM_IC_MspInit+0x90>)
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	4a1a      	ldr	r2, [pc, #104]	; (8006768 <HAL_TIM_IC_MspInit+0x90>)
 8006700:	f043 0302 	orr.w	r3, r3, #2
 8006704:	6413      	str	r3, [r2, #64]	; 0x40
 8006706:	4b18      	ldr	r3, [pc, #96]	; (8006768 <HAL_TIM_IC_MspInit+0x90>)
 8006708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	613b      	str	r3, [r7, #16]
 8006710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006712:	4b15      	ldr	r3, [pc, #84]	; (8006768 <HAL_TIM_IC_MspInit+0x90>)
 8006714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006716:	4a14      	ldr	r2, [pc, #80]	; (8006768 <HAL_TIM_IC_MspInit+0x90>)
 8006718:	f043 0304 	orr.w	r3, r3, #4
 800671c:	6313      	str	r3, [r2, #48]	; 0x30
 800671e:	4b12      	ldr	r3, [pc, #72]	; (8006768 <HAL_TIM_IC_MspInit+0x90>)
 8006720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006722:	f003 0304 	and.w	r3, r3, #4
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_DIS_ECHO_CH1_Pin;
 800672a:	2340      	movs	r3, #64	; 0x40
 800672c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800672e:	2302      	movs	r3, #2
 8006730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006732:	2300      	movs	r3, #0
 8006734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006736:	2300      	movs	r3, #0
 8006738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800673a:	2302      	movs	r3, #2
 800673c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM3_DIS_ECHO_CH1_GPIO_Port, &GPIO_InitStruct);
 800673e:	f107 0314 	add.w	r3, r7, #20
 8006742:	4619      	mov	r1, r3
 8006744:	4809      	ldr	r0, [pc, #36]	; (800676c <HAL_TIM_IC_MspInit+0x94>)
 8006746:	f004 fec1 	bl	800b4cc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 800674a:	2200      	movs	r2, #0
 800674c:	2106      	movs	r1, #6
 800674e:	201d      	movs	r0, #29
 8006750:	f004 fa88 	bl	800ac64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006754:	201d      	movs	r0, #29
 8006756:	f004 faa1 	bl	800ac9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800675a:	bf00      	nop
 800675c:	3728      	adds	r7, #40	; 0x28
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	40000400 	.word	0x40000400
 8006768:	40023800 	.word	0x40023800
 800676c:	40020800 	.word	0x40020800

08006770 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006778:	f107 030c 	add.w	r3, r7, #12
 800677c:	2200      	movs	r2, #0
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	605a      	str	r2, [r3, #4]
 8006782:	609a      	str	r2, [r3, #8]
 8006784:	60da      	str	r2, [r3, #12]
 8006786:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a11      	ldr	r2, [pc, #68]	; (80067d4 <HAL_TIM_MspPostInit+0x64>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d11c      	bne.n	80067cc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006792:	4b11      	ldr	r3, [pc, #68]	; (80067d8 <HAL_TIM_MspPostInit+0x68>)
 8006794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006796:	4a10      	ldr	r2, [pc, #64]	; (80067d8 <HAL_TIM_MspPostInit+0x68>)
 8006798:	f043 0310 	orr.w	r3, r3, #16
 800679c:	6313      	str	r3, [r2, #48]	; 0x30
 800679e:	4b0e      	ldr	r3, [pc, #56]	; (80067d8 <HAL_TIM_MspPostInit+0x68>)
 80067a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a2:	f003 0310 	and.w	r3, r3, #16
 80067a6:	60bb      	str	r3, [r7, #8]
 80067a8:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_ESC1_CH1_Pin|TIM1_ESC2_CH2_Pin|TIM1_ESC3_CH3_Pin|TIM1_ESC4_CH4_Pin;
 80067aa:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80067ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067b0:	2302      	movs	r3, #2
 80067b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067b4:	2300      	movs	r3, #0
 80067b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067b8:	2300      	movs	r3, #0
 80067ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80067bc:	2301      	movs	r3, #1
 80067be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80067c0:	f107 030c 	add.w	r3, r7, #12
 80067c4:	4619      	mov	r1, r3
 80067c6:	4805      	ldr	r0, [pc, #20]	; (80067dc <HAL_TIM_MspPostInit+0x6c>)
 80067c8:	f004 fe80 	bl	800b4cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80067cc:	bf00      	nop
 80067ce:	3720      	adds	r7, #32
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	40010000 	.word	0x40010000
 80067d8:	40023800 	.word	0x40023800
 80067dc:	40021000 	.word	0x40021000

080067e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b0ae      	sub	sp, #184	; 0xb8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	605a      	str	r2, [r3, #4]
 80067f2:	609a      	str	r2, [r3, #8]
 80067f4:	60da      	str	r2, [r3, #12]
 80067f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80067f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067fc:	2280      	movs	r2, #128	; 0x80
 80067fe:	2100      	movs	r1, #0
 8006800:	4618      	mov	r0, r3
 8006802:	f00e fdfc 	bl	80153fe <memset>
  if(huart->Instance==UART4)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a83      	ldr	r2, [pc, #524]	; (8006a18 <HAL_UART_MspInit+0x238>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d144      	bne.n	800689a <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006814:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8006816:	2340      	movs	r3, #64	; 0x40
 8006818:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800681a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800681e:	4618      	mov	r0, r3
 8006820:	f006 fb06 	bl	800ce30 <HAL_RCCEx_PeriphCLKConfig>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800682a:	f7fe f9c1 	bl	8004bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800682e:	4b7b      	ldr	r3, [pc, #492]	; (8006a1c <HAL_UART_MspInit+0x23c>)
 8006830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006832:	4a7a      	ldr	r2, [pc, #488]	; (8006a1c <HAL_UART_MspInit+0x23c>)
 8006834:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006838:	6413      	str	r3, [r2, #64]	; 0x40
 800683a:	4b78      	ldr	r3, [pc, #480]	; (8006a1c <HAL_UART_MspInit+0x23c>)
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006842:	623b      	str	r3, [r7, #32]
 8006844:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006846:	4b75      	ldr	r3, [pc, #468]	; (8006a1c <HAL_UART_MspInit+0x23c>)
 8006848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684a:	4a74      	ldr	r2, [pc, #464]	; (8006a1c <HAL_UART_MspInit+0x23c>)
 800684c:	f043 0301 	orr.w	r3, r3, #1
 8006850:	6313      	str	r3, [r2, #48]	; 0x30
 8006852:	4b72      	ldr	r3, [pc, #456]	; (8006a1c <HAL_UART_MspInit+0x23c>)
 8006854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	61fb      	str	r3, [r7, #28]
 800685c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_GPS_TX_Pin|UART4_GPS_RX_Pin;
 800685e:	2303      	movs	r3, #3
 8006860:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006864:	2302      	movs	r3, #2
 8006866:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800686a:	2300      	movs	r3, #0
 800686c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006870:	2303      	movs	r3, #3
 8006872:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006876:	2308      	movs	r3, #8
 8006878:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800687c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006880:	4619      	mov	r1, r3
 8006882:	4867      	ldr	r0, [pc, #412]	; (8006a20 <HAL_UART_MspInit+0x240>)
 8006884:	f004 fe22 	bl	800b4cc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8006888:	2200      	movs	r2, #0
 800688a:	2106      	movs	r1, #6
 800688c:	2034      	movs	r0, #52	; 0x34
 800688e:	f004 f9e9 	bl	800ac64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006892:	2034      	movs	r0, #52	; 0x34
 8006894:	f004 fa02 	bl	800ac9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006898:	e0b9      	b.n	8006a0e <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART2)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a61      	ldr	r2, [pc, #388]	; (8006a24 <HAL_UART_MspInit+0x244>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d172      	bne.n	800698a <HAL_UART_MspInit+0x1aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80068a4:	2380      	movs	r3, #128	; 0x80
 80068a6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80068a8:	2304      	movs	r3, #4
 80068aa:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80068ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068b0:	4618      	mov	r0, r3
 80068b2:	f006 fabd 	bl	800ce30 <HAL_RCCEx_PeriphCLKConfig>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80068bc:	f7fe f978 	bl	8004bb0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80068c0:	4b56      	ldr	r3, [pc, #344]	; (8006a1c <HAL_UART_MspInit+0x23c>)
 80068c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c4:	4a55      	ldr	r2, [pc, #340]	; (8006a1c <HAL_UART_MspInit+0x23c>)
 80068c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ca:	6413      	str	r3, [r2, #64]	; 0x40
 80068cc:	4b53      	ldr	r3, [pc, #332]	; (8006a1c <HAL_UART_MspInit+0x23c>)
 80068ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d4:	61bb      	str	r3, [r7, #24]
 80068d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80068d8:	4b50      	ldr	r3, [pc, #320]	; (8006a1c <HAL_UART_MspInit+0x23c>)
 80068da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068dc:	4a4f      	ldr	r2, [pc, #316]	; (8006a1c <HAL_UART_MspInit+0x23c>)
 80068de:	f043 0308 	orr.w	r3, r3, #8
 80068e2:	6313      	str	r3, [r2, #48]	; 0x30
 80068e4:	4b4d      	ldr	r3, [pc, #308]	; (8006a1c <HAL_UART_MspInit+0x23c>)
 80068e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	617b      	str	r3, [r7, #20]
 80068ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_IBUS_TX_Pin|UART2_IBUS_RX_Pin;
 80068f0:	2360      	movs	r3, #96	; 0x60
 80068f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068f6:	2302      	movs	r3, #2
 80068f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068fc:	2300      	movs	r3, #0
 80068fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006902:	2303      	movs	r3, #3
 8006904:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006908:	2307      	movs	r3, #7
 800690a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800690e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006912:	4619      	mov	r1, r3
 8006914:	4844      	ldr	r0, [pc, #272]	; (8006a28 <HAL_UART_MspInit+0x248>)
 8006916:	f004 fdd9 	bl	800b4cc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800691a:	4b44      	ldr	r3, [pc, #272]	; (8006a2c <HAL_UART_MspInit+0x24c>)
 800691c:	4a44      	ldr	r2, [pc, #272]	; (8006a30 <HAL_UART_MspInit+0x250>)
 800691e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006920:	4b42      	ldr	r3, [pc, #264]	; (8006a2c <HAL_UART_MspInit+0x24c>)
 8006922:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006926:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006928:	4b40      	ldr	r3, [pc, #256]	; (8006a2c <HAL_UART_MspInit+0x24c>)
 800692a:	2200      	movs	r2, #0
 800692c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800692e:	4b3f      	ldr	r3, [pc, #252]	; (8006a2c <HAL_UART_MspInit+0x24c>)
 8006930:	2200      	movs	r2, #0
 8006932:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006934:	4b3d      	ldr	r3, [pc, #244]	; (8006a2c <HAL_UART_MspInit+0x24c>)
 8006936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800693a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800693c:	4b3b      	ldr	r3, [pc, #236]	; (8006a2c <HAL_UART_MspInit+0x24c>)
 800693e:	2200      	movs	r2, #0
 8006940:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006942:	4b3a      	ldr	r3, [pc, #232]	; (8006a2c <HAL_UART_MspInit+0x24c>)
 8006944:	2200      	movs	r2, #0
 8006946:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006948:	4b38      	ldr	r3, [pc, #224]	; (8006a2c <HAL_UART_MspInit+0x24c>)
 800694a:	2200      	movs	r2, #0
 800694c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800694e:	4b37      	ldr	r3, [pc, #220]	; (8006a2c <HAL_UART_MspInit+0x24c>)
 8006950:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006954:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006956:	4b35      	ldr	r3, [pc, #212]	; (8006a2c <HAL_UART_MspInit+0x24c>)
 8006958:	2200      	movs	r2, #0
 800695a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800695c:	4833      	ldr	r0, [pc, #204]	; (8006a2c <HAL_UART_MspInit+0x24c>)
 800695e:	f004 f9ab 	bl	800acb8 <HAL_DMA_Init>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8006968:	f7fe f922 	bl	8004bb0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a2f      	ldr	r2, [pc, #188]	; (8006a2c <HAL_UART_MspInit+0x24c>)
 8006970:	675a      	str	r2, [r3, #116]	; 0x74
 8006972:	4a2e      	ldr	r2, [pc, #184]	; (8006a2c <HAL_UART_MspInit+0x24c>)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8006978:	2200      	movs	r2, #0
 800697a:	2107      	movs	r1, #7
 800697c:	2026      	movs	r0, #38	; 0x26
 800697e:	f004 f971 	bl	800ac64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006982:	2026      	movs	r0, #38	; 0x26
 8006984:	f004 f98a 	bl	800ac9c <HAL_NVIC_EnableIRQ>
}
 8006988:	e041      	b.n	8006a0e <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a29      	ldr	r2, [pc, #164]	; (8006a34 <HAL_UART_MspInit+0x254>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d13c      	bne.n	8006a0e <HAL_UART_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 800699a:	2310      	movs	r3, #16
 800699c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800699e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069a2:	4618      	mov	r0, r3
 80069a4:	f006 fa44 	bl	800ce30 <HAL_RCCEx_PeriphCLKConfig>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 80069ae:	f7fe f8ff 	bl	8004bb0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80069b2:	4b1a      	ldr	r3, [pc, #104]	; (8006a1c <HAL_UART_MspInit+0x23c>)
 80069b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b6:	4a19      	ldr	r2, [pc, #100]	; (8006a1c <HAL_UART_MspInit+0x23c>)
 80069b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069bc:	6413      	str	r3, [r2, #64]	; 0x40
 80069be:	4b17      	ldr	r3, [pc, #92]	; (8006a1c <HAL_UART_MspInit+0x23c>)
 80069c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069c6:	613b      	str	r3, [r7, #16]
 80069c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80069ca:	4b14      	ldr	r3, [pc, #80]	; (8006a1c <HAL_UART_MspInit+0x23c>)
 80069cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ce:	4a13      	ldr	r2, [pc, #76]	; (8006a1c <HAL_UART_MspInit+0x23c>)
 80069d0:	f043 0304 	orr.w	r3, r3, #4
 80069d4:	6313      	str	r3, [r2, #48]	; 0x30
 80069d6:	4b11      	ldr	r3, [pc, #68]	; (8006a1c <HAL_UART_MspInit+0x23c>)
 80069d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069da:	f003 0304 	and.w	r3, r3, #4
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_PC_TX_Pin|UART3_PC_RX_Pin;
 80069e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80069e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ea:	2302      	movs	r3, #2
 80069ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069f0:	2300      	movs	r3, #0
 80069f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069f6:	2303      	movs	r3, #3
 80069f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80069fc:	2307      	movs	r3, #7
 80069fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a02:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006a06:	4619      	mov	r1, r3
 8006a08:	480b      	ldr	r0, [pc, #44]	; (8006a38 <HAL_UART_MspInit+0x258>)
 8006a0a:	f004 fd5f 	bl	800b4cc <HAL_GPIO_Init>
}
 8006a0e:	bf00      	nop
 8006a10:	37b8      	adds	r7, #184	; 0xb8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	40004c00 	.word	0x40004c00
 8006a1c:	40023800 	.word	0x40023800
 8006a20:	40020000 	.word	0x40020000
 8006a24:	40004400 	.word	0x40004400
 8006a28:	40020c00 	.word	0x40020c00
 8006a2c:	20000cc8 	.word	0x20000cc8
 8006a30:	40026088 	.word	0x40026088
 8006a34:	40004800 	.word	0x40004800
 8006a38:	40020800 	.word	0x40020800

08006a3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08e      	sub	sp, #56	; 0x38
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8006a44:	2300      	movs	r3, #0
 8006a46:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8006a4c:	4b34      	ldr	r3, [pc, #208]	; (8006b20 <HAL_InitTick+0xe4>)
 8006a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a50:	4a33      	ldr	r2, [pc, #204]	; (8006b20 <HAL_InitTick+0xe4>)
 8006a52:	f043 0301 	orr.w	r3, r3, #1
 8006a56:	6413      	str	r3, [r2, #64]	; 0x40
 8006a58:	4b31      	ldr	r3, [pc, #196]	; (8006b20 <HAL_InitTick+0xe4>)
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006a64:	f107 0210 	add.w	r2, r7, #16
 8006a68:	f107 0314 	add.w	r3, r7, #20
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f006 f9ac 	bl	800cdcc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d103      	bne.n	8006a86 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006a7e:	f006 f97d 	bl	800cd7c <HAL_RCC_GetPCLK1Freq>
 8006a82:	6378      	str	r0, [r7, #52]	; 0x34
 8006a84:	e004      	b.n	8006a90 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006a86:	f006 f979 	bl	800cd7c <HAL_RCC_GetPCLK1Freq>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	005b      	lsls	r3, r3, #1
 8006a8e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a92:	4a24      	ldr	r2, [pc, #144]	; (8006b24 <HAL_InitTick+0xe8>)
 8006a94:	fba2 2303 	umull	r2, r3, r2, r3
 8006a98:	0c9b      	lsrs	r3, r3, #18
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8006a9e:	4b22      	ldr	r3, [pc, #136]	; (8006b28 <HAL_InitTick+0xec>)
 8006aa0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006aa4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8006aa6:	4b20      	ldr	r3, [pc, #128]	; (8006b28 <HAL_InitTick+0xec>)
 8006aa8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006aac:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8006aae:	4a1e      	ldr	r2, [pc, #120]	; (8006b28 <HAL_InitTick+0xec>)
 8006ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8006ab4:	4b1c      	ldr	r3, [pc, #112]	; (8006b28 <HAL_InitTick+0xec>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006aba:	4b1b      	ldr	r3, [pc, #108]	; (8006b28 <HAL_InitTick+0xec>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ac0:	4b19      	ldr	r3, [pc, #100]	; (8006b28 <HAL_InitTick+0xec>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8006ac6:	4818      	ldr	r0, [pc, #96]	; (8006b28 <HAL_InitTick+0xec>)
 8006ac8:	f007 fc5c 	bl	800e384 <HAL_TIM_Base_Init>
 8006acc:	4603      	mov	r3, r0
 8006ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8006ad2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d11b      	bne.n	8006b12 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8006ada:	4813      	ldr	r0, [pc, #76]	; (8006b28 <HAL_InitTick+0xec>)
 8006adc:	f007 fcaa 	bl	800e434 <HAL_TIM_Base_Start_IT>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8006ae6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d111      	bne.n	8006b12 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006aee:	201c      	movs	r0, #28
 8006af0:	f004 f8d4 	bl	800ac9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b0f      	cmp	r3, #15
 8006af8:	d808      	bhi.n	8006b0c <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8006afa:	2200      	movs	r2, #0
 8006afc:	6879      	ldr	r1, [r7, #4]
 8006afe:	201c      	movs	r0, #28
 8006b00:	f004 f8b0 	bl	800ac64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006b04:	4a09      	ldr	r2, [pc, #36]	; (8006b2c <HAL_InitTick+0xf0>)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	e002      	b.n	8006b12 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006b12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3738      	adds	r7, #56	; 0x38
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	40023800 	.word	0x40023800
 8006b24:	431bde83 	.word	0x431bde83
 8006b28:	20000d6c 	.word	0x20000d6c
 8006b2c:	2000000c 	.word	0x2000000c

08006b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006b30:	b480      	push	{r7}
 8006b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006b34:	e7fe      	b.n	8006b34 <NMI_Handler+0x4>

08006b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006b36:	b480      	push	{r7}
 8006b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006b3a:	e7fe      	b.n	8006b3a <HardFault_Handler+0x4>

08006b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006b40:	e7fe      	b.n	8006b40 <MemManage_Handler+0x4>

08006b42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006b42:	b480      	push	{r7}
 8006b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006b46:	e7fe      	b.n	8006b46 <BusFault_Handler+0x4>

08006b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006b4c:	e7fe      	b.n	8006b4c <UsageFault_Handler+0x4>

08006b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006b52:	bf00      	nop
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006b60:	4802      	ldr	r0, [pc, #8]	; (8006b6c <DMA1_Stream5_IRQHandler+0x10>)
 8006b62:	f004 fa49 	bl	800aff8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006b66:	bf00      	nop
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	20000cc8 	.word	0x20000cc8

08006b70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006b74:	4802      	ldr	r0, [pc, #8]	; (8006b80 <TIM2_IRQHandler+0x10>)
 8006b76:	f007 ffd9 	bl	800eb2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006b7a:	bf00      	nop
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000d6c 	.word	0x20000d6c

08006b84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006b88:	4802      	ldr	r0, [pc, #8]	; (8006b94 <TIM3_IRQHandler+0x10>)
 8006b8a:	f007 ffcf 	bl	800eb2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006b8e:	bf00      	nop
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20000ae4 	.word	0x20000ae4

08006b98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006b9c:	4802      	ldr	r0, [pc, #8]	; (8006ba8 <USART2_IRQHandler+0x10>)
 8006b9e:	f009 fb2d 	bl	80101fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006ba2:	bf00      	nop
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000bb8 	.word	0x20000bb8

08006bac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006bb0:	4802      	ldr	r0, [pc, #8]	; (8006bbc <UART4_IRQHandler+0x10>)
 8006bb2:	f009 fb23 	bl	80101fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006bb6:	bf00      	nop
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	20000b30 	.word	0x20000b30

08006bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	af00      	add	r7, sp, #0
  return 1;
 8006bc4:	2301      	movs	r3, #1
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <_kill>:

int _kill(int pid, int sig)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006bda:	f00e fccb 	bl	8015574 <__errno>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2216      	movs	r2, #22
 8006be2:	601a      	str	r2, [r3, #0]
  return -1;
 8006be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <_exit>:

void _exit (int status)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff ffe7 	bl	8006bd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006c02:	e7fe      	b.n	8006c02 <_exit+0x12>

08006c04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c10:	2300      	movs	r3, #0
 8006c12:	617b      	str	r3, [r7, #20]
 8006c14:	e00a      	b.n	8006c2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006c16:	f3af 8000 	nop.w
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	60ba      	str	r2, [r7, #8]
 8006c22:	b2ca      	uxtb	r2, r1
 8006c24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	dbf0      	blt.n	8006c16 <_read+0x12>
  }

  return len;
 8006c34:	687b      	ldr	r3, [r7, #4]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b086      	sub	sp, #24
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	60f8      	str	r0, [r7, #12]
 8006c46:	60b9      	str	r1, [r7, #8]
 8006c48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	617b      	str	r3, [r7, #20]
 8006c4e:	e009      	b.n	8006c64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	60ba      	str	r2, [r7, #8]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	3301      	adds	r3, #1
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	dbf1      	blt.n	8006c50 <_write+0x12>
  }
  return len;
 8006c6c:	687b      	ldr	r3, [r7, #4]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <_close>:

int _close(int file)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b083      	sub	sp, #12
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b083      	sub	sp, #12
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006c9e:	605a      	str	r2, [r3, #4]
  return 0;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <_isatty>:

int _isatty(int file)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006cb6:	2301      	movs	r3, #1
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
	...

08006ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ce8:	4a14      	ldr	r2, [pc, #80]	; (8006d3c <_sbrk+0x5c>)
 8006cea:	4b15      	ldr	r3, [pc, #84]	; (8006d40 <_sbrk+0x60>)
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006cf4:	4b13      	ldr	r3, [pc, #76]	; (8006d44 <_sbrk+0x64>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d102      	bne.n	8006d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006cfc:	4b11      	ldr	r3, [pc, #68]	; (8006d44 <_sbrk+0x64>)
 8006cfe:	4a12      	ldr	r2, [pc, #72]	; (8006d48 <_sbrk+0x68>)
 8006d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006d02:	4b10      	ldr	r3, [pc, #64]	; (8006d44 <_sbrk+0x64>)
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4413      	add	r3, r2
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d207      	bcs.n	8006d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006d10:	f00e fc30 	bl	8015574 <__errno>
 8006d14:	4603      	mov	r3, r0
 8006d16:	220c      	movs	r2, #12
 8006d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d1e:	e009      	b.n	8006d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006d20:	4b08      	ldr	r3, [pc, #32]	; (8006d44 <_sbrk+0x64>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006d26:	4b07      	ldr	r3, [pc, #28]	; (8006d44 <_sbrk+0x64>)
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	4a05      	ldr	r2, [pc, #20]	; (8006d44 <_sbrk+0x64>)
 8006d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006d32:	68fb      	ldr	r3, [r7, #12]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3718      	adds	r7, #24
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	20040000 	.word	0x20040000
 8006d40:	00000400 	.word	0x00000400
 8006d44:	20000db8 	.word	0x20000db8
 8006d48:	20009058 	.word	0x20009058

08006d4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006d50:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <SystemInit+0x20>)
 8006d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d56:	4a05      	ldr	r2, [pc, #20]	; (8006d6c <SystemInit+0x20>)
 8006d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006d60:	bf00      	nop
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	e000ed00 	.word	0xe000ed00

08006d70 <FusionDegreesToRadians>:
static inline float FusionDegreesToRadians(const float degrees) {
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 8006d7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d7e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006d94 <FusionDegreesToRadians+0x24>
 8006d82:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006d86:	eeb0 0a67 	vmov.f32	s0, s15
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	3c8efa35 	.word	0x3c8efa35

08006d98 <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	105a      	asrs	r2, r3, #1
 8006daa:	4b10      	ldr	r3, [pc, #64]	; (8006dec <FusionFastInverseSqrt+0x54>)
 8006dac:	1a9b      	subs	r3, r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 8006db0:	ed97 7a03 	vldr	s14, [r7, #12]
 8006db4:	edd7 7a01 	vldr	s15, [r7, #4]
 8006db8:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8006df0 <FusionFastInverseSqrt+0x58>
 8006dbc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006dc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8006dc4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006dc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8006dcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006dd0:	eddf 6a08 	vldr	s13, [pc, #32]	; 8006df4 <FusionFastInverseSqrt+0x5c>
 8006dd4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8006ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8006de0:	3714      	adds	r7, #20
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	5f1f1412 	.word	0x5f1f1412
 8006df0:	3f36d312 	.word	0x3f36d312
 8006df4:	3fd851ff 	.word	0x3fd851ff

08006df8 <FusionVectorIsZero>:
static inline bool FusionVectorIsZero(const FusionVector vector) {
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	eef0 6a40 	vmov.f32	s13, s0
 8006e02:	eeb0 7a60 	vmov.f32	s14, s1
 8006e06:	eef0 7a41 	vmov.f32	s15, s2
 8006e0a:	edc7 6a01 	vstr	s13, [r7, #4]
 8006e0e:	ed87 7a02 	vstr	s14, [r7, #8]
 8006e12:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 8006e16:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e22:	d10f      	bne.n	8006e44 <FusionVectorIsZero+0x4c>
 8006e24:	edd7 7a02 	vldr	s15, [r7, #8]
 8006e28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e30:	d108      	bne.n	8006e44 <FusionVectorIsZero+0x4c>
 8006e32:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e3e:	d101      	bne.n	8006e44 <FusionVectorIsZero+0x4c>
 8006e40:	2301      	movs	r3, #1
 8006e42:	e000      	b.n	8006e46 <FusionVectorIsZero+0x4e>
 8006e44:	2300      	movs	r3, #0
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	b2db      	uxtb	r3, r3
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 8006e58:	b480      	push	{r7}
 8006e5a:	b091      	sub	sp, #68	; 0x44
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	eeb0 5a40 	vmov.f32	s10, s0
 8006e62:	eef0 5a60 	vmov.f32	s11, s1
 8006e66:	eeb0 6a41 	vmov.f32	s12, s2
 8006e6a:	eef0 6a61 	vmov.f32	s13, s3
 8006e6e:	eeb0 7a42 	vmov.f32	s14, s4
 8006e72:	eef0 7a62 	vmov.f32	s15, s5
 8006e76:	ed87 5a07 	vstr	s10, [r7, #28]
 8006e7a:	edc7 5a08 	vstr	s11, [r7, #32]
 8006e7e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8006e82:	edc7 6a04 	vstr	s13, [r7, #16]
 8006e86:	ed87 7a05 	vstr	s14, [r7, #20]
 8006e8a:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 8006e8e:	ed97 7a07 	vldr	s14, [r7, #28]
 8006e92:	edd7 7a04 	vldr	s15, [r7, #16]
 8006e96:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8006e9a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 8006e9e:	ed97 7a08 	vldr	s14, [r7, #32]
 8006ea2:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8006eaa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 8006eae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006eb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8006eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8006eba:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8006ebe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006ec2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006ec6:	ca07      	ldmia	r2, {r0, r1, r2}
 8006ec8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006ecc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed2:	ee06 1a90 	vmov	s13, r1
 8006ed6:	ee07 2a10 	vmov	s14, r2
 8006eda:	ee07 3a90 	vmov	s15, r3
}
 8006ede:	eeb0 0a66 	vmov.f32	s0, s13
 8006ee2:	eef0 0a47 	vmov.f32	s1, s14
 8006ee6:	eeb0 1a67 	vmov.f32	s2, s15
 8006eea:	3744      	adds	r7, #68	; 0x44
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	eef0 6a40 	vmov.f32	s13, s0
 8006efe:	eeb0 7a60 	vmov.f32	s14, s1
 8006f02:	eef0 7a41 	vmov.f32	s15, s2
 8006f06:	edc7 6a01 	vstr	s13, [r7, #4]
 8006f0a:	ed87 7a02 	vstr	s14, [r7, #8]
 8006f0e:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 8006f12:	ed97 7a01 	vldr	s14, [r7, #4]
 8006f16:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f22:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8006f26:	eeb0 0a67 	vmov.f32	s0, s15
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8006f34:	b480      	push	{r7}
 8006f36:	b08f      	sub	sp, #60	; 0x3c
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	eef0 6a40 	vmov.f32	s13, s0
 8006f3e:	eeb0 7a60 	vmov.f32	s14, s1
 8006f42:	eef0 7a41 	vmov.f32	s15, s2
 8006f46:	edc7 1a04 	vstr	s3, [r7, #16]
 8006f4a:	edc7 6a05 	vstr	s13, [r7, #20]
 8006f4e:	ed87 7a06 	vstr	s14, [r7, #24]
 8006f52:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 8006f56:	ed97 7a05 	vldr	s14, [r7, #20]
 8006f5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8006f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8006f62:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 8006f66:	ed97 7a06 	vldr	s14, [r7, #24]
 8006f6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8006f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8006f72:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 8006f76:	ed97 7a07 	vldr	s14, [r7, #28]
 8006f7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8006f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8006f82:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 8006f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f8a:	f107 0220 	add.w	r2, r7, #32
 8006f8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006f90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006f94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9a:	ee06 1a90 	vmov	s13, r1
 8006f9e:	ee07 2a10 	vmov	s14, r2
 8006fa2:	ee07 3a90 	vmov	s15, r3
}
 8006fa6:	eeb0 0a66 	vmov.f32	s0, s13
 8006faa:	eef0 0a47 	vmov.f32	s1, s14
 8006fae:	eeb0 1a67 	vmov.f32	s2, s15
 8006fb2:	373c      	adds	r7, #60	; 0x3c
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8006fbc:	b480      	push	{r7}
 8006fbe:	b091      	sub	sp, #68	; 0x44
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	eeb0 5a40 	vmov.f32	s10, s0
 8006fc6:	eef0 5a60 	vmov.f32	s11, s1
 8006fca:	eeb0 6a41 	vmov.f32	s12, s2
 8006fce:	eef0 6a61 	vmov.f32	s13, s3
 8006fd2:	eeb0 7a42 	vmov.f32	s14, s4
 8006fd6:	eef0 7a62 	vmov.f32	s15, s5
 8006fda:	ed87 5a07 	vstr	s10, [r7, #28]
 8006fde:	edc7 5a08 	vstr	s11, [r7, #32]
 8006fe2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8006fe6:	edc7 6a04 	vstr	s13, [r7, #16]
 8006fea:	ed87 7a05 	vstr	s14, [r7, #20]
 8006fee:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 8006ff2:	ed97 7a07 	vldr	s14, [r7, #28]
 8006ff6:	edd7 7a04 	vldr	s15, [r7, #16]
 8006ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8006ffe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 8007002:	ed97 7a08 	vldr	s14, [r7, #32]
 8007006:	edd7 7a05 	vldr	s15, [r7, #20]
 800700a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800700e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 8007012:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007016:	edd7 7a06 	vldr	s15, [r7, #24]
 800701a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800701e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8007022:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007026:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800702a:	ca07      	ldmia	r2, {r0, r1, r2}
 800702c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007030:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007036:	ee06 1a90 	vmov	s13, r1
 800703a:	ee07 2a10 	vmov	s14, r2
 800703e:	ee07 3a90 	vmov	s15, r3
}
 8007042:	eeb0 0a66 	vmov.f32	s0, s13
 8007046:	eef0 0a47 	vmov.f32	s1, s14
 800704a:	eeb0 1a67 	vmov.f32	s2, s15
 800704e:	3744      	adds	r7, #68	; 0x44
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8007058:	b480      	push	{r7}
 800705a:	b091      	sub	sp, #68	; 0x44
 800705c:	af00      	add	r7, sp, #0
 800705e:	eeb0 5a40 	vmov.f32	s10, s0
 8007062:	eef0 5a60 	vmov.f32	s11, s1
 8007066:	eeb0 6a41 	vmov.f32	s12, s2
 800706a:	eef0 6a61 	vmov.f32	s13, s3
 800706e:	eeb0 7a42 	vmov.f32	s14, s4
 8007072:	eef0 7a62 	vmov.f32	s15, s5
 8007076:	ed87 5a07 	vstr	s10, [r7, #28]
 800707a:	edc7 5a08 	vstr	s11, [r7, #32]
 800707e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8007082:	edc7 6a04 	vstr	s13, [r7, #16]
 8007086:	ed87 7a05 	vstr	s14, [r7, #20]
 800708a:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 800708e:	ed97 7a08 	vldr	s14, [r7, #32]
 8007092:	edd7 7a06 	vldr	s15, [r7, #24]
 8007096:	ee27 7a27 	vmul.f32	s14, s14, s15
 800709a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800709e:	edd7 7a05 	vldr	s15, [r7, #20]
 80070a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80070a6:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80070aa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 80070ae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80070b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80070b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80070ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80070be:	edd7 7a06 	vldr	s15, [r7, #24]
 80070c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80070c6:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80070ca:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 80070ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80070d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80070d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80070da:	edd7 6a08 	vldr	s13, [r7, #32]
 80070de:	edd7 7a04 	vldr	s15, [r7, #16]
 80070e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80070e6:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80070ea:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80070ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80070f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80070f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80070f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80070fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80070fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007102:	ee06 1a90 	vmov	s13, r1
 8007106:	ee07 2a10 	vmov	s14, r2
 800710a:	ee07 3a90 	vmov	s15, r3
}
 800710e:	eeb0 0a66 	vmov.f32	s0, s13
 8007112:	eef0 0a47 	vmov.f32	s1, s14
 8007116:	eeb0 1a67 	vmov.f32	s2, s15
 800711a:	3744      	adds	r7, #68	; 0x44
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <FusionVectorDotProduct>:
static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8007124:	b580      	push	{r7, lr}
 8007126:	b08a      	sub	sp, #40	; 0x28
 8007128:	af00      	add	r7, sp, #0
 800712a:	eeb0 5a40 	vmov.f32	s10, s0
 800712e:	eef0 5a60 	vmov.f32	s11, s1
 8007132:	eeb0 6a41 	vmov.f32	s12, s2
 8007136:	eef0 6a61 	vmov.f32	s13, s3
 800713a:	eeb0 7a42 	vmov.f32	s14, s4
 800713e:	eef0 7a62 	vmov.f32	s15, s5
 8007142:	ed87 5a03 	vstr	s10, [r7, #12]
 8007146:	edc7 5a04 	vstr	s11, [r7, #16]
 800714a:	ed87 6a05 	vstr	s12, [r7, #20]
 800714e:	edc7 6a00 	vstr	s13, [r7]
 8007152:	ed87 7a01 	vstr	s14, [r7, #4]
 8007156:	edc7 7a02 	vstr	s15, [r7, #8]
    return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 800715a:	ed97 5a00 	vldr	s10, [r7]
 800715e:	edd7 5a01 	vldr	s11, [r7, #4]
 8007162:	ed97 6a02 	vldr	s12, [r7, #8]
 8007166:	edd7 6a03 	vldr	s13, [r7, #12]
 800716a:	ed97 7a04 	vldr	s14, [r7, #16]
 800716e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007172:	eef0 1a45 	vmov.f32	s3, s10
 8007176:	eeb0 2a65 	vmov.f32	s4, s11
 800717a:	eef0 2a46 	vmov.f32	s5, s12
 800717e:	eeb0 0a66 	vmov.f32	s0, s13
 8007182:	eef0 0a47 	vmov.f32	s1, s14
 8007186:	eeb0 1a67 	vmov.f32	s2, s15
 800718a:	f7ff ff17 	bl	8006fbc <FusionVectorHadamardProduct>
 800718e:	eef0 6a40 	vmov.f32	s13, s0
 8007192:	eeb0 7a60 	vmov.f32	s14, s1
 8007196:	eef0 7a41 	vmov.f32	s15, s2
 800719a:	edc7 6a07 	vstr	s13, [r7, #28]
 800719e:	ed87 7a08 	vstr	s14, [r7, #32]
 80071a2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80071a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80071aa:	ed97 7a08 	vldr	s14, [r7, #32]
 80071ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80071b2:	eeb0 0a66 	vmov.f32	s0, s13
 80071b6:	eef0 0a47 	vmov.f32	s1, s14
 80071ba:	eeb0 1a67 	vmov.f32	s2, s15
 80071be:	f7ff fe99 	bl	8006ef4 <FusionVectorSum>
 80071c2:	eef0 7a40 	vmov.f32	s15, s0
}
 80071c6:	eeb0 0a67 	vmov.f32	s0, s15
 80071ca:	3728      	adds	r7, #40	; 0x28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b088      	sub	sp, #32
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	eef0 6a40 	vmov.f32	s13, s0
 80071da:	eeb0 7a60 	vmov.f32	s14, s1
 80071de:	eef0 7a41 	vmov.f32	s15, s2
 80071e2:	edc7 6a01 	vstr	s13, [r7, #4]
 80071e6:	ed87 7a02 	vstr	s14, [r7, #8]
 80071ea:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 80071ee:	ed97 5a01 	vldr	s10, [r7, #4]
 80071f2:	edd7 5a02 	vldr	s11, [r7, #8]
 80071f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071fa:	edd7 6a01 	vldr	s13, [r7, #4]
 80071fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8007202:	edd7 7a03 	vldr	s15, [r7, #12]
 8007206:	eef0 1a45 	vmov.f32	s3, s10
 800720a:	eeb0 2a65 	vmov.f32	s4, s11
 800720e:	eef0 2a46 	vmov.f32	s5, s12
 8007212:	eeb0 0a66 	vmov.f32	s0, s13
 8007216:	eef0 0a47 	vmov.f32	s1, s14
 800721a:	eeb0 1a67 	vmov.f32	s2, s15
 800721e:	f7ff fecd 	bl	8006fbc <FusionVectorHadamardProduct>
 8007222:	eef0 6a40 	vmov.f32	s13, s0
 8007226:	eeb0 7a60 	vmov.f32	s14, s1
 800722a:	eef0 7a41 	vmov.f32	s15, s2
 800722e:	edc7 6a05 	vstr	s13, [r7, #20]
 8007232:	ed87 7a06 	vstr	s14, [r7, #24]
 8007236:	edc7 7a07 	vstr	s15, [r7, #28]
 800723a:	edd7 6a05 	vldr	s13, [r7, #20]
 800723e:	ed97 7a06 	vldr	s14, [r7, #24]
 8007242:	edd7 7a07 	vldr	s15, [r7, #28]
 8007246:	eeb0 0a66 	vmov.f32	s0, s13
 800724a:	eef0 0a47 	vmov.f32	s1, s14
 800724e:	eeb0 1a67 	vmov.f32	s2, s15
 8007252:	f7ff fe4f 	bl	8006ef4 <FusionVectorSum>
 8007256:	eef0 7a40 	vmov.f32	s15, s0
}
 800725a:	eeb0 0a67 	vmov.f32	s0, s15
 800725e:	3720      	adds	r7, #32
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 8007264:	b580      	push	{r7, lr}
 8007266:	b08c      	sub	sp, #48	; 0x30
 8007268:	af00      	add	r7, sp, #0
 800726a:	eef0 6a40 	vmov.f32	s13, s0
 800726e:	eeb0 7a60 	vmov.f32	s14, s1
 8007272:	eef0 7a41 	vmov.f32	s15, s2
 8007276:	edc7 6a05 	vstr	s13, [r7, #20]
 800727a:	ed87 7a06 	vstr	s14, [r7, #24]
 800727e:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8007282:	edd7 6a05 	vldr	s13, [r7, #20]
 8007286:	ed97 7a06 	vldr	s14, [r7, #24]
 800728a:	edd7 7a07 	vldr	s15, [r7, #28]
 800728e:	eeb0 0a66 	vmov.f32	s0, s13
 8007292:	eef0 0a47 	vmov.f32	s1, s14
 8007296:	eeb0 1a67 	vmov.f32	s2, s15
 800729a:	f7ff ff99 	bl	80071d0 <FusionVectorMagnitudeSquared>
 800729e:	eef0 7a40 	vmov.f32	s15, s0
 80072a2:	eeb0 0a67 	vmov.f32	s0, s15
 80072a6:	f7ff fd77 	bl	8006d98 <FusionFastInverseSqrt>
 80072aa:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 80072ae:	edd7 6a05 	vldr	s13, [r7, #20]
 80072b2:	ed97 7a06 	vldr	s14, [r7, #24]
 80072b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80072ba:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 80072be:	eeb0 0a66 	vmov.f32	s0, s13
 80072c2:	eef0 0a47 	vmov.f32	s1, s14
 80072c6:	eeb0 1a67 	vmov.f32	s2, s15
 80072ca:	f7ff fe33 	bl	8006f34 <FusionVectorMultiplyScalar>
 80072ce:	eef0 6a40 	vmov.f32	s13, s0
 80072d2:	eeb0 7a60 	vmov.f32	s14, s1
 80072d6:	eef0 7a41 	vmov.f32	s15, s2
 80072da:	edc7 6a08 	vstr	s13, [r7, #32]
 80072de:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80072e2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80072e6:	6a39      	ldr	r1, [r7, #32]
 80072e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	ee06 1a90 	vmov	s13, r1
 80072f0:	ee07 2a10 	vmov	s14, r2
 80072f4:	ee07 3a90 	vmov	s15, r3
}
 80072f8:	eeb0 0a66 	vmov.f32	s0, s13
 80072fc:	eef0 0a47 	vmov.f32	s1, s14
 8007300:	eeb0 1a67 	vmov.f32	s2, s15
 8007304:	3730      	adds	r7, #48	; 0x30
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <FusionQuaternionAdd>:
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 800730a:	b490      	push	{r4, r7}
 800730c:	b094      	sub	sp, #80	; 0x50
 800730e:	af00      	add	r7, sp, #0
 8007310:	eeb0 4a40 	vmov.f32	s8, s0
 8007314:	eef0 4a60 	vmov.f32	s9, s1
 8007318:	eeb0 5a41 	vmov.f32	s10, s2
 800731c:	eef0 5a61 	vmov.f32	s11, s3
 8007320:	eeb0 6a42 	vmov.f32	s12, s4
 8007324:	eef0 6a62 	vmov.f32	s13, s5
 8007328:	eeb0 7a43 	vmov.f32	s14, s6
 800732c:	eef0 7a63 	vmov.f32	s15, s7
 8007330:	ed87 4a08 	vstr	s8, [r7, #32]
 8007334:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8007338:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 800733c:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8007340:	ed87 6a04 	vstr	s12, [r7, #16]
 8007344:	edc7 6a05 	vstr	s13, [r7, #20]
 8007348:	ed87 7a06 	vstr	s14, [r7, #24]
 800734c:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = quaternionA.element.w + quaternionB.element.w,
 8007350:	ed97 7a08 	vldr	s14, [r7, #32]
 8007354:	edd7 7a04 	vldr	s15, [r7, #16]
 8007358:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800735c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 8007360:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007364:	edd7 7a05 	vldr	s15, [r7, #20]
 8007368:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800736c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 8007370:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8007374:	edd7 7a06 	vldr	s15, [r7, #24]
 8007378:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800737c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 8007380:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007384:	edd7 7a07 	vldr	s15, [r7, #28]
 8007388:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800738c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8007390:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8007394:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007398:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800739a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800739e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80073a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073a6:	ee06 0a10 	vmov	s12, r0
 80073aa:	ee06 1a90 	vmov	s13, r1
 80073ae:	ee07 2a10 	vmov	s14, r2
 80073b2:	ee07 3a90 	vmov	s15, r3
}
 80073b6:	eeb0 0a46 	vmov.f32	s0, s12
 80073ba:	eef0 0a66 	vmov.f32	s1, s13
 80073be:	eeb0 1a47 	vmov.f32	s2, s14
 80073c2:	eef0 1a67 	vmov.f32	s3, s15
 80073c6:	3750      	adds	r7, #80	; 0x50
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bc90      	pop	{r4, r7}
 80073cc:	4770      	bx	lr

080073ce <FusionQuaternionMultiply>:
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 80073ce:	b490      	push	{r4, r7}
 80073d0:	b094      	sub	sp, #80	; 0x50
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	eeb0 4a40 	vmov.f32	s8, s0
 80073d8:	eef0 4a60 	vmov.f32	s9, s1
 80073dc:	eeb0 5a41 	vmov.f32	s10, s2
 80073e0:	eef0 5a61 	vmov.f32	s11, s3
 80073e4:	eeb0 6a42 	vmov.f32	s12, s4
 80073e8:	eef0 6a62 	vmov.f32	s13, s5
 80073ec:	eeb0 7a43 	vmov.f32	s14, s6
 80073f0:	eef0 7a63 	vmov.f32	s15, s7
 80073f4:	ed87 4a08 	vstr	s8, [r7, #32]
 80073f8:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 80073fc:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8007400:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8007404:	ed87 6a04 	vstr	s12, [r7, #16]
 8007408:	edc7 6a05 	vstr	s13, [r7, #20]
 800740c:	ed87 7a06 	vstr	s14, [r7, #24]
 8007410:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 8007414:	ed97 7a08 	vldr	s14, [r7, #32]
 8007418:	edd7 7a04 	vldr	s15, [r7, #16]
 800741c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007420:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007424:	edd7 7a05 	vldr	s15, [r7, #20]
 8007428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800742c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007430:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8007434:	edd7 7a06 	vldr	s15, [r7, #24]
 8007438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800743c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007440:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8007444:	edd7 7a07 	vldr	s15, [r7, #28]
 8007448:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800744c:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007450:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 8007454:	ed97 7a08 	vldr	s14, [r7, #32]
 8007458:	edd7 7a05 	vldr	s15, [r7, #20]
 800745c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007460:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007464:	edd7 7a04 	vldr	s15, [r7, #16]
 8007468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800746c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007470:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8007474:	edd7 7a07 	vldr	s15, [r7, #28]
 8007478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800747c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007480:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8007484:	edd7 7a06 	vldr	s15, [r7, #24]
 8007488:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800748c:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007490:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 8007494:	ed97 7a08 	vldr	s14, [r7, #32]
 8007498:	edd7 7a06 	vldr	s15, [r7, #24]
 800749c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80074a0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80074a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80074a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80074ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80074b0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80074b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80074b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80074bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80074c0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80074c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80074c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80074cc:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80074d0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 80074d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80074d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80074dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80074e0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80074e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80074e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80074ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80074f0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80074f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80074f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80074fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007500:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8007504:	edd7 7a04 	vldr	s15, [r7, #16]
 8007508:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800750c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007510:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8007514:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8007518:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800751c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800751e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007522:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007524:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800752a:	ee06 0a10 	vmov	s12, r0
 800752e:	ee06 1a90 	vmov	s13, r1
 8007532:	ee07 2a10 	vmov	s14, r2
 8007536:	ee07 3a90 	vmov	s15, r3
}
 800753a:	eeb0 0a46 	vmov.f32	s0, s12
 800753e:	eef0 0a66 	vmov.f32	s1, s13
 8007542:	eeb0 1a47 	vmov.f32	s2, s14
 8007546:	eef0 1a67 	vmov.f32	s3, s15
 800754a:	3750      	adds	r7, #80	; 0x50
 800754c:	46bd      	mov	sp, r7
 800754e:	bc90      	pop	{r4, r7}
 8007550:	4770      	bx	lr

08007552 <FusionQuaternionMultiplyVector>:
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 8007552:	b490      	push	{r4, r7}
 8007554:	b094      	sub	sp, #80	; 0x50
 8007556:	af00      	add	r7, sp, #0
 8007558:	eef0 4a40 	vmov.f32	s9, s0
 800755c:	eeb0 5a60 	vmov.f32	s10, s1
 8007560:	eef0 5a41 	vmov.f32	s11, s2
 8007564:	eeb0 6a61 	vmov.f32	s12, s3
 8007568:	eef0 6a42 	vmov.f32	s13, s4
 800756c:	eeb0 7a62 	vmov.f32	s14, s5
 8007570:	eef0 7a43 	vmov.f32	s15, s6
 8007574:	edc7 4a08 	vstr	s9, [r7, #32]
 8007578:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 800757c:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 8007580:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 8007584:	edc7 6a05 	vstr	s13, [r7, #20]
 8007588:	ed87 7a06 	vstr	s14, [r7, #24]
 800758c:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 8007590:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007594:	eeb1 7a67 	vneg.f32	s14, s15
 8007598:	edd7 7a05 	vldr	s15, [r7, #20]
 800759c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80075a0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80075a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80075a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80075ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80075b0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80075b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80075b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80075bc:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80075c0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 80075c4:	ed97 7a08 	vldr	s14, [r7, #32]
 80075c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80075cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80075d0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80075d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80075d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80075dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80075e0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80075e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80075e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80075ec:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80075f0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 80075f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80075f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80075fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007600:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007604:	edd7 7a07 	vldr	s15, [r7, #28]
 8007608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800760c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007610:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8007614:	edd7 7a05 	vldr	s15, [r7, #20]
 8007618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800761c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007620:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 8007624:	ed97 7a08 	vldr	s14, [r7, #32]
 8007628:	edd7 7a07 	vldr	s15, [r7, #28]
 800762c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007630:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007634:	edd7 7a06 	vldr	s15, [r7, #24]
 8007638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800763c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007640:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8007644:	edd7 7a05 	vldr	s15, [r7, #20]
 8007648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800764c:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007650:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8007654:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8007658:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800765c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800765e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007662:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007664:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800766a:	ee06 0a10 	vmov	s12, r0
 800766e:	ee06 1a90 	vmov	s13, r1
 8007672:	ee07 2a10 	vmov	s14, r2
 8007676:	ee07 3a90 	vmov	s15, r3
}
 800767a:	eeb0 0a46 	vmov.f32	s0, s12
 800767e:	eef0 0a66 	vmov.f32	s1, s13
 8007682:	eeb0 1a47 	vmov.f32	s2, s14
 8007686:	eef0 1a67 	vmov.f32	s3, s15
 800768a:	3750      	adds	r7, #80	; 0x50
 800768c:	46bd      	mov	sp, r7
 800768e:	bc90      	pop	{r4, r7}
 8007690:	4770      	bx	lr

08007692 <FusionQuaternionNormalise>:
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 8007692:	b590      	push	{r4, r7, lr}
 8007694:	b093      	sub	sp, #76	; 0x4c
 8007696:	af00      	add	r7, sp, #0
 8007698:	eeb0 6a40 	vmov.f32	s12, s0
 800769c:	eef0 6a60 	vmov.f32	s13, s1
 80076a0:	eeb0 7a41 	vmov.f32	s14, s2
 80076a4:	eef0 7a61 	vmov.f32	s15, s3
 80076a8:	ed87 6a04 	vstr	s12, [r7, #16]
 80076ac:	edc7 6a05 	vstr	s13, [r7, #20]
 80076b0:	ed87 7a06 	vstr	s14, [r7, #24]
 80076b4:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 80076b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80076bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80076c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80076c4:	edd7 6a05 	vldr	s13, [r7, #20]
 80076c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80076cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80076d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80076d4:	edd7 6a06 	vldr	s13, [r7, #24]
 80076d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80076dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80076e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80076e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80076e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80076ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80076f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076f4:	eeb0 0a67 	vmov.f32	s0, s15
 80076f8:	f7ff fb4e 	bl	8006d98 <FusionFastInverseSqrt>
 80076fc:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
            .w = Q.w * magnitudeReciprocal,
 8007700:	ed97 7a04 	vldr	s14, [r7, #16]
 8007704:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007708:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800770c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 8007710:	ed97 7a05 	vldr	s14, [r7, #20]
 8007714:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007718:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800771c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 8007720:	ed97 7a06 	vldr	s14, [r7, #24]
 8007724:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007728:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800772c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 8007730:	ed97 7a07 	vldr	s14, [r7, #28]
 8007734:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007738:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800773c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8007740:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8007744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007748:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800774a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800774e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007750:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007752:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007756:	ee06 0a10 	vmov	s12, r0
 800775a:	ee06 1a90 	vmov	s13, r1
 800775e:	ee07 2a10 	vmov	s14, r2
 8007762:	ee07 3a90 	vmov	s15, r3
}
 8007766:	eeb0 0a46 	vmov.f32	s0, s12
 800776a:	eef0 0a66 	vmov.f32	s1, s13
 800776e:	eeb0 1a47 	vmov.f32	s2, s14
 8007772:	eef0 1a67 	vmov.f32	s3, s15
 8007776:	374c      	adds	r7, #76	; 0x4c
 8007778:	46bd      	mov	sp, r7
 800777a:	bd90      	pop	{r4, r7, pc}

0800777c <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 800777c:	b5b0      	push	{r4, r5, r7, lr}
 800777e:	b088      	sub	sp, #32
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 8007784:	4b0b      	ldr	r3, [pc, #44]	; (80077b4 <FusionAhrsInitialise+0x38>)
 8007786:	f107 0408 	add.w	r4, r7, #8
 800778a:	461d      	mov	r5, r3
 800778c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800778e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007790:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007794:	e884 0003 	stmia.w	r4, {r0, r1}
            .gyroscopeRange = 0.0f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .recoveryTriggerPeriod = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 8007798:	f107 0308 	add.w	r3, r7, #8
 800779c:	4619      	mov	r1, r3
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f86e 	bl	8007880 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f807 	bl	80077b8 <FusionAhrsReset>
}
 80077aa:	bf00      	nop
 80077ac:	3720      	adds	r7, #32
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bdb0      	pop	{r4, r5, r7, pc}
 80077b2:	bf00      	nop
 80077b4:	0801be68 	.word	0x0801be68

080077b8 <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 80077b8:	b480      	push	{r7}
 80077ba:	b091      	sub	sp, #68	; 0x44
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80077c6:	619a      	str	r2, [r3, #24]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f04f 0200 	mov.w	r2, #0
 80077ce:	61da      	str	r2, [r3, #28]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f04f 0200 	mov.w	r2, #0
 80077d6:	621a      	str	r2, [r3, #32]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f04f 0200 	mov.w	r2, #0
 80077de:	625a      	str	r2, [r3, #36]	; 0x24
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f04f 0200 	mov.w	r2, #0
 80077e6:	629a      	str	r2, [r3, #40]	; 0x28
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f04f 0200 	mov.w	r2, #0
 80077ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f04f 0200 	mov.w	r2, #0
 80077f6:	631a      	str	r2, [r3, #48]	; 0x30
    ahrs->initialising = true;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ahrs->rampedGain = INITIAL_GAIN;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a1e      	ldr	r2, [pc, #120]	; (800787c <FusionAhrsReset+0xc4>)
 8007804:	639a      	str	r2, [r3, #56]	; 0x38
    ahrs->angularRateRecovery = false;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f04f 0200 	mov.w	r2, #0
 8007814:	645a      	str	r2, [r3, #68]	; 0x44
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f04f 0200 	mov.w	r2, #0
 800781c:	649a      	str	r2, [r3, #72]	; 0x48
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f04f 0200 	mov.w	r2, #0
 8007824:	64da      	str	r2, [r3, #76]	; 0x4c
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f04f 0200 	mov.w	r2, #0
 800782c:	651a      	str	r2, [r3, #80]	; 0x50
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f04f 0200 	mov.w	r2, #0
 8007834:	655a      	str	r2, [r3, #84]	; 0x54
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f04f 0200 	mov.w	r2, #0
 800783c:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerometerIgnored = false;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->accelerationRecoveryTrigger = 0;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	695b      	ldr	r3, [r3, #20]
 8007850:	461a      	mov	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magnetometerIgnored = false;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    ahrs->magneticRecoveryTrigger = 0;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	66da      	str	r2, [r3, #108]	; 0x6c
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	461a      	mov	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800786e:	bf00      	nop
 8007870:	3744      	adds	r7, #68	; 0x44
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	41200000 	.word	0x41200000

08007880 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	781a      	ldrb	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	685a      	ldr	r2, [r3, #4]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	605a      	str	r2, [r3, #4]
    ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->gyroscopeRange;
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	edd3 7a02 	vldr	s15, [r3, #8]
 80078a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80078a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078a8:	d007      	beq.n	80078ba <FusionAhrsSetSettings+0x3a>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80078b0:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80079e4 <FusionAhrsSetSettings+0x164>
 80078b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80078b8:	e001      	b.n	80078be <FusionAhrsSetSettings+0x3e>
 80078ba:	eddf 7a4b 	vldr	s15, [pc, #300]	; 80079e8 <FusionAhrsSetSettings+0x168>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80078ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80078ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078d2:	d01b      	beq.n	800790c <FusionAhrsSetSettings+0x8c>
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80078da:	eeb0 0a67 	vmov.f32	s0, s15
 80078de:	f7ff fa47 	bl	8006d70 <FusionDegreesToRadians>
 80078e2:	eef0 7a40 	vmov.f32	s15, s0
 80078e6:	eeb0 0a67 	vmov.f32	s0, s15
 80078ea:	f011 ff63 	bl	80197b4 <sinf>
 80078ee:	eef0 7a40 	vmov.f32	s15, s0
 80078f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80078f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80078fa:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80078fe:	eeb0 0a67 	vmov.f32	s0, s15
 8007902:	f011 feb3 	bl	801966c <powf>
 8007906:	eef0 7a40 	vmov.f32	s15, s0
 800790a:	e001      	b.n	8007910 <FusionAhrsSetSettings+0x90>
 800790c:	eddf 7a36 	vldr	s15, [pc, #216]	; 80079e8 <FusionAhrsSetSettings+0x168>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	edd3 7a04 	vldr	s15, [r3, #16]
 800791c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007924:	d01b      	beq.n	800795e <FusionAhrsSetSettings+0xde>
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	edd3 7a04 	vldr	s15, [r3, #16]
 800792c:	eeb0 0a67 	vmov.f32	s0, s15
 8007930:	f7ff fa1e 	bl	8006d70 <FusionDegreesToRadians>
 8007934:	eef0 7a40 	vmov.f32	s15, s0
 8007938:	eeb0 0a67 	vmov.f32	s0, s15
 800793c:	f011 ff3a 	bl	80197b4 <sinf>
 8007940:	eef0 7a40 	vmov.f32	s15, s0
 8007944:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800794c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8007950:	eeb0 0a67 	vmov.f32	s0, s15
 8007954:	f011 fe8a 	bl	801966c <powf>
 8007958:	eef0 7a40 	vmov.f32	s15, s0
 800795c:	e001      	b.n	8007962 <FusionAhrsSetSettings+0xe2>
 800795e:	eddf 7a22 	vldr	s15, [pc, #136]	; 80079e8 <FusionAhrsSetSettings+0x168>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	edc3 7a04 	vstr	s15, [r3, #16]
    ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	695a      	ldr	r2, [r3, #20]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	615a      	str	r2, [r3, #20]
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	695b      	ldr	r3, [r3, #20]
 8007974:	461a      	mov	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	461a      	mov	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	671a      	str	r2, [r3, #112]	; 0x70
    if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable acceleration and magnetic rejection features if gain is zero
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	edd3 7a01 	vldr	s15, [r3, #4]
 800798a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800798e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007992:	d003      	beq.n	800799c <FusionAhrsSetSettings+0x11c>
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d105      	bne.n	80079a8 <FusionAhrsSetSettings+0x128>
        ahrs->settings.accelerationRejection = FLT_MAX;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a13      	ldr	r2, [pc, #76]	; (80079ec <FusionAhrsSetSettings+0x16c>)
 80079a0:	60da      	str	r2, [r3, #12]
        ahrs->settings.magneticRejection = FLT_MAX;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a11      	ldr	r2, [pc, #68]	; (80079ec <FusionAhrsSetSettings+0x16c>)
 80079a6:	611a      	str	r2, [r3, #16]
    }
    if (ahrs->initialising == false) {
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079ae:	f083 0301 	eor.w	r3, r3, #1
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d003      	beq.n	80079c0 <FusionAhrsSetSettings+0x140>
        ahrs->rampedGain = ahrs->settings.gain;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	639a      	str	r2, [r3, #56]	; 0x38
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80079c6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80079ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80079ce:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80079d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 80079dc:	bf00      	nop
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	3f7ae148 	.word	0x3f7ae148
 80079e8:	7f7fffff 	.word	0x7f7fffff
 80079ec:	7f7fffff 	.word	0x7f7fffff

080079f0 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 80079f0:	b590      	push	{r4, r7, lr}
 80079f2:	b0bf      	sub	sp, #252	; 0xfc
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80079f8:	eeb0 5a61 	vmov.f32	s10, s3
 80079fc:	eef0 5a42 	vmov.f32	s11, s4
 8007a00:	eeb0 6a62 	vmov.f32	s12, s5
 8007a04:	eef0 6a43 	vmov.f32	s13, s6
 8007a08:	eeb0 7a63 	vmov.f32	s14, s7
 8007a0c:	eef0 7a44 	vmov.f32	s15, s8
 8007a10:	edc7 4a01 	vstr	s9, [r7, #4]
 8007a14:	ed87 0a08 	vstr	s0, [r7, #32]
 8007a18:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 8007a1c:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 8007a20:	ed87 5a05 	vstr	s10, [r7, #20]
 8007a24:	edc7 5a06 	vstr	s11, [r7, #24]
 8007a28:	ed87 6a07 	vstr	s12, [r7, #28]
 8007a2c:	edc7 6a02 	vstr	s13, [r7, #8]
 8007a30:	ed87 7a03 	vstr	s14, [r7, #12]
 8007a34:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 8007a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3a:	3328      	adds	r3, #40	; 0x28
 8007a3c:	f107 0214 	add.w	r2, r7, #20
 8007a40:	ca07      	ldmia	r2, {r0, r1, r2}
 8007a42:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Reinitialise if gyroscope range exceeded
    if ((fabs(gyroscope.axis.x) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.y) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.z) > ahrs->settings.gyroscopeRange)) {
 8007a46:	edd7 7a08 	vldr	s15, [r7, #32]
 8007a4a:	eeb0 7ae7 	vabs.f32	s14, s15
 8007a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a50:	edd3 7a02 	vldr	s15, [r3, #8]
 8007a54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a5c:	dc17      	bgt.n	8007a8e <FusionAhrsUpdate+0x9e>
 8007a5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007a62:	eeb0 7ae7 	vabs.f32	s14, s15
 8007a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a68:	edd3 7a02 	vldr	s15, [r3, #8]
 8007a6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a74:	dc0b      	bgt.n	8007a8e <FusionAhrsUpdate+0x9e>
 8007a76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007a7a:	eeb0 7ae7 	vabs.f32	s14, s15
 8007a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a80:	edd3 7a02 	vldr	s15, [r3, #8]
 8007a84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a8c:	dd15      	ble.n	8007aba <FusionAhrsUpdate+0xca>
        const FusionQuaternion quaternion = ahrs->quaternion;
 8007a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a90:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8007a94:	3318      	adds	r3, #24
 8007a96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007a98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        FusionAhrsReset(ahrs);
 8007a9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a9e:	f7ff fe8b 	bl	80077b8 <FusionAhrsReset>
        ahrs->quaternion = quaternion;
 8007aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa4:	f103 0418 	add.w	r4, r3, #24
 8007aa8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007aac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007aae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        ahrs->angularRateRecovery = true;
 8007ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 8007aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d02d      	beq.n	8007b20 <FusionAhrsUpdate+0x130>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 8007ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8007aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007acc:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8007ad0:	edd7 7a01 	vldr	s15, [r7, #4]
 8007ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007ad8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ade:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 8007ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8007ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aea:	edd3 7a01 	vldr	s15, [r3, #4]
 8007aee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af6:	d407      	bmi.n	8007b08 <FusionAhrsUpdate+0x118>
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	edd3 7a01 	vldr	s15, [r3, #4]
 8007afe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b06:	d10b      	bne.n	8007b20 <FusionAhrsUpdate+0x130>
            ahrs->rampedGain = ahrs->settings.gain;
 8007b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0e:	639a      	str	r2, [r3, #56]	; 0x38
            ahrs->initialising = false;
 8007b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            ahrs->angularRateRecovery = false;
 8007b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 8007b20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b22:	f000 faf4 	bl	800810e <HalfGravity>
 8007b26:	eef0 6a40 	vmov.f32	s13, s0
 8007b2a:	eeb0 7a60 	vmov.f32	s14, s1
 8007b2e:	eef0 7a41 	vmov.f32	s15, s2
 8007b32:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 8007b36:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 8007b3a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8007b3e:	f04f 0300 	mov.w	r3, #0
 8007b42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b46:	f04f 0300 	mov.w	r3, #0
 8007b4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b4e:	f04f 0300 	mov.w	r3, #0
 8007b52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 8007b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    if (FusionVectorIsZero(accelerometer) == false) {
 8007b5e:	edd7 6a05 	vldr	s13, [r7, #20]
 8007b62:	ed97 7a06 	vldr	s14, [r7, #24]
 8007b66:	edd7 7a07 	vldr	s15, [r7, #28]
 8007b6a:	eeb0 0a66 	vmov.f32	s0, s13
 8007b6e:	eef0 0a47 	vmov.f32	s1, s14
 8007b72:	eeb0 1a67 	vmov.f32	s2, s15
 8007b76:	f7ff f93f 	bl	8006df8 <FusionVectorIsZero>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	f083 0301 	eor.w	r3, r3, #1
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 809c 	beq.w	8007cc0 <FusionAhrsUpdate+0x2d0>

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = Feedback(FusionVectorNormalise(accelerometer), halfGravity);
 8007b88:	edd7 6a05 	vldr	s13, [r7, #20]
 8007b8c:	ed97 7a06 	vldr	s14, [r7, #24]
 8007b90:	edd7 7a07 	vldr	s15, [r7, #28]
 8007b94:	eeb0 0a66 	vmov.f32	s0, s13
 8007b98:	eef0 0a47 	vmov.f32	s1, s14
 8007b9c:	eeb0 1a67 	vmov.f32	s2, s15
 8007ba0:	f7ff fb60 	bl	8007264 <FusionVectorNormalise>
 8007ba4:	eef0 6a40 	vmov.f32	s13, s0
 8007ba8:	eeb0 7a60 	vmov.f32	s14, s1
 8007bac:	eef0 7a41 	vmov.f32	s15, s2
 8007bb0:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 8007bb4:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 8007bb8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 8007bbc:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8007bbe:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 8007bc2:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8007bc6:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 8007bca:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 8007bce:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8007bd2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8007bd6:	eef0 1a45 	vmov.f32	s3, s10
 8007bda:	eeb0 2a65 	vmov.f32	s4, s11
 8007bde:	eef0 2a46 	vmov.f32	s5, s12
 8007be2:	eeb0 0a66 	vmov.f32	s0, s13
 8007be6:	eef0 0a47 	vmov.f32	s1, s14
 8007bea:	eeb0 1a67 	vmov.f32	s2, s15
 8007bee:	f000 fc55 	bl	800849c <Feedback>
 8007bf2:	eef0 6a40 	vmov.f32	s13, s0
 8007bf6:	eeb0 7a60 	vmov.f32	s14, s1
 8007bfa:	eef0 7a41 	vmov.f32	s15, s2
 8007bfe:	edc4 6a11 	vstr	s13, [r4, #68]	; 0x44
 8007c02:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 8007c06:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c

        // Don't ignore accelerometer if acceleration error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection))) {
 8007c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d118      	bne.n	8007c46 <FusionAhrsUpdate+0x256>
 8007c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c16:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8007c1a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8007c1e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8007c22:	eeb0 0a66 	vmov.f32	s0, s13
 8007c26:	eef0 0a47 	vmov.f32	s1, s14
 8007c2a:	eeb0 1a67 	vmov.f32	s2, s15
 8007c2e:	f7ff facf 	bl	80071d0 <FusionVectorMagnitudeSquared>
 8007c32:	eeb0 7a40 	vmov.f32	s14, s0
 8007c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c38:	edd3 7a03 	vldr	s15, [r3, #12]
 8007c3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c44:	d80a      	bhi.n	8007c5c <FusionAhrsUpdate+0x26c>
            ahrs->accelerometerIgnored = false;
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            ahrs->accelerationRecoveryTrigger -= 9;
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c52:	f1a3 0209 	sub.w	r2, r3, #9
 8007c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c58:	661a      	str	r2, [r3, #96]	; 0x60
 8007c5a:	e004      	b.n	8007c66 <FusionAhrsUpdate+0x276>
        } else {
            ahrs->accelerationRecoveryTrigger += 1;
 8007c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c64:	661a      	str	r2, [r3, #96]	; 0x60
        }

        // Don't ignore accelerometer during acceleration recovery
        if (ahrs->accelerationRecoveryTrigger > ahrs->accelerationRecoveryTimeout) {
 8007c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	dd07      	ble.n	8007c82 <FusionAhrsUpdate+0x292>
            ahrs->accelerationRecoveryTimeout = 0;
 8007c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c74:	2200      	movs	r2, #0
 8007c76:	665a      	str	r2, [r3, #100]	; 0x64
            ahrs->accelerometerIgnored = false;
 8007c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8007c80:	e004      	b.n	8007c8c <FusionAhrsUpdate+0x29c>
        } else {
            ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8007c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	461a      	mov	r2, r3
 8007c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8a:	665a      	str	r2, [r3, #100]	; 0x64
        }
        ahrs->accelerationRecoveryTrigger = Clamp(ahrs->accelerationRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 8007c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8007c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	461a      	mov	r2, r3
 8007c96:	2100      	movs	r1, #0
 8007c98:	f000 fcb5 	bl	8008606 <Clamp>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca0:	661a      	str	r2, [r3, #96]	; 0x60

        // Apply accelerometer feedback
        if (ahrs->accelerometerIgnored == false) {
 8007ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007ca8:	f083 0301 	eor.w	r3, r3, #1
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d006      	beq.n	8007cc0 <FusionAhrsUpdate+0x2d0>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 8007cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cb4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007cb8:	3244      	adds	r2, #68	; 0x44
 8007cba:	ca07      	ldmia	r2, {r0, r1, r2}
 8007cbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 8007cc0:	f04f 0300 	mov.w	r3, #0
 8007cc4:	673b      	str	r3, [r7, #112]	; 0x70
 8007cc6:	f04f 0300 	mov.w	r3, #0
 8007cca:	677b      	str	r3, [r7, #116]	; 0x74
 8007ccc:	f04f 0300 	mov.w	r3, #0
 8007cd0:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = true;
 8007cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    if (FusionVectorIsZero(magnetometer) == false) {
 8007cda:	edd7 6a02 	vldr	s13, [r7, #8]
 8007cde:	ed97 7a03 	vldr	s14, [r7, #12]
 8007ce2:	edd7 7a04 	vldr	s15, [r7, #16]
 8007ce6:	eeb0 0a66 	vmov.f32	s0, s13
 8007cea:	eef0 0a47 	vmov.f32	s1, s14
 8007cee:	eeb0 1a67 	vmov.f32	s2, s15
 8007cf2:	f7ff f881 	bl	8006df8 <FusionVectorIsZero>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	f083 0301 	eor.w	r3, r3, #1
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f000 80d1 	beq.w	8007ea6 <FusionAhrsUpdate+0x4b6>

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 8007d04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d06:	f000 fabf 	bl	8008288 <HalfMagnetic>
 8007d0a:	eef0 6a40 	vmov.f32	s13, s0
 8007d0e:	eeb0 7a60 	vmov.f32	s14, s1
 8007d12:	eef0 7a41 	vmov.f32	s15, s2
 8007d16:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 8007d1a:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 8007d1e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = Feedback(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 8007d22:	ed97 5a02 	vldr	s10, [r7, #8]
 8007d26:	edd7 5a03 	vldr	s11, [r7, #12]
 8007d2a:	ed97 6a04 	vldr	s12, [r7, #16]
 8007d2e:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8007d32:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8007d36:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8007d3a:	eef0 1a45 	vmov.f32	s3, s10
 8007d3e:	eeb0 2a65 	vmov.f32	s4, s11
 8007d42:	eef0 2a46 	vmov.f32	s5, s12
 8007d46:	eeb0 0a66 	vmov.f32	s0, s13
 8007d4a:	eef0 0a47 	vmov.f32	s1, s14
 8007d4e:	eeb0 1a67 	vmov.f32	s2, s15
 8007d52:	f7ff f981 	bl	8007058 <FusionVectorCrossProduct>
 8007d56:	eef0 6a40 	vmov.f32	s13, s0
 8007d5a:	eeb0 7a60 	vmov.f32	s14, s1
 8007d5e:	eef0 7a41 	vmov.f32	s15, s2
 8007d62:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 8007d66:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 8007d6a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 8007d6e:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8007d72:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8007d76:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8007d7a:	eeb0 0a66 	vmov.f32	s0, s13
 8007d7e:	eef0 0a47 	vmov.f32	s1, s14
 8007d82:	eeb0 1a67 	vmov.f32	s2, s15
 8007d86:	f7ff fa6d 	bl	8007264 <FusionVectorNormalise>
 8007d8a:	eef0 6a40 	vmov.f32	s13, s0
 8007d8e:	eeb0 7a60 	vmov.f32	s14, s1
 8007d92:	eef0 7a41 	vmov.f32	s15, s2
 8007d96:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 8007d9a:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 8007d9e:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 8007da2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8007da4:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 8007da8:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8007dac:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 8007db0:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8007db4:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8007db8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8007dbc:	eef0 1a45 	vmov.f32	s3, s10
 8007dc0:	eeb0 2a65 	vmov.f32	s4, s11
 8007dc4:	eef0 2a46 	vmov.f32	s5, s12
 8007dc8:	eeb0 0a66 	vmov.f32	s0, s13
 8007dcc:	eef0 0a47 	vmov.f32	s1, s14
 8007dd0:	eeb0 1a67 	vmov.f32	s2, s15
 8007dd4:	f000 fb62 	bl	800849c <Feedback>
 8007dd8:	eef0 6a40 	vmov.f32	s13, s0
 8007ddc:	eeb0 7a60 	vmov.f32	s14, s1
 8007de0:	eef0 7a41 	vmov.f32	s15, s2
 8007de4:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
 8007de8:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 8007dec:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58

        // Don't ignore magnetometer if magnetic error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection))) {
 8007df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d118      	bne.n	8007e2c <FusionAhrsUpdate+0x43c>
 8007dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfc:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8007e00:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8007e04:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007e08:	eeb0 0a66 	vmov.f32	s0, s13
 8007e0c:	eef0 0a47 	vmov.f32	s1, s14
 8007e10:	eeb0 1a67 	vmov.f32	s2, s15
 8007e14:	f7ff f9dc 	bl	80071d0 <FusionVectorMagnitudeSquared>
 8007e18:	eeb0 7a40 	vmov.f32	s14, s0
 8007e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1e:	edd3 7a04 	vldr	s15, [r3, #16]
 8007e22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e2a:	d80a      	bhi.n	8007e42 <FusionAhrsUpdate+0x452>
            ahrs->magnetometerIgnored = false;
 8007e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            ahrs->magneticRecoveryTrigger -= 9;
 8007e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e38:	f1a3 0209 	sub.w	r2, r3, #9
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3e:	66da      	str	r2, [r3, #108]	; 0x6c
 8007e40:	e004      	b.n	8007e4c <FusionAhrsUpdate+0x45c>
        } else {
            ahrs->magneticRecoveryTrigger += 1;
 8007e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e46:	1c5a      	adds	r2, r3, #1
 8007e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4a:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        // Don't ignore magnetometer during magnetic recovery
        if (ahrs->magneticRecoveryTrigger > ahrs->magneticRecoveryTimeout) {
 8007e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e54:	429a      	cmp	r2, r3
 8007e56:	dd07      	ble.n	8007e68 <FusionAhrsUpdate+0x478>
            ahrs->magneticRecoveryTimeout = 0;
 8007e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	671a      	str	r2, [r3, #112]	; 0x70
            ahrs->magnetometerIgnored = false;
 8007e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8007e66:	e004      	b.n	8007e72 <FusionAhrsUpdate+0x482>
        } else {
            ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e70:	671a      	str	r2, [r3, #112]	; 0x70
        }
        ahrs->magneticRecoveryTrigger = Clamp(ahrs->magneticRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 8007e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e74:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	f000 fbc2 	bl	8008606 <Clamp>
 8007e82:	4602      	mov	r2, r0
 8007e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e86:	66da      	str	r2, [r3, #108]	; 0x6c

        // Apply magnetometer feedback
        if (ahrs->magnetometerIgnored == false) {
 8007e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8007e8e:	f083 0301 	eor.w	r3, r3, #1
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d006      	beq.n	8007ea6 <FusionAhrsUpdate+0x4b6>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 8007e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007e9e:	3250      	adds	r2, #80	; 0x50
 8007ea0:	ca07      	ldmia	r2, {r0, r1, r2}
 8007ea2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 8007ea6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8007eaa:	f7fe ff61 	bl	8006d70 <FusionDegreesToRadians>
 8007eae:	eeb0 6a40 	vmov.f32	s12, s0
 8007eb2:	edd7 6a08 	vldr	s13, [r7, #32]
 8007eb6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007eba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007ebe:	eef0 1a46 	vmov.f32	s3, s12
 8007ec2:	eeb0 0a66 	vmov.f32	s0, s13
 8007ec6:	eef0 0a47 	vmov.f32	s1, s14
 8007eca:	eeb0 1a67 	vmov.f32	s2, s15
 8007ece:	f7ff f831 	bl	8006f34 <FusionVectorMultiplyScalar>
 8007ed2:	eef0 6a40 	vmov.f32	s13, s0
 8007ed6:	eeb0 7a60 	vmov.f32	s14, s1
 8007eda:	eef0 7a41 	vmov.f32	s15, s2
 8007ede:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 8007ee2:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 8007ee6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 8007eea:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 8007eee:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8007ef2:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 8007ef6:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8007efa:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8007efe:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007f02:	eef0 1a45 	vmov.f32	s3, s10
 8007f06:	eeb0 2a65 	vmov.f32	s4, s11
 8007f0a:	eef0 2a46 	vmov.f32	s5, s12
 8007f0e:	eeb0 0a66 	vmov.f32	s0, s13
 8007f12:	eef0 0a47 	vmov.f32	s1, s14
 8007f16:	eeb0 1a67 	vmov.f32	s2, s15
 8007f1a:	f7fe ff9d 	bl	8006e58 <FusionVectorAdd>
 8007f1e:	eef0 6a40 	vmov.f32	s13, s0
 8007f22:	eeb0 7a60 	vmov.f32	s14, s1
 8007f26:	eef0 7a41 	vmov.f32	s15, s2
 8007f2a:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 8007f2e:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 8007f32:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 8007f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f38:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8007f3c:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 8007f40:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8007f44:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8007f48:	eef0 1a46 	vmov.f32	s3, s12
 8007f4c:	eeb0 0a66 	vmov.f32	s0, s13
 8007f50:	eef0 0a47 	vmov.f32	s1, s14
 8007f54:	eeb0 1a67 	vmov.f32	s2, s15
 8007f58:	f7fe ffec 	bl	8006f34 <FusionVectorMultiplyScalar>
 8007f5c:	eef0 6a40 	vmov.f32	s13, s0
 8007f60:	eeb0 7a60 	vmov.f32	s14, s1
 8007f64:	eef0 7a41 	vmov.f32	s15, s2
 8007f68:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 8007f6c:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 8007f70:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 8007f74:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 8007f78:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 8007f7c:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 8007f80:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8007f84:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8007f88:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8007f8c:	eef0 1a45 	vmov.f32	s3, s10
 8007f90:	eeb0 2a65 	vmov.f32	s4, s11
 8007f94:	eef0 2a46 	vmov.f32	s5, s12
 8007f98:	eeb0 0a66 	vmov.f32	s0, s13
 8007f9c:	eef0 0a47 	vmov.f32	s1, s14
 8007fa0:	eeb0 1a67 	vmov.f32	s2, s15
 8007fa4:	f7fe ff58 	bl	8006e58 <FusionVectorAdd>
 8007fa8:	eef0 6a40 	vmov.f32	s13, s0
 8007fac:	eeb0 7a60 	vmov.f32	s14, s1
 8007fb0:	eef0 7a41 	vmov.f32	s15, s2
 8007fb4:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 8007fb8:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 8007fbc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 8007fc0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8007fc4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007fc8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8007fcc:	edd7 1a01 	vldr	s3, [r7, #4]
 8007fd0:	eeb0 0a66 	vmov.f32	s0, s13
 8007fd4:	eef0 0a47 	vmov.f32	s1, s14
 8007fd8:	eeb0 1a67 	vmov.f32	s2, s15
 8007fdc:	f7fe ffaa 	bl	8006f34 <FusionVectorMultiplyScalar>
 8007fe0:	eef0 6a40 	vmov.f32	s13, s0
 8007fe4:	eeb0 7a60 	vmov.f32	s14, s1
 8007fe8:	eef0 7a41 	vmov.f32	s15, s2
 8007fec:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 8007ff0:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 8007ff4:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 8007ff8:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 8007ffc:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 8008000:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 8008004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008006:	ed93 6a06 	vldr	s12, [r3, #24]
 800800a:	edd3 6a07 	vldr	s13, [r3, #28]
 800800e:	ed93 7a08 	vldr	s14, [r3, #32]
 8008012:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008016:	eeb0 2a64 	vmov.f32	s4, s9
 800801a:	eef0 2a45 	vmov.f32	s5, s10
 800801e:	eeb0 3a65 	vmov.f32	s6, s11
 8008022:	eeb0 0a46 	vmov.f32	s0, s12
 8008026:	eef0 0a66 	vmov.f32	s1, s13
 800802a:	eeb0 1a47 	vmov.f32	s2, s14
 800802e:	eef0 1a67 	vmov.f32	s3, s15
 8008032:	f7ff fa8e 	bl	8007552 <FusionQuaternionMultiplyVector>
 8008036:	eeb0 6a40 	vmov.f32	s12, s0
 800803a:	eef0 6a60 	vmov.f32	s13, s1
 800803e:	eeb0 7a41 	vmov.f32	s14, s2
 8008042:	eef0 7a61 	vmov.f32	s15, s3
 8008046:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 800804a:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 800804e:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 8008052:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 8008056:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8008058:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 800805c:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 8008060:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 8008064:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 8008068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806a:	ed93 6a06 	vldr	s12, [r3, #24]
 800806e:	edd3 6a07 	vldr	s13, [r3, #28]
 8008072:	ed93 7a08 	vldr	s14, [r3, #32]
 8008076:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800807a:	eeb0 2a44 	vmov.f32	s4, s8
 800807e:	eef0 2a64 	vmov.f32	s5, s9
 8008082:	eeb0 3a45 	vmov.f32	s6, s10
 8008086:	eef0 3a65 	vmov.f32	s7, s11
 800808a:	eeb0 0a46 	vmov.f32	s0, s12
 800808e:	eef0 0a66 	vmov.f32	s1, s13
 8008092:	eeb0 1a47 	vmov.f32	s2, s14
 8008096:	eef0 1a67 	vmov.f32	s3, s15
 800809a:	f7ff f936 	bl	800730a <FusionQuaternionAdd>
 800809e:	eeb0 6a40 	vmov.f32	s12, s0
 80080a2:	eef0 6a60 	vmov.f32	s13, s1
 80080a6:	eeb0 7a41 	vmov.f32	s14, s2
 80080aa:	eef0 7a61 	vmov.f32	s15, s3
 80080ae:	ed84 6a06 	vstr	s12, [r4, #24]
 80080b2:	edc4 6a07 	vstr	s13, [r4, #28]
 80080b6:	ed84 7a08 	vstr	s14, [r4, #32]
 80080ba:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 80080be:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80080c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c2:	ed93 6a06 	vldr	s12, [r3, #24]
 80080c6:	edd3 6a07 	vldr	s13, [r3, #28]
 80080ca:	ed93 7a08 	vldr	s14, [r3, #32]
 80080ce:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80080d2:	eeb0 0a46 	vmov.f32	s0, s12
 80080d6:	eef0 0a66 	vmov.f32	s1, s13
 80080da:	eeb0 1a47 	vmov.f32	s2, s14
 80080de:	eef0 1a67 	vmov.f32	s3, s15
 80080e2:	f7ff fad6 	bl	8007692 <FusionQuaternionNormalise>
 80080e6:	eeb0 6a40 	vmov.f32	s12, s0
 80080ea:	eef0 6a60 	vmov.f32	s13, s1
 80080ee:	eeb0 7a41 	vmov.f32	s14, s2
 80080f2:	eef0 7a61 	vmov.f32	s15, s3
 80080f6:	ed84 6a06 	vstr	s12, [r4, #24]
 80080fa:	edc4 6a07 	vstr	s13, [r4, #28]
 80080fe:	ed84 7a08 	vstr	s14, [r4, #32]
 8008102:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 8008106:	bf00      	nop
 8008108:	37fc      	adds	r7, #252	; 0xfc
 800810a:	46bd      	mov	sp, r7
 800810c:	bd90      	pop	{r4, r7, pc}

0800810e <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static inline FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 800810e:	b480      	push	{r7}
 8008110:	b093      	sub	sp, #76	; 0x4c
 8008112:	af00      	add	r7, sp, #0
 8008114:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	2b01      	cmp	r3, #1
 800811c:	dc02      	bgt.n	8008124 <HalfGravity+0x16>
 800811e:	2b00      	cmp	r3, #0
 8008120:	da03      	bge.n	800812a <HalfGravity+0x1c>
 8008122:	e094      	b.n	800824e <HalfGravity+0x140>
 8008124:	2b02      	cmp	r3, #2
 8008126:	d048      	beq.n	80081ba <HalfGravity+0xac>
 8008128:	e091      	b.n	800824e <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	ed93 7a07 	vldr	s14, [r3, #28]
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	edd3 6a06 	vldr	s13, [r3, #24]
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	edd3 7a08 	vldr	s15, [r3, #32]
 8008146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800814a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800814e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	ed93 7a08 	vldr	s14, [r3, #32]
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800815e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	edd3 6a06 	vldr	s13, [r3, #24]
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	edd3 7a07 	vldr	s15, [r3, #28]
 800816e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008172:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8008176:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	ed93 7a06 	vldr	s14, [r3, #24]
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	edd3 7a06 	vldr	s15, [r3, #24]
 8008186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800818a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800818e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800819e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80081a2:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80081a6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 80081aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80081ae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80081b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80081b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80081b8:	e052      	b.n	8008260 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	ed93 7a06 	vldr	s14, [r3, #24]
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	edd3 7a08 	vldr	s15, [r3, #32]
 80081c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	edd3 6a07 	vldr	s13, [r3, #28]
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80081d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80081da:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80081de:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	ed93 7a08 	vldr	s14, [r3, #32]
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80081ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	edd3 6a06 	vldr	s13, [r3, #24]
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80081fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008206:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 800820a:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	ed93 7a06 	vldr	s14, [r3, #24]
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	edd3 7a06 	vldr	s15, [r3, #24]
 800821a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800821e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008222:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008232:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008236:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800823a:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 800823e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008242:	f107 0218 	add.w	r2, r7, #24
 8008246:	ca07      	ldmia	r2, {r0, r1, r2}
 8008248:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800824c:	e008      	b.n	8008260 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800824e:	f04f 0300 	mov.w	r3, #0
 8008252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008254:	f04f 0300 	mov.w	r3, #0
 8008258:	643b      	str	r3, [r7, #64]	; 0x40
 800825a:	f04f 0300 	mov.w	r3, #0
 800825e:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 8008260:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008262:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008266:	ee06 1a90 	vmov	s13, r1
 800826a:	ee07 2a10 	vmov	s14, r2
 800826e:	ee07 3a90 	vmov	s15, r3
 8008272:	eeb0 0a66 	vmov.f32	s0, s13
 8008276:	eef0 0a47 	vmov.f32	s1, s14
 800827a:	eeb0 1a67 	vmov.f32	s2, s15
 800827e:	374c      	adds	r7, #76	; 0x4c
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static inline FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 8008288:	b480      	push	{r7}
 800828a:	b097      	sub	sp, #92	; 0x5c
 800828c:	af00      	add	r7, sp, #0
 800828e:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	2b02      	cmp	r3, #2
 8008296:	f000 809a 	beq.w	80083ce <HalfMagnetic+0x146>
 800829a:	2b02      	cmp	r3, #2
 800829c:	f300 80e1 	bgt.w	8008462 <HalfMagnetic+0x1da>
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <HalfMagnetic+0x22>
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d048      	beq.n	800833a <HalfMagnetic+0xb2>
 80082a8:	e0db      	b.n	8008462 <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	ed93 7a07 	vldr	s14, [r3, #28]
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	edd3 7a08 	vldr	s15, [r3, #32]
 80082b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	edd3 6a06 	vldr	s13, [r3, #24]
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80082c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80082ca:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80082ce:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	ed93 7a06 	vldr	s14, [r3, #24]
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	edd3 7a06 	vldr	s15, [r3, #24]
 80082de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80082e6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	edd3 6a08 	vldr	s13, [r3, #32]
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	edd3 7a08 	vldr	s15, [r3, #32]
 80082f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80082fa:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80082fe:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	ed93 7a08 	vldr	s14, [r3, #32]
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800830e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	edd3 6a06 	vldr	s13, [r3, #24]
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	edd3 7a07 	vldr	s15, [r3, #28]
 800831e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008322:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8008326:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 800832a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800832e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008332:	ca07      	ldmia	r2, {r0, r1, r2}
 8008334:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008338:	e09c      	b.n	8008474 <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	ed93 7a06 	vldr	s14, [r3, #24]
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	edd3 7a06 	vldr	s15, [r3, #24]
 8008346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800834a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800834e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	edd3 6a07 	vldr	s13, [r3, #28]
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	edd3 7a07 	vldr	s15, [r3, #28]
 800835e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008362:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8008366:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	ed93 7a06 	vldr	s14, [r3, #24]
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008376:	ee27 7a27 	vmul.f32	s14, s14, s15
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	edd3 6a07 	vldr	s13, [r3, #28]
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	edd3 7a08 	vldr	s15, [r3, #32]
 8008386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800838a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800838e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	ed93 7a07 	vldr	s14, [r3, #28]
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800839e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	edd3 6a06 	vldr	s13, [r3, #24]
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	edd3 7a08 	vldr	s15, [r3, #32]
 80083ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083b6:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 80083ba:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 80083be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80083c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80083c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80083c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80083cc:	e052      	b.n	8008474 <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	ed93 7a07 	vldr	s14, [r3, #28]
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80083da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	edd3 6a06 	vldr	s13, [r3, #24]
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80083ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083f2:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 80083f6:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	ed93 7a06 	vldr	s14, [r3, #24]
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	edd3 7a06 	vldr	s15, [r3, #24]
 8008406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800840a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800840e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	edd3 6a08 	vldr	s13, [r3, #32]
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	edd3 7a08 	vldr	s15, [r3, #32]
 800841e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008422:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8008426:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	ed93 7a06 	vldr	s14, [r3, #24]
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	edd3 7a07 	vldr	s15, [r3, #28]
 8008436:	ee27 7a27 	vmul.f32	s14, s14, s15
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	edd3 6a08 	vldr	s13, [r3, #32]
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008446:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800844a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800844e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8008452:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008456:	f107 021c 	add.w	r2, r7, #28
 800845a:	ca07      	ldmia	r2, {r0, r1, r2}
 800845c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008460:	e008      	b.n	8008474 <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8008462:	f04f 0300 	mov.w	r3, #0
 8008466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008468:	f04f 0300 	mov.w	r3, #0
 800846c:	653b      	str	r3, [r7, #80]	; 0x50
 800846e:	f04f 0300 	mov.w	r3, #0
 8008472:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 8008474:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008476:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800847a:	ee06 1a90 	vmov	s13, r1
 800847e:	ee07 2a10 	vmov	s14, r2
 8008482:	ee07 3a90 	vmov	s15, r3
 8008486:	eeb0 0a66 	vmov.f32	s0, s13
 800848a:	eef0 0a47 	vmov.f32	s1, s14
 800848e:	eeb0 1a67 	vmov.f32	s2, s15
 8008492:	375c      	adds	r7, #92	; 0x5c
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <Feedback>:
 * @brief Returns the feedback.
 * @param sensor Sensor.
 * @param reference Reference.
 * @return Feedback.
 */
static inline FusionVector Feedback(const FusionVector sensor, const FusionVector reference) {
 800849c:	b580      	push	{r7, lr}
 800849e:	b090      	sub	sp, #64	; 0x40
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	eeb0 5a40 	vmov.f32	s10, s0
 80084a6:	eef0 5a60 	vmov.f32	s11, s1
 80084aa:	eeb0 6a41 	vmov.f32	s12, s2
 80084ae:	eef0 6a61 	vmov.f32	s13, s3
 80084b2:	eeb0 7a42 	vmov.f32	s14, s4
 80084b6:	eef0 7a62 	vmov.f32	s15, s5
 80084ba:	ed87 5a07 	vstr	s10, [r7, #28]
 80084be:	edc7 5a08 	vstr	s11, [r7, #32]
 80084c2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80084c6:	edc7 6a04 	vstr	s13, [r7, #16]
 80084ca:	ed87 7a05 	vstr	s14, [r7, #20]
 80084ce:	edc7 7a06 	vstr	s15, [r7, #24]
    if (FusionVectorDotProduct(sensor, reference) < 0.0f) { // if error is >90 degrees
 80084d2:	ed97 5a04 	vldr	s10, [r7, #16]
 80084d6:	edd7 5a05 	vldr	s11, [r7, #20]
 80084da:	ed97 6a06 	vldr	s12, [r7, #24]
 80084de:	edd7 6a07 	vldr	s13, [r7, #28]
 80084e2:	ed97 7a08 	vldr	s14, [r7, #32]
 80084e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80084ea:	eef0 1a45 	vmov.f32	s3, s10
 80084ee:	eeb0 2a65 	vmov.f32	s4, s11
 80084f2:	eef0 2a46 	vmov.f32	s5, s12
 80084f6:	eeb0 0a66 	vmov.f32	s0, s13
 80084fa:	eef0 0a47 	vmov.f32	s1, s14
 80084fe:	eeb0 1a67 	vmov.f32	s2, s15
 8008502:	f7fe fe0f 	bl	8007124 <FusionVectorDotProduct>
 8008506:	eef0 7a40 	vmov.f32	s15, s0
 800850a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800850e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008512:	d540      	bpl.n	8008596 <Feedback+0xfa>
        return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 8008514:	ed97 5a04 	vldr	s10, [r7, #16]
 8008518:	edd7 5a05 	vldr	s11, [r7, #20]
 800851c:	ed97 6a06 	vldr	s12, [r7, #24]
 8008520:	edd7 6a07 	vldr	s13, [r7, #28]
 8008524:	ed97 7a08 	vldr	s14, [r7, #32]
 8008528:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800852c:	eef0 1a45 	vmov.f32	s3, s10
 8008530:	eeb0 2a65 	vmov.f32	s4, s11
 8008534:	eef0 2a46 	vmov.f32	s5, s12
 8008538:	eeb0 0a66 	vmov.f32	s0, s13
 800853c:	eef0 0a47 	vmov.f32	s1, s14
 8008540:	eeb0 1a67 	vmov.f32	s2, s15
 8008544:	f7fe fd88 	bl	8007058 <FusionVectorCrossProduct>
 8008548:	eef0 6a40 	vmov.f32	s13, s0
 800854c:	eeb0 7a60 	vmov.f32	s14, s1
 8008550:	eef0 7a41 	vmov.f32	s15, s2
 8008554:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 8008558:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800855c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8008560:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8008564:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008568:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800856c:	eeb0 0a66 	vmov.f32	s0, s13
 8008570:	eef0 0a47 	vmov.f32	s1, s14
 8008574:	eeb0 1a67 	vmov.f32	s2, s15
 8008578:	f7fe fe74 	bl	8007264 <FusionVectorNormalise>
 800857c:	eef0 6a40 	vmov.f32	s13, s0
 8008580:	eeb0 7a60 	vmov.f32	s14, s1
 8008584:	eef0 7a41 	vmov.f32	s15, s2
 8008588:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800858c:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8008590:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8008594:	e025      	b.n	80085e2 <Feedback+0x146>
    }
    return FusionVectorCrossProduct(sensor, reference);
 8008596:	ed97 5a04 	vldr	s10, [r7, #16]
 800859a:	edd7 5a05 	vldr	s11, [r7, #20]
 800859e:	ed97 6a06 	vldr	s12, [r7, #24]
 80085a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80085a6:	ed97 7a08 	vldr	s14, [r7, #32]
 80085aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80085ae:	eef0 1a45 	vmov.f32	s3, s10
 80085b2:	eeb0 2a65 	vmov.f32	s4, s11
 80085b6:	eef0 2a46 	vmov.f32	s5, s12
 80085ba:	eeb0 0a66 	vmov.f32	s0, s13
 80085be:	eef0 0a47 	vmov.f32	s1, s14
 80085c2:	eeb0 1a67 	vmov.f32	s2, s15
 80085c6:	f7fe fd47 	bl	8007058 <FusionVectorCrossProduct>
 80085ca:	eef0 6a40 	vmov.f32	s13, s0
 80085ce:	eeb0 7a60 	vmov.f32	s14, s1
 80085d2:	eef0 7a41 	vmov.f32	s15, s2
 80085d6:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 80085da:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 80085de:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
}
 80085e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	ee06 1a90 	vmov	s13, r1
 80085ec:	ee07 2a10 	vmov	s14, r2
 80085f0:	ee07 3a90 	vmov	s15, r3
 80085f4:	eeb0 0a66 	vmov.f32	s0, s13
 80085f8:	eef0 0a47 	vmov.f32	s1, s14
 80085fc:	eeb0 1a67 	vmov.f32	s2, s15
 8008600:	3740      	adds	r7, #64	; 0x40
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <Clamp>:
 * @param value Value.
 * @param min Minimum value.
 * @param max Maximum value.
 * @return Value limited to maximum and minimum.
 */
static inline int Clamp(const int value, const int min, const int max) {
 8008606:	b480      	push	{r7}
 8008608:	b085      	sub	sp, #20
 800860a:	af00      	add	r7, sp, #0
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	607a      	str	r2, [r7, #4]
    if (value < min) {
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	429a      	cmp	r2, r3
 8008618:	da01      	bge.n	800861e <Clamp+0x18>
        return min;
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	e006      	b.n	800862c <Clamp+0x26>
    }
    if (value > max) {
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	429a      	cmp	r2, r3
 8008624:	dd01      	ble.n	800862a <Clamp+0x24>
        return max;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	e000      	b.n	800862c <Clamp+0x26>
    }
    return value;
 800862a:	68fb      	ldr	r3, [r7, #12]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <FusionAhrsUpdateNoMagnetometer>:
 * @param ahrs AHRS algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const float deltaTime) {
 8008638:	b580      	push	{r7, lr}
 800863a:	b08c      	sub	sp, #48	; 0x30
 800863c:	af00      	add	r7, sp, #0
 800863e:	61f8      	str	r0, [r7, #28]
 8008640:	eeb0 5a40 	vmov.f32	s10, s0
 8008644:	eef0 5a60 	vmov.f32	s11, s1
 8008648:	eeb0 6a41 	vmov.f32	s12, s2
 800864c:	eef0 6a61 	vmov.f32	s13, s3
 8008650:	eeb0 7a42 	vmov.f32	s14, s4
 8008654:	eef0 7a62 	vmov.f32	s15, s5
 8008658:	ed87 3a00 	vstr	s6, [r7]
 800865c:	ed87 5a04 	vstr	s10, [r7, #16]
 8008660:	edc7 5a05 	vstr	s11, [r7, #20]
 8008664:	ed87 6a06 	vstr	s12, [r7, #24]
 8008668:	edc7 6a01 	vstr	s13, [r7, #4]
 800866c:	ed87 7a02 	vstr	s14, [r7, #8]
 8008670:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
 8008674:	f04f 0300 	mov.w	r3, #0
 8008678:	627b      	str	r3, [r7, #36]	; 0x24
 800867a:	f04f 0300 	mov.w	r3, #0
 800867e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008680:	f04f 0300 	mov.w	r3, #0
 8008684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008686:	ed97 3a09 	vldr	s6, [r7, #36]	; 0x24
 800868a:	edd7 3a0a 	vldr	s7, [r7, #40]	; 0x28
 800868e:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 8008692:	ed97 5a01 	vldr	s10, [r7, #4]
 8008696:	edd7 5a02 	vldr	s11, [r7, #8]
 800869a:	ed97 6a03 	vldr	s12, [r7, #12]
 800869e:	edd7 6a04 	vldr	s13, [r7, #16]
 80086a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80086a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80086aa:	edd7 4a00 	vldr	s9, [r7]
 80086ae:	eef0 1a45 	vmov.f32	s3, s10
 80086b2:	eeb0 2a65 	vmov.f32	s4, s11
 80086b6:	eef0 2a46 	vmov.f32	s5, s12
 80086ba:	eeb0 0a66 	vmov.f32	s0, s13
 80086be:	eef0 0a47 	vmov.f32	s1, s14
 80086c2:	eeb0 1a67 	vmov.f32	s2, s15
 80086c6:	69f8      	ldr	r0, [r7, #28]
 80086c8:	f7ff f992 	bl	80079f0 <FusionAhrsUpdate>

    // Zero heading during initialisation
    if (ahrs->initialising == true) {
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d004      	beq.n	80086e0 <FusionAhrsUpdateNoMagnetometer+0xa8>
        FusionAhrsSetHeading(ahrs, 0.0f);
 80086d6:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80086e8 <FusionAhrsUpdateNoMagnetometer+0xb0>
 80086da:	69f8      	ldr	r0, [r7, #28]
 80086dc:	f000 f829 	bl	8008732 <FusionAhrsSetHeading>
    }
}
 80086e0:	bf00      	nop
 80086e2:	3730      	adds	r7, #48	; 0x30
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	00000000 	.word	0x00000000

080086ec <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 80086ec:	b490      	push	{r4, r7}
 80086ee:	b08a      	sub	sp, #40	; 0x28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	f107 0418 	add.w	r4, r7, #24
 80086fa:	3318      	adds	r3, #24
 80086fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80086fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008702:	69b8      	ldr	r0, [r7, #24]
 8008704:	69f9      	ldr	r1, [r7, #28]
 8008706:	6a3a      	ldr	r2, [r7, #32]
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	ee06 0a10 	vmov	s12, r0
 800870e:	ee06 1a90 	vmov	s13, r1
 8008712:	ee07 2a10 	vmov	s14, r2
 8008716:	ee07 3a90 	vmov	s15, r3
}
 800871a:	eeb0 0a46 	vmov.f32	s0, s12
 800871e:	eef0 0a66 	vmov.f32	s1, s13
 8008722:	eeb0 1a47 	vmov.f32	s2, s14
 8008726:	eef0 1a67 	vmov.f32	s3, s15
 800872a:	3728      	adds	r7, #40	; 0x28
 800872c:	46bd      	mov	sp, r7
 800872e:	bc90      	pop	{r4, r7}
 8008730:	4770      	bx	lr

08008732 <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 8008732:	b590      	push	{r4, r7, lr}
 8008734:	b089      	sub	sp, #36	; 0x24
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	ed93 7a06 	vldr	s14, [r3, #24]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800874a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	edd3 6a07 	vldr	s13, [r3, #28]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	edd3 7a08 	vldr	s15, [r3, #32]
 800875a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800875e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	ed93 7a08 	vldr	s14, [r3, #32]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	edd3 7a08 	vldr	s15, [r3, #32]
 800876e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008772:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008776:	ee37 7a67 	vsub.f32	s14, s14, s15
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008786:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800878a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800878e:	eef0 0a67 	vmov.f32	s1, s15
 8008792:	eeb0 0a46 	vmov.f32	s0, s12
 8008796:	f010 ff67 	bl	8019668 <atan2f>
 800879a:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 800879e:	ed97 0a00 	vldr	s0, [r7]
 80087a2:	f7fe fae5 	bl	8006d70 <FusionDegreesToRadians>
 80087a6:	eeb0 7a40 	vmov.f32	s14, s0
 80087aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80087ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80087b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80087b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087ba:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 80087be:	ed97 0a06 	vldr	s0, [r7, #24]
 80087c2:	f010 ffab 	bl	801971c <cosf>
 80087c6:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 80087ca:	edc7 7a02 	vstr	s15, [r7, #8]
 80087ce:	f04f 0300 	mov.w	r3, #0
 80087d2:	60fb      	str	r3, [r7, #12]
 80087d4:	f04f 0300 	mov.w	r3, #0
 80087d8:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 80087da:	ed97 0a06 	vldr	s0, [r7, #24]
 80087de:	f010 ffe9 	bl	80197b4 <sinf>
 80087e2:	eef0 7a40 	vmov.f32	s15, s0
 80087e6:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 80087ea:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 80087ee:	687c      	ldr	r4, [r7, #4]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	ed93 4a06 	vldr	s8, [r3, #24]
 80087f6:	edd3 4a07 	vldr	s9, [r3, #28]
 80087fa:	ed93 5a08 	vldr	s10, [r3, #32]
 80087fe:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
 8008802:	ed97 6a02 	vldr	s12, [r7, #8]
 8008806:	edd7 6a03 	vldr	s13, [r7, #12]
 800880a:	ed97 7a04 	vldr	s14, [r7, #16]
 800880e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008812:	eeb0 2a44 	vmov.f32	s4, s8
 8008816:	eef0 2a64 	vmov.f32	s5, s9
 800881a:	eeb0 3a45 	vmov.f32	s6, s10
 800881e:	eef0 3a65 	vmov.f32	s7, s11
 8008822:	eeb0 0a46 	vmov.f32	s0, s12
 8008826:	eef0 0a66 	vmov.f32	s1, s13
 800882a:	eeb0 1a47 	vmov.f32	s2, s14
 800882e:	eef0 1a67 	vmov.f32	s3, s15
 8008832:	f7fe fdcc 	bl	80073ce <FusionQuaternionMultiply>
 8008836:	eeb0 6a40 	vmov.f32	s12, s0
 800883a:	eef0 6a60 	vmov.f32	s13, s1
 800883e:	eeb0 7a41 	vmov.f32	s14, s2
 8008842:	eef0 7a61 	vmov.f32	s15, s3
 8008846:	ed84 6a06 	vstr	s12, [r4, #24]
 800884a:	edc4 6a07 	vstr	s13, [r4, #28]
 800884e:	ed84 7a08 	vstr	s14, [r4, #32]
 8008852:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 8008856:	bf00      	nop
 8008858:	3724      	adds	r7, #36	; 0x24
 800885a:	46bd      	mov	sp, r7
 800885c:	bd90      	pop	{r4, r7, pc}

0800885e <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 800885e:	b480      	push	{r7}
 8008860:	b091      	sub	sp, #68	; 0x44
 8008862:	af00      	add	r7, sp, #0
 8008864:	eeb0 5a40 	vmov.f32	s10, s0
 8008868:	eef0 5a60 	vmov.f32	s11, s1
 800886c:	eeb0 6a41 	vmov.f32	s12, s2
 8008870:	eef0 6a61 	vmov.f32	s13, s3
 8008874:	eeb0 7a42 	vmov.f32	s14, s4
 8008878:	eef0 7a62 	vmov.f32	s15, s5
 800887c:	ed87 5a07 	vstr	s10, [r7, #28]
 8008880:	edc7 5a08 	vstr	s11, [r7, #32]
 8008884:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8008888:	edc7 6a04 	vstr	s13, [r7, #16]
 800888c:	ed87 7a05 	vstr	s14, [r7, #20]
 8008890:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 8008894:	ed97 7a07 	vldr	s14, [r7, #28]
 8008898:	edd7 7a04 	vldr	s15, [r7, #16]
 800889c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80088a0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 80088a4:	ed97 7a08 	vldr	s14, [r7, #32]
 80088a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80088ac:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80088b0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 80088b4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80088b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80088bc:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80088c0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80088c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80088c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80088cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80088ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80088d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80088d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088d8:	ee06 1a90 	vmov	s13, r1
 80088dc:	ee07 2a10 	vmov	s14, r2
 80088e0:	ee07 3a90 	vmov	s15, r3
}
 80088e4:	eeb0 0a66 	vmov.f32	s0, s13
 80088e8:	eef0 0a47 	vmov.f32	s1, s14
 80088ec:	eeb0 1a67 	vmov.f32	s2, s15
 80088f0:	3744      	adds	r7, #68	; 0x44
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <FusionVectorSubtract>:
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 80088fa:	b480      	push	{r7}
 80088fc:	b091      	sub	sp, #68	; 0x44
 80088fe:	af00      	add	r7, sp, #0
 8008900:	eeb0 5a40 	vmov.f32	s10, s0
 8008904:	eef0 5a60 	vmov.f32	s11, s1
 8008908:	eeb0 6a41 	vmov.f32	s12, s2
 800890c:	eef0 6a61 	vmov.f32	s13, s3
 8008910:	eeb0 7a42 	vmov.f32	s14, s4
 8008914:	eef0 7a62 	vmov.f32	s15, s5
 8008918:	ed87 5a07 	vstr	s10, [r7, #28]
 800891c:	edc7 5a08 	vstr	s11, [r7, #32]
 8008920:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8008924:	edc7 6a04 	vstr	s13, [r7, #16]
 8008928:	ed87 7a05 	vstr	s14, [r7, #20]
 800892c:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x - vectorB.axis.x,
 8008930:	ed97 7a07 	vldr	s14, [r7, #28]
 8008934:	edd7 7a04 	vldr	s15, [r7, #16]
 8008938:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800893c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8008940:	ed97 7a08 	vldr	s14, [r7, #32]
 8008944:	edd7 7a05 	vldr	s15, [r7, #20]
 8008948:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800894c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8008950:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008954:	edd7 7a06 	vldr	s15, [r7, #24]
 8008958:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800895c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8008960:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008964:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008968:	ca07      	ldmia	r2, {r0, r1, r2}
 800896a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800896e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008974:	ee06 1a90 	vmov	s13, r1
 8008978:	ee07 2a10 	vmov	s14, r2
 800897c:	ee07 3a90 	vmov	s15, r3
}
 8008980:	eeb0 0a66 	vmov.f32	s0, s13
 8008984:	eef0 0a47 	vmov.f32	s1, s14
 8008988:	eeb0 1a67 	vmov.f32	s2, s15
 800898c:	3744      	adds	r7, #68	; 0x44
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8008996:	b480      	push	{r7}
 8008998:	b08f      	sub	sp, #60	; 0x3c
 800899a:	af00      	add	r7, sp, #0
 800899c:	eef0 6a40 	vmov.f32	s13, s0
 80089a0:	eeb0 7a60 	vmov.f32	s14, s1
 80089a4:	eef0 7a41 	vmov.f32	s15, s2
 80089a8:	edc7 1a04 	vstr	s3, [r7, #16]
 80089ac:	edc7 6a05 	vstr	s13, [r7, #20]
 80089b0:	ed87 7a06 	vstr	s14, [r7, #24]
 80089b4:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 80089b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80089bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80089c0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80089c4:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 80089c8:	ed97 7a06 	vldr	s14, [r7, #24]
 80089cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80089d0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80089d4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 80089d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80089dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80089e0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80089e4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 80089e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80089ec:	f107 0220 	add.w	r2, r7, #32
 80089f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80089f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80089f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089fc:	ee06 1a90 	vmov	s13, r1
 8008a00:	ee07 2a10 	vmov	s14, r2
 8008a04:	ee07 3a90 	vmov	s15, r3
}
 8008a08:	eeb0 0a66 	vmov.f32	s0, s13
 8008a0c:	eef0 0a47 	vmov.f32	s1, s14
 8008a10:	eeb0 1a67 	vmov.f32	s2, s15
 8008a14:	373c      	adds	r7, #60	; 0x3c
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
	...

08008a20 <FusionOffsetInitialise>:
/**
 * @brief Initialises the gyroscope offset algorithm.
 * @param offset Gyroscope offset algorithm structure.
 * @param sampleRate Sample rate in Hz.
 */
void FusionOffsetInitialise(FusionOffset *const offset, const unsigned int sampleRate) {
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
    offset->filterCoefficient = 2.0f * (float) M_PI * CUTOFF_FREQUENCY * (1.0f / (float) sampleRate);
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	ee07 3a90 	vmov	s15, r3
 8008a30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008a34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a3c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008a80 <FusionOffsetInitialise+0x60>
 8008a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	edc3 7a00 	vstr	s15, [r3]
    offset->timeout = TIMEOUT * sampleRate;
 8008a4a:	683a      	ldr	r2, [r7, #0]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	441a      	add	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	605a      	str	r2, [r3, #4]
    offset->timer = 0;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	609a      	str	r2, [r3, #8]
    offset->gyroscopeOffset = FUSION_VECTOR_ZERO;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f04f 0200 	mov.w	r2, #0
 8008a62:	60da      	str	r2, [r3, #12]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f04f 0200 	mov.w	r2, #0
 8008a6a:	611a      	str	r2, [r3, #16]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f04f 0200 	mov.w	r2, #0
 8008a72:	615a      	str	r2, [r3, #20]
}
 8008a74:	bf00      	nop
 8008a76:	371c      	adds	r7, #28
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	3e00adfd 	.word	0x3e00adfd

08008a84 <FusionOffsetUpdate>:
 * gyroscope measurement.
 * @param offset Gyroscope offset algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector FusionOffsetUpdate(FusionOffset *const offset, FusionVector gyroscope) {
 8008a84:	b590      	push	{r4, r7, lr}
 8008a86:	b08f      	sub	sp, #60	; 0x3c
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	61f8      	str	r0, [r7, #28]
 8008a8c:	eef0 6a40 	vmov.f32	s13, s0
 8008a90:	eeb0 7a60 	vmov.f32	s14, s1
 8008a94:	eef0 7a41 	vmov.f32	s15, s2
 8008a98:	edc7 6a04 	vstr	s13, [r7, #16]
 8008a9c:	ed87 7a05 	vstr	s14, [r7, #20]
 8008aa0:	edc7 7a06 	vstr	s15, [r7, #24]

    // Subtract offset from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, offset->gyroscopeOffset);
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	ed93 5a03 	vldr	s10, [r3, #12]
 8008aaa:	edd3 5a04 	vldr	s11, [r3, #16]
 8008aae:	ed93 6a05 	vldr	s12, [r3, #20]
 8008ab2:	edd7 6a04 	vldr	s13, [r7, #16]
 8008ab6:	ed97 7a05 	vldr	s14, [r7, #20]
 8008aba:	edd7 7a06 	vldr	s15, [r7, #24]
 8008abe:	eef0 1a45 	vmov.f32	s3, s10
 8008ac2:	eeb0 2a65 	vmov.f32	s4, s11
 8008ac6:	eef0 2a46 	vmov.f32	s5, s12
 8008aca:	eeb0 0a66 	vmov.f32	s0, s13
 8008ace:	eef0 0a47 	vmov.f32	s1, s14
 8008ad2:	eeb0 1a67 	vmov.f32	s2, s15
 8008ad6:	f7ff ff10 	bl	80088fa <FusionVectorSubtract>
 8008ada:	eef0 6a40 	vmov.f32	s13, s0
 8008ade:	eeb0 7a60 	vmov.f32	s14, s1
 8008ae2:	eef0 7a41 	vmov.f32	s15, s2
 8008ae6:	edc7 6a04 	vstr	s13, [r7, #16]
 8008aea:	ed87 7a05 	vstr	s14, [r7, #20]
 8008aee:	edc7 7a06 	vstr	s15, [r7, #24]

    // Reset timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > THRESHOLD) || (fabs(gyroscope.axis.y) > THRESHOLD) || (fabs(gyroscope.axis.z) > THRESHOLD)) {
 8008af2:	edd7 7a04 	vldr	s15, [r7, #16]
 8008af6:	eef0 7ae7 	vabs.f32	s15, s15
 8008afa:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8008afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b06:	dc15      	bgt.n	8008b34 <FusionOffsetUpdate+0xb0>
 8008b08:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b0c:	eef0 7ae7 	vabs.f32	s15, s15
 8008b10:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8008b14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b1c:	dc0a      	bgt.n	8008b34 <FusionOffsetUpdate+0xb0>
 8008b1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8008b22:	eef0 7ae7 	vabs.f32	s15, s15
 8008b26:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8008b2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b32:	dd0a      	ble.n	8008b4a <FusionOffsetUpdate+0xc6>
        offset->timer = 0;
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	2200      	movs	r2, #0
 8008b38:	609a      	str	r2, [r3, #8]
        return gyroscope;
 8008b3a:	f107 0320 	add.w	r3, r7, #32
 8008b3e:	f107 0210 	add.w	r2, r7, #16
 8008b42:	ca07      	ldmia	r2, {r0, r1, r2}
 8008b44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008b48:	e060      	b.n	8008c0c <FusionOffsetUpdate+0x188>
    }

    // Increment timer while gyroscope stationary
    if (offset->timer < offset->timeout) {
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	689a      	ldr	r2, [r3, #8]
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d20c      	bcs.n	8008b70 <FusionOffsetUpdate+0xec>
        offset->timer++;
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	609a      	str	r2, [r3, #8]
        return gyroscope;
 8008b60:	f107 0320 	add.w	r3, r7, #32
 8008b64:	f107 0210 	add.w	r2, r7, #16
 8008b68:	ca07      	ldmia	r2, {r0, r1, r2}
 8008b6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008b6e:	e04d      	b.n	8008c0c <FusionOffsetUpdate+0x188>
    }

    // Adjust offset if timer has elapsed
    offset->gyroscopeOffset = FusionVectorAdd(offset->gyroscopeOffset, FusionVectorMultiplyScalar(gyroscope, offset->filterCoefficient));
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	ed93 6a00 	vldr	s12, [r3]
 8008b76:	edd7 6a04 	vldr	s13, [r7, #16]
 8008b7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8008b7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8008b82:	eef0 1a46 	vmov.f32	s3, s12
 8008b86:	eeb0 0a66 	vmov.f32	s0, s13
 8008b8a:	eef0 0a47 	vmov.f32	s1, s14
 8008b8e:	eeb0 1a67 	vmov.f32	s2, s15
 8008b92:	f7ff ff00 	bl	8008996 <FusionVectorMultiplyScalar>
 8008b96:	eef0 6a40 	vmov.f32	s13, s0
 8008b9a:	eeb0 7a60 	vmov.f32	s14, s1
 8008b9e:	eef0 7a41 	vmov.f32	s15, s2
 8008ba2:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8008ba6:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8008baa:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8008bae:	69fc      	ldr	r4, [r7, #28]
 8008bb0:	ed97 5a0b 	vldr	s10, [r7, #44]	; 0x2c
 8008bb4:	edd7 5a0c 	vldr	s11, [r7, #48]	; 0x30
 8008bb8:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	edd3 6a03 	vldr	s13, [r3, #12]
 8008bc2:	ed93 7a04 	vldr	s14, [r3, #16]
 8008bc6:	edd3 7a05 	vldr	s15, [r3, #20]
 8008bca:	eef0 1a45 	vmov.f32	s3, s10
 8008bce:	eeb0 2a65 	vmov.f32	s4, s11
 8008bd2:	eef0 2a46 	vmov.f32	s5, s12
 8008bd6:	eeb0 0a66 	vmov.f32	s0, s13
 8008bda:	eef0 0a47 	vmov.f32	s1, s14
 8008bde:	eeb0 1a67 	vmov.f32	s2, s15
 8008be2:	f7ff fe3c 	bl	800885e <FusionVectorAdd>
 8008be6:	eef0 6a40 	vmov.f32	s13, s0
 8008bea:	eeb0 7a60 	vmov.f32	s14, s1
 8008bee:	eef0 7a41 	vmov.f32	s15, s2
 8008bf2:	edc4 6a03 	vstr	s13, [r4, #12]
 8008bf6:	ed84 7a04 	vstr	s14, [r4, #16]
 8008bfa:	edc4 7a05 	vstr	s15, [r4, #20]
    return gyroscope;
 8008bfe:	f107 0320 	add.w	r3, r7, #32
 8008c02:	f107 0210 	add.w	r2, r7, #16
 8008c06:	ca07      	ldmia	r2, {r0, r1, r2}
 8008c08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8008c0c:	6a39      	ldr	r1, [r7, #32]
 8008c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	ee06 1a90 	vmov	s13, r1
 8008c16:	ee07 2a10 	vmov	s14, r2
 8008c1a:	ee07 3a90 	vmov	s15, r3
 8008c1e:	eeb0 0a66 	vmov.f32	s0, s13
 8008c22:	eef0 0a47 	vmov.f32	s1, s14
 8008c26:	eeb0 1a67 	vmov.f32	s2, s15
 8008c2a:	373c      	adds	r7, #60	; 0x3c
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd90      	pop	{r4, r7, pc}

08008c30 <GPS_validate>:

	return 0;
}

int GPS_validate(char *nmeastr)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
	char check[3];
	char checkcalcstr[3];
	int i;
	int calculated_check;

	i = 0;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	617b      	str	r3, [r7, #20]
	calculated_check = 0;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	613b      	str	r3, [r7, #16]

	// check to ensure that the string starts with a $
	if (nmeastr[i] == '$')
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	4413      	add	r3, r2
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	2b24      	cmp	r3, #36	; 0x24
 8008c4a:	d103      	bne.n	8008c54 <GPS_validate+0x24>
		i++;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	617b      	str	r3, [r7, #20]
	else
		return 0;

	//No NULL reached, 75 char largest possible NMEA message, no '*' reached
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8008c52:	e00c      	b.n	8008c6e <GPS_validate+0x3e>
		return 0;
 8008c54:	2300      	movs	r3, #0
 8008c56:	e047      	b.n	8008ce8 <GPS_validate+0xb8>
	{
		calculated_check ^= nmeastr[i]; // calculate the checksum
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	461a      	mov	r2, r3
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	4053      	eors	r3, r2
 8008c66:	613b      	str	r3, [r7, #16]
		i++;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	617b      	str	r3, [r7, #20]
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	4413      	add	r3, r2
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d008      	beq.n	8008c8c <GPS_validate+0x5c>
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	4413      	add	r3, r2
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	2b2a      	cmp	r3, #42	; 0x2a
 8008c84:	d002      	beq.n	8008c8c <GPS_validate+0x5c>
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	2b4a      	cmp	r3, #74	; 0x4a
 8008c8a:	dde5      	ble.n	8008c58 <GPS_validate+0x28>
	}

	if (i >= 75)
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	2b4a      	cmp	r3, #74	; 0x4a
 8008c90:	dd01      	ble.n	8008c96 <GPS_validate+0x66>
	{
		return 0; // the string was too long so return an error
 8008c92:	2300      	movs	r3, #0
 8008c94:	e028      	b.n	8008ce8 <GPS_validate+0xb8>
	}

	if (nmeastr[i] == '*')
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8008ca0:	d119      	bne.n	8008cd6 <GPS_validate+0xa6>
	{
		check[0] = nmeastr[i + 1];    //put hex chars in check string
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	4413      	add	r3, r2
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	733b      	strb	r3, [r7, #12]
		check[1] = nmeastr[i + 2];
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	3302      	adds	r3, #2
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	737b      	strb	r3, [r7, #13]
		check[2] = 0;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	73bb      	strb	r3, [r7, #14]
	}
	else
		return 0;    // no checksum separator found there for invalid

	sprintf(checkcalcstr, "%02X", calculated_check);
 8008cbe:	f107 0308 	add.w	r3, r7, #8
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	490a      	ldr	r1, [pc, #40]	; (8008cf0 <GPS_validate+0xc0>)
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f00c fb08 	bl	80152dc <siprintf>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8008ccc:	7a3a      	ldrb	r2, [r7, #8]
 8008cce:	7b3b      	ldrb	r3, [r7, #12]
			1 : 0;
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d108      	bne.n	8008ce6 <GPS_validate+0xb6>
 8008cd4:	e001      	b.n	8008cda <GPS_validate+0xaa>
		return 0;    // no checksum separator found there for invalid
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	e006      	b.n	8008ce8 <GPS_validate+0xb8>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8008cda:	7a7a      	ldrb	r2, [r7, #9]
 8008cdc:	7b7b      	ldrb	r3, [r7, #13]
			1 : 0;
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d101      	bne.n	8008ce6 <GPS_validate+0xb6>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e000      	b.n	8008ce8 <GPS_validate+0xb8>
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3718      	adds	r7, #24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	0801be80 	.word	0x0801be80

08008cf4 <GPS_parse>:

void GPS_parse(char *GPSstrParse)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b08a      	sub	sp, #40	; 0x28
 8008cf8:	af08      	add	r7, sp, #32
 8008cfa:	6078      	str	r0, [r7, #4]
	if (!strncmp(GPSstrParse, "$GPGGA", 6))
 8008cfc:	2206      	movs	r2, #6
 8008cfe:	4964      	ldr	r1, [pc, #400]	; (8008e90 <GPS_parse+0x19c>)
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f00c fb84 	bl	801540e <strncmp>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d138      	bne.n	8008d7e <GPS_parse+0x8a>
	{
		if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c",
 8008d0c:	4b61      	ldr	r3, [pc, #388]	; (8008e94 <GPS_parse+0x1a0>)
 8008d0e:	9307      	str	r3, [sp, #28]
 8008d10:	4b61      	ldr	r3, [pc, #388]	; (8008e98 <GPS_parse+0x1a4>)
 8008d12:	9306      	str	r3, [sp, #24]
 8008d14:	4b61      	ldr	r3, [pc, #388]	; (8008e9c <GPS_parse+0x1a8>)
 8008d16:	9305      	str	r3, [sp, #20]
 8008d18:	4b61      	ldr	r3, [pc, #388]	; (8008ea0 <GPS_parse+0x1ac>)
 8008d1a:	9304      	str	r3, [sp, #16]
 8008d1c:	4b61      	ldr	r3, [pc, #388]	; (8008ea4 <GPS_parse+0x1b0>)
 8008d1e:	9303      	str	r3, [sp, #12]
 8008d20:	4b61      	ldr	r3, [pc, #388]	; (8008ea8 <GPS_parse+0x1b4>)
 8008d22:	9302      	str	r3, [sp, #8]
 8008d24:	4b61      	ldr	r3, [pc, #388]	; (8008eac <GPS_parse+0x1b8>)
 8008d26:	9301      	str	r3, [sp, #4]
 8008d28:	4b61      	ldr	r3, [pc, #388]	; (8008eb0 <GPS_parse+0x1bc>)
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	4b61      	ldr	r3, [pc, #388]	; (8008eb4 <GPS_parse+0x1c0>)
 8008d2e:	4a62      	ldr	r2, [pc, #392]	; (8008eb8 <GPS_parse+0x1c4>)
 8008d30:	4962      	ldr	r1, [pc, #392]	; (8008ebc <GPS_parse+0x1c8>)
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f00c faf2 	bl	801531c <siscanf>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f340 80a4 	ble.w	8008e88 <GPS_parse+0x194>
				&GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude,
				&GPS.ew, &GPS.fix, &GPS.num_of_satelites, &GPS.horizontal_dilution_of_precision,
				&GPS.mean_sea_level_altitude, &GPS.altitude_unit) >= 1)
		{
			GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8008d40:	4b5f      	ldr	r3, [pc, #380]	; (8008ec0 <GPS_parse+0x1cc>)
 8008d42:	edd3 7a04 	vldr	s15, [r3, #16]
 8008d46:	4b5e      	ldr	r3, [pc, #376]	; (8008ec0 <GPS_parse+0x1cc>)
 8008d48:	7d1b      	ldrb	r3, [r3, #20]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8008d50:	f000 f8da 	bl	8008f08 <GPS_nmea_to_dec>
 8008d54:	eef0 7a40 	vmov.f32	s15, s0
 8008d58:	4b59      	ldr	r3, [pc, #356]	; (8008ec0 <GPS_parse+0x1cc>)
 8008d5a:	edc3 7a01 	vstr	s15, [r3, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8008d5e:	4b58      	ldr	r3, [pc, #352]	; (8008ec0 <GPS_parse+0x1cc>)
 8008d60:	edd3 7a06 	vldr	s15, [r3, #24]
 8008d64:	4b56      	ldr	r3, [pc, #344]	; (8008ec0 <GPS_parse+0x1cc>)
 8008d66:	7f1b      	ldrb	r3, [r3, #28]
 8008d68:	4618      	mov	r0, r3
 8008d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8008d6e:	f000 f8cb 	bl	8008f08 <GPS_nmea_to_dec>
 8008d72:	eef0 7a40 	vmov.f32	s15, s0
 8008d76:	4b52      	ldr	r3, [pc, #328]	; (8008ec0 <GPS_parse+0x1cc>)
 8008d78:	edc3 7a00 	vstr	s15, [r3]
			return;
 8008d7c:	e084      	b.n	8008e88 <GPS_parse+0x194>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPRMC", 6))
 8008d7e:	2206      	movs	r2, #6
 8008d80:	4950      	ldr	r1, [pc, #320]	; (8008ec4 <GPS_parse+0x1d0>)
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f00c fb43 	bl	801540e <strncmp>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d123      	bne.n	8008dd6 <GPS_parse+0xe2>
	{
		if (sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time,
 8008d8e:	4b4e      	ldr	r3, [pc, #312]	; (8008ec8 <GPS_parse+0x1d4>)
 8008d90:	9305      	str	r3, [sp, #20]
 8008d92:	4b4e      	ldr	r3, [pc, #312]	; (8008ecc <GPS_parse+0x1d8>)
 8008d94:	9304      	str	r3, [sp, #16]
 8008d96:	4b4e      	ldr	r3, [pc, #312]	; (8008ed0 <GPS_parse+0x1dc>)
 8008d98:	9303      	str	r3, [sp, #12]
 8008d9a:	4b43      	ldr	r3, [pc, #268]	; (8008ea8 <GPS_parse+0x1b4>)
 8008d9c:	9302      	str	r3, [sp, #8]
 8008d9e:	4b43      	ldr	r3, [pc, #268]	; (8008eac <GPS_parse+0x1b8>)
 8008da0:	9301      	str	r3, [sp, #4]
 8008da2:	4b43      	ldr	r3, [pc, #268]	; (8008eb0 <GPS_parse+0x1bc>)
 8008da4:	9300      	str	r3, [sp, #0]
 8008da6:	4b43      	ldr	r3, [pc, #268]	; (8008eb4 <GPS_parse+0x1c0>)
 8008da8:	4a43      	ldr	r2, [pc, #268]	; (8008eb8 <GPS_parse+0x1c4>)
 8008daa:	494a      	ldr	r1, [pc, #296]	; (8008ed4 <GPS_parse+0x1e0>)
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f00c fab5 	bl	801531c <siscanf>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	dd67      	ble.n	8008e88 <GPS_parse+0x194>
				&GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew,
				&GPS.speed_over_ground, &GPS.course_over_ground, &GPS.utc_date) >= 1)
		{
			if (GPS.ns == '\0')
 8008db8:	4b41      	ldr	r3, [pc, #260]	; (8008ec0 <GPS_parse+0x1cc>)
 8008dba:	7d1b      	ldrb	r3, [r3, #20]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d102      	bne.n	8008dc6 <GPS_parse+0xd2>
				GPS.ns = ' ';
 8008dc0:	4b3f      	ldr	r3, [pc, #252]	; (8008ec0 <GPS_parse+0x1cc>)
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8008dc6:	4b3e      	ldr	r3, [pc, #248]	; (8008ec0 <GPS_parse+0x1cc>)
 8008dc8:	7f1b      	ldrb	r3, [r3, #28]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d157      	bne.n	8008e7e <GPS_parse+0x18a>
				GPS.ew = ' ';
 8008dce:	4b3c      	ldr	r3, [pc, #240]	; (8008ec0 <GPS_parse+0x1cc>)
 8008dd0:	2220      	movs	r2, #32
 8008dd2:	771a      	strb	r2, [r3, #28]
			return;
 8008dd4:	e053      	b.n	8008e7e <GPS_parse+0x18a>
		}

	}
	else if (!strncmp(GPSstrParse, "$GPGLL", 6))
 8008dd6:	2206      	movs	r2, #6
 8008dd8:	493f      	ldr	r1, [pc, #252]	; (8008ed8 <GPS_parse+0x1e4>)
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f00c fb17 	bl	801540e <strncmp>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d11f      	bne.n	8008e26 <GPS_parse+0x132>
	{
		if (sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude,
 8008de6:	4b3d      	ldr	r3, [pc, #244]	; (8008edc <GPS_parse+0x1e8>)
 8008de8:	9303      	str	r3, [sp, #12]
 8008dea:	4b33      	ldr	r3, [pc, #204]	; (8008eb8 <GPS_parse+0x1c4>)
 8008dec:	9302      	str	r3, [sp, #8]
 8008dee:	4b2e      	ldr	r3, [pc, #184]	; (8008ea8 <GPS_parse+0x1b4>)
 8008df0:	9301      	str	r3, [sp, #4]
 8008df2:	4b2e      	ldr	r3, [pc, #184]	; (8008eac <GPS_parse+0x1b8>)
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	4b2e      	ldr	r3, [pc, #184]	; (8008eb0 <GPS_parse+0x1bc>)
 8008df8:	4a2e      	ldr	r2, [pc, #184]	; (8008eb4 <GPS_parse+0x1c0>)
 8008dfa:	4939      	ldr	r1, [pc, #228]	; (8008ee0 <GPS_parse+0x1ec>)
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f00c fa8d 	bl	801531c <siscanf>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	dd3f      	ble.n	8008e88 <GPS_parse+0x194>
				&GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time,
				&GPS.gll_status) >= 1)
		{
			if (GPS.ns == '\0')
 8008e08:	4b2d      	ldr	r3, [pc, #180]	; (8008ec0 <GPS_parse+0x1cc>)
 8008e0a:	7d1b      	ldrb	r3, [r3, #20]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d102      	bne.n	8008e16 <GPS_parse+0x122>
				GPS.ns = '?';
 8008e10:	4b2b      	ldr	r3, [pc, #172]	; (8008ec0 <GPS_parse+0x1cc>)
 8008e12:	223f      	movs	r2, #63	; 0x3f
 8008e14:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8008e16:	4b2a      	ldr	r3, [pc, #168]	; (8008ec0 <GPS_parse+0x1cc>)
 8008e18:	7f1b      	ldrb	r3, [r3, #28]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d131      	bne.n	8008e82 <GPS_parse+0x18e>
				GPS.ew = '?';
 8008e1e:	4b28      	ldr	r3, [pc, #160]	; (8008ec0 <GPS_parse+0x1cc>)
 8008e20:	223f      	movs	r2, #63	; 0x3f
 8008e22:	771a      	strb	r2, [r3, #28]
			return;
 8008e24:	e02d      	b.n	8008e82 <GPS_parse+0x18e>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPVTG", 6))
 8008e26:	2206      	movs	r2, #6
 8008e28:	492e      	ldr	r1, [pc, #184]	; (8008ee4 <GPS_parse+0x1f0>)
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f00c faef 	bl	801540e <strncmp>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d128      	bne.n	8008e88 <GPS_parse+0x194>
	{
		if (sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t,
 8008e36:	4b2c      	ldr	r3, [pc, #176]	; (8008ee8 <GPS_parse+0x1f4>)
 8008e38:	9305      	str	r3, [sp, #20]
 8008e3a:	4b2c      	ldr	r3, [pc, #176]	; (8008eec <GPS_parse+0x1f8>)
 8008e3c:	9304      	str	r3, [sp, #16]
 8008e3e:	4b2c      	ldr	r3, [pc, #176]	; (8008ef0 <GPS_parse+0x1fc>)
 8008e40:	9303      	str	r3, [sp, #12]
 8008e42:	4b23      	ldr	r3, [pc, #140]	; (8008ed0 <GPS_parse+0x1dc>)
 8008e44:	9302      	str	r3, [sp, #8]
 8008e46:	4b2b      	ldr	r3, [pc, #172]	; (8008ef4 <GPS_parse+0x200>)
 8008e48:	9301      	str	r3, [sp, #4]
 8008e4a:	4b2b      	ldr	r3, [pc, #172]	; (8008ef8 <GPS_parse+0x204>)
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	4b2b      	ldr	r3, [pc, #172]	; (8008efc <GPS_parse+0x208>)
 8008e50:	4a2b      	ldr	r2, [pc, #172]	; (8008f00 <GPS_parse+0x20c>)
 8008e52:	492c      	ldr	r1, [pc, #176]	; (8008f04 <GPS_parse+0x210>)
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f00c fa61 	bl	801531c <siscanf>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	dd13      	ble.n	8008e88 <GPS_parse+0x194>
				&GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit,
				&GPS.speed_over_ground, &GPS.speed_k_unit, &GPS.speed_km,
				&GPS.speed_km_unit) >= 1)
		{
			if (GPS.ns == '\0')
 8008e60:	4b17      	ldr	r3, [pc, #92]	; (8008ec0 <GPS_parse+0x1cc>)
 8008e62:	7d1b      	ldrb	r3, [r3, #20]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d102      	bne.n	8008e6e <GPS_parse+0x17a>
				GPS.ns = '?';
 8008e68:	4b15      	ldr	r3, [pc, #84]	; (8008ec0 <GPS_parse+0x1cc>)
 8008e6a:	223f      	movs	r2, #63	; 0x3f
 8008e6c:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8008e6e:	4b14      	ldr	r3, [pc, #80]	; (8008ec0 <GPS_parse+0x1cc>)
 8008e70:	7f1b      	ldrb	r3, [r3, #28]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d107      	bne.n	8008e86 <GPS_parse+0x192>
				GPS.ew = '?';
 8008e76:	4b12      	ldr	r3, [pc, #72]	; (8008ec0 <GPS_parse+0x1cc>)
 8008e78:	223f      	movs	r2, #63	; 0x3f
 8008e7a:	771a      	strb	r2, [r3, #28]
			return;
 8008e7c:	e003      	b.n	8008e86 <GPS_parse+0x192>
			return;
 8008e7e:	bf00      	nop
 8008e80:	e002      	b.n	8008e88 <GPS_parse+0x194>
			return;
 8008e82:	bf00      	nop
 8008e84:	e000      	b.n	8008e88 <GPS_parse+0x194>
			return;
 8008e86:	bf00      	nop
		}
	}
}
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	0801be88 	.word	0x0801be88
 8008e94:	20000558 	.word	0x20000558
 8008e98:	20000554 	.word	0x20000554
 8008e9c:	20000550 	.word	0x20000550
 8008ea0:	2000054c 	.word	0x2000054c
 8008ea4:	20000548 	.word	0x20000548
 8008ea8:	20000544 	.word	0x20000544
 8008eac:	20000540 	.word	0x20000540
 8008eb0:	2000053c 	.word	0x2000053c
 8008eb4:	20000538 	.word	0x20000538
 8008eb8:	20000534 	.word	0x20000534
 8008ebc:	0801be90 	.word	0x0801be90
 8008ec0:	20000528 	.word	0x20000528
 8008ec4:	0801beb8 	.word	0x0801beb8
 8008ec8:	20000564 	.word	0x20000564
 8008ecc:	20000560 	.word	0x20000560
 8008ed0:	2000055c 	.word	0x2000055c
 8008ed4:	0801bec0 	.word	0x0801bec0
 8008ed8:	0801bee0 	.word	0x0801bee0
 8008edc:	20000568 	.word	0x20000568
 8008ee0:	0801bee8 	.word	0x0801bee8
 8008ee4:	0801bf04 	.word	0x0801bf04
 8008ee8:	20000580 	.word	0x20000580
 8008eec:	2000057c 	.word	0x2000057c
 8008ef0:	20000579 	.word	0x20000579
 8008ef4:	20000578 	.word	0x20000578
 8008ef8:	20000574 	.word	0x20000574
 8008efc:	20000570 	.word	0x20000570
 8008f00:	2000056c 	.word	0x2000056c
 8008f04:	0801bf0c 	.word	0x0801bf0c

08008f08 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b087      	sub	sp, #28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8008f12:	4603      	mov	r3, r0
 8008f14:	70fb      	strb	r3, [r7, #3]
	int degree = (int) (deg_coord / 100);
 8008f16:	ed97 7a01 	vldr	s14, [r7, #4]
 8008f1a:	eddf 6a20 	vldr	s13, [pc, #128]	; 8008f9c <GPS_nmea_to_dec+0x94>
 8008f1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f26:	ee17 3a90 	vmov	r3, s15
 8008f2a:	613b      	str	r3, [r7, #16]
	float minutes = deg_coord - degree * 100;
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	2264      	movs	r2, #100	; 0x64
 8008f30:	fb02 f303 	mul.w	r3, r2, r3
 8008f34:	ee07 3a90 	vmov	s15, r3
 8008f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8008f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f44:	edc7 7a03 	vstr	s15, [r7, #12]
	float dec_deg = minutes / 60;
 8008f48:	ed97 7a03 	vldr	s14, [r7, #12]
 8008f4c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8008fa0 <GPS_nmea_to_dec+0x98>
 8008f50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f54:	edc7 7a02 	vstr	s15, [r7, #8]
	float decimal = degree + dec_deg;
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	ee07 3a90 	vmov	s15, r3
 8008f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f62:	ed97 7a02 	vldr	s14, [r7, #8]
 8008f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f6a:	edc7 7a05 	vstr	s15, [r7, #20]
	if (nsew == 'S' || nsew == 'W')
 8008f6e:	78fb      	ldrb	r3, [r7, #3]
 8008f70:	2b53      	cmp	r3, #83	; 0x53
 8008f72:	d002      	beq.n	8008f7a <GPS_nmea_to_dec+0x72>
 8008f74:	78fb      	ldrb	r3, [r7, #3]
 8008f76:	2b57      	cmp	r3, #87	; 0x57
 8008f78:	d105      	bne.n	8008f86 <GPS_nmea_to_dec+0x7e>
	{ // return negative
		decimal *= -1;
 8008f7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f7e:	eef1 7a67 	vneg.f32	s15, s15
 8008f82:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return decimal;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	ee07 3a90 	vmov	s15, r3
}
 8008f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8008f90:	371c      	adds	r7, #28
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	42c80000 	.word	0x42c80000
 8008fa0:	42700000 	.word	0x42700000

08008fa4 <HMC5883L_Init>:
#include "GY-271/HMC5883L.h"
#include "Globals.h"


uint8_t HMC5883L_Init()
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	af00      	add	r7, sp, #0
	HMC5883L_setRange(HMC5883L_RANGE_8_1GA);
 8008fa8:	2007      	movs	r0, #7
 8008faa:	f000 f871 	bl	8009090 <HMC5883L_setRange>
	HMC5883L_setMeasurementMode(HMC5883L_CONTINOUS);
 8008fae:	2000      	movs	r0, #0
 8008fb0:	f000 f8c8 	bl	8009144 <HMC5883L_setMeasurementMode>
	HMC5883L_setDataRate(HMC5883L_DATARATE_30HZ);
 8008fb4:	2005      	movs	r0, #5
 8008fb6:	f000 f8e0 	bl	800917a <HMC5883L_setDataRate>
	HMC5883L_setSamples(HMC5883L_SAMPLES_4);
 8008fba:	2002      	movs	r0, #2
 8008fbc:	f000 f8fc 	bl	80091b8 <HMC5883L_setSamples>
	HMC5883L_setOffset(0, 0);
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	f000 f84e 	bl	8009064 <HMC5883L_setOffset>

	return 0;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	bd80      	pop	{r7, pc}
	...

08008fd0 <HMC5883L_readRaw>:

Vector HMC5883L_readRaw(void)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b088      	sub	sp, #32
 8008fd4:	af00      	add	r7, sp, #0
    v.XAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_X_M) - xOffset;
 8008fd6:	2003      	movs	r0, #3
 8008fd8:	f000 f946 	bl	8009268 <HMC5883L_readRegister16>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	461a      	mov	r2, r3
 8008fe0:	4b1d      	ldr	r3, [pc, #116]	; (8009058 <HMC5883L_readRaw+0x88>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fee:	4b1b      	ldr	r3, [pc, #108]	; (800905c <HMC5883L_readRaw+0x8c>)
 8008ff0:	edc3 7a00 	vstr	s15, [r3]
    v.YAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Y_M) - yOffset;
 8008ff4:	2007      	movs	r0, #7
 8008ff6:	f000 f937 	bl	8009268 <HMC5883L_readRegister16>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	4b18      	ldr	r3, [pc, #96]	; (8009060 <HMC5883L_readRaw+0x90>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	ee07 3a90 	vmov	s15, r3
 8009008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800900c:	4b13      	ldr	r3, [pc, #76]	; (800905c <HMC5883L_readRaw+0x8c>)
 800900e:	edc3 7a01 	vstr	s15, [r3, #4]
    v.ZAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Z_M);
 8009012:	2005      	movs	r0, #5
 8009014:	f000 f928 	bl	8009268 <HMC5883L_readRegister16>
 8009018:	4603      	mov	r3, r0
 800901a:	ee07 3a90 	vmov	s15, r3
 800901e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009022:	4b0e      	ldr	r3, [pc, #56]	; (800905c <HMC5883L_readRaw+0x8c>)
 8009024:	edc3 7a02 	vstr	s15, [r3, #8]

    return v;
 8009028:	4a0c      	ldr	r2, [pc, #48]	; (800905c <HMC5883L_readRaw+0x8c>)
 800902a:	f107 0314 	add.w	r3, r7, #20
 800902e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009030:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009034:	6979      	ldr	r1, [r7, #20]
 8009036:	69ba      	ldr	r2, [r7, #24]
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	ee06 1a90 	vmov	s13, r1
 800903e:	ee07 2a10 	vmov	s14, r2
 8009042:	ee07 3a90 	vmov	s15, r3
}
 8009046:	eeb0 0a66 	vmov.f32	s0, s13
 800904a:	eef0 0a47 	vmov.f32	s1, s14
 800904e:	eeb0 1a67 	vmov.f32	s2, s15
 8009052:	3720      	adds	r7, #32
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	20000434 	.word	0x20000434
 800905c:	20000428 	.word	0x20000428
 8009060:	20000438 	.word	0x20000438

08009064 <HMC5883L_setOffset>:

    return v;
}

void HMC5883L_setOffset(int xo, int yo)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
    xOffset = xo;
 800906e:	4a06      	ldr	r2, [pc, #24]	; (8009088 <HMC5883L_setOffset+0x24>)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6013      	str	r3, [r2, #0]
    yOffset = yo;
 8009074:	4a05      	ldr	r2, [pc, #20]	; (800908c <HMC5883L_setOffset+0x28>)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	6013      	str	r3, [r2, #0]
}
 800907a:	bf00      	nop
 800907c:	370c      	adds	r7, #12
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	20000434 	.word	0x20000434
 800908c:	20000438 	.word	0x20000438

08009090 <HMC5883L_setRange>:

void HMC5883L_setRange(uint8_t range)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	4603      	mov	r3, r0
 8009098:	71fb      	strb	r3, [r7, #7]
    switch(range)
 800909a:	79fb      	ldrb	r3, [r7, #7]
 800909c:	2b07      	cmp	r3, #7
 800909e:	d833      	bhi.n	8009108 <HMC5883L_setRange+0x78>
 80090a0:	a201      	add	r2, pc, #4	; (adr r2, 80090a8 <HMC5883L_setRange+0x18>)
 80090a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a6:	bf00      	nop
 80090a8:	080090c9 	.word	0x080090c9
 80090ac:	080090d1 	.word	0x080090d1
 80090b0:	080090d9 	.word	0x080090d9
 80090b4:	080090e1 	.word	0x080090e1
 80090b8:	080090e9 	.word	0x080090e9
 80090bc:	080090f1 	.word	0x080090f1
 80090c0:	080090f9 	.word	0x080090f9
 80090c4:	08009101 	.word	0x08009101
    {
	case HMC5883L_RANGE_0_88GA:
	    mG_per_LSB = 0.073f;
 80090c8:	4b15      	ldr	r3, [pc, #84]	; (8009120 <HMC5883L_setRange+0x90>)
 80090ca:	4a16      	ldr	r2, [pc, #88]	; (8009124 <HMC5883L_setRange+0x94>)
 80090cc:	601a      	str	r2, [r3, #0]
	    break;
 80090ce:	e01c      	b.n	800910a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_3GA:
	    mG_per_LSB = 0.92f;
 80090d0:	4b13      	ldr	r3, [pc, #76]	; (8009120 <HMC5883L_setRange+0x90>)
 80090d2:	4a15      	ldr	r2, [pc, #84]	; (8009128 <HMC5883L_setRange+0x98>)
 80090d4:	601a      	str	r2, [r3, #0]
	    break;
 80090d6:	e018      	b.n	800910a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_9GA:
	    mG_per_LSB = 1.22f;
 80090d8:	4b11      	ldr	r3, [pc, #68]	; (8009120 <HMC5883L_setRange+0x90>)
 80090da:	4a14      	ldr	r2, [pc, #80]	; (800912c <HMC5883L_setRange+0x9c>)
 80090dc:	601a      	str	r2, [r3, #0]
	    break;
 80090de:	e014      	b.n	800910a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_2_5GA:
	    mG_per_LSB = 1.52f;
 80090e0:	4b0f      	ldr	r3, [pc, #60]	; (8009120 <HMC5883L_setRange+0x90>)
 80090e2:	4a13      	ldr	r2, [pc, #76]	; (8009130 <HMC5883L_setRange+0xa0>)
 80090e4:	601a      	str	r2, [r3, #0]
	    break;
 80090e6:	e010      	b.n	800910a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4GA:
	    mG_per_LSB = 2.27f;
 80090e8:	4b0d      	ldr	r3, [pc, #52]	; (8009120 <HMC5883L_setRange+0x90>)
 80090ea:	4a12      	ldr	r2, [pc, #72]	; (8009134 <HMC5883L_setRange+0xa4>)
 80090ec:	601a      	str	r2, [r3, #0]
	    break;
 80090ee:	e00c      	b.n	800910a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4_7GA:
	    mG_per_LSB = 2.56f;
 80090f0:	4b0b      	ldr	r3, [pc, #44]	; (8009120 <HMC5883L_setRange+0x90>)
 80090f2:	4a11      	ldr	r2, [pc, #68]	; (8009138 <HMC5883L_setRange+0xa8>)
 80090f4:	601a      	str	r2, [r3, #0]
	    break;
 80090f6:	e008      	b.n	800910a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_5_6GA:
	    mG_per_LSB = 3.03f;
 80090f8:	4b09      	ldr	r3, [pc, #36]	; (8009120 <HMC5883L_setRange+0x90>)
 80090fa:	4a10      	ldr	r2, [pc, #64]	; (800913c <HMC5883L_setRange+0xac>)
 80090fc:	601a      	str	r2, [r3, #0]
	    break;
 80090fe:	e004      	b.n	800910a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_8_1GA:
	    mG_per_LSB = 4.35f;
 8009100:	4b07      	ldr	r3, [pc, #28]	; (8009120 <HMC5883L_setRange+0x90>)
 8009102:	4a0f      	ldr	r2, [pc, #60]	; (8009140 <HMC5883L_setRange+0xb0>)
 8009104:	601a      	str	r2, [r3, #0]
	    break;
 8009106:	e000      	b.n	800910a <HMC5883L_setRange+0x7a>

	default:
	    break;
 8009108:	bf00      	nop
    }

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_B, range << 5);
 800910a:	79fb      	ldrb	r3, [r7, #7]
 800910c:	015b      	lsls	r3, r3, #5
 800910e:	b2db      	uxtb	r3, r3
 8009110:	4619      	mov	r1, r3
 8009112:	2001      	movs	r0, #1
 8009114:	f000 f870 	bl	80091f8 <HMC5883L_writeRegister8>
}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	20000424 	.word	0x20000424
 8009124:	3d958106 	.word	0x3d958106
 8009128:	3f6b851f 	.word	0x3f6b851f
 800912c:	3f9c28f6 	.word	0x3f9c28f6
 8009130:	3fc28f5c 	.word	0x3fc28f5c
 8009134:	401147ae 	.word	0x401147ae
 8009138:	4023d70a 	.word	0x4023d70a
 800913c:	4041eb85 	.word	0x4041eb85
 8009140:	408b3333 	.word	0x408b3333

08009144 <HMC5883L_setMeasurementMode>:
{
    return (uint8_t)((HMC5883L_readRegister8(HMC5883L_REG_CONFIG_B) >> 5));
}

void HMC5883L_setMeasurementMode(uint8_t mode)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	4603      	mov	r3, r0
 800914c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_MODE);
 800914e:	2002      	movs	r0, #2
 8009150:	f000 f86e 	bl	8009230 <HMC5883L_readRegister8>
 8009154:	4603      	mov	r3, r0
 8009156:	73fb      	strb	r3, [r7, #15]
    value &= 0b11111100;
 8009158:	7bfb      	ldrb	r3, [r7, #15]
 800915a:	f023 0303 	bic.w	r3, r3, #3
 800915e:	73fb      	strb	r3, [r7, #15]
    value |= mode;
 8009160:	7bfa      	ldrb	r2, [r7, #15]
 8009162:	79fb      	ldrb	r3, [r7, #7]
 8009164:	4313      	orrs	r3, r2
 8009166:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_MODE, value);
 8009168:	7bfb      	ldrb	r3, [r7, #15]
 800916a:	4619      	mov	r1, r3
 800916c:	2002      	movs	r0, #2
 800916e:	f000 f843 	bl	80091f8 <HMC5883L_writeRegister8>
}
 8009172:	bf00      	nop
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <HMC5883L_setDataRate>:

    return value;
}

void HMC5883L_setDataRate(uint8_t dataRate)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b084      	sub	sp, #16
 800917e:	af00      	add	r7, sp, #0
 8009180:	4603      	mov	r3, r0
 8009182:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 8009184:	2000      	movs	r0, #0
 8009186:	f000 f853 	bl	8009230 <HMC5883L_readRegister8>
 800918a:	4603      	mov	r3, r0
 800918c:	73fb      	strb	r3, [r7, #15]
    value &= 0b11100011;
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	f023 031c 	bic.w	r3, r3, #28
 8009194:	73fb      	strb	r3, [r7, #15]
    value |= (dataRate << 2);
 8009196:	79fb      	ldrb	r3, [r7, #7]
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	b25a      	sxtb	r2, r3
 800919c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	b25b      	sxtb	r3, r3
 80091a4:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 80091a6:	7bfb      	ldrb	r3, [r7, #15]
 80091a8:	4619      	mov	r1, r3
 80091aa:	2000      	movs	r0, #0
 80091ac:	f000 f824 	bl	80091f8 <HMC5883L_writeRegister8>
}
 80091b0:	bf00      	nop
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <HMC5883L_setSamples>:

    return value;
}

void HMC5883L_setSamples(uint8_t samples)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	4603      	mov	r3, r0
 80091c0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 80091c2:	2000      	movs	r0, #0
 80091c4:	f000 f834 	bl	8009230 <HMC5883L_readRegister8>
 80091c8:	4603      	mov	r3, r0
 80091ca:	73fb      	strb	r3, [r7, #15]
    value &= 0b10011111;
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
 80091ce:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80091d2:	73fb      	strb	r3, [r7, #15]
    value |= (samples << 5);
 80091d4:	79fb      	ldrb	r3, [r7, #7]
 80091d6:	015b      	lsls	r3, r3, #5
 80091d8:	b25a      	sxtb	r2, r3
 80091da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091de:	4313      	orrs	r3, r2
 80091e0:	b25b      	sxtb	r3, r3
 80091e2:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
 80091e6:	4619      	mov	r1, r3
 80091e8:	2000      	movs	r0, #0
 80091ea:	f000 f805 	bl	80091f8 <HMC5883L_writeRegister8>
}
 80091ee:	bf00      	nop
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
	...

080091f8 <HMC5883L_writeRegister8>:
    return value;
}

// Write byte to register
void HMC5883L_writeRegister8(uint8_t reg, uint8_t value)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af04      	add	r7, sp, #16
 80091fe:	4603      	mov	r3, r0
 8009200:	460a      	mov	r2, r1
 8009202:	71fb      	strb	r3, [r7, #7]
 8009204:	4613      	mov	r3, r2
 8009206:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1 , &value, 1, 500);
 8009208:	79fb      	ldrb	r3, [r7, #7]
 800920a:	b29a      	uxth	r2, r3
 800920c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009210:	9302      	str	r3, [sp, #8]
 8009212:	2301      	movs	r3, #1
 8009214:	9301      	str	r3, [sp, #4]
 8009216:	1dbb      	adds	r3, r7, #6
 8009218:	9300      	str	r3, [sp, #0]
 800921a:	2301      	movs	r3, #1
 800921c:	213c      	movs	r1, #60	; 0x3c
 800921e:	4803      	ldr	r0, [pc, #12]	; (800922c <HMC5883L_writeRegister8+0x34>)
 8009220:	f002 fb9a 	bl	800b958 <HAL_I2C_Mem_Write>
}
 8009224:	bf00      	nop
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	2000097c 	.word	0x2000097c

08009230 <HMC5883L_readRegister8>:
    return value;
}

// Read byte from register
uint8_t HMC5883L_readRegister8(uint8_t reg)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b088      	sub	sp, #32
 8009234:	af04      	add	r7, sp, #16
 8009236:	4603      	mov	r3, r0
 8009238:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 1, 500);
 800923a:	79fb      	ldrb	r3, [r7, #7]
 800923c:	b29a      	uxth	r2, r3
 800923e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009242:	9302      	str	r3, [sp, #8]
 8009244:	2301      	movs	r3, #1
 8009246:	9301      	str	r3, [sp, #4]
 8009248:	f107 030f 	add.w	r3, r7, #15
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	2301      	movs	r3, #1
 8009250:	213c      	movs	r1, #60	; 0x3c
 8009252:	4804      	ldr	r0, [pc, #16]	; (8009264 <HMC5883L_readRegister8+0x34>)
 8009254:	f002 fc94 	bl	800bb80 <HAL_I2C_Mem_Read>
    return value;
 8009258:	7bfb      	ldrb	r3, [r7, #15]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	2000097c 	.word	0x2000097c

08009268 <HMC5883L_readRegister16>:

// Read word from register
int16_t HMC5883L_readRegister16(uint8_t reg)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b088      	sub	sp, #32
 800926c:	af04      	add	r7, sp, #16
 800926e:	4603      	mov	r3, r0
 8009270:	71fb      	strb	r3, [r7, #7]
    int16_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 2, 500);
 8009272:	79fb      	ldrb	r3, [r7, #7]
 8009274:	b29a      	uxth	r2, r3
 8009276:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800927a:	9302      	str	r3, [sp, #8]
 800927c:	2302      	movs	r3, #2
 800927e:	9301      	str	r3, [sp, #4]
 8009280:	f107 030e 	add.w	r3, r7, #14
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	2301      	movs	r3, #1
 8009288:	213c      	movs	r1, #60	; 0x3c
 800928a:	4804      	ldr	r0, [pc, #16]	; (800929c <HMC5883L_readRegister16+0x34>)
 800928c:	f002 fc78 	bl	800bb80 <HAL_I2C_Mem_Read>
    return value;
 8009290:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	2000097c 	.word	0x2000097c

080092a0 <BMP280_initialize>:

/** Initialize the device with desired configuration
 * @return 1, if device is not recognized, 0 otherwise.
 * */
uint8_t BMP280_initialize(SPI_HandleTypeDef *SPIx, BMP280_t *bmp280)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
	// Disable MPU9250
	HAL_GPIO_WritePin(SPI2_IMU_CSIMU_GPIO_Port, SPI2_IMU_CSIMU_Pin, GPIO_PIN_SET);
 80092aa:	2201      	movs	r2, #1
 80092ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80092b0:	481a      	ldr	r0, [pc, #104]	; (800931c <BMP280_initialize+0x7c>)
 80092b2:	f002 faa7 	bl	800b804 <HAL_GPIO_WritePin>

	bmp280->spiHandle = SPIx;
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	601a      	str	r2, [r3, #0]

    if (BMP280_getID(bmp280) != BMP280_CHIP_ID)
 80092bc:	6838      	ldr	r0, [r7, #0]
 80092be:	f000 f83c 	bl	800933a <BMP280_getID>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b58      	cmp	r3, #88	; 0x58
 80092c6:	d001      	beq.n	80092cc <BMP280_initialize+0x2c>
    {
        return 1;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e023      	b.n	8009314 <BMP280_initialize+0x74>
    }

    // Reset device and wait
    BMP280_reset(bmp280);
 80092cc:	6838      	ldr	r0, [r7, #0]
 80092ce:	f000 f827 	bl	8009320 <BMP280_reset>
    HAL_Delay(500);
 80092d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092d6:	f001 fbe9 	bl	800aaac <HAL_Delay>

    // BEGIN OF CONFIGURATION ----------------------------------
    BMP280_setPressureOversampling(bmp280, oversampling_x16);
 80092da:	2105      	movs	r1, #5
 80092dc:	6838      	ldr	r0, [r7, #0]
 80092de:	f000 f8ef 	bl	80094c0 <BMP280_setPressureOversampling>
    BMP280_setTemperatureOversampling(bmp280, oversampling_x2);
 80092e2:	2102      	movs	r1, #2
 80092e4:	6838      	ldr	r0, [r7, #0]
 80092e6:	f000 f90c 	bl	8009502 <BMP280_setTemperatureOversampling>

    BMP280_setPowerMode(bmp280, mode_normal);
 80092ea:	2103      	movs	r1, #3
 80092ec:	6838      	ldr	r0, [r7, #0]
 80092ee:	f000 f929 	bl	8009544 <BMP280_setPowerMode>
    BMP280_setFilterCoefficient(bmp280, filter_coeff_16);
 80092f2:	2104      	movs	r1, #4
 80092f4:	6838      	ldr	r0, [r7, #0]
 80092f6:	f000 f966 	bl	80095c6 <BMP280_setFilterCoefficient>
    BMP280_setStandbyTime(bmp280, standby_time_500us);
 80092fa:	2100      	movs	r1, #0
 80092fc:	6838      	ldr	r0, [r7, #0]
 80092fe:	f000 f941 	bl	8009584 <BMP280_setStandbyTime>
    // END OF CONFIGURATION --------------------------

    BMP280_readCompensationParameters(bmp280);
 8009302:	6838      	ldr	r0, [r7, #0]
 8009304:	f000 f826 	bl	8009354 <BMP280_readCompensationParameters>
    BMP280_setReferencePressure(bmp280, 100, 50);
 8009308:	2232      	movs	r2, #50	; 0x32
 800930a:	2164      	movs	r1, #100	; 0x64
 800930c:	6838      	ldr	r0, [r7, #0]
 800930e:	f000 f89e 	bl	800944e <BMP280_setReferencePressure>

    return 0;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	40020c00 	.word	0x40020c00

08009320 <BMP280_reset>:

/** Perform power-on reset procedure */
void BMP280_reset(BMP280_t *bmp280)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
    BMP280_writeRegister(bmp280, BMP280_REG_RESET, BMP280_RESET_VALUE);
 8009328:	22b6      	movs	r2, #182	; 0xb6
 800932a:	21e0      	movs	r1, #224	; 0xe0
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fa25 	bl	800977c <BMP280_writeRegister>
}
 8009332:	bf00      	nop
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <BMP280_getID>:
/**
 * Read chip identification number.
 * @return chip ID
 * */
uint8_t BMP280_getID(BMP280_t *bmp280)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b082      	sub	sp, #8
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
    return BMP280_readRegister(bmp280, BMP280_REG_ID);
 8009342:	21d0      	movs	r1, #208	; 0xd0
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 f9fd 	bl	8009744 <BMP280_readRegister>
 800934a:	4603      	mov	r3, r0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <BMP280_readCompensationParameters>:

void BMP280_readCompensationParameters(BMP280_t *bmp280)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b088      	sub	sp, #32
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
    uint8_t buf[24];
    BMP280_readMBRegister(bmp280, BMP280_REG_CALIB, buf, 24);
 800935c:	f107 0208 	add.w	r2, r7, #8
 8009360:	2318      	movs	r3, #24
 8009362:	2188      	movs	r1, #136	; 0x88
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 fa28 	bl	80097ba <BMP280_readMBRegister>
    bmp280->compensationParameters.dig_t1 = ((buf[1] << 8) | buf[0]);
 800936a:	7a7b      	ldrb	r3, [r7, #9]
 800936c:	021b      	lsls	r3, r3, #8
 800936e:	b21a      	sxth	r2, r3
 8009370:	7a3b      	ldrb	r3, [r7, #8]
 8009372:	b21b      	sxth	r3, r3
 8009374:	4313      	orrs	r3, r2
 8009376:	b21b      	sxth	r3, r3
 8009378:	b29a      	uxth	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	831a      	strh	r2, [r3, #24]
    bmp280->compensationParameters.dig_t2 = ((buf[3] << 8) | buf[2]);
 800937e:	7afb      	ldrb	r3, [r7, #11]
 8009380:	021b      	lsls	r3, r3, #8
 8009382:	b21a      	sxth	r2, r3
 8009384:	7abb      	ldrb	r3, [r7, #10]
 8009386:	b21b      	sxth	r3, r3
 8009388:	4313      	orrs	r3, r2
 800938a:	b21a      	sxth	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	835a      	strh	r2, [r3, #26]
    bmp280->compensationParameters.dig_t3 = ((buf[5] << 8) | buf[4]);
 8009390:	7b7b      	ldrb	r3, [r7, #13]
 8009392:	021b      	lsls	r3, r3, #8
 8009394:	b21a      	sxth	r2, r3
 8009396:	7b3b      	ldrb	r3, [r7, #12]
 8009398:	b21b      	sxth	r3, r3
 800939a:	4313      	orrs	r3, r2
 800939c:	b21a      	sxth	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	839a      	strh	r2, [r3, #28]
    bmp280->compensationParameters.dig_p1 = ((buf[7] << 8) | buf[6]);
 80093a2:	7bfb      	ldrb	r3, [r7, #15]
 80093a4:	021b      	lsls	r3, r3, #8
 80093a6:	b21a      	sxth	r2, r3
 80093a8:	7bbb      	ldrb	r3, [r7, #14]
 80093aa:	b21b      	sxth	r3, r3
 80093ac:	4313      	orrs	r3, r2
 80093ae:	b21b      	sxth	r3, r3
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	83da      	strh	r2, [r3, #30]
    bmp280->compensationParameters.dig_p2 = ((buf[9] << 8) | buf[8]);
 80093b6:	7c7b      	ldrb	r3, [r7, #17]
 80093b8:	021b      	lsls	r3, r3, #8
 80093ba:	b21a      	sxth	r2, r3
 80093bc:	7c3b      	ldrb	r3, [r7, #16]
 80093be:	b21b      	sxth	r3, r3
 80093c0:	4313      	orrs	r3, r2
 80093c2:	b21a      	sxth	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	841a      	strh	r2, [r3, #32]
    bmp280->compensationParameters.dig_p3 = ((buf[11] << 8) | buf[10]);
 80093c8:	7cfb      	ldrb	r3, [r7, #19]
 80093ca:	021b      	lsls	r3, r3, #8
 80093cc:	b21a      	sxth	r2, r3
 80093ce:	7cbb      	ldrb	r3, [r7, #18]
 80093d0:	b21b      	sxth	r3, r3
 80093d2:	4313      	orrs	r3, r2
 80093d4:	b21a      	sxth	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	845a      	strh	r2, [r3, #34]	; 0x22
    bmp280->compensationParameters.dig_p4 = ((buf[13] << 8) | buf[12]);
 80093da:	7d7b      	ldrb	r3, [r7, #21]
 80093dc:	021b      	lsls	r3, r3, #8
 80093de:	b21a      	sxth	r2, r3
 80093e0:	7d3b      	ldrb	r3, [r7, #20]
 80093e2:	b21b      	sxth	r3, r3
 80093e4:	4313      	orrs	r3, r2
 80093e6:	b21a      	sxth	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	849a      	strh	r2, [r3, #36]	; 0x24
    bmp280->compensationParameters.dig_p5 = ((buf[15] << 8) | buf[14]);
 80093ec:	7dfb      	ldrb	r3, [r7, #23]
 80093ee:	021b      	lsls	r3, r3, #8
 80093f0:	b21a      	sxth	r2, r3
 80093f2:	7dbb      	ldrb	r3, [r7, #22]
 80093f4:	b21b      	sxth	r3, r3
 80093f6:	4313      	orrs	r3, r2
 80093f8:	b21a      	sxth	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	84da      	strh	r2, [r3, #38]	; 0x26
    bmp280->compensationParameters.dig_p6 = ((buf[17] << 8) | buf[16]);
 80093fe:	7e7b      	ldrb	r3, [r7, #25]
 8009400:	021b      	lsls	r3, r3, #8
 8009402:	b21a      	sxth	r2, r3
 8009404:	7e3b      	ldrb	r3, [r7, #24]
 8009406:	b21b      	sxth	r3, r3
 8009408:	4313      	orrs	r3, r2
 800940a:	b21a      	sxth	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	851a      	strh	r2, [r3, #40]	; 0x28
    bmp280->compensationParameters.dig_p7 = ((buf[19] << 8) | buf[18]);
 8009410:	7efb      	ldrb	r3, [r7, #27]
 8009412:	021b      	lsls	r3, r3, #8
 8009414:	b21a      	sxth	r2, r3
 8009416:	7ebb      	ldrb	r3, [r7, #26]
 8009418:	b21b      	sxth	r3, r3
 800941a:	4313      	orrs	r3, r2
 800941c:	b21a      	sxth	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	855a      	strh	r2, [r3, #42]	; 0x2a
    bmp280->compensationParameters.dig_p8 = ((buf[21] << 8) | buf[20]);
 8009422:	7f7b      	ldrb	r3, [r7, #29]
 8009424:	021b      	lsls	r3, r3, #8
 8009426:	b21a      	sxth	r2, r3
 8009428:	7f3b      	ldrb	r3, [r7, #28]
 800942a:	b21b      	sxth	r3, r3
 800942c:	4313      	orrs	r3, r2
 800942e:	b21a      	sxth	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	859a      	strh	r2, [r3, #44]	; 0x2c
    bmp280->compensationParameters.dig_p9 = ((buf[23] << 8) | buf[22]);
 8009434:	7ffb      	ldrb	r3, [r7, #31]
 8009436:	021b      	lsls	r3, r3, #8
 8009438:	b21a      	sxth	r2, r3
 800943a:	7fbb      	ldrb	r3, [r7, #30]
 800943c:	b21b      	sxth	r3, r3
 800943e:	4313      	orrs	r3, r2
 8009440:	b21a      	sxth	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 8009446:	bf00      	nop
 8009448:	3720      	adds	r7, #32
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <BMP280_setReferencePressure>:
 * Set reference pressure for altitude calculation by averaging pressure measurements.
 * @param samples: Number of measurements to average.
 * @param delay: Delay between measurements (in ms).
 * */
void BMP280_setReferencePressure(BMP280_t *bmp280, uint16_t samples, uint8_t delay)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b084      	sub	sp, #16
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	460b      	mov	r3, r1
 8009458:	807b      	strh	r3, [r7, #2]
 800945a:	4613      	mov	r3, r2
 800945c:	707b      	strb	r3, [r7, #1]
    HAL_Delay(500);
 800945e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009462:	f001 fb23 	bl	800aaac <HAL_Delay>
    float sum = 0;
 8009466:	f04f 0300 	mov.w	r3, #0
 800946a:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < samples; i++)
 800946c:	2300      	movs	r3, #0
 800946e:	60bb      	str	r3, [r7, #8]
 8009470:	e012      	b.n	8009498 <BMP280_setReferencePressure+0x4a>
    {
        BMP280_measure(bmp280);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f8c8 	bl	8009608 <BMP280_measure>
        sum += bmp280->measurement.pressure;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	edd3 7a04 	vldr	s15, [r3, #16]
 800947e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009486:	edc7 7a03 	vstr	s15, [r7, #12]
        HAL_Delay(delay);
 800948a:	787b      	ldrb	r3, [r7, #1]
 800948c:	4618      	mov	r0, r3
 800948e:	f001 fb0d 	bl	800aaac <HAL_Delay>
    for (int i = 0; i < samples; i++)
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	3301      	adds	r3, #1
 8009496:	60bb      	str	r3, [r7, #8]
 8009498:	887b      	ldrh	r3, [r7, #2]
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	429a      	cmp	r2, r3
 800949e:	dbe8      	blt.n	8009472 <BMP280_setReferencePressure+0x24>
    }
    bmp280->p_reference = sum / samples;
 80094a0:	887b      	ldrh	r3, [r7, #2]
 80094a2:	ee07 3a90 	vmov	s15, r3
 80094a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80094aa:	edd7 6a03 	vldr	s13, [r7, #12]
 80094ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80094b8:	bf00      	nop
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <BMP280_setPressureOversampling>:

/** Configure pressure oversampling */
void BMP280_setPressureOversampling(BMP280_t *bmp280, uint8_t osrs_p)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	460b      	mov	r3, r1
 80094ca:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 80094cc:	21f4      	movs	r1, #244	; 0xf4
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f938 	bl	8009744 <BMP280_readRegister>
 80094d4:	4603      	mov	r3, r0
 80094d6:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11100011) | (osrs_p << 2);
 80094d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094dc:	f023 031c 	bic.w	r3, r3, #28
 80094e0:	b25a      	sxtb	r2, r3
 80094e2:	78fb      	ldrb	r3, [r7, #3]
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	b25b      	sxtb	r3, r3
 80094e8:	4313      	orrs	r3, r2
 80094ea:	b25b      	sxtb	r3, r3
 80094ec:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
 80094f0:	461a      	mov	r2, r3
 80094f2:	21f4      	movs	r1, #244	; 0xf4
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f941 	bl	800977c <BMP280_writeRegister>
}
 80094fa:	bf00      	nop
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <BMP280_setTemperatureOversampling>:

/** Configure temperature oversampling */
void BMP280_setTemperatureOversampling(BMP280_t *bmp280, uint8_t osrs_t)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b084      	sub	sp, #16
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	460b      	mov	r3, r1
 800950c:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 800950e:	21f4      	movs	r1, #244	; 0xf4
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 f917 	bl	8009744 <BMP280_readRegister>
 8009516:	4603      	mov	r3, r0
 8009518:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b00011111) | (osrs_t << 5);
 800951a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800951e:	f003 031f 	and.w	r3, r3, #31
 8009522:	b25a      	sxtb	r2, r3
 8009524:	78fb      	ldrb	r3, [r7, #3]
 8009526:	015b      	lsls	r3, r3, #5
 8009528:	b25b      	sxtb	r3, r3
 800952a:	4313      	orrs	r3, r2
 800952c:	b25b      	sxtb	r3, r3
 800952e:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	461a      	mov	r2, r3
 8009534:	21f4      	movs	r1, #244	; 0xf4
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f920 	bl	800977c <BMP280_writeRegister>
}
 800953c:	bf00      	nop
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <BMP280_setPowerMode>:

/** Configure power mode */
void BMP280_setPowerMode(BMP280_t *bmp280, uint8_t mode)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 8009550:	21f4      	movs	r1, #244	; 0xf4
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f8f6 	bl	8009744 <BMP280_readRegister>
 8009558:	4603      	mov	r3, r0
 800955a:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11111100) | mode;
 800955c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009560:	f023 0303 	bic.w	r3, r3, #3
 8009564:	b25a      	sxtb	r2, r3
 8009566:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800956a:	4313      	orrs	r3, r2
 800956c:	b25b      	sxtb	r3, r3
 800956e:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 8009570:	7bfb      	ldrb	r3, [r7, #15]
 8009572:	461a      	mov	r2, r3
 8009574:	21f4      	movs	r1, #244	; 0xf4
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f900 	bl	800977c <BMP280_writeRegister>
}
 800957c:	bf00      	nop
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <BMP280_setStandbyTime>:

/** Configure standby time */
void BMP280_setStandbyTime(BMP280_t *bmp280, uint8_t t_sb)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 8009590:	21f5      	movs	r1, #245	; 0xf5
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 f8d6 	bl	8009744 <BMP280_readRegister>
 8009598:	4603      	mov	r3, r0
 800959a:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b00011111) | (t_sb << 5);
 800959c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095a0:	f003 031f 	and.w	r3, r3, #31
 80095a4:	b25a      	sxtb	r2, r3
 80095a6:	78fb      	ldrb	r3, [r7, #3]
 80095a8:	015b      	lsls	r3, r3, #5
 80095aa:	b25b      	sxtb	r3, r3
 80095ac:	4313      	orrs	r3, r2
 80095ae:	b25b      	sxtb	r3, r3
 80095b0:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
 80095b4:	461a      	mov	r2, r3
 80095b6:	21f5      	movs	r1, #245	; 0xf5
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f8df 	bl	800977c <BMP280_writeRegister>
}
 80095be:	bf00      	nop
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <BMP280_setFilterCoefficient>:

/** Configure IIR filter */
void BMP280_setFilterCoefficient(BMP280_t *bmp280, uint8_t filter)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b084      	sub	sp, #16
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	460b      	mov	r3, r1
 80095d0:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 80095d2:	21f5      	movs	r1, #245	; 0xf5
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f8b5 	bl	8009744 <BMP280_readRegister>
 80095da:	4603      	mov	r3, r0
 80095dc:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b11100011) | (filter << 2);
 80095de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095e2:	f023 031c 	bic.w	r3, r3, #28
 80095e6:	b25a      	sxtb	r2, r3
 80095e8:	78fb      	ldrb	r3, [r7, #3]
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	b25b      	sxtb	r3, r3
 80095ee:	4313      	orrs	r3, r2
 80095f0:	b25b      	sxtb	r3, r3
 80095f2:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 80095f4:	7bfb      	ldrb	r3, [r7, #15]
 80095f6:	461a      	mov	r2, r3
 80095f8:	21f5      	movs	r1, #245	; 0xf5
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 f8be 	bl	800977c <BMP280_writeRegister>
}
 8009600:	bf00      	nop
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <BMP280_measure>:
/**
 * Read latest measurement from sensor and execute compensation.
 * Stores the results in measurement member variable.
 * */
void BMP280_measure(BMP280_t *bmp280)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
    uint8_t data[6];
    BMP280_readMBRegister(bmp280, BMP280_REG_DATA, data, 6);
 8009610:	f107 0208 	add.w	r2, r7, #8
 8009614:	2306      	movs	r3, #6
 8009616:	21f7      	movs	r1, #247	; 0xf7
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 f8ce 	bl	80097ba <BMP280_readMBRegister>

    int32_t adc_P = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800961e:	7a3b      	ldrb	r3, [r7, #8]
 8009620:	031a      	lsls	r2, r3, #12
 8009622:	7a7b      	ldrb	r3, [r7, #9]
 8009624:	011b      	lsls	r3, r3, #4
 8009626:	4313      	orrs	r3, r2
 8009628:	7aba      	ldrb	r2, [r7, #10]
 800962a:	0912      	lsrs	r2, r2, #4
 800962c:	b2d2      	uxtb	r2, r2
 800962e:	4313      	orrs	r3, r2
 8009630:	617b      	str	r3, [r7, #20]
    int32_t adc_T = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8009632:	7afb      	ldrb	r3, [r7, #11]
 8009634:	031a      	lsls	r2, r3, #12
 8009636:	7b3b      	ldrb	r3, [r7, #12]
 8009638:	011b      	lsls	r3, r3, #4
 800963a:	4313      	orrs	r3, r2
 800963c:	7b7a      	ldrb	r2, [r7, #13]
 800963e:	0912      	lsrs	r2, r2, #4
 8009640:	b2d2      	uxtb	r2, r2
 8009642:	4313      	orrs	r3, r2
 8009644:	613b      	str	r3, [r7, #16]

    bmp280->measurement.temperature = (float)BMP280_compensate_temperature(bmp280, adc_T) / 100.0;
 8009646:	6939      	ldr	r1, [r7, #16]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f917 	bl	800987c <BMP280_compensate_temperature>
 800964e:	ee07 0a90 	vmov	s15, r0
 8009652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009656:	ee17 0a90 	vmov	r0, s15
 800965a:	f7f6 ff9d 	bl	8000598 <__aeabi_f2d>
 800965e:	f04f 0200 	mov.w	r2, #0
 8009662:	4b35      	ldr	r3, [pc, #212]	; (8009738 <BMP280_measure+0x130>)
 8009664:	f7f7 f91a 	bl	800089c <__aeabi_ddiv>
 8009668:	4602      	mov	r2, r0
 800966a:	460b      	mov	r3, r1
 800966c:	4610      	mov	r0, r2
 800966e:	4619      	mov	r1, r3
 8009670:	f7f7 fae2 	bl	8000c38 <__aeabi_d2f>
 8009674:	4602      	mov	r2, r0
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	60da      	str	r2, [r3, #12]
    bmp280->measurement.pressure = (float)BMP280_compensate_pressure(bmp280, adc_P) / 256.0;
 800967a:	6979      	ldr	r1, [r7, #20]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 f953 	bl	8009928 <BMP280_compensate_pressure>
 8009682:	ee07 0a90 	vmov	s15, r0
 8009686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800968a:	ee17 0a90 	vmov	r0, s15
 800968e:	f7f6 ff83 	bl	8000598 <__aeabi_f2d>
 8009692:	f04f 0200 	mov.w	r2, #0
 8009696:	4b29      	ldr	r3, [pc, #164]	; (800973c <BMP280_measure+0x134>)
 8009698:	f7f7 f900 	bl	800089c <__aeabi_ddiv>
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	4610      	mov	r0, r2
 80096a2:	4619      	mov	r1, r3
 80096a4:	f7f7 fac8 	bl	8000c38 <__aeabi_d2f>
 80096a8:	4602      	mov	r2, r0
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	611a      	str	r2, [r3, #16]

    if (bmp280->p_reference > 0)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80096b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096bc:	dc00      	bgt.n	80096c0 <BMP280_measure+0xb8>
    {
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
    }
}
 80096be:	e02c      	b.n	800971a <BMP280_measure+0x112>
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	ed93 7a04 	vldr	s14, [r3, #16]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80096cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80096d0:	ee16 0a90 	vmov	r0, s13
 80096d4:	f7f6 ff60 	bl	8000598 <__aeabi_f2d>
 80096d8:	4602      	mov	r2, r0
 80096da:	460b      	mov	r3, r1
 80096dc:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8009728 <BMP280_measure+0x120>
 80096e0:	ec43 2b10 	vmov	d0, r2, r3
 80096e4:	f00f ff24 	bl	8019530 <pow>
 80096e8:	ec53 2b10 	vmov	r2, r3, d0
 80096ec:	f04f 0000 	mov.w	r0, #0
 80096f0:	4913      	ldr	r1, [pc, #76]	; (8009740 <BMP280_measure+0x138>)
 80096f2:	f7f6 fdf1 	bl	80002d8 <__aeabi_dsub>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	4610      	mov	r0, r2
 80096fc:	4619      	mov	r1, r3
 80096fe:	a30c      	add	r3, pc, #48	; (adr r3, 8009730 <BMP280_measure+0x128>)
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	f7f6 ffa0 	bl	8000648 <__aeabi_dmul>
 8009708:	4602      	mov	r2, r0
 800970a:	460b      	mov	r3, r1
 800970c:	4610      	mov	r0, r2
 800970e:	4619      	mov	r1, r3
 8009710:	f7f7 fa92 	bl	8000c38 <__aeabi_d2f>
 8009714:	4602      	mov	r2, r0
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	615a      	str	r2, [r3, #20]
}
 800971a:	bf00      	nop
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	f3af 8000 	nop.w
 8009728:	1a36e2eb 	.word	0x1a36e2eb
 800972c:	3fc85bc0 	.word	0x3fc85bc0
 8009730:	00000000 	.word	0x00000000
 8009734:	4150e92d 	.word	0x4150e92d
 8009738:	40590000 	.word	0x40590000
 800973c:	40700000 	.word	0x40700000
 8009740:	3ff00000 	.word	0x3ff00000

08009744 <BMP280_readRegister>:
 * Read a register
 * @param address: Register address.
 * @return Register value.
 * */
uint8_t BMP280_readRegister(BMP280_t *bmp280, uint8_t address)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	460b      	mov	r3, r1
 800974e:	70fb      	strb	r3, [r7, #3]
    BMP280_spiCSNlow(bmp280);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 f883 	bl	800985c <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 8009756:	78fb      	ldrb	r3, [r7, #3]
 8009758:	4619      	mov	r1, r3
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f855 	bl	800980a <BMP280_spiReadWrite>
    uint8_t value = BMP280_spiReadWrite(bmp280, 0);
 8009760:	2100      	movs	r1, #0
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 f851 	bl	800980a <BMP280_spiReadWrite>
 8009768:	4603      	mov	r3, r0
 800976a:	73fb      	strb	r3, [r7, #15]
    BMP280_spiCSNhigh(bmp280);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 f865 	bl	800983c <BMP280_spiCSNhigh>
    return value;
 8009772:	7bfb      	ldrb	r3, [r7, #15]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <BMP280_writeRegister>:
 * Write to a register
 * @param address: Register address.
 * @param value: Value to write.
 * */
void BMP280_writeRegister(BMP280_t *bmp280, uint8_t address, uint8_t value)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	460b      	mov	r3, r1
 8009786:	70fb      	strb	r3, [r7, #3]
 8009788:	4613      	mov	r3, r2
 800978a:	70bb      	strb	r3, [r7, #2]
    BMP280_spiCSNlow(bmp280);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f865 	bl	800985c <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address & BMP280_SPI_MASK_WRITE);
 8009792:	78fb      	ldrb	r3, [r7, #3]
 8009794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009798:	b2db      	uxtb	r3, r3
 800979a:	4619      	mov	r1, r3
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f834 	bl	800980a <BMP280_spiReadWrite>
    BMP280_spiReadWrite(bmp280, value);
 80097a2:	78bb      	ldrb	r3, [r7, #2]
 80097a4:	4619      	mov	r1, r3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f82f 	bl	800980a <BMP280_spiReadWrite>
    BMP280_spiCSNhigh(bmp280);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 f845 	bl	800983c <BMP280_spiCSNhigh>
}
 80097b2:	bf00      	nop
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <BMP280_readMBRegister>:
 * @param address: Register address.
 * @param values: Array pointer to store values in.
 * @param length: Number of bytes to read.
 * */
void BMP280_readMBRegister(BMP280_t *bmp280, uint8_t address, uint8_t *values, uint8_t length)
{
 80097ba:	b590      	push	{r4, r7, lr}
 80097bc:	b085      	sub	sp, #20
 80097be:	af00      	add	r7, sp, #0
 80097c0:	60f8      	str	r0, [r7, #12]
 80097c2:	607a      	str	r2, [r7, #4]
 80097c4:	461a      	mov	r2, r3
 80097c6:	460b      	mov	r3, r1
 80097c8:	72fb      	strb	r3, [r7, #11]
 80097ca:	4613      	mov	r3, r2
 80097cc:	72bb      	strb	r3, [r7, #10]
    BMP280_spiCSNlow(bmp280);
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f000 f844 	bl	800985c <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 80097d4:	7afb      	ldrb	r3, [r7, #11]
 80097d6:	4619      	mov	r1, r3
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f000 f816 	bl	800980a <BMP280_spiReadWrite>
    while (length--)
 80097de:	e008      	b.n	80097f2 <BMP280_readMBRegister+0x38>
    {
        *values++ = BMP280_spiReadWrite(bmp280, 0);
 80097e0:	687c      	ldr	r4, [r7, #4]
 80097e2:	1c63      	adds	r3, r4, #1
 80097e4:	607b      	str	r3, [r7, #4]
 80097e6:	2100      	movs	r1, #0
 80097e8:	68f8      	ldr	r0, [r7, #12]
 80097ea:	f000 f80e 	bl	800980a <BMP280_spiReadWrite>
 80097ee:	4603      	mov	r3, r0
 80097f0:	7023      	strb	r3, [r4, #0]
    while (length--)
 80097f2:	7abb      	ldrb	r3, [r7, #10]
 80097f4:	1e5a      	subs	r2, r3, #1
 80097f6:	72ba      	strb	r2, [r7, #10]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1f1      	bne.n	80097e0 <BMP280_readMBRegister+0x26>
    }
    BMP280_spiCSNhigh(bmp280);
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 f81d 	bl	800983c <BMP280_spiCSNhigh>
}
 8009802:	bf00      	nop
 8009804:	3714      	adds	r7, #20
 8009806:	46bd      	mov	sp, r7
 8009808:	bd90      	pop	{r4, r7, pc}

0800980a <BMP280_spiReadWrite>:
 * SPI transmit and receive one byte simultaneously
 * @param tx_message: Transmit byte.
 * @return Received byte.
 * */
uint8_t BMP280_spiReadWrite(BMP280_t *bmp280, uint8_t tx_message)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b086      	sub	sp, #24
 800980e:	af02      	add	r7, sp, #8
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	460b      	mov	r3, r1
 8009814:	70fb      	strb	r3, [r7, #3]
    uint8_t rx_message = 255;
 8009816:	23ff      	movs	r3, #255	; 0xff
 8009818:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(bmp280->spiHandle, &tx_message, &rx_message, 1, HAL_MAX_DELAY);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6818      	ldr	r0, [r3, #0]
 800981e:	f107 020f 	add.w	r2, r7, #15
 8009822:	1cf9      	adds	r1, r7, #3
 8009824:	f04f 33ff 	mov.w	r3, #4294967295
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	2301      	movs	r3, #1
 800982c:	f004 f993 	bl	800db56 <HAL_SPI_TransmitReceive>
    return rx_message;
 8009830:	7bfb      	ldrb	r3, [r7, #15]
}
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
	...

0800983c <BMP280_spiCSNhigh>:

/** Pull chip select high (inactive) */
void BMP280_spiCSNhigh(BMP280_t *bmp280)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 8009844:	2201      	movs	r2, #1
 8009846:	f44f 7100 	mov.w	r1, #512	; 0x200
 800984a:	4803      	ldr	r0, [pc, #12]	; (8009858 <BMP280_spiCSNhigh+0x1c>)
 800984c:	f001 ffda 	bl	800b804 <HAL_GPIO_WritePin>
}
 8009850:	bf00      	nop
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	40020c00 	.word	0x40020c00

0800985c <BMP280_spiCSNlow>:

/** Pull chip select low (active) */
void BMP280_spiCSNlow(BMP280_t *bmp280)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_RESET);
 8009864:	2200      	movs	r2, #0
 8009866:	f44f 7100 	mov.w	r1, #512	; 0x200
 800986a:	4803      	ldr	r0, [pc, #12]	; (8009878 <BMP280_spiCSNlow+0x1c>)
 800986c:	f001 ffca 	bl	800b804 <HAL_GPIO_WritePin>
}
 8009870:	bf00      	nop
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	40020c00 	.word	0x40020c00

0800987c <BMP280_compensate_temperature>:
 * Calculate sensor temperature from measurement and compensation parameters.
 * @param uncomp_temp: Raw temperature measurement.
 * @return Temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
 * */
int32_t BMP280_compensate_temperature(BMP280_t *bmp280, int32_t uncomp_temp)
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
    int32_t var1, var2;
    var1 = ((((uncomp_temp / 8) - ((int32_t)bmp280->compensationParameters.dig_t1 << 1))) * ((int32_t)bmp280->compensationParameters.dig_t2)) / 2048;
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	da00      	bge.n	800988e <BMP280_compensate_temperature+0x12>
 800988c:	3307      	adds	r3, #7
 800988e:	10db      	asrs	r3, r3, #3
 8009890:	461a      	mov	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	8b1b      	ldrh	r3, [r3, #24]
 8009896:	005b      	lsls	r3, r3, #1
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 80098a0:	fb02 f303 	mul.w	r3, r2, r3
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	da01      	bge.n	80098ac <BMP280_compensate_temperature+0x30>
 80098a8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80098ac:	12db      	asrs	r3, r3, #11
 80098ae:	60fb      	str	r3, [r7, #12]
    var2 = (((((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1)) * ((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1))) / 4096) * ((int32_t)bmp280->compensationParameters.dig_t3)) / 16384;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	da00      	bge.n	80098b8 <BMP280_compensate_temperature+0x3c>
 80098b6:	330f      	adds	r3, #15
 80098b8:	111b      	asrs	r3, r3, #4
 80098ba:	461a      	mov	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	8b1b      	ldrh	r3, [r3, #24]
 80098c0:	1ad2      	subs	r2, r2, r3
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	da00      	bge.n	80098ca <BMP280_compensate_temperature+0x4e>
 80098c8:	330f      	adds	r3, #15
 80098ca:	111b      	asrs	r3, r3, #4
 80098cc:	4619      	mov	r1, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	8b1b      	ldrh	r3, [r3, #24]
 80098d2:	1acb      	subs	r3, r1, r3
 80098d4:	fb02 f303 	mul.w	r3, r2, r3
 80098d8:	2b00      	cmp	r3, #0
 80098da:	da01      	bge.n	80098e0 <BMP280_compensate_temperature+0x64>
 80098dc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80098e0:	131b      	asrs	r3, r3, #12
 80098e2:	461a      	mov	r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80098ea:	fb02 f303 	mul.w	r3, r2, r3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	da03      	bge.n	80098fa <BMP280_compensate_temperature+0x7e>
 80098f2:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80098f6:	441a      	add	r2, r3
 80098f8:	4613      	mov	r3, r2
 80098fa:	139b      	asrs	r3, r3, #14
 80098fc:	60bb      	str	r3, [r7, #8]
    bmp280->t_fine = var1 + var2;
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	441a      	add	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	609a      	str	r2, [r3, #8]
    return (bmp280->t_fine * 5 + 128) / 256;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	689a      	ldr	r2, [r3, #8]
 800990c:	4613      	mov	r3, r2
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	4413      	add	r3, r2
 8009912:	3380      	adds	r3, #128	; 0x80
 8009914:	2b00      	cmp	r3, #0
 8009916:	da00      	bge.n	800991a <BMP280_compensate_temperature+0x9e>
 8009918:	33ff      	adds	r3, #255	; 0xff
 800991a:	121b      	asrs	r3, r3, #8
}
 800991c:	4618      	mov	r0, r3
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <BMP280_compensate_pressure>:
 * @param uncomp_pres: Raw pressure measurement.
 * @return Pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
 * Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
 * */
uint32_t BMP280_compensate_pressure(BMP280_t *bmp280, int32_t uncomp_pres)
{
 8009928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800992c:	b0d6      	sub	sp, #344	; 0x158
 800992e:	af00      	add	r7, sp, #0
 8009930:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 8009934:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
    int64_t var1, var2, p;
    var1 = ((int64_t)(bmp280->t_fine)) - 128000;
 8009938:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	17da      	asrs	r2, r3, #31
 8009940:	461c      	mov	r4, r3
 8009942:	4615      	mov	r5, r2
 8009944:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8009948:	f145 3bff 	adc.w	fp, r5, #4294967295
 800994c:	e9c7 ab54 	strd	sl, fp, [r7, #336]	; 0x150
    var2 = var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p6;
 8009950:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8009954:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009958:	fb03 f102 	mul.w	r1, r3, r2
 800995c:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8009960:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009964:	fb02 f303 	mul.w	r3, r2, r3
 8009968:	18ca      	adds	r2, r1, r3
 800996a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800996e:	fba3 8903 	umull	r8, r9, r3, r3
 8009972:	eb02 0309 	add.w	r3, r2, r9
 8009976:	4699      	mov	r9, r3
 8009978:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800997c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8009980:	b21b      	sxth	r3, r3
 8009982:	17da      	asrs	r2, r3, #31
 8009984:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009988:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800998c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8009990:	4603      	mov	r3, r0
 8009992:	fb03 f209 	mul.w	r2, r3, r9
 8009996:	460b      	mov	r3, r1
 8009998:	fb08 f303 	mul.w	r3, r8, r3
 800999c:	4413      	add	r3, r2
 800999e:	4602      	mov	r2, r0
 80099a0:	fba8 1202 	umull	r1, r2, r8, r2
 80099a4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80099a8:	460a      	mov	r2, r1
 80099aa:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80099ae:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80099b2:	4413      	add	r3, r2
 80099b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80099b8:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80099bc:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80099c0:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + ((var1 * (int64_t)bmp280->compensationParameters.dig_p5) * 131072);
 80099c4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80099c8:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80099cc:	b21b      	sxth	r3, r3
 80099ce:	17da      	asrs	r2, r3, #31
 80099d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80099d4:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80099d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80099dc:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80099e0:	462a      	mov	r2, r5
 80099e2:	fb02 f203 	mul.w	r2, r2, r3
 80099e6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80099ea:	4621      	mov	r1, r4
 80099ec:	fb01 f303 	mul.w	r3, r1, r3
 80099f0:	441a      	add	r2, r3
 80099f2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80099f6:	4621      	mov	r1, r4
 80099f8:	fba3 1301 	umull	r1, r3, r3, r1
 80099fc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8009a00:	460b      	mov	r3, r1
 8009a02:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8009a06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a0a:	18d3      	adds	r3, r2, r3
 8009a0c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8009a10:	f04f 0000 	mov.w	r0, #0
 8009a14:	f04f 0100 	mov.w	r1, #0
 8009a18:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 8009a1c:	462b      	mov	r3, r5
 8009a1e:	0459      	lsls	r1, r3, #17
 8009a20:	4623      	mov	r3, r4
 8009a22:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8009a26:	4623      	mov	r3, r4
 8009a28:	0458      	lsls	r0, r3, #17
 8009a2a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009a2e:	1814      	adds	r4, r2, r0
 8009a30:	67bc      	str	r4, [r7, #120]	; 0x78
 8009a32:	414b      	adcs	r3, r1
 8009a34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a36:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8009a3a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + (((int64_t)bmp280->compensationParameters.dig_p4) * 34359738368);
 8009a3e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009a42:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8009a46:	b21b      	sxth	r3, r3
 8009a48:	17da      	asrs	r2, r3, #31
 8009a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009a4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009a52:	f04f 0000 	mov.w	r0, #0
 8009a56:	f04f 0100 	mov.w	r1, #0
 8009a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a5e:	00d9      	lsls	r1, r3, #3
 8009a60:	2000      	movs	r0, #0
 8009a62:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009a66:	1814      	adds	r4, r2, r0
 8009a68:	673c      	str	r4, [r7, #112]	; 0x70
 8009a6a:	414b      	adcs	r3, r1
 8009a6c:	677b      	str	r3, [r7, #116]	; 0x74
 8009a6e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8009a72:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var1 = ((var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p3) / 256) + ((var1 * (int64_t)bmp280->compensationParameters.dig_p2) * 4096);
 8009a76:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8009a7a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009a7e:	fb03 f102 	mul.w	r1, r3, r2
 8009a82:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8009a86:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009a8a:	fb02 f303 	mul.w	r3, r2, r3
 8009a8e:	18ca      	adds	r2, r1, r3
 8009a90:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009a94:	fba3 1303 	umull	r1, r3, r3, r3
 8009a98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aa6:	18d3      	adds	r3, r2, r3
 8009aa8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009aac:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009ab0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8009ab4:	b21b      	sxth	r3, r3
 8009ab6:	17da      	asrs	r2, r3, #31
 8009ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009abc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009ac0:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8009ac4:	462b      	mov	r3, r5
 8009ac6:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009aca:	4642      	mov	r2, r8
 8009acc:	fb02 f203 	mul.w	r2, r2, r3
 8009ad0:	464b      	mov	r3, r9
 8009ad2:	4621      	mov	r1, r4
 8009ad4:	fb01 f303 	mul.w	r3, r1, r3
 8009ad8:	4413      	add	r3, r2
 8009ada:	4622      	mov	r2, r4
 8009adc:	4641      	mov	r1, r8
 8009ade:	fba2 1201 	umull	r1, r2, r2, r1
 8009ae2:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8009ae6:	460a      	mov	r2, r1
 8009ae8:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8009aec:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8009af0:	4413      	add	r3, r2
 8009af2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009af6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	da07      	bge.n	8009b0e <BMP280_compensate_pressure+0x1e6>
 8009afe:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8009b02:	66b9      	str	r1, [r7, #104]	; 0x68
 8009b04:	f143 0300 	adc.w	r3, r3, #0
 8009b08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b0a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009b0e:	f04f 0000 	mov.w	r0, #0
 8009b12:	f04f 0100 	mov.w	r1, #0
 8009b16:	0a10      	lsrs	r0, r2, #8
 8009b18:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8009b1c:	1219      	asrs	r1, r3, #8
 8009b1e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009b22:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8009b26:	b21b      	sxth	r3, r3
 8009b28:	17da      	asrs	r2, r3, #31
 8009b2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b2e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8009b32:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009b36:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8009b3a:	464a      	mov	r2, r9
 8009b3c:	fb02 f203 	mul.w	r2, r2, r3
 8009b40:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009b44:	4644      	mov	r4, r8
 8009b46:	fb04 f303 	mul.w	r3, r4, r3
 8009b4a:	441a      	add	r2, r3
 8009b4c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009b50:	4644      	mov	r4, r8
 8009b52:	fba3 4304 	umull	r4, r3, r3, r4
 8009b56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009b5a:	4623      	mov	r3, r4
 8009b5c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009b60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009b64:	18d3      	adds	r3, r2, r3
 8009b66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009b6a:	f04f 0200 	mov.w	r2, #0
 8009b6e:	f04f 0300 	mov.w	r3, #0
 8009b72:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8009b76:	464c      	mov	r4, r9
 8009b78:	0323      	lsls	r3, r4, #12
 8009b7a:	4644      	mov	r4, r8
 8009b7c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8009b80:	4644      	mov	r4, r8
 8009b82:	0322      	lsls	r2, r4, #12
 8009b84:	1884      	adds	r4, r0, r2
 8009b86:	663c      	str	r4, [r7, #96]	; 0x60
 8009b88:	eb41 0303 	adc.w	r3, r1, r3
 8009b8c:	667b      	str	r3, [r7, #100]	; 0x64
 8009b8e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8009b92:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
    var1 = ((INT64_C(0x800000000000) + var1) * ((int64_t)bmp280->compensationParameters.dig_p1)) / 8589934592;
 8009b96:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009b9a:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8009b9e:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8009ba2:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8009ba6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009baa:	8bdb      	ldrh	r3, [r3, #30]
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009bb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009bb8:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8009bbc:	462b      	mov	r3, r5
 8009bbe:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009bc2:	4642      	mov	r2, r8
 8009bc4:	fb02 f203 	mul.w	r2, r2, r3
 8009bc8:	464b      	mov	r3, r9
 8009bca:	4621      	mov	r1, r4
 8009bcc:	fb01 f303 	mul.w	r3, r1, r3
 8009bd0:	4413      	add	r3, r2
 8009bd2:	4622      	mov	r2, r4
 8009bd4:	4641      	mov	r1, r8
 8009bd6:	fba2 1201 	umull	r1, r2, r2, r1
 8009bda:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8009bde:	460a      	mov	r2, r1
 8009be0:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8009be4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009be8:	4413      	add	r3, r2
 8009bea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009bee:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	da06      	bge.n	8009c04 <BMP280_compensate_pressure+0x2dc>
 8009bf6:	1e51      	subs	r1, r2, #1
 8009bf8:	65b9      	str	r1, [r7, #88]	; 0x58
 8009bfa:	f143 0301 	adc.w	r3, r3, #1
 8009bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c00:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c04:	f04f 0000 	mov.w	r0, #0
 8009c08:	f04f 0100 	mov.w	r1, #0
 8009c0c:	1058      	asrs	r0, r3, #1
 8009c0e:	17d9      	asrs	r1, r3, #31
 8009c10:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    if (var1 == 0)
 8009c14:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	d101      	bne.n	8009c20 <BMP280_compensate_pressure+0x2f8>
    {
        return 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	e182      	b.n	8009f26 <BMP280_compensate_pressure+0x5fe>
    }
    p = 1048576 - uncomp_pres;
 8009c20:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009c24:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8009c28:	17da      	asrs	r2, r3, #31
 8009c2a:	653b      	str	r3, [r7, #80]	; 0x50
 8009c2c:	657a      	str	r2, [r7, #84]	; 0x54
 8009c2e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8009c32:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    p = (((((p * 2147483648U)) - var2) * 3125) / var1);
 8009c36:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8009c3a:	f04f 0000 	mov.w	r0, #0
 8009c3e:	f04f 0100 	mov.w	r1, #0
 8009c42:	07d9      	lsls	r1, r3, #31
 8009c44:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8009c48:	07d0      	lsls	r0, r2, #31
 8009c4a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009c4e:	1a84      	subs	r4, r0, r2
 8009c50:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8009c54:	eb61 0303 	sbc.w	r3, r1, r3
 8009c58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c5c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8009c60:	4622      	mov	r2, r4
 8009c62:	462b      	mov	r3, r5
 8009c64:	1891      	adds	r1, r2, r2
 8009c66:	64b9      	str	r1, [r7, #72]	; 0x48
 8009c68:	415b      	adcs	r3, r3
 8009c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009c70:	4621      	mov	r1, r4
 8009c72:	1851      	adds	r1, r2, r1
 8009c74:	6439      	str	r1, [r7, #64]	; 0x40
 8009c76:	4629      	mov	r1, r5
 8009c78:	414b      	adcs	r3, r1
 8009c7a:	647b      	str	r3, [r7, #68]	; 0x44
 8009c7c:	f04f 0200 	mov.w	r2, #0
 8009c80:	f04f 0300 	mov.w	r3, #0
 8009c84:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8009c88:	4649      	mov	r1, r9
 8009c8a:	018b      	lsls	r3, r1, #6
 8009c8c:	4641      	mov	r1, r8
 8009c8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009c92:	4641      	mov	r1, r8
 8009c94:	018a      	lsls	r2, r1, #6
 8009c96:	4641      	mov	r1, r8
 8009c98:	1889      	adds	r1, r1, r2
 8009c9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8009c9c:	4649      	mov	r1, r9
 8009c9e:	eb43 0101 	adc.w	r1, r3, r1
 8009ca2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009ca4:	f04f 0200 	mov.w	r2, #0
 8009ca8:	f04f 0300 	mov.w	r3, #0
 8009cac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8009cb0:	4649      	mov	r1, r9
 8009cb2:	008b      	lsls	r3, r1, #2
 8009cb4:	4641      	mov	r1, r8
 8009cb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cba:	4641      	mov	r1, r8
 8009cbc:	008a      	lsls	r2, r1, #2
 8009cbe:	4610      	mov	r0, r2
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	4622      	mov	r2, r4
 8009cc6:	189b      	adds	r3, r3, r2
 8009cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8009cca:	460b      	mov	r3, r1
 8009ccc:	462a      	mov	r2, r5
 8009cce:	eb42 0303 	adc.w	r3, r2, r3
 8009cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8009cd4:	f04f 0200 	mov.w	r2, #0
 8009cd8:	f04f 0300 	mov.w	r3, #0
 8009cdc:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8009ce0:	4649      	mov	r1, r9
 8009ce2:	008b      	lsls	r3, r1, #2
 8009ce4:	4641      	mov	r1, r8
 8009ce6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cea:	4641      	mov	r1, r8
 8009cec:	008a      	lsls	r2, r1, #2
 8009cee:	4610      	mov	r0, r2
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	4622      	mov	r2, r4
 8009cf6:	189b      	adds	r3, r3, r2
 8009cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009cfc:	462b      	mov	r3, r5
 8009cfe:	460a      	mov	r2, r1
 8009d00:	eb42 0303 	adc.w	r3, r2, r3
 8009d04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d08:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009d0c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009d10:	f7f6 ffe2 	bl	8000cd8 <__aeabi_ldivmod>
 8009d14:	4602      	mov	r2, r0
 8009d16:	460b      	mov	r3, r1
 8009d18:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
    var1 = (((int64_t)bmp280->compensationParameters.dig_p9) * (p / 8192) * (p / 8192)) / 33554432;
 8009d1c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009d20:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8009d24:	b21b      	sxth	r3, r3
 8009d26:	17da      	asrs	r2, r3, #31
 8009d28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009d2c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009d30:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	da08      	bge.n	8009d4a <BMP280_compensate_pressure+0x422>
 8009d38:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8009d3c:	1851      	adds	r1, r2, r1
 8009d3e:	62b9      	str	r1, [r7, #40]	; 0x28
 8009d40:	f143 0300 	adc.w	r3, r3, #0
 8009d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d4a:	f04f 0000 	mov.w	r0, #0
 8009d4e:	f04f 0100 	mov.w	r1, #0
 8009d52:	0b50      	lsrs	r0, r2, #13
 8009d54:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8009d58:	1359      	asrs	r1, r3, #13
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8009d62:	4629      	mov	r1, r5
 8009d64:	fb02 f001 	mul.w	r0, r2, r1
 8009d68:	4621      	mov	r1, r4
 8009d6a:	fb01 f103 	mul.w	r1, r1, r3
 8009d6e:	4401      	add	r1, r0
 8009d70:	4620      	mov	r0, r4
 8009d72:	fba0 2302 	umull	r2, r3, r0, r2
 8009d76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d84:	18cb      	adds	r3, r1, r3
 8009d86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009d8a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	da08      	bge.n	8009da4 <BMP280_compensate_pressure+0x47c>
 8009d92:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8009d96:	1851      	adds	r1, r2, r1
 8009d98:	6239      	str	r1, [r7, #32]
 8009d9a:	f143 0300 	adc.w	r3, r3, #0
 8009d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8009da0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009da4:	f04f 0000 	mov.w	r0, #0
 8009da8:	f04f 0100 	mov.w	r1, #0
 8009dac:	0b50      	lsrs	r0, r2, #13
 8009dae:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8009db2:	1359      	asrs	r1, r3, #13
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	fb02 f001 	mul.w	r0, r2, r1
 8009dc2:	4621      	mov	r1, r4
 8009dc4:	fb01 f103 	mul.w	r1, r1, r3
 8009dc8:	4401      	add	r1, r0
 8009dca:	4620      	mov	r0, r4
 8009dcc:	fba0 2302 	umull	r2, r3, r0, r2
 8009dd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dde:	18cb      	adds	r3, r1, r3
 8009de0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009de4:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	da08      	bge.n	8009dfe <BMP280_compensate_pressure+0x4d6>
 8009dec:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8009df0:	1851      	adds	r1, r2, r1
 8009df2:	61b9      	str	r1, [r7, #24]
 8009df4:	f143 0300 	adc.w	r3, r3, #0
 8009df8:	61fb      	str	r3, [r7, #28]
 8009dfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009dfe:	f04f 0000 	mov.w	r0, #0
 8009e02:	f04f 0100 	mov.w	r1, #0
 8009e06:	0e50      	lsrs	r0, r2, #25
 8009e08:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8009e0c:	1659      	asrs	r1, r3, #25
 8009e0e:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    var2 = (((int64_t)bmp280->compensationParameters.dig_p8) * p) / 524288;
 8009e12:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009e16:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8009e1a:	b21b      	sxth	r3, r3
 8009e1c:	17da      	asrs	r2, r3, #31
 8009e1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009e22:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009e26:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009e2a:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8009e2e:	462a      	mov	r2, r5
 8009e30:	fb02 f203 	mul.w	r2, r2, r3
 8009e34:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009e38:	4621      	mov	r1, r4
 8009e3a:	fb01 f303 	mul.w	r3, r1, r3
 8009e3e:	441a      	add	r2, r3
 8009e40:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009e44:	4621      	mov	r1, r4
 8009e46:	fba3 1301 	umull	r1, r3, r3, r1
 8009e4a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e4e:	460b      	mov	r3, r1
 8009e50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009e54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e58:	18d3      	adds	r3, r2, r3
 8009e5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e5e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8009e62:	2900      	cmp	r1, #0
 8009e64:	da07      	bge.n	8009e76 <BMP280_compensate_pressure+0x54e>
 8009e66:	4b33      	ldr	r3, [pc, #204]	; (8009f34 <BMP280_compensate_pressure+0x60c>)
 8009e68:	18c3      	adds	r3, r0, r3
 8009e6a:	613b      	str	r3, [r7, #16]
 8009e6c:	f141 0300 	adc.w	r3, r1, #0
 8009e70:	617b      	str	r3, [r7, #20]
 8009e72:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009e76:	f04f 0200 	mov.w	r2, #0
 8009e7a:	f04f 0300 	mov.w	r3, #0
 8009e7e:	0cc2      	lsrs	r2, r0, #19
 8009e80:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8009e84:	14cb      	asrs	r3, r1, #19
 8009e86:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    p = ((p + var1 + var2) / 256) + (((int64_t)bmp280->compensationParameters.dig_p7) * 16);
 8009e8a:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8009e8e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009e92:	1884      	adds	r4, r0, r2
 8009e94:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8009e98:	eb41 0303 	adc.w	r3, r1, r3
 8009e9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009ea0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009ea4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009ea8:	4621      	mov	r1, r4
 8009eaa:	1889      	adds	r1, r1, r2
 8009eac:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8009eb0:	4629      	mov	r1, r5
 8009eb2:	eb43 0101 	adc.w	r1, r3, r1
 8009eb6:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8009eba:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	da07      	bge.n	8009ed2 <BMP280_compensate_pressure+0x5aa>
 8009ec2:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8009ec6:	60b9      	str	r1, [r7, #8]
 8009ec8:	f143 0300 	adc.w	r3, r3, #0
 8009ecc:	60fb      	str	r3, [r7, #12]
 8009ece:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ed2:	f04f 0000 	mov.w	r0, #0
 8009ed6:	f04f 0100 	mov.w	r1, #0
 8009eda:	0a10      	lsrs	r0, r2, #8
 8009edc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8009ee0:	1219      	asrs	r1, r3, #8
 8009ee2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009ee6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8009eea:	b21b      	sxth	r3, r3
 8009eec:	17da      	asrs	r2, r3, #31
 8009eee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ef2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8009ef6:	f04f 0200 	mov.w	r2, #0
 8009efa:	f04f 0300 	mov.w	r3, #0
 8009efe:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8009f02:	464c      	mov	r4, r9
 8009f04:	0123      	lsls	r3, r4, #4
 8009f06:	4644      	mov	r4, r8
 8009f08:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8009f0c:	4644      	mov	r4, r8
 8009f0e:	0122      	lsls	r2, r4, #4
 8009f10:	1884      	adds	r4, r0, r2
 8009f12:	603c      	str	r4, [r7, #0]
 8009f14:	eb41 0303 	adc.w	r3, r1, r3
 8009f18:	607b      	str	r3, [r7, #4]
 8009f1a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009f1e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    return (uint32_t)p;
 8009f22:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f32:	bf00      	nop
 8009f34:	0007ffff 	.word	0x0007ffff

08009f38 <MPU_Init>:

/// @brief Do the whole initialization of the IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_Init(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8009f38:	b5b0      	push	{r4, r5, r7, lr}
 8009f3a:	b09c      	sub	sp, #112	; 0x70
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
	// Disable BMP280
	HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 8009f42:	2201      	movs	r2, #1
 8009f44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f48:	482c      	ldr	r0, [pc, #176]	; (8009ffc <MPU_Init+0xc4>)
 8009f4a:	f001 fc5b 	bl	800b804 <HAL_GPIO_WritePin>

	// Set the config parameters
	pMPU9250->settings.gFullScaleRange = GFSR_2000DPS;
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	2203      	movs	r2, #3
 8009f52:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	pMPU9250->settings.aFullScaleRange = AFSR_16G;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	2203      	movs	r2, #3
 8009f5a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	pMPU9250->settings.CS_PIN = SPI2_IMU_CSIMU_Pin;
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f64:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	pMPU9250->settings.CS_PORT = SPI2_IMU_CSIMU_GPIO_Port;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	4a24      	ldr	r2, [pc, #144]	; (8009ffc <MPU_Init+0xc4>)
 8009f6c:	66da      	str	r2, [r3, #108]	; 0x6c
	pMPU9250->attitude.tau = 0.98;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	4a23      	ldr	r2, [pc, #140]	; (800a000 <MPU_Init+0xc8>)
 8009f72:	651a      	str	r2, [r3, #80]	; 0x50
	pMPU9250->attitude.lastTick = 0;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	2200      	movs	r2, #0
 8009f78:	655a      	str	r2, [r3, #84]	; 0x54
	pMPU9250->attitude.dt = 0;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	f04f 0200 	mov.w	r2, #0
 8009f80:	659a      	str	r2, [r3, #88]	; 0x58

	// Check if IMU configured properly and block if it didn't
	if (MPU_begin(SPIx, pMPU9250) != true)
 8009f82:	6839      	ldr	r1, [r7, #0]
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 f843 	bl	800a010 <MPU_begin>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d023      	beq.n	8009fd8 <MPU_Init+0xa0>
	{
		char str[100] = "ERROR: MPU9250 ID is wrong.";
 8009f90:	4b1c      	ldr	r3, [pc, #112]	; (800a004 <MPU_Init+0xcc>)
 8009f92:	f107 040c 	add.w	r4, r7, #12
 8009f96:	461d      	mov	r5, r3
 8009f98:	6828      	ldr	r0, [r5, #0]
 8009f9a:	6869      	ldr	r1, [r5, #4]
 8009f9c:	68aa      	ldr	r2, [r5, #8]
 8009f9e:	68eb      	ldr	r3, [r5, #12]
 8009fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fa2:	6928      	ldr	r0, [r5, #16]
 8009fa4:	6969      	ldr	r1, [r5, #20]
 8009fa6:	69aa      	ldr	r2, [r5, #24]
 8009fa8:	c407      	stmia	r4!, {r0, r1, r2}
 8009faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009fae:	2248      	movs	r2, #72	; 0x48
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f00b fa23 	bl	80153fe <memset>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8009fb8:	f107 030c 	add.w	r3, r7, #12
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7f6 f97f 	bl	80002c0 <strlen>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	f107 010c 	add.w	r1, r7, #12
 8009fca:	f04f 33ff 	mov.w	r3, #4294967295
 8009fce:	480e      	ldr	r0, [pc, #56]	; (800a008 <MPU_Init+0xd0>)
 8009fd0:	f006 f808 	bl	800ffe4 <HAL_UART_Transmit>
		return 1;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e00c      	b.n	8009ff2 <MPU_Init+0xba>
	}

	// Calibrate the IMU
	HAL_UART_Transmit(&huart3, "CALIBRATING...\r\n", strlen("CALIBRATING...\r\n"), HAL_MAX_DELAY);
 8009fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009fdc:	2210      	movs	r2, #16
 8009fde:	490b      	ldr	r1, [pc, #44]	; (800a00c <MPU_Init+0xd4>)
 8009fe0:	4809      	ldr	r0, [pc, #36]	; (800a008 <MPU_Init+0xd0>)
 8009fe2:	f005 ffff 	bl	800ffe4 <HAL_UART_Transmit>
	MPU_calibrateGyro(SPIx, pMPU9250, 20);
 8009fe6:	2214      	movs	r2, #20
 8009fe8:	6839      	ldr	r1, [r7, #0]
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f8a1 	bl	800a132 <MPU_calibrateGyro>

	return 0;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3770      	adds	r7, #112	; 0x70
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	40020c00 	.word	0x40020c00
 800a000:	3f7ae148 	.word	0x3f7ae148
 800a004:	0801bf40 	.word	0x0801bf40
 800a008:	20000c40 	.word	0x20000c40
 800a00c:	0801bf2c 	.word	0x0801bf2c

0800a010 <MPU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af02      	add	r7, sp, #8
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
    // Initialize variables
    uint8_t check, addr, val;

    // Confirm device
    MPU_REG_READ(SPIx, pMPU9250, WHO_AM_I, &check, 1);
 800a01a:	f107 030f 	add.w	r3, r7, #15
 800a01e:	2201      	movs	r2, #1
 800a020:	9200      	str	r2, [sp, #0]
 800a022:	2275      	movs	r2, #117	; 0x75
 800a024:	6839      	ldr	r1, [r7, #0]
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f90d 	bl	800a246 <MPU_REG_READ>
    if (check == WHO_AM_I_9250_ANS)
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
 800a02e:	2b70      	cmp	r3, #112	; 0x70
 800a030:	d17a      	bne.n	800a128 <MPU_begin+0x118>
    {
    	// Reset the sensor
    	addr = PWR_MGMT_1;
 800a032:	236b      	movs	r3, #107	; 0x6b
 800a034:	73bb      	strb	r3, [r7, #14]
        val = 0x80;
 800a036:	2380      	movs	r3, #128	; 0x80
 800a038:	737b      	strb	r3, [r7, #13]
    	MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a03a:	f107 030d 	add.w	r3, r7, #13
 800a03e:	f107 020e 	add.w	r2, r7, #14
 800a042:	6839      	ldr	r1, [r7, #0]
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 f8dd 	bl	800a204 <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a04a:	2032      	movs	r0, #50	; 0x32
 800a04c:	f000 fd2e 	bl	800aaac <HAL_Delay>

        // Startup & use PLL
        addr = PWR_MGMT_1;
 800a050:	236b      	movs	r3, #107	; 0x6b
 800a052:	73bb      	strb	r3, [r7, #14]
        val = 0x01;
 800a054:	2301      	movs	r3, #1
 800a056:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a058:	f107 030d 	add.w	r3, r7, #13
 800a05c:	f107 020e 	add.w	r2, r7, #14
 800a060:	6839      	ldr	r1, [r7, #0]
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f8ce 	bl	800a204 <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a068:	2032      	movs	r0, #50	; 0x32
 800a06a:	f000 fd1f 	bl	800aaac <HAL_Delay>

        // Enable everything
        addr = PWR_MGMT_2;
 800a06e:	236c      	movs	r3, #108	; 0x6c
 800a070:	73bb      	strb	r3, [r7, #14]
        val = 0x00;
 800a072:	2300      	movs	r3, #0
 800a074:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a076:	f107 030d 	add.w	r3, r7, #13
 800a07a:	f107 020e 	add.w	r2, r7, #14
 800a07e:	6839      	ldr	r1, [r7, #0]
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 f8bf 	bl	800a204 <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a086:	2032      	movs	r0, #50	; 0x32
 800a088:	f000 fd10 	bl	800aaac <HAL_Delay>

        // Sample rate is 1000 Hz
		addr = SMPLRT_DIV;
 800a08c:	2319      	movs	r3, #25
 800a08e:	73bb      	strb	r3, [r7, #14]
		val = 0x00;
 800a090:	2300      	movs	r3, #0
 800a092:	737b      	strb	r3, [r7, #13]
		MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a094:	f107 030d 	add.w	r3, r7, #13
 800a098:	f107 020e 	add.w	r2, r7, #14
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f8b0 	bl	800a204 <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a0a4:	2032      	movs	r0, #50	; 0x32
 800a0a6:	f000 fd01 	bl	800aaac <HAL_Delay>


    	// Gyro
    	// Set 20 Hz LPF for gyro
		uint8_t addr = CONFIG;
 800a0aa:	231a      	movs	r3, #26
 800a0ac:	733b      	strb	r3, [r7, #12]
		uint8_t val = 0x03;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	72fb      	strb	r3, [r7, #11]
		MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a0b2:	f107 030b 	add.w	r3, r7, #11
 800a0b6:	f107 020c 	add.w	r2, r7, #12
 800a0ba:	6839      	ldr	r1, [r7, #0]
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 f8a1 	bl	800a204 <MPU_REG_WRITE>
		HAL_Delay(50);
 800a0c2:	2032      	movs	r0, #50	; 0x32
 800a0c4:	f000 fcf2 	bl	800aaac <HAL_Delay>

		// Set the full scale range for gyro
        MPU_writeGyroFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.gFullScaleRange);
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	6839      	ldr	r1, [r7, #0]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f95c 	bl	800a390 <MPU_writeGyroFullScaleRange>


		// Accel
		// Set the full scale range for accel
        MPU_writeAccFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.aFullScaleRange);
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800a0de:	461a      	mov	r2, r3
 800a0e0:	6839      	ldr	r1, [r7, #0]
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 f8ea 	bl	800a2bc <MPU_writeAccFullScaleRange>

        // Set 44.8 Hz LPF for accel
		addr = ACCEL_CONFIG_2;
 800a0e8:	231d      	movs	r3, #29
 800a0ea:	733b      	strb	r3, [r7, #12]
		val = 0x03;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	72fb      	strb	r3, [r7, #11]
		MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a0f0:	f107 030b 	add.w	r3, r7, #11
 800a0f4:	f107 020c 	add.w	r2, r7, #12
 800a0f8:	6839      	ldr	r1, [r7, #0]
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f882 	bl	800a204 <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a100:	2032      	movs	r0, #50	; 0x32
 800a102:	f000 fcd3 	bl	800aaac <HAL_Delay>


        // Disable I2C (SPI only)
        addr = USER_CTRL;
 800a106:	236a      	movs	r3, #106	; 0x6a
 800a108:	733b      	strb	r3, [r7, #12]
        val = 0x10;
 800a10a:	2310      	movs	r3, #16
 800a10c:	72fb      	strb	r3, [r7, #11]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a10e:	f107 030b 	add.w	r3, r7, #11
 800a112:	f107 020c 	add.w	r2, r7, #12
 800a116:	6839      	ldr	r1, [r7, #0]
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 f873 	bl	800a204 <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a11e:	2032      	movs	r0, #50	; 0x32
 800a120:	f000 fcc4 	bl	800aaac <HAL_Delay>

        return 1;
 800a124:	2301      	movs	r3, #1
 800a126:	e000      	b.n	800a12a <MPU_begin+0x11a>
    }
    else
        return 0;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <MPU_calibrateGyro>:
/// @brief Find offsets for each axis of gyroscope
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param numCalPoints Number of data points to average
void MPU_calibrateGyro(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint16_t numCalPoints)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b088      	sub	sp, #32
 800a136:	af00      	add	r7, sp, #0
 800a138:	60f8      	str	r0, [r7, #12]
 800a13a:	60b9      	str	r1, [r7, #8]
 800a13c:	4613      	mov	r3, r2
 800a13e:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 800a140:	2300      	movs	r3, #0
 800a142:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 800a144:	2300      	movs	r3, #0
 800a146:	61bb      	str	r3, [r7, #24]
    int32_t z = 0;
 800a148:	2300      	movs	r3, #0
 800a14a:	617b      	str	r3, [r7, #20]

    // Zero guard
    if (numCalPoints == 0)
 800a14c:	88fb      	ldrh	r3, [r7, #6]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <MPU_calibrateGyro+0x24>
    {
        numCalPoints = 1;
 800a152:	2301      	movs	r3, #1
 800a154:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800a156:	2300      	movs	r3, #0
 800a158:	827b      	strh	r3, [r7, #18]
 800a15a:	e01e      	b.n	800a19a <MPU_calibrateGyro+0x68>
    {
        MPU_readRawData(SPIx, pMPU9250);
 800a15c:	68b9      	ldr	r1, [r7, #8]
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f000 f984 	bl	800a46c <MPU_readRawData>
        x += pMPU9250->rawData.gx;
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a16a:	461a      	mov	r2, r3
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	4413      	add	r3, r2
 800a170:	61fb      	str	r3, [r7, #28]
        y += pMPU9250->rawData.gy;
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a178:	461a      	mov	r2, r3
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	4413      	add	r3, r2
 800a17e:	61bb      	str	r3, [r7, #24]
        z += pMPU9250->rawData.gz;
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a186:	461a      	mov	r2, r3
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	4413      	add	r3, r2
 800a18c:	617b      	str	r3, [r7, #20]
        HAL_Delay(3);
 800a18e:	2003      	movs	r0, #3
 800a190:	f000 fc8c 	bl	800aaac <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800a194:	8a7b      	ldrh	r3, [r7, #18]
 800a196:	3301      	adds	r3, #1
 800a198:	827b      	strh	r3, [r7, #18]
 800a19a:	8a7a      	ldrh	r2, [r7, #18]
 800a19c:	88fb      	ldrh	r3, [r7, #6]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d3dc      	bcc.n	800a15c <MPU_calibrateGyro+0x2a>
    }

    // Average the saved data points to find the gyroscope offset
    pMPU9250->gyroBias.x = (float)x / (float)numCalPoints;
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	ee07 3a90 	vmov	s15, r3
 800a1a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a1ac:	88fb      	ldrh	r3, [r7, #6]
 800a1ae:	ee07 3a90 	vmov	s15, r3
 800a1b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a1b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    pMPU9250->gyroBias.y = (float)y / (float)numCalPoints;
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	ee07 3a90 	vmov	s15, r3
 800a1c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a1ca:	88fb      	ldrh	r3, [r7, #6]
 800a1cc:	ee07 3a90 	vmov	s15, r3
 800a1d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a1d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    pMPU9250->gyroBias.z = (float)z / (float)numCalPoints;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	ee07 3a90 	vmov	s15, r3
 800a1e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a1e8:	88fb      	ldrh	r3, [r7, #6]
 800a1ea:	ee07 3a90 	vmov	s15, r3
 800a1ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a1f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
}
 800a1fc:	bf00      	nop
 800a1fe:	3720      	adds	r7, #32
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <MPU_REG_WRITE>:
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param pAddr Pointer to address to be written to
/// @param pVal Pointer of value to write to given address
void MPU_REG_WRITE(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t *pAddr, uint8_t *pVal)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
 800a210:	603b      	str	r3, [r7, #0]
    MPU_CS(pMPU9250, CS_SELECT);
 800a212:	2100      	movs	r1, #0
 800a214:	68b8      	ldr	r0, [r7, #8]
 800a216:	f000 f83e 	bl	800a296 <MPU_CS>
    HAL_SPI_Transmit(SPIx, pAddr, 1, SPI_TIMOUT_MS);
 800a21a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a21e:	2201      	movs	r2, #1
 800a220:	6879      	ldr	r1, [r7, #4]
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f003 f9f9 	bl	800d61a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pVal, 1, SPI_TIMOUT_MS);
 800a228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a22c:	2201      	movs	r2, #1
 800a22e:	6839      	ldr	r1, [r7, #0]
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f003 f9f2 	bl	800d61a <HAL_SPI_Transmit>
    MPU_CS(pMPU9250, CS_DESELECT);
 800a236:	2101      	movs	r1, #1
 800a238:	68b8      	ldr	r0, [r7, #8]
 800a23a:	f000 f82c 	bl	800a296 <MPU_CS>
}
 800a23e:	bf00      	nop
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <MPU_REG_READ>:
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param addr Address to start reading at
/// @param pRxData Pointer to data buffer
/// @param RxSize Size of data buffer
void MPU_REG_READ(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t addr, uint8_t *pRxData, uint16_t RxSize)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b086      	sub	sp, #24
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	60f8      	str	r0, [r7, #12]
 800a24e:	60b9      	str	r1, [r7, #8]
 800a250:	603b      	str	r3, [r7, #0]
 800a252:	4613      	mov	r3, r2
 800a254:	71fb      	strb	r3, [r7, #7]
    MPU_CS(pMPU9250, CS_SELECT);
 800a256:	2100      	movs	r1, #0
 800a258:	68b8      	ldr	r0, [r7, #8]
 800a25a:	f000 f81c 	bl	800a296 <MPU_CS>
    uint8_t writeAddr = addr | READWRITE;
 800a25e:	79fb      	ldrb	r3, [r7, #7]
 800a260:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a264:	b2db      	uxtb	r3, r3
 800a266:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(SPIx, &writeAddr, 1, SPI_TIMOUT_MS);
 800a268:	f107 0117 	add.w	r1, r7, #23
 800a26c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a270:	2201      	movs	r2, #1
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f003 f9d1 	bl	800d61a <HAL_SPI_Transmit>
    HAL_SPI_Receive(SPIx, pRxData, RxSize, SPI_TIMOUT_MS);
 800a278:	8c3a      	ldrh	r2, [r7, #32]
 800a27a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a27e:	6839      	ldr	r1, [r7, #0]
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f003 fb38 	bl	800d8f6 <HAL_SPI_Receive>
    MPU_CS(pMPU9250, CS_DESELECT);
 800a286:	2101      	movs	r1, #1
 800a288:	68b8      	ldr	r0, [r7, #8]
 800a28a:	f000 f804 	bl	800a296 <MPU_CS>
}
 800a28e:	bf00      	nop
 800a290:	3718      	adds	r7, #24
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <MPU_CS>:

/// @brief Set CS state to either start or end transmissions
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param state Set low to select, high to deselect
void MPU_CS(MPU9250_t *pMPU9250, uint8_t state)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b082      	sub	sp, #8
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
 800a29e:	460b      	mov	r3, r1
 800a2a0:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(pMPU9250->settings.CS_PORT, pMPU9250->settings.CS_PIN, state);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800a2ac:	78fa      	ldrb	r2, [r7, #3]
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	f001 faa8 	bl	800b804 <HAL_GPIO_WritePin>
}
 800a2b4:	bf00      	nop
 800a2b6:	3708      	adds	r7, #8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <MPU_writeAccFullScaleRange>:
/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t aScale)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = ACCEL_CONFIG;
 800a2ca:	231c      	movs	r3, #28
 800a2cc:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (aScale)
 800a2ce:	79fb      	ldrb	r3, [r7, #7]
 800a2d0:	2b03      	cmp	r3, #3
 800a2d2:	d847      	bhi.n	800a364 <MPU_writeAccFullScaleRange+0xa8>
 800a2d4:	a201      	add	r2, pc, #4	; (adr r2, 800a2dc <MPU_writeAccFullScaleRange+0x20>)
 800a2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2da:	bf00      	nop
 800a2dc:	0800a2ed 	.word	0x0800a2ed
 800a2e0:	0800a30b 	.word	0x0800a30b
 800a2e4:	0800a329 	.word	0x0800a329
 800a2e8:	0800a347 	.word	0x0800a347
    {
    case AFSR_2G:
        pMPU9250->sensorData.aScaleFactor = 16384.0;
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800a2f2:	615a      	str	r2, [r3, #20]
        val = 0x00;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a2f8:	f107 0316 	add.w	r3, r7, #22
 800a2fc:	f107 0217 	add.w	r2, r7, #23
 800a300:	68b9      	ldr	r1, [r7, #8]
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f7ff ff7e 	bl	800a204 <MPU_REG_WRITE>
        break;
 800a308:	e03b      	b.n	800a382 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_4G:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800a310:	615a      	str	r2, [r3, #20]
        val = 0x08;
 800a312:	2308      	movs	r3, #8
 800a314:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a316:	f107 0316 	add.w	r3, r7, #22
 800a31a:	f107 0217 	add.w	r2, r7, #23
 800a31e:	68b9      	ldr	r1, [r7, #8]
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	f7ff ff6f 	bl	800a204 <MPU_REG_WRITE>
        break;
 800a326:	e02c      	b.n	800a382 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_8G:
        pMPU9250->sensorData.aScaleFactor = 4096.0;
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800a32e:	615a      	str	r2, [r3, #20]
        val = 0x10;
 800a330:	2310      	movs	r3, #16
 800a332:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a334:	f107 0316 	add.w	r3, r7, #22
 800a338:	f107 0217 	add.w	r2, r7, #23
 800a33c:	68b9      	ldr	r1, [r7, #8]
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f7ff ff60 	bl	800a204 <MPU_REG_WRITE>
        break;
 800a344:	e01d      	b.n	800a382 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_16G:
        pMPU9250->sensorData.aScaleFactor = 2048.0;
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 800a34c:	615a      	str	r2, [r3, #20]
        val = 0x18;
 800a34e:	2318      	movs	r3, #24
 800a350:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a352:	f107 0316 	add.w	r3, r7, #22
 800a356:	f107 0217 	add.w	r2, r7, #23
 800a35a:	68b9      	ldr	r1, [r7, #8]
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f7ff ff51 	bl	800a204 <MPU_REG_WRITE>
        break;
 800a362:	e00e      	b.n	800a382 <MPU_writeAccFullScaleRange+0xc6>
    default:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800a36a:	615a      	str	r2, [r3, #20]
        val = 0x08;
 800a36c:	2308      	movs	r3, #8
 800a36e:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a370:	f107 0316 	add.w	r3, r7, #22
 800a374:	f107 0217 	add.w	r2, r7, #23
 800a378:	68b9      	ldr	r1, [r7, #8]
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f7ff ff42 	bl	800a204 <MPU_REG_WRITE>
        break;
 800a380:	bf00      	nop
    }
	HAL_Delay(50);
 800a382:	2032      	movs	r0, #50	; 0x32
 800a384:	f000 fb92 	bl	800aaac <HAL_Delay>
}
 800a388:	bf00      	nop
 800a38a:	3718      	adds	r7, #24
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <MPU_writeGyroFullScaleRange>:
/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t gScale)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	4613      	mov	r3, r2
 800a39c:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = GYRO_CONFIG;
 800a39e:	231b      	movs	r3, #27
 800a3a0:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (gScale)
 800a3a2:	79fb      	ldrb	r3, [r7, #7]
 800a3a4:	2b03      	cmp	r3, #3
 800a3a6:	d843      	bhi.n	800a430 <MPU_writeGyroFullScaleRange+0xa0>
 800a3a8:	a201      	add	r2, pc, #4	; (adr r2, 800a3b0 <MPU_writeGyroFullScaleRange+0x20>)
 800a3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ae:	bf00      	nop
 800a3b0:	0800a3c1 	.word	0x0800a3c1
 800a3b4:	0800a3dd 	.word	0x0800a3dd
 800a3b8:	0800a3f9 	.word	0x0800a3f9
 800a3bc:	0800a415 	.word	0x0800a415
    {
    case GFSR_250DPS:
        pMPU9250->sensorData.gScaleFactor = 131.0;
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	4a26      	ldr	r2, [pc, #152]	; (800a45c <MPU_writeGyroFullScaleRange+0xcc>)
 800a3c4:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x00;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a3ca:	f107 0316 	add.w	r3, r7, #22
 800a3ce:	f107 0217 	add.w	r2, r7, #23
 800a3d2:	68b9      	ldr	r1, [r7, #8]
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f7ff ff15 	bl	800a204 <MPU_REG_WRITE>
        break;
 800a3da:	e037      	b.n	800a44c <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_500DPS:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	4a20      	ldr	r2, [pc, #128]	; (800a460 <MPU_writeGyroFullScaleRange+0xd0>)
 800a3e0:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x08;
 800a3e2:	2308      	movs	r3, #8
 800a3e4:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a3e6:	f107 0316 	add.w	r3, r7, #22
 800a3ea:	f107 0217 	add.w	r2, r7, #23
 800a3ee:	68b9      	ldr	r1, [r7, #8]
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f7ff ff07 	bl	800a204 <MPU_REG_WRITE>
        break;
 800a3f6:	e029      	b.n	800a44c <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_1000DPS:
        pMPU9250->sensorData.gScaleFactor = 32.8;
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	4a1a      	ldr	r2, [pc, #104]	; (800a464 <MPU_writeGyroFullScaleRange+0xd4>)
 800a3fc:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x10;
 800a3fe:	2310      	movs	r3, #16
 800a400:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a402:	f107 0316 	add.w	r3, r7, #22
 800a406:	f107 0217 	add.w	r2, r7, #23
 800a40a:	68b9      	ldr	r1, [r7, #8]
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f7ff fef9 	bl	800a204 <MPU_REG_WRITE>
        break;
 800a412:	e01b      	b.n	800a44c <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_2000DPS:
        pMPU9250->sensorData.gScaleFactor = 16.4;
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	4a14      	ldr	r2, [pc, #80]	; (800a468 <MPU_writeGyroFullScaleRange+0xd8>)
 800a418:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x18;
 800a41a:	2318      	movs	r3, #24
 800a41c:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a41e:	f107 0316 	add.w	r3, r7, #22
 800a422:	f107 0217 	add.w	r2, r7, #23
 800a426:	68b9      	ldr	r1, [r7, #8]
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f7ff feeb 	bl	800a204 <MPU_REG_WRITE>
        break;
 800a42e:	e00d      	b.n	800a44c <MPU_writeGyroFullScaleRange+0xbc>
    default:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	4a0b      	ldr	r2, [pc, #44]	; (800a460 <MPU_writeGyroFullScaleRange+0xd0>)
 800a434:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x08;
 800a436:	2308      	movs	r3, #8
 800a438:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a43a:	f107 0316 	add.w	r3, r7, #22
 800a43e:	f107 0217 	add.w	r2, r7, #23
 800a442:	68b9      	ldr	r1, [r7, #8]
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f7ff fedd 	bl	800a204 <MPU_REG_WRITE>
        break;
 800a44a:	bf00      	nop
    }
	HAL_Delay(50);
 800a44c:	2032      	movs	r0, #50	; 0x32
 800a44e:	f000 fb2d 	bl	800aaac <HAL_Delay>
}
 800a452:	bf00      	nop
 800a454:	3718      	adds	r7, #24
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	43030000 	.word	0x43030000
 800a460:	42830000 	.word	0x42830000
 800a464:	42033333 	.word	0x42033333
 800a468:	41833333 	.word	0x41833333

0800a46c <MPU_readRawData>:

/// @brief Read raw data from IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readRawData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b08e      	sub	sp, #56	; 0x38
 800a470:	af02      	add	r7, sp, #8
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
    // Init buffer
    uint8_t buf[6+2+6+24];

    // Subroutine for reading the raw data
    MPU_REG_READ(SPIx, pMPU9250, ACCEL_XOUT_H, buf, 6+2+6+24);
 800a476:	f107 0308 	add.w	r3, r7, #8
 800a47a:	2226      	movs	r2, #38	; 0x26
 800a47c:	9200      	str	r2, [sp, #0]
 800a47e:	223b      	movs	r2, #59	; 0x3b
 800a480:	6839      	ldr	r1, [r7, #0]
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f7ff fedf 	bl	800a246 <MPU_REG_READ>

    // IMPORTANT Coordinate system conversion!
    // buf[0-1] -> IC X axis -> Y Drone axis
    // buf[2-3] -> IC Y axis -> X Drone axis
    // buf[4-5] -> IC Z axis -> Z Drone axis
    pMPU9250->rawData.ay = (buf[0] << 8 | buf[1]);
 800a488:	7a3b      	ldrb	r3, [r7, #8]
 800a48a:	021b      	lsls	r3, r3, #8
 800a48c:	b21a      	sxth	r2, r3
 800a48e:	7a7b      	ldrb	r3, [r7, #9]
 800a490:	b21b      	sxth	r3, r3
 800a492:	4313      	orrs	r3, r2
 800a494:	b21a      	sxth	r2, r3
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	805a      	strh	r2, [r3, #2]
    pMPU9250->rawData.ax = (buf[2] << 8 | buf[3]);
 800a49a:	7abb      	ldrb	r3, [r7, #10]
 800a49c:	021b      	lsls	r3, r3, #8
 800a49e:	b21a      	sxth	r2, r3
 800a4a0:	7afb      	ldrb	r3, [r7, #11]
 800a4a2:	b21b      	sxth	r3, r3
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	b21a      	sxth	r2, r3
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	801a      	strh	r2, [r3, #0]
    pMPU9250->rawData.az = (buf[4] << 8 | buf[5]);
 800a4ac:	7b3b      	ldrb	r3, [r7, #12]
 800a4ae:	021b      	lsls	r3, r3, #8
 800a4b0:	b21a      	sxth	r2, r3
 800a4b2:	7b7b      	ldrb	r3, [r7, #13]
 800a4b4:	b21b      	sxth	r3, r3
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	b21a      	sxth	r2, r3
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	809a      	strh	r2, [r3, #4]

    pMPU9250->rawData.temp = buf[6] << 8 | buf[7];
 800a4be:	7bbb      	ldrb	r3, [r7, #14]
 800a4c0:	021b      	lsls	r3, r3, #8
 800a4c2:	b21a      	sxth	r2, r3
 800a4c4:	7bfb      	ldrb	r3, [r7, #15]
 800a4c6:	b21b      	sxth	r3, r3
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	b21a      	sxth	r2, r3
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	80da      	strh	r2, [r3, #6]

    // IMPORTANT Coordinate system conversion!
    // buf[ 8- 9] -> IC X axis -> -Y Drone axis
	// buf[10-11] -> IC Y axis -> -X Drone axis
	// buf[12-13] -> IC Z axis -> -Z Drone axis
    pMPU9250->rawData.gy = -(buf[8] << 8 | buf[9]);
 800a4d0:	7c3b      	ldrb	r3, [r7, #16]
 800a4d2:	021b      	lsls	r3, r3, #8
 800a4d4:	b21a      	sxth	r2, r3
 800a4d6:	7c7b      	ldrb	r3, [r7, #17]
 800a4d8:	b21b      	sxth	r3, r3
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	b21b      	sxth	r3, r3
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	425b      	negs	r3, r3
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	b21a      	sxth	r2, r3
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	815a      	strh	r2, [r3, #10]
    pMPU9250->rawData.gx = -(buf[10] << 8 | buf[11]);
 800a4ea:	7cbb      	ldrb	r3, [r7, #18]
 800a4ec:	021b      	lsls	r3, r3, #8
 800a4ee:	b21a      	sxth	r2, r3
 800a4f0:	7cfb      	ldrb	r3, [r7, #19]
 800a4f2:	b21b      	sxth	r3, r3
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	b21b      	sxth	r3, r3
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	425b      	negs	r3, r3
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	b21a      	sxth	r2, r3
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	811a      	strh	r2, [r3, #8]
    pMPU9250->rawData.gz = -(buf[12] << 8 | buf[13]);
 800a504:	7d3b      	ldrb	r3, [r7, #20]
 800a506:	021b      	lsls	r3, r3, #8
 800a508:	b21a      	sxth	r2, r3
 800a50a:	7d7b      	ldrb	r3, [r7, #21]
 800a50c:	b21b      	sxth	r3, r3
 800a50e:	4313      	orrs	r3, r2
 800a510:	b21b      	sxth	r3, r3
 800a512:	b29b      	uxth	r3, r3
 800a514:	425b      	negs	r3, r3
 800a516:	b29b      	uxth	r3, r3
 800a518:	b21a      	sxth	r2, r3
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	819a      	strh	r2, [r3, #12]

    //pMPU9250->rawData.mx = buf[14+MAGN_X_OFFS_H] << 8 | buf[14+MAGN_X_OFFS_L];
	//pMPU9250->rawData.my = buf[14+MAGN_Y_OFFS_H] << 8 | buf[14+MAGN_Y_OFFS_L];
	//pMPU9250->rawData.mz = buf[14+MAGN_Z_OFFS_H] << 8 | buf[14+MAGN_Z_OFFS_L];
}
 800a51e:	bf00      	nop
 800a520:	3730      	adds	r7, #48	; 0x30
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
	...

0800a528 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readProcessedData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
    // Get raw values from the IMU
    MPU_readRawData(SPIx, pMPU9250);
 800a532:	6839      	ldr	r1, [r7, #0]
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f7ff ff99 	bl	800a46c <MPU_readRawData>

    // Convert accelerometer values to g's
    pMPU9250->sensorData.ax = pMPU9250->rawData.ax / pMPU9250->sensorData.aScaleFactor;
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a540:	ee07 3a90 	vmov	s15, r3
 800a544:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	ed93 7a05 	vldr	s14, [r3, #20]
 800a54e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	edc3 7a06 	vstr	s15, [r3, #24]
    pMPU9250->sensorData.ay = pMPU9250->rawData.ay / pMPU9250->sensorData.aScaleFactor;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a55e:	ee07 3a90 	vmov	s15, r3
 800a562:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	ed93 7a05 	vldr	s14, [r3, #20]
 800a56c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	edc3 7a07 	vstr	s15, [r3, #28]
    pMPU9250->sensorData.az = pMPU9250->rawData.az / pMPU9250->sensorData.aScaleFactor;
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a57c:	ee07 3a90 	vmov	s15, r3
 800a580:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	ed93 7a05 	vldr	s14, [r3, #20]
 800a58a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	edc3 7a08 	vstr	s15, [r3, #32]

    // Convert raw temperature data to Celsius
    pMPU9250->sensorData.temp = (pMPU9250->rawData.temp - 0) / TEMP_SENS + 21;
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7f5 ffea 	bl	8000574 <__aeabi_i2d>
 800a5a0:	a336      	add	r3, pc, #216	; (adr r3, 800a67c <MPU_readProcessedData+0x154>)
 800a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a6:	f7f6 f979 	bl	800089c <__aeabi_ddiv>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	4610      	mov	r0, r2
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	f04f 0200 	mov.w	r2, #0
 800a5b6:	4b30      	ldr	r3, [pc, #192]	; (800a678 <MPU_readProcessedData+0x150>)
 800a5b8:	f7f5 fe90 	bl	80002dc <__adddf3>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4610      	mov	r0, r2
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	f7f6 fb38 	bl	8000c38 <__aeabi_d2f>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	625a      	str	r2, [r3, #36]	; 0x24

    // Compensate for gyro bias
    pMPU9250->sensorData.gx = pMPU9250->rawData.gx - pMPU9250->gyroBias.x;
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a5d4:	ee07 3a90 	vmov	s15, r3
 800a5d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800a5e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy = pMPU9250->rawData.gy - pMPU9250->gyroBias.y;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a5f2:	ee07 3a90 	vmov	s15, r3
 800a5f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800a600:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz = pMPU9250->rawData.gz - pMPU9250->gyroBias.z;
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a610:	ee07 3a90 	vmov	s15, r3
 800a614:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800a61e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // Convert gyro values to deg/s
    pMPU9250->sensorData.gx /= pMPU9250->sensorData.gScaleFactor;
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800a634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy /= pMPU9250->sensorData.gScaleFactor;
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800a64a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz /= pMPU9250->sensorData.gScaleFactor;
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800a660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 800a66a:	bf00      	nop
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	f3af 8000 	nop.w
 800a678:	40350000 	.word	0x40350000
 800a67c:	851eb852 	.word	0x851eb852
 800a680:	4074ddeb 	.word	0x4074ddeb

0800a684 <HCSR04_Init>:
#include "HCSR04/HCSR04.h"

extern osSemaphoreId DistSemaphoreHandle;

uint8_t HCSR04_Init(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
	pHCSR04->TRIG_GPIO = DIS_TRIG_OUT_GPIO_Port;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4a21      	ldr	r2, [pc, #132]	; (800a718 <HCSR04_Init+0x94>)
 800a692:	601a      	str	r2, [r3, #0]
	pHCSR04->TRIG_PIN = DIS_TRIG_OUT_Pin;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a69a:	809a      	strh	r2, [r3, #4]
	pHCSR04->TIM_Instance = TIM3;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	4a1f      	ldr	r2, [pc, #124]	; (800a71c <HCSR04_Init+0x98>)
 800a6a0:	609a      	str	r2, [r3, #8]
	pHCSR04->IC_TIM_CH = TIM_CHANNEL_1;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	60da      	str	r2, [r3, #12]
	pHCSR04->TIM_CLK_MHz = 108;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	226c      	movs	r2, #108	; 0x6c
 800a6ac:	611a      	str	r2, [r3, #16]
	pHCSR04->Triggered = false;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	751a      	strb	r2, [r3, #20]

	if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_1)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d104      	bne.n	800a6c6 <HCSR04_Init+0x42>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800a6c4:	e019      	b.n	800a6fa <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_2)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	2b04      	cmp	r3, #4
 800a6cc:	d104      	bne.n	800a6d8 <HCSR04_Init+0x54>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2202      	movs	r2, #2
 800a6d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800a6d6:	e010      	b.n	800a6fa <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_3)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	2b08      	cmp	r3, #8
 800a6de:	d104      	bne.n	800a6ea <HCSR04_Init+0x66>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2204      	movs	r2, #4
 800a6e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800a6e8:	e007      	b.n	800a6fa <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_4)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	68db      	ldr	r3, [r3, #12]
 800a6ee:	2b0c      	cmp	r3, #12
 800a6f0:	d103      	bne.n	800a6fa <HCSR04_Init+0x76>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2208      	movs	r2, #8
 800a6f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(htim);
 800a6fa:	6838      	ldr	r0, [r7, #0]
 800a6fc:	f003 fe9a 	bl	800e434 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(htim, pHCSR04->IC_TIM_CH);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	4619      	mov	r1, r3
 800a706:	6838      	ldr	r0, [r7, #0]
 800a708:	f004 f8c0 	bl	800e88c <HAL_TIM_IC_Start_IT>

	return 0;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3708      	adds	r7, #8
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	40020c00 	.word	0x40020c00
 800a71c:	40000400 	.word	0x40000400

0800a720 <HCSR04_TMR_IC_ISR>:
	}
}


void HCSR04_TMR_IC_ISR(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
	uint32_t PS = 0;
 800a72a:	2300      	movs	r3, #0
 800a72c:	60fb      	str	r3, [r7, #12]

	if((htim->Instance == pHCSR04->TIM_Instance) && (htim->Channel == pHCSR04->ACTIV_CH))
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	429a      	cmp	r2, r3
 800a738:	f040 812e 	bne.w	800a998 <HCSR04_TMR_IC_ISR+0x278>
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	7f1a      	ldrb	r2, [r3, #28]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a746:	429a      	cmp	r2, r3
 800a748:	f040 8126 	bne.w	800a998 <HCSR04_TMR_IC_ISR+0x278>
	{
		if (pHCSR04->EDGE_STATE == 0)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	7d5b      	ldrb	r3, [r3, #21]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d16d      	bne.n	800a830 <HCSR04_TMR_IC_ISR+0x110>
		{
			// Capture T1 & Reverse The ICU Edge Polarity
			pHCSR04->T1 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	4619      	mov	r1, r3
 800a75a:	6838      	ldr	r0, [r7, #0]
 800a75c:	f004 fd80 	bl	800f260 <HAL_TIM_ReadCapturedValue>
 800a760:	4602      	mov	r2, r0
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	621a      	str	r2, [r3, #32]
			pHCSR04->EDGE_STATE = 1;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2201      	movs	r2, #1
 800a76a:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d108      	bne.n	800a786 <HCSR04_TMR_IC_ISR+0x66>
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	6a1a      	ldr	r2, [r3, #32]
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f022 020a 	bic.w	r2, r2, #10
 800a782:	621a      	str	r2, [r3, #32]
 800a784:	e021      	b.n	800a7ca <HCSR04_TMR_IC_ISR+0xaa>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	2b04      	cmp	r3, #4
 800a78c:	d108      	bne.n	800a7a0 <HCSR04_TMR_IC_ISR+0x80>
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	6a1b      	ldr	r3, [r3, #32]
 800a794:	683a      	ldr	r2, [r7, #0]
 800a796:	6812      	ldr	r2, [r2, #0]
 800a798:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a79c:	6213      	str	r3, [r2, #32]
 800a79e:	e014      	b.n	800a7ca <HCSR04_TMR_IC_ISR+0xaa>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	2b08      	cmp	r3, #8
 800a7a6:	d108      	bne.n	800a7ba <HCSR04_TMR_IC_ISR+0x9a>
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6a1b      	ldr	r3, [r3, #32]
 800a7ae:	683a      	ldr	r2, [r7, #0]
 800a7b0:	6812      	ldr	r2, [r2, #0]
 800a7b2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a7b6:	6213      	str	r3, [r2, #32]
 800a7b8:	e007      	b.n	800a7ca <HCSR04_TMR_IC_ISR+0xaa>
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	6a1b      	ldr	r3, [r3, #32]
 800a7c0:	683a      	ldr	r2, [r7, #0]
 800a7c2:	6812      	ldr	r2, [r2, #0]
 800a7c4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a7c8:	6213      	str	r3, [r2, #32]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d108      	bne.n	800a7e4 <HCSR04_TMR_IC_ISR+0xc4>
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	6a1a      	ldr	r2, [r3, #32]
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f042 0202 	orr.w	r2, r2, #2
 800a7e0:	621a      	str	r2, [r3, #32]
 800a7e2:	e021      	b.n	800a828 <HCSR04_TMR_IC_ISR+0x108>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	2b04      	cmp	r3, #4
 800a7ea:	d108      	bne.n	800a7fe <HCSR04_TMR_IC_ISR+0xde>
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	6a1b      	ldr	r3, [r3, #32]
 800a7f2:	683a      	ldr	r2, [r7, #0]
 800a7f4:	6812      	ldr	r2, [r2, #0]
 800a7f6:	f043 0320 	orr.w	r3, r3, #32
 800a7fa:	6213      	str	r3, [r2, #32]
 800a7fc:	e014      	b.n	800a828 <HCSR04_TMR_IC_ISR+0x108>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	2b08      	cmp	r3, #8
 800a804:	d108      	bne.n	800a818 <HCSR04_TMR_IC_ISR+0xf8>
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	6a1b      	ldr	r3, [r3, #32]
 800a80c:	683a      	ldr	r2, [r7, #0]
 800a80e:	6812      	ldr	r2, [r2, #0]
 800a810:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a814:	6213      	str	r3, [r2, #32]
 800a816:	e007      	b.n	800a828 <HCSR04_TMR_IC_ISR+0x108>
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6a1b      	ldr	r3, [r3, #32]
 800a81e:	683a      	ldr	r2, [r7, #0]
 800a820:	6812      	ldr	r2, [r2, #0]
 800a822:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a826:	6213      	str	r3, [r2, #32]
			pHCSR04->TMR_OVC = 0;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	82da      	strh	r2, [r3, #22]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);

			osSemaphoreRelease(DistSemaphoreHandle);
		}
	}
}
 800a82e:	e0b3      	b.n	800a998 <HCSR04_TMR_IC_ISR+0x278>
		else if (pHCSR04->EDGE_STATE == 1)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	7d5b      	ldrb	r3, [r3, #21]
 800a834:	2b01      	cmp	r3, #1
 800a836:	f040 80af 	bne.w	800a998 <HCSR04_TMR_IC_ISR+0x278>
			PS = pHCSR04->TIM_Instance->PSC;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a840:	60fb      	str	r3, [r7, #12]
			pHCSR04->TMR_ARR = pHCSR04->TIM_Instance->ARR;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	61da      	str	r2, [r3, #28]
			pHCSR04->T2 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	4619      	mov	r1, r3
 800a852:	6838      	ldr	r0, [r7, #0]
 800a854:	f004 fd04 	bl	800f260 <HAL_TIM_ReadCapturedValue>
 800a858:	4602      	mov	r2, r0
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	625a      	str	r2, [r3, #36]	; 0x24
			if (pHCSR04->T1 < pHCSR04->T2)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6a1a      	ldr	r2, [r3, #32]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a866:	429a      	cmp	r2, r3
 800a868:	d207      	bcs.n	800a87a <HCSR04_TMR_IC_ISR+0x15a>
				pHCSR04->DIFF = pHCSR04->T2 - pHCSR04->T1;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a1b      	ldr	r3, [r3, #32]
 800a872:	1ad2      	subs	r2, r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	629a      	str	r2, [r3, #40]	; 0x28
 800a878:	e00f      	b.n	800a89a <HCSR04_TMR_IC_ISR+0x17a>
			else if (pHCSR04->T2 < pHCSR04->T1)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	429a      	cmp	r2, r3
 800a884:	d209      	bcs.n	800a89a <HCSR04_TMR_IC_ISR+0x17a>
				pHCSR04->DIFF = (pHCSR04->T2 + 65535) - pHCSR04->T1;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a1b      	ldr	r3, [r3, #32]
 800a88e:	1ad2      	subs	r2, r2, r3
 800a890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a894:	4413      	add	r3, r2
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	6293      	str	r3, [r2, #40]	; 0x28
			pHCSR04->DISTANCE = ((pHCSR04->DIFF / 1000.0f) * 340.0f / 2.0f) / (pHCSR04->TIM_CLK_MHz/(PS+1));
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a89e:	ee07 3a90 	vmov	s15, r3
 800a8a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a8a6:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800a9a0 <HCSR04_TMR_IC_ISR+0x280>
 800a8aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a8ae:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800a9a4 <HCSR04_TMR_IC_ISR+0x284>
 800a8b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a8b6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a8ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	691a      	ldr	r2, [r3, #16]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ca:	ee07 3a90 	vmov	s15, r3
 800a8ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a8d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			pHCSR04->EDGE_STATE = 0;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d108      	bne.n	800a8fc <HCSR04_TMR_IC_ISR+0x1dc>
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	6a1a      	ldr	r2, [r3, #32]
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f022 020a 	bic.w	r2, r2, #10
 800a8f8:	621a      	str	r2, [r3, #32]
 800a8fa:	e021      	b.n	800a940 <HCSR04_TMR_IC_ISR+0x220>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	2b04      	cmp	r3, #4
 800a902:	d108      	bne.n	800a916 <HCSR04_TMR_IC_ISR+0x1f6>
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	6a1b      	ldr	r3, [r3, #32]
 800a90a:	683a      	ldr	r2, [r7, #0]
 800a90c:	6812      	ldr	r2, [r2, #0]
 800a90e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a912:	6213      	str	r3, [r2, #32]
 800a914:	e014      	b.n	800a940 <HCSR04_TMR_IC_ISR+0x220>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	2b08      	cmp	r3, #8
 800a91c:	d108      	bne.n	800a930 <HCSR04_TMR_IC_ISR+0x210>
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	6a1b      	ldr	r3, [r3, #32]
 800a924:	683a      	ldr	r2, [r7, #0]
 800a926:	6812      	ldr	r2, [r2, #0]
 800a928:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a92c:	6213      	str	r3, [r2, #32]
 800a92e:	e007      	b.n	800a940 <HCSR04_TMR_IC_ISR+0x220>
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	6a1b      	ldr	r3, [r3, #32]
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	6812      	ldr	r2, [r2, #0]
 800a93a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a93e:	6213      	str	r3, [r2, #32]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d106      	bne.n	800a956 <HCSR04_TMR_IC_ISR+0x236>
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	6a12      	ldr	r2, [r2, #32]
 800a952:	621a      	str	r2, [r3, #32]
 800a954:	e01b      	b.n	800a98e <HCSR04_TMR_IC_ISR+0x26e>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	2b04      	cmp	r3, #4
 800a95c:	d106      	bne.n	800a96c <HCSR04_TMR_IC_ISR+0x24c>
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	683a      	ldr	r2, [r7, #0]
 800a964:	6812      	ldr	r2, [r2, #0]
 800a966:	6a1b      	ldr	r3, [r3, #32]
 800a968:	6213      	str	r3, [r2, #32]
 800a96a:	e010      	b.n	800a98e <HCSR04_TMR_IC_ISR+0x26e>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	2b08      	cmp	r3, #8
 800a972:	d106      	bne.n	800a982 <HCSR04_TMR_IC_ISR+0x262>
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	683a      	ldr	r2, [r7, #0]
 800a97a:	6812      	ldr	r2, [r2, #0]
 800a97c:	6a1b      	ldr	r3, [r3, #32]
 800a97e:	6213      	str	r3, [r2, #32]
 800a980:	e005      	b.n	800a98e <HCSR04_TMR_IC_ISR+0x26e>
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	6812      	ldr	r2, [r2, #0]
 800a98a:	6a1b      	ldr	r3, [r3, #32]
 800a98c:	6213      	str	r3, [r2, #32]
			osSemaphoreRelease(DistSemaphoreHandle);
 800a98e:	4b06      	ldr	r3, [pc, #24]	; (800a9a8 <HCSR04_TMR_IC_ISR+0x288>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4618      	mov	r0, r3
 800a994:	f007 f95e 	bl	8011c54 <osSemaphoreRelease>
}
 800a998:	bf00      	nop
 800a99a:	3710      	adds	r7, #16
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	447a0000 	.word	0x447a0000
 800a9a4:	43aa0000 	.word	0x43aa0000
 800a9a8:	20000d60 	.word	0x20000d60

0800a9ac <HCSR04_Trigger>:

void HCSR04_Trigger(HCSR04_t* pHCSR04)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_SET);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6818      	ldr	r0, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	889b      	ldrh	r3, [r3, #4]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	4619      	mov	r1, r3
 800a9c0:	f000 ff20 	bl	800b804 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800a9c4:	2001      	movs	r0, #1
 800a9c6:	f000 f871 	bl	800aaac <HAL_Delay>
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_RESET);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6818      	ldr	r0, [r3, #0]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	889b      	ldrh	r3, [r3, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	f000 ff15 	bl	800b804 <HAL_GPIO_WritePin>
}
 800a9da:	bf00      	nop
 800a9dc:	3708      	adds	r7, #8
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <HCSR04_Read>:

float HCSR04_Read(HCSR04_t* pHCSR04)
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	b083      	sub	sp, #12
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
	return pHCSR04->DISTANCE;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ee:	ee07 3a90 	vmov	s15, r3
}
 800a9f2:	eeb0 0a67 	vmov.f32	s0, s15
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 800aa00:	f8df d034 	ldr.w	sp, [pc, #52]	; 800aa38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800aa04:	480d      	ldr	r0, [pc, #52]	; (800aa3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800aa06:	490e      	ldr	r1, [pc, #56]	; (800aa40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800aa08:	4a0e      	ldr	r2, [pc, #56]	; (800aa44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800aa0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800aa0c:	e002      	b.n	800aa14 <LoopCopyDataInit>

0800aa0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800aa0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800aa10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800aa12:	3304      	adds	r3, #4

0800aa14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800aa14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800aa16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800aa18:	d3f9      	bcc.n	800aa0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800aa1a:	4a0b      	ldr	r2, [pc, #44]	; (800aa48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800aa1c:	4c0b      	ldr	r4, [pc, #44]	; (800aa4c <LoopFillZerobss+0x26>)
  movs r3, #0
 800aa1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800aa20:	e001      	b.n	800aa26 <LoopFillZerobss>

0800aa22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800aa22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800aa24:	3204      	adds	r2, #4

0800aa26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800aa26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800aa28:	d3fb      	bcc.n	800aa22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800aa2a:	f7fc f98f 	bl	8006d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800aa2e:	f00a fda7 	bl	8015580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800aa32:	f7f9 fad9 	bl	8003fe8 <main>
  bx  lr    
 800aa36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800aa38:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800aa3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800aa40:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800aa44:	0801c910 	.word	0x0801c910
  ldr r2, =_sbss
 800aa48:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800aa4c:	20009058 	.word	0x20009058

0800aa50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800aa50:	e7fe      	b.n	800aa50 <ADC_IRQHandler>

0800aa52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800aa56:	2003      	movs	r0, #3
 800aa58:	f000 f8f9 	bl	800ac4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800aa5c:	200f      	movs	r0, #15
 800aa5e:	f7fb ffed 	bl	8006a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800aa62:	f7fb fd1b 	bl	800649c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800aa66:	2300      	movs	r3, #0
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800aa70:	4b06      	ldr	r3, [pc, #24]	; (800aa8c <HAL_IncTick+0x20>)
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	461a      	mov	r2, r3
 800aa76:	4b06      	ldr	r3, [pc, #24]	; (800aa90 <HAL_IncTick+0x24>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	4a04      	ldr	r2, [pc, #16]	; (800aa90 <HAL_IncTick+0x24>)
 800aa7e:	6013      	str	r3, [r2, #0]
}
 800aa80:	bf00      	nop
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	20000010 	.word	0x20000010
 800aa90:	20000dbc 	.word	0x20000dbc

0800aa94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800aa94:	b480      	push	{r7}
 800aa96:	af00      	add	r7, sp, #0
  return uwTick;
 800aa98:	4b03      	ldr	r3, [pc, #12]	; (800aaa8 <HAL_GetTick+0x14>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr
 800aaa6:	bf00      	nop
 800aaa8:	20000dbc 	.word	0x20000dbc

0800aaac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800aab4:	f7ff ffee 	bl	800aa94 <HAL_GetTick>
 800aab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac4:	d005      	beq.n	800aad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800aac6:	4b0a      	ldr	r3, [pc, #40]	; (800aaf0 <HAL_Delay+0x44>)
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	461a      	mov	r2, r3
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	4413      	add	r3, r2
 800aad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800aad2:	bf00      	nop
 800aad4:	f7ff ffde 	bl	800aa94 <HAL_GetTick>
 800aad8:	4602      	mov	r2, r0
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d8f7      	bhi.n	800aad4 <HAL_Delay+0x28>
  {
  }
}
 800aae4:	bf00      	nop
 800aae6:	bf00      	nop
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	20000010 	.word	0x20000010

0800aaf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f003 0307 	and.w	r3, r3, #7
 800ab02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ab04:	4b0b      	ldr	r3, [pc, #44]	; (800ab34 <__NVIC_SetPriorityGrouping+0x40>)
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ab0a:	68ba      	ldr	r2, [r7, #8]
 800ab0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ab10:	4013      	ands	r3, r2
 800ab12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800ab1c:	4b06      	ldr	r3, [pc, #24]	; (800ab38 <__NVIC_SetPriorityGrouping+0x44>)
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ab22:	4a04      	ldr	r2, [pc, #16]	; (800ab34 <__NVIC_SetPriorityGrouping+0x40>)
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	60d3      	str	r3, [r2, #12]
}
 800ab28:	bf00      	nop
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr
 800ab34:	e000ed00 	.word	0xe000ed00
 800ab38:	05fa0000 	.word	0x05fa0000

0800ab3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ab40:	4b04      	ldr	r3, [pc, #16]	; (800ab54 <__NVIC_GetPriorityGrouping+0x18>)
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	0a1b      	lsrs	r3, r3, #8
 800ab46:	f003 0307 	and.w	r3, r3, #7
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr
 800ab54:	e000ed00 	.word	0xe000ed00

0800ab58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	4603      	mov	r3, r0
 800ab60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	db0b      	blt.n	800ab82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ab6a:	79fb      	ldrb	r3, [r7, #7]
 800ab6c:	f003 021f 	and.w	r2, r3, #31
 800ab70:	4907      	ldr	r1, [pc, #28]	; (800ab90 <__NVIC_EnableIRQ+0x38>)
 800ab72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab76:	095b      	lsrs	r3, r3, #5
 800ab78:	2001      	movs	r0, #1
 800ab7a:	fa00 f202 	lsl.w	r2, r0, r2
 800ab7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ab82:	bf00      	nop
 800ab84:	370c      	adds	r7, #12
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	e000e100 	.word	0xe000e100

0800ab94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	6039      	str	r1, [r7, #0]
 800ab9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	db0a      	blt.n	800abbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	b2da      	uxtb	r2, r3
 800abac:	490c      	ldr	r1, [pc, #48]	; (800abe0 <__NVIC_SetPriority+0x4c>)
 800abae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abb2:	0112      	lsls	r2, r2, #4
 800abb4:	b2d2      	uxtb	r2, r2
 800abb6:	440b      	add	r3, r1
 800abb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800abbc:	e00a      	b.n	800abd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	b2da      	uxtb	r2, r3
 800abc2:	4908      	ldr	r1, [pc, #32]	; (800abe4 <__NVIC_SetPriority+0x50>)
 800abc4:	79fb      	ldrb	r3, [r7, #7]
 800abc6:	f003 030f 	and.w	r3, r3, #15
 800abca:	3b04      	subs	r3, #4
 800abcc:	0112      	lsls	r2, r2, #4
 800abce:	b2d2      	uxtb	r2, r2
 800abd0:	440b      	add	r3, r1
 800abd2:	761a      	strb	r2, [r3, #24]
}
 800abd4:	bf00      	nop
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr
 800abe0:	e000e100 	.word	0xe000e100
 800abe4:	e000ed00 	.word	0xe000ed00

0800abe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800abe8:	b480      	push	{r7}
 800abea:	b089      	sub	sp, #36	; 0x24
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f003 0307 	and.w	r3, r3, #7
 800abfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	f1c3 0307 	rsb	r3, r3, #7
 800ac02:	2b04      	cmp	r3, #4
 800ac04:	bf28      	it	cs
 800ac06:	2304      	movcs	r3, #4
 800ac08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	2b06      	cmp	r3, #6
 800ac10:	d902      	bls.n	800ac18 <NVIC_EncodePriority+0x30>
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	3b03      	subs	r3, #3
 800ac16:	e000      	b.n	800ac1a <NVIC_EncodePriority+0x32>
 800ac18:	2300      	movs	r3, #0
 800ac1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ac1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	fa02 f303 	lsl.w	r3, r2, r3
 800ac26:	43da      	mvns	r2, r3
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	401a      	ands	r2, r3
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ac30:	f04f 31ff 	mov.w	r1, #4294967295
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	fa01 f303 	lsl.w	r3, r1, r3
 800ac3a:	43d9      	mvns	r1, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ac40:	4313      	orrs	r3, r2
         );
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3724      	adds	r7, #36	; 0x24
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr

0800ac4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b082      	sub	sp, #8
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f7ff ff4c 	bl	800aaf4 <__NVIC_SetPriorityGrouping>
}
 800ac5c:	bf00      	nop
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b086      	sub	sp, #24
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
 800ac70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800ac72:	2300      	movs	r3, #0
 800ac74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ac76:	f7ff ff61 	bl	800ab3c <__NVIC_GetPriorityGrouping>
 800ac7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	68b9      	ldr	r1, [r7, #8]
 800ac80:	6978      	ldr	r0, [r7, #20]
 800ac82:	f7ff ffb1 	bl	800abe8 <NVIC_EncodePriority>
 800ac86:	4602      	mov	r2, r0
 800ac88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac8c:	4611      	mov	r1, r2
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7ff ff80 	bl	800ab94 <__NVIC_SetPriority>
}
 800ac94:	bf00      	nop
 800ac96:	3718      	adds	r7, #24
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	4603      	mov	r3, r0
 800aca4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800aca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acaa:	4618      	mov	r0, r3
 800acac:	f7ff ff54 	bl	800ab58 <__NVIC_EnableIRQ>
}
 800acb0:	bf00      	nop
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b086      	sub	sp, #24
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800acc0:	2300      	movs	r3, #0
 800acc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800acc4:	f7ff fee6 	bl	800aa94 <HAL_GetTick>
 800acc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d101      	bne.n	800acd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	e099      	b.n	800ae08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2202      	movs	r2, #2
 800acd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f022 0201 	bic.w	r2, r2, #1
 800acf2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800acf4:	e00f      	b.n	800ad16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800acf6:	f7ff fecd 	bl	800aa94 <HAL_GetTick>
 800acfa:	4602      	mov	r2, r0
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	2b05      	cmp	r3, #5
 800ad02:	d908      	bls.n	800ad16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2220      	movs	r2, #32
 800ad08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2203      	movs	r2, #3
 800ad0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800ad12:	2303      	movs	r3, #3
 800ad14:	e078      	b.n	800ae08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 0301 	and.w	r3, r3, #1
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1e8      	bne.n	800acf6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ad2c:	697a      	ldr	r2, [r7, #20]
 800ad2e:	4b38      	ldr	r3, [pc, #224]	; (800ae10 <HAL_DMA_Init+0x158>)
 800ad30:	4013      	ands	r3, r2
 800ad32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ad42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	699b      	ldr	r3, [r3, #24]
 800ad54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6a1b      	ldr	r3, [r3, #32]
 800ad60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ad62:	697a      	ldr	r2, [r7, #20]
 800ad64:	4313      	orrs	r3, r2
 800ad66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6c:	2b04      	cmp	r3, #4
 800ad6e:	d107      	bne.n	800ad80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	697a      	ldr	r2, [r7, #20]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	697a      	ldr	r2, [r7, #20]
 800ad86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	695b      	ldr	r3, [r3, #20]
 800ad8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	f023 0307 	bic.w	r3, r3, #7
 800ad96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9c:	697a      	ldr	r2, [r7, #20]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada6:	2b04      	cmp	r3, #4
 800ada8:	d117      	bne.n	800adda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adae:	697a      	ldr	r2, [r7, #20]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00e      	beq.n	800adda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fb09 	bl	800b3d4 <DMA_CheckFifoParam>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d008      	beq.n	800adda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2240      	movs	r2, #64	; 0x40
 800adcc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2201      	movs	r2, #1
 800add2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800add6:	2301      	movs	r3, #1
 800add8:	e016      	b.n	800ae08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 fac0 	bl	800b368 <DMA_CalcBaseAndBitshift>
 800ade8:	4603      	mov	r3, r0
 800adea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adf0:	223f      	movs	r2, #63	; 0x3f
 800adf2:	409a      	lsls	r2, r3
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2200      	movs	r2, #0
 800adfc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2201      	movs	r2, #1
 800ae02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3718      	adds	r7, #24
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	e010803f 	.word	0xe010803f

0800ae14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b086      	sub	sp, #24
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
 800ae20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d101      	bne.n	800ae3a <HAL_DMA_Start_IT+0x26>
 800ae36:	2302      	movs	r3, #2
 800ae38:	e048      	b.n	800aecc <HAL_DMA_Start_IT+0xb8>
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d137      	bne.n	800aebe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2202      	movs	r2, #2
 800ae52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	68b9      	ldr	r1, [r7, #8]
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f000 fa52 	bl	800b30c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae6c:	223f      	movs	r2, #63	; 0x3f
 800ae6e:	409a      	lsls	r2, r3
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f042 0216 	orr.w	r2, r2, #22
 800ae82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	695a      	ldr	r2, [r3, #20]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ae92:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d007      	beq.n	800aeac <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f042 0208 	orr.w	r2, r2, #8
 800aeaa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f042 0201 	orr.w	r2, r2, #1
 800aeba:	601a      	str	r2, [r3, #0]
 800aebc:	e005      	b.n	800aeca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800aec6:	2302      	movs	r3, #2
 800aec8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800aeca:	7dfb      	ldrb	r3, [r7, #23]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3718      	adds	r7, #24
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aee0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800aee2:	f7ff fdd7 	bl	800aa94 <HAL_GetTick>
 800aee6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d008      	beq.n	800af06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2280      	movs	r2, #128	; 0x80
 800aef8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	e052      	b.n	800afac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f022 0216 	bic.w	r2, r2, #22
 800af14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	695a      	ldr	r2, [r3, #20]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d103      	bne.n	800af36 <HAL_DMA_Abort+0x62>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af32:	2b00      	cmp	r3, #0
 800af34:	d007      	beq.n	800af46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f022 0208 	bic.w	r2, r2, #8
 800af44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f022 0201 	bic.w	r2, r2, #1
 800af54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800af56:	e013      	b.n	800af80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800af58:	f7ff fd9c 	bl	800aa94 <HAL_GetTick>
 800af5c:	4602      	mov	r2, r0
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	2b05      	cmp	r3, #5
 800af64:	d90c      	bls.n	800af80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2220      	movs	r2, #32
 800af6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2203      	movs	r2, #3
 800af70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800af7c:	2303      	movs	r3, #3
 800af7e:	e015      	b.n	800afac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f003 0301 	and.w	r3, r3, #1
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d1e4      	bne.n	800af58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af92:	223f      	movs	r2, #63	; 0x3f
 800af94:	409a      	lsls	r2, r3
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2201      	movs	r2, #1
 800af9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2200      	movs	r2, #0
 800afa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	d004      	beq.n	800afd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2280      	movs	r2, #128	; 0x80
 800afcc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	e00c      	b.n	800afec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2205      	movs	r2, #5
 800afd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	681a      	ldr	r2, [r3, #0]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f022 0201 	bic.w	r2, r2, #1
 800afe8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b086      	sub	sp, #24
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800b000:	2300      	movs	r3, #0
 800b002:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800b004:	4b8e      	ldr	r3, [pc, #568]	; (800b240 <HAL_DMA_IRQHandler+0x248>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a8e      	ldr	r2, [pc, #568]	; (800b244 <HAL_DMA_IRQHandler+0x24c>)
 800b00a:	fba2 2303 	umull	r2, r3, r2, r3
 800b00e:	0a9b      	lsrs	r3, r3, #10
 800b010:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b016:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b022:	2208      	movs	r2, #8
 800b024:	409a      	lsls	r2, r3
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	4013      	ands	r3, r2
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d01a      	beq.n	800b064 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f003 0304 	and.w	r3, r3, #4
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d013      	beq.n	800b064 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f022 0204 	bic.w	r2, r2, #4
 800b04a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b050:	2208      	movs	r2, #8
 800b052:	409a      	lsls	r2, r3
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b05c:	f043 0201 	orr.w	r2, r3, #1
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b068:	2201      	movs	r2, #1
 800b06a:	409a      	lsls	r2, r3
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	4013      	ands	r3, r2
 800b070:	2b00      	cmp	r3, #0
 800b072:	d012      	beq.n	800b09a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	695b      	ldr	r3, [r3, #20]
 800b07a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00b      	beq.n	800b09a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b086:	2201      	movs	r2, #1
 800b088:	409a      	lsls	r2, r3
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b092:	f043 0202 	orr.w	r2, r3, #2
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b09e:	2204      	movs	r2, #4
 800b0a0:	409a      	lsls	r2, r3
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	4013      	ands	r3, r2
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d012      	beq.n	800b0d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f003 0302 	and.w	r3, r3, #2
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00b      	beq.n	800b0d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0bc:	2204      	movs	r2, #4
 800b0be:	409a      	lsls	r2, r3
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0c8:	f043 0204 	orr.w	r2, r3, #4
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0d4:	2210      	movs	r2, #16
 800b0d6:	409a      	lsls	r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	4013      	ands	r3, r2
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d043      	beq.n	800b168 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f003 0308 	and.w	r3, r3, #8
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d03c      	beq.n	800b168 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0f2:	2210      	movs	r2, #16
 800b0f4:	409a      	lsls	r2, r3
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b104:	2b00      	cmp	r3, #0
 800b106:	d018      	beq.n	800b13a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b112:	2b00      	cmp	r3, #0
 800b114:	d108      	bne.n	800b128 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d024      	beq.n	800b168 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	4798      	blx	r3
 800b126:	e01f      	b.n	800b168 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d01b      	beq.n	800b168 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	4798      	blx	r3
 800b138:	e016      	b.n	800b168 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b144:	2b00      	cmp	r3, #0
 800b146:	d107      	bne.n	800b158 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f022 0208 	bic.w	r2, r2, #8
 800b156:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d003      	beq.n	800b168 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b16c:	2220      	movs	r2, #32
 800b16e:	409a      	lsls	r2, r3
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	4013      	ands	r3, r2
 800b174:	2b00      	cmp	r3, #0
 800b176:	f000 808f 	beq.w	800b298 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f003 0310 	and.w	r3, r3, #16
 800b184:	2b00      	cmp	r3, #0
 800b186:	f000 8087 	beq.w	800b298 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b18e:	2220      	movs	r2, #32
 800b190:	409a      	lsls	r2, r3
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	2b05      	cmp	r3, #5
 800b1a0:	d136      	bne.n	800b210 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f022 0216 	bic.w	r2, r2, #22
 800b1b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	695a      	ldr	r2, [r3, #20]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d103      	bne.n	800b1d2 <HAL_DMA_IRQHandler+0x1da>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d007      	beq.n	800b1e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f022 0208 	bic.w	r2, r2, #8
 800b1e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1e6:	223f      	movs	r2, #63	; 0x3f
 800b1e8:	409a      	lsls	r2, r3
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b202:	2b00      	cmp	r3, #0
 800b204:	d07e      	beq.n	800b304 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	4798      	blx	r3
        }
        return;
 800b20e:	e079      	b.n	800b304 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d01d      	beq.n	800b25a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d10d      	bne.n	800b248 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b230:	2b00      	cmp	r3, #0
 800b232:	d031      	beq.n	800b298 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	4798      	blx	r3
 800b23c:	e02c      	b.n	800b298 <HAL_DMA_IRQHandler+0x2a0>
 800b23e:	bf00      	nop
 800b240:	20000008 	.word	0x20000008
 800b244:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d023      	beq.n	800b298 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	4798      	blx	r3
 800b258:	e01e      	b.n	800b298 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b264:	2b00      	cmp	r3, #0
 800b266:	d10f      	bne.n	800b288 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f022 0210 	bic.w	r2, r2, #16
 800b276:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d003      	beq.n	800b298 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d032      	beq.n	800b306 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2a4:	f003 0301 	and.w	r3, r3, #1
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d022      	beq.n	800b2f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2205      	movs	r2, #5
 800b2b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f022 0201 	bic.w	r2, r2, #1
 800b2c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	60bb      	str	r3, [r7, #8]
 800b2ca:	697a      	ldr	r2, [r7, #20]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d307      	bcc.n	800b2e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f003 0301 	and.w	r3, r3, #1
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d1f2      	bne.n	800b2c4 <HAL_DMA_IRQHandler+0x2cc>
 800b2de:	e000      	b.n	800b2e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800b2e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d005      	beq.n	800b306 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	4798      	blx	r3
 800b302:	e000      	b.n	800b306 <HAL_DMA_IRQHandler+0x30e>
        return;
 800b304:	bf00      	nop
    }
  }
}
 800b306:	3718      	adds	r7, #24
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	607a      	str	r2, [r7, #4]
 800b318:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b328:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	2b40      	cmp	r3, #64	; 0x40
 800b338:	d108      	bne.n	800b34c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	68ba      	ldr	r2, [r7, #8]
 800b348:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b34a:	e007      	b.n	800b35c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	68ba      	ldr	r2, [r7, #8]
 800b352:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	60da      	str	r2, [r3, #12]
}
 800b35c:	bf00      	nop
 800b35e:	3714      	adds	r7, #20
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	b2db      	uxtb	r3, r3
 800b376:	3b10      	subs	r3, #16
 800b378:	4a13      	ldr	r2, [pc, #76]	; (800b3c8 <DMA_CalcBaseAndBitshift+0x60>)
 800b37a:	fba2 2303 	umull	r2, r3, r2, r3
 800b37e:	091b      	lsrs	r3, r3, #4
 800b380:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b382:	4a12      	ldr	r2, [pc, #72]	; (800b3cc <DMA_CalcBaseAndBitshift+0x64>)
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	4413      	add	r3, r2
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	461a      	mov	r2, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2b03      	cmp	r3, #3
 800b394:	d908      	bls.n	800b3a8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	461a      	mov	r2, r3
 800b39c:	4b0c      	ldr	r3, [pc, #48]	; (800b3d0 <DMA_CalcBaseAndBitshift+0x68>)
 800b39e:	4013      	ands	r3, r2
 800b3a0:	1d1a      	adds	r2, r3, #4
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	659a      	str	r2, [r3, #88]	; 0x58
 800b3a6:	e006      	b.n	800b3b6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	4b08      	ldr	r3, [pc, #32]	; (800b3d0 <DMA_CalcBaseAndBitshift+0x68>)
 800b3b0:	4013      	ands	r3, r2
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3714      	adds	r7, #20
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr
 800b3c6:	bf00      	nop
 800b3c8:	aaaaaaab 	.word	0xaaaaaaab
 800b3cc:	0801c060 	.word	0x0801c060
 800b3d0:	fffffc00 	.word	0xfffffc00

0800b3d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b085      	sub	sp, #20
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	699b      	ldr	r3, [r3, #24]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d11f      	bne.n	800b42e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	2b03      	cmp	r3, #3
 800b3f2:	d856      	bhi.n	800b4a2 <DMA_CheckFifoParam+0xce>
 800b3f4:	a201      	add	r2, pc, #4	; (adr r2, 800b3fc <DMA_CheckFifoParam+0x28>)
 800b3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fa:	bf00      	nop
 800b3fc:	0800b40d 	.word	0x0800b40d
 800b400:	0800b41f 	.word	0x0800b41f
 800b404:	0800b40d 	.word	0x0800b40d
 800b408:	0800b4a3 	.word	0x0800b4a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b414:	2b00      	cmp	r3, #0
 800b416:	d046      	beq.n	800b4a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b418:	2301      	movs	r3, #1
 800b41a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b41c:	e043      	b.n	800b4a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b422:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b426:	d140      	bne.n	800b4aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b42c:	e03d      	b.n	800b4aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	699b      	ldr	r3, [r3, #24]
 800b432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b436:	d121      	bne.n	800b47c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	2b03      	cmp	r3, #3
 800b43c:	d837      	bhi.n	800b4ae <DMA_CheckFifoParam+0xda>
 800b43e:	a201      	add	r2, pc, #4	; (adr r2, 800b444 <DMA_CheckFifoParam+0x70>)
 800b440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b444:	0800b455 	.word	0x0800b455
 800b448:	0800b45b 	.word	0x0800b45b
 800b44c:	0800b455 	.word	0x0800b455
 800b450:	0800b46d 	.word	0x0800b46d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b454:	2301      	movs	r3, #1
 800b456:	73fb      	strb	r3, [r7, #15]
      break;
 800b458:	e030      	b.n	800b4bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b462:	2b00      	cmp	r3, #0
 800b464:	d025      	beq.n	800b4b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b46a:	e022      	b.n	800b4b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b470:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b474:	d11f      	bne.n	800b4b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b476:	2301      	movs	r3, #1
 800b478:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b47a:	e01c      	b.n	800b4b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	2b02      	cmp	r3, #2
 800b480:	d903      	bls.n	800b48a <DMA_CheckFifoParam+0xb6>
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	2b03      	cmp	r3, #3
 800b486:	d003      	beq.n	800b490 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b488:	e018      	b.n	800b4bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	73fb      	strb	r3, [r7, #15]
      break;
 800b48e:	e015      	b.n	800b4bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00e      	beq.n	800b4ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	73fb      	strb	r3, [r7, #15]
      break;
 800b4a0:	e00b      	b.n	800b4ba <DMA_CheckFifoParam+0xe6>
      break;
 800b4a2:	bf00      	nop
 800b4a4:	e00a      	b.n	800b4bc <DMA_CheckFifoParam+0xe8>
      break;
 800b4a6:	bf00      	nop
 800b4a8:	e008      	b.n	800b4bc <DMA_CheckFifoParam+0xe8>
      break;
 800b4aa:	bf00      	nop
 800b4ac:	e006      	b.n	800b4bc <DMA_CheckFifoParam+0xe8>
      break;
 800b4ae:	bf00      	nop
 800b4b0:	e004      	b.n	800b4bc <DMA_CheckFifoParam+0xe8>
      break;
 800b4b2:	bf00      	nop
 800b4b4:	e002      	b.n	800b4bc <DMA_CheckFifoParam+0xe8>
      break;   
 800b4b6:	bf00      	nop
 800b4b8:	e000      	b.n	800b4bc <DMA_CheckFifoParam+0xe8>
      break;
 800b4ba:	bf00      	nop
    }
  } 
  
  return status; 
 800b4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3714      	adds	r7, #20
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop

0800b4cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b089      	sub	sp, #36	; 0x24
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	61fb      	str	r3, [r7, #28]
 800b4ea:	e169      	b.n	800b7c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b4f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	697a      	ldr	r2, [r7, #20]
 800b4fc:	4013      	ands	r3, r2
 800b4fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b500:	693a      	ldr	r2, [r7, #16]
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	429a      	cmp	r2, r3
 800b506:	f040 8158 	bne.w	800b7ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	f003 0303 	and.w	r3, r3, #3
 800b512:	2b01      	cmp	r3, #1
 800b514:	d005      	beq.n	800b522 <HAL_GPIO_Init+0x56>
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	f003 0303 	and.w	r3, r3, #3
 800b51e:	2b02      	cmp	r3, #2
 800b520:	d130      	bne.n	800b584 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	005b      	lsls	r3, r3, #1
 800b52c:	2203      	movs	r2, #3
 800b52e:	fa02 f303 	lsl.w	r3, r2, r3
 800b532:	43db      	mvns	r3, r3
 800b534:	69ba      	ldr	r2, [r7, #24]
 800b536:	4013      	ands	r3, r2
 800b538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	68da      	ldr	r2, [r3, #12]
 800b53e:	69fb      	ldr	r3, [r7, #28]
 800b540:	005b      	lsls	r3, r3, #1
 800b542:	fa02 f303 	lsl.w	r3, r2, r3
 800b546:	69ba      	ldr	r2, [r7, #24]
 800b548:	4313      	orrs	r3, r2
 800b54a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	69ba      	ldr	r2, [r7, #24]
 800b550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b558:	2201      	movs	r2, #1
 800b55a:	69fb      	ldr	r3, [r7, #28]
 800b55c:	fa02 f303 	lsl.w	r3, r2, r3
 800b560:	43db      	mvns	r3, r3
 800b562:	69ba      	ldr	r2, [r7, #24]
 800b564:	4013      	ands	r3, r2
 800b566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	091b      	lsrs	r3, r3, #4
 800b56e:	f003 0201 	and.w	r2, r3, #1
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	fa02 f303 	lsl.w	r3, r2, r3
 800b578:	69ba      	ldr	r2, [r7, #24]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	69ba      	ldr	r2, [r7, #24]
 800b582:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	f003 0303 	and.w	r3, r3, #3
 800b58c:	2b03      	cmp	r3, #3
 800b58e:	d017      	beq.n	800b5c0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	005b      	lsls	r3, r3, #1
 800b59a:	2203      	movs	r2, #3
 800b59c:	fa02 f303 	lsl.w	r3, r2, r3
 800b5a0:	43db      	mvns	r3, r3
 800b5a2:	69ba      	ldr	r2, [r7, #24]
 800b5a4:	4013      	ands	r3, r2
 800b5a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	689a      	ldr	r2, [r3, #8]
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	005b      	lsls	r3, r3, #1
 800b5b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b5b4:	69ba      	ldr	r2, [r7, #24]
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	69ba      	ldr	r2, [r7, #24]
 800b5be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	f003 0303 	and.w	r3, r3, #3
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	d123      	bne.n	800b614 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	08da      	lsrs	r2, r3, #3
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	3208      	adds	r2, #8
 800b5d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	f003 0307 	and.w	r3, r3, #7
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	220f      	movs	r2, #15
 800b5e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5e8:	43db      	mvns	r3, r3
 800b5ea:	69ba      	ldr	r2, [r7, #24]
 800b5ec:	4013      	ands	r3, r2
 800b5ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	691a      	ldr	r2, [r3, #16]
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	f003 0307 	and.w	r3, r3, #7
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b600:	69ba      	ldr	r2, [r7, #24]
 800b602:	4313      	orrs	r3, r2
 800b604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	08da      	lsrs	r2, r3, #3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	3208      	adds	r2, #8
 800b60e:	69b9      	ldr	r1, [r7, #24]
 800b610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	005b      	lsls	r3, r3, #1
 800b61e:	2203      	movs	r2, #3
 800b620:	fa02 f303 	lsl.w	r3, r2, r3
 800b624:	43db      	mvns	r3, r3
 800b626:	69ba      	ldr	r2, [r7, #24]
 800b628:	4013      	ands	r3, r2
 800b62a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	f003 0203 	and.w	r2, r3, #3
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	005b      	lsls	r3, r3, #1
 800b638:	fa02 f303 	lsl.w	r3, r2, r3
 800b63c:	69ba      	ldr	r2, [r7, #24]
 800b63e:	4313      	orrs	r3, r2
 800b640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	69ba      	ldr	r2, [r7, #24]
 800b646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b650:	2b00      	cmp	r3, #0
 800b652:	f000 80b2 	beq.w	800b7ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b656:	4b60      	ldr	r3, [pc, #384]	; (800b7d8 <HAL_GPIO_Init+0x30c>)
 800b658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b65a:	4a5f      	ldr	r2, [pc, #380]	; (800b7d8 <HAL_GPIO_Init+0x30c>)
 800b65c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b660:	6453      	str	r3, [r2, #68]	; 0x44
 800b662:	4b5d      	ldr	r3, [pc, #372]	; (800b7d8 <HAL_GPIO_Init+0x30c>)
 800b664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b66a:	60fb      	str	r3, [r7, #12]
 800b66c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800b66e:	4a5b      	ldr	r2, [pc, #364]	; (800b7dc <HAL_GPIO_Init+0x310>)
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	089b      	lsrs	r3, r3, #2
 800b674:	3302      	adds	r3, #2
 800b676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b67a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	f003 0303 	and.w	r3, r3, #3
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	220f      	movs	r2, #15
 800b686:	fa02 f303 	lsl.w	r3, r2, r3
 800b68a:	43db      	mvns	r3, r3
 800b68c:	69ba      	ldr	r2, [r7, #24]
 800b68e:	4013      	ands	r3, r2
 800b690:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	4a52      	ldr	r2, [pc, #328]	; (800b7e0 <HAL_GPIO_Init+0x314>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d02b      	beq.n	800b6f2 <HAL_GPIO_Init+0x226>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4a51      	ldr	r2, [pc, #324]	; (800b7e4 <HAL_GPIO_Init+0x318>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d025      	beq.n	800b6ee <HAL_GPIO_Init+0x222>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4a50      	ldr	r2, [pc, #320]	; (800b7e8 <HAL_GPIO_Init+0x31c>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d01f      	beq.n	800b6ea <HAL_GPIO_Init+0x21e>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4a4f      	ldr	r2, [pc, #316]	; (800b7ec <HAL_GPIO_Init+0x320>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d019      	beq.n	800b6e6 <HAL_GPIO_Init+0x21a>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4a4e      	ldr	r2, [pc, #312]	; (800b7f0 <HAL_GPIO_Init+0x324>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d013      	beq.n	800b6e2 <HAL_GPIO_Init+0x216>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4a4d      	ldr	r2, [pc, #308]	; (800b7f4 <HAL_GPIO_Init+0x328>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d00d      	beq.n	800b6de <HAL_GPIO_Init+0x212>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a4c      	ldr	r2, [pc, #304]	; (800b7f8 <HAL_GPIO_Init+0x32c>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d007      	beq.n	800b6da <HAL_GPIO_Init+0x20e>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4a4b      	ldr	r2, [pc, #300]	; (800b7fc <HAL_GPIO_Init+0x330>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d101      	bne.n	800b6d6 <HAL_GPIO_Init+0x20a>
 800b6d2:	2307      	movs	r3, #7
 800b6d4:	e00e      	b.n	800b6f4 <HAL_GPIO_Init+0x228>
 800b6d6:	2308      	movs	r3, #8
 800b6d8:	e00c      	b.n	800b6f4 <HAL_GPIO_Init+0x228>
 800b6da:	2306      	movs	r3, #6
 800b6dc:	e00a      	b.n	800b6f4 <HAL_GPIO_Init+0x228>
 800b6de:	2305      	movs	r3, #5
 800b6e0:	e008      	b.n	800b6f4 <HAL_GPIO_Init+0x228>
 800b6e2:	2304      	movs	r3, #4
 800b6e4:	e006      	b.n	800b6f4 <HAL_GPIO_Init+0x228>
 800b6e6:	2303      	movs	r3, #3
 800b6e8:	e004      	b.n	800b6f4 <HAL_GPIO_Init+0x228>
 800b6ea:	2302      	movs	r3, #2
 800b6ec:	e002      	b.n	800b6f4 <HAL_GPIO_Init+0x228>
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	e000      	b.n	800b6f4 <HAL_GPIO_Init+0x228>
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	69fa      	ldr	r2, [r7, #28]
 800b6f6:	f002 0203 	and.w	r2, r2, #3
 800b6fa:	0092      	lsls	r2, r2, #2
 800b6fc:	4093      	lsls	r3, r2
 800b6fe:	69ba      	ldr	r2, [r7, #24]
 800b700:	4313      	orrs	r3, r2
 800b702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800b704:	4935      	ldr	r1, [pc, #212]	; (800b7dc <HAL_GPIO_Init+0x310>)
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	089b      	lsrs	r3, r3, #2
 800b70a:	3302      	adds	r3, #2
 800b70c:	69ba      	ldr	r2, [r7, #24]
 800b70e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b712:	4b3b      	ldr	r3, [pc, #236]	; (800b800 <HAL_GPIO_Init+0x334>)
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	43db      	mvns	r3, r3
 800b71c:	69ba      	ldr	r2, [r7, #24]
 800b71e:	4013      	ands	r3, r2
 800b720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d003      	beq.n	800b736 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b72e:	69ba      	ldr	r2, [r7, #24]
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	4313      	orrs	r3, r2
 800b734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b736:	4a32      	ldr	r2, [pc, #200]	; (800b800 <HAL_GPIO_Init+0x334>)
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b73c:	4b30      	ldr	r3, [pc, #192]	; (800b800 <HAL_GPIO_Init+0x334>)
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	43db      	mvns	r3, r3
 800b746:	69ba      	ldr	r2, [r7, #24]
 800b748:	4013      	ands	r3, r2
 800b74a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b754:	2b00      	cmp	r3, #0
 800b756:	d003      	beq.n	800b760 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b758:	69ba      	ldr	r2, [r7, #24]
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	4313      	orrs	r3, r2
 800b75e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b760:	4a27      	ldr	r2, [pc, #156]	; (800b800 <HAL_GPIO_Init+0x334>)
 800b762:	69bb      	ldr	r3, [r7, #24]
 800b764:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b766:	4b26      	ldr	r3, [pc, #152]	; (800b800 <HAL_GPIO_Init+0x334>)
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	43db      	mvns	r3, r3
 800b770:	69ba      	ldr	r2, [r7, #24]
 800b772:	4013      	ands	r3, r2
 800b774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d003      	beq.n	800b78a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b782:	69ba      	ldr	r2, [r7, #24]
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	4313      	orrs	r3, r2
 800b788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b78a:	4a1d      	ldr	r2, [pc, #116]	; (800b800 <HAL_GPIO_Init+0x334>)
 800b78c:	69bb      	ldr	r3, [r7, #24]
 800b78e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b790:	4b1b      	ldr	r3, [pc, #108]	; (800b800 <HAL_GPIO_Init+0x334>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	43db      	mvns	r3, r3
 800b79a:	69ba      	ldr	r2, [r7, #24]
 800b79c:	4013      	ands	r3, r2
 800b79e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d003      	beq.n	800b7b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b7ac:	69ba      	ldr	r2, [r7, #24]
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b7b4:	4a12      	ldr	r2, [pc, #72]	; (800b800 <HAL_GPIO_Init+0x334>)
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	61fb      	str	r3, [r7, #28]
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	2b0f      	cmp	r3, #15
 800b7c4:	f67f ae92 	bls.w	800b4ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800b7c8:	bf00      	nop
 800b7ca:	bf00      	nop
 800b7cc:	3724      	adds	r7, #36	; 0x24
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop
 800b7d8:	40023800 	.word	0x40023800
 800b7dc:	40013800 	.word	0x40013800
 800b7e0:	40020000 	.word	0x40020000
 800b7e4:	40020400 	.word	0x40020400
 800b7e8:	40020800 	.word	0x40020800
 800b7ec:	40020c00 	.word	0x40020c00
 800b7f0:	40021000 	.word	0x40021000
 800b7f4:	40021400 	.word	0x40021400
 800b7f8:	40021800 	.word	0x40021800
 800b7fc:	40021c00 	.word	0x40021c00
 800b800:	40013c00 	.word	0x40013c00

0800b804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	460b      	mov	r3, r1
 800b80e:	807b      	strh	r3, [r7, #2]
 800b810:	4613      	mov	r3, r2
 800b812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b814:	787b      	ldrb	r3, [r7, #1]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d003      	beq.n	800b822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b81a:	887a      	ldrh	r2, [r7, #2]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800b820:	e003      	b.n	800b82a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b822:	887b      	ldrh	r3, [r7, #2]
 800b824:	041a      	lsls	r2, r3, #16
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	619a      	str	r2, [r3, #24]
}
 800b82a:	bf00      	nop
 800b82c:	370c      	adds	r7, #12
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr
	...

0800b838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d101      	bne.n	800b84a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b846:	2301      	movs	r3, #1
 800b848:	e07f      	b.n	800b94a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b850:	b2db      	uxtb	r3, r3
 800b852:	2b00      	cmp	r3, #0
 800b854:	d106      	bne.n	800b864 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f7fa fe44 	bl	80064ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2224      	movs	r2, #36	; 0x24
 800b868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f022 0201 	bic.w	r2, r2, #1
 800b87a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685a      	ldr	r2, [r3, #4]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b888:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	689a      	ldr	r2, [r3, #8]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b898:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d107      	bne.n	800b8b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	689a      	ldr	r2, [r3, #8]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b8ae:	609a      	str	r2, [r3, #8]
 800b8b0:	e006      	b.n	800b8c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	689a      	ldr	r2, [r3, #8]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b8be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	2b02      	cmp	r3, #2
 800b8c6:	d104      	bne.n	800b8d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b8d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	6859      	ldr	r1, [r3, #4]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	4b1d      	ldr	r3, [pc, #116]	; (800b954 <HAL_I2C_Init+0x11c>)
 800b8de:	430b      	orrs	r3, r1
 800b8e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	68da      	ldr	r2, [r3, #12]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b8f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	691a      	ldr	r2, [r3, #16]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	695b      	ldr	r3, [r3, #20]
 800b8fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	699b      	ldr	r3, [r3, #24]
 800b902:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	430a      	orrs	r2, r1
 800b90a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	69d9      	ldr	r1, [r3, #28]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6a1a      	ldr	r2, [r3, #32]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	430a      	orrs	r2, r1
 800b91a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f042 0201 	orr.w	r2, r2, #1
 800b92a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2220      	movs	r2, #32
 800b936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2200      	movs	r2, #0
 800b93e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2200      	movs	r2, #0
 800b944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3708      	adds	r7, #8
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	02008000 	.word	0x02008000

0800b958 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b088      	sub	sp, #32
 800b95c:	af02      	add	r7, sp, #8
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	4608      	mov	r0, r1
 800b962:	4611      	mov	r1, r2
 800b964:	461a      	mov	r2, r3
 800b966:	4603      	mov	r3, r0
 800b968:	817b      	strh	r3, [r7, #10]
 800b96a:	460b      	mov	r3, r1
 800b96c:	813b      	strh	r3, [r7, #8]
 800b96e:	4613      	mov	r3, r2
 800b970:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	2b20      	cmp	r3, #32
 800b97c:	f040 80f9 	bne.w	800bb72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b980:	6a3b      	ldr	r3, [r7, #32]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d002      	beq.n	800b98c <HAL_I2C_Mem_Write+0x34>
 800b986:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d105      	bne.n	800b998 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b992:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	e0ed      	b.n	800bb74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d101      	bne.n	800b9a6 <HAL_I2C_Mem_Write+0x4e>
 800b9a2:	2302      	movs	r3, #2
 800b9a4:	e0e6      	b.n	800bb74 <HAL_I2C_Mem_Write+0x21c>
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b9ae:	f7ff f871 	bl	800aa94 <HAL_GetTick>
 800b9b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	2319      	movs	r3, #25
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f000 fac3 	bl	800bf4c <I2C_WaitOnFlagUntilTimeout>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d001      	beq.n	800b9d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	e0d1      	b.n	800bb74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2221      	movs	r2, #33	; 0x21
 800b9d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2240      	movs	r2, #64	; 0x40
 800b9dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6a3a      	ldr	r2, [r7, #32]
 800b9ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b9f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b9f8:	88f8      	ldrh	r0, [r7, #6]
 800b9fa:	893a      	ldrh	r2, [r7, #8]
 800b9fc:	8979      	ldrh	r1, [r7, #10]
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	9301      	str	r3, [sp, #4]
 800ba02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba04:	9300      	str	r3, [sp, #0]
 800ba06:	4603      	mov	r3, r0
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	f000 f9d3 	bl	800bdb4 <I2C_RequestMemoryWrite>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d005      	beq.n	800ba20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	e0a9      	b.n	800bb74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	2bff      	cmp	r3, #255	; 0xff
 800ba28:	d90e      	bls.n	800ba48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	22ff      	movs	r2, #255	; 0xff
 800ba2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba34:	b2da      	uxtb	r2, r3
 800ba36:	8979      	ldrh	r1, [r7, #10]
 800ba38:	2300      	movs	r3, #0
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	f000 fc1f 	bl	800c284 <I2C_TransferConfig>
 800ba46:	e00f      	b.n	800ba68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba4c:	b29a      	uxth	r2, r3
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba56:	b2da      	uxtb	r2, r3
 800ba58:	8979      	ldrh	r1, [r7, #10]
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	9300      	str	r3, [sp, #0]
 800ba5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	f000 fc0e 	bl	800c284 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba68:	697a      	ldr	r2, [r7, #20]
 800ba6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	f000 faad 	bl	800bfcc <I2C_WaitOnTXISFlagUntilTimeout>
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d001      	beq.n	800ba7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e07b      	b.n	800bb74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba80:	781a      	ldrb	r2, [r3, #0]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8c:	1c5a      	adds	r2, r3, #1
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	3b01      	subs	r3, #1
 800ba9a:	b29a      	uxth	r2, r3
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baa4:	3b01      	subs	r3, #1
 800baa6:	b29a      	uxth	r2, r3
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d034      	beq.n	800bb20 <HAL_I2C_Mem_Write+0x1c8>
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baba:	2b00      	cmp	r3, #0
 800babc:	d130      	bne.n	800bb20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	9300      	str	r3, [sp, #0]
 800bac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac4:	2200      	movs	r2, #0
 800bac6:	2180      	movs	r1, #128	; 0x80
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f000 fa3f 	bl	800bf4c <I2C_WaitOnFlagUntilTimeout>
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d001      	beq.n	800bad8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	e04d      	b.n	800bb74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800badc:	b29b      	uxth	r3, r3
 800bade:	2bff      	cmp	r3, #255	; 0xff
 800bae0:	d90e      	bls.n	800bb00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	22ff      	movs	r2, #255	; 0xff
 800bae6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baec:	b2da      	uxtb	r2, r3
 800baee:	8979      	ldrh	r1, [r7, #10]
 800baf0:	2300      	movs	r3, #0
 800baf2:	9300      	str	r3, [sp, #0]
 800baf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	f000 fbc3 	bl	800c284 <I2C_TransferConfig>
 800bafe:	e00f      	b.n	800bb20 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb0e:	b2da      	uxtb	r2, r3
 800bb10:	8979      	ldrh	r1, [r7, #10]
 800bb12:	2300      	movs	r3, #0
 800bb14:	9300      	str	r3, [sp, #0]
 800bb16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb1a:	68f8      	ldr	r0, [r7, #12]
 800bb1c:	f000 fbb2 	bl	800c284 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d19e      	bne.n	800ba68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb2a:	697a      	ldr	r2, [r7, #20]
 800bb2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f000 fa8c 	bl	800c04c <I2C_WaitOnSTOPFlagUntilTimeout>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d001      	beq.n	800bb3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e01a      	b.n	800bb74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2220      	movs	r2, #32
 800bb44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	6859      	ldr	r1, [r3, #4]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	4b0a      	ldr	r3, [pc, #40]	; (800bb7c <HAL_I2C_Mem_Write+0x224>)
 800bb52:	400b      	ands	r3, r1
 800bb54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2220      	movs	r2, #32
 800bb5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2200      	movs	r2, #0
 800bb62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	e000      	b.n	800bb74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800bb72:	2302      	movs	r3, #2
  }
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3718      	adds	r7, #24
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	fe00e800 	.word	0xfe00e800

0800bb80 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b088      	sub	sp, #32
 800bb84:	af02      	add	r7, sp, #8
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	4608      	mov	r0, r1
 800bb8a:	4611      	mov	r1, r2
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	4603      	mov	r3, r0
 800bb90:	817b      	strh	r3, [r7, #10]
 800bb92:	460b      	mov	r3, r1
 800bb94:	813b      	strh	r3, [r7, #8]
 800bb96:	4613      	mov	r3, r2
 800bb98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	2b20      	cmp	r3, #32
 800bba4:	f040 80fd 	bne.w	800bda2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800bba8:	6a3b      	ldr	r3, [r7, #32]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d002      	beq.n	800bbb4 <HAL_I2C_Mem_Read+0x34>
 800bbae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d105      	bne.n	800bbc0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e0f1      	b.n	800bda4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d101      	bne.n	800bbce <HAL_I2C_Mem_Read+0x4e>
 800bbca:	2302      	movs	r3, #2
 800bbcc:	e0ea      	b.n	800bda4 <HAL_I2C_Mem_Read+0x224>
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bbd6:	f7fe ff5d 	bl	800aa94 <HAL_GetTick>
 800bbda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	9300      	str	r3, [sp, #0]
 800bbe0:	2319      	movs	r3, #25
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f000 f9af 	bl	800bf4c <I2C_WaitOnFlagUntilTimeout>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d001      	beq.n	800bbf8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	e0d5      	b.n	800bda4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2222      	movs	r2, #34	; 0x22
 800bbfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2240      	movs	r2, #64	; 0x40
 800bc04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	6a3a      	ldr	r2, [r7, #32]
 800bc12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bc18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bc20:	88f8      	ldrh	r0, [r7, #6]
 800bc22:	893a      	ldrh	r2, [r7, #8]
 800bc24:	8979      	ldrh	r1, [r7, #10]
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	9301      	str	r3, [sp, #4]
 800bc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2c:	9300      	str	r3, [sp, #0]
 800bc2e:	4603      	mov	r3, r0
 800bc30:	68f8      	ldr	r0, [r7, #12]
 800bc32:	f000 f913 	bl	800be5c <I2C_RequestMemoryRead>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d005      	beq.n	800bc48 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bc44:	2301      	movs	r3, #1
 800bc46:	e0ad      	b.n	800bda4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	2bff      	cmp	r3, #255	; 0xff
 800bc50:	d90e      	bls.n	800bc70 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	22ff      	movs	r2, #255	; 0xff
 800bc56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc5c:	b2da      	uxtb	r2, r3
 800bc5e:	8979      	ldrh	r1, [r7, #10]
 800bc60:	4b52      	ldr	r3, [pc, #328]	; (800bdac <HAL_I2C_Mem_Read+0x22c>)
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f000 fb0b 	bl	800c284 <I2C_TransferConfig>
 800bc6e:	e00f      	b.n	800bc90 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc74:	b29a      	uxth	r2, r3
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc7e:	b2da      	uxtb	r2, r3
 800bc80:	8979      	ldrh	r1, [r7, #10]
 800bc82:	4b4a      	ldr	r3, [pc, #296]	; (800bdac <HAL_I2C_Mem_Read+0x22c>)
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	f000 fafa 	bl	800c284 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	9300      	str	r3, [sp, #0]
 800bc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc96:	2200      	movs	r2, #0
 800bc98:	2104      	movs	r1, #4
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f000 f956 	bl	800bf4c <I2C_WaitOnFlagUntilTimeout>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d001      	beq.n	800bcaa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800bca6:	2301      	movs	r3, #1
 800bca8:	e07c      	b.n	800bda4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb4:	b2d2      	uxtb	r2, r2
 800bcb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcbc:	1c5a      	adds	r2, r3, #1
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcc6:	3b01      	subs	r3, #1
 800bcc8:	b29a      	uxth	r2, r3
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	3b01      	subs	r3, #1
 800bcd6:	b29a      	uxth	r2, r3
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d034      	beq.n	800bd50 <HAL_I2C_Mem_Read+0x1d0>
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d130      	bne.n	800bd50 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	2180      	movs	r1, #128	; 0x80
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f000 f927 	bl	800bf4c <I2C_WaitOnFlagUntilTimeout>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d001      	beq.n	800bd08 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800bd04:	2301      	movs	r3, #1
 800bd06:	e04d      	b.n	800bda4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	2bff      	cmp	r3, #255	; 0xff
 800bd10:	d90e      	bls.n	800bd30 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	22ff      	movs	r2, #255	; 0xff
 800bd16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd1c:	b2da      	uxtb	r2, r3
 800bd1e:	8979      	ldrh	r1, [r7, #10]
 800bd20:	2300      	movs	r3, #0
 800bd22:	9300      	str	r3, [sp, #0]
 800bd24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f000 faab 	bl	800c284 <I2C_TransferConfig>
 800bd2e:	e00f      	b.n	800bd50 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd3e:	b2da      	uxtb	r2, r3
 800bd40:	8979      	ldrh	r1, [r7, #10]
 800bd42:	2300      	movs	r3, #0
 800bd44:	9300      	str	r3, [sp, #0]
 800bd46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f000 fa9a 	bl	800c284 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d19a      	bne.n	800bc90 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd5a:	697a      	ldr	r2, [r7, #20]
 800bd5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd5e:	68f8      	ldr	r0, [r7, #12]
 800bd60:	f000 f974 	bl	800c04c <I2C_WaitOnSTOPFlagUntilTimeout>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d001      	beq.n	800bd6e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e01a      	b.n	800bda4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	2220      	movs	r2, #32
 800bd74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	6859      	ldr	r1, [r3, #4]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	4b0b      	ldr	r3, [pc, #44]	; (800bdb0 <HAL_I2C_Mem_Read+0x230>)
 800bd82:	400b      	ands	r3, r1
 800bd84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2220      	movs	r2, #32
 800bd8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2200      	movs	r2, #0
 800bd92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	e000      	b.n	800bda4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800bda2:	2302      	movs	r3, #2
  }
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3718      	adds	r7, #24
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	80002400 	.word	0x80002400
 800bdb0:	fe00e800 	.word	0xfe00e800

0800bdb4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af02      	add	r7, sp, #8
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	4608      	mov	r0, r1
 800bdbe:	4611      	mov	r1, r2
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	817b      	strh	r3, [r7, #10]
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	813b      	strh	r3, [r7, #8]
 800bdca:	4613      	mov	r3, r2
 800bdcc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bdce:	88fb      	ldrh	r3, [r7, #6]
 800bdd0:	b2da      	uxtb	r2, r3
 800bdd2:	8979      	ldrh	r1, [r7, #10]
 800bdd4:	4b20      	ldr	r3, [pc, #128]	; (800be58 <I2C_RequestMemoryWrite+0xa4>)
 800bdd6:	9300      	str	r3, [sp, #0]
 800bdd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	f000 fa51 	bl	800c284 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bde2:	69fa      	ldr	r2, [r7, #28]
 800bde4:	69b9      	ldr	r1, [r7, #24]
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f000 f8f0 	bl	800bfcc <I2C_WaitOnTXISFlagUntilTimeout>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d001      	beq.n	800bdf6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e02c      	b.n	800be50 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bdf6:	88fb      	ldrh	r3, [r7, #6]
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d105      	bne.n	800be08 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bdfc:	893b      	ldrh	r3, [r7, #8]
 800bdfe:	b2da      	uxtb	r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	629a      	str	r2, [r3, #40]	; 0x28
 800be06:	e015      	b.n	800be34 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800be08:	893b      	ldrh	r3, [r7, #8]
 800be0a:	0a1b      	lsrs	r3, r3, #8
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	b2da      	uxtb	r2, r3
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be16:	69fa      	ldr	r2, [r7, #28]
 800be18:	69b9      	ldr	r1, [r7, #24]
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f000 f8d6 	bl	800bfcc <I2C_WaitOnTXISFlagUntilTimeout>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d001      	beq.n	800be2a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800be26:	2301      	movs	r3, #1
 800be28:	e012      	b.n	800be50 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800be2a:	893b      	ldrh	r3, [r7, #8]
 800be2c:	b2da      	uxtb	r2, r3
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	9300      	str	r3, [sp, #0]
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	2200      	movs	r2, #0
 800be3c:	2180      	movs	r1, #128	; 0x80
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	f000 f884 	bl	800bf4c <I2C_WaitOnFlagUntilTimeout>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d001      	beq.n	800be4e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800be4a:	2301      	movs	r3, #1
 800be4c:	e000      	b.n	800be50 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800be4e:	2300      	movs	r3, #0
}
 800be50:	4618      	mov	r0, r3
 800be52:	3710      	adds	r7, #16
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	80002000 	.word	0x80002000

0800be5c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b086      	sub	sp, #24
 800be60:	af02      	add	r7, sp, #8
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	4608      	mov	r0, r1
 800be66:	4611      	mov	r1, r2
 800be68:	461a      	mov	r2, r3
 800be6a:	4603      	mov	r3, r0
 800be6c:	817b      	strh	r3, [r7, #10]
 800be6e:	460b      	mov	r3, r1
 800be70:	813b      	strh	r3, [r7, #8]
 800be72:	4613      	mov	r3, r2
 800be74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800be76:	88fb      	ldrh	r3, [r7, #6]
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	8979      	ldrh	r1, [r7, #10]
 800be7c:	4b20      	ldr	r3, [pc, #128]	; (800bf00 <I2C_RequestMemoryRead+0xa4>)
 800be7e:	9300      	str	r3, [sp, #0]
 800be80:	2300      	movs	r3, #0
 800be82:	68f8      	ldr	r0, [r7, #12]
 800be84:	f000 f9fe 	bl	800c284 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be88:	69fa      	ldr	r2, [r7, #28]
 800be8a:	69b9      	ldr	r1, [r7, #24]
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f000 f89d 	bl	800bfcc <I2C_WaitOnTXISFlagUntilTimeout>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d001      	beq.n	800be9c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800be98:	2301      	movs	r3, #1
 800be9a:	e02c      	b.n	800bef6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800be9c:	88fb      	ldrh	r3, [r7, #6]
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d105      	bne.n	800beae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bea2:	893b      	ldrh	r3, [r7, #8]
 800bea4:	b2da      	uxtb	r2, r3
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	629a      	str	r2, [r3, #40]	; 0x28
 800beac:	e015      	b.n	800beda <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800beae:	893b      	ldrh	r3, [r7, #8]
 800beb0:	0a1b      	lsrs	r3, r3, #8
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	b2da      	uxtb	r2, r3
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bebc:	69fa      	ldr	r2, [r7, #28]
 800bebe:	69b9      	ldr	r1, [r7, #24]
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f000 f883 	bl	800bfcc <I2C_WaitOnTXISFlagUntilTimeout>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d001      	beq.n	800bed0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800becc:	2301      	movs	r3, #1
 800bece:	e012      	b.n	800bef6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bed0:	893b      	ldrh	r3, [r7, #8]
 800bed2:	b2da      	uxtb	r2, r3
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800beda:	69fb      	ldr	r3, [r7, #28]
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	69bb      	ldr	r3, [r7, #24]
 800bee0:	2200      	movs	r2, #0
 800bee2:	2140      	movs	r1, #64	; 0x40
 800bee4:	68f8      	ldr	r0, [r7, #12]
 800bee6:	f000 f831 	bl	800bf4c <I2C_WaitOnFlagUntilTimeout>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d001      	beq.n	800bef4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800bef0:	2301      	movs	r3, #1
 800bef2:	e000      	b.n	800bef6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	80002000 	.word	0x80002000

0800bf04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	699b      	ldr	r3, [r3, #24]
 800bf12:	f003 0302 	and.w	r3, r3, #2
 800bf16:	2b02      	cmp	r3, #2
 800bf18:	d103      	bne.n	800bf22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	699b      	ldr	r3, [r3, #24]
 800bf28:	f003 0301 	and.w	r3, r3, #1
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d007      	beq.n	800bf40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	699a      	ldr	r2, [r3, #24]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f042 0201 	orr.w	r2, r2, #1
 800bf3e:	619a      	str	r2, [r3, #24]
  }
}
 800bf40:	bf00      	nop
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	603b      	str	r3, [r7, #0]
 800bf58:	4613      	mov	r3, r2
 800bf5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf5c:	e022      	b.n	800bfa4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf64:	d01e      	beq.n	800bfa4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf66:	f7fe fd95 	bl	800aa94 <HAL_GetTick>
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	1ad3      	subs	r3, r2, r3
 800bf70:	683a      	ldr	r2, [r7, #0]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d302      	bcc.n	800bf7c <I2C_WaitOnFlagUntilTimeout+0x30>
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d113      	bne.n	800bfa4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf80:	f043 0220 	orr.w	r2, r3, #32
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2220      	movs	r2, #32
 800bf8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2200      	movs	r2, #0
 800bf94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e00f      	b.n	800bfc4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	699a      	ldr	r2, [r3, #24]
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	4013      	ands	r3, r2
 800bfae:	68ba      	ldr	r2, [r7, #8]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	bf0c      	ite	eq
 800bfb4:	2301      	moveq	r3, #1
 800bfb6:	2300      	movne	r3, #0
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	461a      	mov	r2, r3
 800bfbc:	79fb      	ldrb	r3, [r7, #7]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d0cd      	beq.n	800bf5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bfc2:	2300      	movs	r3, #0
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3710      	adds	r7, #16
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bfd8:	e02c      	b.n	800c034 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	68b9      	ldr	r1, [r7, #8]
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	f000 f870 	bl	800c0c4 <I2C_IsErrorOccurred>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d001      	beq.n	800bfee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bfea:	2301      	movs	r3, #1
 800bfec:	e02a      	b.n	800c044 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff4:	d01e      	beq.n	800c034 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bff6:	f7fe fd4d 	bl	800aa94 <HAL_GetTick>
 800bffa:	4602      	mov	r2, r0
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	1ad3      	subs	r3, r2, r3
 800c000:	68ba      	ldr	r2, [r7, #8]
 800c002:	429a      	cmp	r2, r3
 800c004:	d302      	bcc.n	800c00c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d113      	bne.n	800c034 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c010:	f043 0220 	orr.w	r2, r3, #32
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2220      	movs	r2, #32
 800c01c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2200      	movs	r2, #0
 800c024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2200      	movs	r2, #0
 800c02c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	e007      	b.n	800c044 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	699b      	ldr	r3, [r3, #24]
 800c03a:	f003 0302 	and.w	r3, r3, #2
 800c03e:	2b02      	cmp	r3, #2
 800c040:	d1cb      	bne.n	800bfda <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c042:	2300      	movs	r3, #0
}
 800c044:	4618      	mov	r0, r3
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c058:	e028      	b.n	800c0ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c05a:	687a      	ldr	r2, [r7, #4]
 800c05c:	68b9      	ldr	r1, [r7, #8]
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f000 f830 	bl	800c0c4 <I2C_IsErrorOccurred>
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	d001      	beq.n	800c06e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c06a:	2301      	movs	r3, #1
 800c06c:	e026      	b.n	800c0bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c06e:	f7fe fd11 	bl	800aa94 <HAL_GetTick>
 800c072:	4602      	mov	r2, r0
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	1ad3      	subs	r3, r2, r3
 800c078:	68ba      	ldr	r2, [r7, #8]
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d302      	bcc.n	800c084 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d113      	bne.n	800c0ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c088:	f043 0220 	orr.w	r2, r3, #32
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2220      	movs	r2, #32
 800c094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2200      	movs	r2, #0
 800c09c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	e007      	b.n	800c0bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	699b      	ldr	r3, [r3, #24]
 800c0b2:	f003 0320 	and.w	r3, r3, #32
 800c0b6:	2b20      	cmp	r3, #32
 800c0b8:	d1cf      	bne.n	800c05a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c0ba:	2300      	movs	r3, #0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3710      	adds	r7, #16
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b08a      	sub	sp, #40	; 0x28
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	60f8      	str	r0, [r7, #12]
 800c0cc:	60b9      	str	r1, [r7, #8]
 800c0ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	699b      	ldr	r3, [r3, #24]
 800c0dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	f003 0310 	and.w	r3, r3, #16
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d068      	beq.n	800c1c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	2210      	movs	r2, #16
 800c0f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c0f8:	e049      	b.n	800c18e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c100:	d045      	beq.n	800c18e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c102:	f7fe fcc7 	bl	800aa94 <HAL_GetTick>
 800c106:	4602      	mov	r2, r0
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	68ba      	ldr	r2, [r7, #8]
 800c10e:	429a      	cmp	r2, r3
 800c110:	d302      	bcc.n	800c118 <I2C_IsErrorOccurred+0x54>
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d13a      	bne.n	800c18e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c122:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c12a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	699b      	ldr	r3, [r3, #24]
 800c132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c13a:	d121      	bne.n	800c180 <I2C_IsErrorOccurred+0xbc>
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c142:	d01d      	beq.n	800c180 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800c144:	7cfb      	ldrb	r3, [r7, #19]
 800c146:	2b20      	cmp	r3, #32
 800c148:	d01a      	beq.n	800c180 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	685a      	ldr	r2, [r3, #4]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c158:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c15a:	f7fe fc9b 	bl	800aa94 <HAL_GetTick>
 800c15e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c160:	e00e      	b.n	800c180 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c162:	f7fe fc97 	bl	800aa94 <HAL_GetTick>
 800c166:	4602      	mov	r2, r0
 800c168:	69fb      	ldr	r3, [r7, #28]
 800c16a:	1ad3      	subs	r3, r2, r3
 800c16c:	2b19      	cmp	r3, #25
 800c16e:	d907      	bls.n	800c180 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800c170:	6a3b      	ldr	r3, [r7, #32]
 800c172:	f043 0320 	orr.w	r3, r3, #32
 800c176:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800c178:	2301      	movs	r3, #1
 800c17a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800c17e:	e006      	b.n	800c18e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	699b      	ldr	r3, [r3, #24]
 800c186:	f003 0320 	and.w	r3, r3, #32
 800c18a:	2b20      	cmp	r3, #32
 800c18c:	d1e9      	bne.n	800c162 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	699b      	ldr	r3, [r3, #24]
 800c194:	f003 0320 	and.w	r3, r3, #32
 800c198:	2b20      	cmp	r3, #32
 800c19a:	d003      	beq.n	800c1a4 <I2C_IsErrorOccurred+0xe0>
 800c19c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d0aa      	beq.n	800c0fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c1a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d103      	bne.n	800c1b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2220      	movs	r2, #32
 800c1b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c1b4:	6a3b      	ldr	r3, [r7, #32]
 800c1b6:	f043 0304 	orr.w	r3, r3, #4
 800c1ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	699b      	ldr	r3, [r3, #24]
 800c1c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d00b      	beq.n	800c1ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c1d4:	6a3b      	ldr	r3, [r7, #32]
 800c1d6:	f043 0301 	orr.w	r3, r3, #1
 800c1da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c1e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d00b      	beq.n	800c20e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c1f6:	6a3b      	ldr	r3, [r7, #32]
 800c1f8:	f043 0308 	orr.w	r3, r3, #8
 800c1fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c206:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c208:	2301      	movs	r3, #1
 800c20a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c214:	2b00      	cmp	r3, #0
 800c216:	d00b      	beq.n	800c230 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c218:	6a3b      	ldr	r3, [r7, #32]
 800c21a:	f043 0302 	orr.w	r3, r3, #2
 800c21e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c228:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c22a:	2301      	movs	r3, #1
 800c22c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800c230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c234:	2b00      	cmp	r3, #0
 800c236:	d01c      	beq.n	800c272 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c238:	68f8      	ldr	r0, [r7, #12]
 800c23a:	f7ff fe63 	bl	800bf04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	6859      	ldr	r1, [r3, #4]
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	4b0d      	ldr	r3, [pc, #52]	; (800c280 <I2C_IsErrorOccurred+0x1bc>)
 800c24a:	400b      	ands	r3, r1
 800c24c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c252:	6a3b      	ldr	r3, [r7, #32]
 800c254:	431a      	orrs	r2, r3
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2220      	movs	r2, #32
 800c25e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2200      	movs	r2, #0
 800c266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2200      	movs	r2, #0
 800c26e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800c272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c276:	4618      	mov	r0, r3
 800c278:	3728      	adds	r7, #40	; 0x28
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	fe00e800 	.word	0xfe00e800

0800c284 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c284:	b480      	push	{r7}
 800c286:	b087      	sub	sp, #28
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	607b      	str	r3, [r7, #4]
 800c28e:	460b      	mov	r3, r1
 800c290:	817b      	strh	r3, [r7, #10]
 800c292:	4613      	mov	r3, r2
 800c294:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c296:	897b      	ldrh	r3, [r7, #10]
 800c298:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c29c:	7a7b      	ldrb	r3, [r7, #9]
 800c29e:	041b      	lsls	r3, r3, #16
 800c2a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c2a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c2aa:	6a3b      	ldr	r3, [r7, #32]
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c2b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	685a      	ldr	r2, [r3, #4]
 800c2ba:	6a3b      	ldr	r3, [r7, #32]
 800c2bc:	0d5b      	lsrs	r3, r3, #21
 800c2be:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c2c2:	4b08      	ldr	r3, [pc, #32]	; (800c2e4 <I2C_TransferConfig+0x60>)
 800c2c4:	430b      	orrs	r3, r1
 800c2c6:	43db      	mvns	r3, r3
 800c2c8:	ea02 0103 	and.w	r1, r2, r3
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	697a      	ldr	r2, [r7, #20]
 800c2d2:	430a      	orrs	r2, r1
 800c2d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c2d6:	bf00      	nop
 800c2d8:	371c      	adds	r7, #28
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr
 800c2e2:	bf00      	nop
 800c2e4:	03ff63ff 	.word	0x03ff63ff

0800c2e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	2b20      	cmp	r3, #32
 800c2fc:	d138      	bne.n	800c370 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c304:	2b01      	cmp	r3, #1
 800c306:	d101      	bne.n	800c30c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c308:	2302      	movs	r3, #2
 800c30a:	e032      	b.n	800c372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2224      	movs	r2, #36	; 0x24
 800c318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f022 0201 	bic.w	r2, r2, #1
 800c32a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c33a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	6819      	ldr	r1, [r3, #0]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	683a      	ldr	r2, [r7, #0]
 800c348:	430a      	orrs	r2, r1
 800c34a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f042 0201 	orr.w	r2, r2, #1
 800c35a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2220      	movs	r2, #32
 800c360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2200      	movs	r2, #0
 800c368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c36c:	2300      	movs	r3, #0
 800c36e:	e000      	b.n	800c372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c370:	2302      	movs	r3, #2
  }
}
 800c372:	4618      	mov	r0, r3
 800c374:	370c      	adds	r7, #12
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr

0800c37e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c37e:	b480      	push	{r7}
 800c380:	b085      	sub	sp, #20
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	2b20      	cmp	r3, #32
 800c392:	d139      	bne.n	800c408 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d101      	bne.n	800c3a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c39e:	2302      	movs	r3, #2
 800c3a0:	e033      	b.n	800c40a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2224      	movs	r2, #36	; 0x24
 800c3ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	681a      	ldr	r2, [r3, #0]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f022 0201 	bic.w	r2, r2, #1
 800c3c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c3d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	021b      	lsls	r3, r3, #8
 800c3d6:	68fa      	ldr	r2, [r7, #12]
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f042 0201 	orr.w	r2, r2, #1
 800c3f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2220      	movs	r2, #32
 800c3f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c404:	2300      	movs	r3, #0
 800c406:	e000      	b.n	800c40a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c408:	2302      	movs	r3, #2
  }
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3714      	adds	r7, #20
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr
	...

0800c418 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800c41e:	2300      	movs	r3, #0
 800c420:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c422:	4b23      	ldr	r3, [pc, #140]	; (800c4b0 <HAL_PWREx_EnableOverDrive+0x98>)
 800c424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c426:	4a22      	ldr	r2, [pc, #136]	; (800c4b0 <HAL_PWREx_EnableOverDrive+0x98>)
 800c428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c42c:	6413      	str	r3, [r2, #64]	; 0x40
 800c42e:	4b20      	ldr	r3, [pc, #128]	; (800c4b0 <HAL_PWREx_EnableOverDrive+0x98>)
 800c430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c436:	603b      	str	r3, [r7, #0]
 800c438:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c43a:	4b1e      	ldr	r3, [pc, #120]	; (800c4b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a1d      	ldr	r2, [pc, #116]	; (800c4b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c444:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c446:	f7fe fb25 	bl	800aa94 <HAL_GetTick>
 800c44a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c44c:	e009      	b.n	800c462 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c44e:	f7fe fb21 	bl	800aa94 <HAL_GetTick>
 800c452:	4602      	mov	r2, r0
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	1ad3      	subs	r3, r2, r3
 800c458:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c45c:	d901      	bls.n	800c462 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800c45e:	2303      	movs	r3, #3
 800c460:	e022      	b.n	800c4a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c462:	4b14      	ldr	r3, [pc, #80]	; (800c4b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c46a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c46e:	d1ee      	bne.n	800c44e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c470:	4b10      	ldr	r3, [pc, #64]	; (800c4b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a0f      	ldr	r2, [pc, #60]	; (800c4b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c47a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c47c:	f7fe fb0a 	bl	800aa94 <HAL_GetTick>
 800c480:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c482:	e009      	b.n	800c498 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c484:	f7fe fb06 	bl	800aa94 <HAL_GetTick>
 800c488:	4602      	mov	r2, r0
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	1ad3      	subs	r3, r2, r3
 800c48e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c492:	d901      	bls.n	800c498 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800c494:	2303      	movs	r3, #3
 800c496:	e007      	b.n	800c4a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c498:	4b06      	ldr	r3, [pc, #24]	; (800c4b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4a4:	d1ee      	bne.n	800c484 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800c4a6:	2300      	movs	r3, #0
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3708      	adds	r7, #8
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	40023800 	.word	0x40023800
 800c4b4:	40007000 	.word	0x40007000

0800c4b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b086      	sub	sp, #24
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d101      	bne.n	800c4ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e291      	b.n	800c9f2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f003 0301 	and.w	r3, r3, #1
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	f000 8087 	beq.w	800c5ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c4dc:	4b96      	ldr	r3, [pc, #600]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	f003 030c 	and.w	r3, r3, #12
 800c4e4:	2b04      	cmp	r3, #4
 800c4e6:	d00c      	beq.n	800c502 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c4e8:	4b93      	ldr	r3, [pc, #588]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	f003 030c 	and.w	r3, r3, #12
 800c4f0:	2b08      	cmp	r3, #8
 800c4f2:	d112      	bne.n	800c51a <HAL_RCC_OscConfig+0x62>
 800c4f4:	4b90      	ldr	r3, [pc, #576]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c500:	d10b      	bne.n	800c51a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c502:	4b8d      	ldr	r3, [pc, #564]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d06c      	beq.n	800c5e8 <HAL_RCC_OscConfig+0x130>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	685b      	ldr	r3, [r3, #4]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d168      	bne.n	800c5e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c516:	2301      	movs	r3, #1
 800c518:	e26b      	b.n	800c9f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c522:	d106      	bne.n	800c532 <HAL_RCC_OscConfig+0x7a>
 800c524:	4b84      	ldr	r3, [pc, #528]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a83      	ldr	r2, [pc, #524]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c52a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c52e:	6013      	str	r3, [r2, #0]
 800c530:	e02e      	b.n	800c590 <HAL_RCC_OscConfig+0xd8>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d10c      	bne.n	800c554 <HAL_RCC_OscConfig+0x9c>
 800c53a:	4b7f      	ldr	r3, [pc, #508]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	4a7e      	ldr	r2, [pc, #504]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c544:	6013      	str	r3, [r2, #0]
 800c546:	4b7c      	ldr	r3, [pc, #496]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4a7b      	ldr	r2, [pc, #492]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c54c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c550:	6013      	str	r3, [r2, #0]
 800c552:	e01d      	b.n	800c590 <HAL_RCC_OscConfig+0xd8>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c55c:	d10c      	bne.n	800c578 <HAL_RCC_OscConfig+0xc0>
 800c55e:	4b76      	ldr	r3, [pc, #472]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4a75      	ldr	r2, [pc, #468]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c568:	6013      	str	r3, [r2, #0]
 800c56a:	4b73      	ldr	r3, [pc, #460]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4a72      	ldr	r2, [pc, #456]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c574:	6013      	str	r3, [r2, #0]
 800c576:	e00b      	b.n	800c590 <HAL_RCC_OscConfig+0xd8>
 800c578:	4b6f      	ldr	r3, [pc, #444]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4a6e      	ldr	r2, [pc, #440]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c57e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c582:	6013      	str	r3, [r2, #0]
 800c584:	4b6c      	ldr	r3, [pc, #432]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a6b      	ldr	r2, [pc, #428]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c58a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c58e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d013      	beq.n	800c5c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c598:	f7fe fa7c 	bl	800aa94 <HAL_GetTick>
 800c59c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c59e:	e008      	b.n	800c5b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c5a0:	f7fe fa78 	bl	800aa94 <HAL_GetTick>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	1ad3      	subs	r3, r2, r3
 800c5aa:	2b64      	cmp	r3, #100	; 0x64
 800c5ac:	d901      	bls.n	800c5b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c5ae:	2303      	movs	r3, #3
 800c5b0:	e21f      	b.n	800c9f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c5b2:	4b61      	ldr	r3, [pc, #388]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d0f0      	beq.n	800c5a0 <HAL_RCC_OscConfig+0xe8>
 800c5be:	e014      	b.n	800c5ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5c0:	f7fe fa68 	bl	800aa94 <HAL_GetTick>
 800c5c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c5c6:	e008      	b.n	800c5da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c5c8:	f7fe fa64 	bl	800aa94 <HAL_GetTick>
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	1ad3      	subs	r3, r2, r3
 800c5d2:	2b64      	cmp	r3, #100	; 0x64
 800c5d4:	d901      	bls.n	800c5da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c5d6:	2303      	movs	r3, #3
 800c5d8:	e20b      	b.n	800c9f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c5da:	4b57      	ldr	r3, [pc, #348]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d1f0      	bne.n	800c5c8 <HAL_RCC_OscConfig+0x110>
 800c5e6:	e000      	b.n	800c5ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c5e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f003 0302 	and.w	r3, r3, #2
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d069      	beq.n	800c6ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c5f6:	4b50      	ldr	r3, [pc, #320]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c5f8:	689b      	ldr	r3, [r3, #8]
 800c5fa:	f003 030c 	and.w	r3, r3, #12
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d00b      	beq.n	800c61a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c602:	4b4d      	ldr	r3, [pc, #308]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c604:	689b      	ldr	r3, [r3, #8]
 800c606:	f003 030c 	and.w	r3, r3, #12
 800c60a:	2b08      	cmp	r3, #8
 800c60c:	d11c      	bne.n	800c648 <HAL_RCC_OscConfig+0x190>
 800c60e:	4b4a      	ldr	r3, [pc, #296]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c616:	2b00      	cmp	r3, #0
 800c618:	d116      	bne.n	800c648 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c61a:	4b47      	ldr	r3, [pc, #284]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f003 0302 	and.w	r3, r3, #2
 800c622:	2b00      	cmp	r3, #0
 800c624:	d005      	beq.n	800c632 <HAL_RCC_OscConfig+0x17a>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	68db      	ldr	r3, [r3, #12]
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	d001      	beq.n	800c632 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c62e:	2301      	movs	r3, #1
 800c630:	e1df      	b.n	800c9f2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c632:	4b41      	ldr	r3, [pc, #260]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	691b      	ldr	r3, [r3, #16]
 800c63e:	00db      	lsls	r3, r3, #3
 800c640:	493d      	ldr	r1, [pc, #244]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c642:	4313      	orrs	r3, r2
 800c644:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c646:	e040      	b.n	800c6ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	68db      	ldr	r3, [r3, #12]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d023      	beq.n	800c698 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c650:	4b39      	ldr	r3, [pc, #228]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4a38      	ldr	r2, [pc, #224]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c656:	f043 0301 	orr.w	r3, r3, #1
 800c65a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c65c:	f7fe fa1a 	bl	800aa94 <HAL_GetTick>
 800c660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c662:	e008      	b.n	800c676 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c664:	f7fe fa16 	bl	800aa94 <HAL_GetTick>
 800c668:	4602      	mov	r2, r0
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	1ad3      	subs	r3, r2, r3
 800c66e:	2b02      	cmp	r3, #2
 800c670:	d901      	bls.n	800c676 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c672:	2303      	movs	r3, #3
 800c674:	e1bd      	b.n	800c9f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c676:	4b30      	ldr	r3, [pc, #192]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f003 0302 	and.w	r3, r3, #2
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d0f0      	beq.n	800c664 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c682:	4b2d      	ldr	r3, [pc, #180]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	691b      	ldr	r3, [r3, #16]
 800c68e:	00db      	lsls	r3, r3, #3
 800c690:	4929      	ldr	r1, [pc, #164]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c692:	4313      	orrs	r3, r2
 800c694:	600b      	str	r3, [r1, #0]
 800c696:	e018      	b.n	800c6ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c698:	4b27      	ldr	r3, [pc, #156]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4a26      	ldr	r2, [pc, #152]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c69e:	f023 0301 	bic.w	r3, r3, #1
 800c6a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6a4:	f7fe f9f6 	bl	800aa94 <HAL_GetTick>
 800c6a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c6aa:	e008      	b.n	800c6be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c6ac:	f7fe f9f2 	bl	800aa94 <HAL_GetTick>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	1ad3      	subs	r3, r2, r3
 800c6b6:	2b02      	cmp	r3, #2
 800c6b8:	d901      	bls.n	800c6be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c6ba:	2303      	movs	r3, #3
 800c6bc:	e199      	b.n	800c9f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c6be:	4b1e      	ldr	r3, [pc, #120]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f003 0302 	and.w	r3, r3, #2
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d1f0      	bne.n	800c6ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f003 0308 	and.w	r3, r3, #8
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d038      	beq.n	800c748 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	695b      	ldr	r3, [r3, #20]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d019      	beq.n	800c712 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c6de:	4b16      	ldr	r3, [pc, #88]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c6e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6e2:	4a15      	ldr	r2, [pc, #84]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c6e4:	f043 0301 	orr.w	r3, r3, #1
 800c6e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6ea:	f7fe f9d3 	bl	800aa94 <HAL_GetTick>
 800c6ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c6f0:	e008      	b.n	800c704 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c6f2:	f7fe f9cf 	bl	800aa94 <HAL_GetTick>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	1ad3      	subs	r3, r2, r3
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d901      	bls.n	800c704 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c700:	2303      	movs	r3, #3
 800c702:	e176      	b.n	800c9f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c704:	4b0c      	ldr	r3, [pc, #48]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c708:	f003 0302 	and.w	r3, r3, #2
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d0f0      	beq.n	800c6f2 <HAL_RCC_OscConfig+0x23a>
 800c710:	e01a      	b.n	800c748 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c712:	4b09      	ldr	r3, [pc, #36]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c716:	4a08      	ldr	r2, [pc, #32]	; (800c738 <HAL_RCC_OscConfig+0x280>)
 800c718:	f023 0301 	bic.w	r3, r3, #1
 800c71c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c71e:	f7fe f9b9 	bl	800aa94 <HAL_GetTick>
 800c722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c724:	e00a      	b.n	800c73c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c726:	f7fe f9b5 	bl	800aa94 <HAL_GetTick>
 800c72a:	4602      	mov	r2, r0
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	1ad3      	subs	r3, r2, r3
 800c730:	2b02      	cmp	r3, #2
 800c732:	d903      	bls.n	800c73c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c734:	2303      	movs	r3, #3
 800c736:	e15c      	b.n	800c9f2 <HAL_RCC_OscConfig+0x53a>
 800c738:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c73c:	4b91      	ldr	r3, [pc, #580]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c73e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c740:	f003 0302 	and.w	r3, r3, #2
 800c744:	2b00      	cmp	r3, #0
 800c746:	d1ee      	bne.n	800c726 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f003 0304 	and.w	r3, r3, #4
 800c750:	2b00      	cmp	r3, #0
 800c752:	f000 80a4 	beq.w	800c89e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c756:	4b8b      	ldr	r3, [pc, #556]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c75a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d10d      	bne.n	800c77e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c762:	4b88      	ldr	r3, [pc, #544]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c766:	4a87      	ldr	r2, [pc, #540]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c76c:	6413      	str	r3, [r2, #64]	; 0x40
 800c76e:	4b85      	ldr	r3, [pc, #532]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c776:	60bb      	str	r3, [r7, #8]
 800c778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c77a:	2301      	movs	r3, #1
 800c77c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c77e:	4b82      	ldr	r3, [pc, #520]	; (800c988 <HAL_RCC_OscConfig+0x4d0>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c786:	2b00      	cmp	r3, #0
 800c788:	d118      	bne.n	800c7bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c78a:	4b7f      	ldr	r3, [pc, #508]	; (800c988 <HAL_RCC_OscConfig+0x4d0>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a7e      	ldr	r2, [pc, #504]	; (800c988 <HAL_RCC_OscConfig+0x4d0>)
 800c790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c796:	f7fe f97d 	bl	800aa94 <HAL_GetTick>
 800c79a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c79c:	e008      	b.n	800c7b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c79e:	f7fe f979 	bl	800aa94 <HAL_GetTick>
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	1ad3      	subs	r3, r2, r3
 800c7a8:	2b64      	cmp	r3, #100	; 0x64
 800c7aa:	d901      	bls.n	800c7b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c7ac:	2303      	movs	r3, #3
 800c7ae:	e120      	b.n	800c9f2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c7b0:	4b75      	ldr	r3, [pc, #468]	; (800c988 <HAL_RCC_OscConfig+0x4d0>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d0f0      	beq.n	800c79e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	689b      	ldr	r3, [r3, #8]
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d106      	bne.n	800c7d2 <HAL_RCC_OscConfig+0x31a>
 800c7c4:	4b6f      	ldr	r3, [pc, #444]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c7c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7c8:	4a6e      	ldr	r2, [pc, #440]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c7ca:	f043 0301 	orr.w	r3, r3, #1
 800c7ce:	6713      	str	r3, [r2, #112]	; 0x70
 800c7d0:	e02d      	b.n	800c82e <HAL_RCC_OscConfig+0x376>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d10c      	bne.n	800c7f4 <HAL_RCC_OscConfig+0x33c>
 800c7da:	4b6a      	ldr	r3, [pc, #424]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c7dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7de:	4a69      	ldr	r2, [pc, #420]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c7e0:	f023 0301 	bic.w	r3, r3, #1
 800c7e4:	6713      	str	r3, [r2, #112]	; 0x70
 800c7e6:	4b67      	ldr	r3, [pc, #412]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c7e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7ea:	4a66      	ldr	r2, [pc, #408]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c7ec:	f023 0304 	bic.w	r3, r3, #4
 800c7f0:	6713      	str	r3, [r2, #112]	; 0x70
 800c7f2:	e01c      	b.n	800c82e <HAL_RCC_OscConfig+0x376>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	689b      	ldr	r3, [r3, #8]
 800c7f8:	2b05      	cmp	r3, #5
 800c7fa:	d10c      	bne.n	800c816 <HAL_RCC_OscConfig+0x35e>
 800c7fc:	4b61      	ldr	r3, [pc, #388]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c7fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c800:	4a60      	ldr	r2, [pc, #384]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c802:	f043 0304 	orr.w	r3, r3, #4
 800c806:	6713      	str	r3, [r2, #112]	; 0x70
 800c808:	4b5e      	ldr	r3, [pc, #376]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c80a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c80c:	4a5d      	ldr	r2, [pc, #372]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c80e:	f043 0301 	orr.w	r3, r3, #1
 800c812:	6713      	str	r3, [r2, #112]	; 0x70
 800c814:	e00b      	b.n	800c82e <HAL_RCC_OscConfig+0x376>
 800c816:	4b5b      	ldr	r3, [pc, #364]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c81a:	4a5a      	ldr	r2, [pc, #360]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c81c:	f023 0301 	bic.w	r3, r3, #1
 800c820:	6713      	str	r3, [r2, #112]	; 0x70
 800c822:	4b58      	ldr	r3, [pc, #352]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c826:	4a57      	ldr	r2, [pc, #348]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c828:	f023 0304 	bic.w	r3, r3, #4
 800c82c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	689b      	ldr	r3, [r3, #8]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d015      	beq.n	800c862 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c836:	f7fe f92d 	bl	800aa94 <HAL_GetTick>
 800c83a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c83c:	e00a      	b.n	800c854 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c83e:	f7fe f929 	bl	800aa94 <HAL_GetTick>
 800c842:	4602      	mov	r2, r0
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	f241 3288 	movw	r2, #5000	; 0x1388
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d901      	bls.n	800c854 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c850:	2303      	movs	r3, #3
 800c852:	e0ce      	b.n	800c9f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c854:	4b4b      	ldr	r3, [pc, #300]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c858:	f003 0302 	and.w	r3, r3, #2
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d0ee      	beq.n	800c83e <HAL_RCC_OscConfig+0x386>
 800c860:	e014      	b.n	800c88c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c862:	f7fe f917 	bl	800aa94 <HAL_GetTick>
 800c866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c868:	e00a      	b.n	800c880 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c86a:	f7fe f913 	bl	800aa94 <HAL_GetTick>
 800c86e:	4602      	mov	r2, r0
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	1ad3      	subs	r3, r2, r3
 800c874:	f241 3288 	movw	r2, #5000	; 0x1388
 800c878:	4293      	cmp	r3, r2
 800c87a:	d901      	bls.n	800c880 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c87c:	2303      	movs	r3, #3
 800c87e:	e0b8      	b.n	800c9f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c880:	4b40      	ldr	r3, [pc, #256]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c884:	f003 0302 	and.w	r3, r3, #2
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d1ee      	bne.n	800c86a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c88c:	7dfb      	ldrb	r3, [r7, #23]
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d105      	bne.n	800c89e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c892:	4b3c      	ldr	r3, [pc, #240]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c896:	4a3b      	ldr	r2, [pc, #236]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c89c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	699b      	ldr	r3, [r3, #24]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	f000 80a4 	beq.w	800c9f0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c8a8:	4b36      	ldr	r3, [pc, #216]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c8aa:	689b      	ldr	r3, [r3, #8]
 800c8ac:	f003 030c 	and.w	r3, r3, #12
 800c8b0:	2b08      	cmp	r3, #8
 800c8b2:	d06b      	beq.n	800c98c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	699b      	ldr	r3, [r3, #24]
 800c8b8:	2b02      	cmp	r3, #2
 800c8ba:	d149      	bne.n	800c950 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c8bc:	4b31      	ldr	r3, [pc, #196]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a30      	ldr	r2, [pc, #192]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c8c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c8c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8c8:	f7fe f8e4 	bl	800aa94 <HAL_GetTick>
 800c8cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8ce:	e008      	b.n	800c8e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8d0:	f7fe f8e0 	bl	800aa94 <HAL_GetTick>
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	1ad3      	subs	r3, r2, r3
 800c8da:	2b02      	cmp	r3, #2
 800c8dc:	d901      	bls.n	800c8e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c8de:	2303      	movs	r3, #3
 800c8e0:	e087      	b.n	800c9f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8e2:	4b28      	ldr	r3, [pc, #160]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d1f0      	bne.n	800c8d0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	69da      	ldr	r2, [r3, #28]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6a1b      	ldr	r3, [r3, #32]
 800c8f6:	431a      	orrs	r2, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8fc:	019b      	lsls	r3, r3, #6
 800c8fe:	431a      	orrs	r2, r3
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c904:	085b      	lsrs	r3, r3, #1
 800c906:	3b01      	subs	r3, #1
 800c908:	041b      	lsls	r3, r3, #16
 800c90a:	431a      	orrs	r2, r3
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c910:	061b      	lsls	r3, r3, #24
 800c912:	4313      	orrs	r3, r2
 800c914:	4a1b      	ldr	r2, [pc, #108]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c916:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c91a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c91c:	4b19      	ldr	r3, [pc, #100]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a18      	ldr	r2, [pc, #96]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c928:	f7fe f8b4 	bl	800aa94 <HAL_GetTick>
 800c92c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c92e:	e008      	b.n	800c942 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c930:	f7fe f8b0 	bl	800aa94 <HAL_GetTick>
 800c934:	4602      	mov	r2, r0
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	1ad3      	subs	r3, r2, r3
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	d901      	bls.n	800c942 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800c93e:	2303      	movs	r3, #3
 800c940:	e057      	b.n	800c9f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c942:	4b10      	ldr	r3, [pc, #64]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d0f0      	beq.n	800c930 <HAL_RCC_OscConfig+0x478>
 800c94e:	e04f      	b.n	800c9f0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c950:	4b0c      	ldr	r3, [pc, #48]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a0b      	ldr	r2, [pc, #44]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c95a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c95c:	f7fe f89a 	bl	800aa94 <HAL_GetTick>
 800c960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c962:	e008      	b.n	800c976 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c964:	f7fe f896 	bl	800aa94 <HAL_GetTick>
 800c968:	4602      	mov	r2, r0
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	1ad3      	subs	r3, r2, r3
 800c96e:	2b02      	cmp	r3, #2
 800c970:	d901      	bls.n	800c976 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800c972:	2303      	movs	r3, #3
 800c974:	e03d      	b.n	800c9f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c976:	4b03      	ldr	r3, [pc, #12]	; (800c984 <HAL_RCC_OscConfig+0x4cc>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d1f0      	bne.n	800c964 <HAL_RCC_OscConfig+0x4ac>
 800c982:	e035      	b.n	800c9f0 <HAL_RCC_OscConfig+0x538>
 800c984:	40023800 	.word	0x40023800
 800c988:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c98c:	4b1b      	ldr	r3, [pc, #108]	; (800c9fc <HAL_RCC_OscConfig+0x544>)
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	699b      	ldr	r3, [r3, #24]
 800c996:	2b01      	cmp	r3, #1
 800c998:	d028      	beq.n	800c9ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d121      	bne.n	800c9ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d11a      	bne.n	800c9ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c9bc:	4013      	ands	r3, r2
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c9c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d111      	bne.n	800c9ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d2:	085b      	lsrs	r3, r3, #1
 800c9d4:	3b01      	subs	r3, #1
 800c9d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d107      	bne.n	800c9ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d001      	beq.n	800c9f0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e000      	b.n	800c9f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800c9f0:	2300      	movs	r3, #0
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3718      	adds	r7, #24
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	40023800 	.word	0x40023800

0800ca00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d101      	bne.n	800ca18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ca14:	2301      	movs	r3, #1
 800ca16:	e0d0      	b.n	800cbba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ca18:	4b6a      	ldr	r3, [pc, #424]	; (800cbc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f003 030f 	and.w	r3, r3, #15
 800ca20:	683a      	ldr	r2, [r7, #0]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d910      	bls.n	800ca48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca26:	4b67      	ldr	r3, [pc, #412]	; (800cbc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f023 020f 	bic.w	r2, r3, #15
 800ca2e:	4965      	ldr	r1, [pc, #404]	; (800cbc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	4313      	orrs	r3, r2
 800ca34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca36:	4b63      	ldr	r3, [pc, #396]	; (800cbc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f003 030f 	and.w	r3, r3, #15
 800ca3e:	683a      	ldr	r2, [r7, #0]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d001      	beq.n	800ca48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ca44:	2301      	movs	r3, #1
 800ca46:	e0b8      	b.n	800cbba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f003 0302 	and.w	r3, r3, #2
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d020      	beq.n	800ca96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f003 0304 	and.w	r3, r3, #4
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d005      	beq.n	800ca6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ca60:	4b59      	ldr	r3, [pc, #356]	; (800cbc8 <HAL_RCC_ClockConfig+0x1c8>)
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	4a58      	ldr	r2, [pc, #352]	; (800cbc8 <HAL_RCC_ClockConfig+0x1c8>)
 800ca66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ca6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f003 0308 	and.w	r3, r3, #8
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d005      	beq.n	800ca84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ca78:	4b53      	ldr	r3, [pc, #332]	; (800cbc8 <HAL_RCC_ClockConfig+0x1c8>)
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	4a52      	ldr	r2, [pc, #328]	; (800cbc8 <HAL_RCC_ClockConfig+0x1c8>)
 800ca7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ca82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ca84:	4b50      	ldr	r3, [pc, #320]	; (800cbc8 <HAL_RCC_ClockConfig+0x1c8>)
 800ca86:	689b      	ldr	r3, [r3, #8]
 800ca88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	494d      	ldr	r1, [pc, #308]	; (800cbc8 <HAL_RCC_ClockConfig+0x1c8>)
 800ca92:	4313      	orrs	r3, r2
 800ca94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f003 0301 	and.w	r3, r3, #1
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d040      	beq.n	800cb24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	d107      	bne.n	800caba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800caaa:	4b47      	ldr	r3, [pc, #284]	; (800cbc8 <HAL_RCC_ClockConfig+0x1c8>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d115      	bne.n	800cae2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cab6:	2301      	movs	r3, #1
 800cab8:	e07f      	b.n	800cbba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	2b02      	cmp	r3, #2
 800cac0:	d107      	bne.n	800cad2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cac2:	4b41      	ldr	r3, [pc, #260]	; (800cbc8 <HAL_RCC_ClockConfig+0x1c8>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d109      	bne.n	800cae2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cace:	2301      	movs	r3, #1
 800cad0:	e073      	b.n	800cbba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cad2:	4b3d      	ldr	r3, [pc, #244]	; (800cbc8 <HAL_RCC_ClockConfig+0x1c8>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f003 0302 	and.w	r3, r3, #2
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d101      	bne.n	800cae2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cade:	2301      	movs	r3, #1
 800cae0:	e06b      	b.n	800cbba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cae2:	4b39      	ldr	r3, [pc, #228]	; (800cbc8 <HAL_RCC_ClockConfig+0x1c8>)
 800cae4:	689b      	ldr	r3, [r3, #8]
 800cae6:	f023 0203 	bic.w	r2, r3, #3
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	4936      	ldr	r1, [pc, #216]	; (800cbc8 <HAL_RCC_ClockConfig+0x1c8>)
 800caf0:	4313      	orrs	r3, r2
 800caf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800caf4:	f7fd ffce 	bl	800aa94 <HAL_GetTick>
 800caf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cafa:	e00a      	b.n	800cb12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cafc:	f7fd ffca 	bl	800aa94 <HAL_GetTick>
 800cb00:	4602      	mov	r2, r0
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	1ad3      	subs	r3, r2, r3
 800cb06:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d901      	bls.n	800cb12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800cb0e:	2303      	movs	r3, #3
 800cb10:	e053      	b.n	800cbba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb12:	4b2d      	ldr	r3, [pc, #180]	; (800cbc8 <HAL_RCC_ClockConfig+0x1c8>)
 800cb14:	689b      	ldr	r3, [r3, #8]
 800cb16:	f003 020c 	and.w	r2, r3, #12
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d1eb      	bne.n	800cafc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cb24:	4b27      	ldr	r3, [pc, #156]	; (800cbc4 <HAL_RCC_ClockConfig+0x1c4>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f003 030f 	and.w	r3, r3, #15
 800cb2c:	683a      	ldr	r2, [r7, #0]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d210      	bcs.n	800cb54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb32:	4b24      	ldr	r3, [pc, #144]	; (800cbc4 <HAL_RCC_ClockConfig+0x1c4>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f023 020f 	bic.w	r2, r3, #15
 800cb3a:	4922      	ldr	r1, [pc, #136]	; (800cbc4 <HAL_RCC_ClockConfig+0x1c4>)
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	4313      	orrs	r3, r2
 800cb40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb42:	4b20      	ldr	r3, [pc, #128]	; (800cbc4 <HAL_RCC_ClockConfig+0x1c4>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f003 030f 	and.w	r3, r3, #15
 800cb4a:	683a      	ldr	r2, [r7, #0]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d001      	beq.n	800cb54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800cb50:	2301      	movs	r3, #1
 800cb52:	e032      	b.n	800cbba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f003 0304 	and.w	r3, r3, #4
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d008      	beq.n	800cb72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cb60:	4b19      	ldr	r3, [pc, #100]	; (800cbc8 <HAL_RCC_ClockConfig+0x1c8>)
 800cb62:	689b      	ldr	r3, [r3, #8]
 800cb64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	68db      	ldr	r3, [r3, #12]
 800cb6c:	4916      	ldr	r1, [pc, #88]	; (800cbc8 <HAL_RCC_ClockConfig+0x1c8>)
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f003 0308 	and.w	r3, r3, #8
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d009      	beq.n	800cb92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cb7e:	4b12      	ldr	r3, [pc, #72]	; (800cbc8 <HAL_RCC_ClockConfig+0x1c8>)
 800cb80:	689b      	ldr	r3, [r3, #8]
 800cb82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	691b      	ldr	r3, [r3, #16]
 800cb8a:	00db      	lsls	r3, r3, #3
 800cb8c:	490e      	ldr	r1, [pc, #56]	; (800cbc8 <HAL_RCC_ClockConfig+0x1c8>)
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cb92:	f000 f821 	bl	800cbd8 <HAL_RCC_GetSysClockFreq>
 800cb96:	4602      	mov	r2, r0
 800cb98:	4b0b      	ldr	r3, [pc, #44]	; (800cbc8 <HAL_RCC_ClockConfig+0x1c8>)
 800cb9a:	689b      	ldr	r3, [r3, #8]
 800cb9c:	091b      	lsrs	r3, r3, #4
 800cb9e:	f003 030f 	and.w	r3, r3, #15
 800cba2:	490a      	ldr	r1, [pc, #40]	; (800cbcc <HAL_RCC_ClockConfig+0x1cc>)
 800cba4:	5ccb      	ldrb	r3, [r1, r3]
 800cba6:	fa22 f303 	lsr.w	r3, r2, r3
 800cbaa:	4a09      	ldr	r2, [pc, #36]	; (800cbd0 <HAL_RCC_ClockConfig+0x1d0>)
 800cbac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800cbae:	4b09      	ldr	r3, [pc, #36]	; (800cbd4 <HAL_RCC_ClockConfig+0x1d4>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7f9 ff42 	bl	8006a3c <HAL_InitTick>

  return HAL_OK;
 800cbb8:	2300      	movs	r3, #0
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3710      	adds	r7, #16
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	40023c00 	.word	0x40023c00
 800cbc8:	40023800 	.word	0x40023800
 800cbcc:	0801c048 	.word	0x0801c048
 800cbd0:	20000008 	.word	0x20000008
 800cbd4:	2000000c 	.word	0x2000000c

0800cbd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cbd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cbdc:	b090      	sub	sp, #64	; 0x40
 800cbde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	637b      	str	r3, [r7, #52]	; 0x34
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbe8:	2300      	movs	r3, #0
 800cbea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800cbec:	2300      	movs	r3, #0
 800cbee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cbf0:	4b59      	ldr	r3, [pc, #356]	; (800cd58 <HAL_RCC_GetSysClockFreq+0x180>)
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	f003 030c 	and.w	r3, r3, #12
 800cbf8:	2b08      	cmp	r3, #8
 800cbfa:	d00d      	beq.n	800cc18 <HAL_RCC_GetSysClockFreq+0x40>
 800cbfc:	2b08      	cmp	r3, #8
 800cbfe:	f200 80a1 	bhi.w	800cd44 <HAL_RCC_GetSysClockFreq+0x16c>
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d002      	beq.n	800cc0c <HAL_RCC_GetSysClockFreq+0x34>
 800cc06:	2b04      	cmp	r3, #4
 800cc08:	d003      	beq.n	800cc12 <HAL_RCC_GetSysClockFreq+0x3a>
 800cc0a:	e09b      	b.n	800cd44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cc0c:	4b53      	ldr	r3, [pc, #332]	; (800cd5c <HAL_RCC_GetSysClockFreq+0x184>)
 800cc0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800cc10:	e09b      	b.n	800cd4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cc12:	4b53      	ldr	r3, [pc, #332]	; (800cd60 <HAL_RCC_GetSysClockFreq+0x188>)
 800cc14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800cc16:	e098      	b.n	800cd4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cc18:	4b4f      	ldr	r3, [pc, #316]	; (800cd58 <HAL_RCC_GetSysClockFreq+0x180>)
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc20:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800cc22:	4b4d      	ldr	r3, [pc, #308]	; (800cd58 <HAL_RCC_GetSysClockFreq+0x180>)
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d028      	beq.n	800cc80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cc2e:	4b4a      	ldr	r3, [pc, #296]	; (800cd58 <HAL_RCC_GetSysClockFreq+0x180>)
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	099b      	lsrs	r3, r3, #6
 800cc34:	2200      	movs	r2, #0
 800cc36:	623b      	str	r3, [r7, #32]
 800cc38:	627a      	str	r2, [r7, #36]	; 0x24
 800cc3a:	6a3b      	ldr	r3, [r7, #32]
 800cc3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800cc40:	2100      	movs	r1, #0
 800cc42:	4b47      	ldr	r3, [pc, #284]	; (800cd60 <HAL_RCC_GetSysClockFreq+0x188>)
 800cc44:	fb03 f201 	mul.w	r2, r3, r1
 800cc48:	2300      	movs	r3, #0
 800cc4a:	fb00 f303 	mul.w	r3, r0, r3
 800cc4e:	4413      	add	r3, r2
 800cc50:	4a43      	ldr	r2, [pc, #268]	; (800cd60 <HAL_RCC_GetSysClockFreq+0x188>)
 800cc52:	fba0 1202 	umull	r1, r2, r0, r2
 800cc56:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc58:	460a      	mov	r2, r1
 800cc5a:	62ba      	str	r2, [r7, #40]	; 0x28
 800cc5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc5e:	4413      	add	r3, r2
 800cc60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc64:	2200      	movs	r2, #0
 800cc66:	61bb      	str	r3, [r7, #24]
 800cc68:	61fa      	str	r2, [r7, #28]
 800cc6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cc6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800cc72:	f7f4 f881 	bl	8000d78 <__aeabi_uldivmod>
 800cc76:	4602      	mov	r2, r0
 800cc78:	460b      	mov	r3, r1
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc7e:	e053      	b.n	800cd28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cc80:	4b35      	ldr	r3, [pc, #212]	; (800cd58 <HAL_RCC_GetSysClockFreq+0x180>)
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	099b      	lsrs	r3, r3, #6
 800cc86:	2200      	movs	r2, #0
 800cc88:	613b      	str	r3, [r7, #16]
 800cc8a:	617a      	str	r2, [r7, #20]
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800cc92:	f04f 0b00 	mov.w	fp, #0
 800cc96:	4652      	mov	r2, sl
 800cc98:	465b      	mov	r3, fp
 800cc9a:	f04f 0000 	mov.w	r0, #0
 800cc9e:	f04f 0100 	mov.w	r1, #0
 800cca2:	0159      	lsls	r1, r3, #5
 800cca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cca8:	0150      	lsls	r0, r2, #5
 800ccaa:	4602      	mov	r2, r0
 800ccac:	460b      	mov	r3, r1
 800ccae:	ebb2 080a 	subs.w	r8, r2, sl
 800ccb2:	eb63 090b 	sbc.w	r9, r3, fp
 800ccb6:	f04f 0200 	mov.w	r2, #0
 800ccba:	f04f 0300 	mov.w	r3, #0
 800ccbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ccc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ccc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ccca:	ebb2 0408 	subs.w	r4, r2, r8
 800ccce:	eb63 0509 	sbc.w	r5, r3, r9
 800ccd2:	f04f 0200 	mov.w	r2, #0
 800ccd6:	f04f 0300 	mov.w	r3, #0
 800ccda:	00eb      	lsls	r3, r5, #3
 800ccdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cce0:	00e2      	lsls	r2, r4, #3
 800cce2:	4614      	mov	r4, r2
 800cce4:	461d      	mov	r5, r3
 800cce6:	eb14 030a 	adds.w	r3, r4, sl
 800ccea:	603b      	str	r3, [r7, #0]
 800ccec:	eb45 030b 	adc.w	r3, r5, fp
 800ccf0:	607b      	str	r3, [r7, #4]
 800ccf2:	f04f 0200 	mov.w	r2, #0
 800ccf6:	f04f 0300 	mov.w	r3, #0
 800ccfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ccfe:	4629      	mov	r1, r5
 800cd00:	028b      	lsls	r3, r1, #10
 800cd02:	4621      	mov	r1, r4
 800cd04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800cd08:	4621      	mov	r1, r4
 800cd0a:	028a      	lsls	r2, r1, #10
 800cd0c:	4610      	mov	r0, r2
 800cd0e:	4619      	mov	r1, r3
 800cd10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd12:	2200      	movs	r2, #0
 800cd14:	60bb      	str	r3, [r7, #8]
 800cd16:	60fa      	str	r2, [r7, #12]
 800cd18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cd1c:	f7f4 f82c 	bl	8000d78 <__aeabi_uldivmod>
 800cd20:	4602      	mov	r2, r0
 800cd22:	460b      	mov	r3, r1
 800cd24:	4613      	mov	r3, r2
 800cd26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800cd28:	4b0b      	ldr	r3, [pc, #44]	; (800cd58 <HAL_RCC_GetSysClockFreq+0x180>)
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	0c1b      	lsrs	r3, r3, #16
 800cd2e:	f003 0303 	and.w	r3, r3, #3
 800cd32:	3301      	adds	r3, #1
 800cd34:	005b      	lsls	r3, r3, #1
 800cd36:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800cd38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800cd42:	e002      	b.n	800cd4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cd44:	4b05      	ldr	r3, [pc, #20]	; (800cd5c <HAL_RCC_GetSysClockFreq+0x184>)
 800cd46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800cd48:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3740      	adds	r7, #64	; 0x40
 800cd50:	46bd      	mov	sp, r7
 800cd52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cd56:	bf00      	nop
 800cd58:	40023800 	.word	0x40023800
 800cd5c:	00f42400 	.word	0x00f42400
 800cd60:	017d7840 	.word	0x017d7840

0800cd64 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cd64:	b480      	push	{r7}
 800cd66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cd68:	4b03      	ldr	r3, [pc, #12]	; (800cd78 <HAL_RCC_GetHCLKFreq+0x14>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	20000008 	.word	0x20000008

0800cd7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cd80:	f7ff fff0 	bl	800cd64 <HAL_RCC_GetHCLKFreq>
 800cd84:	4602      	mov	r2, r0
 800cd86:	4b05      	ldr	r3, [pc, #20]	; (800cd9c <HAL_RCC_GetPCLK1Freq+0x20>)
 800cd88:	689b      	ldr	r3, [r3, #8]
 800cd8a:	0a9b      	lsrs	r3, r3, #10
 800cd8c:	f003 0307 	and.w	r3, r3, #7
 800cd90:	4903      	ldr	r1, [pc, #12]	; (800cda0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cd92:	5ccb      	ldrb	r3, [r1, r3]
 800cd94:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	40023800 	.word	0x40023800
 800cda0:	0801c058 	.word	0x0801c058

0800cda4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800cda8:	f7ff ffdc 	bl	800cd64 <HAL_RCC_GetHCLKFreq>
 800cdac:	4602      	mov	r2, r0
 800cdae:	4b05      	ldr	r3, [pc, #20]	; (800cdc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cdb0:	689b      	ldr	r3, [r3, #8]
 800cdb2:	0b5b      	lsrs	r3, r3, #13
 800cdb4:	f003 0307 	and.w	r3, r3, #7
 800cdb8:	4903      	ldr	r1, [pc, #12]	; (800cdc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cdba:	5ccb      	ldrb	r3, [r1, r3]
 800cdbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	bd80      	pop	{r7, pc}
 800cdc4:	40023800 	.word	0x40023800
 800cdc8:	0801c058 	.word	0x0801c058

0800cdcc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b083      	sub	sp, #12
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	220f      	movs	r2, #15
 800cdda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cddc:	4b12      	ldr	r3, [pc, #72]	; (800ce28 <HAL_RCC_GetClockConfig+0x5c>)
 800cdde:	689b      	ldr	r3, [r3, #8]
 800cde0:	f003 0203 	and.w	r2, r3, #3
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cde8:	4b0f      	ldr	r3, [pc, #60]	; (800ce28 <HAL_RCC_GetClockConfig+0x5c>)
 800cdea:	689b      	ldr	r3, [r3, #8]
 800cdec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cdf4:	4b0c      	ldr	r3, [pc, #48]	; (800ce28 <HAL_RCC_GetClockConfig+0x5c>)
 800cdf6:	689b      	ldr	r3, [r3, #8]
 800cdf8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ce00:	4b09      	ldr	r3, [pc, #36]	; (800ce28 <HAL_RCC_GetClockConfig+0x5c>)
 800ce02:	689b      	ldr	r3, [r3, #8]
 800ce04:	08db      	lsrs	r3, r3, #3
 800ce06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ce0e:	4b07      	ldr	r3, [pc, #28]	; (800ce2c <HAL_RCC_GetClockConfig+0x60>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f003 020f 	and.w	r2, r3, #15
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	601a      	str	r2, [r3, #0]
}
 800ce1a:	bf00      	nop
 800ce1c:	370c      	adds	r7, #12
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr
 800ce26:	bf00      	nop
 800ce28:	40023800 	.word	0x40023800
 800ce2c:	40023c00 	.word	0x40023c00

0800ce30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b088      	sub	sp, #32
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800ce40:	2300      	movs	r3, #0
 800ce42:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800ce44:	2300      	movs	r3, #0
 800ce46:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f003 0301 	and.w	r3, r3, #1
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d012      	beq.n	800ce7a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ce54:	4b65      	ldr	r3, [pc, #404]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	4a64      	ldr	r2, [pc, #400]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ce5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ce5e:	6093      	str	r3, [r2, #8]
 800ce60:	4b62      	ldr	r3, [pc, #392]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ce62:	689a      	ldr	r2, [r3, #8]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce68:	4960      	ldr	r1, [pc, #384]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d101      	bne.n	800ce7a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800ce76:	2301      	movs	r3, #1
 800ce78:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d017      	beq.n	800ceb6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ce86:	4b59      	ldr	r3, [pc, #356]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ce88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce94:	4955      	ldr	r1, [pc, #340]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ce96:	4313      	orrs	r3, r2
 800ce98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cea4:	d101      	bne.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800cea6:	2301      	movs	r3, #1
 800cea8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d101      	bne.n	800ceb6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d017      	beq.n	800cef2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cec2:	4b4a      	ldr	r3, [pc, #296]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cec8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ced0:	4946      	ldr	r1, [pc, #280]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ced2:	4313      	orrs	r3, r2
 800ced4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cedc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cee0:	d101      	bne.n	800cee6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800cee2:	2301      	movs	r3, #1
 800cee4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d101      	bne.n	800cef2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800ceee:	2301      	movs	r3, #1
 800cef0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f003 0320 	and.w	r3, r3, #32
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	f000 808b 	beq.w	800d016 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cf00:	4b3a      	ldr	r3, [pc, #232]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf04:	4a39      	ldr	r2, [pc, #228]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf0a:	6413      	str	r3, [r2, #64]	; 0x40
 800cf0c:	4b37      	ldr	r3, [pc, #220]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf14:	60fb      	str	r3, [r7, #12]
 800cf16:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cf18:	4b35      	ldr	r3, [pc, #212]	; (800cff0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a34      	ldr	r2, [pc, #208]	; (800cff0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800cf1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf24:	f7fd fdb6 	bl	800aa94 <HAL_GetTick>
 800cf28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cf2a:	e008      	b.n	800cf3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf2c:	f7fd fdb2 	bl	800aa94 <HAL_GetTick>
 800cf30:	4602      	mov	r2, r0
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	1ad3      	subs	r3, r2, r3
 800cf36:	2b64      	cmp	r3, #100	; 0x64
 800cf38:	d901      	bls.n	800cf3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cf3a:	2303      	movs	r3, #3
 800cf3c:	e2bc      	b.n	800d4b8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cf3e:	4b2c      	ldr	r3, [pc, #176]	; (800cff0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d0f0      	beq.n	800cf2c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cf4a:	4b28      	ldr	r3, [pc, #160]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d035      	beq.n	800cfc6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf62:	693a      	ldr	r2, [r7, #16]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d02e      	beq.n	800cfc6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cf68:	4b20      	ldr	r3, [pc, #128]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cf72:	4b1e      	ldr	r3, [pc, #120]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf76:	4a1d      	ldr	r2, [pc, #116]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cf7e:	4b1b      	ldr	r3, [pc, #108]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf82:	4a1a      	ldr	r2, [pc, #104]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800cf8a:	4a18      	ldr	r2, [pc, #96]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cf90:	4b16      	ldr	r3, [pc, #88]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf94:	f003 0301 	and.w	r3, r3, #1
 800cf98:	2b01      	cmp	r3, #1
 800cf9a:	d114      	bne.n	800cfc6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf9c:	f7fd fd7a 	bl	800aa94 <HAL_GetTick>
 800cfa0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cfa2:	e00a      	b.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cfa4:	f7fd fd76 	bl	800aa94 <HAL_GetTick>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	1ad3      	subs	r3, r2, r3
 800cfae:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d901      	bls.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800cfb6:	2303      	movs	r3, #3
 800cfb8:	e27e      	b.n	800d4b8 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cfba:	4b0c      	ldr	r3, [pc, #48]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cfbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfbe:	f003 0302 	and.w	r3, r3, #2
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d0ee      	beq.n	800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cfce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cfd2:	d111      	bne.n	800cff8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800cfd4:	4b05      	ldr	r3, [pc, #20]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cfd6:	689b      	ldr	r3, [r3, #8]
 800cfd8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800cfe0:	4b04      	ldr	r3, [pc, #16]	; (800cff4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800cfe2:	400b      	ands	r3, r1
 800cfe4:	4901      	ldr	r1, [pc, #4]	; (800cfec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	608b      	str	r3, [r1, #8]
 800cfea:	e00b      	b.n	800d004 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800cfec:	40023800 	.word	0x40023800
 800cff0:	40007000 	.word	0x40007000
 800cff4:	0ffffcff 	.word	0x0ffffcff
 800cff8:	4ba4      	ldr	r3, [pc, #656]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800cffa:	689b      	ldr	r3, [r3, #8]
 800cffc:	4aa3      	ldr	r2, [pc, #652]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800cffe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d002:	6093      	str	r3, [r2, #8]
 800d004:	4ba1      	ldr	r3, [pc, #644]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d006:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d00c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d010:	499e      	ldr	r1, [pc, #632]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d012:	4313      	orrs	r3, r2
 800d014:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f003 0310 	and.w	r3, r3, #16
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d010      	beq.n	800d044 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d022:	4b9a      	ldr	r3, [pc, #616]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d028:	4a98      	ldr	r2, [pc, #608]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d02a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d02e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800d032:	4b96      	ldr	r3, [pc, #600]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d034:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d03c:	4993      	ldr	r1, [pc, #588]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d03e:	4313      	orrs	r3, r2
 800d040:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d00a      	beq.n	800d066 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d050:	4b8e      	ldr	r3, [pc, #568]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d056:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d05e:	498b      	ldr	r1, [pc, #556]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d060:	4313      	orrs	r3, r2
 800d062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00a      	beq.n	800d088 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d072:	4b86      	ldr	r3, [pc, #536]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d078:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d080:	4982      	ldr	r1, [pc, #520]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d082:	4313      	orrs	r3, r2
 800d084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00a      	beq.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d094:	4b7d      	ldr	r3, [pc, #500]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d09a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0a2:	497a      	ldr	r1, [pc, #488]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d00a      	beq.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d0b6:	4b75      	ldr	r3, [pc, #468]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d0b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0bc:	f023 0203 	bic.w	r2, r3, #3
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0c4:	4971      	ldr	r1, [pc, #452]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d00a      	beq.n	800d0ee <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d0d8:	4b6c      	ldr	r3, [pc, #432]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d0da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0de:	f023 020c 	bic.w	r2, r3, #12
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0e6:	4969      	ldr	r1, [pc, #420]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d00a      	beq.n	800d110 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d0fa:	4b64      	ldr	r3, [pc, #400]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d0fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d100:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d108:	4960      	ldr	r1, [pc, #384]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d10a:	4313      	orrs	r3, r2
 800d10c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d00a      	beq.n	800d132 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d11c:	4b5b      	ldr	r3, [pc, #364]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d11e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d122:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d12a:	4958      	ldr	r1, [pc, #352]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d12c:	4313      	orrs	r3, r2
 800d12e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d00a      	beq.n	800d154 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d13e:	4b53      	ldr	r3, [pc, #332]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d144:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d14c:	494f      	ldr	r1, [pc, #316]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d14e:	4313      	orrs	r3, r2
 800d150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00a      	beq.n	800d176 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d160:	4b4a      	ldr	r3, [pc, #296]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d166:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d16e:	4947      	ldr	r1, [pc, #284]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d170:	4313      	orrs	r3, r2
 800d172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d00a      	beq.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d182:	4b42      	ldr	r3, [pc, #264]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d188:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d190:	493e      	ldr	r1, [pc, #248]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d192:	4313      	orrs	r3, r2
 800d194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d00a      	beq.n	800d1ba <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d1a4:	4b39      	ldr	r3, [pc, #228]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1b2:	4936      	ldr	r1, [pc, #216]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d011      	beq.n	800d1ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d1c6:	4b31      	ldr	r3, [pc, #196]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1d4:	492d      	ldr	r1, [pc, #180]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1d6:	4313      	orrs	r3, r2
 800d1d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d1e4:	d101      	bne.n	800d1ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d00a      	beq.n	800d20c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d1f6:	4b25      	ldr	r3, [pc, #148]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d204:	4921      	ldr	r1, [pc, #132]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d206:	4313      	orrs	r3, r2
 800d208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d214:	2b00      	cmp	r3, #0
 800d216:	d00a      	beq.n	800d22e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d218:	4b1c      	ldr	r3, [pc, #112]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d21a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d21e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d226:	4919      	ldr	r1, [pc, #100]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d228:	4313      	orrs	r3, r2
 800d22a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d236:	2b00      	cmp	r3, #0
 800d238:	d00a      	beq.n	800d250 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800d23a:	4b14      	ldr	r3, [pc, #80]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d23c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d240:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d248:	4910      	ldr	r1, [pc, #64]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d24a:	4313      	orrs	r3, r2
 800d24c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800d250:	69fb      	ldr	r3, [r7, #28]
 800d252:	2b01      	cmp	r3, #1
 800d254:	d006      	beq.n	800d264 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d25e:	2b00      	cmp	r3, #0
 800d260:	f000 809d 	beq.w	800d39e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d264:	4b09      	ldr	r3, [pc, #36]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4a08      	ldr	r2, [pc, #32]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d26a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d26e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d270:	f7fd fc10 	bl	800aa94 <HAL_GetTick>
 800d274:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d276:	e00b      	b.n	800d290 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d278:	f7fd fc0c 	bl	800aa94 <HAL_GetTick>
 800d27c:	4602      	mov	r2, r0
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	1ad3      	subs	r3, r2, r3
 800d282:	2b64      	cmp	r3, #100	; 0x64
 800d284:	d904      	bls.n	800d290 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d286:	2303      	movs	r3, #3
 800d288:	e116      	b.n	800d4b8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800d28a:	bf00      	nop
 800d28c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d290:	4b8b      	ldr	r3, [pc, #556]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d1ed      	bne.n	800d278 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f003 0301 	and.w	r3, r3, #1
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d017      	beq.n	800d2d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d113      	bne.n	800d2d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d2b0:	4b83      	ldr	r3, [pc, #524]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d2b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2b6:	0e1b      	lsrs	r3, r3, #24
 800d2b8:	f003 030f 	and.w	r3, r3, #15
 800d2bc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	685b      	ldr	r3, [r3, #4]
 800d2c2:	019a      	lsls	r2, r3, #6
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	061b      	lsls	r3, r3, #24
 800d2c8:	431a      	orrs	r2, r3
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	689b      	ldr	r3, [r3, #8]
 800d2ce:	071b      	lsls	r3, r3, #28
 800d2d0:	497b      	ldr	r1, [pc, #492]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d004      	beq.n	800d2ee <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2ec:	d00a      	beq.n	800d304 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d024      	beq.n	800d344 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d302:	d11f      	bne.n	800d344 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d304:	4b6e      	ldr	r3, [pc, #440]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d30a:	0f1b      	lsrs	r3, r3, #28
 800d30c:	f003 0307 	and.w	r3, r3, #7
 800d310:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	685b      	ldr	r3, [r3, #4]
 800d316:	019a      	lsls	r2, r3, #6
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	68db      	ldr	r3, [r3, #12]
 800d31c:	061b      	lsls	r3, r3, #24
 800d31e:	431a      	orrs	r2, r3
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	071b      	lsls	r3, r3, #28
 800d324:	4966      	ldr	r1, [pc, #408]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d326:	4313      	orrs	r3, r2
 800d328:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d32c:	4b64      	ldr	r3, [pc, #400]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d32e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d332:	f023 021f 	bic.w	r2, r3, #31
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	69db      	ldr	r3, [r3, #28]
 800d33a:	3b01      	subs	r3, #1
 800d33c:	4960      	ldr	r1, [pc, #384]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d33e:	4313      	orrs	r3, r2
 800d340:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00d      	beq.n	800d36c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	685b      	ldr	r3, [r3, #4]
 800d354:	019a      	lsls	r2, r3, #6
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	68db      	ldr	r3, [r3, #12]
 800d35a:	061b      	lsls	r3, r3, #24
 800d35c:	431a      	orrs	r2, r3
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	071b      	lsls	r3, r3, #28
 800d364:	4956      	ldr	r1, [pc, #344]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d366:	4313      	orrs	r3, r2
 800d368:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d36c:	4b54      	ldr	r3, [pc, #336]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4a53      	ldr	r2, [pc, #332]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d372:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d376:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d378:	f7fd fb8c 	bl	800aa94 <HAL_GetTick>
 800d37c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d37e:	e008      	b.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d380:	f7fd fb88 	bl	800aa94 <HAL_GetTick>
 800d384:	4602      	mov	r2, r0
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	1ad3      	subs	r3, r2, r3
 800d38a:	2b64      	cmp	r3, #100	; 0x64
 800d38c:	d901      	bls.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d38e:	2303      	movs	r3, #3
 800d390:	e092      	b.n	800d4b8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d392:	4b4b      	ldr	r3, [pc, #300]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d0f0      	beq.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d39e:	69bb      	ldr	r3, [r7, #24]
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	f040 8088 	bne.w	800d4b6 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d3a6:	4b46      	ldr	r3, [pc, #280]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4a45      	ldr	r2, [pc, #276]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d3ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d3b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3b2:	f7fd fb6f 	bl	800aa94 <HAL_GetTick>
 800d3b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d3b8:	e008      	b.n	800d3cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d3ba:	f7fd fb6b 	bl	800aa94 <HAL_GetTick>
 800d3be:	4602      	mov	r2, r0
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	1ad3      	subs	r3, r2, r3
 800d3c4:	2b64      	cmp	r3, #100	; 0x64
 800d3c6:	d901      	bls.n	800d3cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d3c8:	2303      	movs	r3, #3
 800d3ca:	e075      	b.n	800d4b8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d3cc:	4b3c      	ldr	r3, [pc, #240]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d3d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3d8:	d0ef      	beq.n	800d3ba <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d003      	beq.n	800d3ee <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d009      	beq.n	800d402 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d024      	beq.n	800d444 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d120      	bne.n	800d444 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d402:	4b2f      	ldr	r3, [pc, #188]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d408:	0c1b      	lsrs	r3, r3, #16
 800d40a:	f003 0303 	and.w	r3, r3, #3
 800d40e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	691b      	ldr	r3, [r3, #16]
 800d414:	019a      	lsls	r2, r3, #6
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	041b      	lsls	r3, r3, #16
 800d41a:	431a      	orrs	r2, r3
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	695b      	ldr	r3, [r3, #20]
 800d420:	061b      	lsls	r3, r3, #24
 800d422:	4927      	ldr	r1, [pc, #156]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d424:	4313      	orrs	r3, r2
 800d426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d42a:	4b25      	ldr	r3, [pc, #148]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d42c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d430:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6a1b      	ldr	r3, [r3, #32]
 800d438:	3b01      	subs	r3, #1
 800d43a:	021b      	lsls	r3, r3, #8
 800d43c:	4920      	ldr	r1, [pc, #128]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d43e:	4313      	orrs	r3, r2
 800d440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d018      	beq.n	800d482 <HAL_RCCEx_PeriphCLKConfig+0x652>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d454:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d458:	d113      	bne.n	800d482 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d45a:	4b19      	ldr	r3, [pc, #100]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d45c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d460:	0e1b      	lsrs	r3, r3, #24
 800d462:	f003 030f 	and.w	r3, r3, #15
 800d466:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	691b      	ldr	r3, [r3, #16]
 800d46c:	019a      	lsls	r2, r3, #6
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	699b      	ldr	r3, [r3, #24]
 800d472:	041b      	lsls	r3, r3, #16
 800d474:	431a      	orrs	r2, r3
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	061b      	lsls	r3, r3, #24
 800d47a:	4911      	ldr	r1, [pc, #68]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d47c:	4313      	orrs	r3, r2
 800d47e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d482:	4b0f      	ldr	r3, [pc, #60]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4a0e      	ldr	r2, [pc, #56]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d48c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d48e:	f7fd fb01 	bl	800aa94 <HAL_GetTick>
 800d492:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d494:	e008      	b.n	800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d496:	f7fd fafd 	bl	800aa94 <HAL_GetTick>
 800d49a:	4602      	mov	r2, r0
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	1ad3      	subs	r3, r2, r3
 800d4a0:	2b64      	cmp	r3, #100	; 0x64
 800d4a2:	d901      	bls.n	800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d4a4:	2303      	movs	r3, #3
 800d4a6:	e007      	b.n	800d4b8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d4a8:	4b05      	ldr	r3, [pc, #20]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d4b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d4b4:	d1ef      	bne.n	800d496 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800d4b6:	2300      	movs	r3, #0
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3720      	adds	r7, #32
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	40023800 	.word	0x40023800

0800d4c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b084      	sub	sp, #16
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d101      	bne.n	800d4d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	e09d      	b.n	800d612 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d108      	bne.n	800d4f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d4e6:	d009      	beq.n	800d4fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	61da      	str	r2, [r3, #28]
 800d4ee:	e005      	b.n	800d4fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2200      	movs	r2, #0
 800d500:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d508:	b2db      	uxtb	r3, r3
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d106      	bne.n	800d51c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2200      	movs	r2, #0
 800d512:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f7f9 f848 	bl	80065ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2202      	movs	r2, #2
 800d520:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	681a      	ldr	r2, [r3, #0]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d532:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d53c:	d902      	bls.n	800d544 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d53e:	2300      	movs	r3, #0
 800d540:	60fb      	str	r3, [r7, #12]
 800d542:	e002      	b.n	800d54a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d548:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d552:	d007      	beq.n	800d564 <HAL_SPI_Init+0xa0>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	68db      	ldr	r3, [r3, #12]
 800d558:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d55c:	d002      	beq.n	800d564 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2200      	movs	r2, #0
 800d562:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	689b      	ldr	r3, [r3, #8]
 800d570:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d574:	431a      	orrs	r2, r3
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	691b      	ldr	r3, [r3, #16]
 800d57a:	f003 0302 	and.w	r3, r3, #2
 800d57e:	431a      	orrs	r2, r3
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	695b      	ldr	r3, [r3, #20]
 800d584:	f003 0301 	and.w	r3, r3, #1
 800d588:	431a      	orrs	r2, r3
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	699b      	ldr	r3, [r3, #24]
 800d58e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d592:	431a      	orrs	r2, r3
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	69db      	ldr	r3, [r3, #28]
 800d598:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d59c:	431a      	orrs	r2, r3
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6a1b      	ldr	r3, [r3, #32]
 800d5a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5a6:	ea42 0103 	orr.w	r1, r2, r3
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	430a      	orrs	r2, r1
 800d5b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	699b      	ldr	r3, [r3, #24]
 800d5be:	0c1b      	lsrs	r3, r3, #16
 800d5c0:	f003 0204 	and.w	r2, r3, #4
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c8:	f003 0310 	and.w	r3, r3, #16
 800d5cc:	431a      	orrs	r2, r3
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d2:	f003 0308 	and.w	r3, r3, #8
 800d5d6:	431a      	orrs	r2, r3
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d5e0:	ea42 0103 	orr.w	r1, r2, r3
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	430a      	orrs	r2, r1
 800d5f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	69da      	ldr	r2, [r3, #28]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d600:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2200      	movs	r2, #0
 800d606:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2201      	movs	r2, #1
 800d60c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d610:	2300      	movs	r3, #0
}
 800d612:	4618      	mov	r0, r3
 800d614:	3710      	adds	r7, #16
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d61a:	b580      	push	{r7, lr}
 800d61c:	b088      	sub	sp, #32
 800d61e:	af00      	add	r7, sp, #0
 800d620:	60f8      	str	r0, [r7, #12]
 800d622:	60b9      	str	r1, [r7, #8]
 800d624:	603b      	str	r3, [r7, #0]
 800d626:	4613      	mov	r3, r2
 800d628:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d62a:	2300      	movs	r3, #0
 800d62c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d634:	2b01      	cmp	r3, #1
 800d636:	d101      	bne.n	800d63c <HAL_SPI_Transmit+0x22>
 800d638:	2302      	movs	r3, #2
 800d63a:	e158      	b.n	800d8ee <HAL_SPI_Transmit+0x2d4>
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2201      	movs	r2, #1
 800d640:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d644:	f7fd fa26 	bl	800aa94 <HAL_GetTick>
 800d648:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d64a:	88fb      	ldrh	r3, [r7, #6]
 800d64c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d654:	b2db      	uxtb	r3, r3
 800d656:	2b01      	cmp	r3, #1
 800d658:	d002      	beq.n	800d660 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d65a:	2302      	movs	r3, #2
 800d65c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d65e:	e13d      	b.n	800d8dc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d002      	beq.n	800d66c <HAL_SPI_Transmit+0x52>
 800d666:	88fb      	ldrh	r3, [r7, #6]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d102      	bne.n	800d672 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d66c:	2301      	movs	r3, #1
 800d66e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d670:	e134      	b.n	800d8dc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2203      	movs	r2, #3
 800d676:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2200      	movs	r2, #0
 800d67e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	68ba      	ldr	r2, [r7, #8]
 800d684:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	88fa      	ldrh	r2, [r7, #6]
 800d68a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	88fa      	ldrh	r2, [r7, #6]
 800d690:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2200      	movs	r2, #0
 800d696:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2200      	movs	r2, #0
 800d69c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	689b      	ldr	r3, [r3, #8]
 800d6b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d6bc:	d10f      	bne.n	800d6de <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	681a      	ldr	r2, [r3, #0]
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	681a      	ldr	r2, [r3, #0]
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d6dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6e8:	2b40      	cmp	r3, #64	; 0x40
 800d6ea:	d007      	beq.n	800d6fc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	681a      	ldr	r2, [r3, #0]
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d6fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	68db      	ldr	r3, [r3, #12]
 800d700:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d704:	d94b      	bls.n	800d79e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	685b      	ldr	r3, [r3, #4]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d002      	beq.n	800d714 <HAL_SPI_Transmit+0xfa>
 800d70e:	8afb      	ldrh	r3, [r7, #22]
 800d710:	2b01      	cmp	r3, #1
 800d712:	d13e      	bne.n	800d792 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d718:	881a      	ldrh	r2, [r3, #0]
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d724:	1c9a      	adds	r2, r3, #2
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d72e:	b29b      	uxth	r3, r3
 800d730:	3b01      	subs	r3, #1
 800d732:	b29a      	uxth	r2, r3
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d738:	e02b      	b.n	800d792 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	689b      	ldr	r3, [r3, #8]
 800d740:	f003 0302 	and.w	r3, r3, #2
 800d744:	2b02      	cmp	r3, #2
 800d746:	d112      	bne.n	800d76e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d74c:	881a      	ldrh	r2, [r3, #0]
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d758:	1c9a      	adds	r2, r3, #2
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d762:	b29b      	uxth	r3, r3
 800d764:	3b01      	subs	r3, #1
 800d766:	b29a      	uxth	r2, r3
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d76c:	e011      	b.n	800d792 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d76e:	f7fd f991 	bl	800aa94 <HAL_GetTick>
 800d772:	4602      	mov	r2, r0
 800d774:	69bb      	ldr	r3, [r7, #24]
 800d776:	1ad3      	subs	r3, r2, r3
 800d778:	683a      	ldr	r2, [r7, #0]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d803      	bhi.n	800d786 <HAL_SPI_Transmit+0x16c>
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d784:	d102      	bne.n	800d78c <HAL_SPI_Transmit+0x172>
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d102      	bne.n	800d792 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800d78c:	2303      	movs	r3, #3
 800d78e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d790:	e0a4      	b.n	800d8dc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d796:	b29b      	uxth	r3, r3
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d1ce      	bne.n	800d73a <HAL_SPI_Transmit+0x120>
 800d79c:	e07c      	b.n	800d898 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	685b      	ldr	r3, [r3, #4]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d002      	beq.n	800d7ac <HAL_SPI_Transmit+0x192>
 800d7a6:	8afb      	ldrh	r3, [r7, #22]
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d170      	bne.n	800d88e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	2b01      	cmp	r3, #1
 800d7b4:	d912      	bls.n	800d7dc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ba:	881a      	ldrh	r2, [r3, #0]
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c6:	1c9a      	adds	r2, r3, #2
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	3b02      	subs	r3, #2
 800d7d4:	b29a      	uxth	r2, r3
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d7da:	e058      	b.n	800d88e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	330c      	adds	r3, #12
 800d7e6:	7812      	ldrb	r2, [r2, #0]
 800d7e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ee:	1c5a      	adds	r2, r3, #1
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7f8:	b29b      	uxth	r3, r3
 800d7fa:	3b01      	subs	r3, #1
 800d7fc:	b29a      	uxth	r2, r3
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800d802:	e044      	b.n	800d88e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	689b      	ldr	r3, [r3, #8]
 800d80a:	f003 0302 	and.w	r3, r3, #2
 800d80e:	2b02      	cmp	r3, #2
 800d810:	d12b      	bne.n	800d86a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d816:	b29b      	uxth	r3, r3
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d912      	bls.n	800d842 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d820:	881a      	ldrh	r2, [r3, #0]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d82c:	1c9a      	adds	r2, r3, #2
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d836:	b29b      	uxth	r3, r3
 800d838:	3b02      	subs	r3, #2
 800d83a:	b29a      	uxth	r2, r3
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d840:	e025      	b.n	800d88e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	330c      	adds	r3, #12
 800d84c:	7812      	ldrb	r2, [r2, #0]
 800d84e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d854:	1c5a      	adds	r2, r3, #1
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d85e:	b29b      	uxth	r3, r3
 800d860:	3b01      	subs	r3, #1
 800d862:	b29a      	uxth	r2, r3
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d868:	e011      	b.n	800d88e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d86a:	f7fd f913 	bl	800aa94 <HAL_GetTick>
 800d86e:	4602      	mov	r2, r0
 800d870:	69bb      	ldr	r3, [r7, #24]
 800d872:	1ad3      	subs	r3, r2, r3
 800d874:	683a      	ldr	r2, [r7, #0]
 800d876:	429a      	cmp	r2, r3
 800d878:	d803      	bhi.n	800d882 <HAL_SPI_Transmit+0x268>
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d880:	d102      	bne.n	800d888 <HAL_SPI_Transmit+0x26e>
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d102      	bne.n	800d88e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800d888:	2303      	movs	r3, #3
 800d88a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d88c:	e026      	b.n	800d8dc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d892:	b29b      	uxth	r3, r3
 800d894:	2b00      	cmp	r3, #0
 800d896:	d1b5      	bne.n	800d804 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d898:	69ba      	ldr	r2, [r7, #24]
 800d89a:	6839      	ldr	r1, [r7, #0]
 800d89c:	68f8      	ldr	r0, [r7, #12]
 800d89e:	f000 fd07 	bl	800e2b0 <SPI_EndRxTxTransaction>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d002      	beq.n	800d8ae <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2220      	movs	r2, #32
 800d8ac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	689b      	ldr	r3, [r3, #8]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d10a      	bne.n	800d8cc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	613b      	str	r3, [r7, #16]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	68db      	ldr	r3, [r3, #12]
 800d8c0:	613b      	str	r3, [r7, #16]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	689b      	ldr	r3, [r3, #8]
 800d8c8:	613b      	str	r3, [r7, #16]
 800d8ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d002      	beq.n	800d8da <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	77fb      	strb	r3, [r7, #31]
 800d8d8:	e000      	b.n	800d8dc <HAL_SPI_Transmit+0x2c2>
  }

error:
 800d8da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d8ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3720      	adds	r7, #32
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}

0800d8f6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b088      	sub	sp, #32
 800d8fa:	af02      	add	r7, sp, #8
 800d8fc:	60f8      	str	r0, [r7, #12]
 800d8fe:	60b9      	str	r1, [r7, #8]
 800d900:	603b      	str	r3, [r7, #0]
 800d902:	4613      	mov	r3, r2
 800d904:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d906:	2300      	movs	r3, #0
 800d908:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d912:	d112      	bne.n	800d93a <HAL_SPI_Receive+0x44>
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	689b      	ldr	r3, [r3, #8]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d10e      	bne.n	800d93a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2204      	movs	r2, #4
 800d920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d924:	88fa      	ldrh	r2, [r7, #6]
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	9300      	str	r3, [sp, #0]
 800d92a:	4613      	mov	r3, r2
 800d92c:	68ba      	ldr	r2, [r7, #8]
 800d92e:	68b9      	ldr	r1, [r7, #8]
 800d930:	68f8      	ldr	r0, [r7, #12]
 800d932:	f000 f910 	bl	800db56 <HAL_SPI_TransmitReceive>
 800d936:	4603      	mov	r3, r0
 800d938:	e109      	b.n	800db4e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d940:	2b01      	cmp	r3, #1
 800d942:	d101      	bne.n	800d948 <HAL_SPI_Receive+0x52>
 800d944:	2302      	movs	r3, #2
 800d946:	e102      	b.n	800db4e <HAL_SPI_Receive+0x258>
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	2201      	movs	r2, #1
 800d94c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d950:	f7fd f8a0 	bl	800aa94 <HAL_GetTick>
 800d954:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	2b01      	cmp	r3, #1
 800d960:	d002      	beq.n	800d968 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800d962:	2302      	movs	r3, #2
 800d964:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d966:	e0e9      	b.n	800db3c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d002      	beq.n	800d974 <HAL_SPI_Receive+0x7e>
 800d96e:	88fb      	ldrh	r3, [r7, #6]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d102      	bne.n	800d97a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d974:	2301      	movs	r3, #1
 800d976:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d978:	e0e0      	b.n	800db3c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2204      	movs	r2, #4
 800d97e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	2200      	movs	r2, #0
 800d986:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	68ba      	ldr	r2, [r7, #8]
 800d98c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	88fa      	ldrh	r2, [r7, #6]
 800d992:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	88fa      	ldrh	r2, [r7, #6]
 800d99a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d9c4:	d908      	bls.n	800d9d8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	685a      	ldr	r2, [r3, #4]
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d9d4:	605a      	str	r2, [r3, #4]
 800d9d6:	e007      	b.n	800d9e8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	685a      	ldr	r2, [r3, #4]
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d9e6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	689b      	ldr	r3, [r3, #8]
 800d9ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9f0:	d10f      	bne.n	800da12 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	681a      	ldr	r2, [r3, #0]
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	681a      	ldr	r2, [r3, #0]
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800da10:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da1c:	2b40      	cmp	r3, #64	; 0x40
 800da1e:	d007      	beq.n	800da30 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da2e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	68db      	ldr	r3, [r3, #12]
 800da34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800da38:	d867      	bhi.n	800db0a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800da3a:	e030      	b.n	800da9e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	689b      	ldr	r3, [r3, #8]
 800da42:	f003 0301 	and.w	r3, r3, #1
 800da46:	2b01      	cmp	r3, #1
 800da48:	d117      	bne.n	800da7a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f103 020c 	add.w	r2, r3, #12
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da56:	7812      	ldrb	r2, [r2, #0]
 800da58:	b2d2      	uxtb	r2, r2
 800da5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da60:	1c5a      	adds	r2, r3, #1
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	3b01      	subs	r3, #1
 800da70:	b29a      	uxth	r2, r3
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800da78:	e011      	b.n	800da9e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da7a:	f7fd f80b 	bl	800aa94 <HAL_GetTick>
 800da7e:	4602      	mov	r2, r0
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	1ad3      	subs	r3, r2, r3
 800da84:	683a      	ldr	r2, [r7, #0]
 800da86:	429a      	cmp	r2, r3
 800da88:	d803      	bhi.n	800da92 <HAL_SPI_Receive+0x19c>
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da90:	d102      	bne.n	800da98 <HAL_SPI_Receive+0x1a2>
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d102      	bne.n	800da9e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800da98:	2303      	movs	r3, #3
 800da9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800da9c:	e04e      	b.n	800db3c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800daa4:	b29b      	uxth	r3, r3
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d1c8      	bne.n	800da3c <HAL_SPI_Receive+0x146>
 800daaa:	e034      	b.n	800db16 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	689b      	ldr	r3, [r3, #8]
 800dab2:	f003 0301 	and.w	r3, r3, #1
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d115      	bne.n	800dae6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	68da      	ldr	r2, [r3, #12]
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dac4:	b292      	uxth	r2, r2
 800dac6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dacc:	1c9a      	adds	r2, r3, #2
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dad8:	b29b      	uxth	r3, r3
 800dada:	3b01      	subs	r3, #1
 800dadc:	b29a      	uxth	r2, r3
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800dae4:	e011      	b.n	800db0a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dae6:	f7fc ffd5 	bl	800aa94 <HAL_GetTick>
 800daea:	4602      	mov	r2, r0
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	1ad3      	subs	r3, r2, r3
 800daf0:	683a      	ldr	r2, [r7, #0]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d803      	bhi.n	800dafe <HAL_SPI_Receive+0x208>
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dafc:	d102      	bne.n	800db04 <HAL_SPI_Receive+0x20e>
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d102      	bne.n	800db0a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800db04:	2303      	movs	r3, #3
 800db06:	75fb      	strb	r3, [r7, #23]
          goto error;
 800db08:	e018      	b.n	800db3c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800db10:	b29b      	uxth	r3, r3
 800db12:	2b00      	cmp	r3, #0
 800db14:	d1ca      	bne.n	800daac <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800db16:	693a      	ldr	r2, [r7, #16]
 800db18:	6839      	ldr	r1, [r7, #0]
 800db1a:	68f8      	ldr	r0, [r7, #12]
 800db1c:	f000 fb4c 	bl	800e1b8 <SPI_EndRxTransaction>
 800db20:	4603      	mov	r3, r0
 800db22:	2b00      	cmp	r3, #0
 800db24:	d002      	beq.n	800db2c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2220      	movs	r2, #32
 800db2a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db30:	2b00      	cmp	r3, #0
 800db32:	d002      	beq.n	800db3a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800db34:	2301      	movs	r3, #1
 800db36:	75fb      	strb	r3, [r7, #23]
 800db38:	e000      	b.n	800db3c <HAL_SPI_Receive+0x246>
  }

error :
 800db3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2201      	movs	r2, #1
 800db40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2200      	movs	r2, #0
 800db48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800db4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3718      	adds	r7, #24
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}

0800db56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800db56:	b580      	push	{r7, lr}
 800db58:	b08a      	sub	sp, #40	; 0x28
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	60f8      	str	r0, [r7, #12]
 800db5e:	60b9      	str	r1, [r7, #8]
 800db60:	607a      	str	r2, [r7, #4]
 800db62:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800db64:	2301      	movs	r3, #1
 800db66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800db68:	2300      	movs	r3, #0
 800db6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800db74:	2b01      	cmp	r3, #1
 800db76:	d101      	bne.n	800db7c <HAL_SPI_TransmitReceive+0x26>
 800db78:	2302      	movs	r3, #2
 800db7a:	e1fb      	b.n	800df74 <HAL_SPI_TransmitReceive+0x41e>
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2201      	movs	r2, #1
 800db80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db84:	f7fc ff86 	bl	800aa94 <HAL_GetTick>
 800db88:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800db90:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800db98:	887b      	ldrh	r3, [r7, #2]
 800db9a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800db9c:	887b      	ldrh	r3, [r7, #2]
 800db9e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dba0:	7efb      	ldrb	r3, [r7, #27]
 800dba2:	2b01      	cmp	r3, #1
 800dba4:	d00e      	beq.n	800dbc4 <HAL_SPI_TransmitReceive+0x6e>
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dbac:	d106      	bne.n	800dbbc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	689b      	ldr	r3, [r3, #8]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d102      	bne.n	800dbbc <HAL_SPI_TransmitReceive+0x66>
 800dbb6:	7efb      	ldrb	r3, [r7, #27]
 800dbb8:	2b04      	cmp	r3, #4
 800dbba:	d003      	beq.n	800dbc4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800dbbc:	2302      	movs	r3, #2
 800dbbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800dbc2:	e1cd      	b.n	800df60 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d005      	beq.n	800dbd6 <HAL_SPI_TransmitReceive+0x80>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d002      	beq.n	800dbd6 <HAL_SPI_TransmitReceive+0x80>
 800dbd0:	887b      	ldrh	r3, [r7, #2]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d103      	bne.n	800dbde <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800dbdc:	e1c0      	b.n	800df60 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	2b04      	cmp	r3, #4
 800dbe8:	d003      	beq.n	800dbf2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2205      	movs	r2, #5
 800dbee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	687a      	ldr	r2, [r7, #4]
 800dbfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	887a      	ldrh	r2, [r7, #2]
 800dc02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	887a      	ldrh	r2, [r7, #2]
 800dc0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	68ba      	ldr	r2, [r7, #8]
 800dc12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	887a      	ldrh	r2, [r7, #2]
 800dc18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	887a      	ldrh	r2, [r7, #2]
 800dc1e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2200      	movs	r2, #0
 800dc24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	68db      	ldr	r3, [r3, #12]
 800dc30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dc34:	d802      	bhi.n	800dc3c <HAL_SPI_TransmitReceive+0xe6>
 800dc36:	8a3b      	ldrh	r3, [r7, #16]
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d908      	bls.n	800dc4e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	685a      	ldr	r2, [r3, #4]
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dc4a:	605a      	str	r2, [r3, #4]
 800dc4c:	e007      	b.n	800dc5e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	685a      	ldr	r2, [r3, #4]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dc5c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc68:	2b40      	cmp	r3, #64	; 0x40
 800dc6a:	d007      	beq.n	800dc7c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	681a      	ldr	r2, [r3, #0]
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	68db      	ldr	r3, [r3, #12]
 800dc80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dc84:	d97c      	bls.n	800dd80 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d002      	beq.n	800dc94 <HAL_SPI_TransmitReceive+0x13e>
 800dc8e:	8a7b      	ldrh	r3, [r7, #18]
 800dc90:	2b01      	cmp	r3, #1
 800dc92:	d169      	bne.n	800dd68 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc98:	881a      	ldrh	r2, [r3, #0]
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dca4:	1c9a      	adds	r2, r3, #2
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	3b01      	subs	r3, #1
 800dcb2:	b29a      	uxth	r2, r3
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dcb8:	e056      	b.n	800dd68 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	689b      	ldr	r3, [r3, #8]
 800dcc0:	f003 0302 	and.w	r3, r3, #2
 800dcc4:	2b02      	cmp	r3, #2
 800dcc6:	d11b      	bne.n	800dd00 <HAL_SPI_TransmitReceive+0x1aa>
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dccc:	b29b      	uxth	r3, r3
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d016      	beq.n	800dd00 <HAL_SPI_TransmitReceive+0x1aa>
 800dcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	d113      	bne.n	800dd00 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcdc:	881a      	ldrh	r2, [r3, #0]
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dce8:	1c9a      	adds	r2, r3, #2
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	3b01      	subs	r3, #1
 800dcf6:	b29a      	uxth	r2, r3
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	689b      	ldr	r3, [r3, #8]
 800dd06:	f003 0301 	and.w	r3, r3, #1
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	d11c      	bne.n	800dd48 <HAL_SPI_TransmitReceive+0x1f2>
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd14:	b29b      	uxth	r3, r3
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d016      	beq.n	800dd48 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	68da      	ldr	r2, [r3, #12]
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd24:	b292      	uxth	r2, r2
 800dd26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd2c:	1c9a      	adds	r2, r3, #2
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd38:	b29b      	uxth	r3, r3
 800dd3a:	3b01      	subs	r3, #1
 800dd3c:	b29a      	uxth	r2, r3
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dd44:	2301      	movs	r3, #1
 800dd46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dd48:	f7fc fea4 	bl	800aa94 <HAL_GetTick>
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	1ad3      	subs	r3, r2, r3
 800dd52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d807      	bhi.n	800dd68 <HAL_SPI_TransmitReceive+0x212>
 800dd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd5e:	d003      	beq.n	800dd68 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800dd60:	2303      	movs	r3, #3
 800dd62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800dd66:	e0fb      	b.n	800df60 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd6c:	b29b      	uxth	r3, r3
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d1a3      	bne.n	800dcba <HAL_SPI_TransmitReceive+0x164>
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d19d      	bne.n	800dcba <HAL_SPI_TransmitReceive+0x164>
 800dd7e:	e0df      	b.n	800df40 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	685b      	ldr	r3, [r3, #4]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d003      	beq.n	800dd90 <HAL_SPI_TransmitReceive+0x23a>
 800dd88:	8a7b      	ldrh	r3, [r7, #18]
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	f040 80cb 	bne.w	800df26 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd94:	b29b      	uxth	r3, r3
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d912      	bls.n	800ddc0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd9e:	881a      	ldrh	r2, [r3, #0]
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddaa:	1c9a      	adds	r2, r3, #2
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	3b02      	subs	r3, #2
 800ddb8:	b29a      	uxth	r2, r3
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ddbe:	e0b2      	b.n	800df26 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	330c      	adds	r3, #12
 800ddca:	7812      	ldrb	r2, [r2, #0]
 800ddcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddd2:	1c5a      	adds	r2, r3, #1
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	3b01      	subs	r3, #1
 800dde0:	b29a      	uxth	r2, r3
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dde6:	e09e      	b.n	800df26 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	689b      	ldr	r3, [r3, #8]
 800ddee:	f003 0302 	and.w	r3, r3, #2
 800ddf2:	2b02      	cmp	r3, #2
 800ddf4:	d134      	bne.n	800de60 <HAL_SPI_TransmitReceive+0x30a>
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d02f      	beq.n	800de60 <HAL_SPI_TransmitReceive+0x30a>
 800de00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de02:	2b01      	cmp	r3, #1
 800de04:	d12c      	bne.n	800de60 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d912      	bls.n	800de36 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de14:	881a      	ldrh	r2, [r3, #0]
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de20:	1c9a      	adds	r2, r3, #2
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de2a:	b29b      	uxth	r3, r3
 800de2c:	3b02      	subs	r3, #2
 800de2e:	b29a      	uxth	r2, r3
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	87da      	strh	r2, [r3, #62]	; 0x3e
 800de34:	e012      	b.n	800de5c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	330c      	adds	r3, #12
 800de40:	7812      	ldrb	r2, [r2, #0]
 800de42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de48:	1c5a      	adds	r2, r3, #1
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de52:	b29b      	uxth	r3, r3
 800de54:	3b01      	subs	r3, #1
 800de56:	b29a      	uxth	r2, r3
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800de5c:	2300      	movs	r3, #0
 800de5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	689b      	ldr	r3, [r3, #8]
 800de66:	f003 0301 	and.w	r3, r3, #1
 800de6a:	2b01      	cmp	r3, #1
 800de6c:	d148      	bne.n	800df00 <HAL_SPI_TransmitReceive+0x3aa>
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800de74:	b29b      	uxth	r3, r3
 800de76:	2b00      	cmp	r3, #0
 800de78:	d042      	beq.n	800df00 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800de80:	b29b      	uxth	r3, r3
 800de82:	2b01      	cmp	r3, #1
 800de84:	d923      	bls.n	800dece <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	68da      	ldr	r2, [r3, #12]
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de90:	b292      	uxth	r2, r2
 800de92:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de98:	1c9a      	adds	r2, r3, #2
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	3b02      	subs	r3, #2
 800dea8:	b29a      	uxth	r2, r3
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	2b01      	cmp	r3, #1
 800deba:	d81f      	bhi.n	800defc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	685a      	ldr	r2, [r3, #4]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800deca:	605a      	str	r2, [r3, #4]
 800decc:	e016      	b.n	800defc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	f103 020c 	add.w	r2, r3, #12
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deda:	7812      	ldrb	r2, [r2, #0]
 800dedc:	b2d2      	uxtb	r2, r2
 800dede:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dee4:	1c5a      	adds	r2, r3, #1
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800def0:	b29b      	uxth	r3, r3
 800def2:	3b01      	subs	r3, #1
 800def4:	b29a      	uxth	r2, r3
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800defc:	2301      	movs	r3, #1
 800defe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800df00:	f7fc fdc8 	bl	800aa94 <HAL_GetTick>
 800df04:	4602      	mov	r2, r0
 800df06:	69fb      	ldr	r3, [r7, #28]
 800df08:	1ad3      	subs	r3, r2, r3
 800df0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d803      	bhi.n	800df18 <HAL_SPI_TransmitReceive+0x3c2>
 800df10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df16:	d102      	bne.n	800df1e <HAL_SPI_TransmitReceive+0x3c8>
 800df18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d103      	bne.n	800df26 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800df1e:	2303      	movs	r3, #3
 800df20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800df24:	e01c      	b.n	800df60 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df2a:	b29b      	uxth	r3, r3
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	f47f af5b 	bne.w	800dde8 <HAL_SPI_TransmitReceive+0x292>
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800df38:	b29b      	uxth	r3, r3
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	f47f af54 	bne.w	800dde8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800df40:	69fa      	ldr	r2, [r7, #28]
 800df42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	f000 f9b3 	bl	800e2b0 <SPI_EndRxTxTransaction>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d006      	beq.n	800df5e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800df50:	2301      	movs	r3, #1
 800df52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	2220      	movs	r2, #32
 800df5a:	661a      	str	r2, [r3, #96]	; 0x60
 800df5c:	e000      	b.n	800df60 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800df5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	2201      	movs	r2, #1
 800df64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	2200      	movs	r2, #0
 800df6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800df70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800df74:	4618      	mov	r0, r3
 800df76:	3728      	adds	r7, #40	; 0x28
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b088      	sub	sp, #32
 800df80:	af00      	add	r7, sp, #0
 800df82:	60f8      	str	r0, [r7, #12]
 800df84:	60b9      	str	r1, [r7, #8]
 800df86:	603b      	str	r3, [r7, #0]
 800df88:	4613      	mov	r3, r2
 800df8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800df8c:	f7fc fd82 	bl	800aa94 <HAL_GetTick>
 800df90:	4602      	mov	r2, r0
 800df92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df94:	1a9b      	subs	r3, r3, r2
 800df96:	683a      	ldr	r2, [r7, #0]
 800df98:	4413      	add	r3, r2
 800df9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800df9c:	f7fc fd7a 	bl	800aa94 <HAL_GetTick>
 800dfa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800dfa2:	4b39      	ldr	r3, [pc, #228]	; (800e088 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	015b      	lsls	r3, r3, #5
 800dfa8:	0d1b      	lsrs	r3, r3, #20
 800dfaa:	69fa      	ldr	r2, [r7, #28]
 800dfac:	fb02 f303 	mul.w	r3, r2, r3
 800dfb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dfb2:	e054      	b.n	800e05e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfba:	d050      	beq.n	800e05e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dfbc:	f7fc fd6a 	bl	800aa94 <HAL_GetTick>
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	69bb      	ldr	r3, [r7, #24]
 800dfc4:	1ad3      	subs	r3, r2, r3
 800dfc6:	69fa      	ldr	r2, [r7, #28]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d902      	bls.n	800dfd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d13d      	bne.n	800e04e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	685a      	ldr	r2, [r3, #4]
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dfe0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dfea:	d111      	bne.n	800e010 <SPI_WaitFlagStateUntilTimeout+0x94>
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	689b      	ldr	r3, [r3, #8]
 800dff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dff4:	d004      	beq.n	800e000 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	689b      	ldr	r3, [r3, #8]
 800dffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dffe:	d107      	bne.n	800e010 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e00e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e018:	d10f      	bne.n	800e03a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	681a      	ldr	r2, [r3, #0]
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e028:	601a      	str	r2, [r3, #0]
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	681a      	ldr	r2, [r3, #0]
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e038:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2201      	movs	r2, #1
 800e03e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	2200      	movs	r2, #0
 800e046:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e04a:	2303      	movs	r3, #3
 800e04c:	e017      	b.n	800e07e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d101      	bne.n	800e058 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e054:	2300      	movs	r3, #0
 800e056:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	3b01      	subs	r3, #1
 800e05c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	689a      	ldr	r2, [r3, #8]
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	4013      	ands	r3, r2
 800e068:	68ba      	ldr	r2, [r7, #8]
 800e06a:	429a      	cmp	r2, r3
 800e06c:	bf0c      	ite	eq
 800e06e:	2301      	moveq	r3, #1
 800e070:	2300      	movne	r3, #0
 800e072:	b2db      	uxtb	r3, r3
 800e074:	461a      	mov	r2, r3
 800e076:	79fb      	ldrb	r3, [r7, #7]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d19b      	bne.n	800dfb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e07c:	2300      	movs	r3, #0
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3720      	adds	r7, #32
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	20000008 	.word	0x20000008

0800e08c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b08a      	sub	sp, #40	; 0x28
 800e090:	af00      	add	r7, sp, #0
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	607a      	str	r2, [r7, #4]
 800e098:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e09a:	2300      	movs	r3, #0
 800e09c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e09e:	f7fc fcf9 	bl	800aa94 <HAL_GetTick>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a6:	1a9b      	subs	r3, r3, r2
 800e0a8:	683a      	ldr	r2, [r7, #0]
 800e0aa:	4413      	add	r3, r2
 800e0ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800e0ae:	f7fc fcf1 	bl	800aa94 <HAL_GetTick>
 800e0b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	330c      	adds	r3, #12
 800e0ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e0bc:	4b3d      	ldr	r3, [pc, #244]	; (800e1b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800e0be:	681a      	ldr	r2, [r3, #0]
 800e0c0:	4613      	mov	r3, r2
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	4413      	add	r3, r2
 800e0c6:	00da      	lsls	r2, r3, #3
 800e0c8:	1ad3      	subs	r3, r2, r3
 800e0ca:	0d1b      	lsrs	r3, r3, #20
 800e0cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0ce:	fb02 f303 	mul.w	r3, r2, r3
 800e0d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800e0d4:	e060      	b.n	800e198 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e0dc:	d107      	bne.n	800e0ee <SPI_WaitFifoStateUntilTimeout+0x62>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d104      	bne.n	800e0ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e0e4:	69fb      	ldr	r3, [r7, #28]
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	b2db      	uxtb	r3, r3
 800e0ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e0ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0f4:	d050      	beq.n	800e198 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e0f6:	f7fc fccd 	bl	800aa94 <HAL_GetTick>
 800e0fa:	4602      	mov	r2, r0
 800e0fc:	6a3b      	ldr	r3, [r7, #32]
 800e0fe:	1ad3      	subs	r3, r2, r3
 800e100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e102:	429a      	cmp	r2, r3
 800e104:	d902      	bls.n	800e10c <SPI_WaitFifoStateUntilTimeout+0x80>
 800e106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d13d      	bne.n	800e188 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	685a      	ldr	r2, [r3, #4]
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e11a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	685b      	ldr	r3, [r3, #4]
 800e120:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e124:	d111      	bne.n	800e14a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	689b      	ldr	r3, [r3, #8]
 800e12a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e12e:	d004      	beq.n	800e13a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	689b      	ldr	r3, [r3, #8]
 800e134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e138:	d107      	bne.n	800e14a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e148:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e14e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e152:	d10f      	bne.n	800e174 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	681a      	ldr	r2, [r3, #0]
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e162:	601a      	str	r2, [r3, #0]
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	681a      	ldr	r2, [r3, #0]
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e172:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2201      	movs	r2, #1
 800e178:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2200      	movs	r2, #0
 800e180:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e184:	2303      	movs	r3, #3
 800e186:	e010      	b.n	800e1aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e188:	69bb      	ldr	r3, [r7, #24]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d101      	bne.n	800e192 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800e18e:	2300      	movs	r3, #0
 800e190:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800e192:	69bb      	ldr	r3, [r7, #24]
 800e194:	3b01      	subs	r3, #1
 800e196:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	689a      	ldr	r2, [r3, #8]
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	4013      	ands	r3, r2
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d196      	bne.n	800e0d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800e1a8:	2300      	movs	r3, #0
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3728      	adds	r7, #40	; 0x28
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	20000008 	.word	0x20000008

0800e1b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b088      	sub	sp, #32
 800e1bc:	af02      	add	r7, sp, #8
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	60b9      	str	r1, [r7, #8]
 800e1c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	685b      	ldr	r3, [r3, #4]
 800e1c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e1cc:	d111      	bne.n	800e1f2 <SPI_EndRxTransaction+0x3a>
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	689b      	ldr	r3, [r3, #8]
 800e1d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1d6:	d004      	beq.n	800e1e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	689b      	ldr	r3, [r3, #8]
 800e1dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1e0:	d107      	bne.n	800e1f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1f0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e1fa:	d112      	bne.n	800e222 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	9300      	str	r3, [sp, #0]
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	2200      	movs	r2, #0
 800e204:	2180      	movs	r1, #128	; 0x80
 800e206:	68f8      	ldr	r0, [r7, #12]
 800e208:	f7ff feb8 	bl	800df7c <SPI_WaitFlagStateUntilTimeout>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d021      	beq.n	800e256 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e216:	f043 0220 	orr.w	r2, r3, #32
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800e21e:	2303      	movs	r3, #3
 800e220:	e03d      	b.n	800e29e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e222:	4b21      	ldr	r3, [pc, #132]	; (800e2a8 <SPI_EndRxTransaction+0xf0>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	4a21      	ldr	r2, [pc, #132]	; (800e2ac <SPI_EndRxTransaction+0xf4>)
 800e228:	fba2 2303 	umull	r2, r3, r2, r3
 800e22c:	0d5b      	lsrs	r3, r3, #21
 800e22e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e232:	fb02 f303 	mul.w	r3, r2, r3
 800e236:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d00a      	beq.n	800e254 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	3b01      	subs	r3, #1
 800e242:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	689b      	ldr	r3, [r3, #8]
 800e24a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e24e:	2b80      	cmp	r3, #128	; 0x80
 800e250:	d0f2      	beq.n	800e238 <SPI_EndRxTransaction+0x80>
 800e252:	e000      	b.n	800e256 <SPI_EndRxTransaction+0x9e>
        break;
 800e254:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e25e:	d11d      	bne.n	800e29c <SPI_EndRxTransaction+0xe4>
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	689b      	ldr	r3, [r3, #8]
 800e264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e268:	d004      	beq.n	800e274 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	689b      	ldr	r3, [r3, #8]
 800e26e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e272:	d113      	bne.n	800e29c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	9300      	str	r3, [sp, #0]
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	2200      	movs	r2, #0
 800e27c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e280:	68f8      	ldr	r0, [r7, #12]
 800e282:	f7ff ff03 	bl	800e08c <SPI_WaitFifoStateUntilTimeout>
 800e286:	4603      	mov	r3, r0
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d007      	beq.n	800e29c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e290:	f043 0220 	orr.w	r2, r3, #32
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800e298:	2303      	movs	r3, #3
 800e29a:	e000      	b.n	800e29e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800e29c:	2300      	movs	r3, #0
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3718      	adds	r7, #24
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop
 800e2a8:	20000008 	.word	0x20000008
 800e2ac:	165e9f81 	.word	0x165e9f81

0800e2b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b088      	sub	sp, #32
 800e2b4:	af02      	add	r7, sp, #8
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	9300      	str	r3, [sp, #0]
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e2c8:	68f8      	ldr	r0, [r7, #12]
 800e2ca:	f7ff fedf 	bl	800e08c <SPI_WaitFifoStateUntilTimeout>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d007      	beq.n	800e2e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e2d8:	f043 0220 	orr.w	r2, r3, #32
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e2e0:	2303      	movs	r3, #3
 800e2e2:	e046      	b.n	800e372 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e2e4:	4b25      	ldr	r3, [pc, #148]	; (800e37c <SPI_EndRxTxTransaction+0xcc>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	4a25      	ldr	r2, [pc, #148]	; (800e380 <SPI_EndRxTxTransaction+0xd0>)
 800e2ea:	fba2 2303 	umull	r2, r3, r2, r3
 800e2ee:	0d5b      	lsrs	r3, r3, #21
 800e2f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e2f4:	fb02 f303 	mul.w	r3, r2, r3
 800e2f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e302:	d112      	bne.n	800e32a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	9300      	str	r3, [sp, #0]
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	2200      	movs	r2, #0
 800e30c:	2180      	movs	r1, #128	; 0x80
 800e30e:	68f8      	ldr	r0, [r7, #12]
 800e310:	f7ff fe34 	bl	800df7c <SPI_WaitFlagStateUntilTimeout>
 800e314:	4603      	mov	r3, r0
 800e316:	2b00      	cmp	r3, #0
 800e318:	d016      	beq.n	800e348 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e31e:	f043 0220 	orr.w	r2, r3, #32
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800e326:	2303      	movs	r3, #3
 800e328:	e023      	b.n	800e372 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d00a      	beq.n	800e346 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	3b01      	subs	r3, #1
 800e334:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	689b      	ldr	r3, [r3, #8]
 800e33c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e340:	2b80      	cmp	r3, #128	; 0x80
 800e342:	d0f2      	beq.n	800e32a <SPI_EndRxTxTransaction+0x7a>
 800e344:	e000      	b.n	800e348 <SPI_EndRxTxTransaction+0x98>
        break;
 800e346:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	9300      	str	r3, [sp, #0]
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	2200      	movs	r2, #0
 800e350:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e354:	68f8      	ldr	r0, [r7, #12]
 800e356:	f7ff fe99 	bl	800e08c <SPI_WaitFifoStateUntilTimeout>
 800e35a:	4603      	mov	r3, r0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d007      	beq.n	800e370 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e364:	f043 0220 	orr.w	r2, r3, #32
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e36c:	2303      	movs	r3, #3
 800e36e:	e000      	b.n	800e372 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800e370:	2300      	movs	r3, #0
}
 800e372:	4618      	mov	r0, r3
 800e374:	3718      	adds	r7, #24
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}
 800e37a:	bf00      	nop
 800e37c:	20000008 	.word	0x20000008
 800e380:	165e9f81 	.word	0x165e9f81

0800e384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d101      	bne.n	800e396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e392:	2301      	movs	r3, #1
 800e394:	e049      	b.n	800e42a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e39c:	b2db      	uxtb	r3, r3
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d106      	bne.n	800e3b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f7f8 f974 	bl	8006698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2202      	movs	r2, #2
 800e3b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681a      	ldr	r2, [r3, #0]
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	3304      	adds	r3, #4
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	4610      	mov	r0, r2
 800e3c4:	f000 ffae 	bl	800f324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2201      	movs	r2, #1
 800e3d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2201      	movs	r2, #1
 800e404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2201      	movs	r2, #1
 800e40c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2201      	movs	r2, #1
 800e414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2201      	movs	r2, #1
 800e41c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2201      	movs	r2, #1
 800e424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e428:	2300      	movs	r3, #0
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3708      	adds	r7, #8
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
	...

0800e434 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e434:	b480      	push	{r7}
 800e436:	b085      	sub	sp, #20
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e442:	b2db      	uxtb	r3, r3
 800e444:	2b01      	cmp	r3, #1
 800e446:	d001      	beq.n	800e44c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e448:	2301      	movs	r3, #1
 800e44a:	e054      	b.n	800e4f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2202      	movs	r2, #2
 800e450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	68da      	ldr	r2, [r3, #12]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	f042 0201 	orr.w	r2, r2, #1
 800e462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	4a26      	ldr	r2, [pc, #152]	; (800e504 <HAL_TIM_Base_Start_IT+0xd0>)
 800e46a:	4293      	cmp	r3, r2
 800e46c:	d022      	beq.n	800e4b4 <HAL_TIM_Base_Start_IT+0x80>
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e476:	d01d      	beq.n	800e4b4 <HAL_TIM_Base_Start_IT+0x80>
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	4a22      	ldr	r2, [pc, #136]	; (800e508 <HAL_TIM_Base_Start_IT+0xd4>)
 800e47e:	4293      	cmp	r3, r2
 800e480:	d018      	beq.n	800e4b4 <HAL_TIM_Base_Start_IT+0x80>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	4a21      	ldr	r2, [pc, #132]	; (800e50c <HAL_TIM_Base_Start_IT+0xd8>)
 800e488:	4293      	cmp	r3, r2
 800e48a:	d013      	beq.n	800e4b4 <HAL_TIM_Base_Start_IT+0x80>
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	4a1f      	ldr	r2, [pc, #124]	; (800e510 <HAL_TIM_Base_Start_IT+0xdc>)
 800e492:	4293      	cmp	r3, r2
 800e494:	d00e      	beq.n	800e4b4 <HAL_TIM_Base_Start_IT+0x80>
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	4a1e      	ldr	r2, [pc, #120]	; (800e514 <HAL_TIM_Base_Start_IT+0xe0>)
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d009      	beq.n	800e4b4 <HAL_TIM_Base_Start_IT+0x80>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	4a1c      	ldr	r2, [pc, #112]	; (800e518 <HAL_TIM_Base_Start_IT+0xe4>)
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	d004      	beq.n	800e4b4 <HAL_TIM_Base_Start_IT+0x80>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	4a1b      	ldr	r2, [pc, #108]	; (800e51c <HAL_TIM_Base_Start_IT+0xe8>)
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d115      	bne.n	800e4e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	689a      	ldr	r2, [r3, #8]
 800e4ba:	4b19      	ldr	r3, [pc, #100]	; (800e520 <HAL_TIM_Base_Start_IT+0xec>)
 800e4bc:	4013      	ands	r3, r2
 800e4be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2b06      	cmp	r3, #6
 800e4c4:	d015      	beq.n	800e4f2 <HAL_TIM_Base_Start_IT+0xbe>
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4cc:	d011      	beq.n	800e4f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	681a      	ldr	r2, [r3, #0]
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f042 0201 	orr.w	r2, r2, #1
 800e4dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4de:	e008      	b.n	800e4f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	681a      	ldr	r2, [r3, #0]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	f042 0201 	orr.w	r2, r2, #1
 800e4ee:	601a      	str	r2, [r3, #0]
 800e4f0:	e000      	b.n	800e4f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e4f4:	2300      	movs	r3, #0
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3714      	adds	r7, #20
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e500:	4770      	bx	lr
 800e502:	bf00      	nop
 800e504:	40010000 	.word	0x40010000
 800e508:	40000400 	.word	0x40000400
 800e50c:	40000800 	.word	0x40000800
 800e510:	40000c00 	.word	0x40000c00
 800e514:	40010400 	.word	0x40010400
 800e518:	40014000 	.word	0x40014000
 800e51c:	40001800 	.word	0x40001800
 800e520:	00010007 	.word	0x00010007

0800e524 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d101      	bne.n	800e536 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e532:	2301      	movs	r3, #1
 800e534:	e049      	b.n	800e5ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d106      	bne.n	800e550 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2200      	movs	r2, #0
 800e546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f000 f841 	bl	800e5d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2202      	movs	r2, #2
 800e554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	3304      	adds	r3, #4
 800e560:	4619      	mov	r1, r3
 800e562:	4610      	mov	r0, r2
 800e564:	f000 fede 	bl	800f324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2201      	movs	r2, #1
 800e56c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2201      	movs	r2, #1
 800e574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2201      	movs	r2, #1
 800e57c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2201      	movs	r2, #1
 800e584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2201      	movs	r2, #1
 800e58c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2201      	movs	r2, #1
 800e594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2201      	movs	r2, #1
 800e59c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e5c8:	2300      	movs	r3, #0
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3708      	adds	r7, #8
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}

0800e5d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e5d2:	b480      	push	{r7}
 800e5d4:	b083      	sub	sp, #12
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e5da:	bf00      	nop
 800e5dc:	370c      	adds	r7, #12
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e4:	4770      	bx	lr
	...

0800e5e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b084      	sub	sp, #16
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d109      	bne.n	800e60c <HAL_TIM_PWM_Start+0x24>
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	2b01      	cmp	r3, #1
 800e602:	bf14      	ite	ne
 800e604:	2301      	movne	r3, #1
 800e606:	2300      	moveq	r3, #0
 800e608:	b2db      	uxtb	r3, r3
 800e60a:	e03c      	b.n	800e686 <HAL_TIM_PWM_Start+0x9e>
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	2b04      	cmp	r3, #4
 800e610:	d109      	bne.n	800e626 <HAL_TIM_PWM_Start+0x3e>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e618:	b2db      	uxtb	r3, r3
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	bf14      	ite	ne
 800e61e:	2301      	movne	r3, #1
 800e620:	2300      	moveq	r3, #0
 800e622:	b2db      	uxtb	r3, r3
 800e624:	e02f      	b.n	800e686 <HAL_TIM_PWM_Start+0x9e>
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	2b08      	cmp	r3, #8
 800e62a:	d109      	bne.n	800e640 <HAL_TIM_PWM_Start+0x58>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e632:	b2db      	uxtb	r3, r3
 800e634:	2b01      	cmp	r3, #1
 800e636:	bf14      	ite	ne
 800e638:	2301      	movne	r3, #1
 800e63a:	2300      	moveq	r3, #0
 800e63c:	b2db      	uxtb	r3, r3
 800e63e:	e022      	b.n	800e686 <HAL_TIM_PWM_Start+0x9e>
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	2b0c      	cmp	r3, #12
 800e644:	d109      	bne.n	800e65a <HAL_TIM_PWM_Start+0x72>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e64c:	b2db      	uxtb	r3, r3
 800e64e:	2b01      	cmp	r3, #1
 800e650:	bf14      	ite	ne
 800e652:	2301      	movne	r3, #1
 800e654:	2300      	moveq	r3, #0
 800e656:	b2db      	uxtb	r3, r3
 800e658:	e015      	b.n	800e686 <HAL_TIM_PWM_Start+0x9e>
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	2b10      	cmp	r3, #16
 800e65e:	d109      	bne.n	800e674 <HAL_TIM_PWM_Start+0x8c>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e666:	b2db      	uxtb	r3, r3
 800e668:	2b01      	cmp	r3, #1
 800e66a:	bf14      	ite	ne
 800e66c:	2301      	movne	r3, #1
 800e66e:	2300      	moveq	r3, #0
 800e670:	b2db      	uxtb	r3, r3
 800e672:	e008      	b.n	800e686 <HAL_TIM_PWM_Start+0x9e>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e67a:	b2db      	uxtb	r3, r3
 800e67c:	2b01      	cmp	r3, #1
 800e67e:	bf14      	ite	ne
 800e680:	2301      	movne	r3, #1
 800e682:	2300      	moveq	r3, #0
 800e684:	b2db      	uxtb	r3, r3
 800e686:	2b00      	cmp	r3, #0
 800e688:	d001      	beq.n	800e68e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e68a:	2301      	movs	r3, #1
 800e68c:	e092      	b.n	800e7b4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d104      	bne.n	800e69e <HAL_TIM_PWM_Start+0xb6>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2202      	movs	r2, #2
 800e698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e69c:	e023      	b.n	800e6e6 <HAL_TIM_PWM_Start+0xfe>
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	2b04      	cmp	r3, #4
 800e6a2:	d104      	bne.n	800e6ae <HAL_TIM_PWM_Start+0xc6>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2202      	movs	r2, #2
 800e6a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e6ac:	e01b      	b.n	800e6e6 <HAL_TIM_PWM_Start+0xfe>
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	2b08      	cmp	r3, #8
 800e6b2:	d104      	bne.n	800e6be <HAL_TIM_PWM_Start+0xd6>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2202      	movs	r2, #2
 800e6b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e6bc:	e013      	b.n	800e6e6 <HAL_TIM_PWM_Start+0xfe>
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	2b0c      	cmp	r3, #12
 800e6c2:	d104      	bne.n	800e6ce <HAL_TIM_PWM_Start+0xe6>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2202      	movs	r2, #2
 800e6c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e6cc:	e00b      	b.n	800e6e6 <HAL_TIM_PWM_Start+0xfe>
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	2b10      	cmp	r3, #16
 800e6d2:	d104      	bne.n	800e6de <HAL_TIM_PWM_Start+0xf6>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2202      	movs	r2, #2
 800e6d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e6dc:	e003      	b.n	800e6e6 <HAL_TIM_PWM_Start+0xfe>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2202      	movs	r2, #2
 800e6e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	6839      	ldr	r1, [r7, #0]
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f001 fada 	bl	800fca8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4a30      	ldr	r2, [pc, #192]	; (800e7bc <HAL_TIM_PWM_Start+0x1d4>)
 800e6fa:	4293      	cmp	r3, r2
 800e6fc:	d004      	beq.n	800e708 <HAL_TIM_PWM_Start+0x120>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	4a2f      	ldr	r2, [pc, #188]	; (800e7c0 <HAL_TIM_PWM_Start+0x1d8>)
 800e704:	4293      	cmp	r3, r2
 800e706:	d101      	bne.n	800e70c <HAL_TIM_PWM_Start+0x124>
 800e708:	2301      	movs	r3, #1
 800e70a:	e000      	b.n	800e70e <HAL_TIM_PWM_Start+0x126>
 800e70c:	2300      	movs	r3, #0
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d007      	beq.n	800e722 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e720:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	4a25      	ldr	r2, [pc, #148]	; (800e7bc <HAL_TIM_PWM_Start+0x1d4>)
 800e728:	4293      	cmp	r3, r2
 800e72a:	d022      	beq.n	800e772 <HAL_TIM_PWM_Start+0x18a>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e734:	d01d      	beq.n	800e772 <HAL_TIM_PWM_Start+0x18a>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	4a22      	ldr	r2, [pc, #136]	; (800e7c4 <HAL_TIM_PWM_Start+0x1dc>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d018      	beq.n	800e772 <HAL_TIM_PWM_Start+0x18a>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	4a20      	ldr	r2, [pc, #128]	; (800e7c8 <HAL_TIM_PWM_Start+0x1e0>)
 800e746:	4293      	cmp	r3, r2
 800e748:	d013      	beq.n	800e772 <HAL_TIM_PWM_Start+0x18a>
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	4a1f      	ldr	r2, [pc, #124]	; (800e7cc <HAL_TIM_PWM_Start+0x1e4>)
 800e750:	4293      	cmp	r3, r2
 800e752:	d00e      	beq.n	800e772 <HAL_TIM_PWM_Start+0x18a>
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	4a19      	ldr	r2, [pc, #100]	; (800e7c0 <HAL_TIM_PWM_Start+0x1d8>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d009      	beq.n	800e772 <HAL_TIM_PWM_Start+0x18a>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	4a1b      	ldr	r2, [pc, #108]	; (800e7d0 <HAL_TIM_PWM_Start+0x1e8>)
 800e764:	4293      	cmp	r3, r2
 800e766:	d004      	beq.n	800e772 <HAL_TIM_PWM_Start+0x18a>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	4a19      	ldr	r2, [pc, #100]	; (800e7d4 <HAL_TIM_PWM_Start+0x1ec>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d115      	bne.n	800e79e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	689a      	ldr	r2, [r3, #8]
 800e778:	4b17      	ldr	r3, [pc, #92]	; (800e7d8 <HAL_TIM_PWM_Start+0x1f0>)
 800e77a:	4013      	ands	r3, r2
 800e77c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2b06      	cmp	r3, #6
 800e782:	d015      	beq.n	800e7b0 <HAL_TIM_PWM_Start+0x1c8>
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e78a:	d011      	beq.n	800e7b0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f042 0201 	orr.w	r2, r2, #1
 800e79a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e79c:	e008      	b.n	800e7b0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	681a      	ldr	r2, [r3, #0]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f042 0201 	orr.w	r2, r2, #1
 800e7ac:	601a      	str	r2, [r3, #0]
 800e7ae:	e000      	b.n	800e7b2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e7b2:	2300      	movs	r3, #0
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3710      	adds	r7, #16
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	40010000 	.word	0x40010000
 800e7c0:	40010400 	.word	0x40010400
 800e7c4:	40000400 	.word	0x40000400
 800e7c8:	40000800 	.word	0x40000800
 800e7cc:	40000c00 	.word	0x40000c00
 800e7d0:	40014000 	.word	0x40014000
 800e7d4:	40001800 	.word	0x40001800
 800e7d8:	00010007 	.word	0x00010007

0800e7dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d101      	bne.n	800e7ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	e049      	b.n	800e882 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7f4:	b2db      	uxtb	r3, r3
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d106      	bne.n	800e808 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7f7 ff68 	bl	80066d8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2202      	movs	r2, #2
 800e80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681a      	ldr	r2, [r3, #0]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	3304      	adds	r3, #4
 800e818:	4619      	mov	r1, r3
 800e81a:	4610      	mov	r0, r2
 800e81c:	f000 fd82 	bl	800f324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2201      	movs	r2, #1
 800e824:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2201      	movs	r2, #1
 800e82c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2201      	movs	r2, #1
 800e834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2201      	movs	r2, #1
 800e83c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2201      	movs	r2, #1
 800e844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2201      	movs	r2, #1
 800e84c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2201      	movs	r2, #1
 800e854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2201      	movs	r2, #1
 800e85c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2201      	movs	r2, #1
 800e864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2201      	movs	r2, #1
 800e86c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2201      	movs	r2, #1
 800e874:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2201      	movs	r2, #1
 800e87c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e880:	2300      	movs	r3, #0
}
 800e882:	4618      	mov	r0, r3
 800e884:	3708      	adds	r7, #8
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
	...

0800e88c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b084      	sub	sp, #16
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e896:	2300      	movs	r3, #0
 800e898:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d104      	bne.n	800e8aa <HAL_TIM_IC_Start_IT+0x1e>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	e023      	b.n	800e8f2 <HAL_TIM_IC_Start_IT+0x66>
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	2b04      	cmp	r3, #4
 800e8ae:	d104      	bne.n	800e8ba <HAL_TIM_IC_Start_IT+0x2e>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e8b6:	b2db      	uxtb	r3, r3
 800e8b8:	e01b      	b.n	800e8f2 <HAL_TIM_IC_Start_IT+0x66>
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	2b08      	cmp	r3, #8
 800e8be:	d104      	bne.n	800e8ca <HAL_TIM_IC_Start_IT+0x3e>
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e8c6:	b2db      	uxtb	r3, r3
 800e8c8:	e013      	b.n	800e8f2 <HAL_TIM_IC_Start_IT+0x66>
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	2b0c      	cmp	r3, #12
 800e8ce:	d104      	bne.n	800e8da <HAL_TIM_IC_Start_IT+0x4e>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	e00b      	b.n	800e8f2 <HAL_TIM_IC_Start_IT+0x66>
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	2b10      	cmp	r3, #16
 800e8de:	d104      	bne.n	800e8ea <HAL_TIM_IC_Start_IT+0x5e>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e8e6:	b2db      	uxtb	r3, r3
 800e8e8:	e003      	b.n	800e8f2 <HAL_TIM_IC_Start_IT+0x66>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d104      	bne.n	800e904 <HAL_TIM_IC_Start_IT+0x78>
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e900:	b2db      	uxtb	r3, r3
 800e902:	e013      	b.n	800e92c <HAL_TIM_IC_Start_IT+0xa0>
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	2b04      	cmp	r3, #4
 800e908:	d104      	bne.n	800e914 <HAL_TIM_IC_Start_IT+0x88>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e910:	b2db      	uxtb	r3, r3
 800e912:	e00b      	b.n	800e92c <HAL_TIM_IC_Start_IT+0xa0>
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	2b08      	cmp	r3, #8
 800e918:	d104      	bne.n	800e924 <HAL_TIM_IC_Start_IT+0x98>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e920:	b2db      	uxtb	r3, r3
 800e922:	e003      	b.n	800e92c <HAL_TIM_IC_Start_IT+0xa0>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800e92e:	7bbb      	ldrb	r3, [r7, #14]
 800e930:	2b01      	cmp	r3, #1
 800e932:	d102      	bne.n	800e93a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800e934:	7b7b      	ldrb	r3, [r7, #13]
 800e936:	2b01      	cmp	r3, #1
 800e938:	d001      	beq.n	800e93e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800e93a:	2301      	movs	r3, #1
 800e93c:	e0e2      	b.n	800eb04 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d104      	bne.n	800e94e <HAL_TIM_IC_Start_IT+0xc2>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2202      	movs	r2, #2
 800e948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e94c:	e023      	b.n	800e996 <HAL_TIM_IC_Start_IT+0x10a>
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	2b04      	cmp	r3, #4
 800e952:	d104      	bne.n	800e95e <HAL_TIM_IC_Start_IT+0xd2>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2202      	movs	r2, #2
 800e958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e95c:	e01b      	b.n	800e996 <HAL_TIM_IC_Start_IT+0x10a>
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	2b08      	cmp	r3, #8
 800e962:	d104      	bne.n	800e96e <HAL_TIM_IC_Start_IT+0xe2>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2202      	movs	r2, #2
 800e968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e96c:	e013      	b.n	800e996 <HAL_TIM_IC_Start_IT+0x10a>
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	2b0c      	cmp	r3, #12
 800e972:	d104      	bne.n	800e97e <HAL_TIM_IC_Start_IT+0xf2>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2202      	movs	r2, #2
 800e978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e97c:	e00b      	b.n	800e996 <HAL_TIM_IC_Start_IT+0x10a>
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	2b10      	cmp	r3, #16
 800e982:	d104      	bne.n	800e98e <HAL_TIM_IC_Start_IT+0x102>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2202      	movs	r2, #2
 800e988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e98c:	e003      	b.n	800e996 <HAL_TIM_IC_Start_IT+0x10a>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2202      	movs	r2, #2
 800e992:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d104      	bne.n	800e9a6 <HAL_TIM_IC_Start_IT+0x11a>
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2202      	movs	r2, #2
 800e9a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e9a4:	e013      	b.n	800e9ce <HAL_TIM_IC_Start_IT+0x142>
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	2b04      	cmp	r3, #4
 800e9aa:	d104      	bne.n	800e9b6 <HAL_TIM_IC_Start_IT+0x12a>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2202      	movs	r2, #2
 800e9b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e9b4:	e00b      	b.n	800e9ce <HAL_TIM_IC_Start_IT+0x142>
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	2b08      	cmp	r3, #8
 800e9ba:	d104      	bne.n	800e9c6 <HAL_TIM_IC_Start_IT+0x13a>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2202      	movs	r2, #2
 800e9c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e9c4:	e003      	b.n	800e9ce <HAL_TIM_IC_Start_IT+0x142>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2202      	movs	r2, #2
 800e9ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	2b0c      	cmp	r3, #12
 800e9d2:	d841      	bhi.n	800ea58 <HAL_TIM_IC_Start_IT+0x1cc>
 800e9d4:	a201      	add	r2, pc, #4	; (adr r2, 800e9dc <HAL_TIM_IC_Start_IT+0x150>)
 800e9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9da:	bf00      	nop
 800e9dc:	0800ea11 	.word	0x0800ea11
 800e9e0:	0800ea59 	.word	0x0800ea59
 800e9e4:	0800ea59 	.word	0x0800ea59
 800e9e8:	0800ea59 	.word	0x0800ea59
 800e9ec:	0800ea23 	.word	0x0800ea23
 800e9f0:	0800ea59 	.word	0x0800ea59
 800e9f4:	0800ea59 	.word	0x0800ea59
 800e9f8:	0800ea59 	.word	0x0800ea59
 800e9fc:	0800ea35 	.word	0x0800ea35
 800ea00:	0800ea59 	.word	0x0800ea59
 800ea04:	0800ea59 	.word	0x0800ea59
 800ea08:	0800ea59 	.word	0x0800ea59
 800ea0c:	0800ea47 	.word	0x0800ea47
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	68da      	ldr	r2, [r3, #12]
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f042 0202 	orr.w	r2, r2, #2
 800ea1e:	60da      	str	r2, [r3, #12]
      break;
 800ea20:	e01d      	b.n	800ea5e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	68da      	ldr	r2, [r3, #12]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	f042 0204 	orr.w	r2, r2, #4
 800ea30:	60da      	str	r2, [r3, #12]
      break;
 800ea32:	e014      	b.n	800ea5e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	68da      	ldr	r2, [r3, #12]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f042 0208 	orr.w	r2, r2, #8
 800ea42:	60da      	str	r2, [r3, #12]
      break;
 800ea44:	e00b      	b.n	800ea5e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	68da      	ldr	r2, [r3, #12]
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f042 0210 	orr.w	r2, r2, #16
 800ea54:	60da      	str	r2, [r3, #12]
      break;
 800ea56:	e002      	b.n	800ea5e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800ea58:	2301      	movs	r3, #1
 800ea5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ea5c:	bf00      	nop
  }

  if (status == HAL_OK)
 800ea5e:	7bfb      	ldrb	r3, [r7, #15]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d14e      	bne.n	800eb02 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	2201      	movs	r2, #1
 800ea6a:	6839      	ldr	r1, [r7, #0]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f001 f91b 	bl	800fca8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	4a25      	ldr	r2, [pc, #148]	; (800eb0c <HAL_TIM_IC_Start_IT+0x280>)
 800ea78:	4293      	cmp	r3, r2
 800ea7a:	d022      	beq.n	800eac2 <HAL_TIM_IC_Start_IT+0x236>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea84:	d01d      	beq.n	800eac2 <HAL_TIM_IC_Start_IT+0x236>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	4a21      	ldr	r2, [pc, #132]	; (800eb10 <HAL_TIM_IC_Start_IT+0x284>)
 800ea8c:	4293      	cmp	r3, r2
 800ea8e:	d018      	beq.n	800eac2 <HAL_TIM_IC_Start_IT+0x236>
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	4a1f      	ldr	r2, [pc, #124]	; (800eb14 <HAL_TIM_IC_Start_IT+0x288>)
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d013      	beq.n	800eac2 <HAL_TIM_IC_Start_IT+0x236>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	4a1e      	ldr	r2, [pc, #120]	; (800eb18 <HAL_TIM_IC_Start_IT+0x28c>)
 800eaa0:	4293      	cmp	r3, r2
 800eaa2:	d00e      	beq.n	800eac2 <HAL_TIM_IC_Start_IT+0x236>
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	4a1c      	ldr	r2, [pc, #112]	; (800eb1c <HAL_TIM_IC_Start_IT+0x290>)
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d009      	beq.n	800eac2 <HAL_TIM_IC_Start_IT+0x236>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	4a1b      	ldr	r2, [pc, #108]	; (800eb20 <HAL_TIM_IC_Start_IT+0x294>)
 800eab4:	4293      	cmp	r3, r2
 800eab6:	d004      	beq.n	800eac2 <HAL_TIM_IC_Start_IT+0x236>
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	4a19      	ldr	r2, [pc, #100]	; (800eb24 <HAL_TIM_IC_Start_IT+0x298>)
 800eabe:	4293      	cmp	r3, r2
 800eac0:	d115      	bne.n	800eaee <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	689a      	ldr	r2, [r3, #8]
 800eac8:	4b17      	ldr	r3, [pc, #92]	; (800eb28 <HAL_TIM_IC_Start_IT+0x29c>)
 800eaca:	4013      	ands	r3, r2
 800eacc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	2b06      	cmp	r3, #6
 800ead2:	d015      	beq.n	800eb00 <HAL_TIM_IC_Start_IT+0x274>
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eada:	d011      	beq.n	800eb00 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	681a      	ldr	r2, [r3, #0]
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	f042 0201 	orr.w	r2, r2, #1
 800eaea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eaec:	e008      	b.n	800eb00 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	681a      	ldr	r2, [r3, #0]
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	f042 0201 	orr.w	r2, r2, #1
 800eafc:	601a      	str	r2, [r3, #0]
 800eafe:	e000      	b.n	800eb02 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb00:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800eb02:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3710      	adds	r7, #16
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	40010000 	.word	0x40010000
 800eb10:	40000400 	.word	0x40000400
 800eb14:	40000800 	.word	0x40000800
 800eb18:	40000c00 	.word	0x40000c00
 800eb1c:	40010400 	.word	0x40010400
 800eb20:	40014000 	.word	0x40014000
 800eb24:	40001800 	.word	0x40001800
 800eb28:	00010007 	.word	0x00010007

0800eb2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b082      	sub	sp, #8
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	691b      	ldr	r3, [r3, #16]
 800eb3a:	f003 0302 	and.w	r3, r3, #2
 800eb3e:	2b02      	cmp	r3, #2
 800eb40:	d122      	bne.n	800eb88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	f003 0302 	and.w	r3, r3, #2
 800eb4c:	2b02      	cmp	r3, #2
 800eb4e:	d11b      	bne.n	800eb88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	f06f 0202 	mvn.w	r2, #2
 800eb58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	699b      	ldr	r3, [r3, #24]
 800eb66:	f003 0303 	and.w	r3, r3, #3
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d003      	beq.n	800eb76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f7f5 fa26 	bl	8003fc0 <HAL_TIM_IC_CaptureCallback>
 800eb74:	e005      	b.n	800eb82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f000 fbb6 	bl	800f2e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f000 fbbd 	bl	800f2fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2200      	movs	r2, #0
 800eb86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	691b      	ldr	r3, [r3, #16]
 800eb8e:	f003 0304 	and.w	r3, r3, #4
 800eb92:	2b04      	cmp	r3, #4
 800eb94:	d122      	bne.n	800ebdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	68db      	ldr	r3, [r3, #12]
 800eb9c:	f003 0304 	and.w	r3, r3, #4
 800eba0:	2b04      	cmp	r3, #4
 800eba2:	d11b      	bne.n	800ebdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f06f 0204 	mvn.w	r2, #4
 800ebac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2202      	movs	r2, #2
 800ebb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	699b      	ldr	r3, [r3, #24]
 800ebba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d003      	beq.n	800ebca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f7f5 f9fc 	bl	8003fc0 <HAL_TIM_IC_CaptureCallback>
 800ebc8:	e005      	b.n	800ebd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f000 fb8c 	bl	800f2e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f000 fb93 	bl	800f2fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	691b      	ldr	r3, [r3, #16]
 800ebe2:	f003 0308 	and.w	r3, r3, #8
 800ebe6:	2b08      	cmp	r3, #8
 800ebe8:	d122      	bne.n	800ec30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	68db      	ldr	r3, [r3, #12]
 800ebf0:	f003 0308 	and.w	r3, r3, #8
 800ebf4:	2b08      	cmp	r3, #8
 800ebf6:	d11b      	bne.n	800ec30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f06f 0208 	mvn.w	r2, #8
 800ec00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2204      	movs	r2, #4
 800ec06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	69db      	ldr	r3, [r3, #28]
 800ec0e:	f003 0303 	and.w	r3, r3, #3
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d003      	beq.n	800ec1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f7f5 f9d2 	bl	8003fc0 <HAL_TIM_IC_CaptureCallback>
 800ec1c:	e005      	b.n	800ec2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f000 fb62 	bl	800f2e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f000 fb69 	bl	800f2fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	691b      	ldr	r3, [r3, #16]
 800ec36:	f003 0310 	and.w	r3, r3, #16
 800ec3a:	2b10      	cmp	r3, #16
 800ec3c:	d122      	bne.n	800ec84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	68db      	ldr	r3, [r3, #12]
 800ec44:	f003 0310 	and.w	r3, r3, #16
 800ec48:	2b10      	cmp	r3, #16
 800ec4a:	d11b      	bne.n	800ec84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f06f 0210 	mvn.w	r2, #16
 800ec54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2208      	movs	r2, #8
 800ec5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	69db      	ldr	r3, [r3, #28]
 800ec62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d003      	beq.n	800ec72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f7f5 f9a8 	bl	8003fc0 <HAL_TIM_IC_CaptureCallback>
 800ec70:	e005      	b.n	800ec7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f000 fb38 	bl	800f2e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f000 fb3f 	bl	800f2fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2200      	movs	r2, #0
 800ec82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	691b      	ldr	r3, [r3, #16]
 800ec8a:	f003 0301 	and.w	r3, r3, #1
 800ec8e:	2b01      	cmp	r3, #1
 800ec90:	d10e      	bne.n	800ecb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	68db      	ldr	r3, [r3, #12]
 800ec98:	f003 0301 	and.w	r3, r3, #1
 800ec9c:	2b01      	cmp	r3, #1
 800ec9e:	d107      	bne.n	800ecb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	f06f 0201 	mvn.w	r2, #1
 800eca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f7f5 ff71 	bl	8004b92 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	691b      	ldr	r3, [r3, #16]
 800ecb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecba:	2b80      	cmp	r3, #128	; 0x80
 800ecbc:	d10e      	bne.n	800ecdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	68db      	ldr	r3, [r3, #12]
 800ecc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecc8:	2b80      	cmp	r3, #128	; 0x80
 800ecca:	d107      	bne.n	800ecdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ecd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f001 f922 	bl	800ff20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	691b      	ldr	r3, [r3, #16]
 800ece2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ece6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecea:	d10e      	bne.n	800ed0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecf6:	2b80      	cmp	r3, #128	; 0x80
 800ecf8:	d107      	bne.n	800ed0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ed02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f001 f915 	bl	800ff34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	691b      	ldr	r3, [r3, #16]
 800ed10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed14:	2b40      	cmp	r3, #64	; 0x40
 800ed16:	d10e      	bne.n	800ed36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	68db      	ldr	r3, [r3, #12]
 800ed1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed22:	2b40      	cmp	r3, #64	; 0x40
 800ed24:	d107      	bne.n	800ed36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ed2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f000 faed 	bl	800f310 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	691b      	ldr	r3, [r3, #16]
 800ed3c:	f003 0320 	and.w	r3, r3, #32
 800ed40:	2b20      	cmp	r3, #32
 800ed42:	d10e      	bne.n	800ed62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	68db      	ldr	r3, [r3, #12]
 800ed4a:	f003 0320 	and.w	r3, r3, #32
 800ed4e:	2b20      	cmp	r3, #32
 800ed50:	d107      	bne.n	800ed62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	f06f 0220 	mvn.w	r2, #32
 800ed5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f001 f8d5 	bl	800ff0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ed62:	bf00      	nop
 800ed64:	3708      	adds	r7, #8
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}

0800ed6a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800ed6a:	b580      	push	{r7, lr}
 800ed6c:	b086      	sub	sp, #24
 800ed6e:	af00      	add	r7, sp, #0
 800ed70:	60f8      	str	r0, [r7, #12]
 800ed72:	60b9      	str	r1, [r7, #8]
 800ed74:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ed76:	2300      	movs	r3, #0
 800ed78:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	d101      	bne.n	800ed88 <HAL_TIM_IC_ConfigChannel+0x1e>
 800ed84:	2302      	movs	r3, #2
 800ed86:	e088      	b.n	800ee9a <HAL_TIM_IC_ConfigChannel+0x130>
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	2201      	movs	r2, #1
 800ed8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d11b      	bne.n	800edce <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800eda6:	f000 fdbb 	bl	800f920 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	699a      	ldr	r2, [r3, #24]
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	f022 020c 	bic.w	r2, r2, #12
 800edb8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	6999      	ldr	r1, [r3, #24]
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	689a      	ldr	r2, [r3, #8]
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	430a      	orrs	r2, r1
 800edca:	619a      	str	r2, [r3, #24]
 800edcc:	e060      	b.n	800ee90 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2b04      	cmp	r3, #4
 800edd2:	d11c      	bne.n	800ee0e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800ede4:	f000 fe3f 	bl	800fa66 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	699a      	ldr	r2, [r3, #24]
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800edf6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	6999      	ldr	r1, [r3, #24]
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	689b      	ldr	r3, [r3, #8]
 800ee02:	021a      	lsls	r2, r3, #8
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	430a      	orrs	r2, r1
 800ee0a:	619a      	str	r2, [r3, #24]
 800ee0c:	e040      	b.n	800ee90 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2b08      	cmp	r3, #8
 800ee12:	d11b      	bne.n	800ee4c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800ee24:	f000 fe8c 	bl	800fb40 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	69da      	ldr	r2, [r3, #28]
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	f022 020c 	bic.w	r2, r2, #12
 800ee36:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	69d9      	ldr	r1, [r3, #28]
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	689a      	ldr	r2, [r3, #8]
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	430a      	orrs	r2, r1
 800ee48:	61da      	str	r2, [r3, #28]
 800ee4a:	e021      	b.n	800ee90 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2b0c      	cmp	r3, #12
 800ee50:	d11c      	bne.n	800ee8c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800ee62:	f000 fea9 	bl	800fbb8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	69da      	ldr	r2, [r3, #28]
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ee74:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	69d9      	ldr	r1, [r3, #28]
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	689b      	ldr	r3, [r3, #8]
 800ee80:	021a      	lsls	r2, r3, #8
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	430a      	orrs	r2, r1
 800ee88:	61da      	str	r2, [r3, #28]
 800ee8a:	e001      	b.n	800ee90 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	2200      	movs	r2, #0
 800ee94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ee98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3718      	adds	r7, #24
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
	...

0800eea4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b086      	sub	sp, #24
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	60f8      	str	r0, [r7, #12]
 800eeac:	60b9      	str	r1, [r7, #8]
 800eeae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eeba:	2b01      	cmp	r3, #1
 800eebc:	d101      	bne.n	800eec2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800eebe:	2302      	movs	r3, #2
 800eec0:	e0ff      	b.n	800f0c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	2201      	movs	r2, #1
 800eec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2b14      	cmp	r3, #20
 800eece:	f200 80f0 	bhi.w	800f0b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800eed2:	a201      	add	r2, pc, #4	; (adr r2, 800eed8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800eed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eed8:	0800ef2d 	.word	0x0800ef2d
 800eedc:	0800f0b3 	.word	0x0800f0b3
 800eee0:	0800f0b3 	.word	0x0800f0b3
 800eee4:	0800f0b3 	.word	0x0800f0b3
 800eee8:	0800ef6d 	.word	0x0800ef6d
 800eeec:	0800f0b3 	.word	0x0800f0b3
 800eef0:	0800f0b3 	.word	0x0800f0b3
 800eef4:	0800f0b3 	.word	0x0800f0b3
 800eef8:	0800efaf 	.word	0x0800efaf
 800eefc:	0800f0b3 	.word	0x0800f0b3
 800ef00:	0800f0b3 	.word	0x0800f0b3
 800ef04:	0800f0b3 	.word	0x0800f0b3
 800ef08:	0800efef 	.word	0x0800efef
 800ef0c:	0800f0b3 	.word	0x0800f0b3
 800ef10:	0800f0b3 	.word	0x0800f0b3
 800ef14:	0800f0b3 	.word	0x0800f0b3
 800ef18:	0800f031 	.word	0x0800f031
 800ef1c:	0800f0b3 	.word	0x0800f0b3
 800ef20:	0800f0b3 	.word	0x0800f0b3
 800ef24:	0800f0b3 	.word	0x0800f0b3
 800ef28:	0800f071 	.word	0x0800f071
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	68b9      	ldr	r1, [r7, #8]
 800ef32:	4618      	mov	r0, r3
 800ef34:	f000 fa96 	bl	800f464 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	699a      	ldr	r2, [r3, #24]
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	f042 0208 	orr.w	r2, r2, #8
 800ef46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	699a      	ldr	r2, [r3, #24]
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	f022 0204 	bic.w	r2, r2, #4
 800ef56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	6999      	ldr	r1, [r3, #24]
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	691a      	ldr	r2, [r3, #16]
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	430a      	orrs	r2, r1
 800ef68:	619a      	str	r2, [r3, #24]
      break;
 800ef6a:	e0a5      	b.n	800f0b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	68b9      	ldr	r1, [r7, #8]
 800ef72:	4618      	mov	r0, r3
 800ef74:	f000 fae8 	bl	800f548 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	699a      	ldr	r2, [r3, #24]
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ef86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	699a      	ldr	r2, [r3, #24]
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ef96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	6999      	ldr	r1, [r3, #24]
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	691b      	ldr	r3, [r3, #16]
 800efa2:	021a      	lsls	r2, r3, #8
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	430a      	orrs	r2, r1
 800efaa:	619a      	str	r2, [r3, #24]
      break;
 800efac:	e084      	b.n	800f0b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	68b9      	ldr	r1, [r7, #8]
 800efb4:	4618      	mov	r0, r3
 800efb6:	f000 fb3f 	bl	800f638 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	69da      	ldr	r2, [r3, #28]
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	f042 0208 	orr.w	r2, r2, #8
 800efc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	69da      	ldr	r2, [r3, #28]
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	f022 0204 	bic.w	r2, r2, #4
 800efd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	69d9      	ldr	r1, [r3, #28]
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	691a      	ldr	r2, [r3, #16]
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	430a      	orrs	r2, r1
 800efea:	61da      	str	r2, [r3, #28]
      break;
 800efec:	e064      	b.n	800f0b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	68b9      	ldr	r1, [r7, #8]
 800eff4:	4618      	mov	r0, r3
 800eff6:	f000 fb95 	bl	800f724 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	69da      	ldr	r2, [r3, #28]
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	69da      	ldr	r2, [r3, #28]
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	69d9      	ldr	r1, [r3, #28]
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	691b      	ldr	r3, [r3, #16]
 800f024:	021a      	lsls	r2, r3, #8
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	430a      	orrs	r2, r1
 800f02c:	61da      	str	r2, [r3, #28]
      break;
 800f02e:	e043      	b.n	800f0b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	68b9      	ldr	r1, [r7, #8]
 800f036:	4618      	mov	r0, r3
 800f038:	f000 fbcc 	bl	800f7d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f042 0208 	orr.w	r2, r2, #8
 800f04a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	f022 0204 	bic.w	r2, r2, #4
 800f05a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	691a      	ldr	r2, [r3, #16]
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	430a      	orrs	r2, r1
 800f06c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f06e:	e023      	b.n	800f0b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	68b9      	ldr	r1, [r7, #8]
 800f076:	4618      	mov	r0, r3
 800f078:	f000 fbfe 	bl	800f878 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f08a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f09a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	691b      	ldr	r3, [r3, #16]
 800f0a6:	021a      	lsls	r2, r3, #8
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	430a      	orrs	r2, r1
 800f0ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f0b0:	e002      	b.n	800f0b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	75fb      	strb	r3, [r7, #23]
      break;
 800f0b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f0c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3718      	adds	r7, #24
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}
 800f0ca:	bf00      	nop

0800f0cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b084      	sub	sp, #16
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0e0:	2b01      	cmp	r3, #1
 800f0e2:	d101      	bne.n	800f0e8 <HAL_TIM_ConfigClockSource+0x1c>
 800f0e4:	2302      	movs	r3, #2
 800f0e6:	e0b4      	b.n	800f252 <HAL_TIM_ConfigClockSource+0x186>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2202      	movs	r2, #2
 800f0f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	689b      	ldr	r3, [r3, #8]
 800f0fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f100:	68ba      	ldr	r2, [r7, #8]
 800f102:	4b56      	ldr	r3, [pc, #344]	; (800f25c <HAL_TIM_ConfigClockSource+0x190>)
 800f104:	4013      	ands	r3, r2
 800f106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f10e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	68ba      	ldr	r2, [r7, #8]
 800f116:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f120:	d03e      	beq.n	800f1a0 <HAL_TIM_ConfigClockSource+0xd4>
 800f122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f126:	f200 8087 	bhi.w	800f238 <HAL_TIM_ConfigClockSource+0x16c>
 800f12a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f12e:	f000 8086 	beq.w	800f23e <HAL_TIM_ConfigClockSource+0x172>
 800f132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f136:	d87f      	bhi.n	800f238 <HAL_TIM_ConfigClockSource+0x16c>
 800f138:	2b70      	cmp	r3, #112	; 0x70
 800f13a:	d01a      	beq.n	800f172 <HAL_TIM_ConfigClockSource+0xa6>
 800f13c:	2b70      	cmp	r3, #112	; 0x70
 800f13e:	d87b      	bhi.n	800f238 <HAL_TIM_ConfigClockSource+0x16c>
 800f140:	2b60      	cmp	r3, #96	; 0x60
 800f142:	d050      	beq.n	800f1e6 <HAL_TIM_ConfigClockSource+0x11a>
 800f144:	2b60      	cmp	r3, #96	; 0x60
 800f146:	d877      	bhi.n	800f238 <HAL_TIM_ConfigClockSource+0x16c>
 800f148:	2b50      	cmp	r3, #80	; 0x50
 800f14a:	d03c      	beq.n	800f1c6 <HAL_TIM_ConfigClockSource+0xfa>
 800f14c:	2b50      	cmp	r3, #80	; 0x50
 800f14e:	d873      	bhi.n	800f238 <HAL_TIM_ConfigClockSource+0x16c>
 800f150:	2b40      	cmp	r3, #64	; 0x40
 800f152:	d058      	beq.n	800f206 <HAL_TIM_ConfigClockSource+0x13a>
 800f154:	2b40      	cmp	r3, #64	; 0x40
 800f156:	d86f      	bhi.n	800f238 <HAL_TIM_ConfigClockSource+0x16c>
 800f158:	2b30      	cmp	r3, #48	; 0x30
 800f15a:	d064      	beq.n	800f226 <HAL_TIM_ConfigClockSource+0x15a>
 800f15c:	2b30      	cmp	r3, #48	; 0x30
 800f15e:	d86b      	bhi.n	800f238 <HAL_TIM_ConfigClockSource+0x16c>
 800f160:	2b20      	cmp	r3, #32
 800f162:	d060      	beq.n	800f226 <HAL_TIM_ConfigClockSource+0x15a>
 800f164:	2b20      	cmp	r3, #32
 800f166:	d867      	bhi.n	800f238 <HAL_TIM_ConfigClockSource+0x16c>
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d05c      	beq.n	800f226 <HAL_TIM_ConfigClockSource+0x15a>
 800f16c:	2b10      	cmp	r3, #16
 800f16e:	d05a      	beq.n	800f226 <HAL_TIM_ConfigClockSource+0x15a>
 800f170:	e062      	b.n	800f238 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f182:	f000 fd71 	bl	800fc68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	689b      	ldr	r3, [r3, #8]
 800f18c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f194:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	68ba      	ldr	r2, [r7, #8]
 800f19c:	609a      	str	r2, [r3, #8]
      break;
 800f19e:	e04f      	b.n	800f240 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f1b0:	f000 fd5a 	bl	800fc68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	689a      	ldr	r2, [r3, #8]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f1c2:	609a      	str	r2, [r3, #8]
      break;
 800f1c4:	e03c      	b.n	800f240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	f000 fc18 	bl	800fa08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	2150      	movs	r1, #80	; 0x50
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f000 fd27 	bl	800fc32 <TIM_ITRx_SetConfig>
      break;
 800f1e4:	e02c      	b.n	800f240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f1f2:	461a      	mov	r2, r3
 800f1f4:	f000 fc74 	bl	800fae0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	2160      	movs	r1, #96	; 0x60
 800f1fe:	4618      	mov	r0, r3
 800f200:	f000 fd17 	bl	800fc32 <TIM_ITRx_SetConfig>
      break;
 800f204:	e01c      	b.n	800f240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f212:	461a      	mov	r2, r3
 800f214:	f000 fbf8 	bl	800fa08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	2140      	movs	r1, #64	; 0x40
 800f21e:	4618      	mov	r0, r3
 800f220:	f000 fd07 	bl	800fc32 <TIM_ITRx_SetConfig>
      break;
 800f224:	e00c      	b.n	800f240 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681a      	ldr	r2, [r3, #0]
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	4619      	mov	r1, r3
 800f230:	4610      	mov	r0, r2
 800f232:	f000 fcfe 	bl	800fc32 <TIM_ITRx_SetConfig>
      break;
 800f236:	e003      	b.n	800f240 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f238:	2301      	movs	r3, #1
 800f23a:	73fb      	strb	r3, [r7, #15]
      break;
 800f23c:	e000      	b.n	800f240 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f23e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2201      	movs	r2, #1
 800f244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2200      	movs	r2, #0
 800f24c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f250:	7bfb      	ldrb	r3, [r7, #15]
}
 800f252:	4618      	mov	r0, r3
 800f254:	3710      	adds	r7, #16
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}
 800f25a:	bf00      	nop
 800f25c:	fffeff88 	.word	0xfffeff88

0800f260 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f260:	b480      	push	{r7}
 800f262:	b085      	sub	sp, #20
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800f26a:	2300      	movs	r3, #0
 800f26c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	2b0c      	cmp	r3, #12
 800f272:	d831      	bhi.n	800f2d8 <HAL_TIM_ReadCapturedValue+0x78>
 800f274:	a201      	add	r2, pc, #4	; (adr r2, 800f27c <HAL_TIM_ReadCapturedValue+0x1c>)
 800f276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f27a:	bf00      	nop
 800f27c:	0800f2b1 	.word	0x0800f2b1
 800f280:	0800f2d9 	.word	0x0800f2d9
 800f284:	0800f2d9 	.word	0x0800f2d9
 800f288:	0800f2d9 	.word	0x0800f2d9
 800f28c:	0800f2bb 	.word	0x0800f2bb
 800f290:	0800f2d9 	.word	0x0800f2d9
 800f294:	0800f2d9 	.word	0x0800f2d9
 800f298:	0800f2d9 	.word	0x0800f2d9
 800f29c:	0800f2c5 	.word	0x0800f2c5
 800f2a0:	0800f2d9 	.word	0x0800f2d9
 800f2a4:	0800f2d9 	.word	0x0800f2d9
 800f2a8:	0800f2d9 	.word	0x0800f2d9
 800f2ac:	0800f2cf 	.word	0x0800f2cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2b6:	60fb      	str	r3, [r7, #12]

      break;
 800f2b8:	e00f      	b.n	800f2da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2c0:	60fb      	str	r3, [r7, #12]

      break;
 800f2c2:	e00a      	b.n	800f2da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2ca:	60fb      	str	r3, [r7, #12]

      break;
 800f2cc:	e005      	b.n	800f2da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2d4:	60fb      	str	r3, [r7, #12]

      break;
 800f2d6:	e000      	b.n	800f2da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800f2d8:	bf00      	nop
  }

  return tmpreg;
 800f2da:	68fb      	ldr	r3, [r7, #12]
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	3714      	adds	r7, #20
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr

0800f2e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b083      	sub	sp, #12
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f2f0:	bf00      	nop
 800f2f2:	370c      	adds	r7, #12
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr

0800f2fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f304:	bf00      	nop
 800f306:	370c      	adds	r7, #12
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f310:	b480      	push	{r7}
 800f312:	b083      	sub	sp, #12
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f318:	bf00      	nop
 800f31a:	370c      	adds	r7, #12
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr

0800f324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f324:	b480      	push	{r7}
 800f326:	b085      	sub	sp, #20
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	4a40      	ldr	r2, [pc, #256]	; (800f438 <TIM_Base_SetConfig+0x114>)
 800f338:	4293      	cmp	r3, r2
 800f33a:	d013      	beq.n	800f364 <TIM_Base_SetConfig+0x40>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f342:	d00f      	beq.n	800f364 <TIM_Base_SetConfig+0x40>
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	4a3d      	ldr	r2, [pc, #244]	; (800f43c <TIM_Base_SetConfig+0x118>)
 800f348:	4293      	cmp	r3, r2
 800f34a:	d00b      	beq.n	800f364 <TIM_Base_SetConfig+0x40>
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	4a3c      	ldr	r2, [pc, #240]	; (800f440 <TIM_Base_SetConfig+0x11c>)
 800f350:	4293      	cmp	r3, r2
 800f352:	d007      	beq.n	800f364 <TIM_Base_SetConfig+0x40>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	4a3b      	ldr	r2, [pc, #236]	; (800f444 <TIM_Base_SetConfig+0x120>)
 800f358:	4293      	cmp	r3, r2
 800f35a:	d003      	beq.n	800f364 <TIM_Base_SetConfig+0x40>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	4a3a      	ldr	r2, [pc, #232]	; (800f448 <TIM_Base_SetConfig+0x124>)
 800f360:	4293      	cmp	r3, r2
 800f362:	d108      	bne.n	800f376 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f36a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	68fa      	ldr	r2, [r7, #12]
 800f372:	4313      	orrs	r3, r2
 800f374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	4a2f      	ldr	r2, [pc, #188]	; (800f438 <TIM_Base_SetConfig+0x114>)
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d02b      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f384:	d027      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	4a2c      	ldr	r2, [pc, #176]	; (800f43c <TIM_Base_SetConfig+0x118>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d023      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	4a2b      	ldr	r2, [pc, #172]	; (800f440 <TIM_Base_SetConfig+0x11c>)
 800f392:	4293      	cmp	r3, r2
 800f394:	d01f      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	4a2a      	ldr	r2, [pc, #168]	; (800f444 <TIM_Base_SetConfig+0x120>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d01b      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	4a29      	ldr	r2, [pc, #164]	; (800f448 <TIM_Base_SetConfig+0x124>)
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	d017      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	4a28      	ldr	r2, [pc, #160]	; (800f44c <TIM_Base_SetConfig+0x128>)
 800f3aa:	4293      	cmp	r3, r2
 800f3ac:	d013      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	4a27      	ldr	r2, [pc, #156]	; (800f450 <TIM_Base_SetConfig+0x12c>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d00f      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	4a26      	ldr	r2, [pc, #152]	; (800f454 <TIM_Base_SetConfig+0x130>)
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	d00b      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	4a25      	ldr	r2, [pc, #148]	; (800f458 <TIM_Base_SetConfig+0x134>)
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d007      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	4a24      	ldr	r2, [pc, #144]	; (800f45c <TIM_Base_SetConfig+0x138>)
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	d003      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	4a23      	ldr	r2, [pc, #140]	; (800f460 <TIM_Base_SetConfig+0x13c>)
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d108      	bne.n	800f3e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f3dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	68db      	ldr	r3, [r3, #12]
 800f3e2:	68fa      	ldr	r2, [r7, #12]
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	695b      	ldr	r3, [r3, #20]
 800f3f2:	4313      	orrs	r3, r2
 800f3f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	68fa      	ldr	r2, [r7, #12]
 800f3fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	689a      	ldr	r2, [r3, #8]
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	681a      	ldr	r2, [r3, #0]
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	4a0a      	ldr	r2, [pc, #40]	; (800f438 <TIM_Base_SetConfig+0x114>)
 800f410:	4293      	cmp	r3, r2
 800f412:	d003      	beq.n	800f41c <TIM_Base_SetConfig+0xf8>
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	4a0c      	ldr	r2, [pc, #48]	; (800f448 <TIM_Base_SetConfig+0x124>)
 800f418:	4293      	cmp	r3, r2
 800f41a:	d103      	bne.n	800f424 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	691a      	ldr	r2, [r3, #16]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2201      	movs	r2, #1
 800f428:	615a      	str	r2, [r3, #20]
}
 800f42a:	bf00      	nop
 800f42c:	3714      	adds	r7, #20
 800f42e:	46bd      	mov	sp, r7
 800f430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f434:	4770      	bx	lr
 800f436:	bf00      	nop
 800f438:	40010000 	.word	0x40010000
 800f43c:	40000400 	.word	0x40000400
 800f440:	40000800 	.word	0x40000800
 800f444:	40000c00 	.word	0x40000c00
 800f448:	40010400 	.word	0x40010400
 800f44c:	40014000 	.word	0x40014000
 800f450:	40014400 	.word	0x40014400
 800f454:	40014800 	.word	0x40014800
 800f458:	40001800 	.word	0x40001800
 800f45c:	40001c00 	.word	0x40001c00
 800f460:	40002000 	.word	0x40002000

0800f464 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f464:	b480      	push	{r7}
 800f466:	b087      	sub	sp, #28
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6a1b      	ldr	r3, [r3, #32]
 800f472:	f023 0201 	bic.w	r2, r3, #1
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	6a1b      	ldr	r3, [r3, #32]
 800f47e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	699b      	ldr	r3, [r3, #24]
 800f48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f48c:	68fa      	ldr	r2, [r7, #12]
 800f48e:	4b2b      	ldr	r3, [pc, #172]	; (800f53c <TIM_OC1_SetConfig+0xd8>)
 800f490:	4013      	ands	r3, r2
 800f492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	f023 0303 	bic.w	r3, r3, #3
 800f49a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	68fa      	ldr	r2, [r7, #12]
 800f4a2:	4313      	orrs	r3, r2
 800f4a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	f023 0302 	bic.w	r3, r3, #2
 800f4ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	689b      	ldr	r3, [r3, #8]
 800f4b2:	697a      	ldr	r2, [r7, #20]
 800f4b4:	4313      	orrs	r3, r2
 800f4b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	4a21      	ldr	r2, [pc, #132]	; (800f540 <TIM_OC1_SetConfig+0xdc>)
 800f4bc:	4293      	cmp	r3, r2
 800f4be:	d003      	beq.n	800f4c8 <TIM_OC1_SetConfig+0x64>
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4a20      	ldr	r2, [pc, #128]	; (800f544 <TIM_OC1_SetConfig+0xe0>)
 800f4c4:	4293      	cmp	r3, r2
 800f4c6:	d10c      	bne.n	800f4e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	f023 0308 	bic.w	r3, r3, #8
 800f4ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	68db      	ldr	r3, [r3, #12]
 800f4d4:	697a      	ldr	r2, [r7, #20]
 800f4d6:	4313      	orrs	r3, r2
 800f4d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	f023 0304 	bic.w	r3, r3, #4
 800f4e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	4a16      	ldr	r2, [pc, #88]	; (800f540 <TIM_OC1_SetConfig+0xdc>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d003      	beq.n	800f4f2 <TIM_OC1_SetConfig+0x8e>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4a15      	ldr	r2, [pc, #84]	; (800f544 <TIM_OC1_SetConfig+0xe0>)
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	d111      	bne.n	800f516 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f4f2:	693b      	ldr	r3, [r7, #16]
 800f4f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f4f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f4fa:	693b      	ldr	r3, [r7, #16]
 800f4fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	695b      	ldr	r3, [r3, #20]
 800f506:	693a      	ldr	r2, [r7, #16]
 800f508:	4313      	orrs	r3, r2
 800f50a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	699b      	ldr	r3, [r3, #24]
 800f510:	693a      	ldr	r2, [r7, #16]
 800f512:	4313      	orrs	r3, r2
 800f514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	693a      	ldr	r2, [r7, #16]
 800f51a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	68fa      	ldr	r2, [r7, #12]
 800f520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	685a      	ldr	r2, [r3, #4]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	697a      	ldr	r2, [r7, #20]
 800f52e:	621a      	str	r2, [r3, #32]
}
 800f530:	bf00      	nop
 800f532:	371c      	adds	r7, #28
 800f534:	46bd      	mov	sp, r7
 800f536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53a:	4770      	bx	lr
 800f53c:	fffeff8f 	.word	0xfffeff8f
 800f540:	40010000 	.word	0x40010000
 800f544:	40010400 	.word	0x40010400

0800f548 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f548:	b480      	push	{r7}
 800f54a:	b087      	sub	sp, #28
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6a1b      	ldr	r3, [r3, #32]
 800f556:	f023 0210 	bic.w	r2, r3, #16
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6a1b      	ldr	r3, [r3, #32]
 800f562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	699b      	ldr	r3, [r3, #24]
 800f56e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f570:	68fa      	ldr	r2, [r7, #12]
 800f572:	4b2e      	ldr	r3, [pc, #184]	; (800f62c <TIM_OC2_SetConfig+0xe4>)
 800f574:	4013      	ands	r3, r2
 800f576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f57e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	021b      	lsls	r3, r3, #8
 800f586:	68fa      	ldr	r2, [r7, #12]
 800f588:	4313      	orrs	r3, r2
 800f58a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	f023 0320 	bic.w	r3, r3, #32
 800f592:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	689b      	ldr	r3, [r3, #8]
 800f598:	011b      	lsls	r3, r3, #4
 800f59a:	697a      	ldr	r2, [r7, #20]
 800f59c:	4313      	orrs	r3, r2
 800f59e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	4a23      	ldr	r2, [pc, #140]	; (800f630 <TIM_OC2_SetConfig+0xe8>)
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	d003      	beq.n	800f5b0 <TIM_OC2_SetConfig+0x68>
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	4a22      	ldr	r2, [pc, #136]	; (800f634 <TIM_OC2_SetConfig+0xec>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d10d      	bne.n	800f5cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f5b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	68db      	ldr	r3, [r3, #12]
 800f5bc:	011b      	lsls	r3, r3, #4
 800f5be:	697a      	ldr	r2, [r7, #20]
 800f5c0:	4313      	orrs	r3, r2
 800f5c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f5ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	4a18      	ldr	r2, [pc, #96]	; (800f630 <TIM_OC2_SetConfig+0xe8>)
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d003      	beq.n	800f5dc <TIM_OC2_SetConfig+0x94>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	4a17      	ldr	r2, [pc, #92]	; (800f634 <TIM_OC2_SetConfig+0xec>)
 800f5d8:	4293      	cmp	r3, r2
 800f5da:	d113      	bne.n	800f604 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f5e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f5e4:	693b      	ldr	r3, [r7, #16]
 800f5e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f5ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	695b      	ldr	r3, [r3, #20]
 800f5f0:	009b      	lsls	r3, r3, #2
 800f5f2:	693a      	ldr	r2, [r7, #16]
 800f5f4:	4313      	orrs	r3, r2
 800f5f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	699b      	ldr	r3, [r3, #24]
 800f5fc:	009b      	lsls	r3, r3, #2
 800f5fe:	693a      	ldr	r2, [r7, #16]
 800f600:	4313      	orrs	r3, r2
 800f602:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	693a      	ldr	r2, [r7, #16]
 800f608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	68fa      	ldr	r2, [r7, #12]
 800f60e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	685a      	ldr	r2, [r3, #4]
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	697a      	ldr	r2, [r7, #20]
 800f61c:	621a      	str	r2, [r3, #32]
}
 800f61e:	bf00      	nop
 800f620:	371c      	adds	r7, #28
 800f622:	46bd      	mov	sp, r7
 800f624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f628:	4770      	bx	lr
 800f62a:	bf00      	nop
 800f62c:	feff8fff 	.word	0xfeff8fff
 800f630:	40010000 	.word	0x40010000
 800f634:	40010400 	.word	0x40010400

0800f638 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f638:	b480      	push	{r7}
 800f63a:	b087      	sub	sp, #28
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6a1b      	ldr	r3, [r3, #32]
 800f646:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6a1b      	ldr	r3, [r3, #32]
 800f652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	685b      	ldr	r3, [r3, #4]
 800f658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	69db      	ldr	r3, [r3, #28]
 800f65e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f660:	68fa      	ldr	r2, [r7, #12]
 800f662:	4b2d      	ldr	r3, [pc, #180]	; (800f718 <TIM_OC3_SetConfig+0xe0>)
 800f664:	4013      	ands	r3, r2
 800f666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f023 0303 	bic.w	r3, r3, #3
 800f66e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	68fa      	ldr	r2, [r7, #12]
 800f676:	4313      	orrs	r3, r2
 800f678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	689b      	ldr	r3, [r3, #8]
 800f686:	021b      	lsls	r3, r3, #8
 800f688:	697a      	ldr	r2, [r7, #20]
 800f68a:	4313      	orrs	r3, r2
 800f68c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	4a22      	ldr	r2, [pc, #136]	; (800f71c <TIM_OC3_SetConfig+0xe4>)
 800f692:	4293      	cmp	r3, r2
 800f694:	d003      	beq.n	800f69e <TIM_OC3_SetConfig+0x66>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	4a21      	ldr	r2, [pc, #132]	; (800f720 <TIM_OC3_SetConfig+0xe8>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d10d      	bne.n	800f6ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f6a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	68db      	ldr	r3, [r3, #12]
 800f6aa:	021b      	lsls	r3, r3, #8
 800f6ac:	697a      	ldr	r2, [r7, #20]
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f6b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	4a17      	ldr	r2, [pc, #92]	; (800f71c <TIM_OC3_SetConfig+0xe4>)
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d003      	beq.n	800f6ca <TIM_OC3_SetConfig+0x92>
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	4a16      	ldr	r2, [pc, #88]	; (800f720 <TIM_OC3_SetConfig+0xe8>)
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d113      	bne.n	800f6f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f6d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f6d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	695b      	ldr	r3, [r3, #20]
 800f6de:	011b      	lsls	r3, r3, #4
 800f6e0:	693a      	ldr	r2, [r7, #16]
 800f6e2:	4313      	orrs	r3, r2
 800f6e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	699b      	ldr	r3, [r3, #24]
 800f6ea:	011b      	lsls	r3, r3, #4
 800f6ec:	693a      	ldr	r2, [r7, #16]
 800f6ee:	4313      	orrs	r3, r2
 800f6f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	693a      	ldr	r2, [r7, #16]
 800f6f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	68fa      	ldr	r2, [r7, #12]
 800f6fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	685a      	ldr	r2, [r3, #4]
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	697a      	ldr	r2, [r7, #20]
 800f70a:	621a      	str	r2, [r3, #32]
}
 800f70c:	bf00      	nop
 800f70e:	371c      	adds	r7, #28
 800f710:	46bd      	mov	sp, r7
 800f712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f716:	4770      	bx	lr
 800f718:	fffeff8f 	.word	0xfffeff8f
 800f71c:	40010000 	.word	0x40010000
 800f720:	40010400 	.word	0x40010400

0800f724 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f724:	b480      	push	{r7}
 800f726:	b087      	sub	sp, #28
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6a1b      	ldr	r3, [r3, #32]
 800f732:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6a1b      	ldr	r3, [r3, #32]
 800f73e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	685b      	ldr	r3, [r3, #4]
 800f744:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	69db      	ldr	r3, [r3, #28]
 800f74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f74c:	68fa      	ldr	r2, [r7, #12]
 800f74e:	4b1e      	ldr	r3, [pc, #120]	; (800f7c8 <TIM_OC4_SetConfig+0xa4>)
 800f750:	4013      	ands	r3, r2
 800f752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f75a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	021b      	lsls	r3, r3, #8
 800f762:	68fa      	ldr	r2, [r7, #12]
 800f764:	4313      	orrs	r3, r2
 800f766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f76e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	689b      	ldr	r3, [r3, #8]
 800f774:	031b      	lsls	r3, r3, #12
 800f776:	693a      	ldr	r2, [r7, #16]
 800f778:	4313      	orrs	r3, r2
 800f77a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	4a13      	ldr	r2, [pc, #76]	; (800f7cc <TIM_OC4_SetConfig+0xa8>)
 800f780:	4293      	cmp	r3, r2
 800f782:	d003      	beq.n	800f78c <TIM_OC4_SetConfig+0x68>
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	4a12      	ldr	r2, [pc, #72]	; (800f7d0 <TIM_OC4_SetConfig+0xac>)
 800f788:	4293      	cmp	r3, r2
 800f78a:	d109      	bne.n	800f7a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f792:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	695b      	ldr	r3, [r3, #20]
 800f798:	019b      	lsls	r3, r3, #6
 800f79a:	697a      	ldr	r2, [r7, #20]
 800f79c:	4313      	orrs	r3, r2
 800f79e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	697a      	ldr	r2, [r7, #20]
 800f7a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	68fa      	ldr	r2, [r7, #12]
 800f7aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	685a      	ldr	r2, [r3, #4]
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	693a      	ldr	r2, [r7, #16]
 800f7b8:	621a      	str	r2, [r3, #32]
}
 800f7ba:	bf00      	nop
 800f7bc:	371c      	adds	r7, #28
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c4:	4770      	bx	lr
 800f7c6:	bf00      	nop
 800f7c8:	feff8fff 	.word	0xfeff8fff
 800f7cc:	40010000 	.word	0x40010000
 800f7d0:	40010400 	.word	0x40010400

0800f7d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b087      	sub	sp, #28
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
 800f7dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6a1b      	ldr	r3, [r3, #32]
 800f7e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6a1b      	ldr	r3, [r3, #32]
 800f7ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	685b      	ldr	r3, [r3, #4]
 800f7f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f7fc:	68fa      	ldr	r2, [r7, #12]
 800f7fe:	4b1b      	ldr	r3, [pc, #108]	; (800f86c <TIM_OC5_SetConfig+0x98>)
 800f800:	4013      	ands	r3, r2
 800f802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	68fa      	ldr	r2, [r7, #12]
 800f80a:	4313      	orrs	r3, r2
 800f80c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f814:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	689b      	ldr	r3, [r3, #8]
 800f81a:	041b      	lsls	r3, r3, #16
 800f81c:	693a      	ldr	r2, [r7, #16]
 800f81e:	4313      	orrs	r3, r2
 800f820:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	4a12      	ldr	r2, [pc, #72]	; (800f870 <TIM_OC5_SetConfig+0x9c>)
 800f826:	4293      	cmp	r3, r2
 800f828:	d003      	beq.n	800f832 <TIM_OC5_SetConfig+0x5e>
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	4a11      	ldr	r2, [pc, #68]	; (800f874 <TIM_OC5_SetConfig+0xa0>)
 800f82e:	4293      	cmp	r3, r2
 800f830:	d109      	bne.n	800f846 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f838:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	695b      	ldr	r3, [r3, #20]
 800f83e:	021b      	lsls	r3, r3, #8
 800f840:	697a      	ldr	r2, [r7, #20]
 800f842:	4313      	orrs	r3, r2
 800f844:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	697a      	ldr	r2, [r7, #20]
 800f84a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	68fa      	ldr	r2, [r7, #12]
 800f850:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	685a      	ldr	r2, [r3, #4]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	693a      	ldr	r2, [r7, #16]
 800f85e:	621a      	str	r2, [r3, #32]
}
 800f860:	bf00      	nop
 800f862:	371c      	adds	r7, #28
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr
 800f86c:	fffeff8f 	.word	0xfffeff8f
 800f870:	40010000 	.word	0x40010000
 800f874:	40010400 	.word	0x40010400

0800f878 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f878:	b480      	push	{r7}
 800f87a:	b087      	sub	sp, #28
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6a1b      	ldr	r3, [r3, #32]
 800f886:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	6a1b      	ldr	r3, [r3, #32]
 800f892:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	685b      	ldr	r3, [r3, #4]
 800f898:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f89e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f8a0:	68fa      	ldr	r2, [r7, #12]
 800f8a2:	4b1c      	ldr	r3, [pc, #112]	; (800f914 <TIM_OC6_SetConfig+0x9c>)
 800f8a4:	4013      	ands	r3, r2
 800f8a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	021b      	lsls	r3, r3, #8
 800f8ae:	68fa      	ldr	r2, [r7, #12]
 800f8b0:	4313      	orrs	r3, r2
 800f8b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f8b4:	693b      	ldr	r3, [r7, #16]
 800f8b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f8ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	689b      	ldr	r3, [r3, #8]
 800f8c0:	051b      	lsls	r3, r3, #20
 800f8c2:	693a      	ldr	r2, [r7, #16]
 800f8c4:	4313      	orrs	r3, r2
 800f8c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	4a13      	ldr	r2, [pc, #76]	; (800f918 <TIM_OC6_SetConfig+0xa0>)
 800f8cc:	4293      	cmp	r3, r2
 800f8ce:	d003      	beq.n	800f8d8 <TIM_OC6_SetConfig+0x60>
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	4a12      	ldr	r2, [pc, #72]	; (800f91c <TIM_OC6_SetConfig+0xa4>)
 800f8d4:	4293      	cmp	r3, r2
 800f8d6:	d109      	bne.n	800f8ec <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f8de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	695b      	ldr	r3, [r3, #20]
 800f8e4:	029b      	lsls	r3, r3, #10
 800f8e6:	697a      	ldr	r2, [r7, #20]
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	697a      	ldr	r2, [r7, #20]
 800f8f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	68fa      	ldr	r2, [r7, #12]
 800f8f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	685a      	ldr	r2, [r3, #4]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	693a      	ldr	r2, [r7, #16]
 800f904:	621a      	str	r2, [r3, #32]
}
 800f906:	bf00      	nop
 800f908:	371c      	adds	r7, #28
 800f90a:	46bd      	mov	sp, r7
 800f90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f910:	4770      	bx	lr
 800f912:	bf00      	nop
 800f914:	feff8fff 	.word	0xfeff8fff
 800f918:	40010000 	.word	0x40010000
 800f91c:	40010400 	.word	0x40010400

0800f920 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800f920:	b480      	push	{r7}
 800f922:	b087      	sub	sp, #28
 800f924:	af00      	add	r7, sp, #0
 800f926:	60f8      	str	r0, [r7, #12]
 800f928:	60b9      	str	r1, [r7, #8]
 800f92a:	607a      	str	r2, [r7, #4]
 800f92c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	6a1b      	ldr	r3, [r3, #32]
 800f932:	f023 0201 	bic.w	r2, r3, #1
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	699b      	ldr	r3, [r3, #24]
 800f93e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	6a1b      	ldr	r3, [r3, #32]
 800f944:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	4a28      	ldr	r2, [pc, #160]	; (800f9ec <TIM_TI1_SetConfig+0xcc>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d01b      	beq.n	800f986 <TIM_TI1_SetConfig+0x66>
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f954:	d017      	beq.n	800f986 <TIM_TI1_SetConfig+0x66>
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	4a25      	ldr	r2, [pc, #148]	; (800f9f0 <TIM_TI1_SetConfig+0xd0>)
 800f95a:	4293      	cmp	r3, r2
 800f95c:	d013      	beq.n	800f986 <TIM_TI1_SetConfig+0x66>
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	4a24      	ldr	r2, [pc, #144]	; (800f9f4 <TIM_TI1_SetConfig+0xd4>)
 800f962:	4293      	cmp	r3, r2
 800f964:	d00f      	beq.n	800f986 <TIM_TI1_SetConfig+0x66>
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	4a23      	ldr	r2, [pc, #140]	; (800f9f8 <TIM_TI1_SetConfig+0xd8>)
 800f96a:	4293      	cmp	r3, r2
 800f96c:	d00b      	beq.n	800f986 <TIM_TI1_SetConfig+0x66>
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	4a22      	ldr	r2, [pc, #136]	; (800f9fc <TIM_TI1_SetConfig+0xdc>)
 800f972:	4293      	cmp	r3, r2
 800f974:	d007      	beq.n	800f986 <TIM_TI1_SetConfig+0x66>
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	4a21      	ldr	r2, [pc, #132]	; (800fa00 <TIM_TI1_SetConfig+0xe0>)
 800f97a:	4293      	cmp	r3, r2
 800f97c:	d003      	beq.n	800f986 <TIM_TI1_SetConfig+0x66>
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	4a20      	ldr	r2, [pc, #128]	; (800fa04 <TIM_TI1_SetConfig+0xe4>)
 800f982:	4293      	cmp	r3, r2
 800f984:	d101      	bne.n	800f98a <TIM_TI1_SetConfig+0x6a>
 800f986:	2301      	movs	r3, #1
 800f988:	e000      	b.n	800f98c <TIM_TI1_SetConfig+0x6c>
 800f98a:	2300      	movs	r3, #0
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d008      	beq.n	800f9a2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800f990:	697b      	ldr	r3, [r7, #20]
 800f992:	f023 0303 	bic.w	r3, r3, #3
 800f996:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800f998:	697a      	ldr	r2, [r7, #20]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	4313      	orrs	r3, r2
 800f99e:	617b      	str	r3, [r7, #20]
 800f9a0:	e003      	b.n	800f9aa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	f043 0301 	orr.w	r3, r3, #1
 800f9a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f9b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	011b      	lsls	r3, r3, #4
 800f9b6:	b2db      	uxtb	r3, r3
 800f9b8:	697a      	ldr	r2, [r7, #20]
 800f9ba:	4313      	orrs	r3, r2
 800f9bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	f023 030a 	bic.w	r3, r3, #10
 800f9c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	f003 030a 	and.w	r3, r3, #10
 800f9cc:	693a      	ldr	r2, [r7, #16]
 800f9ce:	4313      	orrs	r3, r2
 800f9d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	697a      	ldr	r2, [r7, #20]
 800f9d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	693a      	ldr	r2, [r7, #16]
 800f9dc:	621a      	str	r2, [r3, #32]
}
 800f9de:	bf00      	nop
 800f9e0:	371c      	adds	r7, #28
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e8:	4770      	bx	lr
 800f9ea:	bf00      	nop
 800f9ec:	40010000 	.word	0x40010000
 800f9f0:	40000400 	.word	0x40000400
 800f9f4:	40000800 	.word	0x40000800
 800f9f8:	40000c00 	.word	0x40000c00
 800f9fc:	40010400 	.word	0x40010400
 800fa00:	40014000 	.word	0x40014000
 800fa04:	40001800 	.word	0x40001800

0800fa08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fa08:	b480      	push	{r7}
 800fa0a:	b087      	sub	sp, #28
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	60f8      	str	r0, [r7, #12]
 800fa10:	60b9      	str	r1, [r7, #8]
 800fa12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	6a1b      	ldr	r3, [r3, #32]
 800fa18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	6a1b      	ldr	r3, [r3, #32]
 800fa1e:	f023 0201 	bic.w	r2, r3, #1
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	699b      	ldr	r3, [r3, #24]
 800fa2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fa2c:	693b      	ldr	r3, [r7, #16]
 800fa2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fa32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	011b      	lsls	r3, r3, #4
 800fa38:	693a      	ldr	r2, [r7, #16]
 800fa3a:	4313      	orrs	r3, r2
 800fa3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	f023 030a 	bic.w	r3, r3, #10
 800fa44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fa46:	697a      	ldr	r2, [r7, #20]
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	4313      	orrs	r3, r2
 800fa4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	693a      	ldr	r2, [r7, #16]
 800fa52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	697a      	ldr	r2, [r7, #20]
 800fa58:	621a      	str	r2, [r3, #32]
}
 800fa5a:	bf00      	nop
 800fa5c:	371c      	adds	r7, #28
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa64:	4770      	bx	lr

0800fa66 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fa66:	b480      	push	{r7}
 800fa68:	b087      	sub	sp, #28
 800fa6a:	af00      	add	r7, sp, #0
 800fa6c:	60f8      	str	r0, [r7, #12]
 800fa6e:	60b9      	str	r1, [r7, #8]
 800fa70:	607a      	str	r2, [r7, #4]
 800fa72:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	6a1b      	ldr	r3, [r3, #32]
 800fa78:	f023 0210 	bic.w	r2, r3, #16
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	699b      	ldr	r3, [r3, #24]
 800fa84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6a1b      	ldr	r3, [r3, #32]
 800fa8a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	021b      	lsls	r3, r3, #8
 800fa98:	697a      	ldr	r2, [r7, #20]
 800fa9a:	4313      	orrs	r3, r2
 800fa9c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800faa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	031b      	lsls	r3, r3, #12
 800faaa:	b29b      	uxth	r3, r3
 800faac:	697a      	ldr	r2, [r7, #20]
 800faae:	4313      	orrs	r3, r2
 800fab0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fab8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	011b      	lsls	r3, r3, #4
 800fabe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800fac2:	693a      	ldr	r2, [r7, #16]
 800fac4:	4313      	orrs	r3, r2
 800fac6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	697a      	ldr	r2, [r7, #20]
 800facc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	693a      	ldr	r2, [r7, #16]
 800fad2:	621a      	str	r2, [r3, #32]
}
 800fad4:	bf00      	nop
 800fad6:	371c      	adds	r7, #28
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr

0800fae0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fae0:	b480      	push	{r7}
 800fae2:	b087      	sub	sp, #28
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	60f8      	str	r0, [r7, #12]
 800fae8:	60b9      	str	r1, [r7, #8]
 800faea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	6a1b      	ldr	r3, [r3, #32]
 800faf0:	f023 0210 	bic.w	r2, r3, #16
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	699b      	ldr	r3, [r3, #24]
 800fafc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	6a1b      	ldr	r3, [r3, #32]
 800fb02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fb0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	031b      	lsls	r3, r3, #12
 800fb10:	697a      	ldr	r2, [r7, #20]
 800fb12:	4313      	orrs	r3, r2
 800fb14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fb1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	011b      	lsls	r3, r3, #4
 800fb22:	693a      	ldr	r2, [r7, #16]
 800fb24:	4313      	orrs	r3, r2
 800fb26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	697a      	ldr	r2, [r7, #20]
 800fb2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	693a      	ldr	r2, [r7, #16]
 800fb32:	621a      	str	r2, [r3, #32]
}
 800fb34:	bf00      	nop
 800fb36:	371c      	adds	r7, #28
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3e:	4770      	bx	lr

0800fb40 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fb40:	b480      	push	{r7}
 800fb42:	b087      	sub	sp, #28
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	60f8      	str	r0, [r7, #12]
 800fb48:	60b9      	str	r1, [r7, #8]
 800fb4a:	607a      	str	r2, [r7, #4]
 800fb4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	6a1b      	ldr	r3, [r3, #32]
 800fb52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	69db      	ldr	r3, [r3, #28]
 800fb5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	6a1b      	ldr	r3, [r3, #32]
 800fb64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	f023 0303 	bic.w	r3, r3, #3
 800fb6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800fb6e:	697a      	ldr	r2, [r7, #20]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	4313      	orrs	r3, r2
 800fb74:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fb7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	011b      	lsls	r3, r3, #4
 800fb82:	b2db      	uxtb	r3, r3
 800fb84:	697a      	ldr	r2, [r7, #20]
 800fb86:	4313      	orrs	r3, r2
 800fb88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800fb90:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	021b      	lsls	r3, r3, #8
 800fb96:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800fb9a:	693a      	ldr	r2, [r7, #16]
 800fb9c:	4313      	orrs	r3, r2
 800fb9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	697a      	ldr	r2, [r7, #20]
 800fba4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	693a      	ldr	r2, [r7, #16]
 800fbaa:	621a      	str	r2, [r3, #32]
}
 800fbac:	bf00      	nop
 800fbae:	371c      	adds	r7, #28
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb6:	4770      	bx	lr

0800fbb8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b087      	sub	sp, #28
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	60f8      	str	r0, [r7, #12]
 800fbc0:	60b9      	str	r1, [r7, #8]
 800fbc2:	607a      	str	r2, [r7, #4]
 800fbc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	6a1b      	ldr	r3, [r3, #32]
 800fbca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	69db      	ldr	r3, [r3, #28]
 800fbd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	6a1b      	ldr	r3, [r3, #32]
 800fbdc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fbe4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	021b      	lsls	r3, r3, #8
 800fbea:	697a      	ldr	r2, [r7, #20]
 800fbec:	4313      	orrs	r3, r2
 800fbee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fbf6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	031b      	lsls	r3, r3, #12
 800fbfc:	b29b      	uxth	r3, r3
 800fbfe:	697a      	ldr	r2, [r7, #20]
 800fc00:	4313      	orrs	r3, r2
 800fc02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800fc0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	031b      	lsls	r3, r3, #12
 800fc10:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800fc14:	693a      	ldr	r2, [r7, #16]
 800fc16:	4313      	orrs	r3, r2
 800fc18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	697a      	ldr	r2, [r7, #20]
 800fc1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	693a      	ldr	r2, [r7, #16]
 800fc24:	621a      	str	r2, [r3, #32]
}
 800fc26:	bf00      	nop
 800fc28:	371c      	adds	r7, #28
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc30:	4770      	bx	lr

0800fc32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fc32:	b480      	push	{r7}
 800fc34:	b085      	sub	sp, #20
 800fc36:	af00      	add	r7, sp, #0
 800fc38:	6078      	str	r0, [r7, #4]
 800fc3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	689b      	ldr	r3, [r3, #8]
 800fc40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fc4a:	683a      	ldr	r2, [r7, #0]
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	4313      	orrs	r3, r2
 800fc50:	f043 0307 	orr.w	r3, r3, #7
 800fc54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	68fa      	ldr	r2, [r7, #12]
 800fc5a:	609a      	str	r2, [r3, #8]
}
 800fc5c:	bf00      	nop
 800fc5e:	3714      	adds	r7, #20
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr

0800fc68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b087      	sub	sp, #28
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	60f8      	str	r0, [r7, #12]
 800fc70:	60b9      	str	r1, [r7, #8]
 800fc72:	607a      	str	r2, [r7, #4]
 800fc74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	689b      	ldr	r3, [r3, #8]
 800fc7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fc82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	021a      	lsls	r2, r3, #8
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	431a      	orrs	r2, r3
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	4313      	orrs	r3, r2
 800fc90:	697a      	ldr	r2, [r7, #20]
 800fc92:	4313      	orrs	r3, r2
 800fc94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	697a      	ldr	r2, [r7, #20]
 800fc9a:	609a      	str	r2, [r3, #8]
}
 800fc9c:	bf00      	nop
 800fc9e:	371c      	adds	r7, #28
 800fca0:	46bd      	mov	sp, r7
 800fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca6:	4770      	bx	lr

0800fca8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fca8:	b480      	push	{r7}
 800fcaa:	b087      	sub	sp, #28
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	60f8      	str	r0, [r7, #12]
 800fcb0:	60b9      	str	r1, [r7, #8]
 800fcb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	f003 031f 	and.w	r3, r3, #31
 800fcba:	2201      	movs	r2, #1
 800fcbc:	fa02 f303 	lsl.w	r3, r2, r3
 800fcc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	6a1a      	ldr	r2, [r3, #32]
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	43db      	mvns	r3, r3
 800fcca:	401a      	ands	r2, r3
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	6a1a      	ldr	r2, [r3, #32]
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	f003 031f 	and.w	r3, r3, #31
 800fcda:	6879      	ldr	r1, [r7, #4]
 800fcdc:	fa01 f303 	lsl.w	r3, r1, r3
 800fce0:	431a      	orrs	r2, r3
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	621a      	str	r2, [r3, #32]
}
 800fce6:	bf00      	nop
 800fce8:	371c      	adds	r7, #28
 800fcea:	46bd      	mov	sp, r7
 800fcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf0:	4770      	bx	lr
	...

0800fcf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b085      	sub	sp, #20
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd04:	2b01      	cmp	r3, #1
 800fd06:	d101      	bne.n	800fd0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fd08:	2302      	movs	r3, #2
 800fd0a:	e06d      	b.n	800fde8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2201      	movs	r2, #1
 800fd10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2202      	movs	r2, #2
 800fd18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	685b      	ldr	r3, [r3, #4]
 800fd22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	689b      	ldr	r3, [r3, #8]
 800fd2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	4a30      	ldr	r2, [pc, #192]	; (800fdf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fd32:	4293      	cmp	r3, r2
 800fd34:	d004      	beq.n	800fd40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	4a2f      	ldr	r2, [pc, #188]	; (800fdf8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fd3c:	4293      	cmp	r3, r2
 800fd3e:	d108      	bne.n	800fd52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fd46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	685b      	ldr	r3, [r3, #4]
 800fd4c:	68fa      	ldr	r2, [r7, #12]
 800fd4e:	4313      	orrs	r3, r2
 800fd50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	68fa      	ldr	r2, [r7, #12]
 800fd60:	4313      	orrs	r3, r2
 800fd62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	68fa      	ldr	r2, [r7, #12]
 800fd6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4a20      	ldr	r2, [pc, #128]	; (800fdf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d022      	beq.n	800fdbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd7e:	d01d      	beq.n	800fdbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	4a1d      	ldr	r2, [pc, #116]	; (800fdfc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fd86:	4293      	cmp	r3, r2
 800fd88:	d018      	beq.n	800fdbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	4a1c      	ldr	r2, [pc, #112]	; (800fe00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fd90:	4293      	cmp	r3, r2
 800fd92:	d013      	beq.n	800fdbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	4a1a      	ldr	r2, [pc, #104]	; (800fe04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fd9a:	4293      	cmp	r3, r2
 800fd9c:	d00e      	beq.n	800fdbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	4a15      	ldr	r2, [pc, #84]	; (800fdf8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fda4:	4293      	cmp	r3, r2
 800fda6:	d009      	beq.n	800fdbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	4a16      	ldr	r2, [pc, #88]	; (800fe08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	d004      	beq.n	800fdbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	4a15      	ldr	r2, [pc, #84]	; (800fe0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fdb8:	4293      	cmp	r3, r2
 800fdba:	d10c      	bne.n	800fdd6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fdc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	689b      	ldr	r3, [r3, #8]
 800fdc8:	68ba      	ldr	r2, [r7, #8]
 800fdca:	4313      	orrs	r3, r2
 800fdcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	68ba      	ldr	r2, [r7, #8]
 800fdd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2201      	movs	r2, #1
 800fdda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2200      	movs	r2, #0
 800fde2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fde6:	2300      	movs	r3, #0
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	3714      	adds	r7, #20
 800fdec:	46bd      	mov	sp, r7
 800fdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf2:	4770      	bx	lr
 800fdf4:	40010000 	.word	0x40010000
 800fdf8:	40010400 	.word	0x40010400
 800fdfc:	40000400 	.word	0x40000400
 800fe00:	40000800 	.word	0x40000800
 800fe04:	40000c00 	.word	0x40000c00
 800fe08:	40014000 	.word	0x40014000
 800fe0c:	40001800 	.word	0x40001800

0800fe10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b085      	sub	sp, #20
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
 800fe18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe24:	2b01      	cmp	r3, #1
 800fe26:	d101      	bne.n	800fe2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fe28:	2302      	movs	r3, #2
 800fe2a:	e065      	b.n	800fef8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2201      	movs	r2, #1
 800fe30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	68db      	ldr	r3, [r3, #12]
 800fe3e:	4313      	orrs	r3, r2
 800fe40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	689b      	ldr	r3, [r3, #8]
 800fe4c:	4313      	orrs	r3, r2
 800fe4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	685b      	ldr	r3, [r3, #4]
 800fe5a:	4313      	orrs	r3, r2
 800fe5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	4313      	orrs	r3, r2
 800fe6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	691b      	ldr	r3, [r3, #16]
 800fe76:	4313      	orrs	r3, r2
 800fe78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	695b      	ldr	r3, [r3, #20]
 800fe84:	4313      	orrs	r3, r2
 800fe86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe92:	4313      	orrs	r3, r2
 800fe94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	699b      	ldr	r3, [r3, #24]
 800fea0:	041b      	lsls	r3, r3, #16
 800fea2:	4313      	orrs	r3, r2
 800fea4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	4a16      	ldr	r2, [pc, #88]	; (800ff04 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800feac:	4293      	cmp	r3, r2
 800feae:	d004      	beq.n	800feba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	4a14      	ldr	r2, [pc, #80]	; (800ff08 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800feb6:	4293      	cmp	r3, r2
 800feb8:	d115      	bne.n	800fee6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fec4:	051b      	lsls	r3, r3, #20
 800fec6:	4313      	orrs	r3, r2
 800fec8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	69db      	ldr	r3, [r3, #28]
 800fed4:	4313      	orrs	r3, r2
 800fed6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	6a1b      	ldr	r3, [r3, #32]
 800fee2:	4313      	orrs	r3, r2
 800fee4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	68fa      	ldr	r2, [r7, #12]
 800feec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2200      	movs	r2, #0
 800fef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fef6:	2300      	movs	r3, #0
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	3714      	adds	r7, #20
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr
 800ff04:	40010000 	.word	0x40010000
 800ff08:	40010400 	.word	0x40010400

0800ff0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b083      	sub	sp, #12
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ff14:	bf00      	nop
 800ff16:	370c      	adds	r7, #12
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr

0800ff20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ff20:	b480      	push	{r7}
 800ff22:	b083      	sub	sp, #12
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ff28:	bf00      	nop
 800ff2a:	370c      	adds	r7, #12
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff32:	4770      	bx	lr

0800ff34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ff34:	b480      	push	{r7}
 800ff36:	b083      	sub	sp, #12
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ff3c:	bf00      	nop
 800ff3e:	370c      	adds	r7, #12
 800ff40:	46bd      	mov	sp, r7
 800ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff46:	4770      	bx	lr

0800ff48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b082      	sub	sp, #8
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d101      	bne.n	800ff5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff56:	2301      	movs	r3, #1
 800ff58:	e040      	b.n	800ffdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d106      	bne.n	800ff70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2200      	movs	r2, #0
 800ff66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f7f6 fc38 	bl	80067e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2224      	movs	r2, #36	; 0x24
 800ff74:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	681a      	ldr	r2, [r3, #0]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	f022 0201 	bic.w	r2, r2, #1
 800ff84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	f000 fc2a 	bl	80107e0 <UART_SetConfig>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	2b01      	cmp	r3, #1
 800ff90:	d101      	bne.n	800ff96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ff92:	2301      	movs	r3, #1
 800ff94:	e022      	b.n	800ffdc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d002      	beq.n	800ffa4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f000 fe82 	bl	8010ca8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	685a      	ldr	r2, [r3, #4]
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ffb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	689a      	ldr	r2, [r3, #8]
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ffc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	681a      	ldr	r2, [r3, #0]
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	f042 0201 	orr.w	r2, r2, #1
 800ffd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f000 ff09 	bl	8010dec <UART_CheckIdleState>
 800ffda:	4603      	mov	r3, r0
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3708      	adds	r7, #8
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b08a      	sub	sp, #40	; 0x28
 800ffe8:	af02      	add	r7, sp, #8
 800ffea:	60f8      	str	r0, [r7, #12]
 800ffec:	60b9      	str	r1, [r7, #8]
 800ffee:	603b      	str	r3, [r7, #0]
 800fff0:	4613      	mov	r3, r2
 800fff2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fff8:	2b20      	cmp	r3, #32
 800fffa:	d171      	bne.n	80100e0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800fffc:	68bb      	ldr	r3, [r7, #8]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d002      	beq.n	8010008 <HAL_UART_Transmit+0x24>
 8010002:	88fb      	ldrh	r3, [r7, #6]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d101      	bne.n	801000c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8010008:	2301      	movs	r3, #1
 801000a:	e06a      	b.n	80100e2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	2200      	movs	r2, #0
 8010010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	2221      	movs	r2, #33	; 0x21
 8010018:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801001a:	f7fa fd3b 	bl	800aa94 <HAL_GetTick>
 801001e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	88fa      	ldrh	r2, [r7, #6]
 8010024:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	88fa      	ldrh	r2, [r7, #6]
 801002c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	689b      	ldr	r3, [r3, #8]
 8010034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010038:	d108      	bne.n	801004c <HAL_UART_Transmit+0x68>
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	691b      	ldr	r3, [r3, #16]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d104      	bne.n	801004c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8010042:	2300      	movs	r3, #0
 8010044:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	61bb      	str	r3, [r7, #24]
 801004a:	e003      	b.n	8010054 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010050:	2300      	movs	r3, #0
 8010052:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010054:	e02c      	b.n	80100b0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	9300      	str	r3, [sp, #0]
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	2200      	movs	r2, #0
 801005e:	2180      	movs	r1, #128	; 0x80
 8010060:	68f8      	ldr	r0, [r7, #12]
 8010062:	f000 fefa 	bl	8010e5a <UART_WaitOnFlagUntilTimeout>
 8010066:	4603      	mov	r3, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	d001      	beq.n	8010070 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 801006c:	2303      	movs	r3, #3
 801006e:	e038      	b.n	80100e2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8010070:	69fb      	ldr	r3, [r7, #28]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d10b      	bne.n	801008e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010076:	69bb      	ldr	r3, [r7, #24]
 8010078:	881b      	ldrh	r3, [r3, #0]
 801007a:	461a      	mov	r2, r3
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010084:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010086:	69bb      	ldr	r3, [r7, #24]
 8010088:	3302      	adds	r3, #2
 801008a:	61bb      	str	r3, [r7, #24]
 801008c:	e007      	b.n	801009e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801008e:	69fb      	ldr	r3, [r7, #28]
 8010090:	781a      	ldrb	r2, [r3, #0]
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010098:	69fb      	ldr	r3, [r7, #28]
 801009a:	3301      	adds	r3, #1
 801009c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80100a4:	b29b      	uxth	r3, r3
 80100a6:	3b01      	subs	r3, #1
 80100a8:	b29a      	uxth	r2, r3
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d1cc      	bne.n	8010056 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	9300      	str	r3, [sp, #0]
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	2200      	movs	r2, #0
 80100c4:	2140      	movs	r1, #64	; 0x40
 80100c6:	68f8      	ldr	r0, [r7, #12]
 80100c8:	f000 fec7 	bl	8010e5a <UART_WaitOnFlagUntilTimeout>
 80100cc:	4603      	mov	r3, r0
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d001      	beq.n	80100d6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80100d2:	2303      	movs	r3, #3
 80100d4:	e005      	b.n	80100e2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2220      	movs	r2, #32
 80100da:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80100dc:	2300      	movs	r3, #0
 80100de:	e000      	b.n	80100e2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80100e0:	2302      	movs	r3, #2
  }
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3720      	adds	r7, #32
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}

080100ea <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80100ea:	b580      	push	{r7, lr}
 80100ec:	b08a      	sub	sp, #40	; 0x28
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	60f8      	str	r0, [r7, #12]
 80100f2:	60b9      	str	r1, [r7, #8]
 80100f4:	4613      	mov	r3, r2
 80100f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100fe:	2b20      	cmp	r3, #32
 8010100:	d132      	bne.n	8010168 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d002      	beq.n	801010e <HAL_UART_Receive_IT+0x24>
 8010108:	88fb      	ldrh	r3, [r7, #6]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d101      	bne.n	8010112 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801010e:	2301      	movs	r3, #1
 8010110:	e02b      	b.n	801016a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	2200      	movs	r2, #0
 8010116:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	685b      	ldr	r3, [r3, #4]
 801011e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010122:	2b00      	cmp	r3, #0
 8010124:	d018      	beq.n	8010158 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801012c:	697b      	ldr	r3, [r7, #20]
 801012e:	e853 3f00 	ldrex	r3, [r3]
 8010132:	613b      	str	r3, [r7, #16]
   return(result);
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801013a:	627b      	str	r3, [r7, #36]	; 0x24
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	461a      	mov	r2, r3
 8010142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010144:	623b      	str	r3, [r7, #32]
 8010146:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010148:	69f9      	ldr	r1, [r7, #28]
 801014a:	6a3a      	ldr	r2, [r7, #32]
 801014c:	e841 2300 	strex	r3, r2, [r1]
 8010150:	61bb      	str	r3, [r7, #24]
   return(result);
 8010152:	69bb      	ldr	r3, [r7, #24]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d1e6      	bne.n	8010126 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010158:	88fb      	ldrh	r3, [r7, #6]
 801015a:	461a      	mov	r2, r3
 801015c:	68b9      	ldr	r1, [r7, #8]
 801015e:	68f8      	ldr	r0, [r7, #12]
 8010160:	f000 ff42 	bl	8010fe8 <UART_Start_Receive_IT>
 8010164:	4603      	mov	r3, r0
 8010166:	e000      	b.n	801016a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8010168:	2302      	movs	r3, #2
  }
}
 801016a:	4618      	mov	r0, r3
 801016c:	3728      	adds	r7, #40	; 0x28
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}

08010172 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010172:	b580      	push	{r7, lr}
 8010174:	b08a      	sub	sp, #40	; 0x28
 8010176:	af00      	add	r7, sp, #0
 8010178:	60f8      	str	r0, [r7, #12]
 801017a:	60b9      	str	r1, [r7, #8]
 801017c:	4613      	mov	r3, r2
 801017e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010186:	2b20      	cmp	r3, #32
 8010188:	d132      	bne.n	80101f0 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d002      	beq.n	8010196 <HAL_UART_Receive_DMA+0x24>
 8010190:	88fb      	ldrh	r3, [r7, #6]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d101      	bne.n	801019a <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8010196:	2301      	movs	r3, #1
 8010198:	e02b      	b.n	80101f2 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	2200      	movs	r2, #0
 801019e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	685b      	ldr	r3, [r3, #4]
 80101a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d018      	beq.n	80101e0 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	e853 3f00 	ldrex	r3, [r3]
 80101ba:	613b      	str	r3, [r7, #16]
   return(result);
 80101bc:	693b      	ldr	r3, [r7, #16]
 80101be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80101c2:	627b      	str	r3, [r7, #36]	; 0x24
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	461a      	mov	r2, r3
 80101ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101cc:	623b      	str	r3, [r7, #32]
 80101ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101d0:	69f9      	ldr	r1, [r7, #28]
 80101d2:	6a3a      	ldr	r2, [r7, #32]
 80101d4:	e841 2300 	strex	r3, r2, [r1]
 80101d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80101da:	69bb      	ldr	r3, [r7, #24]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d1e6      	bne.n	80101ae <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80101e0:	88fb      	ldrh	r3, [r7, #6]
 80101e2:	461a      	mov	r2, r3
 80101e4:	68b9      	ldr	r1, [r7, #8]
 80101e6:	68f8      	ldr	r0, [r7, #12]
 80101e8:	f000 ffc4 	bl	8011174 <UART_Start_Receive_DMA>
 80101ec:	4603      	mov	r3, r0
 80101ee:	e000      	b.n	80101f2 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80101f0:	2302      	movs	r3, #2
  }
}
 80101f2:	4618      	mov	r0, r3
 80101f4:	3728      	adds	r7, #40	; 0x28
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}
	...

080101fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b0ba      	sub	sp, #232	; 0xe8
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	69db      	ldr	r3, [r3, #28]
 801020a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	689b      	ldr	r3, [r3, #8]
 801021e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010222:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010226:	f640 030f 	movw	r3, #2063	; 0x80f
 801022a:	4013      	ands	r3, r2
 801022c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010234:	2b00      	cmp	r3, #0
 8010236:	d115      	bne.n	8010264 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8010238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801023c:	f003 0320 	and.w	r3, r3, #32
 8010240:	2b00      	cmp	r3, #0
 8010242:	d00f      	beq.n	8010264 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8010244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010248:	f003 0320 	and.w	r3, r3, #32
 801024c:	2b00      	cmp	r3, #0
 801024e:	d009      	beq.n	8010264 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010254:	2b00      	cmp	r3, #0
 8010256:	f000 8297 	beq.w	8010788 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	4798      	blx	r3
      }
      return;
 8010262:	e291      	b.n	8010788 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010264:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010268:	2b00      	cmp	r3, #0
 801026a:	f000 8117 	beq.w	801049c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801026e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010272:	f003 0301 	and.w	r3, r3, #1
 8010276:	2b00      	cmp	r3, #0
 8010278:	d106      	bne.n	8010288 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801027a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801027e:	4b85      	ldr	r3, [pc, #532]	; (8010494 <HAL_UART_IRQHandler+0x298>)
 8010280:	4013      	ands	r3, r2
 8010282:	2b00      	cmp	r3, #0
 8010284:	f000 810a 	beq.w	801049c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801028c:	f003 0301 	and.w	r3, r3, #1
 8010290:	2b00      	cmp	r3, #0
 8010292:	d011      	beq.n	80102b8 <HAL_UART_IRQHandler+0xbc>
 8010294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801029c:	2b00      	cmp	r3, #0
 801029e:	d00b      	beq.n	80102b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	2201      	movs	r2, #1
 80102a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102ae:	f043 0201 	orr.w	r2, r3, #1
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102bc:	f003 0302 	and.w	r3, r3, #2
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d011      	beq.n	80102e8 <HAL_UART_IRQHandler+0xec>
 80102c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80102c8:	f003 0301 	and.w	r3, r3, #1
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d00b      	beq.n	80102e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	2202      	movs	r2, #2
 80102d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102de:	f043 0204 	orr.w	r2, r3, #4
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102ec:	f003 0304 	and.w	r3, r3, #4
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d011      	beq.n	8010318 <HAL_UART_IRQHandler+0x11c>
 80102f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80102f8:	f003 0301 	and.w	r3, r3, #1
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d00b      	beq.n	8010318 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	2204      	movs	r2, #4
 8010306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801030e:	f043 0202 	orr.w	r2, r3, #2
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801031c:	f003 0308 	and.w	r3, r3, #8
 8010320:	2b00      	cmp	r3, #0
 8010322:	d017      	beq.n	8010354 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010328:	f003 0320 	and.w	r3, r3, #32
 801032c:	2b00      	cmp	r3, #0
 801032e:	d105      	bne.n	801033c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8010330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010334:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010338:	2b00      	cmp	r3, #0
 801033a:	d00b      	beq.n	8010354 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	2208      	movs	r2, #8
 8010342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801034a:	f043 0208 	orr.w	r2, r3, #8
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801035c:	2b00      	cmp	r3, #0
 801035e:	d012      	beq.n	8010386 <HAL_UART_IRQHandler+0x18a>
 8010360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010364:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010368:	2b00      	cmp	r3, #0
 801036a:	d00c      	beq.n	8010386 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010374:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801037c:	f043 0220 	orr.w	r2, r3, #32
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801038c:	2b00      	cmp	r3, #0
 801038e:	f000 81fd 	beq.w	801078c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8010392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010396:	f003 0320 	and.w	r3, r3, #32
 801039a:	2b00      	cmp	r3, #0
 801039c:	d00d      	beq.n	80103ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801039e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80103a2:	f003 0320 	and.w	r3, r3, #32
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d007      	beq.n	80103ba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d003      	beq.n	80103ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	689b      	ldr	r3, [r3, #8]
 80103ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103ce:	2b40      	cmp	r3, #64	; 0x40
 80103d0:	d005      	beq.n	80103de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80103d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80103d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d04f      	beq.n	801047e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80103de:	6878      	ldr	r0, [r7, #4]
 80103e0:	f000 ff8e 	bl	8011300 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	689b      	ldr	r3, [r3, #8]
 80103ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103ee:	2b40      	cmp	r3, #64	; 0x40
 80103f0:	d141      	bne.n	8010476 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	3308      	adds	r3, #8
 80103f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010400:	e853 3f00 	ldrex	r3, [r3]
 8010404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010408:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801040c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010410:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	3308      	adds	r3, #8
 801041a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801041e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010422:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010426:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801042a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801042e:	e841 2300 	strex	r3, r2, [r1]
 8010432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010436:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801043a:	2b00      	cmp	r3, #0
 801043c:	d1d9      	bne.n	80103f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010442:	2b00      	cmp	r3, #0
 8010444:	d013      	beq.n	801046e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801044a:	4a13      	ldr	r2, [pc, #76]	; (8010498 <HAL_UART_IRQHandler+0x29c>)
 801044c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010452:	4618      	mov	r0, r3
 8010454:	f7fa fdae 	bl	800afb4 <HAL_DMA_Abort_IT>
 8010458:	4603      	mov	r3, r0
 801045a:	2b00      	cmp	r3, #0
 801045c:	d017      	beq.n	801048e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010464:	687a      	ldr	r2, [r7, #4]
 8010466:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8010468:	4610      	mov	r0, r2
 801046a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801046c:	e00f      	b.n	801048e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f7f3 fd4e 	bl	8003f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010474:	e00b      	b.n	801048e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f7f3 fd4a 	bl	8003f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801047c:	e007      	b.n	801048e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f7f3 fd46 	bl	8003f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2200      	movs	r2, #0
 8010488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 801048c:	e17e      	b.n	801078c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801048e:	bf00      	nop
    return;
 8010490:	e17c      	b.n	801078c <HAL_UART_IRQHandler+0x590>
 8010492:	bf00      	nop
 8010494:	04000120 	.word	0x04000120
 8010498:	080115ad 	.word	0x080115ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80104a0:	2b01      	cmp	r3, #1
 80104a2:	f040 814c 	bne.w	801073e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80104a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80104aa:	f003 0310 	and.w	r3, r3, #16
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	f000 8145 	beq.w	801073e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80104b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80104b8:	f003 0310 	and.w	r3, r3, #16
 80104bc:	2b00      	cmp	r3, #0
 80104be:	f000 813e 	beq.w	801073e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	2210      	movs	r2, #16
 80104c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	689b      	ldr	r3, [r3, #8]
 80104d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104d4:	2b40      	cmp	r3, #64	; 0x40
 80104d6:	f040 80b6 	bne.w	8010646 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80104e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	f000 8150 	beq.w	8010790 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80104f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80104fa:	429a      	cmp	r2, r3
 80104fc:	f080 8148 	bcs.w	8010790 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010506:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801050e:	69db      	ldr	r3, [r3, #28]
 8010510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010514:	f000 8086 	beq.w	8010624 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010520:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010524:	e853 3f00 	ldrex	r3, [r3]
 8010528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801052c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010534:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	461a      	mov	r2, r3
 801053e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010542:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010546:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801054a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801054e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010552:	e841 2300 	strex	r3, r2, [r1]
 8010556:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801055a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801055e:	2b00      	cmp	r3, #0
 8010560:	d1da      	bne.n	8010518 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	3308      	adds	r3, #8
 8010568:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801056a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801056c:	e853 3f00 	ldrex	r3, [r3]
 8010570:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010572:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010574:	f023 0301 	bic.w	r3, r3, #1
 8010578:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	3308      	adds	r3, #8
 8010582:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010586:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801058a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801058c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801058e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010592:	e841 2300 	strex	r3, r2, [r1]
 8010596:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801059a:	2b00      	cmp	r3, #0
 801059c:	d1e1      	bne.n	8010562 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	3308      	adds	r3, #8
 80105a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105a8:	e853 3f00 	ldrex	r3, [r3]
 80105ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80105ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	3308      	adds	r3, #8
 80105be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80105c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80105c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80105c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80105ca:	e841 2300 	strex	r3, r2, [r1]
 80105ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80105d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d1e3      	bne.n	801059e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2220      	movs	r2, #32
 80105da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2200      	movs	r2, #0
 80105e2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105ec:	e853 3f00 	ldrex	r3, [r3]
 80105f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80105f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105f4:	f023 0310 	bic.w	r3, r3, #16
 80105f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	461a      	mov	r2, r3
 8010602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010606:	65bb      	str	r3, [r7, #88]	; 0x58
 8010608:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801060a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801060c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801060e:	e841 2300 	strex	r3, r2, [r1]
 8010612:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010616:	2b00      	cmp	r3, #0
 8010618:	d1e4      	bne.n	80105e4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801061e:	4618      	mov	r0, r3
 8010620:	f7fa fc58 	bl	800aed4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2202      	movs	r2, #2
 8010628:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010636:	b29b      	uxth	r3, r3
 8010638:	1ad3      	subs	r3, r2, r3
 801063a:	b29b      	uxth	r3, r3
 801063c:	4619      	mov	r1, r3
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f000 f8c2 	bl	80107c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010644:	e0a4      	b.n	8010790 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010652:	b29b      	uxth	r3, r3
 8010654:	1ad3      	subs	r3, r2, r3
 8010656:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010660:	b29b      	uxth	r3, r3
 8010662:	2b00      	cmp	r3, #0
 8010664:	f000 8096 	beq.w	8010794 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8010668:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801066c:	2b00      	cmp	r3, #0
 801066e:	f000 8091 	beq.w	8010794 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801067a:	e853 3f00 	ldrex	r3, [r3]
 801067e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010682:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010686:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	461a      	mov	r2, r3
 8010690:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010694:	647b      	str	r3, [r7, #68]	; 0x44
 8010696:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010698:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801069a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801069c:	e841 2300 	strex	r3, r2, [r1]
 80106a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80106a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d1e4      	bne.n	8010672 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	3308      	adds	r3, #8
 80106ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b2:	e853 3f00 	ldrex	r3, [r3]
 80106b6:	623b      	str	r3, [r7, #32]
   return(result);
 80106b8:	6a3b      	ldr	r3, [r7, #32]
 80106ba:	f023 0301 	bic.w	r3, r3, #1
 80106be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	3308      	adds	r3, #8
 80106c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80106cc:	633a      	str	r2, [r7, #48]	; 0x30
 80106ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80106d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106d4:	e841 2300 	strex	r3, r2, [r1]
 80106d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80106da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d1e3      	bne.n	80106a8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2220      	movs	r2, #32
 80106e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2200      	movs	r2, #0
 80106ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2200      	movs	r2, #0
 80106f2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106fa:	693b      	ldr	r3, [r7, #16]
 80106fc:	e853 3f00 	ldrex	r3, [r3]
 8010700:	60fb      	str	r3, [r7, #12]
   return(result);
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	f023 0310 	bic.w	r3, r3, #16
 8010708:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	461a      	mov	r2, r3
 8010712:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010716:	61fb      	str	r3, [r7, #28]
 8010718:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801071a:	69b9      	ldr	r1, [r7, #24]
 801071c:	69fa      	ldr	r2, [r7, #28]
 801071e:	e841 2300 	strex	r3, r2, [r1]
 8010722:	617b      	str	r3, [r7, #20]
   return(result);
 8010724:	697b      	ldr	r3, [r7, #20]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d1e4      	bne.n	80106f4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2202      	movs	r2, #2
 801072e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010730:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010734:	4619      	mov	r1, r3
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f000 f846 	bl	80107c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801073c:	e02a      	b.n	8010794 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801073e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010746:	2b00      	cmp	r3, #0
 8010748:	d00e      	beq.n	8010768 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801074a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801074e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010752:	2b00      	cmp	r3, #0
 8010754:	d008      	beq.n	8010768 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801075a:	2b00      	cmp	r3, #0
 801075c:	d01c      	beq.n	8010798 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	4798      	blx	r3
    }
    return;
 8010766:	e017      	b.n	8010798 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801076c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010770:	2b00      	cmp	r3, #0
 8010772:	d012      	beq.n	801079a <HAL_UART_IRQHandler+0x59e>
 8010774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801077c:	2b00      	cmp	r3, #0
 801077e:	d00c      	beq.n	801079a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8010780:	6878      	ldr	r0, [r7, #4]
 8010782:	f000 ff29 	bl	80115d8 <UART_EndTransmit_IT>
    return;
 8010786:	e008      	b.n	801079a <HAL_UART_IRQHandler+0x59e>
      return;
 8010788:	bf00      	nop
 801078a:	e006      	b.n	801079a <HAL_UART_IRQHandler+0x59e>
    return;
 801078c:	bf00      	nop
 801078e:	e004      	b.n	801079a <HAL_UART_IRQHandler+0x59e>
      return;
 8010790:	bf00      	nop
 8010792:	e002      	b.n	801079a <HAL_UART_IRQHandler+0x59e>
      return;
 8010794:	bf00      	nop
 8010796:	e000      	b.n	801079a <HAL_UART_IRQHandler+0x59e>
    return;
 8010798:	bf00      	nop
  }

}
 801079a:	37e8      	adds	r7, #232	; 0xe8
 801079c:	46bd      	mov	sp, r7
 801079e:	bd80      	pop	{r7, pc}

080107a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b083      	sub	sp, #12
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80107a8:	bf00      	nop
 80107aa:	370c      	adds	r7, #12
 80107ac:	46bd      	mov	sp, r7
 80107ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b2:	4770      	bx	lr

080107b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80107b4:	b480      	push	{r7}
 80107b6:	b083      	sub	sp, #12
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80107bc:	bf00      	nop
 80107be:	370c      	adds	r7, #12
 80107c0:	46bd      	mov	sp, r7
 80107c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c6:	4770      	bx	lr

080107c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80107c8:	b480      	push	{r7}
 80107ca:	b083      	sub	sp, #12
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
 80107d0:	460b      	mov	r3, r1
 80107d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80107d4:	bf00      	nop
 80107d6:	370c      	adds	r7, #12
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr

080107e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b088      	sub	sp, #32
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80107e8:	2300      	movs	r3, #0
 80107ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	689a      	ldr	r2, [r3, #8]
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	691b      	ldr	r3, [r3, #16]
 80107f4:	431a      	orrs	r2, r3
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	695b      	ldr	r3, [r3, #20]
 80107fa:	431a      	orrs	r2, r3
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	69db      	ldr	r3, [r3, #28]
 8010800:	4313      	orrs	r3, r2
 8010802:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	681a      	ldr	r2, [r3, #0]
 801080a:	4ba6      	ldr	r3, [pc, #664]	; (8010aa4 <UART_SetConfig+0x2c4>)
 801080c:	4013      	ands	r3, r2
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	6812      	ldr	r2, [r2, #0]
 8010812:	6979      	ldr	r1, [r7, #20]
 8010814:	430b      	orrs	r3, r1
 8010816:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	68da      	ldr	r2, [r3, #12]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	430a      	orrs	r2, r1
 801082c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	699b      	ldr	r3, [r3, #24]
 8010832:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6a1b      	ldr	r3, [r3, #32]
 8010838:	697a      	ldr	r2, [r7, #20]
 801083a:	4313      	orrs	r3, r2
 801083c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	689b      	ldr	r3, [r3, #8]
 8010844:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	697a      	ldr	r2, [r7, #20]
 801084e:	430a      	orrs	r2, r1
 8010850:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	4a94      	ldr	r2, [pc, #592]	; (8010aa8 <UART_SetConfig+0x2c8>)
 8010858:	4293      	cmp	r3, r2
 801085a:	d120      	bne.n	801089e <UART_SetConfig+0xbe>
 801085c:	4b93      	ldr	r3, [pc, #588]	; (8010aac <UART_SetConfig+0x2cc>)
 801085e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010862:	f003 0303 	and.w	r3, r3, #3
 8010866:	2b03      	cmp	r3, #3
 8010868:	d816      	bhi.n	8010898 <UART_SetConfig+0xb8>
 801086a:	a201      	add	r2, pc, #4	; (adr r2, 8010870 <UART_SetConfig+0x90>)
 801086c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010870:	08010881 	.word	0x08010881
 8010874:	0801088d 	.word	0x0801088d
 8010878:	08010887 	.word	0x08010887
 801087c:	08010893 	.word	0x08010893
 8010880:	2301      	movs	r3, #1
 8010882:	77fb      	strb	r3, [r7, #31]
 8010884:	e150      	b.n	8010b28 <UART_SetConfig+0x348>
 8010886:	2302      	movs	r3, #2
 8010888:	77fb      	strb	r3, [r7, #31]
 801088a:	e14d      	b.n	8010b28 <UART_SetConfig+0x348>
 801088c:	2304      	movs	r3, #4
 801088e:	77fb      	strb	r3, [r7, #31]
 8010890:	e14a      	b.n	8010b28 <UART_SetConfig+0x348>
 8010892:	2308      	movs	r3, #8
 8010894:	77fb      	strb	r3, [r7, #31]
 8010896:	e147      	b.n	8010b28 <UART_SetConfig+0x348>
 8010898:	2310      	movs	r3, #16
 801089a:	77fb      	strb	r3, [r7, #31]
 801089c:	e144      	b.n	8010b28 <UART_SetConfig+0x348>
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	4a83      	ldr	r2, [pc, #524]	; (8010ab0 <UART_SetConfig+0x2d0>)
 80108a4:	4293      	cmp	r3, r2
 80108a6:	d132      	bne.n	801090e <UART_SetConfig+0x12e>
 80108a8:	4b80      	ldr	r3, [pc, #512]	; (8010aac <UART_SetConfig+0x2cc>)
 80108aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108ae:	f003 030c 	and.w	r3, r3, #12
 80108b2:	2b0c      	cmp	r3, #12
 80108b4:	d828      	bhi.n	8010908 <UART_SetConfig+0x128>
 80108b6:	a201      	add	r2, pc, #4	; (adr r2, 80108bc <UART_SetConfig+0xdc>)
 80108b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108bc:	080108f1 	.word	0x080108f1
 80108c0:	08010909 	.word	0x08010909
 80108c4:	08010909 	.word	0x08010909
 80108c8:	08010909 	.word	0x08010909
 80108cc:	080108fd 	.word	0x080108fd
 80108d0:	08010909 	.word	0x08010909
 80108d4:	08010909 	.word	0x08010909
 80108d8:	08010909 	.word	0x08010909
 80108dc:	080108f7 	.word	0x080108f7
 80108e0:	08010909 	.word	0x08010909
 80108e4:	08010909 	.word	0x08010909
 80108e8:	08010909 	.word	0x08010909
 80108ec:	08010903 	.word	0x08010903
 80108f0:	2300      	movs	r3, #0
 80108f2:	77fb      	strb	r3, [r7, #31]
 80108f4:	e118      	b.n	8010b28 <UART_SetConfig+0x348>
 80108f6:	2302      	movs	r3, #2
 80108f8:	77fb      	strb	r3, [r7, #31]
 80108fa:	e115      	b.n	8010b28 <UART_SetConfig+0x348>
 80108fc:	2304      	movs	r3, #4
 80108fe:	77fb      	strb	r3, [r7, #31]
 8010900:	e112      	b.n	8010b28 <UART_SetConfig+0x348>
 8010902:	2308      	movs	r3, #8
 8010904:	77fb      	strb	r3, [r7, #31]
 8010906:	e10f      	b.n	8010b28 <UART_SetConfig+0x348>
 8010908:	2310      	movs	r3, #16
 801090a:	77fb      	strb	r3, [r7, #31]
 801090c:	e10c      	b.n	8010b28 <UART_SetConfig+0x348>
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	4a68      	ldr	r2, [pc, #416]	; (8010ab4 <UART_SetConfig+0x2d4>)
 8010914:	4293      	cmp	r3, r2
 8010916:	d120      	bne.n	801095a <UART_SetConfig+0x17a>
 8010918:	4b64      	ldr	r3, [pc, #400]	; (8010aac <UART_SetConfig+0x2cc>)
 801091a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801091e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010922:	2b30      	cmp	r3, #48	; 0x30
 8010924:	d013      	beq.n	801094e <UART_SetConfig+0x16e>
 8010926:	2b30      	cmp	r3, #48	; 0x30
 8010928:	d814      	bhi.n	8010954 <UART_SetConfig+0x174>
 801092a:	2b20      	cmp	r3, #32
 801092c:	d009      	beq.n	8010942 <UART_SetConfig+0x162>
 801092e:	2b20      	cmp	r3, #32
 8010930:	d810      	bhi.n	8010954 <UART_SetConfig+0x174>
 8010932:	2b00      	cmp	r3, #0
 8010934:	d002      	beq.n	801093c <UART_SetConfig+0x15c>
 8010936:	2b10      	cmp	r3, #16
 8010938:	d006      	beq.n	8010948 <UART_SetConfig+0x168>
 801093a:	e00b      	b.n	8010954 <UART_SetConfig+0x174>
 801093c:	2300      	movs	r3, #0
 801093e:	77fb      	strb	r3, [r7, #31]
 8010940:	e0f2      	b.n	8010b28 <UART_SetConfig+0x348>
 8010942:	2302      	movs	r3, #2
 8010944:	77fb      	strb	r3, [r7, #31]
 8010946:	e0ef      	b.n	8010b28 <UART_SetConfig+0x348>
 8010948:	2304      	movs	r3, #4
 801094a:	77fb      	strb	r3, [r7, #31]
 801094c:	e0ec      	b.n	8010b28 <UART_SetConfig+0x348>
 801094e:	2308      	movs	r3, #8
 8010950:	77fb      	strb	r3, [r7, #31]
 8010952:	e0e9      	b.n	8010b28 <UART_SetConfig+0x348>
 8010954:	2310      	movs	r3, #16
 8010956:	77fb      	strb	r3, [r7, #31]
 8010958:	e0e6      	b.n	8010b28 <UART_SetConfig+0x348>
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	4a56      	ldr	r2, [pc, #344]	; (8010ab8 <UART_SetConfig+0x2d8>)
 8010960:	4293      	cmp	r3, r2
 8010962:	d120      	bne.n	80109a6 <UART_SetConfig+0x1c6>
 8010964:	4b51      	ldr	r3, [pc, #324]	; (8010aac <UART_SetConfig+0x2cc>)
 8010966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801096a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801096e:	2bc0      	cmp	r3, #192	; 0xc0
 8010970:	d013      	beq.n	801099a <UART_SetConfig+0x1ba>
 8010972:	2bc0      	cmp	r3, #192	; 0xc0
 8010974:	d814      	bhi.n	80109a0 <UART_SetConfig+0x1c0>
 8010976:	2b80      	cmp	r3, #128	; 0x80
 8010978:	d009      	beq.n	801098e <UART_SetConfig+0x1ae>
 801097a:	2b80      	cmp	r3, #128	; 0x80
 801097c:	d810      	bhi.n	80109a0 <UART_SetConfig+0x1c0>
 801097e:	2b00      	cmp	r3, #0
 8010980:	d002      	beq.n	8010988 <UART_SetConfig+0x1a8>
 8010982:	2b40      	cmp	r3, #64	; 0x40
 8010984:	d006      	beq.n	8010994 <UART_SetConfig+0x1b4>
 8010986:	e00b      	b.n	80109a0 <UART_SetConfig+0x1c0>
 8010988:	2300      	movs	r3, #0
 801098a:	77fb      	strb	r3, [r7, #31]
 801098c:	e0cc      	b.n	8010b28 <UART_SetConfig+0x348>
 801098e:	2302      	movs	r3, #2
 8010990:	77fb      	strb	r3, [r7, #31]
 8010992:	e0c9      	b.n	8010b28 <UART_SetConfig+0x348>
 8010994:	2304      	movs	r3, #4
 8010996:	77fb      	strb	r3, [r7, #31]
 8010998:	e0c6      	b.n	8010b28 <UART_SetConfig+0x348>
 801099a:	2308      	movs	r3, #8
 801099c:	77fb      	strb	r3, [r7, #31]
 801099e:	e0c3      	b.n	8010b28 <UART_SetConfig+0x348>
 80109a0:	2310      	movs	r3, #16
 80109a2:	77fb      	strb	r3, [r7, #31]
 80109a4:	e0c0      	b.n	8010b28 <UART_SetConfig+0x348>
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	4a44      	ldr	r2, [pc, #272]	; (8010abc <UART_SetConfig+0x2dc>)
 80109ac:	4293      	cmp	r3, r2
 80109ae:	d125      	bne.n	80109fc <UART_SetConfig+0x21c>
 80109b0:	4b3e      	ldr	r3, [pc, #248]	; (8010aac <UART_SetConfig+0x2cc>)
 80109b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80109ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80109be:	d017      	beq.n	80109f0 <UART_SetConfig+0x210>
 80109c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80109c4:	d817      	bhi.n	80109f6 <UART_SetConfig+0x216>
 80109c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109ca:	d00b      	beq.n	80109e4 <UART_SetConfig+0x204>
 80109cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109d0:	d811      	bhi.n	80109f6 <UART_SetConfig+0x216>
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d003      	beq.n	80109de <UART_SetConfig+0x1fe>
 80109d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109da:	d006      	beq.n	80109ea <UART_SetConfig+0x20a>
 80109dc:	e00b      	b.n	80109f6 <UART_SetConfig+0x216>
 80109de:	2300      	movs	r3, #0
 80109e0:	77fb      	strb	r3, [r7, #31]
 80109e2:	e0a1      	b.n	8010b28 <UART_SetConfig+0x348>
 80109e4:	2302      	movs	r3, #2
 80109e6:	77fb      	strb	r3, [r7, #31]
 80109e8:	e09e      	b.n	8010b28 <UART_SetConfig+0x348>
 80109ea:	2304      	movs	r3, #4
 80109ec:	77fb      	strb	r3, [r7, #31]
 80109ee:	e09b      	b.n	8010b28 <UART_SetConfig+0x348>
 80109f0:	2308      	movs	r3, #8
 80109f2:	77fb      	strb	r3, [r7, #31]
 80109f4:	e098      	b.n	8010b28 <UART_SetConfig+0x348>
 80109f6:	2310      	movs	r3, #16
 80109f8:	77fb      	strb	r3, [r7, #31]
 80109fa:	e095      	b.n	8010b28 <UART_SetConfig+0x348>
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	4a2f      	ldr	r2, [pc, #188]	; (8010ac0 <UART_SetConfig+0x2e0>)
 8010a02:	4293      	cmp	r3, r2
 8010a04:	d125      	bne.n	8010a52 <UART_SetConfig+0x272>
 8010a06:	4b29      	ldr	r3, [pc, #164]	; (8010aac <UART_SetConfig+0x2cc>)
 8010a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010a10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010a14:	d017      	beq.n	8010a46 <UART_SetConfig+0x266>
 8010a16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010a1a:	d817      	bhi.n	8010a4c <UART_SetConfig+0x26c>
 8010a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010a20:	d00b      	beq.n	8010a3a <UART_SetConfig+0x25a>
 8010a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010a26:	d811      	bhi.n	8010a4c <UART_SetConfig+0x26c>
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d003      	beq.n	8010a34 <UART_SetConfig+0x254>
 8010a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a30:	d006      	beq.n	8010a40 <UART_SetConfig+0x260>
 8010a32:	e00b      	b.n	8010a4c <UART_SetConfig+0x26c>
 8010a34:	2301      	movs	r3, #1
 8010a36:	77fb      	strb	r3, [r7, #31]
 8010a38:	e076      	b.n	8010b28 <UART_SetConfig+0x348>
 8010a3a:	2302      	movs	r3, #2
 8010a3c:	77fb      	strb	r3, [r7, #31]
 8010a3e:	e073      	b.n	8010b28 <UART_SetConfig+0x348>
 8010a40:	2304      	movs	r3, #4
 8010a42:	77fb      	strb	r3, [r7, #31]
 8010a44:	e070      	b.n	8010b28 <UART_SetConfig+0x348>
 8010a46:	2308      	movs	r3, #8
 8010a48:	77fb      	strb	r3, [r7, #31]
 8010a4a:	e06d      	b.n	8010b28 <UART_SetConfig+0x348>
 8010a4c:	2310      	movs	r3, #16
 8010a4e:	77fb      	strb	r3, [r7, #31]
 8010a50:	e06a      	b.n	8010b28 <UART_SetConfig+0x348>
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	4a1b      	ldr	r2, [pc, #108]	; (8010ac4 <UART_SetConfig+0x2e4>)
 8010a58:	4293      	cmp	r3, r2
 8010a5a:	d138      	bne.n	8010ace <UART_SetConfig+0x2ee>
 8010a5c:	4b13      	ldr	r3, [pc, #76]	; (8010aac <UART_SetConfig+0x2cc>)
 8010a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a62:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8010a66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010a6a:	d017      	beq.n	8010a9c <UART_SetConfig+0x2bc>
 8010a6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010a70:	d82a      	bhi.n	8010ac8 <UART_SetConfig+0x2e8>
 8010a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010a76:	d00b      	beq.n	8010a90 <UART_SetConfig+0x2b0>
 8010a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010a7c:	d824      	bhi.n	8010ac8 <UART_SetConfig+0x2e8>
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d003      	beq.n	8010a8a <UART_SetConfig+0x2aa>
 8010a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a86:	d006      	beq.n	8010a96 <UART_SetConfig+0x2b6>
 8010a88:	e01e      	b.n	8010ac8 <UART_SetConfig+0x2e8>
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	77fb      	strb	r3, [r7, #31]
 8010a8e:	e04b      	b.n	8010b28 <UART_SetConfig+0x348>
 8010a90:	2302      	movs	r3, #2
 8010a92:	77fb      	strb	r3, [r7, #31]
 8010a94:	e048      	b.n	8010b28 <UART_SetConfig+0x348>
 8010a96:	2304      	movs	r3, #4
 8010a98:	77fb      	strb	r3, [r7, #31]
 8010a9a:	e045      	b.n	8010b28 <UART_SetConfig+0x348>
 8010a9c:	2308      	movs	r3, #8
 8010a9e:	77fb      	strb	r3, [r7, #31]
 8010aa0:	e042      	b.n	8010b28 <UART_SetConfig+0x348>
 8010aa2:	bf00      	nop
 8010aa4:	efff69f3 	.word	0xefff69f3
 8010aa8:	40011000 	.word	0x40011000
 8010aac:	40023800 	.word	0x40023800
 8010ab0:	40004400 	.word	0x40004400
 8010ab4:	40004800 	.word	0x40004800
 8010ab8:	40004c00 	.word	0x40004c00
 8010abc:	40005000 	.word	0x40005000
 8010ac0:	40011400 	.word	0x40011400
 8010ac4:	40007800 	.word	0x40007800
 8010ac8:	2310      	movs	r3, #16
 8010aca:	77fb      	strb	r3, [r7, #31]
 8010acc:	e02c      	b.n	8010b28 <UART_SetConfig+0x348>
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	4a72      	ldr	r2, [pc, #456]	; (8010c9c <UART_SetConfig+0x4bc>)
 8010ad4:	4293      	cmp	r3, r2
 8010ad6:	d125      	bne.n	8010b24 <UART_SetConfig+0x344>
 8010ad8:	4b71      	ldr	r3, [pc, #452]	; (8010ca0 <UART_SetConfig+0x4c0>)
 8010ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ade:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010ae2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010ae6:	d017      	beq.n	8010b18 <UART_SetConfig+0x338>
 8010ae8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010aec:	d817      	bhi.n	8010b1e <UART_SetConfig+0x33e>
 8010aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010af2:	d00b      	beq.n	8010b0c <UART_SetConfig+0x32c>
 8010af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010af8:	d811      	bhi.n	8010b1e <UART_SetConfig+0x33e>
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d003      	beq.n	8010b06 <UART_SetConfig+0x326>
 8010afe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010b02:	d006      	beq.n	8010b12 <UART_SetConfig+0x332>
 8010b04:	e00b      	b.n	8010b1e <UART_SetConfig+0x33e>
 8010b06:	2300      	movs	r3, #0
 8010b08:	77fb      	strb	r3, [r7, #31]
 8010b0a:	e00d      	b.n	8010b28 <UART_SetConfig+0x348>
 8010b0c:	2302      	movs	r3, #2
 8010b0e:	77fb      	strb	r3, [r7, #31]
 8010b10:	e00a      	b.n	8010b28 <UART_SetConfig+0x348>
 8010b12:	2304      	movs	r3, #4
 8010b14:	77fb      	strb	r3, [r7, #31]
 8010b16:	e007      	b.n	8010b28 <UART_SetConfig+0x348>
 8010b18:	2308      	movs	r3, #8
 8010b1a:	77fb      	strb	r3, [r7, #31]
 8010b1c:	e004      	b.n	8010b28 <UART_SetConfig+0x348>
 8010b1e:	2310      	movs	r3, #16
 8010b20:	77fb      	strb	r3, [r7, #31]
 8010b22:	e001      	b.n	8010b28 <UART_SetConfig+0x348>
 8010b24:	2310      	movs	r3, #16
 8010b26:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	69db      	ldr	r3, [r3, #28]
 8010b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b30:	d15b      	bne.n	8010bea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8010b32:	7ffb      	ldrb	r3, [r7, #31]
 8010b34:	2b08      	cmp	r3, #8
 8010b36:	d828      	bhi.n	8010b8a <UART_SetConfig+0x3aa>
 8010b38:	a201      	add	r2, pc, #4	; (adr r2, 8010b40 <UART_SetConfig+0x360>)
 8010b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b3e:	bf00      	nop
 8010b40:	08010b65 	.word	0x08010b65
 8010b44:	08010b6d 	.word	0x08010b6d
 8010b48:	08010b75 	.word	0x08010b75
 8010b4c:	08010b8b 	.word	0x08010b8b
 8010b50:	08010b7b 	.word	0x08010b7b
 8010b54:	08010b8b 	.word	0x08010b8b
 8010b58:	08010b8b 	.word	0x08010b8b
 8010b5c:	08010b8b 	.word	0x08010b8b
 8010b60:	08010b83 	.word	0x08010b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010b64:	f7fc f90a 	bl	800cd7c <HAL_RCC_GetPCLK1Freq>
 8010b68:	61b8      	str	r0, [r7, #24]
        break;
 8010b6a:	e013      	b.n	8010b94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010b6c:	f7fc f91a 	bl	800cda4 <HAL_RCC_GetPCLK2Freq>
 8010b70:	61b8      	str	r0, [r7, #24]
        break;
 8010b72:	e00f      	b.n	8010b94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010b74:	4b4b      	ldr	r3, [pc, #300]	; (8010ca4 <UART_SetConfig+0x4c4>)
 8010b76:	61bb      	str	r3, [r7, #24]
        break;
 8010b78:	e00c      	b.n	8010b94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010b7a:	f7fc f82d 	bl	800cbd8 <HAL_RCC_GetSysClockFreq>
 8010b7e:	61b8      	str	r0, [r7, #24]
        break;
 8010b80:	e008      	b.n	8010b94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010b86:	61bb      	str	r3, [r7, #24]
        break;
 8010b88:	e004      	b.n	8010b94 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010b8e:	2301      	movs	r3, #1
 8010b90:	77bb      	strb	r3, [r7, #30]
        break;
 8010b92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010b94:	69bb      	ldr	r3, [r7, #24]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d074      	beq.n	8010c84 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010b9a:	69bb      	ldr	r3, [r7, #24]
 8010b9c:	005a      	lsls	r2, r3, #1
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	685b      	ldr	r3, [r3, #4]
 8010ba2:	085b      	lsrs	r3, r3, #1
 8010ba4:	441a      	add	r2, r3
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	685b      	ldr	r3, [r3, #4]
 8010baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8010bae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	2b0f      	cmp	r3, #15
 8010bb4:	d916      	bls.n	8010be4 <UART_SetConfig+0x404>
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010bbc:	d212      	bcs.n	8010be4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	b29b      	uxth	r3, r3
 8010bc2:	f023 030f 	bic.w	r3, r3, #15
 8010bc6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010bc8:	693b      	ldr	r3, [r7, #16]
 8010bca:	085b      	lsrs	r3, r3, #1
 8010bcc:	b29b      	uxth	r3, r3
 8010bce:	f003 0307 	and.w	r3, r3, #7
 8010bd2:	b29a      	uxth	r2, r3
 8010bd4:	89fb      	ldrh	r3, [r7, #14]
 8010bd6:	4313      	orrs	r3, r2
 8010bd8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	89fa      	ldrh	r2, [r7, #14]
 8010be0:	60da      	str	r2, [r3, #12]
 8010be2:	e04f      	b.n	8010c84 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8010be4:	2301      	movs	r3, #1
 8010be6:	77bb      	strb	r3, [r7, #30]
 8010be8:	e04c      	b.n	8010c84 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010bea:	7ffb      	ldrb	r3, [r7, #31]
 8010bec:	2b08      	cmp	r3, #8
 8010bee:	d828      	bhi.n	8010c42 <UART_SetConfig+0x462>
 8010bf0:	a201      	add	r2, pc, #4	; (adr r2, 8010bf8 <UART_SetConfig+0x418>)
 8010bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bf6:	bf00      	nop
 8010bf8:	08010c1d 	.word	0x08010c1d
 8010bfc:	08010c25 	.word	0x08010c25
 8010c00:	08010c2d 	.word	0x08010c2d
 8010c04:	08010c43 	.word	0x08010c43
 8010c08:	08010c33 	.word	0x08010c33
 8010c0c:	08010c43 	.word	0x08010c43
 8010c10:	08010c43 	.word	0x08010c43
 8010c14:	08010c43 	.word	0x08010c43
 8010c18:	08010c3b 	.word	0x08010c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010c1c:	f7fc f8ae 	bl	800cd7c <HAL_RCC_GetPCLK1Freq>
 8010c20:	61b8      	str	r0, [r7, #24]
        break;
 8010c22:	e013      	b.n	8010c4c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010c24:	f7fc f8be 	bl	800cda4 <HAL_RCC_GetPCLK2Freq>
 8010c28:	61b8      	str	r0, [r7, #24]
        break;
 8010c2a:	e00f      	b.n	8010c4c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010c2c:	4b1d      	ldr	r3, [pc, #116]	; (8010ca4 <UART_SetConfig+0x4c4>)
 8010c2e:	61bb      	str	r3, [r7, #24]
        break;
 8010c30:	e00c      	b.n	8010c4c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010c32:	f7fb ffd1 	bl	800cbd8 <HAL_RCC_GetSysClockFreq>
 8010c36:	61b8      	str	r0, [r7, #24]
        break;
 8010c38:	e008      	b.n	8010c4c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010c3e:	61bb      	str	r3, [r7, #24]
        break;
 8010c40:	e004      	b.n	8010c4c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8010c42:	2300      	movs	r3, #0
 8010c44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010c46:	2301      	movs	r3, #1
 8010c48:	77bb      	strb	r3, [r7, #30]
        break;
 8010c4a:	bf00      	nop
    }

    if (pclk != 0U)
 8010c4c:	69bb      	ldr	r3, [r7, #24]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d018      	beq.n	8010c84 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	685b      	ldr	r3, [r3, #4]
 8010c56:	085a      	lsrs	r2, r3, #1
 8010c58:	69bb      	ldr	r3, [r7, #24]
 8010c5a:	441a      	add	r2, r3
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	685b      	ldr	r3, [r3, #4]
 8010c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010c66:	693b      	ldr	r3, [r7, #16]
 8010c68:	2b0f      	cmp	r3, #15
 8010c6a:	d909      	bls.n	8010c80 <UART_SetConfig+0x4a0>
 8010c6c:	693b      	ldr	r3, [r7, #16]
 8010c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c72:	d205      	bcs.n	8010c80 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010c74:	693b      	ldr	r3, [r7, #16]
 8010c76:	b29a      	uxth	r2, r3
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	60da      	str	r2, [r3, #12]
 8010c7e:	e001      	b.n	8010c84 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8010c80:	2301      	movs	r3, #1
 8010c82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2200      	movs	r2, #0
 8010c88:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8010c90:	7fbb      	ldrb	r3, [r7, #30]
}
 8010c92:	4618      	mov	r0, r3
 8010c94:	3720      	adds	r7, #32
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}
 8010c9a:	bf00      	nop
 8010c9c:	40007c00 	.word	0x40007c00
 8010ca0:	40023800 	.word	0x40023800
 8010ca4:	00f42400 	.word	0x00f42400

08010ca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010ca8:	b480      	push	{r7}
 8010caa:	b083      	sub	sp, #12
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cb4:	f003 0301 	and.w	r3, r3, #1
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d00a      	beq.n	8010cd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	685b      	ldr	r3, [r3, #4]
 8010cc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	430a      	orrs	r2, r1
 8010cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cd6:	f003 0302 	and.w	r3, r3, #2
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d00a      	beq.n	8010cf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	430a      	orrs	r2, r1
 8010cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cf8:	f003 0304 	and.w	r3, r3, #4
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d00a      	beq.n	8010d16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	685b      	ldr	r3, [r3, #4]
 8010d06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	430a      	orrs	r2, r1
 8010d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d1a:	f003 0308 	and.w	r3, r3, #8
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d00a      	beq.n	8010d38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	685b      	ldr	r3, [r3, #4]
 8010d28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	430a      	orrs	r2, r1
 8010d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d3c:	f003 0310 	and.w	r3, r3, #16
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d00a      	beq.n	8010d5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	689b      	ldr	r3, [r3, #8]
 8010d4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	430a      	orrs	r2, r1
 8010d58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d5e:	f003 0320 	and.w	r3, r3, #32
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d00a      	beq.n	8010d7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	689b      	ldr	r3, [r3, #8]
 8010d6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	430a      	orrs	r2, r1
 8010d7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d01a      	beq.n	8010dbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	430a      	orrs	r2, r1
 8010d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010da6:	d10a      	bne.n	8010dbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	430a      	orrs	r2, r1
 8010dbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d00a      	beq.n	8010de0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	685b      	ldr	r3, [r3, #4]
 8010dd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	430a      	orrs	r2, r1
 8010dde:	605a      	str	r2, [r3, #4]
  }
}
 8010de0:	bf00      	nop
 8010de2:	370c      	adds	r7, #12
 8010de4:	46bd      	mov	sp, r7
 8010de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dea:	4770      	bx	lr

08010dec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b086      	sub	sp, #24
 8010df0:	af02      	add	r7, sp, #8
 8010df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2200      	movs	r2, #0
 8010df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010dfc:	f7f9 fe4a 	bl	800aa94 <HAL_GetTick>
 8010e00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	f003 0308 	and.w	r3, r3, #8
 8010e0c:	2b08      	cmp	r3, #8
 8010e0e:	d10e      	bne.n	8010e2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010e10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010e14:	9300      	str	r3, [sp, #0]
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	2200      	movs	r2, #0
 8010e1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	f000 f81b 	bl	8010e5a <UART_WaitOnFlagUntilTimeout>
 8010e24:	4603      	mov	r3, r0
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d001      	beq.n	8010e2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010e2a:	2303      	movs	r3, #3
 8010e2c:	e011      	b.n	8010e52 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	2220      	movs	r2, #32
 8010e32:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2220      	movs	r2, #32
 8010e38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2200      	movs	r2, #0
 8010e40:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	2200      	movs	r2, #0
 8010e46:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8010e50:	2300      	movs	r3, #0
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3710      	adds	r7, #16
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}

08010e5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010e5a:	b580      	push	{r7, lr}
 8010e5c:	b09c      	sub	sp, #112	; 0x70
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	60f8      	str	r0, [r7, #12]
 8010e62:	60b9      	str	r1, [r7, #8]
 8010e64:	603b      	str	r3, [r7, #0]
 8010e66:	4613      	mov	r3, r2
 8010e68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010e6a:	e0a7      	b.n	8010fbc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e72:	f000 80a3 	beq.w	8010fbc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010e76:	f7f9 fe0d 	bl	800aa94 <HAL_GetTick>
 8010e7a:	4602      	mov	r2, r0
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	1ad3      	subs	r3, r2, r3
 8010e80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d302      	bcc.n	8010e8c <UART_WaitOnFlagUntilTimeout+0x32>
 8010e86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d13f      	bne.n	8010f0c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e94:	e853 3f00 	ldrex	r3, [r3]
 8010e98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010ea0:	667b      	str	r3, [r7, #100]	; 0x64
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010eac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010eb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010eb2:	e841 2300 	strex	r3, r2, [r1]
 8010eb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d1e6      	bne.n	8010e8c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	3308      	adds	r3, #8
 8010ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ec8:	e853 3f00 	ldrex	r3, [r3]
 8010ecc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ed0:	f023 0301 	bic.w	r3, r3, #1
 8010ed4:	663b      	str	r3, [r7, #96]	; 0x60
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	3308      	adds	r3, #8
 8010edc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010ede:	64ba      	str	r2, [r7, #72]	; 0x48
 8010ee0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ee2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010ee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010ee6:	e841 2300 	strex	r3, r2, [r1]
 8010eea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d1e5      	bne.n	8010ebe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	2220      	movs	r2, #32
 8010ef6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	2220      	movs	r2, #32
 8010efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	2200      	movs	r2, #0
 8010f04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8010f08:	2303      	movs	r3, #3
 8010f0a:	e068      	b.n	8010fde <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	f003 0304 	and.w	r3, r3, #4
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d050      	beq.n	8010fbc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	69db      	ldr	r3, [r3, #28]
 8010f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010f24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010f28:	d148      	bne.n	8010fbc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010f32:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f3c:	e853 3f00 	ldrex	r3, [r3]
 8010f40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010f48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	461a      	mov	r2, r3
 8010f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f52:	637b      	str	r3, [r7, #52]	; 0x34
 8010f54:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010f58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f5a:	e841 2300 	strex	r3, r2, [r1]
 8010f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d1e6      	bne.n	8010f34 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	3308      	adds	r3, #8
 8010f6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	e853 3f00 	ldrex	r3, [r3]
 8010f74:	613b      	str	r3, [r7, #16]
   return(result);
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	f023 0301 	bic.w	r3, r3, #1
 8010f7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	3308      	adds	r3, #8
 8010f84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010f86:	623a      	str	r2, [r7, #32]
 8010f88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f8a:	69f9      	ldr	r1, [r7, #28]
 8010f8c:	6a3a      	ldr	r2, [r7, #32]
 8010f8e:	e841 2300 	strex	r3, r2, [r1]
 8010f92:	61bb      	str	r3, [r7, #24]
   return(result);
 8010f94:	69bb      	ldr	r3, [r7, #24]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d1e5      	bne.n	8010f66 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	2220      	movs	r2, #32
 8010f9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2220      	movs	r2, #32
 8010fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	2220      	movs	r2, #32
 8010fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8010fb8:	2303      	movs	r3, #3
 8010fba:	e010      	b.n	8010fde <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	69da      	ldr	r2, [r3, #28]
 8010fc2:	68bb      	ldr	r3, [r7, #8]
 8010fc4:	4013      	ands	r3, r2
 8010fc6:	68ba      	ldr	r2, [r7, #8]
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	bf0c      	ite	eq
 8010fcc:	2301      	moveq	r3, #1
 8010fce:	2300      	movne	r3, #0
 8010fd0:	b2db      	uxtb	r3, r3
 8010fd2:	461a      	mov	r2, r3
 8010fd4:	79fb      	ldrb	r3, [r7, #7]
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	f43f af48 	beq.w	8010e6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010fdc:	2300      	movs	r3, #0
}
 8010fde:	4618      	mov	r0, r3
 8010fe0:	3770      	adds	r7, #112	; 0x70
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}
	...

08010fe8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010fe8:	b480      	push	{r7}
 8010fea:	b097      	sub	sp, #92	; 0x5c
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	60f8      	str	r0, [r7, #12]
 8010ff0:	60b9      	str	r1, [r7, #8]
 8010ff2:	4613      	mov	r3, r2
 8010ff4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	68ba      	ldr	r2, [r7, #8]
 8010ffa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	88fa      	ldrh	r2, [r7, #6]
 8011000:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	88fa      	ldrh	r2, [r7, #6]
 8011008:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2200      	movs	r2, #0
 8011010:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	689b      	ldr	r3, [r3, #8]
 8011016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801101a:	d10e      	bne.n	801103a <UART_Start_Receive_IT+0x52>
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	691b      	ldr	r3, [r3, #16]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d105      	bne.n	8011030 <UART_Start_Receive_IT+0x48>
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	f240 12ff 	movw	r2, #511	; 0x1ff
 801102a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801102e:	e02d      	b.n	801108c <UART_Start_Receive_IT+0xa4>
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	22ff      	movs	r2, #255	; 0xff
 8011034:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8011038:	e028      	b.n	801108c <UART_Start_Receive_IT+0xa4>
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	689b      	ldr	r3, [r3, #8]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d10d      	bne.n	801105e <UART_Start_Receive_IT+0x76>
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	691b      	ldr	r3, [r3, #16]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d104      	bne.n	8011054 <UART_Start_Receive_IT+0x6c>
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	22ff      	movs	r2, #255	; 0xff
 801104e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8011052:	e01b      	b.n	801108c <UART_Start_Receive_IT+0xa4>
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	227f      	movs	r2, #127	; 0x7f
 8011058:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801105c:	e016      	b.n	801108c <UART_Start_Receive_IT+0xa4>
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	689b      	ldr	r3, [r3, #8]
 8011062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011066:	d10d      	bne.n	8011084 <UART_Start_Receive_IT+0x9c>
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	691b      	ldr	r3, [r3, #16]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d104      	bne.n	801107a <UART_Start_Receive_IT+0x92>
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	227f      	movs	r2, #127	; 0x7f
 8011074:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8011078:	e008      	b.n	801108c <UART_Start_Receive_IT+0xa4>
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	223f      	movs	r2, #63	; 0x3f
 801107e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8011082:	e003      	b.n	801108c <UART_Start_Receive_IT+0xa4>
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	2200      	movs	r2, #0
 8011088:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	2200      	movs	r2, #0
 8011090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	2222      	movs	r2, #34	; 0x22
 8011098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	3308      	adds	r3, #8
 80110a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110a6:	e853 3f00 	ldrex	r3, [r3]
 80110aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80110ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ae:	f043 0301 	orr.w	r3, r3, #1
 80110b2:	657b      	str	r3, [r7, #84]	; 0x54
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	3308      	adds	r3, #8
 80110ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80110bc:	64ba      	str	r2, [r7, #72]	; 0x48
 80110be:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80110c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80110c4:	e841 2300 	strex	r3, r2, [r1]
 80110c8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80110ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d1e5      	bne.n	801109c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	689b      	ldr	r3, [r3, #8]
 80110d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80110d8:	d107      	bne.n	80110ea <UART_Start_Receive_IT+0x102>
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	691b      	ldr	r3, [r3, #16]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d103      	bne.n	80110ea <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	4a21      	ldr	r2, [pc, #132]	; (801116c <UART_Start_Receive_IT+0x184>)
 80110e6:	669a      	str	r2, [r3, #104]	; 0x68
 80110e8:	e002      	b.n	80110f0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	4a20      	ldr	r2, [pc, #128]	; (8011170 <UART_Start_Receive_IT+0x188>)
 80110ee:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	691b      	ldr	r3, [r3, #16]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d019      	beq.n	801112c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011100:	e853 3f00 	ldrex	r3, [r3]
 8011104:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011108:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801110c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	461a      	mov	r2, r3
 8011114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011116:	637b      	str	r3, [r7, #52]	; 0x34
 8011118:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801111a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801111c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801111e:	e841 2300 	strex	r3, r2, [r1]
 8011122:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011126:	2b00      	cmp	r3, #0
 8011128:	d1e6      	bne.n	80110f8 <UART_Start_Receive_IT+0x110>
 801112a:	e018      	b.n	801115e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011132:	697b      	ldr	r3, [r7, #20]
 8011134:	e853 3f00 	ldrex	r3, [r3]
 8011138:	613b      	str	r3, [r7, #16]
   return(result);
 801113a:	693b      	ldr	r3, [r7, #16]
 801113c:	f043 0320 	orr.w	r3, r3, #32
 8011140:	653b      	str	r3, [r7, #80]	; 0x50
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	461a      	mov	r2, r3
 8011148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801114a:	623b      	str	r3, [r7, #32]
 801114c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801114e:	69f9      	ldr	r1, [r7, #28]
 8011150:	6a3a      	ldr	r2, [r7, #32]
 8011152:	e841 2300 	strex	r3, r2, [r1]
 8011156:	61bb      	str	r3, [r7, #24]
   return(result);
 8011158:	69bb      	ldr	r3, [r7, #24]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d1e6      	bne.n	801112c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 801115e:	2300      	movs	r3, #0
}
 8011160:	4618      	mov	r0, r3
 8011162:	375c      	adds	r7, #92	; 0x5c
 8011164:	46bd      	mov	sp, r7
 8011166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116a:	4770      	bx	lr
 801116c:	08011793 	.word	0x08011793
 8011170:	0801162d 	.word	0x0801162d

08011174 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b096      	sub	sp, #88	; 0x58
 8011178:	af00      	add	r7, sp, #0
 801117a:	60f8      	str	r0, [r7, #12]
 801117c:	60b9      	str	r1, [r7, #8]
 801117e:	4613      	mov	r3, r2
 8011180:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	68ba      	ldr	r2, [r7, #8]
 8011186:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	88fa      	ldrh	r2, [r7, #6]
 801118c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	2200      	movs	r2, #0
 8011194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	2222      	movs	r2, #34	; 0x22
 801119c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d028      	beq.n	80111fa <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111ac:	4a3e      	ldr	r2, [pc, #248]	; (80112a8 <UART_Start_Receive_DMA+0x134>)
 80111ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111b4:	4a3d      	ldr	r2, [pc, #244]	; (80112ac <UART_Start_Receive_DMA+0x138>)
 80111b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111bc:	4a3c      	ldr	r2, [pc, #240]	; (80112b0 <UART_Start_Receive_DMA+0x13c>)
 80111be:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111c4:	2200      	movs	r2, #0
 80111c6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	3324      	adds	r3, #36	; 0x24
 80111d2:	4619      	mov	r1, r3
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111d8:	461a      	mov	r2, r3
 80111da:	88fb      	ldrh	r3, [r7, #6]
 80111dc:	f7f9 fe1a 	bl	800ae14 <HAL_DMA_Start_IT>
 80111e0:	4603      	mov	r3, r0
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d009      	beq.n	80111fa <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	2210      	movs	r2, #16
 80111ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	2220      	movs	r2, #32
 80111f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80111f6:	2301      	movs	r3, #1
 80111f8:	e051      	b.n	801129e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	691b      	ldr	r3, [r3, #16]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d018      	beq.n	8011234 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801120a:	e853 3f00 	ldrex	r3, [r3]
 801120e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011216:	657b      	str	r3, [r7, #84]	; 0x54
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	461a      	mov	r2, r3
 801121e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011220:	64bb      	str	r3, [r7, #72]	; 0x48
 8011222:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011224:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011228:	e841 2300 	strex	r3, r2, [r1]
 801122c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801122e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011230:	2b00      	cmp	r3, #0
 8011232:	d1e6      	bne.n	8011202 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	3308      	adds	r3, #8
 801123a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801123c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801123e:	e853 3f00 	ldrex	r3, [r3]
 8011242:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011246:	f043 0301 	orr.w	r3, r3, #1
 801124a:	653b      	str	r3, [r7, #80]	; 0x50
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	3308      	adds	r3, #8
 8011252:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011254:	637a      	str	r2, [r7, #52]	; 0x34
 8011256:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011258:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801125a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801125c:	e841 2300 	strex	r3, r2, [r1]
 8011260:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011264:	2b00      	cmp	r3, #0
 8011266:	d1e5      	bne.n	8011234 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	3308      	adds	r3, #8
 801126e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	e853 3f00 	ldrex	r3, [r3]
 8011276:	613b      	str	r3, [r7, #16]
   return(result);
 8011278:	693b      	ldr	r3, [r7, #16]
 801127a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801127e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	3308      	adds	r3, #8
 8011286:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011288:	623a      	str	r2, [r7, #32]
 801128a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801128c:	69f9      	ldr	r1, [r7, #28]
 801128e:	6a3a      	ldr	r2, [r7, #32]
 8011290:	e841 2300 	strex	r3, r2, [r1]
 8011294:	61bb      	str	r3, [r7, #24]
   return(result);
 8011296:	69bb      	ldr	r3, [r7, #24]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d1e5      	bne.n	8011268 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 801129c:	2300      	movs	r3, #0
}
 801129e:	4618      	mov	r0, r3
 80112a0:	3758      	adds	r7, #88	; 0x58
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}
 80112a6:	bf00      	nop
 80112a8:	080113c9 	.word	0x080113c9
 80112ac:	080114f1 	.word	0x080114f1
 80112b0:	0801152f 	.word	0x0801152f

080112b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80112b4:	b480      	push	{r7}
 80112b6:	b089      	sub	sp, #36	; 0x24
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	e853 3f00 	ldrex	r3, [r3]
 80112c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80112d0:	61fb      	str	r3, [r7, #28]
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	461a      	mov	r2, r3
 80112d8:	69fb      	ldr	r3, [r7, #28]
 80112da:	61bb      	str	r3, [r7, #24]
 80112dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112de:	6979      	ldr	r1, [r7, #20]
 80112e0:	69ba      	ldr	r2, [r7, #24]
 80112e2:	e841 2300 	strex	r3, r2, [r1]
 80112e6:	613b      	str	r3, [r7, #16]
   return(result);
 80112e8:	693b      	ldr	r3, [r7, #16]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d1e6      	bne.n	80112bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2220      	movs	r2, #32
 80112f2:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80112f4:	bf00      	nop
 80112f6:	3724      	adds	r7, #36	; 0x24
 80112f8:	46bd      	mov	sp, r7
 80112fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fe:	4770      	bx	lr

08011300 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011300:	b480      	push	{r7}
 8011302:	b095      	sub	sp, #84	; 0x54
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801130e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011310:	e853 3f00 	ldrex	r3, [r3]
 8011314:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011318:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801131c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	461a      	mov	r2, r3
 8011324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011326:	643b      	str	r3, [r7, #64]	; 0x40
 8011328:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801132a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801132c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801132e:	e841 2300 	strex	r3, r2, [r1]
 8011332:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011336:	2b00      	cmp	r3, #0
 8011338:	d1e6      	bne.n	8011308 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	3308      	adds	r3, #8
 8011340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011342:	6a3b      	ldr	r3, [r7, #32]
 8011344:	e853 3f00 	ldrex	r3, [r3]
 8011348:	61fb      	str	r3, [r7, #28]
   return(result);
 801134a:	69fb      	ldr	r3, [r7, #28]
 801134c:	f023 0301 	bic.w	r3, r3, #1
 8011350:	64bb      	str	r3, [r7, #72]	; 0x48
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	3308      	adds	r3, #8
 8011358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801135a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801135c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801135e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011362:	e841 2300 	strex	r3, r2, [r1]
 8011366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801136a:	2b00      	cmp	r3, #0
 801136c:	d1e5      	bne.n	801133a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011372:	2b01      	cmp	r3, #1
 8011374:	d118      	bne.n	80113a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	e853 3f00 	ldrex	r3, [r3]
 8011382:	60bb      	str	r3, [r7, #8]
   return(result);
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	f023 0310 	bic.w	r3, r3, #16
 801138a:	647b      	str	r3, [r7, #68]	; 0x44
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	461a      	mov	r2, r3
 8011392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011394:	61bb      	str	r3, [r7, #24]
 8011396:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011398:	6979      	ldr	r1, [r7, #20]
 801139a:	69ba      	ldr	r2, [r7, #24]
 801139c:	e841 2300 	strex	r3, r2, [r1]
 80113a0:	613b      	str	r3, [r7, #16]
   return(result);
 80113a2:	693b      	ldr	r3, [r7, #16]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d1e6      	bne.n	8011376 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2220      	movs	r2, #32
 80113ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	2200      	movs	r2, #0
 80113b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2200      	movs	r2, #0
 80113ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 80113bc:	bf00      	nop
 80113be:	3754      	adds	r7, #84	; 0x54
 80113c0:	46bd      	mov	sp, r7
 80113c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c6:	4770      	bx	lr

080113c8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b09c      	sub	sp, #112	; 0x70
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113d4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	69db      	ldr	r3, [r3, #28]
 80113da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80113de:	d071      	beq.n	80114c4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80113e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80113e2:	2200      	movs	r2, #0
 80113e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80113e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113f0:	e853 3f00 	ldrex	r3, [r3]
 80113f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80113f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80113fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80113fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	461a      	mov	r2, r3
 8011404:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011406:	65bb      	str	r3, [r7, #88]	; 0x58
 8011408:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801140a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801140c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801140e:	e841 2300 	strex	r3, r2, [r1]
 8011412:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011416:	2b00      	cmp	r3, #0
 8011418:	d1e6      	bne.n	80113e8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801141a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	3308      	adds	r3, #8
 8011420:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011424:	e853 3f00 	ldrex	r3, [r3]
 8011428:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801142a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801142c:	f023 0301 	bic.w	r3, r3, #1
 8011430:	667b      	str	r3, [r7, #100]	; 0x64
 8011432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	3308      	adds	r3, #8
 8011438:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801143a:	647a      	str	r2, [r7, #68]	; 0x44
 801143c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801143e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011440:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011442:	e841 2300 	strex	r3, r2, [r1]
 8011446:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801144a:	2b00      	cmp	r3, #0
 801144c:	d1e5      	bne.n	801141a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801144e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	3308      	adds	r3, #8
 8011454:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011458:	e853 3f00 	ldrex	r3, [r3]
 801145c:	623b      	str	r3, [r7, #32]
   return(result);
 801145e:	6a3b      	ldr	r3, [r7, #32]
 8011460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011464:	663b      	str	r3, [r7, #96]	; 0x60
 8011466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	3308      	adds	r3, #8
 801146c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801146e:	633a      	str	r2, [r7, #48]	; 0x30
 8011470:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011472:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011476:	e841 2300 	strex	r3, r2, [r1]
 801147a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801147c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801147e:	2b00      	cmp	r3, #0
 8011480:	d1e5      	bne.n	801144e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011484:	2220      	movs	r2, #32
 8011486:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801148a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801148c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801148e:	2b01      	cmp	r3, #1
 8011490:	d118      	bne.n	80114c4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011498:	693b      	ldr	r3, [r7, #16]
 801149a:	e853 3f00 	ldrex	r3, [r3]
 801149e:	60fb      	str	r3, [r7, #12]
   return(result);
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	f023 0310 	bic.w	r3, r3, #16
 80114a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80114a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	461a      	mov	r2, r3
 80114ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114b0:	61fb      	str	r3, [r7, #28]
 80114b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114b4:	69b9      	ldr	r1, [r7, #24]
 80114b6:	69fa      	ldr	r2, [r7, #28]
 80114b8:	e841 2300 	strex	r3, r2, [r1]
 80114bc:	617b      	str	r3, [r7, #20]
   return(result);
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d1e6      	bne.n	8011492 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80114c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114c6:	2200      	movs	r2, #0
 80114c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80114ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80114ce:	2b01      	cmp	r3, #1
 80114d0:	d107      	bne.n	80114e2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80114d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80114d8:	4619      	mov	r1, r3
 80114da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80114dc:	f7ff f974 	bl	80107c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80114e0:	e002      	b.n	80114e8 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80114e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80114e4:	f7f2 fc72 	bl	8003dcc <HAL_UART_RxCpltCallback>
}
 80114e8:	bf00      	nop
 80114ea:	3770      	adds	r7, #112	; 0x70
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}

080114f0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b084      	sub	sp, #16
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114fc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	2201      	movs	r2, #1
 8011502:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011508:	2b01      	cmp	r3, #1
 801150a:	d109      	bne.n	8011520 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011512:	085b      	lsrs	r3, r3, #1
 8011514:	b29b      	uxth	r3, r3
 8011516:	4619      	mov	r1, r3
 8011518:	68f8      	ldr	r0, [r7, #12]
 801151a:	f7ff f955 	bl	80107c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801151e:	e002      	b.n	8011526 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8011520:	68f8      	ldr	r0, [r7, #12]
 8011522:	f7ff f947 	bl	80107b4 <HAL_UART_RxHalfCpltCallback>
}
 8011526:	bf00      	nop
 8011528:	3710      	adds	r7, #16
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}

0801152e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801152e:	b580      	push	{r7, lr}
 8011530:	b086      	sub	sp, #24
 8011532:	af00      	add	r7, sp, #0
 8011534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801153a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011540:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011548:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801154a:	697b      	ldr	r3, [r7, #20]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	689b      	ldr	r3, [r3, #8]
 8011550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011554:	2b80      	cmp	r3, #128	; 0x80
 8011556:	d109      	bne.n	801156c <UART_DMAError+0x3e>
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	2b21      	cmp	r3, #33	; 0x21
 801155c:	d106      	bne.n	801156c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801155e:	697b      	ldr	r3, [r7, #20]
 8011560:	2200      	movs	r2, #0
 8011562:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8011566:	6978      	ldr	r0, [r7, #20]
 8011568:	f7ff fea4 	bl	80112b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801156c:	697b      	ldr	r3, [r7, #20]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	689b      	ldr	r3, [r3, #8]
 8011572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011576:	2b40      	cmp	r3, #64	; 0x40
 8011578:	d109      	bne.n	801158e <UART_DMAError+0x60>
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	2b22      	cmp	r3, #34	; 0x22
 801157e:	d106      	bne.n	801158e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	2200      	movs	r2, #0
 8011584:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8011588:	6978      	ldr	r0, [r7, #20]
 801158a:	f7ff feb9 	bl	8011300 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801158e:	697b      	ldr	r3, [r7, #20]
 8011590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011594:	f043 0210 	orr.w	r2, r3, #16
 8011598:	697b      	ldr	r3, [r7, #20]
 801159a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801159e:	6978      	ldr	r0, [r7, #20]
 80115a0:	f7f2 fcb6 	bl	8003f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80115a4:	bf00      	nop
 80115a6:	3718      	adds	r7, #24
 80115a8:	46bd      	mov	sp, r7
 80115aa:	bd80      	pop	{r7, pc}

080115ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b084      	sub	sp, #16
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	2200      	movs	r2, #0
 80115be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	2200      	movs	r2, #0
 80115c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80115ca:	68f8      	ldr	r0, [r7, #12]
 80115cc:	f7f2 fca0 	bl	8003f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80115d0:	bf00      	nop
 80115d2:	3710      	adds	r7, #16
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}

080115d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b088      	sub	sp, #32
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	e853 3f00 	ldrex	r3, [r3]
 80115ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80115ee:	68bb      	ldr	r3, [r7, #8]
 80115f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80115f4:	61fb      	str	r3, [r7, #28]
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	461a      	mov	r2, r3
 80115fc:	69fb      	ldr	r3, [r7, #28]
 80115fe:	61bb      	str	r3, [r7, #24]
 8011600:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011602:	6979      	ldr	r1, [r7, #20]
 8011604:	69ba      	ldr	r2, [r7, #24]
 8011606:	e841 2300 	strex	r3, r2, [r1]
 801160a:	613b      	str	r3, [r7, #16]
   return(result);
 801160c:	693b      	ldr	r3, [r7, #16]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d1e6      	bne.n	80115e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	2220      	movs	r2, #32
 8011616:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2200      	movs	r2, #0
 801161c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f7ff f8be 	bl	80107a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011624:	bf00      	nop
 8011626:	3720      	adds	r7, #32
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}

0801162c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b096      	sub	sp, #88	; 0x58
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801163a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011644:	2b22      	cmp	r3, #34	; 0x22
 8011646:	f040 8098 	bne.w	801177a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011650:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011654:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8011658:	b2d9      	uxtb	r1, r3
 801165a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801165e:	b2da      	uxtb	r2, r3
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011664:	400a      	ands	r2, r1
 8011666:	b2d2      	uxtb	r2, r2
 8011668:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801166e:	1c5a      	adds	r2, r3, #1
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801167a:	b29b      	uxth	r3, r3
 801167c:	3b01      	subs	r3, #1
 801167e:	b29a      	uxth	r2, r3
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801168c:	b29b      	uxth	r3, r3
 801168e:	2b00      	cmp	r3, #0
 8011690:	d17b      	bne.n	801178a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801169a:	e853 3f00 	ldrex	r3, [r3]
 801169e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80116a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80116a6:	653b      	str	r3, [r7, #80]	; 0x50
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	461a      	mov	r2, r3
 80116ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116b0:	647b      	str	r3, [r7, #68]	; 0x44
 80116b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80116b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80116b8:	e841 2300 	strex	r3, r2, [r1]
 80116bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80116be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d1e6      	bne.n	8011692 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	3308      	adds	r3, #8
 80116ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ce:	e853 3f00 	ldrex	r3, [r3]
 80116d2:	623b      	str	r3, [r7, #32]
   return(result);
 80116d4:	6a3b      	ldr	r3, [r7, #32]
 80116d6:	f023 0301 	bic.w	r3, r3, #1
 80116da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	3308      	adds	r3, #8
 80116e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80116e4:	633a      	str	r2, [r7, #48]	; 0x30
 80116e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80116ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116ec:	e841 2300 	strex	r3, r2, [r1]
 80116f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80116f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d1e5      	bne.n	80116c4 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2220      	movs	r2, #32
 80116fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2200      	movs	r2, #0
 8011704:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	2200      	movs	r2, #0
 801170a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011710:	2b01      	cmp	r3, #1
 8011712:	d12e      	bne.n	8011772 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2200      	movs	r2, #0
 8011718:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011720:	693b      	ldr	r3, [r7, #16]
 8011722:	e853 3f00 	ldrex	r3, [r3]
 8011726:	60fb      	str	r3, [r7, #12]
   return(result);
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	f023 0310 	bic.w	r3, r3, #16
 801172e:	64bb      	str	r3, [r7, #72]	; 0x48
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	461a      	mov	r2, r3
 8011736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011738:	61fb      	str	r3, [r7, #28]
 801173a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801173c:	69b9      	ldr	r1, [r7, #24]
 801173e:	69fa      	ldr	r2, [r7, #28]
 8011740:	e841 2300 	strex	r3, r2, [r1]
 8011744:	617b      	str	r3, [r7, #20]
   return(result);
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d1e6      	bne.n	801171a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	69db      	ldr	r3, [r3, #28]
 8011752:	f003 0310 	and.w	r3, r3, #16
 8011756:	2b10      	cmp	r3, #16
 8011758:	d103      	bne.n	8011762 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	2210      	movs	r2, #16
 8011760:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011768:	4619      	mov	r1, r3
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	f7ff f82c 	bl	80107c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011770:	e00b      	b.n	801178a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f7f2 fb2a 	bl	8003dcc <HAL_UART_RxCpltCallback>
}
 8011778:	e007      	b.n	801178a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	699a      	ldr	r2, [r3, #24]
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	f042 0208 	orr.w	r2, r2, #8
 8011788:	619a      	str	r2, [r3, #24]
}
 801178a:	bf00      	nop
 801178c:	3758      	adds	r7, #88	; 0x58
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}

08011792 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011792:	b580      	push	{r7, lr}
 8011794:	b096      	sub	sp, #88	; 0x58
 8011796:	af00      	add	r7, sp, #0
 8011798:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80117a0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80117aa:	2b22      	cmp	r3, #34	; 0x22
 80117ac:	f040 8098 	bne.w	80118e0 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117b6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117be:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80117c0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80117c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80117c8:	4013      	ands	r3, r2
 80117ca:	b29a      	uxth	r2, r3
 80117cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117ce:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117d4:	1c9a      	adds	r2, r3, #2
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80117e0:	b29b      	uxth	r3, r3
 80117e2:	3b01      	subs	r3, #1
 80117e4:	b29a      	uxth	r2, r3
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80117f2:	b29b      	uxth	r3, r3
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d17b      	bne.n	80118f0 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011800:	e853 3f00 	ldrex	r3, [r3]
 8011804:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011808:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801180c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	461a      	mov	r2, r3
 8011814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011816:	643b      	str	r3, [r7, #64]	; 0x40
 8011818:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801181a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801181c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801181e:	e841 2300 	strex	r3, r2, [r1]
 8011822:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011826:	2b00      	cmp	r3, #0
 8011828:	d1e6      	bne.n	80117f8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	3308      	adds	r3, #8
 8011830:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011832:	6a3b      	ldr	r3, [r7, #32]
 8011834:	e853 3f00 	ldrex	r3, [r3]
 8011838:	61fb      	str	r3, [r7, #28]
   return(result);
 801183a:	69fb      	ldr	r3, [r7, #28]
 801183c:	f023 0301 	bic.w	r3, r3, #1
 8011840:	64bb      	str	r3, [r7, #72]	; 0x48
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	3308      	adds	r3, #8
 8011848:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801184a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801184c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801184e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011852:	e841 2300 	strex	r3, r2, [r1]
 8011856:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185a:	2b00      	cmp	r3, #0
 801185c:	d1e5      	bne.n	801182a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	2220      	movs	r2, #32
 8011862:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	2200      	movs	r2, #0
 801186a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	2200      	movs	r2, #0
 8011870:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011876:	2b01      	cmp	r3, #1
 8011878:	d12e      	bne.n	80118d8 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	2200      	movs	r2, #0
 801187e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	e853 3f00 	ldrex	r3, [r3]
 801188c:	60bb      	str	r3, [r7, #8]
   return(result);
 801188e:	68bb      	ldr	r3, [r7, #8]
 8011890:	f023 0310 	bic.w	r3, r3, #16
 8011894:	647b      	str	r3, [r7, #68]	; 0x44
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	461a      	mov	r2, r3
 801189c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801189e:	61bb      	str	r3, [r7, #24]
 80118a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118a2:	6979      	ldr	r1, [r7, #20]
 80118a4:	69ba      	ldr	r2, [r7, #24]
 80118a6:	e841 2300 	strex	r3, r2, [r1]
 80118aa:	613b      	str	r3, [r7, #16]
   return(result);
 80118ac:	693b      	ldr	r3, [r7, #16]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d1e6      	bne.n	8011880 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	69db      	ldr	r3, [r3, #28]
 80118b8:	f003 0310 	and.w	r3, r3, #16
 80118bc:	2b10      	cmp	r3, #16
 80118be:	d103      	bne.n	80118c8 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	2210      	movs	r2, #16
 80118c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80118ce:	4619      	mov	r1, r3
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f7fe ff79 	bl	80107c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80118d6:	e00b      	b.n	80118f0 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f7f2 fa77 	bl	8003dcc <HAL_UART_RxCpltCallback>
}
 80118de:	e007      	b.n	80118f0 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	699a      	ldr	r2, [r3, #24]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	f042 0208 	orr.w	r2, r2, #8
 80118ee:	619a      	str	r2, [r3, #24]
}
 80118f0:	bf00      	nop
 80118f2:	3758      	adds	r7, #88	; 0x58
 80118f4:	46bd      	mov	sp, r7
 80118f6:	bd80      	pop	{r7, pc}

080118f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80118f8:	b480      	push	{r7}
 80118fa:	b085      	sub	sp, #20
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	4603      	mov	r3, r0
 8011900:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011902:	2300      	movs	r3, #0
 8011904:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011906:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801190a:	2b84      	cmp	r3, #132	; 0x84
 801190c:	d005      	beq.n	801191a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801190e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	4413      	add	r3, r2
 8011916:	3303      	adds	r3, #3
 8011918:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801191a:	68fb      	ldr	r3, [r7, #12]
}
 801191c:	4618      	mov	r0, r3
 801191e:	3714      	adds	r7, #20
 8011920:	46bd      	mov	sp, r7
 8011922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011926:	4770      	bx	lr

08011928 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011928:	b480      	push	{r7}
 801192a:	b083      	sub	sp, #12
 801192c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801192e:	f3ef 8305 	mrs	r3, IPSR
 8011932:	607b      	str	r3, [r7, #4]
  return(result);
 8011934:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011936:	2b00      	cmp	r3, #0
 8011938:	bf14      	ite	ne
 801193a:	2301      	movne	r3, #1
 801193c:	2300      	moveq	r3, #0
 801193e:	b2db      	uxtb	r3, r3
}
 8011940:	4618      	mov	r0, r3
 8011942:	370c      	adds	r7, #12
 8011944:	46bd      	mov	sp, r7
 8011946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194a:	4770      	bx	lr

0801194c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011950:	f001 fafa 	bl	8012f48 <vTaskStartScheduler>
  
  return osOK;
 8011954:	2300      	movs	r3, #0
}
 8011956:	4618      	mov	r0, r3
 8011958:	bd80      	pop	{r7, pc}

0801195a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801195a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801195c:	b089      	sub	sp, #36	; 0x24
 801195e:	af04      	add	r7, sp, #16
 8011960:	6078      	str	r0, [r7, #4]
 8011962:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	695b      	ldr	r3, [r3, #20]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d020      	beq.n	80119ae <osThreadCreate+0x54>
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	699b      	ldr	r3, [r3, #24]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d01c      	beq.n	80119ae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	685c      	ldr	r4, [r3, #4]
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	691e      	ldr	r6, [r3, #16]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011986:	4618      	mov	r0, r3
 8011988:	f7ff ffb6 	bl	80118f8 <makeFreeRtosPriority>
 801198c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	695b      	ldr	r3, [r3, #20]
 8011992:	687a      	ldr	r2, [r7, #4]
 8011994:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011996:	9202      	str	r2, [sp, #8]
 8011998:	9301      	str	r3, [sp, #4]
 801199a:	9100      	str	r1, [sp, #0]
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	4632      	mov	r2, r6
 80119a0:	4629      	mov	r1, r5
 80119a2:	4620      	mov	r0, r4
 80119a4:	f001 f864 	bl	8012a70 <xTaskCreateStatic>
 80119a8:	4603      	mov	r3, r0
 80119aa:	60fb      	str	r3, [r7, #12]
 80119ac:	e01c      	b.n	80119e8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	685c      	ldr	r4, [r3, #4]
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80119ba:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80119c2:	4618      	mov	r0, r3
 80119c4:	f7ff ff98 	bl	80118f8 <makeFreeRtosPriority>
 80119c8:	4602      	mov	r2, r0
 80119ca:	f107 030c 	add.w	r3, r7, #12
 80119ce:	9301      	str	r3, [sp, #4]
 80119d0:	9200      	str	r2, [sp, #0]
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	4632      	mov	r2, r6
 80119d6:	4629      	mov	r1, r5
 80119d8:	4620      	mov	r0, r4
 80119da:	f001 f8ac 	bl	8012b36 <xTaskCreate>
 80119de:	4603      	mov	r3, r0
 80119e0:	2b01      	cmp	r3, #1
 80119e2:	d001      	beq.n	80119e8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80119e4:	2300      	movs	r3, #0
 80119e6:	e000      	b.n	80119ea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80119e8:	68fb      	ldr	r3, [r7, #12]
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	3714      	adds	r7, #20
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080119f2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80119f2:	b580      	push	{r7, lr}
 80119f4:	b084      	sub	sp, #16
 80119f6:	af00      	add	r7, sp, #0
 80119f8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d001      	beq.n	8011a08 <osDelay+0x16>
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	e000      	b.n	8011a0a <osDelay+0x18>
 8011a08:	2301      	movs	r3, #1
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f001 fa66 	bl	8012edc <vTaskDelay>
  
  return osOK;
 8011a10:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011a12:	4618      	mov	r0, r3
 8011a14:	3710      	adds	r7, #16
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}

08011a1a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8011a1a:	b580      	push	{r7, lr}
 8011a1c:	b082      	sub	sp, #8
 8011a1e:	af00      	add	r7, sp, #0
 8011a20:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	685b      	ldr	r3, [r3, #4]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d007      	beq.n	8011a3a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	685b      	ldr	r3, [r3, #4]
 8011a2e:	4619      	mov	r1, r3
 8011a30:	2001      	movs	r0, #1
 8011a32:	f000 fb84 	bl	801213e <xQueueCreateMutexStatic>
 8011a36:	4603      	mov	r3, r0
 8011a38:	e003      	b.n	8011a42 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8011a3a:	2001      	movs	r0, #1
 8011a3c:	f000 fb67 	bl	801210e <xQueueCreateMutex>
 8011a40:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8011a42:	4618      	mov	r0, r3
 8011a44:	3708      	adds	r7, #8
 8011a46:	46bd      	mov	sp, r7
 8011a48:	bd80      	pop	{r7, pc}
	...

08011a4c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b084      	sub	sp, #16
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
 8011a54:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011a56:	2300      	movs	r3, #0
 8011a58:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d101      	bne.n	8011a64 <osMutexWait+0x18>
    return osErrorParameter;
 8011a60:	2380      	movs	r3, #128	; 0x80
 8011a62:	e03a      	b.n	8011ada <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8011a64:	2300      	movs	r3, #0
 8011a66:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a6e:	d103      	bne.n	8011a78 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8011a70:	f04f 33ff 	mov.w	r3, #4294967295
 8011a74:	60fb      	str	r3, [r7, #12]
 8011a76:	e009      	b.n	8011a8c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d006      	beq.n	8011a8c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d101      	bne.n	8011a8c <osMutexWait+0x40>
      ticks = 1;
 8011a88:	2301      	movs	r3, #1
 8011a8a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011a8c:	f7ff ff4c 	bl	8011928 <inHandlerMode>
 8011a90:	4603      	mov	r3, r0
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d017      	beq.n	8011ac6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011a96:	f107 0308 	add.w	r3, r7, #8
 8011a9a:	461a      	mov	r2, r3
 8011a9c:	2100      	movs	r1, #0
 8011a9e:	6878      	ldr	r0, [r7, #4]
 8011aa0:	f000 fe18 	bl	80126d4 <xQueueReceiveFromISR>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	2b01      	cmp	r3, #1
 8011aa8:	d001      	beq.n	8011aae <osMutexWait+0x62>
      return osErrorOS;
 8011aaa:	23ff      	movs	r3, #255	; 0xff
 8011aac:	e015      	b.n	8011ada <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011aae:	68bb      	ldr	r3, [r7, #8]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d011      	beq.n	8011ad8 <osMutexWait+0x8c>
 8011ab4:	4b0b      	ldr	r3, [pc, #44]	; (8011ae4 <osMutexWait+0x98>)
 8011ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011aba:	601a      	str	r2, [r3, #0]
 8011abc:	f3bf 8f4f 	dsb	sy
 8011ac0:	f3bf 8f6f 	isb	sy
 8011ac4:	e008      	b.n	8011ad8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8011ac6:	68f9      	ldr	r1, [r7, #12]
 8011ac8:	6878      	ldr	r0, [r7, #4]
 8011aca:	f000 fcef 	bl	80124ac <xQueueSemaphoreTake>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	2b01      	cmp	r3, #1
 8011ad2:	d001      	beq.n	8011ad8 <osMutexWait+0x8c>
    return osErrorOS;
 8011ad4:	23ff      	movs	r3, #255	; 0xff
 8011ad6:	e000      	b.n	8011ada <osMutexWait+0x8e>
  }
  
  return osOK;
 8011ad8:	2300      	movs	r3, #0
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	3710      	adds	r7, #16
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}
 8011ae2:	bf00      	nop
 8011ae4:	e000ed04 	.word	0xe000ed04

08011ae8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b084      	sub	sp, #16
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011af0:	2300      	movs	r3, #0
 8011af2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011af4:	2300      	movs	r3, #0
 8011af6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8011af8:	f7ff ff16 	bl	8011928 <inHandlerMode>
 8011afc:	4603      	mov	r3, r0
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d016      	beq.n	8011b30 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011b02:	f107 0308 	add.w	r3, r7, #8
 8011b06:	4619      	mov	r1, r3
 8011b08:	6878      	ldr	r0, [r7, #4]
 8011b0a:	f000 fc39 	bl	8012380 <xQueueGiveFromISR>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	2b01      	cmp	r3, #1
 8011b12:	d001      	beq.n	8011b18 <osMutexRelease+0x30>
      return osErrorOS;
 8011b14:	23ff      	movs	r3, #255	; 0xff
 8011b16:	e017      	b.n	8011b48 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011b18:	68bb      	ldr	r3, [r7, #8]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d013      	beq.n	8011b46 <osMutexRelease+0x5e>
 8011b1e:	4b0c      	ldr	r3, [pc, #48]	; (8011b50 <osMutexRelease+0x68>)
 8011b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b24:	601a      	str	r2, [r3, #0]
 8011b26:	f3bf 8f4f 	dsb	sy
 8011b2a:	f3bf 8f6f 	isb	sy
 8011b2e:	e00a      	b.n	8011b46 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8011b30:	2300      	movs	r3, #0
 8011b32:	2200      	movs	r2, #0
 8011b34:	2100      	movs	r1, #0
 8011b36:	6878      	ldr	r0, [r7, #4]
 8011b38:	f000 fb1c 	bl	8012174 <xQueueGenericSend>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	2b01      	cmp	r3, #1
 8011b40:	d001      	beq.n	8011b46 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8011b42:	23ff      	movs	r3, #255	; 0xff
 8011b44:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8011b46:	68fb      	ldr	r3, [r7, #12]
}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	3710      	adds	r7, #16
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd80      	pop	{r7, pc}
 8011b50:	e000ed04 	.word	0xe000ed04

08011b54 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b086      	sub	sp, #24
 8011b58:	af02      	add	r7, sp, #8
 8011b5a:	6078      	str	r0, [r7, #4]
 8011b5c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	685b      	ldr	r3, [r3, #4]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d00f      	beq.n	8011b86 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	2b01      	cmp	r3, #1
 8011b6a:	d10a      	bne.n	8011b82 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	685b      	ldr	r3, [r3, #4]
 8011b70:	2203      	movs	r2, #3
 8011b72:	9200      	str	r2, [sp, #0]
 8011b74:	2200      	movs	r2, #0
 8011b76:	2100      	movs	r1, #0
 8011b78:	2001      	movs	r0, #1
 8011b7a:	f000 f9cb 	bl	8011f14 <xQueueGenericCreateStatic>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	e016      	b.n	8011bb0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8011b82:	2300      	movs	r3, #0
 8011b84:	e014      	b.n	8011bb0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	2b01      	cmp	r3, #1
 8011b8a:	d110      	bne.n	8011bae <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8011b8c:	2203      	movs	r2, #3
 8011b8e:	2100      	movs	r1, #0
 8011b90:	2001      	movs	r0, #1
 8011b92:	f000 fa41 	bl	8012018 <xQueueGenericCreate>
 8011b96:	60f8      	str	r0, [r7, #12]
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d005      	beq.n	8011baa <osSemaphoreCreate+0x56>
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	2100      	movs	r1, #0
 8011ba4:	68f8      	ldr	r0, [r7, #12]
 8011ba6:	f000 fae5 	bl	8012174 <xQueueGenericSend>
      return sema;
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	e000      	b.n	8011bb0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8011bae:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3710      	adds	r7, #16
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}

08011bb8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b084      	sub	sp, #16
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
 8011bc0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d101      	bne.n	8011bd0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8011bcc:	2380      	movs	r3, #128	; 0x80
 8011bce:	e03a      	b.n	8011c46 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bda:	d103      	bne.n	8011be4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8011bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8011be0:	60fb      	str	r3, [r7, #12]
 8011be2:	e009      	b.n	8011bf8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d006      	beq.n	8011bf8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d101      	bne.n	8011bf8 <osSemaphoreWait+0x40>
      ticks = 1;
 8011bf4:	2301      	movs	r3, #1
 8011bf6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011bf8:	f7ff fe96 	bl	8011928 <inHandlerMode>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d017      	beq.n	8011c32 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011c02:	f107 0308 	add.w	r3, r7, #8
 8011c06:	461a      	mov	r2, r3
 8011c08:	2100      	movs	r1, #0
 8011c0a:	6878      	ldr	r0, [r7, #4]
 8011c0c:	f000 fd62 	bl	80126d4 <xQueueReceiveFromISR>
 8011c10:	4603      	mov	r3, r0
 8011c12:	2b01      	cmp	r3, #1
 8011c14:	d001      	beq.n	8011c1a <osSemaphoreWait+0x62>
      return osErrorOS;
 8011c16:	23ff      	movs	r3, #255	; 0xff
 8011c18:	e015      	b.n	8011c46 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011c1a:	68bb      	ldr	r3, [r7, #8]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d011      	beq.n	8011c44 <osSemaphoreWait+0x8c>
 8011c20:	4b0b      	ldr	r3, [pc, #44]	; (8011c50 <osSemaphoreWait+0x98>)
 8011c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c26:	601a      	str	r2, [r3, #0]
 8011c28:	f3bf 8f4f 	dsb	sy
 8011c2c:	f3bf 8f6f 	isb	sy
 8011c30:	e008      	b.n	8011c44 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011c32:	68f9      	ldr	r1, [r7, #12]
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	f000 fc39 	bl	80124ac <xQueueSemaphoreTake>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	2b01      	cmp	r3, #1
 8011c3e:	d001      	beq.n	8011c44 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8011c40:	23ff      	movs	r3, #255	; 0xff
 8011c42:	e000      	b.n	8011c46 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011c44:	2300      	movs	r3, #0
}
 8011c46:	4618      	mov	r0, r3
 8011c48:	3710      	adds	r7, #16
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd80      	pop	{r7, pc}
 8011c4e:	bf00      	nop
 8011c50:	e000ed04 	.word	0xe000ed04

08011c54 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b084      	sub	sp, #16
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011c60:	2300      	movs	r3, #0
 8011c62:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8011c64:	f7ff fe60 	bl	8011928 <inHandlerMode>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d016      	beq.n	8011c9c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011c6e:	f107 0308 	add.w	r3, r7, #8
 8011c72:	4619      	mov	r1, r3
 8011c74:	6878      	ldr	r0, [r7, #4]
 8011c76:	f000 fb83 	bl	8012380 <xQueueGiveFromISR>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	2b01      	cmp	r3, #1
 8011c7e:	d001      	beq.n	8011c84 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8011c80:	23ff      	movs	r3, #255	; 0xff
 8011c82:	e017      	b.n	8011cb4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011c84:	68bb      	ldr	r3, [r7, #8]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d013      	beq.n	8011cb2 <osSemaphoreRelease+0x5e>
 8011c8a:	4b0c      	ldr	r3, [pc, #48]	; (8011cbc <osSemaphoreRelease+0x68>)
 8011c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c90:	601a      	str	r2, [r3, #0]
 8011c92:	f3bf 8f4f 	dsb	sy
 8011c96:	f3bf 8f6f 	isb	sy
 8011c9a:	e00a      	b.n	8011cb2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	2100      	movs	r1, #0
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f000 fa66 	bl	8012174 <xQueueGenericSend>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	2b01      	cmp	r3, #1
 8011cac:	d001      	beq.n	8011cb2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8011cae:	23ff      	movs	r3, #255	; 0xff
 8011cb0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8011cb2:	68fb      	ldr	r3, [r7, #12]
}
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	3710      	adds	r7, #16
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	bd80      	pop	{r7, pc}
 8011cbc:	e000ed04 	.word	0xe000ed04

08011cc0 <osSemaphoreGetCount>:
* @brief  Returns the current count value of a counting semaphore
* @param  semaphore_id  semaphore_id ID obtained by \ref osSemaphoreCreate.
* @retval  count value
*/
uint32_t osSemaphoreGetCount(osSemaphoreId semaphore_id)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b082      	sub	sp, #8
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
  return uxSemaphoreGetCount(semaphore_id);
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f000 fd89 	bl	80127e0 <uxQueueMessagesWaiting>
 8011cce:	4603      	mov	r3, r0
}
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	3708      	adds	r7, #8
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}

08011cd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011cd8:	b480      	push	{r7}
 8011cda:	b083      	sub	sp, #12
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f103 0208 	add.w	r2, r3, #8
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	f04f 32ff 	mov.w	r2, #4294967295
 8011cf0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	f103 0208 	add.w	r2, r3, #8
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	f103 0208 	add.w	r2, r3, #8
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	2200      	movs	r2, #0
 8011d0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011d0c:	bf00      	nop
 8011d0e:	370c      	adds	r7, #12
 8011d10:	46bd      	mov	sp, r7
 8011d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d16:	4770      	bx	lr

08011d18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011d18:	b480      	push	{r7}
 8011d1a:	b083      	sub	sp, #12
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2200      	movs	r2, #0
 8011d24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011d26:	bf00      	nop
 8011d28:	370c      	adds	r7, #12
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d30:	4770      	bx	lr

08011d32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011d32:	b480      	push	{r7}
 8011d34:	b085      	sub	sp, #20
 8011d36:	af00      	add	r7, sp, #0
 8011d38:	6078      	str	r0, [r7, #4]
 8011d3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	685b      	ldr	r3, [r3, #4]
 8011d40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	68fa      	ldr	r2, [r7, #12]
 8011d46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	689a      	ldr	r2, [r3, #8]
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	689b      	ldr	r3, [r3, #8]
 8011d54:	683a      	ldr	r2, [r7, #0]
 8011d56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	683a      	ldr	r2, [r7, #0]
 8011d5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	687a      	ldr	r2, [r7, #4]
 8011d62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	1c5a      	adds	r2, r3, #1
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	601a      	str	r2, [r3, #0]
}
 8011d6e:	bf00      	nop
 8011d70:	3714      	adds	r7, #20
 8011d72:	46bd      	mov	sp, r7
 8011d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d78:	4770      	bx	lr

08011d7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011d7a:	b480      	push	{r7}
 8011d7c:	b085      	sub	sp, #20
 8011d7e:	af00      	add	r7, sp, #0
 8011d80:	6078      	str	r0, [r7, #4]
 8011d82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d90:	d103      	bne.n	8011d9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	691b      	ldr	r3, [r3, #16]
 8011d96:	60fb      	str	r3, [r7, #12]
 8011d98:	e00c      	b.n	8011db4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	3308      	adds	r3, #8
 8011d9e:	60fb      	str	r3, [r7, #12]
 8011da0:	e002      	b.n	8011da8 <vListInsert+0x2e>
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	685b      	ldr	r3, [r3, #4]
 8011da6:	60fb      	str	r3, [r7, #12]
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	685b      	ldr	r3, [r3, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	68ba      	ldr	r2, [r7, #8]
 8011db0:	429a      	cmp	r2, r3
 8011db2:	d2f6      	bcs.n	8011da2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	685a      	ldr	r2, [r3, #4]
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	685b      	ldr	r3, [r3, #4]
 8011dc0:	683a      	ldr	r2, [r7, #0]
 8011dc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	68fa      	ldr	r2, [r7, #12]
 8011dc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	683a      	ldr	r2, [r7, #0]
 8011dce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	687a      	ldr	r2, [r7, #4]
 8011dd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	1c5a      	adds	r2, r3, #1
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	601a      	str	r2, [r3, #0]
}
 8011de0:	bf00      	nop
 8011de2:	3714      	adds	r7, #20
 8011de4:	46bd      	mov	sp, r7
 8011de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dea:	4770      	bx	lr

08011dec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011dec:	b480      	push	{r7}
 8011dee:	b085      	sub	sp, #20
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	691b      	ldr	r3, [r3, #16]
 8011df8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	685b      	ldr	r3, [r3, #4]
 8011dfe:	687a      	ldr	r2, [r7, #4]
 8011e00:	6892      	ldr	r2, [r2, #8]
 8011e02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	689b      	ldr	r3, [r3, #8]
 8011e08:	687a      	ldr	r2, [r7, #4]
 8011e0a:	6852      	ldr	r2, [r2, #4]
 8011e0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	685b      	ldr	r3, [r3, #4]
 8011e12:	687a      	ldr	r2, [r7, #4]
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d103      	bne.n	8011e20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	689a      	ldr	r2, [r3, #8]
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2200      	movs	r2, #0
 8011e24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	1e5a      	subs	r2, r3, #1
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	681b      	ldr	r3, [r3, #0]
}
 8011e34:	4618      	mov	r0, r3
 8011e36:	3714      	adds	r7, #20
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3e:	4770      	bx	lr

08011e40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b084      	sub	sp, #16
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d10c      	bne.n	8011e6e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e58:	b672      	cpsid	i
 8011e5a:	f383 8811 	msr	BASEPRI, r3
 8011e5e:	f3bf 8f6f 	isb	sy
 8011e62:	f3bf 8f4f 	dsb	sy
 8011e66:	b662      	cpsie	i
 8011e68:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011e6a:	bf00      	nop
 8011e6c:	e7fe      	b.n	8011e6c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8011e6e:	f001 ffed 	bl	8013e4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	681a      	ldr	r2, [r3, #0]
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e7a:	68f9      	ldr	r1, [r7, #12]
 8011e7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011e7e:	fb01 f303 	mul.w	r3, r1, r3
 8011e82:	441a      	add	r2, r3
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	681a      	ldr	r2, [r3, #0]
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	681a      	ldr	r2, [r3, #0]
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e9e:	3b01      	subs	r3, #1
 8011ea0:	68f9      	ldr	r1, [r7, #12]
 8011ea2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011ea4:	fb01 f303 	mul.w	r3, r1, r3
 8011ea8:	441a      	add	r2, r3
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	22ff      	movs	r2, #255	; 0xff
 8011eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	22ff      	movs	r2, #255	; 0xff
 8011eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d114      	bne.n	8011eee <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	691b      	ldr	r3, [r3, #16]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d01a      	beq.n	8011f02 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	3310      	adds	r3, #16
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	f001 faa7 	bl	8013424 <xTaskRemoveFromEventList>
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d012      	beq.n	8011f02 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011edc:	4b0c      	ldr	r3, [pc, #48]	; (8011f10 <xQueueGenericReset+0xd0>)
 8011ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ee2:	601a      	str	r2, [r3, #0]
 8011ee4:	f3bf 8f4f 	dsb	sy
 8011ee8:	f3bf 8f6f 	isb	sy
 8011eec:	e009      	b.n	8011f02 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	3310      	adds	r3, #16
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7ff fef0 	bl	8011cd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	3324      	adds	r3, #36	; 0x24
 8011efc:	4618      	mov	r0, r3
 8011efe:	f7ff feeb 	bl	8011cd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011f02:	f001 ffd7 	bl	8013eb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011f06:	2301      	movs	r3, #1
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	3710      	adds	r7, #16
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}
 8011f10:	e000ed04 	.word	0xe000ed04

08011f14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b08e      	sub	sp, #56	; 0x38
 8011f18:	af02      	add	r7, sp, #8
 8011f1a:	60f8      	str	r0, [r7, #12]
 8011f1c:	60b9      	str	r1, [r7, #8]
 8011f1e:	607a      	str	r2, [r7, #4]
 8011f20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d10c      	bne.n	8011f42 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8011f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f2c:	b672      	cpsid	i
 8011f2e:	f383 8811 	msr	BASEPRI, r3
 8011f32:	f3bf 8f6f 	isb	sy
 8011f36:	f3bf 8f4f 	dsb	sy
 8011f3a:	b662      	cpsie	i
 8011f3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011f3e:	bf00      	nop
 8011f40:	e7fe      	b.n	8011f40 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011f42:	683b      	ldr	r3, [r7, #0]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d10c      	bne.n	8011f62 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8011f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f4c:	b672      	cpsid	i
 8011f4e:	f383 8811 	msr	BASEPRI, r3
 8011f52:	f3bf 8f6f 	isb	sy
 8011f56:	f3bf 8f4f 	dsb	sy
 8011f5a:	b662      	cpsie	i
 8011f5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011f5e:	bf00      	nop
 8011f60:	e7fe      	b.n	8011f60 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d002      	beq.n	8011f6e <xQueueGenericCreateStatic+0x5a>
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d001      	beq.n	8011f72 <xQueueGenericCreateStatic+0x5e>
 8011f6e:	2301      	movs	r3, #1
 8011f70:	e000      	b.n	8011f74 <xQueueGenericCreateStatic+0x60>
 8011f72:	2300      	movs	r3, #0
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d10c      	bne.n	8011f92 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8011f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f7c:	b672      	cpsid	i
 8011f7e:	f383 8811 	msr	BASEPRI, r3
 8011f82:	f3bf 8f6f 	isb	sy
 8011f86:	f3bf 8f4f 	dsb	sy
 8011f8a:	b662      	cpsie	i
 8011f8c:	623b      	str	r3, [r7, #32]
}
 8011f8e:	bf00      	nop
 8011f90:	e7fe      	b.n	8011f90 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d102      	bne.n	8011f9e <xQueueGenericCreateStatic+0x8a>
 8011f98:	68bb      	ldr	r3, [r7, #8]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d101      	bne.n	8011fa2 <xQueueGenericCreateStatic+0x8e>
 8011f9e:	2301      	movs	r3, #1
 8011fa0:	e000      	b.n	8011fa4 <xQueueGenericCreateStatic+0x90>
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d10c      	bne.n	8011fc2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8011fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fac:	b672      	cpsid	i
 8011fae:	f383 8811 	msr	BASEPRI, r3
 8011fb2:	f3bf 8f6f 	isb	sy
 8011fb6:	f3bf 8f4f 	dsb	sy
 8011fba:	b662      	cpsie	i
 8011fbc:	61fb      	str	r3, [r7, #28]
}
 8011fbe:	bf00      	nop
 8011fc0:	e7fe      	b.n	8011fc0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011fc2:	2348      	movs	r3, #72	; 0x48
 8011fc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	2b48      	cmp	r3, #72	; 0x48
 8011fca:	d00c      	beq.n	8011fe6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8011fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fd0:	b672      	cpsid	i
 8011fd2:	f383 8811 	msr	BASEPRI, r3
 8011fd6:	f3bf 8f6f 	isb	sy
 8011fda:	f3bf 8f4f 	dsb	sy
 8011fde:	b662      	cpsie	i
 8011fe0:	61bb      	str	r3, [r7, #24]
}
 8011fe2:	bf00      	nop
 8011fe4:	e7fe      	b.n	8011fe4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011fe6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d00d      	beq.n	801200e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff4:	2201      	movs	r2, #1
 8011ff6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011ffa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012000:	9300      	str	r3, [sp, #0]
 8012002:	4613      	mov	r3, r2
 8012004:	687a      	ldr	r2, [r7, #4]
 8012006:	68b9      	ldr	r1, [r7, #8]
 8012008:	68f8      	ldr	r0, [r7, #12]
 801200a:	f000 f847 	bl	801209c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801200e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012010:	4618      	mov	r0, r3
 8012012:	3730      	adds	r7, #48	; 0x30
 8012014:	46bd      	mov	sp, r7
 8012016:	bd80      	pop	{r7, pc}

08012018 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012018:	b580      	push	{r7, lr}
 801201a:	b08a      	sub	sp, #40	; 0x28
 801201c:	af02      	add	r7, sp, #8
 801201e:	60f8      	str	r0, [r7, #12]
 8012020:	60b9      	str	r1, [r7, #8]
 8012022:	4613      	mov	r3, r2
 8012024:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d10c      	bne.n	8012046 <xQueueGenericCreate+0x2e>
	__asm volatile
 801202c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012030:	b672      	cpsid	i
 8012032:	f383 8811 	msr	BASEPRI, r3
 8012036:	f3bf 8f6f 	isb	sy
 801203a:	f3bf 8f4f 	dsb	sy
 801203e:	b662      	cpsie	i
 8012040:	613b      	str	r3, [r7, #16]
}
 8012042:	bf00      	nop
 8012044:	e7fe      	b.n	8012044 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d102      	bne.n	8012052 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801204c:	2300      	movs	r3, #0
 801204e:	61fb      	str	r3, [r7, #28]
 8012050:	e004      	b.n	801205c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	68ba      	ldr	r2, [r7, #8]
 8012056:	fb02 f303 	mul.w	r3, r2, r3
 801205a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801205c:	69fb      	ldr	r3, [r7, #28]
 801205e:	3348      	adds	r3, #72	; 0x48
 8012060:	4618      	mov	r0, r3
 8012062:	f002 f81f 	bl	80140a4 <pvPortMalloc>
 8012066:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012068:	69bb      	ldr	r3, [r7, #24]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d011      	beq.n	8012092 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801206e:	69bb      	ldr	r3, [r7, #24]
 8012070:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012072:	697b      	ldr	r3, [r7, #20]
 8012074:	3348      	adds	r3, #72	; 0x48
 8012076:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012078:	69bb      	ldr	r3, [r7, #24]
 801207a:	2200      	movs	r2, #0
 801207c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012080:	79fa      	ldrb	r2, [r7, #7]
 8012082:	69bb      	ldr	r3, [r7, #24]
 8012084:	9300      	str	r3, [sp, #0]
 8012086:	4613      	mov	r3, r2
 8012088:	697a      	ldr	r2, [r7, #20]
 801208a:	68b9      	ldr	r1, [r7, #8]
 801208c:	68f8      	ldr	r0, [r7, #12]
 801208e:	f000 f805 	bl	801209c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012092:	69bb      	ldr	r3, [r7, #24]
	}
 8012094:	4618      	mov	r0, r3
 8012096:	3720      	adds	r7, #32
 8012098:	46bd      	mov	sp, r7
 801209a:	bd80      	pop	{r7, pc}

0801209c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b084      	sub	sp, #16
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	60f8      	str	r0, [r7, #12]
 80120a4:	60b9      	str	r1, [r7, #8]
 80120a6:	607a      	str	r2, [r7, #4]
 80120a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d103      	bne.n	80120b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80120b0:	69bb      	ldr	r3, [r7, #24]
 80120b2:	69ba      	ldr	r2, [r7, #24]
 80120b4:	601a      	str	r2, [r3, #0]
 80120b6:	e002      	b.n	80120be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80120b8:	69bb      	ldr	r3, [r7, #24]
 80120ba:	687a      	ldr	r2, [r7, #4]
 80120bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80120be:	69bb      	ldr	r3, [r7, #24]
 80120c0:	68fa      	ldr	r2, [r7, #12]
 80120c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80120c4:	69bb      	ldr	r3, [r7, #24]
 80120c6:	68ba      	ldr	r2, [r7, #8]
 80120c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80120ca:	2101      	movs	r1, #1
 80120cc:	69b8      	ldr	r0, [r7, #24]
 80120ce:	f7ff feb7 	bl	8011e40 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80120d2:	bf00      	nop
 80120d4:	3710      	adds	r7, #16
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}

080120da <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80120da:	b580      	push	{r7, lr}
 80120dc:	b082      	sub	sp, #8
 80120de:	af00      	add	r7, sp, #0
 80120e0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d00e      	beq.n	8012106 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2200      	movs	r2, #0
 80120ec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	2200      	movs	r2, #0
 80120f2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2200      	movs	r2, #0
 80120f8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80120fa:	2300      	movs	r3, #0
 80120fc:	2200      	movs	r2, #0
 80120fe:	2100      	movs	r1, #0
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f000 f837 	bl	8012174 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012106:	bf00      	nop
 8012108:	3708      	adds	r7, #8
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}

0801210e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801210e:	b580      	push	{r7, lr}
 8012110:	b086      	sub	sp, #24
 8012112:	af00      	add	r7, sp, #0
 8012114:	4603      	mov	r3, r0
 8012116:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012118:	2301      	movs	r3, #1
 801211a:	617b      	str	r3, [r7, #20]
 801211c:	2300      	movs	r3, #0
 801211e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012120:	79fb      	ldrb	r3, [r7, #7]
 8012122:	461a      	mov	r2, r3
 8012124:	6939      	ldr	r1, [r7, #16]
 8012126:	6978      	ldr	r0, [r7, #20]
 8012128:	f7ff ff76 	bl	8012018 <xQueueGenericCreate>
 801212c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801212e:	68f8      	ldr	r0, [r7, #12]
 8012130:	f7ff ffd3 	bl	80120da <prvInitialiseMutex>

		return xNewQueue;
 8012134:	68fb      	ldr	r3, [r7, #12]
	}
 8012136:	4618      	mov	r0, r3
 8012138:	3718      	adds	r7, #24
 801213a:	46bd      	mov	sp, r7
 801213c:	bd80      	pop	{r7, pc}

0801213e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801213e:	b580      	push	{r7, lr}
 8012140:	b088      	sub	sp, #32
 8012142:	af02      	add	r7, sp, #8
 8012144:	4603      	mov	r3, r0
 8012146:	6039      	str	r1, [r7, #0]
 8012148:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801214a:	2301      	movs	r3, #1
 801214c:	617b      	str	r3, [r7, #20]
 801214e:	2300      	movs	r3, #0
 8012150:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012152:	79fb      	ldrb	r3, [r7, #7]
 8012154:	9300      	str	r3, [sp, #0]
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	2200      	movs	r2, #0
 801215a:	6939      	ldr	r1, [r7, #16]
 801215c:	6978      	ldr	r0, [r7, #20]
 801215e:	f7ff fed9 	bl	8011f14 <xQueueGenericCreateStatic>
 8012162:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012164:	68f8      	ldr	r0, [r7, #12]
 8012166:	f7ff ffb8 	bl	80120da <prvInitialiseMutex>

		return xNewQueue;
 801216a:	68fb      	ldr	r3, [r7, #12]
	}
 801216c:	4618      	mov	r0, r3
 801216e:	3718      	adds	r7, #24
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}

08012174 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b08e      	sub	sp, #56	; 0x38
 8012178:	af00      	add	r7, sp, #0
 801217a:	60f8      	str	r0, [r7, #12]
 801217c:	60b9      	str	r1, [r7, #8]
 801217e:	607a      	str	r2, [r7, #4]
 8012180:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012182:	2300      	movs	r3, #0
 8012184:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801218a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801218c:	2b00      	cmp	r3, #0
 801218e:	d10c      	bne.n	80121aa <xQueueGenericSend+0x36>
	__asm volatile
 8012190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012194:	b672      	cpsid	i
 8012196:	f383 8811 	msr	BASEPRI, r3
 801219a:	f3bf 8f6f 	isb	sy
 801219e:	f3bf 8f4f 	dsb	sy
 80121a2:	b662      	cpsie	i
 80121a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80121a6:	bf00      	nop
 80121a8:	e7fe      	b.n	80121a8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80121aa:	68bb      	ldr	r3, [r7, #8]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d103      	bne.n	80121b8 <xQueueGenericSend+0x44>
 80121b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d101      	bne.n	80121bc <xQueueGenericSend+0x48>
 80121b8:	2301      	movs	r3, #1
 80121ba:	e000      	b.n	80121be <xQueueGenericSend+0x4a>
 80121bc:	2300      	movs	r3, #0
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d10c      	bne.n	80121dc <xQueueGenericSend+0x68>
	__asm volatile
 80121c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121c6:	b672      	cpsid	i
 80121c8:	f383 8811 	msr	BASEPRI, r3
 80121cc:	f3bf 8f6f 	isb	sy
 80121d0:	f3bf 8f4f 	dsb	sy
 80121d4:	b662      	cpsie	i
 80121d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80121d8:	bf00      	nop
 80121da:	e7fe      	b.n	80121da <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	2b02      	cmp	r3, #2
 80121e0:	d103      	bne.n	80121ea <xQueueGenericSend+0x76>
 80121e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121e6:	2b01      	cmp	r3, #1
 80121e8:	d101      	bne.n	80121ee <xQueueGenericSend+0x7a>
 80121ea:	2301      	movs	r3, #1
 80121ec:	e000      	b.n	80121f0 <xQueueGenericSend+0x7c>
 80121ee:	2300      	movs	r3, #0
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d10c      	bne.n	801220e <xQueueGenericSend+0x9a>
	__asm volatile
 80121f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121f8:	b672      	cpsid	i
 80121fa:	f383 8811 	msr	BASEPRI, r3
 80121fe:	f3bf 8f6f 	isb	sy
 8012202:	f3bf 8f4f 	dsb	sy
 8012206:	b662      	cpsie	i
 8012208:	623b      	str	r3, [r7, #32]
}
 801220a:	bf00      	nop
 801220c:	e7fe      	b.n	801220c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801220e:	f001 fad1 	bl	80137b4 <xTaskGetSchedulerState>
 8012212:	4603      	mov	r3, r0
 8012214:	2b00      	cmp	r3, #0
 8012216:	d102      	bne.n	801221e <xQueueGenericSend+0xaa>
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d101      	bne.n	8012222 <xQueueGenericSend+0xae>
 801221e:	2301      	movs	r3, #1
 8012220:	e000      	b.n	8012224 <xQueueGenericSend+0xb0>
 8012222:	2300      	movs	r3, #0
 8012224:	2b00      	cmp	r3, #0
 8012226:	d10c      	bne.n	8012242 <xQueueGenericSend+0xce>
	__asm volatile
 8012228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801222c:	b672      	cpsid	i
 801222e:	f383 8811 	msr	BASEPRI, r3
 8012232:	f3bf 8f6f 	isb	sy
 8012236:	f3bf 8f4f 	dsb	sy
 801223a:	b662      	cpsie	i
 801223c:	61fb      	str	r3, [r7, #28]
}
 801223e:	bf00      	nop
 8012240:	e7fe      	b.n	8012240 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012242:	f001 fe03 	bl	8013e4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801224c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801224e:	429a      	cmp	r2, r3
 8012250:	d302      	bcc.n	8012258 <xQueueGenericSend+0xe4>
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	2b02      	cmp	r3, #2
 8012256:	d129      	bne.n	80122ac <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012258:	683a      	ldr	r2, [r7, #0]
 801225a:	68b9      	ldr	r1, [r7, #8]
 801225c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801225e:	f000 faf7 	bl	8012850 <prvCopyDataToQueue>
 8012262:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012268:	2b00      	cmp	r3, #0
 801226a:	d010      	beq.n	801228e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801226c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801226e:	3324      	adds	r3, #36	; 0x24
 8012270:	4618      	mov	r0, r3
 8012272:	f001 f8d7 	bl	8013424 <xTaskRemoveFromEventList>
 8012276:	4603      	mov	r3, r0
 8012278:	2b00      	cmp	r3, #0
 801227a:	d013      	beq.n	80122a4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801227c:	4b3f      	ldr	r3, [pc, #252]	; (801237c <xQueueGenericSend+0x208>)
 801227e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012282:	601a      	str	r2, [r3, #0]
 8012284:	f3bf 8f4f 	dsb	sy
 8012288:	f3bf 8f6f 	isb	sy
 801228c:	e00a      	b.n	80122a4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012290:	2b00      	cmp	r3, #0
 8012292:	d007      	beq.n	80122a4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012294:	4b39      	ldr	r3, [pc, #228]	; (801237c <xQueueGenericSend+0x208>)
 8012296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801229a:	601a      	str	r2, [r3, #0]
 801229c:	f3bf 8f4f 	dsb	sy
 80122a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80122a4:	f001 fe06 	bl	8013eb4 <vPortExitCritical>
				return pdPASS;
 80122a8:	2301      	movs	r3, #1
 80122aa:	e063      	b.n	8012374 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d103      	bne.n	80122ba <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80122b2:	f001 fdff 	bl	8013eb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80122b6:	2300      	movs	r3, #0
 80122b8:	e05c      	b.n	8012374 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80122ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d106      	bne.n	80122ce <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80122c0:	f107 0314 	add.w	r3, r7, #20
 80122c4:	4618      	mov	r0, r3
 80122c6:	f001 f911 	bl	80134ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80122ca:	2301      	movs	r3, #1
 80122cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80122ce:	f001 fdf1 	bl	8013eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80122d2:	f000 fea7 	bl	8013024 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80122d6:	f001 fdb9 	bl	8013e4c <vPortEnterCritical>
 80122da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80122e0:	b25b      	sxtb	r3, r3
 80122e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122e6:	d103      	bne.n	80122f0 <xQueueGenericSend+0x17c>
 80122e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ea:	2200      	movs	r2, #0
 80122ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80122f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80122f6:	b25b      	sxtb	r3, r3
 80122f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122fc:	d103      	bne.n	8012306 <xQueueGenericSend+0x192>
 80122fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012300:	2200      	movs	r2, #0
 8012302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012306:	f001 fdd5 	bl	8013eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801230a:	1d3a      	adds	r2, r7, #4
 801230c:	f107 0314 	add.w	r3, r7, #20
 8012310:	4611      	mov	r1, r2
 8012312:	4618      	mov	r0, r3
 8012314:	f001 f900 	bl	8013518 <xTaskCheckForTimeOut>
 8012318:	4603      	mov	r3, r0
 801231a:	2b00      	cmp	r3, #0
 801231c:	d124      	bne.n	8012368 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801231e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012320:	f000 fb8e 	bl	8012a40 <prvIsQueueFull>
 8012324:	4603      	mov	r3, r0
 8012326:	2b00      	cmp	r3, #0
 8012328:	d018      	beq.n	801235c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801232a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801232c:	3310      	adds	r3, #16
 801232e:	687a      	ldr	r2, [r7, #4]
 8012330:	4611      	mov	r1, r2
 8012332:	4618      	mov	r0, r3
 8012334:	f001 f850 	bl	80133d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801233a:	f000 fb19 	bl	8012970 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801233e:	f000 fe7f 	bl	8013040 <xTaskResumeAll>
 8012342:	4603      	mov	r3, r0
 8012344:	2b00      	cmp	r3, #0
 8012346:	f47f af7c 	bne.w	8012242 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 801234a:	4b0c      	ldr	r3, [pc, #48]	; (801237c <xQueueGenericSend+0x208>)
 801234c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012350:	601a      	str	r2, [r3, #0]
 8012352:	f3bf 8f4f 	dsb	sy
 8012356:	f3bf 8f6f 	isb	sy
 801235a:	e772      	b.n	8012242 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801235c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801235e:	f000 fb07 	bl	8012970 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012362:	f000 fe6d 	bl	8013040 <xTaskResumeAll>
 8012366:	e76c      	b.n	8012242 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801236a:	f000 fb01 	bl	8012970 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801236e:	f000 fe67 	bl	8013040 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012372:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012374:	4618      	mov	r0, r3
 8012376:	3738      	adds	r7, #56	; 0x38
 8012378:	46bd      	mov	sp, r7
 801237a:	bd80      	pop	{r7, pc}
 801237c:	e000ed04 	.word	0xe000ed04

08012380 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b08e      	sub	sp, #56	; 0x38
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
 8012388:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012390:	2b00      	cmp	r3, #0
 8012392:	d10c      	bne.n	80123ae <xQueueGiveFromISR+0x2e>
	__asm volatile
 8012394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012398:	b672      	cpsid	i
 801239a:	f383 8811 	msr	BASEPRI, r3
 801239e:	f3bf 8f6f 	isb	sy
 80123a2:	f3bf 8f4f 	dsb	sy
 80123a6:	b662      	cpsie	i
 80123a8:	623b      	str	r3, [r7, #32]
}
 80123aa:	bf00      	nop
 80123ac:	e7fe      	b.n	80123ac <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80123ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d00c      	beq.n	80123d0 <xQueueGiveFromISR+0x50>
	__asm volatile
 80123b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ba:	b672      	cpsid	i
 80123bc:	f383 8811 	msr	BASEPRI, r3
 80123c0:	f3bf 8f6f 	isb	sy
 80123c4:	f3bf 8f4f 	dsb	sy
 80123c8:	b662      	cpsie	i
 80123ca:	61fb      	str	r3, [r7, #28]
}
 80123cc:	bf00      	nop
 80123ce:	e7fe      	b.n	80123ce <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80123d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d103      	bne.n	80123e0 <xQueueGiveFromISR+0x60>
 80123d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123da:	689b      	ldr	r3, [r3, #8]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d101      	bne.n	80123e4 <xQueueGiveFromISR+0x64>
 80123e0:	2301      	movs	r3, #1
 80123e2:	e000      	b.n	80123e6 <xQueueGiveFromISR+0x66>
 80123e4:	2300      	movs	r3, #0
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d10c      	bne.n	8012404 <xQueueGiveFromISR+0x84>
	__asm volatile
 80123ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ee:	b672      	cpsid	i
 80123f0:	f383 8811 	msr	BASEPRI, r3
 80123f4:	f3bf 8f6f 	isb	sy
 80123f8:	f3bf 8f4f 	dsb	sy
 80123fc:	b662      	cpsie	i
 80123fe:	61bb      	str	r3, [r7, #24]
}
 8012400:	bf00      	nop
 8012402:	e7fe      	b.n	8012402 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012404:	f001 fe0a 	bl	801401c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012408:	f3ef 8211 	mrs	r2, BASEPRI
 801240c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012410:	b672      	cpsid	i
 8012412:	f383 8811 	msr	BASEPRI, r3
 8012416:	f3bf 8f6f 	isb	sy
 801241a:	f3bf 8f4f 	dsb	sy
 801241e:	b662      	cpsie	i
 8012420:	617a      	str	r2, [r7, #20]
 8012422:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012424:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012426:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801242c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012434:	429a      	cmp	r2, r3
 8012436:	d22b      	bcs.n	8012490 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801243a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801243e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012444:	1c5a      	adds	r2, r3, #1
 8012446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012448:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801244a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801244e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012452:	d112      	bne.n	801247a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012458:	2b00      	cmp	r3, #0
 801245a:	d016      	beq.n	801248a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801245c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801245e:	3324      	adds	r3, #36	; 0x24
 8012460:	4618      	mov	r0, r3
 8012462:	f000 ffdf 	bl	8013424 <xTaskRemoveFromEventList>
 8012466:	4603      	mov	r3, r0
 8012468:	2b00      	cmp	r3, #0
 801246a:	d00e      	beq.n	801248a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d00b      	beq.n	801248a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012472:	683b      	ldr	r3, [r7, #0]
 8012474:	2201      	movs	r2, #1
 8012476:	601a      	str	r2, [r3, #0]
 8012478:	e007      	b.n	801248a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801247a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801247e:	3301      	adds	r3, #1
 8012480:	b2db      	uxtb	r3, r3
 8012482:	b25a      	sxtb	r2, r3
 8012484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801248a:	2301      	movs	r3, #1
 801248c:	637b      	str	r3, [r7, #52]	; 0x34
 801248e:	e001      	b.n	8012494 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012490:	2300      	movs	r3, #0
 8012492:	637b      	str	r3, [r7, #52]	; 0x34
 8012494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012496:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801249e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80124a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	3738      	adds	r7, #56	; 0x38
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}
	...

080124ac <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b08e      	sub	sp, #56	; 0x38
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
 80124b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80124b6:	2300      	movs	r3, #0
 80124b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80124be:	2300      	movs	r3, #0
 80124c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80124c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d10c      	bne.n	80124e2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 80124c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124cc:	b672      	cpsid	i
 80124ce:	f383 8811 	msr	BASEPRI, r3
 80124d2:	f3bf 8f6f 	isb	sy
 80124d6:	f3bf 8f4f 	dsb	sy
 80124da:	b662      	cpsie	i
 80124dc:	623b      	str	r3, [r7, #32]
}
 80124de:	bf00      	nop
 80124e0:	e7fe      	b.n	80124e0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80124e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d00c      	beq.n	8012504 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80124ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ee:	b672      	cpsid	i
 80124f0:	f383 8811 	msr	BASEPRI, r3
 80124f4:	f3bf 8f6f 	isb	sy
 80124f8:	f3bf 8f4f 	dsb	sy
 80124fc:	b662      	cpsie	i
 80124fe:	61fb      	str	r3, [r7, #28]
}
 8012500:	bf00      	nop
 8012502:	e7fe      	b.n	8012502 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012504:	f001 f956 	bl	80137b4 <xTaskGetSchedulerState>
 8012508:	4603      	mov	r3, r0
 801250a:	2b00      	cmp	r3, #0
 801250c:	d102      	bne.n	8012514 <xQueueSemaphoreTake+0x68>
 801250e:	683b      	ldr	r3, [r7, #0]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d101      	bne.n	8012518 <xQueueSemaphoreTake+0x6c>
 8012514:	2301      	movs	r3, #1
 8012516:	e000      	b.n	801251a <xQueueSemaphoreTake+0x6e>
 8012518:	2300      	movs	r3, #0
 801251a:	2b00      	cmp	r3, #0
 801251c:	d10c      	bne.n	8012538 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 801251e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012522:	b672      	cpsid	i
 8012524:	f383 8811 	msr	BASEPRI, r3
 8012528:	f3bf 8f6f 	isb	sy
 801252c:	f3bf 8f4f 	dsb	sy
 8012530:	b662      	cpsie	i
 8012532:	61bb      	str	r3, [r7, #24]
}
 8012534:	bf00      	nop
 8012536:	e7fe      	b.n	8012536 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012538:	f001 fc88 	bl	8013e4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801253e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012540:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012544:	2b00      	cmp	r3, #0
 8012546:	d024      	beq.n	8012592 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801254a:	1e5a      	subs	r2, r3, #1
 801254c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801254e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d104      	bne.n	8012562 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012558:	f001 faf2 	bl	8013b40 <pvTaskIncrementMutexHeldCount>
 801255c:	4602      	mov	r2, r0
 801255e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012560:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012564:	691b      	ldr	r3, [r3, #16]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d00f      	beq.n	801258a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801256c:	3310      	adds	r3, #16
 801256e:	4618      	mov	r0, r3
 8012570:	f000 ff58 	bl	8013424 <xTaskRemoveFromEventList>
 8012574:	4603      	mov	r3, r0
 8012576:	2b00      	cmp	r3, #0
 8012578:	d007      	beq.n	801258a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801257a:	4b55      	ldr	r3, [pc, #340]	; (80126d0 <xQueueSemaphoreTake+0x224>)
 801257c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012580:	601a      	str	r2, [r3, #0]
 8012582:	f3bf 8f4f 	dsb	sy
 8012586:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801258a:	f001 fc93 	bl	8013eb4 <vPortExitCritical>
				return pdPASS;
 801258e:	2301      	movs	r3, #1
 8012590:	e099      	b.n	80126c6 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d113      	bne.n	80125c0 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801259a:	2b00      	cmp	r3, #0
 801259c:	d00c      	beq.n	80125b8 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 801259e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125a2:	b672      	cpsid	i
 80125a4:	f383 8811 	msr	BASEPRI, r3
 80125a8:	f3bf 8f6f 	isb	sy
 80125ac:	f3bf 8f4f 	dsb	sy
 80125b0:	b662      	cpsie	i
 80125b2:	617b      	str	r3, [r7, #20]
}
 80125b4:	bf00      	nop
 80125b6:	e7fe      	b.n	80125b6 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80125b8:	f001 fc7c 	bl	8013eb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80125bc:	2300      	movs	r3, #0
 80125be:	e082      	b.n	80126c6 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80125c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d106      	bne.n	80125d4 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80125c6:	f107 030c 	add.w	r3, r7, #12
 80125ca:	4618      	mov	r0, r3
 80125cc:	f000 ff8e 	bl	80134ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80125d0:	2301      	movs	r3, #1
 80125d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80125d4:	f001 fc6e 	bl	8013eb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80125d8:	f000 fd24 	bl	8013024 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80125dc:	f001 fc36 	bl	8013e4c <vPortEnterCritical>
 80125e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80125e6:	b25b      	sxtb	r3, r3
 80125e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125ec:	d103      	bne.n	80125f6 <xQueueSemaphoreTake+0x14a>
 80125ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125f0:	2200      	movs	r2, #0
 80125f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80125f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80125fc:	b25b      	sxtb	r3, r3
 80125fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012602:	d103      	bne.n	801260c <xQueueSemaphoreTake+0x160>
 8012604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012606:	2200      	movs	r2, #0
 8012608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801260c:	f001 fc52 	bl	8013eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012610:	463a      	mov	r2, r7
 8012612:	f107 030c 	add.w	r3, r7, #12
 8012616:	4611      	mov	r1, r2
 8012618:	4618      	mov	r0, r3
 801261a:	f000 ff7d 	bl	8013518 <xTaskCheckForTimeOut>
 801261e:	4603      	mov	r3, r0
 8012620:	2b00      	cmp	r3, #0
 8012622:	d132      	bne.n	801268a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012624:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012626:	f000 f9f5 	bl	8012a14 <prvIsQueueEmpty>
 801262a:	4603      	mov	r3, r0
 801262c:	2b00      	cmp	r3, #0
 801262e:	d026      	beq.n	801267e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d109      	bne.n	801264c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8012638:	f001 fc08 	bl	8013e4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801263c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801263e:	689b      	ldr	r3, [r3, #8]
 8012640:	4618      	mov	r0, r3
 8012642:	f001 f8d5 	bl	80137f0 <xTaskPriorityInherit>
 8012646:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012648:	f001 fc34 	bl	8013eb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801264e:	3324      	adds	r3, #36	; 0x24
 8012650:	683a      	ldr	r2, [r7, #0]
 8012652:	4611      	mov	r1, r2
 8012654:	4618      	mov	r0, r3
 8012656:	f000 febf 	bl	80133d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801265a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801265c:	f000 f988 	bl	8012970 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012660:	f000 fcee 	bl	8013040 <xTaskResumeAll>
 8012664:	4603      	mov	r3, r0
 8012666:	2b00      	cmp	r3, #0
 8012668:	f47f af66 	bne.w	8012538 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 801266c:	4b18      	ldr	r3, [pc, #96]	; (80126d0 <xQueueSemaphoreTake+0x224>)
 801266e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012672:	601a      	str	r2, [r3, #0]
 8012674:	f3bf 8f4f 	dsb	sy
 8012678:	f3bf 8f6f 	isb	sy
 801267c:	e75c      	b.n	8012538 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801267e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012680:	f000 f976 	bl	8012970 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012684:	f000 fcdc 	bl	8013040 <xTaskResumeAll>
 8012688:	e756      	b.n	8012538 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801268a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801268c:	f000 f970 	bl	8012970 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012690:	f000 fcd6 	bl	8013040 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012694:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012696:	f000 f9bd 	bl	8012a14 <prvIsQueueEmpty>
 801269a:	4603      	mov	r3, r0
 801269c:	2b00      	cmp	r3, #0
 801269e:	f43f af4b 	beq.w	8012538 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80126a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d00d      	beq.n	80126c4 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80126a8:	f001 fbd0 	bl	8013e4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80126ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126ae:	f000 f8b7 	bl	8012820 <prvGetDisinheritPriorityAfterTimeout>
 80126b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80126b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126b6:	689b      	ldr	r3, [r3, #8]
 80126b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80126ba:	4618      	mov	r0, r3
 80126bc:	f001 f9a2 	bl	8013a04 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80126c0:	f001 fbf8 	bl	8013eb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80126c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	3738      	adds	r7, #56	; 0x38
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd80      	pop	{r7, pc}
 80126ce:	bf00      	nop
 80126d0:	e000ed04 	.word	0xe000ed04

080126d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b08e      	sub	sp, #56	; 0x38
 80126d8:	af00      	add	r7, sp, #0
 80126da:	60f8      	str	r0, [r7, #12]
 80126dc:	60b9      	str	r1, [r7, #8]
 80126de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80126e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d10c      	bne.n	8012704 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80126ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ee:	b672      	cpsid	i
 80126f0:	f383 8811 	msr	BASEPRI, r3
 80126f4:	f3bf 8f6f 	isb	sy
 80126f8:	f3bf 8f4f 	dsb	sy
 80126fc:	b662      	cpsie	i
 80126fe:	623b      	str	r3, [r7, #32]
}
 8012700:	bf00      	nop
 8012702:	e7fe      	b.n	8012702 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012704:	68bb      	ldr	r3, [r7, #8]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d103      	bne.n	8012712 <xQueueReceiveFromISR+0x3e>
 801270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801270e:	2b00      	cmp	r3, #0
 8012710:	d101      	bne.n	8012716 <xQueueReceiveFromISR+0x42>
 8012712:	2301      	movs	r3, #1
 8012714:	e000      	b.n	8012718 <xQueueReceiveFromISR+0x44>
 8012716:	2300      	movs	r3, #0
 8012718:	2b00      	cmp	r3, #0
 801271a:	d10c      	bne.n	8012736 <xQueueReceiveFromISR+0x62>
	__asm volatile
 801271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012720:	b672      	cpsid	i
 8012722:	f383 8811 	msr	BASEPRI, r3
 8012726:	f3bf 8f6f 	isb	sy
 801272a:	f3bf 8f4f 	dsb	sy
 801272e:	b662      	cpsie	i
 8012730:	61fb      	str	r3, [r7, #28]
}
 8012732:	bf00      	nop
 8012734:	e7fe      	b.n	8012734 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012736:	f001 fc71 	bl	801401c <vPortValidateInterruptPriority>
	__asm volatile
 801273a:	f3ef 8211 	mrs	r2, BASEPRI
 801273e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012742:	b672      	cpsid	i
 8012744:	f383 8811 	msr	BASEPRI, r3
 8012748:	f3bf 8f6f 	isb	sy
 801274c:	f3bf 8f4f 	dsb	sy
 8012750:	b662      	cpsie	i
 8012752:	61ba      	str	r2, [r7, #24]
 8012754:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012756:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012758:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801275a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801275c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801275e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012762:	2b00      	cmp	r3, #0
 8012764:	d02f      	beq.n	80127c6 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012768:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801276c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012770:	68b9      	ldr	r1, [r7, #8]
 8012772:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012774:	f000 f8d6 	bl	8012924 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801277a:	1e5a      	subs	r2, r3, #1
 801277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801277e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012780:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012788:	d112      	bne.n	80127b0 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801278a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801278c:	691b      	ldr	r3, [r3, #16]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d016      	beq.n	80127c0 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012794:	3310      	adds	r3, #16
 8012796:	4618      	mov	r0, r3
 8012798:	f000 fe44 	bl	8013424 <xTaskRemoveFromEventList>
 801279c:	4603      	mov	r3, r0
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d00e      	beq.n	80127c0 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d00b      	beq.n	80127c0 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2201      	movs	r2, #1
 80127ac:	601a      	str	r2, [r3, #0]
 80127ae:	e007      	b.n	80127c0 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80127b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127b4:	3301      	adds	r3, #1
 80127b6:	b2db      	uxtb	r3, r3
 80127b8:	b25a      	sxtb	r2, r3
 80127ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80127c0:	2301      	movs	r3, #1
 80127c2:	637b      	str	r3, [r7, #52]	; 0x34
 80127c4:	e001      	b.n	80127ca <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80127c6:	2300      	movs	r3, #0
 80127c8:	637b      	str	r3, [r7, #52]	; 0x34
 80127ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80127ce:	693b      	ldr	r3, [r7, #16]
 80127d0:	f383 8811 	msr	BASEPRI, r3
}
 80127d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80127d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80127d8:	4618      	mov	r0, r3
 80127da:	3738      	adds	r7, #56	; 0x38
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd80      	pop	{r7, pc}

080127e0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b084      	sub	sp, #16
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d10c      	bne.n	8012808 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 80127ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127f2:	b672      	cpsid	i
 80127f4:	f383 8811 	msr	BASEPRI, r3
 80127f8:	f3bf 8f6f 	isb	sy
 80127fc:	f3bf 8f4f 	dsb	sy
 8012800:	b662      	cpsie	i
 8012802:	60bb      	str	r3, [r7, #8]
}
 8012804:	bf00      	nop
 8012806:	e7fe      	b.n	8012806 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8012808:	f001 fb20 	bl	8013e4c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012810:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8012812:	f001 fb4f 	bl	8013eb4 <vPortExitCritical>

	return uxReturn;
 8012816:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012818:	4618      	mov	r0, r3
 801281a:	3710      	adds	r7, #16
 801281c:	46bd      	mov	sp, r7
 801281e:	bd80      	pop	{r7, pc}

08012820 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012820:	b480      	push	{r7}
 8012822:	b085      	sub	sp, #20
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801282c:	2b00      	cmp	r3, #0
 801282e:	d006      	beq.n	801283e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	f1c3 0307 	rsb	r3, r3, #7
 801283a:	60fb      	str	r3, [r7, #12]
 801283c:	e001      	b.n	8012842 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801283e:	2300      	movs	r3, #0
 8012840:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012842:	68fb      	ldr	r3, [r7, #12]
	}
 8012844:	4618      	mov	r0, r3
 8012846:	3714      	adds	r7, #20
 8012848:	46bd      	mov	sp, r7
 801284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284e:	4770      	bx	lr

08012850 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b086      	sub	sp, #24
 8012854:	af00      	add	r7, sp, #0
 8012856:	60f8      	str	r0, [r7, #12]
 8012858:	60b9      	str	r1, [r7, #8]
 801285a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801285c:	2300      	movs	r3, #0
 801285e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012864:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801286a:	2b00      	cmp	r3, #0
 801286c:	d10d      	bne.n	801288a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d14d      	bne.n	8012912 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	689b      	ldr	r3, [r3, #8]
 801287a:	4618      	mov	r0, r3
 801287c:	f001 f838 	bl	80138f0 <xTaskPriorityDisinherit>
 8012880:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	2200      	movs	r2, #0
 8012886:	609a      	str	r2, [r3, #8]
 8012888:	e043      	b.n	8012912 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d119      	bne.n	80128c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	6858      	ldr	r0, [r3, #4]
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012898:	461a      	mov	r2, r3
 801289a:	68b9      	ldr	r1, [r7, #8]
 801289c:	f002 fe97 	bl	80155ce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	685a      	ldr	r2, [r3, #4]
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128a8:	441a      	add	r2, r3
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	685a      	ldr	r2, [r3, #4]
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	689b      	ldr	r3, [r3, #8]
 80128b6:	429a      	cmp	r2, r3
 80128b8:	d32b      	bcc.n	8012912 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	681a      	ldr	r2, [r3, #0]
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	605a      	str	r2, [r3, #4]
 80128c2:	e026      	b.n	8012912 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	68d8      	ldr	r0, [r3, #12]
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128cc:	461a      	mov	r2, r3
 80128ce:	68b9      	ldr	r1, [r7, #8]
 80128d0:	f002 fe7d 	bl	80155ce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	68da      	ldr	r2, [r3, #12]
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128dc:	425b      	negs	r3, r3
 80128de:	441a      	add	r2, r3
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	68da      	ldr	r2, [r3, #12]
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	429a      	cmp	r2, r3
 80128ee:	d207      	bcs.n	8012900 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	689a      	ldr	r2, [r3, #8]
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128f8:	425b      	negs	r3, r3
 80128fa:	441a      	add	r2, r3
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2b02      	cmp	r3, #2
 8012904:	d105      	bne.n	8012912 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012906:	693b      	ldr	r3, [r7, #16]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d002      	beq.n	8012912 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801290c:	693b      	ldr	r3, [r7, #16]
 801290e:	3b01      	subs	r3, #1
 8012910:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012912:	693b      	ldr	r3, [r7, #16]
 8012914:	1c5a      	adds	r2, r3, #1
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801291a:	697b      	ldr	r3, [r7, #20]
}
 801291c:	4618      	mov	r0, r3
 801291e:	3718      	adds	r7, #24
 8012920:	46bd      	mov	sp, r7
 8012922:	bd80      	pop	{r7, pc}

08012924 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b082      	sub	sp, #8
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
 801292c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012932:	2b00      	cmp	r3, #0
 8012934:	d018      	beq.n	8012968 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	68da      	ldr	r2, [r3, #12]
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801293e:	441a      	add	r2, r3
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	68da      	ldr	r2, [r3, #12]
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	689b      	ldr	r3, [r3, #8]
 801294c:	429a      	cmp	r2, r3
 801294e:	d303      	bcc.n	8012958 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681a      	ldr	r2, [r3, #0]
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	68d9      	ldr	r1, [r3, #12]
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012960:	461a      	mov	r2, r3
 8012962:	6838      	ldr	r0, [r7, #0]
 8012964:	f002 fe33 	bl	80155ce <memcpy>
	}
}
 8012968:	bf00      	nop
 801296a:	3708      	adds	r7, #8
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}

08012970 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b084      	sub	sp, #16
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012978:	f001 fa68 	bl	8013e4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012982:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012984:	e011      	b.n	80129aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801298a:	2b00      	cmp	r3, #0
 801298c:	d012      	beq.n	80129b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	3324      	adds	r3, #36	; 0x24
 8012992:	4618      	mov	r0, r3
 8012994:	f000 fd46 	bl	8013424 <xTaskRemoveFromEventList>
 8012998:	4603      	mov	r3, r0
 801299a:	2b00      	cmp	r3, #0
 801299c:	d001      	beq.n	80129a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801299e:	f000 fe21 	bl	80135e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80129a2:	7bfb      	ldrb	r3, [r7, #15]
 80129a4:	3b01      	subs	r3, #1
 80129a6:	b2db      	uxtb	r3, r3
 80129a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80129aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	dce9      	bgt.n	8012986 <prvUnlockQueue+0x16>
 80129b2:	e000      	b.n	80129b6 <prvUnlockQueue+0x46>
					break;
 80129b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	22ff      	movs	r2, #255	; 0xff
 80129ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80129be:	f001 fa79 	bl	8013eb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80129c2:	f001 fa43 	bl	8013e4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80129cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80129ce:	e011      	b.n	80129f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	691b      	ldr	r3, [r3, #16]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d012      	beq.n	80129fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	3310      	adds	r3, #16
 80129dc:	4618      	mov	r0, r3
 80129de:	f000 fd21 	bl	8013424 <xTaskRemoveFromEventList>
 80129e2:	4603      	mov	r3, r0
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d001      	beq.n	80129ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80129e8:	f000 fdfc 	bl	80135e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80129ec:	7bbb      	ldrb	r3, [r7, #14]
 80129ee:	3b01      	subs	r3, #1
 80129f0:	b2db      	uxtb	r3, r3
 80129f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80129f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	dce9      	bgt.n	80129d0 <prvUnlockQueue+0x60>
 80129fc:	e000      	b.n	8012a00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80129fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	22ff      	movs	r2, #255	; 0xff
 8012a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012a08:	f001 fa54 	bl	8013eb4 <vPortExitCritical>
}
 8012a0c:	bf00      	nop
 8012a0e:	3710      	adds	r7, #16
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}

08012a14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b084      	sub	sp, #16
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012a1c:	f001 fa16 	bl	8013e4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d102      	bne.n	8012a2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012a28:	2301      	movs	r3, #1
 8012a2a:	60fb      	str	r3, [r7, #12]
 8012a2c:	e001      	b.n	8012a32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012a32:	f001 fa3f 	bl	8013eb4 <vPortExitCritical>

	return xReturn;
 8012a36:	68fb      	ldr	r3, [r7, #12]
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3710      	adds	r7, #16
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd80      	pop	{r7, pc}

08012a40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b084      	sub	sp, #16
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012a48:	f001 fa00 	bl	8013e4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d102      	bne.n	8012a5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012a58:	2301      	movs	r3, #1
 8012a5a:	60fb      	str	r3, [r7, #12]
 8012a5c:	e001      	b.n	8012a62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012a5e:	2300      	movs	r3, #0
 8012a60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012a62:	f001 fa27 	bl	8013eb4 <vPortExitCritical>

	return xReturn;
 8012a66:	68fb      	ldr	r3, [r7, #12]
}
 8012a68:	4618      	mov	r0, r3
 8012a6a:	3710      	adds	r7, #16
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}

08012a70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b08e      	sub	sp, #56	; 0x38
 8012a74:	af04      	add	r7, sp, #16
 8012a76:	60f8      	str	r0, [r7, #12]
 8012a78:	60b9      	str	r1, [r7, #8]
 8012a7a:	607a      	str	r2, [r7, #4]
 8012a7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d10c      	bne.n	8012a9e <xTaskCreateStatic+0x2e>
	__asm volatile
 8012a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a88:	b672      	cpsid	i
 8012a8a:	f383 8811 	msr	BASEPRI, r3
 8012a8e:	f3bf 8f6f 	isb	sy
 8012a92:	f3bf 8f4f 	dsb	sy
 8012a96:	b662      	cpsie	i
 8012a98:	623b      	str	r3, [r7, #32]
}
 8012a9a:	bf00      	nop
 8012a9c:	e7fe      	b.n	8012a9c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8012a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d10c      	bne.n	8012abe <xTaskCreateStatic+0x4e>
	__asm volatile
 8012aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aa8:	b672      	cpsid	i
 8012aaa:	f383 8811 	msr	BASEPRI, r3
 8012aae:	f3bf 8f6f 	isb	sy
 8012ab2:	f3bf 8f4f 	dsb	sy
 8012ab6:	b662      	cpsie	i
 8012ab8:	61fb      	str	r3, [r7, #28]
}
 8012aba:	bf00      	nop
 8012abc:	e7fe      	b.n	8012abc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012abe:	23a0      	movs	r3, #160	; 0xa0
 8012ac0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012ac2:	693b      	ldr	r3, [r7, #16]
 8012ac4:	2ba0      	cmp	r3, #160	; 0xa0
 8012ac6:	d00c      	beq.n	8012ae2 <xTaskCreateStatic+0x72>
	__asm volatile
 8012ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012acc:	b672      	cpsid	i
 8012ace:	f383 8811 	msr	BASEPRI, r3
 8012ad2:	f3bf 8f6f 	isb	sy
 8012ad6:	f3bf 8f4f 	dsb	sy
 8012ada:	b662      	cpsie	i
 8012adc:	61bb      	str	r3, [r7, #24]
}
 8012ade:	bf00      	nop
 8012ae0:	e7fe      	b.n	8012ae0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012ae2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d01e      	beq.n	8012b28 <xTaskCreateStatic+0xb8>
 8012aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d01b      	beq.n	8012b28 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012af2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012af8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012afc:	2202      	movs	r2, #2
 8012afe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012b02:	2300      	movs	r3, #0
 8012b04:	9303      	str	r3, [sp, #12]
 8012b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b08:	9302      	str	r3, [sp, #8]
 8012b0a:	f107 0314 	add.w	r3, r7, #20
 8012b0e:	9301      	str	r3, [sp, #4]
 8012b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b12:	9300      	str	r3, [sp, #0]
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	687a      	ldr	r2, [r7, #4]
 8012b18:	68b9      	ldr	r1, [r7, #8]
 8012b1a:	68f8      	ldr	r0, [r7, #12]
 8012b1c:	f000 f850 	bl	8012bc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012b20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b22:	f000 f8ed 	bl	8012d00 <prvAddNewTaskToReadyList>
 8012b26:	e001      	b.n	8012b2c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8012b28:	2300      	movs	r3, #0
 8012b2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012b2c:	697b      	ldr	r3, [r7, #20]
	}
 8012b2e:	4618      	mov	r0, r3
 8012b30:	3728      	adds	r7, #40	; 0x28
 8012b32:	46bd      	mov	sp, r7
 8012b34:	bd80      	pop	{r7, pc}

08012b36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012b36:	b580      	push	{r7, lr}
 8012b38:	b08c      	sub	sp, #48	; 0x30
 8012b3a:	af04      	add	r7, sp, #16
 8012b3c:	60f8      	str	r0, [r7, #12]
 8012b3e:	60b9      	str	r1, [r7, #8]
 8012b40:	603b      	str	r3, [r7, #0]
 8012b42:	4613      	mov	r3, r2
 8012b44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012b46:	88fb      	ldrh	r3, [r7, #6]
 8012b48:	009b      	lsls	r3, r3, #2
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f001 faaa 	bl	80140a4 <pvPortMalloc>
 8012b50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012b52:	697b      	ldr	r3, [r7, #20]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d00e      	beq.n	8012b76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012b58:	20a0      	movs	r0, #160	; 0xa0
 8012b5a:	f001 faa3 	bl	80140a4 <pvPortMalloc>
 8012b5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012b60:	69fb      	ldr	r3, [r7, #28]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d003      	beq.n	8012b6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012b66:	69fb      	ldr	r3, [r7, #28]
 8012b68:	697a      	ldr	r2, [r7, #20]
 8012b6a:	631a      	str	r2, [r3, #48]	; 0x30
 8012b6c:	e005      	b.n	8012b7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012b6e:	6978      	ldr	r0, [r7, #20]
 8012b70:	f001 fb62 	bl	8014238 <vPortFree>
 8012b74:	e001      	b.n	8012b7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012b76:	2300      	movs	r3, #0
 8012b78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012b7a:	69fb      	ldr	r3, [r7, #28]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d017      	beq.n	8012bb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012b80:	69fb      	ldr	r3, [r7, #28]
 8012b82:	2200      	movs	r2, #0
 8012b84:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012b88:	88fa      	ldrh	r2, [r7, #6]
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	9303      	str	r3, [sp, #12]
 8012b8e:	69fb      	ldr	r3, [r7, #28]
 8012b90:	9302      	str	r3, [sp, #8]
 8012b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b94:	9301      	str	r3, [sp, #4]
 8012b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b98:	9300      	str	r3, [sp, #0]
 8012b9a:	683b      	ldr	r3, [r7, #0]
 8012b9c:	68b9      	ldr	r1, [r7, #8]
 8012b9e:	68f8      	ldr	r0, [r7, #12]
 8012ba0:	f000 f80e 	bl	8012bc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012ba4:	69f8      	ldr	r0, [r7, #28]
 8012ba6:	f000 f8ab 	bl	8012d00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012baa:	2301      	movs	r3, #1
 8012bac:	61bb      	str	r3, [r7, #24]
 8012bae:	e002      	b.n	8012bb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8012bb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012bb6:	69bb      	ldr	r3, [r7, #24]
	}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	3720      	adds	r7, #32
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd80      	pop	{r7, pc}

08012bc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b088      	sub	sp, #32
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	60f8      	str	r0, [r7, #12]
 8012bc8:	60b9      	str	r1, [r7, #8]
 8012bca:	607a      	str	r2, [r7, #4]
 8012bcc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012bd2:	6879      	ldr	r1, [r7, #4]
 8012bd4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012bd8:	440b      	add	r3, r1
 8012bda:	009b      	lsls	r3, r3, #2
 8012bdc:	4413      	add	r3, r2
 8012bde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012be0:	69bb      	ldr	r3, [r7, #24]
 8012be2:	f023 0307 	bic.w	r3, r3, #7
 8012be6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012be8:	69bb      	ldr	r3, [r7, #24]
 8012bea:	f003 0307 	and.w	r3, r3, #7
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d00c      	beq.n	8012c0c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8012bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bf6:	b672      	cpsid	i
 8012bf8:	f383 8811 	msr	BASEPRI, r3
 8012bfc:	f3bf 8f6f 	isb	sy
 8012c00:	f3bf 8f4f 	dsb	sy
 8012c04:	b662      	cpsie	i
 8012c06:	617b      	str	r3, [r7, #20]
}
 8012c08:	bf00      	nop
 8012c0a:	e7fe      	b.n	8012c0a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012c0c:	68bb      	ldr	r3, [r7, #8]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d01f      	beq.n	8012c52 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012c12:	2300      	movs	r3, #0
 8012c14:	61fb      	str	r3, [r7, #28]
 8012c16:	e012      	b.n	8012c3e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012c18:	68ba      	ldr	r2, [r7, #8]
 8012c1a:	69fb      	ldr	r3, [r7, #28]
 8012c1c:	4413      	add	r3, r2
 8012c1e:	7819      	ldrb	r1, [r3, #0]
 8012c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c22:	69fb      	ldr	r3, [r7, #28]
 8012c24:	4413      	add	r3, r2
 8012c26:	3334      	adds	r3, #52	; 0x34
 8012c28:	460a      	mov	r2, r1
 8012c2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012c2c:	68ba      	ldr	r2, [r7, #8]
 8012c2e:	69fb      	ldr	r3, [r7, #28]
 8012c30:	4413      	add	r3, r2
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d006      	beq.n	8012c46 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012c38:	69fb      	ldr	r3, [r7, #28]
 8012c3a:	3301      	adds	r3, #1
 8012c3c:	61fb      	str	r3, [r7, #28]
 8012c3e:	69fb      	ldr	r3, [r7, #28]
 8012c40:	2b0f      	cmp	r3, #15
 8012c42:	d9e9      	bls.n	8012c18 <prvInitialiseNewTask+0x58>
 8012c44:	e000      	b.n	8012c48 <prvInitialiseNewTask+0x88>
			{
				break;
 8012c46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012c50:	e003      	b.n	8012c5a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c54:	2200      	movs	r2, #0
 8012c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c5c:	2b06      	cmp	r3, #6
 8012c5e:	d901      	bls.n	8012c64 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012c60:	2306      	movs	r3, #6
 8012c62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c6e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c72:	2200      	movs	r2, #0
 8012c74:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c78:	3304      	adds	r3, #4
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f7ff f84c 	bl	8011d18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c82:	3318      	adds	r3, #24
 8012c84:	4618      	mov	r0, r3
 8012c86:	f7ff f847 	bl	8011d18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c92:	f1c3 0207 	rsb	r2, r3, #7
 8012c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012caa:	2200      	movs	r2, #0
 8012cac:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cb2:	334c      	adds	r3, #76	; 0x4c
 8012cb4:	224c      	movs	r2, #76	; 0x4c
 8012cb6:	2100      	movs	r1, #0
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f002 fba0 	bl	80153fe <memset>
 8012cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc0:	4a0c      	ldr	r2, [pc, #48]	; (8012cf4 <prvInitialiseNewTask+0x134>)
 8012cc2:	651a      	str	r2, [r3, #80]	; 0x50
 8012cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc6:	4a0c      	ldr	r2, [pc, #48]	; (8012cf8 <prvInitialiseNewTask+0x138>)
 8012cc8:	655a      	str	r2, [r3, #84]	; 0x54
 8012cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ccc:	4a0b      	ldr	r2, [pc, #44]	; (8012cfc <prvInitialiseNewTask+0x13c>)
 8012cce:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012cd0:	683a      	ldr	r2, [r7, #0]
 8012cd2:	68f9      	ldr	r1, [r7, #12]
 8012cd4:	69b8      	ldr	r0, [r7, #24]
 8012cd6:	f000 ffad 	bl	8013c34 <pxPortInitialiseStack>
 8012cda:	4602      	mov	r2, r0
 8012cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cde:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d002      	beq.n	8012cec <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012cec:	bf00      	nop
 8012cee:	3720      	adds	r7, #32
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	bd80      	pop	{r7, pc}
 8012cf4:	20008f0c 	.word	0x20008f0c
 8012cf8:	20008f74 	.word	0x20008f74
 8012cfc:	20008fdc 	.word	0x20008fdc

08012d00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012d08:	f001 f8a0 	bl	8013e4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012d0c:	4b2a      	ldr	r3, [pc, #168]	; (8012db8 <prvAddNewTaskToReadyList+0xb8>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	3301      	adds	r3, #1
 8012d12:	4a29      	ldr	r2, [pc, #164]	; (8012db8 <prvAddNewTaskToReadyList+0xb8>)
 8012d14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012d16:	4b29      	ldr	r3, [pc, #164]	; (8012dbc <prvAddNewTaskToReadyList+0xbc>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d109      	bne.n	8012d32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012d1e:	4a27      	ldr	r2, [pc, #156]	; (8012dbc <prvAddNewTaskToReadyList+0xbc>)
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012d24:	4b24      	ldr	r3, [pc, #144]	; (8012db8 <prvAddNewTaskToReadyList+0xb8>)
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	2b01      	cmp	r3, #1
 8012d2a:	d110      	bne.n	8012d4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012d2c:	f000 fc7e 	bl	801362c <prvInitialiseTaskLists>
 8012d30:	e00d      	b.n	8012d4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012d32:	4b23      	ldr	r3, [pc, #140]	; (8012dc0 <prvAddNewTaskToReadyList+0xc0>)
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d109      	bne.n	8012d4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012d3a:	4b20      	ldr	r3, [pc, #128]	; (8012dbc <prvAddNewTaskToReadyList+0xbc>)
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d44:	429a      	cmp	r2, r3
 8012d46:	d802      	bhi.n	8012d4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012d48:	4a1c      	ldr	r2, [pc, #112]	; (8012dbc <prvAddNewTaskToReadyList+0xbc>)
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012d4e:	4b1d      	ldr	r3, [pc, #116]	; (8012dc4 <prvAddNewTaskToReadyList+0xc4>)
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	3301      	adds	r3, #1
 8012d54:	4a1b      	ldr	r2, [pc, #108]	; (8012dc4 <prvAddNewTaskToReadyList+0xc4>)
 8012d56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d5c:	2201      	movs	r2, #1
 8012d5e:	409a      	lsls	r2, r3
 8012d60:	4b19      	ldr	r3, [pc, #100]	; (8012dc8 <prvAddNewTaskToReadyList+0xc8>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	4313      	orrs	r3, r2
 8012d66:	4a18      	ldr	r2, [pc, #96]	; (8012dc8 <prvAddNewTaskToReadyList+0xc8>)
 8012d68:	6013      	str	r3, [r2, #0]
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d6e:	4613      	mov	r3, r2
 8012d70:	009b      	lsls	r3, r3, #2
 8012d72:	4413      	add	r3, r2
 8012d74:	009b      	lsls	r3, r3, #2
 8012d76:	4a15      	ldr	r2, [pc, #84]	; (8012dcc <prvAddNewTaskToReadyList+0xcc>)
 8012d78:	441a      	add	r2, r3
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	3304      	adds	r3, #4
 8012d7e:	4619      	mov	r1, r3
 8012d80:	4610      	mov	r0, r2
 8012d82:	f7fe ffd6 	bl	8011d32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012d86:	f001 f895 	bl	8013eb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012d8a:	4b0d      	ldr	r3, [pc, #52]	; (8012dc0 <prvAddNewTaskToReadyList+0xc0>)
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d00e      	beq.n	8012db0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012d92:	4b0a      	ldr	r3, [pc, #40]	; (8012dbc <prvAddNewTaskToReadyList+0xbc>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	d207      	bcs.n	8012db0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012da0:	4b0b      	ldr	r3, [pc, #44]	; (8012dd0 <prvAddNewTaskToReadyList+0xd0>)
 8012da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012da6:	601a      	str	r2, [r3, #0]
 8012da8:	f3bf 8f4f 	dsb	sy
 8012dac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012db0:	bf00      	nop
 8012db2:	3708      	adds	r7, #8
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}
 8012db8:	20000ec0 	.word	0x20000ec0
 8012dbc:	20000dc0 	.word	0x20000dc0
 8012dc0:	20000ecc 	.word	0x20000ecc
 8012dc4:	20000edc 	.word	0x20000edc
 8012dc8:	20000ec8 	.word	0x20000ec8
 8012dcc:	20000dc4 	.word	0x20000dc4
 8012dd0:	e000ed04 	.word	0xe000ed04

08012dd4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b08a      	sub	sp, #40	; 0x28
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
 8012ddc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8012dde:	2300      	movs	r3, #0
 8012de0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d10c      	bne.n	8012e02 <vTaskDelayUntil+0x2e>
	__asm volatile
 8012de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dec:	b672      	cpsid	i
 8012dee:	f383 8811 	msr	BASEPRI, r3
 8012df2:	f3bf 8f6f 	isb	sy
 8012df6:	f3bf 8f4f 	dsb	sy
 8012dfa:	b662      	cpsie	i
 8012dfc:	617b      	str	r3, [r7, #20]
}
 8012dfe:	bf00      	nop
 8012e00:	e7fe      	b.n	8012e00 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d10c      	bne.n	8012e22 <vTaskDelayUntil+0x4e>
	__asm volatile
 8012e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e0c:	b672      	cpsid	i
 8012e0e:	f383 8811 	msr	BASEPRI, r3
 8012e12:	f3bf 8f6f 	isb	sy
 8012e16:	f3bf 8f4f 	dsb	sy
 8012e1a:	b662      	cpsie	i
 8012e1c:	613b      	str	r3, [r7, #16]
}
 8012e1e:	bf00      	nop
 8012e20:	e7fe      	b.n	8012e20 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 8012e22:	4b2b      	ldr	r3, [pc, #172]	; (8012ed0 <vTaskDelayUntil+0xfc>)
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d00c      	beq.n	8012e44 <vTaskDelayUntil+0x70>
	__asm volatile
 8012e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e2e:	b672      	cpsid	i
 8012e30:	f383 8811 	msr	BASEPRI, r3
 8012e34:	f3bf 8f6f 	isb	sy
 8012e38:	f3bf 8f4f 	dsb	sy
 8012e3c:	b662      	cpsie	i
 8012e3e:	60fb      	str	r3, [r7, #12]
}
 8012e40:	bf00      	nop
 8012e42:	e7fe      	b.n	8012e42 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 8012e44:	f000 f8ee 	bl	8013024 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8012e48:	4b22      	ldr	r3, [pc, #136]	; (8012ed4 <vTaskDelayUntil+0x100>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	683a      	ldr	r2, [r7, #0]
 8012e54:	4413      	add	r3, r2
 8012e56:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	6a3a      	ldr	r2, [r7, #32]
 8012e5e:	429a      	cmp	r2, r3
 8012e60:	d20b      	bcs.n	8012e7a <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	69fa      	ldr	r2, [r7, #28]
 8012e68:	429a      	cmp	r2, r3
 8012e6a:	d211      	bcs.n	8012e90 <vTaskDelayUntil+0xbc>
 8012e6c:	69fa      	ldr	r2, [r7, #28]
 8012e6e:	6a3b      	ldr	r3, [r7, #32]
 8012e70:	429a      	cmp	r2, r3
 8012e72:	d90d      	bls.n	8012e90 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8012e74:	2301      	movs	r3, #1
 8012e76:	627b      	str	r3, [r7, #36]	; 0x24
 8012e78:	e00a      	b.n	8012e90 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	69fa      	ldr	r2, [r7, #28]
 8012e80:	429a      	cmp	r2, r3
 8012e82:	d303      	bcc.n	8012e8c <vTaskDelayUntil+0xb8>
 8012e84:	69fa      	ldr	r2, [r7, #28]
 8012e86:	6a3b      	ldr	r3, [r7, #32]
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	d901      	bls.n	8012e90 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8012e8c:	2301      	movs	r3, #1
 8012e8e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	69fa      	ldr	r2, [r7, #28]
 8012e94:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8012e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d006      	beq.n	8012eaa <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8012e9c:	69fa      	ldr	r2, [r7, #28]
 8012e9e:	6a3b      	ldr	r3, [r7, #32]
 8012ea0:	1ad3      	subs	r3, r2, r3
 8012ea2:	2100      	movs	r1, #0
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f000 fe5f 	bl	8013b68 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8012eaa:	f000 f8c9 	bl	8013040 <xTaskResumeAll>
 8012eae:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012eb0:	69bb      	ldr	r3, [r7, #24]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d107      	bne.n	8012ec6 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 8012eb6:	4b08      	ldr	r3, [pc, #32]	; (8012ed8 <vTaskDelayUntil+0x104>)
 8012eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ebc:	601a      	str	r2, [r3, #0]
 8012ebe:	f3bf 8f4f 	dsb	sy
 8012ec2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012ec6:	bf00      	nop
 8012ec8:	3728      	adds	r7, #40	; 0x28
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	bd80      	pop	{r7, pc}
 8012ece:	bf00      	nop
 8012ed0:	20000ee8 	.word	0x20000ee8
 8012ed4:	20000ec4 	.word	0x20000ec4
 8012ed8:	e000ed04 	.word	0xe000ed04

08012edc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b084      	sub	sp, #16
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d019      	beq.n	8012f22 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012eee:	4b14      	ldr	r3, [pc, #80]	; (8012f40 <vTaskDelay+0x64>)
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d00c      	beq.n	8012f10 <vTaskDelay+0x34>
	__asm volatile
 8012ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012efa:	b672      	cpsid	i
 8012efc:	f383 8811 	msr	BASEPRI, r3
 8012f00:	f3bf 8f6f 	isb	sy
 8012f04:	f3bf 8f4f 	dsb	sy
 8012f08:	b662      	cpsie	i
 8012f0a:	60bb      	str	r3, [r7, #8]
}
 8012f0c:	bf00      	nop
 8012f0e:	e7fe      	b.n	8012f0e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8012f10:	f000 f888 	bl	8013024 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012f14:	2100      	movs	r1, #0
 8012f16:	6878      	ldr	r0, [r7, #4]
 8012f18:	f000 fe26 	bl	8013b68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012f1c:	f000 f890 	bl	8013040 <xTaskResumeAll>
 8012f20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d107      	bne.n	8012f38 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8012f28:	4b06      	ldr	r3, [pc, #24]	; (8012f44 <vTaskDelay+0x68>)
 8012f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f2e:	601a      	str	r2, [r3, #0]
 8012f30:	f3bf 8f4f 	dsb	sy
 8012f34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012f38:	bf00      	nop
 8012f3a:	3710      	adds	r7, #16
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}
 8012f40:	20000ee8 	.word	0x20000ee8
 8012f44:	e000ed04 	.word	0xe000ed04

08012f48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b08a      	sub	sp, #40	; 0x28
 8012f4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012f4e:	2300      	movs	r3, #0
 8012f50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012f52:	2300      	movs	r3, #0
 8012f54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012f56:	463a      	mov	r2, r7
 8012f58:	1d39      	adds	r1, r7, #4
 8012f5a:	f107 0308 	add.w	r3, r7, #8
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f7f0 ff1a 	bl	8003d98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012f64:	6839      	ldr	r1, [r7, #0]
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	68ba      	ldr	r2, [r7, #8]
 8012f6a:	9202      	str	r2, [sp, #8]
 8012f6c:	9301      	str	r3, [sp, #4]
 8012f6e:	2300      	movs	r3, #0
 8012f70:	9300      	str	r3, [sp, #0]
 8012f72:	2300      	movs	r3, #0
 8012f74:	460a      	mov	r2, r1
 8012f76:	4923      	ldr	r1, [pc, #140]	; (8013004 <vTaskStartScheduler+0xbc>)
 8012f78:	4823      	ldr	r0, [pc, #140]	; (8013008 <vTaskStartScheduler+0xc0>)
 8012f7a:	f7ff fd79 	bl	8012a70 <xTaskCreateStatic>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	4a22      	ldr	r2, [pc, #136]	; (801300c <vTaskStartScheduler+0xc4>)
 8012f82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012f84:	4b21      	ldr	r3, [pc, #132]	; (801300c <vTaskStartScheduler+0xc4>)
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d002      	beq.n	8012f92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012f8c:	2301      	movs	r3, #1
 8012f8e:	617b      	str	r3, [r7, #20]
 8012f90:	e001      	b.n	8012f96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012f92:	2300      	movs	r3, #0
 8012f94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012f96:	697b      	ldr	r3, [r7, #20]
 8012f98:	2b01      	cmp	r3, #1
 8012f9a:	d11d      	bne.n	8012fd8 <vTaskStartScheduler+0x90>
	__asm volatile
 8012f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fa0:	b672      	cpsid	i
 8012fa2:	f383 8811 	msr	BASEPRI, r3
 8012fa6:	f3bf 8f6f 	isb	sy
 8012faa:	f3bf 8f4f 	dsb	sy
 8012fae:	b662      	cpsie	i
 8012fb0:	613b      	str	r3, [r7, #16]
}
 8012fb2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012fb4:	4b16      	ldr	r3, [pc, #88]	; (8013010 <vTaskStartScheduler+0xc8>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	334c      	adds	r3, #76	; 0x4c
 8012fba:	4a16      	ldr	r2, [pc, #88]	; (8013014 <vTaskStartScheduler+0xcc>)
 8012fbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012fbe:	4b16      	ldr	r3, [pc, #88]	; (8013018 <vTaskStartScheduler+0xd0>)
 8012fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8012fc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012fc6:	4b15      	ldr	r3, [pc, #84]	; (801301c <vTaskStartScheduler+0xd4>)
 8012fc8:	2201      	movs	r2, #1
 8012fca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012fcc:	4b14      	ldr	r3, [pc, #80]	; (8013020 <vTaskStartScheduler+0xd8>)
 8012fce:	2200      	movs	r2, #0
 8012fd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012fd2:	f000 febd 	bl	8013d50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012fd6:	e010      	b.n	8012ffa <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fde:	d10c      	bne.n	8012ffa <vTaskStartScheduler+0xb2>
	__asm volatile
 8012fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fe4:	b672      	cpsid	i
 8012fe6:	f383 8811 	msr	BASEPRI, r3
 8012fea:	f3bf 8f6f 	isb	sy
 8012fee:	f3bf 8f4f 	dsb	sy
 8012ff2:	b662      	cpsie	i
 8012ff4:	60fb      	str	r3, [r7, #12]
}
 8012ff6:	bf00      	nop
 8012ff8:	e7fe      	b.n	8012ff8 <vTaskStartScheduler+0xb0>
}
 8012ffa:	bf00      	nop
 8012ffc:	3718      	adds	r7, #24
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bd80      	pop	{r7, pc}
 8013002:	bf00      	nop
 8013004:	0801bf5c 	.word	0x0801bf5c
 8013008:	080135fd 	.word	0x080135fd
 801300c:	20000ee4 	.word	0x20000ee4
 8013010:	20000dc0 	.word	0x20000dc0
 8013014:	20000070 	.word	0x20000070
 8013018:	20000ee0 	.word	0x20000ee0
 801301c:	20000ecc 	.word	0x20000ecc
 8013020:	20000ec4 	.word	0x20000ec4

08013024 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013024:	b480      	push	{r7}
 8013026:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013028:	4b04      	ldr	r3, [pc, #16]	; (801303c <vTaskSuspendAll+0x18>)
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	3301      	adds	r3, #1
 801302e:	4a03      	ldr	r2, [pc, #12]	; (801303c <vTaskSuspendAll+0x18>)
 8013030:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013032:	bf00      	nop
 8013034:	46bd      	mov	sp, r7
 8013036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303a:	4770      	bx	lr
 801303c:	20000ee8 	.word	0x20000ee8

08013040 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013040:	b580      	push	{r7, lr}
 8013042:	b084      	sub	sp, #16
 8013044:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013046:	2300      	movs	r3, #0
 8013048:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801304a:	2300      	movs	r3, #0
 801304c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801304e:	4b42      	ldr	r3, [pc, #264]	; (8013158 <xTaskResumeAll+0x118>)
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d10c      	bne.n	8013070 <xTaskResumeAll+0x30>
	__asm volatile
 8013056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801305a:	b672      	cpsid	i
 801305c:	f383 8811 	msr	BASEPRI, r3
 8013060:	f3bf 8f6f 	isb	sy
 8013064:	f3bf 8f4f 	dsb	sy
 8013068:	b662      	cpsie	i
 801306a:	603b      	str	r3, [r7, #0]
}
 801306c:	bf00      	nop
 801306e:	e7fe      	b.n	801306e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013070:	f000 feec 	bl	8013e4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013074:	4b38      	ldr	r3, [pc, #224]	; (8013158 <xTaskResumeAll+0x118>)
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	3b01      	subs	r3, #1
 801307a:	4a37      	ldr	r2, [pc, #220]	; (8013158 <xTaskResumeAll+0x118>)
 801307c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801307e:	4b36      	ldr	r3, [pc, #216]	; (8013158 <xTaskResumeAll+0x118>)
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d161      	bne.n	801314a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013086:	4b35      	ldr	r3, [pc, #212]	; (801315c <xTaskResumeAll+0x11c>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d05d      	beq.n	801314a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801308e:	e02e      	b.n	80130ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013090:	4b33      	ldr	r3, [pc, #204]	; (8013160 <xTaskResumeAll+0x120>)
 8013092:	68db      	ldr	r3, [r3, #12]
 8013094:	68db      	ldr	r3, [r3, #12]
 8013096:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	3318      	adds	r3, #24
 801309c:	4618      	mov	r0, r3
 801309e:	f7fe fea5 	bl	8011dec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	3304      	adds	r3, #4
 80130a6:	4618      	mov	r0, r3
 80130a8:	f7fe fea0 	bl	8011dec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130b0:	2201      	movs	r2, #1
 80130b2:	409a      	lsls	r2, r3
 80130b4:	4b2b      	ldr	r3, [pc, #172]	; (8013164 <xTaskResumeAll+0x124>)
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	4313      	orrs	r3, r2
 80130ba:	4a2a      	ldr	r2, [pc, #168]	; (8013164 <xTaskResumeAll+0x124>)
 80130bc:	6013      	str	r3, [r2, #0]
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130c2:	4613      	mov	r3, r2
 80130c4:	009b      	lsls	r3, r3, #2
 80130c6:	4413      	add	r3, r2
 80130c8:	009b      	lsls	r3, r3, #2
 80130ca:	4a27      	ldr	r2, [pc, #156]	; (8013168 <xTaskResumeAll+0x128>)
 80130cc:	441a      	add	r2, r3
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	3304      	adds	r3, #4
 80130d2:	4619      	mov	r1, r3
 80130d4:	4610      	mov	r0, r2
 80130d6:	f7fe fe2c 	bl	8011d32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130de:	4b23      	ldr	r3, [pc, #140]	; (801316c <xTaskResumeAll+0x12c>)
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130e4:	429a      	cmp	r2, r3
 80130e6:	d302      	bcc.n	80130ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80130e8:	4b21      	ldr	r3, [pc, #132]	; (8013170 <xTaskResumeAll+0x130>)
 80130ea:	2201      	movs	r2, #1
 80130ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80130ee:	4b1c      	ldr	r3, [pc, #112]	; (8013160 <xTaskResumeAll+0x120>)
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d1cc      	bne.n	8013090 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d001      	beq.n	8013100 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80130fc:	f000 fb3a 	bl	8013774 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013100:	4b1c      	ldr	r3, [pc, #112]	; (8013174 <xTaskResumeAll+0x134>)
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d010      	beq.n	801312e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801310c:	f000 f846 	bl	801319c <xTaskIncrementTick>
 8013110:	4603      	mov	r3, r0
 8013112:	2b00      	cmp	r3, #0
 8013114:	d002      	beq.n	801311c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8013116:	4b16      	ldr	r3, [pc, #88]	; (8013170 <xTaskResumeAll+0x130>)
 8013118:	2201      	movs	r2, #1
 801311a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	3b01      	subs	r3, #1
 8013120:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d1f1      	bne.n	801310c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8013128:	4b12      	ldr	r3, [pc, #72]	; (8013174 <xTaskResumeAll+0x134>)
 801312a:	2200      	movs	r2, #0
 801312c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801312e:	4b10      	ldr	r3, [pc, #64]	; (8013170 <xTaskResumeAll+0x130>)
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d009      	beq.n	801314a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013136:	2301      	movs	r3, #1
 8013138:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801313a:	4b0f      	ldr	r3, [pc, #60]	; (8013178 <xTaskResumeAll+0x138>)
 801313c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013140:	601a      	str	r2, [r3, #0]
 8013142:	f3bf 8f4f 	dsb	sy
 8013146:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801314a:	f000 feb3 	bl	8013eb4 <vPortExitCritical>

	return xAlreadyYielded;
 801314e:	68bb      	ldr	r3, [r7, #8]
}
 8013150:	4618      	mov	r0, r3
 8013152:	3710      	adds	r7, #16
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}
 8013158:	20000ee8 	.word	0x20000ee8
 801315c:	20000ec0 	.word	0x20000ec0
 8013160:	20000e80 	.word	0x20000e80
 8013164:	20000ec8 	.word	0x20000ec8
 8013168:	20000dc4 	.word	0x20000dc4
 801316c:	20000dc0 	.word	0x20000dc0
 8013170:	20000ed4 	.word	0x20000ed4
 8013174:	20000ed0 	.word	0x20000ed0
 8013178:	e000ed04 	.word	0xe000ed04

0801317c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801317c:	b480      	push	{r7}
 801317e:	b083      	sub	sp, #12
 8013180:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013182:	4b05      	ldr	r3, [pc, #20]	; (8013198 <xTaskGetTickCount+0x1c>)
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013188:	687b      	ldr	r3, [r7, #4]
}
 801318a:	4618      	mov	r0, r3
 801318c:	370c      	adds	r7, #12
 801318e:	46bd      	mov	sp, r7
 8013190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013194:	4770      	bx	lr
 8013196:	bf00      	nop
 8013198:	20000ec4 	.word	0x20000ec4

0801319c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b086      	sub	sp, #24
 80131a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80131a2:	2300      	movs	r3, #0
 80131a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80131a6:	4b4f      	ldr	r3, [pc, #316]	; (80132e4 <xTaskIncrementTick+0x148>)
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	f040 808a 	bne.w	80132c4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80131b0:	4b4d      	ldr	r3, [pc, #308]	; (80132e8 <xTaskIncrementTick+0x14c>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	3301      	adds	r3, #1
 80131b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80131b8:	4a4b      	ldr	r2, [pc, #300]	; (80132e8 <xTaskIncrementTick+0x14c>)
 80131ba:	693b      	ldr	r3, [r7, #16]
 80131bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80131be:	693b      	ldr	r3, [r7, #16]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d122      	bne.n	801320a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80131c4:	4b49      	ldr	r3, [pc, #292]	; (80132ec <xTaskIncrementTick+0x150>)
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d00c      	beq.n	80131e8 <xTaskIncrementTick+0x4c>
	__asm volatile
 80131ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131d2:	b672      	cpsid	i
 80131d4:	f383 8811 	msr	BASEPRI, r3
 80131d8:	f3bf 8f6f 	isb	sy
 80131dc:	f3bf 8f4f 	dsb	sy
 80131e0:	b662      	cpsie	i
 80131e2:	603b      	str	r3, [r7, #0]
}
 80131e4:	bf00      	nop
 80131e6:	e7fe      	b.n	80131e6 <xTaskIncrementTick+0x4a>
 80131e8:	4b40      	ldr	r3, [pc, #256]	; (80132ec <xTaskIncrementTick+0x150>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	60fb      	str	r3, [r7, #12]
 80131ee:	4b40      	ldr	r3, [pc, #256]	; (80132f0 <xTaskIncrementTick+0x154>)
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	4a3e      	ldr	r2, [pc, #248]	; (80132ec <xTaskIncrementTick+0x150>)
 80131f4:	6013      	str	r3, [r2, #0]
 80131f6:	4a3e      	ldr	r2, [pc, #248]	; (80132f0 <xTaskIncrementTick+0x154>)
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	6013      	str	r3, [r2, #0]
 80131fc:	4b3d      	ldr	r3, [pc, #244]	; (80132f4 <xTaskIncrementTick+0x158>)
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	3301      	adds	r3, #1
 8013202:	4a3c      	ldr	r2, [pc, #240]	; (80132f4 <xTaskIncrementTick+0x158>)
 8013204:	6013      	str	r3, [r2, #0]
 8013206:	f000 fab5 	bl	8013774 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801320a:	4b3b      	ldr	r3, [pc, #236]	; (80132f8 <xTaskIncrementTick+0x15c>)
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	693a      	ldr	r2, [r7, #16]
 8013210:	429a      	cmp	r2, r3
 8013212:	d348      	bcc.n	80132a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013214:	4b35      	ldr	r3, [pc, #212]	; (80132ec <xTaskIncrementTick+0x150>)
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d104      	bne.n	8013228 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801321e:	4b36      	ldr	r3, [pc, #216]	; (80132f8 <xTaskIncrementTick+0x15c>)
 8013220:	f04f 32ff 	mov.w	r2, #4294967295
 8013224:	601a      	str	r2, [r3, #0]
					break;
 8013226:	e03e      	b.n	80132a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013228:	4b30      	ldr	r3, [pc, #192]	; (80132ec <xTaskIncrementTick+0x150>)
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	68db      	ldr	r3, [r3, #12]
 801322e:	68db      	ldr	r3, [r3, #12]
 8013230:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013232:	68bb      	ldr	r3, [r7, #8]
 8013234:	685b      	ldr	r3, [r3, #4]
 8013236:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013238:	693a      	ldr	r2, [r7, #16]
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	429a      	cmp	r2, r3
 801323e:	d203      	bcs.n	8013248 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013240:	4a2d      	ldr	r2, [pc, #180]	; (80132f8 <xTaskIncrementTick+0x15c>)
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013246:	e02e      	b.n	80132a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013248:	68bb      	ldr	r3, [r7, #8]
 801324a:	3304      	adds	r3, #4
 801324c:	4618      	mov	r0, r3
 801324e:	f7fe fdcd 	bl	8011dec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013256:	2b00      	cmp	r3, #0
 8013258:	d004      	beq.n	8013264 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	3318      	adds	r3, #24
 801325e:	4618      	mov	r0, r3
 8013260:	f7fe fdc4 	bl	8011dec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013264:	68bb      	ldr	r3, [r7, #8]
 8013266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013268:	2201      	movs	r2, #1
 801326a:	409a      	lsls	r2, r3
 801326c:	4b23      	ldr	r3, [pc, #140]	; (80132fc <xTaskIncrementTick+0x160>)
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	4313      	orrs	r3, r2
 8013272:	4a22      	ldr	r2, [pc, #136]	; (80132fc <xTaskIncrementTick+0x160>)
 8013274:	6013      	str	r3, [r2, #0]
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801327a:	4613      	mov	r3, r2
 801327c:	009b      	lsls	r3, r3, #2
 801327e:	4413      	add	r3, r2
 8013280:	009b      	lsls	r3, r3, #2
 8013282:	4a1f      	ldr	r2, [pc, #124]	; (8013300 <xTaskIncrementTick+0x164>)
 8013284:	441a      	add	r2, r3
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	3304      	adds	r3, #4
 801328a:	4619      	mov	r1, r3
 801328c:	4610      	mov	r0, r2
 801328e:	f7fe fd50 	bl	8011d32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013292:	68bb      	ldr	r3, [r7, #8]
 8013294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013296:	4b1b      	ldr	r3, [pc, #108]	; (8013304 <xTaskIncrementTick+0x168>)
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801329c:	429a      	cmp	r2, r3
 801329e:	d3b9      	bcc.n	8013214 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80132a0:	2301      	movs	r3, #1
 80132a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80132a4:	e7b6      	b.n	8013214 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80132a6:	4b17      	ldr	r3, [pc, #92]	; (8013304 <xTaskIncrementTick+0x168>)
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132ac:	4914      	ldr	r1, [pc, #80]	; (8013300 <xTaskIncrementTick+0x164>)
 80132ae:	4613      	mov	r3, r2
 80132b0:	009b      	lsls	r3, r3, #2
 80132b2:	4413      	add	r3, r2
 80132b4:	009b      	lsls	r3, r3, #2
 80132b6:	440b      	add	r3, r1
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	2b01      	cmp	r3, #1
 80132bc:	d907      	bls.n	80132ce <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80132be:	2301      	movs	r3, #1
 80132c0:	617b      	str	r3, [r7, #20]
 80132c2:	e004      	b.n	80132ce <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80132c4:	4b10      	ldr	r3, [pc, #64]	; (8013308 <xTaskIncrementTick+0x16c>)
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	3301      	adds	r3, #1
 80132ca:	4a0f      	ldr	r2, [pc, #60]	; (8013308 <xTaskIncrementTick+0x16c>)
 80132cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80132ce:	4b0f      	ldr	r3, [pc, #60]	; (801330c <xTaskIncrementTick+0x170>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d001      	beq.n	80132da <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80132d6:	2301      	movs	r3, #1
 80132d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80132da:	697b      	ldr	r3, [r7, #20]
}
 80132dc:	4618      	mov	r0, r3
 80132de:	3718      	adds	r7, #24
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}
 80132e4:	20000ee8 	.word	0x20000ee8
 80132e8:	20000ec4 	.word	0x20000ec4
 80132ec:	20000e78 	.word	0x20000e78
 80132f0:	20000e7c 	.word	0x20000e7c
 80132f4:	20000ed8 	.word	0x20000ed8
 80132f8:	20000ee0 	.word	0x20000ee0
 80132fc:	20000ec8 	.word	0x20000ec8
 8013300:	20000dc4 	.word	0x20000dc4
 8013304:	20000dc0 	.word	0x20000dc0
 8013308:	20000ed0 	.word	0x20000ed0
 801330c:	20000ed4 	.word	0x20000ed4

08013310 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013310:	b480      	push	{r7}
 8013312:	b087      	sub	sp, #28
 8013314:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013316:	4b2a      	ldr	r3, [pc, #168]	; (80133c0 <vTaskSwitchContext+0xb0>)
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d003      	beq.n	8013326 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801331e:	4b29      	ldr	r3, [pc, #164]	; (80133c4 <vTaskSwitchContext+0xb4>)
 8013320:	2201      	movs	r2, #1
 8013322:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013324:	e046      	b.n	80133b4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8013326:	4b27      	ldr	r3, [pc, #156]	; (80133c4 <vTaskSwitchContext+0xb4>)
 8013328:	2200      	movs	r2, #0
 801332a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801332c:	4b26      	ldr	r3, [pc, #152]	; (80133c8 <vTaskSwitchContext+0xb8>)
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	fab3 f383 	clz	r3, r3
 8013338:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801333a:	7afb      	ldrb	r3, [r7, #11]
 801333c:	f1c3 031f 	rsb	r3, r3, #31
 8013340:	617b      	str	r3, [r7, #20]
 8013342:	4922      	ldr	r1, [pc, #136]	; (80133cc <vTaskSwitchContext+0xbc>)
 8013344:	697a      	ldr	r2, [r7, #20]
 8013346:	4613      	mov	r3, r2
 8013348:	009b      	lsls	r3, r3, #2
 801334a:	4413      	add	r3, r2
 801334c:	009b      	lsls	r3, r3, #2
 801334e:	440b      	add	r3, r1
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d10c      	bne.n	8013370 <vTaskSwitchContext+0x60>
	__asm volatile
 8013356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801335a:	b672      	cpsid	i
 801335c:	f383 8811 	msr	BASEPRI, r3
 8013360:	f3bf 8f6f 	isb	sy
 8013364:	f3bf 8f4f 	dsb	sy
 8013368:	b662      	cpsie	i
 801336a:	607b      	str	r3, [r7, #4]
}
 801336c:	bf00      	nop
 801336e:	e7fe      	b.n	801336e <vTaskSwitchContext+0x5e>
 8013370:	697a      	ldr	r2, [r7, #20]
 8013372:	4613      	mov	r3, r2
 8013374:	009b      	lsls	r3, r3, #2
 8013376:	4413      	add	r3, r2
 8013378:	009b      	lsls	r3, r3, #2
 801337a:	4a14      	ldr	r2, [pc, #80]	; (80133cc <vTaskSwitchContext+0xbc>)
 801337c:	4413      	add	r3, r2
 801337e:	613b      	str	r3, [r7, #16]
 8013380:	693b      	ldr	r3, [r7, #16]
 8013382:	685b      	ldr	r3, [r3, #4]
 8013384:	685a      	ldr	r2, [r3, #4]
 8013386:	693b      	ldr	r3, [r7, #16]
 8013388:	605a      	str	r2, [r3, #4]
 801338a:	693b      	ldr	r3, [r7, #16]
 801338c:	685a      	ldr	r2, [r3, #4]
 801338e:	693b      	ldr	r3, [r7, #16]
 8013390:	3308      	adds	r3, #8
 8013392:	429a      	cmp	r2, r3
 8013394:	d104      	bne.n	80133a0 <vTaskSwitchContext+0x90>
 8013396:	693b      	ldr	r3, [r7, #16]
 8013398:	685b      	ldr	r3, [r3, #4]
 801339a:	685a      	ldr	r2, [r3, #4]
 801339c:	693b      	ldr	r3, [r7, #16]
 801339e:	605a      	str	r2, [r3, #4]
 80133a0:	693b      	ldr	r3, [r7, #16]
 80133a2:	685b      	ldr	r3, [r3, #4]
 80133a4:	68db      	ldr	r3, [r3, #12]
 80133a6:	4a0a      	ldr	r2, [pc, #40]	; (80133d0 <vTaskSwitchContext+0xc0>)
 80133a8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80133aa:	4b09      	ldr	r3, [pc, #36]	; (80133d0 <vTaskSwitchContext+0xc0>)
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	334c      	adds	r3, #76	; 0x4c
 80133b0:	4a08      	ldr	r2, [pc, #32]	; (80133d4 <vTaskSwitchContext+0xc4>)
 80133b2:	6013      	str	r3, [r2, #0]
}
 80133b4:	bf00      	nop
 80133b6:	371c      	adds	r7, #28
 80133b8:	46bd      	mov	sp, r7
 80133ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133be:	4770      	bx	lr
 80133c0:	20000ee8 	.word	0x20000ee8
 80133c4:	20000ed4 	.word	0x20000ed4
 80133c8:	20000ec8 	.word	0x20000ec8
 80133cc:	20000dc4 	.word	0x20000dc4
 80133d0:	20000dc0 	.word	0x20000dc0
 80133d4:	20000070 	.word	0x20000070

080133d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b084      	sub	sp, #16
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
 80133e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d10c      	bne.n	8013402 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80133e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133ec:	b672      	cpsid	i
 80133ee:	f383 8811 	msr	BASEPRI, r3
 80133f2:	f3bf 8f6f 	isb	sy
 80133f6:	f3bf 8f4f 	dsb	sy
 80133fa:	b662      	cpsie	i
 80133fc:	60fb      	str	r3, [r7, #12]
}
 80133fe:	bf00      	nop
 8013400:	e7fe      	b.n	8013400 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013402:	4b07      	ldr	r3, [pc, #28]	; (8013420 <vTaskPlaceOnEventList+0x48>)
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	3318      	adds	r3, #24
 8013408:	4619      	mov	r1, r3
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f7fe fcb5 	bl	8011d7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013410:	2101      	movs	r1, #1
 8013412:	6838      	ldr	r0, [r7, #0]
 8013414:	f000 fba8 	bl	8013b68 <prvAddCurrentTaskToDelayedList>
}
 8013418:	bf00      	nop
 801341a:	3710      	adds	r7, #16
 801341c:	46bd      	mov	sp, r7
 801341e:	bd80      	pop	{r7, pc}
 8013420:	20000dc0 	.word	0x20000dc0

08013424 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b086      	sub	sp, #24
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	68db      	ldr	r3, [r3, #12]
 8013430:	68db      	ldr	r3, [r3, #12]
 8013432:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013434:	693b      	ldr	r3, [r7, #16]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d10c      	bne.n	8013454 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 801343a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801343e:	b672      	cpsid	i
 8013440:	f383 8811 	msr	BASEPRI, r3
 8013444:	f3bf 8f6f 	isb	sy
 8013448:	f3bf 8f4f 	dsb	sy
 801344c:	b662      	cpsie	i
 801344e:	60fb      	str	r3, [r7, #12]
}
 8013450:	bf00      	nop
 8013452:	e7fe      	b.n	8013452 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	3318      	adds	r3, #24
 8013458:	4618      	mov	r0, r3
 801345a:	f7fe fcc7 	bl	8011dec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801345e:	4b1d      	ldr	r3, [pc, #116]	; (80134d4 <xTaskRemoveFromEventList+0xb0>)
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d11c      	bne.n	80134a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013466:	693b      	ldr	r3, [r7, #16]
 8013468:	3304      	adds	r3, #4
 801346a:	4618      	mov	r0, r3
 801346c:	f7fe fcbe 	bl	8011dec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013470:	693b      	ldr	r3, [r7, #16]
 8013472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013474:	2201      	movs	r2, #1
 8013476:	409a      	lsls	r2, r3
 8013478:	4b17      	ldr	r3, [pc, #92]	; (80134d8 <xTaskRemoveFromEventList+0xb4>)
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	4313      	orrs	r3, r2
 801347e:	4a16      	ldr	r2, [pc, #88]	; (80134d8 <xTaskRemoveFromEventList+0xb4>)
 8013480:	6013      	str	r3, [r2, #0]
 8013482:	693b      	ldr	r3, [r7, #16]
 8013484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013486:	4613      	mov	r3, r2
 8013488:	009b      	lsls	r3, r3, #2
 801348a:	4413      	add	r3, r2
 801348c:	009b      	lsls	r3, r3, #2
 801348e:	4a13      	ldr	r2, [pc, #76]	; (80134dc <xTaskRemoveFromEventList+0xb8>)
 8013490:	441a      	add	r2, r3
 8013492:	693b      	ldr	r3, [r7, #16]
 8013494:	3304      	adds	r3, #4
 8013496:	4619      	mov	r1, r3
 8013498:	4610      	mov	r0, r2
 801349a:	f7fe fc4a 	bl	8011d32 <vListInsertEnd>
 801349e:	e005      	b.n	80134ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80134a0:	693b      	ldr	r3, [r7, #16]
 80134a2:	3318      	adds	r3, #24
 80134a4:	4619      	mov	r1, r3
 80134a6:	480e      	ldr	r0, [pc, #56]	; (80134e0 <xTaskRemoveFromEventList+0xbc>)
 80134a8:	f7fe fc43 	bl	8011d32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80134ac:	693b      	ldr	r3, [r7, #16]
 80134ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134b0:	4b0c      	ldr	r3, [pc, #48]	; (80134e4 <xTaskRemoveFromEventList+0xc0>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134b6:	429a      	cmp	r2, r3
 80134b8:	d905      	bls.n	80134c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80134ba:	2301      	movs	r3, #1
 80134bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80134be:	4b0a      	ldr	r3, [pc, #40]	; (80134e8 <xTaskRemoveFromEventList+0xc4>)
 80134c0:	2201      	movs	r2, #1
 80134c2:	601a      	str	r2, [r3, #0]
 80134c4:	e001      	b.n	80134ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80134c6:	2300      	movs	r3, #0
 80134c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80134ca:	697b      	ldr	r3, [r7, #20]
}
 80134cc:	4618      	mov	r0, r3
 80134ce:	3718      	adds	r7, #24
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bd80      	pop	{r7, pc}
 80134d4:	20000ee8 	.word	0x20000ee8
 80134d8:	20000ec8 	.word	0x20000ec8
 80134dc:	20000dc4 	.word	0x20000dc4
 80134e0:	20000e80 	.word	0x20000e80
 80134e4:	20000dc0 	.word	0x20000dc0
 80134e8:	20000ed4 	.word	0x20000ed4

080134ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80134ec:	b480      	push	{r7}
 80134ee:	b083      	sub	sp, #12
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80134f4:	4b06      	ldr	r3, [pc, #24]	; (8013510 <vTaskInternalSetTimeOutState+0x24>)
 80134f6:	681a      	ldr	r2, [r3, #0]
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80134fc:	4b05      	ldr	r3, [pc, #20]	; (8013514 <vTaskInternalSetTimeOutState+0x28>)
 80134fe:	681a      	ldr	r2, [r3, #0]
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	605a      	str	r2, [r3, #4]
}
 8013504:	bf00      	nop
 8013506:	370c      	adds	r7, #12
 8013508:	46bd      	mov	sp, r7
 801350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350e:	4770      	bx	lr
 8013510:	20000ed8 	.word	0x20000ed8
 8013514:	20000ec4 	.word	0x20000ec4

08013518 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b088      	sub	sp, #32
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
 8013520:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d10c      	bne.n	8013542 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8013528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801352c:	b672      	cpsid	i
 801352e:	f383 8811 	msr	BASEPRI, r3
 8013532:	f3bf 8f6f 	isb	sy
 8013536:	f3bf 8f4f 	dsb	sy
 801353a:	b662      	cpsie	i
 801353c:	613b      	str	r3, [r7, #16]
}
 801353e:	bf00      	nop
 8013540:	e7fe      	b.n	8013540 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d10c      	bne.n	8013562 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8013548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801354c:	b672      	cpsid	i
 801354e:	f383 8811 	msr	BASEPRI, r3
 8013552:	f3bf 8f6f 	isb	sy
 8013556:	f3bf 8f4f 	dsb	sy
 801355a:	b662      	cpsie	i
 801355c:	60fb      	str	r3, [r7, #12]
}
 801355e:	bf00      	nop
 8013560:	e7fe      	b.n	8013560 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8013562:	f000 fc73 	bl	8013e4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013566:	4b1d      	ldr	r3, [pc, #116]	; (80135dc <xTaskCheckForTimeOut+0xc4>)
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	685b      	ldr	r3, [r3, #4]
 8013570:	69ba      	ldr	r2, [r7, #24]
 8013572:	1ad3      	subs	r3, r2, r3
 8013574:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013576:	683b      	ldr	r3, [r7, #0]
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801357e:	d102      	bne.n	8013586 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013580:	2300      	movs	r3, #0
 8013582:	61fb      	str	r3, [r7, #28]
 8013584:	e023      	b.n	80135ce <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	681a      	ldr	r2, [r3, #0]
 801358a:	4b15      	ldr	r3, [pc, #84]	; (80135e0 <xTaskCheckForTimeOut+0xc8>)
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	429a      	cmp	r2, r3
 8013590:	d007      	beq.n	80135a2 <xTaskCheckForTimeOut+0x8a>
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	685b      	ldr	r3, [r3, #4]
 8013596:	69ba      	ldr	r2, [r7, #24]
 8013598:	429a      	cmp	r2, r3
 801359a:	d302      	bcc.n	80135a2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801359c:	2301      	movs	r3, #1
 801359e:	61fb      	str	r3, [r7, #28]
 80135a0:	e015      	b.n	80135ce <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	697a      	ldr	r2, [r7, #20]
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d20b      	bcs.n	80135c4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80135ac:	683b      	ldr	r3, [r7, #0]
 80135ae:	681a      	ldr	r2, [r3, #0]
 80135b0:	697b      	ldr	r3, [r7, #20]
 80135b2:	1ad2      	subs	r2, r2, r3
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	f7ff ff97 	bl	80134ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80135be:	2300      	movs	r3, #0
 80135c0:	61fb      	str	r3, [r7, #28]
 80135c2:	e004      	b.n	80135ce <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80135c4:	683b      	ldr	r3, [r7, #0]
 80135c6:	2200      	movs	r2, #0
 80135c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80135ca:	2301      	movs	r3, #1
 80135cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80135ce:	f000 fc71 	bl	8013eb4 <vPortExitCritical>

	return xReturn;
 80135d2:	69fb      	ldr	r3, [r7, #28]
}
 80135d4:	4618      	mov	r0, r3
 80135d6:	3720      	adds	r7, #32
 80135d8:	46bd      	mov	sp, r7
 80135da:	bd80      	pop	{r7, pc}
 80135dc:	20000ec4 	.word	0x20000ec4
 80135e0:	20000ed8 	.word	0x20000ed8

080135e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80135e4:	b480      	push	{r7}
 80135e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80135e8:	4b03      	ldr	r3, [pc, #12]	; (80135f8 <vTaskMissedYield+0x14>)
 80135ea:	2201      	movs	r2, #1
 80135ec:	601a      	str	r2, [r3, #0]
}
 80135ee:	bf00      	nop
 80135f0:	46bd      	mov	sp, r7
 80135f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f6:	4770      	bx	lr
 80135f8:	20000ed4 	.word	0x20000ed4

080135fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b082      	sub	sp, #8
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013604:	f000 f852 	bl	80136ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013608:	4b06      	ldr	r3, [pc, #24]	; (8013624 <prvIdleTask+0x28>)
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	2b01      	cmp	r3, #1
 801360e:	d9f9      	bls.n	8013604 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013610:	4b05      	ldr	r3, [pc, #20]	; (8013628 <prvIdleTask+0x2c>)
 8013612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013616:	601a      	str	r2, [r3, #0]
 8013618:	f3bf 8f4f 	dsb	sy
 801361c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013620:	e7f0      	b.n	8013604 <prvIdleTask+0x8>
 8013622:	bf00      	nop
 8013624:	20000dc4 	.word	0x20000dc4
 8013628:	e000ed04 	.word	0xe000ed04

0801362c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b082      	sub	sp, #8
 8013630:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013632:	2300      	movs	r3, #0
 8013634:	607b      	str	r3, [r7, #4]
 8013636:	e00c      	b.n	8013652 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013638:	687a      	ldr	r2, [r7, #4]
 801363a:	4613      	mov	r3, r2
 801363c:	009b      	lsls	r3, r3, #2
 801363e:	4413      	add	r3, r2
 8013640:	009b      	lsls	r3, r3, #2
 8013642:	4a12      	ldr	r2, [pc, #72]	; (801368c <prvInitialiseTaskLists+0x60>)
 8013644:	4413      	add	r3, r2
 8013646:	4618      	mov	r0, r3
 8013648:	f7fe fb46 	bl	8011cd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	3301      	adds	r3, #1
 8013650:	607b      	str	r3, [r7, #4]
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	2b06      	cmp	r3, #6
 8013656:	d9ef      	bls.n	8013638 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013658:	480d      	ldr	r0, [pc, #52]	; (8013690 <prvInitialiseTaskLists+0x64>)
 801365a:	f7fe fb3d 	bl	8011cd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801365e:	480d      	ldr	r0, [pc, #52]	; (8013694 <prvInitialiseTaskLists+0x68>)
 8013660:	f7fe fb3a 	bl	8011cd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013664:	480c      	ldr	r0, [pc, #48]	; (8013698 <prvInitialiseTaskLists+0x6c>)
 8013666:	f7fe fb37 	bl	8011cd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801366a:	480c      	ldr	r0, [pc, #48]	; (801369c <prvInitialiseTaskLists+0x70>)
 801366c:	f7fe fb34 	bl	8011cd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013670:	480b      	ldr	r0, [pc, #44]	; (80136a0 <prvInitialiseTaskLists+0x74>)
 8013672:	f7fe fb31 	bl	8011cd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013676:	4b0b      	ldr	r3, [pc, #44]	; (80136a4 <prvInitialiseTaskLists+0x78>)
 8013678:	4a05      	ldr	r2, [pc, #20]	; (8013690 <prvInitialiseTaskLists+0x64>)
 801367a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801367c:	4b0a      	ldr	r3, [pc, #40]	; (80136a8 <prvInitialiseTaskLists+0x7c>)
 801367e:	4a05      	ldr	r2, [pc, #20]	; (8013694 <prvInitialiseTaskLists+0x68>)
 8013680:	601a      	str	r2, [r3, #0]
}
 8013682:	bf00      	nop
 8013684:	3708      	adds	r7, #8
 8013686:	46bd      	mov	sp, r7
 8013688:	bd80      	pop	{r7, pc}
 801368a:	bf00      	nop
 801368c:	20000dc4 	.word	0x20000dc4
 8013690:	20000e50 	.word	0x20000e50
 8013694:	20000e64 	.word	0x20000e64
 8013698:	20000e80 	.word	0x20000e80
 801369c:	20000e94 	.word	0x20000e94
 80136a0:	20000eac 	.word	0x20000eac
 80136a4:	20000e78 	.word	0x20000e78
 80136a8:	20000e7c 	.word	0x20000e7c

080136ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b082      	sub	sp, #8
 80136b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80136b2:	e019      	b.n	80136e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80136b4:	f000 fbca 	bl	8013e4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136b8:	4b10      	ldr	r3, [pc, #64]	; (80136fc <prvCheckTasksWaitingTermination+0x50>)
 80136ba:	68db      	ldr	r3, [r3, #12]
 80136bc:	68db      	ldr	r3, [r3, #12]
 80136be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	3304      	adds	r3, #4
 80136c4:	4618      	mov	r0, r3
 80136c6:	f7fe fb91 	bl	8011dec <uxListRemove>
				--uxCurrentNumberOfTasks;
 80136ca:	4b0d      	ldr	r3, [pc, #52]	; (8013700 <prvCheckTasksWaitingTermination+0x54>)
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	3b01      	subs	r3, #1
 80136d0:	4a0b      	ldr	r2, [pc, #44]	; (8013700 <prvCheckTasksWaitingTermination+0x54>)
 80136d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80136d4:	4b0b      	ldr	r3, [pc, #44]	; (8013704 <prvCheckTasksWaitingTermination+0x58>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	3b01      	subs	r3, #1
 80136da:	4a0a      	ldr	r2, [pc, #40]	; (8013704 <prvCheckTasksWaitingTermination+0x58>)
 80136dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80136de:	f000 fbe9 	bl	8013eb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f000 f810 	bl	8013708 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80136e8:	4b06      	ldr	r3, [pc, #24]	; (8013704 <prvCheckTasksWaitingTermination+0x58>)
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d1e1      	bne.n	80136b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80136f0:	bf00      	nop
 80136f2:	bf00      	nop
 80136f4:	3708      	adds	r7, #8
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd80      	pop	{r7, pc}
 80136fa:	bf00      	nop
 80136fc:	20000e94 	.word	0x20000e94
 8013700:	20000ec0 	.word	0x20000ec0
 8013704:	20000ea8 	.word	0x20000ea8

08013708 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013708:	b580      	push	{r7, lr}
 801370a:	b084      	sub	sp, #16
 801370c:	af00      	add	r7, sp, #0
 801370e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	334c      	adds	r3, #76	; 0x4c
 8013714:	4618      	mov	r0, r3
 8013716:	f001 fea1 	bl	801545c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8013720:	2b00      	cmp	r3, #0
 8013722:	d108      	bne.n	8013736 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013728:	4618      	mov	r0, r3
 801372a:	f000 fd85 	bl	8014238 <vPortFree>
				vPortFree( pxTCB );
 801372e:	6878      	ldr	r0, [r7, #4]
 8013730:	f000 fd82 	bl	8014238 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013734:	e01a      	b.n	801376c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 801373c:	2b01      	cmp	r3, #1
 801373e:	d103      	bne.n	8013748 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013740:	6878      	ldr	r0, [r7, #4]
 8013742:	f000 fd79 	bl	8014238 <vPortFree>
	}
 8013746:	e011      	b.n	801376c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 801374e:	2b02      	cmp	r3, #2
 8013750:	d00c      	beq.n	801376c <prvDeleteTCB+0x64>
	__asm volatile
 8013752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013756:	b672      	cpsid	i
 8013758:	f383 8811 	msr	BASEPRI, r3
 801375c:	f3bf 8f6f 	isb	sy
 8013760:	f3bf 8f4f 	dsb	sy
 8013764:	b662      	cpsie	i
 8013766:	60fb      	str	r3, [r7, #12]
}
 8013768:	bf00      	nop
 801376a:	e7fe      	b.n	801376a <prvDeleteTCB+0x62>
	}
 801376c:	bf00      	nop
 801376e:	3710      	adds	r7, #16
 8013770:	46bd      	mov	sp, r7
 8013772:	bd80      	pop	{r7, pc}

08013774 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013774:	b480      	push	{r7}
 8013776:	b083      	sub	sp, #12
 8013778:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801377a:	4b0c      	ldr	r3, [pc, #48]	; (80137ac <prvResetNextTaskUnblockTime+0x38>)
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d104      	bne.n	801378e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013784:	4b0a      	ldr	r3, [pc, #40]	; (80137b0 <prvResetNextTaskUnblockTime+0x3c>)
 8013786:	f04f 32ff 	mov.w	r2, #4294967295
 801378a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801378c:	e008      	b.n	80137a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801378e:	4b07      	ldr	r3, [pc, #28]	; (80137ac <prvResetNextTaskUnblockTime+0x38>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	68db      	ldr	r3, [r3, #12]
 8013794:	68db      	ldr	r3, [r3, #12]
 8013796:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	685b      	ldr	r3, [r3, #4]
 801379c:	4a04      	ldr	r2, [pc, #16]	; (80137b0 <prvResetNextTaskUnblockTime+0x3c>)
 801379e:	6013      	str	r3, [r2, #0]
}
 80137a0:	bf00      	nop
 80137a2:	370c      	adds	r7, #12
 80137a4:	46bd      	mov	sp, r7
 80137a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137aa:	4770      	bx	lr
 80137ac:	20000e78 	.word	0x20000e78
 80137b0:	20000ee0 	.word	0x20000ee0

080137b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80137b4:	b480      	push	{r7}
 80137b6:	b083      	sub	sp, #12
 80137b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80137ba:	4b0b      	ldr	r3, [pc, #44]	; (80137e8 <xTaskGetSchedulerState+0x34>)
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d102      	bne.n	80137c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80137c2:	2301      	movs	r3, #1
 80137c4:	607b      	str	r3, [r7, #4]
 80137c6:	e008      	b.n	80137da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80137c8:	4b08      	ldr	r3, [pc, #32]	; (80137ec <xTaskGetSchedulerState+0x38>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d102      	bne.n	80137d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80137d0:	2302      	movs	r3, #2
 80137d2:	607b      	str	r3, [r7, #4]
 80137d4:	e001      	b.n	80137da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80137d6:	2300      	movs	r3, #0
 80137d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80137da:	687b      	ldr	r3, [r7, #4]
	}
 80137dc:	4618      	mov	r0, r3
 80137de:	370c      	adds	r7, #12
 80137e0:	46bd      	mov	sp, r7
 80137e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e6:	4770      	bx	lr
 80137e8:	20000ecc 	.word	0x20000ecc
 80137ec:	20000ee8 	.word	0x20000ee8

080137f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b084      	sub	sp, #16
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80137fc:	2300      	movs	r3, #0
 80137fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d069      	beq.n	80138da <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801380a:	4b36      	ldr	r3, [pc, #216]	; (80138e4 <xTaskPriorityInherit+0xf4>)
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013810:	429a      	cmp	r2, r3
 8013812:	d259      	bcs.n	80138c8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013814:	68bb      	ldr	r3, [r7, #8]
 8013816:	699b      	ldr	r3, [r3, #24]
 8013818:	2b00      	cmp	r3, #0
 801381a:	db06      	blt.n	801382a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801381c:	4b31      	ldr	r3, [pc, #196]	; (80138e4 <xTaskPriorityInherit+0xf4>)
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013822:	f1c3 0207 	rsb	r2, r3, #7
 8013826:	68bb      	ldr	r3, [r7, #8]
 8013828:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801382a:	68bb      	ldr	r3, [r7, #8]
 801382c:	6959      	ldr	r1, [r3, #20]
 801382e:	68bb      	ldr	r3, [r7, #8]
 8013830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013832:	4613      	mov	r3, r2
 8013834:	009b      	lsls	r3, r3, #2
 8013836:	4413      	add	r3, r2
 8013838:	009b      	lsls	r3, r3, #2
 801383a:	4a2b      	ldr	r2, [pc, #172]	; (80138e8 <xTaskPriorityInherit+0xf8>)
 801383c:	4413      	add	r3, r2
 801383e:	4299      	cmp	r1, r3
 8013840:	d13a      	bne.n	80138b8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	3304      	adds	r3, #4
 8013846:	4618      	mov	r0, r3
 8013848:	f7fe fad0 	bl	8011dec <uxListRemove>
 801384c:	4603      	mov	r3, r0
 801384e:	2b00      	cmp	r3, #0
 8013850:	d115      	bne.n	801387e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013856:	4924      	ldr	r1, [pc, #144]	; (80138e8 <xTaskPriorityInherit+0xf8>)
 8013858:	4613      	mov	r3, r2
 801385a:	009b      	lsls	r3, r3, #2
 801385c:	4413      	add	r3, r2
 801385e:	009b      	lsls	r3, r3, #2
 8013860:	440b      	add	r3, r1
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d10a      	bne.n	801387e <xTaskPriorityInherit+0x8e>
 8013868:	68bb      	ldr	r3, [r7, #8]
 801386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801386c:	2201      	movs	r2, #1
 801386e:	fa02 f303 	lsl.w	r3, r2, r3
 8013872:	43da      	mvns	r2, r3
 8013874:	4b1d      	ldr	r3, [pc, #116]	; (80138ec <xTaskPriorityInherit+0xfc>)
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	4013      	ands	r3, r2
 801387a:	4a1c      	ldr	r2, [pc, #112]	; (80138ec <xTaskPriorityInherit+0xfc>)
 801387c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801387e:	4b19      	ldr	r3, [pc, #100]	; (80138e4 <xTaskPriorityInherit+0xf4>)
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013884:	68bb      	ldr	r3, [r7, #8]
 8013886:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801388c:	2201      	movs	r2, #1
 801388e:	409a      	lsls	r2, r3
 8013890:	4b16      	ldr	r3, [pc, #88]	; (80138ec <xTaskPriorityInherit+0xfc>)
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	4313      	orrs	r3, r2
 8013896:	4a15      	ldr	r2, [pc, #84]	; (80138ec <xTaskPriorityInherit+0xfc>)
 8013898:	6013      	str	r3, [r2, #0]
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801389e:	4613      	mov	r3, r2
 80138a0:	009b      	lsls	r3, r3, #2
 80138a2:	4413      	add	r3, r2
 80138a4:	009b      	lsls	r3, r3, #2
 80138a6:	4a10      	ldr	r2, [pc, #64]	; (80138e8 <xTaskPriorityInherit+0xf8>)
 80138a8:	441a      	add	r2, r3
 80138aa:	68bb      	ldr	r3, [r7, #8]
 80138ac:	3304      	adds	r3, #4
 80138ae:	4619      	mov	r1, r3
 80138b0:	4610      	mov	r0, r2
 80138b2:	f7fe fa3e 	bl	8011d32 <vListInsertEnd>
 80138b6:	e004      	b.n	80138c2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80138b8:	4b0a      	ldr	r3, [pc, #40]	; (80138e4 <xTaskPriorityInherit+0xf4>)
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138be:	68bb      	ldr	r3, [r7, #8]
 80138c0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80138c2:	2301      	movs	r3, #1
 80138c4:	60fb      	str	r3, [r7, #12]
 80138c6:	e008      	b.n	80138da <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80138c8:	68bb      	ldr	r3, [r7, #8]
 80138ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80138cc:	4b05      	ldr	r3, [pc, #20]	; (80138e4 <xTaskPriorityInherit+0xf4>)
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138d2:	429a      	cmp	r2, r3
 80138d4:	d201      	bcs.n	80138da <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80138d6:	2301      	movs	r3, #1
 80138d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80138da:	68fb      	ldr	r3, [r7, #12]
	}
 80138dc:	4618      	mov	r0, r3
 80138de:	3710      	adds	r7, #16
 80138e0:	46bd      	mov	sp, r7
 80138e2:	bd80      	pop	{r7, pc}
 80138e4:	20000dc0 	.word	0x20000dc0
 80138e8:	20000dc4 	.word	0x20000dc4
 80138ec:	20000ec8 	.word	0x20000ec8

080138f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b086      	sub	sp, #24
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80138fc:	2300      	movs	r3, #0
 80138fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d072      	beq.n	80139ec <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013906:	4b3c      	ldr	r3, [pc, #240]	; (80139f8 <xTaskPriorityDisinherit+0x108>)
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	693a      	ldr	r2, [r7, #16]
 801390c:	429a      	cmp	r2, r3
 801390e:	d00c      	beq.n	801392a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8013910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013914:	b672      	cpsid	i
 8013916:	f383 8811 	msr	BASEPRI, r3
 801391a:	f3bf 8f6f 	isb	sy
 801391e:	f3bf 8f4f 	dsb	sy
 8013922:	b662      	cpsie	i
 8013924:	60fb      	str	r3, [r7, #12]
}
 8013926:	bf00      	nop
 8013928:	e7fe      	b.n	8013928 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801392a:	693b      	ldr	r3, [r7, #16]
 801392c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801392e:	2b00      	cmp	r3, #0
 8013930:	d10c      	bne.n	801394c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8013932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013936:	b672      	cpsid	i
 8013938:	f383 8811 	msr	BASEPRI, r3
 801393c:	f3bf 8f6f 	isb	sy
 8013940:	f3bf 8f4f 	dsb	sy
 8013944:	b662      	cpsie	i
 8013946:	60bb      	str	r3, [r7, #8]
}
 8013948:	bf00      	nop
 801394a:	e7fe      	b.n	801394a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 801394c:	693b      	ldr	r3, [r7, #16]
 801394e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013950:	1e5a      	subs	r2, r3, #1
 8013952:	693b      	ldr	r3, [r7, #16]
 8013954:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801395a:	693b      	ldr	r3, [r7, #16]
 801395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801395e:	429a      	cmp	r2, r3
 8013960:	d044      	beq.n	80139ec <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013962:	693b      	ldr	r3, [r7, #16]
 8013964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013966:	2b00      	cmp	r3, #0
 8013968:	d140      	bne.n	80139ec <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801396a:	693b      	ldr	r3, [r7, #16]
 801396c:	3304      	adds	r3, #4
 801396e:	4618      	mov	r0, r3
 8013970:	f7fe fa3c 	bl	8011dec <uxListRemove>
 8013974:	4603      	mov	r3, r0
 8013976:	2b00      	cmp	r3, #0
 8013978:	d115      	bne.n	80139a6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801397a:	693b      	ldr	r3, [r7, #16]
 801397c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801397e:	491f      	ldr	r1, [pc, #124]	; (80139fc <xTaskPriorityDisinherit+0x10c>)
 8013980:	4613      	mov	r3, r2
 8013982:	009b      	lsls	r3, r3, #2
 8013984:	4413      	add	r3, r2
 8013986:	009b      	lsls	r3, r3, #2
 8013988:	440b      	add	r3, r1
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d10a      	bne.n	80139a6 <xTaskPriorityDisinherit+0xb6>
 8013990:	693b      	ldr	r3, [r7, #16]
 8013992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013994:	2201      	movs	r2, #1
 8013996:	fa02 f303 	lsl.w	r3, r2, r3
 801399a:	43da      	mvns	r2, r3
 801399c:	4b18      	ldr	r3, [pc, #96]	; (8013a00 <xTaskPriorityDisinherit+0x110>)
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	4013      	ands	r3, r2
 80139a2:	4a17      	ldr	r2, [pc, #92]	; (8013a00 <xTaskPriorityDisinherit+0x110>)
 80139a4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80139a6:	693b      	ldr	r3, [r7, #16]
 80139a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80139aa:	693b      	ldr	r3, [r7, #16]
 80139ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139ae:	693b      	ldr	r3, [r7, #16]
 80139b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139b2:	f1c3 0207 	rsb	r2, r3, #7
 80139b6:	693b      	ldr	r3, [r7, #16]
 80139b8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80139ba:	693b      	ldr	r3, [r7, #16]
 80139bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139be:	2201      	movs	r2, #1
 80139c0:	409a      	lsls	r2, r3
 80139c2:	4b0f      	ldr	r3, [pc, #60]	; (8013a00 <xTaskPriorityDisinherit+0x110>)
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	4313      	orrs	r3, r2
 80139c8:	4a0d      	ldr	r2, [pc, #52]	; (8013a00 <xTaskPriorityDisinherit+0x110>)
 80139ca:	6013      	str	r3, [r2, #0]
 80139cc:	693b      	ldr	r3, [r7, #16]
 80139ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139d0:	4613      	mov	r3, r2
 80139d2:	009b      	lsls	r3, r3, #2
 80139d4:	4413      	add	r3, r2
 80139d6:	009b      	lsls	r3, r3, #2
 80139d8:	4a08      	ldr	r2, [pc, #32]	; (80139fc <xTaskPriorityDisinherit+0x10c>)
 80139da:	441a      	add	r2, r3
 80139dc:	693b      	ldr	r3, [r7, #16]
 80139de:	3304      	adds	r3, #4
 80139e0:	4619      	mov	r1, r3
 80139e2:	4610      	mov	r0, r2
 80139e4:	f7fe f9a5 	bl	8011d32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80139e8:	2301      	movs	r3, #1
 80139ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80139ec:	697b      	ldr	r3, [r7, #20]
	}
 80139ee:	4618      	mov	r0, r3
 80139f0:	3718      	adds	r7, #24
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}
 80139f6:	bf00      	nop
 80139f8:	20000dc0 	.word	0x20000dc0
 80139fc:	20000dc4 	.word	0x20000dc4
 8013a00:	20000ec8 	.word	0x20000ec8

08013a04 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b088      	sub	sp, #32
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
 8013a0c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013a12:	2301      	movs	r3, #1
 8013a14:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	f000 8087 	beq.w	8013b2c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013a1e:	69bb      	ldr	r3, [r7, #24]
 8013a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d10c      	bne.n	8013a40 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8013a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a2a:	b672      	cpsid	i
 8013a2c:	f383 8811 	msr	BASEPRI, r3
 8013a30:	f3bf 8f6f 	isb	sy
 8013a34:	f3bf 8f4f 	dsb	sy
 8013a38:	b662      	cpsie	i
 8013a3a:	60fb      	str	r3, [r7, #12]
}
 8013a3c:	bf00      	nop
 8013a3e:	e7fe      	b.n	8013a3e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013a40:	69bb      	ldr	r3, [r7, #24]
 8013a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a44:	683a      	ldr	r2, [r7, #0]
 8013a46:	429a      	cmp	r2, r3
 8013a48:	d902      	bls.n	8013a50 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013a4a:	683b      	ldr	r3, [r7, #0]
 8013a4c:	61fb      	str	r3, [r7, #28]
 8013a4e:	e002      	b.n	8013a56 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013a50:	69bb      	ldr	r3, [r7, #24]
 8013a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a54:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013a56:	69bb      	ldr	r3, [r7, #24]
 8013a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a5a:	69fa      	ldr	r2, [r7, #28]
 8013a5c:	429a      	cmp	r2, r3
 8013a5e:	d065      	beq.n	8013b2c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013a60:	69bb      	ldr	r3, [r7, #24]
 8013a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013a64:	697a      	ldr	r2, [r7, #20]
 8013a66:	429a      	cmp	r2, r3
 8013a68:	d160      	bne.n	8013b2c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013a6a:	4b32      	ldr	r3, [pc, #200]	; (8013b34 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	69ba      	ldr	r2, [r7, #24]
 8013a70:	429a      	cmp	r2, r3
 8013a72:	d10c      	bne.n	8013a8e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8013a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a78:	b672      	cpsid	i
 8013a7a:	f383 8811 	msr	BASEPRI, r3
 8013a7e:	f3bf 8f6f 	isb	sy
 8013a82:	f3bf 8f4f 	dsb	sy
 8013a86:	b662      	cpsie	i
 8013a88:	60bb      	str	r3, [r7, #8]
}
 8013a8a:	bf00      	nop
 8013a8c:	e7fe      	b.n	8013a8c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013a8e:	69bb      	ldr	r3, [r7, #24]
 8013a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a92:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013a94:	69bb      	ldr	r3, [r7, #24]
 8013a96:	69fa      	ldr	r2, [r7, #28]
 8013a98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013a9a:	69bb      	ldr	r3, [r7, #24]
 8013a9c:	699b      	ldr	r3, [r3, #24]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	db04      	blt.n	8013aac <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013aa2:	69fb      	ldr	r3, [r7, #28]
 8013aa4:	f1c3 0207 	rsb	r2, r3, #7
 8013aa8:	69bb      	ldr	r3, [r7, #24]
 8013aaa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013aac:	69bb      	ldr	r3, [r7, #24]
 8013aae:	6959      	ldr	r1, [r3, #20]
 8013ab0:	693a      	ldr	r2, [r7, #16]
 8013ab2:	4613      	mov	r3, r2
 8013ab4:	009b      	lsls	r3, r3, #2
 8013ab6:	4413      	add	r3, r2
 8013ab8:	009b      	lsls	r3, r3, #2
 8013aba:	4a1f      	ldr	r2, [pc, #124]	; (8013b38 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013abc:	4413      	add	r3, r2
 8013abe:	4299      	cmp	r1, r3
 8013ac0:	d134      	bne.n	8013b2c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013ac2:	69bb      	ldr	r3, [r7, #24]
 8013ac4:	3304      	adds	r3, #4
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f7fe f990 	bl	8011dec <uxListRemove>
 8013acc:	4603      	mov	r3, r0
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d115      	bne.n	8013afe <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013ad2:	69bb      	ldr	r3, [r7, #24]
 8013ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ad6:	4918      	ldr	r1, [pc, #96]	; (8013b38 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013ad8:	4613      	mov	r3, r2
 8013ada:	009b      	lsls	r3, r3, #2
 8013adc:	4413      	add	r3, r2
 8013ade:	009b      	lsls	r3, r3, #2
 8013ae0:	440b      	add	r3, r1
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d10a      	bne.n	8013afe <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8013ae8:	69bb      	ldr	r3, [r7, #24]
 8013aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013aec:	2201      	movs	r2, #1
 8013aee:	fa02 f303 	lsl.w	r3, r2, r3
 8013af2:	43da      	mvns	r2, r3
 8013af4:	4b11      	ldr	r3, [pc, #68]	; (8013b3c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	4013      	ands	r3, r2
 8013afa:	4a10      	ldr	r2, [pc, #64]	; (8013b3c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013afc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013afe:	69bb      	ldr	r3, [r7, #24]
 8013b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b02:	2201      	movs	r2, #1
 8013b04:	409a      	lsls	r2, r3
 8013b06:	4b0d      	ldr	r3, [pc, #52]	; (8013b3c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	4313      	orrs	r3, r2
 8013b0c:	4a0b      	ldr	r2, [pc, #44]	; (8013b3c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013b0e:	6013      	str	r3, [r2, #0]
 8013b10:	69bb      	ldr	r3, [r7, #24]
 8013b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b14:	4613      	mov	r3, r2
 8013b16:	009b      	lsls	r3, r3, #2
 8013b18:	4413      	add	r3, r2
 8013b1a:	009b      	lsls	r3, r3, #2
 8013b1c:	4a06      	ldr	r2, [pc, #24]	; (8013b38 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013b1e:	441a      	add	r2, r3
 8013b20:	69bb      	ldr	r3, [r7, #24]
 8013b22:	3304      	adds	r3, #4
 8013b24:	4619      	mov	r1, r3
 8013b26:	4610      	mov	r0, r2
 8013b28:	f7fe f903 	bl	8011d32 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013b2c:	bf00      	nop
 8013b2e:	3720      	adds	r7, #32
 8013b30:	46bd      	mov	sp, r7
 8013b32:	bd80      	pop	{r7, pc}
 8013b34:	20000dc0 	.word	0x20000dc0
 8013b38:	20000dc4 	.word	0x20000dc4
 8013b3c:	20000ec8 	.word	0x20000ec8

08013b40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013b40:	b480      	push	{r7}
 8013b42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013b44:	4b07      	ldr	r3, [pc, #28]	; (8013b64 <pvTaskIncrementMutexHeldCount+0x24>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d004      	beq.n	8013b56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013b4c:	4b05      	ldr	r3, [pc, #20]	; (8013b64 <pvTaskIncrementMutexHeldCount+0x24>)
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013b52:	3201      	adds	r2, #1
 8013b54:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8013b56:	4b03      	ldr	r3, [pc, #12]	; (8013b64 <pvTaskIncrementMutexHeldCount+0x24>)
 8013b58:	681b      	ldr	r3, [r3, #0]
	}
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b62:	4770      	bx	lr
 8013b64:	20000dc0 	.word	0x20000dc0

08013b68 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b084      	sub	sp, #16
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
 8013b70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013b72:	4b29      	ldr	r3, [pc, #164]	; (8013c18 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013b78:	4b28      	ldr	r3, [pc, #160]	; (8013c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	3304      	adds	r3, #4
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f7fe f934 	bl	8011dec <uxListRemove>
 8013b84:	4603      	mov	r3, r0
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d10b      	bne.n	8013ba2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013b8a:	4b24      	ldr	r3, [pc, #144]	; (8013c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b90:	2201      	movs	r2, #1
 8013b92:	fa02 f303 	lsl.w	r3, r2, r3
 8013b96:	43da      	mvns	r2, r3
 8013b98:	4b21      	ldr	r3, [pc, #132]	; (8013c20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	4013      	ands	r3, r2
 8013b9e:	4a20      	ldr	r2, [pc, #128]	; (8013c20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013ba0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ba8:	d10a      	bne.n	8013bc0 <prvAddCurrentTaskToDelayedList+0x58>
 8013baa:	683b      	ldr	r3, [r7, #0]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d007      	beq.n	8013bc0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013bb0:	4b1a      	ldr	r3, [pc, #104]	; (8013c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	3304      	adds	r3, #4
 8013bb6:	4619      	mov	r1, r3
 8013bb8:	481a      	ldr	r0, [pc, #104]	; (8013c24 <prvAddCurrentTaskToDelayedList+0xbc>)
 8013bba:	f7fe f8ba 	bl	8011d32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013bbe:	e026      	b.n	8013c0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013bc0:	68fa      	ldr	r2, [r7, #12]
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	4413      	add	r3, r2
 8013bc6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013bc8:	4b14      	ldr	r3, [pc, #80]	; (8013c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	68ba      	ldr	r2, [r7, #8]
 8013bce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013bd0:	68ba      	ldr	r2, [r7, #8]
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	429a      	cmp	r2, r3
 8013bd6:	d209      	bcs.n	8013bec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013bd8:	4b13      	ldr	r3, [pc, #76]	; (8013c28 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013bda:	681a      	ldr	r2, [r3, #0]
 8013bdc:	4b0f      	ldr	r3, [pc, #60]	; (8013c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	3304      	adds	r3, #4
 8013be2:	4619      	mov	r1, r3
 8013be4:	4610      	mov	r0, r2
 8013be6:	f7fe f8c8 	bl	8011d7a <vListInsert>
}
 8013bea:	e010      	b.n	8013c0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013bec:	4b0f      	ldr	r3, [pc, #60]	; (8013c2c <prvAddCurrentTaskToDelayedList+0xc4>)
 8013bee:	681a      	ldr	r2, [r3, #0]
 8013bf0:	4b0a      	ldr	r3, [pc, #40]	; (8013c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	3304      	adds	r3, #4
 8013bf6:	4619      	mov	r1, r3
 8013bf8:	4610      	mov	r0, r2
 8013bfa:	f7fe f8be 	bl	8011d7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013bfe:	4b0c      	ldr	r3, [pc, #48]	; (8013c30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	68ba      	ldr	r2, [r7, #8]
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d202      	bcs.n	8013c0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013c08:	4a09      	ldr	r2, [pc, #36]	; (8013c30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013c0a:	68bb      	ldr	r3, [r7, #8]
 8013c0c:	6013      	str	r3, [r2, #0]
}
 8013c0e:	bf00      	nop
 8013c10:	3710      	adds	r7, #16
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}
 8013c16:	bf00      	nop
 8013c18:	20000ec4 	.word	0x20000ec4
 8013c1c:	20000dc0 	.word	0x20000dc0
 8013c20:	20000ec8 	.word	0x20000ec8
 8013c24:	20000eac 	.word	0x20000eac
 8013c28:	20000e7c 	.word	0x20000e7c
 8013c2c:	20000e78 	.word	0x20000e78
 8013c30:	20000ee0 	.word	0x20000ee0

08013c34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013c34:	b480      	push	{r7}
 8013c36:	b085      	sub	sp, #20
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	60f8      	str	r0, [r7, #12]
 8013c3c:	60b9      	str	r1, [r7, #8]
 8013c3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	3b04      	subs	r3, #4
 8013c44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013c4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	3b04      	subs	r3, #4
 8013c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013c54:	68bb      	ldr	r3, [r7, #8]
 8013c56:	f023 0201 	bic.w	r2, r3, #1
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	3b04      	subs	r3, #4
 8013c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013c64:	4a0c      	ldr	r2, [pc, #48]	; (8013c98 <pxPortInitialiseStack+0x64>)
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	3b14      	subs	r3, #20
 8013c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013c70:	687a      	ldr	r2, [r7, #4]
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	3b04      	subs	r3, #4
 8013c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	f06f 0202 	mvn.w	r2, #2
 8013c82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	3b20      	subs	r3, #32
 8013c88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013c8a:	68fb      	ldr	r3, [r7, #12]
}
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	3714      	adds	r7, #20
 8013c90:	46bd      	mov	sp, r7
 8013c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c96:	4770      	bx	lr
 8013c98:	08013c9d 	.word	0x08013c9d

08013c9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013c9c:	b480      	push	{r7}
 8013c9e:	b085      	sub	sp, #20
 8013ca0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013ca6:	4b14      	ldr	r3, [pc, #80]	; (8013cf8 <prvTaskExitError+0x5c>)
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cae:	d00c      	beq.n	8013cca <prvTaskExitError+0x2e>
	__asm volatile
 8013cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cb4:	b672      	cpsid	i
 8013cb6:	f383 8811 	msr	BASEPRI, r3
 8013cba:	f3bf 8f6f 	isb	sy
 8013cbe:	f3bf 8f4f 	dsb	sy
 8013cc2:	b662      	cpsie	i
 8013cc4:	60fb      	str	r3, [r7, #12]
}
 8013cc6:	bf00      	nop
 8013cc8:	e7fe      	b.n	8013cc8 <prvTaskExitError+0x2c>
	__asm volatile
 8013cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cce:	b672      	cpsid	i
 8013cd0:	f383 8811 	msr	BASEPRI, r3
 8013cd4:	f3bf 8f6f 	isb	sy
 8013cd8:	f3bf 8f4f 	dsb	sy
 8013cdc:	b662      	cpsie	i
 8013cde:	60bb      	str	r3, [r7, #8]
}
 8013ce0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013ce2:	bf00      	nop
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d0fc      	beq.n	8013ce4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013cea:	bf00      	nop
 8013cec:	bf00      	nop
 8013cee:	3714      	adds	r7, #20
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf6:	4770      	bx	lr
 8013cf8:	20000014 	.word	0x20000014
 8013cfc:	00000000 	.word	0x00000000

08013d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013d00:	4b07      	ldr	r3, [pc, #28]	; (8013d20 <pxCurrentTCBConst2>)
 8013d02:	6819      	ldr	r1, [r3, #0]
 8013d04:	6808      	ldr	r0, [r1, #0]
 8013d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d0a:	f380 8809 	msr	PSP, r0
 8013d0e:	f3bf 8f6f 	isb	sy
 8013d12:	f04f 0000 	mov.w	r0, #0
 8013d16:	f380 8811 	msr	BASEPRI, r0
 8013d1a:	4770      	bx	lr
 8013d1c:	f3af 8000 	nop.w

08013d20 <pxCurrentTCBConst2>:
 8013d20:	20000dc0 	.word	0x20000dc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013d24:	bf00      	nop
 8013d26:	bf00      	nop

08013d28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013d28:	4808      	ldr	r0, [pc, #32]	; (8013d4c <prvPortStartFirstTask+0x24>)
 8013d2a:	6800      	ldr	r0, [r0, #0]
 8013d2c:	6800      	ldr	r0, [r0, #0]
 8013d2e:	f380 8808 	msr	MSP, r0
 8013d32:	f04f 0000 	mov.w	r0, #0
 8013d36:	f380 8814 	msr	CONTROL, r0
 8013d3a:	b662      	cpsie	i
 8013d3c:	b661      	cpsie	f
 8013d3e:	f3bf 8f4f 	dsb	sy
 8013d42:	f3bf 8f6f 	isb	sy
 8013d46:	df00      	svc	0
 8013d48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013d4a:	bf00      	nop
 8013d4c:	e000ed08 	.word	0xe000ed08

08013d50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b084      	sub	sp, #16
 8013d54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013d56:	4b37      	ldr	r3, [pc, #220]	; (8013e34 <xPortStartScheduler+0xe4>)
 8013d58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	781b      	ldrb	r3, [r3, #0]
 8013d5e:	b2db      	uxtb	r3, r3
 8013d60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	22ff      	movs	r2, #255	; 0xff
 8013d66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	781b      	ldrb	r3, [r3, #0]
 8013d6c:	b2db      	uxtb	r3, r3
 8013d6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013d70:	78fb      	ldrb	r3, [r7, #3]
 8013d72:	b2db      	uxtb	r3, r3
 8013d74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013d78:	b2da      	uxtb	r2, r3
 8013d7a:	4b2f      	ldr	r3, [pc, #188]	; (8013e38 <xPortStartScheduler+0xe8>)
 8013d7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013d7e:	4b2f      	ldr	r3, [pc, #188]	; (8013e3c <xPortStartScheduler+0xec>)
 8013d80:	2207      	movs	r2, #7
 8013d82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013d84:	e009      	b.n	8013d9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013d86:	4b2d      	ldr	r3, [pc, #180]	; (8013e3c <xPortStartScheduler+0xec>)
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	3b01      	subs	r3, #1
 8013d8c:	4a2b      	ldr	r2, [pc, #172]	; (8013e3c <xPortStartScheduler+0xec>)
 8013d8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013d90:	78fb      	ldrb	r3, [r7, #3]
 8013d92:	b2db      	uxtb	r3, r3
 8013d94:	005b      	lsls	r3, r3, #1
 8013d96:	b2db      	uxtb	r3, r3
 8013d98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013d9a:	78fb      	ldrb	r3, [r7, #3]
 8013d9c:	b2db      	uxtb	r3, r3
 8013d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013da2:	2b80      	cmp	r3, #128	; 0x80
 8013da4:	d0ef      	beq.n	8013d86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013da6:	4b25      	ldr	r3, [pc, #148]	; (8013e3c <xPortStartScheduler+0xec>)
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	f1c3 0307 	rsb	r3, r3, #7
 8013dae:	2b04      	cmp	r3, #4
 8013db0:	d00c      	beq.n	8013dcc <xPortStartScheduler+0x7c>
	__asm volatile
 8013db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013db6:	b672      	cpsid	i
 8013db8:	f383 8811 	msr	BASEPRI, r3
 8013dbc:	f3bf 8f6f 	isb	sy
 8013dc0:	f3bf 8f4f 	dsb	sy
 8013dc4:	b662      	cpsie	i
 8013dc6:	60bb      	str	r3, [r7, #8]
}
 8013dc8:	bf00      	nop
 8013dca:	e7fe      	b.n	8013dca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013dcc:	4b1b      	ldr	r3, [pc, #108]	; (8013e3c <xPortStartScheduler+0xec>)
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	021b      	lsls	r3, r3, #8
 8013dd2:	4a1a      	ldr	r2, [pc, #104]	; (8013e3c <xPortStartScheduler+0xec>)
 8013dd4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013dd6:	4b19      	ldr	r3, [pc, #100]	; (8013e3c <xPortStartScheduler+0xec>)
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013dde:	4a17      	ldr	r2, [pc, #92]	; (8013e3c <xPortStartScheduler+0xec>)
 8013de0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	b2da      	uxtb	r2, r3
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013dea:	4b15      	ldr	r3, [pc, #84]	; (8013e40 <xPortStartScheduler+0xf0>)
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	4a14      	ldr	r2, [pc, #80]	; (8013e40 <xPortStartScheduler+0xf0>)
 8013df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013df4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013df6:	4b12      	ldr	r3, [pc, #72]	; (8013e40 <xPortStartScheduler+0xf0>)
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	4a11      	ldr	r2, [pc, #68]	; (8013e40 <xPortStartScheduler+0xf0>)
 8013dfc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013e00:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013e02:	f000 f8dd 	bl	8013fc0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013e06:	4b0f      	ldr	r3, [pc, #60]	; (8013e44 <xPortStartScheduler+0xf4>)
 8013e08:	2200      	movs	r2, #0
 8013e0a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013e0c:	f000 f8fc 	bl	8014008 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013e10:	4b0d      	ldr	r3, [pc, #52]	; (8013e48 <xPortStartScheduler+0xf8>)
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	4a0c      	ldr	r2, [pc, #48]	; (8013e48 <xPortStartScheduler+0xf8>)
 8013e16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013e1a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013e1c:	f7ff ff84 	bl	8013d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013e20:	f7ff fa76 	bl	8013310 <vTaskSwitchContext>
	prvTaskExitError();
 8013e24:	f7ff ff3a 	bl	8013c9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013e28:	2300      	movs	r3, #0
}
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	3710      	adds	r7, #16
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}
 8013e32:	bf00      	nop
 8013e34:	e000e400 	.word	0xe000e400
 8013e38:	20000eec 	.word	0x20000eec
 8013e3c:	20000ef0 	.word	0x20000ef0
 8013e40:	e000ed20 	.word	0xe000ed20
 8013e44:	20000014 	.word	0x20000014
 8013e48:	e000ef34 	.word	0xe000ef34

08013e4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013e4c:	b480      	push	{r7}
 8013e4e:	b083      	sub	sp, #12
 8013e50:	af00      	add	r7, sp, #0
	__asm volatile
 8013e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e56:	b672      	cpsid	i
 8013e58:	f383 8811 	msr	BASEPRI, r3
 8013e5c:	f3bf 8f6f 	isb	sy
 8013e60:	f3bf 8f4f 	dsb	sy
 8013e64:	b662      	cpsie	i
 8013e66:	607b      	str	r3, [r7, #4]
}
 8013e68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013e6a:	4b10      	ldr	r3, [pc, #64]	; (8013eac <vPortEnterCritical+0x60>)
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	3301      	adds	r3, #1
 8013e70:	4a0e      	ldr	r2, [pc, #56]	; (8013eac <vPortEnterCritical+0x60>)
 8013e72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013e74:	4b0d      	ldr	r3, [pc, #52]	; (8013eac <vPortEnterCritical+0x60>)
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	2b01      	cmp	r3, #1
 8013e7a:	d111      	bne.n	8013ea0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013e7c:	4b0c      	ldr	r3, [pc, #48]	; (8013eb0 <vPortEnterCritical+0x64>)
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	b2db      	uxtb	r3, r3
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d00c      	beq.n	8013ea0 <vPortEnterCritical+0x54>
	__asm volatile
 8013e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e8a:	b672      	cpsid	i
 8013e8c:	f383 8811 	msr	BASEPRI, r3
 8013e90:	f3bf 8f6f 	isb	sy
 8013e94:	f3bf 8f4f 	dsb	sy
 8013e98:	b662      	cpsie	i
 8013e9a:	603b      	str	r3, [r7, #0]
}
 8013e9c:	bf00      	nop
 8013e9e:	e7fe      	b.n	8013e9e <vPortEnterCritical+0x52>
	}
}
 8013ea0:	bf00      	nop
 8013ea2:	370c      	adds	r7, #12
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eaa:	4770      	bx	lr
 8013eac:	20000014 	.word	0x20000014
 8013eb0:	e000ed04 	.word	0xe000ed04

08013eb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013eb4:	b480      	push	{r7}
 8013eb6:	b083      	sub	sp, #12
 8013eb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013eba:	4b13      	ldr	r3, [pc, #76]	; (8013f08 <vPortExitCritical+0x54>)
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d10c      	bne.n	8013edc <vPortExitCritical+0x28>
	__asm volatile
 8013ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ec6:	b672      	cpsid	i
 8013ec8:	f383 8811 	msr	BASEPRI, r3
 8013ecc:	f3bf 8f6f 	isb	sy
 8013ed0:	f3bf 8f4f 	dsb	sy
 8013ed4:	b662      	cpsie	i
 8013ed6:	607b      	str	r3, [r7, #4]
}
 8013ed8:	bf00      	nop
 8013eda:	e7fe      	b.n	8013eda <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8013edc:	4b0a      	ldr	r3, [pc, #40]	; (8013f08 <vPortExitCritical+0x54>)
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	3b01      	subs	r3, #1
 8013ee2:	4a09      	ldr	r2, [pc, #36]	; (8013f08 <vPortExitCritical+0x54>)
 8013ee4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013ee6:	4b08      	ldr	r3, [pc, #32]	; (8013f08 <vPortExitCritical+0x54>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d105      	bne.n	8013efa <vPortExitCritical+0x46>
 8013eee:	2300      	movs	r3, #0
 8013ef0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013ef2:	683b      	ldr	r3, [r7, #0]
 8013ef4:	f383 8811 	msr	BASEPRI, r3
}
 8013ef8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013efa:	bf00      	nop
 8013efc:	370c      	adds	r7, #12
 8013efe:	46bd      	mov	sp, r7
 8013f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f04:	4770      	bx	lr
 8013f06:	bf00      	nop
 8013f08:	20000014 	.word	0x20000014
 8013f0c:	00000000 	.word	0x00000000

08013f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013f10:	f3ef 8009 	mrs	r0, PSP
 8013f14:	f3bf 8f6f 	isb	sy
 8013f18:	4b15      	ldr	r3, [pc, #84]	; (8013f70 <pxCurrentTCBConst>)
 8013f1a:	681a      	ldr	r2, [r3, #0]
 8013f1c:	f01e 0f10 	tst.w	lr, #16
 8013f20:	bf08      	it	eq
 8013f22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013f26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f2a:	6010      	str	r0, [r2, #0]
 8013f2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013f30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013f34:	b672      	cpsid	i
 8013f36:	f380 8811 	msr	BASEPRI, r0
 8013f3a:	f3bf 8f4f 	dsb	sy
 8013f3e:	f3bf 8f6f 	isb	sy
 8013f42:	b662      	cpsie	i
 8013f44:	f7ff f9e4 	bl	8013310 <vTaskSwitchContext>
 8013f48:	f04f 0000 	mov.w	r0, #0
 8013f4c:	f380 8811 	msr	BASEPRI, r0
 8013f50:	bc09      	pop	{r0, r3}
 8013f52:	6819      	ldr	r1, [r3, #0]
 8013f54:	6808      	ldr	r0, [r1, #0]
 8013f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f5a:	f01e 0f10 	tst.w	lr, #16
 8013f5e:	bf08      	it	eq
 8013f60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013f64:	f380 8809 	msr	PSP, r0
 8013f68:	f3bf 8f6f 	isb	sy
 8013f6c:	4770      	bx	lr
 8013f6e:	bf00      	nop

08013f70 <pxCurrentTCBConst>:
 8013f70:	20000dc0 	.word	0x20000dc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013f74:	bf00      	nop
 8013f76:	bf00      	nop

08013f78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b082      	sub	sp, #8
 8013f7c:	af00      	add	r7, sp, #0
	__asm volatile
 8013f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f82:	b672      	cpsid	i
 8013f84:	f383 8811 	msr	BASEPRI, r3
 8013f88:	f3bf 8f6f 	isb	sy
 8013f8c:	f3bf 8f4f 	dsb	sy
 8013f90:	b662      	cpsie	i
 8013f92:	607b      	str	r3, [r7, #4]
}
 8013f94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013f96:	f7ff f901 	bl	801319c <xTaskIncrementTick>
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d003      	beq.n	8013fa8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013fa0:	4b06      	ldr	r3, [pc, #24]	; (8013fbc <SysTick_Handler+0x44>)
 8013fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fa6:	601a      	str	r2, [r3, #0]
 8013fa8:	2300      	movs	r3, #0
 8013faa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013fac:	683b      	ldr	r3, [r7, #0]
 8013fae:	f383 8811 	msr	BASEPRI, r3
}
 8013fb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013fb4:	bf00      	nop
 8013fb6:	3708      	adds	r7, #8
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd80      	pop	{r7, pc}
 8013fbc:	e000ed04 	.word	0xe000ed04

08013fc0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013fc0:	b480      	push	{r7}
 8013fc2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013fc4:	4b0b      	ldr	r3, [pc, #44]	; (8013ff4 <vPortSetupTimerInterrupt+0x34>)
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013fca:	4b0b      	ldr	r3, [pc, #44]	; (8013ff8 <vPortSetupTimerInterrupt+0x38>)
 8013fcc:	2200      	movs	r2, #0
 8013fce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013fd0:	4b0a      	ldr	r3, [pc, #40]	; (8013ffc <vPortSetupTimerInterrupt+0x3c>)
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	4a0a      	ldr	r2, [pc, #40]	; (8014000 <vPortSetupTimerInterrupt+0x40>)
 8013fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8013fda:	099b      	lsrs	r3, r3, #6
 8013fdc:	4a09      	ldr	r2, [pc, #36]	; (8014004 <vPortSetupTimerInterrupt+0x44>)
 8013fde:	3b01      	subs	r3, #1
 8013fe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013fe2:	4b04      	ldr	r3, [pc, #16]	; (8013ff4 <vPortSetupTimerInterrupt+0x34>)
 8013fe4:	2207      	movs	r2, #7
 8013fe6:	601a      	str	r2, [r3, #0]
}
 8013fe8:	bf00      	nop
 8013fea:	46bd      	mov	sp, r7
 8013fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff0:	4770      	bx	lr
 8013ff2:	bf00      	nop
 8013ff4:	e000e010 	.word	0xe000e010
 8013ff8:	e000e018 	.word	0xe000e018
 8013ffc:	20000008 	.word	0x20000008
 8014000:	10624dd3 	.word	0x10624dd3
 8014004:	e000e014 	.word	0xe000e014

08014008 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014008:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014018 <vPortEnableVFP+0x10>
 801400c:	6801      	ldr	r1, [r0, #0]
 801400e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014012:	6001      	str	r1, [r0, #0]
 8014014:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014016:	bf00      	nop
 8014018:	e000ed88 	.word	0xe000ed88

0801401c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801401c:	b480      	push	{r7}
 801401e:	b085      	sub	sp, #20
 8014020:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014022:	f3ef 8305 	mrs	r3, IPSR
 8014026:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	2b0f      	cmp	r3, #15
 801402c:	d916      	bls.n	801405c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801402e:	4a19      	ldr	r2, [pc, #100]	; (8014094 <vPortValidateInterruptPriority+0x78>)
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	4413      	add	r3, r2
 8014034:	781b      	ldrb	r3, [r3, #0]
 8014036:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014038:	4b17      	ldr	r3, [pc, #92]	; (8014098 <vPortValidateInterruptPriority+0x7c>)
 801403a:	781b      	ldrb	r3, [r3, #0]
 801403c:	7afa      	ldrb	r2, [r7, #11]
 801403e:	429a      	cmp	r2, r3
 8014040:	d20c      	bcs.n	801405c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8014042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014046:	b672      	cpsid	i
 8014048:	f383 8811 	msr	BASEPRI, r3
 801404c:	f3bf 8f6f 	isb	sy
 8014050:	f3bf 8f4f 	dsb	sy
 8014054:	b662      	cpsie	i
 8014056:	607b      	str	r3, [r7, #4]
}
 8014058:	bf00      	nop
 801405a:	e7fe      	b.n	801405a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801405c:	4b0f      	ldr	r3, [pc, #60]	; (801409c <vPortValidateInterruptPriority+0x80>)
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014064:	4b0e      	ldr	r3, [pc, #56]	; (80140a0 <vPortValidateInterruptPriority+0x84>)
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	429a      	cmp	r2, r3
 801406a:	d90c      	bls.n	8014086 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014070:	b672      	cpsid	i
 8014072:	f383 8811 	msr	BASEPRI, r3
 8014076:	f3bf 8f6f 	isb	sy
 801407a:	f3bf 8f4f 	dsb	sy
 801407e:	b662      	cpsie	i
 8014080:	603b      	str	r3, [r7, #0]
}
 8014082:	bf00      	nop
 8014084:	e7fe      	b.n	8014084 <vPortValidateInterruptPriority+0x68>
	}
 8014086:	bf00      	nop
 8014088:	3714      	adds	r7, #20
 801408a:	46bd      	mov	sp, r7
 801408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014090:	4770      	bx	lr
 8014092:	bf00      	nop
 8014094:	e000e3f0 	.word	0xe000e3f0
 8014098:	20000eec 	.word	0x20000eec
 801409c:	e000ed0c 	.word	0xe000ed0c
 80140a0:	20000ef0 	.word	0x20000ef0

080140a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b08a      	sub	sp, #40	; 0x28
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80140ac:	2300      	movs	r3, #0
 80140ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80140b0:	f7fe ffb8 	bl	8013024 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80140b4:	4b5b      	ldr	r3, [pc, #364]	; (8014224 <pvPortMalloc+0x180>)
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d101      	bne.n	80140c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80140bc:	f000 f91a 	bl	80142f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80140c0:	4b59      	ldr	r3, [pc, #356]	; (8014228 <pvPortMalloc+0x184>)
 80140c2:	681a      	ldr	r2, [r3, #0]
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	4013      	ands	r3, r2
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	f040 8092 	bne.w	80141f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d01f      	beq.n	8014114 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80140d4:	2208      	movs	r2, #8
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	4413      	add	r3, r2
 80140da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	f003 0307 	and.w	r3, r3, #7
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d016      	beq.n	8014114 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f023 0307 	bic.w	r3, r3, #7
 80140ec:	3308      	adds	r3, #8
 80140ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	f003 0307 	and.w	r3, r3, #7
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d00c      	beq.n	8014114 <pvPortMalloc+0x70>
	__asm volatile
 80140fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140fe:	b672      	cpsid	i
 8014100:	f383 8811 	msr	BASEPRI, r3
 8014104:	f3bf 8f6f 	isb	sy
 8014108:	f3bf 8f4f 	dsb	sy
 801410c:	b662      	cpsie	i
 801410e:	617b      	str	r3, [r7, #20]
}
 8014110:	bf00      	nop
 8014112:	e7fe      	b.n	8014112 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d06b      	beq.n	80141f2 <pvPortMalloc+0x14e>
 801411a:	4b44      	ldr	r3, [pc, #272]	; (801422c <pvPortMalloc+0x188>)
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	687a      	ldr	r2, [r7, #4]
 8014120:	429a      	cmp	r2, r3
 8014122:	d866      	bhi.n	80141f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014124:	4b42      	ldr	r3, [pc, #264]	; (8014230 <pvPortMalloc+0x18c>)
 8014126:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014128:	4b41      	ldr	r3, [pc, #260]	; (8014230 <pvPortMalloc+0x18c>)
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801412e:	e004      	b.n	801413a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8014130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014132:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801413c:	685b      	ldr	r3, [r3, #4]
 801413e:	687a      	ldr	r2, [r7, #4]
 8014140:	429a      	cmp	r2, r3
 8014142:	d903      	bls.n	801414c <pvPortMalloc+0xa8>
 8014144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d1f1      	bne.n	8014130 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801414c:	4b35      	ldr	r3, [pc, #212]	; (8014224 <pvPortMalloc+0x180>)
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014152:	429a      	cmp	r2, r3
 8014154:	d04d      	beq.n	80141f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014156:	6a3b      	ldr	r3, [r7, #32]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	2208      	movs	r2, #8
 801415c:	4413      	add	r3, r2
 801415e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014162:	681a      	ldr	r2, [r3, #0]
 8014164:	6a3b      	ldr	r3, [r7, #32]
 8014166:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801416a:	685a      	ldr	r2, [r3, #4]
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	1ad2      	subs	r2, r2, r3
 8014170:	2308      	movs	r3, #8
 8014172:	005b      	lsls	r3, r3, #1
 8014174:	429a      	cmp	r2, r3
 8014176:	d921      	bls.n	80141bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	4413      	add	r3, r2
 801417e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014180:	69bb      	ldr	r3, [r7, #24]
 8014182:	f003 0307 	and.w	r3, r3, #7
 8014186:	2b00      	cmp	r3, #0
 8014188:	d00c      	beq.n	80141a4 <pvPortMalloc+0x100>
	__asm volatile
 801418a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801418e:	b672      	cpsid	i
 8014190:	f383 8811 	msr	BASEPRI, r3
 8014194:	f3bf 8f6f 	isb	sy
 8014198:	f3bf 8f4f 	dsb	sy
 801419c:	b662      	cpsie	i
 801419e:	613b      	str	r3, [r7, #16]
}
 80141a0:	bf00      	nop
 80141a2:	e7fe      	b.n	80141a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80141a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141a6:	685a      	ldr	r2, [r3, #4]
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	1ad2      	subs	r2, r2, r3
 80141ac:	69bb      	ldr	r3, [r7, #24]
 80141ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80141b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141b2:	687a      	ldr	r2, [r7, #4]
 80141b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80141b6:	69b8      	ldr	r0, [r7, #24]
 80141b8:	f000 f8fe 	bl	80143b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80141bc:	4b1b      	ldr	r3, [pc, #108]	; (801422c <pvPortMalloc+0x188>)
 80141be:	681a      	ldr	r2, [r3, #0]
 80141c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c2:	685b      	ldr	r3, [r3, #4]
 80141c4:	1ad3      	subs	r3, r2, r3
 80141c6:	4a19      	ldr	r2, [pc, #100]	; (801422c <pvPortMalloc+0x188>)
 80141c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80141ca:	4b18      	ldr	r3, [pc, #96]	; (801422c <pvPortMalloc+0x188>)
 80141cc:	681a      	ldr	r2, [r3, #0]
 80141ce:	4b19      	ldr	r3, [pc, #100]	; (8014234 <pvPortMalloc+0x190>)
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	429a      	cmp	r2, r3
 80141d4:	d203      	bcs.n	80141de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80141d6:	4b15      	ldr	r3, [pc, #84]	; (801422c <pvPortMalloc+0x188>)
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	4a16      	ldr	r2, [pc, #88]	; (8014234 <pvPortMalloc+0x190>)
 80141dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80141de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e0:	685a      	ldr	r2, [r3, #4]
 80141e2:	4b11      	ldr	r3, [pc, #68]	; (8014228 <pvPortMalloc+0x184>)
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	431a      	orrs	r2, r3
 80141e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80141ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ee:	2200      	movs	r2, #0
 80141f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80141f2:	f7fe ff25 	bl	8013040 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80141f6:	69fb      	ldr	r3, [r7, #28]
 80141f8:	f003 0307 	and.w	r3, r3, #7
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d00c      	beq.n	801421a <pvPortMalloc+0x176>
	__asm volatile
 8014200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014204:	b672      	cpsid	i
 8014206:	f383 8811 	msr	BASEPRI, r3
 801420a:	f3bf 8f6f 	isb	sy
 801420e:	f3bf 8f4f 	dsb	sy
 8014212:	b662      	cpsie	i
 8014214:	60fb      	str	r3, [r7, #12]
}
 8014216:	bf00      	nop
 8014218:	e7fe      	b.n	8014218 <pvPortMalloc+0x174>
	return pvReturn;
 801421a:	69fb      	ldr	r3, [r7, #28]
}
 801421c:	4618      	mov	r0, r3
 801421e:	3728      	adds	r7, #40	; 0x28
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}
 8014224:	20008efc 	.word	0x20008efc
 8014228:	20008f08 	.word	0x20008f08
 801422c:	20008f00 	.word	0x20008f00
 8014230:	20008ef4 	.word	0x20008ef4
 8014234:	20008f04 	.word	0x20008f04

08014238 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b086      	sub	sp, #24
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d04c      	beq.n	80142e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801424a:	2308      	movs	r3, #8
 801424c:	425b      	negs	r3, r3
 801424e:	697a      	ldr	r2, [r7, #20]
 8014250:	4413      	add	r3, r2
 8014252:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014254:	697b      	ldr	r3, [r7, #20]
 8014256:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014258:	693b      	ldr	r3, [r7, #16]
 801425a:	685a      	ldr	r2, [r3, #4]
 801425c:	4b23      	ldr	r3, [pc, #140]	; (80142ec <vPortFree+0xb4>)
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	4013      	ands	r3, r2
 8014262:	2b00      	cmp	r3, #0
 8014264:	d10c      	bne.n	8014280 <vPortFree+0x48>
	__asm volatile
 8014266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801426a:	b672      	cpsid	i
 801426c:	f383 8811 	msr	BASEPRI, r3
 8014270:	f3bf 8f6f 	isb	sy
 8014274:	f3bf 8f4f 	dsb	sy
 8014278:	b662      	cpsie	i
 801427a:	60fb      	str	r3, [r7, #12]
}
 801427c:	bf00      	nop
 801427e:	e7fe      	b.n	801427e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014280:	693b      	ldr	r3, [r7, #16]
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d00c      	beq.n	80142a2 <vPortFree+0x6a>
	__asm volatile
 8014288:	f04f 0350 	mov.w	r3, #80	; 0x50
 801428c:	b672      	cpsid	i
 801428e:	f383 8811 	msr	BASEPRI, r3
 8014292:	f3bf 8f6f 	isb	sy
 8014296:	f3bf 8f4f 	dsb	sy
 801429a:	b662      	cpsie	i
 801429c:	60bb      	str	r3, [r7, #8]
}
 801429e:	bf00      	nop
 80142a0:	e7fe      	b.n	80142a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80142a2:	693b      	ldr	r3, [r7, #16]
 80142a4:	685a      	ldr	r2, [r3, #4]
 80142a6:	4b11      	ldr	r3, [pc, #68]	; (80142ec <vPortFree+0xb4>)
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	4013      	ands	r3, r2
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d019      	beq.n	80142e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80142b0:	693b      	ldr	r3, [r7, #16]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d115      	bne.n	80142e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80142b8:	693b      	ldr	r3, [r7, #16]
 80142ba:	685a      	ldr	r2, [r3, #4]
 80142bc:	4b0b      	ldr	r3, [pc, #44]	; (80142ec <vPortFree+0xb4>)
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	43db      	mvns	r3, r3
 80142c2:	401a      	ands	r2, r3
 80142c4:	693b      	ldr	r3, [r7, #16]
 80142c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80142c8:	f7fe feac 	bl	8013024 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80142cc:	693b      	ldr	r3, [r7, #16]
 80142ce:	685a      	ldr	r2, [r3, #4]
 80142d0:	4b07      	ldr	r3, [pc, #28]	; (80142f0 <vPortFree+0xb8>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	4413      	add	r3, r2
 80142d6:	4a06      	ldr	r2, [pc, #24]	; (80142f0 <vPortFree+0xb8>)
 80142d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80142da:	6938      	ldr	r0, [r7, #16]
 80142dc:	f000 f86c 	bl	80143b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80142e0:	f7fe feae 	bl	8013040 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80142e4:	bf00      	nop
 80142e6:	3718      	adds	r7, #24
 80142e8:	46bd      	mov	sp, r7
 80142ea:	bd80      	pop	{r7, pc}
 80142ec:	20008f08 	.word	0x20008f08
 80142f0:	20008f00 	.word	0x20008f00

080142f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80142f4:	b480      	push	{r7}
 80142f6:	b085      	sub	sp, #20
 80142f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80142fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80142fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014300:	4b27      	ldr	r3, [pc, #156]	; (80143a0 <prvHeapInit+0xac>)
 8014302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	f003 0307 	and.w	r3, r3, #7
 801430a:	2b00      	cmp	r3, #0
 801430c:	d00c      	beq.n	8014328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	3307      	adds	r3, #7
 8014312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	f023 0307 	bic.w	r3, r3, #7
 801431a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801431c:	68ba      	ldr	r2, [r7, #8]
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	1ad3      	subs	r3, r2, r3
 8014322:	4a1f      	ldr	r2, [pc, #124]	; (80143a0 <prvHeapInit+0xac>)
 8014324:	4413      	add	r3, r2
 8014326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801432c:	4a1d      	ldr	r2, [pc, #116]	; (80143a4 <prvHeapInit+0xb0>)
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014332:	4b1c      	ldr	r3, [pc, #112]	; (80143a4 <prvHeapInit+0xb0>)
 8014334:	2200      	movs	r2, #0
 8014336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	68ba      	ldr	r2, [r7, #8]
 801433c:	4413      	add	r3, r2
 801433e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014340:	2208      	movs	r2, #8
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	1a9b      	subs	r3, r3, r2
 8014346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	f023 0307 	bic.w	r3, r3, #7
 801434e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	4a15      	ldr	r2, [pc, #84]	; (80143a8 <prvHeapInit+0xb4>)
 8014354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014356:	4b14      	ldr	r3, [pc, #80]	; (80143a8 <prvHeapInit+0xb4>)
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	2200      	movs	r2, #0
 801435c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801435e:	4b12      	ldr	r3, [pc, #72]	; (80143a8 <prvHeapInit+0xb4>)
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	2200      	movs	r2, #0
 8014364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801436a:	683b      	ldr	r3, [r7, #0]
 801436c:	68fa      	ldr	r2, [r7, #12]
 801436e:	1ad2      	subs	r2, r2, r3
 8014370:	683b      	ldr	r3, [r7, #0]
 8014372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014374:	4b0c      	ldr	r3, [pc, #48]	; (80143a8 <prvHeapInit+0xb4>)
 8014376:	681a      	ldr	r2, [r3, #0]
 8014378:	683b      	ldr	r3, [r7, #0]
 801437a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801437c:	683b      	ldr	r3, [r7, #0]
 801437e:	685b      	ldr	r3, [r3, #4]
 8014380:	4a0a      	ldr	r2, [pc, #40]	; (80143ac <prvHeapInit+0xb8>)
 8014382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014384:	683b      	ldr	r3, [r7, #0]
 8014386:	685b      	ldr	r3, [r3, #4]
 8014388:	4a09      	ldr	r2, [pc, #36]	; (80143b0 <prvHeapInit+0xbc>)
 801438a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801438c:	4b09      	ldr	r3, [pc, #36]	; (80143b4 <prvHeapInit+0xc0>)
 801438e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014392:	601a      	str	r2, [r3, #0]
}
 8014394:	bf00      	nop
 8014396:	3714      	adds	r7, #20
 8014398:	46bd      	mov	sp, r7
 801439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801439e:	4770      	bx	lr
 80143a0:	20000ef4 	.word	0x20000ef4
 80143a4:	20008ef4 	.word	0x20008ef4
 80143a8:	20008efc 	.word	0x20008efc
 80143ac:	20008f04 	.word	0x20008f04
 80143b0:	20008f00 	.word	0x20008f00
 80143b4:	20008f08 	.word	0x20008f08

080143b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80143b8:	b480      	push	{r7}
 80143ba:	b085      	sub	sp, #20
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80143c0:	4b28      	ldr	r3, [pc, #160]	; (8014464 <prvInsertBlockIntoFreeList+0xac>)
 80143c2:	60fb      	str	r3, [r7, #12]
 80143c4:	e002      	b.n	80143cc <prvInsertBlockIntoFreeList+0x14>
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	60fb      	str	r3, [r7, #12]
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	687a      	ldr	r2, [r7, #4]
 80143d2:	429a      	cmp	r2, r3
 80143d4:	d8f7      	bhi.n	80143c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	685b      	ldr	r3, [r3, #4]
 80143de:	68ba      	ldr	r2, [r7, #8]
 80143e0:	4413      	add	r3, r2
 80143e2:	687a      	ldr	r2, [r7, #4]
 80143e4:	429a      	cmp	r2, r3
 80143e6:	d108      	bne.n	80143fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	685a      	ldr	r2, [r3, #4]
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	685b      	ldr	r3, [r3, #4]
 80143f0:	441a      	add	r2, r3
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	685b      	ldr	r3, [r3, #4]
 8014402:	68ba      	ldr	r2, [r7, #8]
 8014404:	441a      	add	r2, r3
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	429a      	cmp	r2, r3
 801440c:	d118      	bne.n	8014440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	681a      	ldr	r2, [r3, #0]
 8014412:	4b15      	ldr	r3, [pc, #84]	; (8014468 <prvInsertBlockIntoFreeList+0xb0>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	429a      	cmp	r2, r3
 8014418:	d00d      	beq.n	8014436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	685a      	ldr	r2, [r3, #4]
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	685b      	ldr	r3, [r3, #4]
 8014424:	441a      	add	r2, r3
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	681a      	ldr	r2, [r3, #0]
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	601a      	str	r2, [r3, #0]
 8014434:	e008      	b.n	8014448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014436:	4b0c      	ldr	r3, [pc, #48]	; (8014468 <prvInsertBlockIntoFreeList+0xb0>)
 8014438:	681a      	ldr	r2, [r3, #0]
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	601a      	str	r2, [r3, #0]
 801443e:	e003      	b.n	8014448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	681a      	ldr	r2, [r3, #0]
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014448:	68fa      	ldr	r2, [r7, #12]
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	429a      	cmp	r2, r3
 801444e:	d002      	beq.n	8014456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	687a      	ldr	r2, [r7, #4]
 8014454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014456:	bf00      	nop
 8014458:	3714      	adds	r7, #20
 801445a:	46bd      	mov	sp, r7
 801445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014460:	4770      	bx	lr
 8014462:	bf00      	nop
 8014464:	20008ef4 	.word	0x20008ef4
 8014468:	20008efc 	.word	0x20008efc

0801446c <__cvt>:
 801446c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014470:	ec55 4b10 	vmov	r4, r5, d0
 8014474:	2d00      	cmp	r5, #0
 8014476:	460e      	mov	r6, r1
 8014478:	4619      	mov	r1, r3
 801447a:	462b      	mov	r3, r5
 801447c:	bfbb      	ittet	lt
 801447e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014482:	461d      	movlt	r5, r3
 8014484:	2300      	movge	r3, #0
 8014486:	232d      	movlt	r3, #45	; 0x2d
 8014488:	700b      	strb	r3, [r1, #0]
 801448a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801448c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014490:	4691      	mov	r9, r2
 8014492:	f023 0820 	bic.w	r8, r3, #32
 8014496:	bfbc      	itt	lt
 8014498:	4622      	movlt	r2, r4
 801449a:	4614      	movlt	r4, r2
 801449c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80144a0:	d005      	beq.n	80144ae <__cvt+0x42>
 80144a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80144a6:	d100      	bne.n	80144aa <__cvt+0x3e>
 80144a8:	3601      	adds	r6, #1
 80144aa:	2102      	movs	r1, #2
 80144ac:	e000      	b.n	80144b0 <__cvt+0x44>
 80144ae:	2103      	movs	r1, #3
 80144b0:	ab03      	add	r3, sp, #12
 80144b2:	9301      	str	r3, [sp, #4]
 80144b4:	ab02      	add	r3, sp, #8
 80144b6:	9300      	str	r3, [sp, #0]
 80144b8:	ec45 4b10 	vmov	d0, r4, r5
 80144bc:	4653      	mov	r3, sl
 80144be:	4632      	mov	r2, r6
 80144c0:	f001 f922 	bl	8015708 <_dtoa_r>
 80144c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80144c8:	4607      	mov	r7, r0
 80144ca:	d102      	bne.n	80144d2 <__cvt+0x66>
 80144cc:	f019 0f01 	tst.w	r9, #1
 80144d0:	d022      	beq.n	8014518 <__cvt+0xac>
 80144d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80144d6:	eb07 0906 	add.w	r9, r7, r6
 80144da:	d110      	bne.n	80144fe <__cvt+0x92>
 80144dc:	783b      	ldrb	r3, [r7, #0]
 80144de:	2b30      	cmp	r3, #48	; 0x30
 80144e0:	d10a      	bne.n	80144f8 <__cvt+0x8c>
 80144e2:	2200      	movs	r2, #0
 80144e4:	2300      	movs	r3, #0
 80144e6:	4620      	mov	r0, r4
 80144e8:	4629      	mov	r1, r5
 80144ea:	f7ec fb15 	bl	8000b18 <__aeabi_dcmpeq>
 80144ee:	b918      	cbnz	r0, 80144f8 <__cvt+0x8c>
 80144f0:	f1c6 0601 	rsb	r6, r6, #1
 80144f4:	f8ca 6000 	str.w	r6, [sl]
 80144f8:	f8da 3000 	ldr.w	r3, [sl]
 80144fc:	4499      	add	r9, r3
 80144fe:	2200      	movs	r2, #0
 8014500:	2300      	movs	r3, #0
 8014502:	4620      	mov	r0, r4
 8014504:	4629      	mov	r1, r5
 8014506:	f7ec fb07 	bl	8000b18 <__aeabi_dcmpeq>
 801450a:	b108      	cbz	r0, 8014510 <__cvt+0xa4>
 801450c:	f8cd 900c 	str.w	r9, [sp, #12]
 8014510:	2230      	movs	r2, #48	; 0x30
 8014512:	9b03      	ldr	r3, [sp, #12]
 8014514:	454b      	cmp	r3, r9
 8014516:	d307      	bcc.n	8014528 <__cvt+0xbc>
 8014518:	9b03      	ldr	r3, [sp, #12]
 801451a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801451c:	1bdb      	subs	r3, r3, r7
 801451e:	4638      	mov	r0, r7
 8014520:	6013      	str	r3, [r2, #0]
 8014522:	b004      	add	sp, #16
 8014524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014528:	1c59      	adds	r1, r3, #1
 801452a:	9103      	str	r1, [sp, #12]
 801452c:	701a      	strb	r2, [r3, #0]
 801452e:	e7f0      	b.n	8014512 <__cvt+0xa6>

08014530 <__exponent>:
 8014530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014532:	4603      	mov	r3, r0
 8014534:	2900      	cmp	r1, #0
 8014536:	bfb8      	it	lt
 8014538:	4249      	neglt	r1, r1
 801453a:	f803 2b02 	strb.w	r2, [r3], #2
 801453e:	bfb4      	ite	lt
 8014540:	222d      	movlt	r2, #45	; 0x2d
 8014542:	222b      	movge	r2, #43	; 0x2b
 8014544:	2909      	cmp	r1, #9
 8014546:	7042      	strb	r2, [r0, #1]
 8014548:	dd2a      	ble.n	80145a0 <__exponent+0x70>
 801454a:	f10d 0207 	add.w	r2, sp, #7
 801454e:	4617      	mov	r7, r2
 8014550:	260a      	movs	r6, #10
 8014552:	4694      	mov	ip, r2
 8014554:	fb91 f5f6 	sdiv	r5, r1, r6
 8014558:	fb06 1415 	mls	r4, r6, r5, r1
 801455c:	3430      	adds	r4, #48	; 0x30
 801455e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8014562:	460c      	mov	r4, r1
 8014564:	2c63      	cmp	r4, #99	; 0x63
 8014566:	f102 32ff 	add.w	r2, r2, #4294967295
 801456a:	4629      	mov	r1, r5
 801456c:	dcf1      	bgt.n	8014552 <__exponent+0x22>
 801456e:	3130      	adds	r1, #48	; 0x30
 8014570:	f1ac 0402 	sub.w	r4, ip, #2
 8014574:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014578:	1c41      	adds	r1, r0, #1
 801457a:	4622      	mov	r2, r4
 801457c:	42ba      	cmp	r2, r7
 801457e:	d30a      	bcc.n	8014596 <__exponent+0x66>
 8014580:	f10d 0209 	add.w	r2, sp, #9
 8014584:	eba2 020c 	sub.w	r2, r2, ip
 8014588:	42bc      	cmp	r4, r7
 801458a:	bf88      	it	hi
 801458c:	2200      	movhi	r2, #0
 801458e:	4413      	add	r3, r2
 8014590:	1a18      	subs	r0, r3, r0
 8014592:	b003      	add	sp, #12
 8014594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014596:	f812 5b01 	ldrb.w	r5, [r2], #1
 801459a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801459e:	e7ed      	b.n	801457c <__exponent+0x4c>
 80145a0:	2330      	movs	r3, #48	; 0x30
 80145a2:	3130      	adds	r1, #48	; 0x30
 80145a4:	7083      	strb	r3, [r0, #2]
 80145a6:	70c1      	strb	r1, [r0, #3]
 80145a8:	1d03      	adds	r3, r0, #4
 80145aa:	e7f1      	b.n	8014590 <__exponent+0x60>

080145ac <_printf_float>:
 80145ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145b0:	ed2d 8b02 	vpush	{d8}
 80145b4:	b08d      	sub	sp, #52	; 0x34
 80145b6:	460c      	mov	r4, r1
 80145b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80145bc:	4616      	mov	r6, r2
 80145be:	461f      	mov	r7, r3
 80145c0:	4605      	mov	r5, r0
 80145c2:	f000 ff37 	bl	8015434 <_localeconv_r>
 80145c6:	f8d0 a000 	ldr.w	sl, [r0]
 80145ca:	4650      	mov	r0, sl
 80145cc:	f7eb fe78 	bl	80002c0 <strlen>
 80145d0:	2300      	movs	r3, #0
 80145d2:	930a      	str	r3, [sp, #40]	; 0x28
 80145d4:	6823      	ldr	r3, [r4, #0]
 80145d6:	9305      	str	r3, [sp, #20]
 80145d8:	f8d8 3000 	ldr.w	r3, [r8]
 80145dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80145e0:	3307      	adds	r3, #7
 80145e2:	f023 0307 	bic.w	r3, r3, #7
 80145e6:	f103 0208 	add.w	r2, r3, #8
 80145ea:	f8c8 2000 	str.w	r2, [r8]
 80145ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80145f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80145f6:	9307      	str	r3, [sp, #28]
 80145f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80145fc:	ee08 0a10 	vmov	s16, r0
 8014600:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8014604:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014608:	4b9e      	ldr	r3, [pc, #632]	; (8014884 <_printf_float+0x2d8>)
 801460a:	f04f 32ff 	mov.w	r2, #4294967295
 801460e:	f7ec fab5 	bl	8000b7c <__aeabi_dcmpun>
 8014612:	bb88      	cbnz	r0, 8014678 <_printf_float+0xcc>
 8014614:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014618:	4b9a      	ldr	r3, [pc, #616]	; (8014884 <_printf_float+0x2d8>)
 801461a:	f04f 32ff 	mov.w	r2, #4294967295
 801461e:	f7ec fa8f 	bl	8000b40 <__aeabi_dcmple>
 8014622:	bb48      	cbnz	r0, 8014678 <_printf_float+0xcc>
 8014624:	2200      	movs	r2, #0
 8014626:	2300      	movs	r3, #0
 8014628:	4640      	mov	r0, r8
 801462a:	4649      	mov	r1, r9
 801462c:	f7ec fa7e 	bl	8000b2c <__aeabi_dcmplt>
 8014630:	b110      	cbz	r0, 8014638 <_printf_float+0x8c>
 8014632:	232d      	movs	r3, #45	; 0x2d
 8014634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014638:	4a93      	ldr	r2, [pc, #588]	; (8014888 <_printf_float+0x2dc>)
 801463a:	4b94      	ldr	r3, [pc, #592]	; (801488c <_printf_float+0x2e0>)
 801463c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014640:	bf94      	ite	ls
 8014642:	4690      	movls	r8, r2
 8014644:	4698      	movhi	r8, r3
 8014646:	2303      	movs	r3, #3
 8014648:	6123      	str	r3, [r4, #16]
 801464a:	9b05      	ldr	r3, [sp, #20]
 801464c:	f023 0304 	bic.w	r3, r3, #4
 8014650:	6023      	str	r3, [r4, #0]
 8014652:	f04f 0900 	mov.w	r9, #0
 8014656:	9700      	str	r7, [sp, #0]
 8014658:	4633      	mov	r3, r6
 801465a:	aa0b      	add	r2, sp, #44	; 0x2c
 801465c:	4621      	mov	r1, r4
 801465e:	4628      	mov	r0, r5
 8014660:	f000 f9da 	bl	8014a18 <_printf_common>
 8014664:	3001      	adds	r0, #1
 8014666:	f040 8090 	bne.w	801478a <_printf_float+0x1de>
 801466a:	f04f 30ff 	mov.w	r0, #4294967295
 801466e:	b00d      	add	sp, #52	; 0x34
 8014670:	ecbd 8b02 	vpop	{d8}
 8014674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014678:	4642      	mov	r2, r8
 801467a:	464b      	mov	r3, r9
 801467c:	4640      	mov	r0, r8
 801467e:	4649      	mov	r1, r9
 8014680:	f7ec fa7c 	bl	8000b7c <__aeabi_dcmpun>
 8014684:	b140      	cbz	r0, 8014698 <_printf_float+0xec>
 8014686:	464b      	mov	r3, r9
 8014688:	2b00      	cmp	r3, #0
 801468a:	bfbc      	itt	lt
 801468c:	232d      	movlt	r3, #45	; 0x2d
 801468e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014692:	4a7f      	ldr	r2, [pc, #508]	; (8014890 <_printf_float+0x2e4>)
 8014694:	4b7f      	ldr	r3, [pc, #508]	; (8014894 <_printf_float+0x2e8>)
 8014696:	e7d1      	b.n	801463c <_printf_float+0x90>
 8014698:	6863      	ldr	r3, [r4, #4]
 801469a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801469e:	9206      	str	r2, [sp, #24]
 80146a0:	1c5a      	adds	r2, r3, #1
 80146a2:	d13f      	bne.n	8014724 <_printf_float+0x178>
 80146a4:	2306      	movs	r3, #6
 80146a6:	6063      	str	r3, [r4, #4]
 80146a8:	9b05      	ldr	r3, [sp, #20]
 80146aa:	6861      	ldr	r1, [r4, #4]
 80146ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80146b0:	2300      	movs	r3, #0
 80146b2:	9303      	str	r3, [sp, #12]
 80146b4:	ab0a      	add	r3, sp, #40	; 0x28
 80146b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80146ba:	ab09      	add	r3, sp, #36	; 0x24
 80146bc:	ec49 8b10 	vmov	d0, r8, r9
 80146c0:	9300      	str	r3, [sp, #0]
 80146c2:	6022      	str	r2, [r4, #0]
 80146c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80146c8:	4628      	mov	r0, r5
 80146ca:	f7ff fecf 	bl	801446c <__cvt>
 80146ce:	9b06      	ldr	r3, [sp, #24]
 80146d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80146d2:	2b47      	cmp	r3, #71	; 0x47
 80146d4:	4680      	mov	r8, r0
 80146d6:	d108      	bne.n	80146ea <_printf_float+0x13e>
 80146d8:	1cc8      	adds	r0, r1, #3
 80146da:	db02      	blt.n	80146e2 <_printf_float+0x136>
 80146dc:	6863      	ldr	r3, [r4, #4]
 80146de:	4299      	cmp	r1, r3
 80146e0:	dd41      	ble.n	8014766 <_printf_float+0x1ba>
 80146e2:	f1ab 0302 	sub.w	r3, fp, #2
 80146e6:	fa5f fb83 	uxtb.w	fp, r3
 80146ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80146ee:	d820      	bhi.n	8014732 <_printf_float+0x186>
 80146f0:	3901      	subs	r1, #1
 80146f2:	465a      	mov	r2, fp
 80146f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80146f8:	9109      	str	r1, [sp, #36]	; 0x24
 80146fa:	f7ff ff19 	bl	8014530 <__exponent>
 80146fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014700:	1813      	adds	r3, r2, r0
 8014702:	2a01      	cmp	r2, #1
 8014704:	4681      	mov	r9, r0
 8014706:	6123      	str	r3, [r4, #16]
 8014708:	dc02      	bgt.n	8014710 <_printf_float+0x164>
 801470a:	6822      	ldr	r2, [r4, #0]
 801470c:	07d2      	lsls	r2, r2, #31
 801470e:	d501      	bpl.n	8014714 <_printf_float+0x168>
 8014710:	3301      	adds	r3, #1
 8014712:	6123      	str	r3, [r4, #16]
 8014714:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014718:	2b00      	cmp	r3, #0
 801471a:	d09c      	beq.n	8014656 <_printf_float+0xaa>
 801471c:	232d      	movs	r3, #45	; 0x2d
 801471e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014722:	e798      	b.n	8014656 <_printf_float+0xaa>
 8014724:	9a06      	ldr	r2, [sp, #24]
 8014726:	2a47      	cmp	r2, #71	; 0x47
 8014728:	d1be      	bne.n	80146a8 <_printf_float+0xfc>
 801472a:	2b00      	cmp	r3, #0
 801472c:	d1bc      	bne.n	80146a8 <_printf_float+0xfc>
 801472e:	2301      	movs	r3, #1
 8014730:	e7b9      	b.n	80146a6 <_printf_float+0xfa>
 8014732:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8014736:	d118      	bne.n	801476a <_printf_float+0x1be>
 8014738:	2900      	cmp	r1, #0
 801473a:	6863      	ldr	r3, [r4, #4]
 801473c:	dd0b      	ble.n	8014756 <_printf_float+0x1aa>
 801473e:	6121      	str	r1, [r4, #16]
 8014740:	b913      	cbnz	r3, 8014748 <_printf_float+0x19c>
 8014742:	6822      	ldr	r2, [r4, #0]
 8014744:	07d0      	lsls	r0, r2, #31
 8014746:	d502      	bpl.n	801474e <_printf_float+0x1a2>
 8014748:	3301      	adds	r3, #1
 801474a:	440b      	add	r3, r1
 801474c:	6123      	str	r3, [r4, #16]
 801474e:	65a1      	str	r1, [r4, #88]	; 0x58
 8014750:	f04f 0900 	mov.w	r9, #0
 8014754:	e7de      	b.n	8014714 <_printf_float+0x168>
 8014756:	b913      	cbnz	r3, 801475e <_printf_float+0x1b2>
 8014758:	6822      	ldr	r2, [r4, #0]
 801475a:	07d2      	lsls	r2, r2, #31
 801475c:	d501      	bpl.n	8014762 <_printf_float+0x1b6>
 801475e:	3302      	adds	r3, #2
 8014760:	e7f4      	b.n	801474c <_printf_float+0x1a0>
 8014762:	2301      	movs	r3, #1
 8014764:	e7f2      	b.n	801474c <_printf_float+0x1a0>
 8014766:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801476a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801476c:	4299      	cmp	r1, r3
 801476e:	db05      	blt.n	801477c <_printf_float+0x1d0>
 8014770:	6823      	ldr	r3, [r4, #0]
 8014772:	6121      	str	r1, [r4, #16]
 8014774:	07d8      	lsls	r0, r3, #31
 8014776:	d5ea      	bpl.n	801474e <_printf_float+0x1a2>
 8014778:	1c4b      	adds	r3, r1, #1
 801477a:	e7e7      	b.n	801474c <_printf_float+0x1a0>
 801477c:	2900      	cmp	r1, #0
 801477e:	bfd4      	ite	le
 8014780:	f1c1 0202 	rsble	r2, r1, #2
 8014784:	2201      	movgt	r2, #1
 8014786:	4413      	add	r3, r2
 8014788:	e7e0      	b.n	801474c <_printf_float+0x1a0>
 801478a:	6823      	ldr	r3, [r4, #0]
 801478c:	055a      	lsls	r2, r3, #21
 801478e:	d407      	bmi.n	80147a0 <_printf_float+0x1f4>
 8014790:	6923      	ldr	r3, [r4, #16]
 8014792:	4642      	mov	r2, r8
 8014794:	4631      	mov	r1, r6
 8014796:	4628      	mov	r0, r5
 8014798:	47b8      	blx	r7
 801479a:	3001      	adds	r0, #1
 801479c:	d12c      	bne.n	80147f8 <_printf_float+0x24c>
 801479e:	e764      	b.n	801466a <_printf_float+0xbe>
 80147a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80147a4:	f240 80e0 	bls.w	8014968 <_printf_float+0x3bc>
 80147a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80147ac:	2200      	movs	r2, #0
 80147ae:	2300      	movs	r3, #0
 80147b0:	f7ec f9b2 	bl	8000b18 <__aeabi_dcmpeq>
 80147b4:	2800      	cmp	r0, #0
 80147b6:	d034      	beq.n	8014822 <_printf_float+0x276>
 80147b8:	4a37      	ldr	r2, [pc, #220]	; (8014898 <_printf_float+0x2ec>)
 80147ba:	2301      	movs	r3, #1
 80147bc:	4631      	mov	r1, r6
 80147be:	4628      	mov	r0, r5
 80147c0:	47b8      	blx	r7
 80147c2:	3001      	adds	r0, #1
 80147c4:	f43f af51 	beq.w	801466a <_printf_float+0xbe>
 80147c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80147cc:	429a      	cmp	r2, r3
 80147ce:	db02      	blt.n	80147d6 <_printf_float+0x22a>
 80147d0:	6823      	ldr	r3, [r4, #0]
 80147d2:	07d8      	lsls	r0, r3, #31
 80147d4:	d510      	bpl.n	80147f8 <_printf_float+0x24c>
 80147d6:	ee18 3a10 	vmov	r3, s16
 80147da:	4652      	mov	r2, sl
 80147dc:	4631      	mov	r1, r6
 80147de:	4628      	mov	r0, r5
 80147e0:	47b8      	blx	r7
 80147e2:	3001      	adds	r0, #1
 80147e4:	f43f af41 	beq.w	801466a <_printf_float+0xbe>
 80147e8:	f04f 0800 	mov.w	r8, #0
 80147ec:	f104 091a 	add.w	r9, r4, #26
 80147f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147f2:	3b01      	subs	r3, #1
 80147f4:	4543      	cmp	r3, r8
 80147f6:	dc09      	bgt.n	801480c <_printf_float+0x260>
 80147f8:	6823      	ldr	r3, [r4, #0]
 80147fa:	079b      	lsls	r3, r3, #30
 80147fc:	f100 8107 	bmi.w	8014a0e <_printf_float+0x462>
 8014800:	68e0      	ldr	r0, [r4, #12]
 8014802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014804:	4298      	cmp	r0, r3
 8014806:	bfb8      	it	lt
 8014808:	4618      	movlt	r0, r3
 801480a:	e730      	b.n	801466e <_printf_float+0xc2>
 801480c:	2301      	movs	r3, #1
 801480e:	464a      	mov	r2, r9
 8014810:	4631      	mov	r1, r6
 8014812:	4628      	mov	r0, r5
 8014814:	47b8      	blx	r7
 8014816:	3001      	adds	r0, #1
 8014818:	f43f af27 	beq.w	801466a <_printf_float+0xbe>
 801481c:	f108 0801 	add.w	r8, r8, #1
 8014820:	e7e6      	b.n	80147f0 <_printf_float+0x244>
 8014822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014824:	2b00      	cmp	r3, #0
 8014826:	dc39      	bgt.n	801489c <_printf_float+0x2f0>
 8014828:	4a1b      	ldr	r2, [pc, #108]	; (8014898 <_printf_float+0x2ec>)
 801482a:	2301      	movs	r3, #1
 801482c:	4631      	mov	r1, r6
 801482e:	4628      	mov	r0, r5
 8014830:	47b8      	blx	r7
 8014832:	3001      	adds	r0, #1
 8014834:	f43f af19 	beq.w	801466a <_printf_float+0xbe>
 8014838:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801483c:	4313      	orrs	r3, r2
 801483e:	d102      	bne.n	8014846 <_printf_float+0x29a>
 8014840:	6823      	ldr	r3, [r4, #0]
 8014842:	07d9      	lsls	r1, r3, #31
 8014844:	d5d8      	bpl.n	80147f8 <_printf_float+0x24c>
 8014846:	ee18 3a10 	vmov	r3, s16
 801484a:	4652      	mov	r2, sl
 801484c:	4631      	mov	r1, r6
 801484e:	4628      	mov	r0, r5
 8014850:	47b8      	blx	r7
 8014852:	3001      	adds	r0, #1
 8014854:	f43f af09 	beq.w	801466a <_printf_float+0xbe>
 8014858:	f04f 0900 	mov.w	r9, #0
 801485c:	f104 0a1a 	add.w	sl, r4, #26
 8014860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014862:	425b      	negs	r3, r3
 8014864:	454b      	cmp	r3, r9
 8014866:	dc01      	bgt.n	801486c <_printf_float+0x2c0>
 8014868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801486a:	e792      	b.n	8014792 <_printf_float+0x1e6>
 801486c:	2301      	movs	r3, #1
 801486e:	4652      	mov	r2, sl
 8014870:	4631      	mov	r1, r6
 8014872:	4628      	mov	r0, r5
 8014874:	47b8      	blx	r7
 8014876:	3001      	adds	r0, #1
 8014878:	f43f aef7 	beq.w	801466a <_printf_float+0xbe>
 801487c:	f109 0901 	add.w	r9, r9, #1
 8014880:	e7ee      	b.n	8014860 <_printf_float+0x2b4>
 8014882:	bf00      	nop
 8014884:	7fefffff 	.word	0x7fefffff
 8014888:	0801c068 	.word	0x0801c068
 801488c:	0801c06c 	.word	0x0801c06c
 8014890:	0801c070 	.word	0x0801c070
 8014894:	0801c074 	.word	0x0801c074
 8014898:	0801c400 	.word	0x0801c400
 801489c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801489e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80148a0:	429a      	cmp	r2, r3
 80148a2:	bfa8      	it	ge
 80148a4:	461a      	movge	r2, r3
 80148a6:	2a00      	cmp	r2, #0
 80148a8:	4691      	mov	r9, r2
 80148aa:	dc37      	bgt.n	801491c <_printf_float+0x370>
 80148ac:	f04f 0b00 	mov.w	fp, #0
 80148b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80148b4:	f104 021a 	add.w	r2, r4, #26
 80148b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80148ba:	9305      	str	r3, [sp, #20]
 80148bc:	eba3 0309 	sub.w	r3, r3, r9
 80148c0:	455b      	cmp	r3, fp
 80148c2:	dc33      	bgt.n	801492c <_printf_float+0x380>
 80148c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80148c8:	429a      	cmp	r2, r3
 80148ca:	db3b      	blt.n	8014944 <_printf_float+0x398>
 80148cc:	6823      	ldr	r3, [r4, #0]
 80148ce:	07da      	lsls	r2, r3, #31
 80148d0:	d438      	bmi.n	8014944 <_printf_float+0x398>
 80148d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80148d6:	eba2 0903 	sub.w	r9, r2, r3
 80148da:	9b05      	ldr	r3, [sp, #20]
 80148dc:	1ad2      	subs	r2, r2, r3
 80148de:	4591      	cmp	r9, r2
 80148e0:	bfa8      	it	ge
 80148e2:	4691      	movge	r9, r2
 80148e4:	f1b9 0f00 	cmp.w	r9, #0
 80148e8:	dc35      	bgt.n	8014956 <_printf_float+0x3aa>
 80148ea:	f04f 0800 	mov.w	r8, #0
 80148ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80148f2:	f104 0a1a 	add.w	sl, r4, #26
 80148f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80148fa:	1a9b      	subs	r3, r3, r2
 80148fc:	eba3 0309 	sub.w	r3, r3, r9
 8014900:	4543      	cmp	r3, r8
 8014902:	f77f af79 	ble.w	80147f8 <_printf_float+0x24c>
 8014906:	2301      	movs	r3, #1
 8014908:	4652      	mov	r2, sl
 801490a:	4631      	mov	r1, r6
 801490c:	4628      	mov	r0, r5
 801490e:	47b8      	blx	r7
 8014910:	3001      	adds	r0, #1
 8014912:	f43f aeaa 	beq.w	801466a <_printf_float+0xbe>
 8014916:	f108 0801 	add.w	r8, r8, #1
 801491a:	e7ec      	b.n	80148f6 <_printf_float+0x34a>
 801491c:	4613      	mov	r3, r2
 801491e:	4631      	mov	r1, r6
 8014920:	4642      	mov	r2, r8
 8014922:	4628      	mov	r0, r5
 8014924:	47b8      	blx	r7
 8014926:	3001      	adds	r0, #1
 8014928:	d1c0      	bne.n	80148ac <_printf_float+0x300>
 801492a:	e69e      	b.n	801466a <_printf_float+0xbe>
 801492c:	2301      	movs	r3, #1
 801492e:	4631      	mov	r1, r6
 8014930:	4628      	mov	r0, r5
 8014932:	9205      	str	r2, [sp, #20]
 8014934:	47b8      	blx	r7
 8014936:	3001      	adds	r0, #1
 8014938:	f43f ae97 	beq.w	801466a <_printf_float+0xbe>
 801493c:	9a05      	ldr	r2, [sp, #20]
 801493e:	f10b 0b01 	add.w	fp, fp, #1
 8014942:	e7b9      	b.n	80148b8 <_printf_float+0x30c>
 8014944:	ee18 3a10 	vmov	r3, s16
 8014948:	4652      	mov	r2, sl
 801494a:	4631      	mov	r1, r6
 801494c:	4628      	mov	r0, r5
 801494e:	47b8      	blx	r7
 8014950:	3001      	adds	r0, #1
 8014952:	d1be      	bne.n	80148d2 <_printf_float+0x326>
 8014954:	e689      	b.n	801466a <_printf_float+0xbe>
 8014956:	9a05      	ldr	r2, [sp, #20]
 8014958:	464b      	mov	r3, r9
 801495a:	4442      	add	r2, r8
 801495c:	4631      	mov	r1, r6
 801495e:	4628      	mov	r0, r5
 8014960:	47b8      	blx	r7
 8014962:	3001      	adds	r0, #1
 8014964:	d1c1      	bne.n	80148ea <_printf_float+0x33e>
 8014966:	e680      	b.n	801466a <_printf_float+0xbe>
 8014968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801496a:	2a01      	cmp	r2, #1
 801496c:	dc01      	bgt.n	8014972 <_printf_float+0x3c6>
 801496e:	07db      	lsls	r3, r3, #31
 8014970:	d53a      	bpl.n	80149e8 <_printf_float+0x43c>
 8014972:	2301      	movs	r3, #1
 8014974:	4642      	mov	r2, r8
 8014976:	4631      	mov	r1, r6
 8014978:	4628      	mov	r0, r5
 801497a:	47b8      	blx	r7
 801497c:	3001      	adds	r0, #1
 801497e:	f43f ae74 	beq.w	801466a <_printf_float+0xbe>
 8014982:	ee18 3a10 	vmov	r3, s16
 8014986:	4652      	mov	r2, sl
 8014988:	4631      	mov	r1, r6
 801498a:	4628      	mov	r0, r5
 801498c:	47b8      	blx	r7
 801498e:	3001      	adds	r0, #1
 8014990:	f43f ae6b 	beq.w	801466a <_printf_float+0xbe>
 8014994:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014998:	2200      	movs	r2, #0
 801499a:	2300      	movs	r3, #0
 801499c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80149a0:	f7ec f8ba 	bl	8000b18 <__aeabi_dcmpeq>
 80149a4:	b9d8      	cbnz	r0, 80149de <_printf_float+0x432>
 80149a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80149aa:	f108 0201 	add.w	r2, r8, #1
 80149ae:	4631      	mov	r1, r6
 80149b0:	4628      	mov	r0, r5
 80149b2:	47b8      	blx	r7
 80149b4:	3001      	adds	r0, #1
 80149b6:	d10e      	bne.n	80149d6 <_printf_float+0x42a>
 80149b8:	e657      	b.n	801466a <_printf_float+0xbe>
 80149ba:	2301      	movs	r3, #1
 80149bc:	4652      	mov	r2, sl
 80149be:	4631      	mov	r1, r6
 80149c0:	4628      	mov	r0, r5
 80149c2:	47b8      	blx	r7
 80149c4:	3001      	adds	r0, #1
 80149c6:	f43f ae50 	beq.w	801466a <_printf_float+0xbe>
 80149ca:	f108 0801 	add.w	r8, r8, #1
 80149ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149d0:	3b01      	subs	r3, #1
 80149d2:	4543      	cmp	r3, r8
 80149d4:	dcf1      	bgt.n	80149ba <_printf_float+0x40e>
 80149d6:	464b      	mov	r3, r9
 80149d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80149dc:	e6da      	b.n	8014794 <_printf_float+0x1e8>
 80149de:	f04f 0800 	mov.w	r8, #0
 80149e2:	f104 0a1a 	add.w	sl, r4, #26
 80149e6:	e7f2      	b.n	80149ce <_printf_float+0x422>
 80149e8:	2301      	movs	r3, #1
 80149ea:	4642      	mov	r2, r8
 80149ec:	e7df      	b.n	80149ae <_printf_float+0x402>
 80149ee:	2301      	movs	r3, #1
 80149f0:	464a      	mov	r2, r9
 80149f2:	4631      	mov	r1, r6
 80149f4:	4628      	mov	r0, r5
 80149f6:	47b8      	blx	r7
 80149f8:	3001      	adds	r0, #1
 80149fa:	f43f ae36 	beq.w	801466a <_printf_float+0xbe>
 80149fe:	f108 0801 	add.w	r8, r8, #1
 8014a02:	68e3      	ldr	r3, [r4, #12]
 8014a04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014a06:	1a5b      	subs	r3, r3, r1
 8014a08:	4543      	cmp	r3, r8
 8014a0a:	dcf0      	bgt.n	80149ee <_printf_float+0x442>
 8014a0c:	e6f8      	b.n	8014800 <_printf_float+0x254>
 8014a0e:	f04f 0800 	mov.w	r8, #0
 8014a12:	f104 0919 	add.w	r9, r4, #25
 8014a16:	e7f4      	b.n	8014a02 <_printf_float+0x456>

08014a18 <_printf_common>:
 8014a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a1c:	4616      	mov	r6, r2
 8014a1e:	4699      	mov	r9, r3
 8014a20:	688a      	ldr	r2, [r1, #8]
 8014a22:	690b      	ldr	r3, [r1, #16]
 8014a24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014a28:	4293      	cmp	r3, r2
 8014a2a:	bfb8      	it	lt
 8014a2c:	4613      	movlt	r3, r2
 8014a2e:	6033      	str	r3, [r6, #0]
 8014a30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014a34:	4607      	mov	r7, r0
 8014a36:	460c      	mov	r4, r1
 8014a38:	b10a      	cbz	r2, 8014a3e <_printf_common+0x26>
 8014a3a:	3301      	adds	r3, #1
 8014a3c:	6033      	str	r3, [r6, #0]
 8014a3e:	6823      	ldr	r3, [r4, #0]
 8014a40:	0699      	lsls	r1, r3, #26
 8014a42:	bf42      	ittt	mi
 8014a44:	6833      	ldrmi	r3, [r6, #0]
 8014a46:	3302      	addmi	r3, #2
 8014a48:	6033      	strmi	r3, [r6, #0]
 8014a4a:	6825      	ldr	r5, [r4, #0]
 8014a4c:	f015 0506 	ands.w	r5, r5, #6
 8014a50:	d106      	bne.n	8014a60 <_printf_common+0x48>
 8014a52:	f104 0a19 	add.w	sl, r4, #25
 8014a56:	68e3      	ldr	r3, [r4, #12]
 8014a58:	6832      	ldr	r2, [r6, #0]
 8014a5a:	1a9b      	subs	r3, r3, r2
 8014a5c:	42ab      	cmp	r3, r5
 8014a5e:	dc26      	bgt.n	8014aae <_printf_common+0x96>
 8014a60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014a64:	1e13      	subs	r3, r2, #0
 8014a66:	6822      	ldr	r2, [r4, #0]
 8014a68:	bf18      	it	ne
 8014a6a:	2301      	movne	r3, #1
 8014a6c:	0692      	lsls	r2, r2, #26
 8014a6e:	d42b      	bmi.n	8014ac8 <_printf_common+0xb0>
 8014a70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014a74:	4649      	mov	r1, r9
 8014a76:	4638      	mov	r0, r7
 8014a78:	47c0      	blx	r8
 8014a7a:	3001      	adds	r0, #1
 8014a7c:	d01e      	beq.n	8014abc <_printf_common+0xa4>
 8014a7e:	6823      	ldr	r3, [r4, #0]
 8014a80:	6922      	ldr	r2, [r4, #16]
 8014a82:	f003 0306 	and.w	r3, r3, #6
 8014a86:	2b04      	cmp	r3, #4
 8014a88:	bf02      	ittt	eq
 8014a8a:	68e5      	ldreq	r5, [r4, #12]
 8014a8c:	6833      	ldreq	r3, [r6, #0]
 8014a8e:	1aed      	subeq	r5, r5, r3
 8014a90:	68a3      	ldr	r3, [r4, #8]
 8014a92:	bf0c      	ite	eq
 8014a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014a98:	2500      	movne	r5, #0
 8014a9a:	4293      	cmp	r3, r2
 8014a9c:	bfc4      	itt	gt
 8014a9e:	1a9b      	subgt	r3, r3, r2
 8014aa0:	18ed      	addgt	r5, r5, r3
 8014aa2:	2600      	movs	r6, #0
 8014aa4:	341a      	adds	r4, #26
 8014aa6:	42b5      	cmp	r5, r6
 8014aa8:	d11a      	bne.n	8014ae0 <_printf_common+0xc8>
 8014aaa:	2000      	movs	r0, #0
 8014aac:	e008      	b.n	8014ac0 <_printf_common+0xa8>
 8014aae:	2301      	movs	r3, #1
 8014ab0:	4652      	mov	r2, sl
 8014ab2:	4649      	mov	r1, r9
 8014ab4:	4638      	mov	r0, r7
 8014ab6:	47c0      	blx	r8
 8014ab8:	3001      	adds	r0, #1
 8014aba:	d103      	bne.n	8014ac4 <_printf_common+0xac>
 8014abc:	f04f 30ff 	mov.w	r0, #4294967295
 8014ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ac4:	3501      	adds	r5, #1
 8014ac6:	e7c6      	b.n	8014a56 <_printf_common+0x3e>
 8014ac8:	18e1      	adds	r1, r4, r3
 8014aca:	1c5a      	adds	r2, r3, #1
 8014acc:	2030      	movs	r0, #48	; 0x30
 8014ace:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014ad2:	4422      	add	r2, r4
 8014ad4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014ad8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014adc:	3302      	adds	r3, #2
 8014ade:	e7c7      	b.n	8014a70 <_printf_common+0x58>
 8014ae0:	2301      	movs	r3, #1
 8014ae2:	4622      	mov	r2, r4
 8014ae4:	4649      	mov	r1, r9
 8014ae6:	4638      	mov	r0, r7
 8014ae8:	47c0      	blx	r8
 8014aea:	3001      	adds	r0, #1
 8014aec:	d0e6      	beq.n	8014abc <_printf_common+0xa4>
 8014aee:	3601      	adds	r6, #1
 8014af0:	e7d9      	b.n	8014aa6 <_printf_common+0x8e>
	...

08014af4 <_printf_i>:
 8014af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014af8:	7e0f      	ldrb	r7, [r1, #24]
 8014afa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014afc:	2f78      	cmp	r7, #120	; 0x78
 8014afe:	4691      	mov	r9, r2
 8014b00:	4680      	mov	r8, r0
 8014b02:	460c      	mov	r4, r1
 8014b04:	469a      	mov	sl, r3
 8014b06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014b0a:	d807      	bhi.n	8014b1c <_printf_i+0x28>
 8014b0c:	2f62      	cmp	r7, #98	; 0x62
 8014b0e:	d80a      	bhi.n	8014b26 <_printf_i+0x32>
 8014b10:	2f00      	cmp	r7, #0
 8014b12:	f000 80d4 	beq.w	8014cbe <_printf_i+0x1ca>
 8014b16:	2f58      	cmp	r7, #88	; 0x58
 8014b18:	f000 80c0 	beq.w	8014c9c <_printf_i+0x1a8>
 8014b1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014b20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014b24:	e03a      	b.n	8014b9c <_printf_i+0xa8>
 8014b26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014b2a:	2b15      	cmp	r3, #21
 8014b2c:	d8f6      	bhi.n	8014b1c <_printf_i+0x28>
 8014b2e:	a101      	add	r1, pc, #4	; (adr r1, 8014b34 <_printf_i+0x40>)
 8014b30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014b34:	08014b8d 	.word	0x08014b8d
 8014b38:	08014ba1 	.word	0x08014ba1
 8014b3c:	08014b1d 	.word	0x08014b1d
 8014b40:	08014b1d 	.word	0x08014b1d
 8014b44:	08014b1d 	.word	0x08014b1d
 8014b48:	08014b1d 	.word	0x08014b1d
 8014b4c:	08014ba1 	.word	0x08014ba1
 8014b50:	08014b1d 	.word	0x08014b1d
 8014b54:	08014b1d 	.word	0x08014b1d
 8014b58:	08014b1d 	.word	0x08014b1d
 8014b5c:	08014b1d 	.word	0x08014b1d
 8014b60:	08014ca5 	.word	0x08014ca5
 8014b64:	08014bcd 	.word	0x08014bcd
 8014b68:	08014c5f 	.word	0x08014c5f
 8014b6c:	08014b1d 	.word	0x08014b1d
 8014b70:	08014b1d 	.word	0x08014b1d
 8014b74:	08014cc7 	.word	0x08014cc7
 8014b78:	08014b1d 	.word	0x08014b1d
 8014b7c:	08014bcd 	.word	0x08014bcd
 8014b80:	08014b1d 	.word	0x08014b1d
 8014b84:	08014b1d 	.word	0x08014b1d
 8014b88:	08014c67 	.word	0x08014c67
 8014b8c:	682b      	ldr	r3, [r5, #0]
 8014b8e:	1d1a      	adds	r2, r3, #4
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	602a      	str	r2, [r5, #0]
 8014b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014b98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014b9c:	2301      	movs	r3, #1
 8014b9e:	e09f      	b.n	8014ce0 <_printf_i+0x1ec>
 8014ba0:	6820      	ldr	r0, [r4, #0]
 8014ba2:	682b      	ldr	r3, [r5, #0]
 8014ba4:	0607      	lsls	r7, r0, #24
 8014ba6:	f103 0104 	add.w	r1, r3, #4
 8014baa:	6029      	str	r1, [r5, #0]
 8014bac:	d501      	bpl.n	8014bb2 <_printf_i+0xbe>
 8014bae:	681e      	ldr	r6, [r3, #0]
 8014bb0:	e003      	b.n	8014bba <_printf_i+0xc6>
 8014bb2:	0646      	lsls	r6, r0, #25
 8014bb4:	d5fb      	bpl.n	8014bae <_printf_i+0xba>
 8014bb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014bba:	2e00      	cmp	r6, #0
 8014bbc:	da03      	bge.n	8014bc6 <_printf_i+0xd2>
 8014bbe:	232d      	movs	r3, #45	; 0x2d
 8014bc0:	4276      	negs	r6, r6
 8014bc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014bc6:	485a      	ldr	r0, [pc, #360]	; (8014d30 <_printf_i+0x23c>)
 8014bc8:	230a      	movs	r3, #10
 8014bca:	e012      	b.n	8014bf2 <_printf_i+0xfe>
 8014bcc:	682b      	ldr	r3, [r5, #0]
 8014bce:	6820      	ldr	r0, [r4, #0]
 8014bd0:	1d19      	adds	r1, r3, #4
 8014bd2:	6029      	str	r1, [r5, #0]
 8014bd4:	0605      	lsls	r5, r0, #24
 8014bd6:	d501      	bpl.n	8014bdc <_printf_i+0xe8>
 8014bd8:	681e      	ldr	r6, [r3, #0]
 8014bda:	e002      	b.n	8014be2 <_printf_i+0xee>
 8014bdc:	0641      	lsls	r1, r0, #25
 8014bde:	d5fb      	bpl.n	8014bd8 <_printf_i+0xe4>
 8014be0:	881e      	ldrh	r6, [r3, #0]
 8014be2:	4853      	ldr	r0, [pc, #332]	; (8014d30 <_printf_i+0x23c>)
 8014be4:	2f6f      	cmp	r7, #111	; 0x6f
 8014be6:	bf0c      	ite	eq
 8014be8:	2308      	moveq	r3, #8
 8014bea:	230a      	movne	r3, #10
 8014bec:	2100      	movs	r1, #0
 8014bee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014bf2:	6865      	ldr	r5, [r4, #4]
 8014bf4:	60a5      	str	r5, [r4, #8]
 8014bf6:	2d00      	cmp	r5, #0
 8014bf8:	bfa2      	ittt	ge
 8014bfa:	6821      	ldrge	r1, [r4, #0]
 8014bfc:	f021 0104 	bicge.w	r1, r1, #4
 8014c00:	6021      	strge	r1, [r4, #0]
 8014c02:	b90e      	cbnz	r6, 8014c08 <_printf_i+0x114>
 8014c04:	2d00      	cmp	r5, #0
 8014c06:	d04b      	beq.n	8014ca0 <_printf_i+0x1ac>
 8014c08:	4615      	mov	r5, r2
 8014c0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8014c0e:	fb03 6711 	mls	r7, r3, r1, r6
 8014c12:	5dc7      	ldrb	r7, [r0, r7]
 8014c14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014c18:	4637      	mov	r7, r6
 8014c1a:	42bb      	cmp	r3, r7
 8014c1c:	460e      	mov	r6, r1
 8014c1e:	d9f4      	bls.n	8014c0a <_printf_i+0x116>
 8014c20:	2b08      	cmp	r3, #8
 8014c22:	d10b      	bne.n	8014c3c <_printf_i+0x148>
 8014c24:	6823      	ldr	r3, [r4, #0]
 8014c26:	07de      	lsls	r6, r3, #31
 8014c28:	d508      	bpl.n	8014c3c <_printf_i+0x148>
 8014c2a:	6923      	ldr	r3, [r4, #16]
 8014c2c:	6861      	ldr	r1, [r4, #4]
 8014c2e:	4299      	cmp	r1, r3
 8014c30:	bfde      	ittt	le
 8014c32:	2330      	movle	r3, #48	; 0x30
 8014c34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014c38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014c3c:	1b52      	subs	r2, r2, r5
 8014c3e:	6122      	str	r2, [r4, #16]
 8014c40:	f8cd a000 	str.w	sl, [sp]
 8014c44:	464b      	mov	r3, r9
 8014c46:	aa03      	add	r2, sp, #12
 8014c48:	4621      	mov	r1, r4
 8014c4a:	4640      	mov	r0, r8
 8014c4c:	f7ff fee4 	bl	8014a18 <_printf_common>
 8014c50:	3001      	adds	r0, #1
 8014c52:	d14a      	bne.n	8014cea <_printf_i+0x1f6>
 8014c54:	f04f 30ff 	mov.w	r0, #4294967295
 8014c58:	b004      	add	sp, #16
 8014c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c5e:	6823      	ldr	r3, [r4, #0]
 8014c60:	f043 0320 	orr.w	r3, r3, #32
 8014c64:	6023      	str	r3, [r4, #0]
 8014c66:	4833      	ldr	r0, [pc, #204]	; (8014d34 <_printf_i+0x240>)
 8014c68:	2778      	movs	r7, #120	; 0x78
 8014c6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014c6e:	6823      	ldr	r3, [r4, #0]
 8014c70:	6829      	ldr	r1, [r5, #0]
 8014c72:	061f      	lsls	r7, r3, #24
 8014c74:	f851 6b04 	ldr.w	r6, [r1], #4
 8014c78:	d402      	bmi.n	8014c80 <_printf_i+0x18c>
 8014c7a:	065f      	lsls	r7, r3, #25
 8014c7c:	bf48      	it	mi
 8014c7e:	b2b6      	uxthmi	r6, r6
 8014c80:	07df      	lsls	r7, r3, #31
 8014c82:	bf48      	it	mi
 8014c84:	f043 0320 	orrmi.w	r3, r3, #32
 8014c88:	6029      	str	r1, [r5, #0]
 8014c8a:	bf48      	it	mi
 8014c8c:	6023      	strmi	r3, [r4, #0]
 8014c8e:	b91e      	cbnz	r6, 8014c98 <_printf_i+0x1a4>
 8014c90:	6823      	ldr	r3, [r4, #0]
 8014c92:	f023 0320 	bic.w	r3, r3, #32
 8014c96:	6023      	str	r3, [r4, #0]
 8014c98:	2310      	movs	r3, #16
 8014c9a:	e7a7      	b.n	8014bec <_printf_i+0xf8>
 8014c9c:	4824      	ldr	r0, [pc, #144]	; (8014d30 <_printf_i+0x23c>)
 8014c9e:	e7e4      	b.n	8014c6a <_printf_i+0x176>
 8014ca0:	4615      	mov	r5, r2
 8014ca2:	e7bd      	b.n	8014c20 <_printf_i+0x12c>
 8014ca4:	682b      	ldr	r3, [r5, #0]
 8014ca6:	6826      	ldr	r6, [r4, #0]
 8014ca8:	6961      	ldr	r1, [r4, #20]
 8014caa:	1d18      	adds	r0, r3, #4
 8014cac:	6028      	str	r0, [r5, #0]
 8014cae:	0635      	lsls	r5, r6, #24
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	d501      	bpl.n	8014cb8 <_printf_i+0x1c4>
 8014cb4:	6019      	str	r1, [r3, #0]
 8014cb6:	e002      	b.n	8014cbe <_printf_i+0x1ca>
 8014cb8:	0670      	lsls	r0, r6, #25
 8014cba:	d5fb      	bpl.n	8014cb4 <_printf_i+0x1c0>
 8014cbc:	8019      	strh	r1, [r3, #0]
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	6123      	str	r3, [r4, #16]
 8014cc2:	4615      	mov	r5, r2
 8014cc4:	e7bc      	b.n	8014c40 <_printf_i+0x14c>
 8014cc6:	682b      	ldr	r3, [r5, #0]
 8014cc8:	1d1a      	adds	r2, r3, #4
 8014cca:	602a      	str	r2, [r5, #0]
 8014ccc:	681d      	ldr	r5, [r3, #0]
 8014cce:	6862      	ldr	r2, [r4, #4]
 8014cd0:	2100      	movs	r1, #0
 8014cd2:	4628      	mov	r0, r5
 8014cd4:	f7eb faa4 	bl	8000220 <memchr>
 8014cd8:	b108      	cbz	r0, 8014cde <_printf_i+0x1ea>
 8014cda:	1b40      	subs	r0, r0, r5
 8014cdc:	6060      	str	r0, [r4, #4]
 8014cde:	6863      	ldr	r3, [r4, #4]
 8014ce0:	6123      	str	r3, [r4, #16]
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ce8:	e7aa      	b.n	8014c40 <_printf_i+0x14c>
 8014cea:	6923      	ldr	r3, [r4, #16]
 8014cec:	462a      	mov	r2, r5
 8014cee:	4649      	mov	r1, r9
 8014cf0:	4640      	mov	r0, r8
 8014cf2:	47d0      	blx	sl
 8014cf4:	3001      	adds	r0, #1
 8014cf6:	d0ad      	beq.n	8014c54 <_printf_i+0x160>
 8014cf8:	6823      	ldr	r3, [r4, #0]
 8014cfa:	079b      	lsls	r3, r3, #30
 8014cfc:	d413      	bmi.n	8014d26 <_printf_i+0x232>
 8014cfe:	68e0      	ldr	r0, [r4, #12]
 8014d00:	9b03      	ldr	r3, [sp, #12]
 8014d02:	4298      	cmp	r0, r3
 8014d04:	bfb8      	it	lt
 8014d06:	4618      	movlt	r0, r3
 8014d08:	e7a6      	b.n	8014c58 <_printf_i+0x164>
 8014d0a:	2301      	movs	r3, #1
 8014d0c:	4632      	mov	r2, r6
 8014d0e:	4649      	mov	r1, r9
 8014d10:	4640      	mov	r0, r8
 8014d12:	47d0      	blx	sl
 8014d14:	3001      	adds	r0, #1
 8014d16:	d09d      	beq.n	8014c54 <_printf_i+0x160>
 8014d18:	3501      	adds	r5, #1
 8014d1a:	68e3      	ldr	r3, [r4, #12]
 8014d1c:	9903      	ldr	r1, [sp, #12]
 8014d1e:	1a5b      	subs	r3, r3, r1
 8014d20:	42ab      	cmp	r3, r5
 8014d22:	dcf2      	bgt.n	8014d0a <_printf_i+0x216>
 8014d24:	e7eb      	b.n	8014cfe <_printf_i+0x20a>
 8014d26:	2500      	movs	r5, #0
 8014d28:	f104 0619 	add.w	r6, r4, #25
 8014d2c:	e7f5      	b.n	8014d1a <_printf_i+0x226>
 8014d2e:	bf00      	nop
 8014d30:	0801c078 	.word	0x0801c078
 8014d34:	0801c089 	.word	0x0801c089

08014d38 <_scanf_float>:
 8014d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d3c:	b087      	sub	sp, #28
 8014d3e:	4617      	mov	r7, r2
 8014d40:	9303      	str	r3, [sp, #12]
 8014d42:	688b      	ldr	r3, [r1, #8]
 8014d44:	1e5a      	subs	r2, r3, #1
 8014d46:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014d4a:	bf83      	ittte	hi
 8014d4c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014d50:	195b      	addhi	r3, r3, r5
 8014d52:	9302      	strhi	r3, [sp, #8]
 8014d54:	2300      	movls	r3, #0
 8014d56:	bf86      	itte	hi
 8014d58:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014d5c:	608b      	strhi	r3, [r1, #8]
 8014d5e:	9302      	strls	r3, [sp, #8]
 8014d60:	680b      	ldr	r3, [r1, #0]
 8014d62:	468b      	mov	fp, r1
 8014d64:	2500      	movs	r5, #0
 8014d66:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8014d6a:	f84b 3b1c 	str.w	r3, [fp], #28
 8014d6e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014d72:	4680      	mov	r8, r0
 8014d74:	460c      	mov	r4, r1
 8014d76:	465e      	mov	r6, fp
 8014d78:	46aa      	mov	sl, r5
 8014d7a:	46a9      	mov	r9, r5
 8014d7c:	9501      	str	r5, [sp, #4]
 8014d7e:	68a2      	ldr	r2, [r4, #8]
 8014d80:	b152      	cbz	r2, 8014d98 <_scanf_float+0x60>
 8014d82:	683b      	ldr	r3, [r7, #0]
 8014d84:	781b      	ldrb	r3, [r3, #0]
 8014d86:	2b4e      	cmp	r3, #78	; 0x4e
 8014d88:	d864      	bhi.n	8014e54 <_scanf_float+0x11c>
 8014d8a:	2b40      	cmp	r3, #64	; 0x40
 8014d8c:	d83c      	bhi.n	8014e08 <_scanf_float+0xd0>
 8014d8e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8014d92:	b2c8      	uxtb	r0, r1
 8014d94:	280e      	cmp	r0, #14
 8014d96:	d93a      	bls.n	8014e0e <_scanf_float+0xd6>
 8014d98:	f1b9 0f00 	cmp.w	r9, #0
 8014d9c:	d003      	beq.n	8014da6 <_scanf_float+0x6e>
 8014d9e:	6823      	ldr	r3, [r4, #0]
 8014da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014da4:	6023      	str	r3, [r4, #0]
 8014da6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014daa:	f1ba 0f01 	cmp.w	sl, #1
 8014dae:	f200 8113 	bhi.w	8014fd8 <_scanf_float+0x2a0>
 8014db2:	455e      	cmp	r6, fp
 8014db4:	f200 8105 	bhi.w	8014fc2 <_scanf_float+0x28a>
 8014db8:	2501      	movs	r5, #1
 8014dba:	4628      	mov	r0, r5
 8014dbc:	b007      	add	sp, #28
 8014dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dc2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8014dc6:	2a0d      	cmp	r2, #13
 8014dc8:	d8e6      	bhi.n	8014d98 <_scanf_float+0x60>
 8014dca:	a101      	add	r1, pc, #4	; (adr r1, 8014dd0 <_scanf_float+0x98>)
 8014dcc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014dd0:	08014f0f 	.word	0x08014f0f
 8014dd4:	08014d99 	.word	0x08014d99
 8014dd8:	08014d99 	.word	0x08014d99
 8014ddc:	08014d99 	.word	0x08014d99
 8014de0:	08014f6f 	.word	0x08014f6f
 8014de4:	08014f47 	.word	0x08014f47
 8014de8:	08014d99 	.word	0x08014d99
 8014dec:	08014d99 	.word	0x08014d99
 8014df0:	08014f1d 	.word	0x08014f1d
 8014df4:	08014d99 	.word	0x08014d99
 8014df8:	08014d99 	.word	0x08014d99
 8014dfc:	08014d99 	.word	0x08014d99
 8014e00:	08014d99 	.word	0x08014d99
 8014e04:	08014ed5 	.word	0x08014ed5
 8014e08:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8014e0c:	e7db      	b.n	8014dc6 <_scanf_float+0x8e>
 8014e0e:	290e      	cmp	r1, #14
 8014e10:	d8c2      	bhi.n	8014d98 <_scanf_float+0x60>
 8014e12:	a001      	add	r0, pc, #4	; (adr r0, 8014e18 <_scanf_float+0xe0>)
 8014e14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014e18:	08014ec7 	.word	0x08014ec7
 8014e1c:	08014d99 	.word	0x08014d99
 8014e20:	08014ec7 	.word	0x08014ec7
 8014e24:	08014f5b 	.word	0x08014f5b
 8014e28:	08014d99 	.word	0x08014d99
 8014e2c:	08014e75 	.word	0x08014e75
 8014e30:	08014eb1 	.word	0x08014eb1
 8014e34:	08014eb1 	.word	0x08014eb1
 8014e38:	08014eb1 	.word	0x08014eb1
 8014e3c:	08014eb1 	.word	0x08014eb1
 8014e40:	08014eb1 	.word	0x08014eb1
 8014e44:	08014eb1 	.word	0x08014eb1
 8014e48:	08014eb1 	.word	0x08014eb1
 8014e4c:	08014eb1 	.word	0x08014eb1
 8014e50:	08014eb1 	.word	0x08014eb1
 8014e54:	2b6e      	cmp	r3, #110	; 0x6e
 8014e56:	d809      	bhi.n	8014e6c <_scanf_float+0x134>
 8014e58:	2b60      	cmp	r3, #96	; 0x60
 8014e5a:	d8b2      	bhi.n	8014dc2 <_scanf_float+0x8a>
 8014e5c:	2b54      	cmp	r3, #84	; 0x54
 8014e5e:	d077      	beq.n	8014f50 <_scanf_float+0x218>
 8014e60:	2b59      	cmp	r3, #89	; 0x59
 8014e62:	d199      	bne.n	8014d98 <_scanf_float+0x60>
 8014e64:	2d07      	cmp	r5, #7
 8014e66:	d197      	bne.n	8014d98 <_scanf_float+0x60>
 8014e68:	2508      	movs	r5, #8
 8014e6a:	e029      	b.n	8014ec0 <_scanf_float+0x188>
 8014e6c:	2b74      	cmp	r3, #116	; 0x74
 8014e6e:	d06f      	beq.n	8014f50 <_scanf_float+0x218>
 8014e70:	2b79      	cmp	r3, #121	; 0x79
 8014e72:	e7f6      	b.n	8014e62 <_scanf_float+0x12a>
 8014e74:	6821      	ldr	r1, [r4, #0]
 8014e76:	05c8      	lsls	r0, r1, #23
 8014e78:	d51a      	bpl.n	8014eb0 <_scanf_float+0x178>
 8014e7a:	9b02      	ldr	r3, [sp, #8]
 8014e7c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014e80:	6021      	str	r1, [r4, #0]
 8014e82:	f109 0901 	add.w	r9, r9, #1
 8014e86:	b11b      	cbz	r3, 8014e90 <_scanf_float+0x158>
 8014e88:	3b01      	subs	r3, #1
 8014e8a:	3201      	adds	r2, #1
 8014e8c:	9302      	str	r3, [sp, #8]
 8014e8e:	60a2      	str	r2, [r4, #8]
 8014e90:	68a3      	ldr	r3, [r4, #8]
 8014e92:	3b01      	subs	r3, #1
 8014e94:	60a3      	str	r3, [r4, #8]
 8014e96:	6923      	ldr	r3, [r4, #16]
 8014e98:	3301      	adds	r3, #1
 8014e9a:	6123      	str	r3, [r4, #16]
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	3b01      	subs	r3, #1
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	607b      	str	r3, [r7, #4]
 8014ea4:	f340 8084 	ble.w	8014fb0 <_scanf_float+0x278>
 8014ea8:	683b      	ldr	r3, [r7, #0]
 8014eaa:	3301      	adds	r3, #1
 8014eac:	603b      	str	r3, [r7, #0]
 8014eae:	e766      	b.n	8014d7e <_scanf_float+0x46>
 8014eb0:	eb1a 0f05 	cmn.w	sl, r5
 8014eb4:	f47f af70 	bne.w	8014d98 <_scanf_float+0x60>
 8014eb8:	6822      	ldr	r2, [r4, #0]
 8014eba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8014ebe:	6022      	str	r2, [r4, #0]
 8014ec0:	f806 3b01 	strb.w	r3, [r6], #1
 8014ec4:	e7e4      	b.n	8014e90 <_scanf_float+0x158>
 8014ec6:	6822      	ldr	r2, [r4, #0]
 8014ec8:	0610      	lsls	r0, r2, #24
 8014eca:	f57f af65 	bpl.w	8014d98 <_scanf_float+0x60>
 8014ece:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014ed2:	e7f4      	b.n	8014ebe <_scanf_float+0x186>
 8014ed4:	f1ba 0f00 	cmp.w	sl, #0
 8014ed8:	d10e      	bne.n	8014ef8 <_scanf_float+0x1c0>
 8014eda:	f1b9 0f00 	cmp.w	r9, #0
 8014ede:	d10e      	bne.n	8014efe <_scanf_float+0x1c6>
 8014ee0:	6822      	ldr	r2, [r4, #0]
 8014ee2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014ee6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014eea:	d108      	bne.n	8014efe <_scanf_float+0x1c6>
 8014eec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014ef0:	6022      	str	r2, [r4, #0]
 8014ef2:	f04f 0a01 	mov.w	sl, #1
 8014ef6:	e7e3      	b.n	8014ec0 <_scanf_float+0x188>
 8014ef8:	f1ba 0f02 	cmp.w	sl, #2
 8014efc:	d055      	beq.n	8014faa <_scanf_float+0x272>
 8014efe:	2d01      	cmp	r5, #1
 8014f00:	d002      	beq.n	8014f08 <_scanf_float+0x1d0>
 8014f02:	2d04      	cmp	r5, #4
 8014f04:	f47f af48 	bne.w	8014d98 <_scanf_float+0x60>
 8014f08:	3501      	adds	r5, #1
 8014f0a:	b2ed      	uxtb	r5, r5
 8014f0c:	e7d8      	b.n	8014ec0 <_scanf_float+0x188>
 8014f0e:	f1ba 0f01 	cmp.w	sl, #1
 8014f12:	f47f af41 	bne.w	8014d98 <_scanf_float+0x60>
 8014f16:	f04f 0a02 	mov.w	sl, #2
 8014f1a:	e7d1      	b.n	8014ec0 <_scanf_float+0x188>
 8014f1c:	b97d      	cbnz	r5, 8014f3e <_scanf_float+0x206>
 8014f1e:	f1b9 0f00 	cmp.w	r9, #0
 8014f22:	f47f af3c 	bne.w	8014d9e <_scanf_float+0x66>
 8014f26:	6822      	ldr	r2, [r4, #0]
 8014f28:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014f2c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014f30:	f47f af39 	bne.w	8014da6 <_scanf_float+0x6e>
 8014f34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014f38:	6022      	str	r2, [r4, #0]
 8014f3a:	2501      	movs	r5, #1
 8014f3c:	e7c0      	b.n	8014ec0 <_scanf_float+0x188>
 8014f3e:	2d03      	cmp	r5, #3
 8014f40:	d0e2      	beq.n	8014f08 <_scanf_float+0x1d0>
 8014f42:	2d05      	cmp	r5, #5
 8014f44:	e7de      	b.n	8014f04 <_scanf_float+0x1cc>
 8014f46:	2d02      	cmp	r5, #2
 8014f48:	f47f af26 	bne.w	8014d98 <_scanf_float+0x60>
 8014f4c:	2503      	movs	r5, #3
 8014f4e:	e7b7      	b.n	8014ec0 <_scanf_float+0x188>
 8014f50:	2d06      	cmp	r5, #6
 8014f52:	f47f af21 	bne.w	8014d98 <_scanf_float+0x60>
 8014f56:	2507      	movs	r5, #7
 8014f58:	e7b2      	b.n	8014ec0 <_scanf_float+0x188>
 8014f5a:	6822      	ldr	r2, [r4, #0]
 8014f5c:	0591      	lsls	r1, r2, #22
 8014f5e:	f57f af1b 	bpl.w	8014d98 <_scanf_float+0x60>
 8014f62:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8014f66:	6022      	str	r2, [r4, #0]
 8014f68:	f8cd 9004 	str.w	r9, [sp, #4]
 8014f6c:	e7a8      	b.n	8014ec0 <_scanf_float+0x188>
 8014f6e:	6822      	ldr	r2, [r4, #0]
 8014f70:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8014f74:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8014f78:	d006      	beq.n	8014f88 <_scanf_float+0x250>
 8014f7a:	0550      	lsls	r0, r2, #21
 8014f7c:	f57f af0c 	bpl.w	8014d98 <_scanf_float+0x60>
 8014f80:	f1b9 0f00 	cmp.w	r9, #0
 8014f84:	f43f af0f 	beq.w	8014da6 <_scanf_float+0x6e>
 8014f88:	0591      	lsls	r1, r2, #22
 8014f8a:	bf58      	it	pl
 8014f8c:	9901      	ldrpl	r1, [sp, #4]
 8014f8e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014f92:	bf58      	it	pl
 8014f94:	eba9 0101 	subpl.w	r1, r9, r1
 8014f98:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8014f9c:	bf58      	it	pl
 8014f9e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014fa2:	6022      	str	r2, [r4, #0]
 8014fa4:	f04f 0900 	mov.w	r9, #0
 8014fa8:	e78a      	b.n	8014ec0 <_scanf_float+0x188>
 8014faa:	f04f 0a03 	mov.w	sl, #3
 8014fae:	e787      	b.n	8014ec0 <_scanf_float+0x188>
 8014fb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014fb4:	4639      	mov	r1, r7
 8014fb6:	4640      	mov	r0, r8
 8014fb8:	4798      	blx	r3
 8014fba:	2800      	cmp	r0, #0
 8014fbc:	f43f aedf 	beq.w	8014d7e <_scanf_float+0x46>
 8014fc0:	e6ea      	b.n	8014d98 <_scanf_float+0x60>
 8014fc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014fc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014fca:	463a      	mov	r2, r7
 8014fcc:	4640      	mov	r0, r8
 8014fce:	4798      	blx	r3
 8014fd0:	6923      	ldr	r3, [r4, #16]
 8014fd2:	3b01      	subs	r3, #1
 8014fd4:	6123      	str	r3, [r4, #16]
 8014fd6:	e6ec      	b.n	8014db2 <_scanf_float+0x7a>
 8014fd8:	1e6b      	subs	r3, r5, #1
 8014fda:	2b06      	cmp	r3, #6
 8014fdc:	d825      	bhi.n	801502a <_scanf_float+0x2f2>
 8014fde:	2d02      	cmp	r5, #2
 8014fe0:	d836      	bhi.n	8015050 <_scanf_float+0x318>
 8014fe2:	455e      	cmp	r6, fp
 8014fe4:	f67f aee8 	bls.w	8014db8 <_scanf_float+0x80>
 8014fe8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014fec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014ff0:	463a      	mov	r2, r7
 8014ff2:	4640      	mov	r0, r8
 8014ff4:	4798      	blx	r3
 8014ff6:	6923      	ldr	r3, [r4, #16]
 8014ff8:	3b01      	subs	r3, #1
 8014ffa:	6123      	str	r3, [r4, #16]
 8014ffc:	e7f1      	b.n	8014fe2 <_scanf_float+0x2aa>
 8014ffe:	9802      	ldr	r0, [sp, #8]
 8015000:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015004:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8015008:	9002      	str	r0, [sp, #8]
 801500a:	463a      	mov	r2, r7
 801500c:	4640      	mov	r0, r8
 801500e:	4798      	blx	r3
 8015010:	6923      	ldr	r3, [r4, #16]
 8015012:	3b01      	subs	r3, #1
 8015014:	6123      	str	r3, [r4, #16]
 8015016:	f10a 3aff 	add.w	sl, sl, #4294967295
 801501a:	fa5f fa8a 	uxtb.w	sl, sl
 801501e:	f1ba 0f02 	cmp.w	sl, #2
 8015022:	d1ec      	bne.n	8014ffe <_scanf_float+0x2c6>
 8015024:	3d03      	subs	r5, #3
 8015026:	b2ed      	uxtb	r5, r5
 8015028:	1b76      	subs	r6, r6, r5
 801502a:	6823      	ldr	r3, [r4, #0]
 801502c:	05da      	lsls	r2, r3, #23
 801502e:	d52f      	bpl.n	8015090 <_scanf_float+0x358>
 8015030:	055b      	lsls	r3, r3, #21
 8015032:	d510      	bpl.n	8015056 <_scanf_float+0x31e>
 8015034:	455e      	cmp	r6, fp
 8015036:	f67f aebf 	bls.w	8014db8 <_scanf_float+0x80>
 801503a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801503e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015042:	463a      	mov	r2, r7
 8015044:	4640      	mov	r0, r8
 8015046:	4798      	blx	r3
 8015048:	6923      	ldr	r3, [r4, #16]
 801504a:	3b01      	subs	r3, #1
 801504c:	6123      	str	r3, [r4, #16]
 801504e:	e7f1      	b.n	8015034 <_scanf_float+0x2fc>
 8015050:	46aa      	mov	sl, r5
 8015052:	9602      	str	r6, [sp, #8]
 8015054:	e7df      	b.n	8015016 <_scanf_float+0x2de>
 8015056:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801505a:	6923      	ldr	r3, [r4, #16]
 801505c:	2965      	cmp	r1, #101	; 0x65
 801505e:	f103 33ff 	add.w	r3, r3, #4294967295
 8015062:	f106 35ff 	add.w	r5, r6, #4294967295
 8015066:	6123      	str	r3, [r4, #16]
 8015068:	d00c      	beq.n	8015084 <_scanf_float+0x34c>
 801506a:	2945      	cmp	r1, #69	; 0x45
 801506c:	d00a      	beq.n	8015084 <_scanf_float+0x34c>
 801506e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015072:	463a      	mov	r2, r7
 8015074:	4640      	mov	r0, r8
 8015076:	4798      	blx	r3
 8015078:	6923      	ldr	r3, [r4, #16]
 801507a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801507e:	3b01      	subs	r3, #1
 8015080:	1eb5      	subs	r5, r6, #2
 8015082:	6123      	str	r3, [r4, #16]
 8015084:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015088:	463a      	mov	r2, r7
 801508a:	4640      	mov	r0, r8
 801508c:	4798      	blx	r3
 801508e:	462e      	mov	r6, r5
 8015090:	6825      	ldr	r5, [r4, #0]
 8015092:	f015 0510 	ands.w	r5, r5, #16
 8015096:	d158      	bne.n	801514a <_scanf_float+0x412>
 8015098:	7035      	strb	r5, [r6, #0]
 801509a:	6823      	ldr	r3, [r4, #0]
 801509c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80150a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80150a4:	d11c      	bne.n	80150e0 <_scanf_float+0x3a8>
 80150a6:	9b01      	ldr	r3, [sp, #4]
 80150a8:	454b      	cmp	r3, r9
 80150aa:	eba3 0209 	sub.w	r2, r3, r9
 80150ae:	d124      	bne.n	80150fa <_scanf_float+0x3c2>
 80150b0:	2200      	movs	r2, #0
 80150b2:	4659      	mov	r1, fp
 80150b4:	4640      	mov	r0, r8
 80150b6:	f002 fcd3 	bl	8017a60 <_strtod_r>
 80150ba:	9b03      	ldr	r3, [sp, #12]
 80150bc:	6821      	ldr	r1, [r4, #0]
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	f011 0f02 	tst.w	r1, #2
 80150c4:	ec57 6b10 	vmov	r6, r7, d0
 80150c8:	f103 0204 	add.w	r2, r3, #4
 80150cc:	d020      	beq.n	8015110 <_scanf_float+0x3d8>
 80150ce:	9903      	ldr	r1, [sp, #12]
 80150d0:	600a      	str	r2, [r1, #0]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	e9c3 6700 	strd	r6, r7, [r3]
 80150d8:	68e3      	ldr	r3, [r4, #12]
 80150da:	3301      	adds	r3, #1
 80150dc:	60e3      	str	r3, [r4, #12]
 80150de:	e66c      	b.n	8014dba <_scanf_float+0x82>
 80150e0:	9b04      	ldr	r3, [sp, #16]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d0e4      	beq.n	80150b0 <_scanf_float+0x378>
 80150e6:	9905      	ldr	r1, [sp, #20]
 80150e8:	230a      	movs	r3, #10
 80150ea:	462a      	mov	r2, r5
 80150ec:	3101      	adds	r1, #1
 80150ee:	4640      	mov	r0, r8
 80150f0:	f002 fd3e 	bl	8017b70 <_strtol_r>
 80150f4:	9b04      	ldr	r3, [sp, #16]
 80150f6:	9e05      	ldr	r6, [sp, #20]
 80150f8:	1ac2      	subs	r2, r0, r3
 80150fa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80150fe:	429e      	cmp	r6, r3
 8015100:	bf28      	it	cs
 8015102:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8015106:	4912      	ldr	r1, [pc, #72]	; (8015150 <_scanf_float+0x418>)
 8015108:	4630      	mov	r0, r6
 801510a:	f000 f8e7 	bl	80152dc <siprintf>
 801510e:	e7cf      	b.n	80150b0 <_scanf_float+0x378>
 8015110:	f011 0f04 	tst.w	r1, #4
 8015114:	9903      	ldr	r1, [sp, #12]
 8015116:	600a      	str	r2, [r1, #0]
 8015118:	d1db      	bne.n	80150d2 <_scanf_float+0x39a>
 801511a:	f8d3 8000 	ldr.w	r8, [r3]
 801511e:	ee10 2a10 	vmov	r2, s0
 8015122:	ee10 0a10 	vmov	r0, s0
 8015126:	463b      	mov	r3, r7
 8015128:	4639      	mov	r1, r7
 801512a:	f7eb fd27 	bl	8000b7c <__aeabi_dcmpun>
 801512e:	b128      	cbz	r0, 801513c <_scanf_float+0x404>
 8015130:	4808      	ldr	r0, [pc, #32]	; (8015154 <_scanf_float+0x41c>)
 8015132:	f000 fa5b 	bl	80155ec <nanf>
 8015136:	ed88 0a00 	vstr	s0, [r8]
 801513a:	e7cd      	b.n	80150d8 <_scanf_float+0x3a0>
 801513c:	4630      	mov	r0, r6
 801513e:	4639      	mov	r1, r7
 8015140:	f7eb fd7a 	bl	8000c38 <__aeabi_d2f>
 8015144:	f8c8 0000 	str.w	r0, [r8]
 8015148:	e7c6      	b.n	80150d8 <_scanf_float+0x3a0>
 801514a:	2500      	movs	r5, #0
 801514c:	e635      	b.n	8014dba <_scanf_float+0x82>
 801514e:	bf00      	nop
 8015150:	0801c09a 	.word	0x0801c09a
 8015154:	0801c448 	.word	0x0801c448

08015158 <std>:
 8015158:	2300      	movs	r3, #0
 801515a:	b510      	push	{r4, lr}
 801515c:	4604      	mov	r4, r0
 801515e:	e9c0 3300 	strd	r3, r3, [r0]
 8015162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015166:	6083      	str	r3, [r0, #8]
 8015168:	8181      	strh	r1, [r0, #12]
 801516a:	6643      	str	r3, [r0, #100]	; 0x64
 801516c:	81c2      	strh	r2, [r0, #14]
 801516e:	6183      	str	r3, [r0, #24]
 8015170:	4619      	mov	r1, r3
 8015172:	2208      	movs	r2, #8
 8015174:	305c      	adds	r0, #92	; 0x5c
 8015176:	f000 f942 	bl	80153fe <memset>
 801517a:	4b0d      	ldr	r3, [pc, #52]	; (80151b0 <std+0x58>)
 801517c:	6263      	str	r3, [r4, #36]	; 0x24
 801517e:	4b0d      	ldr	r3, [pc, #52]	; (80151b4 <std+0x5c>)
 8015180:	62a3      	str	r3, [r4, #40]	; 0x28
 8015182:	4b0d      	ldr	r3, [pc, #52]	; (80151b8 <std+0x60>)
 8015184:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015186:	4b0d      	ldr	r3, [pc, #52]	; (80151bc <std+0x64>)
 8015188:	6323      	str	r3, [r4, #48]	; 0x30
 801518a:	4b0d      	ldr	r3, [pc, #52]	; (80151c0 <std+0x68>)
 801518c:	6224      	str	r4, [r4, #32]
 801518e:	429c      	cmp	r4, r3
 8015190:	d006      	beq.n	80151a0 <std+0x48>
 8015192:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8015196:	4294      	cmp	r4, r2
 8015198:	d002      	beq.n	80151a0 <std+0x48>
 801519a:	33d0      	adds	r3, #208	; 0xd0
 801519c:	429c      	cmp	r4, r3
 801519e:	d105      	bne.n	80151ac <std+0x54>
 80151a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80151a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151a8:	f000 ba0e 	b.w	80155c8 <__retarget_lock_init_recursive>
 80151ac:	bd10      	pop	{r4, pc}
 80151ae:	bf00      	nop
 80151b0:	08015375 	.word	0x08015375
 80151b4:	0801539b 	.word	0x0801539b
 80151b8:	080153d3 	.word	0x080153d3
 80151bc:	080153f7 	.word	0x080153f7
 80151c0:	20008f0c 	.word	0x20008f0c

080151c4 <stdio_exit_handler>:
 80151c4:	4a02      	ldr	r2, [pc, #8]	; (80151d0 <stdio_exit_handler+0xc>)
 80151c6:	4903      	ldr	r1, [pc, #12]	; (80151d4 <stdio_exit_handler+0x10>)
 80151c8:	4803      	ldr	r0, [pc, #12]	; (80151d8 <stdio_exit_handler+0x14>)
 80151ca:	f000 b869 	b.w	80152a0 <_fwalk_sglue>
 80151ce:	bf00      	nop
 80151d0:	20000018 	.word	0x20000018
 80151d4:	08018571 	.word	0x08018571
 80151d8:	20000024 	.word	0x20000024

080151dc <cleanup_stdio>:
 80151dc:	6841      	ldr	r1, [r0, #4]
 80151de:	4b0c      	ldr	r3, [pc, #48]	; (8015210 <cleanup_stdio+0x34>)
 80151e0:	4299      	cmp	r1, r3
 80151e2:	b510      	push	{r4, lr}
 80151e4:	4604      	mov	r4, r0
 80151e6:	d001      	beq.n	80151ec <cleanup_stdio+0x10>
 80151e8:	f003 f9c2 	bl	8018570 <_fflush_r>
 80151ec:	68a1      	ldr	r1, [r4, #8]
 80151ee:	4b09      	ldr	r3, [pc, #36]	; (8015214 <cleanup_stdio+0x38>)
 80151f0:	4299      	cmp	r1, r3
 80151f2:	d002      	beq.n	80151fa <cleanup_stdio+0x1e>
 80151f4:	4620      	mov	r0, r4
 80151f6:	f003 f9bb 	bl	8018570 <_fflush_r>
 80151fa:	68e1      	ldr	r1, [r4, #12]
 80151fc:	4b06      	ldr	r3, [pc, #24]	; (8015218 <cleanup_stdio+0x3c>)
 80151fe:	4299      	cmp	r1, r3
 8015200:	d004      	beq.n	801520c <cleanup_stdio+0x30>
 8015202:	4620      	mov	r0, r4
 8015204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015208:	f003 b9b2 	b.w	8018570 <_fflush_r>
 801520c:	bd10      	pop	{r4, pc}
 801520e:	bf00      	nop
 8015210:	20008f0c 	.word	0x20008f0c
 8015214:	20008f74 	.word	0x20008f74
 8015218:	20008fdc 	.word	0x20008fdc

0801521c <global_stdio_init.part.0>:
 801521c:	b510      	push	{r4, lr}
 801521e:	4b0b      	ldr	r3, [pc, #44]	; (801524c <global_stdio_init.part.0+0x30>)
 8015220:	4c0b      	ldr	r4, [pc, #44]	; (8015250 <global_stdio_init.part.0+0x34>)
 8015222:	4a0c      	ldr	r2, [pc, #48]	; (8015254 <global_stdio_init.part.0+0x38>)
 8015224:	601a      	str	r2, [r3, #0]
 8015226:	4620      	mov	r0, r4
 8015228:	2200      	movs	r2, #0
 801522a:	2104      	movs	r1, #4
 801522c:	f7ff ff94 	bl	8015158 <std>
 8015230:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015234:	2201      	movs	r2, #1
 8015236:	2109      	movs	r1, #9
 8015238:	f7ff ff8e 	bl	8015158 <std>
 801523c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8015240:	2202      	movs	r2, #2
 8015242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015246:	2112      	movs	r1, #18
 8015248:	f7ff bf86 	b.w	8015158 <std>
 801524c:	20009044 	.word	0x20009044
 8015250:	20008f0c 	.word	0x20008f0c
 8015254:	080151c5 	.word	0x080151c5

08015258 <__sfp_lock_acquire>:
 8015258:	4801      	ldr	r0, [pc, #4]	; (8015260 <__sfp_lock_acquire+0x8>)
 801525a:	f000 b9b6 	b.w	80155ca <__retarget_lock_acquire_recursive>
 801525e:	bf00      	nop
 8015260:	2000904d 	.word	0x2000904d

08015264 <__sfp_lock_release>:
 8015264:	4801      	ldr	r0, [pc, #4]	; (801526c <__sfp_lock_release+0x8>)
 8015266:	f000 b9b1 	b.w	80155cc <__retarget_lock_release_recursive>
 801526a:	bf00      	nop
 801526c:	2000904d 	.word	0x2000904d

08015270 <__sinit>:
 8015270:	b510      	push	{r4, lr}
 8015272:	4604      	mov	r4, r0
 8015274:	f7ff fff0 	bl	8015258 <__sfp_lock_acquire>
 8015278:	6a23      	ldr	r3, [r4, #32]
 801527a:	b11b      	cbz	r3, 8015284 <__sinit+0x14>
 801527c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015280:	f7ff bff0 	b.w	8015264 <__sfp_lock_release>
 8015284:	4b04      	ldr	r3, [pc, #16]	; (8015298 <__sinit+0x28>)
 8015286:	6223      	str	r3, [r4, #32]
 8015288:	4b04      	ldr	r3, [pc, #16]	; (801529c <__sinit+0x2c>)
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d1f5      	bne.n	801527c <__sinit+0xc>
 8015290:	f7ff ffc4 	bl	801521c <global_stdio_init.part.0>
 8015294:	e7f2      	b.n	801527c <__sinit+0xc>
 8015296:	bf00      	nop
 8015298:	080151dd 	.word	0x080151dd
 801529c:	20009044 	.word	0x20009044

080152a0 <_fwalk_sglue>:
 80152a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152a4:	4607      	mov	r7, r0
 80152a6:	4688      	mov	r8, r1
 80152a8:	4614      	mov	r4, r2
 80152aa:	2600      	movs	r6, #0
 80152ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80152b0:	f1b9 0901 	subs.w	r9, r9, #1
 80152b4:	d505      	bpl.n	80152c2 <_fwalk_sglue+0x22>
 80152b6:	6824      	ldr	r4, [r4, #0]
 80152b8:	2c00      	cmp	r4, #0
 80152ba:	d1f7      	bne.n	80152ac <_fwalk_sglue+0xc>
 80152bc:	4630      	mov	r0, r6
 80152be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80152c2:	89ab      	ldrh	r3, [r5, #12]
 80152c4:	2b01      	cmp	r3, #1
 80152c6:	d907      	bls.n	80152d8 <_fwalk_sglue+0x38>
 80152c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80152cc:	3301      	adds	r3, #1
 80152ce:	d003      	beq.n	80152d8 <_fwalk_sglue+0x38>
 80152d0:	4629      	mov	r1, r5
 80152d2:	4638      	mov	r0, r7
 80152d4:	47c0      	blx	r8
 80152d6:	4306      	orrs	r6, r0
 80152d8:	3568      	adds	r5, #104	; 0x68
 80152da:	e7e9      	b.n	80152b0 <_fwalk_sglue+0x10>

080152dc <siprintf>:
 80152dc:	b40e      	push	{r1, r2, r3}
 80152de:	b500      	push	{lr}
 80152e0:	b09c      	sub	sp, #112	; 0x70
 80152e2:	ab1d      	add	r3, sp, #116	; 0x74
 80152e4:	9002      	str	r0, [sp, #8]
 80152e6:	9006      	str	r0, [sp, #24]
 80152e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80152ec:	4809      	ldr	r0, [pc, #36]	; (8015314 <siprintf+0x38>)
 80152ee:	9107      	str	r1, [sp, #28]
 80152f0:	9104      	str	r1, [sp, #16]
 80152f2:	4909      	ldr	r1, [pc, #36]	; (8015318 <siprintf+0x3c>)
 80152f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80152f8:	9105      	str	r1, [sp, #20]
 80152fa:	6800      	ldr	r0, [r0, #0]
 80152fc:	9301      	str	r3, [sp, #4]
 80152fe:	a902      	add	r1, sp, #8
 8015300:	f002 fc92 	bl	8017c28 <_svfiprintf_r>
 8015304:	9b02      	ldr	r3, [sp, #8]
 8015306:	2200      	movs	r2, #0
 8015308:	701a      	strb	r2, [r3, #0]
 801530a:	b01c      	add	sp, #112	; 0x70
 801530c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015310:	b003      	add	sp, #12
 8015312:	4770      	bx	lr
 8015314:	20000070 	.word	0x20000070
 8015318:	ffff0208 	.word	0xffff0208

0801531c <siscanf>:
 801531c:	b40e      	push	{r1, r2, r3}
 801531e:	b510      	push	{r4, lr}
 8015320:	b09f      	sub	sp, #124	; 0x7c
 8015322:	ac21      	add	r4, sp, #132	; 0x84
 8015324:	f44f 7101 	mov.w	r1, #516	; 0x204
 8015328:	f854 2b04 	ldr.w	r2, [r4], #4
 801532c:	9201      	str	r2, [sp, #4]
 801532e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015332:	9004      	str	r0, [sp, #16]
 8015334:	9008      	str	r0, [sp, #32]
 8015336:	f7ea ffc3 	bl	80002c0 <strlen>
 801533a:	4b0c      	ldr	r3, [pc, #48]	; (801536c <siscanf+0x50>)
 801533c:	9005      	str	r0, [sp, #20]
 801533e:	9009      	str	r0, [sp, #36]	; 0x24
 8015340:	930d      	str	r3, [sp, #52]	; 0x34
 8015342:	480b      	ldr	r0, [pc, #44]	; (8015370 <siscanf+0x54>)
 8015344:	9a01      	ldr	r2, [sp, #4]
 8015346:	6800      	ldr	r0, [r0, #0]
 8015348:	9403      	str	r4, [sp, #12]
 801534a:	2300      	movs	r3, #0
 801534c:	9311      	str	r3, [sp, #68]	; 0x44
 801534e:	9316      	str	r3, [sp, #88]	; 0x58
 8015350:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015354:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015358:	a904      	add	r1, sp, #16
 801535a:	4623      	mov	r3, r4
 801535c:	f002 fdbc 	bl	8017ed8 <__ssvfiscanf_r>
 8015360:	b01f      	add	sp, #124	; 0x7c
 8015362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015366:	b003      	add	sp, #12
 8015368:	4770      	bx	lr
 801536a:	bf00      	nop
 801536c:	08015397 	.word	0x08015397
 8015370:	20000070 	.word	0x20000070

08015374 <__sread>:
 8015374:	b510      	push	{r4, lr}
 8015376:	460c      	mov	r4, r1
 8015378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801537c:	f000 f8d6 	bl	801552c <_read_r>
 8015380:	2800      	cmp	r0, #0
 8015382:	bfab      	itete	ge
 8015384:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015386:	89a3      	ldrhlt	r3, [r4, #12]
 8015388:	181b      	addge	r3, r3, r0
 801538a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801538e:	bfac      	ite	ge
 8015390:	6563      	strge	r3, [r4, #84]	; 0x54
 8015392:	81a3      	strhlt	r3, [r4, #12]
 8015394:	bd10      	pop	{r4, pc}

08015396 <__seofread>:
 8015396:	2000      	movs	r0, #0
 8015398:	4770      	bx	lr

0801539a <__swrite>:
 801539a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801539e:	461f      	mov	r7, r3
 80153a0:	898b      	ldrh	r3, [r1, #12]
 80153a2:	05db      	lsls	r3, r3, #23
 80153a4:	4605      	mov	r5, r0
 80153a6:	460c      	mov	r4, r1
 80153a8:	4616      	mov	r6, r2
 80153aa:	d505      	bpl.n	80153b8 <__swrite+0x1e>
 80153ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153b0:	2302      	movs	r3, #2
 80153b2:	2200      	movs	r2, #0
 80153b4:	f000 f8a8 	bl	8015508 <_lseek_r>
 80153b8:	89a3      	ldrh	r3, [r4, #12]
 80153ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80153be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80153c2:	81a3      	strh	r3, [r4, #12]
 80153c4:	4632      	mov	r2, r6
 80153c6:	463b      	mov	r3, r7
 80153c8:	4628      	mov	r0, r5
 80153ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80153ce:	f000 b8bf 	b.w	8015550 <_write_r>

080153d2 <__sseek>:
 80153d2:	b510      	push	{r4, lr}
 80153d4:	460c      	mov	r4, r1
 80153d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153da:	f000 f895 	bl	8015508 <_lseek_r>
 80153de:	1c43      	adds	r3, r0, #1
 80153e0:	89a3      	ldrh	r3, [r4, #12]
 80153e2:	bf15      	itete	ne
 80153e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80153e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80153ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80153ee:	81a3      	strheq	r3, [r4, #12]
 80153f0:	bf18      	it	ne
 80153f2:	81a3      	strhne	r3, [r4, #12]
 80153f4:	bd10      	pop	{r4, pc}

080153f6 <__sclose>:
 80153f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153fa:	f000 b81f 	b.w	801543c <_close_r>

080153fe <memset>:
 80153fe:	4402      	add	r2, r0
 8015400:	4603      	mov	r3, r0
 8015402:	4293      	cmp	r3, r2
 8015404:	d100      	bne.n	8015408 <memset+0xa>
 8015406:	4770      	bx	lr
 8015408:	f803 1b01 	strb.w	r1, [r3], #1
 801540c:	e7f9      	b.n	8015402 <memset+0x4>

0801540e <strncmp>:
 801540e:	b510      	push	{r4, lr}
 8015410:	b16a      	cbz	r2, 801542e <strncmp+0x20>
 8015412:	3901      	subs	r1, #1
 8015414:	1884      	adds	r4, r0, r2
 8015416:	f810 2b01 	ldrb.w	r2, [r0], #1
 801541a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801541e:	429a      	cmp	r2, r3
 8015420:	d103      	bne.n	801542a <strncmp+0x1c>
 8015422:	42a0      	cmp	r0, r4
 8015424:	d001      	beq.n	801542a <strncmp+0x1c>
 8015426:	2a00      	cmp	r2, #0
 8015428:	d1f5      	bne.n	8015416 <strncmp+0x8>
 801542a:	1ad0      	subs	r0, r2, r3
 801542c:	bd10      	pop	{r4, pc}
 801542e:	4610      	mov	r0, r2
 8015430:	e7fc      	b.n	801542c <strncmp+0x1e>
	...

08015434 <_localeconv_r>:
 8015434:	4800      	ldr	r0, [pc, #0]	; (8015438 <_localeconv_r+0x4>)
 8015436:	4770      	bx	lr
 8015438:	20000164 	.word	0x20000164

0801543c <_close_r>:
 801543c:	b538      	push	{r3, r4, r5, lr}
 801543e:	4d06      	ldr	r5, [pc, #24]	; (8015458 <_close_r+0x1c>)
 8015440:	2300      	movs	r3, #0
 8015442:	4604      	mov	r4, r0
 8015444:	4608      	mov	r0, r1
 8015446:	602b      	str	r3, [r5, #0]
 8015448:	f7f1 fc15 	bl	8006c76 <_close>
 801544c:	1c43      	adds	r3, r0, #1
 801544e:	d102      	bne.n	8015456 <_close_r+0x1a>
 8015450:	682b      	ldr	r3, [r5, #0]
 8015452:	b103      	cbz	r3, 8015456 <_close_r+0x1a>
 8015454:	6023      	str	r3, [r4, #0]
 8015456:	bd38      	pop	{r3, r4, r5, pc}
 8015458:	20009048 	.word	0x20009048

0801545c <_reclaim_reent>:
 801545c:	4b29      	ldr	r3, [pc, #164]	; (8015504 <_reclaim_reent+0xa8>)
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	4283      	cmp	r3, r0
 8015462:	b570      	push	{r4, r5, r6, lr}
 8015464:	4604      	mov	r4, r0
 8015466:	d04b      	beq.n	8015500 <_reclaim_reent+0xa4>
 8015468:	69c3      	ldr	r3, [r0, #28]
 801546a:	b143      	cbz	r3, 801547e <_reclaim_reent+0x22>
 801546c:	68db      	ldr	r3, [r3, #12]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d144      	bne.n	80154fc <_reclaim_reent+0xa0>
 8015472:	69e3      	ldr	r3, [r4, #28]
 8015474:	6819      	ldr	r1, [r3, #0]
 8015476:	b111      	cbz	r1, 801547e <_reclaim_reent+0x22>
 8015478:	4620      	mov	r0, r4
 801547a:	f000 ff37 	bl	80162ec <_free_r>
 801547e:	6961      	ldr	r1, [r4, #20]
 8015480:	b111      	cbz	r1, 8015488 <_reclaim_reent+0x2c>
 8015482:	4620      	mov	r0, r4
 8015484:	f000 ff32 	bl	80162ec <_free_r>
 8015488:	69e1      	ldr	r1, [r4, #28]
 801548a:	b111      	cbz	r1, 8015492 <_reclaim_reent+0x36>
 801548c:	4620      	mov	r0, r4
 801548e:	f000 ff2d 	bl	80162ec <_free_r>
 8015492:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015494:	b111      	cbz	r1, 801549c <_reclaim_reent+0x40>
 8015496:	4620      	mov	r0, r4
 8015498:	f000 ff28 	bl	80162ec <_free_r>
 801549c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801549e:	b111      	cbz	r1, 80154a6 <_reclaim_reent+0x4a>
 80154a0:	4620      	mov	r0, r4
 80154a2:	f000 ff23 	bl	80162ec <_free_r>
 80154a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80154a8:	b111      	cbz	r1, 80154b0 <_reclaim_reent+0x54>
 80154aa:	4620      	mov	r0, r4
 80154ac:	f000 ff1e 	bl	80162ec <_free_r>
 80154b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80154b2:	b111      	cbz	r1, 80154ba <_reclaim_reent+0x5e>
 80154b4:	4620      	mov	r0, r4
 80154b6:	f000 ff19 	bl	80162ec <_free_r>
 80154ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80154bc:	b111      	cbz	r1, 80154c4 <_reclaim_reent+0x68>
 80154be:	4620      	mov	r0, r4
 80154c0:	f000 ff14 	bl	80162ec <_free_r>
 80154c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80154c6:	b111      	cbz	r1, 80154ce <_reclaim_reent+0x72>
 80154c8:	4620      	mov	r0, r4
 80154ca:	f000 ff0f 	bl	80162ec <_free_r>
 80154ce:	6a23      	ldr	r3, [r4, #32]
 80154d0:	b1b3      	cbz	r3, 8015500 <_reclaim_reent+0xa4>
 80154d2:	4620      	mov	r0, r4
 80154d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154d8:	4718      	bx	r3
 80154da:	5949      	ldr	r1, [r1, r5]
 80154dc:	b941      	cbnz	r1, 80154f0 <_reclaim_reent+0x94>
 80154de:	3504      	adds	r5, #4
 80154e0:	69e3      	ldr	r3, [r4, #28]
 80154e2:	2d80      	cmp	r5, #128	; 0x80
 80154e4:	68d9      	ldr	r1, [r3, #12]
 80154e6:	d1f8      	bne.n	80154da <_reclaim_reent+0x7e>
 80154e8:	4620      	mov	r0, r4
 80154ea:	f000 feff 	bl	80162ec <_free_r>
 80154ee:	e7c0      	b.n	8015472 <_reclaim_reent+0x16>
 80154f0:	680e      	ldr	r6, [r1, #0]
 80154f2:	4620      	mov	r0, r4
 80154f4:	f000 fefa 	bl	80162ec <_free_r>
 80154f8:	4631      	mov	r1, r6
 80154fa:	e7ef      	b.n	80154dc <_reclaim_reent+0x80>
 80154fc:	2500      	movs	r5, #0
 80154fe:	e7ef      	b.n	80154e0 <_reclaim_reent+0x84>
 8015500:	bd70      	pop	{r4, r5, r6, pc}
 8015502:	bf00      	nop
 8015504:	20000070 	.word	0x20000070

08015508 <_lseek_r>:
 8015508:	b538      	push	{r3, r4, r5, lr}
 801550a:	4d07      	ldr	r5, [pc, #28]	; (8015528 <_lseek_r+0x20>)
 801550c:	4604      	mov	r4, r0
 801550e:	4608      	mov	r0, r1
 8015510:	4611      	mov	r1, r2
 8015512:	2200      	movs	r2, #0
 8015514:	602a      	str	r2, [r5, #0]
 8015516:	461a      	mov	r2, r3
 8015518:	f7f1 fbd4 	bl	8006cc4 <_lseek>
 801551c:	1c43      	adds	r3, r0, #1
 801551e:	d102      	bne.n	8015526 <_lseek_r+0x1e>
 8015520:	682b      	ldr	r3, [r5, #0]
 8015522:	b103      	cbz	r3, 8015526 <_lseek_r+0x1e>
 8015524:	6023      	str	r3, [r4, #0]
 8015526:	bd38      	pop	{r3, r4, r5, pc}
 8015528:	20009048 	.word	0x20009048

0801552c <_read_r>:
 801552c:	b538      	push	{r3, r4, r5, lr}
 801552e:	4d07      	ldr	r5, [pc, #28]	; (801554c <_read_r+0x20>)
 8015530:	4604      	mov	r4, r0
 8015532:	4608      	mov	r0, r1
 8015534:	4611      	mov	r1, r2
 8015536:	2200      	movs	r2, #0
 8015538:	602a      	str	r2, [r5, #0]
 801553a:	461a      	mov	r2, r3
 801553c:	f7f1 fb62 	bl	8006c04 <_read>
 8015540:	1c43      	adds	r3, r0, #1
 8015542:	d102      	bne.n	801554a <_read_r+0x1e>
 8015544:	682b      	ldr	r3, [r5, #0]
 8015546:	b103      	cbz	r3, 801554a <_read_r+0x1e>
 8015548:	6023      	str	r3, [r4, #0]
 801554a:	bd38      	pop	{r3, r4, r5, pc}
 801554c:	20009048 	.word	0x20009048

08015550 <_write_r>:
 8015550:	b538      	push	{r3, r4, r5, lr}
 8015552:	4d07      	ldr	r5, [pc, #28]	; (8015570 <_write_r+0x20>)
 8015554:	4604      	mov	r4, r0
 8015556:	4608      	mov	r0, r1
 8015558:	4611      	mov	r1, r2
 801555a:	2200      	movs	r2, #0
 801555c:	602a      	str	r2, [r5, #0]
 801555e:	461a      	mov	r2, r3
 8015560:	f7f1 fb6d 	bl	8006c3e <_write>
 8015564:	1c43      	adds	r3, r0, #1
 8015566:	d102      	bne.n	801556e <_write_r+0x1e>
 8015568:	682b      	ldr	r3, [r5, #0]
 801556a:	b103      	cbz	r3, 801556e <_write_r+0x1e>
 801556c:	6023      	str	r3, [r4, #0]
 801556e:	bd38      	pop	{r3, r4, r5, pc}
 8015570:	20009048 	.word	0x20009048

08015574 <__errno>:
 8015574:	4b01      	ldr	r3, [pc, #4]	; (801557c <__errno+0x8>)
 8015576:	6818      	ldr	r0, [r3, #0]
 8015578:	4770      	bx	lr
 801557a:	bf00      	nop
 801557c:	20000070 	.word	0x20000070

08015580 <__libc_init_array>:
 8015580:	b570      	push	{r4, r5, r6, lr}
 8015582:	4d0d      	ldr	r5, [pc, #52]	; (80155b8 <__libc_init_array+0x38>)
 8015584:	4c0d      	ldr	r4, [pc, #52]	; (80155bc <__libc_init_array+0x3c>)
 8015586:	1b64      	subs	r4, r4, r5
 8015588:	10a4      	asrs	r4, r4, #2
 801558a:	2600      	movs	r6, #0
 801558c:	42a6      	cmp	r6, r4
 801558e:	d109      	bne.n	80155a4 <__libc_init_array+0x24>
 8015590:	4d0b      	ldr	r5, [pc, #44]	; (80155c0 <__libc_init_array+0x40>)
 8015592:	4c0c      	ldr	r4, [pc, #48]	; (80155c4 <__libc_init_array+0x44>)
 8015594:	f006 fa62 	bl	801ba5c <_init>
 8015598:	1b64      	subs	r4, r4, r5
 801559a:	10a4      	asrs	r4, r4, #2
 801559c:	2600      	movs	r6, #0
 801559e:	42a6      	cmp	r6, r4
 80155a0:	d105      	bne.n	80155ae <__libc_init_array+0x2e>
 80155a2:	bd70      	pop	{r4, r5, r6, pc}
 80155a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80155a8:	4798      	blx	r3
 80155aa:	3601      	adds	r6, #1
 80155ac:	e7ee      	b.n	801558c <__libc_init_array+0xc>
 80155ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80155b2:	4798      	blx	r3
 80155b4:	3601      	adds	r6, #1
 80155b6:	e7f2      	b.n	801559e <__libc_init_array+0x1e>
 80155b8:	0801c908 	.word	0x0801c908
 80155bc:	0801c908 	.word	0x0801c908
 80155c0:	0801c908 	.word	0x0801c908
 80155c4:	0801c90c 	.word	0x0801c90c

080155c8 <__retarget_lock_init_recursive>:
 80155c8:	4770      	bx	lr

080155ca <__retarget_lock_acquire_recursive>:
 80155ca:	4770      	bx	lr

080155cc <__retarget_lock_release_recursive>:
 80155cc:	4770      	bx	lr

080155ce <memcpy>:
 80155ce:	440a      	add	r2, r1
 80155d0:	4291      	cmp	r1, r2
 80155d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80155d6:	d100      	bne.n	80155da <memcpy+0xc>
 80155d8:	4770      	bx	lr
 80155da:	b510      	push	{r4, lr}
 80155dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80155e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80155e4:	4291      	cmp	r1, r2
 80155e6:	d1f9      	bne.n	80155dc <memcpy+0xe>
 80155e8:	bd10      	pop	{r4, pc}
	...

080155ec <nanf>:
 80155ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80155f4 <nanf+0x8>
 80155f0:	4770      	bx	lr
 80155f2:	bf00      	nop
 80155f4:	7fc00000 	.word	0x7fc00000

080155f8 <quorem>:
 80155f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155fc:	6903      	ldr	r3, [r0, #16]
 80155fe:	690c      	ldr	r4, [r1, #16]
 8015600:	42a3      	cmp	r3, r4
 8015602:	4607      	mov	r7, r0
 8015604:	db7e      	blt.n	8015704 <quorem+0x10c>
 8015606:	3c01      	subs	r4, #1
 8015608:	f101 0814 	add.w	r8, r1, #20
 801560c:	f100 0514 	add.w	r5, r0, #20
 8015610:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015614:	9301      	str	r3, [sp, #4]
 8015616:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801561a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801561e:	3301      	adds	r3, #1
 8015620:	429a      	cmp	r2, r3
 8015622:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015626:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801562a:	fbb2 f6f3 	udiv	r6, r2, r3
 801562e:	d331      	bcc.n	8015694 <quorem+0x9c>
 8015630:	f04f 0e00 	mov.w	lr, #0
 8015634:	4640      	mov	r0, r8
 8015636:	46ac      	mov	ip, r5
 8015638:	46f2      	mov	sl, lr
 801563a:	f850 2b04 	ldr.w	r2, [r0], #4
 801563e:	b293      	uxth	r3, r2
 8015640:	fb06 e303 	mla	r3, r6, r3, lr
 8015644:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015648:	0c1a      	lsrs	r2, r3, #16
 801564a:	b29b      	uxth	r3, r3
 801564c:	ebaa 0303 	sub.w	r3, sl, r3
 8015650:	f8dc a000 	ldr.w	sl, [ip]
 8015654:	fa13 f38a 	uxtah	r3, r3, sl
 8015658:	fb06 220e 	mla	r2, r6, lr, r2
 801565c:	9300      	str	r3, [sp, #0]
 801565e:	9b00      	ldr	r3, [sp, #0]
 8015660:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015664:	b292      	uxth	r2, r2
 8015666:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801566a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801566e:	f8bd 3000 	ldrh.w	r3, [sp]
 8015672:	4581      	cmp	r9, r0
 8015674:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015678:	f84c 3b04 	str.w	r3, [ip], #4
 801567c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015680:	d2db      	bcs.n	801563a <quorem+0x42>
 8015682:	f855 300b 	ldr.w	r3, [r5, fp]
 8015686:	b92b      	cbnz	r3, 8015694 <quorem+0x9c>
 8015688:	9b01      	ldr	r3, [sp, #4]
 801568a:	3b04      	subs	r3, #4
 801568c:	429d      	cmp	r5, r3
 801568e:	461a      	mov	r2, r3
 8015690:	d32c      	bcc.n	80156ec <quorem+0xf4>
 8015692:	613c      	str	r4, [r7, #16]
 8015694:	4638      	mov	r0, r7
 8015696:	f001 f9ef 	bl	8016a78 <__mcmp>
 801569a:	2800      	cmp	r0, #0
 801569c:	db22      	blt.n	80156e4 <quorem+0xec>
 801569e:	3601      	adds	r6, #1
 80156a0:	4629      	mov	r1, r5
 80156a2:	2000      	movs	r0, #0
 80156a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80156a8:	f8d1 c000 	ldr.w	ip, [r1]
 80156ac:	b293      	uxth	r3, r2
 80156ae:	1ac3      	subs	r3, r0, r3
 80156b0:	0c12      	lsrs	r2, r2, #16
 80156b2:	fa13 f38c 	uxtah	r3, r3, ip
 80156b6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80156ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80156be:	b29b      	uxth	r3, r3
 80156c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80156c4:	45c1      	cmp	r9, r8
 80156c6:	f841 3b04 	str.w	r3, [r1], #4
 80156ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80156ce:	d2e9      	bcs.n	80156a4 <quorem+0xac>
 80156d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80156d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80156d8:	b922      	cbnz	r2, 80156e4 <quorem+0xec>
 80156da:	3b04      	subs	r3, #4
 80156dc:	429d      	cmp	r5, r3
 80156de:	461a      	mov	r2, r3
 80156e0:	d30a      	bcc.n	80156f8 <quorem+0x100>
 80156e2:	613c      	str	r4, [r7, #16]
 80156e4:	4630      	mov	r0, r6
 80156e6:	b003      	add	sp, #12
 80156e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156ec:	6812      	ldr	r2, [r2, #0]
 80156ee:	3b04      	subs	r3, #4
 80156f0:	2a00      	cmp	r2, #0
 80156f2:	d1ce      	bne.n	8015692 <quorem+0x9a>
 80156f4:	3c01      	subs	r4, #1
 80156f6:	e7c9      	b.n	801568c <quorem+0x94>
 80156f8:	6812      	ldr	r2, [r2, #0]
 80156fa:	3b04      	subs	r3, #4
 80156fc:	2a00      	cmp	r2, #0
 80156fe:	d1f0      	bne.n	80156e2 <quorem+0xea>
 8015700:	3c01      	subs	r4, #1
 8015702:	e7eb      	b.n	80156dc <quorem+0xe4>
 8015704:	2000      	movs	r0, #0
 8015706:	e7ee      	b.n	80156e6 <quorem+0xee>

08015708 <_dtoa_r>:
 8015708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801570c:	ed2d 8b04 	vpush	{d8-d9}
 8015710:	69c5      	ldr	r5, [r0, #28]
 8015712:	b093      	sub	sp, #76	; 0x4c
 8015714:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015718:	ec57 6b10 	vmov	r6, r7, d0
 801571c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015720:	9107      	str	r1, [sp, #28]
 8015722:	4604      	mov	r4, r0
 8015724:	920a      	str	r2, [sp, #40]	; 0x28
 8015726:	930d      	str	r3, [sp, #52]	; 0x34
 8015728:	b975      	cbnz	r5, 8015748 <_dtoa_r+0x40>
 801572a:	2010      	movs	r0, #16
 801572c:	f000 fe2a 	bl	8016384 <malloc>
 8015730:	4602      	mov	r2, r0
 8015732:	61e0      	str	r0, [r4, #28]
 8015734:	b920      	cbnz	r0, 8015740 <_dtoa_r+0x38>
 8015736:	4bae      	ldr	r3, [pc, #696]	; (80159f0 <_dtoa_r+0x2e8>)
 8015738:	21ef      	movs	r1, #239	; 0xef
 801573a:	48ae      	ldr	r0, [pc, #696]	; (80159f4 <_dtoa_r+0x2ec>)
 801573c:	f002 ffe8 	bl	8018710 <__assert_func>
 8015740:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015744:	6005      	str	r5, [r0, #0]
 8015746:	60c5      	str	r5, [r0, #12]
 8015748:	69e3      	ldr	r3, [r4, #28]
 801574a:	6819      	ldr	r1, [r3, #0]
 801574c:	b151      	cbz	r1, 8015764 <_dtoa_r+0x5c>
 801574e:	685a      	ldr	r2, [r3, #4]
 8015750:	604a      	str	r2, [r1, #4]
 8015752:	2301      	movs	r3, #1
 8015754:	4093      	lsls	r3, r2
 8015756:	608b      	str	r3, [r1, #8]
 8015758:	4620      	mov	r0, r4
 801575a:	f000 ff07 	bl	801656c <_Bfree>
 801575e:	69e3      	ldr	r3, [r4, #28]
 8015760:	2200      	movs	r2, #0
 8015762:	601a      	str	r2, [r3, #0]
 8015764:	1e3b      	subs	r3, r7, #0
 8015766:	bfbb      	ittet	lt
 8015768:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801576c:	9303      	strlt	r3, [sp, #12]
 801576e:	2300      	movge	r3, #0
 8015770:	2201      	movlt	r2, #1
 8015772:	bfac      	ite	ge
 8015774:	f8c8 3000 	strge.w	r3, [r8]
 8015778:	f8c8 2000 	strlt.w	r2, [r8]
 801577c:	4b9e      	ldr	r3, [pc, #632]	; (80159f8 <_dtoa_r+0x2f0>)
 801577e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8015782:	ea33 0308 	bics.w	r3, r3, r8
 8015786:	d11b      	bne.n	80157c0 <_dtoa_r+0xb8>
 8015788:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801578a:	f242 730f 	movw	r3, #9999	; 0x270f
 801578e:	6013      	str	r3, [r2, #0]
 8015790:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8015794:	4333      	orrs	r3, r6
 8015796:	f000 8593 	beq.w	80162c0 <_dtoa_r+0xbb8>
 801579a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801579c:	b963      	cbnz	r3, 80157b8 <_dtoa_r+0xb0>
 801579e:	4b97      	ldr	r3, [pc, #604]	; (80159fc <_dtoa_r+0x2f4>)
 80157a0:	e027      	b.n	80157f2 <_dtoa_r+0xea>
 80157a2:	4b97      	ldr	r3, [pc, #604]	; (8015a00 <_dtoa_r+0x2f8>)
 80157a4:	9300      	str	r3, [sp, #0]
 80157a6:	3308      	adds	r3, #8
 80157a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80157aa:	6013      	str	r3, [r2, #0]
 80157ac:	9800      	ldr	r0, [sp, #0]
 80157ae:	b013      	add	sp, #76	; 0x4c
 80157b0:	ecbd 8b04 	vpop	{d8-d9}
 80157b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157b8:	4b90      	ldr	r3, [pc, #576]	; (80159fc <_dtoa_r+0x2f4>)
 80157ba:	9300      	str	r3, [sp, #0]
 80157bc:	3303      	adds	r3, #3
 80157be:	e7f3      	b.n	80157a8 <_dtoa_r+0xa0>
 80157c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80157c4:	2200      	movs	r2, #0
 80157c6:	ec51 0b17 	vmov	r0, r1, d7
 80157ca:	eeb0 8a47 	vmov.f32	s16, s14
 80157ce:	eef0 8a67 	vmov.f32	s17, s15
 80157d2:	2300      	movs	r3, #0
 80157d4:	f7eb f9a0 	bl	8000b18 <__aeabi_dcmpeq>
 80157d8:	4681      	mov	r9, r0
 80157da:	b160      	cbz	r0, 80157f6 <_dtoa_r+0xee>
 80157dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80157de:	2301      	movs	r3, #1
 80157e0:	6013      	str	r3, [r2, #0]
 80157e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	f000 8568 	beq.w	80162ba <_dtoa_r+0xbb2>
 80157ea:	4b86      	ldr	r3, [pc, #536]	; (8015a04 <_dtoa_r+0x2fc>)
 80157ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80157ee:	6013      	str	r3, [r2, #0]
 80157f0:	3b01      	subs	r3, #1
 80157f2:	9300      	str	r3, [sp, #0]
 80157f4:	e7da      	b.n	80157ac <_dtoa_r+0xa4>
 80157f6:	aa10      	add	r2, sp, #64	; 0x40
 80157f8:	a911      	add	r1, sp, #68	; 0x44
 80157fa:	4620      	mov	r0, r4
 80157fc:	eeb0 0a48 	vmov.f32	s0, s16
 8015800:	eef0 0a68 	vmov.f32	s1, s17
 8015804:	f001 fa4e 	bl	8016ca4 <__d2b>
 8015808:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801580c:	4682      	mov	sl, r0
 801580e:	2d00      	cmp	r5, #0
 8015810:	d07f      	beq.n	8015912 <_dtoa_r+0x20a>
 8015812:	ee18 3a90 	vmov	r3, s17
 8015816:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801581a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801581e:	ec51 0b18 	vmov	r0, r1, d8
 8015822:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015826:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801582a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801582e:	4619      	mov	r1, r3
 8015830:	2200      	movs	r2, #0
 8015832:	4b75      	ldr	r3, [pc, #468]	; (8015a08 <_dtoa_r+0x300>)
 8015834:	f7ea fd50 	bl	80002d8 <__aeabi_dsub>
 8015838:	a367      	add	r3, pc, #412	; (adr r3, 80159d8 <_dtoa_r+0x2d0>)
 801583a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801583e:	f7ea ff03 	bl	8000648 <__aeabi_dmul>
 8015842:	a367      	add	r3, pc, #412	; (adr r3, 80159e0 <_dtoa_r+0x2d8>)
 8015844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015848:	f7ea fd48 	bl	80002dc <__adddf3>
 801584c:	4606      	mov	r6, r0
 801584e:	4628      	mov	r0, r5
 8015850:	460f      	mov	r7, r1
 8015852:	f7ea fe8f 	bl	8000574 <__aeabi_i2d>
 8015856:	a364      	add	r3, pc, #400	; (adr r3, 80159e8 <_dtoa_r+0x2e0>)
 8015858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801585c:	f7ea fef4 	bl	8000648 <__aeabi_dmul>
 8015860:	4602      	mov	r2, r0
 8015862:	460b      	mov	r3, r1
 8015864:	4630      	mov	r0, r6
 8015866:	4639      	mov	r1, r7
 8015868:	f7ea fd38 	bl	80002dc <__adddf3>
 801586c:	4606      	mov	r6, r0
 801586e:	460f      	mov	r7, r1
 8015870:	f7eb f99a 	bl	8000ba8 <__aeabi_d2iz>
 8015874:	2200      	movs	r2, #0
 8015876:	4683      	mov	fp, r0
 8015878:	2300      	movs	r3, #0
 801587a:	4630      	mov	r0, r6
 801587c:	4639      	mov	r1, r7
 801587e:	f7eb f955 	bl	8000b2c <__aeabi_dcmplt>
 8015882:	b148      	cbz	r0, 8015898 <_dtoa_r+0x190>
 8015884:	4658      	mov	r0, fp
 8015886:	f7ea fe75 	bl	8000574 <__aeabi_i2d>
 801588a:	4632      	mov	r2, r6
 801588c:	463b      	mov	r3, r7
 801588e:	f7eb f943 	bl	8000b18 <__aeabi_dcmpeq>
 8015892:	b908      	cbnz	r0, 8015898 <_dtoa_r+0x190>
 8015894:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015898:	f1bb 0f16 	cmp.w	fp, #22
 801589c:	d857      	bhi.n	801594e <_dtoa_r+0x246>
 801589e:	4b5b      	ldr	r3, [pc, #364]	; (8015a0c <_dtoa_r+0x304>)
 80158a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80158a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158a8:	ec51 0b18 	vmov	r0, r1, d8
 80158ac:	f7eb f93e 	bl	8000b2c <__aeabi_dcmplt>
 80158b0:	2800      	cmp	r0, #0
 80158b2:	d04e      	beq.n	8015952 <_dtoa_r+0x24a>
 80158b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80158b8:	2300      	movs	r3, #0
 80158ba:	930c      	str	r3, [sp, #48]	; 0x30
 80158bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80158be:	1b5b      	subs	r3, r3, r5
 80158c0:	1e5a      	subs	r2, r3, #1
 80158c2:	bf45      	ittet	mi
 80158c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80158c8:	9305      	strmi	r3, [sp, #20]
 80158ca:	2300      	movpl	r3, #0
 80158cc:	2300      	movmi	r3, #0
 80158ce:	9206      	str	r2, [sp, #24]
 80158d0:	bf54      	ite	pl
 80158d2:	9305      	strpl	r3, [sp, #20]
 80158d4:	9306      	strmi	r3, [sp, #24]
 80158d6:	f1bb 0f00 	cmp.w	fp, #0
 80158da:	db3c      	blt.n	8015956 <_dtoa_r+0x24e>
 80158dc:	9b06      	ldr	r3, [sp, #24]
 80158de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80158e2:	445b      	add	r3, fp
 80158e4:	9306      	str	r3, [sp, #24]
 80158e6:	2300      	movs	r3, #0
 80158e8:	9308      	str	r3, [sp, #32]
 80158ea:	9b07      	ldr	r3, [sp, #28]
 80158ec:	2b09      	cmp	r3, #9
 80158ee:	d868      	bhi.n	80159c2 <_dtoa_r+0x2ba>
 80158f0:	2b05      	cmp	r3, #5
 80158f2:	bfc4      	itt	gt
 80158f4:	3b04      	subgt	r3, #4
 80158f6:	9307      	strgt	r3, [sp, #28]
 80158f8:	9b07      	ldr	r3, [sp, #28]
 80158fa:	f1a3 0302 	sub.w	r3, r3, #2
 80158fe:	bfcc      	ite	gt
 8015900:	2500      	movgt	r5, #0
 8015902:	2501      	movle	r5, #1
 8015904:	2b03      	cmp	r3, #3
 8015906:	f200 8085 	bhi.w	8015a14 <_dtoa_r+0x30c>
 801590a:	e8df f003 	tbb	[pc, r3]
 801590e:	3b2e      	.short	0x3b2e
 8015910:	5839      	.short	0x5839
 8015912:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015916:	441d      	add	r5, r3
 8015918:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801591c:	2b20      	cmp	r3, #32
 801591e:	bfc1      	itttt	gt
 8015920:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015924:	fa08 f803 	lslgt.w	r8, r8, r3
 8015928:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801592c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8015930:	bfd6      	itet	le
 8015932:	f1c3 0320 	rsble	r3, r3, #32
 8015936:	ea48 0003 	orrgt.w	r0, r8, r3
 801593a:	fa06 f003 	lslle.w	r0, r6, r3
 801593e:	f7ea fe09 	bl	8000554 <__aeabi_ui2d>
 8015942:	2201      	movs	r2, #1
 8015944:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8015948:	3d01      	subs	r5, #1
 801594a:	920e      	str	r2, [sp, #56]	; 0x38
 801594c:	e76f      	b.n	801582e <_dtoa_r+0x126>
 801594e:	2301      	movs	r3, #1
 8015950:	e7b3      	b.n	80158ba <_dtoa_r+0x1b2>
 8015952:	900c      	str	r0, [sp, #48]	; 0x30
 8015954:	e7b2      	b.n	80158bc <_dtoa_r+0x1b4>
 8015956:	9b05      	ldr	r3, [sp, #20]
 8015958:	eba3 030b 	sub.w	r3, r3, fp
 801595c:	9305      	str	r3, [sp, #20]
 801595e:	f1cb 0300 	rsb	r3, fp, #0
 8015962:	9308      	str	r3, [sp, #32]
 8015964:	2300      	movs	r3, #0
 8015966:	930b      	str	r3, [sp, #44]	; 0x2c
 8015968:	e7bf      	b.n	80158ea <_dtoa_r+0x1e2>
 801596a:	2300      	movs	r3, #0
 801596c:	9309      	str	r3, [sp, #36]	; 0x24
 801596e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015970:	2b00      	cmp	r3, #0
 8015972:	dc52      	bgt.n	8015a1a <_dtoa_r+0x312>
 8015974:	2301      	movs	r3, #1
 8015976:	9301      	str	r3, [sp, #4]
 8015978:	9304      	str	r3, [sp, #16]
 801597a:	461a      	mov	r2, r3
 801597c:	920a      	str	r2, [sp, #40]	; 0x28
 801597e:	e00b      	b.n	8015998 <_dtoa_r+0x290>
 8015980:	2301      	movs	r3, #1
 8015982:	e7f3      	b.n	801596c <_dtoa_r+0x264>
 8015984:	2300      	movs	r3, #0
 8015986:	9309      	str	r3, [sp, #36]	; 0x24
 8015988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801598a:	445b      	add	r3, fp
 801598c:	9301      	str	r3, [sp, #4]
 801598e:	3301      	adds	r3, #1
 8015990:	2b01      	cmp	r3, #1
 8015992:	9304      	str	r3, [sp, #16]
 8015994:	bfb8      	it	lt
 8015996:	2301      	movlt	r3, #1
 8015998:	69e0      	ldr	r0, [r4, #28]
 801599a:	2100      	movs	r1, #0
 801599c:	2204      	movs	r2, #4
 801599e:	f102 0614 	add.w	r6, r2, #20
 80159a2:	429e      	cmp	r6, r3
 80159a4:	d93d      	bls.n	8015a22 <_dtoa_r+0x31a>
 80159a6:	6041      	str	r1, [r0, #4]
 80159a8:	4620      	mov	r0, r4
 80159aa:	f000 fd9f 	bl	80164ec <_Balloc>
 80159ae:	9000      	str	r0, [sp, #0]
 80159b0:	2800      	cmp	r0, #0
 80159b2:	d139      	bne.n	8015a28 <_dtoa_r+0x320>
 80159b4:	4b16      	ldr	r3, [pc, #88]	; (8015a10 <_dtoa_r+0x308>)
 80159b6:	4602      	mov	r2, r0
 80159b8:	f240 11af 	movw	r1, #431	; 0x1af
 80159bc:	e6bd      	b.n	801573a <_dtoa_r+0x32>
 80159be:	2301      	movs	r3, #1
 80159c0:	e7e1      	b.n	8015986 <_dtoa_r+0x27e>
 80159c2:	2501      	movs	r5, #1
 80159c4:	2300      	movs	r3, #0
 80159c6:	9307      	str	r3, [sp, #28]
 80159c8:	9509      	str	r5, [sp, #36]	; 0x24
 80159ca:	f04f 33ff 	mov.w	r3, #4294967295
 80159ce:	9301      	str	r3, [sp, #4]
 80159d0:	9304      	str	r3, [sp, #16]
 80159d2:	2200      	movs	r2, #0
 80159d4:	2312      	movs	r3, #18
 80159d6:	e7d1      	b.n	801597c <_dtoa_r+0x274>
 80159d8:	636f4361 	.word	0x636f4361
 80159dc:	3fd287a7 	.word	0x3fd287a7
 80159e0:	8b60c8b3 	.word	0x8b60c8b3
 80159e4:	3fc68a28 	.word	0x3fc68a28
 80159e8:	509f79fb 	.word	0x509f79fb
 80159ec:	3fd34413 	.word	0x3fd34413
 80159f0:	0801c0ac 	.word	0x0801c0ac
 80159f4:	0801c0c3 	.word	0x0801c0c3
 80159f8:	7ff00000 	.word	0x7ff00000
 80159fc:	0801c0a8 	.word	0x0801c0a8
 8015a00:	0801c09f 	.word	0x0801c09f
 8015a04:	0801c401 	.word	0x0801c401
 8015a08:	3ff80000 	.word	0x3ff80000
 8015a0c:	0801c1b0 	.word	0x0801c1b0
 8015a10:	0801c11b 	.word	0x0801c11b
 8015a14:	2301      	movs	r3, #1
 8015a16:	9309      	str	r3, [sp, #36]	; 0x24
 8015a18:	e7d7      	b.n	80159ca <_dtoa_r+0x2c2>
 8015a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a1c:	9301      	str	r3, [sp, #4]
 8015a1e:	9304      	str	r3, [sp, #16]
 8015a20:	e7ba      	b.n	8015998 <_dtoa_r+0x290>
 8015a22:	3101      	adds	r1, #1
 8015a24:	0052      	lsls	r2, r2, #1
 8015a26:	e7ba      	b.n	801599e <_dtoa_r+0x296>
 8015a28:	69e3      	ldr	r3, [r4, #28]
 8015a2a:	9a00      	ldr	r2, [sp, #0]
 8015a2c:	601a      	str	r2, [r3, #0]
 8015a2e:	9b04      	ldr	r3, [sp, #16]
 8015a30:	2b0e      	cmp	r3, #14
 8015a32:	f200 80a8 	bhi.w	8015b86 <_dtoa_r+0x47e>
 8015a36:	2d00      	cmp	r5, #0
 8015a38:	f000 80a5 	beq.w	8015b86 <_dtoa_r+0x47e>
 8015a3c:	f1bb 0f00 	cmp.w	fp, #0
 8015a40:	dd38      	ble.n	8015ab4 <_dtoa_r+0x3ac>
 8015a42:	4bc0      	ldr	r3, [pc, #768]	; (8015d44 <_dtoa_r+0x63c>)
 8015a44:	f00b 020f 	and.w	r2, fp, #15
 8015a48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015a4c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015a50:	e9d3 6700 	ldrd	r6, r7, [r3]
 8015a54:	ea4f 182b 	mov.w	r8, fp, asr #4
 8015a58:	d019      	beq.n	8015a8e <_dtoa_r+0x386>
 8015a5a:	4bbb      	ldr	r3, [pc, #748]	; (8015d48 <_dtoa_r+0x640>)
 8015a5c:	ec51 0b18 	vmov	r0, r1, d8
 8015a60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015a64:	f7ea ff1a 	bl	800089c <__aeabi_ddiv>
 8015a68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015a6c:	f008 080f 	and.w	r8, r8, #15
 8015a70:	2503      	movs	r5, #3
 8015a72:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8015d48 <_dtoa_r+0x640>
 8015a76:	f1b8 0f00 	cmp.w	r8, #0
 8015a7a:	d10a      	bne.n	8015a92 <_dtoa_r+0x38a>
 8015a7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015a80:	4632      	mov	r2, r6
 8015a82:	463b      	mov	r3, r7
 8015a84:	f7ea ff0a 	bl	800089c <__aeabi_ddiv>
 8015a88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015a8c:	e02b      	b.n	8015ae6 <_dtoa_r+0x3de>
 8015a8e:	2502      	movs	r5, #2
 8015a90:	e7ef      	b.n	8015a72 <_dtoa_r+0x36a>
 8015a92:	f018 0f01 	tst.w	r8, #1
 8015a96:	d008      	beq.n	8015aaa <_dtoa_r+0x3a2>
 8015a98:	4630      	mov	r0, r6
 8015a9a:	4639      	mov	r1, r7
 8015a9c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015aa0:	f7ea fdd2 	bl	8000648 <__aeabi_dmul>
 8015aa4:	3501      	adds	r5, #1
 8015aa6:	4606      	mov	r6, r0
 8015aa8:	460f      	mov	r7, r1
 8015aaa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015aae:	f109 0908 	add.w	r9, r9, #8
 8015ab2:	e7e0      	b.n	8015a76 <_dtoa_r+0x36e>
 8015ab4:	f000 809f 	beq.w	8015bf6 <_dtoa_r+0x4ee>
 8015ab8:	f1cb 0600 	rsb	r6, fp, #0
 8015abc:	4ba1      	ldr	r3, [pc, #644]	; (8015d44 <_dtoa_r+0x63c>)
 8015abe:	4fa2      	ldr	r7, [pc, #648]	; (8015d48 <_dtoa_r+0x640>)
 8015ac0:	f006 020f 	and.w	r2, r6, #15
 8015ac4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015acc:	ec51 0b18 	vmov	r0, r1, d8
 8015ad0:	f7ea fdba 	bl	8000648 <__aeabi_dmul>
 8015ad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015ad8:	1136      	asrs	r6, r6, #4
 8015ada:	2300      	movs	r3, #0
 8015adc:	2502      	movs	r5, #2
 8015ade:	2e00      	cmp	r6, #0
 8015ae0:	d17e      	bne.n	8015be0 <_dtoa_r+0x4d8>
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d1d0      	bne.n	8015a88 <_dtoa_r+0x380>
 8015ae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ae8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	f000 8084 	beq.w	8015bfa <_dtoa_r+0x4f2>
 8015af2:	4b96      	ldr	r3, [pc, #600]	; (8015d4c <_dtoa_r+0x644>)
 8015af4:	2200      	movs	r2, #0
 8015af6:	4640      	mov	r0, r8
 8015af8:	4649      	mov	r1, r9
 8015afa:	f7eb f817 	bl	8000b2c <__aeabi_dcmplt>
 8015afe:	2800      	cmp	r0, #0
 8015b00:	d07b      	beq.n	8015bfa <_dtoa_r+0x4f2>
 8015b02:	9b04      	ldr	r3, [sp, #16]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d078      	beq.n	8015bfa <_dtoa_r+0x4f2>
 8015b08:	9b01      	ldr	r3, [sp, #4]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	dd39      	ble.n	8015b82 <_dtoa_r+0x47a>
 8015b0e:	4b90      	ldr	r3, [pc, #576]	; (8015d50 <_dtoa_r+0x648>)
 8015b10:	2200      	movs	r2, #0
 8015b12:	4640      	mov	r0, r8
 8015b14:	4649      	mov	r1, r9
 8015b16:	f7ea fd97 	bl	8000648 <__aeabi_dmul>
 8015b1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b1e:	9e01      	ldr	r6, [sp, #4]
 8015b20:	f10b 37ff 	add.w	r7, fp, #4294967295
 8015b24:	3501      	adds	r5, #1
 8015b26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015b2a:	4628      	mov	r0, r5
 8015b2c:	f7ea fd22 	bl	8000574 <__aeabi_i2d>
 8015b30:	4642      	mov	r2, r8
 8015b32:	464b      	mov	r3, r9
 8015b34:	f7ea fd88 	bl	8000648 <__aeabi_dmul>
 8015b38:	4b86      	ldr	r3, [pc, #536]	; (8015d54 <_dtoa_r+0x64c>)
 8015b3a:	2200      	movs	r2, #0
 8015b3c:	f7ea fbce 	bl	80002dc <__adddf3>
 8015b40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8015b44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b48:	9303      	str	r3, [sp, #12]
 8015b4a:	2e00      	cmp	r6, #0
 8015b4c:	d158      	bne.n	8015c00 <_dtoa_r+0x4f8>
 8015b4e:	4b82      	ldr	r3, [pc, #520]	; (8015d58 <_dtoa_r+0x650>)
 8015b50:	2200      	movs	r2, #0
 8015b52:	4640      	mov	r0, r8
 8015b54:	4649      	mov	r1, r9
 8015b56:	f7ea fbbf 	bl	80002d8 <__aeabi_dsub>
 8015b5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015b5e:	4680      	mov	r8, r0
 8015b60:	4689      	mov	r9, r1
 8015b62:	f7eb f801 	bl	8000b68 <__aeabi_dcmpgt>
 8015b66:	2800      	cmp	r0, #0
 8015b68:	f040 8296 	bne.w	8016098 <_dtoa_r+0x990>
 8015b6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015b70:	4640      	mov	r0, r8
 8015b72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015b76:	4649      	mov	r1, r9
 8015b78:	f7ea ffd8 	bl	8000b2c <__aeabi_dcmplt>
 8015b7c:	2800      	cmp	r0, #0
 8015b7e:	f040 8289 	bne.w	8016094 <_dtoa_r+0x98c>
 8015b82:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015b86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	f2c0 814e 	blt.w	8015e2a <_dtoa_r+0x722>
 8015b8e:	f1bb 0f0e 	cmp.w	fp, #14
 8015b92:	f300 814a 	bgt.w	8015e2a <_dtoa_r+0x722>
 8015b96:	4b6b      	ldr	r3, [pc, #428]	; (8015d44 <_dtoa_r+0x63c>)
 8015b98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015b9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	f280 80dc 	bge.w	8015d60 <_dtoa_r+0x658>
 8015ba8:	9b04      	ldr	r3, [sp, #16]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	f300 80d8 	bgt.w	8015d60 <_dtoa_r+0x658>
 8015bb0:	f040 826f 	bne.w	8016092 <_dtoa_r+0x98a>
 8015bb4:	4b68      	ldr	r3, [pc, #416]	; (8015d58 <_dtoa_r+0x650>)
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	4640      	mov	r0, r8
 8015bba:	4649      	mov	r1, r9
 8015bbc:	f7ea fd44 	bl	8000648 <__aeabi_dmul>
 8015bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015bc4:	f7ea ffc6 	bl	8000b54 <__aeabi_dcmpge>
 8015bc8:	9e04      	ldr	r6, [sp, #16]
 8015bca:	4637      	mov	r7, r6
 8015bcc:	2800      	cmp	r0, #0
 8015bce:	f040 8245 	bne.w	801605c <_dtoa_r+0x954>
 8015bd2:	9d00      	ldr	r5, [sp, #0]
 8015bd4:	2331      	movs	r3, #49	; 0x31
 8015bd6:	f805 3b01 	strb.w	r3, [r5], #1
 8015bda:	f10b 0b01 	add.w	fp, fp, #1
 8015bde:	e241      	b.n	8016064 <_dtoa_r+0x95c>
 8015be0:	07f2      	lsls	r2, r6, #31
 8015be2:	d505      	bpl.n	8015bf0 <_dtoa_r+0x4e8>
 8015be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015be8:	f7ea fd2e 	bl	8000648 <__aeabi_dmul>
 8015bec:	3501      	adds	r5, #1
 8015bee:	2301      	movs	r3, #1
 8015bf0:	1076      	asrs	r6, r6, #1
 8015bf2:	3708      	adds	r7, #8
 8015bf4:	e773      	b.n	8015ade <_dtoa_r+0x3d6>
 8015bf6:	2502      	movs	r5, #2
 8015bf8:	e775      	b.n	8015ae6 <_dtoa_r+0x3de>
 8015bfa:	9e04      	ldr	r6, [sp, #16]
 8015bfc:	465f      	mov	r7, fp
 8015bfe:	e792      	b.n	8015b26 <_dtoa_r+0x41e>
 8015c00:	9900      	ldr	r1, [sp, #0]
 8015c02:	4b50      	ldr	r3, [pc, #320]	; (8015d44 <_dtoa_r+0x63c>)
 8015c04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015c08:	4431      	add	r1, r6
 8015c0a:	9102      	str	r1, [sp, #8]
 8015c0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c0e:	eeb0 9a47 	vmov.f32	s18, s14
 8015c12:	eef0 9a67 	vmov.f32	s19, s15
 8015c16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015c1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015c1e:	2900      	cmp	r1, #0
 8015c20:	d044      	beq.n	8015cac <_dtoa_r+0x5a4>
 8015c22:	494e      	ldr	r1, [pc, #312]	; (8015d5c <_dtoa_r+0x654>)
 8015c24:	2000      	movs	r0, #0
 8015c26:	f7ea fe39 	bl	800089c <__aeabi_ddiv>
 8015c2a:	ec53 2b19 	vmov	r2, r3, d9
 8015c2e:	f7ea fb53 	bl	80002d8 <__aeabi_dsub>
 8015c32:	9d00      	ldr	r5, [sp, #0]
 8015c34:	ec41 0b19 	vmov	d9, r0, r1
 8015c38:	4649      	mov	r1, r9
 8015c3a:	4640      	mov	r0, r8
 8015c3c:	f7ea ffb4 	bl	8000ba8 <__aeabi_d2iz>
 8015c40:	4606      	mov	r6, r0
 8015c42:	f7ea fc97 	bl	8000574 <__aeabi_i2d>
 8015c46:	4602      	mov	r2, r0
 8015c48:	460b      	mov	r3, r1
 8015c4a:	4640      	mov	r0, r8
 8015c4c:	4649      	mov	r1, r9
 8015c4e:	f7ea fb43 	bl	80002d8 <__aeabi_dsub>
 8015c52:	3630      	adds	r6, #48	; 0x30
 8015c54:	f805 6b01 	strb.w	r6, [r5], #1
 8015c58:	ec53 2b19 	vmov	r2, r3, d9
 8015c5c:	4680      	mov	r8, r0
 8015c5e:	4689      	mov	r9, r1
 8015c60:	f7ea ff64 	bl	8000b2c <__aeabi_dcmplt>
 8015c64:	2800      	cmp	r0, #0
 8015c66:	d164      	bne.n	8015d32 <_dtoa_r+0x62a>
 8015c68:	4642      	mov	r2, r8
 8015c6a:	464b      	mov	r3, r9
 8015c6c:	4937      	ldr	r1, [pc, #220]	; (8015d4c <_dtoa_r+0x644>)
 8015c6e:	2000      	movs	r0, #0
 8015c70:	f7ea fb32 	bl	80002d8 <__aeabi_dsub>
 8015c74:	ec53 2b19 	vmov	r2, r3, d9
 8015c78:	f7ea ff58 	bl	8000b2c <__aeabi_dcmplt>
 8015c7c:	2800      	cmp	r0, #0
 8015c7e:	f040 80b6 	bne.w	8015dee <_dtoa_r+0x6e6>
 8015c82:	9b02      	ldr	r3, [sp, #8]
 8015c84:	429d      	cmp	r5, r3
 8015c86:	f43f af7c 	beq.w	8015b82 <_dtoa_r+0x47a>
 8015c8a:	4b31      	ldr	r3, [pc, #196]	; (8015d50 <_dtoa_r+0x648>)
 8015c8c:	ec51 0b19 	vmov	r0, r1, d9
 8015c90:	2200      	movs	r2, #0
 8015c92:	f7ea fcd9 	bl	8000648 <__aeabi_dmul>
 8015c96:	4b2e      	ldr	r3, [pc, #184]	; (8015d50 <_dtoa_r+0x648>)
 8015c98:	ec41 0b19 	vmov	d9, r0, r1
 8015c9c:	2200      	movs	r2, #0
 8015c9e:	4640      	mov	r0, r8
 8015ca0:	4649      	mov	r1, r9
 8015ca2:	f7ea fcd1 	bl	8000648 <__aeabi_dmul>
 8015ca6:	4680      	mov	r8, r0
 8015ca8:	4689      	mov	r9, r1
 8015caa:	e7c5      	b.n	8015c38 <_dtoa_r+0x530>
 8015cac:	ec51 0b17 	vmov	r0, r1, d7
 8015cb0:	f7ea fcca 	bl	8000648 <__aeabi_dmul>
 8015cb4:	9b02      	ldr	r3, [sp, #8]
 8015cb6:	9d00      	ldr	r5, [sp, #0]
 8015cb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8015cba:	ec41 0b19 	vmov	d9, r0, r1
 8015cbe:	4649      	mov	r1, r9
 8015cc0:	4640      	mov	r0, r8
 8015cc2:	f7ea ff71 	bl	8000ba8 <__aeabi_d2iz>
 8015cc6:	4606      	mov	r6, r0
 8015cc8:	f7ea fc54 	bl	8000574 <__aeabi_i2d>
 8015ccc:	3630      	adds	r6, #48	; 0x30
 8015cce:	4602      	mov	r2, r0
 8015cd0:	460b      	mov	r3, r1
 8015cd2:	4640      	mov	r0, r8
 8015cd4:	4649      	mov	r1, r9
 8015cd6:	f7ea faff 	bl	80002d8 <__aeabi_dsub>
 8015cda:	f805 6b01 	strb.w	r6, [r5], #1
 8015cde:	9b02      	ldr	r3, [sp, #8]
 8015ce0:	429d      	cmp	r5, r3
 8015ce2:	4680      	mov	r8, r0
 8015ce4:	4689      	mov	r9, r1
 8015ce6:	f04f 0200 	mov.w	r2, #0
 8015cea:	d124      	bne.n	8015d36 <_dtoa_r+0x62e>
 8015cec:	4b1b      	ldr	r3, [pc, #108]	; (8015d5c <_dtoa_r+0x654>)
 8015cee:	ec51 0b19 	vmov	r0, r1, d9
 8015cf2:	f7ea faf3 	bl	80002dc <__adddf3>
 8015cf6:	4602      	mov	r2, r0
 8015cf8:	460b      	mov	r3, r1
 8015cfa:	4640      	mov	r0, r8
 8015cfc:	4649      	mov	r1, r9
 8015cfe:	f7ea ff33 	bl	8000b68 <__aeabi_dcmpgt>
 8015d02:	2800      	cmp	r0, #0
 8015d04:	d173      	bne.n	8015dee <_dtoa_r+0x6e6>
 8015d06:	ec53 2b19 	vmov	r2, r3, d9
 8015d0a:	4914      	ldr	r1, [pc, #80]	; (8015d5c <_dtoa_r+0x654>)
 8015d0c:	2000      	movs	r0, #0
 8015d0e:	f7ea fae3 	bl	80002d8 <__aeabi_dsub>
 8015d12:	4602      	mov	r2, r0
 8015d14:	460b      	mov	r3, r1
 8015d16:	4640      	mov	r0, r8
 8015d18:	4649      	mov	r1, r9
 8015d1a:	f7ea ff07 	bl	8000b2c <__aeabi_dcmplt>
 8015d1e:	2800      	cmp	r0, #0
 8015d20:	f43f af2f 	beq.w	8015b82 <_dtoa_r+0x47a>
 8015d24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015d26:	1e6b      	subs	r3, r5, #1
 8015d28:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015d2e:	2b30      	cmp	r3, #48	; 0x30
 8015d30:	d0f8      	beq.n	8015d24 <_dtoa_r+0x61c>
 8015d32:	46bb      	mov	fp, r7
 8015d34:	e04a      	b.n	8015dcc <_dtoa_r+0x6c4>
 8015d36:	4b06      	ldr	r3, [pc, #24]	; (8015d50 <_dtoa_r+0x648>)
 8015d38:	f7ea fc86 	bl	8000648 <__aeabi_dmul>
 8015d3c:	4680      	mov	r8, r0
 8015d3e:	4689      	mov	r9, r1
 8015d40:	e7bd      	b.n	8015cbe <_dtoa_r+0x5b6>
 8015d42:	bf00      	nop
 8015d44:	0801c1b0 	.word	0x0801c1b0
 8015d48:	0801c188 	.word	0x0801c188
 8015d4c:	3ff00000 	.word	0x3ff00000
 8015d50:	40240000 	.word	0x40240000
 8015d54:	401c0000 	.word	0x401c0000
 8015d58:	40140000 	.word	0x40140000
 8015d5c:	3fe00000 	.word	0x3fe00000
 8015d60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015d64:	9d00      	ldr	r5, [sp, #0]
 8015d66:	4642      	mov	r2, r8
 8015d68:	464b      	mov	r3, r9
 8015d6a:	4630      	mov	r0, r6
 8015d6c:	4639      	mov	r1, r7
 8015d6e:	f7ea fd95 	bl	800089c <__aeabi_ddiv>
 8015d72:	f7ea ff19 	bl	8000ba8 <__aeabi_d2iz>
 8015d76:	9001      	str	r0, [sp, #4]
 8015d78:	f7ea fbfc 	bl	8000574 <__aeabi_i2d>
 8015d7c:	4642      	mov	r2, r8
 8015d7e:	464b      	mov	r3, r9
 8015d80:	f7ea fc62 	bl	8000648 <__aeabi_dmul>
 8015d84:	4602      	mov	r2, r0
 8015d86:	460b      	mov	r3, r1
 8015d88:	4630      	mov	r0, r6
 8015d8a:	4639      	mov	r1, r7
 8015d8c:	f7ea faa4 	bl	80002d8 <__aeabi_dsub>
 8015d90:	9e01      	ldr	r6, [sp, #4]
 8015d92:	9f04      	ldr	r7, [sp, #16]
 8015d94:	3630      	adds	r6, #48	; 0x30
 8015d96:	f805 6b01 	strb.w	r6, [r5], #1
 8015d9a:	9e00      	ldr	r6, [sp, #0]
 8015d9c:	1bae      	subs	r6, r5, r6
 8015d9e:	42b7      	cmp	r7, r6
 8015da0:	4602      	mov	r2, r0
 8015da2:	460b      	mov	r3, r1
 8015da4:	d134      	bne.n	8015e10 <_dtoa_r+0x708>
 8015da6:	f7ea fa99 	bl	80002dc <__adddf3>
 8015daa:	4642      	mov	r2, r8
 8015dac:	464b      	mov	r3, r9
 8015dae:	4606      	mov	r6, r0
 8015db0:	460f      	mov	r7, r1
 8015db2:	f7ea fed9 	bl	8000b68 <__aeabi_dcmpgt>
 8015db6:	b9c8      	cbnz	r0, 8015dec <_dtoa_r+0x6e4>
 8015db8:	4642      	mov	r2, r8
 8015dba:	464b      	mov	r3, r9
 8015dbc:	4630      	mov	r0, r6
 8015dbe:	4639      	mov	r1, r7
 8015dc0:	f7ea feaa 	bl	8000b18 <__aeabi_dcmpeq>
 8015dc4:	b110      	cbz	r0, 8015dcc <_dtoa_r+0x6c4>
 8015dc6:	9b01      	ldr	r3, [sp, #4]
 8015dc8:	07db      	lsls	r3, r3, #31
 8015dca:	d40f      	bmi.n	8015dec <_dtoa_r+0x6e4>
 8015dcc:	4651      	mov	r1, sl
 8015dce:	4620      	mov	r0, r4
 8015dd0:	f000 fbcc 	bl	801656c <_Bfree>
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015dd8:	702b      	strb	r3, [r5, #0]
 8015dda:	f10b 0301 	add.w	r3, fp, #1
 8015dde:	6013      	str	r3, [r2, #0]
 8015de0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	f43f ace2 	beq.w	80157ac <_dtoa_r+0xa4>
 8015de8:	601d      	str	r5, [r3, #0]
 8015dea:	e4df      	b.n	80157ac <_dtoa_r+0xa4>
 8015dec:	465f      	mov	r7, fp
 8015dee:	462b      	mov	r3, r5
 8015df0:	461d      	mov	r5, r3
 8015df2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015df6:	2a39      	cmp	r2, #57	; 0x39
 8015df8:	d106      	bne.n	8015e08 <_dtoa_r+0x700>
 8015dfa:	9a00      	ldr	r2, [sp, #0]
 8015dfc:	429a      	cmp	r2, r3
 8015dfe:	d1f7      	bne.n	8015df0 <_dtoa_r+0x6e8>
 8015e00:	9900      	ldr	r1, [sp, #0]
 8015e02:	2230      	movs	r2, #48	; 0x30
 8015e04:	3701      	adds	r7, #1
 8015e06:	700a      	strb	r2, [r1, #0]
 8015e08:	781a      	ldrb	r2, [r3, #0]
 8015e0a:	3201      	adds	r2, #1
 8015e0c:	701a      	strb	r2, [r3, #0]
 8015e0e:	e790      	b.n	8015d32 <_dtoa_r+0x62a>
 8015e10:	4ba3      	ldr	r3, [pc, #652]	; (80160a0 <_dtoa_r+0x998>)
 8015e12:	2200      	movs	r2, #0
 8015e14:	f7ea fc18 	bl	8000648 <__aeabi_dmul>
 8015e18:	2200      	movs	r2, #0
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	4606      	mov	r6, r0
 8015e1e:	460f      	mov	r7, r1
 8015e20:	f7ea fe7a 	bl	8000b18 <__aeabi_dcmpeq>
 8015e24:	2800      	cmp	r0, #0
 8015e26:	d09e      	beq.n	8015d66 <_dtoa_r+0x65e>
 8015e28:	e7d0      	b.n	8015dcc <_dtoa_r+0x6c4>
 8015e2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e2c:	2a00      	cmp	r2, #0
 8015e2e:	f000 80ca 	beq.w	8015fc6 <_dtoa_r+0x8be>
 8015e32:	9a07      	ldr	r2, [sp, #28]
 8015e34:	2a01      	cmp	r2, #1
 8015e36:	f300 80ad 	bgt.w	8015f94 <_dtoa_r+0x88c>
 8015e3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015e3c:	2a00      	cmp	r2, #0
 8015e3e:	f000 80a5 	beq.w	8015f8c <_dtoa_r+0x884>
 8015e42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015e46:	9e08      	ldr	r6, [sp, #32]
 8015e48:	9d05      	ldr	r5, [sp, #20]
 8015e4a:	9a05      	ldr	r2, [sp, #20]
 8015e4c:	441a      	add	r2, r3
 8015e4e:	9205      	str	r2, [sp, #20]
 8015e50:	9a06      	ldr	r2, [sp, #24]
 8015e52:	2101      	movs	r1, #1
 8015e54:	441a      	add	r2, r3
 8015e56:	4620      	mov	r0, r4
 8015e58:	9206      	str	r2, [sp, #24]
 8015e5a:	f000 fc87 	bl	801676c <__i2b>
 8015e5e:	4607      	mov	r7, r0
 8015e60:	b165      	cbz	r5, 8015e7c <_dtoa_r+0x774>
 8015e62:	9b06      	ldr	r3, [sp, #24]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	dd09      	ble.n	8015e7c <_dtoa_r+0x774>
 8015e68:	42ab      	cmp	r3, r5
 8015e6a:	9a05      	ldr	r2, [sp, #20]
 8015e6c:	bfa8      	it	ge
 8015e6e:	462b      	movge	r3, r5
 8015e70:	1ad2      	subs	r2, r2, r3
 8015e72:	9205      	str	r2, [sp, #20]
 8015e74:	9a06      	ldr	r2, [sp, #24]
 8015e76:	1aed      	subs	r5, r5, r3
 8015e78:	1ad3      	subs	r3, r2, r3
 8015e7a:	9306      	str	r3, [sp, #24]
 8015e7c:	9b08      	ldr	r3, [sp, #32]
 8015e7e:	b1f3      	cbz	r3, 8015ebe <_dtoa_r+0x7b6>
 8015e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	f000 80a3 	beq.w	8015fce <_dtoa_r+0x8c6>
 8015e88:	2e00      	cmp	r6, #0
 8015e8a:	dd10      	ble.n	8015eae <_dtoa_r+0x7a6>
 8015e8c:	4639      	mov	r1, r7
 8015e8e:	4632      	mov	r2, r6
 8015e90:	4620      	mov	r0, r4
 8015e92:	f000 fd2b 	bl	80168ec <__pow5mult>
 8015e96:	4652      	mov	r2, sl
 8015e98:	4601      	mov	r1, r0
 8015e9a:	4607      	mov	r7, r0
 8015e9c:	4620      	mov	r0, r4
 8015e9e:	f000 fc7b 	bl	8016798 <__multiply>
 8015ea2:	4651      	mov	r1, sl
 8015ea4:	4680      	mov	r8, r0
 8015ea6:	4620      	mov	r0, r4
 8015ea8:	f000 fb60 	bl	801656c <_Bfree>
 8015eac:	46c2      	mov	sl, r8
 8015eae:	9b08      	ldr	r3, [sp, #32]
 8015eb0:	1b9a      	subs	r2, r3, r6
 8015eb2:	d004      	beq.n	8015ebe <_dtoa_r+0x7b6>
 8015eb4:	4651      	mov	r1, sl
 8015eb6:	4620      	mov	r0, r4
 8015eb8:	f000 fd18 	bl	80168ec <__pow5mult>
 8015ebc:	4682      	mov	sl, r0
 8015ebe:	2101      	movs	r1, #1
 8015ec0:	4620      	mov	r0, r4
 8015ec2:	f000 fc53 	bl	801676c <__i2b>
 8015ec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	4606      	mov	r6, r0
 8015ecc:	f340 8081 	ble.w	8015fd2 <_dtoa_r+0x8ca>
 8015ed0:	461a      	mov	r2, r3
 8015ed2:	4601      	mov	r1, r0
 8015ed4:	4620      	mov	r0, r4
 8015ed6:	f000 fd09 	bl	80168ec <__pow5mult>
 8015eda:	9b07      	ldr	r3, [sp, #28]
 8015edc:	2b01      	cmp	r3, #1
 8015ede:	4606      	mov	r6, r0
 8015ee0:	dd7a      	ble.n	8015fd8 <_dtoa_r+0x8d0>
 8015ee2:	f04f 0800 	mov.w	r8, #0
 8015ee6:	6933      	ldr	r3, [r6, #16]
 8015ee8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015eec:	6918      	ldr	r0, [r3, #16]
 8015eee:	f000 fbef 	bl	80166d0 <__hi0bits>
 8015ef2:	f1c0 0020 	rsb	r0, r0, #32
 8015ef6:	9b06      	ldr	r3, [sp, #24]
 8015ef8:	4418      	add	r0, r3
 8015efa:	f010 001f 	ands.w	r0, r0, #31
 8015efe:	f000 8094 	beq.w	801602a <_dtoa_r+0x922>
 8015f02:	f1c0 0320 	rsb	r3, r0, #32
 8015f06:	2b04      	cmp	r3, #4
 8015f08:	f340 8085 	ble.w	8016016 <_dtoa_r+0x90e>
 8015f0c:	9b05      	ldr	r3, [sp, #20]
 8015f0e:	f1c0 001c 	rsb	r0, r0, #28
 8015f12:	4403      	add	r3, r0
 8015f14:	9305      	str	r3, [sp, #20]
 8015f16:	9b06      	ldr	r3, [sp, #24]
 8015f18:	4403      	add	r3, r0
 8015f1a:	4405      	add	r5, r0
 8015f1c:	9306      	str	r3, [sp, #24]
 8015f1e:	9b05      	ldr	r3, [sp, #20]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	dd05      	ble.n	8015f30 <_dtoa_r+0x828>
 8015f24:	4651      	mov	r1, sl
 8015f26:	461a      	mov	r2, r3
 8015f28:	4620      	mov	r0, r4
 8015f2a:	f000 fd39 	bl	80169a0 <__lshift>
 8015f2e:	4682      	mov	sl, r0
 8015f30:	9b06      	ldr	r3, [sp, #24]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	dd05      	ble.n	8015f42 <_dtoa_r+0x83a>
 8015f36:	4631      	mov	r1, r6
 8015f38:	461a      	mov	r2, r3
 8015f3a:	4620      	mov	r0, r4
 8015f3c:	f000 fd30 	bl	80169a0 <__lshift>
 8015f40:	4606      	mov	r6, r0
 8015f42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d072      	beq.n	801602e <_dtoa_r+0x926>
 8015f48:	4631      	mov	r1, r6
 8015f4a:	4650      	mov	r0, sl
 8015f4c:	f000 fd94 	bl	8016a78 <__mcmp>
 8015f50:	2800      	cmp	r0, #0
 8015f52:	da6c      	bge.n	801602e <_dtoa_r+0x926>
 8015f54:	2300      	movs	r3, #0
 8015f56:	4651      	mov	r1, sl
 8015f58:	220a      	movs	r2, #10
 8015f5a:	4620      	mov	r0, r4
 8015f5c:	f000 fb28 	bl	80165b0 <__multadd>
 8015f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015f66:	4682      	mov	sl, r0
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	f000 81b0 	beq.w	80162ce <_dtoa_r+0xbc6>
 8015f6e:	2300      	movs	r3, #0
 8015f70:	4639      	mov	r1, r7
 8015f72:	220a      	movs	r2, #10
 8015f74:	4620      	mov	r0, r4
 8015f76:	f000 fb1b 	bl	80165b0 <__multadd>
 8015f7a:	9b01      	ldr	r3, [sp, #4]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	4607      	mov	r7, r0
 8015f80:	f300 8096 	bgt.w	80160b0 <_dtoa_r+0x9a8>
 8015f84:	9b07      	ldr	r3, [sp, #28]
 8015f86:	2b02      	cmp	r3, #2
 8015f88:	dc59      	bgt.n	801603e <_dtoa_r+0x936>
 8015f8a:	e091      	b.n	80160b0 <_dtoa_r+0x9a8>
 8015f8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015f8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015f92:	e758      	b.n	8015e46 <_dtoa_r+0x73e>
 8015f94:	9b04      	ldr	r3, [sp, #16]
 8015f96:	1e5e      	subs	r6, r3, #1
 8015f98:	9b08      	ldr	r3, [sp, #32]
 8015f9a:	42b3      	cmp	r3, r6
 8015f9c:	bfbf      	itttt	lt
 8015f9e:	9b08      	ldrlt	r3, [sp, #32]
 8015fa0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8015fa2:	9608      	strlt	r6, [sp, #32]
 8015fa4:	1af3      	sublt	r3, r6, r3
 8015fa6:	bfb4      	ite	lt
 8015fa8:	18d2      	addlt	r2, r2, r3
 8015faa:	1b9e      	subge	r6, r3, r6
 8015fac:	9b04      	ldr	r3, [sp, #16]
 8015fae:	bfbc      	itt	lt
 8015fb0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8015fb2:	2600      	movlt	r6, #0
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	bfb7      	itett	lt
 8015fb8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8015fbc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8015fc0:	1a9d      	sublt	r5, r3, r2
 8015fc2:	2300      	movlt	r3, #0
 8015fc4:	e741      	b.n	8015e4a <_dtoa_r+0x742>
 8015fc6:	9e08      	ldr	r6, [sp, #32]
 8015fc8:	9d05      	ldr	r5, [sp, #20]
 8015fca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015fcc:	e748      	b.n	8015e60 <_dtoa_r+0x758>
 8015fce:	9a08      	ldr	r2, [sp, #32]
 8015fd0:	e770      	b.n	8015eb4 <_dtoa_r+0x7ac>
 8015fd2:	9b07      	ldr	r3, [sp, #28]
 8015fd4:	2b01      	cmp	r3, #1
 8015fd6:	dc19      	bgt.n	801600c <_dtoa_r+0x904>
 8015fd8:	9b02      	ldr	r3, [sp, #8]
 8015fda:	b9bb      	cbnz	r3, 801600c <_dtoa_r+0x904>
 8015fdc:	9b03      	ldr	r3, [sp, #12]
 8015fde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015fe2:	b99b      	cbnz	r3, 801600c <_dtoa_r+0x904>
 8015fe4:	9b03      	ldr	r3, [sp, #12]
 8015fe6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015fea:	0d1b      	lsrs	r3, r3, #20
 8015fec:	051b      	lsls	r3, r3, #20
 8015fee:	b183      	cbz	r3, 8016012 <_dtoa_r+0x90a>
 8015ff0:	9b05      	ldr	r3, [sp, #20]
 8015ff2:	3301      	adds	r3, #1
 8015ff4:	9305      	str	r3, [sp, #20]
 8015ff6:	9b06      	ldr	r3, [sp, #24]
 8015ff8:	3301      	adds	r3, #1
 8015ffa:	9306      	str	r3, [sp, #24]
 8015ffc:	f04f 0801 	mov.w	r8, #1
 8016000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016002:	2b00      	cmp	r3, #0
 8016004:	f47f af6f 	bne.w	8015ee6 <_dtoa_r+0x7de>
 8016008:	2001      	movs	r0, #1
 801600a:	e774      	b.n	8015ef6 <_dtoa_r+0x7ee>
 801600c:	f04f 0800 	mov.w	r8, #0
 8016010:	e7f6      	b.n	8016000 <_dtoa_r+0x8f8>
 8016012:	4698      	mov	r8, r3
 8016014:	e7f4      	b.n	8016000 <_dtoa_r+0x8f8>
 8016016:	d082      	beq.n	8015f1e <_dtoa_r+0x816>
 8016018:	9a05      	ldr	r2, [sp, #20]
 801601a:	331c      	adds	r3, #28
 801601c:	441a      	add	r2, r3
 801601e:	9205      	str	r2, [sp, #20]
 8016020:	9a06      	ldr	r2, [sp, #24]
 8016022:	441a      	add	r2, r3
 8016024:	441d      	add	r5, r3
 8016026:	9206      	str	r2, [sp, #24]
 8016028:	e779      	b.n	8015f1e <_dtoa_r+0x816>
 801602a:	4603      	mov	r3, r0
 801602c:	e7f4      	b.n	8016018 <_dtoa_r+0x910>
 801602e:	9b04      	ldr	r3, [sp, #16]
 8016030:	2b00      	cmp	r3, #0
 8016032:	dc37      	bgt.n	80160a4 <_dtoa_r+0x99c>
 8016034:	9b07      	ldr	r3, [sp, #28]
 8016036:	2b02      	cmp	r3, #2
 8016038:	dd34      	ble.n	80160a4 <_dtoa_r+0x99c>
 801603a:	9b04      	ldr	r3, [sp, #16]
 801603c:	9301      	str	r3, [sp, #4]
 801603e:	9b01      	ldr	r3, [sp, #4]
 8016040:	b963      	cbnz	r3, 801605c <_dtoa_r+0x954>
 8016042:	4631      	mov	r1, r6
 8016044:	2205      	movs	r2, #5
 8016046:	4620      	mov	r0, r4
 8016048:	f000 fab2 	bl	80165b0 <__multadd>
 801604c:	4601      	mov	r1, r0
 801604e:	4606      	mov	r6, r0
 8016050:	4650      	mov	r0, sl
 8016052:	f000 fd11 	bl	8016a78 <__mcmp>
 8016056:	2800      	cmp	r0, #0
 8016058:	f73f adbb 	bgt.w	8015bd2 <_dtoa_r+0x4ca>
 801605c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801605e:	9d00      	ldr	r5, [sp, #0]
 8016060:	ea6f 0b03 	mvn.w	fp, r3
 8016064:	f04f 0800 	mov.w	r8, #0
 8016068:	4631      	mov	r1, r6
 801606a:	4620      	mov	r0, r4
 801606c:	f000 fa7e 	bl	801656c <_Bfree>
 8016070:	2f00      	cmp	r7, #0
 8016072:	f43f aeab 	beq.w	8015dcc <_dtoa_r+0x6c4>
 8016076:	f1b8 0f00 	cmp.w	r8, #0
 801607a:	d005      	beq.n	8016088 <_dtoa_r+0x980>
 801607c:	45b8      	cmp	r8, r7
 801607e:	d003      	beq.n	8016088 <_dtoa_r+0x980>
 8016080:	4641      	mov	r1, r8
 8016082:	4620      	mov	r0, r4
 8016084:	f000 fa72 	bl	801656c <_Bfree>
 8016088:	4639      	mov	r1, r7
 801608a:	4620      	mov	r0, r4
 801608c:	f000 fa6e 	bl	801656c <_Bfree>
 8016090:	e69c      	b.n	8015dcc <_dtoa_r+0x6c4>
 8016092:	2600      	movs	r6, #0
 8016094:	4637      	mov	r7, r6
 8016096:	e7e1      	b.n	801605c <_dtoa_r+0x954>
 8016098:	46bb      	mov	fp, r7
 801609a:	4637      	mov	r7, r6
 801609c:	e599      	b.n	8015bd2 <_dtoa_r+0x4ca>
 801609e:	bf00      	nop
 80160a0:	40240000 	.word	0x40240000
 80160a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	f000 80c8 	beq.w	801623c <_dtoa_r+0xb34>
 80160ac:	9b04      	ldr	r3, [sp, #16]
 80160ae:	9301      	str	r3, [sp, #4]
 80160b0:	2d00      	cmp	r5, #0
 80160b2:	dd05      	ble.n	80160c0 <_dtoa_r+0x9b8>
 80160b4:	4639      	mov	r1, r7
 80160b6:	462a      	mov	r2, r5
 80160b8:	4620      	mov	r0, r4
 80160ba:	f000 fc71 	bl	80169a0 <__lshift>
 80160be:	4607      	mov	r7, r0
 80160c0:	f1b8 0f00 	cmp.w	r8, #0
 80160c4:	d05b      	beq.n	801617e <_dtoa_r+0xa76>
 80160c6:	6879      	ldr	r1, [r7, #4]
 80160c8:	4620      	mov	r0, r4
 80160ca:	f000 fa0f 	bl	80164ec <_Balloc>
 80160ce:	4605      	mov	r5, r0
 80160d0:	b928      	cbnz	r0, 80160de <_dtoa_r+0x9d6>
 80160d2:	4b83      	ldr	r3, [pc, #524]	; (80162e0 <_dtoa_r+0xbd8>)
 80160d4:	4602      	mov	r2, r0
 80160d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80160da:	f7ff bb2e 	b.w	801573a <_dtoa_r+0x32>
 80160de:	693a      	ldr	r2, [r7, #16]
 80160e0:	3202      	adds	r2, #2
 80160e2:	0092      	lsls	r2, r2, #2
 80160e4:	f107 010c 	add.w	r1, r7, #12
 80160e8:	300c      	adds	r0, #12
 80160ea:	f7ff fa70 	bl	80155ce <memcpy>
 80160ee:	2201      	movs	r2, #1
 80160f0:	4629      	mov	r1, r5
 80160f2:	4620      	mov	r0, r4
 80160f4:	f000 fc54 	bl	80169a0 <__lshift>
 80160f8:	9b00      	ldr	r3, [sp, #0]
 80160fa:	3301      	adds	r3, #1
 80160fc:	9304      	str	r3, [sp, #16]
 80160fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016102:	4413      	add	r3, r2
 8016104:	9308      	str	r3, [sp, #32]
 8016106:	9b02      	ldr	r3, [sp, #8]
 8016108:	f003 0301 	and.w	r3, r3, #1
 801610c:	46b8      	mov	r8, r7
 801610e:	9306      	str	r3, [sp, #24]
 8016110:	4607      	mov	r7, r0
 8016112:	9b04      	ldr	r3, [sp, #16]
 8016114:	4631      	mov	r1, r6
 8016116:	3b01      	subs	r3, #1
 8016118:	4650      	mov	r0, sl
 801611a:	9301      	str	r3, [sp, #4]
 801611c:	f7ff fa6c 	bl	80155f8 <quorem>
 8016120:	4641      	mov	r1, r8
 8016122:	9002      	str	r0, [sp, #8]
 8016124:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8016128:	4650      	mov	r0, sl
 801612a:	f000 fca5 	bl	8016a78 <__mcmp>
 801612e:	463a      	mov	r2, r7
 8016130:	9005      	str	r0, [sp, #20]
 8016132:	4631      	mov	r1, r6
 8016134:	4620      	mov	r0, r4
 8016136:	f000 fcbb 	bl	8016ab0 <__mdiff>
 801613a:	68c2      	ldr	r2, [r0, #12]
 801613c:	4605      	mov	r5, r0
 801613e:	bb02      	cbnz	r2, 8016182 <_dtoa_r+0xa7a>
 8016140:	4601      	mov	r1, r0
 8016142:	4650      	mov	r0, sl
 8016144:	f000 fc98 	bl	8016a78 <__mcmp>
 8016148:	4602      	mov	r2, r0
 801614a:	4629      	mov	r1, r5
 801614c:	4620      	mov	r0, r4
 801614e:	9209      	str	r2, [sp, #36]	; 0x24
 8016150:	f000 fa0c 	bl	801656c <_Bfree>
 8016154:	9b07      	ldr	r3, [sp, #28]
 8016156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016158:	9d04      	ldr	r5, [sp, #16]
 801615a:	ea43 0102 	orr.w	r1, r3, r2
 801615e:	9b06      	ldr	r3, [sp, #24]
 8016160:	4319      	orrs	r1, r3
 8016162:	d110      	bne.n	8016186 <_dtoa_r+0xa7e>
 8016164:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016168:	d029      	beq.n	80161be <_dtoa_r+0xab6>
 801616a:	9b05      	ldr	r3, [sp, #20]
 801616c:	2b00      	cmp	r3, #0
 801616e:	dd02      	ble.n	8016176 <_dtoa_r+0xa6e>
 8016170:	9b02      	ldr	r3, [sp, #8]
 8016172:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8016176:	9b01      	ldr	r3, [sp, #4]
 8016178:	f883 9000 	strb.w	r9, [r3]
 801617c:	e774      	b.n	8016068 <_dtoa_r+0x960>
 801617e:	4638      	mov	r0, r7
 8016180:	e7ba      	b.n	80160f8 <_dtoa_r+0x9f0>
 8016182:	2201      	movs	r2, #1
 8016184:	e7e1      	b.n	801614a <_dtoa_r+0xa42>
 8016186:	9b05      	ldr	r3, [sp, #20]
 8016188:	2b00      	cmp	r3, #0
 801618a:	db04      	blt.n	8016196 <_dtoa_r+0xa8e>
 801618c:	9907      	ldr	r1, [sp, #28]
 801618e:	430b      	orrs	r3, r1
 8016190:	9906      	ldr	r1, [sp, #24]
 8016192:	430b      	orrs	r3, r1
 8016194:	d120      	bne.n	80161d8 <_dtoa_r+0xad0>
 8016196:	2a00      	cmp	r2, #0
 8016198:	dded      	ble.n	8016176 <_dtoa_r+0xa6e>
 801619a:	4651      	mov	r1, sl
 801619c:	2201      	movs	r2, #1
 801619e:	4620      	mov	r0, r4
 80161a0:	f000 fbfe 	bl	80169a0 <__lshift>
 80161a4:	4631      	mov	r1, r6
 80161a6:	4682      	mov	sl, r0
 80161a8:	f000 fc66 	bl	8016a78 <__mcmp>
 80161ac:	2800      	cmp	r0, #0
 80161ae:	dc03      	bgt.n	80161b8 <_dtoa_r+0xab0>
 80161b0:	d1e1      	bne.n	8016176 <_dtoa_r+0xa6e>
 80161b2:	f019 0f01 	tst.w	r9, #1
 80161b6:	d0de      	beq.n	8016176 <_dtoa_r+0xa6e>
 80161b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80161bc:	d1d8      	bne.n	8016170 <_dtoa_r+0xa68>
 80161be:	9a01      	ldr	r2, [sp, #4]
 80161c0:	2339      	movs	r3, #57	; 0x39
 80161c2:	7013      	strb	r3, [r2, #0]
 80161c4:	462b      	mov	r3, r5
 80161c6:	461d      	mov	r5, r3
 80161c8:	3b01      	subs	r3, #1
 80161ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80161ce:	2a39      	cmp	r2, #57	; 0x39
 80161d0:	d06c      	beq.n	80162ac <_dtoa_r+0xba4>
 80161d2:	3201      	adds	r2, #1
 80161d4:	701a      	strb	r2, [r3, #0]
 80161d6:	e747      	b.n	8016068 <_dtoa_r+0x960>
 80161d8:	2a00      	cmp	r2, #0
 80161da:	dd07      	ble.n	80161ec <_dtoa_r+0xae4>
 80161dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80161e0:	d0ed      	beq.n	80161be <_dtoa_r+0xab6>
 80161e2:	9a01      	ldr	r2, [sp, #4]
 80161e4:	f109 0301 	add.w	r3, r9, #1
 80161e8:	7013      	strb	r3, [r2, #0]
 80161ea:	e73d      	b.n	8016068 <_dtoa_r+0x960>
 80161ec:	9b04      	ldr	r3, [sp, #16]
 80161ee:	9a08      	ldr	r2, [sp, #32]
 80161f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80161f4:	4293      	cmp	r3, r2
 80161f6:	d043      	beq.n	8016280 <_dtoa_r+0xb78>
 80161f8:	4651      	mov	r1, sl
 80161fa:	2300      	movs	r3, #0
 80161fc:	220a      	movs	r2, #10
 80161fe:	4620      	mov	r0, r4
 8016200:	f000 f9d6 	bl	80165b0 <__multadd>
 8016204:	45b8      	cmp	r8, r7
 8016206:	4682      	mov	sl, r0
 8016208:	f04f 0300 	mov.w	r3, #0
 801620c:	f04f 020a 	mov.w	r2, #10
 8016210:	4641      	mov	r1, r8
 8016212:	4620      	mov	r0, r4
 8016214:	d107      	bne.n	8016226 <_dtoa_r+0xb1e>
 8016216:	f000 f9cb 	bl	80165b0 <__multadd>
 801621a:	4680      	mov	r8, r0
 801621c:	4607      	mov	r7, r0
 801621e:	9b04      	ldr	r3, [sp, #16]
 8016220:	3301      	adds	r3, #1
 8016222:	9304      	str	r3, [sp, #16]
 8016224:	e775      	b.n	8016112 <_dtoa_r+0xa0a>
 8016226:	f000 f9c3 	bl	80165b0 <__multadd>
 801622a:	4639      	mov	r1, r7
 801622c:	4680      	mov	r8, r0
 801622e:	2300      	movs	r3, #0
 8016230:	220a      	movs	r2, #10
 8016232:	4620      	mov	r0, r4
 8016234:	f000 f9bc 	bl	80165b0 <__multadd>
 8016238:	4607      	mov	r7, r0
 801623a:	e7f0      	b.n	801621e <_dtoa_r+0xb16>
 801623c:	9b04      	ldr	r3, [sp, #16]
 801623e:	9301      	str	r3, [sp, #4]
 8016240:	9d00      	ldr	r5, [sp, #0]
 8016242:	4631      	mov	r1, r6
 8016244:	4650      	mov	r0, sl
 8016246:	f7ff f9d7 	bl	80155f8 <quorem>
 801624a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801624e:	9b00      	ldr	r3, [sp, #0]
 8016250:	f805 9b01 	strb.w	r9, [r5], #1
 8016254:	1aea      	subs	r2, r5, r3
 8016256:	9b01      	ldr	r3, [sp, #4]
 8016258:	4293      	cmp	r3, r2
 801625a:	dd07      	ble.n	801626c <_dtoa_r+0xb64>
 801625c:	4651      	mov	r1, sl
 801625e:	2300      	movs	r3, #0
 8016260:	220a      	movs	r2, #10
 8016262:	4620      	mov	r0, r4
 8016264:	f000 f9a4 	bl	80165b0 <__multadd>
 8016268:	4682      	mov	sl, r0
 801626a:	e7ea      	b.n	8016242 <_dtoa_r+0xb3a>
 801626c:	9b01      	ldr	r3, [sp, #4]
 801626e:	2b00      	cmp	r3, #0
 8016270:	bfc8      	it	gt
 8016272:	461d      	movgt	r5, r3
 8016274:	9b00      	ldr	r3, [sp, #0]
 8016276:	bfd8      	it	le
 8016278:	2501      	movle	r5, #1
 801627a:	441d      	add	r5, r3
 801627c:	f04f 0800 	mov.w	r8, #0
 8016280:	4651      	mov	r1, sl
 8016282:	2201      	movs	r2, #1
 8016284:	4620      	mov	r0, r4
 8016286:	f000 fb8b 	bl	80169a0 <__lshift>
 801628a:	4631      	mov	r1, r6
 801628c:	4682      	mov	sl, r0
 801628e:	f000 fbf3 	bl	8016a78 <__mcmp>
 8016292:	2800      	cmp	r0, #0
 8016294:	dc96      	bgt.n	80161c4 <_dtoa_r+0xabc>
 8016296:	d102      	bne.n	801629e <_dtoa_r+0xb96>
 8016298:	f019 0f01 	tst.w	r9, #1
 801629c:	d192      	bne.n	80161c4 <_dtoa_r+0xabc>
 801629e:	462b      	mov	r3, r5
 80162a0:	461d      	mov	r5, r3
 80162a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80162a6:	2a30      	cmp	r2, #48	; 0x30
 80162a8:	d0fa      	beq.n	80162a0 <_dtoa_r+0xb98>
 80162aa:	e6dd      	b.n	8016068 <_dtoa_r+0x960>
 80162ac:	9a00      	ldr	r2, [sp, #0]
 80162ae:	429a      	cmp	r2, r3
 80162b0:	d189      	bne.n	80161c6 <_dtoa_r+0xabe>
 80162b2:	f10b 0b01 	add.w	fp, fp, #1
 80162b6:	2331      	movs	r3, #49	; 0x31
 80162b8:	e796      	b.n	80161e8 <_dtoa_r+0xae0>
 80162ba:	4b0a      	ldr	r3, [pc, #40]	; (80162e4 <_dtoa_r+0xbdc>)
 80162bc:	f7ff ba99 	b.w	80157f2 <_dtoa_r+0xea>
 80162c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	f47f aa6d 	bne.w	80157a2 <_dtoa_r+0x9a>
 80162c8:	4b07      	ldr	r3, [pc, #28]	; (80162e8 <_dtoa_r+0xbe0>)
 80162ca:	f7ff ba92 	b.w	80157f2 <_dtoa_r+0xea>
 80162ce:	9b01      	ldr	r3, [sp, #4]
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	dcb5      	bgt.n	8016240 <_dtoa_r+0xb38>
 80162d4:	9b07      	ldr	r3, [sp, #28]
 80162d6:	2b02      	cmp	r3, #2
 80162d8:	f73f aeb1 	bgt.w	801603e <_dtoa_r+0x936>
 80162dc:	e7b0      	b.n	8016240 <_dtoa_r+0xb38>
 80162de:	bf00      	nop
 80162e0:	0801c11b 	.word	0x0801c11b
 80162e4:	0801c400 	.word	0x0801c400
 80162e8:	0801c09f 	.word	0x0801c09f

080162ec <_free_r>:
 80162ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80162ee:	2900      	cmp	r1, #0
 80162f0:	d044      	beq.n	801637c <_free_r+0x90>
 80162f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162f6:	9001      	str	r0, [sp, #4]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	f1a1 0404 	sub.w	r4, r1, #4
 80162fe:	bfb8      	it	lt
 8016300:	18e4      	addlt	r4, r4, r3
 8016302:	f000 f8e7 	bl	80164d4 <__malloc_lock>
 8016306:	4a1e      	ldr	r2, [pc, #120]	; (8016380 <_free_r+0x94>)
 8016308:	9801      	ldr	r0, [sp, #4]
 801630a:	6813      	ldr	r3, [r2, #0]
 801630c:	b933      	cbnz	r3, 801631c <_free_r+0x30>
 801630e:	6063      	str	r3, [r4, #4]
 8016310:	6014      	str	r4, [r2, #0]
 8016312:	b003      	add	sp, #12
 8016314:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016318:	f000 b8e2 	b.w	80164e0 <__malloc_unlock>
 801631c:	42a3      	cmp	r3, r4
 801631e:	d908      	bls.n	8016332 <_free_r+0x46>
 8016320:	6825      	ldr	r5, [r4, #0]
 8016322:	1961      	adds	r1, r4, r5
 8016324:	428b      	cmp	r3, r1
 8016326:	bf01      	itttt	eq
 8016328:	6819      	ldreq	r1, [r3, #0]
 801632a:	685b      	ldreq	r3, [r3, #4]
 801632c:	1949      	addeq	r1, r1, r5
 801632e:	6021      	streq	r1, [r4, #0]
 8016330:	e7ed      	b.n	801630e <_free_r+0x22>
 8016332:	461a      	mov	r2, r3
 8016334:	685b      	ldr	r3, [r3, #4]
 8016336:	b10b      	cbz	r3, 801633c <_free_r+0x50>
 8016338:	42a3      	cmp	r3, r4
 801633a:	d9fa      	bls.n	8016332 <_free_r+0x46>
 801633c:	6811      	ldr	r1, [r2, #0]
 801633e:	1855      	adds	r5, r2, r1
 8016340:	42a5      	cmp	r5, r4
 8016342:	d10b      	bne.n	801635c <_free_r+0x70>
 8016344:	6824      	ldr	r4, [r4, #0]
 8016346:	4421      	add	r1, r4
 8016348:	1854      	adds	r4, r2, r1
 801634a:	42a3      	cmp	r3, r4
 801634c:	6011      	str	r1, [r2, #0]
 801634e:	d1e0      	bne.n	8016312 <_free_r+0x26>
 8016350:	681c      	ldr	r4, [r3, #0]
 8016352:	685b      	ldr	r3, [r3, #4]
 8016354:	6053      	str	r3, [r2, #4]
 8016356:	440c      	add	r4, r1
 8016358:	6014      	str	r4, [r2, #0]
 801635a:	e7da      	b.n	8016312 <_free_r+0x26>
 801635c:	d902      	bls.n	8016364 <_free_r+0x78>
 801635e:	230c      	movs	r3, #12
 8016360:	6003      	str	r3, [r0, #0]
 8016362:	e7d6      	b.n	8016312 <_free_r+0x26>
 8016364:	6825      	ldr	r5, [r4, #0]
 8016366:	1961      	adds	r1, r4, r5
 8016368:	428b      	cmp	r3, r1
 801636a:	bf04      	itt	eq
 801636c:	6819      	ldreq	r1, [r3, #0]
 801636e:	685b      	ldreq	r3, [r3, #4]
 8016370:	6063      	str	r3, [r4, #4]
 8016372:	bf04      	itt	eq
 8016374:	1949      	addeq	r1, r1, r5
 8016376:	6021      	streq	r1, [r4, #0]
 8016378:	6054      	str	r4, [r2, #4]
 801637a:	e7ca      	b.n	8016312 <_free_r+0x26>
 801637c:	b003      	add	sp, #12
 801637e:	bd30      	pop	{r4, r5, pc}
 8016380:	20009050 	.word	0x20009050

08016384 <malloc>:
 8016384:	4b02      	ldr	r3, [pc, #8]	; (8016390 <malloc+0xc>)
 8016386:	4601      	mov	r1, r0
 8016388:	6818      	ldr	r0, [r3, #0]
 801638a:	f000 b823 	b.w	80163d4 <_malloc_r>
 801638e:	bf00      	nop
 8016390:	20000070 	.word	0x20000070

08016394 <sbrk_aligned>:
 8016394:	b570      	push	{r4, r5, r6, lr}
 8016396:	4e0e      	ldr	r6, [pc, #56]	; (80163d0 <sbrk_aligned+0x3c>)
 8016398:	460c      	mov	r4, r1
 801639a:	6831      	ldr	r1, [r6, #0]
 801639c:	4605      	mov	r5, r0
 801639e:	b911      	cbnz	r1, 80163a6 <sbrk_aligned+0x12>
 80163a0:	f002 f99c 	bl	80186dc <_sbrk_r>
 80163a4:	6030      	str	r0, [r6, #0]
 80163a6:	4621      	mov	r1, r4
 80163a8:	4628      	mov	r0, r5
 80163aa:	f002 f997 	bl	80186dc <_sbrk_r>
 80163ae:	1c43      	adds	r3, r0, #1
 80163b0:	d00a      	beq.n	80163c8 <sbrk_aligned+0x34>
 80163b2:	1cc4      	adds	r4, r0, #3
 80163b4:	f024 0403 	bic.w	r4, r4, #3
 80163b8:	42a0      	cmp	r0, r4
 80163ba:	d007      	beq.n	80163cc <sbrk_aligned+0x38>
 80163bc:	1a21      	subs	r1, r4, r0
 80163be:	4628      	mov	r0, r5
 80163c0:	f002 f98c 	bl	80186dc <_sbrk_r>
 80163c4:	3001      	adds	r0, #1
 80163c6:	d101      	bne.n	80163cc <sbrk_aligned+0x38>
 80163c8:	f04f 34ff 	mov.w	r4, #4294967295
 80163cc:	4620      	mov	r0, r4
 80163ce:	bd70      	pop	{r4, r5, r6, pc}
 80163d0:	20009054 	.word	0x20009054

080163d4 <_malloc_r>:
 80163d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163d8:	1ccd      	adds	r5, r1, #3
 80163da:	f025 0503 	bic.w	r5, r5, #3
 80163de:	3508      	adds	r5, #8
 80163e0:	2d0c      	cmp	r5, #12
 80163e2:	bf38      	it	cc
 80163e4:	250c      	movcc	r5, #12
 80163e6:	2d00      	cmp	r5, #0
 80163e8:	4607      	mov	r7, r0
 80163ea:	db01      	blt.n	80163f0 <_malloc_r+0x1c>
 80163ec:	42a9      	cmp	r1, r5
 80163ee:	d905      	bls.n	80163fc <_malloc_r+0x28>
 80163f0:	230c      	movs	r3, #12
 80163f2:	603b      	str	r3, [r7, #0]
 80163f4:	2600      	movs	r6, #0
 80163f6:	4630      	mov	r0, r6
 80163f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80163fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80164d0 <_malloc_r+0xfc>
 8016400:	f000 f868 	bl	80164d4 <__malloc_lock>
 8016404:	f8d8 3000 	ldr.w	r3, [r8]
 8016408:	461c      	mov	r4, r3
 801640a:	bb5c      	cbnz	r4, 8016464 <_malloc_r+0x90>
 801640c:	4629      	mov	r1, r5
 801640e:	4638      	mov	r0, r7
 8016410:	f7ff ffc0 	bl	8016394 <sbrk_aligned>
 8016414:	1c43      	adds	r3, r0, #1
 8016416:	4604      	mov	r4, r0
 8016418:	d155      	bne.n	80164c6 <_malloc_r+0xf2>
 801641a:	f8d8 4000 	ldr.w	r4, [r8]
 801641e:	4626      	mov	r6, r4
 8016420:	2e00      	cmp	r6, #0
 8016422:	d145      	bne.n	80164b0 <_malloc_r+0xdc>
 8016424:	2c00      	cmp	r4, #0
 8016426:	d048      	beq.n	80164ba <_malloc_r+0xe6>
 8016428:	6823      	ldr	r3, [r4, #0]
 801642a:	4631      	mov	r1, r6
 801642c:	4638      	mov	r0, r7
 801642e:	eb04 0903 	add.w	r9, r4, r3
 8016432:	f002 f953 	bl	80186dc <_sbrk_r>
 8016436:	4581      	cmp	r9, r0
 8016438:	d13f      	bne.n	80164ba <_malloc_r+0xe6>
 801643a:	6821      	ldr	r1, [r4, #0]
 801643c:	1a6d      	subs	r5, r5, r1
 801643e:	4629      	mov	r1, r5
 8016440:	4638      	mov	r0, r7
 8016442:	f7ff ffa7 	bl	8016394 <sbrk_aligned>
 8016446:	3001      	adds	r0, #1
 8016448:	d037      	beq.n	80164ba <_malloc_r+0xe6>
 801644a:	6823      	ldr	r3, [r4, #0]
 801644c:	442b      	add	r3, r5
 801644e:	6023      	str	r3, [r4, #0]
 8016450:	f8d8 3000 	ldr.w	r3, [r8]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d038      	beq.n	80164ca <_malloc_r+0xf6>
 8016458:	685a      	ldr	r2, [r3, #4]
 801645a:	42a2      	cmp	r2, r4
 801645c:	d12b      	bne.n	80164b6 <_malloc_r+0xe2>
 801645e:	2200      	movs	r2, #0
 8016460:	605a      	str	r2, [r3, #4]
 8016462:	e00f      	b.n	8016484 <_malloc_r+0xb0>
 8016464:	6822      	ldr	r2, [r4, #0]
 8016466:	1b52      	subs	r2, r2, r5
 8016468:	d41f      	bmi.n	80164aa <_malloc_r+0xd6>
 801646a:	2a0b      	cmp	r2, #11
 801646c:	d917      	bls.n	801649e <_malloc_r+0xca>
 801646e:	1961      	adds	r1, r4, r5
 8016470:	42a3      	cmp	r3, r4
 8016472:	6025      	str	r5, [r4, #0]
 8016474:	bf18      	it	ne
 8016476:	6059      	strne	r1, [r3, #4]
 8016478:	6863      	ldr	r3, [r4, #4]
 801647a:	bf08      	it	eq
 801647c:	f8c8 1000 	streq.w	r1, [r8]
 8016480:	5162      	str	r2, [r4, r5]
 8016482:	604b      	str	r3, [r1, #4]
 8016484:	4638      	mov	r0, r7
 8016486:	f104 060b 	add.w	r6, r4, #11
 801648a:	f000 f829 	bl	80164e0 <__malloc_unlock>
 801648e:	f026 0607 	bic.w	r6, r6, #7
 8016492:	1d23      	adds	r3, r4, #4
 8016494:	1af2      	subs	r2, r6, r3
 8016496:	d0ae      	beq.n	80163f6 <_malloc_r+0x22>
 8016498:	1b9b      	subs	r3, r3, r6
 801649a:	50a3      	str	r3, [r4, r2]
 801649c:	e7ab      	b.n	80163f6 <_malloc_r+0x22>
 801649e:	42a3      	cmp	r3, r4
 80164a0:	6862      	ldr	r2, [r4, #4]
 80164a2:	d1dd      	bne.n	8016460 <_malloc_r+0x8c>
 80164a4:	f8c8 2000 	str.w	r2, [r8]
 80164a8:	e7ec      	b.n	8016484 <_malloc_r+0xb0>
 80164aa:	4623      	mov	r3, r4
 80164ac:	6864      	ldr	r4, [r4, #4]
 80164ae:	e7ac      	b.n	801640a <_malloc_r+0x36>
 80164b0:	4634      	mov	r4, r6
 80164b2:	6876      	ldr	r6, [r6, #4]
 80164b4:	e7b4      	b.n	8016420 <_malloc_r+0x4c>
 80164b6:	4613      	mov	r3, r2
 80164b8:	e7cc      	b.n	8016454 <_malloc_r+0x80>
 80164ba:	230c      	movs	r3, #12
 80164bc:	603b      	str	r3, [r7, #0]
 80164be:	4638      	mov	r0, r7
 80164c0:	f000 f80e 	bl	80164e0 <__malloc_unlock>
 80164c4:	e797      	b.n	80163f6 <_malloc_r+0x22>
 80164c6:	6025      	str	r5, [r4, #0]
 80164c8:	e7dc      	b.n	8016484 <_malloc_r+0xb0>
 80164ca:	605b      	str	r3, [r3, #4]
 80164cc:	deff      	udf	#255	; 0xff
 80164ce:	bf00      	nop
 80164d0:	20009050 	.word	0x20009050

080164d4 <__malloc_lock>:
 80164d4:	4801      	ldr	r0, [pc, #4]	; (80164dc <__malloc_lock+0x8>)
 80164d6:	f7ff b878 	b.w	80155ca <__retarget_lock_acquire_recursive>
 80164da:	bf00      	nop
 80164dc:	2000904c 	.word	0x2000904c

080164e0 <__malloc_unlock>:
 80164e0:	4801      	ldr	r0, [pc, #4]	; (80164e8 <__malloc_unlock+0x8>)
 80164e2:	f7ff b873 	b.w	80155cc <__retarget_lock_release_recursive>
 80164e6:	bf00      	nop
 80164e8:	2000904c 	.word	0x2000904c

080164ec <_Balloc>:
 80164ec:	b570      	push	{r4, r5, r6, lr}
 80164ee:	69c6      	ldr	r6, [r0, #28]
 80164f0:	4604      	mov	r4, r0
 80164f2:	460d      	mov	r5, r1
 80164f4:	b976      	cbnz	r6, 8016514 <_Balloc+0x28>
 80164f6:	2010      	movs	r0, #16
 80164f8:	f7ff ff44 	bl	8016384 <malloc>
 80164fc:	4602      	mov	r2, r0
 80164fe:	61e0      	str	r0, [r4, #28]
 8016500:	b920      	cbnz	r0, 801650c <_Balloc+0x20>
 8016502:	4b18      	ldr	r3, [pc, #96]	; (8016564 <_Balloc+0x78>)
 8016504:	4818      	ldr	r0, [pc, #96]	; (8016568 <_Balloc+0x7c>)
 8016506:	216b      	movs	r1, #107	; 0x6b
 8016508:	f002 f902 	bl	8018710 <__assert_func>
 801650c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016510:	6006      	str	r6, [r0, #0]
 8016512:	60c6      	str	r6, [r0, #12]
 8016514:	69e6      	ldr	r6, [r4, #28]
 8016516:	68f3      	ldr	r3, [r6, #12]
 8016518:	b183      	cbz	r3, 801653c <_Balloc+0x50>
 801651a:	69e3      	ldr	r3, [r4, #28]
 801651c:	68db      	ldr	r3, [r3, #12]
 801651e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016522:	b9b8      	cbnz	r0, 8016554 <_Balloc+0x68>
 8016524:	2101      	movs	r1, #1
 8016526:	fa01 f605 	lsl.w	r6, r1, r5
 801652a:	1d72      	adds	r2, r6, #5
 801652c:	0092      	lsls	r2, r2, #2
 801652e:	4620      	mov	r0, r4
 8016530:	f002 f90c 	bl	801874c <_calloc_r>
 8016534:	b160      	cbz	r0, 8016550 <_Balloc+0x64>
 8016536:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801653a:	e00e      	b.n	801655a <_Balloc+0x6e>
 801653c:	2221      	movs	r2, #33	; 0x21
 801653e:	2104      	movs	r1, #4
 8016540:	4620      	mov	r0, r4
 8016542:	f002 f903 	bl	801874c <_calloc_r>
 8016546:	69e3      	ldr	r3, [r4, #28]
 8016548:	60f0      	str	r0, [r6, #12]
 801654a:	68db      	ldr	r3, [r3, #12]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d1e4      	bne.n	801651a <_Balloc+0x2e>
 8016550:	2000      	movs	r0, #0
 8016552:	bd70      	pop	{r4, r5, r6, pc}
 8016554:	6802      	ldr	r2, [r0, #0]
 8016556:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801655a:	2300      	movs	r3, #0
 801655c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016560:	e7f7      	b.n	8016552 <_Balloc+0x66>
 8016562:	bf00      	nop
 8016564:	0801c0ac 	.word	0x0801c0ac
 8016568:	0801c12c 	.word	0x0801c12c

0801656c <_Bfree>:
 801656c:	b570      	push	{r4, r5, r6, lr}
 801656e:	69c6      	ldr	r6, [r0, #28]
 8016570:	4605      	mov	r5, r0
 8016572:	460c      	mov	r4, r1
 8016574:	b976      	cbnz	r6, 8016594 <_Bfree+0x28>
 8016576:	2010      	movs	r0, #16
 8016578:	f7ff ff04 	bl	8016384 <malloc>
 801657c:	4602      	mov	r2, r0
 801657e:	61e8      	str	r0, [r5, #28]
 8016580:	b920      	cbnz	r0, 801658c <_Bfree+0x20>
 8016582:	4b09      	ldr	r3, [pc, #36]	; (80165a8 <_Bfree+0x3c>)
 8016584:	4809      	ldr	r0, [pc, #36]	; (80165ac <_Bfree+0x40>)
 8016586:	218f      	movs	r1, #143	; 0x8f
 8016588:	f002 f8c2 	bl	8018710 <__assert_func>
 801658c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016590:	6006      	str	r6, [r0, #0]
 8016592:	60c6      	str	r6, [r0, #12]
 8016594:	b13c      	cbz	r4, 80165a6 <_Bfree+0x3a>
 8016596:	69eb      	ldr	r3, [r5, #28]
 8016598:	6862      	ldr	r2, [r4, #4]
 801659a:	68db      	ldr	r3, [r3, #12]
 801659c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80165a0:	6021      	str	r1, [r4, #0]
 80165a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80165a6:	bd70      	pop	{r4, r5, r6, pc}
 80165a8:	0801c0ac 	.word	0x0801c0ac
 80165ac:	0801c12c 	.word	0x0801c12c

080165b0 <__multadd>:
 80165b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165b4:	690d      	ldr	r5, [r1, #16]
 80165b6:	4607      	mov	r7, r0
 80165b8:	460c      	mov	r4, r1
 80165ba:	461e      	mov	r6, r3
 80165bc:	f101 0c14 	add.w	ip, r1, #20
 80165c0:	2000      	movs	r0, #0
 80165c2:	f8dc 3000 	ldr.w	r3, [ip]
 80165c6:	b299      	uxth	r1, r3
 80165c8:	fb02 6101 	mla	r1, r2, r1, r6
 80165cc:	0c1e      	lsrs	r6, r3, #16
 80165ce:	0c0b      	lsrs	r3, r1, #16
 80165d0:	fb02 3306 	mla	r3, r2, r6, r3
 80165d4:	b289      	uxth	r1, r1
 80165d6:	3001      	adds	r0, #1
 80165d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80165dc:	4285      	cmp	r5, r0
 80165de:	f84c 1b04 	str.w	r1, [ip], #4
 80165e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80165e6:	dcec      	bgt.n	80165c2 <__multadd+0x12>
 80165e8:	b30e      	cbz	r6, 801662e <__multadd+0x7e>
 80165ea:	68a3      	ldr	r3, [r4, #8]
 80165ec:	42ab      	cmp	r3, r5
 80165ee:	dc19      	bgt.n	8016624 <__multadd+0x74>
 80165f0:	6861      	ldr	r1, [r4, #4]
 80165f2:	4638      	mov	r0, r7
 80165f4:	3101      	adds	r1, #1
 80165f6:	f7ff ff79 	bl	80164ec <_Balloc>
 80165fa:	4680      	mov	r8, r0
 80165fc:	b928      	cbnz	r0, 801660a <__multadd+0x5a>
 80165fe:	4602      	mov	r2, r0
 8016600:	4b0c      	ldr	r3, [pc, #48]	; (8016634 <__multadd+0x84>)
 8016602:	480d      	ldr	r0, [pc, #52]	; (8016638 <__multadd+0x88>)
 8016604:	21ba      	movs	r1, #186	; 0xba
 8016606:	f002 f883 	bl	8018710 <__assert_func>
 801660a:	6922      	ldr	r2, [r4, #16]
 801660c:	3202      	adds	r2, #2
 801660e:	f104 010c 	add.w	r1, r4, #12
 8016612:	0092      	lsls	r2, r2, #2
 8016614:	300c      	adds	r0, #12
 8016616:	f7fe ffda 	bl	80155ce <memcpy>
 801661a:	4621      	mov	r1, r4
 801661c:	4638      	mov	r0, r7
 801661e:	f7ff ffa5 	bl	801656c <_Bfree>
 8016622:	4644      	mov	r4, r8
 8016624:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016628:	3501      	adds	r5, #1
 801662a:	615e      	str	r6, [r3, #20]
 801662c:	6125      	str	r5, [r4, #16]
 801662e:	4620      	mov	r0, r4
 8016630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016634:	0801c11b 	.word	0x0801c11b
 8016638:	0801c12c 	.word	0x0801c12c

0801663c <__s2b>:
 801663c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016640:	460c      	mov	r4, r1
 8016642:	4615      	mov	r5, r2
 8016644:	461f      	mov	r7, r3
 8016646:	2209      	movs	r2, #9
 8016648:	3308      	adds	r3, #8
 801664a:	4606      	mov	r6, r0
 801664c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016650:	2100      	movs	r1, #0
 8016652:	2201      	movs	r2, #1
 8016654:	429a      	cmp	r2, r3
 8016656:	db09      	blt.n	801666c <__s2b+0x30>
 8016658:	4630      	mov	r0, r6
 801665a:	f7ff ff47 	bl	80164ec <_Balloc>
 801665e:	b940      	cbnz	r0, 8016672 <__s2b+0x36>
 8016660:	4602      	mov	r2, r0
 8016662:	4b19      	ldr	r3, [pc, #100]	; (80166c8 <__s2b+0x8c>)
 8016664:	4819      	ldr	r0, [pc, #100]	; (80166cc <__s2b+0x90>)
 8016666:	21d3      	movs	r1, #211	; 0xd3
 8016668:	f002 f852 	bl	8018710 <__assert_func>
 801666c:	0052      	lsls	r2, r2, #1
 801666e:	3101      	adds	r1, #1
 8016670:	e7f0      	b.n	8016654 <__s2b+0x18>
 8016672:	9b08      	ldr	r3, [sp, #32]
 8016674:	6143      	str	r3, [r0, #20]
 8016676:	2d09      	cmp	r5, #9
 8016678:	f04f 0301 	mov.w	r3, #1
 801667c:	6103      	str	r3, [r0, #16]
 801667e:	dd16      	ble.n	80166ae <__s2b+0x72>
 8016680:	f104 0909 	add.w	r9, r4, #9
 8016684:	46c8      	mov	r8, r9
 8016686:	442c      	add	r4, r5
 8016688:	f818 3b01 	ldrb.w	r3, [r8], #1
 801668c:	4601      	mov	r1, r0
 801668e:	3b30      	subs	r3, #48	; 0x30
 8016690:	220a      	movs	r2, #10
 8016692:	4630      	mov	r0, r6
 8016694:	f7ff ff8c 	bl	80165b0 <__multadd>
 8016698:	45a0      	cmp	r8, r4
 801669a:	d1f5      	bne.n	8016688 <__s2b+0x4c>
 801669c:	f1a5 0408 	sub.w	r4, r5, #8
 80166a0:	444c      	add	r4, r9
 80166a2:	1b2d      	subs	r5, r5, r4
 80166a4:	1963      	adds	r3, r4, r5
 80166a6:	42bb      	cmp	r3, r7
 80166a8:	db04      	blt.n	80166b4 <__s2b+0x78>
 80166aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166ae:	340a      	adds	r4, #10
 80166b0:	2509      	movs	r5, #9
 80166b2:	e7f6      	b.n	80166a2 <__s2b+0x66>
 80166b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80166b8:	4601      	mov	r1, r0
 80166ba:	3b30      	subs	r3, #48	; 0x30
 80166bc:	220a      	movs	r2, #10
 80166be:	4630      	mov	r0, r6
 80166c0:	f7ff ff76 	bl	80165b0 <__multadd>
 80166c4:	e7ee      	b.n	80166a4 <__s2b+0x68>
 80166c6:	bf00      	nop
 80166c8:	0801c11b 	.word	0x0801c11b
 80166cc:	0801c12c 	.word	0x0801c12c

080166d0 <__hi0bits>:
 80166d0:	0c03      	lsrs	r3, r0, #16
 80166d2:	041b      	lsls	r3, r3, #16
 80166d4:	b9d3      	cbnz	r3, 801670c <__hi0bits+0x3c>
 80166d6:	0400      	lsls	r0, r0, #16
 80166d8:	2310      	movs	r3, #16
 80166da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80166de:	bf04      	itt	eq
 80166e0:	0200      	lsleq	r0, r0, #8
 80166e2:	3308      	addeq	r3, #8
 80166e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80166e8:	bf04      	itt	eq
 80166ea:	0100      	lsleq	r0, r0, #4
 80166ec:	3304      	addeq	r3, #4
 80166ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80166f2:	bf04      	itt	eq
 80166f4:	0080      	lsleq	r0, r0, #2
 80166f6:	3302      	addeq	r3, #2
 80166f8:	2800      	cmp	r0, #0
 80166fa:	db05      	blt.n	8016708 <__hi0bits+0x38>
 80166fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016700:	f103 0301 	add.w	r3, r3, #1
 8016704:	bf08      	it	eq
 8016706:	2320      	moveq	r3, #32
 8016708:	4618      	mov	r0, r3
 801670a:	4770      	bx	lr
 801670c:	2300      	movs	r3, #0
 801670e:	e7e4      	b.n	80166da <__hi0bits+0xa>

08016710 <__lo0bits>:
 8016710:	6803      	ldr	r3, [r0, #0]
 8016712:	f013 0207 	ands.w	r2, r3, #7
 8016716:	d00c      	beq.n	8016732 <__lo0bits+0x22>
 8016718:	07d9      	lsls	r1, r3, #31
 801671a:	d422      	bmi.n	8016762 <__lo0bits+0x52>
 801671c:	079a      	lsls	r2, r3, #30
 801671e:	bf49      	itett	mi
 8016720:	085b      	lsrmi	r3, r3, #1
 8016722:	089b      	lsrpl	r3, r3, #2
 8016724:	6003      	strmi	r3, [r0, #0]
 8016726:	2201      	movmi	r2, #1
 8016728:	bf5c      	itt	pl
 801672a:	6003      	strpl	r3, [r0, #0]
 801672c:	2202      	movpl	r2, #2
 801672e:	4610      	mov	r0, r2
 8016730:	4770      	bx	lr
 8016732:	b299      	uxth	r1, r3
 8016734:	b909      	cbnz	r1, 801673a <__lo0bits+0x2a>
 8016736:	0c1b      	lsrs	r3, r3, #16
 8016738:	2210      	movs	r2, #16
 801673a:	b2d9      	uxtb	r1, r3
 801673c:	b909      	cbnz	r1, 8016742 <__lo0bits+0x32>
 801673e:	3208      	adds	r2, #8
 8016740:	0a1b      	lsrs	r3, r3, #8
 8016742:	0719      	lsls	r1, r3, #28
 8016744:	bf04      	itt	eq
 8016746:	091b      	lsreq	r3, r3, #4
 8016748:	3204      	addeq	r2, #4
 801674a:	0799      	lsls	r1, r3, #30
 801674c:	bf04      	itt	eq
 801674e:	089b      	lsreq	r3, r3, #2
 8016750:	3202      	addeq	r2, #2
 8016752:	07d9      	lsls	r1, r3, #31
 8016754:	d403      	bmi.n	801675e <__lo0bits+0x4e>
 8016756:	085b      	lsrs	r3, r3, #1
 8016758:	f102 0201 	add.w	r2, r2, #1
 801675c:	d003      	beq.n	8016766 <__lo0bits+0x56>
 801675e:	6003      	str	r3, [r0, #0]
 8016760:	e7e5      	b.n	801672e <__lo0bits+0x1e>
 8016762:	2200      	movs	r2, #0
 8016764:	e7e3      	b.n	801672e <__lo0bits+0x1e>
 8016766:	2220      	movs	r2, #32
 8016768:	e7e1      	b.n	801672e <__lo0bits+0x1e>
	...

0801676c <__i2b>:
 801676c:	b510      	push	{r4, lr}
 801676e:	460c      	mov	r4, r1
 8016770:	2101      	movs	r1, #1
 8016772:	f7ff febb 	bl	80164ec <_Balloc>
 8016776:	4602      	mov	r2, r0
 8016778:	b928      	cbnz	r0, 8016786 <__i2b+0x1a>
 801677a:	4b05      	ldr	r3, [pc, #20]	; (8016790 <__i2b+0x24>)
 801677c:	4805      	ldr	r0, [pc, #20]	; (8016794 <__i2b+0x28>)
 801677e:	f240 1145 	movw	r1, #325	; 0x145
 8016782:	f001 ffc5 	bl	8018710 <__assert_func>
 8016786:	2301      	movs	r3, #1
 8016788:	6144      	str	r4, [r0, #20]
 801678a:	6103      	str	r3, [r0, #16]
 801678c:	bd10      	pop	{r4, pc}
 801678e:	bf00      	nop
 8016790:	0801c11b 	.word	0x0801c11b
 8016794:	0801c12c 	.word	0x0801c12c

08016798 <__multiply>:
 8016798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801679c:	4691      	mov	r9, r2
 801679e:	690a      	ldr	r2, [r1, #16]
 80167a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80167a4:	429a      	cmp	r2, r3
 80167a6:	bfb8      	it	lt
 80167a8:	460b      	movlt	r3, r1
 80167aa:	460c      	mov	r4, r1
 80167ac:	bfbc      	itt	lt
 80167ae:	464c      	movlt	r4, r9
 80167b0:	4699      	movlt	r9, r3
 80167b2:	6927      	ldr	r7, [r4, #16]
 80167b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80167b8:	68a3      	ldr	r3, [r4, #8]
 80167ba:	6861      	ldr	r1, [r4, #4]
 80167bc:	eb07 060a 	add.w	r6, r7, sl
 80167c0:	42b3      	cmp	r3, r6
 80167c2:	b085      	sub	sp, #20
 80167c4:	bfb8      	it	lt
 80167c6:	3101      	addlt	r1, #1
 80167c8:	f7ff fe90 	bl	80164ec <_Balloc>
 80167cc:	b930      	cbnz	r0, 80167dc <__multiply+0x44>
 80167ce:	4602      	mov	r2, r0
 80167d0:	4b44      	ldr	r3, [pc, #272]	; (80168e4 <__multiply+0x14c>)
 80167d2:	4845      	ldr	r0, [pc, #276]	; (80168e8 <__multiply+0x150>)
 80167d4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80167d8:	f001 ff9a 	bl	8018710 <__assert_func>
 80167dc:	f100 0514 	add.w	r5, r0, #20
 80167e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80167e4:	462b      	mov	r3, r5
 80167e6:	2200      	movs	r2, #0
 80167e8:	4543      	cmp	r3, r8
 80167ea:	d321      	bcc.n	8016830 <__multiply+0x98>
 80167ec:	f104 0314 	add.w	r3, r4, #20
 80167f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80167f4:	f109 0314 	add.w	r3, r9, #20
 80167f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80167fc:	9202      	str	r2, [sp, #8]
 80167fe:	1b3a      	subs	r2, r7, r4
 8016800:	3a15      	subs	r2, #21
 8016802:	f022 0203 	bic.w	r2, r2, #3
 8016806:	3204      	adds	r2, #4
 8016808:	f104 0115 	add.w	r1, r4, #21
 801680c:	428f      	cmp	r7, r1
 801680e:	bf38      	it	cc
 8016810:	2204      	movcc	r2, #4
 8016812:	9201      	str	r2, [sp, #4]
 8016814:	9a02      	ldr	r2, [sp, #8]
 8016816:	9303      	str	r3, [sp, #12]
 8016818:	429a      	cmp	r2, r3
 801681a:	d80c      	bhi.n	8016836 <__multiply+0x9e>
 801681c:	2e00      	cmp	r6, #0
 801681e:	dd03      	ble.n	8016828 <__multiply+0x90>
 8016820:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016824:	2b00      	cmp	r3, #0
 8016826:	d05b      	beq.n	80168e0 <__multiply+0x148>
 8016828:	6106      	str	r6, [r0, #16]
 801682a:	b005      	add	sp, #20
 801682c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016830:	f843 2b04 	str.w	r2, [r3], #4
 8016834:	e7d8      	b.n	80167e8 <__multiply+0x50>
 8016836:	f8b3 a000 	ldrh.w	sl, [r3]
 801683a:	f1ba 0f00 	cmp.w	sl, #0
 801683e:	d024      	beq.n	801688a <__multiply+0xf2>
 8016840:	f104 0e14 	add.w	lr, r4, #20
 8016844:	46a9      	mov	r9, r5
 8016846:	f04f 0c00 	mov.w	ip, #0
 801684a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801684e:	f8d9 1000 	ldr.w	r1, [r9]
 8016852:	fa1f fb82 	uxth.w	fp, r2
 8016856:	b289      	uxth	r1, r1
 8016858:	fb0a 110b 	mla	r1, sl, fp, r1
 801685c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016860:	f8d9 2000 	ldr.w	r2, [r9]
 8016864:	4461      	add	r1, ip
 8016866:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801686a:	fb0a c20b 	mla	r2, sl, fp, ip
 801686e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016872:	b289      	uxth	r1, r1
 8016874:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016878:	4577      	cmp	r7, lr
 801687a:	f849 1b04 	str.w	r1, [r9], #4
 801687e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016882:	d8e2      	bhi.n	801684a <__multiply+0xb2>
 8016884:	9a01      	ldr	r2, [sp, #4]
 8016886:	f845 c002 	str.w	ip, [r5, r2]
 801688a:	9a03      	ldr	r2, [sp, #12]
 801688c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016890:	3304      	adds	r3, #4
 8016892:	f1b9 0f00 	cmp.w	r9, #0
 8016896:	d021      	beq.n	80168dc <__multiply+0x144>
 8016898:	6829      	ldr	r1, [r5, #0]
 801689a:	f104 0c14 	add.w	ip, r4, #20
 801689e:	46ae      	mov	lr, r5
 80168a0:	f04f 0a00 	mov.w	sl, #0
 80168a4:	f8bc b000 	ldrh.w	fp, [ip]
 80168a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80168ac:	fb09 220b 	mla	r2, r9, fp, r2
 80168b0:	4452      	add	r2, sl
 80168b2:	b289      	uxth	r1, r1
 80168b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80168b8:	f84e 1b04 	str.w	r1, [lr], #4
 80168bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80168c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80168c4:	f8be 1000 	ldrh.w	r1, [lr]
 80168c8:	fb09 110a 	mla	r1, r9, sl, r1
 80168cc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80168d0:	4567      	cmp	r7, ip
 80168d2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80168d6:	d8e5      	bhi.n	80168a4 <__multiply+0x10c>
 80168d8:	9a01      	ldr	r2, [sp, #4]
 80168da:	50a9      	str	r1, [r5, r2]
 80168dc:	3504      	adds	r5, #4
 80168de:	e799      	b.n	8016814 <__multiply+0x7c>
 80168e0:	3e01      	subs	r6, #1
 80168e2:	e79b      	b.n	801681c <__multiply+0x84>
 80168e4:	0801c11b 	.word	0x0801c11b
 80168e8:	0801c12c 	.word	0x0801c12c

080168ec <__pow5mult>:
 80168ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168f0:	4615      	mov	r5, r2
 80168f2:	f012 0203 	ands.w	r2, r2, #3
 80168f6:	4606      	mov	r6, r0
 80168f8:	460f      	mov	r7, r1
 80168fa:	d007      	beq.n	801690c <__pow5mult+0x20>
 80168fc:	4c25      	ldr	r4, [pc, #148]	; (8016994 <__pow5mult+0xa8>)
 80168fe:	3a01      	subs	r2, #1
 8016900:	2300      	movs	r3, #0
 8016902:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016906:	f7ff fe53 	bl	80165b0 <__multadd>
 801690a:	4607      	mov	r7, r0
 801690c:	10ad      	asrs	r5, r5, #2
 801690e:	d03d      	beq.n	801698c <__pow5mult+0xa0>
 8016910:	69f4      	ldr	r4, [r6, #28]
 8016912:	b97c      	cbnz	r4, 8016934 <__pow5mult+0x48>
 8016914:	2010      	movs	r0, #16
 8016916:	f7ff fd35 	bl	8016384 <malloc>
 801691a:	4602      	mov	r2, r0
 801691c:	61f0      	str	r0, [r6, #28]
 801691e:	b928      	cbnz	r0, 801692c <__pow5mult+0x40>
 8016920:	4b1d      	ldr	r3, [pc, #116]	; (8016998 <__pow5mult+0xac>)
 8016922:	481e      	ldr	r0, [pc, #120]	; (801699c <__pow5mult+0xb0>)
 8016924:	f240 11b3 	movw	r1, #435	; 0x1b3
 8016928:	f001 fef2 	bl	8018710 <__assert_func>
 801692c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016930:	6004      	str	r4, [r0, #0]
 8016932:	60c4      	str	r4, [r0, #12]
 8016934:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8016938:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801693c:	b94c      	cbnz	r4, 8016952 <__pow5mult+0x66>
 801693e:	f240 2171 	movw	r1, #625	; 0x271
 8016942:	4630      	mov	r0, r6
 8016944:	f7ff ff12 	bl	801676c <__i2b>
 8016948:	2300      	movs	r3, #0
 801694a:	f8c8 0008 	str.w	r0, [r8, #8]
 801694e:	4604      	mov	r4, r0
 8016950:	6003      	str	r3, [r0, #0]
 8016952:	f04f 0900 	mov.w	r9, #0
 8016956:	07eb      	lsls	r3, r5, #31
 8016958:	d50a      	bpl.n	8016970 <__pow5mult+0x84>
 801695a:	4639      	mov	r1, r7
 801695c:	4622      	mov	r2, r4
 801695e:	4630      	mov	r0, r6
 8016960:	f7ff ff1a 	bl	8016798 <__multiply>
 8016964:	4639      	mov	r1, r7
 8016966:	4680      	mov	r8, r0
 8016968:	4630      	mov	r0, r6
 801696a:	f7ff fdff 	bl	801656c <_Bfree>
 801696e:	4647      	mov	r7, r8
 8016970:	106d      	asrs	r5, r5, #1
 8016972:	d00b      	beq.n	801698c <__pow5mult+0xa0>
 8016974:	6820      	ldr	r0, [r4, #0]
 8016976:	b938      	cbnz	r0, 8016988 <__pow5mult+0x9c>
 8016978:	4622      	mov	r2, r4
 801697a:	4621      	mov	r1, r4
 801697c:	4630      	mov	r0, r6
 801697e:	f7ff ff0b 	bl	8016798 <__multiply>
 8016982:	6020      	str	r0, [r4, #0]
 8016984:	f8c0 9000 	str.w	r9, [r0]
 8016988:	4604      	mov	r4, r0
 801698a:	e7e4      	b.n	8016956 <__pow5mult+0x6a>
 801698c:	4638      	mov	r0, r7
 801698e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016992:	bf00      	nop
 8016994:	0801c278 	.word	0x0801c278
 8016998:	0801c0ac 	.word	0x0801c0ac
 801699c:	0801c12c 	.word	0x0801c12c

080169a0 <__lshift>:
 80169a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169a4:	460c      	mov	r4, r1
 80169a6:	6849      	ldr	r1, [r1, #4]
 80169a8:	6923      	ldr	r3, [r4, #16]
 80169aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80169ae:	68a3      	ldr	r3, [r4, #8]
 80169b0:	4607      	mov	r7, r0
 80169b2:	4691      	mov	r9, r2
 80169b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80169b8:	f108 0601 	add.w	r6, r8, #1
 80169bc:	42b3      	cmp	r3, r6
 80169be:	db0b      	blt.n	80169d8 <__lshift+0x38>
 80169c0:	4638      	mov	r0, r7
 80169c2:	f7ff fd93 	bl	80164ec <_Balloc>
 80169c6:	4605      	mov	r5, r0
 80169c8:	b948      	cbnz	r0, 80169de <__lshift+0x3e>
 80169ca:	4602      	mov	r2, r0
 80169cc:	4b28      	ldr	r3, [pc, #160]	; (8016a70 <__lshift+0xd0>)
 80169ce:	4829      	ldr	r0, [pc, #164]	; (8016a74 <__lshift+0xd4>)
 80169d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80169d4:	f001 fe9c 	bl	8018710 <__assert_func>
 80169d8:	3101      	adds	r1, #1
 80169da:	005b      	lsls	r3, r3, #1
 80169dc:	e7ee      	b.n	80169bc <__lshift+0x1c>
 80169de:	2300      	movs	r3, #0
 80169e0:	f100 0114 	add.w	r1, r0, #20
 80169e4:	f100 0210 	add.w	r2, r0, #16
 80169e8:	4618      	mov	r0, r3
 80169ea:	4553      	cmp	r3, sl
 80169ec:	db33      	blt.n	8016a56 <__lshift+0xb6>
 80169ee:	6920      	ldr	r0, [r4, #16]
 80169f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80169f4:	f104 0314 	add.w	r3, r4, #20
 80169f8:	f019 091f 	ands.w	r9, r9, #31
 80169fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016a00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016a04:	d02b      	beq.n	8016a5e <__lshift+0xbe>
 8016a06:	f1c9 0e20 	rsb	lr, r9, #32
 8016a0a:	468a      	mov	sl, r1
 8016a0c:	2200      	movs	r2, #0
 8016a0e:	6818      	ldr	r0, [r3, #0]
 8016a10:	fa00 f009 	lsl.w	r0, r0, r9
 8016a14:	4310      	orrs	r0, r2
 8016a16:	f84a 0b04 	str.w	r0, [sl], #4
 8016a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a1e:	459c      	cmp	ip, r3
 8016a20:	fa22 f20e 	lsr.w	r2, r2, lr
 8016a24:	d8f3      	bhi.n	8016a0e <__lshift+0x6e>
 8016a26:	ebac 0304 	sub.w	r3, ip, r4
 8016a2a:	3b15      	subs	r3, #21
 8016a2c:	f023 0303 	bic.w	r3, r3, #3
 8016a30:	3304      	adds	r3, #4
 8016a32:	f104 0015 	add.w	r0, r4, #21
 8016a36:	4584      	cmp	ip, r0
 8016a38:	bf38      	it	cc
 8016a3a:	2304      	movcc	r3, #4
 8016a3c:	50ca      	str	r2, [r1, r3]
 8016a3e:	b10a      	cbz	r2, 8016a44 <__lshift+0xa4>
 8016a40:	f108 0602 	add.w	r6, r8, #2
 8016a44:	3e01      	subs	r6, #1
 8016a46:	4638      	mov	r0, r7
 8016a48:	612e      	str	r6, [r5, #16]
 8016a4a:	4621      	mov	r1, r4
 8016a4c:	f7ff fd8e 	bl	801656c <_Bfree>
 8016a50:	4628      	mov	r0, r5
 8016a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a56:	f842 0f04 	str.w	r0, [r2, #4]!
 8016a5a:	3301      	adds	r3, #1
 8016a5c:	e7c5      	b.n	80169ea <__lshift+0x4a>
 8016a5e:	3904      	subs	r1, #4
 8016a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a64:	f841 2f04 	str.w	r2, [r1, #4]!
 8016a68:	459c      	cmp	ip, r3
 8016a6a:	d8f9      	bhi.n	8016a60 <__lshift+0xc0>
 8016a6c:	e7ea      	b.n	8016a44 <__lshift+0xa4>
 8016a6e:	bf00      	nop
 8016a70:	0801c11b 	.word	0x0801c11b
 8016a74:	0801c12c 	.word	0x0801c12c

08016a78 <__mcmp>:
 8016a78:	b530      	push	{r4, r5, lr}
 8016a7a:	6902      	ldr	r2, [r0, #16]
 8016a7c:	690c      	ldr	r4, [r1, #16]
 8016a7e:	1b12      	subs	r2, r2, r4
 8016a80:	d10e      	bne.n	8016aa0 <__mcmp+0x28>
 8016a82:	f100 0314 	add.w	r3, r0, #20
 8016a86:	3114      	adds	r1, #20
 8016a88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016a8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016a90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016a94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016a98:	42a5      	cmp	r5, r4
 8016a9a:	d003      	beq.n	8016aa4 <__mcmp+0x2c>
 8016a9c:	d305      	bcc.n	8016aaa <__mcmp+0x32>
 8016a9e:	2201      	movs	r2, #1
 8016aa0:	4610      	mov	r0, r2
 8016aa2:	bd30      	pop	{r4, r5, pc}
 8016aa4:	4283      	cmp	r3, r0
 8016aa6:	d3f3      	bcc.n	8016a90 <__mcmp+0x18>
 8016aa8:	e7fa      	b.n	8016aa0 <__mcmp+0x28>
 8016aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8016aae:	e7f7      	b.n	8016aa0 <__mcmp+0x28>

08016ab0 <__mdiff>:
 8016ab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ab4:	460c      	mov	r4, r1
 8016ab6:	4606      	mov	r6, r0
 8016ab8:	4611      	mov	r1, r2
 8016aba:	4620      	mov	r0, r4
 8016abc:	4690      	mov	r8, r2
 8016abe:	f7ff ffdb 	bl	8016a78 <__mcmp>
 8016ac2:	1e05      	subs	r5, r0, #0
 8016ac4:	d110      	bne.n	8016ae8 <__mdiff+0x38>
 8016ac6:	4629      	mov	r1, r5
 8016ac8:	4630      	mov	r0, r6
 8016aca:	f7ff fd0f 	bl	80164ec <_Balloc>
 8016ace:	b930      	cbnz	r0, 8016ade <__mdiff+0x2e>
 8016ad0:	4b3a      	ldr	r3, [pc, #232]	; (8016bbc <__mdiff+0x10c>)
 8016ad2:	4602      	mov	r2, r0
 8016ad4:	f240 2137 	movw	r1, #567	; 0x237
 8016ad8:	4839      	ldr	r0, [pc, #228]	; (8016bc0 <__mdiff+0x110>)
 8016ada:	f001 fe19 	bl	8018710 <__assert_func>
 8016ade:	2301      	movs	r3, #1
 8016ae0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016ae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ae8:	bfa4      	itt	ge
 8016aea:	4643      	movge	r3, r8
 8016aec:	46a0      	movge	r8, r4
 8016aee:	4630      	mov	r0, r6
 8016af0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016af4:	bfa6      	itte	ge
 8016af6:	461c      	movge	r4, r3
 8016af8:	2500      	movge	r5, #0
 8016afa:	2501      	movlt	r5, #1
 8016afc:	f7ff fcf6 	bl	80164ec <_Balloc>
 8016b00:	b920      	cbnz	r0, 8016b0c <__mdiff+0x5c>
 8016b02:	4b2e      	ldr	r3, [pc, #184]	; (8016bbc <__mdiff+0x10c>)
 8016b04:	4602      	mov	r2, r0
 8016b06:	f240 2145 	movw	r1, #581	; 0x245
 8016b0a:	e7e5      	b.n	8016ad8 <__mdiff+0x28>
 8016b0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016b10:	6926      	ldr	r6, [r4, #16]
 8016b12:	60c5      	str	r5, [r0, #12]
 8016b14:	f104 0914 	add.w	r9, r4, #20
 8016b18:	f108 0514 	add.w	r5, r8, #20
 8016b1c:	f100 0e14 	add.w	lr, r0, #20
 8016b20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016b24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016b28:	f108 0210 	add.w	r2, r8, #16
 8016b2c:	46f2      	mov	sl, lr
 8016b2e:	2100      	movs	r1, #0
 8016b30:	f859 3b04 	ldr.w	r3, [r9], #4
 8016b34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016b38:	fa11 f88b 	uxtah	r8, r1, fp
 8016b3c:	b299      	uxth	r1, r3
 8016b3e:	0c1b      	lsrs	r3, r3, #16
 8016b40:	eba8 0801 	sub.w	r8, r8, r1
 8016b44:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016b48:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016b4c:	fa1f f888 	uxth.w	r8, r8
 8016b50:	1419      	asrs	r1, r3, #16
 8016b52:	454e      	cmp	r6, r9
 8016b54:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016b58:	f84a 3b04 	str.w	r3, [sl], #4
 8016b5c:	d8e8      	bhi.n	8016b30 <__mdiff+0x80>
 8016b5e:	1b33      	subs	r3, r6, r4
 8016b60:	3b15      	subs	r3, #21
 8016b62:	f023 0303 	bic.w	r3, r3, #3
 8016b66:	3304      	adds	r3, #4
 8016b68:	3415      	adds	r4, #21
 8016b6a:	42a6      	cmp	r6, r4
 8016b6c:	bf38      	it	cc
 8016b6e:	2304      	movcc	r3, #4
 8016b70:	441d      	add	r5, r3
 8016b72:	4473      	add	r3, lr
 8016b74:	469e      	mov	lr, r3
 8016b76:	462e      	mov	r6, r5
 8016b78:	4566      	cmp	r6, ip
 8016b7a:	d30e      	bcc.n	8016b9a <__mdiff+0xea>
 8016b7c:	f10c 0203 	add.w	r2, ip, #3
 8016b80:	1b52      	subs	r2, r2, r5
 8016b82:	f022 0203 	bic.w	r2, r2, #3
 8016b86:	3d03      	subs	r5, #3
 8016b88:	45ac      	cmp	ip, r5
 8016b8a:	bf38      	it	cc
 8016b8c:	2200      	movcc	r2, #0
 8016b8e:	4413      	add	r3, r2
 8016b90:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016b94:	b17a      	cbz	r2, 8016bb6 <__mdiff+0x106>
 8016b96:	6107      	str	r7, [r0, #16]
 8016b98:	e7a4      	b.n	8016ae4 <__mdiff+0x34>
 8016b9a:	f856 8b04 	ldr.w	r8, [r6], #4
 8016b9e:	fa11 f288 	uxtah	r2, r1, r8
 8016ba2:	1414      	asrs	r4, r2, #16
 8016ba4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016ba8:	b292      	uxth	r2, r2
 8016baa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016bae:	f84e 2b04 	str.w	r2, [lr], #4
 8016bb2:	1421      	asrs	r1, r4, #16
 8016bb4:	e7e0      	b.n	8016b78 <__mdiff+0xc8>
 8016bb6:	3f01      	subs	r7, #1
 8016bb8:	e7ea      	b.n	8016b90 <__mdiff+0xe0>
 8016bba:	bf00      	nop
 8016bbc:	0801c11b 	.word	0x0801c11b
 8016bc0:	0801c12c 	.word	0x0801c12c

08016bc4 <__ulp>:
 8016bc4:	b082      	sub	sp, #8
 8016bc6:	ed8d 0b00 	vstr	d0, [sp]
 8016bca:	9a01      	ldr	r2, [sp, #4]
 8016bcc:	4b0f      	ldr	r3, [pc, #60]	; (8016c0c <__ulp+0x48>)
 8016bce:	4013      	ands	r3, r2
 8016bd0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	dc08      	bgt.n	8016bea <__ulp+0x26>
 8016bd8:	425b      	negs	r3, r3
 8016bda:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8016bde:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016be2:	da04      	bge.n	8016bee <__ulp+0x2a>
 8016be4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016be8:	4113      	asrs	r3, r2
 8016bea:	2200      	movs	r2, #0
 8016bec:	e008      	b.n	8016c00 <__ulp+0x3c>
 8016bee:	f1a2 0314 	sub.w	r3, r2, #20
 8016bf2:	2b1e      	cmp	r3, #30
 8016bf4:	bfda      	itte	le
 8016bf6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8016bfa:	40da      	lsrle	r2, r3
 8016bfc:	2201      	movgt	r2, #1
 8016bfe:	2300      	movs	r3, #0
 8016c00:	4619      	mov	r1, r3
 8016c02:	4610      	mov	r0, r2
 8016c04:	ec41 0b10 	vmov	d0, r0, r1
 8016c08:	b002      	add	sp, #8
 8016c0a:	4770      	bx	lr
 8016c0c:	7ff00000 	.word	0x7ff00000

08016c10 <__b2d>:
 8016c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c14:	6906      	ldr	r6, [r0, #16]
 8016c16:	f100 0814 	add.w	r8, r0, #20
 8016c1a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016c1e:	1f37      	subs	r7, r6, #4
 8016c20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016c24:	4610      	mov	r0, r2
 8016c26:	f7ff fd53 	bl	80166d0 <__hi0bits>
 8016c2a:	f1c0 0320 	rsb	r3, r0, #32
 8016c2e:	280a      	cmp	r0, #10
 8016c30:	600b      	str	r3, [r1, #0]
 8016c32:	491b      	ldr	r1, [pc, #108]	; (8016ca0 <__b2d+0x90>)
 8016c34:	dc15      	bgt.n	8016c62 <__b2d+0x52>
 8016c36:	f1c0 0c0b 	rsb	ip, r0, #11
 8016c3a:	fa22 f30c 	lsr.w	r3, r2, ip
 8016c3e:	45b8      	cmp	r8, r7
 8016c40:	ea43 0501 	orr.w	r5, r3, r1
 8016c44:	bf34      	ite	cc
 8016c46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016c4a:	2300      	movcs	r3, #0
 8016c4c:	3015      	adds	r0, #21
 8016c4e:	fa02 f000 	lsl.w	r0, r2, r0
 8016c52:	fa23 f30c 	lsr.w	r3, r3, ip
 8016c56:	4303      	orrs	r3, r0
 8016c58:	461c      	mov	r4, r3
 8016c5a:	ec45 4b10 	vmov	d0, r4, r5
 8016c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c62:	45b8      	cmp	r8, r7
 8016c64:	bf3a      	itte	cc
 8016c66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016c6a:	f1a6 0708 	subcc.w	r7, r6, #8
 8016c6e:	2300      	movcs	r3, #0
 8016c70:	380b      	subs	r0, #11
 8016c72:	d012      	beq.n	8016c9a <__b2d+0x8a>
 8016c74:	f1c0 0120 	rsb	r1, r0, #32
 8016c78:	fa23 f401 	lsr.w	r4, r3, r1
 8016c7c:	4082      	lsls	r2, r0
 8016c7e:	4322      	orrs	r2, r4
 8016c80:	4547      	cmp	r7, r8
 8016c82:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8016c86:	bf8c      	ite	hi
 8016c88:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016c8c:	2200      	movls	r2, #0
 8016c8e:	4083      	lsls	r3, r0
 8016c90:	40ca      	lsrs	r2, r1
 8016c92:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016c96:	4313      	orrs	r3, r2
 8016c98:	e7de      	b.n	8016c58 <__b2d+0x48>
 8016c9a:	ea42 0501 	orr.w	r5, r2, r1
 8016c9e:	e7db      	b.n	8016c58 <__b2d+0x48>
 8016ca0:	3ff00000 	.word	0x3ff00000

08016ca4 <__d2b>:
 8016ca4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016ca8:	460f      	mov	r7, r1
 8016caa:	2101      	movs	r1, #1
 8016cac:	ec59 8b10 	vmov	r8, r9, d0
 8016cb0:	4616      	mov	r6, r2
 8016cb2:	f7ff fc1b 	bl	80164ec <_Balloc>
 8016cb6:	4604      	mov	r4, r0
 8016cb8:	b930      	cbnz	r0, 8016cc8 <__d2b+0x24>
 8016cba:	4602      	mov	r2, r0
 8016cbc:	4b24      	ldr	r3, [pc, #144]	; (8016d50 <__d2b+0xac>)
 8016cbe:	4825      	ldr	r0, [pc, #148]	; (8016d54 <__d2b+0xb0>)
 8016cc0:	f240 310f 	movw	r1, #783	; 0x30f
 8016cc4:	f001 fd24 	bl	8018710 <__assert_func>
 8016cc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016ccc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016cd0:	bb2d      	cbnz	r5, 8016d1e <__d2b+0x7a>
 8016cd2:	9301      	str	r3, [sp, #4]
 8016cd4:	f1b8 0300 	subs.w	r3, r8, #0
 8016cd8:	d026      	beq.n	8016d28 <__d2b+0x84>
 8016cda:	4668      	mov	r0, sp
 8016cdc:	9300      	str	r3, [sp, #0]
 8016cde:	f7ff fd17 	bl	8016710 <__lo0bits>
 8016ce2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016ce6:	b1e8      	cbz	r0, 8016d24 <__d2b+0x80>
 8016ce8:	f1c0 0320 	rsb	r3, r0, #32
 8016cec:	fa02 f303 	lsl.w	r3, r2, r3
 8016cf0:	430b      	orrs	r3, r1
 8016cf2:	40c2      	lsrs	r2, r0
 8016cf4:	6163      	str	r3, [r4, #20]
 8016cf6:	9201      	str	r2, [sp, #4]
 8016cf8:	9b01      	ldr	r3, [sp, #4]
 8016cfa:	61a3      	str	r3, [r4, #24]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	bf14      	ite	ne
 8016d00:	2202      	movne	r2, #2
 8016d02:	2201      	moveq	r2, #1
 8016d04:	6122      	str	r2, [r4, #16]
 8016d06:	b1bd      	cbz	r5, 8016d38 <__d2b+0x94>
 8016d08:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016d0c:	4405      	add	r5, r0
 8016d0e:	603d      	str	r5, [r7, #0]
 8016d10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016d14:	6030      	str	r0, [r6, #0]
 8016d16:	4620      	mov	r0, r4
 8016d18:	b003      	add	sp, #12
 8016d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016d22:	e7d6      	b.n	8016cd2 <__d2b+0x2e>
 8016d24:	6161      	str	r1, [r4, #20]
 8016d26:	e7e7      	b.n	8016cf8 <__d2b+0x54>
 8016d28:	a801      	add	r0, sp, #4
 8016d2a:	f7ff fcf1 	bl	8016710 <__lo0bits>
 8016d2e:	9b01      	ldr	r3, [sp, #4]
 8016d30:	6163      	str	r3, [r4, #20]
 8016d32:	3020      	adds	r0, #32
 8016d34:	2201      	movs	r2, #1
 8016d36:	e7e5      	b.n	8016d04 <__d2b+0x60>
 8016d38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016d3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016d40:	6038      	str	r0, [r7, #0]
 8016d42:	6918      	ldr	r0, [r3, #16]
 8016d44:	f7ff fcc4 	bl	80166d0 <__hi0bits>
 8016d48:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016d4c:	e7e2      	b.n	8016d14 <__d2b+0x70>
 8016d4e:	bf00      	nop
 8016d50:	0801c11b 	.word	0x0801c11b
 8016d54:	0801c12c 	.word	0x0801c12c

08016d58 <__ratio>:
 8016d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d5c:	4688      	mov	r8, r1
 8016d5e:	4669      	mov	r1, sp
 8016d60:	4681      	mov	r9, r0
 8016d62:	f7ff ff55 	bl	8016c10 <__b2d>
 8016d66:	a901      	add	r1, sp, #4
 8016d68:	4640      	mov	r0, r8
 8016d6a:	ec55 4b10 	vmov	r4, r5, d0
 8016d6e:	f7ff ff4f 	bl	8016c10 <__b2d>
 8016d72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016d76:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016d7a:	eba3 0c02 	sub.w	ip, r3, r2
 8016d7e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016d82:	1a9b      	subs	r3, r3, r2
 8016d84:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016d88:	ec51 0b10 	vmov	r0, r1, d0
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	bfd6      	itet	le
 8016d90:	460a      	movle	r2, r1
 8016d92:	462a      	movgt	r2, r5
 8016d94:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016d98:	468b      	mov	fp, r1
 8016d9a:	462f      	mov	r7, r5
 8016d9c:	bfd4      	ite	le
 8016d9e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016da2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016da6:	4620      	mov	r0, r4
 8016da8:	ee10 2a10 	vmov	r2, s0
 8016dac:	465b      	mov	r3, fp
 8016dae:	4639      	mov	r1, r7
 8016db0:	f7e9 fd74 	bl	800089c <__aeabi_ddiv>
 8016db4:	ec41 0b10 	vmov	d0, r0, r1
 8016db8:	b003      	add	sp, #12
 8016dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016dbe <__copybits>:
 8016dbe:	3901      	subs	r1, #1
 8016dc0:	b570      	push	{r4, r5, r6, lr}
 8016dc2:	1149      	asrs	r1, r1, #5
 8016dc4:	6914      	ldr	r4, [r2, #16]
 8016dc6:	3101      	adds	r1, #1
 8016dc8:	f102 0314 	add.w	r3, r2, #20
 8016dcc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016dd0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016dd4:	1f05      	subs	r5, r0, #4
 8016dd6:	42a3      	cmp	r3, r4
 8016dd8:	d30c      	bcc.n	8016df4 <__copybits+0x36>
 8016dda:	1aa3      	subs	r3, r4, r2
 8016ddc:	3b11      	subs	r3, #17
 8016dde:	f023 0303 	bic.w	r3, r3, #3
 8016de2:	3211      	adds	r2, #17
 8016de4:	42a2      	cmp	r2, r4
 8016de6:	bf88      	it	hi
 8016de8:	2300      	movhi	r3, #0
 8016dea:	4418      	add	r0, r3
 8016dec:	2300      	movs	r3, #0
 8016dee:	4288      	cmp	r0, r1
 8016df0:	d305      	bcc.n	8016dfe <__copybits+0x40>
 8016df2:	bd70      	pop	{r4, r5, r6, pc}
 8016df4:	f853 6b04 	ldr.w	r6, [r3], #4
 8016df8:	f845 6f04 	str.w	r6, [r5, #4]!
 8016dfc:	e7eb      	b.n	8016dd6 <__copybits+0x18>
 8016dfe:	f840 3b04 	str.w	r3, [r0], #4
 8016e02:	e7f4      	b.n	8016dee <__copybits+0x30>

08016e04 <__any_on>:
 8016e04:	f100 0214 	add.w	r2, r0, #20
 8016e08:	6900      	ldr	r0, [r0, #16]
 8016e0a:	114b      	asrs	r3, r1, #5
 8016e0c:	4298      	cmp	r0, r3
 8016e0e:	b510      	push	{r4, lr}
 8016e10:	db11      	blt.n	8016e36 <__any_on+0x32>
 8016e12:	dd0a      	ble.n	8016e2a <__any_on+0x26>
 8016e14:	f011 011f 	ands.w	r1, r1, #31
 8016e18:	d007      	beq.n	8016e2a <__any_on+0x26>
 8016e1a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016e1e:	fa24 f001 	lsr.w	r0, r4, r1
 8016e22:	fa00 f101 	lsl.w	r1, r0, r1
 8016e26:	428c      	cmp	r4, r1
 8016e28:	d10b      	bne.n	8016e42 <__any_on+0x3e>
 8016e2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016e2e:	4293      	cmp	r3, r2
 8016e30:	d803      	bhi.n	8016e3a <__any_on+0x36>
 8016e32:	2000      	movs	r0, #0
 8016e34:	bd10      	pop	{r4, pc}
 8016e36:	4603      	mov	r3, r0
 8016e38:	e7f7      	b.n	8016e2a <__any_on+0x26>
 8016e3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016e3e:	2900      	cmp	r1, #0
 8016e40:	d0f5      	beq.n	8016e2e <__any_on+0x2a>
 8016e42:	2001      	movs	r0, #1
 8016e44:	e7f6      	b.n	8016e34 <__any_on+0x30>

08016e46 <sulp>:
 8016e46:	b570      	push	{r4, r5, r6, lr}
 8016e48:	4604      	mov	r4, r0
 8016e4a:	460d      	mov	r5, r1
 8016e4c:	ec45 4b10 	vmov	d0, r4, r5
 8016e50:	4616      	mov	r6, r2
 8016e52:	f7ff feb7 	bl	8016bc4 <__ulp>
 8016e56:	ec51 0b10 	vmov	r0, r1, d0
 8016e5a:	b17e      	cbz	r6, 8016e7c <sulp+0x36>
 8016e5c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016e60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	dd09      	ble.n	8016e7c <sulp+0x36>
 8016e68:	051b      	lsls	r3, r3, #20
 8016e6a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016e6e:	2400      	movs	r4, #0
 8016e70:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016e74:	4622      	mov	r2, r4
 8016e76:	462b      	mov	r3, r5
 8016e78:	f7e9 fbe6 	bl	8000648 <__aeabi_dmul>
 8016e7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016e80 <_strtod_l>:
 8016e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e84:	ed2d 8b02 	vpush	{d8}
 8016e88:	b09b      	sub	sp, #108	; 0x6c
 8016e8a:	4604      	mov	r4, r0
 8016e8c:	9213      	str	r2, [sp, #76]	; 0x4c
 8016e8e:	2200      	movs	r2, #0
 8016e90:	9216      	str	r2, [sp, #88]	; 0x58
 8016e92:	460d      	mov	r5, r1
 8016e94:	f04f 0800 	mov.w	r8, #0
 8016e98:	f04f 0900 	mov.w	r9, #0
 8016e9c:	460a      	mov	r2, r1
 8016e9e:	9215      	str	r2, [sp, #84]	; 0x54
 8016ea0:	7811      	ldrb	r1, [r2, #0]
 8016ea2:	292b      	cmp	r1, #43	; 0x2b
 8016ea4:	d04c      	beq.n	8016f40 <_strtod_l+0xc0>
 8016ea6:	d83a      	bhi.n	8016f1e <_strtod_l+0x9e>
 8016ea8:	290d      	cmp	r1, #13
 8016eaa:	d834      	bhi.n	8016f16 <_strtod_l+0x96>
 8016eac:	2908      	cmp	r1, #8
 8016eae:	d834      	bhi.n	8016f1a <_strtod_l+0x9a>
 8016eb0:	2900      	cmp	r1, #0
 8016eb2:	d03d      	beq.n	8016f30 <_strtod_l+0xb0>
 8016eb4:	2200      	movs	r2, #0
 8016eb6:	920a      	str	r2, [sp, #40]	; 0x28
 8016eb8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8016eba:	7832      	ldrb	r2, [r6, #0]
 8016ebc:	2a30      	cmp	r2, #48	; 0x30
 8016ebe:	f040 80b4 	bne.w	801702a <_strtod_l+0x1aa>
 8016ec2:	7872      	ldrb	r2, [r6, #1]
 8016ec4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8016ec8:	2a58      	cmp	r2, #88	; 0x58
 8016eca:	d170      	bne.n	8016fae <_strtod_l+0x12e>
 8016ecc:	9302      	str	r3, [sp, #8]
 8016ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ed0:	9301      	str	r3, [sp, #4]
 8016ed2:	ab16      	add	r3, sp, #88	; 0x58
 8016ed4:	9300      	str	r3, [sp, #0]
 8016ed6:	4a8e      	ldr	r2, [pc, #568]	; (8017110 <_strtod_l+0x290>)
 8016ed8:	ab17      	add	r3, sp, #92	; 0x5c
 8016eda:	a915      	add	r1, sp, #84	; 0x54
 8016edc:	4620      	mov	r0, r4
 8016ede:	f001 fcb3 	bl	8018848 <__gethex>
 8016ee2:	f010 070f 	ands.w	r7, r0, #15
 8016ee6:	4605      	mov	r5, r0
 8016ee8:	d005      	beq.n	8016ef6 <_strtod_l+0x76>
 8016eea:	2f06      	cmp	r7, #6
 8016eec:	d12a      	bne.n	8016f44 <_strtod_l+0xc4>
 8016eee:	3601      	adds	r6, #1
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	9615      	str	r6, [sp, #84]	; 0x54
 8016ef4:	930a      	str	r3, [sp, #40]	; 0x28
 8016ef6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	f040 857f 	bne.w	80179fc <_strtod_l+0xb7c>
 8016efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f00:	b1db      	cbz	r3, 8016f3a <_strtod_l+0xba>
 8016f02:	4642      	mov	r2, r8
 8016f04:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016f08:	ec43 2b10 	vmov	d0, r2, r3
 8016f0c:	b01b      	add	sp, #108	; 0x6c
 8016f0e:	ecbd 8b02 	vpop	{d8}
 8016f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f16:	2920      	cmp	r1, #32
 8016f18:	d1cc      	bne.n	8016eb4 <_strtod_l+0x34>
 8016f1a:	3201      	adds	r2, #1
 8016f1c:	e7bf      	b.n	8016e9e <_strtod_l+0x1e>
 8016f1e:	292d      	cmp	r1, #45	; 0x2d
 8016f20:	d1c8      	bne.n	8016eb4 <_strtod_l+0x34>
 8016f22:	2101      	movs	r1, #1
 8016f24:	910a      	str	r1, [sp, #40]	; 0x28
 8016f26:	1c51      	adds	r1, r2, #1
 8016f28:	9115      	str	r1, [sp, #84]	; 0x54
 8016f2a:	7852      	ldrb	r2, [r2, #1]
 8016f2c:	2a00      	cmp	r2, #0
 8016f2e:	d1c3      	bne.n	8016eb8 <_strtod_l+0x38>
 8016f30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016f32:	9515      	str	r5, [sp, #84]	; 0x54
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	f040 855f 	bne.w	80179f8 <_strtod_l+0xb78>
 8016f3a:	4642      	mov	r2, r8
 8016f3c:	464b      	mov	r3, r9
 8016f3e:	e7e3      	b.n	8016f08 <_strtod_l+0x88>
 8016f40:	2100      	movs	r1, #0
 8016f42:	e7ef      	b.n	8016f24 <_strtod_l+0xa4>
 8016f44:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016f46:	b13a      	cbz	r2, 8016f58 <_strtod_l+0xd8>
 8016f48:	2135      	movs	r1, #53	; 0x35
 8016f4a:	a818      	add	r0, sp, #96	; 0x60
 8016f4c:	f7ff ff37 	bl	8016dbe <__copybits>
 8016f50:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016f52:	4620      	mov	r0, r4
 8016f54:	f7ff fb0a 	bl	801656c <_Bfree>
 8016f58:	3f01      	subs	r7, #1
 8016f5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016f5c:	2f04      	cmp	r7, #4
 8016f5e:	d806      	bhi.n	8016f6e <_strtod_l+0xee>
 8016f60:	e8df f007 	tbb	[pc, r7]
 8016f64:	201d0314 	.word	0x201d0314
 8016f68:	14          	.byte	0x14
 8016f69:	00          	.byte	0x00
 8016f6a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8016f6e:	05e9      	lsls	r1, r5, #23
 8016f70:	bf48      	it	mi
 8016f72:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8016f76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016f7a:	0d1b      	lsrs	r3, r3, #20
 8016f7c:	051b      	lsls	r3, r3, #20
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d1b9      	bne.n	8016ef6 <_strtod_l+0x76>
 8016f82:	f7fe faf7 	bl	8015574 <__errno>
 8016f86:	2322      	movs	r3, #34	; 0x22
 8016f88:	6003      	str	r3, [r0, #0]
 8016f8a:	e7b4      	b.n	8016ef6 <_strtod_l+0x76>
 8016f8c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8016f90:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016f94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016f98:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8016f9c:	e7e7      	b.n	8016f6e <_strtod_l+0xee>
 8016f9e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8017118 <_strtod_l+0x298>
 8016fa2:	e7e4      	b.n	8016f6e <_strtod_l+0xee>
 8016fa4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8016fa8:	f04f 38ff 	mov.w	r8, #4294967295
 8016fac:	e7df      	b.n	8016f6e <_strtod_l+0xee>
 8016fae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016fb0:	1c5a      	adds	r2, r3, #1
 8016fb2:	9215      	str	r2, [sp, #84]	; 0x54
 8016fb4:	785b      	ldrb	r3, [r3, #1]
 8016fb6:	2b30      	cmp	r3, #48	; 0x30
 8016fb8:	d0f9      	beq.n	8016fae <_strtod_l+0x12e>
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d09b      	beq.n	8016ef6 <_strtod_l+0x76>
 8016fbe:	2301      	movs	r3, #1
 8016fc0:	f04f 0a00 	mov.w	sl, #0
 8016fc4:	9304      	str	r3, [sp, #16]
 8016fc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016fc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8016fca:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8016fce:	46d3      	mov	fp, sl
 8016fd0:	220a      	movs	r2, #10
 8016fd2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8016fd4:	7806      	ldrb	r6, [r0, #0]
 8016fd6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016fda:	b2d9      	uxtb	r1, r3
 8016fdc:	2909      	cmp	r1, #9
 8016fde:	d926      	bls.n	801702e <_strtod_l+0x1ae>
 8016fe0:	494c      	ldr	r1, [pc, #304]	; (8017114 <_strtod_l+0x294>)
 8016fe2:	2201      	movs	r2, #1
 8016fe4:	f7fe fa13 	bl	801540e <strncmp>
 8016fe8:	2800      	cmp	r0, #0
 8016fea:	d030      	beq.n	801704e <_strtod_l+0x1ce>
 8016fec:	2000      	movs	r0, #0
 8016fee:	4632      	mov	r2, r6
 8016ff0:	9005      	str	r0, [sp, #20]
 8016ff2:	465e      	mov	r6, fp
 8016ff4:	4603      	mov	r3, r0
 8016ff6:	2a65      	cmp	r2, #101	; 0x65
 8016ff8:	d001      	beq.n	8016ffe <_strtod_l+0x17e>
 8016ffa:	2a45      	cmp	r2, #69	; 0x45
 8016ffc:	d113      	bne.n	8017026 <_strtod_l+0x1a6>
 8016ffe:	b91e      	cbnz	r6, 8017008 <_strtod_l+0x188>
 8017000:	9a04      	ldr	r2, [sp, #16]
 8017002:	4302      	orrs	r2, r0
 8017004:	d094      	beq.n	8016f30 <_strtod_l+0xb0>
 8017006:	2600      	movs	r6, #0
 8017008:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801700a:	1c6a      	adds	r2, r5, #1
 801700c:	9215      	str	r2, [sp, #84]	; 0x54
 801700e:	786a      	ldrb	r2, [r5, #1]
 8017010:	2a2b      	cmp	r2, #43	; 0x2b
 8017012:	d074      	beq.n	80170fe <_strtod_l+0x27e>
 8017014:	2a2d      	cmp	r2, #45	; 0x2d
 8017016:	d078      	beq.n	801710a <_strtod_l+0x28a>
 8017018:	f04f 0c00 	mov.w	ip, #0
 801701c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8017020:	2909      	cmp	r1, #9
 8017022:	d97f      	bls.n	8017124 <_strtod_l+0x2a4>
 8017024:	9515      	str	r5, [sp, #84]	; 0x54
 8017026:	2700      	movs	r7, #0
 8017028:	e09e      	b.n	8017168 <_strtod_l+0x2e8>
 801702a:	2300      	movs	r3, #0
 801702c:	e7c8      	b.n	8016fc0 <_strtod_l+0x140>
 801702e:	f1bb 0f08 	cmp.w	fp, #8
 8017032:	bfd8      	it	le
 8017034:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8017036:	f100 0001 	add.w	r0, r0, #1
 801703a:	bfda      	itte	le
 801703c:	fb02 3301 	mlale	r3, r2, r1, r3
 8017040:	9309      	strle	r3, [sp, #36]	; 0x24
 8017042:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8017046:	f10b 0b01 	add.w	fp, fp, #1
 801704a:	9015      	str	r0, [sp, #84]	; 0x54
 801704c:	e7c1      	b.n	8016fd2 <_strtod_l+0x152>
 801704e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017050:	1c5a      	adds	r2, r3, #1
 8017052:	9215      	str	r2, [sp, #84]	; 0x54
 8017054:	785a      	ldrb	r2, [r3, #1]
 8017056:	f1bb 0f00 	cmp.w	fp, #0
 801705a:	d037      	beq.n	80170cc <_strtod_l+0x24c>
 801705c:	9005      	str	r0, [sp, #20]
 801705e:	465e      	mov	r6, fp
 8017060:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8017064:	2b09      	cmp	r3, #9
 8017066:	d912      	bls.n	801708e <_strtod_l+0x20e>
 8017068:	2301      	movs	r3, #1
 801706a:	e7c4      	b.n	8016ff6 <_strtod_l+0x176>
 801706c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801706e:	1c5a      	adds	r2, r3, #1
 8017070:	9215      	str	r2, [sp, #84]	; 0x54
 8017072:	785a      	ldrb	r2, [r3, #1]
 8017074:	3001      	adds	r0, #1
 8017076:	2a30      	cmp	r2, #48	; 0x30
 8017078:	d0f8      	beq.n	801706c <_strtod_l+0x1ec>
 801707a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801707e:	2b08      	cmp	r3, #8
 8017080:	f200 84c1 	bhi.w	8017a06 <_strtod_l+0xb86>
 8017084:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017086:	9005      	str	r0, [sp, #20]
 8017088:	2000      	movs	r0, #0
 801708a:	930b      	str	r3, [sp, #44]	; 0x2c
 801708c:	4606      	mov	r6, r0
 801708e:	3a30      	subs	r2, #48	; 0x30
 8017090:	f100 0301 	add.w	r3, r0, #1
 8017094:	d014      	beq.n	80170c0 <_strtod_l+0x240>
 8017096:	9905      	ldr	r1, [sp, #20]
 8017098:	4419      	add	r1, r3
 801709a:	9105      	str	r1, [sp, #20]
 801709c:	4633      	mov	r3, r6
 801709e:	eb00 0c06 	add.w	ip, r0, r6
 80170a2:	210a      	movs	r1, #10
 80170a4:	4563      	cmp	r3, ip
 80170a6:	d113      	bne.n	80170d0 <_strtod_l+0x250>
 80170a8:	1833      	adds	r3, r6, r0
 80170aa:	2b08      	cmp	r3, #8
 80170ac:	f106 0601 	add.w	r6, r6, #1
 80170b0:	4406      	add	r6, r0
 80170b2:	dc1a      	bgt.n	80170ea <_strtod_l+0x26a>
 80170b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80170b6:	230a      	movs	r3, #10
 80170b8:	fb03 2301 	mla	r3, r3, r1, r2
 80170bc:	9309      	str	r3, [sp, #36]	; 0x24
 80170be:	2300      	movs	r3, #0
 80170c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80170c2:	1c51      	adds	r1, r2, #1
 80170c4:	9115      	str	r1, [sp, #84]	; 0x54
 80170c6:	7852      	ldrb	r2, [r2, #1]
 80170c8:	4618      	mov	r0, r3
 80170ca:	e7c9      	b.n	8017060 <_strtod_l+0x1e0>
 80170cc:	4658      	mov	r0, fp
 80170ce:	e7d2      	b.n	8017076 <_strtod_l+0x1f6>
 80170d0:	2b08      	cmp	r3, #8
 80170d2:	f103 0301 	add.w	r3, r3, #1
 80170d6:	dc03      	bgt.n	80170e0 <_strtod_l+0x260>
 80170d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80170da:	434f      	muls	r7, r1
 80170dc:	9709      	str	r7, [sp, #36]	; 0x24
 80170de:	e7e1      	b.n	80170a4 <_strtod_l+0x224>
 80170e0:	2b10      	cmp	r3, #16
 80170e2:	bfd8      	it	le
 80170e4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80170e8:	e7dc      	b.n	80170a4 <_strtod_l+0x224>
 80170ea:	2e10      	cmp	r6, #16
 80170ec:	bfdc      	itt	le
 80170ee:	230a      	movle	r3, #10
 80170f0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80170f4:	e7e3      	b.n	80170be <_strtod_l+0x23e>
 80170f6:	2300      	movs	r3, #0
 80170f8:	9305      	str	r3, [sp, #20]
 80170fa:	2301      	movs	r3, #1
 80170fc:	e780      	b.n	8017000 <_strtod_l+0x180>
 80170fe:	f04f 0c00 	mov.w	ip, #0
 8017102:	1caa      	adds	r2, r5, #2
 8017104:	9215      	str	r2, [sp, #84]	; 0x54
 8017106:	78aa      	ldrb	r2, [r5, #2]
 8017108:	e788      	b.n	801701c <_strtod_l+0x19c>
 801710a:	f04f 0c01 	mov.w	ip, #1
 801710e:	e7f8      	b.n	8017102 <_strtod_l+0x282>
 8017110:	0801c288 	.word	0x0801c288
 8017114:	0801c284 	.word	0x0801c284
 8017118:	7ff00000 	.word	0x7ff00000
 801711c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801711e:	1c51      	adds	r1, r2, #1
 8017120:	9115      	str	r1, [sp, #84]	; 0x54
 8017122:	7852      	ldrb	r2, [r2, #1]
 8017124:	2a30      	cmp	r2, #48	; 0x30
 8017126:	d0f9      	beq.n	801711c <_strtod_l+0x29c>
 8017128:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801712c:	2908      	cmp	r1, #8
 801712e:	f63f af7a 	bhi.w	8017026 <_strtod_l+0x1a6>
 8017132:	3a30      	subs	r2, #48	; 0x30
 8017134:	9208      	str	r2, [sp, #32]
 8017136:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017138:	920c      	str	r2, [sp, #48]	; 0x30
 801713a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801713c:	1c57      	adds	r7, r2, #1
 801713e:	9715      	str	r7, [sp, #84]	; 0x54
 8017140:	7852      	ldrb	r2, [r2, #1]
 8017142:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8017146:	f1be 0f09 	cmp.w	lr, #9
 801714a:	d938      	bls.n	80171be <_strtod_l+0x33e>
 801714c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801714e:	1a7f      	subs	r7, r7, r1
 8017150:	2f08      	cmp	r7, #8
 8017152:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8017156:	dc03      	bgt.n	8017160 <_strtod_l+0x2e0>
 8017158:	9908      	ldr	r1, [sp, #32]
 801715a:	428f      	cmp	r7, r1
 801715c:	bfa8      	it	ge
 801715e:	460f      	movge	r7, r1
 8017160:	f1bc 0f00 	cmp.w	ip, #0
 8017164:	d000      	beq.n	8017168 <_strtod_l+0x2e8>
 8017166:	427f      	negs	r7, r7
 8017168:	2e00      	cmp	r6, #0
 801716a:	d14f      	bne.n	801720c <_strtod_l+0x38c>
 801716c:	9904      	ldr	r1, [sp, #16]
 801716e:	4301      	orrs	r1, r0
 8017170:	f47f aec1 	bne.w	8016ef6 <_strtod_l+0x76>
 8017174:	2b00      	cmp	r3, #0
 8017176:	f47f aedb 	bne.w	8016f30 <_strtod_l+0xb0>
 801717a:	2a69      	cmp	r2, #105	; 0x69
 801717c:	d029      	beq.n	80171d2 <_strtod_l+0x352>
 801717e:	dc26      	bgt.n	80171ce <_strtod_l+0x34e>
 8017180:	2a49      	cmp	r2, #73	; 0x49
 8017182:	d026      	beq.n	80171d2 <_strtod_l+0x352>
 8017184:	2a4e      	cmp	r2, #78	; 0x4e
 8017186:	f47f aed3 	bne.w	8016f30 <_strtod_l+0xb0>
 801718a:	499b      	ldr	r1, [pc, #620]	; (80173f8 <_strtod_l+0x578>)
 801718c:	a815      	add	r0, sp, #84	; 0x54
 801718e:	f001 fd9b 	bl	8018cc8 <__match>
 8017192:	2800      	cmp	r0, #0
 8017194:	f43f aecc 	beq.w	8016f30 <_strtod_l+0xb0>
 8017198:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801719a:	781b      	ldrb	r3, [r3, #0]
 801719c:	2b28      	cmp	r3, #40	; 0x28
 801719e:	d12f      	bne.n	8017200 <_strtod_l+0x380>
 80171a0:	4996      	ldr	r1, [pc, #600]	; (80173fc <_strtod_l+0x57c>)
 80171a2:	aa18      	add	r2, sp, #96	; 0x60
 80171a4:	a815      	add	r0, sp, #84	; 0x54
 80171a6:	f001 fda3 	bl	8018cf0 <__hexnan>
 80171aa:	2805      	cmp	r0, #5
 80171ac:	d128      	bne.n	8017200 <_strtod_l+0x380>
 80171ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80171b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80171b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80171b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80171bc:	e69b      	b.n	8016ef6 <_strtod_l+0x76>
 80171be:	9f08      	ldr	r7, [sp, #32]
 80171c0:	210a      	movs	r1, #10
 80171c2:	fb01 2107 	mla	r1, r1, r7, r2
 80171c6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80171ca:	9208      	str	r2, [sp, #32]
 80171cc:	e7b5      	b.n	801713a <_strtod_l+0x2ba>
 80171ce:	2a6e      	cmp	r2, #110	; 0x6e
 80171d0:	e7d9      	b.n	8017186 <_strtod_l+0x306>
 80171d2:	498b      	ldr	r1, [pc, #556]	; (8017400 <_strtod_l+0x580>)
 80171d4:	a815      	add	r0, sp, #84	; 0x54
 80171d6:	f001 fd77 	bl	8018cc8 <__match>
 80171da:	2800      	cmp	r0, #0
 80171dc:	f43f aea8 	beq.w	8016f30 <_strtod_l+0xb0>
 80171e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80171e2:	4988      	ldr	r1, [pc, #544]	; (8017404 <_strtod_l+0x584>)
 80171e4:	3b01      	subs	r3, #1
 80171e6:	a815      	add	r0, sp, #84	; 0x54
 80171e8:	9315      	str	r3, [sp, #84]	; 0x54
 80171ea:	f001 fd6d 	bl	8018cc8 <__match>
 80171ee:	b910      	cbnz	r0, 80171f6 <_strtod_l+0x376>
 80171f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80171f2:	3301      	adds	r3, #1
 80171f4:	9315      	str	r3, [sp, #84]	; 0x54
 80171f6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8017414 <_strtod_l+0x594>
 80171fa:	f04f 0800 	mov.w	r8, #0
 80171fe:	e67a      	b.n	8016ef6 <_strtod_l+0x76>
 8017200:	4881      	ldr	r0, [pc, #516]	; (8017408 <_strtod_l+0x588>)
 8017202:	f001 fa7d 	bl	8018700 <nan>
 8017206:	ec59 8b10 	vmov	r8, r9, d0
 801720a:	e674      	b.n	8016ef6 <_strtod_l+0x76>
 801720c:	9b05      	ldr	r3, [sp, #20]
 801720e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017210:	1afb      	subs	r3, r7, r3
 8017212:	f1bb 0f00 	cmp.w	fp, #0
 8017216:	bf08      	it	eq
 8017218:	46b3      	moveq	fp, r6
 801721a:	2e10      	cmp	r6, #16
 801721c:	9308      	str	r3, [sp, #32]
 801721e:	4635      	mov	r5, r6
 8017220:	bfa8      	it	ge
 8017222:	2510      	movge	r5, #16
 8017224:	f7e9 f996 	bl	8000554 <__aeabi_ui2d>
 8017228:	2e09      	cmp	r6, #9
 801722a:	4680      	mov	r8, r0
 801722c:	4689      	mov	r9, r1
 801722e:	dd13      	ble.n	8017258 <_strtod_l+0x3d8>
 8017230:	4b76      	ldr	r3, [pc, #472]	; (801740c <_strtod_l+0x58c>)
 8017232:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017236:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801723a:	f7e9 fa05 	bl	8000648 <__aeabi_dmul>
 801723e:	4680      	mov	r8, r0
 8017240:	4650      	mov	r0, sl
 8017242:	4689      	mov	r9, r1
 8017244:	f7e9 f986 	bl	8000554 <__aeabi_ui2d>
 8017248:	4602      	mov	r2, r0
 801724a:	460b      	mov	r3, r1
 801724c:	4640      	mov	r0, r8
 801724e:	4649      	mov	r1, r9
 8017250:	f7e9 f844 	bl	80002dc <__adddf3>
 8017254:	4680      	mov	r8, r0
 8017256:	4689      	mov	r9, r1
 8017258:	2e0f      	cmp	r6, #15
 801725a:	dc38      	bgt.n	80172ce <_strtod_l+0x44e>
 801725c:	9b08      	ldr	r3, [sp, #32]
 801725e:	2b00      	cmp	r3, #0
 8017260:	f43f ae49 	beq.w	8016ef6 <_strtod_l+0x76>
 8017264:	dd24      	ble.n	80172b0 <_strtod_l+0x430>
 8017266:	2b16      	cmp	r3, #22
 8017268:	dc0b      	bgt.n	8017282 <_strtod_l+0x402>
 801726a:	4968      	ldr	r1, [pc, #416]	; (801740c <_strtod_l+0x58c>)
 801726c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017270:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017274:	4642      	mov	r2, r8
 8017276:	464b      	mov	r3, r9
 8017278:	f7e9 f9e6 	bl	8000648 <__aeabi_dmul>
 801727c:	4680      	mov	r8, r0
 801727e:	4689      	mov	r9, r1
 8017280:	e639      	b.n	8016ef6 <_strtod_l+0x76>
 8017282:	9a08      	ldr	r2, [sp, #32]
 8017284:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8017288:	4293      	cmp	r3, r2
 801728a:	db20      	blt.n	80172ce <_strtod_l+0x44e>
 801728c:	4c5f      	ldr	r4, [pc, #380]	; (801740c <_strtod_l+0x58c>)
 801728e:	f1c6 060f 	rsb	r6, r6, #15
 8017292:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8017296:	4642      	mov	r2, r8
 8017298:	464b      	mov	r3, r9
 801729a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801729e:	f7e9 f9d3 	bl	8000648 <__aeabi_dmul>
 80172a2:	9b08      	ldr	r3, [sp, #32]
 80172a4:	1b9e      	subs	r6, r3, r6
 80172a6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80172aa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80172ae:	e7e3      	b.n	8017278 <_strtod_l+0x3f8>
 80172b0:	9b08      	ldr	r3, [sp, #32]
 80172b2:	3316      	adds	r3, #22
 80172b4:	db0b      	blt.n	80172ce <_strtod_l+0x44e>
 80172b6:	9b05      	ldr	r3, [sp, #20]
 80172b8:	1bdf      	subs	r7, r3, r7
 80172ba:	4b54      	ldr	r3, [pc, #336]	; (801740c <_strtod_l+0x58c>)
 80172bc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80172c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80172c4:	4640      	mov	r0, r8
 80172c6:	4649      	mov	r1, r9
 80172c8:	f7e9 fae8 	bl	800089c <__aeabi_ddiv>
 80172cc:	e7d6      	b.n	801727c <_strtod_l+0x3fc>
 80172ce:	9b08      	ldr	r3, [sp, #32]
 80172d0:	1b75      	subs	r5, r6, r5
 80172d2:	441d      	add	r5, r3
 80172d4:	2d00      	cmp	r5, #0
 80172d6:	dd70      	ble.n	80173ba <_strtod_l+0x53a>
 80172d8:	f015 030f 	ands.w	r3, r5, #15
 80172dc:	d00a      	beq.n	80172f4 <_strtod_l+0x474>
 80172de:	494b      	ldr	r1, [pc, #300]	; (801740c <_strtod_l+0x58c>)
 80172e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80172e4:	4642      	mov	r2, r8
 80172e6:	464b      	mov	r3, r9
 80172e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80172ec:	f7e9 f9ac 	bl	8000648 <__aeabi_dmul>
 80172f0:	4680      	mov	r8, r0
 80172f2:	4689      	mov	r9, r1
 80172f4:	f035 050f 	bics.w	r5, r5, #15
 80172f8:	d04d      	beq.n	8017396 <_strtod_l+0x516>
 80172fa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80172fe:	dd22      	ble.n	8017346 <_strtod_l+0x4c6>
 8017300:	2500      	movs	r5, #0
 8017302:	46ab      	mov	fp, r5
 8017304:	9509      	str	r5, [sp, #36]	; 0x24
 8017306:	9505      	str	r5, [sp, #20]
 8017308:	2322      	movs	r3, #34	; 0x22
 801730a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8017414 <_strtod_l+0x594>
 801730e:	6023      	str	r3, [r4, #0]
 8017310:	f04f 0800 	mov.w	r8, #0
 8017314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017316:	2b00      	cmp	r3, #0
 8017318:	f43f aded 	beq.w	8016ef6 <_strtod_l+0x76>
 801731c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801731e:	4620      	mov	r0, r4
 8017320:	f7ff f924 	bl	801656c <_Bfree>
 8017324:	9905      	ldr	r1, [sp, #20]
 8017326:	4620      	mov	r0, r4
 8017328:	f7ff f920 	bl	801656c <_Bfree>
 801732c:	4659      	mov	r1, fp
 801732e:	4620      	mov	r0, r4
 8017330:	f7ff f91c 	bl	801656c <_Bfree>
 8017334:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017336:	4620      	mov	r0, r4
 8017338:	f7ff f918 	bl	801656c <_Bfree>
 801733c:	4629      	mov	r1, r5
 801733e:	4620      	mov	r0, r4
 8017340:	f7ff f914 	bl	801656c <_Bfree>
 8017344:	e5d7      	b.n	8016ef6 <_strtod_l+0x76>
 8017346:	4b32      	ldr	r3, [pc, #200]	; (8017410 <_strtod_l+0x590>)
 8017348:	9304      	str	r3, [sp, #16]
 801734a:	2300      	movs	r3, #0
 801734c:	112d      	asrs	r5, r5, #4
 801734e:	4640      	mov	r0, r8
 8017350:	4649      	mov	r1, r9
 8017352:	469a      	mov	sl, r3
 8017354:	2d01      	cmp	r5, #1
 8017356:	dc21      	bgt.n	801739c <_strtod_l+0x51c>
 8017358:	b10b      	cbz	r3, 801735e <_strtod_l+0x4de>
 801735a:	4680      	mov	r8, r0
 801735c:	4689      	mov	r9, r1
 801735e:	492c      	ldr	r1, [pc, #176]	; (8017410 <_strtod_l+0x590>)
 8017360:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8017364:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017368:	4642      	mov	r2, r8
 801736a:	464b      	mov	r3, r9
 801736c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017370:	f7e9 f96a 	bl	8000648 <__aeabi_dmul>
 8017374:	4b27      	ldr	r3, [pc, #156]	; (8017414 <_strtod_l+0x594>)
 8017376:	460a      	mov	r2, r1
 8017378:	400b      	ands	r3, r1
 801737a:	4927      	ldr	r1, [pc, #156]	; (8017418 <_strtod_l+0x598>)
 801737c:	428b      	cmp	r3, r1
 801737e:	4680      	mov	r8, r0
 8017380:	d8be      	bhi.n	8017300 <_strtod_l+0x480>
 8017382:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017386:	428b      	cmp	r3, r1
 8017388:	bf86      	itte	hi
 801738a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801741c <_strtod_l+0x59c>
 801738e:	f04f 38ff 	movhi.w	r8, #4294967295
 8017392:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8017396:	2300      	movs	r3, #0
 8017398:	9304      	str	r3, [sp, #16]
 801739a:	e07b      	b.n	8017494 <_strtod_l+0x614>
 801739c:	07ea      	lsls	r2, r5, #31
 801739e:	d505      	bpl.n	80173ac <_strtod_l+0x52c>
 80173a0:	9b04      	ldr	r3, [sp, #16]
 80173a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173a6:	f7e9 f94f 	bl	8000648 <__aeabi_dmul>
 80173aa:	2301      	movs	r3, #1
 80173ac:	9a04      	ldr	r2, [sp, #16]
 80173ae:	3208      	adds	r2, #8
 80173b0:	f10a 0a01 	add.w	sl, sl, #1
 80173b4:	106d      	asrs	r5, r5, #1
 80173b6:	9204      	str	r2, [sp, #16]
 80173b8:	e7cc      	b.n	8017354 <_strtod_l+0x4d4>
 80173ba:	d0ec      	beq.n	8017396 <_strtod_l+0x516>
 80173bc:	426d      	negs	r5, r5
 80173be:	f015 020f 	ands.w	r2, r5, #15
 80173c2:	d00a      	beq.n	80173da <_strtod_l+0x55a>
 80173c4:	4b11      	ldr	r3, [pc, #68]	; (801740c <_strtod_l+0x58c>)
 80173c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80173ca:	4640      	mov	r0, r8
 80173cc:	4649      	mov	r1, r9
 80173ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173d2:	f7e9 fa63 	bl	800089c <__aeabi_ddiv>
 80173d6:	4680      	mov	r8, r0
 80173d8:	4689      	mov	r9, r1
 80173da:	112d      	asrs	r5, r5, #4
 80173dc:	d0db      	beq.n	8017396 <_strtod_l+0x516>
 80173de:	2d1f      	cmp	r5, #31
 80173e0:	dd1e      	ble.n	8017420 <_strtod_l+0x5a0>
 80173e2:	2500      	movs	r5, #0
 80173e4:	46ab      	mov	fp, r5
 80173e6:	9509      	str	r5, [sp, #36]	; 0x24
 80173e8:	9505      	str	r5, [sp, #20]
 80173ea:	2322      	movs	r3, #34	; 0x22
 80173ec:	f04f 0800 	mov.w	r8, #0
 80173f0:	f04f 0900 	mov.w	r9, #0
 80173f4:	6023      	str	r3, [r4, #0]
 80173f6:	e78d      	b.n	8017314 <_strtod_l+0x494>
 80173f8:	0801c075 	.word	0x0801c075
 80173fc:	0801c29c 	.word	0x0801c29c
 8017400:	0801c06d 	.word	0x0801c06d
 8017404:	0801c0a2 	.word	0x0801c0a2
 8017408:	0801c448 	.word	0x0801c448
 801740c:	0801c1b0 	.word	0x0801c1b0
 8017410:	0801c188 	.word	0x0801c188
 8017414:	7ff00000 	.word	0x7ff00000
 8017418:	7ca00000 	.word	0x7ca00000
 801741c:	7fefffff 	.word	0x7fefffff
 8017420:	f015 0310 	ands.w	r3, r5, #16
 8017424:	bf18      	it	ne
 8017426:	236a      	movne	r3, #106	; 0x6a
 8017428:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80177cc <_strtod_l+0x94c>
 801742c:	9304      	str	r3, [sp, #16]
 801742e:	4640      	mov	r0, r8
 8017430:	4649      	mov	r1, r9
 8017432:	2300      	movs	r3, #0
 8017434:	07ea      	lsls	r2, r5, #31
 8017436:	d504      	bpl.n	8017442 <_strtod_l+0x5c2>
 8017438:	e9da 2300 	ldrd	r2, r3, [sl]
 801743c:	f7e9 f904 	bl	8000648 <__aeabi_dmul>
 8017440:	2301      	movs	r3, #1
 8017442:	106d      	asrs	r5, r5, #1
 8017444:	f10a 0a08 	add.w	sl, sl, #8
 8017448:	d1f4      	bne.n	8017434 <_strtod_l+0x5b4>
 801744a:	b10b      	cbz	r3, 8017450 <_strtod_l+0x5d0>
 801744c:	4680      	mov	r8, r0
 801744e:	4689      	mov	r9, r1
 8017450:	9b04      	ldr	r3, [sp, #16]
 8017452:	b1bb      	cbz	r3, 8017484 <_strtod_l+0x604>
 8017454:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8017458:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801745c:	2b00      	cmp	r3, #0
 801745e:	4649      	mov	r1, r9
 8017460:	dd10      	ble.n	8017484 <_strtod_l+0x604>
 8017462:	2b1f      	cmp	r3, #31
 8017464:	f340 811e 	ble.w	80176a4 <_strtod_l+0x824>
 8017468:	2b34      	cmp	r3, #52	; 0x34
 801746a:	bfde      	ittt	le
 801746c:	f04f 33ff 	movle.w	r3, #4294967295
 8017470:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8017474:	4093      	lslle	r3, r2
 8017476:	f04f 0800 	mov.w	r8, #0
 801747a:	bfcc      	ite	gt
 801747c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8017480:	ea03 0901 	andle.w	r9, r3, r1
 8017484:	2200      	movs	r2, #0
 8017486:	2300      	movs	r3, #0
 8017488:	4640      	mov	r0, r8
 801748a:	4649      	mov	r1, r9
 801748c:	f7e9 fb44 	bl	8000b18 <__aeabi_dcmpeq>
 8017490:	2800      	cmp	r0, #0
 8017492:	d1a6      	bne.n	80173e2 <_strtod_l+0x562>
 8017494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017496:	9300      	str	r3, [sp, #0]
 8017498:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801749a:	4633      	mov	r3, r6
 801749c:	465a      	mov	r2, fp
 801749e:	4620      	mov	r0, r4
 80174a0:	f7ff f8cc 	bl	801663c <__s2b>
 80174a4:	9009      	str	r0, [sp, #36]	; 0x24
 80174a6:	2800      	cmp	r0, #0
 80174a8:	f43f af2a 	beq.w	8017300 <_strtod_l+0x480>
 80174ac:	9a08      	ldr	r2, [sp, #32]
 80174ae:	9b05      	ldr	r3, [sp, #20]
 80174b0:	2a00      	cmp	r2, #0
 80174b2:	eba3 0307 	sub.w	r3, r3, r7
 80174b6:	bfa8      	it	ge
 80174b8:	2300      	movge	r3, #0
 80174ba:	930c      	str	r3, [sp, #48]	; 0x30
 80174bc:	2500      	movs	r5, #0
 80174be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80174c2:	9312      	str	r3, [sp, #72]	; 0x48
 80174c4:	46ab      	mov	fp, r5
 80174c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174c8:	4620      	mov	r0, r4
 80174ca:	6859      	ldr	r1, [r3, #4]
 80174cc:	f7ff f80e 	bl	80164ec <_Balloc>
 80174d0:	9005      	str	r0, [sp, #20]
 80174d2:	2800      	cmp	r0, #0
 80174d4:	f43f af18 	beq.w	8017308 <_strtod_l+0x488>
 80174d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174da:	691a      	ldr	r2, [r3, #16]
 80174dc:	3202      	adds	r2, #2
 80174de:	f103 010c 	add.w	r1, r3, #12
 80174e2:	0092      	lsls	r2, r2, #2
 80174e4:	300c      	adds	r0, #12
 80174e6:	f7fe f872 	bl	80155ce <memcpy>
 80174ea:	ec49 8b10 	vmov	d0, r8, r9
 80174ee:	aa18      	add	r2, sp, #96	; 0x60
 80174f0:	a917      	add	r1, sp, #92	; 0x5c
 80174f2:	4620      	mov	r0, r4
 80174f4:	f7ff fbd6 	bl	8016ca4 <__d2b>
 80174f8:	ec49 8b18 	vmov	d8, r8, r9
 80174fc:	9016      	str	r0, [sp, #88]	; 0x58
 80174fe:	2800      	cmp	r0, #0
 8017500:	f43f af02 	beq.w	8017308 <_strtod_l+0x488>
 8017504:	2101      	movs	r1, #1
 8017506:	4620      	mov	r0, r4
 8017508:	f7ff f930 	bl	801676c <__i2b>
 801750c:	4683      	mov	fp, r0
 801750e:	2800      	cmp	r0, #0
 8017510:	f43f aefa 	beq.w	8017308 <_strtod_l+0x488>
 8017514:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8017516:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017518:	2e00      	cmp	r6, #0
 801751a:	bfab      	itete	ge
 801751c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801751e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8017520:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8017522:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8017526:	bfac      	ite	ge
 8017528:	eb06 0a03 	addge.w	sl, r6, r3
 801752c:	1b9f      	sublt	r7, r3, r6
 801752e:	9b04      	ldr	r3, [sp, #16]
 8017530:	1af6      	subs	r6, r6, r3
 8017532:	4416      	add	r6, r2
 8017534:	4ba0      	ldr	r3, [pc, #640]	; (80177b8 <_strtod_l+0x938>)
 8017536:	3e01      	subs	r6, #1
 8017538:	429e      	cmp	r6, r3
 801753a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801753e:	f280 80c4 	bge.w	80176ca <_strtod_l+0x84a>
 8017542:	1b9b      	subs	r3, r3, r6
 8017544:	2b1f      	cmp	r3, #31
 8017546:	eba2 0203 	sub.w	r2, r2, r3
 801754a:	f04f 0101 	mov.w	r1, #1
 801754e:	f300 80b0 	bgt.w	80176b2 <_strtod_l+0x832>
 8017552:	fa01 f303 	lsl.w	r3, r1, r3
 8017556:	930e      	str	r3, [sp, #56]	; 0x38
 8017558:	2300      	movs	r3, #0
 801755a:	930d      	str	r3, [sp, #52]	; 0x34
 801755c:	eb0a 0602 	add.w	r6, sl, r2
 8017560:	9b04      	ldr	r3, [sp, #16]
 8017562:	45b2      	cmp	sl, r6
 8017564:	4417      	add	r7, r2
 8017566:	441f      	add	r7, r3
 8017568:	4653      	mov	r3, sl
 801756a:	bfa8      	it	ge
 801756c:	4633      	movge	r3, r6
 801756e:	42bb      	cmp	r3, r7
 8017570:	bfa8      	it	ge
 8017572:	463b      	movge	r3, r7
 8017574:	2b00      	cmp	r3, #0
 8017576:	bfc2      	ittt	gt
 8017578:	1af6      	subgt	r6, r6, r3
 801757a:	1aff      	subgt	r7, r7, r3
 801757c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8017580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017582:	2b00      	cmp	r3, #0
 8017584:	dd17      	ble.n	80175b6 <_strtod_l+0x736>
 8017586:	4659      	mov	r1, fp
 8017588:	461a      	mov	r2, r3
 801758a:	4620      	mov	r0, r4
 801758c:	f7ff f9ae 	bl	80168ec <__pow5mult>
 8017590:	4683      	mov	fp, r0
 8017592:	2800      	cmp	r0, #0
 8017594:	f43f aeb8 	beq.w	8017308 <_strtod_l+0x488>
 8017598:	4601      	mov	r1, r0
 801759a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801759c:	4620      	mov	r0, r4
 801759e:	f7ff f8fb 	bl	8016798 <__multiply>
 80175a2:	900b      	str	r0, [sp, #44]	; 0x2c
 80175a4:	2800      	cmp	r0, #0
 80175a6:	f43f aeaf 	beq.w	8017308 <_strtod_l+0x488>
 80175aa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80175ac:	4620      	mov	r0, r4
 80175ae:	f7fe ffdd 	bl	801656c <_Bfree>
 80175b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80175b4:	9316      	str	r3, [sp, #88]	; 0x58
 80175b6:	2e00      	cmp	r6, #0
 80175b8:	f300 808c 	bgt.w	80176d4 <_strtod_l+0x854>
 80175bc:	9b08      	ldr	r3, [sp, #32]
 80175be:	2b00      	cmp	r3, #0
 80175c0:	dd08      	ble.n	80175d4 <_strtod_l+0x754>
 80175c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80175c4:	9905      	ldr	r1, [sp, #20]
 80175c6:	4620      	mov	r0, r4
 80175c8:	f7ff f990 	bl	80168ec <__pow5mult>
 80175cc:	9005      	str	r0, [sp, #20]
 80175ce:	2800      	cmp	r0, #0
 80175d0:	f43f ae9a 	beq.w	8017308 <_strtod_l+0x488>
 80175d4:	2f00      	cmp	r7, #0
 80175d6:	dd08      	ble.n	80175ea <_strtod_l+0x76a>
 80175d8:	9905      	ldr	r1, [sp, #20]
 80175da:	463a      	mov	r2, r7
 80175dc:	4620      	mov	r0, r4
 80175de:	f7ff f9df 	bl	80169a0 <__lshift>
 80175e2:	9005      	str	r0, [sp, #20]
 80175e4:	2800      	cmp	r0, #0
 80175e6:	f43f ae8f 	beq.w	8017308 <_strtod_l+0x488>
 80175ea:	f1ba 0f00 	cmp.w	sl, #0
 80175ee:	dd08      	ble.n	8017602 <_strtod_l+0x782>
 80175f0:	4659      	mov	r1, fp
 80175f2:	4652      	mov	r2, sl
 80175f4:	4620      	mov	r0, r4
 80175f6:	f7ff f9d3 	bl	80169a0 <__lshift>
 80175fa:	4683      	mov	fp, r0
 80175fc:	2800      	cmp	r0, #0
 80175fe:	f43f ae83 	beq.w	8017308 <_strtod_l+0x488>
 8017602:	9a05      	ldr	r2, [sp, #20]
 8017604:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017606:	4620      	mov	r0, r4
 8017608:	f7ff fa52 	bl	8016ab0 <__mdiff>
 801760c:	4605      	mov	r5, r0
 801760e:	2800      	cmp	r0, #0
 8017610:	f43f ae7a 	beq.w	8017308 <_strtod_l+0x488>
 8017614:	68c3      	ldr	r3, [r0, #12]
 8017616:	930b      	str	r3, [sp, #44]	; 0x2c
 8017618:	2300      	movs	r3, #0
 801761a:	60c3      	str	r3, [r0, #12]
 801761c:	4659      	mov	r1, fp
 801761e:	f7ff fa2b 	bl	8016a78 <__mcmp>
 8017622:	2800      	cmp	r0, #0
 8017624:	da60      	bge.n	80176e8 <_strtod_l+0x868>
 8017626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017628:	ea53 0308 	orrs.w	r3, r3, r8
 801762c:	f040 8084 	bne.w	8017738 <_strtod_l+0x8b8>
 8017630:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017634:	2b00      	cmp	r3, #0
 8017636:	d17f      	bne.n	8017738 <_strtod_l+0x8b8>
 8017638:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801763c:	0d1b      	lsrs	r3, r3, #20
 801763e:	051b      	lsls	r3, r3, #20
 8017640:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017644:	d978      	bls.n	8017738 <_strtod_l+0x8b8>
 8017646:	696b      	ldr	r3, [r5, #20]
 8017648:	b913      	cbnz	r3, 8017650 <_strtod_l+0x7d0>
 801764a:	692b      	ldr	r3, [r5, #16]
 801764c:	2b01      	cmp	r3, #1
 801764e:	dd73      	ble.n	8017738 <_strtod_l+0x8b8>
 8017650:	4629      	mov	r1, r5
 8017652:	2201      	movs	r2, #1
 8017654:	4620      	mov	r0, r4
 8017656:	f7ff f9a3 	bl	80169a0 <__lshift>
 801765a:	4659      	mov	r1, fp
 801765c:	4605      	mov	r5, r0
 801765e:	f7ff fa0b 	bl	8016a78 <__mcmp>
 8017662:	2800      	cmp	r0, #0
 8017664:	dd68      	ble.n	8017738 <_strtod_l+0x8b8>
 8017666:	9904      	ldr	r1, [sp, #16]
 8017668:	4a54      	ldr	r2, [pc, #336]	; (80177bc <_strtod_l+0x93c>)
 801766a:	464b      	mov	r3, r9
 801766c:	2900      	cmp	r1, #0
 801766e:	f000 8084 	beq.w	801777a <_strtod_l+0x8fa>
 8017672:	ea02 0109 	and.w	r1, r2, r9
 8017676:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801767a:	dc7e      	bgt.n	801777a <_strtod_l+0x8fa>
 801767c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017680:	f77f aeb3 	ble.w	80173ea <_strtod_l+0x56a>
 8017684:	4b4e      	ldr	r3, [pc, #312]	; (80177c0 <_strtod_l+0x940>)
 8017686:	4640      	mov	r0, r8
 8017688:	4649      	mov	r1, r9
 801768a:	2200      	movs	r2, #0
 801768c:	f7e8 ffdc 	bl	8000648 <__aeabi_dmul>
 8017690:	4b4a      	ldr	r3, [pc, #296]	; (80177bc <_strtod_l+0x93c>)
 8017692:	400b      	ands	r3, r1
 8017694:	4680      	mov	r8, r0
 8017696:	4689      	mov	r9, r1
 8017698:	2b00      	cmp	r3, #0
 801769a:	f47f ae3f 	bne.w	801731c <_strtod_l+0x49c>
 801769e:	2322      	movs	r3, #34	; 0x22
 80176a0:	6023      	str	r3, [r4, #0]
 80176a2:	e63b      	b.n	801731c <_strtod_l+0x49c>
 80176a4:	f04f 32ff 	mov.w	r2, #4294967295
 80176a8:	fa02 f303 	lsl.w	r3, r2, r3
 80176ac:	ea03 0808 	and.w	r8, r3, r8
 80176b0:	e6e8      	b.n	8017484 <_strtod_l+0x604>
 80176b2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80176b6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80176ba:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80176be:	36e2      	adds	r6, #226	; 0xe2
 80176c0:	fa01 f306 	lsl.w	r3, r1, r6
 80176c4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80176c8:	e748      	b.n	801755c <_strtod_l+0x6dc>
 80176ca:	2100      	movs	r1, #0
 80176cc:	2301      	movs	r3, #1
 80176ce:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80176d2:	e743      	b.n	801755c <_strtod_l+0x6dc>
 80176d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80176d6:	4632      	mov	r2, r6
 80176d8:	4620      	mov	r0, r4
 80176da:	f7ff f961 	bl	80169a0 <__lshift>
 80176de:	9016      	str	r0, [sp, #88]	; 0x58
 80176e0:	2800      	cmp	r0, #0
 80176e2:	f47f af6b 	bne.w	80175bc <_strtod_l+0x73c>
 80176e6:	e60f      	b.n	8017308 <_strtod_l+0x488>
 80176e8:	46ca      	mov	sl, r9
 80176ea:	d171      	bne.n	80177d0 <_strtod_l+0x950>
 80176ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80176ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80176f2:	b352      	cbz	r2, 801774a <_strtod_l+0x8ca>
 80176f4:	4a33      	ldr	r2, [pc, #204]	; (80177c4 <_strtod_l+0x944>)
 80176f6:	4293      	cmp	r3, r2
 80176f8:	d12a      	bne.n	8017750 <_strtod_l+0x8d0>
 80176fa:	9b04      	ldr	r3, [sp, #16]
 80176fc:	4641      	mov	r1, r8
 80176fe:	b1fb      	cbz	r3, 8017740 <_strtod_l+0x8c0>
 8017700:	4b2e      	ldr	r3, [pc, #184]	; (80177bc <_strtod_l+0x93c>)
 8017702:	ea09 0303 	and.w	r3, r9, r3
 8017706:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801770a:	f04f 32ff 	mov.w	r2, #4294967295
 801770e:	d81a      	bhi.n	8017746 <_strtod_l+0x8c6>
 8017710:	0d1b      	lsrs	r3, r3, #20
 8017712:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017716:	fa02 f303 	lsl.w	r3, r2, r3
 801771a:	4299      	cmp	r1, r3
 801771c:	d118      	bne.n	8017750 <_strtod_l+0x8d0>
 801771e:	4b2a      	ldr	r3, [pc, #168]	; (80177c8 <_strtod_l+0x948>)
 8017720:	459a      	cmp	sl, r3
 8017722:	d102      	bne.n	801772a <_strtod_l+0x8aa>
 8017724:	3101      	adds	r1, #1
 8017726:	f43f adef 	beq.w	8017308 <_strtod_l+0x488>
 801772a:	4b24      	ldr	r3, [pc, #144]	; (80177bc <_strtod_l+0x93c>)
 801772c:	ea0a 0303 	and.w	r3, sl, r3
 8017730:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8017734:	f04f 0800 	mov.w	r8, #0
 8017738:	9b04      	ldr	r3, [sp, #16]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d1a2      	bne.n	8017684 <_strtod_l+0x804>
 801773e:	e5ed      	b.n	801731c <_strtod_l+0x49c>
 8017740:	f04f 33ff 	mov.w	r3, #4294967295
 8017744:	e7e9      	b.n	801771a <_strtod_l+0x89a>
 8017746:	4613      	mov	r3, r2
 8017748:	e7e7      	b.n	801771a <_strtod_l+0x89a>
 801774a:	ea53 0308 	orrs.w	r3, r3, r8
 801774e:	d08a      	beq.n	8017666 <_strtod_l+0x7e6>
 8017750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017752:	b1e3      	cbz	r3, 801778e <_strtod_l+0x90e>
 8017754:	ea13 0f0a 	tst.w	r3, sl
 8017758:	d0ee      	beq.n	8017738 <_strtod_l+0x8b8>
 801775a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801775c:	9a04      	ldr	r2, [sp, #16]
 801775e:	4640      	mov	r0, r8
 8017760:	4649      	mov	r1, r9
 8017762:	b1c3      	cbz	r3, 8017796 <_strtod_l+0x916>
 8017764:	f7ff fb6f 	bl	8016e46 <sulp>
 8017768:	4602      	mov	r2, r0
 801776a:	460b      	mov	r3, r1
 801776c:	ec51 0b18 	vmov	r0, r1, d8
 8017770:	f7e8 fdb4 	bl	80002dc <__adddf3>
 8017774:	4680      	mov	r8, r0
 8017776:	4689      	mov	r9, r1
 8017778:	e7de      	b.n	8017738 <_strtod_l+0x8b8>
 801777a:	4013      	ands	r3, r2
 801777c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017780:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8017784:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8017788:	f04f 38ff 	mov.w	r8, #4294967295
 801778c:	e7d4      	b.n	8017738 <_strtod_l+0x8b8>
 801778e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017790:	ea13 0f08 	tst.w	r3, r8
 8017794:	e7e0      	b.n	8017758 <_strtod_l+0x8d8>
 8017796:	f7ff fb56 	bl	8016e46 <sulp>
 801779a:	4602      	mov	r2, r0
 801779c:	460b      	mov	r3, r1
 801779e:	ec51 0b18 	vmov	r0, r1, d8
 80177a2:	f7e8 fd99 	bl	80002d8 <__aeabi_dsub>
 80177a6:	2200      	movs	r2, #0
 80177a8:	2300      	movs	r3, #0
 80177aa:	4680      	mov	r8, r0
 80177ac:	4689      	mov	r9, r1
 80177ae:	f7e9 f9b3 	bl	8000b18 <__aeabi_dcmpeq>
 80177b2:	2800      	cmp	r0, #0
 80177b4:	d0c0      	beq.n	8017738 <_strtod_l+0x8b8>
 80177b6:	e618      	b.n	80173ea <_strtod_l+0x56a>
 80177b8:	fffffc02 	.word	0xfffffc02
 80177bc:	7ff00000 	.word	0x7ff00000
 80177c0:	39500000 	.word	0x39500000
 80177c4:	000fffff 	.word	0x000fffff
 80177c8:	7fefffff 	.word	0x7fefffff
 80177cc:	0801c2b0 	.word	0x0801c2b0
 80177d0:	4659      	mov	r1, fp
 80177d2:	4628      	mov	r0, r5
 80177d4:	f7ff fac0 	bl	8016d58 <__ratio>
 80177d8:	ec57 6b10 	vmov	r6, r7, d0
 80177dc:	ee10 0a10 	vmov	r0, s0
 80177e0:	2200      	movs	r2, #0
 80177e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80177e6:	4639      	mov	r1, r7
 80177e8:	f7e9 f9aa 	bl	8000b40 <__aeabi_dcmple>
 80177ec:	2800      	cmp	r0, #0
 80177ee:	d071      	beq.n	80178d4 <_strtod_l+0xa54>
 80177f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d17c      	bne.n	80178f0 <_strtod_l+0xa70>
 80177f6:	f1b8 0f00 	cmp.w	r8, #0
 80177fa:	d15a      	bne.n	80178b2 <_strtod_l+0xa32>
 80177fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017800:	2b00      	cmp	r3, #0
 8017802:	d15d      	bne.n	80178c0 <_strtod_l+0xa40>
 8017804:	4b90      	ldr	r3, [pc, #576]	; (8017a48 <_strtod_l+0xbc8>)
 8017806:	2200      	movs	r2, #0
 8017808:	4630      	mov	r0, r6
 801780a:	4639      	mov	r1, r7
 801780c:	f7e9 f98e 	bl	8000b2c <__aeabi_dcmplt>
 8017810:	2800      	cmp	r0, #0
 8017812:	d15c      	bne.n	80178ce <_strtod_l+0xa4e>
 8017814:	4630      	mov	r0, r6
 8017816:	4639      	mov	r1, r7
 8017818:	4b8c      	ldr	r3, [pc, #560]	; (8017a4c <_strtod_l+0xbcc>)
 801781a:	2200      	movs	r2, #0
 801781c:	f7e8 ff14 	bl	8000648 <__aeabi_dmul>
 8017820:	4606      	mov	r6, r0
 8017822:	460f      	mov	r7, r1
 8017824:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017828:	9606      	str	r6, [sp, #24]
 801782a:	9307      	str	r3, [sp, #28]
 801782c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017830:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8017834:	4b86      	ldr	r3, [pc, #536]	; (8017a50 <_strtod_l+0xbd0>)
 8017836:	ea0a 0303 	and.w	r3, sl, r3
 801783a:	930d      	str	r3, [sp, #52]	; 0x34
 801783c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801783e:	4b85      	ldr	r3, [pc, #532]	; (8017a54 <_strtod_l+0xbd4>)
 8017840:	429a      	cmp	r2, r3
 8017842:	f040 8090 	bne.w	8017966 <_strtod_l+0xae6>
 8017846:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801784a:	ec49 8b10 	vmov	d0, r8, r9
 801784e:	f7ff f9b9 	bl	8016bc4 <__ulp>
 8017852:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017856:	ec51 0b10 	vmov	r0, r1, d0
 801785a:	f7e8 fef5 	bl	8000648 <__aeabi_dmul>
 801785e:	4642      	mov	r2, r8
 8017860:	464b      	mov	r3, r9
 8017862:	f7e8 fd3b 	bl	80002dc <__adddf3>
 8017866:	460b      	mov	r3, r1
 8017868:	4979      	ldr	r1, [pc, #484]	; (8017a50 <_strtod_l+0xbd0>)
 801786a:	4a7b      	ldr	r2, [pc, #492]	; (8017a58 <_strtod_l+0xbd8>)
 801786c:	4019      	ands	r1, r3
 801786e:	4291      	cmp	r1, r2
 8017870:	4680      	mov	r8, r0
 8017872:	d944      	bls.n	80178fe <_strtod_l+0xa7e>
 8017874:	ee18 2a90 	vmov	r2, s17
 8017878:	4b78      	ldr	r3, [pc, #480]	; (8017a5c <_strtod_l+0xbdc>)
 801787a:	429a      	cmp	r2, r3
 801787c:	d104      	bne.n	8017888 <_strtod_l+0xa08>
 801787e:	ee18 3a10 	vmov	r3, s16
 8017882:	3301      	adds	r3, #1
 8017884:	f43f ad40 	beq.w	8017308 <_strtod_l+0x488>
 8017888:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8017a5c <_strtod_l+0xbdc>
 801788c:	f04f 38ff 	mov.w	r8, #4294967295
 8017890:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017892:	4620      	mov	r0, r4
 8017894:	f7fe fe6a 	bl	801656c <_Bfree>
 8017898:	9905      	ldr	r1, [sp, #20]
 801789a:	4620      	mov	r0, r4
 801789c:	f7fe fe66 	bl	801656c <_Bfree>
 80178a0:	4659      	mov	r1, fp
 80178a2:	4620      	mov	r0, r4
 80178a4:	f7fe fe62 	bl	801656c <_Bfree>
 80178a8:	4629      	mov	r1, r5
 80178aa:	4620      	mov	r0, r4
 80178ac:	f7fe fe5e 	bl	801656c <_Bfree>
 80178b0:	e609      	b.n	80174c6 <_strtod_l+0x646>
 80178b2:	f1b8 0f01 	cmp.w	r8, #1
 80178b6:	d103      	bne.n	80178c0 <_strtod_l+0xa40>
 80178b8:	f1b9 0f00 	cmp.w	r9, #0
 80178bc:	f43f ad95 	beq.w	80173ea <_strtod_l+0x56a>
 80178c0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8017a18 <_strtod_l+0xb98>
 80178c4:	4f60      	ldr	r7, [pc, #384]	; (8017a48 <_strtod_l+0xbc8>)
 80178c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80178ca:	2600      	movs	r6, #0
 80178cc:	e7ae      	b.n	801782c <_strtod_l+0x9ac>
 80178ce:	4f5f      	ldr	r7, [pc, #380]	; (8017a4c <_strtod_l+0xbcc>)
 80178d0:	2600      	movs	r6, #0
 80178d2:	e7a7      	b.n	8017824 <_strtod_l+0x9a4>
 80178d4:	4b5d      	ldr	r3, [pc, #372]	; (8017a4c <_strtod_l+0xbcc>)
 80178d6:	4630      	mov	r0, r6
 80178d8:	4639      	mov	r1, r7
 80178da:	2200      	movs	r2, #0
 80178dc:	f7e8 feb4 	bl	8000648 <__aeabi_dmul>
 80178e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80178e2:	4606      	mov	r6, r0
 80178e4:	460f      	mov	r7, r1
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d09c      	beq.n	8017824 <_strtod_l+0x9a4>
 80178ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80178ee:	e79d      	b.n	801782c <_strtod_l+0x9ac>
 80178f0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8017a20 <_strtod_l+0xba0>
 80178f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80178f8:	ec57 6b17 	vmov	r6, r7, d7
 80178fc:	e796      	b.n	801782c <_strtod_l+0x9ac>
 80178fe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8017902:	9b04      	ldr	r3, [sp, #16]
 8017904:	46ca      	mov	sl, r9
 8017906:	2b00      	cmp	r3, #0
 8017908:	d1c2      	bne.n	8017890 <_strtod_l+0xa10>
 801790a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801790e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017910:	0d1b      	lsrs	r3, r3, #20
 8017912:	051b      	lsls	r3, r3, #20
 8017914:	429a      	cmp	r2, r3
 8017916:	d1bb      	bne.n	8017890 <_strtod_l+0xa10>
 8017918:	4630      	mov	r0, r6
 801791a:	4639      	mov	r1, r7
 801791c:	f7e9 fa44 	bl	8000da8 <__aeabi_d2lz>
 8017920:	f7e8 fe64 	bl	80005ec <__aeabi_l2d>
 8017924:	4602      	mov	r2, r0
 8017926:	460b      	mov	r3, r1
 8017928:	4630      	mov	r0, r6
 801792a:	4639      	mov	r1, r7
 801792c:	f7e8 fcd4 	bl	80002d8 <__aeabi_dsub>
 8017930:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017932:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017936:	ea43 0308 	orr.w	r3, r3, r8
 801793a:	4313      	orrs	r3, r2
 801793c:	4606      	mov	r6, r0
 801793e:	460f      	mov	r7, r1
 8017940:	d054      	beq.n	80179ec <_strtod_l+0xb6c>
 8017942:	a339      	add	r3, pc, #228	; (adr r3, 8017a28 <_strtod_l+0xba8>)
 8017944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017948:	f7e9 f8f0 	bl	8000b2c <__aeabi_dcmplt>
 801794c:	2800      	cmp	r0, #0
 801794e:	f47f ace5 	bne.w	801731c <_strtod_l+0x49c>
 8017952:	a337      	add	r3, pc, #220	; (adr r3, 8017a30 <_strtod_l+0xbb0>)
 8017954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017958:	4630      	mov	r0, r6
 801795a:	4639      	mov	r1, r7
 801795c:	f7e9 f904 	bl	8000b68 <__aeabi_dcmpgt>
 8017960:	2800      	cmp	r0, #0
 8017962:	d095      	beq.n	8017890 <_strtod_l+0xa10>
 8017964:	e4da      	b.n	801731c <_strtod_l+0x49c>
 8017966:	9b04      	ldr	r3, [sp, #16]
 8017968:	b333      	cbz	r3, 80179b8 <_strtod_l+0xb38>
 801796a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801796c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017970:	d822      	bhi.n	80179b8 <_strtod_l+0xb38>
 8017972:	a331      	add	r3, pc, #196	; (adr r3, 8017a38 <_strtod_l+0xbb8>)
 8017974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017978:	4630      	mov	r0, r6
 801797a:	4639      	mov	r1, r7
 801797c:	f7e9 f8e0 	bl	8000b40 <__aeabi_dcmple>
 8017980:	b1a0      	cbz	r0, 80179ac <_strtod_l+0xb2c>
 8017982:	4639      	mov	r1, r7
 8017984:	4630      	mov	r0, r6
 8017986:	f7e9 f937 	bl	8000bf8 <__aeabi_d2uiz>
 801798a:	2801      	cmp	r0, #1
 801798c:	bf38      	it	cc
 801798e:	2001      	movcc	r0, #1
 8017990:	f7e8 fde0 	bl	8000554 <__aeabi_ui2d>
 8017994:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017996:	4606      	mov	r6, r0
 8017998:	460f      	mov	r7, r1
 801799a:	bb23      	cbnz	r3, 80179e6 <_strtod_l+0xb66>
 801799c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80179a0:	9010      	str	r0, [sp, #64]	; 0x40
 80179a2:	9311      	str	r3, [sp, #68]	; 0x44
 80179a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80179a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80179ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80179ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80179b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80179b4:	1a9b      	subs	r3, r3, r2
 80179b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80179b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80179bc:	eeb0 0a48 	vmov.f32	s0, s16
 80179c0:	eef0 0a68 	vmov.f32	s1, s17
 80179c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80179c8:	f7ff f8fc 	bl	8016bc4 <__ulp>
 80179cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80179d0:	ec53 2b10 	vmov	r2, r3, d0
 80179d4:	f7e8 fe38 	bl	8000648 <__aeabi_dmul>
 80179d8:	ec53 2b18 	vmov	r2, r3, d8
 80179dc:	f7e8 fc7e 	bl	80002dc <__adddf3>
 80179e0:	4680      	mov	r8, r0
 80179e2:	4689      	mov	r9, r1
 80179e4:	e78d      	b.n	8017902 <_strtod_l+0xa82>
 80179e6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80179ea:	e7db      	b.n	80179a4 <_strtod_l+0xb24>
 80179ec:	a314      	add	r3, pc, #80	; (adr r3, 8017a40 <_strtod_l+0xbc0>)
 80179ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179f2:	f7e9 f89b 	bl	8000b2c <__aeabi_dcmplt>
 80179f6:	e7b3      	b.n	8017960 <_strtod_l+0xae0>
 80179f8:	2300      	movs	r3, #0
 80179fa:	930a      	str	r3, [sp, #40]	; 0x28
 80179fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80179fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017a00:	6013      	str	r3, [r2, #0]
 8017a02:	f7ff ba7c 	b.w	8016efe <_strtod_l+0x7e>
 8017a06:	2a65      	cmp	r2, #101	; 0x65
 8017a08:	f43f ab75 	beq.w	80170f6 <_strtod_l+0x276>
 8017a0c:	2a45      	cmp	r2, #69	; 0x45
 8017a0e:	f43f ab72 	beq.w	80170f6 <_strtod_l+0x276>
 8017a12:	2301      	movs	r3, #1
 8017a14:	f7ff bbaa 	b.w	801716c <_strtod_l+0x2ec>
 8017a18:	00000000 	.word	0x00000000
 8017a1c:	bff00000 	.word	0xbff00000
 8017a20:	00000000 	.word	0x00000000
 8017a24:	3ff00000 	.word	0x3ff00000
 8017a28:	94a03595 	.word	0x94a03595
 8017a2c:	3fdfffff 	.word	0x3fdfffff
 8017a30:	35afe535 	.word	0x35afe535
 8017a34:	3fe00000 	.word	0x3fe00000
 8017a38:	ffc00000 	.word	0xffc00000
 8017a3c:	41dfffff 	.word	0x41dfffff
 8017a40:	94a03595 	.word	0x94a03595
 8017a44:	3fcfffff 	.word	0x3fcfffff
 8017a48:	3ff00000 	.word	0x3ff00000
 8017a4c:	3fe00000 	.word	0x3fe00000
 8017a50:	7ff00000 	.word	0x7ff00000
 8017a54:	7fe00000 	.word	0x7fe00000
 8017a58:	7c9fffff 	.word	0x7c9fffff
 8017a5c:	7fefffff 	.word	0x7fefffff

08017a60 <_strtod_r>:
 8017a60:	4b01      	ldr	r3, [pc, #4]	; (8017a68 <_strtod_r+0x8>)
 8017a62:	f7ff ba0d 	b.w	8016e80 <_strtod_l>
 8017a66:	bf00      	nop
 8017a68:	20000074 	.word	0x20000074

08017a6c <_strtol_l.constprop.0>:
 8017a6c:	2b01      	cmp	r3, #1
 8017a6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a72:	d001      	beq.n	8017a78 <_strtol_l.constprop.0+0xc>
 8017a74:	2b24      	cmp	r3, #36	; 0x24
 8017a76:	d906      	bls.n	8017a86 <_strtol_l.constprop.0+0x1a>
 8017a78:	f7fd fd7c 	bl	8015574 <__errno>
 8017a7c:	2316      	movs	r3, #22
 8017a7e:	6003      	str	r3, [r0, #0]
 8017a80:	2000      	movs	r0, #0
 8017a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a86:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8017b6c <_strtol_l.constprop.0+0x100>
 8017a8a:	460d      	mov	r5, r1
 8017a8c:	462e      	mov	r6, r5
 8017a8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017a92:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8017a96:	f017 0708 	ands.w	r7, r7, #8
 8017a9a:	d1f7      	bne.n	8017a8c <_strtol_l.constprop.0+0x20>
 8017a9c:	2c2d      	cmp	r4, #45	; 0x2d
 8017a9e:	d132      	bne.n	8017b06 <_strtol_l.constprop.0+0x9a>
 8017aa0:	782c      	ldrb	r4, [r5, #0]
 8017aa2:	2701      	movs	r7, #1
 8017aa4:	1cb5      	adds	r5, r6, #2
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d05b      	beq.n	8017b62 <_strtol_l.constprop.0+0xf6>
 8017aaa:	2b10      	cmp	r3, #16
 8017aac:	d109      	bne.n	8017ac2 <_strtol_l.constprop.0+0x56>
 8017aae:	2c30      	cmp	r4, #48	; 0x30
 8017ab0:	d107      	bne.n	8017ac2 <_strtol_l.constprop.0+0x56>
 8017ab2:	782c      	ldrb	r4, [r5, #0]
 8017ab4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017ab8:	2c58      	cmp	r4, #88	; 0x58
 8017aba:	d14d      	bne.n	8017b58 <_strtol_l.constprop.0+0xec>
 8017abc:	786c      	ldrb	r4, [r5, #1]
 8017abe:	2310      	movs	r3, #16
 8017ac0:	3502      	adds	r5, #2
 8017ac2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017ac6:	f108 38ff 	add.w	r8, r8, #4294967295
 8017aca:	f04f 0e00 	mov.w	lr, #0
 8017ace:	fbb8 f9f3 	udiv	r9, r8, r3
 8017ad2:	4676      	mov	r6, lr
 8017ad4:	fb03 8a19 	mls	sl, r3, r9, r8
 8017ad8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017adc:	f1bc 0f09 	cmp.w	ip, #9
 8017ae0:	d816      	bhi.n	8017b10 <_strtol_l.constprop.0+0xa4>
 8017ae2:	4664      	mov	r4, ip
 8017ae4:	42a3      	cmp	r3, r4
 8017ae6:	dd24      	ble.n	8017b32 <_strtol_l.constprop.0+0xc6>
 8017ae8:	f1be 3fff 	cmp.w	lr, #4294967295
 8017aec:	d008      	beq.n	8017b00 <_strtol_l.constprop.0+0x94>
 8017aee:	45b1      	cmp	r9, r6
 8017af0:	d31c      	bcc.n	8017b2c <_strtol_l.constprop.0+0xc0>
 8017af2:	d101      	bne.n	8017af8 <_strtol_l.constprop.0+0x8c>
 8017af4:	45a2      	cmp	sl, r4
 8017af6:	db19      	blt.n	8017b2c <_strtol_l.constprop.0+0xc0>
 8017af8:	fb06 4603 	mla	r6, r6, r3, r4
 8017afc:	f04f 0e01 	mov.w	lr, #1
 8017b00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017b04:	e7e8      	b.n	8017ad8 <_strtol_l.constprop.0+0x6c>
 8017b06:	2c2b      	cmp	r4, #43	; 0x2b
 8017b08:	bf04      	itt	eq
 8017b0a:	782c      	ldrbeq	r4, [r5, #0]
 8017b0c:	1cb5      	addeq	r5, r6, #2
 8017b0e:	e7ca      	b.n	8017aa6 <_strtol_l.constprop.0+0x3a>
 8017b10:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017b14:	f1bc 0f19 	cmp.w	ip, #25
 8017b18:	d801      	bhi.n	8017b1e <_strtol_l.constprop.0+0xb2>
 8017b1a:	3c37      	subs	r4, #55	; 0x37
 8017b1c:	e7e2      	b.n	8017ae4 <_strtol_l.constprop.0+0x78>
 8017b1e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8017b22:	f1bc 0f19 	cmp.w	ip, #25
 8017b26:	d804      	bhi.n	8017b32 <_strtol_l.constprop.0+0xc6>
 8017b28:	3c57      	subs	r4, #87	; 0x57
 8017b2a:	e7db      	b.n	8017ae4 <_strtol_l.constprop.0+0x78>
 8017b2c:	f04f 3eff 	mov.w	lr, #4294967295
 8017b30:	e7e6      	b.n	8017b00 <_strtol_l.constprop.0+0x94>
 8017b32:	f1be 3fff 	cmp.w	lr, #4294967295
 8017b36:	d105      	bne.n	8017b44 <_strtol_l.constprop.0+0xd8>
 8017b38:	2322      	movs	r3, #34	; 0x22
 8017b3a:	6003      	str	r3, [r0, #0]
 8017b3c:	4646      	mov	r6, r8
 8017b3e:	b942      	cbnz	r2, 8017b52 <_strtol_l.constprop.0+0xe6>
 8017b40:	4630      	mov	r0, r6
 8017b42:	e79e      	b.n	8017a82 <_strtol_l.constprop.0+0x16>
 8017b44:	b107      	cbz	r7, 8017b48 <_strtol_l.constprop.0+0xdc>
 8017b46:	4276      	negs	r6, r6
 8017b48:	2a00      	cmp	r2, #0
 8017b4a:	d0f9      	beq.n	8017b40 <_strtol_l.constprop.0+0xd4>
 8017b4c:	f1be 0f00 	cmp.w	lr, #0
 8017b50:	d000      	beq.n	8017b54 <_strtol_l.constprop.0+0xe8>
 8017b52:	1e69      	subs	r1, r5, #1
 8017b54:	6011      	str	r1, [r2, #0]
 8017b56:	e7f3      	b.n	8017b40 <_strtol_l.constprop.0+0xd4>
 8017b58:	2430      	movs	r4, #48	; 0x30
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d1b1      	bne.n	8017ac2 <_strtol_l.constprop.0+0x56>
 8017b5e:	2308      	movs	r3, #8
 8017b60:	e7af      	b.n	8017ac2 <_strtol_l.constprop.0+0x56>
 8017b62:	2c30      	cmp	r4, #48	; 0x30
 8017b64:	d0a5      	beq.n	8017ab2 <_strtol_l.constprop.0+0x46>
 8017b66:	230a      	movs	r3, #10
 8017b68:	e7ab      	b.n	8017ac2 <_strtol_l.constprop.0+0x56>
 8017b6a:	bf00      	nop
 8017b6c:	0801c2d9 	.word	0x0801c2d9

08017b70 <_strtol_r>:
 8017b70:	f7ff bf7c 	b.w	8017a6c <_strtol_l.constprop.0>

08017b74 <__ssputs_r>:
 8017b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b78:	688e      	ldr	r6, [r1, #8]
 8017b7a:	461f      	mov	r7, r3
 8017b7c:	42be      	cmp	r6, r7
 8017b7e:	680b      	ldr	r3, [r1, #0]
 8017b80:	4682      	mov	sl, r0
 8017b82:	460c      	mov	r4, r1
 8017b84:	4690      	mov	r8, r2
 8017b86:	d82c      	bhi.n	8017be2 <__ssputs_r+0x6e>
 8017b88:	898a      	ldrh	r2, [r1, #12]
 8017b8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017b8e:	d026      	beq.n	8017bde <__ssputs_r+0x6a>
 8017b90:	6965      	ldr	r5, [r4, #20]
 8017b92:	6909      	ldr	r1, [r1, #16]
 8017b94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017b98:	eba3 0901 	sub.w	r9, r3, r1
 8017b9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017ba0:	1c7b      	adds	r3, r7, #1
 8017ba2:	444b      	add	r3, r9
 8017ba4:	106d      	asrs	r5, r5, #1
 8017ba6:	429d      	cmp	r5, r3
 8017ba8:	bf38      	it	cc
 8017baa:	461d      	movcc	r5, r3
 8017bac:	0553      	lsls	r3, r2, #21
 8017bae:	d527      	bpl.n	8017c00 <__ssputs_r+0x8c>
 8017bb0:	4629      	mov	r1, r5
 8017bb2:	f7fe fc0f 	bl	80163d4 <_malloc_r>
 8017bb6:	4606      	mov	r6, r0
 8017bb8:	b360      	cbz	r0, 8017c14 <__ssputs_r+0xa0>
 8017bba:	6921      	ldr	r1, [r4, #16]
 8017bbc:	464a      	mov	r2, r9
 8017bbe:	f7fd fd06 	bl	80155ce <memcpy>
 8017bc2:	89a3      	ldrh	r3, [r4, #12]
 8017bc4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017bcc:	81a3      	strh	r3, [r4, #12]
 8017bce:	6126      	str	r6, [r4, #16]
 8017bd0:	6165      	str	r5, [r4, #20]
 8017bd2:	444e      	add	r6, r9
 8017bd4:	eba5 0509 	sub.w	r5, r5, r9
 8017bd8:	6026      	str	r6, [r4, #0]
 8017bda:	60a5      	str	r5, [r4, #8]
 8017bdc:	463e      	mov	r6, r7
 8017bde:	42be      	cmp	r6, r7
 8017be0:	d900      	bls.n	8017be4 <__ssputs_r+0x70>
 8017be2:	463e      	mov	r6, r7
 8017be4:	6820      	ldr	r0, [r4, #0]
 8017be6:	4632      	mov	r2, r6
 8017be8:	4641      	mov	r1, r8
 8017bea:	f000 fd5c 	bl	80186a6 <memmove>
 8017bee:	68a3      	ldr	r3, [r4, #8]
 8017bf0:	1b9b      	subs	r3, r3, r6
 8017bf2:	60a3      	str	r3, [r4, #8]
 8017bf4:	6823      	ldr	r3, [r4, #0]
 8017bf6:	4433      	add	r3, r6
 8017bf8:	6023      	str	r3, [r4, #0]
 8017bfa:	2000      	movs	r0, #0
 8017bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c00:	462a      	mov	r2, r5
 8017c02:	f001 f922 	bl	8018e4a <_realloc_r>
 8017c06:	4606      	mov	r6, r0
 8017c08:	2800      	cmp	r0, #0
 8017c0a:	d1e0      	bne.n	8017bce <__ssputs_r+0x5a>
 8017c0c:	6921      	ldr	r1, [r4, #16]
 8017c0e:	4650      	mov	r0, sl
 8017c10:	f7fe fb6c 	bl	80162ec <_free_r>
 8017c14:	230c      	movs	r3, #12
 8017c16:	f8ca 3000 	str.w	r3, [sl]
 8017c1a:	89a3      	ldrh	r3, [r4, #12]
 8017c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c20:	81a3      	strh	r3, [r4, #12]
 8017c22:	f04f 30ff 	mov.w	r0, #4294967295
 8017c26:	e7e9      	b.n	8017bfc <__ssputs_r+0x88>

08017c28 <_svfiprintf_r>:
 8017c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c2c:	4698      	mov	r8, r3
 8017c2e:	898b      	ldrh	r3, [r1, #12]
 8017c30:	061b      	lsls	r3, r3, #24
 8017c32:	b09d      	sub	sp, #116	; 0x74
 8017c34:	4607      	mov	r7, r0
 8017c36:	460d      	mov	r5, r1
 8017c38:	4614      	mov	r4, r2
 8017c3a:	d50e      	bpl.n	8017c5a <_svfiprintf_r+0x32>
 8017c3c:	690b      	ldr	r3, [r1, #16]
 8017c3e:	b963      	cbnz	r3, 8017c5a <_svfiprintf_r+0x32>
 8017c40:	2140      	movs	r1, #64	; 0x40
 8017c42:	f7fe fbc7 	bl	80163d4 <_malloc_r>
 8017c46:	6028      	str	r0, [r5, #0]
 8017c48:	6128      	str	r0, [r5, #16]
 8017c4a:	b920      	cbnz	r0, 8017c56 <_svfiprintf_r+0x2e>
 8017c4c:	230c      	movs	r3, #12
 8017c4e:	603b      	str	r3, [r7, #0]
 8017c50:	f04f 30ff 	mov.w	r0, #4294967295
 8017c54:	e0d0      	b.n	8017df8 <_svfiprintf_r+0x1d0>
 8017c56:	2340      	movs	r3, #64	; 0x40
 8017c58:	616b      	str	r3, [r5, #20]
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8017c5e:	2320      	movs	r3, #32
 8017c60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017c64:	f8cd 800c 	str.w	r8, [sp, #12]
 8017c68:	2330      	movs	r3, #48	; 0x30
 8017c6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017e10 <_svfiprintf_r+0x1e8>
 8017c6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017c72:	f04f 0901 	mov.w	r9, #1
 8017c76:	4623      	mov	r3, r4
 8017c78:	469a      	mov	sl, r3
 8017c7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c7e:	b10a      	cbz	r2, 8017c84 <_svfiprintf_r+0x5c>
 8017c80:	2a25      	cmp	r2, #37	; 0x25
 8017c82:	d1f9      	bne.n	8017c78 <_svfiprintf_r+0x50>
 8017c84:	ebba 0b04 	subs.w	fp, sl, r4
 8017c88:	d00b      	beq.n	8017ca2 <_svfiprintf_r+0x7a>
 8017c8a:	465b      	mov	r3, fp
 8017c8c:	4622      	mov	r2, r4
 8017c8e:	4629      	mov	r1, r5
 8017c90:	4638      	mov	r0, r7
 8017c92:	f7ff ff6f 	bl	8017b74 <__ssputs_r>
 8017c96:	3001      	adds	r0, #1
 8017c98:	f000 80a9 	beq.w	8017dee <_svfiprintf_r+0x1c6>
 8017c9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017c9e:	445a      	add	r2, fp
 8017ca0:	9209      	str	r2, [sp, #36]	; 0x24
 8017ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	f000 80a1 	beq.w	8017dee <_svfiprintf_r+0x1c6>
 8017cac:	2300      	movs	r3, #0
 8017cae:	f04f 32ff 	mov.w	r2, #4294967295
 8017cb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017cb6:	f10a 0a01 	add.w	sl, sl, #1
 8017cba:	9304      	str	r3, [sp, #16]
 8017cbc:	9307      	str	r3, [sp, #28]
 8017cbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017cc2:	931a      	str	r3, [sp, #104]	; 0x68
 8017cc4:	4654      	mov	r4, sl
 8017cc6:	2205      	movs	r2, #5
 8017cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ccc:	4850      	ldr	r0, [pc, #320]	; (8017e10 <_svfiprintf_r+0x1e8>)
 8017cce:	f7e8 faa7 	bl	8000220 <memchr>
 8017cd2:	9a04      	ldr	r2, [sp, #16]
 8017cd4:	b9d8      	cbnz	r0, 8017d0e <_svfiprintf_r+0xe6>
 8017cd6:	06d0      	lsls	r0, r2, #27
 8017cd8:	bf44      	itt	mi
 8017cda:	2320      	movmi	r3, #32
 8017cdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017ce0:	0711      	lsls	r1, r2, #28
 8017ce2:	bf44      	itt	mi
 8017ce4:	232b      	movmi	r3, #43	; 0x2b
 8017ce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017cea:	f89a 3000 	ldrb.w	r3, [sl]
 8017cee:	2b2a      	cmp	r3, #42	; 0x2a
 8017cf0:	d015      	beq.n	8017d1e <_svfiprintf_r+0xf6>
 8017cf2:	9a07      	ldr	r2, [sp, #28]
 8017cf4:	4654      	mov	r4, sl
 8017cf6:	2000      	movs	r0, #0
 8017cf8:	f04f 0c0a 	mov.w	ip, #10
 8017cfc:	4621      	mov	r1, r4
 8017cfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d02:	3b30      	subs	r3, #48	; 0x30
 8017d04:	2b09      	cmp	r3, #9
 8017d06:	d94d      	bls.n	8017da4 <_svfiprintf_r+0x17c>
 8017d08:	b1b0      	cbz	r0, 8017d38 <_svfiprintf_r+0x110>
 8017d0a:	9207      	str	r2, [sp, #28]
 8017d0c:	e014      	b.n	8017d38 <_svfiprintf_r+0x110>
 8017d0e:	eba0 0308 	sub.w	r3, r0, r8
 8017d12:	fa09 f303 	lsl.w	r3, r9, r3
 8017d16:	4313      	orrs	r3, r2
 8017d18:	9304      	str	r3, [sp, #16]
 8017d1a:	46a2      	mov	sl, r4
 8017d1c:	e7d2      	b.n	8017cc4 <_svfiprintf_r+0x9c>
 8017d1e:	9b03      	ldr	r3, [sp, #12]
 8017d20:	1d19      	adds	r1, r3, #4
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	9103      	str	r1, [sp, #12]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	bfbb      	ittet	lt
 8017d2a:	425b      	neglt	r3, r3
 8017d2c:	f042 0202 	orrlt.w	r2, r2, #2
 8017d30:	9307      	strge	r3, [sp, #28]
 8017d32:	9307      	strlt	r3, [sp, #28]
 8017d34:	bfb8      	it	lt
 8017d36:	9204      	strlt	r2, [sp, #16]
 8017d38:	7823      	ldrb	r3, [r4, #0]
 8017d3a:	2b2e      	cmp	r3, #46	; 0x2e
 8017d3c:	d10c      	bne.n	8017d58 <_svfiprintf_r+0x130>
 8017d3e:	7863      	ldrb	r3, [r4, #1]
 8017d40:	2b2a      	cmp	r3, #42	; 0x2a
 8017d42:	d134      	bne.n	8017dae <_svfiprintf_r+0x186>
 8017d44:	9b03      	ldr	r3, [sp, #12]
 8017d46:	1d1a      	adds	r2, r3, #4
 8017d48:	681b      	ldr	r3, [r3, #0]
 8017d4a:	9203      	str	r2, [sp, #12]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	bfb8      	it	lt
 8017d50:	f04f 33ff 	movlt.w	r3, #4294967295
 8017d54:	3402      	adds	r4, #2
 8017d56:	9305      	str	r3, [sp, #20]
 8017d58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017e20 <_svfiprintf_r+0x1f8>
 8017d5c:	7821      	ldrb	r1, [r4, #0]
 8017d5e:	2203      	movs	r2, #3
 8017d60:	4650      	mov	r0, sl
 8017d62:	f7e8 fa5d 	bl	8000220 <memchr>
 8017d66:	b138      	cbz	r0, 8017d78 <_svfiprintf_r+0x150>
 8017d68:	9b04      	ldr	r3, [sp, #16]
 8017d6a:	eba0 000a 	sub.w	r0, r0, sl
 8017d6e:	2240      	movs	r2, #64	; 0x40
 8017d70:	4082      	lsls	r2, r0
 8017d72:	4313      	orrs	r3, r2
 8017d74:	3401      	adds	r4, #1
 8017d76:	9304      	str	r3, [sp, #16]
 8017d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d7c:	4825      	ldr	r0, [pc, #148]	; (8017e14 <_svfiprintf_r+0x1ec>)
 8017d7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017d82:	2206      	movs	r2, #6
 8017d84:	f7e8 fa4c 	bl	8000220 <memchr>
 8017d88:	2800      	cmp	r0, #0
 8017d8a:	d038      	beq.n	8017dfe <_svfiprintf_r+0x1d6>
 8017d8c:	4b22      	ldr	r3, [pc, #136]	; (8017e18 <_svfiprintf_r+0x1f0>)
 8017d8e:	bb1b      	cbnz	r3, 8017dd8 <_svfiprintf_r+0x1b0>
 8017d90:	9b03      	ldr	r3, [sp, #12]
 8017d92:	3307      	adds	r3, #7
 8017d94:	f023 0307 	bic.w	r3, r3, #7
 8017d98:	3308      	adds	r3, #8
 8017d9a:	9303      	str	r3, [sp, #12]
 8017d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d9e:	4433      	add	r3, r6
 8017da0:	9309      	str	r3, [sp, #36]	; 0x24
 8017da2:	e768      	b.n	8017c76 <_svfiprintf_r+0x4e>
 8017da4:	fb0c 3202 	mla	r2, ip, r2, r3
 8017da8:	460c      	mov	r4, r1
 8017daa:	2001      	movs	r0, #1
 8017dac:	e7a6      	b.n	8017cfc <_svfiprintf_r+0xd4>
 8017dae:	2300      	movs	r3, #0
 8017db0:	3401      	adds	r4, #1
 8017db2:	9305      	str	r3, [sp, #20]
 8017db4:	4619      	mov	r1, r3
 8017db6:	f04f 0c0a 	mov.w	ip, #10
 8017dba:	4620      	mov	r0, r4
 8017dbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017dc0:	3a30      	subs	r2, #48	; 0x30
 8017dc2:	2a09      	cmp	r2, #9
 8017dc4:	d903      	bls.n	8017dce <_svfiprintf_r+0x1a6>
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d0c6      	beq.n	8017d58 <_svfiprintf_r+0x130>
 8017dca:	9105      	str	r1, [sp, #20]
 8017dcc:	e7c4      	b.n	8017d58 <_svfiprintf_r+0x130>
 8017dce:	fb0c 2101 	mla	r1, ip, r1, r2
 8017dd2:	4604      	mov	r4, r0
 8017dd4:	2301      	movs	r3, #1
 8017dd6:	e7f0      	b.n	8017dba <_svfiprintf_r+0x192>
 8017dd8:	ab03      	add	r3, sp, #12
 8017dda:	9300      	str	r3, [sp, #0]
 8017ddc:	462a      	mov	r2, r5
 8017dde:	4b0f      	ldr	r3, [pc, #60]	; (8017e1c <_svfiprintf_r+0x1f4>)
 8017de0:	a904      	add	r1, sp, #16
 8017de2:	4638      	mov	r0, r7
 8017de4:	f7fc fbe2 	bl	80145ac <_printf_float>
 8017de8:	1c42      	adds	r2, r0, #1
 8017dea:	4606      	mov	r6, r0
 8017dec:	d1d6      	bne.n	8017d9c <_svfiprintf_r+0x174>
 8017dee:	89ab      	ldrh	r3, [r5, #12]
 8017df0:	065b      	lsls	r3, r3, #25
 8017df2:	f53f af2d 	bmi.w	8017c50 <_svfiprintf_r+0x28>
 8017df6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017df8:	b01d      	add	sp, #116	; 0x74
 8017dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dfe:	ab03      	add	r3, sp, #12
 8017e00:	9300      	str	r3, [sp, #0]
 8017e02:	462a      	mov	r2, r5
 8017e04:	4b05      	ldr	r3, [pc, #20]	; (8017e1c <_svfiprintf_r+0x1f4>)
 8017e06:	a904      	add	r1, sp, #16
 8017e08:	4638      	mov	r0, r7
 8017e0a:	f7fc fe73 	bl	8014af4 <_printf_i>
 8017e0e:	e7eb      	b.n	8017de8 <_svfiprintf_r+0x1c0>
 8017e10:	0801c3d9 	.word	0x0801c3d9
 8017e14:	0801c3e3 	.word	0x0801c3e3
 8017e18:	080145ad 	.word	0x080145ad
 8017e1c:	08017b75 	.word	0x08017b75
 8017e20:	0801c3df 	.word	0x0801c3df

08017e24 <_sungetc_r>:
 8017e24:	b538      	push	{r3, r4, r5, lr}
 8017e26:	1c4b      	adds	r3, r1, #1
 8017e28:	4614      	mov	r4, r2
 8017e2a:	d103      	bne.n	8017e34 <_sungetc_r+0x10>
 8017e2c:	f04f 35ff 	mov.w	r5, #4294967295
 8017e30:	4628      	mov	r0, r5
 8017e32:	bd38      	pop	{r3, r4, r5, pc}
 8017e34:	8993      	ldrh	r3, [r2, #12]
 8017e36:	f023 0320 	bic.w	r3, r3, #32
 8017e3a:	8193      	strh	r3, [r2, #12]
 8017e3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017e3e:	6852      	ldr	r2, [r2, #4]
 8017e40:	b2cd      	uxtb	r5, r1
 8017e42:	b18b      	cbz	r3, 8017e68 <_sungetc_r+0x44>
 8017e44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017e46:	4293      	cmp	r3, r2
 8017e48:	dd08      	ble.n	8017e5c <_sungetc_r+0x38>
 8017e4a:	6823      	ldr	r3, [r4, #0]
 8017e4c:	1e5a      	subs	r2, r3, #1
 8017e4e:	6022      	str	r2, [r4, #0]
 8017e50:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017e54:	6863      	ldr	r3, [r4, #4]
 8017e56:	3301      	adds	r3, #1
 8017e58:	6063      	str	r3, [r4, #4]
 8017e5a:	e7e9      	b.n	8017e30 <_sungetc_r+0xc>
 8017e5c:	4621      	mov	r1, r4
 8017e5e:	f000 fbe8 	bl	8018632 <__submore>
 8017e62:	2800      	cmp	r0, #0
 8017e64:	d0f1      	beq.n	8017e4a <_sungetc_r+0x26>
 8017e66:	e7e1      	b.n	8017e2c <_sungetc_r+0x8>
 8017e68:	6921      	ldr	r1, [r4, #16]
 8017e6a:	6823      	ldr	r3, [r4, #0]
 8017e6c:	b151      	cbz	r1, 8017e84 <_sungetc_r+0x60>
 8017e6e:	4299      	cmp	r1, r3
 8017e70:	d208      	bcs.n	8017e84 <_sungetc_r+0x60>
 8017e72:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017e76:	42a9      	cmp	r1, r5
 8017e78:	d104      	bne.n	8017e84 <_sungetc_r+0x60>
 8017e7a:	3b01      	subs	r3, #1
 8017e7c:	3201      	adds	r2, #1
 8017e7e:	6023      	str	r3, [r4, #0]
 8017e80:	6062      	str	r2, [r4, #4]
 8017e82:	e7d5      	b.n	8017e30 <_sungetc_r+0xc>
 8017e84:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017e88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e8c:	6363      	str	r3, [r4, #52]	; 0x34
 8017e8e:	2303      	movs	r3, #3
 8017e90:	63a3      	str	r3, [r4, #56]	; 0x38
 8017e92:	4623      	mov	r3, r4
 8017e94:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017e98:	6023      	str	r3, [r4, #0]
 8017e9a:	2301      	movs	r3, #1
 8017e9c:	e7dc      	b.n	8017e58 <_sungetc_r+0x34>

08017e9e <__ssrefill_r>:
 8017e9e:	b510      	push	{r4, lr}
 8017ea0:	460c      	mov	r4, r1
 8017ea2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017ea4:	b169      	cbz	r1, 8017ec2 <__ssrefill_r+0x24>
 8017ea6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017eaa:	4299      	cmp	r1, r3
 8017eac:	d001      	beq.n	8017eb2 <__ssrefill_r+0x14>
 8017eae:	f7fe fa1d 	bl	80162ec <_free_r>
 8017eb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017eb4:	6063      	str	r3, [r4, #4]
 8017eb6:	2000      	movs	r0, #0
 8017eb8:	6360      	str	r0, [r4, #52]	; 0x34
 8017eba:	b113      	cbz	r3, 8017ec2 <__ssrefill_r+0x24>
 8017ebc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017ebe:	6023      	str	r3, [r4, #0]
 8017ec0:	bd10      	pop	{r4, pc}
 8017ec2:	6923      	ldr	r3, [r4, #16]
 8017ec4:	6023      	str	r3, [r4, #0]
 8017ec6:	2300      	movs	r3, #0
 8017ec8:	6063      	str	r3, [r4, #4]
 8017eca:	89a3      	ldrh	r3, [r4, #12]
 8017ecc:	f043 0320 	orr.w	r3, r3, #32
 8017ed0:	81a3      	strh	r3, [r4, #12]
 8017ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8017ed6:	e7f3      	b.n	8017ec0 <__ssrefill_r+0x22>

08017ed8 <__ssvfiscanf_r>:
 8017ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017edc:	460c      	mov	r4, r1
 8017ede:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017ee2:	2100      	movs	r1, #0
 8017ee4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017ee8:	49a6      	ldr	r1, [pc, #664]	; (8018184 <__ssvfiscanf_r+0x2ac>)
 8017eea:	91a0      	str	r1, [sp, #640]	; 0x280
 8017eec:	f10d 0804 	add.w	r8, sp, #4
 8017ef0:	49a5      	ldr	r1, [pc, #660]	; (8018188 <__ssvfiscanf_r+0x2b0>)
 8017ef2:	4fa6      	ldr	r7, [pc, #664]	; (801818c <__ssvfiscanf_r+0x2b4>)
 8017ef4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8018190 <__ssvfiscanf_r+0x2b8>
 8017ef8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017efc:	4606      	mov	r6, r0
 8017efe:	91a1      	str	r1, [sp, #644]	; 0x284
 8017f00:	9300      	str	r3, [sp, #0]
 8017f02:	7813      	ldrb	r3, [r2, #0]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	f000 815a 	beq.w	80181be <__ssvfiscanf_r+0x2e6>
 8017f0a:	5cf9      	ldrb	r1, [r7, r3]
 8017f0c:	f011 0108 	ands.w	r1, r1, #8
 8017f10:	f102 0501 	add.w	r5, r2, #1
 8017f14:	d019      	beq.n	8017f4a <__ssvfiscanf_r+0x72>
 8017f16:	6863      	ldr	r3, [r4, #4]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	dd0f      	ble.n	8017f3c <__ssvfiscanf_r+0x64>
 8017f1c:	6823      	ldr	r3, [r4, #0]
 8017f1e:	781a      	ldrb	r2, [r3, #0]
 8017f20:	5cba      	ldrb	r2, [r7, r2]
 8017f22:	0712      	lsls	r2, r2, #28
 8017f24:	d401      	bmi.n	8017f2a <__ssvfiscanf_r+0x52>
 8017f26:	462a      	mov	r2, r5
 8017f28:	e7eb      	b.n	8017f02 <__ssvfiscanf_r+0x2a>
 8017f2a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017f2c:	3201      	adds	r2, #1
 8017f2e:	9245      	str	r2, [sp, #276]	; 0x114
 8017f30:	6862      	ldr	r2, [r4, #4]
 8017f32:	3301      	adds	r3, #1
 8017f34:	3a01      	subs	r2, #1
 8017f36:	6062      	str	r2, [r4, #4]
 8017f38:	6023      	str	r3, [r4, #0]
 8017f3a:	e7ec      	b.n	8017f16 <__ssvfiscanf_r+0x3e>
 8017f3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017f3e:	4621      	mov	r1, r4
 8017f40:	4630      	mov	r0, r6
 8017f42:	4798      	blx	r3
 8017f44:	2800      	cmp	r0, #0
 8017f46:	d0e9      	beq.n	8017f1c <__ssvfiscanf_r+0x44>
 8017f48:	e7ed      	b.n	8017f26 <__ssvfiscanf_r+0x4e>
 8017f4a:	2b25      	cmp	r3, #37	; 0x25
 8017f4c:	d012      	beq.n	8017f74 <__ssvfiscanf_r+0x9c>
 8017f4e:	469a      	mov	sl, r3
 8017f50:	6863      	ldr	r3, [r4, #4]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	f340 8091 	ble.w	801807a <__ssvfiscanf_r+0x1a2>
 8017f58:	6822      	ldr	r2, [r4, #0]
 8017f5a:	7813      	ldrb	r3, [r2, #0]
 8017f5c:	4553      	cmp	r3, sl
 8017f5e:	f040 812e 	bne.w	80181be <__ssvfiscanf_r+0x2e6>
 8017f62:	6863      	ldr	r3, [r4, #4]
 8017f64:	3b01      	subs	r3, #1
 8017f66:	6063      	str	r3, [r4, #4]
 8017f68:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017f6a:	3201      	adds	r2, #1
 8017f6c:	3301      	adds	r3, #1
 8017f6e:	6022      	str	r2, [r4, #0]
 8017f70:	9345      	str	r3, [sp, #276]	; 0x114
 8017f72:	e7d8      	b.n	8017f26 <__ssvfiscanf_r+0x4e>
 8017f74:	9141      	str	r1, [sp, #260]	; 0x104
 8017f76:	9143      	str	r1, [sp, #268]	; 0x10c
 8017f78:	7853      	ldrb	r3, [r2, #1]
 8017f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8017f7c:	bf02      	ittt	eq
 8017f7e:	2310      	moveq	r3, #16
 8017f80:	1c95      	addeq	r5, r2, #2
 8017f82:	9341      	streq	r3, [sp, #260]	; 0x104
 8017f84:	220a      	movs	r2, #10
 8017f86:	46aa      	mov	sl, r5
 8017f88:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017f8c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017f90:	2b09      	cmp	r3, #9
 8017f92:	d91c      	bls.n	8017fce <__ssvfiscanf_r+0xf6>
 8017f94:	487e      	ldr	r0, [pc, #504]	; (8018190 <__ssvfiscanf_r+0x2b8>)
 8017f96:	2203      	movs	r2, #3
 8017f98:	f7e8 f942 	bl	8000220 <memchr>
 8017f9c:	b138      	cbz	r0, 8017fae <__ssvfiscanf_r+0xd6>
 8017f9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017fa0:	eba0 0009 	sub.w	r0, r0, r9
 8017fa4:	2301      	movs	r3, #1
 8017fa6:	4083      	lsls	r3, r0
 8017fa8:	4313      	orrs	r3, r2
 8017faa:	9341      	str	r3, [sp, #260]	; 0x104
 8017fac:	4655      	mov	r5, sl
 8017fae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017fb2:	2b78      	cmp	r3, #120	; 0x78
 8017fb4:	d806      	bhi.n	8017fc4 <__ssvfiscanf_r+0xec>
 8017fb6:	2b57      	cmp	r3, #87	; 0x57
 8017fb8:	d810      	bhi.n	8017fdc <__ssvfiscanf_r+0x104>
 8017fba:	2b25      	cmp	r3, #37	; 0x25
 8017fbc:	d0c7      	beq.n	8017f4e <__ssvfiscanf_r+0x76>
 8017fbe:	d857      	bhi.n	8018070 <__ssvfiscanf_r+0x198>
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d065      	beq.n	8018090 <__ssvfiscanf_r+0x1b8>
 8017fc4:	2303      	movs	r3, #3
 8017fc6:	9347      	str	r3, [sp, #284]	; 0x11c
 8017fc8:	230a      	movs	r3, #10
 8017fca:	9342      	str	r3, [sp, #264]	; 0x108
 8017fcc:	e076      	b.n	80180bc <__ssvfiscanf_r+0x1e4>
 8017fce:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017fd0:	fb02 1103 	mla	r1, r2, r3, r1
 8017fd4:	3930      	subs	r1, #48	; 0x30
 8017fd6:	9143      	str	r1, [sp, #268]	; 0x10c
 8017fd8:	4655      	mov	r5, sl
 8017fda:	e7d4      	b.n	8017f86 <__ssvfiscanf_r+0xae>
 8017fdc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017fe0:	2a20      	cmp	r2, #32
 8017fe2:	d8ef      	bhi.n	8017fc4 <__ssvfiscanf_r+0xec>
 8017fe4:	a101      	add	r1, pc, #4	; (adr r1, 8017fec <__ssvfiscanf_r+0x114>)
 8017fe6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017fea:	bf00      	nop
 8017fec:	0801809f 	.word	0x0801809f
 8017ff0:	08017fc5 	.word	0x08017fc5
 8017ff4:	08017fc5 	.word	0x08017fc5
 8017ff8:	080180fd 	.word	0x080180fd
 8017ffc:	08017fc5 	.word	0x08017fc5
 8018000:	08017fc5 	.word	0x08017fc5
 8018004:	08017fc5 	.word	0x08017fc5
 8018008:	08017fc5 	.word	0x08017fc5
 801800c:	08017fc5 	.word	0x08017fc5
 8018010:	08017fc5 	.word	0x08017fc5
 8018014:	08017fc5 	.word	0x08017fc5
 8018018:	08018113 	.word	0x08018113
 801801c:	080180f9 	.word	0x080180f9
 8018020:	08018077 	.word	0x08018077
 8018024:	08018077 	.word	0x08018077
 8018028:	08018077 	.word	0x08018077
 801802c:	08017fc5 	.word	0x08017fc5
 8018030:	080180b5 	.word	0x080180b5
 8018034:	08017fc5 	.word	0x08017fc5
 8018038:	08017fc5 	.word	0x08017fc5
 801803c:	08017fc5 	.word	0x08017fc5
 8018040:	08017fc5 	.word	0x08017fc5
 8018044:	08018123 	.word	0x08018123
 8018048:	080180f1 	.word	0x080180f1
 801804c:	08018097 	.word	0x08018097
 8018050:	08017fc5 	.word	0x08017fc5
 8018054:	08017fc5 	.word	0x08017fc5
 8018058:	0801811f 	.word	0x0801811f
 801805c:	08017fc5 	.word	0x08017fc5
 8018060:	080180f9 	.word	0x080180f9
 8018064:	08017fc5 	.word	0x08017fc5
 8018068:	08017fc5 	.word	0x08017fc5
 801806c:	0801809f 	.word	0x0801809f
 8018070:	3b45      	subs	r3, #69	; 0x45
 8018072:	2b02      	cmp	r3, #2
 8018074:	d8a6      	bhi.n	8017fc4 <__ssvfiscanf_r+0xec>
 8018076:	2305      	movs	r3, #5
 8018078:	e01f      	b.n	80180ba <__ssvfiscanf_r+0x1e2>
 801807a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801807c:	4621      	mov	r1, r4
 801807e:	4630      	mov	r0, r6
 8018080:	4798      	blx	r3
 8018082:	2800      	cmp	r0, #0
 8018084:	f43f af68 	beq.w	8017f58 <__ssvfiscanf_r+0x80>
 8018088:	9844      	ldr	r0, [sp, #272]	; 0x110
 801808a:	2800      	cmp	r0, #0
 801808c:	f040 808d 	bne.w	80181aa <__ssvfiscanf_r+0x2d2>
 8018090:	f04f 30ff 	mov.w	r0, #4294967295
 8018094:	e08f      	b.n	80181b6 <__ssvfiscanf_r+0x2de>
 8018096:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018098:	f042 0220 	orr.w	r2, r2, #32
 801809c:	9241      	str	r2, [sp, #260]	; 0x104
 801809e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80180a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80180a4:	9241      	str	r2, [sp, #260]	; 0x104
 80180a6:	2210      	movs	r2, #16
 80180a8:	2b6f      	cmp	r3, #111	; 0x6f
 80180aa:	9242      	str	r2, [sp, #264]	; 0x108
 80180ac:	bf34      	ite	cc
 80180ae:	2303      	movcc	r3, #3
 80180b0:	2304      	movcs	r3, #4
 80180b2:	e002      	b.n	80180ba <__ssvfiscanf_r+0x1e2>
 80180b4:	2300      	movs	r3, #0
 80180b6:	9342      	str	r3, [sp, #264]	; 0x108
 80180b8:	2303      	movs	r3, #3
 80180ba:	9347      	str	r3, [sp, #284]	; 0x11c
 80180bc:	6863      	ldr	r3, [r4, #4]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	dd3d      	ble.n	801813e <__ssvfiscanf_r+0x266>
 80180c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80180c4:	0659      	lsls	r1, r3, #25
 80180c6:	d404      	bmi.n	80180d2 <__ssvfiscanf_r+0x1fa>
 80180c8:	6823      	ldr	r3, [r4, #0]
 80180ca:	781a      	ldrb	r2, [r3, #0]
 80180cc:	5cba      	ldrb	r2, [r7, r2]
 80180ce:	0712      	lsls	r2, r2, #28
 80180d0:	d43c      	bmi.n	801814c <__ssvfiscanf_r+0x274>
 80180d2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80180d4:	2b02      	cmp	r3, #2
 80180d6:	dc4b      	bgt.n	8018170 <__ssvfiscanf_r+0x298>
 80180d8:	466b      	mov	r3, sp
 80180da:	4622      	mov	r2, r4
 80180dc:	a941      	add	r1, sp, #260	; 0x104
 80180de:	4630      	mov	r0, r6
 80180e0:	f000 f872 	bl	80181c8 <_scanf_chars>
 80180e4:	2801      	cmp	r0, #1
 80180e6:	d06a      	beq.n	80181be <__ssvfiscanf_r+0x2e6>
 80180e8:	2802      	cmp	r0, #2
 80180ea:	f47f af1c 	bne.w	8017f26 <__ssvfiscanf_r+0x4e>
 80180ee:	e7cb      	b.n	8018088 <__ssvfiscanf_r+0x1b0>
 80180f0:	2308      	movs	r3, #8
 80180f2:	9342      	str	r3, [sp, #264]	; 0x108
 80180f4:	2304      	movs	r3, #4
 80180f6:	e7e0      	b.n	80180ba <__ssvfiscanf_r+0x1e2>
 80180f8:	220a      	movs	r2, #10
 80180fa:	e7d5      	b.n	80180a8 <__ssvfiscanf_r+0x1d0>
 80180fc:	4629      	mov	r1, r5
 80180fe:	4640      	mov	r0, r8
 8018100:	f000 fa5e 	bl	80185c0 <__sccl>
 8018104:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801810a:	9341      	str	r3, [sp, #260]	; 0x104
 801810c:	4605      	mov	r5, r0
 801810e:	2301      	movs	r3, #1
 8018110:	e7d3      	b.n	80180ba <__ssvfiscanf_r+0x1e2>
 8018112:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018118:	9341      	str	r3, [sp, #260]	; 0x104
 801811a:	2300      	movs	r3, #0
 801811c:	e7cd      	b.n	80180ba <__ssvfiscanf_r+0x1e2>
 801811e:	2302      	movs	r3, #2
 8018120:	e7cb      	b.n	80180ba <__ssvfiscanf_r+0x1e2>
 8018122:	9841      	ldr	r0, [sp, #260]	; 0x104
 8018124:	06c3      	lsls	r3, r0, #27
 8018126:	f53f aefe 	bmi.w	8017f26 <__ssvfiscanf_r+0x4e>
 801812a:	9b00      	ldr	r3, [sp, #0]
 801812c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801812e:	1d19      	adds	r1, r3, #4
 8018130:	9100      	str	r1, [sp, #0]
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	07c0      	lsls	r0, r0, #31
 8018136:	bf4c      	ite	mi
 8018138:	801a      	strhmi	r2, [r3, #0]
 801813a:	601a      	strpl	r2, [r3, #0]
 801813c:	e6f3      	b.n	8017f26 <__ssvfiscanf_r+0x4e>
 801813e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018140:	4621      	mov	r1, r4
 8018142:	4630      	mov	r0, r6
 8018144:	4798      	blx	r3
 8018146:	2800      	cmp	r0, #0
 8018148:	d0bb      	beq.n	80180c2 <__ssvfiscanf_r+0x1ea>
 801814a:	e79d      	b.n	8018088 <__ssvfiscanf_r+0x1b0>
 801814c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801814e:	3201      	adds	r2, #1
 8018150:	9245      	str	r2, [sp, #276]	; 0x114
 8018152:	6862      	ldr	r2, [r4, #4]
 8018154:	3a01      	subs	r2, #1
 8018156:	2a00      	cmp	r2, #0
 8018158:	6062      	str	r2, [r4, #4]
 801815a:	dd02      	ble.n	8018162 <__ssvfiscanf_r+0x28a>
 801815c:	3301      	adds	r3, #1
 801815e:	6023      	str	r3, [r4, #0]
 8018160:	e7b2      	b.n	80180c8 <__ssvfiscanf_r+0x1f0>
 8018162:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018164:	4621      	mov	r1, r4
 8018166:	4630      	mov	r0, r6
 8018168:	4798      	blx	r3
 801816a:	2800      	cmp	r0, #0
 801816c:	d0ac      	beq.n	80180c8 <__ssvfiscanf_r+0x1f0>
 801816e:	e78b      	b.n	8018088 <__ssvfiscanf_r+0x1b0>
 8018170:	2b04      	cmp	r3, #4
 8018172:	dc0f      	bgt.n	8018194 <__ssvfiscanf_r+0x2bc>
 8018174:	466b      	mov	r3, sp
 8018176:	4622      	mov	r2, r4
 8018178:	a941      	add	r1, sp, #260	; 0x104
 801817a:	4630      	mov	r0, r6
 801817c:	f000 f87e 	bl	801827c <_scanf_i>
 8018180:	e7b0      	b.n	80180e4 <__ssvfiscanf_r+0x20c>
 8018182:	bf00      	nop
 8018184:	08017e25 	.word	0x08017e25
 8018188:	08017e9f 	.word	0x08017e9f
 801818c:	0801c2d9 	.word	0x0801c2d9
 8018190:	0801c3df 	.word	0x0801c3df
 8018194:	4b0b      	ldr	r3, [pc, #44]	; (80181c4 <__ssvfiscanf_r+0x2ec>)
 8018196:	2b00      	cmp	r3, #0
 8018198:	f43f aec5 	beq.w	8017f26 <__ssvfiscanf_r+0x4e>
 801819c:	466b      	mov	r3, sp
 801819e:	4622      	mov	r2, r4
 80181a0:	a941      	add	r1, sp, #260	; 0x104
 80181a2:	4630      	mov	r0, r6
 80181a4:	f7fc fdc8 	bl	8014d38 <_scanf_float>
 80181a8:	e79c      	b.n	80180e4 <__ssvfiscanf_r+0x20c>
 80181aa:	89a3      	ldrh	r3, [r4, #12]
 80181ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80181b0:	bf18      	it	ne
 80181b2:	f04f 30ff 	movne.w	r0, #4294967295
 80181b6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80181ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181be:	9844      	ldr	r0, [sp, #272]	; 0x110
 80181c0:	e7f9      	b.n	80181b6 <__ssvfiscanf_r+0x2de>
 80181c2:	bf00      	nop
 80181c4:	08014d39 	.word	0x08014d39

080181c8 <_scanf_chars>:
 80181c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181cc:	4615      	mov	r5, r2
 80181ce:	688a      	ldr	r2, [r1, #8]
 80181d0:	4680      	mov	r8, r0
 80181d2:	460c      	mov	r4, r1
 80181d4:	b932      	cbnz	r2, 80181e4 <_scanf_chars+0x1c>
 80181d6:	698a      	ldr	r2, [r1, #24]
 80181d8:	2a00      	cmp	r2, #0
 80181da:	bf0c      	ite	eq
 80181dc:	2201      	moveq	r2, #1
 80181de:	f04f 32ff 	movne.w	r2, #4294967295
 80181e2:	608a      	str	r2, [r1, #8]
 80181e4:	6822      	ldr	r2, [r4, #0]
 80181e6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8018278 <_scanf_chars+0xb0>
 80181ea:	06d1      	lsls	r1, r2, #27
 80181ec:	bf5f      	itttt	pl
 80181ee:	681a      	ldrpl	r2, [r3, #0]
 80181f0:	1d11      	addpl	r1, r2, #4
 80181f2:	6019      	strpl	r1, [r3, #0]
 80181f4:	6816      	ldrpl	r6, [r2, #0]
 80181f6:	2700      	movs	r7, #0
 80181f8:	69a0      	ldr	r0, [r4, #24]
 80181fa:	b188      	cbz	r0, 8018220 <_scanf_chars+0x58>
 80181fc:	2801      	cmp	r0, #1
 80181fe:	d107      	bne.n	8018210 <_scanf_chars+0x48>
 8018200:	682a      	ldr	r2, [r5, #0]
 8018202:	7811      	ldrb	r1, [r2, #0]
 8018204:	6962      	ldr	r2, [r4, #20]
 8018206:	5c52      	ldrb	r2, [r2, r1]
 8018208:	b952      	cbnz	r2, 8018220 <_scanf_chars+0x58>
 801820a:	2f00      	cmp	r7, #0
 801820c:	d031      	beq.n	8018272 <_scanf_chars+0xaa>
 801820e:	e022      	b.n	8018256 <_scanf_chars+0x8e>
 8018210:	2802      	cmp	r0, #2
 8018212:	d120      	bne.n	8018256 <_scanf_chars+0x8e>
 8018214:	682b      	ldr	r3, [r5, #0]
 8018216:	781b      	ldrb	r3, [r3, #0]
 8018218:	f819 3003 	ldrb.w	r3, [r9, r3]
 801821c:	071b      	lsls	r3, r3, #28
 801821e:	d41a      	bmi.n	8018256 <_scanf_chars+0x8e>
 8018220:	6823      	ldr	r3, [r4, #0]
 8018222:	06da      	lsls	r2, r3, #27
 8018224:	bf5e      	ittt	pl
 8018226:	682b      	ldrpl	r3, [r5, #0]
 8018228:	781b      	ldrbpl	r3, [r3, #0]
 801822a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801822e:	682a      	ldr	r2, [r5, #0]
 8018230:	686b      	ldr	r3, [r5, #4]
 8018232:	3201      	adds	r2, #1
 8018234:	602a      	str	r2, [r5, #0]
 8018236:	68a2      	ldr	r2, [r4, #8]
 8018238:	3b01      	subs	r3, #1
 801823a:	3a01      	subs	r2, #1
 801823c:	606b      	str	r3, [r5, #4]
 801823e:	3701      	adds	r7, #1
 8018240:	60a2      	str	r2, [r4, #8]
 8018242:	b142      	cbz	r2, 8018256 <_scanf_chars+0x8e>
 8018244:	2b00      	cmp	r3, #0
 8018246:	dcd7      	bgt.n	80181f8 <_scanf_chars+0x30>
 8018248:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801824c:	4629      	mov	r1, r5
 801824e:	4640      	mov	r0, r8
 8018250:	4798      	blx	r3
 8018252:	2800      	cmp	r0, #0
 8018254:	d0d0      	beq.n	80181f8 <_scanf_chars+0x30>
 8018256:	6823      	ldr	r3, [r4, #0]
 8018258:	f013 0310 	ands.w	r3, r3, #16
 801825c:	d105      	bne.n	801826a <_scanf_chars+0xa2>
 801825e:	68e2      	ldr	r2, [r4, #12]
 8018260:	3201      	adds	r2, #1
 8018262:	60e2      	str	r2, [r4, #12]
 8018264:	69a2      	ldr	r2, [r4, #24]
 8018266:	b102      	cbz	r2, 801826a <_scanf_chars+0xa2>
 8018268:	7033      	strb	r3, [r6, #0]
 801826a:	6923      	ldr	r3, [r4, #16]
 801826c:	443b      	add	r3, r7
 801826e:	6123      	str	r3, [r4, #16]
 8018270:	2000      	movs	r0, #0
 8018272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018276:	bf00      	nop
 8018278:	0801c2d9 	.word	0x0801c2d9

0801827c <_scanf_i>:
 801827c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018280:	4698      	mov	r8, r3
 8018282:	4b74      	ldr	r3, [pc, #464]	; (8018454 <_scanf_i+0x1d8>)
 8018284:	460c      	mov	r4, r1
 8018286:	4682      	mov	sl, r0
 8018288:	4616      	mov	r6, r2
 801828a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801828e:	b087      	sub	sp, #28
 8018290:	ab03      	add	r3, sp, #12
 8018292:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018296:	4b70      	ldr	r3, [pc, #448]	; (8018458 <_scanf_i+0x1dc>)
 8018298:	69a1      	ldr	r1, [r4, #24]
 801829a:	4a70      	ldr	r2, [pc, #448]	; (801845c <_scanf_i+0x1e0>)
 801829c:	2903      	cmp	r1, #3
 801829e:	bf18      	it	ne
 80182a0:	461a      	movne	r2, r3
 80182a2:	68a3      	ldr	r3, [r4, #8]
 80182a4:	9201      	str	r2, [sp, #4]
 80182a6:	1e5a      	subs	r2, r3, #1
 80182a8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80182ac:	bf88      	it	hi
 80182ae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80182b2:	4627      	mov	r7, r4
 80182b4:	bf82      	ittt	hi
 80182b6:	eb03 0905 	addhi.w	r9, r3, r5
 80182ba:	f240 135d 	movwhi	r3, #349	; 0x15d
 80182be:	60a3      	strhi	r3, [r4, #8]
 80182c0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80182c4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80182c8:	bf98      	it	ls
 80182ca:	f04f 0900 	movls.w	r9, #0
 80182ce:	6023      	str	r3, [r4, #0]
 80182d0:	463d      	mov	r5, r7
 80182d2:	f04f 0b00 	mov.w	fp, #0
 80182d6:	6831      	ldr	r1, [r6, #0]
 80182d8:	ab03      	add	r3, sp, #12
 80182da:	7809      	ldrb	r1, [r1, #0]
 80182dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80182e0:	2202      	movs	r2, #2
 80182e2:	f7e7 ff9d 	bl	8000220 <memchr>
 80182e6:	b328      	cbz	r0, 8018334 <_scanf_i+0xb8>
 80182e8:	f1bb 0f01 	cmp.w	fp, #1
 80182ec:	d159      	bne.n	80183a2 <_scanf_i+0x126>
 80182ee:	6862      	ldr	r2, [r4, #4]
 80182f0:	b92a      	cbnz	r2, 80182fe <_scanf_i+0x82>
 80182f2:	6822      	ldr	r2, [r4, #0]
 80182f4:	2308      	movs	r3, #8
 80182f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80182fa:	6063      	str	r3, [r4, #4]
 80182fc:	6022      	str	r2, [r4, #0]
 80182fe:	6822      	ldr	r2, [r4, #0]
 8018300:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018304:	6022      	str	r2, [r4, #0]
 8018306:	68a2      	ldr	r2, [r4, #8]
 8018308:	1e51      	subs	r1, r2, #1
 801830a:	60a1      	str	r1, [r4, #8]
 801830c:	b192      	cbz	r2, 8018334 <_scanf_i+0xb8>
 801830e:	6832      	ldr	r2, [r6, #0]
 8018310:	1c51      	adds	r1, r2, #1
 8018312:	6031      	str	r1, [r6, #0]
 8018314:	7812      	ldrb	r2, [r2, #0]
 8018316:	f805 2b01 	strb.w	r2, [r5], #1
 801831a:	6872      	ldr	r2, [r6, #4]
 801831c:	3a01      	subs	r2, #1
 801831e:	2a00      	cmp	r2, #0
 8018320:	6072      	str	r2, [r6, #4]
 8018322:	dc07      	bgt.n	8018334 <_scanf_i+0xb8>
 8018324:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8018328:	4631      	mov	r1, r6
 801832a:	4650      	mov	r0, sl
 801832c:	4790      	blx	r2
 801832e:	2800      	cmp	r0, #0
 8018330:	f040 8085 	bne.w	801843e <_scanf_i+0x1c2>
 8018334:	f10b 0b01 	add.w	fp, fp, #1
 8018338:	f1bb 0f03 	cmp.w	fp, #3
 801833c:	d1cb      	bne.n	80182d6 <_scanf_i+0x5a>
 801833e:	6863      	ldr	r3, [r4, #4]
 8018340:	b90b      	cbnz	r3, 8018346 <_scanf_i+0xca>
 8018342:	230a      	movs	r3, #10
 8018344:	6063      	str	r3, [r4, #4]
 8018346:	6863      	ldr	r3, [r4, #4]
 8018348:	4945      	ldr	r1, [pc, #276]	; (8018460 <_scanf_i+0x1e4>)
 801834a:	6960      	ldr	r0, [r4, #20]
 801834c:	1ac9      	subs	r1, r1, r3
 801834e:	f000 f937 	bl	80185c0 <__sccl>
 8018352:	f04f 0b00 	mov.w	fp, #0
 8018356:	68a3      	ldr	r3, [r4, #8]
 8018358:	6822      	ldr	r2, [r4, #0]
 801835a:	2b00      	cmp	r3, #0
 801835c:	d03d      	beq.n	80183da <_scanf_i+0x15e>
 801835e:	6831      	ldr	r1, [r6, #0]
 8018360:	6960      	ldr	r0, [r4, #20]
 8018362:	f891 c000 	ldrb.w	ip, [r1]
 8018366:	f810 000c 	ldrb.w	r0, [r0, ip]
 801836a:	2800      	cmp	r0, #0
 801836c:	d035      	beq.n	80183da <_scanf_i+0x15e>
 801836e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8018372:	d124      	bne.n	80183be <_scanf_i+0x142>
 8018374:	0510      	lsls	r0, r2, #20
 8018376:	d522      	bpl.n	80183be <_scanf_i+0x142>
 8018378:	f10b 0b01 	add.w	fp, fp, #1
 801837c:	f1b9 0f00 	cmp.w	r9, #0
 8018380:	d003      	beq.n	801838a <_scanf_i+0x10e>
 8018382:	3301      	adds	r3, #1
 8018384:	f109 39ff 	add.w	r9, r9, #4294967295
 8018388:	60a3      	str	r3, [r4, #8]
 801838a:	6873      	ldr	r3, [r6, #4]
 801838c:	3b01      	subs	r3, #1
 801838e:	2b00      	cmp	r3, #0
 8018390:	6073      	str	r3, [r6, #4]
 8018392:	dd1b      	ble.n	80183cc <_scanf_i+0x150>
 8018394:	6833      	ldr	r3, [r6, #0]
 8018396:	3301      	adds	r3, #1
 8018398:	6033      	str	r3, [r6, #0]
 801839a:	68a3      	ldr	r3, [r4, #8]
 801839c:	3b01      	subs	r3, #1
 801839e:	60a3      	str	r3, [r4, #8]
 80183a0:	e7d9      	b.n	8018356 <_scanf_i+0xda>
 80183a2:	f1bb 0f02 	cmp.w	fp, #2
 80183a6:	d1ae      	bne.n	8018306 <_scanf_i+0x8a>
 80183a8:	6822      	ldr	r2, [r4, #0]
 80183aa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80183ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80183b2:	d1bf      	bne.n	8018334 <_scanf_i+0xb8>
 80183b4:	2310      	movs	r3, #16
 80183b6:	6063      	str	r3, [r4, #4]
 80183b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80183bc:	e7a2      	b.n	8018304 <_scanf_i+0x88>
 80183be:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80183c2:	6022      	str	r2, [r4, #0]
 80183c4:	780b      	ldrb	r3, [r1, #0]
 80183c6:	f805 3b01 	strb.w	r3, [r5], #1
 80183ca:	e7de      	b.n	801838a <_scanf_i+0x10e>
 80183cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80183d0:	4631      	mov	r1, r6
 80183d2:	4650      	mov	r0, sl
 80183d4:	4798      	blx	r3
 80183d6:	2800      	cmp	r0, #0
 80183d8:	d0df      	beq.n	801839a <_scanf_i+0x11e>
 80183da:	6823      	ldr	r3, [r4, #0]
 80183dc:	05d9      	lsls	r1, r3, #23
 80183de:	d50d      	bpl.n	80183fc <_scanf_i+0x180>
 80183e0:	42bd      	cmp	r5, r7
 80183e2:	d909      	bls.n	80183f8 <_scanf_i+0x17c>
 80183e4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80183e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80183ec:	4632      	mov	r2, r6
 80183ee:	4650      	mov	r0, sl
 80183f0:	4798      	blx	r3
 80183f2:	f105 39ff 	add.w	r9, r5, #4294967295
 80183f6:	464d      	mov	r5, r9
 80183f8:	42bd      	cmp	r5, r7
 80183fa:	d028      	beq.n	801844e <_scanf_i+0x1d2>
 80183fc:	6822      	ldr	r2, [r4, #0]
 80183fe:	f012 0210 	ands.w	r2, r2, #16
 8018402:	d113      	bne.n	801842c <_scanf_i+0x1b0>
 8018404:	702a      	strb	r2, [r5, #0]
 8018406:	6863      	ldr	r3, [r4, #4]
 8018408:	9e01      	ldr	r6, [sp, #4]
 801840a:	4639      	mov	r1, r7
 801840c:	4650      	mov	r0, sl
 801840e:	47b0      	blx	r6
 8018410:	f8d8 3000 	ldr.w	r3, [r8]
 8018414:	6821      	ldr	r1, [r4, #0]
 8018416:	1d1a      	adds	r2, r3, #4
 8018418:	f8c8 2000 	str.w	r2, [r8]
 801841c:	f011 0f20 	tst.w	r1, #32
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	d00f      	beq.n	8018444 <_scanf_i+0x1c8>
 8018424:	6018      	str	r0, [r3, #0]
 8018426:	68e3      	ldr	r3, [r4, #12]
 8018428:	3301      	adds	r3, #1
 801842a:	60e3      	str	r3, [r4, #12]
 801842c:	6923      	ldr	r3, [r4, #16]
 801842e:	1bed      	subs	r5, r5, r7
 8018430:	445d      	add	r5, fp
 8018432:	442b      	add	r3, r5
 8018434:	6123      	str	r3, [r4, #16]
 8018436:	2000      	movs	r0, #0
 8018438:	b007      	add	sp, #28
 801843a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801843e:	f04f 0b00 	mov.w	fp, #0
 8018442:	e7ca      	b.n	80183da <_scanf_i+0x15e>
 8018444:	07ca      	lsls	r2, r1, #31
 8018446:	bf4c      	ite	mi
 8018448:	8018      	strhmi	r0, [r3, #0]
 801844a:	6018      	strpl	r0, [r3, #0]
 801844c:	e7eb      	b.n	8018426 <_scanf_i+0x1aa>
 801844e:	2001      	movs	r0, #1
 8018450:	e7f2      	b.n	8018438 <_scanf_i+0x1bc>
 8018452:	bf00      	nop
 8018454:	0801bf64 	.word	0x0801bf64
 8018458:	08018f8d 	.word	0x08018f8d
 801845c:	08017b71 	.word	0x08017b71
 8018460:	0801c3fa 	.word	0x0801c3fa

08018464 <__sflush_r>:
 8018464:	898a      	ldrh	r2, [r1, #12]
 8018466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801846a:	4605      	mov	r5, r0
 801846c:	0710      	lsls	r0, r2, #28
 801846e:	460c      	mov	r4, r1
 8018470:	d458      	bmi.n	8018524 <__sflush_r+0xc0>
 8018472:	684b      	ldr	r3, [r1, #4]
 8018474:	2b00      	cmp	r3, #0
 8018476:	dc05      	bgt.n	8018484 <__sflush_r+0x20>
 8018478:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801847a:	2b00      	cmp	r3, #0
 801847c:	dc02      	bgt.n	8018484 <__sflush_r+0x20>
 801847e:	2000      	movs	r0, #0
 8018480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018484:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018486:	2e00      	cmp	r6, #0
 8018488:	d0f9      	beq.n	801847e <__sflush_r+0x1a>
 801848a:	2300      	movs	r3, #0
 801848c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018490:	682f      	ldr	r7, [r5, #0]
 8018492:	6a21      	ldr	r1, [r4, #32]
 8018494:	602b      	str	r3, [r5, #0]
 8018496:	d032      	beq.n	80184fe <__sflush_r+0x9a>
 8018498:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801849a:	89a3      	ldrh	r3, [r4, #12]
 801849c:	075a      	lsls	r2, r3, #29
 801849e:	d505      	bpl.n	80184ac <__sflush_r+0x48>
 80184a0:	6863      	ldr	r3, [r4, #4]
 80184a2:	1ac0      	subs	r0, r0, r3
 80184a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80184a6:	b10b      	cbz	r3, 80184ac <__sflush_r+0x48>
 80184a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80184aa:	1ac0      	subs	r0, r0, r3
 80184ac:	2300      	movs	r3, #0
 80184ae:	4602      	mov	r2, r0
 80184b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80184b2:	6a21      	ldr	r1, [r4, #32]
 80184b4:	4628      	mov	r0, r5
 80184b6:	47b0      	blx	r6
 80184b8:	1c43      	adds	r3, r0, #1
 80184ba:	89a3      	ldrh	r3, [r4, #12]
 80184bc:	d106      	bne.n	80184cc <__sflush_r+0x68>
 80184be:	6829      	ldr	r1, [r5, #0]
 80184c0:	291d      	cmp	r1, #29
 80184c2:	d82b      	bhi.n	801851c <__sflush_r+0xb8>
 80184c4:	4a29      	ldr	r2, [pc, #164]	; (801856c <__sflush_r+0x108>)
 80184c6:	410a      	asrs	r2, r1
 80184c8:	07d6      	lsls	r6, r2, #31
 80184ca:	d427      	bmi.n	801851c <__sflush_r+0xb8>
 80184cc:	2200      	movs	r2, #0
 80184ce:	6062      	str	r2, [r4, #4]
 80184d0:	04d9      	lsls	r1, r3, #19
 80184d2:	6922      	ldr	r2, [r4, #16]
 80184d4:	6022      	str	r2, [r4, #0]
 80184d6:	d504      	bpl.n	80184e2 <__sflush_r+0x7e>
 80184d8:	1c42      	adds	r2, r0, #1
 80184da:	d101      	bne.n	80184e0 <__sflush_r+0x7c>
 80184dc:	682b      	ldr	r3, [r5, #0]
 80184de:	b903      	cbnz	r3, 80184e2 <__sflush_r+0x7e>
 80184e0:	6560      	str	r0, [r4, #84]	; 0x54
 80184e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80184e4:	602f      	str	r7, [r5, #0]
 80184e6:	2900      	cmp	r1, #0
 80184e8:	d0c9      	beq.n	801847e <__sflush_r+0x1a>
 80184ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80184ee:	4299      	cmp	r1, r3
 80184f0:	d002      	beq.n	80184f8 <__sflush_r+0x94>
 80184f2:	4628      	mov	r0, r5
 80184f4:	f7fd fefa 	bl	80162ec <_free_r>
 80184f8:	2000      	movs	r0, #0
 80184fa:	6360      	str	r0, [r4, #52]	; 0x34
 80184fc:	e7c0      	b.n	8018480 <__sflush_r+0x1c>
 80184fe:	2301      	movs	r3, #1
 8018500:	4628      	mov	r0, r5
 8018502:	47b0      	blx	r6
 8018504:	1c41      	adds	r1, r0, #1
 8018506:	d1c8      	bne.n	801849a <__sflush_r+0x36>
 8018508:	682b      	ldr	r3, [r5, #0]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d0c5      	beq.n	801849a <__sflush_r+0x36>
 801850e:	2b1d      	cmp	r3, #29
 8018510:	d001      	beq.n	8018516 <__sflush_r+0xb2>
 8018512:	2b16      	cmp	r3, #22
 8018514:	d101      	bne.n	801851a <__sflush_r+0xb6>
 8018516:	602f      	str	r7, [r5, #0]
 8018518:	e7b1      	b.n	801847e <__sflush_r+0x1a>
 801851a:	89a3      	ldrh	r3, [r4, #12]
 801851c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018520:	81a3      	strh	r3, [r4, #12]
 8018522:	e7ad      	b.n	8018480 <__sflush_r+0x1c>
 8018524:	690f      	ldr	r7, [r1, #16]
 8018526:	2f00      	cmp	r7, #0
 8018528:	d0a9      	beq.n	801847e <__sflush_r+0x1a>
 801852a:	0793      	lsls	r3, r2, #30
 801852c:	680e      	ldr	r6, [r1, #0]
 801852e:	bf08      	it	eq
 8018530:	694b      	ldreq	r3, [r1, #20]
 8018532:	600f      	str	r7, [r1, #0]
 8018534:	bf18      	it	ne
 8018536:	2300      	movne	r3, #0
 8018538:	eba6 0807 	sub.w	r8, r6, r7
 801853c:	608b      	str	r3, [r1, #8]
 801853e:	f1b8 0f00 	cmp.w	r8, #0
 8018542:	dd9c      	ble.n	801847e <__sflush_r+0x1a>
 8018544:	6a21      	ldr	r1, [r4, #32]
 8018546:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018548:	4643      	mov	r3, r8
 801854a:	463a      	mov	r2, r7
 801854c:	4628      	mov	r0, r5
 801854e:	47b0      	blx	r6
 8018550:	2800      	cmp	r0, #0
 8018552:	dc06      	bgt.n	8018562 <__sflush_r+0xfe>
 8018554:	89a3      	ldrh	r3, [r4, #12]
 8018556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801855a:	81a3      	strh	r3, [r4, #12]
 801855c:	f04f 30ff 	mov.w	r0, #4294967295
 8018560:	e78e      	b.n	8018480 <__sflush_r+0x1c>
 8018562:	4407      	add	r7, r0
 8018564:	eba8 0800 	sub.w	r8, r8, r0
 8018568:	e7e9      	b.n	801853e <__sflush_r+0xda>
 801856a:	bf00      	nop
 801856c:	dfbffffe 	.word	0xdfbffffe

08018570 <_fflush_r>:
 8018570:	b538      	push	{r3, r4, r5, lr}
 8018572:	690b      	ldr	r3, [r1, #16]
 8018574:	4605      	mov	r5, r0
 8018576:	460c      	mov	r4, r1
 8018578:	b913      	cbnz	r3, 8018580 <_fflush_r+0x10>
 801857a:	2500      	movs	r5, #0
 801857c:	4628      	mov	r0, r5
 801857e:	bd38      	pop	{r3, r4, r5, pc}
 8018580:	b118      	cbz	r0, 801858a <_fflush_r+0x1a>
 8018582:	6a03      	ldr	r3, [r0, #32]
 8018584:	b90b      	cbnz	r3, 801858a <_fflush_r+0x1a>
 8018586:	f7fc fe73 	bl	8015270 <__sinit>
 801858a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d0f3      	beq.n	801857a <_fflush_r+0xa>
 8018592:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018594:	07d0      	lsls	r0, r2, #31
 8018596:	d404      	bmi.n	80185a2 <_fflush_r+0x32>
 8018598:	0599      	lsls	r1, r3, #22
 801859a:	d402      	bmi.n	80185a2 <_fflush_r+0x32>
 801859c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801859e:	f7fd f814 	bl	80155ca <__retarget_lock_acquire_recursive>
 80185a2:	4628      	mov	r0, r5
 80185a4:	4621      	mov	r1, r4
 80185a6:	f7ff ff5d 	bl	8018464 <__sflush_r>
 80185aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80185ac:	07da      	lsls	r2, r3, #31
 80185ae:	4605      	mov	r5, r0
 80185b0:	d4e4      	bmi.n	801857c <_fflush_r+0xc>
 80185b2:	89a3      	ldrh	r3, [r4, #12]
 80185b4:	059b      	lsls	r3, r3, #22
 80185b6:	d4e1      	bmi.n	801857c <_fflush_r+0xc>
 80185b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80185ba:	f7fd f807 	bl	80155cc <__retarget_lock_release_recursive>
 80185be:	e7dd      	b.n	801857c <_fflush_r+0xc>

080185c0 <__sccl>:
 80185c0:	b570      	push	{r4, r5, r6, lr}
 80185c2:	780b      	ldrb	r3, [r1, #0]
 80185c4:	4604      	mov	r4, r0
 80185c6:	2b5e      	cmp	r3, #94	; 0x5e
 80185c8:	bf0b      	itete	eq
 80185ca:	784b      	ldrbeq	r3, [r1, #1]
 80185cc:	1c4a      	addne	r2, r1, #1
 80185ce:	1c8a      	addeq	r2, r1, #2
 80185d0:	2100      	movne	r1, #0
 80185d2:	bf08      	it	eq
 80185d4:	2101      	moveq	r1, #1
 80185d6:	3801      	subs	r0, #1
 80185d8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80185dc:	f800 1f01 	strb.w	r1, [r0, #1]!
 80185e0:	42a8      	cmp	r0, r5
 80185e2:	d1fb      	bne.n	80185dc <__sccl+0x1c>
 80185e4:	b90b      	cbnz	r3, 80185ea <__sccl+0x2a>
 80185e6:	1e50      	subs	r0, r2, #1
 80185e8:	bd70      	pop	{r4, r5, r6, pc}
 80185ea:	f081 0101 	eor.w	r1, r1, #1
 80185ee:	54e1      	strb	r1, [r4, r3]
 80185f0:	4610      	mov	r0, r2
 80185f2:	4602      	mov	r2, r0
 80185f4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80185f8:	2d2d      	cmp	r5, #45	; 0x2d
 80185fa:	d005      	beq.n	8018608 <__sccl+0x48>
 80185fc:	2d5d      	cmp	r5, #93	; 0x5d
 80185fe:	d016      	beq.n	801862e <__sccl+0x6e>
 8018600:	2d00      	cmp	r5, #0
 8018602:	d0f1      	beq.n	80185e8 <__sccl+0x28>
 8018604:	462b      	mov	r3, r5
 8018606:	e7f2      	b.n	80185ee <__sccl+0x2e>
 8018608:	7846      	ldrb	r6, [r0, #1]
 801860a:	2e5d      	cmp	r6, #93	; 0x5d
 801860c:	d0fa      	beq.n	8018604 <__sccl+0x44>
 801860e:	42b3      	cmp	r3, r6
 8018610:	dcf8      	bgt.n	8018604 <__sccl+0x44>
 8018612:	3002      	adds	r0, #2
 8018614:	461a      	mov	r2, r3
 8018616:	3201      	adds	r2, #1
 8018618:	4296      	cmp	r6, r2
 801861a:	54a1      	strb	r1, [r4, r2]
 801861c:	dcfb      	bgt.n	8018616 <__sccl+0x56>
 801861e:	1af2      	subs	r2, r6, r3
 8018620:	3a01      	subs	r2, #1
 8018622:	1c5d      	adds	r5, r3, #1
 8018624:	42b3      	cmp	r3, r6
 8018626:	bfa8      	it	ge
 8018628:	2200      	movge	r2, #0
 801862a:	18ab      	adds	r3, r5, r2
 801862c:	e7e1      	b.n	80185f2 <__sccl+0x32>
 801862e:	4610      	mov	r0, r2
 8018630:	e7da      	b.n	80185e8 <__sccl+0x28>

08018632 <__submore>:
 8018632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018636:	460c      	mov	r4, r1
 8018638:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801863a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801863e:	4299      	cmp	r1, r3
 8018640:	d11d      	bne.n	801867e <__submore+0x4c>
 8018642:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018646:	f7fd fec5 	bl	80163d4 <_malloc_r>
 801864a:	b918      	cbnz	r0, 8018654 <__submore+0x22>
 801864c:	f04f 30ff 	mov.w	r0, #4294967295
 8018650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018658:	63a3      	str	r3, [r4, #56]	; 0x38
 801865a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801865e:	6360      	str	r0, [r4, #52]	; 0x34
 8018660:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018664:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018668:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801866c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018670:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018674:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018678:	6020      	str	r0, [r4, #0]
 801867a:	2000      	movs	r0, #0
 801867c:	e7e8      	b.n	8018650 <__submore+0x1e>
 801867e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018680:	0077      	lsls	r7, r6, #1
 8018682:	463a      	mov	r2, r7
 8018684:	f000 fbe1 	bl	8018e4a <_realloc_r>
 8018688:	4605      	mov	r5, r0
 801868a:	2800      	cmp	r0, #0
 801868c:	d0de      	beq.n	801864c <__submore+0x1a>
 801868e:	eb00 0806 	add.w	r8, r0, r6
 8018692:	4601      	mov	r1, r0
 8018694:	4632      	mov	r2, r6
 8018696:	4640      	mov	r0, r8
 8018698:	f7fc ff99 	bl	80155ce <memcpy>
 801869c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80186a0:	f8c4 8000 	str.w	r8, [r4]
 80186a4:	e7e9      	b.n	801867a <__submore+0x48>

080186a6 <memmove>:
 80186a6:	4288      	cmp	r0, r1
 80186a8:	b510      	push	{r4, lr}
 80186aa:	eb01 0402 	add.w	r4, r1, r2
 80186ae:	d902      	bls.n	80186b6 <memmove+0x10>
 80186b0:	4284      	cmp	r4, r0
 80186b2:	4623      	mov	r3, r4
 80186b4:	d807      	bhi.n	80186c6 <memmove+0x20>
 80186b6:	1e43      	subs	r3, r0, #1
 80186b8:	42a1      	cmp	r1, r4
 80186ba:	d008      	beq.n	80186ce <memmove+0x28>
 80186bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80186c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80186c4:	e7f8      	b.n	80186b8 <memmove+0x12>
 80186c6:	4402      	add	r2, r0
 80186c8:	4601      	mov	r1, r0
 80186ca:	428a      	cmp	r2, r1
 80186cc:	d100      	bne.n	80186d0 <memmove+0x2a>
 80186ce:	bd10      	pop	{r4, pc}
 80186d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80186d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80186d8:	e7f7      	b.n	80186ca <memmove+0x24>
	...

080186dc <_sbrk_r>:
 80186dc:	b538      	push	{r3, r4, r5, lr}
 80186de:	4d06      	ldr	r5, [pc, #24]	; (80186f8 <_sbrk_r+0x1c>)
 80186e0:	2300      	movs	r3, #0
 80186e2:	4604      	mov	r4, r0
 80186e4:	4608      	mov	r0, r1
 80186e6:	602b      	str	r3, [r5, #0]
 80186e8:	f7ee fafa 	bl	8006ce0 <_sbrk>
 80186ec:	1c43      	adds	r3, r0, #1
 80186ee:	d102      	bne.n	80186f6 <_sbrk_r+0x1a>
 80186f0:	682b      	ldr	r3, [r5, #0]
 80186f2:	b103      	cbz	r3, 80186f6 <_sbrk_r+0x1a>
 80186f4:	6023      	str	r3, [r4, #0]
 80186f6:	bd38      	pop	{r3, r4, r5, pc}
 80186f8:	20009048 	.word	0x20009048
 80186fc:	00000000 	.word	0x00000000

08018700 <nan>:
 8018700:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018708 <nan+0x8>
 8018704:	4770      	bx	lr
 8018706:	bf00      	nop
 8018708:	00000000 	.word	0x00000000
 801870c:	7ff80000 	.word	0x7ff80000

08018710 <__assert_func>:
 8018710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018712:	4614      	mov	r4, r2
 8018714:	461a      	mov	r2, r3
 8018716:	4b09      	ldr	r3, [pc, #36]	; (801873c <__assert_func+0x2c>)
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	4605      	mov	r5, r0
 801871c:	68d8      	ldr	r0, [r3, #12]
 801871e:	b14c      	cbz	r4, 8018734 <__assert_func+0x24>
 8018720:	4b07      	ldr	r3, [pc, #28]	; (8018740 <__assert_func+0x30>)
 8018722:	9100      	str	r1, [sp, #0]
 8018724:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018728:	4906      	ldr	r1, [pc, #24]	; (8018744 <__assert_func+0x34>)
 801872a:	462b      	mov	r3, r5
 801872c:	f000 fc3e 	bl	8018fac <fiprintf>
 8018730:	f000 fc4e 	bl	8018fd0 <abort>
 8018734:	4b04      	ldr	r3, [pc, #16]	; (8018748 <__assert_func+0x38>)
 8018736:	461c      	mov	r4, r3
 8018738:	e7f3      	b.n	8018722 <__assert_func+0x12>
 801873a:	bf00      	nop
 801873c:	20000070 	.word	0x20000070
 8018740:	0801c40d 	.word	0x0801c40d
 8018744:	0801c41a 	.word	0x0801c41a
 8018748:	0801c448 	.word	0x0801c448

0801874c <_calloc_r>:
 801874c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801874e:	fba1 2402 	umull	r2, r4, r1, r2
 8018752:	b94c      	cbnz	r4, 8018768 <_calloc_r+0x1c>
 8018754:	4611      	mov	r1, r2
 8018756:	9201      	str	r2, [sp, #4]
 8018758:	f7fd fe3c 	bl	80163d4 <_malloc_r>
 801875c:	9a01      	ldr	r2, [sp, #4]
 801875e:	4605      	mov	r5, r0
 8018760:	b930      	cbnz	r0, 8018770 <_calloc_r+0x24>
 8018762:	4628      	mov	r0, r5
 8018764:	b003      	add	sp, #12
 8018766:	bd30      	pop	{r4, r5, pc}
 8018768:	220c      	movs	r2, #12
 801876a:	6002      	str	r2, [r0, #0]
 801876c:	2500      	movs	r5, #0
 801876e:	e7f8      	b.n	8018762 <_calloc_r+0x16>
 8018770:	4621      	mov	r1, r4
 8018772:	f7fc fe44 	bl	80153fe <memset>
 8018776:	e7f4      	b.n	8018762 <_calloc_r+0x16>

08018778 <rshift>:
 8018778:	6903      	ldr	r3, [r0, #16]
 801877a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801877e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018782:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018786:	f100 0414 	add.w	r4, r0, #20
 801878a:	dd45      	ble.n	8018818 <rshift+0xa0>
 801878c:	f011 011f 	ands.w	r1, r1, #31
 8018790:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018794:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018798:	d10c      	bne.n	80187b4 <rshift+0x3c>
 801879a:	f100 0710 	add.w	r7, r0, #16
 801879e:	4629      	mov	r1, r5
 80187a0:	42b1      	cmp	r1, r6
 80187a2:	d334      	bcc.n	801880e <rshift+0x96>
 80187a4:	1a9b      	subs	r3, r3, r2
 80187a6:	009b      	lsls	r3, r3, #2
 80187a8:	1eea      	subs	r2, r5, #3
 80187aa:	4296      	cmp	r6, r2
 80187ac:	bf38      	it	cc
 80187ae:	2300      	movcc	r3, #0
 80187b0:	4423      	add	r3, r4
 80187b2:	e015      	b.n	80187e0 <rshift+0x68>
 80187b4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80187b8:	f1c1 0820 	rsb	r8, r1, #32
 80187bc:	40cf      	lsrs	r7, r1
 80187be:	f105 0e04 	add.w	lr, r5, #4
 80187c2:	46a1      	mov	r9, r4
 80187c4:	4576      	cmp	r6, lr
 80187c6:	46f4      	mov	ip, lr
 80187c8:	d815      	bhi.n	80187f6 <rshift+0x7e>
 80187ca:	1a9a      	subs	r2, r3, r2
 80187cc:	0092      	lsls	r2, r2, #2
 80187ce:	3a04      	subs	r2, #4
 80187d0:	3501      	adds	r5, #1
 80187d2:	42ae      	cmp	r6, r5
 80187d4:	bf38      	it	cc
 80187d6:	2200      	movcc	r2, #0
 80187d8:	18a3      	adds	r3, r4, r2
 80187da:	50a7      	str	r7, [r4, r2]
 80187dc:	b107      	cbz	r7, 80187e0 <rshift+0x68>
 80187de:	3304      	adds	r3, #4
 80187e0:	1b1a      	subs	r2, r3, r4
 80187e2:	42a3      	cmp	r3, r4
 80187e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80187e8:	bf08      	it	eq
 80187ea:	2300      	moveq	r3, #0
 80187ec:	6102      	str	r2, [r0, #16]
 80187ee:	bf08      	it	eq
 80187f0:	6143      	streq	r3, [r0, #20]
 80187f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187f6:	f8dc c000 	ldr.w	ip, [ip]
 80187fa:	fa0c fc08 	lsl.w	ip, ip, r8
 80187fe:	ea4c 0707 	orr.w	r7, ip, r7
 8018802:	f849 7b04 	str.w	r7, [r9], #4
 8018806:	f85e 7b04 	ldr.w	r7, [lr], #4
 801880a:	40cf      	lsrs	r7, r1
 801880c:	e7da      	b.n	80187c4 <rshift+0x4c>
 801880e:	f851 cb04 	ldr.w	ip, [r1], #4
 8018812:	f847 cf04 	str.w	ip, [r7, #4]!
 8018816:	e7c3      	b.n	80187a0 <rshift+0x28>
 8018818:	4623      	mov	r3, r4
 801881a:	e7e1      	b.n	80187e0 <rshift+0x68>

0801881c <__hexdig_fun>:
 801881c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018820:	2b09      	cmp	r3, #9
 8018822:	d802      	bhi.n	801882a <__hexdig_fun+0xe>
 8018824:	3820      	subs	r0, #32
 8018826:	b2c0      	uxtb	r0, r0
 8018828:	4770      	bx	lr
 801882a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801882e:	2b05      	cmp	r3, #5
 8018830:	d801      	bhi.n	8018836 <__hexdig_fun+0x1a>
 8018832:	3847      	subs	r0, #71	; 0x47
 8018834:	e7f7      	b.n	8018826 <__hexdig_fun+0xa>
 8018836:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801883a:	2b05      	cmp	r3, #5
 801883c:	d801      	bhi.n	8018842 <__hexdig_fun+0x26>
 801883e:	3827      	subs	r0, #39	; 0x27
 8018840:	e7f1      	b.n	8018826 <__hexdig_fun+0xa>
 8018842:	2000      	movs	r0, #0
 8018844:	4770      	bx	lr
	...

08018848 <__gethex>:
 8018848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801884c:	4617      	mov	r7, r2
 801884e:	680a      	ldr	r2, [r1, #0]
 8018850:	b085      	sub	sp, #20
 8018852:	f102 0b02 	add.w	fp, r2, #2
 8018856:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801885a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801885e:	4681      	mov	r9, r0
 8018860:	468a      	mov	sl, r1
 8018862:	9302      	str	r3, [sp, #8]
 8018864:	32fe      	adds	r2, #254	; 0xfe
 8018866:	eb02 030b 	add.w	r3, r2, fp
 801886a:	46d8      	mov	r8, fp
 801886c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8018870:	9301      	str	r3, [sp, #4]
 8018872:	2830      	cmp	r0, #48	; 0x30
 8018874:	d0f7      	beq.n	8018866 <__gethex+0x1e>
 8018876:	f7ff ffd1 	bl	801881c <__hexdig_fun>
 801887a:	4604      	mov	r4, r0
 801887c:	2800      	cmp	r0, #0
 801887e:	d138      	bne.n	80188f2 <__gethex+0xaa>
 8018880:	49a7      	ldr	r1, [pc, #668]	; (8018b20 <__gethex+0x2d8>)
 8018882:	2201      	movs	r2, #1
 8018884:	4640      	mov	r0, r8
 8018886:	f7fc fdc2 	bl	801540e <strncmp>
 801888a:	4606      	mov	r6, r0
 801888c:	2800      	cmp	r0, #0
 801888e:	d169      	bne.n	8018964 <__gethex+0x11c>
 8018890:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018894:	465d      	mov	r5, fp
 8018896:	f7ff ffc1 	bl	801881c <__hexdig_fun>
 801889a:	2800      	cmp	r0, #0
 801889c:	d064      	beq.n	8018968 <__gethex+0x120>
 801889e:	465a      	mov	r2, fp
 80188a0:	7810      	ldrb	r0, [r2, #0]
 80188a2:	2830      	cmp	r0, #48	; 0x30
 80188a4:	4690      	mov	r8, r2
 80188a6:	f102 0201 	add.w	r2, r2, #1
 80188aa:	d0f9      	beq.n	80188a0 <__gethex+0x58>
 80188ac:	f7ff ffb6 	bl	801881c <__hexdig_fun>
 80188b0:	2301      	movs	r3, #1
 80188b2:	fab0 f480 	clz	r4, r0
 80188b6:	0964      	lsrs	r4, r4, #5
 80188b8:	465e      	mov	r6, fp
 80188ba:	9301      	str	r3, [sp, #4]
 80188bc:	4642      	mov	r2, r8
 80188be:	4615      	mov	r5, r2
 80188c0:	3201      	adds	r2, #1
 80188c2:	7828      	ldrb	r0, [r5, #0]
 80188c4:	f7ff ffaa 	bl	801881c <__hexdig_fun>
 80188c8:	2800      	cmp	r0, #0
 80188ca:	d1f8      	bne.n	80188be <__gethex+0x76>
 80188cc:	4994      	ldr	r1, [pc, #592]	; (8018b20 <__gethex+0x2d8>)
 80188ce:	2201      	movs	r2, #1
 80188d0:	4628      	mov	r0, r5
 80188d2:	f7fc fd9c 	bl	801540e <strncmp>
 80188d6:	b978      	cbnz	r0, 80188f8 <__gethex+0xb0>
 80188d8:	b946      	cbnz	r6, 80188ec <__gethex+0xa4>
 80188da:	1c6e      	adds	r6, r5, #1
 80188dc:	4632      	mov	r2, r6
 80188de:	4615      	mov	r5, r2
 80188e0:	3201      	adds	r2, #1
 80188e2:	7828      	ldrb	r0, [r5, #0]
 80188e4:	f7ff ff9a 	bl	801881c <__hexdig_fun>
 80188e8:	2800      	cmp	r0, #0
 80188ea:	d1f8      	bne.n	80188de <__gethex+0x96>
 80188ec:	1b73      	subs	r3, r6, r5
 80188ee:	009e      	lsls	r6, r3, #2
 80188f0:	e004      	b.n	80188fc <__gethex+0xb4>
 80188f2:	2400      	movs	r4, #0
 80188f4:	4626      	mov	r6, r4
 80188f6:	e7e1      	b.n	80188bc <__gethex+0x74>
 80188f8:	2e00      	cmp	r6, #0
 80188fa:	d1f7      	bne.n	80188ec <__gethex+0xa4>
 80188fc:	782b      	ldrb	r3, [r5, #0]
 80188fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018902:	2b50      	cmp	r3, #80	; 0x50
 8018904:	d13d      	bne.n	8018982 <__gethex+0x13a>
 8018906:	786b      	ldrb	r3, [r5, #1]
 8018908:	2b2b      	cmp	r3, #43	; 0x2b
 801890a:	d02f      	beq.n	801896c <__gethex+0x124>
 801890c:	2b2d      	cmp	r3, #45	; 0x2d
 801890e:	d031      	beq.n	8018974 <__gethex+0x12c>
 8018910:	1c69      	adds	r1, r5, #1
 8018912:	f04f 0b00 	mov.w	fp, #0
 8018916:	7808      	ldrb	r0, [r1, #0]
 8018918:	f7ff ff80 	bl	801881c <__hexdig_fun>
 801891c:	1e42      	subs	r2, r0, #1
 801891e:	b2d2      	uxtb	r2, r2
 8018920:	2a18      	cmp	r2, #24
 8018922:	d82e      	bhi.n	8018982 <__gethex+0x13a>
 8018924:	f1a0 0210 	sub.w	r2, r0, #16
 8018928:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801892c:	f7ff ff76 	bl	801881c <__hexdig_fun>
 8018930:	f100 3cff 	add.w	ip, r0, #4294967295
 8018934:	fa5f fc8c 	uxtb.w	ip, ip
 8018938:	f1bc 0f18 	cmp.w	ip, #24
 801893c:	d91d      	bls.n	801897a <__gethex+0x132>
 801893e:	f1bb 0f00 	cmp.w	fp, #0
 8018942:	d000      	beq.n	8018946 <__gethex+0xfe>
 8018944:	4252      	negs	r2, r2
 8018946:	4416      	add	r6, r2
 8018948:	f8ca 1000 	str.w	r1, [sl]
 801894c:	b1dc      	cbz	r4, 8018986 <__gethex+0x13e>
 801894e:	9b01      	ldr	r3, [sp, #4]
 8018950:	2b00      	cmp	r3, #0
 8018952:	bf14      	ite	ne
 8018954:	f04f 0800 	movne.w	r8, #0
 8018958:	f04f 0806 	moveq.w	r8, #6
 801895c:	4640      	mov	r0, r8
 801895e:	b005      	add	sp, #20
 8018960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018964:	4645      	mov	r5, r8
 8018966:	4626      	mov	r6, r4
 8018968:	2401      	movs	r4, #1
 801896a:	e7c7      	b.n	80188fc <__gethex+0xb4>
 801896c:	f04f 0b00 	mov.w	fp, #0
 8018970:	1ca9      	adds	r1, r5, #2
 8018972:	e7d0      	b.n	8018916 <__gethex+0xce>
 8018974:	f04f 0b01 	mov.w	fp, #1
 8018978:	e7fa      	b.n	8018970 <__gethex+0x128>
 801897a:	230a      	movs	r3, #10
 801897c:	fb03 0002 	mla	r0, r3, r2, r0
 8018980:	e7d0      	b.n	8018924 <__gethex+0xdc>
 8018982:	4629      	mov	r1, r5
 8018984:	e7e0      	b.n	8018948 <__gethex+0x100>
 8018986:	eba5 0308 	sub.w	r3, r5, r8
 801898a:	3b01      	subs	r3, #1
 801898c:	4621      	mov	r1, r4
 801898e:	2b07      	cmp	r3, #7
 8018990:	dc0a      	bgt.n	80189a8 <__gethex+0x160>
 8018992:	4648      	mov	r0, r9
 8018994:	f7fd fdaa 	bl	80164ec <_Balloc>
 8018998:	4604      	mov	r4, r0
 801899a:	b940      	cbnz	r0, 80189ae <__gethex+0x166>
 801899c:	4b61      	ldr	r3, [pc, #388]	; (8018b24 <__gethex+0x2dc>)
 801899e:	4602      	mov	r2, r0
 80189a0:	21e4      	movs	r1, #228	; 0xe4
 80189a2:	4861      	ldr	r0, [pc, #388]	; (8018b28 <__gethex+0x2e0>)
 80189a4:	f7ff feb4 	bl	8018710 <__assert_func>
 80189a8:	3101      	adds	r1, #1
 80189aa:	105b      	asrs	r3, r3, #1
 80189ac:	e7ef      	b.n	801898e <__gethex+0x146>
 80189ae:	f100 0a14 	add.w	sl, r0, #20
 80189b2:	2300      	movs	r3, #0
 80189b4:	495a      	ldr	r1, [pc, #360]	; (8018b20 <__gethex+0x2d8>)
 80189b6:	f8cd a004 	str.w	sl, [sp, #4]
 80189ba:	469b      	mov	fp, r3
 80189bc:	45a8      	cmp	r8, r5
 80189be:	d342      	bcc.n	8018a46 <__gethex+0x1fe>
 80189c0:	9801      	ldr	r0, [sp, #4]
 80189c2:	f840 bb04 	str.w	fp, [r0], #4
 80189c6:	eba0 000a 	sub.w	r0, r0, sl
 80189ca:	1080      	asrs	r0, r0, #2
 80189cc:	6120      	str	r0, [r4, #16]
 80189ce:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80189d2:	4658      	mov	r0, fp
 80189d4:	f7fd fe7c 	bl	80166d0 <__hi0bits>
 80189d8:	683d      	ldr	r5, [r7, #0]
 80189da:	eba8 0000 	sub.w	r0, r8, r0
 80189de:	42a8      	cmp	r0, r5
 80189e0:	dd59      	ble.n	8018a96 <__gethex+0x24e>
 80189e2:	eba0 0805 	sub.w	r8, r0, r5
 80189e6:	4641      	mov	r1, r8
 80189e8:	4620      	mov	r0, r4
 80189ea:	f7fe fa0b 	bl	8016e04 <__any_on>
 80189ee:	4683      	mov	fp, r0
 80189f0:	b1b8      	cbz	r0, 8018a22 <__gethex+0x1da>
 80189f2:	f108 33ff 	add.w	r3, r8, #4294967295
 80189f6:	1159      	asrs	r1, r3, #5
 80189f8:	f003 021f 	and.w	r2, r3, #31
 80189fc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8018a00:	f04f 0b01 	mov.w	fp, #1
 8018a04:	fa0b f202 	lsl.w	r2, fp, r2
 8018a08:	420a      	tst	r2, r1
 8018a0a:	d00a      	beq.n	8018a22 <__gethex+0x1da>
 8018a0c:	455b      	cmp	r3, fp
 8018a0e:	dd06      	ble.n	8018a1e <__gethex+0x1d6>
 8018a10:	f1a8 0102 	sub.w	r1, r8, #2
 8018a14:	4620      	mov	r0, r4
 8018a16:	f7fe f9f5 	bl	8016e04 <__any_on>
 8018a1a:	2800      	cmp	r0, #0
 8018a1c:	d138      	bne.n	8018a90 <__gethex+0x248>
 8018a1e:	f04f 0b02 	mov.w	fp, #2
 8018a22:	4641      	mov	r1, r8
 8018a24:	4620      	mov	r0, r4
 8018a26:	f7ff fea7 	bl	8018778 <rshift>
 8018a2a:	4446      	add	r6, r8
 8018a2c:	68bb      	ldr	r3, [r7, #8]
 8018a2e:	42b3      	cmp	r3, r6
 8018a30:	da41      	bge.n	8018ab6 <__gethex+0x26e>
 8018a32:	4621      	mov	r1, r4
 8018a34:	4648      	mov	r0, r9
 8018a36:	f7fd fd99 	bl	801656c <_Bfree>
 8018a3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018a3c:	2300      	movs	r3, #0
 8018a3e:	6013      	str	r3, [r2, #0]
 8018a40:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8018a44:	e78a      	b.n	801895c <__gethex+0x114>
 8018a46:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8018a4a:	2a2e      	cmp	r2, #46	; 0x2e
 8018a4c:	d014      	beq.n	8018a78 <__gethex+0x230>
 8018a4e:	2b20      	cmp	r3, #32
 8018a50:	d106      	bne.n	8018a60 <__gethex+0x218>
 8018a52:	9b01      	ldr	r3, [sp, #4]
 8018a54:	f843 bb04 	str.w	fp, [r3], #4
 8018a58:	f04f 0b00 	mov.w	fp, #0
 8018a5c:	9301      	str	r3, [sp, #4]
 8018a5e:	465b      	mov	r3, fp
 8018a60:	7828      	ldrb	r0, [r5, #0]
 8018a62:	9303      	str	r3, [sp, #12]
 8018a64:	f7ff feda 	bl	801881c <__hexdig_fun>
 8018a68:	9b03      	ldr	r3, [sp, #12]
 8018a6a:	f000 000f 	and.w	r0, r0, #15
 8018a6e:	4098      	lsls	r0, r3
 8018a70:	ea4b 0b00 	orr.w	fp, fp, r0
 8018a74:	3304      	adds	r3, #4
 8018a76:	e7a1      	b.n	80189bc <__gethex+0x174>
 8018a78:	45a8      	cmp	r8, r5
 8018a7a:	d8e8      	bhi.n	8018a4e <__gethex+0x206>
 8018a7c:	2201      	movs	r2, #1
 8018a7e:	4628      	mov	r0, r5
 8018a80:	9303      	str	r3, [sp, #12]
 8018a82:	f7fc fcc4 	bl	801540e <strncmp>
 8018a86:	4926      	ldr	r1, [pc, #152]	; (8018b20 <__gethex+0x2d8>)
 8018a88:	9b03      	ldr	r3, [sp, #12]
 8018a8a:	2800      	cmp	r0, #0
 8018a8c:	d1df      	bne.n	8018a4e <__gethex+0x206>
 8018a8e:	e795      	b.n	80189bc <__gethex+0x174>
 8018a90:	f04f 0b03 	mov.w	fp, #3
 8018a94:	e7c5      	b.n	8018a22 <__gethex+0x1da>
 8018a96:	da0b      	bge.n	8018ab0 <__gethex+0x268>
 8018a98:	eba5 0800 	sub.w	r8, r5, r0
 8018a9c:	4621      	mov	r1, r4
 8018a9e:	4642      	mov	r2, r8
 8018aa0:	4648      	mov	r0, r9
 8018aa2:	f7fd ff7d 	bl	80169a0 <__lshift>
 8018aa6:	eba6 0608 	sub.w	r6, r6, r8
 8018aaa:	4604      	mov	r4, r0
 8018aac:	f100 0a14 	add.w	sl, r0, #20
 8018ab0:	f04f 0b00 	mov.w	fp, #0
 8018ab4:	e7ba      	b.n	8018a2c <__gethex+0x1e4>
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	42b3      	cmp	r3, r6
 8018aba:	dd73      	ble.n	8018ba4 <__gethex+0x35c>
 8018abc:	1b9e      	subs	r6, r3, r6
 8018abe:	42b5      	cmp	r5, r6
 8018ac0:	dc34      	bgt.n	8018b2c <__gethex+0x2e4>
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	2b02      	cmp	r3, #2
 8018ac6:	d023      	beq.n	8018b10 <__gethex+0x2c8>
 8018ac8:	2b03      	cmp	r3, #3
 8018aca:	d025      	beq.n	8018b18 <__gethex+0x2d0>
 8018acc:	2b01      	cmp	r3, #1
 8018ace:	d115      	bne.n	8018afc <__gethex+0x2b4>
 8018ad0:	42b5      	cmp	r5, r6
 8018ad2:	d113      	bne.n	8018afc <__gethex+0x2b4>
 8018ad4:	2d01      	cmp	r5, #1
 8018ad6:	d10b      	bne.n	8018af0 <__gethex+0x2a8>
 8018ad8:	9a02      	ldr	r2, [sp, #8]
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	6013      	str	r3, [r2, #0]
 8018ade:	2301      	movs	r3, #1
 8018ae0:	6123      	str	r3, [r4, #16]
 8018ae2:	f8ca 3000 	str.w	r3, [sl]
 8018ae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ae8:	f04f 0862 	mov.w	r8, #98	; 0x62
 8018aec:	601c      	str	r4, [r3, #0]
 8018aee:	e735      	b.n	801895c <__gethex+0x114>
 8018af0:	1e69      	subs	r1, r5, #1
 8018af2:	4620      	mov	r0, r4
 8018af4:	f7fe f986 	bl	8016e04 <__any_on>
 8018af8:	2800      	cmp	r0, #0
 8018afa:	d1ed      	bne.n	8018ad8 <__gethex+0x290>
 8018afc:	4621      	mov	r1, r4
 8018afe:	4648      	mov	r0, r9
 8018b00:	f7fd fd34 	bl	801656c <_Bfree>
 8018b04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018b06:	2300      	movs	r3, #0
 8018b08:	6013      	str	r3, [r2, #0]
 8018b0a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8018b0e:	e725      	b.n	801895c <__gethex+0x114>
 8018b10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d1f2      	bne.n	8018afc <__gethex+0x2b4>
 8018b16:	e7df      	b.n	8018ad8 <__gethex+0x290>
 8018b18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d1dc      	bne.n	8018ad8 <__gethex+0x290>
 8018b1e:	e7ed      	b.n	8018afc <__gethex+0x2b4>
 8018b20:	0801c284 	.word	0x0801c284
 8018b24:	0801c11b 	.word	0x0801c11b
 8018b28:	0801c449 	.word	0x0801c449
 8018b2c:	f106 38ff 	add.w	r8, r6, #4294967295
 8018b30:	f1bb 0f00 	cmp.w	fp, #0
 8018b34:	d133      	bne.n	8018b9e <__gethex+0x356>
 8018b36:	f1b8 0f00 	cmp.w	r8, #0
 8018b3a:	d004      	beq.n	8018b46 <__gethex+0x2fe>
 8018b3c:	4641      	mov	r1, r8
 8018b3e:	4620      	mov	r0, r4
 8018b40:	f7fe f960 	bl	8016e04 <__any_on>
 8018b44:	4683      	mov	fp, r0
 8018b46:	ea4f 1268 	mov.w	r2, r8, asr #5
 8018b4a:	2301      	movs	r3, #1
 8018b4c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018b50:	f008 081f 	and.w	r8, r8, #31
 8018b54:	fa03 f308 	lsl.w	r3, r3, r8
 8018b58:	4213      	tst	r3, r2
 8018b5a:	4631      	mov	r1, r6
 8018b5c:	4620      	mov	r0, r4
 8018b5e:	bf18      	it	ne
 8018b60:	f04b 0b02 	orrne.w	fp, fp, #2
 8018b64:	1bad      	subs	r5, r5, r6
 8018b66:	f7ff fe07 	bl	8018778 <rshift>
 8018b6a:	687e      	ldr	r6, [r7, #4]
 8018b6c:	f04f 0802 	mov.w	r8, #2
 8018b70:	f1bb 0f00 	cmp.w	fp, #0
 8018b74:	d04a      	beq.n	8018c0c <__gethex+0x3c4>
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	2b02      	cmp	r3, #2
 8018b7a:	d016      	beq.n	8018baa <__gethex+0x362>
 8018b7c:	2b03      	cmp	r3, #3
 8018b7e:	d018      	beq.n	8018bb2 <__gethex+0x36a>
 8018b80:	2b01      	cmp	r3, #1
 8018b82:	d109      	bne.n	8018b98 <__gethex+0x350>
 8018b84:	f01b 0f02 	tst.w	fp, #2
 8018b88:	d006      	beq.n	8018b98 <__gethex+0x350>
 8018b8a:	f8da 3000 	ldr.w	r3, [sl]
 8018b8e:	ea4b 0b03 	orr.w	fp, fp, r3
 8018b92:	f01b 0f01 	tst.w	fp, #1
 8018b96:	d10f      	bne.n	8018bb8 <__gethex+0x370>
 8018b98:	f048 0810 	orr.w	r8, r8, #16
 8018b9c:	e036      	b.n	8018c0c <__gethex+0x3c4>
 8018b9e:	f04f 0b01 	mov.w	fp, #1
 8018ba2:	e7d0      	b.n	8018b46 <__gethex+0x2fe>
 8018ba4:	f04f 0801 	mov.w	r8, #1
 8018ba8:	e7e2      	b.n	8018b70 <__gethex+0x328>
 8018baa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018bac:	f1c3 0301 	rsb	r3, r3, #1
 8018bb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8018bb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d0ef      	beq.n	8018b98 <__gethex+0x350>
 8018bb8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018bbc:	f104 0214 	add.w	r2, r4, #20
 8018bc0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8018bc4:	9301      	str	r3, [sp, #4]
 8018bc6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8018bca:	2300      	movs	r3, #0
 8018bcc:	4694      	mov	ip, r2
 8018bce:	f852 1b04 	ldr.w	r1, [r2], #4
 8018bd2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8018bd6:	d01e      	beq.n	8018c16 <__gethex+0x3ce>
 8018bd8:	3101      	adds	r1, #1
 8018bda:	f8cc 1000 	str.w	r1, [ip]
 8018bde:	f1b8 0f02 	cmp.w	r8, #2
 8018be2:	f104 0214 	add.w	r2, r4, #20
 8018be6:	d13d      	bne.n	8018c64 <__gethex+0x41c>
 8018be8:	683b      	ldr	r3, [r7, #0]
 8018bea:	3b01      	subs	r3, #1
 8018bec:	42ab      	cmp	r3, r5
 8018bee:	d10b      	bne.n	8018c08 <__gethex+0x3c0>
 8018bf0:	1169      	asrs	r1, r5, #5
 8018bf2:	2301      	movs	r3, #1
 8018bf4:	f005 051f 	and.w	r5, r5, #31
 8018bf8:	fa03 f505 	lsl.w	r5, r3, r5
 8018bfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018c00:	421d      	tst	r5, r3
 8018c02:	bf18      	it	ne
 8018c04:	f04f 0801 	movne.w	r8, #1
 8018c08:	f048 0820 	orr.w	r8, r8, #32
 8018c0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018c0e:	601c      	str	r4, [r3, #0]
 8018c10:	9b02      	ldr	r3, [sp, #8]
 8018c12:	601e      	str	r6, [r3, #0]
 8018c14:	e6a2      	b.n	801895c <__gethex+0x114>
 8018c16:	4290      	cmp	r0, r2
 8018c18:	f842 3c04 	str.w	r3, [r2, #-4]
 8018c1c:	d8d6      	bhi.n	8018bcc <__gethex+0x384>
 8018c1e:	68a2      	ldr	r2, [r4, #8]
 8018c20:	4593      	cmp	fp, r2
 8018c22:	db17      	blt.n	8018c54 <__gethex+0x40c>
 8018c24:	6861      	ldr	r1, [r4, #4]
 8018c26:	4648      	mov	r0, r9
 8018c28:	3101      	adds	r1, #1
 8018c2a:	f7fd fc5f 	bl	80164ec <_Balloc>
 8018c2e:	4682      	mov	sl, r0
 8018c30:	b918      	cbnz	r0, 8018c3a <__gethex+0x3f2>
 8018c32:	4b1b      	ldr	r3, [pc, #108]	; (8018ca0 <__gethex+0x458>)
 8018c34:	4602      	mov	r2, r0
 8018c36:	2184      	movs	r1, #132	; 0x84
 8018c38:	e6b3      	b.n	80189a2 <__gethex+0x15a>
 8018c3a:	6922      	ldr	r2, [r4, #16]
 8018c3c:	3202      	adds	r2, #2
 8018c3e:	f104 010c 	add.w	r1, r4, #12
 8018c42:	0092      	lsls	r2, r2, #2
 8018c44:	300c      	adds	r0, #12
 8018c46:	f7fc fcc2 	bl	80155ce <memcpy>
 8018c4a:	4621      	mov	r1, r4
 8018c4c:	4648      	mov	r0, r9
 8018c4e:	f7fd fc8d 	bl	801656c <_Bfree>
 8018c52:	4654      	mov	r4, sl
 8018c54:	6922      	ldr	r2, [r4, #16]
 8018c56:	1c51      	adds	r1, r2, #1
 8018c58:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018c5c:	6121      	str	r1, [r4, #16]
 8018c5e:	2101      	movs	r1, #1
 8018c60:	6151      	str	r1, [r2, #20]
 8018c62:	e7bc      	b.n	8018bde <__gethex+0x396>
 8018c64:	6921      	ldr	r1, [r4, #16]
 8018c66:	4559      	cmp	r1, fp
 8018c68:	dd0b      	ble.n	8018c82 <__gethex+0x43a>
 8018c6a:	2101      	movs	r1, #1
 8018c6c:	4620      	mov	r0, r4
 8018c6e:	f7ff fd83 	bl	8018778 <rshift>
 8018c72:	68bb      	ldr	r3, [r7, #8]
 8018c74:	3601      	adds	r6, #1
 8018c76:	42b3      	cmp	r3, r6
 8018c78:	f6ff aedb 	blt.w	8018a32 <__gethex+0x1ea>
 8018c7c:	f04f 0801 	mov.w	r8, #1
 8018c80:	e7c2      	b.n	8018c08 <__gethex+0x3c0>
 8018c82:	f015 051f 	ands.w	r5, r5, #31
 8018c86:	d0f9      	beq.n	8018c7c <__gethex+0x434>
 8018c88:	9b01      	ldr	r3, [sp, #4]
 8018c8a:	441a      	add	r2, r3
 8018c8c:	f1c5 0520 	rsb	r5, r5, #32
 8018c90:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8018c94:	f7fd fd1c 	bl	80166d0 <__hi0bits>
 8018c98:	42a8      	cmp	r0, r5
 8018c9a:	dbe6      	blt.n	8018c6a <__gethex+0x422>
 8018c9c:	e7ee      	b.n	8018c7c <__gethex+0x434>
 8018c9e:	bf00      	nop
 8018ca0:	0801c11b 	.word	0x0801c11b

08018ca4 <L_shift>:
 8018ca4:	f1c2 0208 	rsb	r2, r2, #8
 8018ca8:	0092      	lsls	r2, r2, #2
 8018caa:	b570      	push	{r4, r5, r6, lr}
 8018cac:	f1c2 0620 	rsb	r6, r2, #32
 8018cb0:	6843      	ldr	r3, [r0, #4]
 8018cb2:	6804      	ldr	r4, [r0, #0]
 8018cb4:	fa03 f506 	lsl.w	r5, r3, r6
 8018cb8:	432c      	orrs	r4, r5
 8018cba:	40d3      	lsrs	r3, r2
 8018cbc:	6004      	str	r4, [r0, #0]
 8018cbe:	f840 3f04 	str.w	r3, [r0, #4]!
 8018cc2:	4288      	cmp	r0, r1
 8018cc4:	d3f4      	bcc.n	8018cb0 <L_shift+0xc>
 8018cc6:	bd70      	pop	{r4, r5, r6, pc}

08018cc8 <__match>:
 8018cc8:	b530      	push	{r4, r5, lr}
 8018cca:	6803      	ldr	r3, [r0, #0]
 8018ccc:	3301      	adds	r3, #1
 8018cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018cd2:	b914      	cbnz	r4, 8018cda <__match+0x12>
 8018cd4:	6003      	str	r3, [r0, #0]
 8018cd6:	2001      	movs	r0, #1
 8018cd8:	bd30      	pop	{r4, r5, pc}
 8018cda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018cde:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018ce2:	2d19      	cmp	r5, #25
 8018ce4:	bf98      	it	ls
 8018ce6:	3220      	addls	r2, #32
 8018ce8:	42a2      	cmp	r2, r4
 8018cea:	d0f0      	beq.n	8018cce <__match+0x6>
 8018cec:	2000      	movs	r0, #0
 8018cee:	e7f3      	b.n	8018cd8 <__match+0x10>

08018cf0 <__hexnan>:
 8018cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cf4:	680b      	ldr	r3, [r1, #0]
 8018cf6:	6801      	ldr	r1, [r0, #0]
 8018cf8:	115e      	asrs	r6, r3, #5
 8018cfa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018cfe:	f013 031f 	ands.w	r3, r3, #31
 8018d02:	b087      	sub	sp, #28
 8018d04:	bf18      	it	ne
 8018d06:	3604      	addne	r6, #4
 8018d08:	2500      	movs	r5, #0
 8018d0a:	1f37      	subs	r7, r6, #4
 8018d0c:	4682      	mov	sl, r0
 8018d0e:	4690      	mov	r8, r2
 8018d10:	9301      	str	r3, [sp, #4]
 8018d12:	f846 5c04 	str.w	r5, [r6, #-4]
 8018d16:	46b9      	mov	r9, r7
 8018d18:	463c      	mov	r4, r7
 8018d1a:	9502      	str	r5, [sp, #8]
 8018d1c:	46ab      	mov	fp, r5
 8018d1e:	784a      	ldrb	r2, [r1, #1]
 8018d20:	1c4b      	adds	r3, r1, #1
 8018d22:	9303      	str	r3, [sp, #12]
 8018d24:	b342      	cbz	r2, 8018d78 <__hexnan+0x88>
 8018d26:	4610      	mov	r0, r2
 8018d28:	9105      	str	r1, [sp, #20]
 8018d2a:	9204      	str	r2, [sp, #16]
 8018d2c:	f7ff fd76 	bl	801881c <__hexdig_fun>
 8018d30:	2800      	cmp	r0, #0
 8018d32:	d14f      	bne.n	8018dd4 <__hexnan+0xe4>
 8018d34:	9a04      	ldr	r2, [sp, #16]
 8018d36:	9905      	ldr	r1, [sp, #20]
 8018d38:	2a20      	cmp	r2, #32
 8018d3a:	d818      	bhi.n	8018d6e <__hexnan+0x7e>
 8018d3c:	9b02      	ldr	r3, [sp, #8]
 8018d3e:	459b      	cmp	fp, r3
 8018d40:	dd13      	ble.n	8018d6a <__hexnan+0x7a>
 8018d42:	454c      	cmp	r4, r9
 8018d44:	d206      	bcs.n	8018d54 <__hexnan+0x64>
 8018d46:	2d07      	cmp	r5, #7
 8018d48:	dc04      	bgt.n	8018d54 <__hexnan+0x64>
 8018d4a:	462a      	mov	r2, r5
 8018d4c:	4649      	mov	r1, r9
 8018d4e:	4620      	mov	r0, r4
 8018d50:	f7ff ffa8 	bl	8018ca4 <L_shift>
 8018d54:	4544      	cmp	r4, r8
 8018d56:	d950      	bls.n	8018dfa <__hexnan+0x10a>
 8018d58:	2300      	movs	r3, #0
 8018d5a:	f1a4 0904 	sub.w	r9, r4, #4
 8018d5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8018d62:	f8cd b008 	str.w	fp, [sp, #8]
 8018d66:	464c      	mov	r4, r9
 8018d68:	461d      	mov	r5, r3
 8018d6a:	9903      	ldr	r1, [sp, #12]
 8018d6c:	e7d7      	b.n	8018d1e <__hexnan+0x2e>
 8018d6e:	2a29      	cmp	r2, #41	; 0x29
 8018d70:	d155      	bne.n	8018e1e <__hexnan+0x12e>
 8018d72:	3102      	adds	r1, #2
 8018d74:	f8ca 1000 	str.w	r1, [sl]
 8018d78:	f1bb 0f00 	cmp.w	fp, #0
 8018d7c:	d04f      	beq.n	8018e1e <__hexnan+0x12e>
 8018d7e:	454c      	cmp	r4, r9
 8018d80:	d206      	bcs.n	8018d90 <__hexnan+0xa0>
 8018d82:	2d07      	cmp	r5, #7
 8018d84:	dc04      	bgt.n	8018d90 <__hexnan+0xa0>
 8018d86:	462a      	mov	r2, r5
 8018d88:	4649      	mov	r1, r9
 8018d8a:	4620      	mov	r0, r4
 8018d8c:	f7ff ff8a 	bl	8018ca4 <L_shift>
 8018d90:	4544      	cmp	r4, r8
 8018d92:	d934      	bls.n	8018dfe <__hexnan+0x10e>
 8018d94:	f1a8 0204 	sub.w	r2, r8, #4
 8018d98:	4623      	mov	r3, r4
 8018d9a:	f853 1b04 	ldr.w	r1, [r3], #4
 8018d9e:	f842 1f04 	str.w	r1, [r2, #4]!
 8018da2:	429f      	cmp	r7, r3
 8018da4:	d2f9      	bcs.n	8018d9a <__hexnan+0xaa>
 8018da6:	1b3b      	subs	r3, r7, r4
 8018da8:	f023 0303 	bic.w	r3, r3, #3
 8018dac:	3304      	adds	r3, #4
 8018dae:	3e03      	subs	r6, #3
 8018db0:	3401      	adds	r4, #1
 8018db2:	42a6      	cmp	r6, r4
 8018db4:	bf38      	it	cc
 8018db6:	2304      	movcc	r3, #4
 8018db8:	4443      	add	r3, r8
 8018dba:	2200      	movs	r2, #0
 8018dbc:	f843 2b04 	str.w	r2, [r3], #4
 8018dc0:	429f      	cmp	r7, r3
 8018dc2:	d2fb      	bcs.n	8018dbc <__hexnan+0xcc>
 8018dc4:	683b      	ldr	r3, [r7, #0]
 8018dc6:	b91b      	cbnz	r3, 8018dd0 <__hexnan+0xe0>
 8018dc8:	4547      	cmp	r7, r8
 8018dca:	d126      	bne.n	8018e1a <__hexnan+0x12a>
 8018dcc:	2301      	movs	r3, #1
 8018dce:	603b      	str	r3, [r7, #0]
 8018dd0:	2005      	movs	r0, #5
 8018dd2:	e025      	b.n	8018e20 <__hexnan+0x130>
 8018dd4:	3501      	adds	r5, #1
 8018dd6:	2d08      	cmp	r5, #8
 8018dd8:	f10b 0b01 	add.w	fp, fp, #1
 8018ddc:	dd06      	ble.n	8018dec <__hexnan+0xfc>
 8018dde:	4544      	cmp	r4, r8
 8018de0:	d9c3      	bls.n	8018d6a <__hexnan+0x7a>
 8018de2:	2300      	movs	r3, #0
 8018de4:	f844 3c04 	str.w	r3, [r4, #-4]
 8018de8:	2501      	movs	r5, #1
 8018dea:	3c04      	subs	r4, #4
 8018dec:	6822      	ldr	r2, [r4, #0]
 8018dee:	f000 000f 	and.w	r0, r0, #15
 8018df2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018df6:	6020      	str	r0, [r4, #0]
 8018df8:	e7b7      	b.n	8018d6a <__hexnan+0x7a>
 8018dfa:	2508      	movs	r5, #8
 8018dfc:	e7b5      	b.n	8018d6a <__hexnan+0x7a>
 8018dfe:	9b01      	ldr	r3, [sp, #4]
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d0df      	beq.n	8018dc4 <__hexnan+0xd4>
 8018e04:	f1c3 0320 	rsb	r3, r3, #32
 8018e08:	f04f 32ff 	mov.w	r2, #4294967295
 8018e0c:	40da      	lsrs	r2, r3
 8018e0e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8018e12:	4013      	ands	r3, r2
 8018e14:	f846 3c04 	str.w	r3, [r6, #-4]
 8018e18:	e7d4      	b.n	8018dc4 <__hexnan+0xd4>
 8018e1a:	3f04      	subs	r7, #4
 8018e1c:	e7d2      	b.n	8018dc4 <__hexnan+0xd4>
 8018e1e:	2004      	movs	r0, #4
 8018e20:	b007      	add	sp, #28
 8018e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e26 <__ascii_mbtowc>:
 8018e26:	b082      	sub	sp, #8
 8018e28:	b901      	cbnz	r1, 8018e2c <__ascii_mbtowc+0x6>
 8018e2a:	a901      	add	r1, sp, #4
 8018e2c:	b142      	cbz	r2, 8018e40 <__ascii_mbtowc+0x1a>
 8018e2e:	b14b      	cbz	r3, 8018e44 <__ascii_mbtowc+0x1e>
 8018e30:	7813      	ldrb	r3, [r2, #0]
 8018e32:	600b      	str	r3, [r1, #0]
 8018e34:	7812      	ldrb	r2, [r2, #0]
 8018e36:	1e10      	subs	r0, r2, #0
 8018e38:	bf18      	it	ne
 8018e3a:	2001      	movne	r0, #1
 8018e3c:	b002      	add	sp, #8
 8018e3e:	4770      	bx	lr
 8018e40:	4610      	mov	r0, r2
 8018e42:	e7fb      	b.n	8018e3c <__ascii_mbtowc+0x16>
 8018e44:	f06f 0001 	mvn.w	r0, #1
 8018e48:	e7f8      	b.n	8018e3c <__ascii_mbtowc+0x16>

08018e4a <_realloc_r>:
 8018e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e4e:	4680      	mov	r8, r0
 8018e50:	4614      	mov	r4, r2
 8018e52:	460e      	mov	r6, r1
 8018e54:	b921      	cbnz	r1, 8018e60 <_realloc_r+0x16>
 8018e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018e5a:	4611      	mov	r1, r2
 8018e5c:	f7fd baba 	b.w	80163d4 <_malloc_r>
 8018e60:	b92a      	cbnz	r2, 8018e6e <_realloc_r+0x24>
 8018e62:	f7fd fa43 	bl	80162ec <_free_r>
 8018e66:	4625      	mov	r5, r4
 8018e68:	4628      	mov	r0, r5
 8018e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e6e:	f000 f8b6 	bl	8018fde <_malloc_usable_size_r>
 8018e72:	4284      	cmp	r4, r0
 8018e74:	4607      	mov	r7, r0
 8018e76:	d802      	bhi.n	8018e7e <_realloc_r+0x34>
 8018e78:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018e7c:	d812      	bhi.n	8018ea4 <_realloc_r+0x5a>
 8018e7e:	4621      	mov	r1, r4
 8018e80:	4640      	mov	r0, r8
 8018e82:	f7fd faa7 	bl	80163d4 <_malloc_r>
 8018e86:	4605      	mov	r5, r0
 8018e88:	2800      	cmp	r0, #0
 8018e8a:	d0ed      	beq.n	8018e68 <_realloc_r+0x1e>
 8018e8c:	42bc      	cmp	r4, r7
 8018e8e:	4622      	mov	r2, r4
 8018e90:	4631      	mov	r1, r6
 8018e92:	bf28      	it	cs
 8018e94:	463a      	movcs	r2, r7
 8018e96:	f7fc fb9a 	bl	80155ce <memcpy>
 8018e9a:	4631      	mov	r1, r6
 8018e9c:	4640      	mov	r0, r8
 8018e9e:	f7fd fa25 	bl	80162ec <_free_r>
 8018ea2:	e7e1      	b.n	8018e68 <_realloc_r+0x1e>
 8018ea4:	4635      	mov	r5, r6
 8018ea6:	e7df      	b.n	8018e68 <_realloc_r+0x1e>

08018ea8 <_strtoul_l.constprop.0>:
 8018ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018eac:	4f36      	ldr	r7, [pc, #216]	; (8018f88 <_strtoul_l.constprop.0+0xe0>)
 8018eae:	4686      	mov	lr, r0
 8018eb0:	460d      	mov	r5, r1
 8018eb2:	4628      	mov	r0, r5
 8018eb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018eb8:	5d3e      	ldrb	r6, [r7, r4]
 8018eba:	f016 0608 	ands.w	r6, r6, #8
 8018ebe:	d1f8      	bne.n	8018eb2 <_strtoul_l.constprop.0+0xa>
 8018ec0:	2c2d      	cmp	r4, #45	; 0x2d
 8018ec2:	d130      	bne.n	8018f26 <_strtoul_l.constprop.0+0x7e>
 8018ec4:	782c      	ldrb	r4, [r5, #0]
 8018ec6:	2601      	movs	r6, #1
 8018ec8:	1c85      	adds	r5, r0, #2
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d057      	beq.n	8018f7e <_strtoul_l.constprop.0+0xd6>
 8018ece:	2b10      	cmp	r3, #16
 8018ed0:	d109      	bne.n	8018ee6 <_strtoul_l.constprop.0+0x3e>
 8018ed2:	2c30      	cmp	r4, #48	; 0x30
 8018ed4:	d107      	bne.n	8018ee6 <_strtoul_l.constprop.0+0x3e>
 8018ed6:	7828      	ldrb	r0, [r5, #0]
 8018ed8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8018edc:	2858      	cmp	r0, #88	; 0x58
 8018ede:	d149      	bne.n	8018f74 <_strtoul_l.constprop.0+0xcc>
 8018ee0:	786c      	ldrb	r4, [r5, #1]
 8018ee2:	2310      	movs	r3, #16
 8018ee4:	3502      	adds	r5, #2
 8018ee6:	f04f 38ff 	mov.w	r8, #4294967295
 8018eea:	2700      	movs	r7, #0
 8018eec:	fbb8 f8f3 	udiv	r8, r8, r3
 8018ef0:	fb03 f908 	mul.w	r9, r3, r8
 8018ef4:	ea6f 0909 	mvn.w	r9, r9
 8018ef8:	4638      	mov	r0, r7
 8018efa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018efe:	f1bc 0f09 	cmp.w	ip, #9
 8018f02:	d815      	bhi.n	8018f30 <_strtoul_l.constprop.0+0x88>
 8018f04:	4664      	mov	r4, ip
 8018f06:	42a3      	cmp	r3, r4
 8018f08:	dd23      	ble.n	8018f52 <_strtoul_l.constprop.0+0xaa>
 8018f0a:	f1b7 3fff 	cmp.w	r7, #4294967295
 8018f0e:	d007      	beq.n	8018f20 <_strtoul_l.constprop.0+0x78>
 8018f10:	4580      	cmp	r8, r0
 8018f12:	d31b      	bcc.n	8018f4c <_strtoul_l.constprop.0+0xa4>
 8018f14:	d101      	bne.n	8018f1a <_strtoul_l.constprop.0+0x72>
 8018f16:	45a1      	cmp	r9, r4
 8018f18:	db18      	blt.n	8018f4c <_strtoul_l.constprop.0+0xa4>
 8018f1a:	fb00 4003 	mla	r0, r0, r3, r4
 8018f1e:	2701      	movs	r7, #1
 8018f20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018f24:	e7e9      	b.n	8018efa <_strtoul_l.constprop.0+0x52>
 8018f26:	2c2b      	cmp	r4, #43	; 0x2b
 8018f28:	bf04      	itt	eq
 8018f2a:	782c      	ldrbeq	r4, [r5, #0]
 8018f2c:	1c85      	addeq	r5, r0, #2
 8018f2e:	e7cc      	b.n	8018eca <_strtoul_l.constprop.0+0x22>
 8018f30:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018f34:	f1bc 0f19 	cmp.w	ip, #25
 8018f38:	d801      	bhi.n	8018f3e <_strtoul_l.constprop.0+0x96>
 8018f3a:	3c37      	subs	r4, #55	; 0x37
 8018f3c:	e7e3      	b.n	8018f06 <_strtoul_l.constprop.0+0x5e>
 8018f3e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8018f42:	f1bc 0f19 	cmp.w	ip, #25
 8018f46:	d804      	bhi.n	8018f52 <_strtoul_l.constprop.0+0xaa>
 8018f48:	3c57      	subs	r4, #87	; 0x57
 8018f4a:	e7dc      	b.n	8018f06 <_strtoul_l.constprop.0+0x5e>
 8018f4c:	f04f 37ff 	mov.w	r7, #4294967295
 8018f50:	e7e6      	b.n	8018f20 <_strtoul_l.constprop.0+0x78>
 8018f52:	1c7b      	adds	r3, r7, #1
 8018f54:	d106      	bne.n	8018f64 <_strtoul_l.constprop.0+0xbc>
 8018f56:	2322      	movs	r3, #34	; 0x22
 8018f58:	f8ce 3000 	str.w	r3, [lr]
 8018f5c:	4638      	mov	r0, r7
 8018f5e:	b932      	cbnz	r2, 8018f6e <_strtoul_l.constprop.0+0xc6>
 8018f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f64:	b106      	cbz	r6, 8018f68 <_strtoul_l.constprop.0+0xc0>
 8018f66:	4240      	negs	r0, r0
 8018f68:	2a00      	cmp	r2, #0
 8018f6a:	d0f9      	beq.n	8018f60 <_strtoul_l.constprop.0+0xb8>
 8018f6c:	b107      	cbz	r7, 8018f70 <_strtoul_l.constprop.0+0xc8>
 8018f6e:	1e69      	subs	r1, r5, #1
 8018f70:	6011      	str	r1, [r2, #0]
 8018f72:	e7f5      	b.n	8018f60 <_strtoul_l.constprop.0+0xb8>
 8018f74:	2430      	movs	r4, #48	; 0x30
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d1b5      	bne.n	8018ee6 <_strtoul_l.constprop.0+0x3e>
 8018f7a:	2308      	movs	r3, #8
 8018f7c:	e7b3      	b.n	8018ee6 <_strtoul_l.constprop.0+0x3e>
 8018f7e:	2c30      	cmp	r4, #48	; 0x30
 8018f80:	d0a9      	beq.n	8018ed6 <_strtoul_l.constprop.0+0x2e>
 8018f82:	230a      	movs	r3, #10
 8018f84:	e7af      	b.n	8018ee6 <_strtoul_l.constprop.0+0x3e>
 8018f86:	bf00      	nop
 8018f88:	0801c2d9 	.word	0x0801c2d9

08018f8c <_strtoul_r>:
 8018f8c:	f7ff bf8c 	b.w	8018ea8 <_strtoul_l.constprop.0>

08018f90 <__ascii_wctomb>:
 8018f90:	b149      	cbz	r1, 8018fa6 <__ascii_wctomb+0x16>
 8018f92:	2aff      	cmp	r2, #255	; 0xff
 8018f94:	bf85      	ittet	hi
 8018f96:	238a      	movhi	r3, #138	; 0x8a
 8018f98:	6003      	strhi	r3, [r0, #0]
 8018f9a:	700a      	strbls	r2, [r1, #0]
 8018f9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8018fa0:	bf98      	it	ls
 8018fa2:	2001      	movls	r0, #1
 8018fa4:	4770      	bx	lr
 8018fa6:	4608      	mov	r0, r1
 8018fa8:	4770      	bx	lr
	...

08018fac <fiprintf>:
 8018fac:	b40e      	push	{r1, r2, r3}
 8018fae:	b503      	push	{r0, r1, lr}
 8018fb0:	4601      	mov	r1, r0
 8018fb2:	ab03      	add	r3, sp, #12
 8018fb4:	4805      	ldr	r0, [pc, #20]	; (8018fcc <fiprintf+0x20>)
 8018fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8018fba:	6800      	ldr	r0, [r0, #0]
 8018fbc:	9301      	str	r3, [sp, #4]
 8018fbe:	f000 f83f 	bl	8019040 <_vfiprintf_r>
 8018fc2:	b002      	add	sp, #8
 8018fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8018fc8:	b003      	add	sp, #12
 8018fca:	4770      	bx	lr
 8018fcc:	20000070 	.word	0x20000070

08018fd0 <abort>:
 8018fd0:	b508      	push	{r3, lr}
 8018fd2:	2006      	movs	r0, #6
 8018fd4:	f000 fa0c 	bl	80193f0 <raise>
 8018fd8:	2001      	movs	r0, #1
 8018fda:	f7ed fe09 	bl	8006bf0 <_exit>

08018fde <_malloc_usable_size_r>:
 8018fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018fe2:	1f18      	subs	r0, r3, #4
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	bfbc      	itt	lt
 8018fe8:	580b      	ldrlt	r3, [r1, r0]
 8018fea:	18c0      	addlt	r0, r0, r3
 8018fec:	4770      	bx	lr

08018fee <__sfputc_r>:
 8018fee:	6893      	ldr	r3, [r2, #8]
 8018ff0:	3b01      	subs	r3, #1
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	b410      	push	{r4}
 8018ff6:	6093      	str	r3, [r2, #8]
 8018ff8:	da08      	bge.n	801900c <__sfputc_r+0x1e>
 8018ffa:	6994      	ldr	r4, [r2, #24]
 8018ffc:	42a3      	cmp	r3, r4
 8018ffe:	db01      	blt.n	8019004 <__sfputc_r+0x16>
 8019000:	290a      	cmp	r1, #10
 8019002:	d103      	bne.n	801900c <__sfputc_r+0x1e>
 8019004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019008:	f000 b934 	b.w	8019274 <__swbuf_r>
 801900c:	6813      	ldr	r3, [r2, #0]
 801900e:	1c58      	adds	r0, r3, #1
 8019010:	6010      	str	r0, [r2, #0]
 8019012:	7019      	strb	r1, [r3, #0]
 8019014:	4608      	mov	r0, r1
 8019016:	f85d 4b04 	ldr.w	r4, [sp], #4
 801901a:	4770      	bx	lr

0801901c <__sfputs_r>:
 801901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801901e:	4606      	mov	r6, r0
 8019020:	460f      	mov	r7, r1
 8019022:	4614      	mov	r4, r2
 8019024:	18d5      	adds	r5, r2, r3
 8019026:	42ac      	cmp	r4, r5
 8019028:	d101      	bne.n	801902e <__sfputs_r+0x12>
 801902a:	2000      	movs	r0, #0
 801902c:	e007      	b.n	801903e <__sfputs_r+0x22>
 801902e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019032:	463a      	mov	r2, r7
 8019034:	4630      	mov	r0, r6
 8019036:	f7ff ffda 	bl	8018fee <__sfputc_r>
 801903a:	1c43      	adds	r3, r0, #1
 801903c:	d1f3      	bne.n	8019026 <__sfputs_r+0xa>
 801903e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019040 <_vfiprintf_r>:
 8019040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019044:	460d      	mov	r5, r1
 8019046:	b09d      	sub	sp, #116	; 0x74
 8019048:	4614      	mov	r4, r2
 801904a:	4698      	mov	r8, r3
 801904c:	4606      	mov	r6, r0
 801904e:	b118      	cbz	r0, 8019058 <_vfiprintf_r+0x18>
 8019050:	6a03      	ldr	r3, [r0, #32]
 8019052:	b90b      	cbnz	r3, 8019058 <_vfiprintf_r+0x18>
 8019054:	f7fc f90c 	bl	8015270 <__sinit>
 8019058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801905a:	07d9      	lsls	r1, r3, #31
 801905c:	d405      	bmi.n	801906a <_vfiprintf_r+0x2a>
 801905e:	89ab      	ldrh	r3, [r5, #12]
 8019060:	059a      	lsls	r2, r3, #22
 8019062:	d402      	bmi.n	801906a <_vfiprintf_r+0x2a>
 8019064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019066:	f7fc fab0 	bl	80155ca <__retarget_lock_acquire_recursive>
 801906a:	89ab      	ldrh	r3, [r5, #12]
 801906c:	071b      	lsls	r3, r3, #28
 801906e:	d501      	bpl.n	8019074 <_vfiprintf_r+0x34>
 8019070:	692b      	ldr	r3, [r5, #16]
 8019072:	b99b      	cbnz	r3, 801909c <_vfiprintf_r+0x5c>
 8019074:	4629      	mov	r1, r5
 8019076:	4630      	mov	r0, r6
 8019078:	f000 f93a 	bl	80192f0 <__swsetup_r>
 801907c:	b170      	cbz	r0, 801909c <_vfiprintf_r+0x5c>
 801907e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019080:	07dc      	lsls	r4, r3, #31
 8019082:	d504      	bpl.n	801908e <_vfiprintf_r+0x4e>
 8019084:	f04f 30ff 	mov.w	r0, #4294967295
 8019088:	b01d      	add	sp, #116	; 0x74
 801908a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801908e:	89ab      	ldrh	r3, [r5, #12]
 8019090:	0598      	lsls	r0, r3, #22
 8019092:	d4f7      	bmi.n	8019084 <_vfiprintf_r+0x44>
 8019094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019096:	f7fc fa99 	bl	80155cc <__retarget_lock_release_recursive>
 801909a:	e7f3      	b.n	8019084 <_vfiprintf_r+0x44>
 801909c:	2300      	movs	r3, #0
 801909e:	9309      	str	r3, [sp, #36]	; 0x24
 80190a0:	2320      	movs	r3, #32
 80190a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80190a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80190aa:	2330      	movs	r3, #48	; 0x30
 80190ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019260 <_vfiprintf_r+0x220>
 80190b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80190b4:	f04f 0901 	mov.w	r9, #1
 80190b8:	4623      	mov	r3, r4
 80190ba:	469a      	mov	sl, r3
 80190bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80190c0:	b10a      	cbz	r2, 80190c6 <_vfiprintf_r+0x86>
 80190c2:	2a25      	cmp	r2, #37	; 0x25
 80190c4:	d1f9      	bne.n	80190ba <_vfiprintf_r+0x7a>
 80190c6:	ebba 0b04 	subs.w	fp, sl, r4
 80190ca:	d00b      	beq.n	80190e4 <_vfiprintf_r+0xa4>
 80190cc:	465b      	mov	r3, fp
 80190ce:	4622      	mov	r2, r4
 80190d0:	4629      	mov	r1, r5
 80190d2:	4630      	mov	r0, r6
 80190d4:	f7ff ffa2 	bl	801901c <__sfputs_r>
 80190d8:	3001      	adds	r0, #1
 80190da:	f000 80a9 	beq.w	8019230 <_vfiprintf_r+0x1f0>
 80190de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80190e0:	445a      	add	r2, fp
 80190e2:	9209      	str	r2, [sp, #36]	; 0x24
 80190e4:	f89a 3000 	ldrb.w	r3, [sl]
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	f000 80a1 	beq.w	8019230 <_vfiprintf_r+0x1f0>
 80190ee:	2300      	movs	r3, #0
 80190f0:	f04f 32ff 	mov.w	r2, #4294967295
 80190f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80190f8:	f10a 0a01 	add.w	sl, sl, #1
 80190fc:	9304      	str	r3, [sp, #16]
 80190fe:	9307      	str	r3, [sp, #28]
 8019100:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019104:	931a      	str	r3, [sp, #104]	; 0x68
 8019106:	4654      	mov	r4, sl
 8019108:	2205      	movs	r2, #5
 801910a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801910e:	4854      	ldr	r0, [pc, #336]	; (8019260 <_vfiprintf_r+0x220>)
 8019110:	f7e7 f886 	bl	8000220 <memchr>
 8019114:	9a04      	ldr	r2, [sp, #16]
 8019116:	b9d8      	cbnz	r0, 8019150 <_vfiprintf_r+0x110>
 8019118:	06d1      	lsls	r1, r2, #27
 801911a:	bf44      	itt	mi
 801911c:	2320      	movmi	r3, #32
 801911e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019122:	0713      	lsls	r3, r2, #28
 8019124:	bf44      	itt	mi
 8019126:	232b      	movmi	r3, #43	; 0x2b
 8019128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801912c:	f89a 3000 	ldrb.w	r3, [sl]
 8019130:	2b2a      	cmp	r3, #42	; 0x2a
 8019132:	d015      	beq.n	8019160 <_vfiprintf_r+0x120>
 8019134:	9a07      	ldr	r2, [sp, #28]
 8019136:	4654      	mov	r4, sl
 8019138:	2000      	movs	r0, #0
 801913a:	f04f 0c0a 	mov.w	ip, #10
 801913e:	4621      	mov	r1, r4
 8019140:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019144:	3b30      	subs	r3, #48	; 0x30
 8019146:	2b09      	cmp	r3, #9
 8019148:	d94d      	bls.n	80191e6 <_vfiprintf_r+0x1a6>
 801914a:	b1b0      	cbz	r0, 801917a <_vfiprintf_r+0x13a>
 801914c:	9207      	str	r2, [sp, #28]
 801914e:	e014      	b.n	801917a <_vfiprintf_r+0x13a>
 8019150:	eba0 0308 	sub.w	r3, r0, r8
 8019154:	fa09 f303 	lsl.w	r3, r9, r3
 8019158:	4313      	orrs	r3, r2
 801915a:	9304      	str	r3, [sp, #16]
 801915c:	46a2      	mov	sl, r4
 801915e:	e7d2      	b.n	8019106 <_vfiprintf_r+0xc6>
 8019160:	9b03      	ldr	r3, [sp, #12]
 8019162:	1d19      	adds	r1, r3, #4
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	9103      	str	r1, [sp, #12]
 8019168:	2b00      	cmp	r3, #0
 801916a:	bfbb      	ittet	lt
 801916c:	425b      	neglt	r3, r3
 801916e:	f042 0202 	orrlt.w	r2, r2, #2
 8019172:	9307      	strge	r3, [sp, #28]
 8019174:	9307      	strlt	r3, [sp, #28]
 8019176:	bfb8      	it	lt
 8019178:	9204      	strlt	r2, [sp, #16]
 801917a:	7823      	ldrb	r3, [r4, #0]
 801917c:	2b2e      	cmp	r3, #46	; 0x2e
 801917e:	d10c      	bne.n	801919a <_vfiprintf_r+0x15a>
 8019180:	7863      	ldrb	r3, [r4, #1]
 8019182:	2b2a      	cmp	r3, #42	; 0x2a
 8019184:	d134      	bne.n	80191f0 <_vfiprintf_r+0x1b0>
 8019186:	9b03      	ldr	r3, [sp, #12]
 8019188:	1d1a      	adds	r2, r3, #4
 801918a:	681b      	ldr	r3, [r3, #0]
 801918c:	9203      	str	r2, [sp, #12]
 801918e:	2b00      	cmp	r3, #0
 8019190:	bfb8      	it	lt
 8019192:	f04f 33ff 	movlt.w	r3, #4294967295
 8019196:	3402      	adds	r4, #2
 8019198:	9305      	str	r3, [sp, #20]
 801919a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019270 <_vfiprintf_r+0x230>
 801919e:	7821      	ldrb	r1, [r4, #0]
 80191a0:	2203      	movs	r2, #3
 80191a2:	4650      	mov	r0, sl
 80191a4:	f7e7 f83c 	bl	8000220 <memchr>
 80191a8:	b138      	cbz	r0, 80191ba <_vfiprintf_r+0x17a>
 80191aa:	9b04      	ldr	r3, [sp, #16]
 80191ac:	eba0 000a 	sub.w	r0, r0, sl
 80191b0:	2240      	movs	r2, #64	; 0x40
 80191b2:	4082      	lsls	r2, r0
 80191b4:	4313      	orrs	r3, r2
 80191b6:	3401      	adds	r4, #1
 80191b8:	9304      	str	r3, [sp, #16]
 80191ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80191be:	4829      	ldr	r0, [pc, #164]	; (8019264 <_vfiprintf_r+0x224>)
 80191c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80191c4:	2206      	movs	r2, #6
 80191c6:	f7e7 f82b 	bl	8000220 <memchr>
 80191ca:	2800      	cmp	r0, #0
 80191cc:	d03f      	beq.n	801924e <_vfiprintf_r+0x20e>
 80191ce:	4b26      	ldr	r3, [pc, #152]	; (8019268 <_vfiprintf_r+0x228>)
 80191d0:	bb1b      	cbnz	r3, 801921a <_vfiprintf_r+0x1da>
 80191d2:	9b03      	ldr	r3, [sp, #12]
 80191d4:	3307      	adds	r3, #7
 80191d6:	f023 0307 	bic.w	r3, r3, #7
 80191da:	3308      	adds	r3, #8
 80191dc:	9303      	str	r3, [sp, #12]
 80191de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191e0:	443b      	add	r3, r7
 80191e2:	9309      	str	r3, [sp, #36]	; 0x24
 80191e4:	e768      	b.n	80190b8 <_vfiprintf_r+0x78>
 80191e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80191ea:	460c      	mov	r4, r1
 80191ec:	2001      	movs	r0, #1
 80191ee:	e7a6      	b.n	801913e <_vfiprintf_r+0xfe>
 80191f0:	2300      	movs	r3, #0
 80191f2:	3401      	adds	r4, #1
 80191f4:	9305      	str	r3, [sp, #20]
 80191f6:	4619      	mov	r1, r3
 80191f8:	f04f 0c0a 	mov.w	ip, #10
 80191fc:	4620      	mov	r0, r4
 80191fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019202:	3a30      	subs	r2, #48	; 0x30
 8019204:	2a09      	cmp	r2, #9
 8019206:	d903      	bls.n	8019210 <_vfiprintf_r+0x1d0>
 8019208:	2b00      	cmp	r3, #0
 801920a:	d0c6      	beq.n	801919a <_vfiprintf_r+0x15a>
 801920c:	9105      	str	r1, [sp, #20]
 801920e:	e7c4      	b.n	801919a <_vfiprintf_r+0x15a>
 8019210:	fb0c 2101 	mla	r1, ip, r1, r2
 8019214:	4604      	mov	r4, r0
 8019216:	2301      	movs	r3, #1
 8019218:	e7f0      	b.n	80191fc <_vfiprintf_r+0x1bc>
 801921a:	ab03      	add	r3, sp, #12
 801921c:	9300      	str	r3, [sp, #0]
 801921e:	462a      	mov	r2, r5
 8019220:	4b12      	ldr	r3, [pc, #72]	; (801926c <_vfiprintf_r+0x22c>)
 8019222:	a904      	add	r1, sp, #16
 8019224:	4630      	mov	r0, r6
 8019226:	f7fb f9c1 	bl	80145ac <_printf_float>
 801922a:	4607      	mov	r7, r0
 801922c:	1c78      	adds	r0, r7, #1
 801922e:	d1d6      	bne.n	80191de <_vfiprintf_r+0x19e>
 8019230:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019232:	07d9      	lsls	r1, r3, #31
 8019234:	d405      	bmi.n	8019242 <_vfiprintf_r+0x202>
 8019236:	89ab      	ldrh	r3, [r5, #12]
 8019238:	059a      	lsls	r2, r3, #22
 801923a:	d402      	bmi.n	8019242 <_vfiprintf_r+0x202>
 801923c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801923e:	f7fc f9c5 	bl	80155cc <__retarget_lock_release_recursive>
 8019242:	89ab      	ldrh	r3, [r5, #12]
 8019244:	065b      	lsls	r3, r3, #25
 8019246:	f53f af1d 	bmi.w	8019084 <_vfiprintf_r+0x44>
 801924a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801924c:	e71c      	b.n	8019088 <_vfiprintf_r+0x48>
 801924e:	ab03      	add	r3, sp, #12
 8019250:	9300      	str	r3, [sp, #0]
 8019252:	462a      	mov	r2, r5
 8019254:	4b05      	ldr	r3, [pc, #20]	; (801926c <_vfiprintf_r+0x22c>)
 8019256:	a904      	add	r1, sp, #16
 8019258:	4630      	mov	r0, r6
 801925a:	f7fb fc4b 	bl	8014af4 <_printf_i>
 801925e:	e7e4      	b.n	801922a <_vfiprintf_r+0x1ea>
 8019260:	0801c3d9 	.word	0x0801c3d9
 8019264:	0801c3e3 	.word	0x0801c3e3
 8019268:	080145ad 	.word	0x080145ad
 801926c:	0801901d 	.word	0x0801901d
 8019270:	0801c3df 	.word	0x0801c3df

08019274 <__swbuf_r>:
 8019274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019276:	460e      	mov	r6, r1
 8019278:	4614      	mov	r4, r2
 801927a:	4605      	mov	r5, r0
 801927c:	b118      	cbz	r0, 8019286 <__swbuf_r+0x12>
 801927e:	6a03      	ldr	r3, [r0, #32]
 8019280:	b90b      	cbnz	r3, 8019286 <__swbuf_r+0x12>
 8019282:	f7fb fff5 	bl	8015270 <__sinit>
 8019286:	69a3      	ldr	r3, [r4, #24]
 8019288:	60a3      	str	r3, [r4, #8]
 801928a:	89a3      	ldrh	r3, [r4, #12]
 801928c:	071a      	lsls	r2, r3, #28
 801928e:	d525      	bpl.n	80192dc <__swbuf_r+0x68>
 8019290:	6923      	ldr	r3, [r4, #16]
 8019292:	b31b      	cbz	r3, 80192dc <__swbuf_r+0x68>
 8019294:	6823      	ldr	r3, [r4, #0]
 8019296:	6922      	ldr	r2, [r4, #16]
 8019298:	1a98      	subs	r0, r3, r2
 801929a:	6963      	ldr	r3, [r4, #20]
 801929c:	b2f6      	uxtb	r6, r6
 801929e:	4283      	cmp	r3, r0
 80192a0:	4637      	mov	r7, r6
 80192a2:	dc04      	bgt.n	80192ae <__swbuf_r+0x3a>
 80192a4:	4621      	mov	r1, r4
 80192a6:	4628      	mov	r0, r5
 80192a8:	f7ff f962 	bl	8018570 <_fflush_r>
 80192ac:	b9e0      	cbnz	r0, 80192e8 <__swbuf_r+0x74>
 80192ae:	68a3      	ldr	r3, [r4, #8]
 80192b0:	3b01      	subs	r3, #1
 80192b2:	60a3      	str	r3, [r4, #8]
 80192b4:	6823      	ldr	r3, [r4, #0]
 80192b6:	1c5a      	adds	r2, r3, #1
 80192b8:	6022      	str	r2, [r4, #0]
 80192ba:	701e      	strb	r6, [r3, #0]
 80192bc:	6962      	ldr	r2, [r4, #20]
 80192be:	1c43      	adds	r3, r0, #1
 80192c0:	429a      	cmp	r2, r3
 80192c2:	d004      	beq.n	80192ce <__swbuf_r+0x5a>
 80192c4:	89a3      	ldrh	r3, [r4, #12]
 80192c6:	07db      	lsls	r3, r3, #31
 80192c8:	d506      	bpl.n	80192d8 <__swbuf_r+0x64>
 80192ca:	2e0a      	cmp	r6, #10
 80192cc:	d104      	bne.n	80192d8 <__swbuf_r+0x64>
 80192ce:	4621      	mov	r1, r4
 80192d0:	4628      	mov	r0, r5
 80192d2:	f7ff f94d 	bl	8018570 <_fflush_r>
 80192d6:	b938      	cbnz	r0, 80192e8 <__swbuf_r+0x74>
 80192d8:	4638      	mov	r0, r7
 80192da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192dc:	4621      	mov	r1, r4
 80192de:	4628      	mov	r0, r5
 80192e0:	f000 f806 	bl	80192f0 <__swsetup_r>
 80192e4:	2800      	cmp	r0, #0
 80192e6:	d0d5      	beq.n	8019294 <__swbuf_r+0x20>
 80192e8:	f04f 37ff 	mov.w	r7, #4294967295
 80192ec:	e7f4      	b.n	80192d8 <__swbuf_r+0x64>
	...

080192f0 <__swsetup_r>:
 80192f0:	b538      	push	{r3, r4, r5, lr}
 80192f2:	4b2a      	ldr	r3, [pc, #168]	; (801939c <__swsetup_r+0xac>)
 80192f4:	4605      	mov	r5, r0
 80192f6:	6818      	ldr	r0, [r3, #0]
 80192f8:	460c      	mov	r4, r1
 80192fa:	b118      	cbz	r0, 8019304 <__swsetup_r+0x14>
 80192fc:	6a03      	ldr	r3, [r0, #32]
 80192fe:	b90b      	cbnz	r3, 8019304 <__swsetup_r+0x14>
 8019300:	f7fb ffb6 	bl	8015270 <__sinit>
 8019304:	89a3      	ldrh	r3, [r4, #12]
 8019306:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801930a:	0718      	lsls	r0, r3, #28
 801930c:	d422      	bmi.n	8019354 <__swsetup_r+0x64>
 801930e:	06d9      	lsls	r1, r3, #27
 8019310:	d407      	bmi.n	8019322 <__swsetup_r+0x32>
 8019312:	2309      	movs	r3, #9
 8019314:	602b      	str	r3, [r5, #0]
 8019316:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801931a:	81a3      	strh	r3, [r4, #12]
 801931c:	f04f 30ff 	mov.w	r0, #4294967295
 8019320:	e034      	b.n	801938c <__swsetup_r+0x9c>
 8019322:	0758      	lsls	r0, r3, #29
 8019324:	d512      	bpl.n	801934c <__swsetup_r+0x5c>
 8019326:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019328:	b141      	cbz	r1, 801933c <__swsetup_r+0x4c>
 801932a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801932e:	4299      	cmp	r1, r3
 8019330:	d002      	beq.n	8019338 <__swsetup_r+0x48>
 8019332:	4628      	mov	r0, r5
 8019334:	f7fc ffda 	bl	80162ec <_free_r>
 8019338:	2300      	movs	r3, #0
 801933a:	6363      	str	r3, [r4, #52]	; 0x34
 801933c:	89a3      	ldrh	r3, [r4, #12]
 801933e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019342:	81a3      	strh	r3, [r4, #12]
 8019344:	2300      	movs	r3, #0
 8019346:	6063      	str	r3, [r4, #4]
 8019348:	6923      	ldr	r3, [r4, #16]
 801934a:	6023      	str	r3, [r4, #0]
 801934c:	89a3      	ldrh	r3, [r4, #12]
 801934e:	f043 0308 	orr.w	r3, r3, #8
 8019352:	81a3      	strh	r3, [r4, #12]
 8019354:	6923      	ldr	r3, [r4, #16]
 8019356:	b94b      	cbnz	r3, 801936c <__swsetup_r+0x7c>
 8019358:	89a3      	ldrh	r3, [r4, #12]
 801935a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801935e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019362:	d003      	beq.n	801936c <__swsetup_r+0x7c>
 8019364:	4621      	mov	r1, r4
 8019366:	4628      	mov	r0, r5
 8019368:	f000 f884 	bl	8019474 <__smakebuf_r>
 801936c:	89a0      	ldrh	r0, [r4, #12]
 801936e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019372:	f010 0301 	ands.w	r3, r0, #1
 8019376:	d00a      	beq.n	801938e <__swsetup_r+0x9e>
 8019378:	2300      	movs	r3, #0
 801937a:	60a3      	str	r3, [r4, #8]
 801937c:	6963      	ldr	r3, [r4, #20]
 801937e:	425b      	negs	r3, r3
 8019380:	61a3      	str	r3, [r4, #24]
 8019382:	6923      	ldr	r3, [r4, #16]
 8019384:	b943      	cbnz	r3, 8019398 <__swsetup_r+0xa8>
 8019386:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801938a:	d1c4      	bne.n	8019316 <__swsetup_r+0x26>
 801938c:	bd38      	pop	{r3, r4, r5, pc}
 801938e:	0781      	lsls	r1, r0, #30
 8019390:	bf58      	it	pl
 8019392:	6963      	ldrpl	r3, [r4, #20]
 8019394:	60a3      	str	r3, [r4, #8]
 8019396:	e7f4      	b.n	8019382 <__swsetup_r+0x92>
 8019398:	2000      	movs	r0, #0
 801939a:	e7f7      	b.n	801938c <__swsetup_r+0x9c>
 801939c:	20000070 	.word	0x20000070

080193a0 <_raise_r>:
 80193a0:	291f      	cmp	r1, #31
 80193a2:	b538      	push	{r3, r4, r5, lr}
 80193a4:	4604      	mov	r4, r0
 80193a6:	460d      	mov	r5, r1
 80193a8:	d904      	bls.n	80193b4 <_raise_r+0x14>
 80193aa:	2316      	movs	r3, #22
 80193ac:	6003      	str	r3, [r0, #0]
 80193ae:	f04f 30ff 	mov.w	r0, #4294967295
 80193b2:	bd38      	pop	{r3, r4, r5, pc}
 80193b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80193b6:	b112      	cbz	r2, 80193be <_raise_r+0x1e>
 80193b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80193bc:	b94b      	cbnz	r3, 80193d2 <_raise_r+0x32>
 80193be:	4620      	mov	r0, r4
 80193c0:	f000 f830 	bl	8019424 <_getpid_r>
 80193c4:	462a      	mov	r2, r5
 80193c6:	4601      	mov	r1, r0
 80193c8:	4620      	mov	r0, r4
 80193ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80193ce:	f000 b817 	b.w	8019400 <_kill_r>
 80193d2:	2b01      	cmp	r3, #1
 80193d4:	d00a      	beq.n	80193ec <_raise_r+0x4c>
 80193d6:	1c59      	adds	r1, r3, #1
 80193d8:	d103      	bne.n	80193e2 <_raise_r+0x42>
 80193da:	2316      	movs	r3, #22
 80193dc:	6003      	str	r3, [r0, #0]
 80193de:	2001      	movs	r0, #1
 80193e0:	e7e7      	b.n	80193b2 <_raise_r+0x12>
 80193e2:	2400      	movs	r4, #0
 80193e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80193e8:	4628      	mov	r0, r5
 80193ea:	4798      	blx	r3
 80193ec:	2000      	movs	r0, #0
 80193ee:	e7e0      	b.n	80193b2 <_raise_r+0x12>

080193f0 <raise>:
 80193f0:	4b02      	ldr	r3, [pc, #8]	; (80193fc <raise+0xc>)
 80193f2:	4601      	mov	r1, r0
 80193f4:	6818      	ldr	r0, [r3, #0]
 80193f6:	f7ff bfd3 	b.w	80193a0 <_raise_r>
 80193fa:	bf00      	nop
 80193fc:	20000070 	.word	0x20000070

08019400 <_kill_r>:
 8019400:	b538      	push	{r3, r4, r5, lr}
 8019402:	4d07      	ldr	r5, [pc, #28]	; (8019420 <_kill_r+0x20>)
 8019404:	2300      	movs	r3, #0
 8019406:	4604      	mov	r4, r0
 8019408:	4608      	mov	r0, r1
 801940a:	4611      	mov	r1, r2
 801940c:	602b      	str	r3, [r5, #0]
 801940e:	f7ed fbdf 	bl	8006bd0 <_kill>
 8019412:	1c43      	adds	r3, r0, #1
 8019414:	d102      	bne.n	801941c <_kill_r+0x1c>
 8019416:	682b      	ldr	r3, [r5, #0]
 8019418:	b103      	cbz	r3, 801941c <_kill_r+0x1c>
 801941a:	6023      	str	r3, [r4, #0]
 801941c:	bd38      	pop	{r3, r4, r5, pc}
 801941e:	bf00      	nop
 8019420:	20009048 	.word	0x20009048

08019424 <_getpid_r>:
 8019424:	f7ed bbcc 	b.w	8006bc0 <_getpid>

08019428 <__swhatbuf_r>:
 8019428:	b570      	push	{r4, r5, r6, lr}
 801942a:	460c      	mov	r4, r1
 801942c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019430:	2900      	cmp	r1, #0
 8019432:	b096      	sub	sp, #88	; 0x58
 8019434:	4615      	mov	r5, r2
 8019436:	461e      	mov	r6, r3
 8019438:	da0d      	bge.n	8019456 <__swhatbuf_r+0x2e>
 801943a:	89a3      	ldrh	r3, [r4, #12]
 801943c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019440:	f04f 0100 	mov.w	r1, #0
 8019444:	bf0c      	ite	eq
 8019446:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801944a:	2340      	movne	r3, #64	; 0x40
 801944c:	2000      	movs	r0, #0
 801944e:	6031      	str	r1, [r6, #0]
 8019450:	602b      	str	r3, [r5, #0]
 8019452:	b016      	add	sp, #88	; 0x58
 8019454:	bd70      	pop	{r4, r5, r6, pc}
 8019456:	466a      	mov	r2, sp
 8019458:	f000 f848 	bl	80194ec <_fstat_r>
 801945c:	2800      	cmp	r0, #0
 801945e:	dbec      	blt.n	801943a <__swhatbuf_r+0x12>
 8019460:	9901      	ldr	r1, [sp, #4]
 8019462:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019466:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801946a:	4259      	negs	r1, r3
 801946c:	4159      	adcs	r1, r3
 801946e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019472:	e7eb      	b.n	801944c <__swhatbuf_r+0x24>

08019474 <__smakebuf_r>:
 8019474:	898b      	ldrh	r3, [r1, #12]
 8019476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019478:	079d      	lsls	r5, r3, #30
 801947a:	4606      	mov	r6, r0
 801947c:	460c      	mov	r4, r1
 801947e:	d507      	bpl.n	8019490 <__smakebuf_r+0x1c>
 8019480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019484:	6023      	str	r3, [r4, #0]
 8019486:	6123      	str	r3, [r4, #16]
 8019488:	2301      	movs	r3, #1
 801948a:	6163      	str	r3, [r4, #20]
 801948c:	b002      	add	sp, #8
 801948e:	bd70      	pop	{r4, r5, r6, pc}
 8019490:	ab01      	add	r3, sp, #4
 8019492:	466a      	mov	r2, sp
 8019494:	f7ff ffc8 	bl	8019428 <__swhatbuf_r>
 8019498:	9900      	ldr	r1, [sp, #0]
 801949a:	4605      	mov	r5, r0
 801949c:	4630      	mov	r0, r6
 801949e:	f7fc ff99 	bl	80163d4 <_malloc_r>
 80194a2:	b948      	cbnz	r0, 80194b8 <__smakebuf_r+0x44>
 80194a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80194a8:	059a      	lsls	r2, r3, #22
 80194aa:	d4ef      	bmi.n	801948c <__smakebuf_r+0x18>
 80194ac:	f023 0303 	bic.w	r3, r3, #3
 80194b0:	f043 0302 	orr.w	r3, r3, #2
 80194b4:	81a3      	strh	r3, [r4, #12]
 80194b6:	e7e3      	b.n	8019480 <__smakebuf_r+0xc>
 80194b8:	89a3      	ldrh	r3, [r4, #12]
 80194ba:	6020      	str	r0, [r4, #0]
 80194bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80194c0:	81a3      	strh	r3, [r4, #12]
 80194c2:	9b00      	ldr	r3, [sp, #0]
 80194c4:	6163      	str	r3, [r4, #20]
 80194c6:	9b01      	ldr	r3, [sp, #4]
 80194c8:	6120      	str	r0, [r4, #16]
 80194ca:	b15b      	cbz	r3, 80194e4 <__smakebuf_r+0x70>
 80194cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80194d0:	4630      	mov	r0, r6
 80194d2:	f000 f81d 	bl	8019510 <_isatty_r>
 80194d6:	b128      	cbz	r0, 80194e4 <__smakebuf_r+0x70>
 80194d8:	89a3      	ldrh	r3, [r4, #12]
 80194da:	f023 0303 	bic.w	r3, r3, #3
 80194de:	f043 0301 	orr.w	r3, r3, #1
 80194e2:	81a3      	strh	r3, [r4, #12]
 80194e4:	89a3      	ldrh	r3, [r4, #12]
 80194e6:	431d      	orrs	r5, r3
 80194e8:	81a5      	strh	r5, [r4, #12]
 80194ea:	e7cf      	b.n	801948c <__smakebuf_r+0x18>

080194ec <_fstat_r>:
 80194ec:	b538      	push	{r3, r4, r5, lr}
 80194ee:	4d07      	ldr	r5, [pc, #28]	; (801950c <_fstat_r+0x20>)
 80194f0:	2300      	movs	r3, #0
 80194f2:	4604      	mov	r4, r0
 80194f4:	4608      	mov	r0, r1
 80194f6:	4611      	mov	r1, r2
 80194f8:	602b      	str	r3, [r5, #0]
 80194fa:	f7ed fbc8 	bl	8006c8e <_fstat>
 80194fe:	1c43      	adds	r3, r0, #1
 8019500:	d102      	bne.n	8019508 <_fstat_r+0x1c>
 8019502:	682b      	ldr	r3, [r5, #0]
 8019504:	b103      	cbz	r3, 8019508 <_fstat_r+0x1c>
 8019506:	6023      	str	r3, [r4, #0]
 8019508:	bd38      	pop	{r3, r4, r5, pc}
 801950a:	bf00      	nop
 801950c:	20009048 	.word	0x20009048

08019510 <_isatty_r>:
 8019510:	b538      	push	{r3, r4, r5, lr}
 8019512:	4d06      	ldr	r5, [pc, #24]	; (801952c <_isatty_r+0x1c>)
 8019514:	2300      	movs	r3, #0
 8019516:	4604      	mov	r4, r0
 8019518:	4608      	mov	r0, r1
 801951a:	602b      	str	r3, [r5, #0]
 801951c:	f7ed fbc7 	bl	8006cae <_isatty>
 8019520:	1c43      	adds	r3, r0, #1
 8019522:	d102      	bne.n	801952a <_isatty_r+0x1a>
 8019524:	682b      	ldr	r3, [r5, #0]
 8019526:	b103      	cbz	r3, 801952a <_isatty_r+0x1a>
 8019528:	6023      	str	r3, [r4, #0]
 801952a:	bd38      	pop	{r3, r4, r5, pc}
 801952c:	20009048 	.word	0x20009048

08019530 <pow>:
 8019530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019532:	ed2d 8b02 	vpush	{d8}
 8019536:	eeb0 8a40 	vmov.f32	s16, s0
 801953a:	eef0 8a60 	vmov.f32	s17, s1
 801953e:	ec55 4b11 	vmov	r4, r5, d1
 8019542:	f000 fa75 	bl	8019a30 <__ieee754_pow>
 8019546:	4622      	mov	r2, r4
 8019548:	462b      	mov	r3, r5
 801954a:	4620      	mov	r0, r4
 801954c:	4629      	mov	r1, r5
 801954e:	ec57 6b10 	vmov	r6, r7, d0
 8019552:	f7e7 fb13 	bl	8000b7c <__aeabi_dcmpun>
 8019556:	2800      	cmp	r0, #0
 8019558:	d13b      	bne.n	80195d2 <pow+0xa2>
 801955a:	ec51 0b18 	vmov	r0, r1, d8
 801955e:	2200      	movs	r2, #0
 8019560:	2300      	movs	r3, #0
 8019562:	f7e7 fad9 	bl	8000b18 <__aeabi_dcmpeq>
 8019566:	b1b8      	cbz	r0, 8019598 <pow+0x68>
 8019568:	2200      	movs	r2, #0
 801956a:	2300      	movs	r3, #0
 801956c:	4620      	mov	r0, r4
 801956e:	4629      	mov	r1, r5
 8019570:	f7e7 fad2 	bl	8000b18 <__aeabi_dcmpeq>
 8019574:	2800      	cmp	r0, #0
 8019576:	d146      	bne.n	8019606 <pow+0xd6>
 8019578:	ec45 4b10 	vmov	d0, r4, r5
 801957c:	f000 f960 	bl	8019840 <finite>
 8019580:	b338      	cbz	r0, 80195d2 <pow+0xa2>
 8019582:	2200      	movs	r2, #0
 8019584:	2300      	movs	r3, #0
 8019586:	4620      	mov	r0, r4
 8019588:	4629      	mov	r1, r5
 801958a:	f7e7 facf 	bl	8000b2c <__aeabi_dcmplt>
 801958e:	b300      	cbz	r0, 80195d2 <pow+0xa2>
 8019590:	f7fb fff0 	bl	8015574 <__errno>
 8019594:	2322      	movs	r3, #34	; 0x22
 8019596:	e01b      	b.n	80195d0 <pow+0xa0>
 8019598:	ec47 6b10 	vmov	d0, r6, r7
 801959c:	f000 f950 	bl	8019840 <finite>
 80195a0:	b9e0      	cbnz	r0, 80195dc <pow+0xac>
 80195a2:	eeb0 0a48 	vmov.f32	s0, s16
 80195a6:	eef0 0a68 	vmov.f32	s1, s17
 80195aa:	f000 f949 	bl	8019840 <finite>
 80195ae:	b1a8      	cbz	r0, 80195dc <pow+0xac>
 80195b0:	ec45 4b10 	vmov	d0, r4, r5
 80195b4:	f000 f944 	bl	8019840 <finite>
 80195b8:	b180      	cbz	r0, 80195dc <pow+0xac>
 80195ba:	4632      	mov	r2, r6
 80195bc:	463b      	mov	r3, r7
 80195be:	4630      	mov	r0, r6
 80195c0:	4639      	mov	r1, r7
 80195c2:	f7e7 fadb 	bl	8000b7c <__aeabi_dcmpun>
 80195c6:	2800      	cmp	r0, #0
 80195c8:	d0e2      	beq.n	8019590 <pow+0x60>
 80195ca:	f7fb ffd3 	bl	8015574 <__errno>
 80195ce:	2321      	movs	r3, #33	; 0x21
 80195d0:	6003      	str	r3, [r0, #0]
 80195d2:	ecbd 8b02 	vpop	{d8}
 80195d6:	ec47 6b10 	vmov	d0, r6, r7
 80195da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195dc:	2200      	movs	r2, #0
 80195de:	2300      	movs	r3, #0
 80195e0:	4630      	mov	r0, r6
 80195e2:	4639      	mov	r1, r7
 80195e4:	f7e7 fa98 	bl	8000b18 <__aeabi_dcmpeq>
 80195e8:	2800      	cmp	r0, #0
 80195ea:	d0f2      	beq.n	80195d2 <pow+0xa2>
 80195ec:	eeb0 0a48 	vmov.f32	s0, s16
 80195f0:	eef0 0a68 	vmov.f32	s1, s17
 80195f4:	f000 f924 	bl	8019840 <finite>
 80195f8:	2800      	cmp	r0, #0
 80195fa:	d0ea      	beq.n	80195d2 <pow+0xa2>
 80195fc:	ec45 4b10 	vmov	d0, r4, r5
 8019600:	f000 f91e 	bl	8019840 <finite>
 8019604:	e7c3      	b.n	801958e <pow+0x5e>
 8019606:	4f01      	ldr	r7, [pc, #4]	; (801960c <pow+0xdc>)
 8019608:	2600      	movs	r6, #0
 801960a:	e7e2      	b.n	80195d2 <pow+0xa2>
 801960c:	3ff00000 	.word	0x3ff00000

08019610 <asinf>:
 8019610:	b508      	push	{r3, lr}
 8019612:	ed2d 8b02 	vpush	{d8}
 8019616:	eeb0 8a40 	vmov.f32	s16, s0
 801961a:	f000 ffe3 	bl	801a5e4 <__ieee754_asinf>
 801961e:	eeb4 8a48 	vcmp.f32	s16, s16
 8019622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019626:	eef0 8a40 	vmov.f32	s17, s0
 801962a:	d615      	bvs.n	8019658 <asinf+0x48>
 801962c:	eeb0 0a48 	vmov.f32	s0, s16
 8019630:	f000 f8b8 	bl	80197a4 <fabsf>
 8019634:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019638:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801963c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019640:	dd0a      	ble.n	8019658 <asinf+0x48>
 8019642:	f7fb ff97 	bl	8015574 <__errno>
 8019646:	ecbd 8b02 	vpop	{d8}
 801964a:	2321      	movs	r3, #33	; 0x21
 801964c:	6003      	str	r3, [r0, #0]
 801964e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019652:	4804      	ldr	r0, [pc, #16]	; (8019664 <asinf+0x54>)
 8019654:	f7fb bfca 	b.w	80155ec <nanf>
 8019658:	eeb0 0a68 	vmov.f32	s0, s17
 801965c:	ecbd 8b02 	vpop	{d8}
 8019660:	bd08      	pop	{r3, pc}
 8019662:	bf00      	nop
 8019664:	0801c448 	.word	0x0801c448

08019668 <atan2f>:
 8019668:	f001 b8a2 	b.w	801a7b0 <__ieee754_atan2f>

0801966c <powf>:
 801966c:	b508      	push	{r3, lr}
 801966e:	ed2d 8b04 	vpush	{d8-d9}
 8019672:	eeb0 8a60 	vmov.f32	s16, s1
 8019676:	eeb0 9a40 	vmov.f32	s18, s0
 801967a:	f001 f939 	bl	801a8f0 <__ieee754_powf>
 801967e:	eeb4 8a48 	vcmp.f32	s16, s16
 8019682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019686:	eef0 8a40 	vmov.f32	s17, s0
 801968a:	d63e      	bvs.n	801970a <powf+0x9e>
 801968c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8019690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019694:	d112      	bne.n	80196bc <powf+0x50>
 8019696:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801969a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801969e:	d039      	beq.n	8019714 <powf+0xa8>
 80196a0:	eeb0 0a48 	vmov.f32	s0, s16
 80196a4:	f000 f8d7 	bl	8019856 <finitef>
 80196a8:	b378      	cbz	r0, 801970a <powf+0x9e>
 80196aa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80196ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196b2:	d52a      	bpl.n	801970a <powf+0x9e>
 80196b4:	f7fb ff5e 	bl	8015574 <__errno>
 80196b8:	2322      	movs	r3, #34	; 0x22
 80196ba:	e014      	b.n	80196e6 <powf+0x7a>
 80196bc:	f000 f8cb 	bl	8019856 <finitef>
 80196c0:	b998      	cbnz	r0, 80196ea <powf+0x7e>
 80196c2:	eeb0 0a49 	vmov.f32	s0, s18
 80196c6:	f000 f8c6 	bl	8019856 <finitef>
 80196ca:	b170      	cbz	r0, 80196ea <powf+0x7e>
 80196cc:	eeb0 0a48 	vmov.f32	s0, s16
 80196d0:	f000 f8c1 	bl	8019856 <finitef>
 80196d4:	b148      	cbz	r0, 80196ea <powf+0x7e>
 80196d6:	eef4 8a68 	vcmp.f32	s17, s17
 80196da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196de:	d7e9      	bvc.n	80196b4 <powf+0x48>
 80196e0:	f7fb ff48 	bl	8015574 <__errno>
 80196e4:	2321      	movs	r3, #33	; 0x21
 80196e6:	6003      	str	r3, [r0, #0]
 80196e8:	e00f      	b.n	801970a <powf+0x9e>
 80196ea:	eef5 8a40 	vcmp.f32	s17, #0.0
 80196ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196f2:	d10a      	bne.n	801970a <powf+0x9e>
 80196f4:	eeb0 0a49 	vmov.f32	s0, s18
 80196f8:	f000 f8ad 	bl	8019856 <finitef>
 80196fc:	b128      	cbz	r0, 801970a <powf+0x9e>
 80196fe:	eeb0 0a48 	vmov.f32	s0, s16
 8019702:	f000 f8a8 	bl	8019856 <finitef>
 8019706:	2800      	cmp	r0, #0
 8019708:	d1d4      	bne.n	80196b4 <powf+0x48>
 801970a:	eeb0 0a68 	vmov.f32	s0, s17
 801970e:	ecbd 8b04 	vpop	{d8-d9}
 8019712:	bd08      	pop	{r3, pc}
 8019714:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8019718:	e7f7      	b.n	801970a <powf+0x9e>
	...

0801971c <cosf>:
 801971c:	ee10 3a10 	vmov	r3, s0
 8019720:	b507      	push	{r0, r1, r2, lr}
 8019722:	4a1e      	ldr	r2, [pc, #120]	; (801979c <cosf+0x80>)
 8019724:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019728:	4293      	cmp	r3, r2
 801972a:	dc06      	bgt.n	801973a <cosf+0x1e>
 801972c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80197a0 <cosf+0x84>
 8019730:	b003      	add	sp, #12
 8019732:	f85d eb04 	ldr.w	lr, [sp], #4
 8019736:	f000 beaf 	b.w	801a498 <__kernel_cosf>
 801973a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801973e:	db04      	blt.n	801974a <cosf+0x2e>
 8019740:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019744:	b003      	add	sp, #12
 8019746:	f85d fb04 	ldr.w	pc, [sp], #4
 801974a:	4668      	mov	r0, sp
 801974c:	f001 fb9a 	bl	801ae84 <__ieee754_rem_pio2f>
 8019750:	f000 0003 	and.w	r0, r0, #3
 8019754:	2801      	cmp	r0, #1
 8019756:	d009      	beq.n	801976c <cosf+0x50>
 8019758:	2802      	cmp	r0, #2
 801975a:	d010      	beq.n	801977e <cosf+0x62>
 801975c:	b9b0      	cbnz	r0, 801978c <cosf+0x70>
 801975e:	eddd 0a01 	vldr	s1, [sp, #4]
 8019762:	ed9d 0a00 	vldr	s0, [sp]
 8019766:	f000 fe97 	bl	801a498 <__kernel_cosf>
 801976a:	e7eb      	b.n	8019744 <cosf+0x28>
 801976c:	eddd 0a01 	vldr	s1, [sp, #4]
 8019770:	ed9d 0a00 	vldr	s0, [sp]
 8019774:	f000 feee 	bl	801a554 <__kernel_sinf>
 8019778:	eeb1 0a40 	vneg.f32	s0, s0
 801977c:	e7e2      	b.n	8019744 <cosf+0x28>
 801977e:	eddd 0a01 	vldr	s1, [sp, #4]
 8019782:	ed9d 0a00 	vldr	s0, [sp]
 8019786:	f000 fe87 	bl	801a498 <__kernel_cosf>
 801978a:	e7f5      	b.n	8019778 <cosf+0x5c>
 801978c:	eddd 0a01 	vldr	s1, [sp, #4]
 8019790:	ed9d 0a00 	vldr	s0, [sp]
 8019794:	2001      	movs	r0, #1
 8019796:	f000 fedd 	bl	801a554 <__kernel_sinf>
 801979a:	e7d3      	b.n	8019744 <cosf+0x28>
 801979c:	3f490fd8 	.word	0x3f490fd8
 80197a0:	00000000 	.word	0x00000000

080197a4 <fabsf>:
 80197a4:	ee10 3a10 	vmov	r3, s0
 80197a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80197ac:	ee00 3a10 	vmov	s0, r3
 80197b0:	4770      	bx	lr
	...

080197b4 <sinf>:
 80197b4:	ee10 3a10 	vmov	r3, s0
 80197b8:	b507      	push	{r0, r1, r2, lr}
 80197ba:	4a1f      	ldr	r2, [pc, #124]	; (8019838 <sinf+0x84>)
 80197bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80197c0:	4293      	cmp	r3, r2
 80197c2:	dc07      	bgt.n	80197d4 <sinf+0x20>
 80197c4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 801983c <sinf+0x88>
 80197c8:	2000      	movs	r0, #0
 80197ca:	b003      	add	sp, #12
 80197cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80197d0:	f000 bec0 	b.w	801a554 <__kernel_sinf>
 80197d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80197d8:	db04      	blt.n	80197e4 <sinf+0x30>
 80197da:	ee30 0a40 	vsub.f32	s0, s0, s0
 80197de:	b003      	add	sp, #12
 80197e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80197e4:	4668      	mov	r0, sp
 80197e6:	f001 fb4d 	bl	801ae84 <__ieee754_rem_pio2f>
 80197ea:	f000 0003 	and.w	r0, r0, #3
 80197ee:	2801      	cmp	r0, #1
 80197f0:	d00a      	beq.n	8019808 <sinf+0x54>
 80197f2:	2802      	cmp	r0, #2
 80197f4:	d00f      	beq.n	8019816 <sinf+0x62>
 80197f6:	b9c0      	cbnz	r0, 801982a <sinf+0x76>
 80197f8:	eddd 0a01 	vldr	s1, [sp, #4]
 80197fc:	ed9d 0a00 	vldr	s0, [sp]
 8019800:	2001      	movs	r0, #1
 8019802:	f000 fea7 	bl	801a554 <__kernel_sinf>
 8019806:	e7ea      	b.n	80197de <sinf+0x2a>
 8019808:	eddd 0a01 	vldr	s1, [sp, #4]
 801980c:	ed9d 0a00 	vldr	s0, [sp]
 8019810:	f000 fe42 	bl	801a498 <__kernel_cosf>
 8019814:	e7e3      	b.n	80197de <sinf+0x2a>
 8019816:	eddd 0a01 	vldr	s1, [sp, #4]
 801981a:	ed9d 0a00 	vldr	s0, [sp]
 801981e:	2001      	movs	r0, #1
 8019820:	f000 fe98 	bl	801a554 <__kernel_sinf>
 8019824:	eeb1 0a40 	vneg.f32	s0, s0
 8019828:	e7d9      	b.n	80197de <sinf+0x2a>
 801982a:	eddd 0a01 	vldr	s1, [sp, #4]
 801982e:	ed9d 0a00 	vldr	s0, [sp]
 8019832:	f000 fe31 	bl	801a498 <__kernel_cosf>
 8019836:	e7f5      	b.n	8019824 <sinf+0x70>
 8019838:	3f490fd8 	.word	0x3f490fd8
 801983c:	00000000 	.word	0x00000000

08019840 <finite>:
 8019840:	b082      	sub	sp, #8
 8019842:	ed8d 0b00 	vstr	d0, [sp]
 8019846:	9801      	ldr	r0, [sp, #4]
 8019848:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801984c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019850:	0fc0      	lsrs	r0, r0, #31
 8019852:	b002      	add	sp, #8
 8019854:	4770      	bx	lr

08019856 <finitef>:
 8019856:	b082      	sub	sp, #8
 8019858:	ed8d 0a01 	vstr	s0, [sp, #4]
 801985c:	9801      	ldr	r0, [sp, #4]
 801985e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019862:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8019866:	bfac      	ite	ge
 8019868:	2000      	movge	r0, #0
 801986a:	2001      	movlt	r0, #1
 801986c:	b002      	add	sp, #8
 801986e:	4770      	bx	lr

08019870 <__ieee754_sqrt>:
 8019870:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019874:	ec55 4b10 	vmov	r4, r5, d0
 8019878:	4e67      	ldr	r6, [pc, #412]	; (8019a18 <__ieee754_sqrt+0x1a8>)
 801987a:	43ae      	bics	r6, r5
 801987c:	ee10 0a10 	vmov	r0, s0
 8019880:	ee10 2a10 	vmov	r2, s0
 8019884:	4629      	mov	r1, r5
 8019886:	462b      	mov	r3, r5
 8019888:	d10d      	bne.n	80198a6 <__ieee754_sqrt+0x36>
 801988a:	f7e6 fedd 	bl	8000648 <__aeabi_dmul>
 801988e:	4602      	mov	r2, r0
 8019890:	460b      	mov	r3, r1
 8019892:	4620      	mov	r0, r4
 8019894:	4629      	mov	r1, r5
 8019896:	f7e6 fd21 	bl	80002dc <__adddf3>
 801989a:	4604      	mov	r4, r0
 801989c:	460d      	mov	r5, r1
 801989e:	ec45 4b10 	vmov	d0, r4, r5
 80198a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198a6:	2d00      	cmp	r5, #0
 80198a8:	dc0b      	bgt.n	80198c2 <__ieee754_sqrt+0x52>
 80198aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80198ae:	4326      	orrs	r6, r4
 80198b0:	d0f5      	beq.n	801989e <__ieee754_sqrt+0x2e>
 80198b2:	b135      	cbz	r5, 80198c2 <__ieee754_sqrt+0x52>
 80198b4:	f7e6 fd10 	bl	80002d8 <__aeabi_dsub>
 80198b8:	4602      	mov	r2, r0
 80198ba:	460b      	mov	r3, r1
 80198bc:	f7e6 ffee 	bl	800089c <__aeabi_ddiv>
 80198c0:	e7eb      	b.n	801989a <__ieee754_sqrt+0x2a>
 80198c2:	1509      	asrs	r1, r1, #20
 80198c4:	f000 808d 	beq.w	80199e2 <__ieee754_sqrt+0x172>
 80198c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80198cc:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80198d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80198d4:	07c9      	lsls	r1, r1, #31
 80198d6:	bf5c      	itt	pl
 80198d8:	005b      	lslpl	r3, r3, #1
 80198da:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80198de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80198e2:	bf58      	it	pl
 80198e4:	0052      	lslpl	r2, r2, #1
 80198e6:	2500      	movs	r5, #0
 80198e8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80198ec:	1076      	asrs	r6, r6, #1
 80198ee:	0052      	lsls	r2, r2, #1
 80198f0:	f04f 0e16 	mov.w	lr, #22
 80198f4:	46ac      	mov	ip, r5
 80198f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80198fa:	eb0c 0001 	add.w	r0, ip, r1
 80198fe:	4298      	cmp	r0, r3
 8019900:	bfde      	ittt	le
 8019902:	1a1b      	suble	r3, r3, r0
 8019904:	eb00 0c01 	addle.w	ip, r0, r1
 8019908:	186d      	addle	r5, r5, r1
 801990a:	005b      	lsls	r3, r3, #1
 801990c:	f1be 0e01 	subs.w	lr, lr, #1
 8019910:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019914:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019918:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801991c:	d1ed      	bne.n	80198fa <__ieee754_sqrt+0x8a>
 801991e:	4674      	mov	r4, lr
 8019920:	2720      	movs	r7, #32
 8019922:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019926:	4563      	cmp	r3, ip
 8019928:	eb01 000e 	add.w	r0, r1, lr
 801992c:	dc02      	bgt.n	8019934 <__ieee754_sqrt+0xc4>
 801992e:	d113      	bne.n	8019958 <__ieee754_sqrt+0xe8>
 8019930:	4290      	cmp	r0, r2
 8019932:	d811      	bhi.n	8019958 <__ieee754_sqrt+0xe8>
 8019934:	2800      	cmp	r0, #0
 8019936:	eb00 0e01 	add.w	lr, r0, r1
 801993a:	da57      	bge.n	80199ec <__ieee754_sqrt+0x17c>
 801993c:	f1be 0f00 	cmp.w	lr, #0
 8019940:	db54      	blt.n	80199ec <__ieee754_sqrt+0x17c>
 8019942:	f10c 0801 	add.w	r8, ip, #1
 8019946:	eba3 030c 	sub.w	r3, r3, ip
 801994a:	4290      	cmp	r0, r2
 801994c:	bf88      	it	hi
 801994e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8019952:	1a12      	subs	r2, r2, r0
 8019954:	440c      	add	r4, r1
 8019956:	46c4      	mov	ip, r8
 8019958:	005b      	lsls	r3, r3, #1
 801995a:	3f01      	subs	r7, #1
 801995c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019960:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019964:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8019968:	d1dd      	bne.n	8019926 <__ieee754_sqrt+0xb6>
 801996a:	4313      	orrs	r3, r2
 801996c:	d01b      	beq.n	80199a6 <__ieee754_sqrt+0x136>
 801996e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8019a1c <__ieee754_sqrt+0x1ac>
 8019972:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8019a20 <__ieee754_sqrt+0x1b0>
 8019976:	e9da 0100 	ldrd	r0, r1, [sl]
 801997a:	e9db 2300 	ldrd	r2, r3, [fp]
 801997e:	f7e6 fcab 	bl	80002d8 <__aeabi_dsub>
 8019982:	e9da 8900 	ldrd	r8, r9, [sl]
 8019986:	4602      	mov	r2, r0
 8019988:	460b      	mov	r3, r1
 801998a:	4640      	mov	r0, r8
 801998c:	4649      	mov	r1, r9
 801998e:	f7e7 f8d7 	bl	8000b40 <__aeabi_dcmple>
 8019992:	b140      	cbz	r0, 80199a6 <__ieee754_sqrt+0x136>
 8019994:	f1b4 3fff 	cmp.w	r4, #4294967295
 8019998:	e9da 0100 	ldrd	r0, r1, [sl]
 801999c:	e9db 2300 	ldrd	r2, r3, [fp]
 80199a0:	d126      	bne.n	80199f0 <__ieee754_sqrt+0x180>
 80199a2:	3501      	adds	r5, #1
 80199a4:	463c      	mov	r4, r7
 80199a6:	106a      	asrs	r2, r5, #1
 80199a8:	0863      	lsrs	r3, r4, #1
 80199aa:	07e9      	lsls	r1, r5, #31
 80199ac:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80199b0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80199b4:	bf48      	it	mi
 80199b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80199ba:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80199be:	461c      	mov	r4, r3
 80199c0:	e76d      	b.n	801989e <__ieee754_sqrt+0x2e>
 80199c2:	0ad3      	lsrs	r3, r2, #11
 80199c4:	3815      	subs	r0, #21
 80199c6:	0552      	lsls	r2, r2, #21
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d0fa      	beq.n	80199c2 <__ieee754_sqrt+0x152>
 80199cc:	02dc      	lsls	r4, r3, #11
 80199ce:	d50a      	bpl.n	80199e6 <__ieee754_sqrt+0x176>
 80199d0:	f1c1 0420 	rsb	r4, r1, #32
 80199d4:	fa22 f404 	lsr.w	r4, r2, r4
 80199d8:	1e4d      	subs	r5, r1, #1
 80199da:	408a      	lsls	r2, r1
 80199dc:	4323      	orrs	r3, r4
 80199de:	1b41      	subs	r1, r0, r5
 80199e0:	e772      	b.n	80198c8 <__ieee754_sqrt+0x58>
 80199e2:	4608      	mov	r0, r1
 80199e4:	e7f0      	b.n	80199c8 <__ieee754_sqrt+0x158>
 80199e6:	005b      	lsls	r3, r3, #1
 80199e8:	3101      	adds	r1, #1
 80199ea:	e7ef      	b.n	80199cc <__ieee754_sqrt+0x15c>
 80199ec:	46e0      	mov	r8, ip
 80199ee:	e7aa      	b.n	8019946 <__ieee754_sqrt+0xd6>
 80199f0:	f7e6 fc74 	bl	80002dc <__adddf3>
 80199f4:	e9da 8900 	ldrd	r8, r9, [sl]
 80199f8:	4602      	mov	r2, r0
 80199fa:	460b      	mov	r3, r1
 80199fc:	4640      	mov	r0, r8
 80199fe:	4649      	mov	r1, r9
 8019a00:	f7e7 f894 	bl	8000b2c <__aeabi_dcmplt>
 8019a04:	b120      	cbz	r0, 8019a10 <__ieee754_sqrt+0x1a0>
 8019a06:	1ca0      	adds	r0, r4, #2
 8019a08:	bf08      	it	eq
 8019a0a:	3501      	addeq	r5, #1
 8019a0c:	3402      	adds	r4, #2
 8019a0e:	e7ca      	b.n	80199a6 <__ieee754_sqrt+0x136>
 8019a10:	3401      	adds	r4, #1
 8019a12:	f024 0401 	bic.w	r4, r4, #1
 8019a16:	e7c6      	b.n	80199a6 <__ieee754_sqrt+0x136>
 8019a18:	7ff00000 	.word	0x7ff00000
 8019a1c:	200001e0 	.word	0x200001e0
 8019a20:	200001e8 	.word	0x200001e8

08019a24 <__ieee754_sqrtf>:
 8019a24:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019a28:	4770      	bx	lr
 8019a2a:	0000      	movs	r0, r0
 8019a2c:	0000      	movs	r0, r0
	...

08019a30 <__ieee754_pow>:
 8019a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a34:	ed2d 8b06 	vpush	{d8-d10}
 8019a38:	b089      	sub	sp, #36	; 0x24
 8019a3a:	ed8d 1b00 	vstr	d1, [sp]
 8019a3e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8019a42:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8019a46:	ea58 0102 	orrs.w	r1, r8, r2
 8019a4a:	ec57 6b10 	vmov	r6, r7, d0
 8019a4e:	d115      	bne.n	8019a7c <__ieee754_pow+0x4c>
 8019a50:	19b3      	adds	r3, r6, r6
 8019a52:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8019a56:	4152      	adcs	r2, r2
 8019a58:	4299      	cmp	r1, r3
 8019a5a:	4b89      	ldr	r3, [pc, #548]	; (8019c80 <__ieee754_pow+0x250>)
 8019a5c:	4193      	sbcs	r3, r2
 8019a5e:	f080 84d1 	bcs.w	801a404 <__ieee754_pow+0x9d4>
 8019a62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019a66:	4630      	mov	r0, r6
 8019a68:	4639      	mov	r1, r7
 8019a6a:	f7e6 fc37 	bl	80002dc <__adddf3>
 8019a6e:	ec41 0b10 	vmov	d0, r0, r1
 8019a72:	b009      	add	sp, #36	; 0x24
 8019a74:	ecbd 8b06 	vpop	{d8-d10}
 8019a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a7c:	4b81      	ldr	r3, [pc, #516]	; (8019c84 <__ieee754_pow+0x254>)
 8019a7e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8019a82:	429c      	cmp	r4, r3
 8019a84:	ee10 aa10 	vmov	sl, s0
 8019a88:	463d      	mov	r5, r7
 8019a8a:	dc06      	bgt.n	8019a9a <__ieee754_pow+0x6a>
 8019a8c:	d101      	bne.n	8019a92 <__ieee754_pow+0x62>
 8019a8e:	2e00      	cmp	r6, #0
 8019a90:	d1e7      	bne.n	8019a62 <__ieee754_pow+0x32>
 8019a92:	4598      	cmp	r8, r3
 8019a94:	dc01      	bgt.n	8019a9a <__ieee754_pow+0x6a>
 8019a96:	d10f      	bne.n	8019ab8 <__ieee754_pow+0x88>
 8019a98:	b172      	cbz	r2, 8019ab8 <__ieee754_pow+0x88>
 8019a9a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8019a9e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8019aa2:	ea55 050a 	orrs.w	r5, r5, sl
 8019aa6:	d1dc      	bne.n	8019a62 <__ieee754_pow+0x32>
 8019aa8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019aac:	18db      	adds	r3, r3, r3
 8019aae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8019ab2:	4152      	adcs	r2, r2
 8019ab4:	429d      	cmp	r5, r3
 8019ab6:	e7d0      	b.n	8019a5a <__ieee754_pow+0x2a>
 8019ab8:	2d00      	cmp	r5, #0
 8019aba:	da3b      	bge.n	8019b34 <__ieee754_pow+0x104>
 8019abc:	4b72      	ldr	r3, [pc, #456]	; (8019c88 <__ieee754_pow+0x258>)
 8019abe:	4598      	cmp	r8, r3
 8019ac0:	dc51      	bgt.n	8019b66 <__ieee754_pow+0x136>
 8019ac2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8019ac6:	4598      	cmp	r8, r3
 8019ac8:	f340 84ab 	ble.w	801a422 <__ieee754_pow+0x9f2>
 8019acc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019ad0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019ad4:	2b14      	cmp	r3, #20
 8019ad6:	dd0f      	ble.n	8019af8 <__ieee754_pow+0xc8>
 8019ad8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8019adc:	fa22 f103 	lsr.w	r1, r2, r3
 8019ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8019ae4:	4293      	cmp	r3, r2
 8019ae6:	f040 849c 	bne.w	801a422 <__ieee754_pow+0x9f2>
 8019aea:	f001 0101 	and.w	r1, r1, #1
 8019aee:	f1c1 0302 	rsb	r3, r1, #2
 8019af2:	9304      	str	r3, [sp, #16]
 8019af4:	b182      	cbz	r2, 8019b18 <__ieee754_pow+0xe8>
 8019af6:	e05f      	b.n	8019bb8 <__ieee754_pow+0x188>
 8019af8:	2a00      	cmp	r2, #0
 8019afa:	d15b      	bne.n	8019bb4 <__ieee754_pow+0x184>
 8019afc:	f1c3 0314 	rsb	r3, r3, #20
 8019b00:	fa48 f103 	asr.w	r1, r8, r3
 8019b04:	fa01 f303 	lsl.w	r3, r1, r3
 8019b08:	4543      	cmp	r3, r8
 8019b0a:	f040 8487 	bne.w	801a41c <__ieee754_pow+0x9ec>
 8019b0e:	f001 0101 	and.w	r1, r1, #1
 8019b12:	f1c1 0302 	rsb	r3, r1, #2
 8019b16:	9304      	str	r3, [sp, #16]
 8019b18:	4b5c      	ldr	r3, [pc, #368]	; (8019c8c <__ieee754_pow+0x25c>)
 8019b1a:	4598      	cmp	r8, r3
 8019b1c:	d132      	bne.n	8019b84 <__ieee754_pow+0x154>
 8019b1e:	f1b9 0f00 	cmp.w	r9, #0
 8019b22:	f280 8477 	bge.w	801a414 <__ieee754_pow+0x9e4>
 8019b26:	4959      	ldr	r1, [pc, #356]	; (8019c8c <__ieee754_pow+0x25c>)
 8019b28:	4632      	mov	r2, r6
 8019b2a:	463b      	mov	r3, r7
 8019b2c:	2000      	movs	r0, #0
 8019b2e:	f7e6 feb5 	bl	800089c <__aeabi_ddiv>
 8019b32:	e79c      	b.n	8019a6e <__ieee754_pow+0x3e>
 8019b34:	2300      	movs	r3, #0
 8019b36:	9304      	str	r3, [sp, #16]
 8019b38:	2a00      	cmp	r2, #0
 8019b3a:	d13d      	bne.n	8019bb8 <__ieee754_pow+0x188>
 8019b3c:	4b51      	ldr	r3, [pc, #324]	; (8019c84 <__ieee754_pow+0x254>)
 8019b3e:	4598      	cmp	r8, r3
 8019b40:	d1ea      	bne.n	8019b18 <__ieee754_pow+0xe8>
 8019b42:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8019b46:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8019b4a:	ea53 030a 	orrs.w	r3, r3, sl
 8019b4e:	f000 8459 	beq.w	801a404 <__ieee754_pow+0x9d4>
 8019b52:	4b4f      	ldr	r3, [pc, #316]	; (8019c90 <__ieee754_pow+0x260>)
 8019b54:	429c      	cmp	r4, r3
 8019b56:	dd08      	ble.n	8019b6a <__ieee754_pow+0x13a>
 8019b58:	f1b9 0f00 	cmp.w	r9, #0
 8019b5c:	f2c0 8456 	blt.w	801a40c <__ieee754_pow+0x9dc>
 8019b60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019b64:	e783      	b.n	8019a6e <__ieee754_pow+0x3e>
 8019b66:	2302      	movs	r3, #2
 8019b68:	e7e5      	b.n	8019b36 <__ieee754_pow+0x106>
 8019b6a:	f1b9 0f00 	cmp.w	r9, #0
 8019b6e:	f04f 0000 	mov.w	r0, #0
 8019b72:	f04f 0100 	mov.w	r1, #0
 8019b76:	f6bf af7a 	bge.w	8019a6e <__ieee754_pow+0x3e>
 8019b7a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8019b7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019b82:	e774      	b.n	8019a6e <__ieee754_pow+0x3e>
 8019b84:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8019b88:	d106      	bne.n	8019b98 <__ieee754_pow+0x168>
 8019b8a:	4632      	mov	r2, r6
 8019b8c:	463b      	mov	r3, r7
 8019b8e:	4630      	mov	r0, r6
 8019b90:	4639      	mov	r1, r7
 8019b92:	f7e6 fd59 	bl	8000648 <__aeabi_dmul>
 8019b96:	e76a      	b.n	8019a6e <__ieee754_pow+0x3e>
 8019b98:	4b3e      	ldr	r3, [pc, #248]	; (8019c94 <__ieee754_pow+0x264>)
 8019b9a:	4599      	cmp	r9, r3
 8019b9c:	d10c      	bne.n	8019bb8 <__ieee754_pow+0x188>
 8019b9e:	2d00      	cmp	r5, #0
 8019ba0:	db0a      	blt.n	8019bb8 <__ieee754_pow+0x188>
 8019ba2:	ec47 6b10 	vmov	d0, r6, r7
 8019ba6:	b009      	add	sp, #36	; 0x24
 8019ba8:	ecbd 8b06 	vpop	{d8-d10}
 8019bac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bb0:	f7ff be5e 	b.w	8019870 <__ieee754_sqrt>
 8019bb4:	2300      	movs	r3, #0
 8019bb6:	9304      	str	r3, [sp, #16]
 8019bb8:	ec47 6b10 	vmov	d0, r6, r7
 8019bbc:	f000 fc62 	bl	801a484 <fabs>
 8019bc0:	ec51 0b10 	vmov	r0, r1, d0
 8019bc4:	f1ba 0f00 	cmp.w	sl, #0
 8019bc8:	d129      	bne.n	8019c1e <__ieee754_pow+0x1ee>
 8019bca:	b124      	cbz	r4, 8019bd6 <__ieee754_pow+0x1a6>
 8019bcc:	4b2f      	ldr	r3, [pc, #188]	; (8019c8c <__ieee754_pow+0x25c>)
 8019bce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8019bd2:	429a      	cmp	r2, r3
 8019bd4:	d123      	bne.n	8019c1e <__ieee754_pow+0x1ee>
 8019bd6:	f1b9 0f00 	cmp.w	r9, #0
 8019bda:	da05      	bge.n	8019be8 <__ieee754_pow+0x1b8>
 8019bdc:	4602      	mov	r2, r0
 8019bde:	460b      	mov	r3, r1
 8019be0:	2000      	movs	r0, #0
 8019be2:	492a      	ldr	r1, [pc, #168]	; (8019c8c <__ieee754_pow+0x25c>)
 8019be4:	f7e6 fe5a 	bl	800089c <__aeabi_ddiv>
 8019be8:	2d00      	cmp	r5, #0
 8019bea:	f6bf af40 	bge.w	8019a6e <__ieee754_pow+0x3e>
 8019bee:	9b04      	ldr	r3, [sp, #16]
 8019bf0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019bf4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019bf8:	431c      	orrs	r4, r3
 8019bfa:	d108      	bne.n	8019c0e <__ieee754_pow+0x1de>
 8019bfc:	4602      	mov	r2, r0
 8019bfe:	460b      	mov	r3, r1
 8019c00:	4610      	mov	r0, r2
 8019c02:	4619      	mov	r1, r3
 8019c04:	f7e6 fb68 	bl	80002d8 <__aeabi_dsub>
 8019c08:	4602      	mov	r2, r0
 8019c0a:	460b      	mov	r3, r1
 8019c0c:	e78f      	b.n	8019b2e <__ieee754_pow+0xfe>
 8019c0e:	9b04      	ldr	r3, [sp, #16]
 8019c10:	2b01      	cmp	r3, #1
 8019c12:	f47f af2c 	bne.w	8019a6e <__ieee754_pow+0x3e>
 8019c16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019c1a:	4619      	mov	r1, r3
 8019c1c:	e727      	b.n	8019a6e <__ieee754_pow+0x3e>
 8019c1e:	0feb      	lsrs	r3, r5, #31
 8019c20:	3b01      	subs	r3, #1
 8019c22:	9306      	str	r3, [sp, #24]
 8019c24:	9a06      	ldr	r2, [sp, #24]
 8019c26:	9b04      	ldr	r3, [sp, #16]
 8019c28:	4313      	orrs	r3, r2
 8019c2a:	d102      	bne.n	8019c32 <__ieee754_pow+0x202>
 8019c2c:	4632      	mov	r2, r6
 8019c2e:	463b      	mov	r3, r7
 8019c30:	e7e6      	b.n	8019c00 <__ieee754_pow+0x1d0>
 8019c32:	4b19      	ldr	r3, [pc, #100]	; (8019c98 <__ieee754_pow+0x268>)
 8019c34:	4598      	cmp	r8, r3
 8019c36:	f340 80fb 	ble.w	8019e30 <__ieee754_pow+0x400>
 8019c3a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8019c3e:	4598      	cmp	r8, r3
 8019c40:	4b13      	ldr	r3, [pc, #76]	; (8019c90 <__ieee754_pow+0x260>)
 8019c42:	dd0c      	ble.n	8019c5e <__ieee754_pow+0x22e>
 8019c44:	429c      	cmp	r4, r3
 8019c46:	dc0f      	bgt.n	8019c68 <__ieee754_pow+0x238>
 8019c48:	f1b9 0f00 	cmp.w	r9, #0
 8019c4c:	da0f      	bge.n	8019c6e <__ieee754_pow+0x23e>
 8019c4e:	2000      	movs	r0, #0
 8019c50:	b009      	add	sp, #36	; 0x24
 8019c52:	ecbd 8b06 	vpop	{d8-d10}
 8019c56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c5a:	f001 bbba 	b.w	801b3d2 <__math_oflow>
 8019c5e:	429c      	cmp	r4, r3
 8019c60:	dbf2      	blt.n	8019c48 <__ieee754_pow+0x218>
 8019c62:	4b0a      	ldr	r3, [pc, #40]	; (8019c8c <__ieee754_pow+0x25c>)
 8019c64:	429c      	cmp	r4, r3
 8019c66:	dd19      	ble.n	8019c9c <__ieee754_pow+0x26c>
 8019c68:	f1b9 0f00 	cmp.w	r9, #0
 8019c6c:	dcef      	bgt.n	8019c4e <__ieee754_pow+0x21e>
 8019c6e:	2000      	movs	r0, #0
 8019c70:	b009      	add	sp, #36	; 0x24
 8019c72:	ecbd 8b06 	vpop	{d8-d10}
 8019c76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c7a:	f001 bba1 	b.w	801b3c0 <__math_uflow>
 8019c7e:	bf00      	nop
 8019c80:	fff00000 	.word	0xfff00000
 8019c84:	7ff00000 	.word	0x7ff00000
 8019c88:	433fffff 	.word	0x433fffff
 8019c8c:	3ff00000 	.word	0x3ff00000
 8019c90:	3fefffff 	.word	0x3fefffff
 8019c94:	3fe00000 	.word	0x3fe00000
 8019c98:	41e00000 	.word	0x41e00000
 8019c9c:	4b60      	ldr	r3, [pc, #384]	; (8019e20 <__ieee754_pow+0x3f0>)
 8019c9e:	2200      	movs	r2, #0
 8019ca0:	f7e6 fb1a 	bl	80002d8 <__aeabi_dsub>
 8019ca4:	a354      	add	r3, pc, #336	; (adr r3, 8019df8 <__ieee754_pow+0x3c8>)
 8019ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019caa:	4604      	mov	r4, r0
 8019cac:	460d      	mov	r5, r1
 8019cae:	f7e6 fccb 	bl	8000648 <__aeabi_dmul>
 8019cb2:	a353      	add	r3, pc, #332	; (adr r3, 8019e00 <__ieee754_pow+0x3d0>)
 8019cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cb8:	4606      	mov	r6, r0
 8019cba:	460f      	mov	r7, r1
 8019cbc:	4620      	mov	r0, r4
 8019cbe:	4629      	mov	r1, r5
 8019cc0:	f7e6 fcc2 	bl	8000648 <__aeabi_dmul>
 8019cc4:	4b57      	ldr	r3, [pc, #348]	; (8019e24 <__ieee754_pow+0x3f4>)
 8019cc6:	4682      	mov	sl, r0
 8019cc8:	468b      	mov	fp, r1
 8019cca:	2200      	movs	r2, #0
 8019ccc:	4620      	mov	r0, r4
 8019cce:	4629      	mov	r1, r5
 8019cd0:	f7e6 fcba 	bl	8000648 <__aeabi_dmul>
 8019cd4:	4602      	mov	r2, r0
 8019cd6:	460b      	mov	r3, r1
 8019cd8:	a14b      	add	r1, pc, #300	; (adr r1, 8019e08 <__ieee754_pow+0x3d8>)
 8019cda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cde:	f7e6 fafb 	bl	80002d8 <__aeabi_dsub>
 8019ce2:	4622      	mov	r2, r4
 8019ce4:	462b      	mov	r3, r5
 8019ce6:	f7e6 fcaf 	bl	8000648 <__aeabi_dmul>
 8019cea:	4602      	mov	r2, r0
 8019cec:	460b      	mov	r3, r1
 8019cee:	2000      	movs	r0, #0
 8019cf0:	494d      	ldr	r1, [pc, #308]	; (8019e28 <__ieee754_pow+0x3f8>)
 8019cf2:	f7e6 faf1 	bl	80002d8 <__aeabi_dsub>
 8019cf6:	4622      	mov	r2, r4
 8019cf8:	4680      	mov	r8, r0
 8019cfa:	4689      	mov	r9, r1
 8019cfc:	462b      	mov	r3, r5
 8019cfe:	4620      	mov	r0, r4
 8019d00:	4629      	mov	r1, r5
 8019d02:	f7e6 fca1 	bl	8000648 <__aeabi_dmul>
 8019d06:	4602      	mov	r2, r0
 8019d08:	460b      	mov	r3, r1
 8019d0a:	4640      	mov	r0, r8
 8019d0c:	4649      	mov	r1, r9
 8019d0e:	f7e6 fc9b 	bl	8000648 <__aeabi_dmul>
 8019d12:	a33f      	add	r3, pc, #252	; (adr r3, 8019e10 <__ieee754_pow+0x3e0>)
 8019d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d18:	f7e6 fc96 	bl	8000648 <__aeabi_dmul>
 8019d1c:	4602      	mov	r2, r0
 8019d1e:	460b      	mov	r3, r1
 8019d20:	4650      	mov	r0, sl
 8019d22:	4659      	mov	r1, fp
 8019d24:	f7e6 fad8 	bl	80002d8 <__aeabi_dsub>
 8019d28:	4602      	mov	r2, r0
 8019d2a:	460b      	mov	r3, r1
 8019d2c:	4680      	mov	r8, r0
 8019d2e:	4689      	mov	r9, r1
 8019d30:	4630      	mov	r0, r6
 8019d32:	4639      	mov	r1, r7
 8019d34:	f7e6 fad2 	bl	80002dc <__adddf3>
 8019d38:	2000      	movs	r0, #0
 8019d3a:	4632      	mov	r2, r6
 8019d3c:	463b      	mov	r3, r7
 8019d3e:	4604      	mov	r4, r0
 8019d40:	460d      	mov	r5, r1
 8019d42:	f7e6 fac9 	bl	80002d8 <__aeabi_dsub>
 8019d46:	4602      	mov	r2, r0
 8019d48:	460b      	mov	r3, r1
 8019d4a:	4640      	mov	r0, r8
 8019d4c:	4649      	mov	r1, r9
 8019d4e:	f7e6 fac3 	bl	80002d8 <__aeabi_dsub>
 8019d52:	9b04      	ldr	r3, [sp, #16]
 8019d54:	9a06      	ldr	r2, [sp, #24]
 8019d56:	3b01      	subs	r3, #1
 8019d58:	4313      	orrs	r3, r2
 8019d5a:	4682      	mov	sl, r0
 8019d5c:	468b      	mov	fp, r1
 8019d5e:	f040 81e7 	bne.w	801a130 <__ieee754_pow+0x700>
 8019d62:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8019e18 <__ieee754_pow+0x3e8>
 8019d66:	eeb0 8a47 	vmov.f32	s16, s14
 8019d6a:	eef0 8a67 	vmov.f32	s17, s15
 8019d6e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8019d72:	2600      	movs	r6, #0
 8019d74:	4632      	mov	r2, r6
 8019d76:	463b      	mov	r3, r7
 8019d78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019d7c:	f7e6 faac 	bl	80002d8 <__aeabi_dsub>
 8019d80:	4622      	mov	r2, r4
 8019d82:	462b      	mov	r3, r5
 8019d84:	f7e6 fc60 	bl	8000648 <__aeabi_dmul>
 8019d88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019d8c:	4680      	mov	r8, r0
 8019d8e:	4689      	mov	r9, r1
 8019d90:	4650      	mov	r0, sl
 8019d92:	4659      	mov	r1, fp
 8019d94:	f7e6 fc58 	bl	8000648 <__aeabi_dmul>
 8019d98:	4602      	mov	r2, r0
 8019d9a:	460b      	mov	r3, r1
 8019d9c:	4640      	mov	r0, r8
 8019d9e:	4649      	mov	r1, r9
 8019da0:	f7e6 fa9c 	bl	80002dc <__adddf3>
 8019da4:	4632      	mov	r2, r6
 8019da6:	463b      	mov	r3, r7
 8019da8:	4680      	mov	r8, r0
 8019daa:	4689      	mov	r9, r1
 8019dac:	4620      	mov	r0, r4
 8019dae:	4629      	mov	r1, r5
 8019db0:	f7e6 fc4a 	bl	8000648 <__aeabi_dmul>
 8019db4:	460b      	mov	r3, r1
 8019db6:	4604      	mov	r4, r0
 8019db8:	460d      	mov	r5, r1
 8019dba:	4602      	mov	r2, r0
 8019dbc:	4649      	mov	r1, r9
 8019dbe:	4640      	mov	r0, r8
 8019dc0:	f7e6 fa8c 	bl	80002dc <__adddf3>
 8019dc4:	4b19      	ldr	r3, [pc, #100]	; (8019e2c <__ieee754_pow+0x3fc>)
 8019dc6:	4299      	cmp	r1, r3
 8019dc8:	ec45 4b19 	vmov	d9, r4, r5
 8019dcc:	4606      	mov	r6, r0
 8019dce:	460f      	mov	r7, r1
 8019dd0:	468b      	mov	fp, r1
 8019dd2:	f340 82f0 	ble.w	801a3b6 <__ieee754_pow+0x986>
 8019dd6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8019dda:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8019dde:	4303      	orrs	r3, r0
 8019de0:	f000 81e4 	beq.w	801a1ac <__ieee754_pow+0x77c>
 8019de4:	ec51 0b18 	vmov	r0, r1, d8
 8019de8:	2200      	movs	r2, #0
 8019dea:	2300      	movs	r3, #0
 8019dec:	f7e6 fe9e 	bl	8000b2c <__aeabi_dcmplt>
 8019df0:	3800      	subs	r0, #0
 8019df2:	bf18      	it	ne
 8019df4:	2001      	movne	r0, #1
 8019df6:	e72b      	b.n	8019c50 <__ieee754_pow+0x220>
 8019df8:	60000000 	.word	0x60000000
 8019dfc:	3ff71547 	.word	0x3ff71547
 8019e00:	f85ddf44 	.word	0xf85ddf44
 8019e04:	3e54ae0b 	.word	0x3e54ae0b
 8019e08:	55555555 	.word	0x55555555
 8019e0c:	3fd55555 	.word	0x3fd55555
 8019e10:	652b82fe 	.word	0x652b82fe
 8019e14:	3ff71547 	.word	0x3ff71547
 8019e18:	00000000 	.word	0x00000000
 8019e1c:	bff00000 	.word	0xbff00000
 8019e20:	3ff00000 	.word	0x3ff00000
 8019e24:	3fd00000 	.word	0x3fd00000
 8019e28:	3fe00000 	.word	0x3fe00000
 8019e2c:	408fffff 	.word	0x408fffff
 8019e30:	4bd5      	ldr	r3, [pc, #852]	; (801a188 <__ieee754_pow+0x758>)
 8019e32:	402b      	ands	r3, r5
 8019e34:	2200      	movs	r2, #0
 8019e36:	b92b      	cbnz	r3, 8019e44 <__ieee754_pow+0x414>
 8019e38:	4bd4      	ldr	r3, [pc, #848]	; (801a18c <__ieee754_pow+0x75c>)
 8019e3a:	f7e6 fc05 	bl	8000648 <__aeabi_dmul>
 8019e3e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8019e42:	460c      	mov	r4, r1
 8019e44:	1523      	asrs	r3, r4, #20
 8019e46:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019e4a:	4413      	add	r3, r2
 8019e4c:	9305      	str	r3, [sp, #20]
 8019e4e:	4bd0      	ldr	r3, [pc, #832]	; (801a190 <__ieee754_pow+0x760>)
 8019e50:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8019e54:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019e58:	429c      	cmp	r4, r3
 8019e5a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019e5e:	dd08      	ble.n	8019e72 <__ieee754_pow+0x442>
 8019e60:	4bcc      	ldr	r3, [pc, #816]	; (801a194 <__ieee754_pow+0x764>)
 8019e62:	429c      	cmp	r4, r3
 8019e64:	f340 8162 	ble.w	801a12c <__ieee754_pow+0x6fc>
 8019e68:	9b05      	ldr	r3, [sp, #20]
 8019e6a:	3301      	adds	r3, #1
 8019e6c:	9305      	str	r3, [sp, #20]
 8019e6e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8019e72:	2400      	movs	r4, #0
 8019e74:	00e3      	lsls	r3, r4, #3
 8019e76:	9307      	str	r3, [sp, #28]
 8019e78:	4bc7      	ldr	r3, [pc, #796]	; (801a198 <__ieee754_pow+0x768>)
 8019e7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019e7e:	ed93 7b00 	vldr	d7, [r3]
 8019e82:	4629      	mov	r1, r5
 8019e84:	ec53 2b17 	vmov	r2, r3, d7
 8019e88:	eeb0 9a47 	vmov.f32	s18, s14
 8019e8c:	eef0 9a67 	vmov.f32	s19, s15
 8019e90:	4682      	mov	sl, r0
 8019e92:	f7e6 fa21 	bl	80002d8 <__aeabi_dsub>
 8019e96:	4652      	mov	r2, sl
 8019e98:	4606      	mov	r6, r0
 8019e9a:	460f      	mov	r7, r1
 8019e9c:	462b      	mov	r3, r5
 8019e9e:	ec51 0b19 	vmov	r0, r1, d9
 8019ea2:	f7e6 fa1b 	bl	80002dc <__adddf3>
 8019ea6:	4602      	mov	r2, r0
 8019ea8:	460b      	mov	r3, r1
 8019eaa:	2000      	movs	r0, #0
 8019eac:	49bb      	ldr	r1, [pc, #748]	; (801a19c <__ieee754_pow+0x76c>)
 8019eae:	f7e6 fcf5 	bl	800089c <__aeabi_ddiv>
 8019eb2:	ec41 0b1a 	vmov	d10, r0, r1
 8019eb6:	4602      	mov	r2, r0
 8019eb8:	460b      	mov	r3, r1
 8019eba:	4630      	mov	r0, r6
 8019ebc:	4639      	mov	r1, r7
 8019ebe:	f7e6 fbc3 	bl	8000648 <__aeabi_dmul>
 8019ec2:	2300      	movs	r3, #0
 8019ec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019ec8:	9302      	str	r3, [sp, #8]
 8019eca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8019ece:	46ab      	mov	fp, r5
 8019ed0:	106d      	asrs	r5, r5, #1
 8019ed2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8019ed6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8019eda:	ec41 0b18 	vmov	d8, r0, r1
 8019ede:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8019ee2:	2200      	movs	r2, #0
 8019ee4:	4640      	mov	r0, r8
 8019ee6:	4649      	mov	r1, r9
 8019ee8:	4614      	mov	r4, r2
 8019eea:	461d      	mov	r5, r3
 8019eec:	f7e6 fbac 	bl	8000648 <__aeabi_dmul>
 8019ef0:	4602      	mov	r2, r0
 8019ef2:	460b      	mov	r3, r1
 8019ef4:	4630      	mov	r0, r6
 8019ef6:	4639      	mov	r1, r7
 8019ef8:	f7e6 f9ee 	bl	80002d8 <__aeabi_dsub>
 8019efc:	ec53 2b19 	vmov	r2, r3, d9
 8019f00:	4606      	mov	r6, r0
 8019f02:	460f      	mov	r7, r1
 8019f04:	4620      	mov	r0, r4
 8019f06:	4629      	mov	r1, r5
 8019f08:	f7e6 f9e6 	bl	80002d8 <__aeabi_dsub>
 8019f0c:	4602      	mov	r2, r0
 8019f0e:	460b      	mov	r3, r1
 8019f10:	4650      	mov	r0, sl
 8019f12:	4659      	mov	r1, fp
 8019f14:	f7e6 f9e0 	bl	80002d8 <__aeabi_dsub>
 8019f18:	4642      	mov	r2, r8
 8019f1a:	464b      	mov	r3, r9
 8019f1c:	f7e6 fb94 	bl	8000648 <__aeabi_dmul>
 8019f20:	4602      	mov	r2, r0
 8019f22:	460b      	mov	r3, r1
 8019f24:	4630      	mov	r0, r6
 8019f26:	4639      	mov	r1, r7
 8019f28:	f7e6 f9d6 	bl	80002d8 <__aeabi_dsub>
 8019f2c:	ec53 2b1a 	vmov	r2, r3, d10
 8019f30:	f7e6 fb8a 	bl	8000648 <__aeabi_dmul>
 8019f34:	ec53 2b18 	vmov	r2, r3, d8
 8019f38:	ec41 0b19 	vmov	d9, r0, r1
 8019f3c:	ec51 0b18 	vmov	r0, r1, d8
 8019f40:	f7e6 fb82 	bl	8000648 <__aeabi_dmul>
 8019f44:	a37c      	add	r3, pc, #496	; (adr r3, 801a138 <__ieee754_pow+0x708>)
 8019f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f4a:	4604      	mov	r4, r0
 8019f4c:	460d      	mov	r5, r1
 8019f4e:	f7e6 fb7b 	bl	8000648 <__aeabi_dmul>
 8019f52:	a37b      	add	r3, pc, #492	; (adr r3, 801a140 <__ieee754_pow+0x710>)
 8019f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f58:	f7e6 f9c0 	bl	80002dc <__adddf3>
 8019f5c:	4622      	mov	r2, r4
 8019f5e:	462b      	mov	r3, r5
 8019f60:	f7e6 fb72 	bl	8000648 <__aeabi_dmul>
 8019f64:	a378      	add	r3, pc, #480	; (adr r3, 801a148 <__ieee754_pow+0x718>)
 8019f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f6a:	f7e6 f9b7 	bl	80002dc <__adddf3>
 8019f6e:	4622      	mov	r2, r4
 8019f70:	462b      	mov	r3, r5
 8019f72:	f7e6 fb69 	bl	8000648 <__aeabi_dmul>
 8019f76:	a376      	add	r3, pc, #472	; (adr r3, 801a150 <__ieee754_pow+0x720>)
 8019f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f7c:	f7e6 f9ae 	bl	80002dc <__adddf3>
 8019f80:	4622      	mov	r2, r4
 8019f82:	462b      	mov	r3, r5
 8019f84:	f7e6 fb60 	bl	8000648 <__aeabi_dmul>
 8019f88:	a373      	add	r3, pc, #460	; (adr r3, 801a158 <__ieee754_pow+0x728>)
 8019f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f8e:	f7e6 f9a5 	bl	80002dc <__adddf3>
 8019f92:	4622      	mov	r2, r4
 8019f94:	462b      	mov	r3, r5
 8019f96:	f7e6 fb57 	bl	8000648 <__aeabi_dmul>
 8019f9a:	a371      	add	r3, pc, #452	; (adr r3, 801a160 <__ieee754_pow+0x730>)
 8019f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fa0:	f7e6 f99c 	bl	80002dc <__adddf3>
 8019fa4:	4622      	mov	r2, r4
 8019fa6:	4606      	mov	r6, r0
 8019fa8:	460f      	mov	r7, r1
 8019faa:	462b      	mov	r3, r5
 8019fac:	4620      	mov	r0, r4
 8019fae:	4629      	mov	r1, r5
 8019fb0:	f7e6 fb4a 	bl	8000648 <__aeabi_dmul>
 8019fb4:	4602      	mov	r2, r0
 8019fb6:	460b      	mov	r3, r1
 8019fb8:	4630      	mov	r0, r6
 8019fba:	4639      	mov	r1, r7
 8019fbc:	f7e6 fb44 	bl	8000648 <__aeabi_dmul>
 8019fc0:	4642      	mov	r2, r8
 8019fc2:	4604      	mov	r4, r0
 8019fc4:	460d      	mov	r5, r1
 8019fc6:	464b      	mov	r3, r9
 8019fc8:	ec51 0b18 	vmov	r0, r1, d8
 8019fcc:	f7e6 f986 	bl	80002dc <__adddf3>
 8019fd0:	ec53 2b19 	vmov	r2, r3, d9
 8019fd4:	f7e6 fb38 	bl	8000648 <__aeabi_dmul>
 8019fd8:	4622      	mov	r2, r4
 8019fda:	462b      	mov	r3, r5
 8019fdc:	f7e6 f97e 	bl	80002dc <__adddf3>
 8019fe0:	4642      	mov	r2, r8
 8019fe2:	4682      	mov	sl, r0
 8019fe4:	468b      	mov	fp, r1
 8019fe6:	464b      	mov	r3, r9
 8019fe8:	4640      	mov	r0, r8
 8019fea:	4649      	mov	r1, r9
 8019fec:	f7e6 fb2c 	bl	8000648 <__aeabi_dmul>
 8019ff0:	4b6b      	ldr	r3, [pc, #428]	; (801a1a0 <__ieee754_pow+0x770>)
 8019ff2:	2200      	movs	r2, #0
 8019ff4:	4606      	mov	r6, r0
 8019ff6:	460f      	mov	r7, r1
 8019ff8:	f7e6 f970 	bl	80002dc <__adddf3>
 8019ffc:	4652      	mov	r2, sl
 8019ffe:	465b      	mov	r3, fp
 801a000:	f7e6 f96c 	bl	80002dc <__adddf3>
 801a004:	2000      	movs	r0, #0
 801a006:	4604      	mov	r4, r0
 801a008:	460d      	mov	r5, r1
 801a00a:	4602      	mov	r2, r0
 801a00c:	460b      	mov	r3, r1
 801a00e:	4640      	mov	r0, r8
 801a010:	4649      	mov	r1, r9
 801a012:	f7e6 fb19 	bl	8000648 <__aeabi_dmul>
 801a016:	4b62      	ldr	r3, [pc, #392]	; (801a1a0 <__ieee754_pow+0x770>)
 801a018:	4680      	mov	r8, r0
 801a01a:	4689      	mov	r9, r1
 801a01c:	2200      	movs	r2, #0
 801a01e:	4620      	mov	r0, r4
 801a020:	4629      	mov	r1, r5
 801a022:	f7e6 f959 	bl	80002d8 <__aeabi_dsub>
 801a026:	4632      	mov	r2, r6
 801a028:	463b      	mov	r3, r7
 801a02a:	f7e6 f955 	bl	80002d8 <__aeabi_dsub>
 801a02e:	4602      	mov	r2, r0
 801a030:	460b      	mov	r3, r1
 801a032:	4650      	mov	r0, sl
 801a034:	4659      	mov	r1, fp
 801a036:	f7e6 f94f 	bl	80002d8 <__aeabi_dsub>
 801a03a:	ec53 2b18 	vmov	r2, r3, d8
 801a03e:	f7e6 fb03 	bl	8000648 <__aeabi_dmul>
 801a042:	4622      	mov	r2, r4
 801a044:	4606      	mov	r6, r0
 801a046:	460f      	mov	r7, r1
 801a048:	462b      	mov	r3, r5
 801a04a:	ec51 0b19 	vmov	r0, r1, d9
 801a04e:	f7e6 fafb 	bl	8000648 <__aeabi_dmul>
 801a052:	4602      	mov	r2, r0
 801a054:	460b      	mov	r3, r1
 801a056:	4630      	mov	r0, r6
 801a058:	4639      	mov	r1, r7
 801a05a:	f7e6 f93f 	bl	80002dc <__adddf3>
 801a05e:	4606      	mov	r6, r0
 801a060:	460f      	mov	r7, r1
 801a062:	4602      	mov	r2, r0
 801a064:	460b      	mov	r3, r1
 801a066:	4640      	mov	r0, r8
 801a068:	4649      	mov	r1, r9
 801a06a:	f7e6 f937 	bl	80002dc <__adddf3>
 801a06e:	a33e      	add	r3, pc, #248	; (adr r3, 801a168 <__ieee754_pow+0x738>)
 801a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a074:	2000      	movs	r0, #0
 801a076:	4604      	mov	r4, r0
 801a078:	460d      	mov	r5, r1
 801a07a:	f7e6 fae5 	bl	8000648 <__aeabi_dmul>
 801a07e:	4642      	mov	r2, r8
 801a080:	ec41 0b18 	vmov	d8, r0, r1
 801a084:	464b      	mov	r3, r9
 801a086:	4620      	mov	r0, r4
 801a088:	4629      	mov	r1, r5
 801a08a:	f7e6 f925 	bl	80002d8 <__aeabi_dsub>
 801a08e:	4602      	mov	r2, r0
 801a090:	460b      	mov	r3, r1
 801a092:	4630      	mov	r0, r6
 801a094:	4639      	mov	r1, r7
 801a096:	f7e6 f91f 	bl	80002d8 <__aeabi_dsub>
 801a09a:	a335      	add	r3, pc, #212	; (adr r3, 801a170 <__ieee754_pow+0x740>)
 801a09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0a0:	f7e6 fad2 	bl	8000648 <__aeabi_dmul>
 801a0a4:	a334      	add	r3, pc, #208	; (adr r3, 801a178 <__ieee754_pow+0x748>)
 801a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0aa:	4606      	mov	r6, r0
 801a0ac:	460f      	mov	r7, r1
 801a0ae:	4620      	mov	r0, r4
 801a0b0:	4629      	mov	r1, r5
 801a0b2:	f7e6 fac9 	bl	8000648 <__aeabi_dmul>
 801a0b6:	4602      	mov	r2, r0
 801a0b8:	460b      	mov	r3, r1
 801a0ba:	4630      	mov	r0, r6
 801a0bc:	4639      	mov	r1, r7
 801a0be:	f7e6 f90d 	bl	80002dc <__adddf3>
 801a0c2:	9a07      	ldr	r2, [sp, #28]
 801a0c4:	4b37      	ldr	r3, [pc, #220]	; (801a1a4 <__ieee754_pow+0x774>)
 801a0c6:	4413      	add	r3, r2
 801a0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0cc:	f7e6 f906 	bl	80002dc <__adddf3>
 801a0d0:	4682      	mov	sl, r0
 801a0d2:	9805      	ldr	r0, [sp, #20]
 801a0d4:	468b      	mov	fp, r1
 801a0d6:	f7e6 fa4d 	bl	8000574 <__aeabi_i2d>
 801a0da:	9a07      	ldr	r2, [sp, #28]
 801a0dc:	4b32      	ldr	r3, [pc, #200]	; (801a1a8 <__ieee754_pow+0x778>)
 801a0de:	4413      	add	r3, r2
 801a0e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a0e4:	4606      	mov	r6, r0
 801a0e6:	460f      	mov	r7, r1
 801a0e8:	4652      	mov	r2, sl
 801a0ea:	465b      	mov	r3, fp
 801a0ec:	ec51 0b18 	vmov	r0, r1, d8
 801a0f0:	f7e6 f8f4 	bl	80002dc <__adddf3>
 801a0f4:	4642      	mov	r2, r8
 801a0f6:	464b      	mov	r3, r9
 801a0f8:	f7e6 f8f0 	bl	80002dc <__adddf3>
 801a0fc:	4632      	mov	r2, r6
 801a0fe:	463b      	mov	r3, r7
 801a100:	f7e6 f8ec 	bl	80002dc <__adddf3>
 801a104:	2000      	movs	r0, #0
 801a106:	4632      	mov	r2, r6
 801a108:	463b      	mov	r3, r7
 801a10a:	4604      	mov	r4, r0
 801a10c:	460d      	mov	r5, r1
 801a10e:	f7e6 f8e3 	bl	80002d8 <__aeabi_dsub>
 801a112:	4642      	mov	r2, r8
 801a114:	464b      	mov	r3, r9
 801a116:	f7e6 f8df 	bl	80002d8 <__aeabi_dsub>
 801a11a:	ec53 2b18 	vmov	r2, r3, d8
 801a11e:	f7e6 f8db 	bl	80002d8 <__aeabi_dsub>
 801a122:	4602      	mov	r2, r0
 801a124:	460b      	mov	r3, r1
 801a126:	4650      	mov	r0, sl
 801a128:	4659      	mov	r1, fp
 801a12a:	e610      	b.n	8019d4e <__ieee754_pow+0x31e>
 801a12c:	2401      	movs	r4, #1
 801a12e:	e6a1      	b.n	8019e74 <__ieee754_pow+0x444>
 801a130:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801a180 <__ieee754_pow+0x750>
 801a134:	e617      	b.n	8019d66 <__ieee754_pow+0x336>
 801a136:	bf00      	nop
 801a138:	4a454eef 	.word	0x4a454eef
 801a13c:	3fca7e28 	.word	0x3fca7e28
 801a140:	93c9db65 	.word	0x93c9db65
 801a144:	3fcd864a 	.word	0x3fcd864a
 801a148:	a91d4101 	.word	0xa91d4101
 801a14c:	3fd17460 	.word	0x3fd17460
 801a150:	518f264d 	.word	0x518f264d
 801a154:	3fd55555 	.word	0x3fd55555
 801a158:	db6fabff 	.word	0xdb6fabff
 801a15c:	3fdb6db6 	.word	0x3fdb6db6
 801a160:	33333303 	.word	0x33333303
 801a164:	3fe33333 	.word	0x3fe33333
 801a168:	e0000000 	.word	0xe0000000
 801a16c:	3feec709 	.word	0x3feec709
 801a170:	dc3a03fd 	.word	0xdc3a03fd
 801a174:	3feec709 	.word	0x3feec709
 801a178:	145b01f5 	.word	0x145b01f5
 801a17c:	be3e2fe0 	.word	0xbe3e2fe0
 801a180:	00000000 	.word	0x00000000
 801a184:	3ff00000 	.word	0x3ff00000
 801a188:	7ff00000 	.word	0x7ff00000
 801a18c:	43400000 	.word	0x43400000
 801a190:	0003988e 	.word	0x0003988e
 801a194:	000bb679 	.word	0x000bb679
 801a198:	0801c4b0 	.word	0x0801c4b0
 801a19c:	3ff00000 	.word	0x3ff00000
 801a1a0:	40080000 	.word	0x40080000
 801a1a4:	0801c4d0 	.word	0x0801c4d0
 801a1a8:	0801c4c0 	.word	0x0801c4c0
 801a1ac:	a3b3      	add	r3, pc, #716	; (adr r3, 801a47c <__ieee754_pow+0xa4c>)
 801a1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1b2:	4640      	mov	r0, r8
 801a1b4:	4649      	mov	r1, r9
 801a1b6:	f7e6 f891 	bl	80002dc <__adddf3>
 801a1ba:	4622      	mov	r2, r4
 801a1bc:	ec41 0b1a 	vmov	d10, r0, r1
 801a1c0:	462b      	mov	r3, r5
 801a1c2:	4630      	mov	r0, r6
 801a1c4:	4639      	mov	r1, r7
 801a1c6:	f7e6 f887 	bl	80002d8 <__aeabi_dsub>
 801a1ca:	4602      	mov	r2, r0
 801a1cc:	460b      	mov	r3, r1
 801a1ce:	ec51 0b1a 	vmov	r0, r1, d10
 801a1d2:	f7e6 fcc9 	bl	8000b68 <__aeabi_dcmpgt>
 801a1d6:	2800      	cmp	r0, #0
 801a1d8:	f47f ae04 	bne.w	8019de4 <__ieee754_pow+0x3b4>
 801a1dc:	4aa2      	ldr	r2, [pc, #648]	; (801a468 <__ieee754_pow+0xa38>)
 801a1de:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a1e2:	4293      	cmp	r3, r2
 801a1e4:	f340 8107 	ble.w	801a3f6 <__ieee754_pow+0x9c6>
 801a1e8:	151b      	asrs	r3, r3, #20
 801a1ea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801a1ee:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801a1f2:	fa4a fa03 	asr.w	sl, sl, r3
 801a1f6:	44da      	add	sl, fp
 801a1f8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801a1fc:	489b      	ldr	r0, [pc, #620]	; (801a46c <__ieee754_pow+0xa3c>)
 801a1fe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801a202:	4108      	asrs	r0, r1
 801a204:	ea00 030a 	and.w	r3, r0, sl
 801a208:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801a20c:	f1c1 0114 	rsb	r1, r1, #20
 801a210:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801a214:	fa4a fa01 	asr.w	sl, sl, r1
 801a218:	f1bb 0f00 	cmp.w	fp, #0
 801a21c:	f04f 0200 	mov.w	r2, #0
 801a220:	4620      	mov	r0, r4
 801a222:	4629      	mov	r1, r5
 801a224:	bfb8      	it	lt
 801a226:	f1ca 0a00 	rsblt	sl, sl, #0
 801a22a:	f7e6 f855 	bl	80002d8 <__aeabi_dsub>
 801a22e:	ec41 0b19 	vmov	d9, r0, r1
 801a232:	4642      	mov	r2, r8
 801a234:	464b      	mov	r3, r9
 801a236:	ec51 0b19 	vmov	r0, r1, d9
 801a23a:	f7e6 f84f 	bl	80002dc <__adddf3>
 801a23e:	a37a      	add	r3, pc, #488	; (adr r3, 801a428 <__ieee754_pow+0x9f8>)
 801a240:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a244:	2000      	movs	r0, #0
 801a246:	4604      	mov	r4, r0
 801a248:	460d      	mov	r5, r1
 801a24a:	f7e6 f9fd 	bl	8000648 <__aeabi_dmul>
 801a24e:	ec53 2b19 	vmov	r2, r3, d9
 801a252:	4606      	mov	r6, r0
 801a254:	460f      	mov	r7, r1
 801a256:	4620      	mov	r0, r4
 801a258:	4629      	mov	r1, r5
 801a25a:	f7e6 f83d 	bl	80002d8 <__aeabi_dsub>
 801a25e:	4602      	mov	r2, r0
 801a260:	460b      	mov	r3, r1
 801a262:	4640      	mov	r0, r8
 801a264:	4649      	mov	r1, r9
 801a266:	f7e6 f837 	bl	80002d8 <__aeabi_dsub>
 801a26a:	a371      	add	r3, pc, #452	; (adr r3, 801a430 <__ieee754_pow+0xa00>)
 801a26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a270:	f7e6 f9ea 	bl	8000648 <__aeabi_dmul>
 801a274:	a370      	add	r3, pc, #448	; (adr r3, 801a438 <__ieee754_pow+0xa08>)
 801a276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a27a:	4680      	mov	r8, r0
 801a27c:	4689      	mov	r9, r1
 801a27e:	4620      	mov	r0, r4
 801a280:	4629      	mov	r1, r5
 801a282:	f7e6 f9e1 	bl	8000648 <__aeabi_dmul>
 801a286:	4602      	mov	r2, r0
 801a288:	460b      	mov	r3, r1
 801a28a:	4640      	mov	r0, r8
 801a28c:	4649      	mov	r1, r9
 801a28e:	f7e6 f825 	bl	80002dc <__adddf3>
 801a292:	4604      	mov	r4, r0
 801a294:	460d      	mov	r5, r1
 801a296:	4602      	mov	r2, r0
 801a298:	460b      	mov	r3, r1
 801a29a:	4630      	mov	r0, r6
 801a29c:	4639      	mov	r1, r7
 801a29e:	f7e6 f81d 	bl	80002dc <__adddf3>
 801a2a2:	4632      	mov	r2, r6
 801a2a4:	463b      	mov	r3, r7
 801a2a6:	4680      	mov	r8, r0
 801a2a8:	4689      	mov	r9, r1
 801a2aa:	f7e6 f815 	bl	80002d8 <__aeabi_dsub>
 801a2ae:	4602      	mov	r2, r0
 801a2b0:	460b      	mov	r3, r1
 801a2b2:	4620      	mov	r0, r4
 801a2b4:	4629      	mov	r1, r5
 801a2b6:	f7e6 f80f 	bl	80002d8 <__aeabi_dsub>
 801a2ba:	4642      	mov	r2, r8
 801a2bc:	4606      	mov	r6, r0
 801a2be:	460f      	mov	r7, r1
 801a2c0:	464b      	mov	r3, r9
 801a2c2:	4640      	mov	r0, r8
 801a2c4:	4649      	mov	r1, r9
 801a2c6:	f7e6 f9bf 	bl	8000648 <__aeabi_dmul>
 801a2ca:	a35d      	add	r3, pc, #372	; (adr r3, 801a440 <__ieee754_pow+0xa10>)
 801a2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2d0:	4604      	mov	r4, r0
 801a2d2:	460d      	mov	r5, r1
 801a2d4:	f7e6 f9b8 	bl	8000648 <__aeabi_dmul>
 801a2d8:	a35b      	add	r3, pc, #364	; (adr r3, 801a448 <__ieee754_pow+0xa18>)
 801a2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2de:	f7e5 fffb 	bl	80002d8 <__aeabi_dsub>
 801a2e2:	4622      	mov	r2, r4
 801a2e4:	462b      	mov	r3, r5
 801a2e6:	f7e6 f9af 	bl	8000648 <__aeabi_dmul>
 801a2ea:	a359      	add	r3, pc, #356	; (adr r3, 801a450 <__ieee754_pow+0xa20>)
 801a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2f0:	f7e5 fff4 	bl	80002dc <__adddf3>
 801a2f4:	4622      	mov	r2, r4
 801a2f6:	462b      	mov	r3, r5
 801a2f8:	f7e6 f9a6 	bl	8000648 <__aeabi_dmul>
 801a2fc:	a356      	add	r3, pc, #344	; (adr r3, 801a458 <__ieee754_pow+0xa28>)
 801a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a302:	f7e5 ffe9 	bl	80002d8 <__aeabi_dsub>
 801a306:	4622      	mov	r2, r4
 801a308:	462b      	mov	r3, r5
 801a30a:	f7e6 f99d 	bl	8000648 <__aeabi_dmul>
 801a30e:	a354      	add	r3, pc, #336	; (adr r3, 801a460 <__ieee754_pow+0xa30>)
 801a310:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a314:	f7e5 ffe2 	bl	80002dc <__adddf3>
 801a318:	4622      	mov	r2, r4
 801a31a:	462b      	mov	r3, r5
 801a31c:	f7e6 f994 	bl	8000648 <__aeabi_dmul>
 801a320:	4602      	mov	r2, r0
 801a322:	460b      	mov	r3, r1
 801a324:	4640      	mov	r0, r8
 801a326:	4649      	mov	r1, r9
 801a328:	f7e5 ffd6 	bl	80002d8 <__aeabi_dsub>
 801a32c:	4604      	mov	r4, r0
 801a32e:	460d      	mov	r5, r1
 801a330:	4602      	mov	r2, r0
 801a332:	460b      	mov	r3, r1
 801a334:	4640      	mov	r0, r8
 801a336:	4649      	mov	r1, r9
 801a338:	f7e6 f986 	bl	8000648 <__aeabi_dmul>
 801a33c:	2200      	movs	r2, #0
 801a33e:	ec41 0b19 	vmov	d9, r0, r1
 801a342:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a346:	4620      	mov	r0, r4
 801a348:	4629      	mov	r1, r5
 801a34a:	f7e5 ffc5 	bl	80002d8 <__aeabi_dsub>
 801a34e:	4602      	mov	r2, r0
 801a350:	460b      	mov	r3, r1
 801a352:	ec51 0b19 	vmov	r0, r1, d9
 801a356:	f7e6 faa1 	bl	800089c <__aeabi_ddiv>
 801a35a:	4632      	mov	r2, r6
 801a35c:	4604      	mov	r4, r0
 801a35e:	460d      	mov	r5, r1
 801a360:	463b      	mov	r3, r7
 801a362:	4640      	mov	r0, r8
 801a364:	4649      	mov	r1, r9
 801a366:	f7e6 f96f 	bl	8000648 <__aeabi_dmul>
 801a36a:	4632      	mov	r2, r6
 801a36c:	463b      	mov	r3, r7
 801a36e:	f7e5 ffb5 	bl	80002dc <__adddf3>
 801a372:	4602      	mov	r2, r0
 801a374:	460b      	mov	r3, r1
 801a376:	4620      	mov	r0, r4
 801a378:	4629      	mov	r1, r5
 801a37a:	f7e5 ffad 	bl	80002d8 <__aeabi_dsub>
 801a37e:	4642      	mov	r2, r8
 801a380:	464b      	mov	r3, r9
 801a382:	f7e5 ffa9 	bl	80002d8 <__aeabi_dsub>
 801a386:	460b      	mov	r3, r1
 801a388:	4602      	mov	r2, r0
 801a38a:	4939      	ldr	r1, [pc, #228]	; (801a470 <__ieee754_pow+0xa40>)
 801a38c:	2000      	movs	r0, #0
 801a38e:	f7e5 ffa3 	bl	80002d8 <__aeabi_dsub>
 801a392:	ec41 0b10 	vmov	d0, r0, r1
 801a396:	ee10 3a90 	vmov	r3, s1
 801a39a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801a39e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a3a2:	da2b      	bge.n	801a3fc <__ieee754_pow+0x9cc>
 801a3a4:	4650      	mov	r0, sl
 801a3a6:	f000 ff6f 	bl	801b288 <scalbn>
 801a3aa:	ec51 0b10 	vmov	r0, r1, d0
 801a3ae:	ec53 2b18 	vmov	r2, r3, d8
 801a3b2:	f7ff bbee 	b.w	8019b92 <__ieee754_pow+0x162>
 801a3b6:	4b2f      	ldr	r3, [pc, #188]	; (801a474 <__ieee754_pow+0xa44>)
 801a3b8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801a3bc:	429e      	cmp	r6, r3
 801a3be:	f77f af0d 	ble.w	801a1dc <__ieee754_pow+0x7ac>
 801a3c2:	4b2d      	ldr	r3, [pc, #180]	; (801a478 <__ieee754_pow+0xa48>)
 801a3c4:	440b      	add	r3, r1
 801a3c6:	4303      	orrs	r3, r0
 801a3c8:	d009      	beq.n	801a3de <__ieee754_pow+0x9ae>
 801a3ca:	ec51 0b18 	vmov	r0, r1, d8
 801a3ce:	2200      	movs	r2, #0
 801a3d0:	2300      	movs	r3, #0
 801a3d2:	f7e6 fbab 	bl	8000b2c <__aeabi_dcmplt>
 801a3d6:	3800      	subs	r0, #0
 801a3d8:	bf18      	it	ne
 801a3da:	2001      	movne	r0, #1
 801a3dc:	e448      	b.n	8019c70 <__ieee754_pow+0x240>
 801a3de:	4622      	mov	r2, r4
 801a3e0:	462b      	mov	r3, r5
 801a3e2:	f7e5 ff79 	bl	80002d8 <__aeabi_dsub>
 801a3e6:	4642      	mov	r2, r8
 801a3e8:	464b      	mov	r3, r9
 801a3ea:	f7e6 fbb3 	bl	8000b54 <__aeabi_dcmpge>
 801a3ee:	2800      	cmp	r0, #0
 801a3f0:	f43f aef4 	beq.w	801a1dc <__ieee754_pow+0x7ac>
 801a3f4:	e7e9      	b.n	801a3ca <__ieee754_pow+0x99a>
 801a3f6:	f04f 0a00 	mov.w	sl, #0
 801a3fa:	e71a      	b.n	801a232 <__ieee754_pow+0x802>
 801a3fc:	ec51 0b10 	vmov	r0, r1, d0
 801a400:	4619      	mov	r1, r3
 801a402:	e7d4      	b.n	801a3ae <__ieee754_pow+0x97e>
 801a404:	491a      	ldr	r1, [pc, #104]	; (801a470 <__ieee754_pow+0xa40>)
 801a406:	2000      	movs	r0, #0
 801a408:	f7ff bb31 	b.w	8019a6e <__ieee754_pow+0x3e>
 801a40c:	2000      	movs	r0, #0
 801a40e:	2100      	movs	r1, #0
 801a410:	f7ff bb2d 	b.w	8019a6e <__ieee754_pow+0x3e>
 801a414:	4630      	mov	r0, r6
 801a416:	4639      	mov	r1, r7
 801a418:	f7ff bb29 	b.w	8019a6e <__ieee754_pow+0x3e>
 801a41c:	9204      	str	r2, [sp, #16]
 801a41e:	f7ff bb7b 	b.w	8019b18 <__ieee754_pow+0xe8>
 801a422:	2300      	movs	r3, #0
 801a424:	f7ff bb65 	b.w	8019af2 <__ieee754_pow+0xc2>
 801a428:	00000000 	.word	0x00000000
 801a42c:	3fe62e43 	.word	0x3fe62e43
 801a430:	fefa39ef 	.word	0xfefa39ef
 801a434:	3fe62e42 	.word	0x3fe62e42
 801a438:	0ca86c39 	.word	0x0ca86c39
 801a43c:	be205c61 	.word	0xbe205c61
 801a440:	72bea4d0 	.word	0x72bea4d0
 801a444:	3e663769 	.word	0x3e663769
 801a448:	c5d26bf1 	.word	0xc5d26bf1
 801a44c:	3ebbbd41 	.word	0x3ebbbd41
 801a450:	af25de2c 	.word	0xaf25de2c
 801a454:	3f11566a 	.word	0x3f11566a
 801a458:	16bebd93 	.word	0x16bebd93
 801a45c:	3f66c16c 	.word	0x3f66c16c
 801a460:	5555553e 	.word	0x5555553e
 801a464:	3fc55555 	.word	0x3fc55555
 801a468:	3fe00000 	.word	0x3fe00000
 801a46c:	fff00000 	.word	0xfff00000
 801a470:	3ff00000 	.word	0x3ff00000
 801a474:	4090cbff 	.word	0x4090cbff
 801a478:	3f6f3400 	.word	0x3f6f3400
 801a47c:	652b82fe 	.word	0x652b82fe
 801a480:	3c971547 	.word	0x3c971547

0801a484 <fabs>:
 801a484:	ec51 0b10 	vmov	r0, r1, d0
 801a488:	ee10 2a10 	vmov	r2, s0
 801a48c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a490:	ec43 2b10 	vmov	d0, r2, r3
 801a494:	4770      	bx	lr
	...

0801a498 <__kernel_cosf>:
 801a498:	ee10 3a10 	vmov	r3, s0
 801a49c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a4a0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801a4a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a4a8:	da05      	bge.n	801a4b6 <__kernel_cosf+0x1e>
 801a4aa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a4ae:	ee17 2a90 	vmov	r2, s15
 801a4b2:	2a00      	cmp	r2, #0
 801a4b4:	d03b      	beq.n	801a52e <__kernel_cosf+0x96>
 801a4b6:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a4ba:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801a534 <__kernel_cosf+0x9c>
 801a4be:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801a538 <__kernel_cosf+0xa0>
 801a4c2:	4a1e      	ldr	r2, [pc, #120]	; (801a53c <__kernel_cosf+0xa4>)
 801a4c4:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a4c8:	4293      	cmp	r3, r2
 801a4ca:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801a540 <__kernel_cosf+0xa8>
 801a4ce:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a4d2:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 801a544 <__kernel_cosf+0xac>
 801a4d6:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a4da:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801a548 <__kernel_cosf+0xb0>
 801a4de:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a4e2:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 801a54c <__kernel_cosf+0xb4>
 801a4e6:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a4ea:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801a4ee:	ee26 6a07 	vmul.f32	s12, s12, s14
 801a4f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a4f6:	eee7 0a06 	vfma.f32	s1, s14, s12
 801a4fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a4fe:	dc04      	bgt.n	801a50a <__kernel_cosf+0x72>
 801a500:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801a504:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801a508:	4770      	bx	lr
 801a50a:	4a11      	ldr	r2, [pc, #68]	; (801a550 <__kernel_cosf+0xb8>)
 801a50c:	4293      	cmp	r3, r2
 801a50e:	bfda      	itte	le
 801a510:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801a514:	ee07 3a10 	vmovle	s14, r3
 801a518:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 801a51c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a520:	ee36 0ac7 	vsub.f32	s0, s13, s14
 801a524:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801a528:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a52c:	4770      	bx	lr
 801a52e:	eeb0 0a66 	vmov.f32	s0, s13
 801a532:	4770      	bx	lr
 801a534:	ad47d74e 	.word	0xad47d74e
 801a538:	310f74f6 	.word	0x310f74f6
 801a53c:	3e999999 	.word	0x3e999999
 801a540:	b493f27c 	.word	0xb493f27c
 801a544:	37d00d01 	.word	0x37d00d01
 801a548:	bab60b61 	.word	0xbab60b61
 801a54c:	3d2aaaab 	.word	0x3d2aaaab
 801a550:	3f480000 	.word	0x3f480000

0801a554 <__kernel_sinf>:
 801a554:	ee10 3a10 	vmov	r3, s0
 801a558:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a55c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801a560:	da04      	bge.n	801a56c <__kernel_sinf+0x18>
 801a562:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a566:	ee17 3a90 	vmov	r3, s15
 801a56a:	b35b      	cbz	r3, 801a5c4 <__kernel_sinf+0x70>
 801a56c:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a570:	eddf 7a15 	vldr	s15, [pc, #84]	; 801a5c8 <__kernel_sinf+0x74>
 801a574:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801a5cc <__kernel_sinf+0x78>
 801a578:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a57c:	eddf 7a14 	vldr	s15, [pc, #80]	; 801a5d0 <__kernel_sinf+0x7c>
 801a580:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a584:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801a5d4 <__kernel_sinf+0x80>
 801a588:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a58c:	eddf 7a12 	vldr	s15, [pc, #72]	; 801a5d8 <__kernel_sinf+0x84>
 801a590:	ee60 6a07 	vmul.f32	s13, s0, s14
 801a594:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a598:	b930      	cbnz	r0, 801a5a8 <__kernel_sinf+0x54>
 801a59a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801a5dc <__kernel_sinf+0x88>
 801a59e:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a5a2:	eea6 0a26 	vfma.f32	s0, s12, s13
 801a5a6:	4770      	bx	lr
 801a5a8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801a5ac:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801a5b0:	eee0 7a86 	vfma.f32	s15, s1, s12
 801a5b4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801a5b8:	eddf 7a09 	vldr	s15, [pc, #36]	; 801a5e0 <__kernel_sinf+0x8c>
 801a5bc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801a5c0:	ee30 0a60 	vsub.f32	s0, s0, s1
 801a5c4:	4770      	bx	lr
 801a5c6:	bf00      	nop
 801a5c8:	2f2ec9d3 	.word	0x2f2ec9d3
 801a5cc:	b2d72f34 	.word	0xb2d72f34
 801a5d0:	3638ef1b 	.word	0x3638ef1b
 801a5d4:	b9500d01 	.word	0xb9500d01
 801a5d8:	3c088889 	.word	0x3c088889
 801a5dc:	be2aaaab 	.word	0xbe2aaaab
 801a5e0:	3e2aaaab 	.word	0x3e2aaaab

0801a5e4 <__ieee754_asinf>:
 801a5e4:	b538      	push	{r3, r4, r5, lr}
 801a5e6:	ee10 5a10 	vmov	r5, s0
 801a5ea:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801a5ee:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801a5f2:	ed2d 8b04 	vpush	{d8-d9}
 801a5f6:	d10c      	bne.n	801a612 <__ieee754_asinf+0x2e>
 801a5f8:	eddf 7a5d 	vldr	s15, [pc, #372]	; 801a770 <__ieee754_asinf+0x18c>
 801a5fc:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801a774 <__ieee754_asinf+0x190>
 801a600:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a604:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a608:	eeb0 0a67 	vmov.f32	s0, s15
 801a60c:	ecbd 8b04 	vpop	{d8-d9}
 801a610:	bd38      	pop	{r3, r4, r5, pc}
 801a612:	dd04      	ble.n	801a61e <__ieee754_asinf+0x3a>
 801a614:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a618:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801a61c:	e7f6      	b.n	801a60c <__ieee754_asinf+0x28>
 801a61e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801a622:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801a626:	da0b      	bge.n	801a640 <__ieee754_asinf+0x5c>
 801a628:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 801a62c:	da52      	bge.n	801a6d4 <__ieee754_asinf+0xf0>
 801a62e:	eddf 7a52 	vldr	s15, [pc, #328]	; 801a778 <__ieee754_asinf+0x194>
 801a632:	ee70 7a27 	vadd.f32	s15, s0, s15
 801a636:	eef4 7ae8 	vcmpe.f32	s15, s17
 801a63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a63e:	dce5      	bgt.n	801a60c <__ieee754_asinf+0x28>
 801a640:	f7ff f8b0 	bl	80197a4 <fabsf>
 801a644:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801a648:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a64c:	ee20 8a27 	vmul.f32	s16, s0, s15
 801a650:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801a77c <__ieee754_asinf+0x198>
 801a654:	eddf 7a4a 	vldr	s15, [pc, #296]	; 801a780 <__ieee754_asinf+0x19c>
 801a658:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 801a784 <__ieee754_asinf+0x1a0>
 801a65c:	eea8 7a27 	vfma.f32	s14, s16, s15
 801a660:	eddf 7a49 	vldr	s15, [pc, #292]	; 801a788 <__ieee754_asinf+0x1a4>
 801a664:	eee7 7a08 	vfma.f32	s15, s14, s16
 801a668:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801a78c <__ieee754_asinf+0x1a8>
 801a66c:	eea7 7a88 	vfma.f32	s14, s15, s16
 801a670:	eddf 7a47 	vldr	s15, [pc, #284]	; 801a790 <__ieee754_asinf+0x1ac>
 801a674:	eee7 7a08 	vfma.f32	s15, s14, s16
 801a678:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801a794 <__ieee754_asinf+0x1b0>
 801a67c:	eea7 9a88 	vfma.f32	s18, s15, s16
 801a680:	eddf 7a45 	vldr	s15, [pc, #276]	; 801a798 <__ieee754_asinf+0x1b4>
 801a684:	eee8 7a07 	vfma.f32	s15, s16, s14
 801a688:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801a79c <__ieee754_asinf+0x1b8>
 801a68c:	eea7 7a88 	vfma.f32	s14, s15, s16
 801a690:	eddf 7a43 	vldr	s15, [pc, #268]	; 801a7a0 <__ieee754_asinf+0x1bc>
 801a694:	eee7 7a08 	vfma.f32	s15, s14, s16
 801a698:	eeb0 0a48 	vmov.f32	s0, s16
 801a69c:	eee7 8a88 	vfma.f32	s17, s15, s16
 801a6a0:	f7ff f9c0 	bl	8019a24 <__ieee754_sqrtf>
 801a6a4:	4b3f      	ldr	r3, [pc, #252]	; (801a7a4 <__ieee754_asinf+0x1c0>)
 801a6a6:	ee29 9a08 	vmul.f32	s18, s18, s16
 801a6aa:	429c      	cmp	r4, r3
 801a6ac:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801a6b0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801a6b4:	dd3d      	ble.n	801a732 <__ieee754_asinf+0x14e>
 801a6b6:	eea0 0a06 	vfma.f32	s0, s0, s12
 801a6ba:	eddf 7a3b 	vldr	s15, [pc, #236]	; 801a7a8 <__ieee754_asinf+0x1c4>
 801a6be:	eee0 7a26 	vfma.f32	s15, s0, s13
 801a6c2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801a774 <__ieee754_asinf+0x190>
 801a6c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a6ca:	2d00      	cmp	r5, #0
 801a6cc:	bfd8      	it	le
 801a6ce:	eeb1 0a40 	vnegle.f32	s0, s0
 801a6d2:	e79b      	b.n	801a60c <__ieee754_asinf+0x28>
 801a6d4:	ee60 7a00 	vmul.f32	s15, s0, s0
 801a6d8:	eddf 6a29 	vldr	s13, [pc, #164]	; 801a780 <__ieee754_asinf+0x19c>
 801a6dc:	ed9f 7a27 	vldr	s14, [pc, #156]	; 801a77c <__ieee754_asinf+0x198>
 801a6e0:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 801a794 <__ieee754_asinf+0x1b0>
 801a6e4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801a6e8:	eddf 6a27 	vldr	s13, [pc, #156]	; 801a788 <__ieee754_asinf+0x1a4>
 801a6ec:	eee7 6a27 	vfma.f32	s13, s14, s15
 801a6f0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 801a78c <__ieee754_asinf+0x1a8>
 801a6f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a6f8:	eddf 6a25 	vldr	s13, [pc, #148]	; 801a790 <__ieee754_asinf+0x1ac>
 801a6fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 801a700:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801a784 <__ieee754_asinf+0x1a0>
 801a704:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a708:	eddf 6a23 	vldr	s13, [pc, #140]	; 801a798 <__ieee754_asinf+0x1b4>
 801a70c:	eee7 6a86 	vfma.f32	s13, s15, s12
 801a710:	ed9f 6a22 	vldr	s12, [pc, #136]	; 801a79c <__ieee754_asinf+0x1b8>
 801a714:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801a718:	eddf 6a21 	vldr	s13, [pc, #132]	; 801a7a0 <__ieee754_asinf+0x1bc>
 801a71c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a720:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a724:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801a728:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801a72c:	eea0 0a27 	vfma.f32	s0, s0, s15
 801a730:	e76c      	b.n	801a60c <__ieee754_asinf+0x28>
 801a732:	ee10 3a10 	vmov	r3, s0
 801a736:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801a73a:	f023 030f 	bic.w	r3, r3, #15
 801a73e:	ee07 3a10 	vmov	s14, r3
 801a742:	eea7 8a47 	vfms.f32	s16, s14, s14
 801a746:	ee70 7a07 	vadd.f32	s15, s0, s14
 801a74a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a74e:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801a752:	eddf 7a07 	vldr	s15, [pc, #28]	; 801a770 <__ieee754_asinf+0x18c>
 801a756:	eee5 7ae6 	vfms.f32	s15, s11, s13
 801a75a:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801a75e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 801a7ac <__ieee754_asinf+0x1c8>
 801a762:	eeb0 6a40 	vmov.f32	s12, s0
 801a766:	eea7 6a66 	vfms.f32	s12, s14, s13
 801a76a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801a76e:	e7aa      	b.n	801a6c6 <__ieee754_asinf+0xe2>
 801a770:	b33bbd2e 	.word	0xb33bbd2e
 801a774:	3fc90fdb 	.word	0x3fc90fdb
 801a778:	7149f2ca 	.word	0x7149f2ca
 801a77c:	3a4f7f04 	.word	0x3a4f7f04
 801a780:	3811ef08 	.word	0x3811ef08
 801a784:	3e2aaaab 	.word	0x3e2aaaab
 801a788:	bd241146 	.word	0xbd241146
 801a78c:	3e4e0aa8 	.word	0x3e4e0aa8
 801a790:	bea6b090 	.word	0xbea6b090
 801a794:	3d9dc62e 	.word	0x3d9dc62e
 801a798:	bf303361 	.word	0xbf303361
 801a79c:	4001572d 	.word	0x4001572d
 801a7a0:	c019d139 	.word	0xc019d139
 801a7a4:	3f799999 	.word	0x3f799999
 801a7a8:	333bbd2e 	.word	0x333bbd2e
 801a7ac:	3f490fdb 	.word	0x3f490fdb

0801a7b0 <__ieee754_atan2f>:
 801a7b0:	ee10 2a90 	vmov	r2, s1
 801a7b4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801a7b8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801a7bc:	b510      	push	{r4, lr}
 801a7be:	eef0 7a40 	vmov.f32	s15, s0
 801a7c2:	dc06      	bgt.n	801a7d2 <__ieee754_atan2f+0x22>
 801a7c4:	ee10 0a10 	vmov	r0, s0
 801a7c8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801a7cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a7d0:	dd04      	ble.n	801a7dc <__ieee754_atan2f+0x2c>
 801a7d2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801a7d6:	eeb0 0a67 	vmov.f32	s0, s15
 801a7da:	bd10      	pop	{r4, pc}
 801a7dc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801a7e0:	d103      	bne.n	801a7ea <__ieee754_atan2f+0x3a>
 801a7e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a7e6:	f000 bc79 	b.w	801b0dc <atanf>
 801a7ea:	1794      	asrs	r4, r2, #30
 801a7ec:	f004 0402 	and.w	r4, r4, #2
 801a7f0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801a7f4:	b943      	cbnz	r3, 801a808 <__ieee754_atan2f+0x58>
 801a7f6:	2c02      	cmp	r4, #2
 801a7f8:	d05e      	beq.n	801a8b8 <__ieee754_atan2f+0x108>
 801a7fa:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801a8cc <__ieee754_atan2f+0x11c>
 801a7fe:	2c03      	cmp	r4, #3
 801a800:	bf08      	it	eq
 801a802:	eef0 7a47 	vmoveq.f32	s15, s14
 801a806:	e7e6      	b.n	801a7d6 <__ieee754_atan2f+0x26>
 801a808:	b941      	cbnz	r1, 801a81c <__ieee754_atan2f+0x6c>
 801a80a:	eddf 7a31 	vldr	s15, [pc, #196]	; 801a8d0 <__ieee754_atan2f+0x120>
 801a80e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801a8d4 <__ieee754_atan2f+0x124>
 801a812:	2800      	cmp	r0, #0
 801a814:	bfb8      	it	lt
 801a816:	eef0 7a47 	vmovlt.f32	s15, s14
 801a81a:	e7dc      	b.n	801a7d6 <__ieee754_atan2f+0x26>
 801a81c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801a820:	d110      	bne.n	801a844 <__ieee754_atan2f+0x94>
 801a822:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a826:	f104 34ff 	add.w	r4, r4, #4294967295
 801a82a:	d107      	bne.n	801a83c <__ieee754_atan2f+0x8c>
 801a82c:	2c02      	cmp	r4, #2
 801a82e:	d846      	bhi.n	801a8be <__ieee754_atan2f+0x10e>
 801a830:	4b29      	ldr	r3, [pc, #164]	; (801a8d8 <__ieee754_atan2f+0x128>)
 801a832:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a836:	edd3 7a00 	vldr	s15, [r3]
 801a83a:	e7cc      	b.n	801a7d6 <__ieee754_atan2f+0x26>
 801a83c:	2c02      	cmp	r4, #2
 801a83e:	d841      	bhi.n	801a8c4 <__ieee754_atan2f+0x114>
 801a840:	4b26      	ldr	r3, [pc, #152]	; (801a8dc <__ieee754_atan2f+0x12c>)
 801a842:	e7f6      	b.n	801a832 <__ieee754_atan2f+0x82>
 801a844:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a848:	d0df      	beq.n	801a80a <__ieee754_atan2f+0x5a>
 801a84a:	1a5b      	subs	r3, r3, r1
 801a84c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801a850:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801a854:	da1a      	bge.n	801a88c <__ieee754_atan2f+0xdc>
 801a856:	2a00      	cmp	r2, #0
 801a858:	da01      	bge.n	801a85e <__ieee754_atan2f+0xae>
 801a85a:	313c      	adds	r1, #60	; 0x3c
 801a85c:	db19      	blt.n	801a892 <__ieee754_atan2f+0xe2>
 801a85e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801a862:	f7fe ff9f 	bl	80197a4 <fabsf>
 801a866:	f000 fc39 	bl	801b0dc <atanf>
 801a86a:	eef0 7a40 	vmov.f32	s15, s0
 801a86e:	2c01      	cmp	r4, #1
 801a870:	d012      	beq.n	801a898 <__ieee754_atan2f+0xe8>
 801a872:	2c02      	cmp	r4, #2
 801a874:	d017      	beq.n	801a8a6 <__ieee754_atan2f+0xf6>
 801a876:	2c00      	cmp	r4, #0
 801a878:	d0ad      	beq.n	801a7d6 <__ieee754_atan2f+0x26>
 801a87a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801a8e0 <__ieee754_atan2f+0x130>
 801a87e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a882:	ed9f 7a18 	vldr	s14, [pc, #96]	; 801a8e4 <__ieee754_atan2f+0x134>
 801a886:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a88a:	e7a4      	b.n	801a7d6 <__ieee754_atan2f+0x26>
 801a88c:	eddf 7a10 	vldr	s15, [pc, #64]	; 801a8d0 <__ieee754_atan2f+0x120>
 801a890:	e7ed      	b.n	801a86e <__ieee754_atan2f+0xbe>
 801a892:	eddf 7a15 	vldr	s15, [pc, #84]	; 801a8e8 <__ieee754_atan2f+0x138>
 801a896:	e7ea      	b.n	801a86e <__ieee754_atan2f+0xbe>
 801a898:	ee17 3a90 	vmov	r3, s15
 801a89c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a8a0:	ee07 3a90 	vmov	s15, r3
 801a8a4:	e797      	b.n	801a7d6 <__ieee754_atan2f+0x26>
 801a8a6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 801a8e0 <__ieee754_atan2f+0x130>
 801a8aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a8ae:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801a8e4 <__ieee754_atan2f+0x134>
 801a8b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a8b6:	e78e      	b.n	801a7d6 <__ieee754_atan2f+0x26>
 801a8b8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801a8e4 <__ieee754_atan2f+0x134>
 801a8bc:	e78b      	b.n	801a7d6 <__ieee754_atan2f+0x26>
 801a8be:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801a8ec <__ieee754_atan2f+0x13c>
 801a8c2:	e788      	b.n	801a7d6 <__ieee754_atan2f+0x26>
 801a8c4:	eddf 7a08 	vldr	s15, [pc, #32]	; 801a8e8 <__ieee754_atan2f+0x138>
 801a8c8:	e785      	b.n	801a7d6 <__ieee754_atan2f+0x26>
 801a8ca:	bf00      	nop
 801a8cc:	c0490fdb 	.word	0xc0490fdb
 801a8d0:	3fc90fdb 	.word	0x3fc90fdb
 801a8d4:	bfc90fdb 	.word	0xbfc90fdb
 801a8d8:	0801c4e0 	.word	0x0801c4e0
 801a8dc:	0801c4ec 	.word	0x0801c4ec
 801a8e0:	33bbbd2e 	.word	0x33bbbd2e
 801a8e4:	40490fdb 	.word	0x40490fdb
 801a8e8:	00000000 	.word	0x00000000
 801a8ec:	3f490fdb 	.word	0x3f490fdb

0801a8f0 <__ieee754_powf>:
 801a8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8f4:	ee10 4a90 	vmov	r4, s1
 801a8f8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 801a8fc:	ed2d 8b02 	vpush	{d8}
 801a900:	ee10 7a10 	vmov	r7, s0
 801a904:	eeb0 8a40 	vmov.f32	s16, s0
 801a908:	eef0 8a60 	vmov.f32	s17, s1
 801a90c:	d10c      	bne.n	801a928 <__ieee754_powf+0x38>
 801a90e:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 801a912:	007f      	lsls	r7, r7, #1
 801a914:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 801a918:	f240 8292 	bls.w	801ae40 <__ieee754_powf+0x550>
 801a91c:	ee38 0a28 	vadd.f32	s0, s16, s17
 801a920:	ecbd 8b02 	vpop	{d8}
 801a924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a928:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 801a92c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801a930:	dcf4      	bgt.n	801a91c <__ieee754_powf+0x2c>
 801a932:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801a936:	dd08      	ble.n	801a94a <__ieee754_powf+0x5a>
 801a938:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801a93c:	d1ee      	bne.n	801a91c <__ieee754_powf+0x2c>
 801a93e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801a942:	0064      	lsls	r4, r4, #1
 801a944:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801a948:	e7e6      	b.n	801a918 <__ieee754_powf+0x28>
 801a94a:	2f00      	cmp	r7, #0
 801a94c:	da20      	bge.n	801a990 <__ieee754_powf+0xa0>
 801a94e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 801a952:	da2d      	bge.n	801a9b0 <__ieee754_powf+0xc0>
 801a954:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801a958:	f2c0 827b 	blt.w	801ae52 <__ieee754_powf+0x562>
 801a95c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 801a960:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801a964:	fa48 f603 	asr.w	r6, r8, r3
 801a968:	fa06 f303 	lsl.w	r3, r6, r3
 801a96c:	4543      	cmp	r3, r8
 801a96e:	f040 8270 	bne.w	801ae52 <__ieee754_powf+0x562>
 801a972:	f006 0601 	and.w	r6, r6, #1
 801a976:	f1c6 0602 	rsb	r6, r6, #2
 801a97a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801a97e:	d11f      	bne.n	801a9c0 <__ieee754_powf+0xd0>
 801a980:	2c00      	cmp	r4, #0
 801a982:	f280 8263 	bge.w	801ae4c <__ieee754_powf+0x55c>
 801a986:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a98a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801a98e:	e7c7      	b.n	801a920 <__ieee754_powf+0x30>
 801a990:	2600      	movs	r6, #0
 801a992:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801a996:	d1f0      	bne.n	801a97a <__ieee754_powf+0x8a>
 801a998:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 801a99c:	f000 8250 	beq.w	801ae40 <__ieee754_powf+0x550>
 801a9a0:	dd08      	ble.n	801a9b4 <__ieee754_powf+0xc4>
 801a9a2:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801aca8 <__ieee754_powf+0x3b8>
 801a9a6:	2c00      	cmp	r4, #0
 801a9a8:	bfa8      	it	ge
 801a9aa:	eeb0 0a68 	vmovge.f32	s0, s17
 801a9ae:	e7b7      	b.n	801a920 <__ieee754_powf+0x30>
 801a9b0:	2602      	movs	r6, #2
 801a9b2:	e7ee      	b.n	801a992 <__ieee754_powf+0xa2>
 801a9b4:	2c00      	cmp	r4, #0
 801a9b6:	f280 8246 	bge.w	801ae46 <__ieee754_powf+0x556>
 801a9ba:	eeb1 0a68 	vneg.f32	s0, s17
 801a9be:	e7af      	b.n	801a920 <__ieee754_powf+0x30>
 801a9c0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801a9c4:	d102      	bne.n	801a9cc <__ieee754_powf+0xdc>
 801a9c6:	ee28 0a08 	vmul.f32	s0, s16, s16
 801a9ca:	e7a9      	b.n	801a920 <__ieee754_powf+0x30>
 801a9cc:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801a9d0:	eeb0 0a48 	vmov.f32	s0, s16
 801a9d4:	d107      	bne.n	801a9e6 <__ieee754_powf+0xf6>
 801a9d6:	2f00      	cmp	r7, #0
 801a9d8:	db05      	blt.n	801a9e6 <__ieee754_powf+0xf6>
 801a9da:	ecbd 8b02 	vpop	{d8}
 801a9de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a9e2:	f7ff b81f 	b.w	8019a24 <__ieee754_sqrtf>
 801a9e6:	f7fe fedd 	bl	80197a4 <fabsf>
 801a9ea:	b125      	cbz	r5, 801a9f6 <__ieee754_powf+0x106>
 801a9ec:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 801a9f0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801a9f4:	d115      	bne.n	801aa22 <__ieee754_powf+0x132>
 801a9f6:	2c00      	cmp	r4, #0
 801a9f8:	bfbc      	itt	lt
 801a9fa:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801a9fe:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801aa02:	2f00      	cmp	r7, #0
 801aa04:	da8c      	bge.n	801a920 <__ieee754_powf+0x30>
 801aa06:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 801aa0a:	4335      	orrs	r5, r6
 801aa0c:	d104      	bne.n	801aa18 <__ieee754_powf+0x128>
 801aa0e:	ee70 7a40 	vsub.f32	s15, s0, s0
 801aa12:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801aa16:	e783      	b.n	801a920 <__ieee754_powf+0x30>
 801aa18:	2e01      	cmp	r6, #1
 801aa1a:	d181      	bne.n	801a920 <__ieee754_powf+0x30>
 801aa1c:	eeb1 0a40 	vneg.f32	s0, s0
 801aa20:	e77e      	b.n	801a920 <__ieee754_powf+0x30>
 801aa22:	0ff8      	lsrs	r0, r7, #31
 801aa24:	3801      	subs	r0, #1
 801aa26:	ea56 0300 	orrs.w	r3, r6, r0
 801aa2a:	d104      	bne.n	801aa36 <__ieee754_powf+0x146>
 801aa2c:	ee38 8a48 	vsub.f32	s16, s16, s16
 801aa30:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801aa34:	e774      	b.n	801a920 <__ieee754_powf+0x30>
 801aa36:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 801aa3a:	dd73      	ble.n	801ab24 <__ieee754_powf+0x234>
 801aa3c:	4b9b      	ldr	r3, [pc, #620]	; (801acac <__ieee754_powf+0x3bc>)
 801aa3e:	429d      	cmp	r5, r3
 801aa40:	dc08      	bgt.n	801aa54 <__ieee754_powf+0x164>
 801aa42:	2c00      	cmp	r4, #0
 801aa44:	da0b      	bge.n	801aa5e <__ieee754_powf+0x16e>
 801aa46:	2000      	movs	r0, #0
 801aa48:	ecbd 8b02 	vpop	{d8}
 801aa4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aa50:	f000 bd4a 	b.w	801b4e8 <__math_oflowf>
 801aa54:	4b96      	ldr	r3, [pc, #600]	; (801acb0 <__ieee754_powf+0x3c0>)
 801aa56:	429d      	cmp	r5, r3
 801aa58:	dd08      	ble.n	801aa6c <__ieee754_powf+0x17c>
 801aa5a:	2c00      	cmp	r4, #0
 801aa5c:	dcf3      	bgt.n	801aa46 <__ieee754_powf+0x156>
 801aa5e:	2000      	movs	r0, #0
 801aa60:	ecbd 8b02 	vpop	{d8}
 801aa64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aa68:	f000 bd38 	b.w	801b4dc <__math_uflowf>
 801aa6c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801aa70:	ee30 0a67 	vsub.f32	s0, s0, s15
 801aa74:	eddf 6a8f 	vldr	s13, [pc, #572]	; 801acb4 <__ieee754_powf+0x3c4>
 801aa78:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801aa7c:	eee0 6a67 	vfms.f32	s13, s0, s15
 801aa80:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801aa84:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801aa88:	ee20 7a00 	vmul.f32	s14, s0, s0
 801aa8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801aa90:	eddf 7a89 	vldr	s15, [pc, #548]	; 801acb8 <__ieee754_powf+0x3c8>
 801aa94:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801aa98:	ed9f 7a88 	vldr	s14, [pc, #544]	; 801acbc <__ieee754_powf+0x3cc>
 801aa9c:	eee0 7a07 	vfma.f32	s15, s0, s14
 801aaa0:	ed9f 7a87 	vldr	s14, [pc, #540]	; 801acc0 <__ieee754_powf+0x3d0>
 801aaa4:	eef0 6a67 	vmov.f32	s13, s15
 801aaa8:	eee0 6a07 	vfma.f32	s13, s0, s14
 801aaac:	ee16 3a90 	vmov	r3, s13
 801aab0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801aab4:	f023 030f 	bic.w	r3, r3, #15
 801aab8:	ee06 3a90 	vmov	s13, r3
 801aabc:	eee0 6a47 	vfms.f32	s13, s0, s14
 801aac0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801aac4:	3e01      	subs	r6, #1
 801aac6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 801aaca:	4306      	orrs	r6, r0
 801aacc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801aad0:	f024 040f 	bic.w	r4, r4, #15
 801aad4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801aad8:	bf08      	it	eq
 801aada:	eeb0 8a47 	vmoveq.f32	s16, s14
 801aade:	ee07 4a10 	vmov	s14, r4
 801aae2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801aae6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801aaea:	ee07 3a90 	vmov	s15, r3
 801aaee:	eee7 0a27 	vfma.f32	s1, s14, s15
 801aaf2:	ee07 4a10 	vmov	s14, r4
 801aaf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 801aafa:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801aafe:	ee17 1a10 	vmov	r1, s14
 801ab02:	2900      	cmp	r1, #0
 801ab04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ab08:	f340 817c 	ble.w	801ae04 <__ieee754_powf+0x514>
 801ab0c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801ab10:	f340 80f8 	ble.w	801ad04 <__ieee754_powf+0x414>
 801ab14:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801ab18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab1c:	bf4c      	ite	mi
 801ab1e:	2001      	movmi	r0, #1
 801ab20:	2000      	movpl	r0, #0
 801ab22:	e791      	b.n	801aa48 <__ieee754_powf+0x158>
 801ab24:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 801ab28:	bf01      	itttt	eq
 801ab2a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 801acc4 <__ieee754_powf+0x3d4>
 801ab2e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801ab32:	f06f 0317 	mvneq.w	r3, #23
 801ab36:	ee17 5a90 	vmoveq	r5, s15
 801ab3a:	ea4f 52e5 	mov.w	r2, r5, asr #23
 801ab3e:	bf18      	it	ne
 801ab40:	2300      	movne	r3, #0
 801ab42:	3a7f      	subs	r2, #127	; 0x7f
 801ab44:	441a      	add	r2, r3
 801ab46:	4b60      	ldr	r3, [pc, #384]	; (801acc8 <__ieee754_powf+0x3d8>)
 801ab48:	f3c5 0516 	ubfx	r5, r5, #0, #23
 801ab4c:	429d      	cmp	r5, r3
 801ab4e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 801ab52:	dd06      	ble.n	801ab62 <__ieee754_powf+0x272>
 801ab54:	4b5d      	ldr	r3, [pc, #372]	; (801accc <__ieee754_powf+0x3dc>)
 801ab56:	429d      	cmp	r5, r3
 801ab58:	f340 80a4 	ble.w	801aca4 <__ieee754_powf+0x3b4>
 801ab5c:	3201      	adds	r2, #1
 801ab5e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801ab62:	2500      	movs	r5, #0
 801ab64:	4b5a      	ldr	r3, [pc, #360]	; (801acd0 <__ieee754_powf+0x3e0>)
 801ab66:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801ab6a:	ee07 1a10 	vmov	s14, r1
 801ab6e:	edd3 5a00 	vldr	s11, [r3]
 801ab72:	4b58      	ldr	r3, [pc, #352]	; (801acd4 <__ieee754_powf+0x3e4>)
 801ab74:	ee75 7a87 	vadd.f32	s15, s11, s14
 801ab78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ab7c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 801ab80:	1049      	asrs	r1, r1, #1
 801ab82:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801ab86:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801ab8a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 801ab8e:	ee37 6a65 	vsub.f32	s12, s14, s11
 801ab92:	ee07 1a90 	vmov	s15, r1
 801ab96:	ee26 5a24 	vmul.f32	s10, s12, s9
 801ab9a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801ab9e:	ee15 7a10 	vmov	r7, s10
 801aba2:	401f      	ands	r7, r3
 801aba4:	ee06 7a90 	vmov	s13, r7
 801aba8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 801abac:	ee37 7a65 	vsub.f32	s14, s14, s11
 801abb0:	ee65 7a05 	vmul.f32	s15, s10, s10
 801abb4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801abb8:	eddf 5a47 	vldr	s11, [pc, #284]	; 801acd8 <__ieee754_powf+0x3e8>
 801abbc:	ed9f 7a47 	vldr	s14, [pc, #284]	; 801acdc <__ieee754_powf+0x3ec>
 801abc0:	eee7 5a87 	vfma.f32	s11, s15, s14
 801abc4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801ace0 <__ieee754_powf+0x3f0>
 801abc8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801abcc:	eddf 5a39 	vldr	s11, [pc, #228]	; 801acb4 <__ieee754_powf+0x3c4>
 801abd0:	eee7 5a27 	vfma.f32	s11, s14, s15
 801abd4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 801ace4 <__ieee754_powf+0x3f4>
 801abd8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801abdc:	eddf 5a42 	vldr	s11, [pc, #264]	; 801ace8 <__ieee754_powf+0x3f8>
 801abe0:	ee26 6a24 	vmul.f32	s12, s12, s9
 801abe4:	eee7 5a27 	vfma.f32	s11, s14, s15
 801abe8:	ee35 7a26 	vadd.f32	s14, s10, s13
 801abec:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801abf0:	ee27 7a06 	vmul.f32	s14, s14, s12
 801abf4:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801abf8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801abfc:	eef0 5a67 	vmov.f32	s11, s15
 801ac00:	eee6 5aa6 	vfma.f32	s11, s13, s13
 801ac04:	ee75 5a87 	vadd.f32	s11, s11, s14
 801ac08:	ee15 1a90 	vmov	r1, s11
 801ac0c:	4019      	ands	r1, r3
 801ac0e:	ee05 1a90 	vmov	s11, r1
 801ac12:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801ac16:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801ac1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ac1e:	ee67 7a85 	vmul.f32	s15, s15, s10
 801ac22:	eee6 7a25 	vfma.f32	s15, s12, s11
 801ac26:	eeb0 6a67 	vmov.f32	s12, s15
 801ac2a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801ac2e:	ee16 1a10 	vmov	r1, s12
 801ac32:	4019      	ands	r1, r3
 801ac34:	ee07 1a10 	vmov	s14, r1
 801ac38:	eea6 7ae5 	vfms.f32	s14, s13, s11
 801ac3c:	ee06 1a10 	vmov	s12, r1
 801ac40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ac44:	ed9f 7a29 	vldr	s14, [pc, #164]	; 801acec <__ieee754_powf+0x3fc>
 801ac48:	4929      	ldr	r1, [pc, #164]	; (801acf0 <__ieee754_powf+0x400>)
 801ac4a:	eddf 5a2a 	vldr	s11, [pc, #168]	; 801acf4 <__ieee754_powf+0x404>
 801ac4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ac52:	ed9f 7a29 	vldr	s14, [pc, #164]	; 801acf8 <__ieee754_powf+0x408>
 801ac56:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ac5a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801ac5e:	ed91 7a00 	vldr	s14, [r1]
 801ac62:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ac66:	ee07 2a10 	vmov	s14, r2
 801ac6a:	eef0 6a67 	vmov.f32	s13, s15
 801ac6e:	4a23      	ldr	r2, [pc, #140]	; (801acfc <__ieee754_powf+0x40c>)
 801ac70:	eee6 6a25 	vfma.f32	s13, s12, s11
 801ac74:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 801ac78:	ed92 5a00 	vldr	s10, [r2]
 801ac7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ac80:	ee76 6a85 	vadd.f32	s13, s13, s10
 801ac84:	ee76 6a87 	vadd.f32	s13, s13, s14
 801ac88:	ee16 2a90 	vmov	r2, s13
 801ac8c:	4013      	ands	r3, r2
 801ac8e:	ee06 3a90 	vmov	s13, r3
 801ac92:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801ac96:	ee37 7a45 	vsub.f32	s14, s14, s10
 801ac9a:	eea6 7a65 	vfms.f32	s14, s12, s11
 801ac9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801aca2:	e70f      	b.n	801aac4 <__ieee754_powf+0x1d4>
 801aca4:	2501      	movs	r5, #1
 801aca6:	e75d      	b.n	801ab64 <__ieee754_powf+0x274>
 801aca8:	00000000 	.word	0x00000000
 801acac:	3f7ffff3 	.word	0x3f7ffff3
 801acb0:	3f800007 	.word	0x3f800007
 801acb4:	3eaaaaab 	.word	0x3eaaaaab
 801acb8:	3fb8aa3b 	.word	0x3fb8aa3b
 801acbc:	36eca570 	.word	0x36eca570
 801acc0:	3fb8aa00 	.word	0x3fb8aa00
 801acc4:	4b800000 	.word	0x4b800000
 801acc8:	001cc471 	.word	0x001cc471
 801accc:	005db3d6 	.word	0x005db3d6
 801acd0:	0801c4f8 	.word	0x0801c4f8
 801acd4:	fffff000 	.word	0xfffff000
 801acd8:	3e6c3255 	.word	0x3e6c3255
 801acdc:	3e53f142 	.word	0x3e53f142
 801ace0:	3e8ba305 	.word	0x3e8ba305
 801ace4:	3edb6db7 	.word	0x3edb6db7
 801ace8:	3f19999a 	.word	0x3f19999a
 801acec:	3f76384f 	.word	0x3f76384f
 801acf0:	0801c508 	.word	0x0801c508
 801acf4:	3f763800 	.word	0x3f763800
 801acf8:	369dc3a0 	.word	0x369dc3a0
 801acfc:	0801c500 	.word	0x0801c500
 801ad00:	3338aa3c 	.word	0x3338aa3c
 801ad04:	f040 8093 	bne.w	801ae2e <__ieee754_powf+0x53e>
 801ad08:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801ad00 <__ieee754_powf+0x410>
 801ad0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ad10:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801ad14:	eef4 6ac7 	vcmpe.f32	s13, s14
 801ad18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad1c:	f73f aefa 	bgt.w	801ab14 <__ieee754_powf+0x224>
 801ad20:	15db      	asrs	r3, r3, #23
 801ad22:	3b7e      	subs	r3, #126	; 0x7e
 801ad24:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 801ad28:	4118      	asrs	r0, r3
 801ad2a:	4408      	add	r0, r1
 801ad2c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801ad30:	4a49      	ldr	r2, [pc, #292]	; (801ae58 <__ieee754_powf+0x568>)
 801ad32:	3b7f      	subs	r3, #127	; 0x7f
 801ad34:	411a      	asrs	r2, r3
 801ad36:	4002      	ands	r2, r0
 801ad38:	ee07 2a10 	vmov	s14, r2
 801ad3c:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801ad40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801ad44:	f1c3 0317 	rsb	r3, r3, #23
 801ad48:	4118      	asrs	r0, r3
 801ad4a:	2900      	cmp	r1, #0
 801ad4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ad50:	bfb8      	it	lt
 801ad52:	4240      	neglt	r0, r0
 801ad54:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801ad58:	eddf 6a40 	vldr	s13, [pc, #256]	; 801ae5c <__ieee754_powf+0x56c>
 801ad5c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801ae60 <__ieee754_powf+0x570>
 801ad60:	ee17 3a10 	vmov	r3, s14
 801ad64:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801ad68:	f023 030f 	bic.w	r3, r3, #15
 801ad6c:	ee07 3a10 	vmov	s14, r3
 801ad70:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ad74:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ad78:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801ad7c:	eddf 7a39 	vldr	s15, [pc, #228]	; 801ae64 <__ieee754_powf+0x574>
 801ad80:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ad84:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801ad88:	eef0 6a67 	vmov.f32	s13, s15
 801ad8c:	eee7 6a06 	vfma.f32	s13, s14, s12
 801ad90:	eef0 5a66 	vmov.f32	s11, s13
 801ad94:	eee7 5a46 	vfms.f32	s11, s14, s12
 801ad98:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801ad9c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801ada0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 801ae68 <__ieee754_powf+0x578>
 801ada4:	eddf 5a31 	vldr	s11, [pc, #196]	; 801ae6c <__ieee754_powf+0x57c>
 801ada8:	eea7 6a25 	vfma.f32	s12, s14, s11
 801adac:	eddf 5a30 	vldr	s11, [pc, #192]	; 801ae70 <__ieee754_powf+0x580>
 801adb0:	eee6 5a07 	vfma.f32	s11, s12, s14
 801adb4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801ae74 <__ieee754_powf+0x584>
 801adb8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801adbc:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801ae78 <__ieee754_powf+0x588>
 801adc0:	eee6 5a07 	vfma.f32	s11, s12, s14
 801adc4:	eeb0 6a66 	vmov.f32	s12, s13
 801adc8:	eea5 6ac7 	vfms.f32	s12, s11, s14
 801adcc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801add0:	ee66 5a86 	vmul.f32	s11, s13, s12
 801add4:	ee36 6a47 	vsub.f32	s12, s12, s14
 801add8:	eee6 7aa7 	vfma.f32	s15, s13, s15
 801addc:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801ade0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ade4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ade8:	ee30 0a67 	vsub.f32	s0, s0, s15
 801adec:	ee10 3a10 	vmov	r3, s0
 801adf0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801adf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801adf8:	da1f      	bge.n	801ae3a <__ieee754_powf+0x54a>
 801adfa:	f000 faf3 	bl	801b3e4 <scalbnf>
 801adfe:	ee20 0a08 	vmul.f32	s0, s0, s16
 801ae02:	e58d      	b.n	801a920 <__ieee754_powf+0x30>
 801ae04:	4a1d      	ldr	r2, [pc, #116]	; (801ae7c <__ieee754_powf+0x58c>)
 801ae06:	4293      	cmp	r3, r2
 801ae08:	dd07      	ble.n	801ae1a <__ieee754_powf+0x52a>
 801ae0a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801ae0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae12:	bf4c      	ite	mi
 801ae14:	2001      	movmi	r0, #1
 801ae16:	2000      	movpl	r0, #0
 801ae18:	e622      	b.n	801aa60 <__ieee754_powf+0x170>
 801ae1a:	d108      	bne.n	801ae2e <__ieee754_powf+0x53e>
 801ae1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ae20:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801ae24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae28:	f6ff af7a 	blt.w	801ad20 <__ieee754_powf+0x430>
 801ae2c:	e7ed      	b.n	801ae0a <__ieee754_powf+0x51a>
 801ae2e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801ae32:	f73f af75 	bgt.w	801ad20 <__ieee754_powf+0x430>
 801ae36:	2000      	movs	r0, #0
 801ae38:	e78c      	b.n	801ad54 <__ieee754_powf+0x464>
 801ae3a:	ee00 3a10 	vmov	s0, r3
 801ae3e:	e7de      	b.n	801adfe <__ieee754_powf+0x50e>
 801ae40:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ae44:	e56c      	b.n	801a920 <__ieee754_powf+0x30>
 801ae46:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801ae80 <__ieee754_powf+0x590>
 801ae4a:	e569      	b.n	801a920 <__ieee754_powf+0x30>
 801ae4c:	eeb0 0a48 	vmov.f32	s0, s16
 801ae50:	e566      	b.n	801a920 <__ieee754_powf+0x30>
 801ae52:	2600      	movs	r6, #0
 801ae54:	e591      	b.n	801a97a <__ieee754_powf+0x8a>
 801ae56:	bf00      	nop
 801ae58:	ff800000 	.word	0xff800000
 801ae5c:	3f317218 	.word	0x3f317218
 801ae60:	3f317200 	.word	0x3f317200
 801ae64:	35bfbe8c 	.word	0x35bfbe8c
 801ae68:	b5ddea0e 	.word	0xb5ddea0e
 801ae6c:	3331bb4c 	.word	0x3331bb4c
 801ae70:	388ab355 	.word	0x388ab355
 801ae74:	bb360b61 	.word	0xbb360b61
 801ae78:	3e2aaaab 	.word	0x3e2aaaab
 801ae7c:	43160000 	.word	0x43160000
 801ae80:	00000000 	.word	0x00000000

0801ae84 <__ieee754_rem_pio2f>:
 801ae84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae86:	ee10 6a10 	vmov	r6, s0
 801ae8a:	4b86      	ldr	r3, [pc, #536]	; (801b0a4 <__ieee754_rem_pio2f+0x220>)
 801ae8c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801ae90:	429d      	cmp	r5, r3
 801ae92:	b087      	sub	sp, #28
 801ae94:	4604      	mov	r4, r0
 801ae96:	dc05      	bgt.n	801aea4 <__ieee754_rem_pio2f+0x20>
 801ae98:	2300      	movs	r3, #0
 801ae9a:	ed80 0a00 	vstr	s0, [r0]
 801ae9e:	6043      	str	r3, [r0, #4]
 801aea0:	2000      	movs	r0, #0
 801aea2:	e020      	b.n	801aee6 <__ieee754_rem_pio2f+0x62>
 801aea4:	4b80      	ldr	r3, [pc, #512]	; (801b0a8 <__ieee754_rem_pio2f+0x224>)
 801aea6:	429d      	cmp	r5, r3
 801aea8:	dc38      	bgt.n	801af1c <__ieee754_rem_pio2f+0x98>
 801aeaa:	2e00      	cmp	r6, #0
 801aeac:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801b0ac <__ieee754_rem_pio2f+0x228>
 801aeb0:	4b7f      	ldr	r3, [pc, #508]	; (801b0b0 <__ieee754_rem_pio2f+0x22c>)
 801aeb2:	f025 050f 	bic.w	r5, r5, #15
 801aeb6:	dd18      	ble.n	801aeea <__ieee754_rem_pio2f+0x66>
 801aeb8:	429d      	cmp	r5, r3
 801aeba:	ee70 7a47 	vsub.f32	s15, s0, s14
 801aebe:	bf09      	itett	eq
 801aec0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801b0b4 <__ieee754_rem_pio2f+0x230>
 801aec4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801b0b8 <__ieee754_rem_pio2f+0x234>
 801aec8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801aecc:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801b0bc <__ieee754_rem_pio2f+0x238>
 801aed0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801aed4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801aed8:	edc0 6a00 	vstr	s13, [r0]
 801aedc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801aee0:	edc0 7a01 	vstr	s15, [r0, #4]
 801aee4:	2001      	movs	r0, #1
 801aee6:	b007      	add	sp, #28
 801aee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aeea:	429d      	cmp	r5, r3
 801aeec:	ee70 7a07 	vadd.f32	s15, s0, s14
 801aef0:	bf09      	itett	eq
 801aef2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801b0b4 <__ieee754_rem_pio2f+0x230>
 801aef6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801b0b8 <__ieee754_rem_pio2f+0x234>
 801aefa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801aefe:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801b0bc <__ieee754_rem_pio2f+0x238>
 801af02:	ee77 6a87 	vadd.f32	s13, s15, s14
 801af06:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801af0a:	edc0 6a00 	vstr	s13, [r0]
 801af0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801af12:	edc0 7a01 	vstr	s15, [r0, #4]
 801af16:	f04f 30ff 	mov.w	r0, #4294967295
 801af1a:	e7e4      	b.n	801aee6 <__ieee754_rem_pio2f+0x62>
 801af1c:	4b68      	ldr	r3, [pc, #416]	; (801b0c0 <__ieee754_rem_pio2f+0x23c>)
 801af1e:	429d      	cmp	r5, r3
 801af20:	dc71      	bgt.n	801b006 <__ieee754_rem_pio2f+0x182>
 801af22:	f7fe fc3f 	bl	80197a4 <fabsf>
 801af26:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801b0c4 <__ieee754_rem_pio2f+0x240>
 801af2a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801af2e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801af32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801af36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801af3a:	ee17 0a90 	vmov	r0, s15
 801af3e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801b0ac <__ieee754_rem_pio2f+0x228>
 801af42:	eea7 0a67 	vfms.f32	s0, s14, s15
 801af46:	281f      	cmp	r0, #31
 801af48:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801b0b8 <__ieee754_rem_pio2f+0x234>
 801af4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801af50:	eeb1 6a47 	vneg.f32	s12, s14
 801af54:	ee70 6a67 	vsub.f32	s13, s0, s15
 801af58:	ee16 2a90 	vmov	r2, s13
 801af5c:	dc1c      	bgt.n	801af98 <__ieee754_rem_pio2f+0x114>
 801af5e:	495a      	ldr	r1, [pc, #360]	; (801b0c8 <__ieee754_rem_pio2f+0x244>)
 801af60:	1e47      	subs	r7, r0, #1
 801af62:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801af66:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801af6a:	428b      	cmp	r3, r1
 801af6c:	d014      	beq.n	801af98 <__ieee754_rem_pio2f+0x114>
 801af6e:	6022      	str	r2, [r4, #0]
 801af70:	ed94 7a00 	vldr	s14, [r4]
 801af74:	ee30 0a47 	vsub.f32	s0, s0, s14
 801af78:	2e00      	cmp	r6, #0
 801af7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801af7e:	ed84 0a01 	vstr	s0, [r4, #4]
 801af82:	dab0      	bge.n	801aee6 <__ieee754_rem_pio2f+0x62>
 801af84:	eeb1 7a47 	vneg.f32	s14, s14
 801af88:	eeb1 0a40 	vneg.f32	s0, s0
 801af8c:	ed84 7a00 	vstr	s14, [r4]
 801af90:	ed84 0a01 	vstr	s0, [r4, #4]
 801af94:	4240      	negs	r0, r0
 801af96:	e7a6      	b.n	801aee6 <__ieee754_rem_pio2f+0x62>
 801af98:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801af9c:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801afa0:	2908      	cmp	r1, #8
 801afa2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801afa6:	dde2      	ble.n	801af6e <__ieee754_rem_pio2f+0xea>
 801afa8:	eddf 5a42 	vldr	s11, [pc, #264]	; 801b0b4 <__ieee754_rem_pio2f+0x230>
 801afac:	eef0 6a40 	vmov.f32	s13, s0
 801afb0:	eee6 6a25 	vfma.f32	s13, s12, s11
 801afb4:	ee70 7a66 	vsub.f32	s15, s0, s13
 801afb8:	eee6 7a25 	vfma.f32	s15, s12, s11
 801afbc:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801b0bc <__ieee754_rem_pio2f+0x238>
 801afc0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801afc4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801afc8:	ee15 2a90 	vmov	r2, s11
 801afcc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801afd0:	1a5b      	subs	r3, r3, r1
 801afd2:	2b19      	cmp	r3, #25
 801afd4:	dc04      	bgt.n	801afe0 <__ieee754_rem_pio2f+0x15c>
 801afd6:	edc4 5a00 	vstr	s11, [r4]
 801afda:	eeb0 0a66 	vmov.f32	s0, s13
 801afde:	e7c7      	b.n	801af70 <__ieee754_rem_pio2f+0xec>
 801afe0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801b0cc <__ieee754_rem_pio2f+0x248>
 801afe4:	eeb0 0a66 	vmov.f32	s0, s13
 801afe8:	eea6 0a25 	vfma.f32	s0, s12, s11
 801afec:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801aff0:	eddf 6a37 	vldr	s13, [pc, #220]	; 801b0d0 <__ieee754_rem_pio2f+0x24c>
 801aff4:	eee6 7a25 	vfma.f32	s15, s12, s11
 801aff8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801affc:	ee30 7a67 	vsub.f32	s14, s0, s15
 801b000:	ed84 7a00 	vstr	s14, [r4]
 801b004:	e7b4      	b.n	801af70 <__ieee754_rem_pio2f+0xec>
 801b006:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801b00a:	db06      	blt.n	801b01a <__ieee754_rem_pio2f+0x196>
 801b00c:	ee70 7a40 	vsub.f32	s15, s0, s0
 801b010:	edc0 7a01 	vstr	s15, [r0, #4]
 801b014:	edc0 7a00 	vstr	s15, [r0]
 801b018:	e742      	b.n	801aea0 <__ieee754_rem_pio2f+0x1c>
 801b01a:	15ea      	asrs	r2, r5, #23
 801b01c:	3a86      	subs	r2, #134	; 0x86
 801b01e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801b022:	ee07 3a90 	vmov	s15, r3
 801b026:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801b02a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801b0d4 <__ieee754_rem_pio2f+0x250>
 801b02e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b032:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b036:	ed8d 7a03 	vstr	s14, [sp, #12]
 801b03a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b03e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801b042:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b046:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b04a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801b04e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b052:	eef5 7a40 	vcmp.f32	s15, #0.0
 801b056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b05a:	edcd 7a05 	vstr	s15, [sp, #20]
 801b05e:	d11e      	bne.n	801b09e <__ieee754_rem_pio2f+0x21a>
 801b060:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801b064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b068:	bf14      	ite	ne
 801b06a:	2302      	movne	r3, #2
 801b06c:	2301      	moveq	r3, #1
 801b06e:	491a      	ldr	r1, [pc, #104]	; (801b0d8 <__ieee754_rem_pio2f+0x254>)
 801b070:	9101      	str	r1, [sp, #4]
 801b072:	2102      	movs	r1, #2
 801b074:	9100      	str	r1, [sp, #0]
 801b076:	a803      	add	r0, sp, #12
 801b078:	4621      	mov	r1, r4
 801b07a:	f000 fa3b 	bl	801b4f4 <__kernel_rem_pio2f>
 801b07e:	2e00      	cmp	r6, #0
 801b080:	f6bf af31 	bge.w	801aee6 <__ieee754_rem_pio2f+0x62>
 801b084:	edd4 7a00 	vldr	s15, [r4]
 801b088:	eef1 7a67 	vneg.f32	s15, s15
 801b08c:	edc4 7a00 	vstr	s15, [r4]
 801b090:	edd4 7a01 	vldr	s15, [r4, #4]
 801b094:	eef1 7a67 	vneg.f32	s15, s15
 801b098:	edc4 7a01 	vstr	s15, [r4, #4]
 801b09c:	e77a      	b.n	801af94 <__ieee754_rem_pio2f+0x110>
 801b09e:	2303      	movs	r3, #3
 801b0a0:	e7e5      	b.n	801b06e <__ieee754_rem_pio2f+0x1ea>
 801b0a2:	bf00      	nop
 801b0a4:	3f490fd8 	.word	0x3f490fd8
 801b0a8:	4016cbe3 	.word	0x4016cbe3
 801b0ac:	3fc90f80 	.word	0x3fc90f80
 801b0b0:	3fc90fd0 	.word	0x3fc90fd0
 801b0b4:	37354400 	.word	0x37354400
 801b0b8:	37354443 	.word	0x37354443
 801b0bc:	2e85a308 	.word	0x2e85a308
 801b0c0:	43490f80 	.word	0x43490f80
 801b0c4:	3f22f984 	.word	0x3f22f984
 801b0c8:	0801c510 	.word	0x0801c510
 801b0cc:	2e85a300 	.word	0x2e85a300
 801b0d0:	248d3132 	.word	0x248d3132
 801b0d4:	43800000 	.word	0x43800000
 801b0d8:	0801c590 	.word	0x0801c590

0801b0dc <atanf>:
 801b0dc:	b538      	push	{r3, r4, r5, lr}
 801b0de:	ee10 5a10 	vmov	r5, s0
 801b0e2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801b0e6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801b0ea:	eef0 7a40 	vmov.f32	s15, s0
 801b0ee:	db10      	blt.n	801b112 <atanf+0x36>
 801b0f0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801b0f4:	dd04      	ble.n	801b100 <atanf+0x24>
 801b0f6:	ee70 7a00 	vadd.f32	s15, s0, s0
 801b0fa:	eeb0 0a67 	vmov.f32	s0, s15
 801b0fe:	bd38      	pop	{r3, r4, r5, pc}
 801b100:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801b238 <atanf+0x15c>
 801b104:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801b23c <atanf+0x160>
 801b108:	2d00      	cmp	r5, #0
 801b10a:	bfd8      	it	le
 801b10c:	eef0 7a47 	vmovle.f32	s15, s14
 801b110:	e7f3      	b.n	801b0fa <atanf+0x1e>
 801b112:	4b4b      	ldr	r3, [pc, #300]	; (801b240 <atanf+0x164>)
 801b114:	429c      	cmp	r4, r3
 801b116:	dc10      	bgt.n	801b13a <atanf+0x5e>
 801b118:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801b11c:	da0a      	bge.n	801b134 <atanf+0x58>
 801b11e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801b244 <atanf+0x168>
 801b122:	ee30 7a07 	vadd.f32	s14, s0, s14
 801b126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b12a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801b12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b132:	dce2      	bgt.n	801b0fa <atanf+0x1e>
 801b134:	f04f 33ff 	mov.w	r3, #4294967295
 801b138:	e013      	b.n	801b162 <atanf+0x86>
 801b13a:	f7fe fb33 	bl	80197a4 <fabsf>
 801b13e:	4b42      	ldr	r3, [pc, #264]	; (801b248 <atanf+0x16c>)
 801b140:	429c      	cmp	r4, r3
 801b142:	dc4f      	bgt.n	801b1e4 <atanf+0x108>
 801b144:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801b148:	429c      	cmp	r4, r3
 801b14a:	dc41      	bgt.n	801b1d0 <atanf+0xf4>
 801b14c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801b150:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801b154:	eea0 7a27 	vfma.f32	s14, s0, s15
 801b158:	2300      	movs	r3, #0
 801b15a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b15e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b162:	1c5a      	adds	r2, r3, #1
 801b164:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801b168:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801b24c <atanf+0x170>
 801b16c:	eddf 5a38 	vldr	s11, [pc, #224]	; 801b250 <atanf+0x174>
 801b170:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801b254 <atanf+0x178>
 801b174:	ee66 6a06 	vmul.f32	s13, s12, s12
 801b178:	eee6 5a87 	vfma.f32	s11, s13, s14
 801b17c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801b258 <atanf+0x17c>
 801b180:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801b184:	eddf 5a35 	vldr	s11, [pc, #212]	; 801b25c <atanf+0x180>
 801b188:	eee7 5a26 	vfma.f32	s11, s14, s13
 801b18c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801b260 <atanf+0x184>
 801b190:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801b194:	eddf 5a33 	vldr	s11, [pc, #204]	; 801b264 <atanf+0x188>
 801b198:	eee7 5a26 	vfma.f32	s11, s14, s13
 801b19c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801b268 <atanf+0x18c>
 801b1a0:	eea6 5a87 	vfma.f32	s10, s13, s14
 801b1a4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801b26c <atanf+0x190>
 801b1a8:	eea5 7a26 	vfma.f32	s14, s10, s13
 801b1ac:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801b270 <atanf+0x194>
 801b1b0:	eea7 5a26 	vfma.f32	s10, s14, s13
 801b1b4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801b274 <atanf+0x198>
 801b1b8:	eea5 7a26 	vfma.f32	s14, s10, s13
 801b1bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b1c0:	eea5 7a86 	vfma.f32	s14, s11, s12
 801b1c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 801b1c8:	d121      	bne.n	801b20e <atanf+0x132>
 801b1ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b1ce:	e794      	b.n	801b0fa <atanf+0x1e>
 801b1d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b1d4:	ee30 7a67 	vsub.f32	s14, s0, s15
 801b1d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b1dc:	2301      	movs	r3, #1
 801b1de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b1e2:	e7be      	b.n	801b162 <atanf+0x86>
 801b1e4:	4b24      	ldr	r3, [pc, #144]	; (801b278 <atanf+0x19c>)
 801b1e6:	429c      	cmp	r4, r3
 801b1e8:	dc0b      	bgt.n	801b202 <atanf+0x126>
 801b1ea:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801b1ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b1f2:	eea0 7a27 	vfma.f32	s14, s0, s15
 801b1f6:	2302      	movs	r3, #2
 801b1f8:	ee70 6a67 	vsub.f32	s13, s0, s15
 801b1fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b200:	e7af      	b.n	801b162 <atanf+0x86>
 801b202:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801b206:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b20a:	2303      	movs	r3, #3
 801b20c:	e7a9      	b.n	801b162 <atanf+0x86>
 801b20e:	4a1b      	ldr	r2, [pc, #108]	; (801b27c <atanf+0x1a0>)
 801b210:	491b      	ldr	r1, [pc, #108]	; (801b280 <atanf+0x1a4>)
 801b212:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801b216:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b21a:	edd3 6a00 	vldr	s13, [r3]
 801b21e:	ee37 7a66 	vsub.f32	s14, s14, s13
 801b222:	2d00      	cmp	r5, #0
 801b224:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b228:	edd2 7a00 	vldr	s15, [r2]
 801b22c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b230:	bfb8      	it	lt
 801b232:	eef1 7a67 	vneglt.f32	s15, s15
 801b236:	e760      	b.n	801b0fa <atanf+0x1e>
 801b238:	3fc90fdb 	.word	0x3fc90fdb
 801b23c:	bfc90fdb 	.word	0xbfc90fdb
 801b240:	3edfffff 	.word	0x3edfffff
 801b244:	7149f2ca 	.word	0x7149f2ca
 801b248:	3f97ffff 	.word	0x3f97ffff
 801b24c:	3c8569d7 	.word	0x3c8569d7
 801b250:	3d4bda59 	.word	0x3d4bda59
 801b254:	bd6ef16b 	.word	0xbd6ef16b
 801b258:	3d886b35 	.word	0x3d886b35
 801b25c:	3dba2e6e 	.word	0x3dba2e6e
 801b260:	3e124925 	.word	0x3e124925
 801b264:	3eaaaaab 	.word	0x3eaaaaab
 801b268:	bd15a221 	.word	0xbd15a221
 801b26c:	bd9d8795 	.word	0xbd9d8795
 801b270:	bde38e38 	.word	0xbde38e38
 801b274:	be4ccccd 	.word	0xbe4ccccd
 801b278:	401bffff 	.word	0x401bffff
 801b27c:	0801c8a8 	.word	0x0801c8a8
 801b280:	0801c8b8 	.word	0x0801c8b8
 801b284:	00000000 	.word	0x00000000

0801b288 <scalbn>:
 801b288:	b570      	push	{r4, r5, r6, lr}
 801b28a:	ec55 4b10 	vmov	r4, r5, d0
 801b28e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801b292:	4606      	mov	r6, r0
 801b294:	462b      	mov	r3, r5
 801b296:	b999      	cbnz	r1, 801b2c0 <scalbn+0x38>
 801b298:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b29c:	4323      	orrs	r3, r4
 801b29e:	d03f      	beq.n	801b320 <scalbn+0x98>
 801b2a0:	4b35      	ldr	r3, [pc, #212]	; (801b378 <scalbn+0xf0>)
 801b2a2:	4629      	mov	r1, r5
 801b2a4:	ee10 0a10 	vmov	r0, s0
 801b2a8:	2200      	movs	r2, #0
 801b2aa:	f7e5 f9cd 	bl	8000648 <__aeabi_dmul>
 801b2ae:	4b33      	ldr	r3, [pc, #204]	; (801b37c <scalbn+0xf4>)
 801b2b0:	429e      	cmp	r6, r3
 801b2b2:	4604      	mov	r4, r0
 801b2b4:	460d      	mov	r5, r1
 801b2b6:	da10      	bge.n	801b2da <scalbn+0x52>
 801b2b8:	a327      	add	r3, pc, #156	; (adr r3, 801b358 <scalbn+0xd0>)
 801b2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2be:	e01f      	b.n	801b300 <scalbn+0x78>
 801b2c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801b2c4:	4291      	cmp	r1, r2
 801b2c6:	d10c      	bne.n	801b2e2 <scalbn+0x5a>
 801b2c8:	ee10 2a10 	vmov	r2, s0
 801b2cc:	4620      	mov	r0, r4
 801b2ce:	4629      	mov	r1, r5
 801b2d0:	f7e5 f804 	bl	80002dc <__adddf3>
 801b2d4:	4604      	mov	r4, r0
 801b2d6:	460d      	mov	r5, r1
 801b2d8:	e022      	b.n	801b320 <scalbn+0x98>
 801b2da:	460b      	mov	r3, r1
 801b2dc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801b2e0:	3936      	subs	r1, #54	; 0x36
 801b2e2:	f24c 3250 	movw	r2, #50000	; 0xc350
 801b2e6:	4296      	cmp	r6, r2
 801b2e8:	dd0d      	ble.n	801b306 <scalbn+0x7e>
 801b2ea:	2d00      	cmp	r5, #0
 801b2ec:	a11c      	add	r1, pc, #112	; (adr r1, 801b360 <scalbn+0xd8>)
 801b2ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b2f2:	da02      	bge.n	801b2fa <scalbn+0x72>
 801b2f4:	a11c      	add	r1, pc, #112	; (adr r1, 801b368 <scalbn+0xe0>)
 801b2f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b2fa:	a319      	add	r3, pc, #100	; (adr r3, 801b360 <scalbn+0xd8>)
 801b2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b300:	f7e5 f9a2 	bl	8000648 <__aeabi_dmul>
 801b304:	e7e6      	b.n	801b2d4 <scalbn+0x4c>
 801b306:	1872      	adds	r2, r6, r1
 801b308:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b30c:	428a      	cmp	r2, r1
 801b30e:	dcec      	bgt.n	801b2ea <scalbn+0x62>
 801b310:	2a00      	cmp	r2, #0
 801b312:	dd08      	ble.n	801b326 <scalbn+0x9e>
 801b314:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b318:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b31c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b320:	ec45 4b10 	vmov	d0, r4, r5
 801b324:	bd70      	pop	{r4, r5, r6, pc}
 801b326:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b32a:	da08      	bge.n	801b33e <scalbn+0xb6>
 801b32c:	2d00      	cmp	r5, #0
 801b32e:	a10a      	add	r1, pc, #40	; (adr r1, 801b358 <scalbn+0xd0>)
 801b330:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b334:	dac0      	bge.n	801b2b8 <scalbn+0x30>
 801b336:	a10e      	add	r1, pc, #56	; (adr r1, 801b370 <scalbn+0xe8>)
 801b338:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b33c:	e7bc      	b.n	801b2b8 <scalbn+0x30>
 801b33e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b342:	3236      	adds	r2, #54	; 0x36
 801b344:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b348:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801b34c:	4620      	mov	r0, r4
 801b34e:	4b0c      	ldr	r3, [pc, #48]	; (801b380 <scalbn+0xf8>)
 801b350:	2200      	movs	r2, #0
 801b352:	e7d5      	b.n	801b300 <scalbn+0x78>
 801b354:	f3af 8000 	nop.w
 801b358:	c2f8f359 	.word	0xc2f8f359
 801b35c:	01a56e1f 	.word	0x01a56e1f
 801b360:	8800759c 	.word	0x8800759c
 801b364:	7e37e43c 	.word	0x7e37e43c
 801b368:	8800759c 	.word	0x8800759c
 801b36c:	fe37e43c 	.word	0xfe37e43c
 801b370:	c2f8f359 	.word	0xc2f8f359
 801b374:	81a56e1f 	.word	0x81a56e1f
 801b378:	43500000 	.word	0x43500000
 801b37c:	ffff3cb0 	.word	0xffff3cb0
 801b380:	3c900000 	.word	0x3c900000

0801b384 <with_errno>:
 801b384:	b570      	push	{r4, r5, r6, lr}
 801b386:	4604      	mov	r4, r0
 801b388:	460d      	mov	r5, r1
 801b38a:	4616      	mov	r6, r2
 801b38c:	f7fa f8f2 	bl	8015574 <__errno>
 801b390:	4629      	mov	r1, r5
 801b392:	6006      	str	r6, [r0, #0]
 801b394:	4620      	mov	r0, r4
 801b396:	bd70      	pop	{r4, r5, r6, pc}

0801b398 <xflow>:
 801b398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b39a:	4614      	mov	r4, r2
 801b39c:	461d      	mov	r5, r3
 801b39e:	b108      	cbz	r0, 801b3a4 <xflow+0xc>
 801b3a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b3a4:	e9cd 2300 	strd	r2, r3, [sp]
 801b3a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b3ac:	4620      	mov	r0, r4
 801b3ae:	4629      	mov	r1, r5
 801b3b0:	f7e5 f94a 	bl	8000648 <__aeabi_dmul>
 801b3b4:	2222      	movs	r2, #34	; 0x22
 801b3b6:	b003      	add	sp, #12
 801b3b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b3bc:	f7ff bfe2 	b.w	801b384 <with_errno>

0801b3c0 <__math_uflow>:
 801b3c0:	b508      	push	{r3, lr}
 801b3c2:	2200      	movs	r2, #0
 801b3c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801b3c8:	f7ff ffe6 	bl	801b398 <xflow>
 801b3cc:	ec41 0b10 	vmov	d0, r0, r1
 801b3d0:	bd08      	pop	{r3, pc}

0801b3d2 <__math_oflow>:
 801b3d2:	b508      	push	{r3, lr}
 801b3d4:	2200      	movs	r2, #0
 801b3d6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801b3da:	f7ff ffdd 	bl	801b398 <xflow>
 801b3de:	ec41 0b10 	vmov	d0, r0, r1
 801b3e2:	bd08      	pop	{r3, pc}

0801b3e4 <scalbnf>:
 801b3e4:	ee10 3a10 	vmov	r3, s0
 801b3e8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801b3ec:	d02b      	beq.n	801b446 <scalbnf+0x62>
 801b3ee:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801b3f2:	d302      	bcc.n	801b3fa <scalbnf+0x16>
 801b3f4:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b3f8:	4770      	bx	lr
 801b3fa:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801b3fe:	d123      	bne.n	801b448 <scalbnf+0x64>
 801b400:	4b24      	ldr	r3, [pc, #144]	; (801b494 <scalbnf+0xb0>)
 801b402:	eddf 7a25 	vldr	s15, [pc, #148]	; 801b498 <scalbnf+0xb4>
 801b406:	4298      	cmp	r0, r3
 801b408:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b40c:	db17      	blt.n	801b43e <scalbnf+0x5a>
 801b40e:	ee10 3a10 	vmov	r3, s0
 801b412:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b416:	3a19      	subs	r2, #25
 801b418:	f24c 3150 	movw	r1, #50000	; 0xc350
 801b41c:	4288      	cmp	r0, r1
 801b41e:	dd15      	ble.n	801b44c <scalbnf+0x68>
 801b420:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801b49c <scalbnf+0xb8>
 801b424:	eddf 6a1e 	vldr	s13, [pc, #120]	; 801b4a0 <scalbnf+0xbc>
 801b428:	ee10 3a10 	vmov	r3, s0
 801b42c:	eeb0 7a67 	vmov.f32	s14, s15
 801b430:	2b00      	cmp	r3, #0
 801b432:	bfb8      	it	lt
 801b434:	eef0 7a66 	vmovlt.f32	s15, s13
 801b438:	ee27 0a87 	vmul.f32	s0, s15, s14
 801b43c:	4770      	bx	lr
 801b43e:	eddf 7a19 	vldr	s15, [pc, #100]	; 801b4a4 <scalbnf+0xc0>
 801b442:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b446:	4770      	bx	lr
 801b448:	0dd2      	lsrs	r2, r2, #23
 801b44a:	e7e5      	b.n	801b418 <scalbnf+0x34>
 801b44c:	4410      	add	r0, r2
 801b44e:	28fe      	cmp	r0, #254	; 0xfe
 801b450:	dce6      	bgt.n	801b420 <scalbnf+0x3c>
 801b452:	2800      	cmp	r0, #0
 801b454:	dd06      	ble.n	801b464 <scalbnf+0x80>
 801b456:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b45a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801b45e:	ee00 3a10 	vmov	s0, r3
 801b462:	4770      	bx	lr
 801b464:	f110 0f16 	cmn.w	r0, #22
 801b468:	da09      	bge.n	801b47e <scalbnf+0x9a>
 801b46a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801b4a4 <scalbnf+0xc0>
 801b46e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 801b4a8 <scalbnf+0xc4>
 801b472:	ee10 3a10 	vmov	r3, s0
 801b476:	eeb0 7a67 	vmov.f32	s14, s15
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	e7d9      	b.n	801b432 <scalbnf+0x4e>
 801b47e:	3019      	adds	r0, #25
 801b480:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b484:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801b488:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801b4ac <scalbnf+0xc8>
 801b48c:	ee07 3a90 	vmov	s15, r3
 801b490:	e7d7      	b.n	801b442 <scalbnf+0x5e>
 801b492:	bf00      	nop
 801b494:	ffff3cb0 	.word	0xffff3cb0
 801b498:	4c000000 	.word	0x4c000000
 801b49c:	7149f2ca 	.word	0x7149f2ca
 801b4a0:	f149f2ca 	.word	0xf149f2ca
 801b4a4:	0da24260 	.word	0x0da24260
 801b4a8:	8da24260 	.word	0x8da24260
 801b4ac:	33000000 	.word	0x33000000

0801b4b0 <with_errnof>:
 801b4b0:	b513      	push	{r0, r1, r4, lr}
 801b4b2:	4604      	mov	r4, r0
 801b4b4:	ed8d 0a01 	vstr	s0, [sp, #4]
 801b4b8:	f7fa f85c 	bl	8015574 <__errno>
 801b4bc:	ed9d 0a01 	vldr	s0, [sp, #4]
 801b4c0:	6004      	str	r4, [r0, #0]
 801b4c2:	b002      	add	sp, #8
 801b4c4:	bd10      	pop	{r4, pc}

0801b4c6 <xflowf>:
 801b4c6:	b130      	cbz	r0, 801b4d6 <xflowf+0x10>
 801b4c8:	eef1 7a40 	vneg.f32	s15, s0
 801b4cc:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b4d0:	2022      	movs	r0, #34	; 0x22
 801b4d2:	f7ff bfed 	b.w	801b4b0 <with_errnof>
 801b4d6:	eef0 7a40 	vmov.f32	s15, s0
 801b4da:	e7f7      	b.n	801b4cc <xflowf+0x6>

0801b4dc <__math_uflowf>:
 801b4dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b4e4 <__math_uflowf+0x8>
 801b4e0:	f7ff bff1 	b.w	801b4c6 <xflowf>
 801b4e4:	10000000 	.word	0x10000000

0801b4e8 <__math_oflowf>:
 801b4e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b4f0 <__math_oflowf+0x8>
 801b4ec:	f7ff bfeb 	b.w	801b4c6 <xflowf>
 801b4f0:	70000000 	.word	0x70000000

0801b4f4 <__kernel_rem_pio2f>:
 801b4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4f8:	ed2d 8b04 	vpush	{d8-d9}
 801b4fc:	b0d9      	sub	sp, #356	; 0x164
 801b4fe:	4688      	mov	r8, r1
 801b500:	9002      	str	r0, [sp, #8]
 801b502:	49b8      	ldr	r1, [pc, #736]	; (801b7e4 <__kernel_rem_pio2f+0x2f0>)
 801b504:	9866      	ldr	r0, [sp, #408]	; 0x198
 801b506:	9301      	str	r3, [sp, #4]
 801b508:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801b50c:	9901      	ldr	r1, [sp, #4]
 801b50e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801b510:	f101 3bff 	add.w	fp, r1, #4294967295
 801b514:	1d11      	adds	r1, r2, #4
 801b516:	db25      	blt.n	801b564 <__kernel_rem_pio2f+0x70>
 801b518:	1ed0      	subs	r0, r2, #3
 801b51a:	bf48      	it	mi
 801b51c:	1d10      	addmi	r0, r2, #4
 801b51e:	10c0      	asrs	r0, r0, #3
 801b520:	1c45      	adds	r5, r0, #1
 801b522:	00e9      	lsls	r1, r5, #3
 801b524:	eba0 070b 	sub.w	r7, r0, fp
 801b528:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801b7f4 <__kernel_rem_pio2f+0x300>
 801b52c:	9103      	str	r1, [sp, #12]
 801b52e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801b532:	eb0a 0c0b 	add.w	ip, sl, fp
 801b536:	ae1c      	add	r6, sp, #112	; 0x70
 801b538:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801b53c:	2400      	movs	r4, #0
 801b53e:	4564      	cmp	r4, ip
 801b540:	dd12      	ble.n	801b568 <__kernel_rem_pio2f+0x74>
 801b542:	9901      	ldr	r1, [sp, #4]
 801b544:	ac1c      	add	r4, sp, #112	; 0x70
 801b546:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801b54a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801b54e:	f04f 0c00 	mov.w	ip, #0
 801b552:	45d4      	cmp	ip, sl
 801b554:	dc27      	bgt.n	801b5a6 <__kernel_rem_pio2f+0xb2>
 801b556:	f8dd e008 	ldr.w	lr, [sp, #8]
 801b55a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801b7f4 <__kernel_rem_pio2f+0x300>
 801b55e:	4627      	mov	r7, r4
 801b560:	2600      	movs	r6, #0
 801b562:	e016      	b.n	801b592 <__kernel_rem_pio2f+0x9e>
 801b564:	2000      	movs	r0, #0
 801b566:	e7db      	b.n	801b520 <__kernel_rem_pio2f+0x2c>
 801b568:	42e7      	cmn	r7, r4
 801b56a:	bf5d      	ittte	pl
 801b56c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801b570:	ee07 1a90 	vmovpl	s15, r1
 801b574:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801b578:	eef0 7a47 	vmovmi.f32	s15, s14
 801b57c:	ece6 7a01 	vstmia	r6!, {s15}
 801b580:	3401      	adds	r4, #1
 801b582:	e7dc      	b.n	801b53e <__kernel_rem_pio2f+0x4a>
 801b584:	ecfe 6a01 	vldmia	lr!, {s13}
 801b588:	ed97 7a00 	vldr	s14, [r7]
 801b58c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b590:	3601      	adds	r6, #1
 801b592:	455e      	cmp	r6, fp
 801b594:	f1a7 0704 	sub.w	r7, r7, #4
 801b598:	ddf4      	ble.n	801b584 <__kernel_rem_pio2f+0x90>
 801b59a:	ece9 7a01 	vstmia	r9!, {s15}
 801b59e:	f10c 0c01 	add.w	ip, ip, #1
 801b5a2:	3404      	adds	r4, #4
 801b5a4:	e7d5      	b.n	801b552 <__kernel_rem_pio2f+0x5e>
 801b5a6:	a908      	add	r1, sp, #32
 801b5a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b5ac:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801b5b0:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801b7f0 <__kernel_rem_pio2f+0x2fc>
 801b5b4:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801b7ec <__kernel_rem_pio2f+0x2f8>
 801b5b8:	9105      	str	r1, [sp, #20]
 801b5ba:	9304      	str	r3, [sp, #16]
 801b5bc:	4656      	mov	r6, sl
 801b5be:	00b3      	lsls	r3, r6, #2
 801b5c0:	9306      	str	r3, [sp, #24]
 801b5c2:	ab58      	add	r3, sp, #352	; 0x160
 801b5c4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801b5c8:	ac08      	add	r4, sp, #32
 801b5ca:	ab44      	add	r3, sp, #272	; 0x110
 801b5cc:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801b5d0:	46a4      	mov	ip, r4
 801b5d2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801b5d6:	4637      	mov	r7, r6
 801b5d8:	2f00      	cmp	r7, #0
 801b5da:	f1a0 0004 	sub.w	r0, r0, #4
 801b5de:	dc4a      	bgt.n	801b676 <__kernel_rem_pio2f+0x182>
 801b5e0:	4628      	mov	r0, r5
 801b5e2:	9207      	str	r2, [sp, #28]
 801b5e4:	f7ff fefe 	bl	801b3e4 <scalbnf>
 801b5e8:	eeb0 8a40 	vmov.f32	s16, s0
 801b5ec:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801b5f0:	ee28 0a00 	vmul.f32	s0, s16, s0
 801b5f4:	f000 f9f0 	bl	801b9d8 <floorf>
 801b5f8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801b5fc:	eea0 8a67 	vfms.f32	s16, s0, s15
 801b600:	2d00      	cmp	r5, #0
 801b602:	9a07      	ldr	r2, [sp, #28]
 801b604:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801b608:	ee17 9a90 	vmov	r9, s15
 801b60c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b610:	ee38 8a67 	vsub.f32	s16, s16, s15
 801b614:	dd41      	ble.n	801b69a <__kernel_rem_pio2f+0x1a6>
 801b616:	f106 3cff 	add.w	ip, r6, #4294967295
 801b61a:	ab08      	add	r3, sp, #32
 801b61c:	f1c5 0e08 	rsb	lr, r5, #8
 801b620:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801b624:	fa47 f00e 	asr.w	r0, r7, lr
 801b628:	4481      	add	r9, r0
 801b62a:	fa00 f00e 	lsl.w	r0, r0, lr
 801b62e:	1a3f      	subs	r7, r7, r0
 801b630:	f1c5 0007 	rsb	r0, r5, #7
 801b634:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801b638:	4107      	asrs	r7, r0
 801b63a:	2f00      	cmp	r7, #0
 801b63c:	dd3c      	ble.n	801b6b8 <__kernel_rem_pio2f+0x1c4>
 801b63e:	f04f 0e00 	mov.w	lr, #0
 801b642:	f109 0901 	add.w	r9, r9, #1
 801b646:	4671      	mov	r1, lr
 801b648:	4576      	cmp	r6, lr
 801b64a:	dc67      	bgt.n	801b71c <__kernel_rem_pio2f+0x228>
 801b64c:	2d00      	cmp	r5, #0
 801b64e:	dd03      	ble.n	801b658 <__kernel_rem_pio2f+0x164>
 801b650:	2d01      	cmp	r5, #1
 801b652:	d074      	beq.n	801b73e <__kernel_rem_pio2f+0x24a>
 801b654:	2d02      	cmp	r5, #2
 801b656:	d07b      	beq.n	801b750 <__kernel_rem_pio2f+0x25c>
 801b658:	2f02      	cmp	r7, #2
 801b65a:	d12d      	bne.n	801b6b8 <__kernel_rem_pio2f+0x1c4>
 801b65c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801b660:	ee30 8a48 	vsub.f32	s16, s0, s16
 801b664:	b341      	cbz	r1, 801b6b8 <__kernel_rem_pio2f+0x1c4>
 801b666:	4628      	mov	r0, r5
 801b668:	9207      	str	r2, [sp, #28]
 801b66a:	f7ff febb 	bl	801b3e4 <scalbnf>
 801b66e:	9a07      	ldr	r2, [sp, #28]
 801b670:	ee38 8a40 	vsub.f32	s16, s16, s0
 801b674:	e020      	b.n	801b6b8 <__kernel_rem_pio2f+0x1c4>
 801b676:	ee60 7a28 	vmul.f32	s15, s0, s17
 801b67a:	3f01      	subs	r7, #1
 801b67c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b684:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801b688:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b68c:	ecac 0a01 	vstmia	ip!, {s0}
 801b690:	ed90 0a00 	vldr	s0, [r0]
 801b694:	ee37 0a80 	vadd.f32	s0, s15, s0
 801b698:	e79e      	b.n	801b5d8 <__kernel_rem_pio2f+0xe4>
 801b69a:	d105      	bne.n	801b6a8 <__kernel_rem_pio2f+0x1b4>
 801b69c:	1e70      	subs	r0, r6, #1
 801b69e:	ab08      	add	r3, sp, #32
 801b6a0:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801b6a4:	11ff      	asrs	r7, r7, #7
 801b6a6:	e7c8      	b.n	801b63a <__kernel_rem_pio2f+0x146>
 801b6a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b6ac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801b6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6b4:	da30      	bge.n	801b718 <__kernel_rem_pio2f+0x224>
 801b6b6:	2700      	movs	r7, #0
 801b6b8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6c0:	f040 809a 	bne.w	801b7f8 <__kernel_rem_pio2f+0x304>
 801b6c4:	1e74      	subs	r4, r6, #1
 801b6c6:	46a4      	mov	ip, r4
 801b6c8:	2100      	movs	r1, #0
 801b6ca:	45d4      	cmp	ip, sl
 801b6cc:	da47      	bge.n	801b75e <__kernel_rem_pio2f+0x26a>
 801b6ce:	2900      	cmp	r1, #0
 801b6d0:	d063      	beq.n	801b79a <__kernel_rem_pio2f+0x2a6>
 801b6d2:	ab08      	add	r3, sp, #32
 801b6d4:	3d08      	subs	r5, #8
 801b6d6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	d07f      	beq.n	801b7de <__kernel_rem_pio2f+0x2ea>
 801b6de:	4628      	mov	r0, r5
 801b6e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801b6e4:	f7ff fe7e 	bl	801b3e4 <scalbnf>
 801b6e8:	1c63      	adds	r3, r4, #1
 801b6ea:	aa44      	add	r2, sp, #272	; 0x110
 801b6ec:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801b7f0 <__kernel_rem_pio2f+0x2fc>
 801b6f0:	0099      	lsls	r1, r3, #2
 801b6f2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801b6f6:	4623      	mov	r3, r4
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	f280 80ad 	bge.w	801b858 <__kernel_rem_pio2f+0x364>
 801b6fe:	4623      	mov	r3, r4
 801b700:	2b00      	cmp	r3, #0
 801b702:	f2c0 80cb 	blt.w	801b89c <__kernel_rem_pio2f+0x3a8>
 801b706:	aa44      	add	r2, sp, #272	; 0x110
 801b708:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801b70c:	4e36      	ldr	r6, [pc, #216]	; (801b7e8 <__kernel_rem_pio2f+0x2f4>)
 801b70e:	eddf 7a39 	vldr	s15, [pc, #228]	; 801b7f4 <__kernel_rem_pio2f+0x300>
 801b712:	2000      	movs	r0, #0
 801b714:	1ae2      	subs	r2, r4, r3
 801b716:	e0b6      	b.n	801b886 <__kernel_rem_pio2f+0x392>
 801b718:	2702      	movs	r7, #2
 801b71a:	e790      	b.n	801b63e <__kernel_rem_pio2f+0x14a>
 801b71c:	6820      	ldr	r0, [r4, #0]
 801b71e:	b949      	cbnz	r1, 801b734 <__kernel_rem_pio2f+0x240>
 801b720:	b118      	cbz	r0, 801b72a <__kernel_rem_pio2f+0x236>
 801b722:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801b726:	6020      	str	r0, [r4, #0]
 801b728:	2001      	movs	r0, #1
 801b72a:	f10e 0e01 	add.w	lr, lr, #1
 801b72e:	3404      	adds	r4, #4
 801b730:	4601      	mov	r1, r0
 801b732:	e789      	b.n	801b648 <__kernel_rem_pio2f+0x154>
 801b734:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801b738:	6020      	str	r0, [r4, #0]
 801b73a:	4608      	mov	r0, r1
 801b73c:	e7f5      	b.n	801b72a <__kernel_rem_pio2f+0x236>
 801b73e:	1e74      	subs	r4, r6, #1
 801b740:	ab08      	add	r3, sp, #32
 801b742:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b746:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801b74a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b74e:	e783      	b.n	801b658 <__kernel_rem_pio2f+0x164>
 801b750:	1e74      	subs	r4, r6, #1
 801b752:	ab08      	add	r3, sp, #32
 801b754:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b758:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801b75c:	e7f5      	b.n	801b74a <__kernel_rem_pio2f+0x256>
 801b75e:	ab08      	add	r3, sp, #32
 801b760:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801b764:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b768:	4301      	orrs	r1, r0
 801b76a:	e7ae      	b.n	801b6ca <__kernel_rem_pio2f+0x1d6>
 801b76c:	3001      	adds	r0, #1
 801b76e:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801b772:	2f00      	cmp	r7, #0
 801b774:	d0fa      	beq.n	801b76c <__kernel_rem_pio2f+0x278>
 801b776:	9b06      	ldr	r3, [sp, #24]
 801b778:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801b77c:	eb0d 0403 	add.w	r4, sp, r3
 801b780:	9b01      	ldr	r3, [sp, #4]
 801b782:	18f7      	adds	r7, r6, r3
 801b784:	ab1c      	add	r3, sp, #112	; 0x70
 801b786:	f106 0c01 	add.w	ip, r6, #1
 801b78a:	3c4c      	subs	r4, #76	; 0x4c
 801b78c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b790:	4430      	add	r0, r6
 801b792:	4560      	cmp	r0, ip
 801b794:	da04      	bge.n	801b7a0 <__kernel_rem_pio2f+0x2ac>
 801b796:	4606      	mov	r6, r0
 801b798:	e711      	b.n	801b5be <__kernel_rem_pio2f+0xca>
 801b79a:	9c05      	ldr	r4, [sp, #20]
 801b79c:	2001      	movs	r0, #1
 801b79e:	e7e6      	b.n	801b76e <__kernel_rem_pio2f+0x27a>
 801b7a0:	9b04      	ldr	r3, [sp, #16]
 801b7a2:	f8dd e008 	ldr.w	lr, [sp, #8]
 801b7a6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801b7aa:	9306      	str	r3, [sp, #24]
 801b7ac:	ee07 3a90 	vmov	s15, r3
 801b7b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b7b4:	2600      	movs	r6, #0
 801b7b6:	ece7 7a01 	vstmia	r7!, {s15}
 801b7ba:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801b7f4 <__kernel_rem_pio2f+0x300>
 801b7be:	46b9      	mov	r9, r7
 801b7c0:	455e      	cmp	r6, fp
 801b7c2:	dd04      	ble.n	801b7ce <__kernel_rem_pio2f+0x2da>
 801b7c4:	ece4 7a01 	vstmia	r4!, {s15}
 801b7c8:	f10c 0c01 	add.w	ip, ip, #1
 801b7cc:	e7e1      	b.n	801b792 <__kernel_rem_pio2f+0x29e>
 801b7ce:	ecfe 6a01 	vldmia	lr!, {s13}
 801b7d2:	ed39 7a01 	vldmdb	r9!, {s14}
 801b7d6:	3601      	adds	r6, #1
 801b7d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b7dc:	e7f0      	b.n	801b7c0 <__kernel_rem_pio2f+0x2cc>
 801b7de:	3c01      	subs	r4, #1
 801b7e0:	e777      	b.n	801b6d2 <__kernel_rem_pio2f+0x1de>
 801b7e2:	bf00      	nop
 801b7e4:	0801c8f4 	.word	0x0801c8f4
 801b7e8:	0801c8c8 	.word	0x0801c8c8
 801b7ec:	43800000 	.word	0x43800000
 801b7f0:	3b800000 	.word	0x3b800000
 801b7f4:	00000000 	.word	0x00000000
 801b7f8:	9b03      	ldr	r3, [sp, #12]
 801b7fa:	eeb0 0a48 	vmov.f32	s0, s16
 801b7fe:	1a98      	subs	r0, r3, r2
 801b800:	f7ff fdf0 	bl	801b3e4 <scalbnf>
 801b804:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801b7ec <__kernel_rem_pio2f+0x2f8>
 801b808:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801b80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b810:	db19      	blt.n	801b846 <__kernel_rem_pio2f+0x352>
 801b812:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801b7f0 <__kernel_rem_pio2f+0x2fc>
 801b816:	ee60 7a27 	vmul.f32	s15, s0, s15
 801b81a:	aa08      	add	r2, sp, #32
 801b81c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b820:	1c74      	adds	r4, r6, #1
 801b822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b826:	3508      	adds	r5, #8
 801b828:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801b82c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b830:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b834:	ee10 3a10 	vmov	r3, s0
 801b838:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801b83c:	ee17 3a90 	vmov	r3, s15
 801b840:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801b844:	e74b      	b.n	801b6de <__kernel_rem_pio2f+0x1ea>
 801b846:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b84a:	aa08      	add	r2, sp, #32
 801b84c:	ee10 3a10 	vmov	r3, s0
 801b850:	4634      	mov	r4, r6
 801b852:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801b856:	e742      	b.n	801b6de <__kernel_rem_pio2f+0x1ea>
 801b858:	a808      	add	r0, sp, #32
 801b85a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801b85e:	9001      	str	r0, [sp, #4]
 801b860:	ee07 0a90 	vmov	s15, r0
 801b864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b868:	3b01      	subs	r3, #1
 801b86a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b86e:	ee20 0a07 	vmul.f32	s0, s0, s14
 801b872:	ed62 7a01 	vstmdb	r2!, {s15}
 801b876:	e73f      	b.n	801b6f8 <__kernel_rem_pio2f+0x204>
 801b878:	ecf6 6a01 	vldmia	r6!, {s13}
 801b87c:	ecb5 7a01 	vldmia	r5!, {s14}
 801b880:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b884:	3001      	adds	r0, #1
 801b886:	4550      	cmp	r0, sl
 801b888:	dc01      	bgt.n	801b88e <__kernel_rem_pio2f+0x39a>
 801b88a:	4290      	cmp	r0, r2
 801b88c:	ddf4      	ble.n	801b878 <__kernel_rem_pio2f+0x384>
 801b88e:	a858      	add	r0, sp, #352	; 0x160
 801b890:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801b894:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801b898:	3b01      	subs	r3, #1
 801b89a:	e731      	b.n	801b700 <__kernel_rem_pio2f+0x20c>
 801b89c:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801b89e:	2b02      	cmp	r3, #2
 801b8a0:	dc09      	bgt.n	801b8b6 <__kernel_rem_pio2f+0x3c2>
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	dc2b      	bgt.n	801b8fe <__kernel_rem_pio2f+0x40a>
 801b8a6:	d044      	beq.n	801b932 <__kernel_rem_pio2f+0x43e>
 801b8a8:	f009 0007 	and.w	r0, r9, #7
 801b8ac:	b059      	add	sp, #356	; 0x164
 801b8ae:	ecbd 8b04 	vpop	{d8-d9}
 801b8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8b6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801b8b8:	2b03      	cmp	r3, #3
 801b8ba:	d1f5      	bne.n	801b8a8 <__kernel_rem_pio2f+0x3b4>
 801b8bc:	aa30      	add	r2, sp, #192	; 0xc0
 801b8be:	1f0b      	subs	r3, r1, #4
 801b8c0:	4413      	add	r3, r2
 801b8c2:	461a      	mov	r2, r3
 801b8c4:	4620      	mov	r0, r4
 801b8c6:	2800      	cmp	r0, #0
 801b8c8:	f1a2 0204 	sub.w	r2, r2, #4
 801b8cc:	dc52      	bgt.n	801b974 <__kernel_rem_pio2f+0x480>
 801b8ce:	4622      	mov	r2, r4
 801b8d0:	2a01      	cmp	r2, #1
 801b8d2:	f1a3 0304 	sub.w	r3, r3, #4
 801b8d6:	dc5d      	bgt.n	801b994 <__kernel_rem_pio2f+0x4a0>
 801b8d8:	ab30      	add	r3, sp, #192	; 0xc0
 801b8da:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801b7f4 <__kernel_rem_pio2f+0x300>
 801b8de:	440b      	add	r3, r1
 801b8e0:	2c01      	cmp	r4, #1
 801b8e2:	dc67      	bgt.n	801b9b4 <__kernel_rem_pio2f+0x4c0>
 801b8e4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801b8e8:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801b8ec:	2f00      	cmp	r7, #0
 801b8ee:	d167      	bne.n	801b9c0 <__kernel_rem_pio2f+0x4cc>
 801b8f0:	edc8 6a00 	vstr	s13, [r8]
 801b8f4:	ed88 7a01 	vstr	s14, [r8, #4]
 801b8f8:	edc8 7a02 	vstr	s15, [r8, #8]
 801b8fc:	e7d4      	b.n	801b8a8 <__kernel_rem_pio2f+0x3b4>
 801b8fe:	ab30      	add	r3, sp, #192	; 0xc0
 801b900:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801b7f4 <__kernel_rem_pio2f+0x300>
 801b904:	440b      	add	r3, r1
 801b906:	4622      	mov	r2, r4
 801b908:	2a00      	cmp	r2, #0
 801b90a:	da24      	bge.n	801b956 <__kernel_rem_pio2f+0x462>
 801b90c:	b34f      	cbz	r7, 801b962 <__kernel_rem_pio2f+0x46e>
 801b90e:	eef1 7a47 	vneg.f32	s15, s14
 801b912:	edc8 7a00 	vstr	s15, [r8]
 801b916:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801b91a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b91e:	aa31      	add	r2, sp, #196	; 0xc4
 801b920:	2301      	movs	r3, #1
 801b922:	429c      	cmp	r4, r3
 801b924:	da20      	bge.n	801b968 <__kernel_rem_pio2f+0x474>
 801b926:	b10f      	cbz	r7, 801b92c <__kernel_rem_pio2f+0x438>
 801b928:	eef1 7a67 	vneg.f32	s15, s15
 801b92c:	edc8 7a01 	vstr	s15, [r8, #4]
 801b930:	e7ba      	b.n	801b8a8 <__kernel_rem_pio2f+0x3b4>
 801b932:	ab30      	add	r3, sp, #192	; 0xc0
 801b934:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801b7f4 <__kernel_rem_pio2f+0x300>
 801b938:	440b      	add	r3, r1
 801b93a:	2c00      	cmp	r4, #0
 801b93c:	da05      	bge.n	801b94a <__kernel_rem_pio2f+0x456>
 801b93e:	b10f      	cbz	r7, 801b944 <__kernel_rem_pio2f+0x450>
 801b940:	eef1 7a67 	vneg.f32	s15, s15
 801b944:	edc8 7a00 	vstr	s15, [r8]
 801b948:	e7ae      	b.n	801b8a8 <__kernel_rem_pio2f+0x3b4>
 801b94a:	ed33 7a01 	vldmdb	r3!, {s14}
 801b94e:	3c01      	subs	r4, #1
 801b950:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b954:	e7f1      	b.n	801b93a <__kernel_rem_pio2f+0x446>
 801b956:	ed73 7a01 	vldmdb	r3!, {s15}
 801b95a:	3a01      	subs	r2, #1
 801b95c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b960:	e7d2      	b.n	801b908 <__kernel_rem_pio2f+0x414>
 801b962:	eef0 7a47 	vmov.f32	s15, s14
 801b966:	e7d4      	b.n	801b912 <__kernel_rem_pio2f+0x41e>
 801b968:	ecb2 7a01 	vldmia	r2!, {s14}
 801b96c:	3301      	adds	r3, #1
 801b96e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b972:	e7d6      	b.n	801b922 <__kernel_rem_pio2f+0x42e>
 801b974:	edd2 7a00 	vldr	s15, [r2]
 801b978:	edd2 6a01 	vldr	s13, [r2, #4]
 801b97c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b980:	3801      	subs	r0, #1
 801b982:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b986:	ed82 7a00 	vstr	s14, [r2]
 801b98a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b98e:	edc2 7a01 	vstr	s15, [r2, #4]
 801b992:	e798      	b.n	801b8c6 <__kernel_rem_pio2f+0x3d2>
 801b994:	edd3 7a00 	vldr	s15, [r3]
 801b998:	edd3 6a01 	vldr	s13, [r3, #4]
 801b99c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b9a0:	3a01      	subs	r2, #1
 801b9a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b9a6:	ed83 7a00 	vstr	s14, [r3]
 801b9aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b9ae:	edc3 7a01 	vstr	s15, [r3, #4]
 801b9b2:	e78d      	b.n	801b8d0 <__kernel_rem_pio2f+0x3dc>
 801b9b4:	ed33 7a01 	vldmdb	r3!, {s14}
 801b9b8:	3c01      	subs	r4, #1
 801b9ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b9be:	e78f      	b.n	801b8e0 <__kernel_rem_pio2f+0x3ec>
 801b9c0:	eef1 6a66 	vneg.f32	s13, s13
 801b9c4:	eeb1 7a47 	vneg.f32	s14, s14
 801b9c8:	edc8 6a00 	vstr	s13, [r8]
 801b9cc:	ed88 7a01 	vstr	s14, [r8, #4]
 801b9d0:	eef1 7a67 	vneg.f32	s15, s15
 801b9d4:	e790      	b.n	801b8f8 <__kernel_rem_pio2f+0x404>
 801b9d6:	bf00      	nop

0801b9d8 <floorf>:
 801b9d8:	ee10 3a10 	vmov	r3, s0
 801b9dc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b9e0:	3a7f      	subs	r2, #127	; 0x7f
 801b9e2:	2a16      	cmp	r2, #22
 801b9e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801b9e8:	dc2a      	bgt.n	801ba40 <floorf+0x68>
 801b9ea:	2a00      	cmp	r2, #0
 801b9ec:	da11      	bge.n	801ba12 <floorf+0x3a>
 801b9ee:	eddf 7a18 	vldr	s15, [pc, #96]	; 801ba50 <floorf+0x78>
 801b9f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b9f6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9fe:	dd05      	ble.n	801ba0c <floorf+0x34>
 801ba00:	2b00      	cmp	r3, #0
 801ba02:	da23      	bge.n	801ba4c <floorf+0x74>
 801ba04:	4a13      	ldr	r2, [pc, #76]	; (801ba54 <floorf+0x7c>)
 801ba06:	2900      	cmp	r1, #0
 801ba08:	bf18      	it	ne
 801ba0a:	4613      	movne	r3, r2
 801ba0c:	ee00 3a10 	vmov	s0, r3
 801ba10:	4770      	bx	lr
 801ba12:	4911      	ldr	r1, [pc, #68]	; (801ba58 <floorf+0x80>)
 801ba14:	4111      	asrs	r1, r2
 801ba16:	420b      	tst	r3, r1
 801ba18:	d0fa      	beq.n	801ba10 <floorf+0x38>
 801ba1a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801ba50 <floorf+0x78>
 801ba1e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ba22:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ba26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba2a:	ddef      	ble.n	801ba0c <floorf+0x34>
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	bfbe      	ittt	lt
 801ba30:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801ba34:	fa40 f202 	asrlt.w	r2, r0, r2
 801ba38:	189b      	addlt	r3, r3, r2
 801ba3a:	ea23 0301 	bic.w	r3, r3, r1
 801ba3e:	e7e5      	b.n	801ba0c <floorf+0x34>
 801ba40:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801ba44:	d3e4      	bcc.n	801ba10 <floorf+0x38>
 801ba46:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ba4a:	4770      	bx	lr
 801ba4c:	2300      	movs	r3, #0
 801ba4e:	e7dd      	b.n	801ba0c <floorf+0x34>
 801ba50:	7149f2ca 	.word	0x7149f2ca
 801ba54:	bf800000 	.word	0xbf800000
 801ba58:	007fffff 	.word	0x007fffff

0801ba5c <_init>:
 801ba5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba5e:	bf00      	nop
 801ba60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ba62:	bc08      	pop	{r3}
 801ba64:	469e      	mov	lr, r3
 801ba66:	4770      	bx	lr

0801ba68 <_fini>:
 801ba68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba6a:	bf00      	nop
 801ba6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ba6e:	bc08      	pop	{r3}
 801ba70:	469e      	mov	lr, r3
 801ba72:	4770      	bx	lr
