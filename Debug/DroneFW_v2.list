
DroneFW_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a1c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c0  08017c00  08017c00  00027c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080185c0  080185c0  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  080185c0  080185c0  000285c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080185c8  080185c8  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080185c8  080185c8  000285c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080185cc  080185cc  000285cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080185d0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049f8  200001f0  080187c0  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004be8  080187c0  00034be8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029dd2  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b1e  00000000  00000000  0005a035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d88  00000000  00000000  0005fb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016bc  00000000  00000000  000618e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a6b5  00000000  00000000  00062f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a9f7  00000000  00000000  0008d651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000edf7e  00000000  00000000  000b8048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000948c  00000000  00000000  001a5fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001af454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08017be4 	.word	0x08017be4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	08017be4 	.word	0x08017be4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_ldivmod>:
 8000cd8:	b97b      	cbnz	r3, 8000cfa <__aeabi_ldivmod+0x22>
 8000cda:	b972      	cbnz	r2, 8000cfa <__aeabi_ldivmod+0x22>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bfbe      	ittt	lt
 8000ce0:	2000      	movlt	r0, #0
 8000ce2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ce6:	e006      	blt.n	8000cf6 <__aeabi_ldivmod+0x1e>
 8000ce8:	bf08      	it	eq
 8000cea:	2800      	cmpeq	r0, #0
 8000cec:	bf1c      	itt	ne
 8000cee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cf2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf6:	f000 b9f1 	b.w	80010dc <__aeabi_idiv0>
 8000cfa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d02:	2900      	cmp	r1, #0
 8000d04:	db09      	blt.n	8000d1a <__aeabi_ldivmod+0x42>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db1a      	blt.n	8000d40 <__aeabi_ldivmod+0x68>
 8000d0a:	f000 f883 	bl	8000e14 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4770      	bx	lr
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db1b      	blt.n	8000d5c <__aeabi_ldivmod+0x84>
 8000d24:	f000 f876 	bl	8000e14 <__udivmoddi4>
 8000d28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d30:	b004      	add	sp, #16
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	4252      	negs	r2, r2
 8000d3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3e:	4770      	bx	lr
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	f000 f865 	bl	8000e14 <__udivmoddi4>
 8000d4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d52:	b004      	add	sp, #16
 8000d54:	4240      	negs	r0, r0
 8000d56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5a:	4770      	bx	lr
 8000d5c:	4252      	negs	r2, r2
 8000d5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d62:	f000 f857 	bl	8000e14 <__udivmoddi4>
 8000d66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6e:	b004      	add	sp, #16
 8000d70:	4252      	negs	r2, r2
 8000d72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_uldivmod>:
 8000d78:	b953      	cbnz	r3, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7a:	b94a      	cbnz	r2, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bf08      	it	eq
 8000d80:	2800      	cmpeq	r0, #0
 8000d82:	bf1c      	itt	ne
 8000d84:	f04f 31ff 	movne.w	r1, #4294967295
 8000d88:	f04f 30ff 	movne.w	r0, #4294967295
 8000d8c:	f000 b9a6 	b.w	80010dc <__aeabi_idiv0>
 8000d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d98:	f000 f83c 	bl	8000e14 <__udivmoddi4>
 8000d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da4:	b004      	add	sp, #16
 8000da6:	4770      	bx	lr

08000da8 <__aeabi_d2lz>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	2200      	movs	r2, #0
 8000dac:	2300      	movs	r3, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	460d      	mov	r5, r1
 8000db2:	f7ff febb 	bl	8000b2c <__aeabi_dcmplt>
 8000db6:	b928      	cbnz	r0, 8000dc4 <__aeabi_d2lz+0x1c>
 8000db8:	4620      	mov	r0, r4
 8000dba:	4629      	mov	r1, r5
 8000dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc0:	f000 b80a 	b.w	8000dd8 <__aeabi_d2ulz>
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dca:	f000 f805 	bl	8000dd8 <__aeabi_d2ulz>
 8000dce:	4240      	negs	r0, r0
 8000dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd4:	bd38      	pop	{r3, r4, r5, pc}
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_d2ulz>:
 8000dd8:	b5d0      	push	{r4, r6, r7, lr}
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__aeabi_d2ulz+0x34>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4606      	mov	r6, r0
 8000de0:	460f      	mov	r7, r1
 8000de2:	f7ff fc31 	bl	8000648 <__aeabi_dmul>
 8000de6:	f7ff ff07 	bl	8000bf8 <__aeabi_d2uiz>
 8000dea:	4604      	mov	r4, r0
 8000dec:	f7ff fbb2 	bl	8000554 <__aeabi_ui2d>
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <__aeabi_d2ulz+0x38>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f7ff fc28 	bl	8000648 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	4639      	mov	r1, r7
 8000e00:	f7ff fa6a 	bl	80002d8 <__aeabi_dsub>
 8000e04:	f7ff fef8 	bl	8000bf8 <__aeabi_d2uiz>
 8000e08:	4621      	mov	r1, r4
 8000e0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e0c:	3df00000 	.word	0x3df00000
 8000e10:	41f00000 	.word	0x41f00000

08000e14 <__udivmoddi4>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	9e08      	ldr	r6, [sp, #32]
 8000e1a:	460d      	mov	r5, r1
 8000e1c:	4604      	mov	r4, r0
 8000e1e:	460f      	mov	r7, r1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d14a      	bne.n	8000eba <__udivmoddi4+0xa6>
 8000e24:	428a      	cmp	r2, r1
 8000e26:	4694      	mov	ip, r2
 8000e28:	d965      	bls.n	8000ef6 <__udivmoddi4+0xe2>
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	b143      	cbz	r3, 8000e42 <__udivmoddi4+0x2e>
 8000e30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e34:	f1c3 0220 	rsb	r2, r3, #32
 8000e38:	409f      	lsls	r7, r3
 8000e3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3e:	4317      	orrs	r7, r2
 8000e40:	409c      	lsls	r4, r3
 8000e42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e46:	fa1f f58c 	uxth.w	r5, ip
 8000e4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e4e:	0c22      	lsrs	r2, r4, #16
 8000e50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e58:	fb01 f005 	mul.w	r0, r1, r5
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	d90a      	bls.n	8000e76 <__udivmoddi4+0x62>
 8000e60:	eb1c 0202 	adds.w	r2, ip, r2
 8000e64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e68:	f080 811c 	bcs.w	80010a4 <__udivmoddi4+0x290>
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	f240 8119 	bls.w	80010a4 <__udivmoddi4+0x290>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4462      	add	r2, ip
 8000e76:	1a12      	subs	r2, r2, r0
 8000e78:	b2a4      	uxth	r4, r4
 8000e7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e86:	fb00 f505 	mul.w	r5, r0, r5
 8000e8a:	42a5      	cmp	r5, r4
 8000e8c:	d90a      	bls.n	8000ea4 <__udivmoddi4+0x90>
 8000e8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e96:	f080 8107 	bcs.w	80010a8 <__udivmoddi4+0x294>
 8000e9a:	42a5      	cmp	r5, r4
 8000e9c:	f240 8104 	bls.w	80010a8 <__udivmoddi4+0x294>
 8000ea0:	4464      	add	r4, ip
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	2100      	movs	r1, #0
 8000eac:	b11e      	cbz	r6, 8000eb6 <__udivmoddi4+0xa2>
 8000eae:	40dc      	lsrs	r4, r3
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0xbc>
 8000ebe:	2e00      	cmp	r6, #0
 8000ec0:	f000 80ed 	beq.w	800109e <__udivmoddi4+0x28a>
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed0:	fab3 f183 	clz	r1, r3
 8000ed4:	2900      	cmp	r1, #0
 8000ed6:	d149      	bne.n	8000f6c <__udivmoddi4+0x158>
 8000ed8:	42ab      	cmp	r3, r5
 8000eda:	d302      	bcc.n	8000ee2 <__udivmoddi4+0xce>
 8000edc:	4282      	cmp	r2, r0
 8000ede:	f200 80f8 	bhi.w	80010d2 <__udivmoddi4+0x2be>
 8000ee2:	1a84      	subs	r4, r0, r2
 8000ee4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ee8:	2001      	movs	r0, #1
 8000eea:	4617      	mov	r7, r2
 8000eec:	2e00      	cmp	r6, #0
 8000eee:	d0e2      	beq.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ef4:	e7df      	b.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef6:	b902      	cbnz	r2, 8000efa <__udivmoddi4+0xe6>
 8000ef8:	deff      	udf	#255	; 0xff
 8000efa:	fab2 f382 	clz	r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f040 8090 	bne.w	8001024 <__udivmoddi4+0x210>
 8000f04:	1a8a      	subs	r2, r1, r2
 8000f06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f0a:	fa1f fe8c 	uxth.w	lr, ip
 8000f0e:	2101      	movs	r1, #1
 8000f10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f14:	fb07 2015 	mls	r0, r7, r5, r2
 8000f18:	0c22      	lsrs	r2, r4, #16
 8000f1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f1e:	fb0e f005 	mul.w	r0, lr, r5
 8000f22:	4290      	cmp	r0, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x124>
 8000f26:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x122>
 8000f30:	4290      	cmp	r0, r2
 8000f32:	f200 80cb 	bhi.w	80010cc <__udivmoddi4+0x2b8>
 8000f36:	4645      	mov	r5, r8
 8000f38:	1a12      	subs	r2, r2, r0
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f40:	fb07 2210 	mls	r2, r7, r0, r2
 8000f44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f48:	fb0e fe00 	mul.w	lr, lr, r0
 8000f4c:	45a6      	cmp	lr, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x14e>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f58:	d202      	bcs.n	8000f60 <__udivmoddi4+0x14c>
 8000f5a:	45a6      	cmp	lr, r4
 8000f5c:	f200 80bb 	bhi.w	80010d6 <__udivmoddi4+0x2c2>
 8000f60:	4610      	mov	r0, r2
 8000f62:	eba4 040e 	sub.w	r4, r4, lr
 8000f66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f6a:	e79f      	b.n	8000eac <__udivmoddi4+0x98>
 8000f6c:	f1c1 0720 	rsb	r7, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f82:	40fd      	lsrs	r5, r7
 8000f84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f88:	4323      	orrs	r3, r4
 8000f8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f8e:	fa1f fe8c 	uxth.w	lr, ip
 8000f92:	fb09 5518 	mls	r5, r9, r8, r5
 8000f96:	0c1c      	lsrs	r4, r3, #16
 8000f98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000fa0:	42a5      	cmp	r5, r4
 8000fa2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fa6:	fa00 f001 	lsl.w	r0, r0, r1
 8000faa:	d90b      	bls.n	8000fc4 <__udivmoddi4+0x1b0>
 8000fac:	eb1c 0404 	adds.w	r4, ip, r4
 8000fb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fb4:	f080 8088 	bcs.w	80010c8 <__udivmoddi4+0x2b4>
 8000fb8:	42a5      	cmp	r5, r4
 8000fba:	f240 8085 	bls.w	80010c8 <__udivmoddi4+0x2b4>
 8000fbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000fc2:	4464      	add	r4, ip
 8000fc4:	1b64      	subs	r4, r4, r5
 8000fc6:	b29d      	uxth	r5, r3
 8000fc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000fd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fd8:	45a6      	cmp	lr, r4
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x1da>
 8000fdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fe4:	d26c      	bcs.n	80010c0 <__udivmoddi4+0x2ac>
 8000fe6:	45a6      	cmp	lr, r4
 8000fe8:	d96a      	bls.n	80010c0 <__udivmoddi4+0x2ac>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	4464      	add	r4, ip
 8000fee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ff2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ff6:	eba4 040e 	sub.w	r4, r4, lr
 8000ffa:	42ac      	cmp	r4, r5
 8000ffc:	46c8      	mov	r8, r9
 8000ffe:	46ae      	mov	lr, r5
 8001000:	d356      	bcc.n	80010b0 <__udivmoddi4+0x29c>
 8001002:	d053      	beq.n	80010ac <__udivmoddi4+0x298>
 8001004:	b156      	cbz	r6, 800101c <__udivmoddi4+0x208>
 8001006:	ebb0 0208 	subs.w	r2, r0, r8
 800100a:	eb64 040e 	sbc.w	r4, r4, lr
 800100e:	fa04 f707 	lsl.w	r7, r4, r7
 8001012:	40ca      	lsrs	r2, r1
 8001014:	40cc      	lsrs	r4, r1
 8001016:	4317      	orrs	r7, r2
 8001018:	e9c6 7400 	strd	r7, r4, [r6]
 800101c:	4618      	mov	r0, r3
 800101e:	2100      	movs	r1, #0
 8001020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001024:	f1c3 0120 	rsb	r1, r3, #32
 8001028:	fa02 fc03 	lsl.w	ip, r2, r3
 800102c:	fa20 f201 	lsr.w	r2, r0, r1
 8001030:	fa25 f101 	lsr.w	r1, r5, r1
 8001034:	409d      	lsls	r5, r3
 8001036:	432a      	orrs	r2, r5
 8001038:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103c:	fa1f fe8c 	uxth.w	lr, ip
 8001040:	fbb1 f0f7 	udiv	r0, r1, r7
 8001044:	fb07 1510 	mls	r5, r7, r0, r1
 8001048:	0c11      	lsrs	r1, r2, #16
 800104a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800104e:	fb00 f50e 	mul.w	r5, r0, lr
 8001052:	428d      	cmp	r5, r1
 8001054:	fa04 f403 	lsl.w	r4, r4, r3
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x258>
 800105a:	eb1c 0101 	adds.w	r1, ip, r1
 800105e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001062:	d22f      	bcs.n	80010c4 <__udivmoddi4+0x2b0>
 8001064:	428d      	cmp	r5, r1
 8001066:	d92d      	bls.n	80010c4 <__udivmoddi4+0x2b0>
 8001068:	3802      	subs	r0, #2
 800106a:	4461      	add	r1, ip
 800106c:	1b49      	subs	r1, r1, r5
 800106e:	b292      	uxth	r2, r2
 8001070:	fbb1 f5f7 	udiv	r5, r1, r7
 8001074:	fb07 1115 	mls	r1, r7, r5, r1
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	fb05 f10e 	mul.w	r1, r5, lr
 8001080:	4291      	cmp	r1, r2
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x282>
 8001084:	eb1c 0202 	adds.w	r2, ip, r2
 8001088:	f105 38ff 	add.w	r8, r5, #4294967295
 800108c:	d216      	bcs.n	80010bc <__udivmoddi4+0x2a8>
 800108e:	4291      	cmp	r1, r2
 8001090:	d914      	bls.n	80010bc <__udivmoddi4+0x2a8>
 8001092:	3d02      	subs	r5, #2
 8001094:	4462      	add	r2, ip
 8001096:	1a52      	subs	r2, r2, r1
 8001098:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800109c:	e738      	b.n	8000f10 <__udivmoddi4+0xfc>
 800109e:	4631      	mov	r1, r6
 80010a0:	4630      	mov	r0, r6
 80010a2:	e708      	b.n	8000eb6 <__udivmoddi4+0xa2>
 80010a4:	4639      	mov	r1, r7
 80010a6:	e6e6      	b.n	8000e76 <__udivmoddi4+0x62>
 80010a8:	4610      	mov	r0, r2
 80010aa:	e6fb      	b.n	8000ea4 <__udivmoddi4+0x90>
 80010ac:	4548      	cmp	r0, r9
 80010ae:	d2a9      	bcs.n	8001004 <__udivmoddi4+0x1f0>
 80010b0:	ebb9 0802 	subs.w	r8, r9, r2
 80010b4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010b8:	3b01      	subs	r3, #1
 80010ba:	e7a3      	b.n	8001004 <__udivmoddi4+0x1f0>
 80010bc:	4645      	mov	r5, r8
 80010be:	e7ea      	b.n	8001096 <__udivmoddi4+0x282>
 80010c0:	462b      	mov	r3, r5
 80010c2:	e794      	b.n	8000fee <__udivmoddi4+0x1da>
 80010c4:	4640      	mov	r0, r8
 80010c6:	e7d1      	b.n	800106c <__udivmoddi4+0x258>
 80010c8:	46d0      	mov	r8, sl
 80010ca:	e77b      	b.n	8000fc4 <__udivmoddi4+0x1b0>
 80010cc:	3d02      	subs	r5, #2
 80010ce:	4462      	add	r2, ip
 80010d0:	e732      	b.n	8000f38 <__udivmoddi4+0x124>
 80010d2:	4608      	mov	r0, r1
 80010d4:	e70a      	b.n	8000eec <__udivmoddi4+0xd8>
 80010d6:	4464      	add	r4, ip
 80010d8:	3802      	subs	r0, #2
 80010da:	e742      	b.n	8000f62 <__udivmoddi4+0x14e>

080010dc <__aeabi_idiv0>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <PIDController_Init>:
#include "Controller/PID.h"
#include <stdint.h>

void PIDController_Init(PIDController *pid)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	// Clear Anti-windup flag
	pid->antiWindup = false;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// Clear controller variables
	pid->prevError  = 0.0f;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
	pid->integrator = 0.0f;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->differentiator  = 0.0f;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	631a      	str	r2, [r3, #48]	; 0x30

	// Clear output
	pid->out = 0.0f;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	635a      	str	r2, [r3, #52]	; 0x34

	// Calculate low-pass filter parameters
	pid->tau = 5 * pid->T;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	edd3 7a03 	vldr	s15, [r3, #12]
 8001116:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800111a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	edc3 7a05 	vstr	s15, [r3, #20]
	pid->alpha = ( 2*pid->T ) / ( 2*pid->tau + pid->T );
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	edd3 7a03 	vldr	s15, [r3, #12]
 800112a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	edd3 7a05 	vldr	s15, [r3, #20]
 8001134:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	edd3 7a03 	vldr	s15, [r3, #12]
 800113e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	edc3 7a06 	vstr	s15, [r3, #24]

	// Reset lastTick
	pid->lastTick = 0;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float reference, float measurement)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	ed87 0a02 	vstr	s0, [r7, #8]
 800116c:	edc7 0a01 	vstr	s1, [r7, #4]
	// Check if enough time has passed for the T sample time
	bool run = false;
 8001170:	2300      	movs	r3, #0
 8001172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t currentTick = xTaskGetTickCount();
 8001176:	f00f fa75 	bl	8010664 <xTaskGetTickCount>
 800117a:	4603      	mov	r3, r0
 800117c:	623b      	str	r3, [r7, #32]
	// First run after initialization
	if (pid->lastTick == 0)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d106      	bne.n	8001194 <PIDController_Update+0x34>
	{
		run = true;
 8001186:	2301      	movs	r3, #1
 8001188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pid->lastTick = currentTick;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6a3a      	ldr	r2, [r7, #32]
 8001190:	611a      	str	r2, [r3, #16]
 8001192:	e01a      	b.n	80011ca <PIDController_Update+0x6a>
	}
	// If enough time has passed (Tick's unit is ms, while T's unit is s)
	else if (currentTick - pid->lastTick >= (pid->T * 1000))
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	6a3a      	ldr	r2, [r7, #32]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80011aa:	eddf 6a71 	vldr	s13, [pc, #452]	; 8001370 <PIDController_Update+0x210>
 80011ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	db03      	blt.n	80011c4 <PIDController_Update+0x64>
		run = true;
 80011bc:	2301      	movs	r3, #1
 80011be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011c2:	e002      	b.n	80011ca <PIDController_Update+0x6a>
	// If it is too early
	else
		run = false;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	pid->lastTick = currentTick;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6a3a      	ldr	r2, [r7, #32]
 80011ce:	611a      	str	r2, [r3, #16]

	// PID algorithm
	if (run)
 80011d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80c5 	beq.w	8001364 <PIDController_Update+0x204>
	{
		//Error signal
		float error = reference - measurement;
 80011da:	ed97 7a02 	vldr	s14, [r7, #8]
 80011de:	edd7 7a01 	vldr	s15, [r7, #4]
 80011e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e6:	edc7 7a07 	vstr	s15, [r7, #28]

		// Proportional
		float proportional = pid->Kp * error;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80011f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f8:	edc7 7a06 	vstr	s15, [r7, #24]

		// Integral with Anti-windup
		if (!pid->antiWindup)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001202:	f083 0301 	eor.w	r3, r3, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d01c      	beq.n	8001246 <PIDController_Update+0xe6>
			pid->integrator = pid->integrator + ( pid->Ki * (pid->T / 2) * (error + pid->prevError) );
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	edd3 6a01 	vldr	s13, [r3, #4]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	ed93 6a03 	vldr	s12, [r3, #12]
 800121e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001226:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 8001230:	edd7 7a07 	vldr	s15, [r7, #28]
 8001234:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800123c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

		// Derivative with low-pass filter
		pid->differentiator = (1 - pid->alpha) * pid->differentiator
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	edd3 7a06 	vldr	s15, [r3, #24]
 800124c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001250:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800125a:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ pid->alpha *  (pid->Kd * (error - pid->prevError) / pid->T);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	edd3 6a06 	vldr	s13, [r3, #24]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	ed93 6a02 	vldr	s12, [r3, #8]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001270:	edd7 5a07 	vldr	s11, [r7, #28]
 8001274:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001278:	ee66 5a27 	vmul.f32	s11, s12, s15
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	ed93 6a03 	vldr	s12, [r3, #12]
 8001282:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128a:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->differentiator = (1 - pid->alpha) * pid->differentiator
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

		// Compute output
		pid->out = proportional + pid->integrator + pid->differentiator;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800129a:	edd7 7a06 	vldr	s15, [r7, #24]
 800129e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80012a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		float preSaturationOutput = pid->out;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b6:	617b      	str	r3, [r7, #20]

		// Saturating (clamping) the output
		if (pid->out > pid->limMax)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	edd3 7a08 	vldr	s15, [r3, #32]
 80012c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012cc:	dd04      	ble.n	80012d8 <PIDController_Update+0x178>
			pid->out = pid->limMax;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6a1a      	ldr	r2, [r3, #32]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	635a      	str	r2, [r3, #52]	; 0x34
 80012d6:	e00e      	b.n	80012f6 <PIDController_Update+0x196>
		else if (pid->out < pid->limMin)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	edd3 7a07 	vldr	s15, [r3, #28]
 80012e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ec:	d503      	bpl.n	80012f6 <PIDController_Update+0x196>
			pid->out = pid->limMin;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	69da      	ldr	r2, [r3, #28]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	635a      	str	r2, [r3, #52]	; 0x34

		// Anti-windup check
		// If clamping had an effect...
		if (preSaturationOutput != pid->out)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80012fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001300:	eeb4 7a67 	vcmp.f32	s14, s15
 8001304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001308:	d020      	beq.n	800134c <PIDController_Update+0x1ec>
		{
			// ...and if the integrator is trying to make saturation worse
			if ((preSaturationOutput > 0 && error > 0)
 800130a:	edd7 7a05 	vldr	s15, [r7, #20]
 800130e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001316:	dd06      	ble.n	8001326 <PIDController_Update+0x1c6>
 8001318:	edd7 7a07 	vldr	s15, [r7, #28]
 800131c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001324:	dc0d      	bgt.n	8001342 <PIDController_Update+0x1e2>
					|| (preSaturationOutput < 0 && error < 0))
 8001326:	edd7 7a05 	vldr	s15, [r7, #20]
 800132a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800132e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001332:	d50f      	bpl.n	8001354 <PIDController_Update+0x1f4>
 8001334:	edd7 7a07 	vldr	s15, [r7, #28]
 8001338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800133c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001340:	d508      	bpl.n	8001354 <PIDController_Update+0x1f4>
				pid->antiWindup = true;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800134a:	e003      	b.n	8001354 <PIDController_Update+0x1f4>
		}
		else
			pid->antiWindup = false;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		// Store error for later use
		pid->prevError = error;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	629a      	str	r2, [r3, #40]	; 0x28

		return 0;
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	e7ff      	b.n	8001364 <PIDController_Update+0x204>
	}
}
 8001364:	eeb0 0a67 	vmov.f32	s0, s15
 8001368:	3728      	adds	r7, #40	; 0x28
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	447a0000 	.word	0x447a0000

08001374 <Log>:
#include "string.h"

extern UART_HandleTypeDef huart3;

void Log(const char* msg)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b09c      	sub	sp, #112	; 0x70
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	if (DebugIsOn)
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <Log+0x44>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d014      	beq.n	80013ae <Log+0x3a>
	{
		char str[100];

		sprintf(str, "%s\r\n", msg);
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	490c      	ldr	r1, [pc, #48]	; (80013bc <Log+0x48>)
 800138c:	4618      	mov	r0, r3
 800138e:	f011 fa1d 	bl	80127cc <siprintf>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	4618      	mov	r0, r3
 8001398:	f7fe ff92 	bl	80002c0 <strlen>
 800139c:	4603      	mov	r3, r0
 800139e:	b29a      	uxth	r2, r3
 80013a0:	f107 010c 	add.w	r1, r7, #12
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <Log+0x4c>)
 80013aa:	f00c f88f 	bl	800d4cc <HAL_UART_Transmit>
	}
}
 80013ae:	bf00      	nop
 80013b0:	3770      	adds	r7, #112	; 0x70
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000020d 	.word	0x2000020d
 80013bc:	08017c00 	.word	0x08017c00
 80013c0:	20000bd4 	.word	0x20000bd4

080013c4 <TaskController>:
extern osMutexId ImuMutexHandle;
extern osMutexId RemoteDataMutexHandle;
extern osMutexId ControllerMutexHandle;

void TaskController(void const *argument)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 80013cc:	23c8      	movs	r3, #200	; 0xc8
 80013ce:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 80013d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013da:	613b      	str	r3, [r7, #16]

	HAL_SPI_Receive_IT(&hspi1, Spi1Buffer, 64);
 80013dc:	2240      	movs	r2, #64	; 0x40
 80013de:	4959      	ldr	r1, [pc, #356]	; (8001544 <TaskController+0x180>)
 80013e0:	4859      	ldr	r0, [pc, #356]	; (8001548 <TaskController+0x184>)
 80013e2:	f009 fbf7 	bl	800abd4 <HAL_SPI_Receive_IT>

	PID_Roll_Attitude.Kp = 0;
 80013e6:	4b59      	ldr	r3, [pc, #356]	; (800154c <TaskController+0x188>)
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
	PID_Roll_Attitude.Ki = 0;
 80013ee:	4b57      	ldr	r3, [pc, #348]	; (800154c <TaskController+0x188>)
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]
	PID_Roll_Attitude.Kd = 0;
 80013f6:	4b55      	ldr	r3, [pc, #340]	; (800154c <TaskController+0x188>)
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
	PID_Roll_Attitude.T = 0.005;
 80013fe:	4b53      	ldr	r3, [pc, #332]	; (800154c <TaskController+0x188>)
 8001400:	4a53      	ldr	r2, [pc, #332]	; (8001550 <TaskController+0x18c>)
 8001402:	60da      	str	r2, [r3, #12]
	PID_Roll_Attitude.limMin = -50; // deg/s
 8001404:	4b51      	ldr	r3, [pc, #324]	; (800154c <TaskController+0x188>)
 8001406:	4a53      	ldr	r2, [pc, #332]	; (8001554 <TaskController+0x190>)
 8001408:	61da      	str	r2, [r3, #28]
	PID_Roll_Attitude.limMax = 50; // deg/s
 800140a:	4b50      	ldr	r3, [pc, #320]	; (800154c <TaskController+0x188>)
 800140c:	4a52      	ldr	r2, [pc, #328]	; (8001558 <TaskController+0x194>)
 800140e:	621a      	str	r2, [r3, #32]
	PIDController_Init(&PID_Roll_Attitude);
 8001410:	484e      	ldr	r0, [pc, #312]	; (800154c <TaskController+0x188>)
 8001412:	f7ff fe65 	bl	80010e0 <PIDController_Init>

	PID_Roll_AngVel.Kp = 3.8;
 8001416:	4b51      	ldr	r3, [pc, #324]	; (800155c <TaskController+0x198>)
 8001418:	4a51      	ldr	r2, [pc, #324]	; (8001560 <TaskController+0x19c>)
 800141a:	601a      	str	r2, [r3, #0]
	PID_Roll_AngVel.Ki = 0;
 800141c:	4b4f      	ldr	r3, [pc, #316]	; (800155c <TaskController+0x198>)
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
	PID_Roll_AngVel.Kd = 0.1;
 8001424:	4b4d      	ldr	r3, [pc, #308]	; (800155c <TaskController+0x198>)
 8001426:	4a4f      	ldr	r2, [pc, #316]	; (8001564 <TaskController+0x1a0>)
 8001428:	609a      	str	r2, [r3, #8]
	PID_Roll_AngVel.T = 0.005;
 800142a:	4b4c      	ldr	r3, [pc, #304]	; (800155c <TaskController+0x198>)
 800142c:	4a48      	ldr	r2, [pc, #288]	; (8001550 <TaskController+0x18c>)
 800142e:	60da      	str	r2, [r3, #12]
	PID_Roll_AngVel.limMin = -500; // Motor control unit
 8001430:	4b4a      	ldr	r3, [pc, #296]	; (800155c <TaskController+0x198>)
 8001432:	4a4d      	ldr	r2, [pc, #308]	; (8001568 <TaskController+0x1a4>)
 8001434:	61da      	str	r2, [r3, #28]
	PID_Roll_AngVel.limMax = 500; // Motor control unit
 8001436:	4b49      	ldr	r3, [pc, #292]	; (800155c <TaskController+0x198>)
 8001438:	4a4c      	ldr	r2, [pc, #304]	; (800156c <TaskController+0x1a8>)
 800143a:	621a      	str	r2, [r3, #32]
	PIDController_Init(&PID_Roll_AngVel);
 800143c:	4847      	ldr	r0, [pc, #284]	; (800155c <TaskController+0x198>)
 800143e:	f7ff fe4f 	bl	80010e0 <PIDController_Init>

	xLastWakeTime = xTaskGetTickCount();
 8001442:	f00f f90f 	bl	8010664 <xTaskGetTickCount>
 8001446:	4603      	mov	r3, r0
 8001448:	60bb      	str	r3, [r7, #8]
	// Infinite loop
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	6939      	ldr	r1, [r7, #16]
 8001450:	4618      	mov	r0, r3
 8001452:	f00e ff33 	bl	80102bc <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8001456:	f00f f905 	bl	8010664 <xTaskGetTickCount>
 800145a:	60f8      	str	r0, [r7, #12]
//			Throttle_controlled = PIDController_Update(&PID_Thrust, 0.2f, Distance/1000.0f);
//		}
//		osMutexRelease(DistMutexHandle);


		if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK
 800145c:	4b44      	ldr	r3, [pc, #272]	; (8001570 <TaskController+0x1ac>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f04f 31ff 	mov.w	r1, #4294967295
 8001464:	4618      	mov	r0, r3
 8001466:	f00d fd65 	bl	800ef34 <osMutexWait>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d158      	bne.n	8001522 <TaskController+0x15e>
				&& osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK
 8001470:	4b40      	ldr	r3, [pc, #256]	; (8001574 <TaskController+0x1b0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	4618      	mov	r0, r3
 800147a:	f00d fd5b 	bl	800ef34 <osMutexWait>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d14e      	bne.n	8001522 <TaskController+0x15e>
				&& osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 8001484:	4b3c      	ldr	r3, [pc, #240]	; (8001578 <TaskController+0x1b4>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	4618      	mov	r0, r3
 800148e:	f00d fd51 	bl	800ef34 <osMutexWait>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d144      	bne.n	8001522 <TaskController+0x15e>
		{
			PID_Roll_AngVel.Kp = VRA / 100.0; // 0-10
 8001498:	4b38      	ldr	r3, [pc, #224]	; (800157c <TaskController+0x1b8>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f869 	bl	8000574 <__aeabi_i2d>
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	4b36      	ldr	r3, [pc, #216]	; (8001580 <TaskController+0x1bc>)
 80014a8:	f7ff f9f8 	bl	800089c <__aeabi_ddiv>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f7ff fbc0 	bl	8000c38 <__aeabi_d2f>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4a28      	ldr	r2, [pc, #160]	; (800155c <TaskController+0x198>)
 80014bc:	6013      	str	r3, [r2, #0]
			PID_Roll_AngVel.Kd = VRB / 1000.0; // 0-1
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <TaskController+0x1c0>)
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f856 	bl	8000574 <__aeabi_i2d>
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <TaskController+0x1c4>)
 80014ce:	f7ff f9e5 	bl	800089c <__aeabi_ddiv>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fbad 	bl	8000c38 <__aeabi_d2f>
 80014de:	4603      	mov	r3, r0
 80014e0:	4a1e      	ldr	r2, [pc, #120]	; (800155c <TaskController+0x198>)
 80014e2:	6093      	str	r3, [r2, #8]
			//PID_Roll_Attitude.Kp = VRA / 100.0; // 0-1
			//PID_Roll_Attitude.Kd = VRB / 1000.0; // 0-1

			//float AngVelRef = PIDController_Update(&PID_Roll_Attitude, Roll_in/5, Roll_measured);

			PIDController_Update(&PID_Roll_AngVel, (Roll_in / 10.0f), GyroData[0]);
 80014e4:	4b29      	ldr	r3, [pc, #164]	; (800158c <TaskController+0x1c8>)
 80014e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ea:	ee07 3a90 	vmov	s15, r3
 80014ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80014f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80014fa:	4b25      	ldr	r3, [pc, #148]	; (8001590 <TaskController+0x1cc>)
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	eef0 0a67 	vmov.f32	s1, s15
 8001504:	eeb0 0a47 	vmov.f32	s0, s14
 8001508:	4814      	ldr	r0, [pc, #80]	; (800155c <TaskController+0x198>)
 800150a:	f7ff fe29 	bl	8001160 <PIDController_Update>
			//PIDController_Update(&PID_Roll_Attitude, (Roll_in / 25.0f), Roll_measured);
			//PIDController_Update(&PID_Roll_AngVel, PID_Roll_Attitude.out, GyroData[0]);
			Roll_controlled = (int16_t)(PID_Roll_AngVel.out);
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <TaskController+0x198>)
 8001510:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001514:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001518:	ee17 3a90 	vmov	r3, s15
 800151c:	b21a      	sxth	r2, r3
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <TaskController+0x1d0>)
 8001520:	801a      	strh	r2, [r3, #0]
//			//sprintf(str, "%1.2f\r\n", PID_Roll_AngVel.out);
//			//sprintf(str, "%d\r\n", Roll_controlled);
//			sprintf(str, "%1.2f, %d\r\n", PID_Roll_AngVel.out, Roll_controlled);
//			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}
		osMutexRelease(ControllerMutexHandle);
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <TaskController+0x1ac>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f00d fd52 	bl	800efd0 <osMutexRelease>
		osMutexRelease(RemoteDataMutexHandle);
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <TaskController+0x1b0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f00d fd4d 	bl	800efd0 <osMutexRelease>
		osMutexRelease(ImuMutexHandle);
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <TaskController+0x1b4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f00d fd48 	bl	800efd0 <osMutexRelease>
	{
 8001540:	e783      	b.n	800144a <TaskController+0x86>
 8001542:	bf00      	nop
 8001544:	200005dc 	.word	0x200005dc
 8001548:	20000964 	.word	0x20000964
 800154c:	20000218 	.word	0x20000218
 8001550:	3ba3d70a 	.word	0x3ba3d70a
 8001554:	c2480000 	.word	0xc2480000
 8001558:	42480000 	.word	0x42480000
 800155c:	20000250 	.word	0x20000250
 8001560:	40733333 	.word	0x40733333
 8001564:	3dcccccd 	.word	0x3dcccccd
 8001568:	c3fa0000 	.word	0xc3fa0000
 800156c:	43fa0000 	.word	0x43fa0000
 8001570:	20000cec 	.word	0x20000cec
 8001574:	20000cd8 	.word	0x20000cd8
 8001578:	20000cdc 	.word	0x20000cdc
 800157c:	2000029a 	.word	0x2000029a
 8001580:	40590000 	.word	0x40590000
 8001584:	2000029c 	.word	0x2000029c
 8001588:	408f4000 	.word	0x408f4000
 800158c:	2000028c 	.word	0x2000028c
 8001590:	20000324 	.word	0x20000324
 8001594:	2000028e 	.word	0x2000028e

08001598 <FloatToUint8s>:
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;
extern osMutexId ControllerMutexHandle;

void FloatToUint8s(float* src, uint8_t* array, int position)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
	memcpy(array+position, src, sizeof(float));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	4413      	add	r3, r2
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	601a      	str	r2, [r3, #0]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <Uint16ToUint8s>:

void Uint16ToUint8s(uint16_t* src, uint8_t* array, int position)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
	memcpy(array+position, src, sizeof(uint16_t));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	4413      	add	r3, r2
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	8812      	ldrh	r2, [r2, #0]
 80015d2:	b292      	uxth	r2, r2
 80015d4:	801a      	strh	r2, [r3, #0]
}
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <Int16ToUint8s>:

void Int16ToUint8s(int16_t* src, uint8_t* array, int position)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b085      	sub	sp, #20
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
	memcpy(array+position, src, sizeof(int16_t));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	4413      	add	r3, r2
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	8812      	ldrh	r2, [r2, #0]
 80015f8:	b292      	uxth	r2, r2
 80015fa:	801a      	strh	r2, [r3, #0]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <TaskDiagnostics>:

void TaskDiagnostics(void const *argument)
{
 8001608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800160c:	f5ad 7d5a 	sub.w	sp, sp, #872	; 0x368
 8001610:	af14      	add	r7, sp, #80	; 0x50
 8001612:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001616:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 800161a:	6018      	str	r0, [r3, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5; //Hz
 800161c:	2305      	movs	r3, #5
 800161e:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8001622:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001626:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
	char UARTstr[512];
	uint8_t SpiIntData[64];
	uint8_t SpiFloatData1[64];
	uint8_t SpiFloatData2[64];

	SpiIntData[0] = (uint8_t)('i');
 8001632:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001636:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800163a:	2269      	movs	r2, #105	; 0x69
 800163c:	701a      	strb	r2, [r3, #0]
	SpiFloatData1[0] = (uint8_t)('f');
 800163e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001642:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001646:	2266      	movs	r2, #102	; 0x66
 8001648:	701a      	strb	r2, [r3, #0]
	SpiFloatData2[0] = (uint8_t)('g');
 800164a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800164e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8001652:	2267      	movs	r2, #103	; 0x67
 8001654:	701a      	strb	r2, [r3, #0]

	xLastWakeTime = xTaskGetTickCount();
 8001656:	f00f f805 	bl	8010664 <xTaskGetTickCount>
 800165a:	4603      	mov	r3, r0
 800165c:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8001660:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8001664:	f8d7 1310 	ldr.w	r1, [r7, #784]	; 0x310
 8001668:	4618      	mov	r0, r3
 800166a:	f00e fe27 	bl	80102bc <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 800166e:	f00e fff9 	bl	8010664 <xTaskGetTickCount>
 8001672:	f8c7 030c 	str.w	r0, [r7, #780]	; 0x30c

		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001676:	4bc3      	ldr	r3, [pc, #780]	; (8001984 <TaskDiagnostics+0x37c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f04f 31ff 	mov.w	r1, #4294967295
 800167e:	4618      	mov	r0, r3
 8001680:	f00d fc58 	bl	800ef34 <osMutexWait>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	f040 811d 	bne.w	80018c6 <TaskDiagnostics+0x2be>
		{
			uint16_t Throttle1 = (uint16_t)(TIM1->CCR1-1000);
 800168c:	4bbe      	ldr	r3, [pc, #760]	; (8001988 <TaskDiagnostics+0x380>)
 800168e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001690:	b29b      	uxth	r3, r3
 8001692:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001696:	b29a      	uxth	r2, r3
 8001698:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800169c:	f2a3 23d2 	subw	r3, r3, #722	; 0x2d2
 80016a0:	801a      	strh	r2, [r3, #0]
			uint16_t Throttle2 = (uint16_t)(TIM1->CCR2-1000);
 80016a2:	4bb9      	ldr	r3, [pc, #740]	; (8001988 <TaskDiagnostics+0x380>)
 80016a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80016b2:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80016b6:	801a      	strh	r2, [r3, #0]
			uint16_t Throttle3 = (uint16_t)(TIM1->CCR3-1000);
 80016b8:	4bb3      	ldr	r3, [pc, #716]	; (8001988 <TaskDiagnostics+0x380>)
 80016ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016bc:	b29b      	uxth	r3, r3
 80016be:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80016c8:	f2a3 23d6 	subw	r3, r3, #726	; 0x2d6
 80016cc:	801a      	strh	r2, [r3, #0]
			uint16_t Throttle4 = (uint16_t)(TIM1->CCR4-1000);
 80016ce:	4bae      	ldr	r3, [pc, #696]	; (8001988 <TaskDiagnostics+0x380>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80016d8:	b29a      	uxth	r2, r3
 80016da:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80016de:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80016e2:	801a      	strh	r2, [r3, #0]

			sprintf(UARTstr, "Throttle: (%d) %d %d %d %d\r\n", Throttle_in, Throttle1, Throttle2, Throttle3, Throttle4);
 80016e4:	4ba9      	ldr	r3, [pc, #676]	; (800198c <TaskDiagnostics+0x384>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	461c      	mov	r4, r3
 80016ea:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80016ee:	f2a3 23d2 	subw	r3, r3, #722	; 0x2d2
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	461d      	mov	r5, r3
 80016f6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80016fa:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001706:	f2a3 23d6 	subw	r3, r3, #726	; 0x2d6
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	4619      	mov	r1, r3
 800170e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001712:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800171c:	9302      	str	r3, [sp, #8]
 800171e:	9101      	str	r1, [sp, #4]
 8001720:	9200      	str	r2, [sp, #0]
 8001722:	462b      	mov	r3, r5
 8001724:	4622      	mov	r2, r4
 8001726:	499a      	ldr	r1, [pc, #616]	; (8001990 <TaskDiagnostics+0x388>)
 8001728:	f003 fb28 	bl	8004d7c <sprintf_>
			Uint16ToUint8s(&Throttle_in, SpiIntData, 1);
 800172c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001730:	2201      	movs	r2, #1
 8001732:	4619      	mov	r1, r3
 8001734:	4895      	ldr	r0, [pc, #596]	; (800198c <TaskDiagnostics+0x384>)
 8001736:	f7ff ff41 	bl	80015bc <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle1, SpiIntData, 3);
 800173a:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800173e:	f107 0346 	add.w	r3, r7, #70	; 0x46
 8001742:	2203      	movs	r2, #3
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff39 	bl	80015bc <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle2, SpiIntData, 5);
 800174a:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800174e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001752:	2205      	movs	r2, #5
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff31 	bl	80015bc <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle3, SpiIntData, 7);
 800175a:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800175e:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8001762:	2207      	movs	r2, #7
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff29 	bl	80015bc <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle4, SpiIntData, 9);
 800176a:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800176e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001772:	2209      	movs	r2, #9
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff21 	bl	80015bc <Uint16ToUint8s>

			sprintf(UARTstr, "%sPitch: %d\r\n", UARTstr, Pitch_in);
 800177a:	4b86      	ldr	r3, [pc, #536]	; (8001994 <TaskDiagnostics+0x38c>)
 800177c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001780:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001784:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001788:	4983      	ldr	r1, [pc, #524]	; (8001998 <TaskDiagnostics+0x390>)
 800178a:	f003 faf7 	bl	8004d7c <sprintf_>
			Int16ToUint8s(&Pitch_in, SpiIntData, 11);
 800178e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001792:	220b      	movs	r2, #11
 8001794:	4619      	mov	r1, r3
 8001796:	487f      	ldr	r0, [pc, #508]	; (8001994 <TaskDiagnostics+0x38c>)
 8001798:	f7ff ff23 	bl	80015e2 <Int16ToUint8s>

			int16_t Roll_in_devided = Roll_in / 10;
 800179c:	4b7f      	ldr	r3, [pc, #508]	; (800199c <TaskDiagnostics+0x394>)
 800179e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a2:	4a7f      	ldr	r2, [pc, #508]	; (80019a0 <TaskDiagnostics+0x398>)
 80017a4:	fb82 1203 	smull	r1, r2, r2, r3
 80017a8:	1092      	asrs	r2, r2, #2
 80017aa:	17db      	asrs	r3, r3, #31
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	b21a      	sxth	r2, r3
 80017b0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80017b4:	f2a3 23da 	subw	r3, r3, #730	; 0x2da
 80017b8:	801a      	strh	r2, [r3, #0]
			sprintf(UARTstr, "%sRoll: %d\r\n", UARTstr, Roll_in_devided);
 80017ba:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80017be:	f2a3 23da 	subw	r3, r3, #730	; 0x2da
 80017c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c6:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80017ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80017ce:	4975      	ldr	r1, [pc, #468]	; (80019a4 <TaskDiagnostics+0x39c>)
 80017d0:	f003 fad4 	bl	8004d7c <sprintf_>
			Int16ToUint8s(&Roll_in_devided, SpiIntData, 13);
 80017d4:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80017d8:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80017dc:	220d      	movs	r2, #13
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff feff 	bl	80015e2 <Int16ToUint8s>

			sprintf(UARTstr, "%sYaw: %d\r\n", UARTstr, Yaw_in);
 80017e4:	4b70      	ldr	r3, [pc, #448]	; (80019a8 <TaskDiagnostics+0x3a0>)
 80017e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ea:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80017ee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80017f2:	496e      	ldr	r1, [pc, #440]	; (80019ac <TaskDiagnostics+0x3a4>)
 80017f4:	f003 fac2 	bl	8004d7c <sprintf_>
			Int16ToUint8s(&Yaw_in, SpiIntData, 15);
 80017f8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80017fc:	220f      	movs	r2, #15
 80017fe:	4619      	mov	r1, r3
 8001800:	4869      	ldr	r0, [pc, #420]	; (80019a8 <TaskDiagnostics+0x3a0>)
 8001802:	f7ff feee 	bl	80015e2 <Int16ToUint8s>

			sprintf(UARTstr, "%sSWA: %d\r\n", UARTstr, SWA);
 8001806:	4b6a      	ldr	r3, [pc, #424]	; (80019b0 <TaskDiagnostics+0x3a8>)
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800180e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001812:	4968      	ldr	r1, [pc, #416]	; (80019b4 <TaskDiagnostics+0x3ac>)
 8001814:	f003 fab2 	bl	8004d7c <sprintf_>
			Uint16ToUint8s(&SWA, SpiIntData, 17);
 8001818:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800181c:	2211      	movs	r2, #17
 800181e:	4619      	mov	r1, r3
 8001820:	4863      	ldr	r0, [pc, #396]	; (80019b0 <TaskDiagnostics+0x3a8>)
 8001822:	f7ff fecb 	bl	80015bc <Uint16ToUint8s>

			sprintf(UARTstr, "%sSWB: %d\r\n", UARTstr, SWB);
 8001826:	4b64      	ldr	r3, [pc, #400]	; (80019b8 <TaskDiagnostics+0x3b0>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800182e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001832:	4962      	ldr	r1, [pc, #392]	; (80019bc <TaskDiagnostics+0x3b4>)
 8001834:	f003 faa2 	bl	8004d7c <sprintf_>
			Uint16ToUint8s(&SWB, SpiIntData, 19);
 8001838:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800183c:	2213      	movs	r2, #19
 800183e:	4619      	mov	r1, r3
 8001840:	485d      	ldr	r0, [pc, #372]	; (80019b8 <TaskDiagnostics+0x3b0>)
 8001842:	f7ff febb 	bl	80015bc <Uint16ToUint8s>

			sprintf(UARTstr, "%sSWC: %d\r\n", UARTstr, SWC);
 8001846:	4b5e      	ldr	r3, [pc, #376]	; (80019c0 <TaskDiagnostics+0x3b8>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800184e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001852:	495c      	ldr	r1, [pc, #368]	; (80019c4 <TaskDiagnostics+0x3bc>)
 8001854:	f003 fa92 	bl	8004d7c <sprintf_>
			Uint16ToUint8s(&SWC, SpiIntData, 21);
 8001858:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800185c:	2215      	movs	r2, #21
 800185e:	4619      	mov	r1, r3
 8001860:	4857      	ldr	r0, [pc, #348]	; (80019c0 <TaskDiagnostics+0x3b8>)
 8001862:	f7ff feab 	bl	80015bc <Uint16ToUint8s>

			sprintf(UARTstr, "%sSWD: %d\r\n", UARTstr, SWD);
 8001866:	4b58      	ldr	r3, [pc, #352]	; (80019c8 <TaskDiagnostics+0x3c0>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800186e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001872:	4956      	ldr	r1, [pc, #344]	; (80019cc <TaskDiagnostics+0x3c4>)
 8001874:	f003 fa82 	bl	8004d7c <sprintf_>
			Uint16ToUint8s(&SWD, SpiIntData, 23);
 8001878:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800187c:	2217      	movs	r2, #23
 800187e:	4619      	mov	r1, r3
 8001880:	4851      	ldr	r0, [pc, #324]	; (80019c8 <TaskDiagnostics+0x3c0>)
 8001882:	f7ff fe9b 	bl	80015bc <Uint16ToUint8s>

			sprintf(UARTstr, "%sVRA: %d\r\n", UARTstr, VRA);
 8001886:	4b52      	ldr	r3, [pc, #328]	; (80019d0 <TaskDiagnostics+0x3c8>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800188e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001892:	4950      	ldr	r1, [pc, #320]	; (80019d4 <TaskDiagnostics+0x3cc>)
 8001894:	f003 fa72 	bl	8004d7c <sprintf_>
			Uint16ToUint8s(&VRA, SpiIntData, 25);
 8001898:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800189c:	2219      	movs	r2, #25
 800189e:	4619      	mov	r1, r3
 80018a0:	484b      	ldr	r0, [pc, #300]	; (80019d0 <TaskDiagnostics+0x3c8>)
 80018a2:	f7ff fe8b 	bl	80015bc <Uint16ToUint8s>

			sprintf(UARTstr, "%sVRB: %d\r\n", UARTstr, VRB);
 80018a6:	4b4c      	ldr	r3, [pc, #304]	; (80019d8 <TaskDiagnostics+0x3d0>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80018ae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80018b2:	494a      	ldr	r1, [pc, #296]	; (80019dc <TaskDiagnostics+0x3d4>)
 80018b4:	f003 fa62 	bl	8004d7c <sprintf_>
			Uint16ToUint8s(&VRB, SpiIntData, 27);
 80018b8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018bc:	221b      	movs	r2, #27
 80018be:	4619      	mov	r1, r3
 80018c0:	4845      	ldr	r0, [pc, #276]	; (80019d8 <TaskDiagnostics+0x3d0>)
 80018c2:	f7ff fe7b 	bl	80015bc <Uint16ToUint8s>
		}
		osMutexRelease(RemoteDataMutexHandle);
 80018c6:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <TaskDiagnostics+0x37c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f00d fb80 	bl	800efd0 <osMutexRelease>

		if (IsImuAvailable)
 80018d0:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <TaskDiagnostics+0x3d8>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 8127 	beq.w	8001b28 <TaskDiagnostics+0x520>
		{
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 80018da:	4b42      	ldr	r3, [pc, #264]	; (80019e4 <TaskDiagnostics+0x3dc>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f04f 31ff 	mov.w	r1, #4294967295
 80018e2:	4618      	mov	r0, r3
 80018e4:	f00d fb26 	bl	800ef34 <osMutexWait>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f040 8117 	bne.w	8001b1e <TaskDiagnostics+0x516>
			{
				sprintf(UARTstr,
 80018f0:	4b3d      	ldr	r3, [pc, #244]	; (80019e8 <TaskDiagnostics+0x3e0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe4f 	bl	8000598 <__aeabi_f2d>
 80018fa:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
						"%sTemp: %.4f\r\nAcc:  %1.4f ; %1.4f ; %1.4f\r\nGyro: %1.4f ; %1.4f ; %1.4f\r\nRoll: %1.2f ° ; Pitch: %1.2f ° ; Yaw: %1.2f °\r\n",
						UARTstr,
						TempData,
						AccData[0], AccData[1], AccData[2],
 80018fe:	4b3b      	ldr	r3, [pc, #236]	; (80019ec <TaskDiagnostics+0x3e4>)
 8001900:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fe48 	bl	8000598 <__aeabi_f2d>
 8001908:	e9c7 0108 	strd	r0, r1, [r7, #32]
						AccData[0], AccData[1], AccData[2],
 800190c:	4b37      	ldr	r3, [pc, #220]	; (80019ec <TaskDiagnostics+0x3e4>)
 800190e:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fe41 	bl	8000598 <__aeabi_f2d>
 8001916:	e9c7 0106 	strd	r0, r1, [r7, #24]
						AccData[0], AccData[1], AccData[2],
 800191a:	4b34      	ldr	r3, [pc, #208]	; (80019ec <TaskDiagnostics+0x3e4>)
 800191c:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe3a 	bl	8000598 <__aeabi_f2d>
 8001924:	e9c7 0104 	strd	r0, r1, [r7, #16]
						GyroData[0], GyroData[1], GyroData[2],
 8001928:	4b31      	ldr	r3, [pc, #196]	; (80019f0 <TaskDiagnostics+0x3e8>)
 800192a:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fe33 	bl	8000598 <__aeabi_f2d>
 8001932:	e9c7 0102 	strd	r0, r1, [r7, #8]
						GyroData[0], GyroData[1], GyroData[2],
 8001936:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <TaskDiagnostics+0x3e8>)
 8001938:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fe2c 	bl	8000598 <__aeabi_f2d>
 8001940:	e9c7 0100 	strd	r0, r1, [r7]
						GyroData[0], GyroData[1], GyroData[2],
 8001944:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <TaskDiagnostics+0x3e8>)
 8001946:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fe25 	bl	8000598 <__aeabi_f2d>
 800194e:	4682      	mov	sl, r0
 8001950:	468b      	mov	fp, r1
 8001952:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <TaskDiagnostics+0x3ec>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fe1e 	bl	8000598 <__aeabi_f2d>
 800195c:	4680      	mov	r8, r0
 800195e:	4689      	mov	r9, r1
 8001960:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <TaskDiagnostics+0x3f0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe fe17 	bl	8000598 <__aeabi_f2d>
 800196a:	4604      	mov	r4, r0
 800196c:	460d      	mov	r5, r1
 800196e:	4b23      	ldr	r3, [pc, #140]	; (80019fc <TaskDiagnostics+0x3f4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fe10 	bl	8000598 <__aeabi_f2d>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001980:	e03e      	b.n	8001a00 <TaskDiagnostics+0x3f8>
 8001982:	bf00      	nop
 8001984:	20000cd8 	.word	0x20000cd8
 8001988:	40010000 	.word	0x40010000
 800198c:	20000288 	.word	0x20000288
 8001990:	08017c10 	.word	0x08017c10
 8001994:	2000028a 	.word	0x2000028a
 8001998:	08017c30 	.word	0x08017c30
 800199c:	2000028c 	.word	0x2000028c
 80019a0:	66666667 	.word	0x66666667
 80019a4:	08017c40 	.word	0x08017c40
 80019a8:	20000290 	.word	0x20000290
 80019ac:	08017c50 	.word	0x08017c50
 80019b0:	20000292 	.word	0x20000292
 80019b4:	08017c5c 	.word	0x08017c5c
 80019b8:	20000294 	.word	0x20000294
 80019bc:	08017c68 	.word	0x08017c68
 80019c0:	20000296 	.word	0x20000296
 80019c4:	08017c74 	.word	0x08017c74
 80019c8:	20000298 	.word	0x20000298
 80019cc:	08017c80 	.word	0x08017c80
 80019d0:	2000029a 	.word	0x2000029a
 80019d4:	08017c8c 	.word	0x08017c8c
 80019d8:	2000029c 	.word	0x2000029c
 80019dc:	08017c98 	.word	0x08017c98
 80019e0:	20000214 	.word	0x20000214
 80019e4:	20000cdc 	.word	0x20000cdc
 80019e8:	20000320 	.word	0x20000320
 80019ec:	20000314 	.word	0x20000314
 80019f0:	20000324 	.word	0x20000324
 80019f4:	20000330 	.word	0x20000330
 80019f8:	20000334 	.word	0x20000334
 80019fc:	20000338 	.word	0x20000338
 8001a00:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001a04:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8001a08:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8001a0c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8001a10:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8001a14:	ed97 7b00 	vldr	d7, [r7]
 8001a18:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001a1c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a20:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001a24:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a28:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001a2c:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a30:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001a34:	ed97 7b08 	vldr	d7, [r7, #32]
 8001a38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001a3c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001a40:	ed8d 7b00 	vstr	d7, [sp]
 8001a44:	460a      	mov	r2, r1
 8001a46:	49a1      	ldr	r1, [pc, #644]	; (8001ccc <TaskDiagnostics+0x6c4>)
 8001a48:	f003 f998 	bl	8004d7c <sprintf_>
						Roll_measured, Pitch_measured, Yaw_measured);
				FloatToUint8s(&TempData, SpiFloatData1, 1);
 8001a4c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a50:	2201      	movs	r2, #1
 8001a52:	4619      	mov	r1, r3
 8001a54:	489e      	ldr	r0, [pc, #632]	; (8001cd0 <TaskDiagnostics+0x6c8>)
 8001a56:	f7ff fd9f 	bl	8001598 <FloatToUint8s>
				FloatToUint8s(AccData, SpiFloatData1, 5);
 8001a5a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a5e:	2205      	movs	r2, #5
 8001a60:	4619      	mov	r1, r3
 8001a62:	489c      	ldr	r0, [pc, #624]	; (8001cd4 <TaskDiagnostics+0x6cc>)
 8001a64:	f7ff fd98 	bl	8001598 <FloatToUint8s>
				FloatToUint8s(AccData+1, SpiFloatData1, 9);
 8001a68:	489b      	ldr	r0, [pc, #620]	; (8001cd8 <TaskDiagnostics+0x6d0>)
 8001a6a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a6e:	2209      	movs	r2, #9
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff fd91 	bl	8001598 <FloatToUint8s>
				FloatToUint8s(AccData+2, SpiFloatData1, 13);
 8001a76:	4899      	ldr	r0, [pc, #612]	; (8001cdc <TaskDiagnostics+0x6d4>)
 8001a78:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a7c:	220d      	movs	r2, #13
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7ff fd8a 	bl	8001598 <FloatToUint8s>
				FloatToUint8s(GyroData, SpiFloatData1, 17);
 8001a84:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a88:	2211      	movs	r2, #17
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4894      	ldr	r0, [pc, #592]	; (8001ce0 <TaskDiagnostics+0x6d8>)
 8001a8e:	f7ff fd83 	bl	8001598 <FloatToUint8s>
				FloatToUint8s(GyroData+1, SpiFloatData1, 21);
 8001a92:	4894      	ldr	r0, [pc, #592]	; (8001ce4 <TaskDiagnostics+0x6dc>)
 8001a94:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a98:	2215      	movs	r2, #21
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f7ff fd7c 	bl	8001598 <FloatToUint8s>
				FloatToUint8s(GyroData+2, SpiFloatData1, 25);
 8001aa0:	4891      	ldr	r0, [pc, #580]	; (8001ce8 <TaskDiagnostics+0x6e0>)
 8001aa2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001aa6:	2219      	movs	r2, #25
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f7ff fd75 	bl	8001598 <FloatToUint8s>

				sprintf(UARTstr,
 8001aae:	4b8f      	ldr	r3, [pc, #572]	; (8001cec <TaskDiagnostics+0x6e4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd70 	bl	8000598 <__aeabi_f2d>
 8001ab8:	4604      	mov	r4, r0
 8001aba:	460d      	mov	r5, r1
 8001abc:	4b8c      	ldr	r3, [pc, #560]	; (8001cf0 <TaskDiagnostics+0x6e8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd69 	bl	8000598 <__aeabi_f2d>
 8001ac6:	4680      	mov	r8, r0
 8001ac8:	4689      	mov	r9, r1
 8001aca:	4b8a      	ldr	r3, [pc, #552]	; (8001cf4 <TaskDiagnostics+0x6ec>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fd62 	bl	8000598 <__aeabi_f2d>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001adc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001ae0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ae4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001ae8:	e9cd 4500 	strd	r4, r5, [sp]
 8001aec:	460a      	mov	r2, r1
 8001aee:	4982      	ldr	r1, [pc, #520]	; (8001cf8 <TaskDiagnostics+0x6f0>)
 8001af0:	f003 f944 	bl	8004d7c <sprintf_>
						"%sBMP_Temp: %.4f\r\nBMP_Pres: %.4f\r\nBMP_Alt: %.4f\r\n",
						UARTstr,
						BMP_Temp, BMP_Pres, BMP_Alt);
				FloatToUint8s(&BMP_Temp, SpiFloatData1, 29);
 8001af4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001af8:	221d      	movs	r2, #29
 8001afa:	4619      	mov	r1, r3
 8001afc:	487b      	ldr	r0, [pc, #492]	; (8001cec <TaskDiagnostics+0x6e4>)
 8001afe:	f7ff fd4b 	bl	8001598 <FloatToUint8s>
				FloatToUint8s(&BMP_Pres, SpiFloatData1, 33);
 8001b02:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001b06:	2221      	movs	r2, #33	; 0x21
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4879      	ldr	r0, [pc, #484]	; (8001cf0 <TaskDiagnostics+0x6e8>)
 8001b0c:	f7ff fd44 	bl	8001598 <FloatToUint8s>
				FloatToUint8s(&BMP_Alt, SpiFloatData1, 37);
 8001b10:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001b14:	2225      	movs	r2, #37	; 0x25
 8001b16:	4619      	mov	r1, r3
 8001b18:	4876      	ldr	r0, [pc, #472]	; (8001cf4 <TaskDiagnostics+0x6ec>)
 8001b1a:	f7ff fd3d 	bl	8001598 <FloatToUint8s>
			}
			osMutexRelease(ImuMutexHandle);
 8001b1e:	4b77      	ldr	r3, [pc, #476]	; (8001cfc <TaskDiagnostics+0x6f4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f00d fa54 	bl	800efd0 <osMutexRelease>
				FloatToUint8s(&MAG_dir, SpiFloatData1, 53);
			}
			osMutexRelease(MagnMutexHandle);
		}

		if (IsDistAvailable)
 8001b28:	4b75      	ldr	r3, [pc, #468]	; (8001d00 <TaskDiagnostics+0x6f8>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d026      	beq.n	8001b7e <TaskDiagnostics+0x576>
		{
			if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 8001b30:	4b74      	ldr	r3, [pc, #464]	; (8001d04 <TaskDiagnostics+0x6fc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f04f 31ff 	mov.w	r1, #4294967295
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f00d f9fb 	bl	800ef34 <osMutexWait>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d117      	bne.n	8001b74 <TaskDiagnostics+0x56c>
			{
				sprintf(UARTstr, "%sDistance: %.0f mm\r\n", UARTstr, Distance);
 8001b44:	4b70      	ldr	r3, [pc, #448]	; (8001d08 <TaskDiagnostics+0x700>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fd25 	bl	8000598 <__aeabi_f2d>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001b56:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001b5a:	e9cd 2300 	strd	r2, r3, [sp]
 8001b5e:	460a      	mov	r2, r1
 8001b60:	496a      	ldr	r1, [pc, #424]	; (8001d0c <TaskDiagnostics+0x704>)
 8001b62:	f003 f90b 	bl	8004d7c <sprintf_>
				FloatToUint8s(&Distance, SpiFloatData1, 57);
 8001b66:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001b6a:	2239      	movs	r2, #57	; 0x39
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4866      	ldr	r0, [pc, #408]	; (8001d08 <TaskDiagnostics+0x700>)
 8001b70:	f7ff fd12 	bl	8001598 <FloatToUint8s>
			}
			osMutexRelease(DistMutexHandle);
 8001b74:	4b63      	ldr	r3, [pc, #396]	; (8001d04 <TaskDiagnostics+0x6fc>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f00d fa29 	bl	800efd0 <osMutexRelease>
				SpiIntData[32] = (uint8_t)GPS.altitude_unit;
			}
			osMutexRelease(GpsDataMutexHandle);
		}

		if (Tune)
 8001b7e:	4b64      	ldr	r3, [pc, #400]	; (8001d10 <TaskDiagnostics+0x708>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d05c      	beq.n	8001c40 <TaskDiagnostics+0x638>
		{
			if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK
 8001b86:	4b63      	ldr	r3, [pc, #396]	; (8001d14 <TaskDiagnostics+0x70c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f00d f9d0 	bl	800ef34 <osMutexWait>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d148      	bne.n	8001c2c <TaskDiagnostics+0x624>
					&& osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 8001b9a:	4b58      	ldr	r3, [pc, #352]	; (8001cfc <TaskDiagnostics+0x6f4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f00d f9c6 	bl	800ef34 <osMutexWait>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d13e      	bne.n	8001c2c <TaskDiagnostics+0x624>
			{
				// PID1 data
				//Gains
				FloatToUint8s(&(PID_Roll_Attitude.Kp), SpiFloatData2, 17);
 8001bae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bb2:	2211      	movs	r2, #17
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4858      	ldr	r0, [pc, #352]	; (8001d18 <TaskDiagnostics+0x710>)
 8001bb8:	f7ff fcee 	bl	8001598 <FloatToUint8s>
				FloatToUint8s(&(PID_Roll_Attitude.Ki), SpiFloatData2, 21);
 8001bbc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bc0:	2215      	movs	r2, #21
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4855      	ldr	r0, [pc, #340]	; (8001d1c <TaskDiagnostics+0x714>)
 8001bc6:	f7ff fce7 	bl	8001598 <FloatToUint8s>
				FloatToUint8s(&(PID_Roll_Attitude.Kd), SpiFloatData2, 25);
 8001bca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bce:	2219      	movs	r2, #25
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4853      	ldr	r0, [pc, #332]	; (8001d20 <TaskDiagnostics+0x718>)
 8001bd4:	f7ff fce0 	bl	8001598 <FloatToUint8s>
				// Reference
					// Roll_in_devided
				// Measurement
				FloatToUint8s(&(Roll_measured), SpiFloatData2, 29);
 8001bd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bdc:	221d      	movs	r2, #29
 8001bde:	4619      	mov	r1, r3
 8001be0:	4850      	ldr	r0, [pc, #320]	; (8001d24 <TaskDiagnostics+0x71c>)
 8001be2:	f7ff fcd9 	bl	8001598 <FloatToUint8s>
				// Output
				FloatToUint8s(&(PID_Roll_Attitude.out), SpiFloatData2, 33);
 8001be6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bea:	2221      	movs	r2, #33	; 0x21
 8001bec:	4619      	mov	r1, r3
 8001bee:	484e      	ldr	r0, [pc, #312]	; (8001d28 <TaskDiagnostics+0x720>)
 8001bf0:	f7ff fcd2 	bl	8001598 <FloatToUint8s>


				// PID2 data
				// Gains
				FloatToUint8s(&(PID_Roll_AngVel.Kp), SpiFloatData2, 37);
 8001bf4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bf8:	2225      	movs	r2, #37	; 0x25
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	484b      	ldr	r0, [pc, #300]	; (8001d2c <TaskDiagnostics+0x724>)
 8001bfe:	f7ff fccb 	bl	8001598 <FloatToUint8s>
				FloatToUint8s(&(PID_Roll_AngVel.Ki), SpiFloatData2, 41);
 8001c02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c06:	2229      	movs	r2, #41	; 0x29
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4849      	ldr	r0, [pc, #292]	; (8001d30 <TaskDiagnostics+0x728>)
 8001c0c:	f7ff fcc4 	bl	8001598 <FloatToUint8s>
				FloatToUint8s(&(PID_Roll_AngVel.Kd), SpiFloatData2, 45);
 8001c10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c14:	222d      	movs	r2, #45	; 0x2d
 8001c16:	4619      	mov	r1, r3
 8001c18:	4846      	ldr	r0, [pc, #280]	; (8001d34 <TaskDiagnostics+0x72c>)
 8001c1a:	f7ff fcbd 	bl	8001598 <FloatToUint8s>
				// Reference
					// PID1 out
				// Measurement
					// GyroData[0]
				// Output
				Int16ToUint8s(&Roll_controlled, SpiIntData, 33);
 8001c1e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c22:	2221      	movs	r2, #33	; 0x21
 8001c24:	4619      	mov	r1, r3
 8001c26:	4844      	ldr	r0, [pc, #272]	; (8001d38 <TaskDiagnostics+0x730>)
 8001c28:	f7ff fcdb 	bl	80015e2 <Int16ToUint8s>
			}
			osMutexRelease(ControllerMutexHandle);
 8001c2c:	4b39      	ldr	r3, [pc, #228]	; (8001d14 <TaskDiagnostics+0x70c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f00d f9cd 	bl	800efd0 <osMutexRelease>
			osMutexRelease(ImuMutexHandle);
 8001c36:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <TaskDiagnostics+0x6f4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f00d f9c8 	bl	800efd0 <osMutexRelease>
		}


		sprintf(UARTstr, "%s\r\n\r\n", UARTstr);
 8001c40:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c48:	493c      	ldr	r1, [pc, #240]	; (8001d3c <TaskDiagnostics+0x734>)
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 f896 	bl	8004d7c <sprintf_>

		// Sending log info
		if (Diag)
 8001c50:	4b3b      	ldr	r3, [pc, #236]	; (8001d40 <TaskDiagnostics+0x738>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00d      	beq.n	8001c74 <TaskDiagnostics+0x66c>
		{
			HAL_UART_Transmit(&huart3, UARTstr, strlen(UARTstr), HAL_MAX_DELAY);
 8001c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fb2f 	bl	80002c0 <strlen>
 8001c62:	4603      	mov	r3, r0
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6e:	4835      	ldr	r0, [pc, #212]	; (8001d44 <TaskDiagnostics+0x73c>)
 8001c70:	f00b fc2c 	bl	800d4cc <HAL_UART_Transmit>
		}

		if (Tune)
 8001c74:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <TaskDiagnostics+0x708>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f43f acf1 	beq.w	8001660 <TaskDiagnostics+0x58>
		{
			HAL_UART_Transmit(&huart3, SPI1Data, 64, HAL_MAX_DELAY);
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c82:	2240      	movs	r2, #64	; 0x40
 8001c84:	4930      	ldr	r1, [pc, #192]	; (8001d48 <TaskDiagnostics+0x740>)
 8001c86:	482f      	ldr	r0, [pc, #188]	; (8001d44 <TaskDiagnostics+0x73c>)
 8001c88:	f00b fc20 	bl	800d4cc <HAL_UART_Transmit>

			HAL_SPI_Transmit(&hspi1, SpiIntData, 64, HAL_MAX_DELAY);
 8001c8c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
 8001c94:	2240      	movs	r2, #64	; 0x40
 8001c96:	482d      	ldr	r0, [pc, #180]	; (8001d4c <TaskDiagnostics+0x744>)
 8001c98:	f008 faeb 	bl	800a272 <HAL_SPI_Transmit>
			osDelay(10);
 8001c9c:	200a      	movs	r0, #10
 8001c9e:	f00d f91c 	bl	800eeda <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData1, 64, HAL_MAX_DELAY);
 8001ca2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8001caa:	2240      	movs	r2, #64	; 0x40
 8001cac:	4827      	ldr	r0, [pc, #156]	; (8001d4c <TaskDiagnostics+0x744>)
 8001cae:	f008 fae0 	bl	800a272 <HAL_SPI_Transmit>
			osDelay(10);
 8001cb2:	200a      	movs	r0, #10
 8001cb4:	f00d f911 	bl	800eeda <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData2, 64, HAL_MAX_DELAY);
 8001cb8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc0:	2240      	movs	r2, #64	; 0x40
 8001cc2:	4822      	ldr	r0, [pc, #136]	; (8001d4c <TaskDiagnostics+0x744>)
 8001cc4:	f008 fad5 	bl	800a272 <HAL_SPI_Transmit>
	{
 8001cc8:	e4ca      	b.n	8001660 <TaskDiagnostics+0x58>
 8001cca:	bf00      	nop
 8001ccc:	08017ca4 	.word	0x08017ca4
 8001cd0:	20000320 	.word	0x20000320
 8001cd4:	20000314 	.word	0x20000314
 8001cd8:	20000318 	.word	0x20000318
 8001cdc:	2000031c 	.word	0x2000031c
 8001ce0:	20000324 	.word	0x20000324
 8001ce4:	20000328 	.word	0x20000328
 8001ce8:	2000032c 	.word	0x2000032c
 8001cec:	2000036c 	.word	0x2000036c
 8001cf0:	20000370 	.word	0x20000370
 8001cf4:	20000374 	.word	0x20000374
 8001cf8:	08017d20 	.word	0x08017d20
 8001cfc:	20000cdc 	.word	0x20000cdc
 8001d00:	20000216 	.word	0x20000216
 8001d04:	20000ce4 	.word	0x20000ce4
 8001d08:	200003d8 	.word	0x200003d8
 8001d0c:	08017d54 	.word	0x08017d54
 8001d10:	20000000 	.word	0x20000000
 8001d14:	20000cec 	.word	0x20000cec
 8001d18:	20000218 	.word	0x20000218
 8001d1c:	2000021c 	.word	0x2000021c
 8001d20:	20000220 	.word	0x20000220
 8001d24:	20000330 	.word	0x20000330
 8001d28:	2000024c 	.word	0x2000024c
 8001d2c:	20000250 	.word	0x20000250
 8001d30:	20000254 	.word	0x20000254
 8001d34:	20000258 	.word	0x20000258
 8001d38:	2000028e 	.word	0x2000028e
 8001d3c:	08017d6c 	.word	0x08017d6c
 8001d40:	2000020c 	.word	0x2000020c
 8001d44:	20000bd4 	.word	0x20000bd4
 8001d48:	2000061c 	.word	0x2000061c
 8001d4c:	20000964 	.word	0x20000964

08001d50 <ConvertToPwm>:
extern TIM_HandleTypeDef htim1;
extern osMutexId RemoteDataMutexHandle;
extern osMutexId ControllerMutexHandle;

uint32_t ConvertToPwm(int32_t raw)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	// Norm raw data to 0-1000
	if (raw < 0)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	da02      	bge.n	8001d64 <ConvertToPwm+0x14>
		raw = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	e006      	b.n	8001d72 <ConvertToPwm+0x22>
	else if (raw > 1000)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d6a:	dd02      	ble.n	8001d72 <ConvertToPwm+0x22>
		raw = 1000;
 8001d6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d70:	607b      	str	r3, [r7, #4]

	// Add 50, so the range will be 1000-2000
	return (uint32_t)(raw + 1000);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <TaskMotor>:

void TaskMotor(void const *argument)
{
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b08b      	sub	sp, #44	; 0x2c
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 8001d8c:	23c8      	movs	r3, #200	; 0xc8
 8001d8e:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8001d90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9a:	613b      	str	r3, [r7, #16]

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4858      	ldr	r0, [pc, #352]	; (8001f00 <TaskMotor+0x17c>)
 8001da0:	f009 fe96 	bl	800bad0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001da4:	2104      	movs	r1, #4
 8001da6:	4856      	ldr	r0, [pc, #344]	; (8001f00 <TaskMotor+0x17c>)
 8001da8:	f009 fe92 	bl	800bad0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001dac:	2108      	movs	r1, #8
 8001dae:	4854      	ldr	r0, [pc, #336]	; (8001f00 <TaskMotor+0x17c>)
 8001db0:	f009 fe8e 	bl	800bad0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001db4:	210c      	movs	r1, #12
 8001db6:	4852      	ldr	r0, [pc, #328]	; (8001f00 <TaskMotor+0x17c>)
 8001db8:	f009 fe8a 	bl	800bad0 <HAL_TIM_PWM_Start>
	uint8_t ESC1_start_signal;
	uint8_t ESC2_start_signal;
	uint8_t ESC3_start_signal;
	uint8_t ESC4_start_signal;

	TIM1->CCR1 = (uint32_t) (50);
 8001dbc:	4b51      	ldr	r3, [pc, #324]	; (8001f04 <TaskMotor+0x180>)
 8001dbe:	2232      	movs	r2, #50	; 0x32
 8001dc0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (uint32_t) (50);
 8001dc2:	4b50      	ldr	r3, [pc, #320]	; (8001f04 <TaskMotor+0x180>)
 8001dc4:	2232      	movs	r2, #50	; 0x32
 8001dc6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (uint32_t) (50);
 8001dc8:	4b4e      	ldr	r3, [pc, #312]	; (8001f04 <TaskMotor+0x180>)
 8001dca:	2232      	movs	r2, #50	; 0x32
 8001dcc:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = (uint32_t) (50);
 8001dce:	4b4d      	ldr	r3, [pc, #308]	; (8001f04 <TaskMotor+0x180>)
 8001dd0:	2232      	movs	r2, #50	; 0x32
 8001dd2:	641a      	str	r2, [r3, #64]	; 0x40

	xLastWakeTime = xTaskGetTickCount();
 8001dd4:	f00e fc46 	bl	8010664 <xTaskGetTickCount>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8001ddc:	f107 0308 	add.w	r3, r7, #8
 8001de0:	6939      	ldr	r1, [r7, #16]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f00e fa6a 	bl	80102bc <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8001de8:	f00e fc3c 	bl	8010664 <xTaskGetTickCount>
 8001dec:	60f8      	str	r0, [r7, #12]

		//Log("Mot - RDMutEnter");
		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001dee:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <TaskMotor+0x184>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f04f 31ff 	mov.w	r1, #4294967295
 8001df6:	4618      	mov	r0, r3
 8001df8:	f00d f89c 	bl	800ef34 <osMutexWait>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d177      	bne.n	8001ef2 <TaskMotor+0x16e>
		{
			// Hardware safety
			if (SWA < 10)
 8001e02:	4b42      	ldr	r3, [pc, #264]	; (8001f0c <TaskMotor+0x188>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	2b09      	cmp	r3, #9
 8001e08:	d806      	bhi.n	8001e18 <TaskMotor+0x94>
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_SET);
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e10:	483f      	ldr	r0, [pc, #252]	; (8001f10 <TaskMotor+0x18c>)
 8001e12:	f006 fb23 	bl	800845c <HAL_GPIO_WritePin>
 8001e16:	e005      	b.n	8001e24 <TaskMotor+0xa0>

			else
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e1e:	483c      	ldr	r0, [pc, #240]	; (8001f10 <TaskMotor+0x18c>)
 8001e20:	f006 fb1c 	bl	800845c <HAL_GPIO_WritePin>

			// Software safety
			if (SWB < 10)
 8001e24:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <TaskMotor+0x190>)
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	2b09      	cmp	r3, #9
 8001e2a:	d803      	bhi.n	8001e34 <TaskMotor+0xb0>
				Rotors = false;
 8001e2c:	4b3a      	ldr	r3, [pc, #232]	; (8001f18 <TaskMotor+0x194>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e002      	b.n	8001e3a <TaskMotor+0xb6>
			else
				Rotors = true;
 8001e34:	4b38      	ldr	r3, [pc, #224]	; (8001f18 <TaskMotor+0x194>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]

			// Setting PWM speed
			if (Rotors)
 8001e3a:	4b37      	ldr	r3, [pc, #220]	; (8001f18 <TaskMotor+0x194>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d047      	beq.n	8001ed2 <TaskMotor+0x14e>
				int32_t ESC3_Speed;
				int32_t ESC4_Speed;

				// if (Throttle_in)
				//{
				if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK)
 8001e42:	4b36      	ldr	r3, [pc, #216]	; (8001f1c <TaskMotor+0x198>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f00d f872 	bl	800ef34 <osMutexWait>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d11f      	bne.n	8001e96 <TaskMotor+0x112>
				{
					ESC1_Speed = Throttle_in + Roll_controlled; // - (Pitch_in/5) - (Yaw_in/5);
 8001e56:	4b32      	ldr	r3, [pc, #200]	; (8001f20 <TaskMotor+0x19c>)
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4b31      	ldr	r3, [pc, #196]	; (8001f24 <TaskMotor+0x1a0>)
 8001e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e62:	4413      	add	r3, r2
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
					ESC2_Speed = Throttle_in - Roll_controlled; // - (Pitch_in/5) + (Yaw_in/5);
 8001e66:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <TaskMotor+0x19c>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	4b2d      	ldr	r3, [pc, #180]	; (8001f24 <TaskMotor+0x1a0>)
 8001e6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	623b      	str	r3, [r7, #32]
					ESC3_Speed = Throttle_in - Roll_controlled; // + (Pitch_in/5) - (Yaw_in/5);
 8001e76:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <TaskMotor+0x19c>)
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <TaskMotor+0x1a0>)
 8001e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	61fb      	str	r3, [r7, #28]
					ESC4_Speed = Throttle_in + Roll_controlled; // + (Pitch_in/5) + (Yaw_in/5);
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <TaskMotor+0x19c>)
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <TaskMotor+0x1a0>)
 8001e8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e92:	4413      	add	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
				}
				osMutexRelease(ControllerMutexHandle);
 8001e96:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <TaskMotor+0x198>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f00d f898 	bl	800efd0 <osMutexRelease>
//				ESC1_Speed = 0;
//				ESC2_Speed = 0;
//				ESC3_Speed = 0;
//				ESC4_Speed = 0;

				TIM1->CCR1 = ConvertToPwm(ESC1_Speed);
 8001ea0:	4c18      	ldr	r4, [pc, #96]	; (8001f04 <TaskMotor+0x180>)
 8001ea2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ea4:	f7ff ff54 	bl	8001d50 <ConvertToPwm>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	6363      	str	r3, [r4, #52]	; 0x34
				TIM1->CCR2 = ConvertToPwm(ESC2_Speed);
 8001eac:	4c15      	ldr	r4, [pc, #84]	; (8001f04 <TaskMotor+0x180>)
 8001eae:	6a38      	ldr	r0, [r7, #32]
 8001eb0:	f7ff ff4e 	bl	8001d50 <ConvertToPwm>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	63a3      	str	r3, [r4, #56]	; 0x38
				TIM1->CCR3 = ConvertToPwm(ESC3_Speed);
 8001eb8:	4c12      	ldr	r4, [pc, #72]	; (8001f04 <TaskMotor+0x180>)
 8001eba:	69f8      	ldr	r0, [r7, #28]
 8001ebc:	f7ff ff48 	bl	8001d50 <ConvertToPwm>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	63e3      	str	r3, [r4, #60]	; 0x3c
				TIM1->CCR4 = ConvertToPwm(ESC4_Speed);
 8001ec4:	4c0f      	ldr	r4, [pc, #60]	; (8001f04 <TaskMotor+0x180>)
 8001ec6:	69b8      	ldr	r0, [r7, #24]
 8001ec8:	f7ff ff42 	bl	8001d50 <ConvertToPwm>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	6423      	str	r3, [r4, #64]	; 0x40
 8001ed0:	e00f      	b.n	8001ef2 <TaskMotor+0x16e>
			}
			else
			{
				TIM1->CCR1 = (uint32_t) (1000);
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <TaskMotor+0x180>)
 8001ed4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ed8:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = (uint32_t) (1000);
 8001eda:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <TaskMotor+0x180>)
 8001edc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ee0:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = (uint32_t) (1000);
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <TaskMotor+0x180>)
 8001ee4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ee8:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR4 = (uint32_t) (1000);
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <TaskMotor+0x180>)
 8001eec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
			}
		}
		osMutexRelease(RemoteDataMutexHandle);
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <TaskMotor+0x184>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f00d f86a 	bl	800efd0 <osMutexRelease>
	{
 8001efc:	e76e      	b.n	8001ddc <TaskMotor+0x58>
 8001efe:	bf00      	nop
 8001f00:	20000a2c 	.word	0x20000a2c
 8001f04:	40010000 	.word	0x40010000
 8001f08:	20000cd8 	.word	0x20000cd8
 8001f0c:	20000292 	.word	0x20000292
 8001f10:	40021000 	.word	0x40021000
 8001f14:	20000294 	.word	0x20000294
 8001f18:	20000001 	.word	0x20000001
 8001f1c:	20000cec 	.word	0x20000cec
 8001f20:	20000288 	.word	0x20000288
 8001f24:	2000028e 	.word	0x2000028e

08001f28 <TaskPower>:
#include "Globals.h"

void TaskPower(void const *argument)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1; //Hz
 8001f30:	2301      	movs	r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8001f34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	613b      	str	r3, [r7, #16]

	// ...

	xLastWakeTime = xTaskGetTickCount();
 8001f40:	f00e fb90 	bl	8010664 <xTaskGetTickCount>
 8001f44:	4603      	mov	r3, r0
 8001f46:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for (;;)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8001f48:	f107 0308 	add.w	r3, r7, #8
 8001f4c:	6939      	ldr	r1, [r7, #16]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f00e f9b4 	bl	80102bc <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8001f54:	f00e fb86 	bl	8010664 <xTaskGetTickCount>
 8001f58:	60f8      	str	r0, [r7, #12]
	{
 8001f5a:	e7f5      	b.n	8001f48 <TaskPower+0x20>

08001f5c <TaskRemote>:
// Task Remote
// - Starts Interrupt UART communication with the Receiver
// - If a complete package of data has arrived from the Remote Controller to the Buffer,
//   it processes that and saves it to the corresponding Global variables.
void TaskRemote(void const *argument)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	; 0x28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50; //Hz
 8001f64:	2332      	movs	r3, #50	; 0x32
 8001f66:	61bb      	str	r3, [r7, #24]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8001f68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f72:	617b      	str	r3, [r7, #20]

	static uint16_t channelValues[IBUS_MAXCHANNELS];// Output values of the channels (1000 ... 2000)

	HAL_UART_Receive_DMA(&huart2, &Uart2Buffer, 64);
 8001f74:	2240      	movs	r2, #64	; 0x40
 8001f76:	4966      	ldr	r1, [pc, #408]	; (8002110 <TaskRemote+0x1b4>)
 8001f78:	4866      	ldr	r0, [pc, #408]	; (8002114 <TaskRemote+0x1b8>)
 8001f7a:	f00b fb6e 	bl	800d65a <HAL_UART_Receive_DMA>

	xLastWakeTime = xTaskGetTickCount();
 8001f7e:	f00e fb71 	bl	8010664 <xTaskGetTickCount>
 8001f82:	4603      	mov	r3, r0
 8001f84:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	while (1)
	{
		//Log("R-WS");
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8001f86:	f107 030c 	add.w	r3, r7, #12
 8001f8a:	6979      	ldr	r1, [r7, #20]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f00e f995 	bl	80102bc <vTaskDelayUntil>
		//Log("R-WE");

		TickType_t time = xTaskGetTickCount();
 8001f92:	f00e fb67 	bl	8010664 <xTaskGetTickCount>
 8001f96:	6138      	str	r0, [r7, #16]

		//Log("R-RBFS-WS");
		if (osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever) == osOK)
 8001f98:	4b5f      	ldr	r3, [pc, #380]	; (8002118 <TaskRemote+0x1bc>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f00d f87d 	bl	800f0a0 <osSemaphoreWait>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1ec      	bne.n	8001f86 <TaskRemote+0x2a>
		{
			//Log("R-RBFS-WE");

			//Find the last complete 32 bit iBus packet in the 64 bit RemoteBuffer
			//Log("R-RBM-WS");
			if (osMutexWait(RemoteBufferMutexHandle, osWaitForever) == osOK)
 8001fac:	4b5b      	ldr	r3, [pc, #364]	; (800211c <TaskRemote+0x1c0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f00c ffbd 	bl	800ef34 <osMutexWait>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d12f      	bne.n	8002020 <TaskRemote+0xc4>
			{
				//Log("R-RBM-WE");

				for (int i = 32; i >= 0; i--)
 8001fc0:	2320      	movs	r3, #32
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc4:	e024      	b.n	8002010 <TaskRemote+0xb4>
				{
					if (RemoteBuffer[i] == 0x20 && RemoteBuffer[i+1] == 0x40)
 8001fc6:	4a56      	ldr	r2, [pc, #344]	; (8002120 <TaskRemote+0x1c4>)
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	4413      	add	r3, r2
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b20      	cmp	r3, #32
 8001fd2:	d11a      	bne.n	800200a <TaskRemote+0xae>
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	4a51      	ldr	r2, [pc, #324]	; (8002120 <TaskRemote+0x1c4>)
 8001fda:	5cd3      	ldrb	r3, [r2, r3]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b40      	cmp	r3, #64	; 0x40
 8001fe0:	d113      	bne.n	800200a <TaskRemote+0xae>
					{
						for (int j = 0; j < IBUS_PACKET_SIZE; j++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	623b      	str	r3, [r7, #32]
 8001fe6:	e00d      	b.n	8002004 <TaskRemote+0xa8>
							LastIbusPacket[j] = RemoteBuffer[i+j];
 8001fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	4413      	add	r3, r2
 8001fee:	4a4c      	ldr	r2, [pc, #304]	; (8002120 <TaskRemote+0x1c4>)
 8001ff0:	5cd3      	ldrb	r3, [r2, r3]
 8001ff2:	b2d9      	uxtb	r1, r3
 8001ff4:	4a4b      	ldr	r2, [pc, #300]	; (8002124 <TaskRemote+0x1c8>)
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	460a      	mov	r2, r1
 8001ffc:	701a      	strb	r2, [r3, #0]
						for (int j = 0; j < IBUS_PACKET_SIZE; j++)
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	3301      	adds	r3, #1
 8002002:	623b      	str	r3, [r7, #32]
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	2b1f      	cmp	r3, #31
 8002008:	ddee      	ble.n	8001fe8 <TaskRemote+0x8c>
				for (int i = 32; i >= 0; i--)
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	3b01      	subs	r3, #1
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	2b00      	cmp	r3, #0
 8002014:	dad7      	bge.n	8001fc6 <TaskRemote+0x6a>
					}
				}

				//Log("R-RBM-RS");
				osMutexRelease(RemoteBufferMutexHandle);
 8002016:	4b41      	ldr	r3, [pc, #260]	; (800211c <TaskRemote+0x1c0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f00c ffd8 	bl	800efd0 <osMutexRelease>
			// And cycle through the raw data and convert it to actual integer values
			// ibus pattern example:
			// i=0  1     2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21  22 23 24  25  26 27  28 28  30 31
			//   20 40    DB 5  DC 5  54 5  DC 5  E8 3  D0 7  D2 5  E8 3  DC 5  DC 5   DC 5   DC 5   DC 5   DC 5   DA F3
			// | Header | CH1 | CH2 | CH3 | CH4 | CH5 | CH6 | CH7 | CH8 | CH9 | CH10 | CH11 | CH12 | CH13 | CH14 | Checksum |
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	e018      	b.n	8002058 <TaskRemote+0xfc>
				channelValues[i] = (LastIbusPacket[3 + 2 * i] << 8) + LastIbusPacket[2 + 2 * i];
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	3303      	adds	r3, #3
 800202c:	4a3d      	ldr	r2, [pc, #244]	; (8002124 <TaskRemote+0x1c8>)
 800202e:	5cd3      	ldrb	r3, [r2, r3]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	b29b      	uxth	r3, r3
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	b29a      	uxth	r2, r3
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	3301      	adds	r3, #1
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4939      	ldr	r1, [pc, #228]	; (8002124 <TaskRemote+0x1c8>)
 8002040:	5ccb      	ldrb	r3, [r1, r3]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	b29b      	uxth	r3, r3
 8002046:	4413      	add	r3, r2
 8002048:	b299      	uxth	r1, r3
 800204a:	4a37      	ldr	r2, [pc, #220]	; (8002128 <TaskRemote+0x1cc>)
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3301      	adds	r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	2b09      	cmp	r3, #9
 800205c:	dde3      	ble.n	8002026 <TaskRemote+0xca>

			// Setting the speed
			//Log("R-RDM-WS");
			if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 800205e:	4b33      	ldr	r3, [pc, #204]	; (800212c <TaskRemote+0x1d0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f04f 31ff 	mov.w	r1, #4294967295
 8002066:	4618      	mov	r0, r3
 8002068:	f00c ff64 	bl	800ef34 <osMutexWait>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d148      	bne.n	8002104 <TaskRemote+0x1a8>
//						sprintf(str, "%d ", channelValues[i]);
//						HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
//					}
//					HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

				Throttle_in = channelValues[THROTTLE_CHANNEL] - 1000;
 8002072:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <TaskRemote+0x1cc>)
 8002074:	889b      	ldrh	r3, [r3, #4]
 8002076:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800207a:	b29a      	uxth	r2, r3
 800207c:	4b2c      	ldr	r3, [pc, #176]	; (8002130 <TaskRemote+0x1d4>)
 800207e:	801a      	strh	r2, [r3, #0]
				Pitch_in = channelValues[PITCH_CHANNEL] - 1500;
 8002080:	4b29      	ldr	r3, [pc, #164]	; (8002128 <TaskRemote+0x1cc>)
 8002082:	885b      	ldrh	r3, [r3, #2]
 8002084:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8002088:	b29b      	uxth	r3, r3
 800208a:	b21a      	sxth	r2, r3
 800208c:	4b29      	ldr	r3, [pc, #164]	; (8002134 <TaskRemote+0x1d8>)
 800208e:	801a      	strh	r2, [r3, #0]
				Roll_in = channelValues[ROLL_CHANNEL] - 1500;
 8002090:	4b25      	ldr	r3, [pc, #148]	; (8002128 <TaskRemote+0x1cc>)
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8002098:	b29b      	uxth	r3, r3
 800209a:	b21a      	sxth	r2, r3
 800209c:	4b26      	ldr	r3, [pc, #152]	; (8002138 <TaskRemote+0x1dc>)
 800209e:	801a      	strh	r2, [r3, #0]
				Yaw_in = channelValues[YAW_CHANNEL] - 1500;
 80020a0:	4b21      	ldr	r3, [pc, #132]	; (8002128 <TaskRemote+0x1cc>)
 80020a2:	88db      	ldrh	r3, [r3, #6]
 80020a4:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	b21a      	sxth	r2, r3
 80020ac:	4b23      	ldr	r3, [pc, #140]	; (800213c <TaskRemote+0x1e0>)
 80020ae:	801a      	strh	r2, [r3, #0]
				SWA = channelValues[SWA_CHANNEL] - 1000;
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <TaskRemote+0x1cc>)
 80020b2:	891b      	ldrh	r3, [r3, #8]
 80020b4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	4b21      	ldr	r3, [pc, #132]	; (8002140 <TaskRemote+0x1e4>)
 80020bc:	801a      	strh	r2, [r3, #0]
				SWB = channelValues[SWB_CHANNEL] - 1000;
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <TaskRemote+0x1cc>)
 80020c0:	895b      	ldrh	r3, [r3, #10]
 80020c2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <TaskRemote+0x1e8>)
 80020ca:	801a      	strh	r2, [r3, #0]
				SWC = channelValues[SWC_CHANNEL] - 1000;
 80020cc:	4b16      	ldr	r3, [pc, #88]	; (8002128 <TaskRemote+0x1cc>)
 80020ce:	899b      	ldrh	r3, [r3, #12]
 80020d0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <TaskRemote+0x1ec>)
 80020d8:	801a      	strh	r2, [r3, #0]
				SWD = channelValues[SWD_CHANNEL] - 1000;
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <TaskRemote+0x1cc>)
 80020dc:	89db      	ldrh	r3, [r3, #14]
 80020de:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <TaskRemote+0x1f0>)
 80020e6:	801a      	strh	r2, [r3, #0]
				VRA = channelValues[VRA_CHANNEL] - 1000;
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <TaskRemote+0x1cc>)
 80020ea:	8a1b      	ldrh	r3, [r3, #16]
 80020ec:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	4b17      	ldr	r3, [pc, #92]	; (8002150 <TaskRemote+0x1f4>)
 80020f4:	801a      	strh	r2, [r3, #0]
				VRB = channelValues[VRB_CHANNEL] - 1000;
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <TaskRemote+0x1cc>)
 80020f8:	8a5b      	ldrh	r3, [r3, #18]
 80020fa:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80020fe:	b29a      	uxth	r2, r3
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <TaskRemote+0x1f8>)
 8002102:	801a      	strh	r2, [r3, #0]
				//HAL_UART_Transmit(&huart3, str1, 11, HAL_MAX_DELAY);


			}
			//Log("R-RDM-RS");
			osMutexRelease(RemoteDataMutexHandle);
 8002104:	4b09      	ldr	r3, [pc, #36]	; (800212c <TaskRemote+0x1d0>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f00c ff61 	bl	800efd0 <osMutexRelease>
	{
 800210e:	e73a      	b.n	8001f86 <TaskRemote+0x2a>
 8002110:	200003dc 	.word	0x200003dc
 8002114:	20000b4c 	.word	0x20000b4c
 8002118:	20000cf8 	.word	0x20000cf8
 800211c:	20000ce8 	.word	0x20000ce8
 8002120:	2000041c 	.word	0x2000041c
 8002124:	2000045c 	.word	0x2000045c
 8002128:	2000065c 	.word	0x2000065c
 800212c:	20000cd8 	.word	0x20000cd8
 8002130:	20000288 	.word	0x20000288
 8002134:	2000028a 	.word	0x2000028a
 8002138:	2000028c 	.word	0x2000028c
 800213c:	20000290 	.word	0x20000290
 8002140:	20000292 	.word	0x20000292
 8002144:	20000294 	.word	0x20000294
 8002148:	20000296 	.word	0x20000296
 800214c:	20000298 	.word	0x20000298
 8002150:	2000029a 	.word	0x2000029a
 8002154:	2000029c 	.word	0x2000029c

08002158 <TaskSensorData>:
extern osMutexId ImuMutexHandle;
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;

void TaskSensorData(void const *argument)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	; 0x28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 8002160:	23c8      	movs	r3, #200	; 0xc8
 8002162:	623b      	str	r3, [r7, #32]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8002164:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	fbb2 f3f3 	udiv	r3, r2, r3
 800216e:	61fb      	str	r3, [r7, #28]

	bool Recalibrate = false;
 8002170:	2300      	movs	r3, #0
 8002172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GyroLPF[2].T = 0.005;
	GyroLPF[2].f_cutoff = 100;
	LPF_Init(&(GyroLPF[2]));
	*/

	xLastWakeTime = xTaskGetTickCount();
 8002176:	f00e fa75 	bl	8010664 <xTaskGetTickCount>
 800217a:	4603      	mov	r3, r0
 800217c:	617b      	str	r3, [r7, #20]
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	69f9      	ldr	r1, [r7, #28]
 8002184:	4618      	mov	r0, r3
 8002186:	f00e f899 	bl	80102bc <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 800218a:	f00e fa6b 	bl	8010664 <xTaskGetTickCount>
 800218e:	61b8      	str	r0, [r7, #24]

		// IMU Data
		if (IsImuAvailable)
 8002190:	4ba7      	ldr	r3, [pc, #668]	; (8002430 <TaskSensorData+0x2d8>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 808d 	beq.w	80022b4 <TaskSensorData+0x15c>
		{
			Log("SD-RDM-WS");
 800219a:	48a6      	ldr	r0, [pc, #664]	; (8002434 <TaskSensorData+0x2dc>)
 800219c:	f7ff f8ea 	bl	8001374 <Log>
			if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 80021a0:	4ba5      	ldr	r3, [pc, #660]	; (8002438 <TaskSensorData+0x2e0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f04f 31ff 	mov.w	r1, #4294967295
 80021a8:	4618      	mov	r0, r3
 80021aa:	f00c fec3 	bl	800ef34 <osMutexWait>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10b      	bne.n	80021cc <TaskSensorData+0x74>
			{
				Log("SD-RDM-WE");
 80021b4:	48a1      	ldr	r0, [pc, #644]	; (800243c <TaskSensorData+0x2e4>)
 80021b6:	f7ff f8dd 	bl	8001374 <Log>
				if (SWC > 990)
 80021ba:	4ba1      	ldr	r3, [pc, #644]	; (8002440 <TaskSensorData+0x2e8>)
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	f240 32de 	movw	r2, #990	; 0x3de
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d902      	bls.n	80021cc <TaskSensorData+0x74>
				{
					Recalibrate = true;
 80021c6:	2301      	movs	r3, #1
 80021c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}

			}
			Log("SD-RDM-RS");
 80021cc:	489d      	ldr	r0, [pc, #628]	; (8002444 <TaskSensorData+0x2ec>)
 80021ce:	f7ff f8d1 	bl	8001374 <Log>
			osMutexRelease(RemoteDataMutexHandle);
 80021d2:	4b99      	ldr	r3, [pc, #612]	; (8002438 <TaskSensorData+0x2e0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f00c fefa 	bl	800efd0 <osMutexRelease>
			Log("SD-RDM-RE");
 80021dc:	489a      	ldr	r0, [pc, #616]	; (8002448 <TaskSensorData+0x2f0>)
 80021de:	f7ff f8c9 	bl	8001374 <Log>

			//MPU9250_GetData(AccData, &TempData, GyroData, MagData, false);
			//MPU_readRawData(&hspi2, &MPU9250);
			MPU_calcAttitude(&hspi2, &MPU9250);
 80021e2:	499a      	ldr	r1, [pc, #616]	; (800244c <TaskSensorData+0x2f4>)
 80021e4:	489a      	ldr	r0, [pc, #616]	; (8002450 <TaskSensorData+0x2f8>)
 80021e6:	f004 ff47 	bl	8007078 <MPU_calcAttitude>

			BMP280_measure(&BMP280);
 80021ea:	489a      	ldr	r0, [pc, #616]	; (8002454 <TaskSensorData+0x2fc>)
 80021ec:	f003 ff4c 	bl	8006088 <BMP280_measure>

			Log("SD-IM-WS");
 80021f0:	4899      	ldr	r0, [pc, #612]	; (8002458 <TaskSensorData+0x300>)
 80021f2:	f7ff f8bf 	bl	8001374 <Log>
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 80021f6:	4b99      	ldr	r3, [pc, #612]	; (800245c <TaskSensorData+0x304>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f04f 31ff 	mov.w	r1, #4294967295
 80021fe:	4618      	mov	r0, r3
 8002200:	f00c fe98 	bl	800ef34 <osMutexWait>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d149      	bne.n	800229e <TaskSensorData+0x146>
			{
				Log("SD-IM-WE");
 800220a:	4895      	ldr	r0, [pc, #596]	; (8002460 <TaskSensorData+0x308>)
 800220c:	f7ff f8b2 	bl	8001374 <Log>
				if (Recalibrate)
 8002210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00e      	beq.n	8002236 <TaskSensorData+0xde>
				{
					HAL_UART_Transmit(&huart3, "CALIBRATING...\r\n", strlen("CALIBRATING...\r\n"), HAL_MAX_DELAY);
 8002218:	f04f 33ff 	mov.w	r3, #4294967295
 800221c:	2210      	movs	r2, #16
 800221e:	4991      	ldr	r1, [pc, #580]	; (8002464 <TaskSensorData+0x30c>)
 8002220:	4891      	ldr	r0, [pc, #580]	; (8002468 <TaskSensorData+0x310>)
 8002222:	f00b f953 	bl	800d4cc <HAL_UART_Transmit>
					MPU_calibrateGyro(&hspi2, &MPU9250, 20);
 8002226:	2214      	movs	r2, #20
 8002228:	4988      	ldr	r1, [pc, #544]	; (800244c <TaskSensorData+0x2f4>)
 800222a:	4889      	ldr	r0, [pc, #548]	; (8002450 <TaskSensorData+0x2f8>)
 800222c:	f004 fc7c 	bl	8006b28 <MPU_calibrateGyro>

					Recalibrate = false;
 8002230:	2300      	movs	r3, #0
 8002232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}

				AccData[0] = MPU9250.sensorData.ax;
 8002236:	4b85      	ldr	r3, [pc, #532]	; (800244c <TaskSensorData+0x2f4>)
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	4a8c      	ldr	r2, [pc, #560]	; (800246c <TaskSensorData+0x314>)
 800223c:	6013      	str	r3, [r2, #0]
				AccData[1] = MPU9250.sensorData.ay;
 800223e:	4b83      	ldr	r3, [pc, #524]	; (800244c <TaskSensorData+0x2f4>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	4a8a      	ldr	r2, [pc, #552]	; (800246c <TaskSensorData+0x314>)
 8002244:	6053      	str	r3, [r2, #4]
				AccData[2] = MPU9250.sensorData.az;
 8002246:	4b81      	ldr	r3, [pc, #516]	; (800244c <TaskSensorData+0x2f4>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4a88      	ldr	r2, [pc, #544]	; (800246c <TaskSensorData+0x314>)
 800224c:	6093      	str	r3, [r2, #8]
				TempData = MPU9250.sensorData.temp;
 800224e:	4b7f      	ldr	r3, [pc, #508]	; (800244c <TaskSensorData+0x2f4>)
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	4a87      	ldr	r2, [pc, #540]	; (8002470 <TaskSensorData+0x318>)
 8002254:	6013      	str	r3, [r2, #0]
				GyroData[0] = MPU9250.sensorData.gx;
 8002256:	4b7d      	ldr	r3, [pc, #500]	; (800244c <TaskSensorData+0x2f4>)
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	4a86      	ldr	r2, [pc, #536]	; (8002474 <TaskSensorData+0x31c>)
 800225c:	6013      	str	r3, [r2, #0]
				GyroData[1] = MPU9250.sensorData.gy;
 800225e:	4b7b      	ldr	r3, [pc, #492]	; (800244c <TaskSensorData+0x2f4>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a84      	ldr	r2, [pc, #528]	; (8002474 <TaskSensorData+0x31c>)
 8002264:	6053      	str	r3, [r2, #4]
				GyroData[2] = MPU9250.sensorData.gz;
 8002266:	4b79      	ldr	r3, [pc, #484]	; (800244c <TaskSensorData+0x2f4>)
 8002268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226a:	4a82      	ldr	r2, [pc, #520]	; (8002474 <TaskSensorData+0x31c>)
 800226c:	6093      	str	r3, [r2, #8]
				//GyroData[0] = LPF_Update(&(GyroLPF[0]), MPU9250.sensorData.gx);
				//GyroData[1] = LPF_Update(&(GyroLPF[1]), MPU9250.sensorData.gy);
				//GyroData[2] = LPF_Update(&(GyroLPF[2]), MPU9250.sensorData.gz);
				Roll_measured = MPU9250.attitude.roll;
 800226e:	4b77      	ldr	r3, [pc, #476]	; (800244c <TaskSensorData+0x2f4>)
 8002270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002272:	4a81      	ldr	r2, [pc, #516]	; (8002478 <TaskSensorData+0x320>)
 8002274:	6013      	str	r3, [r2, #0]
				Pitch_measured = MPU9250.attitude.pitch;
 8002276:	4b75      	ldr	r3, [pc, #468]	; (800244c <TaskSensorData+0x2f4>)
 8002278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227a:	4a80      	ldr	r2, [pc, #512]	; (800247c <TaskSensorData+0x324>)
 800227c:	6013      	str	r3, [r2, #0]
				Yaw_measured = MPU9250.attitude.yaw;
 800227e:	4b73      	ldr	r3, [pc, #460]	; (800244c <TaskSensorData+0x2f4>)
 8002280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002282:	4a7f      	ldr	r2, [pc, #508]	; (8002480 <TaskSensorData+0x328>)
 8002284:	6013      	str	r3, [r2, #0]

				BMP_Temp = BMP280.measurement.temperature;
 8002286:	4b73      	ldr	r3, [pc, #460]	; (8002454 <TaskSensorData+0x2fc>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	4a7e      	ldr	r2, [pc, #504]	; (8002484 <TaskSensorData+0x32c>)
 800228c:	6013      	str	r3, [r2, #0]
				BMP_Pres = BMP280.measurement.pressure;
 800228e:	4b71      	ldr	r3, [pc, #452]	; (8002454 <TaskSensorData+0x2fc>)
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	4a7d      	ldr	r2, [pc, #500]	; (8002488 <TaskSensorData+0x330>)
 8002294:	6013      	str	r3, [r2, #0]
				BMP_Alt = BMP280.measurement.altitude;
 8002296:	4b6f      	ldr	r3, [pc, #444]	; (8002454 <TaskSensorData+0x2fc>)
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	4a7c      	ldr	r2, [pc, #496]	; (800248c <TaskSensorData+0x334>)
 800229c:	6013      	str	r3, [r2, #0]

			}
			Log("SD-IM-RS");
 800229e:	487c      	ldr	r0, [pc, #496]	; (8002490 <TaskSensorData+0x338>)
 80022a0:	f7ff f868 	bl	8001374 <Log>
			osMutexRelease(ImuMutexHandle);
 80022a4:	4b6d      	ldr	r3, [pc, #436]	; (800245c <TaskSensorData+0x304>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f00c fe91 	bl	800efd0 <osMutexRelease>
			Log("SD-IM-RE");
 80022ae:	4879      	ldr	r0, [pc, #484]	; (8002494 <TaskSensorData+0x33c>)
 80022b0:	f7ff f860 	bl	8001374 <Log>
		}

		// Magnetometer Data
		if (IsMagnAvailable)
 80022b4:	4b78      	ldr	r3, [pc, #480]	; (8002498 <TaskSensorData+0x340>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 8148 	beq.w	800254e <TaskSensorData+0x3f6>
		{
			Log("SD-MM-WS");
 80022be:	4877      	ldr	r0, [pc, #476]	; (800249c <TaskSensorData+0x344>)
 80022c0:	f7ff f858 	bl	8001374 <Log>
			if (osMutexWait(MagnMutexHandle, osWaitForever) == osOK)
 80022c4:	4b76      	ldr	r3, [pc, #472]	; (80024a0 <TaskSensorData+0x348>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f04f 31ff 	mov.w	r1, #4294967295
 80022cc:	4618      	mov	r0, r3
 80022ce:	f00c fe31 	bl	800ef34 <osMutexWait>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f040 812f 	bne.w	8002538 <TaskSensorData+0x3e0>
			{
				Log("SD-MM-WE");
 80022da:	4872      	ldr	r0, [pc, #456]	; (80024a4 <TaskSensorData+0x34c>)
 80022dc:	f7ff f84a 	bl	8001374 <Log>

				struct Vector res = HMC5883L_readRaw();
 80022e0:	f003 fbb4 	bl	8005a4c <HMC5883L_readRaw>
 80022e4:	eef0 6a40 	vmov.f32	s13, s0
 80022e8:	eeb0 7a60 	vmov.f32	s14, s1
 80022ec:	eef0 7a41 	vmov.f32	s15, s2
 80022f0:	edc7 6a02 	vstr	s13, [r7, #8]
 80022f4:	ed87 7a03 	vstr	s14, [r7, #12]
 80022f8:	edc7 7a04 	vstr	s15, [r7, #16]
				MAG_X_RAW = res.XAxis;
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	4a6a      	ldr	r2, [pc, #424]	; (80024a8 <TaskSensorData+0x350>)
 8002300:	6013      	str	r3, [r2, #0]
				MAG_Y_RAW = res.YAxis;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4a69      	ldr	r2, [pc, #420]	; (80024ac <TaskSensorData+0x354>)
 8002306:	6013      	str	r3, [r2, #0]
				MAG_Z_RAW = res.ZAxis;
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4a69      	ldr	r2, [pc, #420]	; (80024b0 <TaskSensorData+0x358>)
 800230c:	6013      	str	r3, [r2, #0]
				//MAG_Y_NORM = MAG_Y_RAW / magnitude;
				//MAG_Z_NORM = MAG_Z_RAW / magnitude;

				//MAG_dir = atan2f(MAG_X_NORM, MAG_Y_NORM)*180.0f/M_PI;

				if (MAG_Y_RAW != 0)
 800230e:	4b67      	ldr	r3, [pc, #412]	; (80024ac <TaskSensorData+0x354>)
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231c:	d068      	beq.n	80023f0 <TaskSensorData+0x298>
				{
					if (MAG_Y_RAW > 0)
 800231e:	4b63      	ldr	r3, [pc, #396]	; (80024ac <TaskSensorData+0x354>)
 8002320:	edd3 7a00 	vldr	s15, [r3]
 8002324:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232c:	dd2b      	ble.n	8002386 <TaskSensorData+0x22e>
						MAG_dir = 90.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 800232e:	4b5e      	ldr	r3, [pc, #376]	; (80024a8 <TaskSensorData+0x350>)
 8002330:	edd3 7a00 	vldr	s15, [r3]
 8002334:	4b5d      	ldr	r3, [pc, #372]	; (80024ac <TaskSensorData+0x354>)
 8002336:	ed93 7a00 	vldr	s14, [r3]
 800233a:	eef0 0a47 	vmov.f32	s1, s14
 800233e:	eeb0 0a67 	vmov.f32	s0, s15
 8002342:	f014 fc09 	bl	8016b58 <atan2f>
 8002346:	eef0 7a40 	vmov.f32	s15, s0
 800234a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80024b4 <TaskSensorData+0x35c>
 800234e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002352:	ee17 0a90 	vmov	r0, s15
 8002356:	f7fe f91f 	bl	8000598 <__aeabi_f2d>
 800235a:	a331      	add	r3, pc, #196	; (adr r3, 8002420 <TaskSensorData+0x2c8>)
 800235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002360:	f7fe fa9c 	bl	800089c <__aeabi_ddiv>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	f04f 0000 	mov.w	r0, #0
 800236c:	4952      	ldr	r1, [pc, #328]	; (80024b8 <TaskSensorData+0x360>)
 800236e:	f7fd ffb3 	bl	80002d8 <__aeabi_dsub>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4610      	mov	r0, r2
 8002378:	4619      	mov	r1, r3
 800237a:	f7fe fc5d 	bl	8000c38 <__aeabi_d2f>
 800237e:	4603      	mov	r3, r0
 8002380:	4a4e      	ldr	r2, [pc, #312]	; (80024bc <TaskSensorData+0x364>)
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	e0a7      	b.n	80024d6 <TaskSensorData+0x37e>
					else if (MAG_Y_RAW < 0)
 8002386:	4b49      	ldr	r3, [pc, #292]	; (80024ac <TaskSensorData+0x354>)
 8002388:	edd3 7a00 	vldr	s15, [r3]
 800238c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002394:	f140 809f 	bpl.w	80024d6 <TaskSensorData+0x37e>
						MAG_dir = 270.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 8002398:	4b43      	ldr	r3, [pc, #268]	; (80024a8 <TaskSensorData+0x350>)
 800239a:	edd3 7a00 	vldr	s15, [r3]
 800239e:	4b43      	ldr	r3, [pc, #268]	; (80024ac <TaskSensorData+0x354>)
 80023a0:	ed93 7a00 	vldr	s14, [r3]
 80023a4:	eef0 0a47 	vmov.f32	s1, s14
 80023a8:	eeb0 0a67 	vmov.f32	s0, s15
 80023ac:	f014 fbd4 	bl	8016b58 <atan2f>
 80023b0:	eef0 7a40 	vmov.f32	s15, s0
 80023b4:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80024b4 <TaskSensorData+0x35c>
 80023b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023bc:	ee17 0a90 	vmov	r0, s15
 80023c0:	f7fe f8ea 	bl	8000598 <__aeabi_f2d>
 80023c4:	a316      	add	r3, pc, #88	; (adr r3, 8002420 <TaskSensorData+0x2c8>)
 80023c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ca:	f7fe fa67 	bl	800089c <__aeabi_ddiv>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	a115      	add	r1, pc, #84	; (adr r1, 8002428 <TaskSensorData+0x2d0>)
 80023d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023d8:	f7fd ff7e 	bl	80002d8 <__aeabi_dsub>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	f7fe fc28 	bl	8000c38 <__aeabi_d2f>
 80023e8:	4603      	mov	r3, r0
 80023ea:	4a34      	ldr	r2, [pc, #208]	; (80024bc <TaskSensorData+0x364>)
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	e072      	b.n	80024d6 <TaskSensorData+0x37e>
				}
				else if (MAG_Y_RAW == 0)
 80023f0:	4b2e      	ldr	r3, [pc, #184]	; (80024ac <TaskSensorData+0x354>)
 80023f2:	edd3 7a00 	vldr	s15, [r3]
 80023f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fe:	d16a      	bne.n	80024d6 <TaskSensorData+0x37e>
				{
					if (MAG_X_RAW > 0)
 8002400:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <TaskSensorData+0x350>)
 8002402:	edd3 7a00 	vldr	s15, [r3]
 8002406:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800240a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240e:	dd57      	ble.n	80024c0 <TaskSensorData+0x368>
						MAG_dir = 0.0f;
 8002410:	4b2a      	ldr	r3, [pc, #168]	; (80024bc <TaskSensorData+0x364>)
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e05d      	b.n	80024d6 <TaskSensorData+0x37e>
 800241a:	bf00      	nop
 800241c:	f3af 8000 	nop.w
 8002420:	54442d18 	.word	0x54442d18
 8002424:	400921fb 	.word	0x400921fb
 8002428:	00000000 	.word	0x00000000
 800242c:	4070e000 	.word	0x4070e000
 8002430:	20000214 	.word	0x20000214
 8002434:	08017d74 	.word	0x08017d74
 8002438:	20000cd8 	.word	0x20000cd8
 800243c:	08017d80 	.word	0x08017d80
 8002440:	20000296 	.word	0x20000296
 8002444:	08017d8c 	.word	0x08017d8c
 8002448:	08017d98 	.word	0x08017d98
 800244c:	200002a0 	.word	0x200002a0
 8002450:	200009c8 	.word	0x200009c8
 8002454:	2000033c 	.word	0x2000033c
 8002458:	08017da4 	.word	0x08017da4
 800245c:	20000cdc 	.word	0x20000cdc
 8002460:	08017db0 	.word	0x08017db0
 8002464:	08017dbc 	.word	0x08017dbc
 8002468:	20000bd4 	.word	0x20000bd4
 800246c:	20000314 	.word	0x20000314
 8002470:	20000320 	.word	0x20000320
 8002474:	20000324 	.word	0x20000324
 8002478:	20000330 	.word	0x20000330
 800247c:	20000334 	.word	0x20000334
 8002480:	20000338 	.word	0x20000338
 8002484:	2000036c 	.word	0x2000036c
 8002488:	20000370 	.word	0x20000370
 800248c:	20000374 	.word	0x20000374
 8002490:	08017dd0 	.word	0x08017dd0
 8002494:	08017ddc 	.word	0x08017ddc
 8002498:	20000215 	.word	0x20000215
 800249c:	08017de8 	.word	0x08017de8
 80024a0:	20000cd4 	.word	0x20000cd4
 80024a4:	08017df4 	.word	0x08017df4
 80024a8:	20000390 	.word	0x20000390
 80024ac:	20000394 	.word	0x20000394
 80024b0:	20000398 	.word	0x20000398
 80024b4:	43340000 	.word	0x43340000
 80024b8:	40568000 	.word	0x40568000
 80024bc:	2000039c 	.word	0x2000039c
					else if (MAG_X_RAW < 0)
 80024c0:	4b64      	ldr	r3, [pc, #400]	; (8002654 <TaskSensorData+0x4fc>)
 80024c2:	edd3 7a00 	vldr	s15, [r3]
 80024c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ce:	d502      	bpl.n	80024d6 <TaskSensorData+0x37e>
						MAG_dir = 180.0f;
 80024d0:	4b61      	ldr	r3, [pc, #388]	; (8002658 <TaskSensorData+0x500>)
 80024d2:	4a62      	ldr	r2, [pc, #392]	; (800265c <TaskSensorData+0x504>)
 80024d4:	601a      	str	r2, [r3, #0]

				}

				MAG_dir += declination;
 80024d6:	4b60      	ldr	r3, [pc, #384]	; (8002658 <TaskSensorData+0x500>)
 80024d8:	ed93 7a00 	vldr	s14, [r3]
 80024dc:	4b60      	ldr	r3, [pc, #384]	; (8002660 <TaskSensorData+0x508>)
 80024de:	edd3 7a00 	vldr	s15, [r3]
 80024e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e6:	4b5c      	ldr	r3, [pc, #368]	; (8002658 <TaskSensorData+0x500>)
 80024e8:	edc3 7a00 	vstr	s15, [r3]

				if (MAG_dir < 0)
 80024ec:	4b5a      	ldr	r3, [pc, #360]	; (8002658 <TaskSensorData+0x500>)
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fa:	d509      	bpl.n	8002510 <TaskSensorData+0x3b8>
					MAG_dir += 360.0f;
 80024fc:	4b56      	ldr	r3, [pc, #344]	; (8002658 <TaskSensorData+0x500>)
 80024fe:	edd3 7a00 	vldr	s15, [r3]
 8002502:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002664 <TaskSensorData+0x50c>
 8002506:	ee77 7a87 	vadd.f32	s15, s15, s14
 800250a:	4b53      	ldr	r3, [pc, #332]	; (8002658 <TaskSensorData+0x500>)
 800250c:	edc3 7a00 	vstr	s15, [r3]
				if (MAG_dir > 360.0f)
 8002510:	4b51      	ldr	r3, [pc, #324]	; (8002658 <TaskSensorData+0x500>)
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002664 <TaskSensorData+0x50c>
 800251a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002522:	dd09      	ble.n	8002538 <TaskSensorData+0x3e0>
					MAG_dir -= 360.0f;
 8002524:	4b4c      	ldr	r3, [pc, #304]	; (8002658 <TaskSensorData+0x500>)
 8002526:	edd3 7a00 	vldr	s15, [r3]
 800252a:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002664 <TaskSensorData+0x50c>
 800252e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002532:	4b49      	ldr	r3, [pc, #292]	; (8002658 <TaskSensorData+0x500>)
 8002534:	edc3 7a00 	vstr	s15, [r3]
			}
			Log("SD-MM-RS");
 8002538:	484b      	ldr	r0, [pc, #300]	; (8002668 <TaskSensorData+0x510>)
 800253a:	f7fe ff1b 	bl	8001374 <Log>
			osMutexRelease(MagnMutexHandle);
 800253e:	4b4b      	ldr	r3, [pc, #300]	; (800266c <TaskSensorData+0x514>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f00c fd44 	bl	800efd0 <osMutexRelease>
			Log("SD-MM-RE");
 8002548:	4849      	ldr	r0, [pc, #292]	; (8002670 <TaskSensorData+0x518>)
 800254a:	f7fe ff13 	bl	8001374 <Log>
		}

		// Distance Data
		if (IsDistAvailable)
 800254e:	4b49      	ldr	r3, [pc, #292]	; (8002674 <TaskSensorData+0x51c>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d046      	beq.n	80025e4 <TaskSensorData+0x48c>
		{
			//Log("SD-DA");
			if (!HCSR04.Triggered)
 8002556:	4b48      	ldr	r3, [pc, #288]	; (8002678 <TaskSensorData+0x520>)
 8002558:	7d1b      	ldrb	r3, [r3, #20]
 800255a:	f083 0301 	eor.w	r3, r3, #1
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d006      	beq.n	8002572 <TaskSensorData+0x41a>
			{
				HCSR04_Trigger(&HCSR04);
 8002564:	4844      	ldr	r0, [pc, #272]	; (8002678 <TaskSensorData+0x520>)
 8002566:	f005 f84d 	bl	8007604 <HCSR04_Trigger>
				HCSR04.Triggered = true;
 800256a:	4b43      	ldr	r3, [pc, #268]	; (8002678 <TaskSensorData+0x520>)
 800256c:	2201      	movs	r2, #1
 800256e:	751a      	strb	r2, [r3, #20]
 8002570:	e038      	b.n	80025e4 <TaskSensorData+0x48c>
			}
			else if (HCSR04.Triggered)
 8002572:	4b41      	ldr	r3, [pc, #260]	; (8002678 <TaskSensorData+0x520>)
 8002574:	7d1b      	ldrb	r3, [r3, #20]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d034      	beq.n	80025e4 <TaskSensorData+0x48c>
			{
				Log("SD-DS-WS");
 800257a:	4840      	ldr	r0, [pc, #256]	; (800267c <TaskSensorData+0x524>)
 800257c:	f7fe fefa 	bl	8001374 <Log>
				if (osSemaphoreWait(DistSemaphoreHandle, 0) == osOK)
 8002580:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <TaskSensorData+0x528>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f00c fd8a 	bl	800f0a0 <osSemaphoreWait>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d128      	bne.n	80025e4 <TaskSensorData+0x48c>
				{
					Log("SD-DS-WE");
 8002592:	483c      	ldr	r0, [pc, #240]	; (8002684 <TaskSensorData+0x52c>)
 8002594:	f7fe feee 	bl	8001374 <Log>
					Log("SD-DM-WS");
 8002598:	483b      	ldr	r0, [pc, #236]	; (8002688 <TaskSensorData+0x530>)
 800259a:	f7fe feeb 	bl	8001374 <Log>
					if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 800259e:	4b3b      	ldr	r3, [pc, #236]	; (800268c <TaskSensorData+0x534>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f04f 31ff 	mov.w	r1, #4294967295
 80025a6:	4618      	mov	r0, r3
 80025a8:	f00c fcc4 	bl	800ef34 <osMutexWait>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10a      	bne.n	80025c8 <TaskSensorData+0x470>
					{
						Log("SD-DM-WE");
 80025b2:	4837      	ldr	r0, [pc, #220]	; (8002690 <TaskSensorData+0x538>)
 80025b4:	f7fe fede 	bl	8001374 <Log>

						Distance = HCSR04_Read(&HCSR04);
 80025b8:	482f      	ldr	r0, [pc, #188]	; (8002678 <TaskSensorData+0x520>)
 80025ba:	f005 f83e 	bl	800763a <HCSR04_Read>
 80025be:	eef0 7a40 	vmov.f32	s15, s0
 80025c2:	4b34      	ldr	r3, [pc, #208]	; (8002694 <TaskSensorData+0x53c>)
 80025c4:	edc3 7a00 	vstr	s15, [r3]
					}
					Log("SD-DM-RS");
 80025c8:	4833      	ldr	r0, [pc, #204]	; (8002698 <TaskSensorData+0x540>)
 80025ca:	f7fe fed3 	bl	8001374 <Log>
					osMutexRelease(DistMutexHandle);
 80025ce:	4b2f      	ldr	r3, [pc, #188]	; (800268c <TaskSensorData+0x534>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f00c fcfc 	bl	800efd0 <osMutexRelease>
					Log("SD-DM-RE");
 80025d8:	4830      	ldr	r0, [pc, #192]	; (800269c <TaskSensorData+0x544>)
 80025da:	f7fe fecb 	bl	8001374 <Log>

					HCSR04.Triggered = false;
 80025de:	4b26      	ldr	r3, [pc, #152]	; (8002678 <TaskSensorData+0x520>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	751a      	strb	r2, [r3, #20]
				}
			}
		}

		// GPS Data
		if (IsGpsAvailable)
 80025e4:	4b2e      	ldr	r3, [pc, #184]	; (80026a0 <TaskSensorData+0x548>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f43f adc8 	beq.w	800217e <TaskSensorData+0x26>
		{
			//Log("SD-GA");
			if (osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever) == osOK)
 80025ee:	4b2d      	ldr	r3, [pc, #180]	; (80026a4 <TaskSensorData+0x54c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f04f 31ff 	mov.w	r1, #4294967295
 80025f6:	4618      	mov	r0, r3
 80025f8:	f00c fd52 	bl	800f0a0 <osSemaphoreWait>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f47f adbd 	bne.w	800217e <TaskSensorData+0x26>
			{
				if (ProcessGPSPackageBuffer)
 8002604:	4b28      	ldr	r3, [pc, #160]	; (80026a8 <TaskSensorData+0x550>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	f43f adb7 	beq.w	800217e <TaskSensorData+0x26>
				{
					//HAL_UART_Transmit(&huart3, GPSPackageBuffer, GPS_BUFFSIZE, HAL_MAX_DELAY);
					//HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

					if (osMutexWait(GpsDataMutexHandle, osWaitForever) == osOK)
 8002610:	4b26      	ldr	r3, [pc, #152]	; (80026ac <TaskSensorData+0x554>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f04f 31ff 	mov.w	r1, #4294967295
 8002618:	4618      	mov	r0, r3
 800261a:	f00c fc8b 	bl	800ef34 <osMutexWait>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10d      	bne.n	8002640 <TaskSensorData+0x4e8>
					{
						if (GPS_validate((char*) GPSPackageBuffer))
 8002624:	4822      	ldr	r0, [pc, #136]	; (80026b0 <TaskSensorData+0x558>)
 8002626:	f003 f841 	bl	80056ac <GPS_validate>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <TaskSensorData+0x4de>
							GPS_parse((char*) GPSPackageBuffer);
 8002630:	481f      	ldr	r0, [pc, #124]	; (80026b0 <TaskSensorData+0x558>)
 8002632:	f003 f89d 	bl	8005770 <GPS_parse>
						memset(GPSPackageBuffer, 0, sizeof(GPSPackageBuffer));
 8002636:	22ff      	movs	r2, #255	; 0xff
 8002638:	2100      	movs	r1, #0
 800263a:	481d      	ldr	r0, [pc, #116]	; (80026b0 <TaskSensorData+0x558>)
 800263c:	f010 f957 	bl	80128ee <memset>
					}
					osMutexRelease(GpsDataMutexHandle);
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <TaskSensorData+0x554>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f00c fcc3 	bl	800efd0 <osMutexRelease>

					ProcessGPSPackageBuffer = false;
 800264a:	4b17      	ldr	r3, [pc, #92]	; (80026a8 <TaskSensorData+0x550>)
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
	{
 8002650:	e595      	b.n	800217e <TaskSensorData+0x26>
 8002652:	bf00      	nop
 8002654:	20000390 	.word	0x20000390
 8002658:	2000039c 	.word	0x2000039c
 800265c:	43340000 	.word	0x43340000
 8002660:	20000004 	.word	0x20000004
 8002664:	43b40000 	.word	0x43b40000
 8002668:	08017e00 	.word	0x08017e00
 800266c:	20000cd4 	.word	0x20000cd4
 8002670:	08017e0c 	.word	0x08017e0c
 8002674:	20000216 	.word	0x20000216
 8002678:	200003a0 	.word	0x200003a0
 800267c:	08017e18 	.word	0x08017e18
 8002680:	20000cf0 	.word	0x20000cf0
 8002684:	08017e24 	.word	0x08017e24
 8002688:	08017e30 	.word	0x08017e30
 800268c:	20000ce4 	.word	0x20000ce4
 8002690:	08017e3c 	.word	0x08017e3c
 8002694:	200003d8 	.word	0x200003d8
 8002698:	08017e48 	.word	0x08017e48
 800269c:	08017e54 	.word	0x08017e54
 80026a0:	20000217 	.word	0x20000217
 80026a4:	20000cf4 	.word	0x20000cf4
 80026a8:	200005db 	.word	0x200005db
 80026ac:	20000ce0 	.word	0x20000ce0
 80026b0:	200004dc 	.word	0x200004dc

080026b4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80026c4:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	4a06      	ldr	r2, [pc, #24]	; (80026e4 <vApplicationGetIdleTaskMemory+0x30>)
 80026ca:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2280      	movs	r2, #128	; 0x80
 80026d0:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000670 	.word	0x20000670
 80026e4:	20000710 	.word	0x20000710

080026e8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a42      	ldr	r2, [pc, #264]	; (80027fc <HAL_UART_RxCpltCallback+0x114>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d130      	bne.n	800275a <HAL_UART_RxCpltCallback+0x72>
	{
		//Log("U2CB");
		Uart2CallbackCounter++;
 80026f8:	4b41      	ldr	r3, [pc, #260]	; (8002800 <HAL_UART_RxCpltCallback+0x118>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	4a40      	ldr	r2, [pc, #256]	; (8002800 <HAL_UART_RxCpltCallback+0x118>)
 8002700:	6013      	str	r3, [r2, #0]

		if (osMutexWait(RemoteBufferMutexHandle, 0) == osOK)
 8002702:	4b40      	ldr	r3, [pc, #256]	; (8002804 <HAL_UART_RxCpltCallback+0x11c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2100      	movs	r1, #0
 8002708:	4618      	mov	r0, r3
 800270a:	f00c fc13 	bl	800ef34 <osMutexWait>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d11c      	bne.n	800274e <HAL_UART_RxCpltCallback+0x66>
		{
			//Log("U2CB-RBM-WE");
			for (int i = 0; i < REM_BUF_SIZE; i++)
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	e00c      	b.n	8002734 <HAL_UART_RxCpltCallback+0x4c>
				RemoteBuffer[i] = Uart2Buffer[i];
 800271a:	4a3b      	ldr	r2, [pc, #236]	; (8002808 <HAL_UART_RxCpltCallback+0x120>)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4413      	add	r3, r2
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	b2d9      	uxtb	r1, r3
 8002724:	4a39      	ldr	r2, [pc, #228]	; (800280c <HAL_UART_RxCpltCallback+0x124>)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4413      	add	r3, r2
 800272a:	460a      	mov	r2, r1
 800272c:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < REM_BUF_SIZE; i++)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3301      	adds	r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b3f      	cmp	r3, #63	; 0x3f
 8002738:	ddef      	ble.n	800271a <HAL_UART_RxCpltCallback+0x32>

			osMutexRelease(RemoteBufferMutexHandle);
 800273a:	4b32      	ldr	r3, [pc, #200]	; (8002804 <HAL_UART_RxCpltCallback+0x11c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f00c fc46 	bl	800efd0 <osMutexRelease>

			// Signal to TaskTemote
			osSemaphoreRelease(RemoteBufferFullSemaphoreHandle);
 8002744:	4b32      	ldr	r3, [pc, #200]	; (8002810 <HAL_UART_RxCpltCallback+0x128>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f00c fcf7 	bl	800f13c <osSemaphoreRelease>
//				sprintf(str, "UART Receive Error: [%d]\r\n", Uart2CallbackCounter);
//				HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
//			}
//		}

		HAL_UART_Receive_IT(&huart2, &Uart2Buffer, 64);
 800274e:	2240      	movs	r2, #64	; 0x40
 8002750:	492d      	ldr	r1, [pc, #180]	; (8002808 <HAL_UART_RxCpltCallback+0x120>)
 8002752:	482a      	ldr	r0, [pc, #168]	; (80027fc <HAL_UART_RxCpltCallback+0x114>)
 8002754:	f00a ff3d 	bl	800d5d2 <HAL_UART_Receive_IT>
			//HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}

		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
	}
}
 8002758:	e04b      	b.n	80027f2 <HAL_UART_RxCpltCallback+0x10a>
	else if (huart == &huart4)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a2d      	ldr	r2, [pc, #180]	; (8002814 <HAL_UART_RxCpltCallback+0x12c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d147      	bne.n	80027f2 <HAL_UART_RxCpltCallback+0x10a>
		if ((GPSPackageIndex == 0 && Uart4Buffer == '$')
 8002762:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <HAL_UART_RxCpltCallback+0x130>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d104      	bne.n	8002776 <HAL_UART_RxCpltCallback+0x8e>
 800276c:	4b2b      	ldr	r3, [pc, #172]	; (800281c <HAL_UART_RxCpltCallback+0x134>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b24      	cmp	r3, #36	; 0x24
 8002774:	d013      	beq.n	800279e <HAL_UART_RxCpltCallback+0xb6>
				|| (GPSPackageIndex == 1 && Uart4Buffer == 'G')
 8002776:	4b28      	ldr	r3, [pc, #160]	; (8002818 <HAL_UART_RxCpltCallback+0x130>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d104      	bne.n	800278a <HAL_UART_RxCpltCallback+0xa2>
 8002780:	4b26      	ldr	r3, [pc, #152]	; (800281c <HAL_UART_RxCpltCallback+0x134>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b47      	cmp	r3, #71	; 0x47
 8002788:	d009      	beq.n	800279e <HAL_UART_RxCpltCallback+0xb6>
				|| (1 < GPSPackageIndex && GPSPackageIndex < GPS_BUFFSIZE))
 800278a:	4b23      	ldr	r3, [pc, #140]	; (8002818 <HAL_UART_RxCpltCallback+0x130>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b01      	cmp	r3, #1
 8002792:	d926      	bls.n	80027e2 <HAL_UART_RxCpltCallback+0xfa>
 8002794:	4b20      	ldr	r3, [pc, #128]	; (8002818 <HAL_UART_RxCpltCallback+0x130>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2bff      	cmp	r3, #255	; 0xff
 800279c:	d021      	beq.n	80027e2 <HAL_UART_RxCpltCallback+0xfa>
			GPSPackageBuffer[GPSPackageIndex] = Uart4Buffer;
 800279e:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <HAL_UART_RxCpltCallback+0x130>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	4b1d      	ldr	r3, [pc, #116]	; (800281c <HAL_UART_RxCpltCallback+0x134>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	b2d9      	uxtb	r1, r3
 80027ac:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <HAL_UART_RxCpltCallback+0x138>)
 80027ae:	5499      	strb	r1, [r3, r2]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <HAL_UART_RxCpltCallback+0x130>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2bfd      	cmp	r3, #253	; 0xfd
 80027b8:	d807      	bhi.n	80027ca <HAL_UART_RxCpltCallback+0xe2>
				GPSPackageIndex++;
 80027ba:	4b17      	ldr	r3, [pc, #92]	; (8002818 <HAL_UART_RxCpltCallback+0x130>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	3301      	adds	r3, #1
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	4b14      	ldr	r3, [pc, #80]	; (8002818 <HAL_UART_RxCpltCallback+0x130>)
 80027c6:	701a      	strb	r2, [r3, #0]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 80027c8:	e00e      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x100>
				GPSPackageIndex = 0;
 80027ca:	4b13      	ldr	r3, [pc, #76]	; (8002818 <HAL_UART_RxCpltCallback+0x130>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
				ProcessGPSPackageBuffer = true;
 80027d0:	4b14      	ldr	r3, [pc, #80]	; (8002824 <HAL_UART_RxCpltCallback+0x13c>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
				osSemaphoreRelease(GpsBufferSemaphoreHandle);
 80027d6:	4b14      	ldr	r3, [pc, #80]	; (8002828 <HAL_UART_RxCpltCallback+0x140>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f00c fcae 	bl	800f13c <osSemaphoreRelease>
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 80027e0:	e002      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x100>
			GPSPackageIndex = 0;
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <HAL_UART_RxCpltCallback+0x130>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
 80027e8:	2201      	movs	r2, #1
 80027ea:	490c      	ldr	r1, [pc, #48]	; (800281c <HAL_UART_RxCpltCallback+0x134>)
 80027ec:	4809      	ldr	r0, [pc, #36]	; (8002814 <HAL_UART_RxCpltCallback+0x12c>)
 80027ee:	f00a ff34 	bl	800d65a <HAL_UART_Receive_DMA>
}
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000b4c 	.word	0x20000b4c
 8002800:	20000210 	.word	0x20000210
 8002804:	20000ce8 	.word	0x20000ce8
 8002808:	200003dc 	.word	0x200003dc
 800280c:	2000041c 	.word	0x2000041c
 8002810:	20000cf8 	.word	0x20000cf8
 8002814:	20000ac4 	.word	0x20000ac4
 8002818:	200004d9 	.word	0x200004d9
 800281c:	200004d8 	.word	0x200004d8
 8002820:	200004dc 	.word	0x200004dc
 8002824:	200005db 	.word	0x200005db
 8002828:	20000cf4 	.word	0x20000cf4

0800282c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a23      	ldr	r2, [pc, #140]	; (80028c4 <HAL_UART_ErrorCallback+0x98>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d11c      	bne.n	8002876 <HAL_UART_ErrorCallback+0x4a>
	{
		if (huart->ErrorCode != 0)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002842:	2b00      	cmp	r3, #0
 8002844:	d03a      	beq.n	80028bc <HAL_UART_ErrorCallback+0x90>
		{
			//Diag = false;

			char str[32];
			sprintf(str, "UART2 Error Callback: %d\r\n", huart->ErrorCode);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800284c:	f107 0308 	add.w	r3, r7, #8
 8002850:	491d      	ldr	r1, [pc, #116]	; (80028c8 <HAL_UART_ErrorCallback+0x9c>)
 8002852:	4618      	mov	r0, r3
 8002854:	f002 fa92 	bl	8004d7c <sprintf_>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8002858:	f107 0308 	add.w	r3, r7, #8
 800285c:	4618      	mov	r0, r3
 800285e:	f7fd fd2f 	bl	80002c0 <strlen>
 8002862:	4603      	mov	r3, r0
 8002864:	b29a      	uxth	r2, r3
 8002866:	f107 0108 	add.w	r1, r7, #8
 800286a:	f04f 33ff 	mov.w	r3, #4294967295
 800286e:	4817      	ldr	r0, [pc, #92]	; (80028cc <HAL_UART_ErrorCallback+0xa0>)
 8002870:	f00a fe2c 	bl	800d4cc <HAL_UART_Transmit>
			char str[32];
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}
	}
}
 8002874:	e022      	b.n	80028bc <HAL_UART_ErrorCallback+0x90>
	else if (huart == &huart4)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <HAL_UART_ErrorCallback+0xa4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d11e      	bne.n	80028bc <HAL_UART_ErrorCallback+0x90>
		if (huart->ErrorCode != 0)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002884:	2b00      	cmp	r3, #0
 8002886:	d019      	beq.n	80028bc <HAL_UART_ErrorCallback+0x90>
			Diag = false;
 8002888:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_UART_ErrorCallback+0xa8>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002894:	f107 0308 	add.w	r3, r7, #8
 8002898:	490f      	ldr	r1, [pc, #60]	; (80028d8 <HAL_UART_ErrorCallback+0xac>)
 800289a:	4618      	mov	r0, r3
 800289c:	f002 fa6e 	bl	8004d7c <sprintf_>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 80028a0:	f107 0308 	add.w	r3, r7, #8
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fd fd0b 	bl	80002c0 <strlen>
 80028aa:	4603      	mov	r3, r0
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	f107 0108 	add.w	r1, r7, #8
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295
 80028b6:	4805      	ldr	r0, [pc, #20]	; (80028cc <HAL_UART_ErrorCallback+0xa0>)
 80028b8:	f00a fe08 	bl	800d4cc <HAL_UART_Transmit>
}
 80028bc:	bf00      	nop
 80028be:	3728      	adds	r7, #40	; 0x28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20000b4c 	.word	0x20000b4c
 80028c8:	08017e60 	.word	0x08017e60
 80028cc:	20000bd4 	.word	0x20000bd4
 80028d0:	20000ac4 	.word	0x20000ac4
 80028d4:	2000020c 	.word	0x2000020c
 80028d8:	08017e7c 	.word	0x08017e7c

080028dc <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a0f      	ldr	r2, [pc, #60]	; (8002924 <HAL_SPI_RxCpltCallback+0x48>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d117      	bne.n	800291c <HAL_SPI_RxCpltCallback+0x40>
	{
		for (int i = 0; i < 64; i++)
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	e00c      	b.n	800290c <HAL_SPI_RxCpltCallback+0x30>
			SPI1Data[i] = Spi1Buffer[i];
 80028f2:	4a0d      	ldr	r2, [pc, #52]	; (8002928 <HAL_SPI_RxCpltCallback+0x4c>)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4413      	add	r3, r2
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	b2d9      	uxtb	r1, r3
 80028fc:	4a0b      	ldr	r2, [pc, #44]	; (800292c <HAL_SPI_RxCpltCallback+0x50>)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4413      	add	r3, r2
 8002902:	460a      	mov	r2, r1
 8002904:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 64; i++)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	3301      	adds	r3, #1
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2b3f      	cmp	r3, #63	; 0x3f
 8002910:	ddef      	ble.n	80028f2 <HAL_SPI_RxCpltCallback+0x16>

		HAL_SPI_Receive_IT(&hspi1, Spi1Buffer, 64);
 8002912:	2240      	movs	r2, #64	; 0x40
 8002914:	4904      	ldr	r1, [pc, #16]	; (8002928 <HAL_SPI_RxCpltCallback+0x4c>)
 8002916:	4803      	ldr	r0, [pc, #12]	; (8002924 <HAL_SPI_RxCpltCallback+0x48>)
 8002918:	f008 f95c 	bl	800abd4 <HAL_SPI_Receive_IT>
	}
}
 800291c:	bf00      	nop
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20000964 	.word	0x20000964
 8002928:	200005dc 	.word	0x200005dc
 800292c:	2000061c 	.word	0x2000061c

08002930 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a05      	ldr	r2, [pc, #20]	; (8002950 <HAL_TIM_IC_CaptureCallback+0x20>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d103      	bne.n	8002948 <HAL_TIM_IC_CaptureCallback+0x18>
	{
		HCSR04_TMR_IC_ISR(&HCSR04, htim);
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4804      	ldr	r0, [pc, #16]	; (8002954 <HAL_TIM_IC_CaptureCallback+0x24>)
 8002944:	f004 fd18 	bl	8007378 <HCSR04_TMR_IC_ISR>
	}
}
 8002948:	bf00      	nop
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20000a78 	.word	0x20000a78
 8002954:	200003a0 	.word	0x200003a0

08002958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002958:	b5b0      	push	{r4, r5, r7, lr}
 800295a:	b0be      	sub	sp, #248	; 0xf8
 800295c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800295e:	f004 fea4 	bl	80076aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002962:	f000 f9cd 	bl	8002d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002966:	f000 fcc9 	bl	80032fc <MX_GPIO_Init>
  MX_DMA_Init();
 800296a:	f000 fca9 	bl	80032c0 <MX_DMA_Init>
  MX_SPI1_Init();
 800296e:	f000 fa73 	bl	8002e58 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002972:	f000 faaf 	bl	8002ed4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002976:	f000 faeb 	bl	8002f50 <MX_TIM1_Init>
  MX_TIM3_Init();
 800297a:	f000 fbb9 	bl	80030f0 <MX_TIM3_Init>
  MX_UART4_Init();
 800297e:	f000 fc0b 	bl	8003198 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8002982:	f000 fc39 	bl	80031f8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002986:	f000 fa27 	bl	8002dd8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800298a:	f000 fc69 	bl	8003260 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Init IMU
  	if(MPU_Init(&hspi2, &MPU9250) == 0 && BMP280_initialize(&hspi2, &BMP280) == 0)
 800298e:	49be      	ldr	r1, [pc, #760]	; (8002c88 <main+0x330>)
 8002990:	48be      	ldr	r0, [pc, #760]	; (8002c8c <main+0x334>)
 8002992:	f004 f811 	bl	80069b8 <MPU_Init>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <main+0x5a>
 800299c:	49bc      	ldr	r1, [pc, #752]	; (8002c90 <main+0x338>)
 800299e:	48bb      	ldr	r0, [pc, #748]	; (8002c8c <main+0x334>)
 80029a0:	f003 f9bc 	bl	8005d1c <BMP280_initialize>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d103      	bne.n	80029b2 <main+0x5a>
  		IsImuAvailable = true;
 80029aa:	4bba      	ldr	r3, [pc, #744]	; (8002c94 <main+0x33c>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	701a      	strb	r2, [r3, #0]
 80029b0:	e002      	b.n	80029b8 <main+0x60>
  	else
  		IsImuAvailable = false;
 80029b2:	4bb8      	ldr	r3, [pc, #736]	; (8002c94 <main+0x33c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]

  	// Init Magnetometer
  	if (HMC5883L_Init() == 0)
 80029b8:	f003 f832 	bl	8005a20 <HMC5883L_Init>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d103      	bne.n	80029ca <main+0x72>
  		IsMagnAvailable = true;
 80029c2:	4bb5      	ldr	r3, [pc, #724]	; (8002c98 <main+0x340>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	701a      	strb	r2, [r3, #0]
 80029c8:	e002      	b.n	80029d0 <main+0x78>
  	else
  		IsMagnAvailable = false;
 80029ca:	4bb3      	ldr	r3, [pc, #716]	; (8002c98 <main+0x340>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]

  	// Init Distance sensor
  	if (HCSR04_Init(&HCSR04, &htim3) == 0)
 80029d0:	49b2      	ldr	r1, [pc, #712]	; (8002c9c <main+0x344>)
 80029d2:	48b3      	ldr	r0, [pc, #716]	; (8002ca0 <main+0x348>)
 80029d4:	f004 fc82 	bl	80072dc <HCSR04_Init>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d103      	bne.n	80029e6 <main+0x8e>
  		IsDistAvailable = true;
 80029de:	4bb1      	ldr	r3, [pc, #708]	; (8002ca4 <main+0x34c>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	701a      	strb	r2, [r3, #0]
 80029e4:	e002      	b.n	80029ec <main+0x94>
  	else
  		IsDistAvailable = false;
 80029e6:	4baf      	ldr	r3, [pc, #700]	; (8002ca4 <main+0x34c>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MagnMutex */
  osMutexDef(MagnMutex);
 80029ec:	2300      	movs	r3, #0
 80029ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  MagnMutexHandle = osMutexCreate(osMutex(MagnMutex));
 80029f8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f00c fa80 	bl	800ef02 <osMutexCreate>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4aa8      	ldr	r2, [pc, #672]	; (8002ca8 <main+0x350>)
 8002a06:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteDataMutex */
  osMutexDef(RemoteDataMutex);
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RemoteDataMutexHandle = osMutexCreate(osMutex(RemoteDataMutex));
 8002a14:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f00c fa72 	bl	800ef02 <osMutexCreate>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4aa2      	ldr	r2, [pc, #648]	; (8002cac <main+0x354>)
 8002a22:	6013      	str	r3, [r2, #0]

  /* definition and creation of ImuMutex */
  osMutexDef(ImuMutex);
 8002a24:	2300      	movs	r3, #0
 8002a26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  ImuMutexHandle = osMutexCreate(osMutex(ImuMutex));
 8002a30:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f00c fa64 	bl	800ef02 <osMutexCreate>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4a9c      	ldr	r2, [pc, #624]	; (8002cb0 <main+0x358>)
 8002a3e:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsDataMutex */
  osMutexDef(GpsDataMutex);
 8002a40:	2300      	movs	r3, #0
 8002a42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a46:	2300      	movs	r3, #0
 8002a48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GpsDataMutexHandle = osMutexCreate(osMutex(GpsDataMutex));
 8002a4c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002a50:	4618      	mov	r0, r3
 8002a52:	f00c fa56 	bl	800ef02 <osMutexCreate>
 8002a56:	4603      	mov	r3, r0
 8002a58:	4a96      	ldr	r2, [pc, #600]	; (8002cb4 <main+0x35c>)
 8002a5a:	6013      	str	r3, [r2, #0]

  /* definition and creation of DistMutex */
  osMutexDef(DistMutex);
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a62:	2300      	movs	r3, #0
 8002a64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  DistMutexHandle = osMutexCreate(osMutex(DistMutex));
 8002a68:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f00c fa48 	bl	800ef02 <osMutexCreate>
 8002a72:	4603      	mov	r3, r0
 8002a74:	4a90      	ldr	r2, [pc, #576]	; (8002cb8 <main+0x360>)
 8002a76:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferMutex */
  osMutexDef(RemoteBufferMutex);
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RemoteBufferMutexHandle = osMutexCreate(osMutex(RemoteBufferMutex));
 8002a84:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f00c fa3a 	bl	800ef02 <osMutexCreate>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4a8a      	ldr	r2, [pc, #552]	; (8002cbc <main+0x364>)
 8002a92:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControllerMutex */
  osMutexDef(ControllerMutex);
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  ControllerMutexHandle = osMutexCreate(osMutex(ControllerMutex));
 8002aa0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f00c fa2c 	bl	800ef02 <osMutexCreate>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4a84      	ldr	r2, [pc, #528]	; (8002cc0 <main+0x368>)
 8002aae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */

	osMutexRelease(MagnMutexHandle);
 8002ab0:	4b7d      	ldr	r3, [pc, #500]	; (8002ca8 <main+0x350>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f00c fa8b 	bl	800efd0 <osMutexRelease>
	osMutexRelease(RemoteDataMutexHandle);
 8002aba:	4b7c      	ldr	r3, [pc, #496]	; (8002cac <main+0x354>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f00c fa86 	bl	800efd0 <osMutexRelease>
	osMutexRelease(ImuMutexHandle);
 8002ac4:	4b7a      	ldr	r3, [pc, #488]	; (8002cb0 <main+0x358>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f00c fa81 	bl	800efd0 <osMutexRelease>
	osMutexRelease(GpsDataMutexHandle);
 8002ace:	4b79      	ldr	r3, [pc, #484]	; (8002cb4 <main+0x35c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f00c fa7c 	bl	800efd0 <osMutexRelease>
	osMutexRelease(RemoteBufferMutexHandle);
 8002ad8:	4b78      	ldr	r3, [pc, #480]	; (8002cbc <main+0x364>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f00c fa77 	bl	800efd0 <osMutexRelease>
	osMutexRelease(ControllerMutexHandle);
 8002ae2:	4b77      	ldr	r3, [pc, #476]	; (8002cc0 <main+0x368>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f00c fa72 	bl	800efd0 <osMutexRelease>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of DistSemaphore */
  osSemaphoreDef(DistSemaphore);
 8002aec:	2300      	movs	r3, #0
 8002aee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002af2:	2300      	movs	r3, #0
 8002af4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  DistSemaphoreHandle = osSemaphoreCreate(osSemaphore(DistSemaphore), 1);
 8002af8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002afc:	2101      	movs	r1, #1
 8002afe:	4618      	mov	r0, r3
 8002b00:	f00c fa9c 	bl	800f03c <osSemaphoreCreate>
 8002b04:	4603      	mov	r3, r0
 8002b06:	4a6f      	ldr	r2, [pc, #444]	; (8002cc4 <main+0x36c>)
 8002b08:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsBufferSemaphore */
  osSemaphoreDef(GpsBufferSemaphore);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b10:	2300      	movs	r3, #0
 8002b12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  GpsBufferSemaphoreHandle = osSemaphoreCreate(osSemaphore(GpsBufferSemaphore), 1);
 8002b16:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f00c fa8d 	bl	800f03c <osSemaphoreCreate>
 8002b22:	4603      	mov	r3, r0
 8002b24:	4a68      	ldr	r2, [pc, #416]	; (8002cc8 <main+0x370>)
 8002b26:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferFullSemaphore */
  osSemaphoreDef(RemoteBufferFullSemaphore);
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RemoteBufferFullSemaphoreHandle = osSemaphoreCreate(osSemaphore(RemoteBufferFullSemaphore), 1);
 8002b34:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002b38:	2101      	movs	r1, #1
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f00c fa7e 	bl	800f03c <osSemaphoreCreate>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4a62      	ldr	r2, [pc, #392]	; (8002ccc <main+0x374>)
 8002b44:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  if (osSemaphoreGetCount(DistSemaphoreHandle) == 1)
 8002b46:	4b5f      	ldr	r3, [pc, #380]	; (8002cc4 <main+0x36c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f00c fb2c 	bl	800f1a8 <osSemaphoreGetCount>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d106      	bne.n	8002b64 <main+0x20c>
  	  osSemaphoreWait(DistSemaphoreHandle, osWaitForever);
 8002b56:	4b5b      	ldr	r3, [pc, #364]	; (8002cc4 <main+0x36c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f04f 31ff 	mov.w	r1, #4294967295
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f00c fa9e 	bl	800f0a0 <osSemaphoreWait>
  if (osSemaphoreGetCount(GpsBufferSemaphoreHandle) == 1)
 8002b64:	4b58      	ldr	r3, [pc, #352]	; (8002cc8 <main+0x370>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f00c fb1d 	bl	800f1a8 <osSemaphoreGetCount>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d106      	bne.n	8002b82 <main+0x22a>
  	  osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever);
 8002b74:	4b54      	ldr	r3, [pc, #336]	; (8002cc8 <main+0x370>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f04f 31ff 	mov.w	r1, #4294967295
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f00c fa8f 	bl	800f0a0 <osSemaphoreWait>

  if (osSemaphoreGetCount(RemoteBufferFullSemaphoreHandle) == 1)
 8002b82:	4b52      	ldr	r3, [pc, #328]	; (8002ccc <main+0x374>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f00c fb0e 	bl	800f1a8 <osSemaphoreGetCount>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d106      	bne.n	8002ba0 <main+0x248>
  	  osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever);
 8002b92:	4b4e      	ldr	r3, [pc, #312]	; (8002ccc <main+0x374>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f04f 31ff 	mov.w	r1, #4294967295
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f00c fa80 	bl	800f0a0 <osSemaphoreWait>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskSensorData */
  osThreadDef(TaskSensorData, RunTaskSensorData, osPriorityHigh, 0, 512);
 8002ba0:	4b4b      	ldr	r3, [pc, #300]	; (8002cd0 <main+0x378>)
 8002ba2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8002ba6:	461d      	mov	r5, r3
 8002ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002bb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSensorDataHandle = osThreadCreate(osThread(TaskSensorData), NULL);
 8002bb4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f00c f941 	bl	800ee42 <osThreadCreate>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	4a44      	ldr	r2, [pc, #272]	; (8002cd4 <main+0x37c>)
 8002bc4:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskController */
  osThreadDef(TaskController, RunTaskController, osPriorityAboveNormal, 0, 128);
 8002bc6:	4b44      	ldr	r3, [pc, #272]	; (8002cd8 <main+0x380>)
 8002bc8:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8002bcc:	461d      	mov	r5, r3
 8002bce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002bd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskControllerHandle = osThreadCreate(osThread(TaskController), NULL);
 8002bda:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f00c f92e 	bl	800ee42 <osThreadCreate>
 8002be6:	4603      	mov	r3, r0
 8002be8:	4a3c      	ldr	r2, [pc, #240]	; (8002cdc <main+0x384>)
 8002bea:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskRemote */
  osThreadDef(TaskRemote, RunTaskRemote, osPriorityRealtime, 0, 512);
 8002bec:	4b3c      	ldr	r3, [pc, #240]	; (8002ce0 <main+0x388>)
 8002bee:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8002bf2:	461d      	mov	r5, r3
 8002bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002bfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskRemoteHandle = osThreadCreate(osThread(TaskRemote), NULL);
 8002c00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c04:	2100      	movs	r1, #0
 8002c06:	4618      	mov	r0, r3
 8002c08:	f00c f91b 	bl	800ee42 <osThreadCreate>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	4a35      	ldr	r2, [pc, #212]	; (8002ce4 <main+0x38c>)
 8002c10:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskMotor */
  osThreadDef(TaskMotor, RunTaskMotor, osPriorityNormal, 0, 128);
 8002c12:	4b35      	ldr	r3, [pc, #212]	; (8002ce8 <main+0x390>)
 8002c14:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002c18:	461d      	mov	r5, r3
 8002c1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskMotorHandle = osThreadCreate(osThread(TaskMotor), NULL);
 8002c26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f00c f908 	bl	800ee42 <osThreadCreate>
 8002c32:	4603      	mov	r3, r0
 8002c34:	4a2d      	ldr	r2, [pc, #180]	; (8002cec <main+0x394>)
 8002c36:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskPower */
  osThreadDef(TaskPower, RunTaskPower, osPriorityBelowNormal, 0, 128);
 8002c38:	4b2d      	ldr	r3, [pc, #180]	; (8002cf0 <main+0x398>)
 8002c3a:	f107 041c 	add.w	r4, r7, #28
 8002c3e:	461d      	mov	r5, r3
 8002c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskPowerHandle = osThreadCreate(osThread(TaskPower), NULL);
 8002c4c:	f107 031c 	add.w	r3, r7, #28
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f00c f8f5 	bl	800ee42 <osThreadCreate>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	4a26      	ldr	r2, [pc, #152]	; (8002cf4 <main+0x39c>)
 8002c5c:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskDiagnostics */
  osThreadDef(TaskDiagnostics, RunTaskDiagnostics, osPriorityLow, 0, 512);
 8002c5e:	4b26      	ldr	r3, [pc, #152]	; (8002cf8 <main+0x3a0>)
 8002c60:	463c      	mov	r4, r7
 8002c62:	461d      	mov	r5, r3
 8002c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDiagnosticsHandle = osThreadCreate(osThread(TaskDiagnostics), NULL);
 8002c70:	463b      	mov	r3, r7
 8002c72:	2100      	movs	r1, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f00c f8e4 	bl	800ee42 <osThreadCreate>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4a1f      	ldr	r2, [pc, #124]	; (8002cfc <main+0x3a4>)
 8002c7e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002c80:	f00c f8d8 	bl	800ee34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8002c84:	e7fe      	b.n	8002c84 <main+0x32c>
 8002c86:	bf00      	nop
 8002c88:	200002a0 	.word	0x200002a0
 8002c8c:	200009c8 	.word	0x200009c8
 8002c90:	2000033c 	.word	0x2000033c
 8002c94:	20000214 	.word	0x20000214
 8002c98:	20000215 	.word	0x20000215
 8002c9c:	20000a78 	.word	0x20000a78
 8002ca0:	200003a0 	.word	0x200003a0
 8002ca4:	20000216 	.word	0x20000216
 8002ca8:	20000cd4 	.word	0x20000cd4
 8002cac:	20000cd8 	.word	0x20000cd8
 8002cb0:	20000cdc 	.word	0x20000cdc
 8002cb4:	20000ce0 	.word	0x20000ce0
 8002cb8:	20000ce4 	.word	0x20000ce4
 8002cbc:	20000ce8 	.word	0x20000ce8
 8002cc0:	20000cec 	.word	0x20000cec
 8002cc4:	20000cf0 	.word	0x20000cf0
 8002cc8:	20000cf4 	.word	0x20000cf4
 8002ccc:	20000cf8 	.word	0x20000cf8
 8002cd0:	08017ea8 	.word	0x08017ea8
 8002cd4:	20000cbc 	.word	0x20000cbc
 8002cd8:	08017ed4 	.word	0x08017ed4
 8002cdc:	20000cc0 	.word	0x20000cc0
 8002ce0:	08017efc 	.word	0x08017efc
 8002ce4:	20000cc4 	.word	0x20000cc4
 8002ce8:	08017f24 	.word	0x08017f24
 8002cec:	20000cc8 	.word	0x20000cc8
 8002cf0:	08017f4c 	.word	0x08017f4c
 8002cf4:	20000ccc 	.word	0x20000ccc
 8002cf8:	08017f78 	.word	0x08017f78
 8002cfc:	20000cd0 	.word	0x20000cd0

08002d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b094      	sub	sp, #80	; 0x50
 8002d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d06:	f107 0320 	add.w	r3, r7, #32
 8002d0a:	2230      	movs	r2, #48	; 0x30
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f00f fded 	bl	80128ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d14:	f107 030c 	add.w	r3, r7, #12
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	60da      	str	r2, [r3, #12]
 8002d22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d24:	4b2a      	ldr	r3, [pc, #168]	; (8002dd0 <SystemClock_Config+0xd0>)
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	4a29      	ldr	r2, [pc, #164]	; (8002dd0 <SystemClock_Config+0xd0>)
 8002d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d30:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <SystemClock_Config+0xd0>)
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d3c:	4b25      	ldr	r3, [pc, #148]	; (8002dd4 <SystemClock_Config+0xd4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a24      	ldr	r2, [pc, #144]	; (8002dd4 <SystemClock_Config+0xd4>)
 8002d42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b22      	ldr	r3, [pc, #136]	; (8002dd4 <SystemClock_Config+0xd4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d54:	2302      	movs	r3, #2
 8002d56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d5c:	2310      	movs	r3, #16
 8002d5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d60:	2302      	movs	r3, #2
 8002d62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d64:	2300      	movs	r3, #0
 8002d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d68:	2308      	movs	r3, #8
 8002d6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002d6c:	23d8      	movs	r3, #216	; 0xd8
 8002d6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d70:	2302      	movs	r3, #2
 8002d72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002d74:	2302      	movs	r3, #2
 8002d76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d78:	f107 0320 	add.w	r3, r7, #32
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f006 f9c7 	bl	8009110 <HAL_RCC_OscConfig>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002d88:	f000 fba1 	bl	80034ce <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002d8c:	f006 f970 	bl	8009070 <HAL_PWREx_EnableOverDrive>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002d96:	f000 fb9a 	bl	80034ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d9a:	230f      	movs	r3, #15
 8002d9c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002da6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002daa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002db0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002db2:	f107 030c 	add.w	r3, r7, #12
 8002db6:	2107      	movs	r1, #7
 8002db8:	4618      	mov	r0, r3
 8002dba:	f006 fc4d 	bl	8009658 <HAL_RCC_ClockConfig>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002dc4:	f000 fb83 	bl	80034ce <Error_Handler>
  }
}
 8002dc8:	bf00      	nop
 8002dca:	3750      	adds	r7, #80	; 0x50
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40007000 	.word	0x40007000

08002dd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	; (8002e4c <MX_I2C1_Init+0x74>)
 8002dde:	4a1c      	ldr	r2, [pc, #112]	; (8002e50 <MX_I2C1_Init+0x78>)
 8002de0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xA0404E72;
 8002de2:	4b1a      	ldr	r3, [pc, #104]	; (8002e4c <MX_I2C1_Init+0x74>)
 8002de4:	4a1b      	ldr	r2, [pc, #108]	; (8002e54 <MX_I2C1_Init+0x7c>)
 8002de6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002de8:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <MX_I2C1_Init+0x74>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dee:	4b17      	ldr	r3, [pc, #92]	; (8002e4c <MX_I2C1_Init+0x74>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002df4:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <MX_I2C1_Init+0x74>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002dfa:	4b14      	ldr	r3, [pc, #80]	; (8002e4c <MX_I2C1_Init+0x74>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e00:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <MX_I2C1_Init+0x74>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e06:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <MX_I2C1_Init+0x74>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <MX_I2C1_Init+0x74>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e12:	480e      	ldr	r0, [pc, #56]	; (8002e4c <MX_I2C1_Init+0x74>)
 8002e14:	f005 fb3c 	bl	8008490 <HAL_I2C_Init>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002e1e:	f000 fb56 	bl	80034ce <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e22:	2100      	movs	r1, #0
 8002e24:	4809      	ldr	r0, [pc, #36]	; (8002e4c <MX_I2C1_Init+0x74>)
 8002e26:	f006 f88b 	bl	8008f40 <HAL_I2CEx_ConfigAnalogFilter>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002e30:	f000 fb4d 	bl	80034ce <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002e34:	2100      	movs	r1, #0
 8002e36:	4805      	ldr	r0, [pc, #20]	; (8002e4c <MX_I2C1_Init+0x74>)
 8002e38:	f006 f8cd 	bl	8008fd6 <HAL_I2CEx_ConfigDigitalFilter>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002e42:	f000 fb44 	bl	80034ce <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000910 	.word	0x20000910
 8002e50:	40005400 	.word	0x40005400
 8002e54:	a0404e72 	.word	0xa0404e72

08002e58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002e5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <MX_SPI1_Init+0x74>)
 8002e5e:	4a1c      	ldr	r2, [pc, #112]	; (8002ed0 <MX_SPI1_Init+0x78>)
 8002e60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e62:	4b1a      	ldr	r3, [pc, #104]	; (8002ecc <MX_SPI1_Init+0x74>)
 8002e64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e6a:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <MX_SPI1_Init+0x74>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e70:	4b16      	ldr	r3, [pc, #88]	; (8002ecc <MX_SPI1_Init+0x74>)
 8002e72:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e76:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002e78:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <MX_SPI1_Init+0x74>)
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002e7e:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <MX_SPI1_Init+0x74>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002e84:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <MX_SPI1_Init+0x74>)
 8002e86:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002e8a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002e8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <MX_SPI1_Init+0x74>)
 8002e8e:	2220      	movs	r2, #32
 8002e90:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e92:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <MX_SPI1_Init+0x74>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <MX_SPI1_Init+0x74>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <MX_SPI1_Init+0x74>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002ea4:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <MX_SPI1_Init+0x74>)
 8002ea6:	2207      	movs	r2, #7
 8002ea8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002eaa:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <MX_SPI1_Init+0x74>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <MX_SPI1_Init+0x74>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002eb6:	4805      	ldr	r0, [pc, #20]	; (8002ecc <MX_SPI1_Init+0x74>)
 8002eb8:	f007 f930 	bl	800a11c <HAL_SPI_Init>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002ec2:	f000 fb04 	bl	80034ce <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000964 	.word	0x20000964
 8002ed0:	40013000 	.word	0x40013000

08002ed4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002ed8:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <MX_SPI2_Init+0x74>)
 8002eda:	4a1c      	ldr	r2, [pc, #112]	; (8002f4c <MX_SPI2_Init+0x78>)
 8002edc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ede:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <MX_SPI2_Init+0x74>)
 8002ee0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ee4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ee6:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <MX_SPI2_Init+0x74>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002eec:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <MX_SPI2_Init+0x74>)
 8002eee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ef2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002ef4:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <MX_SPI2_Init+0x74>)
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <MX_SPI2_Init+0x74>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <MX_SPI2_Init+0x74>)
 8002f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f06:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002f08:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <MX_SPI2_Init+0x74>)
 8002f0a:	2228      	movs	r2, #40	; 0x28
 8002f0c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f0e:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <MX_SPI2_Init+0x74>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <MX_SPI2_Init+0x74>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <MX_SPI2_Init+0x74>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <MX_SPI2_Init+0x74>)
 8002f22:	2207      	movs	r2, #7
 8002f24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <MX_SPI2_Init+0x74>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <MX_SPI2_Init+0x74>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f32:	4805      	ldr	r0, [pc, #20]	; (8002f48 <MX_SPI2_Init+0x74>)
 8002f34:	f007 f8f2 	bl	800a11c <HAL_SPI_Init>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002f3e:	f000 fac6 	bl	80034ce <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	200009c8 	.word	0x200009c8
 8002f4c:	40003800 	.word	0x40003800

08002f50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b09a      	sub	sp, #104	; 0x68
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	611a      	str	r2, [r3, #16]
 8002f80:	615a      	str	r2, [r3, #20]
 8002f82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f84:	1d3b      	adds	r3, r7, #4
 8002f86:	222c      	movs	r2, #44	; 0x2c
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f00f fcaf 	bl	80128ee <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f90:	4b55      	ldr	r3, [pc, #340]	; (80030e8 <MX_TIM1_Init+0x198>)
 8002f92:	4a56      	ldr	r2, [pc, #344]	; (80030ec <MX_TIM1_Init+0x19c>)
 8002f94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 8002f96:	4b54      	ldr	r3, [pc, #336]	; (80030e8 <MX_TIM1_Init+0x198>)
 8002f98:	22d7      	movs	r2, #215	; 0xd7
 8002f9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f9c:	4b52      	ldr	r3, [pc, #328]	; (80030e8 <MX_TIM1_Init+0x198>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8002fa2:	4b51      	ldr	r3, [pc, #324]	; (80030e8 <MX_TIM1_Init+0x198>)
 8002fa4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002fa8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002faa:	4b4f      	ldr	r3, [pc, #316]	; (80030e8 <MX_TIM1_Init+0x198>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fb0:	4b4d      	ldr	r3, [pc, #308]	; (80030e8 <MX_TIM1_Init+0x198>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fb6:	4b4c      	ldr	r3, [pc, #304]	; (80030e8 <MX_TIM1_Init+0x198>)
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002fbc:	484a      	ldr	r0, [pc, #296]	; (80030e8 <MX_TIM1_Init+0x198>)
 8002fbe:	f008 fc55 	bl	800b86c <HAL_TIM_Base_Init>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002fc8:	f000 fa81 	bl	80034ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fd0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002fd2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4843      	ldr	r0, [pc, #268]	; (80030e8 <MX_TIM1_Init+0x198>)
 8002fda:	f009 faeb 	bl	800c5b4 <HAL_TIM_ConfigClockSource>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002fe4:	f000 fa73 	bl	80034ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002fe8:	483f      	ldr	r0, [pc, #252]	; (80030e8 <MX_TIM1_Init+0x198>)
 8002fea:	f008 fd0f 	bl	800ba0c <HAL_TIM_PWM_Init>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002ff4:	f000 fa6b 	bl	80034ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003000:	2300      	movs	r3, #0
 8003002:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003004:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003008:	4619      	mov	r1, r3
 800300a:	4837      	ldr	r0, [pc, #220]	; (80030e8 <MX_TIM1_Init+0x198>)
 800300c:	f00a f8e6 	bl	800d1dc <HAL_TIMEx_MasterConfigSynchronization>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003016:	f000 fa5a 	bl	80034ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800301a:	2360      	movs	r3, #96	; 0x60
 800301c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003022:	2300      	movs	r3, #0
 8003024:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003026:	2300      	movs	r3, #0
 8003028:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800302a:	2304      	movs	r3, #4
 800302c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800302e:	2300      	movs	r3, #0
 8003030:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003032:	2300      	movs	r3, #0
 8003034:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003036:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800303a:	2200      	movs	r2, #0
 800303c:	4619      	mov	r1, r3
 800303e:	482a      	ldr	r0, [pc, #168]	; (80030e8 <MX_TIM1_Init+0x198>)
 8003040:	f009 f9a4 	bl	800c38c <HAL_TIM_PWM_ConfigChannel>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800304a:	f000 fa40 	bl	80034ce <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800304e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003052:	2204      	movs	r2, #4
 8003054:	4619      	mov	r1, r3
 8003056:	4824      	ldr	r0, [pc, #144]	; (80030e8 <MX_TIM1_Init+0x198>)
 8003058:	f009 f998 	bl	800c38c <HAL_TIM_PWM_ConfigChannel>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8003062:	f000 fa34 	bl	80034ce <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003066:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800306a:	2208      	movs	r2, #8
 800306c:	4619      	mov	r1, r3
 800306e:	481e      	ldr	r0, [pc, #120]	; (80030e8 <MX_TIM1_Init+0x198>)
 8003070:	f009 f98c 	bl	800c38c <HAL_TIM_PWM_ConfigChannel>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800307a:	f000 fa28 	bl	80034ce <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800307e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003082:	220c      	movs	r2, #12
 8003084:	4619      	mov	r1, r3
 8003086:	4818      	ldr	r0, [pc, #96]	; (80030e8 <MX_TIM1_Init+0x198>)
 8003088:	f009 f980 	bl	800c38c <HAL_TIM_PWM_ConfigChannel>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8003092:	f000 fa1c 	bl	80034ce <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003096:	2300      	movs	r3, #0
 8003098:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800309a:	2300      	movs	r3, #0
 800309c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80030b4:	2300      	movs	r3, #0
 80030b6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80030b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80030be:	2300      	movs	r3, #0
 80030c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80030c2:	2300      	movs	r3, #0
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80030c6:	1d3b      	adds	r3, r7, #4
 80030c8:	4619      	mov	r1, r3
 80030ca:	4807      	ldr	r0, [pc, #28]	; (80030e8 <MX_TIM1_Init+0x198>)
 80030cc:	f00a f914 	bl	800d2f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 80030d6:	f000 f9fa 	bl	80034ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80030da:	4803      	ldr	r0, [pc, #12]	; (80030e8 <MX_TIM1_Init+0x198>)
 80030dc:	f001 ffdc 	bl	8005098 <HAL_TIM_MspPostInit>

}
 80030e0:	bf00      	nop
 80030e2:	3768      	adds	r7, #104	; 0x68
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20000a2c 	.word	0x20000a2c
 80030ec:	40010000 	.word	0x40010000

080030f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030f6:	f107 0314 	add.w	r3, r7, #20
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003102:	1d3b      	adds	r3, r7, #4
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800310e:	4b20      	ldr	r3, [pc, #128]	; (8003190 <MX_TIM3_Init+0xa0>)
 8003110:	4a20      	ldr	r2, [pc, #128]	; (8003194 <MX_TIM3_Init+0xa4>)
 8003112:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 8003114:	4b1e      	ldr	r3, [pc, #120]	; (8003190 <MX_TIM3_Init+0xa0>)
 8003116:	226b      	movs	r2, #107	; 0x6b
 8003118:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800311a:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <MX_TIM3_Init+0xa0>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8003120:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <MX_TIM3_Init+0xa0>)
 8003122:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003126:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003128:	4b19      	ldr	r3, [pc, #100]	; (8003190 <MX_TIM3_Init+0xa0>)
 800312a:	2200      	movs	r2, #0
 800312c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800312e:	4b18      	ldr	r3, [pc, #96]	; (8003190 <MX_TIM3_Init+0xa0>)
 8003130:	2280      	movs	r2, #128	; 0x80
 8003132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003134:	4816      	ldr	r0, [pc, #88]	; (8003190 <MX_TIM3_Init+0xa0>)
 8003136:	f008 fdc5 	bl	800bcc4 <HAL_TIM_IC_Init>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003140:	f000 f9c5 	bl	80034ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800314c:	f107 0314 	add.w	r3, r7, #20
 8003150:	4619      	mov	r1, r3
 8003152:	480f      	ldr	r0, [pc, #60]	; (8003190 <MX_TIM3_Init+0xa0>)
 8003154:	f00a f842 	bl	800d1dc <HAL_TIMEx_MasterConfigSynchronization>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800315e:	f000 f9b6 	bl	80034ce <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003162:	2300      	movs	r3, #0
 8003164:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003166:	2301      	movs	r3, #1
 8003168:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003172:	1d3b      	adds	r3, r7, #4
 8003174:	2200      	movs	r2, #0
 8003176:	4619      	mov	r1, r3
 8003178:	4805      	ldr	r0, [pc, #20]	; (8003190 <MX_TIM3_Init+0xa0>)
 800317a:	f009 f86a 	bl	800c252 <HAL_TIM_IC_ConfigChannel>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003184:	f000 f9a3 	bl	80034ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003188:	bf00      	nop
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20000a78 	.word	0x20000a78
 8003194:	40000400 	.word	0x40000400

08003198 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800319c:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <MX_UART4_Init+0x58>)
 800319e:	4a15      	ldr	r2, [pc, #84]	; (80031f4 <MX_UART4_Init+0x5c>)
 80031a0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80031a2:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <MX_UART4_Init+0x58>)
 80031a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80031a8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80031aa:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <MX_UART4_Init+0x58>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <MX_UART4_Init+0x58>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80031b6:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <MX_UART4_Init+0x58>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80031bc:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <MX_UART4_Init+0x58>)
 80031be:	220c      	movs	r2, #12
 80031c0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031c2:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <MX_UART4_Init+0x58>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80031c8:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <MX_UART4_Init+0x58>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031ce:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <MX_UART4_Init+0x58>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <MX_UART4_Init+0x58>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80031da:	4805      	ldr	r0, [pc, #20]	; (80031f0 <MX_UART4_Init+0x58>)
 80031dc:	f00a f928 	bl	800d430 <HAL_UART_Init>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80031e6:	f000 f972 	bl	80034ce <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000ac4 	.word	0x20000ac4
 80031f4:	40004c00 	.word	0x40004c00

080031f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031fc:	4b16      	ldr	r3, [pc, #88]	; (8003258 <MX_USART2_UART_Init+0x60>)
 80031fe:	4a17      	ldr	r2, [pc, #92]	; (800325c <MX_USART2_UART_Init+0x64>)
 8003200:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003202:	4b15      	ldr	r3, [pc, #84]	; (8003258 <MX_USART2_UART_Init+0x60>)
 8003204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003208:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800320a:	4b13      	ldr	r3, [pc, #76]	; (8003258 <MX_USART2_UART_Init+0x60>)
 800320c:	2200      	movs	r2, #0
 800320e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003210:	4b11      	ldr	r3, [pc, #68]	; (8003258 <MX_USART2_UART_Init+0x60>)
 8003212:	2200      	movs	r2, #0
 8003214:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <MX_USART2_UART_Init+0x60>)
 8003218:	2200      	movs	r2, #0
 800321a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 800321c:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <MX_USART2_UART_Init+0x60>)
 800321e:	2204      	movs	r2, #4
 8003220:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003222:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <MX_USART2_UART_Init+0x60>)
 8003224:	2200      	movs	r2, #0
 8003226:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <MX_USART2_UART_Init+0x60>)
 800322a:	2200      	movs	r2, #0
 800322c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800322e:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <MX_USART2_UART_Init+0x60>)
 8003230:	2200      	movs	r2, #0
 8003232:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003234:	4b08      	ldr	r3, [pc, #32]	; (8003258 <MX_USART2_UART_Init+0x60>)
 8003236:	2210      	movs	r2, #16
 8003238:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800323a:	4b07      	ldr	r3, [pc, #28]	; (8003258 <MX_USART2_UART_Init+0x60>)
 800323c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003240:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003242:	4805      	ldr	r0, [pc, #20]	; (8003258 <MX_USART2_UART_Init+0x60>)
 8003244:	f00a f8f4 	bl	800d430 <HAL_UART_Init>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800324e:	f000 f93e 	bl	80034ce <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000b4c 	.word	0x20000b4c
 800325c:	40004400 	.word	0x40004400

08003260 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003264:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <MX_USART3_UART_Init+0x58>)
 8003266:	4a15      	ldr	r2, [pc, #84]	; (80032bc <MX_USART3_UART_Init+0x5c>)
 8003268:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <MX_USART3_UART_Init+0x58>)
 800326c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8003270:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003272:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <MX_USART3_UART_Init+0x58>)
 8003274:	2200      	movs	r2, #0
 8003276:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003278:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <MX_USART3_UART_Init+0x58>)
 800327a:	2200      	movs	r2, #0
 800327c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800327e:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <MX_USART3_UART_Init+0x58>)
 8003280:	2200      	movs	r2, #0
 8003282:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <MX_USART3_UART_Init+0x58>)
 8003286:	2208      	movs	r2, #8
 8003288:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800328a:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <MX_USART3_UART_Init+0x58>)
 800328c:	2200      	movs	r2, #0
 800328e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003290:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <MX_USART3_UART_Init+0x58>)
 8003292:	2200      	movs	r2, #0
 8003294:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003296:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <MX_USART3_UART_Init+0x58>)
 8003298:	2200      	movs	r2, #0
 800329a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <MX_USART3_UART_Init+0x58>)
 800329e:	2200      	movs	r2, #0
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80032a2:	4805      	ldr	r0, [pc, #20]	; (80032b8 <MX_USART3_UART_Init+0x58>)
 80032a4:	f00a f8c4 	bl	800d430 <HAL_UART_Init>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80032ae:	f000 f90e 	bl	80034ce <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000bd4 	.word	0x20000bd4
 80032bc:	40004800 	.word	0x40004800

080032c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <MX_DMA_Init+0x38>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	4a0b      	ldr	r2, [pc, #44]	; (80032f8 <MX_DMA_Init+0x38>)
 80032cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032d0:	6313      	str	r3, [r2, #48]	; 0x30
 80032d2:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <MX_DMA_Init+0x38>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032da:	607b      	str	r3, [r7, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 8, 0);
 80032de:	2200      	movs	r2, #0
 80032e0:	2108      	movs	r1, #8
 80032e2:	2010      	movs	r0, #16
 80032e4:	f004 faea 	bl	80078bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80032e8:	2010      	movs	r0, #16
 80032ea:	f004 fb03 	bl	80078f4 <HAL_NVIC_EnableIRQ>

}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800

080032fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	; 0x28
 8003300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003302:	f107 0314 	add.w	r3, r7, #20
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	609a      	str	r2, [r3, #8]
 800330e:	60da      	str	r2, [r3, #12]
 8003310:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003312:	4b41      	ldr	r3, [pc, #260]	; (8003418 <MX_GPIO_Init+0x11c>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	4a40      	ldr	r2, [pc, #256]	; (8003418 <MX_GPIO_Init+0x11c>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	6313      	str	r3, [r2, #48]	; 0x30
 800331e:	4b3e      	ldr	r3, [pc, #248]	; (8003418 <MX_GPIO_Init+0x11c>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800332a:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <MX_GPIO_Init+0x11c>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	4a3a      	ldr	r2, [pc, #232]	; (8003418 <MX_GPIO_Init+0x11c>)
 8003330:	f043 0310 	orr.w	r3, r3, #16
 8003334:	6313      	str	r3, [r2, #48]	; 0x30
 8003336:	4b38      	ldr	r3, [pc, #224]	; (8003418 <MX_GPIO_Init+0x11c>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003342:	4b35      	ldr	r3, [pc, #212]	; (8003418 <MX_GPIO_Init+0x11c>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	4a34      	ldr	r2, [pc, #208]	; (8003418 <MX_GPIO_Init+0x11c>)
 8003348:	f043 0302 	orr.w	r3, r3, #2
 800334c:	6313      	str	r3, [r2, #48]	; 0x30
 800334e:	4b32      	ldr	r3, [pc, #200]	; (8003418 <MX_GPIO_Init+0x11c>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	60bb      	str	r3, [r7, #8]
 8003358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800335a:	4b2f      	ldr	r3, [pc, #188]	; (8003418 <MX_GPIO_Init+0x11c>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	4a2e      	ldr	r2, [pc, #184]	; (8003418 <MX_GPIO_Init+0x11c>)
 8003360:	f043 0308 	orr.w	r3, r3, #8
 8003364:	6313      	str	r3, [r2, #48]	; 0x30
 8003366:	4b2c      	ldr	r3, [pc, #176]	; (8003418 <MX_GPIO_Init+0x11c>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003372:	4b29      	ldr	r3, [pc, #164]	; (8003418 <MX_GPIO_Init+0x11c>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	4a28      	ldr	r2, [pc, #160]	; (8003418 <MX_GPIO_Init+0x11c>)
 8003378:	f043 0304 	orr.w	r3, r3, #4
 800337c:	6313      	str	r3, [r2, #48]	; 0x30
 800337e:	4b26      	ldr	r3, [pc, #152]	; (8003418 <MX_GPIO_Init+0x11c>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 800338a:	2200      	movs	r2, #0
 800338c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003390:	4822      	ldr	r0, [pc, #136]	; (800341c <MX_GPIO_Init+0x120>)
 8003392:	f005 f863 	bl	800845c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8003396:	2200      	movs	r2, #0
 8003398:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 800339c:	4820      	ldr	r0, [pc, #128]	; (8003420 <MX_GPIO_Init+0x124>)
 800339e:	f005 f85d 	bl	800845c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPS_PPS_IN_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_IN_Pin;
 80033a2:	2304      	movs	r3, #4
 80033a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_PPS_IN_GPIO_Port, &GPIO_InitStruct);
 80033ae:	f107 0314 	add.w	r3, r7, #20
 80033b2:	4619      	mov	r1, r3
 80033b4:	481b      	ldr	r0, [pc, #108]	; (8003424 <MX_GPIO_Init+0x128>)
 80033b6:	f004 feb5 	bl	8008124 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_DOWN_OUT_Pin */
  GPIO_InitStruct.Pin = ESC_DOWN_OUT_Pin;
 80033ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c0:	2301      	movs	r3, #1
 80033c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c8:	2300      	movs	r3, #0
 80033ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESC_DOWN_OUT_GPIO_Port, &GPIO_InitStruct);
 80033cc:	f107 0314 	add.w	r3, r7, #20
 80033d0:	4619      	mov	r1, r3
 80033d2:	4812      	ldr	r0, [pc, #72]	; (800341c <MX_GPIO_Init+0x120>)
 80033d4:	f004 fea6 	bl	8008124 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_IMU_CSIMU_Pin SPI2_IMU_CSBM_Pin DIS_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin;
 80033d8:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 80033dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033de:	2301      	movs	r3, #1
 80033e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e6:	2300      	movs	r3, #0
 80033e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033ea:	f107 0314 	add.w	r3, r7, #20
 80033ee:	4619      	mov	r1, r3
 80033f0:	480b      	ldr	r0, [pc, #44]	; (8003420 <MX_GPIO_Init+0x124>)
 80033f2:	f004 fe97 	bl	8008124 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_RDY_IN_Pin */
  GPIO_InitStruct.Pin = MAG_RDY_IN_Pin;
 80033f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAG_RDY_IN_GPIO_Port, &GPIO_InitStruct);
 8003404:	f107 0314 	add.w	r3, r7, #20
 8003408:	4619      	mov	r1, r3
 800340a:	4807      	ldr	r0, [pc, #28]	; (8003428 <MX_GPIO_Init+0x12c>)
 800340c:	f004 fe8a 	bl	8008124 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003410:	bf00      	nop
 8003412:	3728      	adds	r7, #40	; 0x28
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40023800 	.word	0x40023800
 800341c:	40021000 	.word	0x40021000
 8003420:	40020c00 	.word	0x40020c00
 8003424:	40020000 	.word	0x40020000
 8003428:	40020400 	.word	0x40020400

0800342c <RunTaskSensorData>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RunTaskSensorData */
void RunTaskSensorData(void const * argument)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TaskSensorData(argument);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7fe fe8f 	bl	8002158 <TaskSensorData>
  /* USER CODE END 5 */
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <RunTaskController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskController */
void RunTaskController(void const * argument)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskController */
	TaskController(argument);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7fd ffba 	bl	80013c4 <TaskController>
  /* USER CODE END RunTaskController */
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <RunTaskRemote>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskRemote */
void RunTaskRemote(void const * argument)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskRemote */
	TaskRemote(argument);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7fe fd7b 	bl	8001f5c <TaskRemote>
  /* USER CODE END RunTaskRemote */
}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <RunTaskMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskMotor */
void RunTaskMotor(void const * argument)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskMotor */
	TaskMotor(argument);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fe fc84 	bl	8001d84 <TaskMotor>
  /* USER CODE END RunTaskMotor */
}
 800347c:	bf00      	nop
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <RunTaskPower>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskPower */
void RunTaskPower(void const * argument)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskPower */
	TaskPower(argument);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7fe fd4b 	bl	8001f28 <TaskPower>
  /* USER CODE END RunTaskPower */
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <RunTaskDiagnostics>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskDiagnostics */
void RunTaskDiagnostics(void const * argument)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskDiagnostics */
	TaskDiagnostics(argument);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fe f8b0 	bl	8001608 <TaskDiagnostics>
  /* USER CODE END RunTaskDiagnostics */
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c0:	d101      	bne.n	80034c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80034c2:	f004 f8ff 	bl	80076c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034ce:	b480      	push	{r7}
 80034d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034d2:	b672      	cpsid	i
}
 80034d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034d6:	e7fe      	b.n	80034d6 <Error_Handler+0x8>

080034d8 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	4603      	mov	r3, r0
 80034e6:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d204      	bcs.n	80034fa <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	7bfa      	ldrb	r2, [r7, #15]
 80034f8:	701a      	strb	r2, [r3, #0]
  }
}
 80034fa:	bf00      	nop
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003506:	b480      	push	{r7}
 8003508:	b085      	sub	sp, #20
 800350a:	af00      	add	r7, sp, #0
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
 8003512:	4603      	mov	r3, r0
 8003514:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8003516:	bf00      	nop
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8003522:	b480      	push	{r7}
 8003524:	b085      	sub	sp, #20
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	e002      	b.n	8003538 <_strnlen_s+0x16>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3301      	adds	r3, #1
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d004      	beq.n	800354a <_strnlen_s+0x28>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	1e5a      	subs	r2, r3, #1
 8003544:	603a      	str	r2, [r7, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f3      	bne.n	8003532 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	1ad3      	subs	r3, r2, r3
}
 8003550:	4618      	mov	r0, r3
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	2b2f      	cmp	r3, #47	; 0x2f
 800356a:	d904      	bls.n	8003576 <_is_digit+0x1a>
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	2b39      	cmp	r3, #57	; 0x39
 8003570:	d801      	bhi.n	8003576 <_is_digit+0x1a>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <_is_digit+0x1c>
 8003576:	2300      	movs	r3, #0
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	b2db      	uxtb	r3, r3
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b084      	sub	sp, #16
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003596:	e00e      	b.n	80035b6 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4618      	mov	r0, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	1c59      	adds	r1, r3, #1
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6011      	str	r1, [r2, #0]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	4403      	add	r3, r0
 80035b2:	3b30      	subs	r3, #48	; 0x30
 80035b4:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ffcd 	bl	800355c <_is_digit>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1e7      	bne.n	8003598 <_atoi+0xe>
  }
  return i;
 80035c8:	68fb      	ldr	r3, [r7, #12]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80035d2:	b590      	push	{r4, r7, lr}
 80035d4:	b087      	sub	sp, #28
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80035e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d125      	bne.n	800363a <_out_rev+0x68>
 80035ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d120      	bne.n	800363a <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	e00a      	b.n	8003614 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	1c53      	adds	r3, r2, #1
 8003602:	607b      	str	r3, [r7, #4]
 8003604:	68fc      	ldr	r4, [r7, #12]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	2020      	movs	r0, #32
 800360c:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	3301      	adds	r3, #1
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	429a      	cmp	r2, r3
 800361a:	d3f0      	bcc.n	80035fe <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800361c:	e00d      	b.n	800363a <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	3b01      	subs	r3, #1
 8003622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003628:	4413      	add	r3, r2
 800362a:	7818      	ldrb	r0, [r3, #0]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	1c53      	adds	r3, r2, #1
 8003630:	607b      	str	r3, [r7, #4]
 8003632:	68fc      	ldr	r4, [r7, #12]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	47a0      	blx	r4
  while (len) {
 800363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1ee      	bne.n	800361e <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8003640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00e      	beq.n	8003668 <_out_rev+0x96>
    while (idx - start_idx < width) {
 800364a:	e007      	b.n	800365c <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	1c53      	adds	r3, r2, #1
 8003650:	607b      	str	r3, [r7, #4]
 8003652:	68fc      	ldr	r4, [r7, #12]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68b9      	ldr	r1, [r7, #8]
 8003658:	2020      	movs	r0, #32
 800365a:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003664:	429a      	cmp	r2, r3
 8003666:	d8f1      	bhi.n	800364c <_out_rev+0x7a>
    }
  }

  return idx;
 8003668:	687b      	ldr	r3, [r7, #4]
}
 800366a:	4618      	mov	r0, r3
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	bd90      	pop	{r4, r7, pc}

08003672 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b088      	sub	sp, #32
 8003676:	af04      	add	r7, sp, #16
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8003680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d136      	bne.n	80036f8 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368c:	2b00      	cmp	r3, #0
 800368e:	d018      	beq.n	80036c2 <_ntoa_format+0x50>
 8003690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d013      	beq.n	80036c2 <_ntoa_format+0x50>
 800369a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d104      	bne.n	80036ac <_ntoa_format+0x3a>
 80036a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a4:	f003 030c 	and.w	r3, r3, #12
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <_ntoa_format+0x50>
      width--;
 80036ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ae:	3b01      	subs	r3, #1
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80036b2:	e006      	b.n	80036c2 <_ntoa_format+0x50>
      buf[len++] = '0';
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	61fa      	str	r2, [r7, #28]
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4413      	add	r3, r2
 80036be:	2230      	movs	r2, #48	; 0x30
 80036c0:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d20a      	bcs.n	80036e0 <_ntoa_format+0x6e>
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	2b1f      	cmp	r3, #31
 80036ce:	d9f1      	bls.n	80036b4 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80036d0:	e006      	b.n	80036e0 <_ntoa_format+0x6e>
      buf[len++] = '0';
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	61fa      	str	r2, [r7, #28]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4413      	add	r3, r2
 80036dc:	2230      	movs	r2, #48	; 0x30
 80036de:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d006      	beq.n	80036f8 <_ntoa_format+0x86>
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d202      	bcs.n	80036f8 <_ntoa_format+0x86>
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	2b1f      	cmp	r3, #31
 80036f6:	d9ec      	bls.n	80036d2 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d058      	beq.n	80037b4 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8003702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003708:	2b00      	cmp	r3, #0
 800370a:	d116      	bne.n	800373a <_ntoa_format+0xc8>
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d013      	beq.n	800373a <_ntoa_format+0xc8>
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	429a      	cmp	r2, r3
 8003718:	d003      	beq.n	8003722 <_ntoa_format+0xb0>
 800371a:	69fa      	ldr	r2, [r7, #28]
 800371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371e:	429a      	cmp	r2, r3
 8003720:	d10b      	bne.n	800373a <_ntoa_format+0xc8>
      len--;
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	3b01      	subs	r3, #1
 8003726:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <_ntoa_format+0xc8>
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	2b10      	cmp	r3, #16
 8003732:	d102      	bne.n	800373a <_ntoa_format+0xc8>
        len--;
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	3b01      	subs	r3, #1
 8003738:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	2b10      	cmp	r3, #16
 800373e:	d10f      	bne.n	8003760 <_ntoa_format+0xee>
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10a      	bne.n	8003760 <_ntoa_format+0xee>
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	2b1f      	cmp	r3, #31
 800374e:	d807      	bhi.n	8003760 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	61fa      	str	r2, [r7, #28]
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4413      	add	r3, r2
 800375a:	2278      	movs	r2, #120	; 0x78
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	e01f      	b.n	80037a0 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	2b10      	cmp	r3, #16
 8003764:	d10f      	bne.n	8003786 <_ntoa_format+0x114>
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <_ntoa_format+0x114>
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	2b1f      	cmp	r3, #31
 8003774:	d807      	bhi.n	8003786 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	61fa      	str	r2, [r7, #28]
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4413      	add	r3, r2
 8003780:	2258      	movs	r2, #88	; 0x58
 8003782:	701a      	strb	r2, [r3, #0]
 8003784:	e00c      	b.n	80037a0 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	2b02      	cmp	r3, #2
 800378a:	d109      	bne.n	80037a0 <_ntoa_format+0x12e>
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	2b1f      	cmp	r3, #31
 8003790:	d806      	bhi.n	80037a0 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	61fa      	str	r2, [r7, #28]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4413      	add	r3, r2
 800379c:	2262      	movs	r2, #98	; 0x62
 800379e:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	2b1f      	cmp	r3, #31
 80037a4:	d806      	bhi.n	80037b4 <_ntoa_format+0x142>
      buf[len++] = '0';
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	61fa      	str	r2, [r7, #28]
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4413      	add	r3, r2
 80037b0:	2230      	movs	r2, #48	; 0x30
 80037b2:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	2b1f      	cmp	r3, #31
 80037b8:	d824      	bhi.n	8003804 <_ntoa_format+0x192>
    if (negative) {
 80037ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d007      	beq.n	80037d2 <_ntoa_format+0x160>
      buf[len++] = '-';
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	61fa      	str	r2, [r7, #28]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4413      	add	r3, r2
 80037cc:	222d      	movs	r2, #45	; 0x2d
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	e018      	b.n	8003804 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	61fa      	str	r2, [r7, #28]
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4413      	add	r3, r2
 80037e6:	222b      	movs	r2, #43	; 0x2b
 80037e8:	701a      	strb	r2, [r3, #0]
 80037ea:	e00b      	b.n	8003804 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d006      	beq.n	8003804 <_ntoa_format+0x192>
      buf[len++] = ' ';
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	61fa      	str	r2, [r7, #28]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4413      	add	r3, r2
 8003800:	2220      	movs	r2, #32
 8003802:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	9303      	str	r3, [sp, #12]
 8003808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380a:	9302      	str	r3, [sp, #8]
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	9301      	str	r3, [sp, #4]
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f7ff fed9 	bl	80035d2 <_out_rev>
 8003820:	4603      	mov	r3, r0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b096      	sub	sp, #88	; 0x58
 800382e:	af08      	add	r7, sp, #32
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800383c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d103      	bne.n	800384a <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8003842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003844:	f023 0310 	bic.w	r3, r3, #16
 8003848:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800384a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800384c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <_ntoa_long+0x30>
 8003854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d032      	beq.n	80038c0 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 800385a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800385c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800385e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003862:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003864:	fb01 f202 	mul.w	r2, r1, r2
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800386e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003872:	2b09      	cmp	r3, #9
 8003874:	d804      	bhi.n	8003880 <_ntoa_long+0x56>
 8003876:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800387a:	3330      	adds	r3, #48	; 0x30
 800387c:	b2da      	uxtb	r2, r3
 800387e:	e00d      	b.n	800389c <_ntoa_long+0x72>
 8003880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <_ntoa_long+0x64>
 800388a:	2241      	movs	r2, #65	; 0x41
 800388c:	e000      	b.n	8003890 <_ntoa_long+0x66>
 800388e:	2261      	movs	r2, #97	; 0x61
 8003890:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003894:	4413      	add	r3, r2
 8003896:	b2db      	uxtb	r3, r3
 8003898:	3b0a      	subs	r3, #10
 800389a:	b2da      	uxtb	r2, r3
 800389c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389e:	1c59      	adds	r1, r3, #1
 80038a0:	6379      	str	r1, [r7, #52]	; 0x34
 80038a2:	3338      	adds	r3, #56	; 0x38
 80038a4:	443b      	add	r3, r7
 80038a6:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80038aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b2:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80038b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <_ntoa_long+0x96>
 80038ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038bc:	2b1f      	cmp	r3, #31
 80038be:	d9cc      	bls.n	800385a <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80038c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038c2:	9306      	str	r3, [sp, #24]
 80038c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038c6:	9305      	str	r3, [sp, #20]
 80038c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ca:	9304      	str	r3, [sp, #16]
 80038cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ce:	9303      	str	r3, [sp, #12]
 80038d0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80038d4:	9302      	str	r3, [sp, #8]
 80038d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	f107 0310 	add.w	r3, r7, #16
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f7ff fec3 	bl	8003672 <_ntoa_format>
 80038ec:	4603      	mov	r3, r0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3738      	adds	r7, #56	; 0x38
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b096      	sub	sp, #88	; 0x58
 80038fa:	af08      	add	r7, sp, #32
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
 8003902:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003908:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800390c:	4313      	orrs	r3, r2
 800390e:	d103      	bne.n	8003918 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8003910:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003912:	f023 0310 	bic.w	r3, r3, #16
 8003916:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003918:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800391a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <_ntoa_long_long+0x34>
 8003922:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003926:	4313      	orrs	r3, r2
 8003928:	d037      	beq.n	800399a <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 800392a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800392e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003932:	f7fd fa21 	bl	8000d78 <__aeabi_uldivmod>
 8003936:	4613      	mov	r3, r2
 8003938:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800393c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003940:	2b09      	cmp	r3, #9
 8003942:	d804      	bhi.n	800394e <_ntoa_long_long+0x58>
 8003944:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003948:	3330      	adds	r3, #48	; 0x30
 800394a:	b2da      	uxtb	r2, r3
 800394c:	e00d      	b.n	800396a <_ntoa_long_long+0x74>
 800394e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003950:	f003 0320 	and.w	r3, r3, #32
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <_ntoa_long_long+0x66>
 8003958:	2241      	movs	r2, #65	; 0x41
 800395a:	e000      	b.n	800395e <_ntoa_long_long+0x68>
 800395c:	2261      	movs	r2, #97	; 0x61
 800395e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003962:	4413      	add	r3, r2
 8003964:	b2db      	uxtb	r3, r3
 8003966:	3b0a      	subs	r3, #10
 8003968:	b2da      	uxtb	r2, r3
 800396a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396c:	1c59      	adds	r1, r3, #1
 800396e:	6379      	str	r1, [r7, #52]	; 0x34
 8003970:	3338      	adds	r3, #56	; 0x38
 8003972:	443b      	add	r3, r7
 8003974:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8003978:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800397c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003980:	f7fd f9fa 	bl	8000d78 <__aeabi_uldivmod>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800398c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003990:	4313      	orrs	r3, r2
 8003992:	d002      	beq.n	800399a <_ntoa_long_long+0xa4>
 8003994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003996:	2b1f      	cmp	r3, #31
 8003998:	d9c7      	bls.n	800392a <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800399a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800399c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800399e:	9206      	str	r2, [sp, #24]
 80039a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039a2:	9205      	str	r2, [sp, #20]
 80039a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039a6:	9204      	str	r2, [sp, #16]
 80039a8:	9303      	str	r3, [sp, #12]
 80039aa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80039ae:	9302      	str	r3, [sp, #8]
 80039b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	f107 0310 	add.w	r3, r7, #16
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f7ff fe56 	bl	8003672 <_ntoa_format>
 80039c6:	4603      	mov	r3, r0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3738      	adds	r7, #56	; 0x38
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80039d0:	b590      	push	{r4, r7, lr}
 80039d2:	b09d      	sub	sp, #116	; 0x74
 80039d4:	af04      	add	r7, sp, #16
 80039d6:	6178      	str	r0, [r7, #20]
 80039d8:	6139      	str	r1, [r7, #16]
 80039da:	60fa      	str	r2, [r7, #12]
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80039f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039fa:	f7fd f88d 	bl	8000b18 <__aeabi_dcmpeq>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10f      	bne.n	8003a24 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8003a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a06:	9303      	str	r3, [sp, #12]
 8003a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a0a:	9302      	str	r3, [sp, #8]
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	9301      	str	r3, [sp, #4]
 8003a10:	4ba7      	ldr	r3, [pc, #668]	; (8003cb0 <_ftoa+0x2e0>)
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	6939      	ldr	r1, [r7, #16]
 8003a1a:	6978      	ldr	r0, [r7, #20]
 8003a1c:	f7ff fdd9 	bl	80035d2 <_out_rev>
 8003a20:	4603      	mov	r3, r0
 8003a22:	e222      	b.n	8003e6a <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8003a24:	f04f 32ff 	mov.w	r2, #4294967295
 8003a28:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003a2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a30:	f7fd f87c 	bl	8000b2c <__aeabi_dcmplt>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00f      	beq.n	8003a5a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8003a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a3c:	9303      	str	r3, [sp, #12]
 8003a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a40:	9302      	str	r3, [sp, #8]
 8003a42:	2304      	movs	r3, #4
 8003a44:	9301      	str	r3, [sp, #4]
 8003a46:	4b9b      	ldr	r3, [pc, #620]	; (8003cb4 <_ftoa+0x2e4>)
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	6939      	ldr	r1, [r7, #16]
 8003a50:	6978      	ldr	r0, [r7, #20]
 8003a52:	f7ff fdbe 	bl	80035d2 <_out_rev>
 8003a56:	4603      	mov	r3, r0
 8003a58:	e207      	b.n	8003e6a <_ftoa+0x49a>
  if (value > DBL_MAX)
 8003a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a5e:	4b96      	ldr	r3, [pc, #600]	; (8003cb8 <_ftoa+0x2e8>)
 8003a60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a64:	f7fd f880 	bl	8000b68 <__aeabi_dcmpgt>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01d      	beq.n	8003aaa <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003a6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <_ftoa+0xac>
 8003a78:	4b90      	ldr	r3, [pc, #576]	; (8003cbc <_ftoa+0x2ec>)
 8003a7a:	e000      	b.n	8003a7e <_ftoa+0xae>
 8003a7c:	4b90      	ldr	r3, [pc, #576]	; (8003cc0 <_ftoa+0x2f0>)
 8003a7e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a80:	f002 0204 	and.w	r2, r2, #4
 8003a84:	2a00      	cmp	r2, #0
 8003a86:	d001      	beq.n	8003a8c <_ftoa+0xbc>
 8003a88:	2204      	movs	r2, #4
 8003a8a:	e000      	b.n	8003a8e <_ftoa+0xbe>
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003a90:	9103      	str	r1, [sp, #12]
 8003a92:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003a94:	9102      	str	r1, [sp, #8]
 8003a96:	9201      	str	r2, [sp, #4]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	6939      	ldr	r1, [r7, #16]
 8003aa0:	6978      	ldr	r0, [r7, #20]
 8003aa2:	f7ff fd96 	bl	80035d2 <_out_rev>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	e1df      	b.n	8003e6a <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8003aaa:	a37d      	add	r3, pc, #500	; (adr r3, 8003ca0 <_ftoa+0x2d0>)
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ab4:	f7fd f858 	bl	8000b68 <__aeabi_dcmpgt>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <_ftoa+0x102>
 8003abe:	a37a      	add	r3, pc, #488	; (adr r3, 8003ca8 <_ftoa+0x2d8>)
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ac8:	f7fd f830 	bl	8000b2c <__aeabi_dcmplt>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00f      	beq.n	8003af2 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003ad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ad4:	9302      	str	r3, [sp, #8]
 8003ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ad8:	9301      	str	r3, [sp, #4]
 8003ada:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	ed97 0b00 	vldr	d0, [r7]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	6939      	ldr	r1, [r7, #16]
 8003ae8:	6978      	ldr	r0, [r7, #20]
 8003aea:	f000 f9c9 	bl	8003e80 <_etoa>
 8003aee:	4603      	mov	r3, r0
 8003af0:	e1bb      	b.n	8003e6a <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8003af2:	2300      	movs	r3, #0
 8003af4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b04:	f7fd f812 	bl	8000b2c <__aeabi_dcmplt>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00e      	beq.n	8003b2c <_ftoa+0x15c>
    negative = true;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8003b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b18:	f04f 0000 	mov.w	r0, #0
 8003b1c:	f04f 0100 	mov.w	r1, #0
 8003b20:	f7fc fbda 	bl	80002d8 <__aeabi_dsub>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8003b2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10d      	bne.n	8003b52 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003b36:	2306      	movs	r3, #6
 8003b38:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003b3a:	e00a      	b.n	8003b52 <_ftoa+0x182>
    buf[len++] = '0';
 8003b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003b42:	3360      	adds	r3, #96	; 0x60
 8003b44:	443b      	add	r3, r7
 8003b46:	2230      	movs	r2, #48	; 0x30
 8003b48:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8003b4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b54:	2b1f      	cmp	r3, #31
 8003b56:	d802      	bhi.n	8003b5e <_ftoa+0x18e>
 8003b58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b5a:	2b09      	cmp	r3, #9
 8003b5c:	d8ee      	bhi.n	8003b3c <_ftoa+0x16c>
  }

  int whole = (int)value;
 8003b5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b62:	f7fd f821 	bl	8000ba8 <__aeabi_d2iz>
 8003b66:	4603      	mov	r3, r0
 8003b68:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8003b6a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003b6c:	f7fc fd02 	bl	8000574 <__aeabi_i2d>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b78:	f7fc fbae 	bl	80002d8 <__aeabi_dsub>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4610      	mov	r0, r2
 8003b82:	4619      	mov	r1, r3
 8003b84:	4a4f      	ldr	r2, [pc, #316]	; (8003cc4 <_ftoa+0x2f4>)
 8003b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b90:	f7fc fd5a 	bl	8000648 <__aeabi_dmul>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8003b9c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003ba0:	f7fd f82a 	bl	8000bf8 <__aeabi_d2uiz>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8003ba8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003baa:	f7fc fcd3 	bl	8000554 <__aeabi_ui2d>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003bb6:	f7fc fb8f 	bl	80002d8 <__aeabi_dsub>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	4b40      	ldr	r3, [pc, #256]	; (8003cc8 <_ftoa+0x2f8>)
 8003bc8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003bcc:	f7fc ffcc 	bl	8000b68 <__aeabi_dcmpgt>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d016      	beq.n	8003c04 <_ftoa+0x234>
    ++frac;
 8003bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd8:	3301      	adds	r3, #1
 8003bda:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8003bdc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003bde:	f7fc fcb9 	bl	8000554 <__aeabi_ui2d>
 8003be2:	4a38      	ldr	r2, [pc, #224]	; (8003cc4 <_ftoa+0x2f4>)
 8003be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4413      	add	r3, r2
 8003bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bee:	f7fc ffb1 	bl	8000b54 <__aeabi_dcmpge>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01a      	beq.n	8003c2e <_ftoa+0x25e>
      frac = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8003bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bfe:	3301      	adds	r3, #1
 8003c00:	657b      	str	r3, [r7, #84]	; 0x54
 8003c02:	e014      	b.n	8003c2e <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	4b2f      	ldr	r3, [pc, #188]	; (8003cc8 <_ftoa+0x2f8>)
 8003c0a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003c0e:	f7fc ff8d 	bl	8000b2c <__aeabi_dcmplt>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10a      	bne.n	8003c2e <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8003c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d004      	beq.n	8003c28 <_ftoa+0x258>
 8003c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8003c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8003c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d14b      	bne.n	8003ccc <_ftoa+0x2fc>
    diff = value - (double)whole;
 8003c34:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003c36:	f7fc fc9d 	bl	8000574 <__aeabi_i2d>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c42:	f7fc fb49 	bl	80002d8 <__aeabi_dsub>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8003c4e:	2301      	movs	r3, #1
 8003c50:	461c      	mov	r4, r3
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	4b1c      	ldr	r3, [pc, #112]	; (8003cc8 <_ftoa+0x2f8>)
 8003c58:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003c5c:	f7fc ff66 	bl	8000b2c <__aeabi_dcmplt>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <_ftoa+0x29a>
 8003c66:	2300      	movs	r3, #0
 8003c68:	461c      	mov	r4, r3
 8003c6a:	b2e3      	uxtb	r3, r4
 8003c6c:	f083 0301 	eor.w	r3, r3, #1
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d109      	bne.n	8003c8a <_ftoa+0x2ba>
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <_ftoa+0x2f8>)
 8003c7c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003c80:	f7fc ff72 	bl	8000b68 <__aeabi_dcmpgt>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d064      	beq.n	8003d54 <_ftoa+0x384>
 8003c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8081 	beq.w	8003d98 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8003c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c98:	3301      	adds	r3, #1
 8003c9a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c9c:	e07c      	b.n	8003d98 <_ftoa+0x3c8>
 8003c9e:	bf00      	nop
 8003ca0:	00000000 	.word	0x00000000
 8003ca4:	41cdcd65 	.word	0x41cdcd65
 8003ca8:	00000000 	.word	0x00000000
 8003cac:	c1cdcd65 	.word	0xc1cdcd65
 8003cb0:	08017f94 	.word	0x08017f94
 8003cb4:	08017f98 	.word	0x08017f98
 8003cb8:	7fefffff 	.word	0x7fefffff
 8003cbc:	08017fa0 	.word	0x08017fa0
 8003cc0:	08017fa8 	.word	0x08017fa8
 8003cc4:	080180a0 	.word	0x080180a0
 8003cc8:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8003ccc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cce:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003cd0:	e01f      	b.n	8003d12 <_ftoa+0x342>
      --count;
 8003cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8003cd8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003cda:	4b66      	ldr	r3, [pc, #408]	; (8003e74 <_ftoa+0x4a4>)
 8003cdc:	fba3 2301 	umull	r2, r3, r3, r1
 8003ce0:	08da      	lsrs	r2, r3, #3
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	1aca      	subs	r2, r1, r3
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cf0:	1c59      	adds	r1, r3, #1
 8003cf2:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003cf4:	3230      	adds	r2, #48	; 0x30
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	3360      	adds	r3, #96	; 0x60
 8003cfa:	443b      	add	r3, r7
 8003cfc:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8003d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d02:	4a5c      	ldr	r2, [pc, #368]	; (8003e74 <_ftoa+0x4a4>)
 8003d04:	fba2 2303 	umull	r2, r3, r2, r3
 8003d08:	08db      	lsrs	r3, r3, #3
 8003d0a:	653b      	str	r3, [r7, #80]	; 0x50
 8003d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d14:	2b1f      	cmp	r3, #31
 8003d16:	d9dc      	bls.n	8003cd2 <_ftoa+0x302>
 8003d18:	e009      	b.n	8003d2e <_ftoa+0x35e>
        break;
 8003d1a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003d1c:	e007      	b.n	8003d2e <_ftoa+0x35e>
      buf[len++] = '0';
 8003d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003d24:	3360      	adds	r3, #96	; 0x60
 8003d26:	443b      	add	r3, r7
 8003d28:	2230      	movs	r2, #48	; 0x30
 8003d2a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d30:	2b1f      	cmp	r3, #31
 8003d32:	d804      	bhi.n	8003d3e <_ftoa+0x36e>
 8003d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d36:	1e5a      	subs	r2, r3, #1
 8003d38:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1ef      	bne.n	8003d1e <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d40:	2b1f      	cmp	r3, #31
 8003d42:	d829      	bhi.n	8003d98 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8003d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003d4a:	3360      	adds	r3, #96	; 0x60
 8003d4c:	443b      	add	r3, r7
 8003d4e:	222e      	movs	r2, #46	; 0x2e
 8003d50:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003d54:	e020      	b.n	8003d98 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8003d56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d58:	4b47      	ldr	r3, [pc, #284]	; (8003e78 <_ftoa+0x4a8>)
 8003d5a:	fb83 1302 	smull	r1, r3, r3, r2
 8003d5e:	1099      	asrs	r1, r3, #2
 8003d60:	17d3      	asrs	r3, r2, #31
 8003d62:	1ac9      	subs	r1, r1, r3
 8003d64:	460b      	mov	r3, r1
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	1ad1      	subs	r1, r2, r3
 8003d6e:	b2ca      	uxtb	r2, r1
 8003d70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d72:	1c59      	adds	r1, r3, #1
 8003d74:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003d76:	3230      	adds	r2, #48	; 0x30
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	3360      	adds	r3, #96	; 0x60
 8003d7c:	443b      	add	r3, r7
 8003d7e:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8003d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d84:	4a3c      	ldr	r2, [pc, #240]	; (8003e78 <_ftoa+0x4a8>)
 8003d86:	fb82 1203 	smull	r1, r2, r2, r3
 8003d8a:	1092      	asrs	r2, r2, #2
 8003d8c:	17db      	asrs	r3, r3, #31
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	657b      	str	r3, [r7, #84]	; 0x54
 8003d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d9a:	2b1f      	cmp	r3, #31
 8003d9c:	d9db      	bls.n	8003d56 <_ftoa+0x386>
 8003d9e:	e000      	b.n	8003da2 <_ftoa+0x3d2>
      break;
 8003da0:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8003da2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d123      	bne.n	8003df4 <_ftoa+0x424>
 8003dac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d01e      	beq.n	8003df4 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d014      	beq.n	8003de6 <_ftoa+0x416>
 8003dbc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d104      	bne.n	8003dce <_ftoa+0x3fe>
 8003dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dc6:	f003 030c 	and.w	r3, r3, #12
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00b      	beq.n	8003de6 <_ftoa+0x416>
      width--;
 8003dce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003dd4:	e007      	b.n	8003de6 <_ftoa+0x416>
      buf[len++] = '0';
 8003dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003ddc:	3360      	adds	r3, #96	; 0x60
 8003dde:	443b      	add	r3, r7
 8003de0:	2230      	movs	r2, #48	; 0x30
 8003de2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003de6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003de8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d202      	bcs.n	8003df4 <_ftoa+0x424>
 8003dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003df0:	2b1f      	cmp	r3, #31
 8003df2:	d9f0      	bls.n	8003dd6 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003df4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003df6:	2b1f      	cmp	r3, #31
 8003df8:	d827      	bhi.n	8003e4a <_ftoa+0x47a>
    if (negative) {
 8003dfa:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d008      	beq.n	8003e14 <_ftoa+0x444>
      buf[len++] = '-';
 8003e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e08:	3360      	adds	r3, #96	; 0x60
 8003e0a:	443b      	add	r3, r7
 8003e0c:	222d      	movs	r2, #45	; 0x2d
 8003e0e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003e12:	e01a      	b.n	8003e4a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8003e14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d008      	beq.n	8003e30 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e24:	3360      	adds	r3, #96	; 0x60
 8003e26:	443b      	add	r3, r7
 8003e28:	222b      	movs	r2, #43	; 0x2b
 8003e2a:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003e2e:	e00c      	b.n	8003e4a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8003e30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d007      	beq.n	8003e4a <_ftoa+0x47a>
      buf[len++] = ' ';
 8003e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e40:	3360      	adds	r3, #96	; 0x60
 8003e42:	443b      	add	r3, r7
 8003e44:	2220      	movs	r2, #32
 8003e46:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e4c:	9303      	str	r3, [sp, #12]
 8003e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e50:	9302      	str	r3, [sp, #8]
 8003e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e54:	9301      	str	r3, [sp, #4]
 8003e56:	f107 0318 	add.w	r3, r7, #24
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	6939      	ldr	r1, [r7, #16]
 8003e62:	6978      	ldr	r0, [r7, #20]
 8003e64:	f7ff fbb5 	bl	80035d2 <_out_rev>
 8003e68:	4603      	mov	r3, r0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3764      	adds	r7, #100	; 0x64
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd90      	pop	{r4, r7, pc}
 8003e72:	bf00      	nop
 8003e74:	cccccccd 	.word	0xcccccccd
 8003e78:	66666667 	.word	0x66666667
 8003e7c:	00000000 	.word	0x00000000

08003e80 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e84:	b09f      	sub	sp, #124	; 0x7c
 8003e86:	af06      	add	r7, sp, #24
 8003e88:	6278      	str	r0, [r7, #36]	; 0x24
 8003e8a:	6239      	str	r1, [r7, #32]
 8003e8c:	61fa      	str	r2, [r7, #28]
 8003e8e:	61bb      	str	r3, [r7, #24]
 8003e90:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8003e94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e9c:	f7fc fe3c 	bl	8000b18 <__aeabi_dcmpeq>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d014      	beq.n	8003ed0 <_etoa+0x50>
 8003ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eaa:	4bc1      	ldr	r3, [pc, #772]	; (80041b0 <_etoa+0x330>)
 8003eac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003eb0:	f7fc fe5a 	bl	8000b68 <__aeabi_dcmpgt>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10a      	bne.n	8003ed0 <_etoa+0x50>
 8003eba:	f04f 32ff 	mov.w	r2, #4294967295
 8003ebe:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003ec2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ec6:	f7fc fe31 	bl	8000b2c <__aeabi_dcmplt>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d012      	beq.n	8003ef6 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003ed0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ed4:	9302      	str	r3, [sp, #8]
 8003ed6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	ed97 0b04 	vldr	d0, [r7, #16]
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	69fa      	ldr	r2, [r7, #28]
 8003eea:	6a39      	ldr	r1, [r7, #32]
 8003eec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eee:	f7ff fd6f 	bl	80039d0 <_ftoa>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	e23f      	b.n	8004376 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	461e      	mov	r6, r3
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f06:	f7fc fe11 	bl	8000b2c <__aeabi_dcmplt>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <_etoa+0x94>
 8003f10:	2300      	movs	r3, #0
 8003f12:	461e      	mov	r6, r3
 8003f14:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8003f18:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d009      	beq.n	8003f34 <_etoa+0xb4>
    value = -value;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003f2a:	607b      	str	r3, [r7, #4]
 8003f2c:	ed97 7b00 	vldr	d7, [r7]
 8003f30:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8003f34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d102      	bne.n	8003f46 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003f40:	2306      	movs	r3, #6
 8003f42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8003f46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f4a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8003f4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	0d0a      	lsrs	r2, r1, #20
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	4613      	mov	r3, r2
 8003f60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f64:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003f68:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003f6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f6e:	4690      	mov	r8, r2
 8003f70:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8003f74:	4644      	mov	r4, r8
 8003f76:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8003f7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003f7e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003f82:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003f84:	f7fc faf6 	bl	8000574 <__aeabi_i2d>
 8003f88:	a37d      	add	r3, pc, #500	; (adr r3, 8004180 <_etoa+0x300>)
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f7fc fb5b 	bl	8000648 <__aeabi_dmul>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	a37b      	add	r3, pc, #492	; (adr r3, 8004188 <_etoa+0x308>)
 8003f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa0:	f7fc f99c 	bl	80002dc <__adddf3>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4614      	mov	r4, r2
 8003faa:	461d      	mov	r5, r3
 8003fac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	4b7f      	ldr	r3, [pc, #508]	; (80041b4 <_etoa+0x334>)
 8003fb6:	f7fc f98f 	bl	80002d8 <__aeabi_dsub>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	a373      	add	r3, pc, #460	; (adr r3, 8004190 <_etoa+0x310>)
 8003fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc8:	f7fc fb3e 	bl	8000648 <__aeabi_dmul>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	f7fc f982 	bl	80002dc <__adddf3>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4610      	mov	r0, r2
 8003fde:	4619      	mov	r1, r3
 8003fe0:	f7fc fde2 	bl	8000ba8 <__aeabi_d2iz>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8003fe8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003fea:	f7fc fac3 	bl	8000574 <__aeabi_i2d>
 8003fee:	a36a      	add	r3, pc, #424	; (adr r3, 8004198 <_etoa+0x318>)
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f7fc fb28 	bl	8000648 <__aeabi_dmul>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4619      	mov	r1, r3
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	4b6c      	ldr	r3, [pc, #432]	; (80041b8 <_etoa+0x338>)
 8004006:	f7fc f969 	bl	80002dc <__adddf3>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4610      	mov	r0, r2
 8004010:	4619      	mov	r1, r3
 8004012:	f7fc fdc9 	bl	8000ba8 <__aeabi_d2iz>
 8004016:	4603      	mov	r3, r0
 8004018:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800401a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800401c:	f7fc faaa 	bl	8000574 <__aeabi_i2d>
 8004020:	a35f      	add	r3, pc, #380	; (adr r3, 80041a0 <_etoa+0x320>)
 8004022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004026:	f7fc fb0f 	bl	8000648 <__aeabi_dmul>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4614      	mov	r4, r2
 8004030:	461d      	mov	r5, r3
 8004032:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004034:	f7fc fa9e 	bl	8000574 <__aeabi_i2d>
 8004038:	a35b      	add	r3, pc, #364	; (adr r3, 80041a8 <_etoa+0x328>)
 800403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403e:	f7fc fb03 	bl	8000648 <__aeabi_dmul>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4620      	mov	r0, r4
 8004048:	4629      	mov	r1, r5
 800404a:	f7fc f945 	bl	80002d8 <__aeabi_dsub>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8004056:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800405a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800405e:	f7fc faf3 	bl	8000648 <__aeabi_dmul>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800406a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800406c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8004070:	17da      	asrs	r2, r3, #31
 8004072:	469a      	mov	sl, r3
 8004074:	4693      	mov	fp, r2
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8004082:	2200      	movs	r2, #0
 8004084:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8004088:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800408c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	f7fc f922 	bl	80002dc <__adddf3>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4690      	mov	r8, r2
 800409e:	4699      	mov	r9, r3
 80040a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040a4:	f04f 0000 	mov.w	r0, #0
 80040a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80040ac:	f7fc f914 	bl	80002d8 <__aeabi_dsub>
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4692      	mov	sl, r2
 80040b6:	469b      	mov	fp, r3
 80040b8:	f04f 0200 	mov.w	r2, #0
 80040bc:	4b3f      	ldr	r3, [pc, #252]	; (80041bc <_etoa+0x33c>)
 80040be:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80040c2:	f7fc fbeb 	bl	800089c <__aeabi_ddiv>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4610      	mov	r0, r2
 80040cc:	4619      	mov	r1, r3
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	4b3b      	ldr	r3, [pc, #236]	; (80041c0 <_etoa+0x340>)
 80040d4:	f7fc f902 	bl	80002dc <__adddf3>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80040e0:	f7fc fbdc 	bl	800089c <__aeabi_ddiv>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4610      	mov	r0, r2
 80040ea:	4619      	mov	r1, r3
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	4b34      	ldr	r3, [pc, #208]	; (80041c4 <_etoa+0x344>)
 80040f2:	f7fc f8f3 	bl	80002dc <__adddf3>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80040fe:	f7fc fbcd 	bl	800089c <__aeabi_ddiv>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4650      	mov	r0, sl
 8004108:	4659      	mov	r1, fp
 800410a:	f7fc f8e7 	bl	80002dc <__adddf3>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4640      	mov	r0, r8
 8004114:	4649      	mov	r1, r9
 8004116:	f7fc fbc1 	bl	800089c <__aeabi_ddiv>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4610      	mov	r0, r2
 8004120:	4619      	mov	r1, r3
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	4b28      	ldr	r3, [pc, #160]	; (80041c8 <_etoa+0x348>)
 8004128:	f7fc f8d8 	bl	80002dc <__adddf3>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4620      	mov	r0, r4
 8004132:	4629      	mov	r1, r5
 8004134:	f7fc fa88 	bl	8000648 <__aeabi_dmul>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8004140:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004144:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004148:	f7fc fcf0 	bl	8000b2c <__aeabi_dcmplt>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00d      	beq.n	800416e <_etoa+0x2ee>
    expval--;
 8004152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004154:	3b01      	subs	r3, #1
 8004156:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8004158:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	4b17      	ldr	r3, [pc, #92]	; (80041c0 <_etoa+0x340>)
 8004162:	f7fc fb9b 	bl	800089c <__aeabi_ddiv>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800416e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004170:	2b63      	cmp	r3, #99	; 0x63
 8004172:	dc2b      	bgt.n	80041cc <_etoa+0x34c>
 8004174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004176:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800417a:	db27      	blt.n	80041cc <_etoa+0x34c>
 800417c:	2304      	movs	r3, #4
 800417e:	e026      	b.n	80041ce <_etoa+0x34e>
 8004180:	509f79fb 	.word	0x509f79fb
 8004184:	3fd34413 	.word	0x3fd34413
 8004188:	8b60c8b3 	.word	0x8b60c8b3
 800418c:	3fc68a28 	.word	0x3fc68a28
 8004190:	636f4361 	.word	0x636f4361
 8004194:	3fd287a7 	.word	0x3fd287a7
 8004198:	0979a371 	.word	0x0979a371
 800419c:	400a934f 	.word	0x400a934f
 80041a0:	bbb55516 	.word	0xbbb55516
 80041a4:	40026bb1 	.word	0x40026bb1
 80041a8:	fefa39ef 	.word	0xfefa39ef
 80041ac:	3fe62e42 	.word	0x3fe62e42
 80041b0:	7fefffff 	.word	0x7fefffff
 80041b4:	3ff80000 	.word	0x3ff80000
 80041b8:	3fe00000 	.word	0x3fe00000
 80041bc:	402c0000 	.word	0x402c0000
 80041c0:	40240000 	.word	0x40240000
 80041c4:	40180000 	.word	0x40180000
 80041c8:	3ff00000 	.word	0x3ff00000
 80041cc:	2305      	movs	r3, #5
 80041ce:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80041d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d03d      	beq.n	8004258 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80041dc:	a368      	add	r3, pc, #416	; (adr r3, 8004380 <_etoa+0x500>)
 80041de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80041e6:	f7fc fcb5 	bl	8000b54 <__aeabi_dcmpge>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d024      	beq.n	800423a <_etoa+0x3ba>
 80041f0:	a365      	add	r3, pc, #404	; (adr r3, 8004388 <_etoa+0x508>)
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80041fa:	f7fc fc97 	bl	8000b2c <__aeabi_dcmplt>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01a      	beq.n	800423a <_etoa+0x3ba>
      if ((int)prec > expval) {
 8004204:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004208:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800420a:	429a      	cmp	r2, r3
 800420c:	da07      	bge.n	800421e <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 800420e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800421c:	e002      	b.n	8004224 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8004224:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004228:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800422c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004238:	e00e      	b.n	8004258 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800423a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <_etoa+0x3d8>
 8004242:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424a:	2b00      	cmp	r3, #0
 800424c:	d004      	beq.n	8004258 <_etoa+0x3d8>
        --prec;
 800424e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004252:	3b01      	subs	r3, #1
 8004254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8004258:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800425c:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 800425e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004264:	429a      	cmp	r2, r3
 8004266:	d904      	bls.n	8004272 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8004268:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800426a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	657b      	str	r3, [r7, #84]	; 0x54
 8004270:	e001      	b.n	8004276 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8004276:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d004      	beq.n	800428c <_etoa+0x40c>
 8004282:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 800428c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <_etoa+0x426>
    value /= conv.F;
 8004292:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004296:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800429a:	f7fc faff 	bl	800089c <__aeabi_ddiv>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80042aa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d006      	beq.n	80042c0 <_etoa+0x440>
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	e003      	b.n	80042c8 <_etoa+0x448>
 80042c0:	ed97 7b04 	vldr	d7, [r7, #16]
 80042c4:	ed87 7b02 	vstr	d7, [r7, #8]
 80042c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042d0:	9302      	str	r3, [sp, #8]
 80042d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	ed97 0b02 	vldr	d0, [r7, #8]
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	6a39      	ldr	r1, [r7, #32]
 80042e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042e8:	f7ff fb72 	bl	80039d0 <_ftoa>
 80042ec:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 80042ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d03f      	beq.n	8004374 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80042f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <_etoa+0x484>
 8004300:	2045      	movs	r0, #69	; 0x45
 8004302:	e000      	b.n	8004306 <_etoa+0x486>
 8004304:	2065      	movs	r0, #101	; 0x65
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	1c53      	adds	r3, r2, #1
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	6a39      	ldr	r1, [r7, #32]
 8004312:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8004314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004316:	2b00      	cmp	r3, #0
 8004318:	bfb8      	it	lt
 800431a:	425b      	neglt	r3, r3
 800431c:	4618      	mov	r0, r3
 800431e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004320:	0fdb      	lsrs	r3, r3, #31
 8004322:	b2db      	uxtb	r3, r3
 8004324:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004326:	3a01      	subs	r2, #1
 8004328:	2105      	movs	r1, #5
 800432a:	9105      	str	r1, [sp, #20]
 800432c:	9204      	str	r2, [sp, #16]
 800432e:	2200      	movs	r2, #0
 8004330:	9203      	str	r2, [sp, #12]
 8004332:	220a      	movs	r2, #10
 8004334:	9202      	str	r2, [sp, #8]
 8004336:	9301      	str	r3, [sp, #4]
 8004338:	9000      	str	r0, [sp, #0]
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	6a39      	ldr	r1, [r7, #32]
 8004340:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004342:	f7ff fa72 	bl	800382a <_ntoa_long>
 8004346:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8004348:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00f      	beq.n	8004374 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8004354:	e007      	b.n	8004366 <_etoa+0x4e6>
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	1c53      	adds	r3, r2, #1
 800435a:	61fb      	str	r3, [r7, #28]
 800435c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	6a39      	ldr	r1, [r7, #32]
 8004362:	2020      	movs	r0, #32
 8004364:	47a0      	blx	r4
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004370:	429a      	cmp	r2, r3
 8004372:	d8f0      	bhi.n	8004356 <_etoa+0x4d6>
    }
  }
  return idx;
 8004374:	69fb      	ldr	r3, [r7, #28]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3764      	adds	r7, #100	; 0x64
 800437a:	46bd      	mov	sp, r7
 800437c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004380:	eb1c432d 	.word	0xeb1c432d
 8004384:	3f1a36e2 	.word	0x3f1a36e2
 8004388:	00000000 	.word	0x00000000
 800438c:	412e8480 	.word	0x412e8480

08004390 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8004390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004394:	b0a3      	sub	sp, #140	; 0x8c
 8004396:	af0a      	add	r7, sp, #40	; 0x28
 8004398:	6178      	str	r0, [r7, #20]
 800439a:	6139      	str	r1, [r7, #16]
 800439c:	60fa      	str	r2, [r7, #12]
 800439e:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f040 84cf 	bne.w	8004d4a <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 80043ac:	4ba8      	ldr	r3, [pc, #672]	; (8004650 <_vsnprintf+0x2c0>)
 80043ae:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 80043b0:	f000 bccb 	b.w	8004d4a <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b25      	cmp	r3, #37	; 0x25
 80043ba:	d00d      	beq.n	80043d8 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	7818      	ldrb	r0, [r3, #0]
 80043c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043c2:	1c53      	adds	r3, r2, #1
 80043c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c6:	697c      	ldr	r4, [r7, #20]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6939      	ldr	r1, [r7, #16]
 80043cc:	47a0      	blx	r4
      format++;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	3301      	adds	r3, #1
 80043d2:	60bb      	str	r3, [r7, #8]
      continue;
 80043d4:	f000 bcb9 	b.w	8004d4a <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	3301      	adds	r3, #1
 80043dc:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	3b20      	subs	r3, #32
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d857      	bhi.n	800449c <_vsnprintf+0x10c>
 80043ec:	a201      	add	r2, pc, #4	; (adr r2, 80043f4 <_vsnprintf+0x64>)
 80043ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f2:	bf00      	nop
 80043f4:	08004475 	.word	0x08004475
 80043f8:	0800449d 	.word	0x0800449d
 80043fc:	0800449d 	.word	0x0800449d
 8004400:	08004489 	.word	0x08004489
 8004404:	0800449d 	.word	0x0800449d
 8004408:	0800449d 	.word	0x0800449d
 800440c:	0800449d 	.word	0x0800449d
 8004410:	0800449d 	.word	0x0800449d
 8004414:	0800449d 	.word	0x0800449d
 8004418:	0800449d 	.word	0x0800449d
 800441c:	0800449d 	.word	0x0800449d
 8004420:	08004461 	.word	0x08004461
 8004424:	0800449d 	.word	0x0800449d
 8004428:	0800444d 	.word	0x0800444d
 800442c:	0800449d 	.word	0x0800449d
 8004430:	0800449d 	.word	0x0800449d
 8004434:	08004439 	.word	0x08004439
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8004438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	3301      	adds	r3, #1
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	2301      	movs	r3, #1
 8004448:	653b      	str	r3, [r7, #80]	; 0x50
 800444a:	e02a      	b.n	80044a2 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800444c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800444e:	f043 0302 	orr.w	r3, r3, #2
 8004452:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	3301      	adds	r3, #1
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	2301      	movs	r3, #1
 800445c:	653b      	str	r3, [r7, #80]	; 0x50
 800445e:	e020      	b.n	80044a2 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8004460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004462:	f043 0304 	orr.w	r3, r3, #4
 8004466:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	3301      	adds	r3, #1
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	2301      	movs	r3, #1
 8004470:	653b      	str	r3, [r7, #80]	; 0x50
 8004472:	e016      	b.n	80044a2 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8004474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004476:	f043 0308 	orr.w	r3, r3, #8
 800447a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	3301      	adds	r3, #1
 8004480:	60bb      	str	r3, [r7, #8]
 8004482:	2301      	movs	r3, #1
 8004484:	653b      	str	r3, [r7, #80]	; 0x50
 8004486:	e00c      	b.n	80044a2 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8004488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800448a:	f043 0310 	orr.w	r3, r3, #16
 800448e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	3301      	adds	r3, #1
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	2301      	movs	r3, #1
 8004498:	653b      	str	r3, [r7, #80]	; 0x50
 800449a:	e002      	b.n	80044a2 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 800449c:	2300      	movs	r3, #0
 800449e:	653b      	str	r3, [r7, #80]	; 0x50
 80044a0:	bf00      	nop
      }
    } while (n);
 80044a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d19c      	bne.n	80043e2 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff f853 	bl	800355c <_is_digit>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d006      	beq.n	80044ca <_vsnprintf+0x13a>
      width = _atoi(&format);
 80044bc:	f107 0308 	add.w	r3, r7, #8
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff f862 	bl	800358a <_atoi>
 80044c6:	65b8      	str	r0, [r7, #88]	; 0x58
 80044c8:	e01a      	b.n	8004500 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b2a      	cmp	r3, #42	; 0x2a
 80044d0:	d116      	bne.n	8004500 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 80044d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044d6:	1d1a      	adds	r2, r3, #4
 80044d8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 80044e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	da07      	bge.n	80044f6 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 80044e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044e8:	f043 0302 	orr.w	r3, r3, #2
 80044ec:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 80044ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f0:	425b      	negs	r3, r3
 80044f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80044f4:	e001      	b.n	80044fa <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 80044f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f8:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	3301      	adds	r3, #1
 80044fe:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b2e      	cmp	r3, #46	; 0x2e
 800450a:	d127      	bne.n	800455c <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 800450c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800450e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004512:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	3301      	adds	r3, #1
 8004518:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff f81c 	bl	800355c <_is_digit>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d006      	beq.n	8004538 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 800452a:	f107 0308 	add.w	r3, r7, #8
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff f82b 	bl	800358a <_atoi>
 8004534:	6578      	str	r0, [r7, #84]	; 0x54
 8004536:	e011      	b.n	800455c <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b2a      	cmp	r3, #42	; 0x2a
 800453e:	d10d      	bne.n	800455c <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8004540:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004544:	1d1a      	adds	r2, r3, #4
 8004546:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800454e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004550:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004554:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	3301      	adds	r3, #1
 800455a:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	3b68      	subs	r3, #104	; 0x68
 8004562:	2b12      	cmp	r3, #18
 8004564:	d866      	bhi.n	8004634 <_vsnprintf+0x2a4>
 8004566:	a201      	add	r2, pc, #4	; (adr r2, 800456c <_vsnprintf+0x1dc>)
 8004568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456c:	080045df 	.word	0x080045df
 8004570:	08004635 	.word	0x08004635
 8004574:	08004615 	.word	0x08004615
 8004578:	08004635 	.word	0x08004635
 800457c:	080045b9 	.word	0x080045b9
 8004580:	08004635 	.word	0x08004635
 8004584:	08004635 	.word	0x08004635
 8004588:	08004635 	.word	0x08004635
 800458c:	08004635 	.word	0x08004635
 8004590:	08004635 	.word	0x08004635
 8004594:	08004635 	.word	0x08004635
 8004598:	08004635 	.word	0x08004635
 800459c:	08004605 	.word	0x08004605
 80045a0:	08004635 	.word	0x08004635
 80045a4:	08004635 	.word	0x08004635
 80045a8:	08004635 	.word	0x08004635
 80045ac:	08004635 	.word	0x08004635
 80045b0:	08004635 	.word	0x08004635
 80045b4:	08004625 	.word	0x08004625
      case 'l' :
        flags |= FLAGS_LONG;
 80045b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045be:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	3301      	adds	r3, #1
 80045c4:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b6c      	cmp	r3, #108	; 0x6c
 80045cc:	d134      	bne.n	8004638 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 80045ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045d4:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	3301      	adds	r3, #1
 80045da:	60bb      	str	r3, [r7, #8]
        }
        break;
 80045dc:	e02c      	b.n	8004638 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 80045de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e4:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	3301      	adds	r3, #1
 80045ea:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b68      	cmp	r3, #104	; 0x68
 80045f2:	d123      	bne.n	800463c <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 80045f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045fa:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	3301      	adds	r3, #1
 8004600:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004602:	e01b      	b.n	800463c <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	3301      	adds	r3, #1
 8004610:	60bb      	str	r3, [r7, #8]
        break;
 8004612:	e014      	b.n	800463e <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800461a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	3301      	adds	r3, #1
 8004620:	60bb      	str	r3, [r7, #8]
        break;
 8004622:	e00c      	b.n	800463e <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800462a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	3301      	adds	r3, #1
 8004630:	60bb      	str	r3, [r7, #8]
        break;
 8004632:	e004      	b.n	800463e <_vsnprintf+0x2ae>
      default :
        break;
 8004634:	bf00      	nop
 8004636:	e002      	b.n	800463e <_vsnprintf+0x2ae>
        break;
 8004638:	bf00      	nop
 800463a:	e000      	b.n	800463e <_vsnprintf+0x2ae>
        break;
 800463c:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b67      	cmp	r3, #103	; 0x67
 8004644:	f300 80b8 	bgt.w	80047b8 <_vsnprintf+0x428>
 8004648:	2b25      	cmp	r3, #37	; 0x25
 800464a:	da27      	bge.n	800469c <_vsnprintf+0x30c>
 800464c:	e370      	b.n	8004d30 <_vsnprintf+0x9a0>
 800464e:	bf00      	nop
 8004650:	08003507 	.word	0x08003507
 8004654:	3b69      	subs	r3, #105	; 0x69
 8004656:	2201      	movs	r2, #1
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	f249 0241 	movw	r2, #36929	; 0x9041
 8004660:	401a      	ands	r2, r3
 8004662:	2a00      	cmp	r2, #0
 8004664:	bf14      	ite	ne
 8004666:	2201      	movne	r2, #1
 8004668:	2200      	moveq	r2, #0
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	2a00      	cmp	r2, #0
 800466e:	f040 80aa 	bne.w	80047c6 <_vsnprintf+0x436>
 8004672:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8004676:	2a00      	cmp	r2, #0
 8004678:	bf14      	ite	ne
 800467a:	2201      	movne	r2, #1
 800467c:	2200      	moveq	r2, #0
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	2a00      	cmp	r2, #0
 8004682:	f040 82fb 	bne.w	8004c7c <_vsnprintf+0x8ec>
 8004686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800468a:	2b00      	cmp	r3, #0
 800468c:	bf14      	ite	ne
 800468e:	2301      	movne	r3, #1
 8004690:	2300      	moveq	r3, #0
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	f040 828d 	bne.w	8004bb4 <_vsnprintf+0x824>
 800469a:	e349      	b.n	8004d30 <_vsnprintf+0x9a0>
 800469c:	3b25      	subs	r3, #37	; 0x25
 800469e:	2b42      	cmp	r3, #66	; 0x42
 80046a0:	f200 8346 	bhi.w	8004d30 <_vsnprintf+0x9a0>
 80046a4:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <_vsnprintf+0x31c>)
 80046a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046aa:	bf00      	nop
 80046ac:	08004d19 	.word	0x08004d19
 80046b0:	08004d31 	.word	0x08004d31
 80046b4:	08004d31 	.word	0x08004d31
 80046b8:	08004d31 	.word	0x08004d31
 80046bc:	08004d31 	.word	0x08004d31
 80046c0:	08004d31 	.word	0x08004d31
 80046c4:	08004d31 	.word	0x08004d31
 80046c8:	08004d31 	.word	0x08004d31
 80046cc:	08004d31 	.word	0x08004d31
 80046d0:	08004d31 	.word	0x08004d31
 80046d4:	08004d31 	.word	0x08004d31
 80046d8:	08004d31 	.word	0x08004d31
 80046dc:	08004d31 	.word	0x08004d31
 80046e0:	08004d31 	.word	0x08004d31
 80046e4:	08004d31 	.word	0x08004d31
 80046e8:	08004d31 	.word	0x08004d31
 80046ec:	08004d31 	.word	0x08004d31
 80046f0:	08004d31 	.word	0x08004d31
 80046f4:	08004d31 	.word	0x08004d31
 80046f8:	08004d31 	.word	0x08004d31
 80046fc:	08004d31 	.word	0x08004d31
 8004700:	08004d31 	.word	0x08004d31
 8004704:	08004d31 	.word	0x08004d31
 8004708:	08004d31 	.word	0x08004d31
 800470c:	08004d31 	.word	0x08004d31
 8004710:	08004d31 	.word	0x08004d31
 8004714:	08004d31 	.word	0x08004d31
 8004718:	08004d31 	.word	0x08004d31
 800471c:	08004d31 	.word	0x08004d31
 8004720:	08004d31 	.word	0x08004d31
 8004724:	08004d31 	.word	0x08004d31
 8004728:	08004d31 	.word	0x08004d31
 800472c:	08004acd 	.word	0x08004acd
 8004730:	08004a7d 	.word	0x08004a7d
 8004734:	08004acd 	.word	0x08004acd
 8004738:	08004d31 	.word	0x08004d31
 800473c:	08004d31 	.word	0x08004d31
 8004740:	08004d31 	.word	0x08004d31
 8004744:	08004d31 	.word	0x08004d31
 8004748:	08004d31 	.word	0x08004d31
 800474c:	08004d31 	.word	0x08004d31
 8004750:	08004d31 	.word	0x08004d31
 8004754:	08004d31 	.word	0x08004d31
 8004758:	08004d31 	.word	0x08004d31
 800475c:	08004d31 	.word	0x08004d31
 8004760:	08004d31 	.word	0x08004d31
 8004764:	08004d31 	.word	0x08004d31
 8004768:	08004d31 	.word	0x08004d31
 800476c:	08004d31 	.word	0x08004d31
 8004770:	08004d31 	.word	0x08004d31
 8004774:	08004d31 	.word	0x08004d31
 8004778:	080047c7 	.word	0x080047c7
 800477c:	08004d31 	.word	0x08004d31
 8004780:	08004d31 	.word	0x08004d31
 8004784:	08004d31 	.word	0x08004d31
 8004788:	08004d31 	.word	0x08004d31
 800478c:	08004d31 	.word	0x08004d31
 8004790:	08004d31 	.word	0x08004d31
 8004794:	08004d31 	.word	0x08004d31
 8004798:	08004d31 	.word	0x08004d31
 800479c:	08004d31 	.word	0x08004d31
 80047a0:	080047c7 	.word	0x080047c7
 80047a4:	08004b3d 	.word	0x08004b3d
 80047a8:	080047c7 	.word	0x080047c7
 80047ac:	08004acd 	.word	0x08004acd
 80047b0:	08004a7d 	.word	0x08004a7d
 80047b4:	08004acd 	.word	0x08004acd
 80047b8:	2b78      	cmp	r3, #120	; 0x78
 80047ba:	f300 82b9 	bgt.w	8004d30 <_vsnprintf+0x9a0>
 80047be:	2b69      	cmp	r3, #105	; 0x69
 80047c0:	f6bf af48 	bge.w	8004654 <_vsnprintf+0x2c4>
 80047c4:	e2b4      	b.n	8004d30 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b78      	cmp	r3, #120	; 0x78
 80047cc:	d003      	beq.n	80047d6 <_vsnprintf+0x446>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	2b58      	cmp	r3, #88	; 0x58
 80047d4:	d102      	bne.n	80047dc <_vsnprintf+0x44c>
          base = 16U;
 80047d6:	2310      	movs	r3, #16
 80047d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80047da:	e013      	b.n	8004804 <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b6f      	cmp	r3, #111	; 0x6f
 80047e2:	d102      	bne.n	80047ea <_vsnprintf+0x45a>
          base =  8U;
 80047e4:	2308      	movs	r3, #8
 80047e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047e8:	e00c      	b.n	8004804 <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b62      	cmp	r3, #98	; 0x62
 80047f0:	d102      	bne.n	80047f8 <_vsnprintf+0x468>
          base =  2U;
 80047f2:	2302      	movs	r3, #2
 80047f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80047f6:	e005      	b.n	8004804 <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 80047f8:	230a      	movs	r3, #10
 80047fa:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80047fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047fe:	f023 0310 	bic.w	r3, r3, #16
 8004802:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b58      	cmp	r3, #88	; 0x58
 800480a:	d103      	bne.n	8004814 <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 800480c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800480e:	f043 0320 	orr.w	r3, r3, #32
 8004812:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b69      	cmp	r3, #105	; 0x69
 800481a:	d007      	beq.n	800482c <_vsnprintf+0x49c>
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b64      	cmp	r3, #100	; 0x64
 8004822:	d003      	beq.n	800482c <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004826:	f023 030c 	bic.w	r3, r3, #12
 800482a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800482c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800482e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 8004836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004838:	f023 0301 	bic.w	r3, r3, #1
 800483c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	2b69      	cmp	r3, #105	; 0x69
 8004844:	d004      	beq.n	8004850 <_vsnprintf+0x4c0>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	f040 8098 	bne.w	8004980 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8004850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004856:	2b00      	cmp	r3, #0
 8004858:	d031      	beq.n	80048be <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800485a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800485e:	3307      	adds	r3, #7
 8004860:	f023 0307 	bic.w	r3, r3, #7
 8004864:	f103 0208 	add.w	r2, r3, #8
 8004868:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004870:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004874:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004878:	2b00      	cmp	r3, #0
 800487a:	da06      	bge.n	800488a <_vsnprintf+0x4fa>
 800487c:	2100      	movs	r1, #0
 800487e:	f1d2 0800 	rsbs	r8, r2, #0
 8004882:	eb61 0903 	sbc.w	r9, r1, r3
 8004886:	4642      	mov	r2, r8
 8004888:	464b      	mov	r3, r9
 800488a:	69f9      	ldr	r1, [r7, #28]
 800488c:	0fc9      	lsrs	r1, r1, #31
 800488e:	b2c9      	uxtb	r1, r1
 8004890:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004892:	2400      	movs	r4, #0
 8004894:	4682      	mov	sl, r0
 8004896:	46a3      	mov	fp, r4
 8004898:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800489a:	9008      	str	r0, [sp, #32]
 800489c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800489e:	9007      	str	r0, [sp, #28]
 80048a0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80048a2:	9006      	str	r0, [sp, #24]
 80048a4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80048a8:	9102      	str	r1, [sp, #8]
 80048aa:	e9cd 2300 	strd	r2, r3, [sp]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048b2:	6939      	ldr	r1, [r7, #16]
 80048b4:	6978      	ldr	r0, [r7, #20]
 80048b6:	f7ff f81e 	bl	80038f6 <_ntoa_long_long>
 80048ba:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80048bc:	e0da      	b.n	8004a74 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80048be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d020      	beq.n	800490a <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 80048c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048cc:	1d1a      	adds	r2, r3, #4
 80048ce:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bfb8      	it	lt
 80048dc:	425b      	neglt	r3, r3
 80048de:	4619      	mov	r1, r3
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	0fdb      	lsrs	r3, r3, #31
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048e8:	9205      	str	r2, [sp, #20]
 80048ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048ec:	9204      	str	r2, [sp, #16]
 80048ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80048f0:	9203      	str	r2, [sp, #12]
 80048f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048f4:	9202      	str	r2, [sp, #8]
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	9100      	str	r1, [sp, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048fe:	6939      	ldr	r1, [r7, #16]
 8004900:	6978      	ldr	r0, [r7, #20]
 8004902:	f7fe ff92 	bl	800382a <_ntoa_long>
 8004906:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004908:	e0b4      	b.n	8004a74 <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800490a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800490c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <_vsnprintf+0x594>
 8004914:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004918:	1d1a      	adds	r2, r3, #4
 800491a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	e012      	b.n	800494a <_vsnprintf+0x5ba>
 8004924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <_vsnprintf+0x5ae>
 800492e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004932:	1d1a      	adds	r2, r3, #4
 8004934:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	b21b      	sxth	r3, r3
 800493c:	e005      	b.n	800494a <_vsnprintf+0x5ba>
 800493e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004942:	1d1a      	adds	r2, r3, #4
 8004944:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	2b00      	cmp	r3, #0
 8004950:	bfb8      	it	lt
 8004952:	425b      	neglt	r3, r3
 8004954:	4619      	mov	r1, r3
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	0fdb      	lsrs	r3, r3, #31
 800495a:	b2db      	uxtb	r3, r3
 800495c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800495e:	9205      	str	r2, [sp, #20]
 8004960:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004962:	9204      	str	r2, [sp, #16]
 8004964:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004966:	9203      	str	r2, [sp, #12]
 8004968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800496a:	9202      	str	r2, [sp, #8]
 800496c:	9301      	str	r3, [sp, #4]
 800496e:	9100      	str	r1, [sp, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004974:	6939      	ldr	r1, [r7, #16]
 8004976:	6978      	ldr	r0, [r7, #20]
 8004978:	f7fe ff57 	bl	800382a <_ntoa_long>
 800497c:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800497e:	e079      	b.n	8004a74 <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8004980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004986:	2b00      	cmp	r3, #0
 8004988:	d022      	beq.n	80049d0 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800498a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800498e:	3307      	adds	r3, #7
 8004990:	f023 0307 	bic.w	r3, r3, #7
 8004994:	f103 0208 	add.w	r2, r3, #8
 8004998:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80049a2:	2000      	movs	r0, #0
 80049a4:	460d      	mov	r5, r1
 80049a6:	4606      	mov	r6, r0
 80049a8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80049aa:	9108      	str	r1, [sp, #32]
 80049ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049ae:	9107      	str	r1, [sp, #28]
 80049b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049b2:	9106      	str	r1, [sp, #24]
 80049b4:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80049b8:	2100      	movs	r1, #0
 80049ba:	9102      	str	r1, [sp, #8]
 80049bc:	e9cd 2300 	strd	r2, r3, [sp]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049c4:	6939      	ldr	r1, [r7, #16]
 80049c6:	6978      	ldr	r0, [r7, #20]
 80049c8:	f7fe ff95 	bl	80038f6 <_ntoa_long_long>
 80049cc:	64f8      	str	r0, [r7, #76]	; 0x4c
 80049ce:	e051      	b.n	8004a74 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80049d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d018      	beq.n	8004a0c <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80049da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049de:	1d1a      	adds	r2, r3, #4
 80049e0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049e8:	9205      	str	r2, [sp, #20]
 80049ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049ec:	9204      	str	r2, [sp, #16]
 80049ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049f0:	9203      	str	r2, [sp, #12]
 80049f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049f4:	9202      	str	r2, [sp, #8]
 80049f6:	2200      	movs	r2, #0
 80049f8:	9201      	str	r2, [sp, #4]
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a00:	6939      	ldr	r1, [r7, #16]
 8004a02:	6978      	ldr	r0, [r7, #20]
 8004a04:	f7fe ff11 	bl	800382a <_ntoa_long>
 8004a08:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004a0a:	e033      	b.n	8004a74 <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <_vsnprintf+0x696>
 8004a16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a1a:	1d1a      	adds	r2, r3, #4
 8004a1c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	e012      	b.n	8004a4c <_vsnprintf+0x6bc>
 8004a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d007      	beq.n	8004a40 <_vsnprintf+0x6b0>
 8004a30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a34:	1d1a      	adds	r2, r3, #4
 8004a36:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	e005      	b.n	8004a4c <_vsnprintf+0x6bc>
 8004a40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a44:	1d1a      	adds	r2, r3, #4
 8004a46:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8004a4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a50:	9305      	str	r3, [sp, #20]
 8004a52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a54:	9304      	str	r3, [sp, #16]
 8004a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a58:	9303      	str	r3, [sp, #12]
 8004a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a5c:	9302      	str	r3, [sp, #8]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	9301      	str	r3, [sp, #4]
 8004a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a6a:	6939      	ldr	r1, [r7, #16]
 8004a6c:	6978      	ldr	r0, [r7, #20]
 8004a6e:	f7fe fedc 	bl	800382a <_ntoa_long>
 8004a72:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	3301      	adds	r3, #1
 8004a78:	60bb      	str	r3, [r7, #8]
        break;
 8004a7a:	e166      	b.n	8004d4a <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b46      	cmp	r3, #70	; 0x46
 8004a82:	d103      	bne.n	8004a8c <_vsnprintf+0x6fc>
 8004a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a86:	f043 0320 	orr.w	r3, r3, #32
 8004a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004a8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a90:	3307      	adds	r3, #7
 8004a92:	f023 0307 	bic.w	r3, r3, #7
 8004a96:	f103 0208 	add.w	r2, r3, #8
 8004a9a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004a9e:	ed93 7b00 	vldr	d7, [r3]
 8004aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aa4:	9302      	str	r3, [sp, #8]
 8004aa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004aa8:	9301      	str	r3, [sp, #4]
 8004aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	eeb0 0a47 	vmov.f32	s0, s14
 8004ab2:	eef0 0a67 	vmov.f32	s1, s15
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004aba:	6939      	ldr	r1, [r7, #16]
 8004abc:	6978      	ldr	r0, [r7, #20]
 8004abe:	f7fe ff87 	bl	80039d0 <_ftoa>
 8004ac2:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	60bb      	str	r3, [r7, #8]
        break;
 8004aca:	e13e      	b.n	8004d4a <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	2b67      	cmp	r3, #103	; 0x67
 8004ad2:	d003      	beq.n	8004adc <_vsnprintf+0x74c>
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b47      	cmp	r3, #71	; 0x47
 8004ada:	d103      	bne.n	8004ae4 <_vsnprintf+0x754>
 8004adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ade:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b45      	cmp	r3, #69	; 0x45
 8004aea:	d003      	beq.n	8004af4 <_vsnprintf+0x764>
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b47      	cmp	r3, #71	; 0x47
 8004af2:	d103      	bne.n	8004afc <_vsnprintf+0x76c>
 8004af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004af6:	f043 0320 	orr.w	r3, r3, #32
 8004afa:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004afc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b00:	3307      	adds	r3, #7
 8004b02:	f023 0307 	bic.w	r3, r3, #7
 8004b06:	f103 0208 	add.w	r2, r3, #8
 8004b0a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004b0e:	ed93 7b00 	vldr	d7, [r3]
 8004b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b14:	9302      	str	r3, [sp, #8]
 8004b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b18:	9301      	str	r3, [sp, #4]
 8004b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	eeb0 0a47 	vmov.f32	s0, s14
 8004b22:	eef0 0a67 	vmov.f32	s1, s15
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b2a:	6939      	ldr	r1, [r7, #16]
 8004b2c:	6978      	ldr	r0, [r7, #20]
 8004b2e:	f7ff f9a7 	bl	8003e80 <_etoa>
 8004b32:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	3301      	adds	r3, #1
 8004b38:	60bb      	str	r3, [r7, #8]
        break;
 8004b3a:	e106      	b.n	8004d4a <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8004b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10e      	bne.n	8004b68 <_vsnprintf+0x7d8>
          while (l++ < width) {
 8004b4a:	e007      	b.n	8004b5c <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 8004b4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b4e:	1c53      	adds	r3, r2, #1
 8004b50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b52:	697c      	ldr	r4, [r7, #20]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6939      	ldr	r1, [r7, #16]
 8004b58:	2020      	movs	r0, #32
 8004b5a:	47a0      	blx	r4
          while (l++ < width) {
 8004b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	647a      	str	r2, [r7, #68]	; 0x44
 8004b62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d8f1      	bhi.n	8004b4c <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8004b68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b6c:	1d1a      	adds	r2, r3, #4
 8004b6e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	b2d8      	uxtb	r0, r3
 8004b76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b78:	1c53      	adds	r3, r2, #1
 8004b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b7c:	697c      	ldr	r4, [r7, #20]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6939      	ldr	r1, [r7, #16]
 8004b82:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8004b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00e      	beq.n	8004bac <_vsnprintf+0x81c>
          while (l++ < width) {
 8004b8e:	e007      	b.n	8004ba0 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8004b90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b92:	1c53      	adds	r3, r2, #1
 8004b94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b96:	697c      	ldr	r4, [r7, #20]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6939      	ldr	r1, [r7, #16]
 8004b9c:	2020      	movs	r0, #32
 8004b9e:	47a0      	blx	r4
          while (l++ < width) {
 8004ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	647a      	str	r2, [r7, #68]	; 0x44
 8004ba6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d8f1      	bhi.n	8004b90 <_vsnprintf+0x800>
          }
        }
        format++;
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	60bb      	str	r3, [r7, #8]
        break;
 8004bb2:	e0ca      	b.n	8004d4a <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8004bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bb8:	1d1a      	adds	r2, r3, #4
 8004bba:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8004bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <_vsnprintf+0x83c>
 8004bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bca:	e001      	b.n	8004bd0 <_vsnprintf+0x840>
 8004bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004bd4:	f7fe fca5 	bl	8003522 <_strnlen_s>
 8004bd8:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8004bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 8004be4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004be8:	4293      	cmp	r3, r2
 8004bea:	bf28      	it	cs
 8004bec:	4613      	movcs	r3, r2
 8004bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8004bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d11a      	bne.n	8004c30 <_vsnprintf+0x8a0>
          while (l++ < width) {
 8004bfa:	e007      	b.n	8004c0c <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 8004bfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bfe:	1c53      	adds	r3, r2, #1
 8004c00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c02:	697c      	ldr	r4, [r7, #20]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6939      	ldr	r1, [r7, #16]
 8004c08:	2020      	movs	r0, #32
 8004c0a:	47a0      	blx	r4
          while (l++ < width) {
 8004c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d8f1      	bhi.n	8004bfc <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004c18:	e00a      	b.n	8004c30 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 8004c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	643a      	str	r2, [r7, #64]	; 0x40
 8004c20:	7818      	ldrb	r0, [r3, #0]
 8004c22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c24:	1c53      	adds	r3, r2, #1
 8004c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c28:	697c      	ldr	r4, [r7, #20]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6939      	ldr	r1, [r7, #16]
 8004c2e:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d009      	beq.n	8004c4c <_vsnprintf+0x8bc>
 8004c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0eb      	beq.n	8004c1a <_vsnprintf+0x88a>
 8004c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c44:	1e5a      	subs	r2, r3, #1
 8004c46:	657a      	str	r2, [r7, #84]	; 0x54
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e6      	bne.n	8004c1a <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8004c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00e      	beq.n	8004c74 <_vsnprintf+0x8e4>
          while (l++ < width) {
 8004c56:	e007      	b.n	8004c68 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8004c58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c5a:	1c53      	adds	r3, r2, #1
 8004c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c5e:	697c      	ldr	r4, [r7, #20]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6939      	ldr	r1, [r7, #16]
 8004c64:	2020      	movs	r0, #32
 8004c66:	47a0      	blx	r4
          while (l++ < width) {
 8004c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d8f1      	bhi.n	8004c58 <_vsnprintf+0x8c8>
          }
        }
        format++;
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	3301      	adds	r3, #1
 8004c78:	60bb      	str	r3, [r7, #8]
        break;
 8004c7a:	e066      	b.n	8004d4a <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8004c7c:	2308      	movs	r3, #8
 8004c7e:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8004c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c82:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8004c86:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8004c88:	2300      	movs	r3, #0
 8004c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8004c8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d023      	beq.n	8004cde <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8004c96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c9a:	1d1a      	adds	r2, r3, #4
 8004c9c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	603a      	str	r2, [r7, #0]
 8004ca8:	607b      	str	r3, [r7, #4]
 8004caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cac:	9308      	str	r3, [sp, #32]
 8004cae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cb0:	9307      	str	r3, [sp, #28]
 8004cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb4:	9306      	str	r3, [sp, #24]
 8004cb6:	f04f 0210 	mov.w	r2, #16
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	9302      	str	r3, [sp, #8]
 8004cc6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004cca:	e9cd 3400 	strd	r3, r4, [sp]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cd2:	6939      	ldr	r1, [r7, #16]
 8004cd4:	6978      	ldr	r0, [r7, #20]
 8004cd6:	f7fe fe0e 	bl	80038f6 <_ntoa_long_long>
 8004cda:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004cdc:	e018      	b.n	8004d10 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004cde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ce2:	1d1a      	adds	r2, r3, #4
 8004ce4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cee:	9305      	str	r3, [sp, #20]
 8004cf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cf2:	9304      	str	r3, [sp, #16]
 8004cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf6:	9303      	str	r3, [sp, #12]
 8004cf8:	2310      	movs	r3, #16
 8004cfa:	9302      	str	r3, [sp, #8]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	9301      	str	r3, [sp, #4]
 8004d00:	9200      	str	r2, [sp, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d06:	6939      	ldr	r1, [r7, #16]
 8004d08:	6978      	ldr	r0, [r7, #20]
 8004d0a:	f7fe fd8e 	bl	800382a <_ntoa_long>
 8004d0e:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	3301      	adds	r3, #1
 8004d14:	60bb      	str	r3, [r7, #8]
        break;
 8004d16:	e018      	b.n	8004d4a <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8004d18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d1a:	1c53      	adds	r3, r2, #1
 8004d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d1e:	697c      	ldr	r4, [r7, #20]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6939      	ldr	r1, [r7, #16]
 8004d24:	2025      	movs	r0, #37	; 0x25
 8004d26:	47a0      	blx	r4
        format++;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	60bb      	str	r3, [r7, #8]
        break;
 8004d2e:	e00c      	b.n	8004d4a <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	7818      	ldrb	r0, [r3, #0]
 8004d34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d36:	1c53      	adds	r3, r2, #1
 8004d38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d3a:	697c      	ldr	r4, [r7, #20]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6939      	ldr	r1, [r7, #16]
 8004d40:	47a0      	blx	r4
        format++;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	3301      	adds	r3, #1
 8004d46:	60bb      	str	r3, [r7, #8]
        break;
 8004d48:	bf00      	nop
  while (*format)
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f47f ab30 	bne.w	80043b4 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8004d54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d302      	bcc.n	8004d62 <_vsnprintf+0x9d2>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	1e5a      	subs	r2, r3, #1
 8004d60:	e000      	b.n	8004d64 <_vsnprintf+0x9d4>
 8004d62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d64:	697c      	ldr	r4, [r7, #20]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6939      	ldr	r1, [r7, #16]
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8004d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3764      	adds	r7, #100	; 0x64
 8004d74:	46bd      	mov	sp, r7
 8004d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d7a:	bf00      	nop

08004d7c <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 8004d7c:	b40e      	push	{r1, r2, r3}
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b087      	sub	sp, #28
 8004d82:	af02      	add	r7, sp, #8
 8004d84:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8004d86:	f107 0320 	add.w	r3, r7, #32
 8004d8a:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f04f 32ff 	mov.w	r2, #4294967295
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	4805      	ldr	r0, [pc, #20]	; (8004db0 <sprintf_+0x34>)
 8004d9a:	f7ff faf9 	bl	8004390 <_vsnprintf>
 8004d9e:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004da0:	68fb      	ldr	r3, [r7, #12]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dac:	b003      	add	sp, #12
 8004dae:	4770      	bx	lr
 8004db0:	080034d9 	.word	0x080034d9

08004db4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004dba:	4b11      	ldr	r3, [pc, #68]	; (8004e00 <HAL_MspInit+0x4c>)
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	4a10      	ldr	r2, [pc, #64]	; (8004e00 <HAL_MspInit+0x4c>)
 8004dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004dc6:	4b0e      	ldr	r3, [pc, #56]	; (8004e00 <HAL_MspInit+0x4c>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dce:	607b      	str	r3, [r7, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dd2:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <HAL_MspInit+0x4c>)
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd6:	4a0a      	ldr	r2, [pc, #40]	; (8004e00 <HAL_MspInit+0x4c>)
 8004dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8004dde:	4b08      	ldr	r3, [pc, #32]	; (8004e00 <HAL_MspInit+0x4c>)
 8004de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004dea:	2200      	movs	r2, #0
 8004dec:	210f      	movs	r1, #15
 8004dee:	f06f 0001 	mvn.w	r0, #1
 8004df2:	f002 fd63 	bl	80078bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40023800 	.word	0x40023800

08004e04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b0aa      	sub	sp, #168	; 0xa8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e0c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	605a      	str	r2, [r3, #4]
 8004e16:	609a      	str	r2, [r3, #8]
 8004e18:	60da      	str	r2, [r3, #12]
 8004e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e1c:	f107 0314 	add.w	r3, r7, #20
 8004e20:	2280      	movs	r2, #128	; 0x80
 8004e22:	2100      	movs	r1, #0
 8004e24:	4618      	mov	r0, r3
 8004e26:	f00d fd62 	bl	80128ee <memset>
  if(hi2c->Instance==I2C1)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a22      	ldr	r2, [pc, #136]	; (8004eb8 <HAL_I2C_MspInit+0xb4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d13c      	bne.n	8004eae <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004e34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e38:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8004e3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e3e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e40:	f107 0314 	add.w	r3, r7, #20
 8004e44:	4618      	mov	r0, r3
 8004e46:	f004 fe1f 	bl	8009a88 <HAL_RCCEx_PeriphCLKConfig>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8004e50:	f7fe fb3d 	bl	80034ce <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e54:	4b19      	ldr	r3, [pc, #100]	; (8004ebc <HAL_I2C_MspInit+0xb8>)
 8004e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e58:	4a18      	ldr	r2, [pc, #96]	; (8004ebc <HAL_I2C_MspInit+0xb8>)
 8004e5a:	f043 0302 	orr.w	r3, r3, #2
 8004e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8004e60:	4b16      	ldr	r3, [pc, #88]	; (8004ebc <HAL_I2C_MspInit+0xb8>)
 8004e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_MAG_SCL_Pin|I2C1_MAG_SDA_Pin;
 8004e6c:	23c0      	movs	r3, #192	; 0xc0
 8004e6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e72:	2312      	movs	r3, #18
 8004e74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e84:	2304      	movs	r3, #4
 8004e86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e8a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004e8e:	4619      	mov	r1, r3
 8004e90:	480b      	ldr	r0, [pc, #44]	; (8004ec0 <HAL_I2C_MspInit+0xbc>)
 8004e92:	f003 f947 	bl	8008124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e96:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <HAL_I2C_MspInit+0xb8>)
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	4a08      	ldr	r2, [pc, #32]	; (8004ebc <HAL_I2C_MspInit+0xb8>)
 8004e9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ea2:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <HAL_I2C_MspInit+0xb8>)
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004eae:	bf00      	nop
 8004eb0:	37a8      	adds	r7, #168	; 0xa8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40005400 	.word	0x40005400
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	40020400 	.word	0x40020400

08004ec4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08c      	sub	sp, #48	; 0x30
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ecc:	f107 031c 	add.w	r3, r7, #28
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	605a      	str	r2, [r3, #4]
 8004ed6:	609a      	str	r2, [r3, #8]
 8004ed8:	60da      	str	r2, [r3, #12]
 8004eda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a32      	ldr	r2, [pc, #200]	; (8004fac <HAL_SPI_MspInit+0xe8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d130      	bne.n	8004f48 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ee6:	4b32      	ldr	r3, [pc, #200]	; (8004fb0 <HAL_SPI_MspInit+0xec>)
 8004ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eea:	4a31      	ldr	r2, [pc, #196]	; (8004fb0 <HAL_SPI_MspInit+0xec>)
 8004eec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ef2:	4b2f      	ldr	r3, [pc, #188]	; (8004fb0 <HAL_SPI_MspInit+0xec>)
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004efa:	61bb      	str	r3, [r7, #24]
 8004efc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004efe:	4b2c      	ldr	r3, [pc, #176]	; (8004fb0 <HAL_SPI_MspInit+0xec>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	4a2b      	ldr	r2, [pc, #172]	; (8004fb0 <HAL_SPI_MspInit+0xec>)
 8004f04:	f043 0301 	orr.w	r3, r3, #1
 8004f08:	6313      	str	r3, [r2, #48]	; 0x30
 8004f0a:	4b29      	ldr	r3, [pc, #164]	; (8004fb0 <HAL_SPI_MspInit+0xec>)
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_ESP_NSS_Pin|SPI1_ESP_SCK_Pin|SPI1_ESP_MISO_Pin|SPI1_ESP_MOSI_Pin;
 8004f16:	23f0      	movs	r3, #240	; 0xf0
 8004f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f22:	2303      	movs	r3, #3
 8004f24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004f26:	2305      	movs	r3, #5
 8004f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f2a:	f107 031c 	add.w	r3, r7, #28
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4820      	ldr	r0, [pc, #128]	; (8004fb4 <HAL_SPI_MspInit+0xf0>)
 8004f32:	f003 f8f7 	bl	8008124 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8004f36:	2200      	movs	r2, #0
 8004f38:	2105      	movs	r1, #5
 8004f3a:	2023      	movs	r0, #35	; 0x23
 8004f3c:	f002 fcbe 	bl	80078bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004f40:	2023      	movs	r0, #35	; 0x23
 8004f42:	f002 fcd7 	bl	80078f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004f46:	e02d      	b.n	8004fa4 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a1a      	ldr	r2, [pc, #104]	; (8004fb8 <HAL_SPI_MspInit+0xf4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d128      	bne.n	8004fa4 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004f52:	4b17      	ldr	r3, [pc, #92]	; (8004fb0 <HAL_SPI_MspInit+0xec>)
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	4a16      	ldr	r2, [pc, #88]	; (8004fb0 <HAL_SPI_MspInit+0xec>)
 8004f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f5e:	4b14      	ldr	r3, [pc, #80]	; (8004fb0 <HAL_SPI_MspInit+0xec>)
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f6a:	4b11      	ldr	r3, [pc, #68]	; (8004fb0 <HAL_SPI_MspInit+0xec>)
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	4a10      	ldr	r2, [pc, #64]	; (8004fb0 <HAL_SPI_MspInit+0xec>)
 8004f70:	f043 0302 	orr.w	r3, r3, #2
 8004f74:	6313      	str	r3, [r2, #48]	; 0x30
 8004f76:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <HAL_SPI_MspInit+0xec>)
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_IMU_SCK_Pin|SPI2_IMU_MISO_Pin|SPI2_IMU_MOSI_Pin;
 8004f82:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f88:	2302      	movs	r3, #2
 8004f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f90:	2303      	movs	r3, #3
 8004f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004f94:	2305      	movs	r3, #5
 8004f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f98:	f107 031c 	add.w	r3, r7, #28
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4807      	ldr	r0, [pc, #28]	; (8004fbc <HAL_SPI_MspInit+0xf8>)
 8004fa0:	f003 f8c0 	bl	8008124 <HAL_GPIO_Init>
}
 8004fa4:	bf00      	nop
 8004fa6:	3730      	adds	r7, #48	; 0x30
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40013000 	.word	0x40013000
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	40020000 	.word	0x40020000
 8004fb8:	40003800 	.word	0x40003800
 8004fbc:	40020400 	.word	0x40020400

08004fc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a0a      	ldr	r2, [pc, #40]	; (8004ff8 <HAL_TIM_Base_MspInit+0x38>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d10b      	bne.n	8004fea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fd2:	4b0a      	ldr	r3, [pc, #40]	; (8004ffc <HAL_TIM_Base_MspInit+0x3c>)
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd6:	4a09      	ldr	r2, [pc, #36]	; (8004ffc <HAL_TIM_Base_MspInit+0x3c>)
 8004fd8:	f043 0301 	orr.w	r3, r3, #1
 8004fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8004fde:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <HAL_TIM_Base_MspInit+0x3c>)
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004fea:	bf00      	nop
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40010000 	.word	0x40010000
 8004ffc:	40023800 	.word	0x40023800

08005000 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08a      	sub	sp, #40	; 0x28
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005008:	f107 0314 	add.w	r3, r7, #20
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	605a      	str	r2, [r3, #4]
 8005012:	609a      	str	r2, [r3, #8]
 8005014:	60da      	str	r2, [r3, #12]
 8005016:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a1b      	ldr	r2, [pc, #108]	; (800508c <HAL_TIM_IC_MspInit+0x8c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d12f      	bne.n	8005082 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005022:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <HAL_TIM_IC_MspInit+0x90>)
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	4a1a      	ldr	r2, [pc, #104]	; (8005090 <HAL_TIM_IC_MspInit+0x90>)
 8005028:	f043 0302 	orr.w	r3, r3, #2
 800502c:	6413      	str	r3, [r2, #64]	; 0x40
 800502e:	4b18      	ldr	r3, [pc, #96]	; (8005090 <HAL_TIM_IC_MspInit+0x90>)
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800503a:	4b15      	ldr	r3, [pc, #84]	; (8005090 <HAL_TIM_IC_MspInit+0x90>)
 800503c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503e:	4a14      	ldr	r2, [pc, #80]	; (8005090 <HAL_TIM_IC_MspInit+0x90>)
 8005040:	f043 0304 	orr.w	r3, r3, #4
 8005044:	6313      	str	r3, [r2, #48]	; 0x30
 8005046:	4b12      	ldr	r3, [pc, #72]	; (8005090 <HAL_TIM_IC_MspInit+0x90>)
 8005048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_DIS_ECHO_CH1_Pin;
 8005052:	2340      	movs	r3, #64	; 0x40
 8005054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005056:	2302      	movs	r3, #2
 8005058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800505a:	2300      	movs	r3, #0
 800505c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800505e:	2300      	movs	r3, #0
 8005060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005062:	2302      	movs	r3, #2
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM3_DIS_ECHO_CH1_GPIO_Port, &GPIO_InitStruct);
 8005066:	f107 0314 	add.w	r3, r7, #20
 800506a:	4619      	mov	r1, r3
 800506c:	4809      	ldr	r0, [pc, #36]	; (8005094 <HAL_TIM_IC_MspInit+0x94>)
 800506e:	f003 f859 	bl	8008124 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8005072:	2200      	movs	r2, #0
 8005074:	2106      	movs	r1, #6
 8005076:	201d      	movs	r0, #29
 8005078:	f002 fc20 	bl	80078bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800507c:	201d      	movs	r0, #29
 800507e:	f002 fc39 	bl	80078f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005082:	bf00      	nop
 8005084:	3728      	adds	r7, #40	; 0x28
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40000400 	.word	0x40000400
 8005090:	40023800 	.word	0x40023800
 8005094:	40020800 	.word	0x40020800

08005098 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050a0:	f107 030c 	add.w	r3, r7, #12
 80050a4:	2200      	movs	r2, #0
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	605a      	str	r2, [r3, #4]
 80050aa:	609a      	str	r2, [r3, #8]
 80050ac:	60da      	str	r2, [r3, #12]
 80050ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a11      	ldr	r2, [pc, #68]	; (80050fc <HAL_TIM_MspPostInit+0x64>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d11c      	bne.n	80050f4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80050ba:	4b11      	ldr	r3, [pc, #68]	; (8005100 <HAL_TIM_MspPostInit+0x68>)
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	4a10      	ldr	r2, [pc, #64]	; (8005100 <HAL_TIM_MspPostInit+0x68>)
 80050c0:	f043 0310 	orr.w	r3, r3, #16
 80050c4:	6313      	str	r3, [r2, #48]	; 0x30
 80050c6:	4b0e      	ldr	r3, [pc, #56]	; (8005100 <HAL_TIM_MspPostInit+0x68>)
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	60bb      	str	r3, [r7, #8]
 80050d0:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_ESC1_CH1_Pin|TIM1_ESC2_CH2_Pin|TIM1_ESC3_CH3_Pin|TIM1_ESC4_CH4_Pin;
 80050d2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80050d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d8:	2302      	movs	r3, #2
 80050da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80050e4:	2301      	movs	r3, #1
 80050e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80050e8:	f107 030c 	add.w	r3, r7, #12
 80050ec:	4619      	mov	r1, r3
 80050ee:	4805      	ldr	r0, [pc, #20]	; (8005104 <HAL_TIM_MspPostInit+0x6c>)
 80050f0:	f003 f818 	bl	8008124 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80050f4:	bf00      	nop
 80050f6:	3720      	adds	r7, #32
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	40010000 	.word	0x40010000
 8005100:	40023800 	.word	0x40023800
 8005104:	40021000 	.word	0x40021000

08005108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b0ae      	sub	sp, #184	; 0xb8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005110:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	605a      	str	r2, [r3, #4]
 800511a:	609a      	str	r2, [r3, #8]
 800511c:	60da      	str	r2, [r3, #12]
 800511e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005124:	2280      	movs	r2, #128	; 0x80
 8005126:	2100      	movs	r1, #0
 8005128:	4618      	mov	r0, r3
 800512a:	f00d fbe0 	bl	80128ee <memset>
  if(huart->Instance==UART4)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a83      	ldr	r2, [pc, #524]	; (8005340 <HAL_UART_MspInit+0x238>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d144      	bne.n	80051c2 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 800513e:	2340      	movs	r3, #64	; 0x40
 8005140:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005146:	4618      	mov	r0, r3
 8005148:	f004 fc9e 	bl	8009a88 <HAL_RCCEx_PeriphCLKConfig>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005152:	f7fe f9bc 	bl	80034ce <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005156:	4b7b      	ldr	r3, [pc, #492]	; (8005344 <HAL_UART_MspInit+0x23c>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	4a7a      	ldr	r2, [pc, #488]	; (8005344 <HAL_UART_MspInit+0x23c>)
 800515c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005160:	6413      	str	r3, [r2, #64]	; 0x40
 8005162:	4b78      	ldr	r3, [pc, #480]	; (8005344 <HAL_UART_MspInit+0x23c>)
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800516a:	623b      	str	r3, [r7, #32]
 800516c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800516e:	4b75      	ldr	r3, [pc, #468]	; (8005344 <HAL_UART_MspInit+0x23c>)
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	4a74      	ldr	r2, [pc, #464]	; (8005344 <HAL_UART_MspInit+0x23c>)
 8005174:	f043 0301 	orr.w	r3, r3, #1
 8005178:	6313      	str	r3, [r2, #48]	; 0x30
 800517a:	4b72      	ldr	r3, [pc, #456]	; (8005344 <HAL_UART_MspInit+0x23c>)
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	61fb      	str	r3, [r7, #28]
 8005184:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_GPS_TX_Pin|UART4_GPS_RX_Pin;
 8005186:	2303      	movs	r3, #3
 8005188:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800518c:	2302      	movs	r3, #2
 800518e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005192:	2300      	movs	r3, #0
 8005194:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005198:	2303      	movs	r3, #3
 800519a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800519e:	2308      	movs	r3, #8
 80051a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80051a8:	4619      	mov	r1, r3
 80051aa:	4867      	ldr	r0, [pc, #412]	; (8005348 <HAL_UART_MspInit+0x240>)
 80051ac:	f002 ffba 	bl	8008124 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 80051b0:	2200      	movs	r2, #0
 80051b2:	2106      	movs	r1, #6
 80051b4:	2034      	movs	r0, #52	; 0x34
 80051b6:	f002 fb81 	bl	80078bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80051ba:	2034      	movs	r0, #52	; 0x34
 80051bc:	f002 fb9a 	bl	80078f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80051c0:	e0b9      	b.n	8005336 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART2)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a61      	ldr	r2, [pc, #388]	; (800534c <HAL_UART_MspInit+0x244>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d172      	bne.n	80052b2 <HAL_UART_MspInit+0x1aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80051cc:	2380      	movs	r3, #128	; 0x80
 80051ce:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80051d0:	2304      	movs	r3, #4
 80051d2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80051d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051d8:	4618      	mov	r0, r3
 80051da:	f004 fc55 	bl	8009a88 <HAL_RCCEx_PeriphCLKConfig>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80051e4:	f7fe f973 	bl	80034ce <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80051e8:	4b56      	ldr	r3, [pc, #344]	; (8005344 <HAL_UART_MspInit+0x23c>)
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	4a55      	ldr	r2, [pc, #340]	; (8005344 <HAL_UART_MspInit+0x23c>)
 80051ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051f2:	6413      	str	r3, [r2, #64]	; 0x40
 80051f4:	4b53      	ldr	r3, [pc, #332]	; (8005344 <HAL_UART_MspInit+0x23c>)
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fc:	61bb      	str	r3, [r7, #24]
 80051fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005200:	4b50      	ldr	r3, [pc, #320]	; (8005344 <HAL_UART_MspInit+0x23c>)
 8005202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005204:	4a4f      	ldr	r2, [pc, #316]	; (8005344 <HAL_UART_MspInit+0x23c>)
 8005206:	f043 0308 	orr.w	r3, r3, #8
 800520a:	6313      	str	r3, [r2, #48]	; 0x30
 800520c:	4b4d      	ldr	r3, [pc, #308]	; (8005344 <HAL_UART_MspInit+0x23c>)
 800520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005210:	f003 0308 	and.w	r3, r3, #8
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_IBUS_TX_Pin|UART2_IBUS_RX_Pin;
 8005218:	2360      	movs	r3, #96	; 0x60
 800521a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800521e:	2302      	movs	r3, #2
 8005220:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005224:	2300      	movs	r3, #0
 8005226:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800522a:	2303      	movs	r3, #3
 800522c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005230:	2307      	movs	r3, #7
 8005232:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005236:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800523a:	4619      	mov	r1, r3
 800523c:	4844      	ldr	r0, [pc, #272]	; (8005350 <HAL_UART_MspInit+0x248>)
 800523e:	f002 ff71 	bl	8008124 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005242:	4b44      	ldr	r3, [pc, #272]	; (8005354 <HAL_UART_MspInit+0x24c>)
 8005244:	4a44      	ldr	r2, [pc, #272]	; (8005358 <HAL_UART_MspInit+0x250>)
 8005246:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005248:	4b42      	ldr	r3, [pc, #264]	; (8005354 <HAL_UART_MspInit+0x24c>)
 800524a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800524e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005250:	4b40      	ldr	r3, [pc, #256]	; (8005354 <HAL_UART_MspInit+0x24c>)
 8005252:	2200      	movs	r2, #0
 8005254:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005256:	4b3f      	ldr	r3, [pc, #252]	; (8005354 <HAL_UART_MspInit+0x24c>)
 8005258:	2200      	movs	r2, #0
 800525a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800525c:	4b3d      	ldr	r3, [pc, #244]	; (8005354 <HAL_UART_MspInit+0x24c>)
 800525e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005262:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005264:	4b3b      	ldr	r3, [pc, #236]	; (8005354 <HAL_UART_MspInit+0x24c>)
 8005266:	2200      	movs	r2, #0
 8005268:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800526a:	4b3a      	ldr	r3, [pc, #232]	; (8005354 <HAL_UART_MspInit+0x24c>)
 800526c:	2200      	movs	r2, #0
 800526e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005270:	4b38      	ldr	r3, [pc, #224]	; (8005354 <HAL_UART_MspInit+0x24c>)
 8005272:	2200      	movs	r2, #0
 8005274:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005276:	4b37      	ldr	r3, [pc, #220]	; (8005354 <HAL_UART_MspInit+0x24c>)
 8005278:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800527c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800527e:	4b35      	ldr	r3, [pc, #212]	; (8005354 <HAL_UART_MspInit+0x24c>)
 8005280:	2200      	movs	r2, #0
 8005282:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005284:	4833      	ldr	r0, [pc, #204]	; (8005354 <HAL_UART_MspInit+0x24c>)
 8005286:	f002 fb43 	bl	8007910 <HAL_DMA_Init>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8005290:	f7fe f91d 	bl	80034ce <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a2f      	ldr	r2, [pc, #188]	; (8005354 <HAL_UART_MspInit+0x24c>)
 8005298:	675a      	str	r2, [r3, #116]	; 0x74
 800529a:	4a2e      	ldr	r2, [pc, #184]	; (8005354 <HAL_UART_MspInit+0x24c>)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 80052a0:	2200      	movs	r2, #0
 80052a2:	2107      	movs	r1, #7
 80052a4:	2026      	movs	r0, #38	; 0x26
 80052a6:	f002 fb09 	bl	80078bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80052aa:	2026      	movs	r0, #38	; 0x26
 80052ac:	f002 fb22 	bl	80078f4 <HAL_NVIC_EnableIRQ>
}
 80052b0:	e041      	b.n	8005336 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a29      	ldr	r2, [pc, #164]	; (800535c <HAL_UART_MspInit+0x254>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d13c      	bne.n	8005336 <HAL_UART_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80052bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 80052c2:	2310      	movs	r3, #16
 80052c4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052ca:	4618      	mov	r0, r3
 80052cc:	f004 fbdc 	bl	8009a88 <HAL_RCCEx_PeriphCLKConfig>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 80052d6:	f7fe f8fa 	bl	80034ce <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80052da:	4b1a      	ldr	r3, [pc, #104]	; (8005344 <HAL_UART_MspInit+0x23c>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	4a19      	ldr	r2, [pc, #100]	; (8005344 <HAL_UART_MspInit+0x23c>)
 80052e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052e4:	6413      	str	r3, [r2, #64]	; 0x40
 80052e6:	4b17      	ldr	r3, [pc, #92]	; (8005344 <HAL_UART_MspInit+0x23c>)
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ee:	613b      	str	r3, [r7, #16]
 80052f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052f2:	4b14      	ldr	r3, [pc, #80]	; (8005344 <HAL_UART_MspInit+0x23c>)
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	4a13      	ldr	r2, [pc, #76]	; (8005344 <HAL_UART_MspInit+0x23c>)
 80052f8:	f043 0304 	orr.w	r3, r3, #4
 80052fc:	6313      	str	r3, [r2, #48]	; 0x30
 80052fe:	4b11      	ldr	r3, [pc, #68]	; (8005344 <HAL_UART_MspInit+0x23c>)
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	f003 0304 	and.w	r3, r3, #4
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_PC_TX_Pin|UART3_PC_RX_Pin;
 800530a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800530e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005312:	2302      	movs	r3, #2
 8005314:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005318:	2300      	movs	r3, #0
 800531a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800531e:	2303      	movs	r3, #3
 8005320:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005324:	2307      	movs	r3, #7
 8005326:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800532a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800532e:	4619      	mov	r1, r3
 8005330:	480b      	ldr	r0, [pc, #44]	; (8005360 <HAL_UART_MspInit+0x258>)
 8005332:	f002 fef7 	bl	8008124 <HAL_GPIO_Init>
}
 8005336:	bf00      	nop
 8005338:	37b8      	adds	r7, #184	; 0xb8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	40004c00 	.word	0x40004c00
 8005344:	40023800 	.word	0x40023800
 8005348:	40020000 	.word	0x40020000
 800534c:	40004400 	.word	0x40004400
 8005350:	40020c00 	.word	0x40020c00
 8005354:	20000c5c 	.word	0x20000c5c
 8005358:	40026088 	.word	0x40026088
 800535c:	40004800 	.word	0x40004800
 8005360:	40020800 	.word	0x40020800

08005364 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08e      	sub	sp, #56	; 0x38
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8005374:	4b34      	ldr	r3, [pc, #208]	; (8005448 <HAL_InitTick+0xe4>)
 8005376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005378:	4a33      	ldr	r2, [pc, #204]	; (8005448 <HAL_InitTick+0xe4>)
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	6413      	str	r3, [r2, #64]	; 0x40
 8005380:	4b31      	ldr	r3, [pc, #196]	; (8005448 <HAL_InitTick+0xe4>)
 8005382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800538c:	f107 0210 	add.w	r2, r7, #16
 8005390:	f107 0314 	add.w	r3, r7, #20
 8005394:	4611      	mov	r1, r2
 8005396:	4618      	mov	r0, r3
 8005398:	f004 fb44 	bl	8009a24 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80053a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d103      	bne.n	80053ae <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80053a6:	f004 fb15 	bl	80099d4 <HAL_RCC_GetPCLK1Freq>
 80053aa:	6378      	str	r0, [r7, #52]	; 0x34
 80053ac:	e004      	b.n	80053b8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80053ae:	f004 fb11 	bl	80099d4 <HAL_RCC_GetPCLK1Freq>
 80053b2:	4603      	mov	r3, r0
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80053b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ba:	4a24      	ldr	r2, [pc, #144]	; (800544c <HAL_InitTick+0xe8>)
 80053bc:	fba2 2303 	umull	r2, r3, r2, r3
 80053c0:	0c9b      	lsrs	r3, r3, #18
 80053c2:	3b01      	subs	r3, #1
 80053c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80053c6:	4b22      	ldr	r3, [pc, #136]	; (8005450 <HAL_InitTick+0xec>)
 80053c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80053cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80053ce:	4b20      	ldr	r3, [pc, #128]	; (8005450 <HAL_InitTick+0xec>)
 80053d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80053d4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80053d6:	4a1e      	ldr	r2, [pc, #120]	; (8005450 <HAL_InitTick+0xec>)
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80053dc:	4b1c      	ldr	r3, [pc, #112]	; (8005450 <HAL_InitTick+0xec>)
 80053de:	2200      	movs	r2, #0
 80053e0:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053e2:	4b1b      	ldr	r3, [pc, #108]	; (8005450 <HAL_InitTick+0xec>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053e8:	4b19      	ldr	r3, [pc, #100]	; (8005450 <HAL_InitTick+0xec>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80053ee:	4818      	ldr	r0, [pc, #96]	; (8005450 <HAL_InitTick+0xec>)
 80053f0:	f006 fa3c 	bl	800b86c <HAL_TIM_Base_Init>
 80053f4:	4603      	mov	r3, r0
 80053f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80053fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d11b      	bne.n	800543a <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8005402:	4813      	ldr	r0, [pc, #76]	; (8005450 <HAL_InitTick+0xec>)
 8005404:	f006 fa8a 	bl	800b91c <HAL_TIM_Base_Start_IT>
 8005408:	4603      	mov	r3, r0
 800540a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800540e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005412:	2b00      	cmp	r3, #0
 8005414:	d111      	bne.n	800543a <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005416:	201c      	movs	r0, #28
 8005418:	f002 fa6c 	bl	80078f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b0f      	cmp	r3, #15
 8005420:	d808      	bhi.n	8005434 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8005422:	2200      	movs	r2, #0
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	201c      	movs	r0, #28
 8005428:	f002 fa48 	bl	80078bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800542c:	4a09      	ldr	r2, [pc, #36]	; (8005454 <HAL_InitTick+0xf0>)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	e002      	b.n	800543a <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800543a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800543e:	4618      	mov	r0, r3
 8005440:	3738      	adds	r7, #56	; 0x38
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40023800 	.word	0x40023800
 800544c:	431bde83 	.word	0x431bde83
 8005450:	20000cfc 	.word	0x20000cfc
 8005454:	2000000c 	.word	0x2000000c

08005458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800545c:	e7fe      	b.n	800545c <NMI_Handler+0x4>

0800545e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800545e:	b480      	push	{r7}
 8005460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005462:	e7fe      	b.n	8005462 <HardFault_Handler+0x4>

08005464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005468:	e7fe      	b.n	8005468 <MemManage_Handler+0x4>

0800546a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800546a:	b480      	push	{r7}
 800546c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800546e:	e7fe      	b.n	800546e <BusFault_Handler+0x4>

08005470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005474:	e7fe      	b.n	8005474 <UsageFault_Handler+0x4>

08005476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005476:	b480      	push	{r7}
 8005478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800547a:	bf00      	nop
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005488:	4802      	ldr	r0, [pc, #8]	; (8005494 <DMA1_Stream5_IRQHandler+0x10>)
 800548a:	f002 fbe1 	bl	8007c50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800548e:	bf00      	nop
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	20000c5c 	.word	0x20000c5c

08005498 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800549c:	4802      	ldr	r0, [pc, #8]	; (80054a8 <TIM2_IRQHandler+0x10>)
 800549e:	f006 fdb9 	bl	800c014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80054a2:	bf00      	nop
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20000cfc 	.word	0x20000cfc

080054ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80054b0:	4802      	ldr	r0, [pc, #8]	; (80054bc <TIM3_IRQHandler+0x10>)
 80054b2:	f006 fdaf 	bl	800c014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80054b6:	bf00      	nop
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	20000a78 	.word	0x20000a78

080054c0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80054c4:	4802      	ldr	r0, [pc, #8]	; (80054d0 <SPI1_IRQHandler+0x10>)
 80054c6:	f005 fce5 	bl	800ae94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80054ca:	bf00      	nop
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20000964 	.word	0x20000964

080054d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80054d8:	4802      	ldr	r0, [pc, #8]	; (80054e4 <USART2_IRQHandler+0x10>)
 80054da:	f008 f903 	bl	800d6e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80054de:	bf00      	nop
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20000b4c 	.word	0x20000b4c

080054e8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80054ec:	4802      	ldr	r0, [pc, #8]	; (80054f8 <UART4_IRQHandler+0x10>)
 80054ee:	f008 f8f9 	bl	800d6e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80054f2:	bf00      	nop
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	20000ac4 	.word	0x20000ac4

080054fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
  return 1;
 8005500:	2301      	movs	r3, #1
}
 8005502:	4618      	mov	r0, r3
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <_kill>:

int _kill(int pid, int sig)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005516:	f00d faa5 	bl	8012a64 <__errno>
 800551a:	4603      	mov	r3, r0
 800551c:	2216      	movs	r2, #22
 800551e:	601a      	str	r2, [r3, #0]
  return -1;
 8005520:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <_exit>:

void _exit (int status)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005534:	f04f 31ff 	mov.w	r1, #4294967295
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff ffe7 	bl	800550c <_kill>
  while (1) {}    /* Make sure we hang here */
 800553e:	e7fe      	b.n	800553e <_exit+0x12>

08005540 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800554c:	2300      	movs	r3, #0
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	e00a      	b.n	8005568 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005552:	f3af 8000 	nop.w
 8005556:	4601      	mov	r1, r0
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	60ba      	str	r2, [r7, #8]
 800555e:	b2ca      	uxtb	r2, r1
 8005560:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	3301      	adds	r3, #1
 8005566:	617b      	str	r3, [r7, #20]
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	429a      	cmp	r2, r3
 800556e:	dbf0      	blt.n	8005552 <_read+0x12>
  }

  return len;
 8005570:	687b      	ldr	r3, [r7, #4]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b086      	sub	sp, #24
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	e009      	b.n	80055a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	60ba      	str	r2, [r7, #8]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	4618      	mov	r0, r3
 8005596:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	3301      	adds	r3, #1
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	dbf1      	blt.n	800558c <_write+0x12>
  }
  return len;
 80055a8:	687b      	ldr	r3, [r7, #4]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <_close>:

int _close(int file)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80055ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055be:	4618      	mov	r0, r3
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055da:	605a      	str	r2, [r3, #4]
  return 0;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <_isatty>:

int _isatty(int file)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80055f2:	2301      	movs	r3, #1
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
	...

0800561c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005624:	4a14      	ldr	r2, [pc, #80]	; (8005678 <_sbrk+0x5c>)
 8005626:	4b15      	ldr	r3, [pc, #84]	; (800567c <_sbrk+0x60>)
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005630:	4b13      	ldr	r3, [pc, #76]	; (8005680 <_sbrk+0x64>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d102      	bne.n	800563e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005638:	4b11      	ldr	r3, [pc, #68]	; (8005680 <_sbrk+0x64>)
 800563a:	4a12      	ldr	r2, [pc, #72]	; (8005684 <_sbrk+0x68>)
 800563c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800563e:	4b10      	ldr	r3, [pc, #64]	; (8005680 <_sbrk+0x64>)
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4413      	add	r3, r2
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	429a      	cmp	r2, r3
 800564a:	d207      	bcs.n	800565c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800564c:	f00d fa0a 	bl	8012a64 <__errno>
 8005650:	4603      	mov	r3, r0
 8005652:	220c      	movs	r2, #12
 8005654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005656:	f04f 33ff 	mov.w	r3, #4294967295
 800565a:	e009      	b.n	8005670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800565c:	4b08      	ldr	r3, [pc, #32]	; (8005680 <_sbrk+0x64>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005662:	4b07      	ldr	r3, [pc, #28]	; (8005680 <_sbrk+0x64>)
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4413      	add	r3, r2
 800566a:	4a05      	ldr	r2, [pc, #20]	; (8005680 <_sbrk+0x64>)
 800566c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800566e:	68fb      	ldr	r3, [r7, #12]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	20040000 	.word	0x20040000
 800567c:	00000400 	.word	0x00000400
 8005680:	20000d48 	.word	0x20000d48
 8005684:	20004be8 	.word	0x20004be8

08005688 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800568c:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <SystemInit+0x20>)
 800568e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005692:	4a05      	ldr	r2, [pc, #20]	; (80056a8 <SystemInit+0x20>)
 8005694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800569c:	bf00      	nop
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	e000ed00 	.word	0xe000ed00

080056ac <GPS_validate>:

	return 0;
}

int GPS_validate(char *nmeastr)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
	char check[3];
	char checkcalcstr[3];
	int i;
	int calculated_check;

	i = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	617b      	str	r3, [r7, #20]
	calculated_check = 0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	613b      	str	r3, [r7, #16]

	// check to ensure that the string starts with a $
	if (nmeastr[i] == '$')
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	4413      	add	r3, r2
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b24      	cmp	r3, #36	; 0x24
 80056c6:	d103      	bne.n	80056d0 <GPS_validate+0x24>
		i++;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	3301      	adds	r3, #1
 80056cc:	617b      	str	r3, [r7, #20]
	else
		return 0;

	//No NULL reached, 75 char largest possible NMEA message, no '*' reached
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 80056ce:	e00c      	b.n	80056ea <GPS_validate+0x3e>
		return 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	e047      	b.n	8005764 <GPS_validate+0xb8>
	{
		calculated_check ^= nmeastr[i]; // calculate the checksum
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	4413      	add	r3, r2
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	461a      	mov	r2, r3
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	4053      	eors	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]
		i++;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	3301      	adds	r3, #1
 80056e8:	617b      	str	r3, [r7, #20]
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	4413      	add	r3, r2
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d008      	beq.n	8005708 <GPS_validate+0x5c>
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	4413      	add	r3, r2
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005700:	d002      	beq.n	8005708 <GPS_validate+0x5c>
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b4a      	cmp	r3, #74	; 0x4a
 8005706:	dde5      	ble.n	80056d4 <GPS_validate+0x28>
	}

	if (i >= 75)
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2b4a      	cmp	r3, #74	; 0x4a
 800570c:	dd01      	ble.n	8005712 <GPS_validate+0x66>
	{
		return 0; // the string was too long so return an error
 800570e:	2300      	movs	r3, #0
 8005710:	e028      	b.n	8005764 <GPS_validate+0xb8>
	}

	if (nmeastr[i] == '*')
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	4413      	add	r3, r2
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b2a      	cmp	r3, #42	; 0x2a
 800571c:	d119      	bne.n	8005752 <GPS_validate+0xa6>
	{
		check[0] = nmeastr[i + 1];    //put hex chars in check string
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	3301      	adds	r3, #1
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	4413      	add	r3, r2
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	733b      	strb	r3, [r7, #12]
		check[1] = nmeastr[i + 2];
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	3302      	adds	r3, #2
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	4413      	add	r3, r2
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	737b      	strb	r3, [r7, #13]
		check[2] = 0;
 8005736:	2300      	movs	r3, #0
 8005738:	73bb      	strb	r3, [r7, #14]
	}
	else
		return 0;    // no checksum separator found there for invalid

	sprintf(checkcalcstr, "%02X", calculated_check);
 800573a:	f107 0308 	add.w	r3, r7, #8
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	490a      	ldr	r1, [pc, #40]	; (800576c <GPS_validate+0xc0>)
 8005742:	4618      	mov	r0, r3
 8005744:	f00d f842 	bl	80127cc <siprintf>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8005748:	7a3a      	ldrb	r2, [r7, #8]
 800574a:	7b3b      	ldrb	r3, [r7, #12]
			1 : 0;
 800574c:	429a      	cmp	r2, r3
 800574e:	d108      	bne.n	8005762 <GPS_validate+0xb6>
 8005750:	e001      	b.n	8005756 <GPS_validate+0xaa>
		return 0;    // no checksum separator found there for invalid
 8005752:	2300      	movs	r3, #0
 8005754:	e006      	b.n	8005764 <GPS_validate+0xb8>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8005756:	7a7a      	ldrb	r2, [r7, #9]
 8005758:	7b7b      	ldrb	r3, [r7, #13]
			1 : 0;
 800575a:	429a      	cmp	r2, r3
 800575c:	d101      	bne.n	8005762 <GPS_validate+0xb6>
 800575e:	2301      	movs	r3, #1
 8005760:	e000      	b.n	8005764 <GPS_validate+0xb8>
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	08017fac 	.word	0x08017fac

08005770 <GPS_parse>:

void GPS_parse(char *GPSstrParse)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b08a      	sub	sp, #40	; 0x28
 8005774:	af08      	add	r7, sp, #32
 8005776:	6078      	str	r0, [r7, #4]
	if (!strncmp(GPSstrParse, "$GPGGA", 6))
 8005778:	2206      	movs	r2, #6
 800577a:	4964      	ldr	r1, [pc, #400]	; (800590c <GPS_parse+0x19c>)
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f00d f8be 	bl	80128fe <strncmp>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d138      	bne.n	80057fa <GPS_parse+0x8a>
	{
		if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c",
 8005788:	4b61      	ldr	r3, [pc, #388]	; (8005910 <GPS_parse+0x1a0>)
 800578a:	9307      	str	r3, [sp, #28]
 800578c:	4b61      	ldr	r3, [pc, #388]	; (8005914 <GPS_parse+0x1a4>)
 800578e:	9306      	str	r3, [sp, #24]
 8005790:	4b61      	ldr	r3, [pc, #388]	; (8005918 <GPS_parse+0x1a8>)
 8005792:	9305      	str	r3, [sp, #20]
 8005794:	4b61      	ldr	r3, [pc, #388]	; (800591c <GPS_parse+0x1ac>)
 8005796:	9304      	str	r3, [sp, #16]
 8005798:	4b61      	ldr	r3, [pc, #388]	; (8005920 <GPS_parse+0x1b0>)
 800579a:	9303      	str	r3, [sp, #12]
 800579c:	4b61      	ldr	r3, [pc, #388]	; (8005924 <GPS_parse+0x1b4>)
 800579e:	9302      	str	r3, [sp, #8]
 80057a0:	4b61      	ldr	r3, [pc, #388]	; (8005928 <GPS_parse+0x1b8>)
 80057a2:	9301      	str	r3, [sp, #4]
 80057a4:	4b61      	ldr	r3, [pc, #388]	; (800592c <GPS_parse+0x1bc>)
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	4b61      	ldr	r3, [pc, #388]	; (8005930 <GPS_parse+0x1c0>)
 80057aa:	4a62      	ldr	r2, [pc, #392]	; (8005934 <GPS_parse+0x1c4>)
 80057ac:	4962      	ldr	r1, [pc, #392]	; (8005938 <GPS_parse+0x1c8>)
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f00d f82c 	bl	801280c <siscanf>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f340 80a4 	ble.w	8005904 <GPS_parse+0x194>
				&GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude,
				&GPS.ew, &GPS.fix, &GPS.num_of_satelites, &GPS.horizontal_dilution_of_precision,
				&GPS.mean_sea_level_altitude, &GPS.altitude_unit) >= 1)
		{
			GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80057bc:	4b5f      	ldr	r3, [pc, #380]	; (800593c <GPS_parse+0x1cc>)
 80057be:	edd3 7a04 	vldr	s15, [r3, #16]
 80057c2:	4b5e      	ldr	r3, [pc, #376]	; (800593c <GPS_parse+0x1cc>)
 80057c4:	7d1b      	ldrb	r3, [r3, #20]
 80057c6:	4618      	mov	r0, r3
 80057c8:	eeb0 0a67 	vmov.f32	s0, s15
 80057cc:	f000 f8da 	bl	8005984 <GPS_nmea_to_dec>
 80057d0:	eef0 7a40 	vmov.f32	s15, s0
 80057d4:	4b59      	ldr	r3, [pc, #356]	; (800593c <GPS_parse+0x1cc>)
 80057d6:	edc3 7a01 	vstr	s15, [r3, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80057da:	4b58      	ldr	r3, [pc, #352]	; (800593c <GPS_parse+0x1cc>)
 80057dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80057e0:	4b56      	ldr	r3, [pc, #344]	; (800593c <GPS_parse+0x1cc>)
 80057e2:	7f1b      	ldrb	r3, [r3, #28]
 80057e4:	4618      	mov	r0, r3
 80057e6:	eeb0 0a67 	vmov.f32	s0, s15
 80057ea:	f000 f8cb 	bl	8005984 <GPS_nmea_to_dec>
 80057ee:	eef0 7a40 	vmov.f32	s15, s0
 80057f2:	4b52      	ldr	r3, [pc, #328]	; (800593c <GPS_parse+0x1cc>)
 80057f4:	edc3 7a00 	vstr	s15, [r3]
			return;
 80057f8:	e084      	b.n	8005904 <GPS_parse+0x194>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPRMC", 6))
 80057fa:	2206      	movs	r2, #6
 80057fc:	4950      	ldr	r1, [pc, #320]	; (8005940 <GPS_parse+0x1d0>)
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f00d f87d 	bl	80128fe <strncmp>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d123      	bne.n	8005852 <GPS_parse+0xe2>
	{
		if (sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time,
 800580a:	4b4e      	ldr	r3, [pc, #312]	; (8005944 <GPS_parse+0x1d4>)
 800580c:	9305      	str	r3, [sp, #20]
 800580e:	4b4e      	ldr	r3, [pc, #312]	; (8005948 <GPS_parse+0x1d8>)
 8005810:	9304      	str	r3, [sp, #16]
 8005812:	4b4e      	ldr	r3, [pc, #312]	; (800594c <GPS_parse+0x1dc>)
 8005814:	9303      	str	r3, [sp, #12]
 8005816:	4b43      	ldr	r3, [pc, #268]	; (8005924 <GPS_parse+0x1b4>)
 8005818:	9302      	str	r3, [sp, #8]
 800581a:	4b43      	ldr	r3, [pc, #268]	; (8005928 <GPS_parse+0x1b8>)
 800581c:	9301      	str	r3, [sp, #4]
 800581e:	4b43      	ldr	r3, [pc, #268]	; (800592c <GPS_parse+0x1bc>)
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	4b43      	ldr	r3, [pc, #268]	; (8005930 <GPS_parse+0x1c0>)
 8005824:	4a43      	ldr	r2, [pc, #268]	; (8005934 <GPS_parse+0x1c4>)
 8005826:	494a      	ldr	r1, [pc, #296]	; (8005950 <GPS_parse+0x1e0>)
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f00c ffef 	bl	801280c <siscanf>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	dd67      	ble.n	8005904 <GPS_parse+0x194>
				&GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew,
				&GPS.speed_over_ground, &GPS.course_over_ground, &GPS.utc_date) >= 1)
		{
			if (GPS.ns == '\0')
 8005834:	4b41      	ldr	r3, [pc, #260]	; (800593c <GPS_parse+0x1cc>)
 8005836:	7d1b      	ldrb	r3, [r3, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d102      	bne.n	8005842 <GPS_parse+0xd2>
				GPS.ns = ' ';
 800583c:	4b3f      	ldr	r3, [pc, #252]	; (800593c <GPS_parse+0x1cc>)
 800583e:	2220      	movs	r2, #32
 8005840:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8005842:	4b3e      	ldr	r3, [pc, #248]	; (800593c <GPS_parse+0x1cc>)
 8005844:	7f1b      	ldrb	r3, [r3, #28]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d157      	bne.n	80058fa <GPS_parse+0x18a>
				GPS.ew = ' ';
 800584a:	4b3c      	ldr	r3, [pc, #240]	; (800593c <GPS_parse+0x1cc>)
 800584c:	2220      	movs	r2, #32
 800584e:	771a      	strb	r2, [r3, #28]
			return;
 8005850:	e053      	b.n	80058fa <GPS_parse+0x18a>
		}

	}
	else if (!strncmp(GPSstrParse, "$GPGLL", 6))
 8005852:	2206      	movs	r2, #6
 8005854:	493f      	ldr	r1, [pc, #252]	; (8005954 <GPS_parse+0x1e4>)
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f00d f851 	bl	80128fe <strncmp>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d11f      	bne.n	80058a2 <GPS_parse+0x132>
	{
		if (sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude,
 8005862:	4b3d      	ldr	r3, [pc, #244]	; (8005958 <GPS_parse+0x1e8>)
 8005864:	9303      	str	r3, [sp, #12]
 8005866:	4b33      	ldr	r3, [pc, #204]	; (8005934 <GPS_parse+0x1c4>)
 8005868:	9302      	str	r3, [sp, #8]
 800586a:	4b2e      	ldr	r3, [pc, #184]	; (8005924 <GPS_parse+0x1b4>)
 800586c:	9301      	str	r3, [sp, #4]
 800586e:	4b2e      	ldr	r3, [pc, #184]	; (8005928 <GPS_parse+0x1b8>)
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	4b2e      	ldr	r3, [pc, #184]	; (800592c <GPS_parse+0x1bc>)
 8005874:	4a2e      	ldr	r2, [pc, #184]	; (8005930 <GPS_parse+0x1c0>)
 8005876:	4939      	ldr	r1, [pc, #228]	; (800595c <GPS_parse+0x1ec>)
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f00c ffc7 	bl	801280c <siscanf>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	dd3f      	ble.n	8005904 <GPS_parse+0x194>
				&GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time,
				&GPS.gll_status) >= 1)
		{
			if (GPS.ns == '\0')
 8005884:	4b2d      	ldr	r3, [pc, #180]	; (800593c <GPS_parse+0x1cc>)
 8005886:	7d1b      	ldrb	r3, [r3, #20]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d102      	bne.n	8005892 <GPS_parse+0x122>
				GPS.ns = '?';
 800588c:	4b2b      	ldr	r3, [pc, #172]	; (800593c <GPS_parse+0x1cc>)
 800588e:	223f      	movs	r2, #63	; 0x3f
 8005890:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8005892:	4b2a      	ldr	r3, [pc, #168]	; (800593c <GPS_parse+0x1cc>)
 8005894:	7f1b      	ldrb	r3, [r3, #28]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d131      	bne.n	80058fe <GPS_parse+0x18e>
				GPS.ew = '?';
 800589a:	4b28      	ldr	r3, [pc, #160]	; (800593c <GPS_parse+0x1cc>)
 800589c:	223f      	movs	r2, #63	; 0x3f
 800589e:	771a      	strb	r2, [r3, #28]
			return;
 80058a0:	e02d      	b.n	80058fe <GPS_parse+0x18e>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPVTG", 6))
 80058a2:	2206      	movs	r2, #6
 80058a4:	492e      	ldr	r1, [pc, #184]	; (8005960 <GPS_parse+0x1f0>)
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f00d f829 	bl	80128fe <strncmp>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d128      	bne.n	8005904 <GPS_parse+0x194>
	{
		if (sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t,
 80058b2:	4b2c      	ldr	r3, [pc, #176]	; (8005964 <GPS_parse+0x1f4>)
 80058b4:	9305      	str	r3, [sp, #20]
 80058b6:	4b2c      	ldr	r3, [pc, #176]	; (8005968 <GPS_parse+0x1f8>)
 80058b8:	9304      	str	r3, [sp, #16]
 80058ba:	4b2c      	ldr	r3, [pc, #176]	; (800596c <GPS_parse+0x1fc>)
 80058bc:	9303      	str	r3, [sp, #12]
 80058be:	4b23      	ldr	r3, [pc, #140]	; (800594c <GPS_parse+0x1dc>)
 80058c0:	9302      	str	r3, [sp, #8]
 80058c2:	4b2b      	ldr	r3, [pc, #172]	; (8005970 <GPS_parse+0x200>)
 80058c4:	9301      	str	r3, [sp, #4]
 80058c6:	4b2b      	ldr	r3, [pc, #172]	; (8005974 <GPS_parse+0x204>)
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	4b2b      	ldr	r3, [pc, #172]	; (8005978 <GPS_parse+0x208>)
 80058cc:	4a2b      	ldr	r2, [pc, #172]	; (800597c <GPS_parse+0x20c>)
 80058ce:	492c      	ldr	r1, [pc, #176]	; (8005980 <GPS_parse+0x210>)
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f00c ff9b 	bl	801280c <siscanf>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	dd13      	ble.n	8005904 <GPS_parse+0x194>
				&GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit,
				&GPS.speed_over_ground, &GPS.speed_k_unit, &GPS.speed_km,
				&GPS.speed_km_unit) >= 1)
		{
			if (GPS.ns == '\0')
 80058dc:	4b17      	ldr	r3, [pc, #92]	; (800593c <GPS_parse+0x1cc>)
 80058de:	7d1b      	ldrb	r3, [r3, #20]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d102      	bne.n	80058ea <GPS_parse+0x17a>
				GPS.ns = '?';
 80058e4:	4b15      	ldr	r3, [pc, #84]	; (800593c <GPS_parse+0x1cc>)
 80058e6:	223f      	movs	r2, #63	; 0x3f
 80058e8:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 80058ea:	4b14      	ldr	r3, [pc, #80]	; (800593c <GPS_parse+0x1cc>)
 80058ec:	7f1b      	ldrb	r3, [r3, #28]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d107      	bne.n	8005902 <GPS_parse+0x192>
				GPS.ew = '?';
 80058f2:	4b12      	ldr	r3, [pc, #72]	; (800593c <GPS_parse+0x1cc>)
 80058f4:	223f      	movs	r2, #63	; 0x3f
 80058f6:	771a      	strb	r2, [r3, #28]
			return;
 80058f8:	e003      	b.n	8005902 <GPS_parse+0x192>
			return;
 80058fa:	bf00      	nop
 80058fc:	e002      	b.n	8005904 <GPS_parse+0x194>
			return;
 80058fe:	bf00      	nop
 8005900:	e000      	b.n	8005904 <GPS_parse+0x194>
			return;
 8005902:	bf00      	nop
		}
	}
}
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	08017fb4 	.word	0x08017fb4
 8005910:	200004ac 	.word	0x200004ac
 8005914:	200004a8 	.word	0x200004a8
 8005918:	200004a4 	.word	0x200004a4
 800591c:	200004a0 	.word	0x200004a0
 8005920:	2000049c 	.word	0x2000049c
 8005924:	20000498 	.word	0x20000498
 8005928:	20000494 	.word	0x20000494
 800592c:	20000490 	.word	0x20000490
 8005930:	2000048c 	.word	0x2000048c
 8005934:	20000488 	.word	0x20000488
 8005938:	08017fbc 	.word	0x08017fbc
 800593c:	2000047c 	.word	0x2000047c
 8005940:	08017fe4 	.word	0x08017fe4
 8005944:	200004b8 	.word	0x200004b8
 8005948:	200004b4 	.word	0x200004b4
 800594c:	200004b0 	.word	0x200004b0
 8005950:	08017fec 	.word	0x08017fec
 8005954:	0801800c 	.word	0x0801800c
 8005958:	200004bc 	.word	0x200004bc
 800595c:	08018014 	.word	0x08018014
 8005960:	08018030 	.word	0x08018030
 8005964:	200004d4 	.word	0x200004d4
 8005968:	200004d0 	.word	0x200004d0
 800596c:	200004cd 	.word	0x200004cd
 8005970:	200004cc 	.word	0x200004cc
 8005974:	200004c8 	.word	0x200004c8
 8005978:	200004c4 	.word	0x200004c4
 800597c:	200004c0 	.word	0x200004c0
 8005980:	08018038 	.word	0x08018038

08005984 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	ed87 0a01 	vstr	s0, [r7, #4]
 800598e:	4603      	mov	r3, r0
 8005990:	70fb      	strb	r3, [r7, #3]
	int degree = (int) (deg_coord / 100);
 8005992:	ed97 7a01 	vldr	s14, [r7, #4]
 8005996:	eddf 6a20 	vldr	s13, [pc, #128]	; 8005a18 <GPS_nmea_to_dec+0x94>
 800599a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800599e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059a2:	ee17 3a90 	vmov	r3, s15
 80059a6:	613b      	str	r3, [r7, #16]
	float minutes = deg_coord - degree * 100;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	2264      	movs	r2, #100	; 0x64
 80059ac:	fb02 f303 	mul.w	r3, r2, r3
 80059b0:	ee07 3a90 	vmov	s15, r3
 80059b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80059bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059c0:	edc7 7a03 	vstr	s15, [r7, #12]
	float dec_deg = minutes / 60;
 80059c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80059c8:	eddf 6a14 	vldr	s13, [pc, #80]	; 8005a1c <GPS_nmea_to_dec+0x98>
 80059cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059d0:	edc7 7a02 	vstr	s15, [r7, #8]
	float decimal = degree + dec_deg;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	ee07 3a90 	vmov	s15, r3
 80059da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059de:	ed97 7a02 	vldr	s14, [r7, #8]
 80059e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059e6:	edc7 7a05 	vstr	s15, [r7, #20]
	if (nsew == 'S' || nsew == 'W')
 80059ea:	78fb      	ldrb	r3, [r7, #3]
 80059ec:	2b53      	cmp	r3, #83	; 0x53
 80059ee:	d002      	beq.n	80059f6 <GPS_nmea_to_dec+0x72>
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	2b57      	cmp	r3, #87	; 0x57
 80059f4:	d105      	bne.n	8005a02 <GPS_nmea_to_dec+0x7e>
	{ // return negative
		decimal *= -1;
 80059f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80059fa:	eef1 7a67 	vneg.f32	s15, s15
 80059fe:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return decimal;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	ee07 3a90 	vmov	s15, r3
}
 8005a08:	eeb0 0a67 	vmov.f32	s0, s15
 8005a0c:	371c      	adds	r7, #28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	42c80000 	.word	0x42c80000
 8005a1c:	42700000 	.word	0x42700000

08005a20 <HMC5883L_Init>:
#include "GY-271/HMC5883L.h"
#include "Globals.h"


uint8_t HMC5883L_Init()
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
	HMC5883L_setRange(HMC5883L_RANGE_8_1GA);
 8005a24:	2007      	movs	r0, #7
 8005a26:	f000 f871 	bl	8005b0c <HMC5883L_setRange>
	HMC5883L_setMeasurementMode(HMC5883L_CONTINOUS);
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	f000 f8c8 	bl	8005bc0 <HMC5883L_setMeasurementMode>
	HMC5883L_setDataRate(HMC5883L_DATARATE_30HZ);
 8005a30:	2005      	movs	r0, #5
 8005a32:	f000 f8e0 	bl	8005bf6 <HMC5883L_setDataRate>
	HMC5883L_setSamples(HMC5883L_SAMPLES_4);
 8005a36:	2002      	movs	r0, #2
 8005a38:	f000 f8fc 	bl	8005c34 <HMC5883L_setSamples>
	HMC5883L_setOffset(0, 0);
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	2000      	movs	r0, #0
 8005a40:	f000 f84e 	bl	8005ae0 <HMC5883L_setOffset>

	return 0;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <HMC5883L_readRaw>:

Vector HMC5883L_readRaw(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af00      	add	r7, sp, #0
    v.XAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_X_M) - xOffset;
 8005a52:	2003      	movs	r0, #3
 8005a54:	f000 f946 	bl	8005ce4 <HMC5883L_readRegister16>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4b1d      	ldr	r3, [pc, #116]	; (8005ad4 <HMC5883L_readRaw+0x88>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a6a:	4b1b      	ldr	r3, [pc, #108]	; (8005ad8 <HMC5883L_readRaw+0x8c>)
 8005a6c:	edc3 7a00 	vstr	s15, [r3]
    v.YAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Y_M) - yOffset;
 8005a70:	2007      	movs	r0, #7
 8005a72:	f000 f937 	bl	8005ce4 <HMC5883L_readRegister16>
 8005a76:	4603      	mov	r3, r0
 8005a78:	461a      	mov	r2, r3
 8005a7a:	4b18      	ldr	r3, [pc, #96]	; (8005adc <HMC5883L_readRaw+0x90>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	ee07 3a90 	vmov	s15, r3
 8005a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a88:	4b13      	ldr	r3, [pc, #76]	; (8005ad8 <HMC5883L_readRaw+0x8c>)
 8005a8a:	edc3 7a01 	vstr	s15, [r3, #4]
    v.ZAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Z_M);
 8005a8e:	2005      	movs	r0, #5
 8005a90:	f000 f928 	bl	8005ce4 <HMC5883L_readRegister16>
 8005a94:	4603      	mov	r3, r0
 8005a96:	ee07 3a90 	vmov	s15, r3
 8005a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a9e:	4b0e      	ldr	r3, [pc, #56]	; (8005ad8 <HMC5883L_readRaw+0x8c>)
 8005aa0:	edc3 7a02 	vstr	s15, [r3, #8]

    return v;
 8005aa4:	4a0c      	ldr	r2, [pc, #48]	; (8005ad8 <HMC5883L_readRaw+0x8c>)
 8005aa6:	f107 0314 	add.w	r3, r7, #20
 8005aaa:	ca07      	ldmia	r2, {r0, r1, r2}
 8005aac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005ab0:	6979      	ldr	r1, [r7, #20]
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	ee06 1a90 	vmov	s13, r1
 8005aba:	ee07 2a10 	vmov	s14, r2
 8005abe:	ee07 3a90 	vmov	s15, r3
}
 8005ac2:	eeb0 0a66 	vmov.f32	s0, s13
 8005ac6:	eef0 0a47 	vmov.f32	s1, s14
 8005aca:	eeb0 1a67 	vmov.f32	s2, s15
 8005ace:	3720      	adds	r7, #32
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	20000388 	.word	0x20000388
 8005ad8:	2000037c 	.word	0x2000037c
 8005adc:	2000038c 	.word	0x2000038c

08005ae0 <HMC5883L_setOffset>:

    return v;
}

void HMC5883L_setOffset(int xo, int yo)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
    xOffset = xo;
 8005aea:	4a06      	ldr	r2, [pc, #24]	; (8005b04 <HMC5883L_setOffset+0x24>)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6013      	str	r3, [r2, #0]
    yOffset = yo;
 8005af0:	4a05      	ldr	r2, [pc, #20]	; (8005b08 <HMC5883L_setOffset+0x28>)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	6013      	str	r3, [r2, #0]
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	20000388 	.word	0x20000388
 8005b08:	2000038c 	.word	0x2000038c

08005b0c <HMC5883L_setRange>:

void HMC5883L_setRange(uint8_t range)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	4603      	mov	r3, r0
 8005b14:	71fb      	strb	r3, [r7, #7]
    switch(range)
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	2b07      	cmp	r3, #7
 8005b1a:	d833      	bhi.n	8005b84 <HMC5883L_setRange+0x78>
 8005b1c:	a201      	add	r2, pc, #4	; (adr r2, 8005b24 <HMC5883L_setRange+0x18>)
 8005b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b22:	bf00      	nop
 8005b24:	08005b45 	.word	0x08005b45
 8005b28:	08005b4d 	.word	0x08005b4d
 8005b2c:	08005b55 	.word	0x08005b55
 8005b30:	08005b5d 	.word	0x08005b5d
 8005b34:	08005b65 	.word	0x08005b65
 8005b38:	08005b6d 	.word	0x08005b6d
 8005b3c:	08005b75 	.word	0x08005b75
 8005b40:	08005b7d 	.word	0x08005b7d
    {
	case HMC5883L_RANGE_0_88GA:
	    mG_per_LSB = 0.073f;
 8005b44:	4b15      	ldr	r3, [pc, #84]	; (8005b9c <HMC5883L_setRange+0x90>)
 8005b46:	4a16      	ldr	r2, [pc, #88]	; (8005ba0 <HMC5883L_setRange+0x94>)
 8005b48:	601a      	str	r2, [r3, #0]
	    break;
 8005b4a:	e01c      	b.n	8005b86 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_3GA:
	    mG_per_LSB = 0.92f;
 8005b4c:	4b13      	ldr	r3, [pc, #76]	; (8005b9c <HMC5883L_setRange+0x90>)
 8005b4e:	4a15      	ldr	r2, [pc, #84]	; (8005ba4 <HMC5883L_setRange+0x98>)
 8005b50:	601a      	str	r2, [r3, #0]
	    break;
 8005b52:	e018      	b.n	8005b86 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_9GA:
	    mG_per_LSB = 1.22f;
 8005b54:	4b11      	ldr	r3, [pc, #68]	; (8005b9c <HMC5883L_setRange+0x90>)
 8005b56:	4a14      	ldr	r2, [pc, #80]	; (8005ba8 <HMC5883L_setRange+0x9c>)
 8005b58:	601a      	str	r2, [r3, #0]
	    break;
 8005b5a:	e014      	b.n	8005b86 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_2_5GA:
	    mG_per_LSB = 1.52f;
 8005b5c:	4b0f      	ldr	r3, [pc, #60]	; (8005b9c <HMC5883L_setRange+0x90>)
 8005b5e:	4a13      	ldr	r2, [pc, #76]	; (8005bac <HMC5883L_setRange+0xa0>)
 8005b60:	601a      	str	r2, [r3, #0]
	    break;
 8005b62:	e010      	b.n	8005b86 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4GA:
	    mG_per_LSB = 2.27f;
 8005b64:	4b0d      	ldr	r3, [pc, #52]	; (8005b9c <HMC5883L_setRange+0x90>)
 8005b66:	4a12      	ldr	r2, [pc, #72]	; (8005bb0 <HMC5883L_setRange+0xa4>)
 8005b68:	601a      	str	r2, [r3, #0]
	    break;
 8005b6a:	e00c      	b.n	8005b86 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4_7GA:
	    mG_per_LSB = 2.56f;
 8005b6c:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <HMC5883L_setRange+0x90>)
 8005b6e:	4a11      	ldr	r2, [pc, #68]	; (8005bb4 <HMC5883L_setRange+0xa8>)
 8005b70:	601a      	str	r2, [r3, #0]
	    break;
 8005b72:	e008      	b.n	8005b86 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_5_6GA:
	    mG_per_LSB = 3.03f;
 8005b74:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <HMC5883L_setRange+0x90>)
 8005b76:	4a10      	ldr	r2, [pc, #64]	; (8005bb8 <HMC5883L_setRange+0xac>)
 8005b78:	601a      	str	r2, [r3, #0]
	    break;
 8005b7a:	e004      	b.n	8005b86 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_8_1GA:
	    mG_per_LSB = 4.35f;
 8005b7c:	4b07      	ldr	r3, [pc, #28]	; (8005b9c <HMC5883L_setRange+0x90>)
 8005b7e:	4a0f      	ldr	r2, [pc, #60]	; (8005bbc <HMC5883L_setRange+0xb0>)
 8005b80:	601a      	str	r2, [r3, #0]
	    break;
 8005b82:	e000      	b.n	8005b86 <HMC5883L_setRange+0x7a>

	default:
	    break;
 8005b84:	bf00      	nop
    }

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_B, range << 5);
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	015b      	lsls	r3, r3, #5
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	2001      	movs	r0, #1
 8005b90:	f000 f870 	bl	8005c74 <HMC5883L_writeRegister8>
}
 8005b94:	bf00      	nop
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	20000378 	.word	0x20000378
 8005ba0:	3d958106 	.word	0x3d958106
 8005ba4:	3f6b851f 	.word	0x3f6b851f
 8005ba8:	3f9c28f6 	.word	0x3f9c28f6
 8005bac:	3fc28f5c 	.word	0x3fc28f5c
 8005bb0:	401147ae 	.word	0x401147ae
 8005bb4:	4023d70a 	.word	0x4023d70a
 8005bb8:	4041eb85 	.word	0x4041eb85
 8005bbc:	408b3333 	.word	0x408b3333

08005bc0 <HMC5883L_setMeasurementMode>:
{
    return (uint8_t)((HMC5883L_readRegister8(HMC5883L_REG_CONFIG_B) >> 5));
}

void HMC5883L_setMeasurementMode(uint8_t mode)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_MODE);
 8005bca:	2002      	movs	r0, #2
 8005bcc:	f000 f86e 	bl	8005cac <HMC5883L_readRegister8>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	73fb      	strb	r3, [r7, #15]
    value &= 0b11111100;
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	f023 0303 	bic.w	r3, r3, #3
 8005bda:	73fb      	strb	r3, [r7, #15]
    value |= mode;
 8005bdc:	7bfa      	ldrb	r2, [r7, #15]
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_MODE, value);
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	4619      	mov	r1, r3
 8005be8:	2002      	movs	r0, #2
 8005bea:	f000 f843 	bl	8005c74 <HMC5883L_writeRegister8>
}
 8005bee:	bf00      	nop
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HMC5883L_setDataRate>:

    return value;
}

void HMC5883L_setDataRate(uint8_t dataRate)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 8005c00:	2000      	movs	r0, #0
 8005c02:	f000 f853 	bl	8005cac <HMC5883L_readRegister8>
 8005c06:	4603      	mov	r3, r0
 8005c08:	73fb      	strb	r3, [r7, #15]
    value &= 0b11100011;
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
 8005c0c:	f023 031c 	bic.w	r3, r3, #28
 8005c10:	73fb      	strb	r3, [r7, #15]
    value |= (dataRate << 2);
 8005c12:	79fb      	ldrb	r3, [r7, #7]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	b25a      	sxtb	r2, r3
 8005c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	b25b      	sxtb	r3, r3
 8005c20:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 8005c22:	7bfb      	ldrb	r3, [r7, #15]
 8005c24:	4619      	mov	r1, r3
 8005c26:	2000      	movs	r0, #0
 8005c28:	f000 f824 	bl	8005c74 <HMC5883L_writeRegister8>
}
 8005c2c:	bf00      	nop
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <HMC5883L_setSamples>:

    return value;
}

void HMC5883L_setSamples(uint8_t samples)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 8005c3e:	2000      	movs	r0, #0
 8005c40:	f000 f834 	bl	8005cac <HMC5883L_readRegister8>
 8005c44:	4603      	mov	r3, r0
 8005c46:	73fb      	strb	r3, [r7, #15]
    value &= 0b10011111;
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005c4e:	73fb      	strb	r3, [r7, #15]
    value |= (samples << 5);
 8005c50:	79fb      	ldrb	r3, [r7, #7]
 8005c52:	015b      	lsls	r3, r3, #5
 8005c54:	b25a      	sxtb	r2, r3
 8005c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	b25b      	sxtb	r3, r3
 8005c5e:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
 8005c62:	4619      	mov	r1, r3
 8005c64:	2000      	movs	r0, #0
 8005c66:	f000 f805 	bl	8005c74 <HMC5883L_writeRegister8>
}
 8005c6a:	bf00      	nop
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <HMC5883L_writeRegister8>:
    return value;
}

// Write byte to register
void HMC5883L_writeRegister8(uint8_t reg, uint8_t value)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af04      	add	r7, sp, #16
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	460a      	mov	r2, r1
 8005c7e:	71fb      	strb	r3, [r7, #7]
 8005c80:	4613      	mov	r3, r2
 8005c82:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1 , &value, 1, 500);
 8005c84:	79fb      	ldrb	r3, [r7, #7]
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005c8c:	9302      	str	r3, [sp, #8]
 8005c8e:	2301      	movs	r3, #1
 8005c90:	9301      	str	r3, [sp, #4]
 8005c92:	1dbb      	adds	r3, r7, #6
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	2301      	movs	r3, #1
 8005c98:	213c      	movs	r1, #60	; 0x3c
 8005c9a:	4803      	ldr	r0, [pc, #12]	; (8005ca8 <HMC5883L_writeRegister8+0x34>)
 8005c9c:	f002 fc88 	bl	80085b0 <HAL_I2C_Mem_Write>
}
 8005ca0:	bf00      	nop
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	20000910 	.word	0x20000910

08005cac <HMC5883L_readRegister8>:
    return value;
}

// Read byte from register
uint8_t HMC5883L_readRegister8(uint8_t reg)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af04      	add	r7, sp, #16
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 1, 500);
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005cbe:	9302      	str	r3, [sp, #8]
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	9301      	str	r3, [sp, #4]
 8005cc4:	f107 030f 	add.w	r3, r7, #15
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	2301      	movs	r3, #1
 8005ccc:	213c      	movs	r1, #60	; 0x3c
 8005cce:	4804      	ldr	r0, [pc, #16]	; (8005ce0 <HMC5883L_readRegister8+0x34>)
 8005cd0:	f002 fd82 	bl	80087d8 <HAL_I2C_Mem_Read>
    return value;
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	20000910 	.word	0x20000910

08005ce4 <HMC5883L_readRegister16>:

// Read word from register
int16_t HMC5883L_readRegister16(uint8_t reg)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b088      	sub	sp, #32
 8005ce8:	af04      	add	r7, sp, #16
 8005cea:	4603      	mov	r3, r0
 8005cec:	71fb      	strb	r3, [r7, #7]
    int16_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 2, 500);
 8005cee:	79fb      	ldrb	r3, [r7, #7]
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005cf6:	9302      	str	r3, [sp, #8]
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	9301      	str	r3, [sp, #4]
 8005cfc:	f107 030e 	add.w	r3, r7, #14
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	2301      	movs	r3, #1
 8005d04:	213c      	movs	r1, #60	; 0x3c
 8005d06:	4804      	ldr	r0, [pc, #16]	; (8005d18 <HMC5883L_readRegister16+0x34>)
 8005d08:	f002 fd66 	bl	80087d8 <HAL_I2C_Mem_Read>
    return value;
 8005d0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	20000910 	.word	0x20000910

08005d1c <BMP280_initialize>:

/** Initialize the device with desired configuration
 * @return 1, if device is not recognized, 0 otherwise.
 * */
uint8_t BMP280_initialize(SPI_HandleTypeDef *SPIx, BMP280_t *bmp280)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
	// Disable MPU9250
	HAL_GPIO_WritePin(SPI2_IMU_CSIMU_GPIO_Port, SPI2_IMU_CSIMU_Pin, GPIO_PIN_SET);
 8005d26:	2201      	movs	r2, #1
 8005d28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d2c:	481a      	ldr	r0, [pc, #104]	; (8005d98 <BMP280_initialize+0x7c>)
 8005d2e:	f002 fb95 	bl	800845c <HAL_GPIO_WritePin>

	bmp280->spiHandle = SPIx;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	601a      	str	r2, [r3, #0]

    if (BMP280_getID(bmp280) != BMP280_CHIP_ID)
 8005d38:	6838      	ldr	r0, [r7, #0]
 8005d3a:	f000 f83c 	bl	8005db6 <BMP280_getID>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b58      	cmp	r3, #88	; 0x58
 8005d42:	d001      	beq.n	8005d48 <BMP280_initialize+0x2c>
    {
        return 1;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e023      	b.n	8005d90 <BMP280_initialize+0x74>
    }

    // Reset device and wait
    BMP280_reset(bmp280);
 8005d48:	6838      	ldr	r0, [r7, #0]
 8005d4a:	f000 f827 	bl	8005d9c <BMP280_reset>
    HAL_Delay(500);
 8005d4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d52:	f001 fcd7 	bl	8007704 <HAL_Delay>

    // BEGIN OF CONFIGURATION ----------------------------------
    BMP280_setPressureOversampling(bmp280, oversampling_x16);
 8005d56:	2105      	movs	r1, #5
 8005d58:	6838      	ldr	r0, [r7, #0]
 8005d5a:	f000 f8ef 	bl	8005f3c <BMP280_setPressureOversampling>
    BMP280_setTemperatureOversampling(bmp280, oversampling_x2);
 8005d5e:	2102      	movs	r1, #2
 8005d60:	6838      	ldr	r0, [r7, #0]
 8005d62:	f000 f90c 	bl	8005f7e <BMP280_setTemperatureOversampling>

    BMP280_setPowerMode(bmp280, mode_normal);
 8005d66:	2103      	movs	r1, #3
 8005d68:	6838      	ldr	r0, [r7, #0]
 8005d6a:	f000 f929 	bl	8005fc0 <BMP280_setPowerMode>
    BMP280_setFilterCoefficient(bmp280, filter_coeff_16);
 8005d6e:	2104      	movs	r1, #4
 8005d70:	6838      	ldr	r0, [r7, #0]
 8005d72:	f000 f966 	bl	8006042 <BMP280_setFilterCoefficient>
    BMP280_setStandbyTime(bmp280, standby_time_500us);
 8005d76:	2100      	movs	r1, #0
 8005d78:	6838      	ldr	r0, [r7, #0]
 8005d7a:	f000 f941 	bl	8006000 <BMP280_setStandbyTime>
    // END OF CONFIGURATION --------------------------

    BMP280_readCompensationParameters(bmp280);
 8005d7e:	6838      	ldr	r0, [r7, #0]
 8005d80:	f000 f826 	bl	8005dd0 <BMP280_readCompensationParameters>
    BMP280_setReferencePressure(bmp280, 100, 50);
 8005d84:	2232      	movs	r2, #50	; 0x32
 8005d86:	2164      	movs	r1, #100	; 0x64
 8005d88:	6838      	ldr	r0, [r7, #0]
 8005d8a:	f000 f89e 	bl	8005eca <BMP280_setReferencePressure>

    return 0;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	40020c00 	.word	0x40020c00

08005d9c <BMP280_reset>:

/** Perform power-on reset procedure */
void BMP280_reset(BMP280_t *bmp280)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
    BMP280_writeRegister(bmp280, BMP280_REG_RESET, BMP280_RESET_VALUE);
 8005da4:	22b6      	movs	r2, #182	; 0xb6
 8005da6:	21e0      	movs	r1, #224	; 0xe0
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fa27 	bl	80061fc <BMP280_writeRegister>
}
 8005dae:	bf00      	nop
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <BMP280_getID>:
/**
 * Read chip identification number.
 * @return chip ID
 * */
uint8_t BMP280_getID(BMP280_t *bmp280)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b082      	sub	sp, #8
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
    return BMP280_readRegister(bmp280, BMP280_REG_ID);
 8005dbe:	21d0      	movs	r1, #208	; 0xd0
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f9ff 	bl	80061c4 <BMP280_readRegister>
 8005dc6:	4603      	mov	r3, r0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <BMP280_readCompensationParameters>:

void BMP280_readCompensationParameters(BMP280_t *bmp280)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
    uint8_t buf[24];
    BMP280_readMBRegister(bmp280, BMP280_REG_CALIB, buf, 24);
 8005dd8:	f107 0208 	add.w	r2, r7, #8
 8005ddc:	2318      	movs	r3, #24
 8005dde:	2188      	movs	r1, #136	; 0x88
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fa2a 	bl	800623a <BMP280_readMBRegister>
    bmp280->compensationParameters.dig_t1 = ((buf[1] << 8) | buf[0]);
 8005de6:	7a7b      	ldrb	r3, [r7, #9]
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	b21a      	sxth	r2, r3
 8005dec:	7a3b      	ldrb	r3, [r7, #8]
 8005dee:	b21b      	sxth	r3, r3
 8005df0:	4313      	orrs	r3, r2
 8005df2:	b21b      	sxth	r3, r3
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	831a      	strh	r2, [r3, #24]
    bmp280->compensationParameters.dig_t2 = ((buf[3] << 8) | buf[2]);
 8005dfa:	7afb      	ldrb	r3, [r7, #11]
 8005dfc:	021b      	lsls	r3, r3, #8
 8005dfe:	b21a      	sxth	r2, r3
 8005e00:	7abb      	ldrb	r3, [r7, #10]
 8005e02:	b21b      	sxth	r3, r3
 8005e04:	4313      	orrs	r3, r2
 8005e06:	b21a      	sxth	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	835a      	strh	r2, [r3, #26]
    bmp280->compensationParameters.dig_t3 = ((buf[5] << 8) | buf[4]);
 8005e0c:	7b7b      	ldrb	r3, [r7, #13]
 8005e0e:	021b      	lsls	r3, r3, #8
 8005e10:	b21a      	sxth	r2, r3
 8005e12:	7b3b      	ldrb	r3, [r7, #12]
 8005e14:	b21b      	sxth	r3, r3
 8005e16:	4313      	orrs	r3, r2
 8005e18:	b21a      	sxth	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	839a      	strh	r2, [r3, #28]
    bmp280->compensationParameters.dig_p1 = ((buf[7] << 8) | buf[6]);
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
 8005e20:	021b      	lsls	r3, r3, #8
 8005e22:	b21a      	sxth	r2, r3
 8005e24:	7bbb      	ldrb	r3, [r7, #14]
 8005e26:	b21b      	sxth	r3, r3
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	b21b      	sxth	r3, r3
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	83da      	strh	r2, [r3, #30]
    bmp280->compensationParameters.dig_p2 = ((buf[9] << 8) | buf[8]);
 8005e32:	7c7b      	ldrb	r3, [r7, #17]
 8005e34:	021b      	lsls	r3, r3, #8
 8005e36:	b21a      	sxth	r2, r3
 8005e38:	7c3b      	ldrb	r3, [r7, #16]
 8005e3a:	b21b      	sxth	r3, r3
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	b21a      	sxth	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	841a      	strh	r2, [r3, #32]
    bmp280->compensationParameters.dig_p3 = ((buf[11] << 8) | buf[10]);
 8005e44:	7cfb      	ldrb	r3, [r7, #19]
 8005e46:	021b      	lsls	r3, r3, #8
 8005e48:	b21a      	sxth	r2, r3
 8005e4a:	7cbb      	ldrb	r3, [r7, #18]
 8005e4c:	b21b      	sxth	r3, r3
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	b21a      	sxth	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	845a      	strh	r2, [r3, #34]	; 0x22
    bmp280->compensationParameters.dig_p4 = ((buf[13] << 8) | buf[12]);
 8005e56:	7d7b      	ldrb	r3, [r7, #21]
 8005e58:	021b      	lsls	r3, r3, #8
 8005e5a:	b21a      	sxth	r2, r3
 8005e5c:	7d3b      	ldrb	r3, [r7, #20]
 8005e5e:	b21b      	sxth	r3, r3
 8005e60:	4313      	orrs	r3, r2
 8005e62:	b21a      	sxth	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	849a      	strh	r2, [r3, #36]	; 0x24
    bmp280->compensationParameters.dig_p5 = ((buf[15] << 8) | buf[14]);
 8005e68:	7dfb      	ldrb	r3, [r7, #23]
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	b21a      	sxth	r2, r3
 8005e6e:	7dbb      	ldrb	r3, [r7, #22]
 8005e70:	b21b      	sxth	r3, r3
 8005e72:	4313      	orrs	r3, r2
 8005e74:	b21a      	sxth	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	84da      	strh	r2, [r3, #38]	; 0x26
    bmp280->compensationParameters.dig_p6 = ((buf[17] << 8) | buf[16]);
 8005e7a:	7e7b      	ldrb	r3, [r7, #25]
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	b21a      	sxth	r2, r3
 8005e80:	7e3b      	ldrb	r3, [r7, #24]
 8005e82:	b21b      	sxth	r3, r3
 8005e84:	4313      	orrs	r3, r2
 8005e86:	b21a      	sxth	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	851a      	strh	r2, [r3, #40]	; 0x28
    bmp280->compensationParameters.dig_p7 = ((buf[19] << 8) | buf[18]);
 8005e8c:	7efb      	ldrb	r3, [r7, #27]
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	b21a      	sxth	r2, r3
 8005e92:	7ebb      	ldrb	r3, [r7, #26]
 8005e94:	b21b      	sxth	r3, r3
 8005e96:	4313      	orrs	r3, r2
 8005e98:	b21a      	sxth	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    bmp280->compensationParameters.dig_p8 = ((buf[21] << 8) | buf[20]);
 8005e9e:	7f7b      	ldrb	r3, [r7, #29]
 8005ea0:	021b      	lsls	r3, r3, #8
 8005ea2:	b21a      	sxth	r2, r3
 8005ea4:	7f3b      	ldrb	r3, [r7, #28]
 8005ea6:	b21b      	sxth	r3, r3
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	b21a      	sxth	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	859a      	strh	r2, [r3, #44]	; 0x2c
    bmp280->compensationParameters.dig_p9 = ((buf[23] << 8) | buf[22]);
 8005eb0:	7ffb      	ldrb	r3, [r7, #31]
 8005eb2:	021b      	lsls	r3, r3, #8
 8005eb4:	b21a      	sxth	r2, r3
 8005eb6:	7fbb      	ldrb	r3, [r7, #30]
 8005eb8:	b21b      	sxth	r3, r3
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	b21a      	sxth	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 8005ec2:	bf00      	nop
 8005ec4:	3720      	adds	r7, #32
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <BMP280_setReferencePressure>:
 * Set reference pressure for altitude calculation by averaging pressure measurements.
 * @param samples: Number of measurements to average.
 * @param delay: Delay between measurements (in ms).
 * */
void BMP280_setReferencePressure(BMP280_t *bmp280, uint16_t samples, uint8_t delay)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	807b      	strh	r3, [r7, #2]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	707b      	strb	r3, [r7, #1]
    HAL_Delay(500);
 8005eda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ede:	f001 fc11 	bl	8007704 <HAL_Delay>
    float sum = 0;
 8005ee2:	f04f 0300 	mov.w	r3, #0
 8005ee6:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < samples; i++)
 8005ee8:	2300      	movs	r3, #0
 8005eea:	60bb      	str	r3, [r7, #8]
 8005eec:	e012      	b.n	8005f14 <BMP280_setReferencePressure+0x4a>
    {
        BMP280_measure(bmp280);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f8ca 	bl	8006088 <BMP280_measure>
        sum += bmp280->measurement.pressure;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	edd3 7a04 	vldr	s15, [r3, #16]
 8005efa:	ed97 7a03 	vldr	s14, [r7, #12]
 8005efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f02:	edc7 7a03 	vstr	s15, [r7, #12]
        HAL_Delay(delay);
 8005f06:	787b      	ldrb	r3, [r7, #1]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f001 fbfb 	bl	8007704 <HAL_Delay>
    for (int i = 0; i < samples; i++)
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	3301      	adds	r3, #1
 8005f12:	60bb      	str	r3, [r7, #8]
 8005f14:	887b      	ldrh	r3, [r7, #2]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	dbe8      	blt.n	8005eee <BMP280_setReferencePressure+0x24>
    }
    bmp280->p_reference = sum / samples;
 8005f1c:	887b      	ldrh	r3, [r7, #2]
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f26:	edd7 6a03 	vldr	s13, [r7, #12]
 8005f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8005f34:	bf00      	nop
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <BMP280_setPressureOversampling>:

/** Configure pressure oversampling */
void BMP280_setPressureOversampling(BMP280_t *bmp280, uint8_t osrs_p)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 8005f48:	21f4      	movs	r1, #244	; 0xf4
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f93a 	bl	80061c4 <BMP280_readRegister>
 8005f50:	4603      	mov	r3, r0
 8005f52:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11100011) | (osrs_p << 2);
 8005f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f58:	f023 031c 	bic.w	r3, r3, #28
 8005f5c:	b25a      	sxtb	r2, r3
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	b25b      	sxtb	r3, r3
 8005f64:	4313      	orrs	r3, r2
 8005f66:	b25b      	sxtb	r3, r3
 8005f68:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	21f4      	movs	r1, #244	; 0xf4
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f943 	bl	80061fc <BMP280_writeRegister>
}
 8005f76:	bf00      	nop
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <BMP280_setTemperatureOversampling>:

/** Configure temperature oversampling */
void BMP280_setTemperatureOversampling(BMP280_t *bmp280, uint8_t osrs_t)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	460b      	mov	r3, r1
 8005f88:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 8005f8a:	21f4      	movs	r1, #244	; 0xf4
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f919 	bl	80061c4 <BMP280_readRegister>
 8005f92:	4603      	mov	r3, r0
 8005f94:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b00011111) | (osrs_t << 5);
 8005f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f9a:	f003 031f 	and.w	r3, r3, #31
 8005f9e:	b25a      	sxtb	r2, r3
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	015b      	lsls	r3, r3, #5
 8005fa4:	b25b      	sxtb	r3, r3
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	b25b      	sxtb	r3, r3
 8005faa:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	21f4      	movs	r1, #244	; 0xf4
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f922 	bl	80061fc <BMP280_writeRegister>
}
 8005fb8:	bf00      	nop
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <BMP280_setPowerMode>:

/** Configure power mode */
void BMP280_setPowerMode(BMP280_t *bmp280, uint8_t mode)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 8005fcc:	21f4      	movs	r1, #244	; 0xf4
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f8f8 	bl	80061c4 <BMP280_readRegister>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11111100) | mode;
 8005fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fdc:	f023 0303 	bic.w	r3, r3, #3
 8005fe0:	b25a      	sxtb	r2, r3
 8005fe2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	b25b      	sxtb	r3, r3
 8005fea:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	21f4      	movs	r1, #244	; 0xf4
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f902 	bl	80061fc <BMP280_writeRegister>
}
 8005ff8:	bf00      	nop
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <BMP280_setStandbyTime>:

/** Configure standby time */
void BMP280_setStandbyTime(BMP280_t *bmp280, uint8_t t_sb)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 800600c:	21f5      	movs	r1, #245	; 0xf5
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f8d8 	bl	80061c4 <BMP280_readRegister>
 8006014:	4603      	mov	r3, r0
 8006016:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b00011111) | (t_sb << 5);
 8006018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800601c:	f003 031f 	and.w	r3, r3, #31
 8006020:	b25a      	sxtb	r2, r3
 8006022:	78fb      	ldrb	r3, [r7, #3]
 8006024:	015b      	lsls	r3, r3, #5
 8006026:	b25b      	sxtb	r3, r3
 8006028:	4313      	orrs	r3, r2
 800602a:	b25b      	sxtb	r3, r3
 800602c:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 800602e:	7bfb      	ldrb	r3, [r7, #15]
 8006030:	461a      	mov	r2, r3
 8006032:	21f5      	movs	r1, #245	; 0xf5
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f8e1 	bl	80061fc <BMP280_writeRegister>
}
 800603a:	bf00      	nop
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <BMP280_setFilterCoefficient>:

/** Configure IIR filter */
void BMP280_setFilterCoefficient(BMP280_t *bmp280, uint8_t filter)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	460b      	mov	r3, r1
 800604c:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 800604e:	21f5      	movs	r1, #245	; 0xf5
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f8b7 	bl	80061c4 <BMP280_readRegister>
 8006056:	4603      	mov	r3, r0
 8006058:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b11100011) | (filter << 2);
 800605a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800605e:	f023 031c 	bic.w	r3, r3, #28
 8006062:	b25a      	sxtb	r2, r3
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	b25b      	sxtb	r3, r3
 800606a:	4313      	orrs	r3, r2
 800606c:	b25b      	sxtb	r3, r3
 800606e:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	461a      	mov	r2, r3
 8006074:	21f5      	movs	r1, #245	; 0xf5
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f8c0 	bl	80061fc <BMP280_writeRegister>
}
 800607c:	bf00      	nop
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	0000      	movs	r0, r0
	...

08006088 <BMP280_measure>:
/**
 * Read latest measurement from sensor and execute compensation.
 * Stores the results in measurement member variable.
 * */
void BMP280_measure(BMP280_t *bmp280)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
    uint8_t data[6];
    BMP280_readMBRegister(bmp280, BMP280_REG_DATA, data, 6);
 8006090:	f107 0208 	add.w	r2, r7, #8
 8006094:	2306      	movs	r3, #6
 8006096:	21f7      	movs	r1, #247	; 0xf7
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f8ce 	bl	800623a <BMP280_readMBRegister>

    int32_t adc_P = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800609e:	7a3b      	ldrb	r3, [r7, #8]
 80060a0:	031a      	lsls	r2, r3, #12
 80060a2:	7a7b      	ldrb	r3, [r7, #9]
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	4313      	orrs	r3, r2
 80060a8:	7aba      	ldrb	r2, [r7, #10]
 80060aa:	0912      	lsrs	r2, r2, #4
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	4313      	orrs	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]
    int32_t adc_T = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80060b2:	7afb      	ldrb	r3, [r7, #11]
 80060b4:	031a      	lsls	r2, r3, #12
 80060b6:	7b3b      	ldrb	r3, [r7, #12]
 80060b8:	011b      	lsls	r3, r3, #4
 80060ba:	4313      	orrs	r3, r2
 80060bc:	7b7a      	ldrb	r2, [r7, #13]
 80060be:	0912      	lsrs	r2, r2, #4
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]

    bmp280->measurement.temperature = (float)BMP280_compensate_temperature(bmp280, adc_T) / 100.0;
 80060c6:	6939      	ldr	r1, [r7, #16]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f917 	bl	80062fc <BMP280_compensate_temperature>
 80060ce:	ee07 0a90 	vmov	s15, r0
 80060d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060d6:	ee17 0a90 	vmov	r0, s15
 80060da:	f7fa fa5d 	bl	8000598 <__aeabi_f2d>
 80060de:	f04f 0200 	mov.w	r2, #0
 80060e2:	4b35      	ldr	r3, [pc, #212]	; (80061b8 <BMP280_measure+0x130>)
 80060e4:	f7fa fbda 	bl	800089c <__aeabi_ddiv>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4610      	mov	r0, r2
 80060ee:	4619      	mov	r1, r3
 80060f0:	f7fa fda2 	bl	8000c38 <__aeabi_d2f>
 80060f4:	4602      	mov	r2, r0
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	60da      	str	r2, [r3, #12]
    bmp280->measurement.pressure = (float)BMP280_compensate_pressure(bmp280, adc_P) / 256.0;
 80060fa:	6979      	ldr	r1, [r7, #20]
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f953 	bl	80063a8 <BMP280_compensate_pressure>
 8006102:	ee07 0a90 	vmov	s15, r0
 8006106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610a:	ee17 0a90 	vmov	r0, s15
 800610e:	f7fa fa43 	bl	8000598 <__aeabi_f2d>
 8006112:	f04f 0200 	mov.w	r2, #0
 8006116:	4b29      	ldr	r3, [pc, #164]	; (80061bc <BMP280_measure+0x134>)
 8006118:	f7fa fbc0 	bl	800089c <__aeabi_ddiv>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4610      	mov	r0, r2
 8006122:	4619      	mov	r1, r3
 8006124:	f7fa fd88 	bl	8000c38 <__aeabi_d2f>
 8006128:	4602      	mov	r2, r0
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	611a      	str	r2, [r3, #16]

    if (bmp280->p_reference > 0)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	edd3 7a01 	vldr	s15, [r3, #4]
 8006134:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800613c:	dc00      	bgt.n	8006140 <BMP280_measure+0xb8>
    {
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
    }
}
 800613e:	e02c      	b.n	800619a <BMP280_measure+0x112>
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	ed93 7a04 	vldr	s14, [r3, #16]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	edd3 7a01 	vldr	s15, [r3, #4]
 800614c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006150:	ee16 0a90 	vmov	r0, s13
 8006154:	f7fa fa20 	bl	8000598 <__aeabi_f2d>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80061a8 <BMP280_measure+0x120>
 8006160:	ec43 2b10 	vmov	d0, r2, r3
 8006164:	f010 fc5c 	bl	8016a20 <pow>
 8006168:	ec53 2b10 	vmov	r2, r3, d0
 800616c:	f04f 0000 	mov.w	r0, #0
 8006170:	4913      	ldr	r1, [pc, #76]	; (80061c0 <BMP280_measure+0x138>)
 8006172:	f7fa f8b1 	bl	80002d8 <__aeabi_dsub>
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	4610      	mov	r0, r2
 800617c:	4619      	mov	r1, r3
 800617e:	a30c      	add	r3, pc, #48	; (adr r3, 80061b0 <BMP280_measure+0x128>)
 8006180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006184:	f7fa fa60 	bl	8000648 <__aeabi_dmul>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	4610      	mov	r0, r2
 800618e:	4619      	mov	r1, r3
 8006190:	f7fa fd52 	bl	8000c38 <__aeabi_d2f>
 8006194:	4602      	mov	r2, r0
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	615a      	str	r2, [r3, #20]
}
 800619a:	bf00      	nop
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	f3af 8000 	nop.w
 80061a8:	1a36e2eb 	.word	0x1a36e2eb
 80061ac:	3fc85bc0 	.word	0x3fc85bc0
 80061b0:	00000000 	.word	0x00000000
 80061b4:	4150e92d 	.word	0x4150e92d
 80061b8:	40590000 	.word	0x40590000
 80061bc:	40700000 	.word	0x40700000
 80061c0:	3ff00000 	.word	0x3ff00000

080061c4 <BMP280_readRegister>:
 * Read a register
 * @param address: Register address.
 * @return Register value.
 * */
uint8_t BMP280_readRegister(BMP280_t *bmp280, uint8_t address)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	70fb      	strb	r3, [r7, #3]
    BMP280_spiCSNlow(bmp280);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f883 	bl	80062dc <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 80061d6:	78fb      	ldrb	r3, [r7, #3]
 80061d8:	4619      	mov	r1, r3
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f855 	bl	800628a <BMP280_spiReadWrite>
    uint8_t value = BMP280_spiReadWrite(bmp280, 0);
 80061e0:	2100      	movs	r1, #0
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f851 	bl	800628a <BMP280_spiReadWrite>
 80061e8:	4603      	mov	r3, r0
 80061ea:	73fb      	strb	r3, [r7, #15]
    BMP280_spiCSNhigh(bmp280);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f865 	bl	80062bc <BMP280_spiCSNhigh>
    return value;
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <BMP280_writeRegister>:
 * Write to a register
 * @param address: Register address.
 * @param value: Value to write.
 * */
void BMP280_writeRegister(BMP280_t *bmp280, uint8_t address, uint8_t value)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	70fb      	strb	r3, [r7, #3]
 8006208:	4613      	mov	r3, r2
 800620a:	70bb      	strb	r3, [r7, #2]
    BMP280_spiCSNlow(bmp280);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f865 	bl	80062dc <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address & BMP280_SPI_MASK_WRITE);
 8006212:	78fb      	ldrb	r3, [r7, #3]
 8006214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006218:	b2db      	uxtb	r3, r3
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f834 	bl	800628a <BMP280_spiReadWrite>
    BMP280_spiReadWrite(bmp280, value);
 8006222:	78bb      	ldrb	r3, [r7, #2]
 8006224:	4619      	mov	r1, r3
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f82f 	bl	800628a <BMP280_spiReadWrite>
    BMP280_spiCSNhigh(bmp280);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f845 	bl	80062bc <BMP280_spiCSNhigh>
}
 8006232:	bf00      	nop
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <BMP280_readMBRegister>:
 * @param address: Register address.
 * @param values: Array pointer to store values in.
 * @param length: Number of bytes to read.
 * */
void BMP280_readMBRegister(BMP280_t *bmp280, uint8_t address, uint8_t *values, uint8_t length)
{
 800623a:	b590      	push	{r4, r7, lr}
 800623c:	b085      	sub	sp, #20
 800623e:	af00      	add	r7, sp, #0
 8006240:	60f8      	str	r0, [r7, #12]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	461a      	mov	r2, r3
 8006246:	460b      	mov	r3, r1
 8006248:	72fb      	strb	r3, [r7, #11]
 800624a:	4613      	mov	r3, r2
 800624c:	72bb      	strb	r3, [r7, #10]
    BMP280_spiCSNlow(bmp280);
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 f844 	bl	80062dc <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 8006254:	7afb      	ldrb	r3, [r7, #11]
 8006256:	4619      	mov	r1, r3
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 f816 	bl	800628a <BMP280_spiReadWrite>
    while (length--)
 800625e:	e008      	b.n	8006272 <BMP280_readMBRegister+0x38>
    {
        *values++ = BMP280_spiReadWrite(bmp280, 0);
 8006260:	687c      	ldr	r4, [r7, #4]
 8006262:	1c63      	adds	r3, r4, #1
 8006264:	607b      	str	r3, [r7, #4]
 8006266:	2100      	movs	r1, #0
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 f80e 	bl	800628a <BMP280_spiReadWrite>
 800626e:	4603      	mov	r3, r0
 8006270:	7023      	strb	r3, [r4, #0]
    while (length--)
 8006272:	7abb      	ldrb	r3, [r7, #10]
 8006274:	1e5a      	subs	r2, r3, #1
 8006276:	72ba      	strb	r2, [r7, #10]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1f1      	bne.n	8006260 <BMP280_readMBRegister+0x26>
    }
    BMP280_spiCSNhigh(bmp280);
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 f81d 	bl	80062bc <BMP280_spiCSNhigh>
}
 8006282:	bf00      	nop
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	bd90      	pop	{r4, r7, pc}

0800628a <BMP280_spiReadWrite>:
 * SPI transmit and receive one byte simultaneously
 * @param tx_message: Transmit byte.
 * @return Received byte.
 * */
uint8_t BMP280_spiReadWrite(BMP280_t *bmp280, uint8_t tx_message)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b086      	sub	sp, #24
 800628e:	af02      	add	r7, sp, #8
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	460b      	mov	r3, r1
 8006294:	70fb      	strb	r3, [r7, #3]
    uint8_t rx_message = 255;
 8006296:	23ff      	movs	r3, #255	; 0xff
 8006298:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(bmp280->spiHandle, &tx_message, &rx_message, 1, HAL_MAX_DELAY);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6818      	ldr	r0, [r3, #0]
 800629e:	f107 020f 	add.w	r2, r7, #15
 80062a2:	1cf9      	adds	r1, r7, #3
 80062a4:	f04f 33ff 	mov.w	r3, #4294967295
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	2301      	movs	r3, #1
 80062ac:	f004 fa7f 	bl	800a7ae <HAL_SPI_TransmitReceive>
    return rx_message;
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
	...

080062bc <BMP280_spiCSNhigh>:

/** Pull chip select high (inactive) */
void BMP280_spiCSNhigh(BMP280_t *bmp280)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 80062c4:	2201      	movs	r2, #1
 80062c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062ca:	4803      	ldr	r0, [pc, #12]	; (80062d8 <BMP280_spiCSNhigh+0x1c>)
 80062cc:	f002 f8c6 	bl	800845c <HAL_GPIO_WritePin>
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	40020c00 	.word	0x40020c00

080062dc <BMP280_spiCSNlow>:

/** Pull chip select low (active) */
void BMP280_spiCSNlow(BMP280_t *bmp280)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_RESET);
 80062e4:	2200      	movs	r2, #0
 80062e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062ea:	4803      	ldr	r0, [pc, #12]	; (80062f8 <BMP280_spiCSNlow+0x1c>)
 80062ec:	f002 f8b6 	bl	800845c <HAL_GPIO_WritePin>
}
 80062f0:	bf00      	nop
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	40020c00 	.word	0x40020c00

080062fc <BMP280_compensate_temperature>:
 * Calculate sensor temperature from measurement and compensation parameters.
 * @param uncomp_temp: Raw temperature measurement.
 * @return Temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
 * */
int32_t BMP280_compensate_temperature(BMP280_t *bmp280, int32_t uncomp_temp)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
    int32_t var1, var2;
    var1 = ((((uncomp_temp / 8) - ((int32_t)bmp280->compensationParameters.dig_t1 << 1))) * ((int32_t)bmp280->compensationParameters.dig_t2)) / 2048;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	da00      	bge.n	800630e <BMP280_compensate_temperature+0x12>
 800630c:	3307      	adds	r3, #7
 800630e:	10db      	asrs	r3, r3, #3
 8006310:	461a      	mov	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	8b1b      	ldrh	r3, [r3, #24]
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 8006320:	fb02 f303 	mul.w	r3, r2, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	da01      	bge.n	800632c <BMP280_compensate_temperature+0x30>
 8006328:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800632c:	12db      	asrs	r3, r3, #11
 800632e:	60fb      	str	r3, [r7, #12]
    var2 = (((((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1)) * ((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1))) / 4096) * ((int32_t)bmp280->compensationParameters.dig_t3)) / 16384;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	da00      	bge.n	8006338 <BMP280_compensate_temperature+0x3c>
 8006336:	330f      	adds	r3, #15
 8006338:	111b      	asrs	r3, r3, #4
 800633a:	461a      	mov	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	8b1b      	ldrh	r3, [r3, #24]
 8006340:	1ad2      	subs	r2, r2, r3
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	da00      	bge.n	800634a <BMP280_compensate_temperature+0x4e>
 8006348:	330f      	adds	r3, #15
 800634a:	111b      	asrs	r3, r3, #4
 800634c:	4619      	mov	r1, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	8b1b      	ldrh	r3, [r3, #24]
 8006352:	1acb      	subs	r3, r1, r3
 8006354:	fb02 f303 	mul.w	r3, r2, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	da01      	bge.n	8006360 <BMP280_compensate_temperature+0x64>
 800635c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006360:	131b      	asrs	r3, r3, #12
 8006362:	461a      	mov	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800636a:	fb02 f303 	mul.w	r3, r2, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	da03      	bge.n	800637a <BMP280_compensate_temperature+0x7e>
 8006372:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8006376:	441a      	add	r2, r3
 8006378:	4613      	mov	r3, r2
 800637a:	139b      	asrs	r3, r3, #14
 800637c:	60bb      	str	r3, [r7, #8]
    bmp280->t_fine = var1 + var2;
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	441a      	add	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	609a      	str	r2, [r3, #8]
    return (bmp280->t_fine * 5 + 128) / 256;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	4613      	mov	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	3380      	adds	r3, #128	; 0x80
 8006394:	2b00      	cmp	r3, #0
 8006396:	da00      	bge.n	800639a <BMP280_compensate_temperature+0x9e>
 8006398:	33ff      	adds	r3, #255	; 0xff
 800639a:	121b      	asrs	r3, r3, #8
}
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <BMP280_compensate_pressure>:
 * @param uncomp_pres: Raw pressure measurement.
 * @return Pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
 * Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
 * */
uint32_t BMP280_compensate_pressure(BMP280_t *bmp280, int32_t uncomp_pres)
{
 80063a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063ac:	b0d6      	sub	sp, #344	; 0x158
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 80063b4:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
    int64_t var1, var2, p;
    var1 = ((int64_t)(bmp280->t_fine)) - 128000;
 80063b8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	17da      	asrs	r2, r3, #31
 80063c0:	461c      	mov	r4, r3
 80063c2:	4615      	mov	r5, r2
 80063c4:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80063c8:	f145 3bff 	adc.w	fp, r5, #4294967295
 80063cc:	e9c7 ab54 	strd	sl, fp, [r7, #336]	; 0x150
    var2 = var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p6;
 80063d0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80063d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80063d8:	fb03 f102 	mul.w	r1, r3, r2
 80063dc:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80063e0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80063e4:	fb02 f303 	mul.w	r3, r2, r3
 80063e8:	18ca      	adds	r2, r1, r3
 80063ea:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80063ee:	fba3 8903 	umull	r8, r9, r3, r3
 80063f2:	eb02 0309 	add.w	r3, r2, r9
 80063f6:	4699      	mov	r9, r3
 80063f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80063fc:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8006400:	b21b      	sxth	r3, r3
 8006402:	17da      	asrs	r2, r3, #31
 8006404:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006408:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800640c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8006410:	4603      	mov	r3, r0
 8006412:	fb03 f209 	mul.w	r2, r3, r9
 8006416:	460b      	mov	r3, r1
 8006418:	fb08 f303 	mul.w	r3, r8, r3
 800641c:	4413      	add	r3, r2
 800641e:	4602      	mov	r2, r0
 8006420:	fba8 1202 	umull	r1, r2, r8, r2
 8006424:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006428:	460a      	mov	r2, r1
 800642a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800642e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8006432:	4413      	add	r3, r2
 8006434:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006438:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800643c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8006440:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + ((var1 * (int64_t)bmp280->compensationParameters.dig_p5) * 131072);
 8006444:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006448:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800644c:	b21b      	sxth	r3, r3
 800644e:	17da      	asrs	r2, r3, #31
 8006450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006454:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8006458:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800645c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8006460:	462a      	mov	r2, r5
 8006462:	fb02 f203 	mul.w	r2, r2, r3
 8006466:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800646a:	4621      	mov	r1, r4
 800646c:	fb01 f303 	mul.w	r3, r1, r3
 8006470:	441a      	add	r2, r3
 8006472:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006476:	4621      	mov	r1, r4
 8006478:	fba3 1301 	umull	r1, r3, r3, r1
 800647c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8006480:	460b      	mov	r3, r1
 8006482:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006486:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800648a:	18d3      	adds	r3, r2, r3
 800648c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8006490:	f04f 0000 	mov.w	r0, #0
 8006494:	f04f 0100 	mov.w	r1, #0
 8006498:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 800649c:	462b      	mov	r3, r5
 800649e:	0459      	lsls	r1, r3, #17
 80064a0:	4623      	mov	r3, r4
 80064a2:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80064a6:	4623      	mov	r3, r4
 80064a8:	0458      	lsls	r0, r3, #17
 80064aa:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80064ae:	1814      	adds	r4, r2, r0
 80064b0:	67bc      	str	r4, [r7, #120]	; 0x78
 80064b2:	414b      	adcs	r3, r1
 80064b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80064b6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80064ba:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + (((int64_t)bmp280->compensationParameters.dig_p4) * 34359738368);
 80064be:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80064c2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80064c6:	b21b      	sxth	r3, r3
 80064c8:	17da      	asrs	r2, r3, #31
 80064ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80064d2:	f04f 0000 	mov.w	r0, #0
 80064d6:	f04f 0100 	mov.w	r1, #0
 80064da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064de:	00d9      	lsls	r1, r3, #3
 80064e0:	2000      	movs	r0, #0
 80064e2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80064e6:	1814      	adds	r4, r2, r0
 80064e8:	673c      	str	r4, [r7, #112]	; 0x70
 80064ea:	414b      	adcs	r3, r1
 80064ec:	677b      	str	r3, [r7, #116]	; 0x74
 80064ee:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80064f2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var1 = ((var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p3) / 256) + ((var1 * (int64_t)bmp280->compensationParameters.dig_p2) * 4096);
 80064f6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80064fa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80064fe:	fb03 f102 	mul.w	r1, r3, r2
 8006502:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8006506:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800650a:	fb02 f303 	mul.w	r3, r2, r3
 800650e:	18ca      	adds	r2, r1, r3
 8006510:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006514:	fba3 1303 	umull	r1, r3, r3, r3
 8006518:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800651c:	460b      	mov	r3, r1
 800651e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006526:	18d3      	adds	r3, r2, r3
 8006528:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800652c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006530:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8006534:	b21b      	sxth	r3, r3
 8006536:	17da      	asrs	r2, r3, #31
 8006538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800653c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006540:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8006544:	462b      	mov	r3, r5
 8006546:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800654a:	4642      	mov	r2, r8
 800654c:	fb02 f203 	mul.w	r2, r2, r3
 8006550:	464b      	mov	r3, r9
 8006552:	4621      	mov	r1, r4
 8006554:	fb01 f303 	mul.w	r3, r1, r3
 8006558:	4413      	add	r3, r2
 800655a:	4622      	mov	r2, r4
 800655c:	4641      	mov	r1, r8
 800655e:	fba2 1201 	umull	r1, r2, r2, r1
 8006562:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8006566:	460a      	mov	r2, r1
 8006568:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 800656c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8006570:	4413      	add	r3, r2
 8006572:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006576:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800657a:	2b00      	cmp	r3, #0
 800657c:	da07      	bge.n	800658e <BMP280_compensate_pressure+0x1e6>
 800657e:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8006582:	66b9      	str	r1, [r7, #104]	; 0x68
 8006584:	f143 0300 	adc.w	r3, r3, #0
 8006588:	66fb      	str	r3, [r7, #108]	; 0x6c
 800658a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800658e:	f04f 0000 	mov.w	r0, #0
 8006592:	f04f 0100 	mov.w	r1, #0
 8006596:	0a10      	lsrs	r0, r2, #8
 8006598:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800659c:	1219      	asrs	r1, r3, #8
 800659e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80065a2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80065a6:	b21b      	sxth	r3, r3
 80065a8:	17da      	asrs	r2, r3, #31
 80065aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065ae:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80065b2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80065b6:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80065ba:	464a      	mov	r2, r9
 80065bc:	fb02 f203 	mul.w	r2, r2, r3
 80065c0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80065c4:	4644      	mov	r4, r8
 80065c6:	fb04 f303 	mul.w	r3, r4, r3
 80065ca:	441a      	add	r2, r3
 80065cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80065d0:	4644      	mov	r4, r8
 80065d2:	fba3 4304 	umull	r4, r3, r3, r4
 80065d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80065da:	4623      	mov	r3, r4
 80065dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80065e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065e4:	18d3      	adds	r3, r2, r3
 80065e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80065ea:	f04f 0200 	mov.w	r2, #0
 80065ee:	f04f 0300 	mov.w	r3, #0
 80065f2:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80065f6:	464c      	mov	r4, r9
 80065f8:	0323      	lsls	r3, r4, #12
 80065fa:	4644      	mov	r4, r8
 80065fc:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8006600:	4644      	mov	r4, r8
 8006602:	0322      	lsls	r2, r4, #12
 8006604:	1884      	adds	r4, r0, r2
 8006606:	663c      	str	r4, [r7, #96]	; 0x60
 8006608:	eb41 0303 	adc.w	r3, r1, r3
 800660c:	667b      	str	r3, [r7, #100]	; 0x64
 800660e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8006612:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
    var1 = ((INT64_C(0x800000000000) + var1) * ((int64_t)bmp280->compensationParameters.dig_p1)) / 8589934592;
 8006616:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800661a:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800661e:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8006622:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8006626:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800662a:	8bdb      	ldrh	r3, [r3, #30]
 800662c:	b29b      	uxth	r3, r3
 800662e:	2200      	movs	r2, #0
 8006630:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006634:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006638:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800663c:	462b      	mov	r3, r5
 800663e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006642:	4642      	mov	r2, r8
 8006644:	fb02 f203 	mul.w	r2, r2, r3
 8006648:	464b      	mov	r3, r9
 800664a:	4621      	mov	r1, r4
 800664c:	fb01 f303 	mul.w	r3, r1, r3
 8006650:	4413      	add	r3, r2
 8006652:	4622      	mov	r2, r4
 8006654:	4641      	mov	r1, r8
 8006656:	fba2 1201 	umull	r1, r2, r2, r1
 800665a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800665e:	460a      	mov	r2, r1
 8006660:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8006664:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006668:	4413      	add	r3, r2
 800666a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800666e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8006672:	2b00      	cmp	r3, #0
 8006674:	da06      	bge.n	8006684 <BMP280_compensate_pressure+0x2dc>
 8006676:	1e51      	subs	r1, r2, #1
 8006678:	65b9      	str	r1, [r7, #88]	; 0x58
 800667a:	f143 0301 	adc.w	r3, r3, #1
 800667e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006680:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006684:	f04f 0000 	mov.w	r0, #0
 8006688:	f04f 0100 	mov.w	r1, #0
 800668c:	1058      	asrs	r0, r3, #1
 800668e:	17d9      	asrs	r1, r3, #31
 8006690:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    if (var1 == 0)
 8006694:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8006698:	4313      	orrs	r3, r2
 800669a:	d101      	bne.n	80066a0 <BMP280_compensate_pressure+0x2f8>
    {
        return 0;
 800669c:	2300      	movs	r3, #0
 800669e:	e182      	b.n	80069a6 <BMP280_compensate_pressure+0x5fe>
    }
    p = 1048576 - uncomp_pres;
 80066a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80066a4:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80066a8:	17da      	asrs	r2, r3, #31
 80066aa:	653b      	str	r3, [r7, #80]	; 0x50
 80066ac:	657a      	str	r2, [r7, #84]	; 0x54
 80066ae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80066b2:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    p = (((((p * 2147483648U)) - var2) * 3125) / var1);
 80066b6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80066ba:	f04f 0000 	mov.w	r0, #0
 80066be:	f04f 0100 	mov.w	r1, #0
 80066c2:	07d9      	lsls	r1, r3, #31
 80066c4:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 80066c8:	07d0      	lsls	r0, r2, #31
 80066ca:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80066ce:	1a84      	subs	r4, r0, r2
 80066d0:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80066d4:	eb61 0303 	sbc.w	r3, r1, r3
 80066d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066dc:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80066e0:	4622      	mov	r2, r4
 80066e2:	462b      	mov	r3, r5
 80066e4:	1891      	adds	r1, r2, r2
 80066e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80066e8:	415b      	adcs	r3, r3
 80066ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066f0:	4621      	mov	r1, r4
 80066f2:	1851      	adds	r1, r2, r1
 80066f4:	6439      	str	r1, [r7, #64]	; 0x40
 80066f6:	4629      	mov	r1, r5
 80066f8:	414b      	adcs	r3, r1
 80066fa:	647b      	str	r3, [r7, #68]	; 0x44
 80066fc:	f04f 0200 	mov.w	r2, #0
 8006700:	f04f 0300 	mov.w	r3, #0
 8006704:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006708:	4649      	mov	r1, r9
 800670a:	018b      	lsls	r3, r1, #6
 800670c:	4641      	mov	r1, r8
 800670e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006712:	4641      	mov	r1, r8
 8006714:	018a      	lsls	r2, r1, #6
 8006716:	4641      	mov	r1, r8
 8006718:	1889      	adds	r1, r1, r2
 800671a:	63b9      	str	r1, [r7, #56]	; 0x38
 800671c:	4649      	mov	r1, r9
 800671e:	eb43 0101 	adc.w	r1, r3, r1
 8006722:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006724:	f04f 0200 	mov.w	r2, #0
 8006728:	f04f 0300 	mov.w	r3, #0
 800672c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006730:	4649      	mov	r1, r9
 8006732:	008b      	lsls	r3, r1, #2
 8006734:	4641      	mov	r1, r8
 8006736:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800673a:	4641      	mov	r1, r8
 800673c:	008a      	lsls	r2, r1, #2
 800673e:	4610      	mov	r0, r2
 8006740:	4619      	mov	r1, r3
 8006742:	4603      	mov	r3, r0
 8006744:	4622      	mov	r2, r4
 8006746:	189b      	adds	r3, r3, r2
 8006748:	633b      	str	r3, [r7, #48]	; 0x30
 800674a:	460b      	mov	r3, r1
 800674c:	462a      	mov	r2, r5
 800674e:	eb42 0303 	adc.w	r3, r2, r3
 8006752:	637b      	str	r3, [r7, #52]	; 0x34
 8006754:	f04f 0200 	mov.w	r2, #0
 8006758:	f04f 0300 	mov.w	r3, #0
 800675c:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8006760:	4649      	mov	r1, r9
 8006762:	008b      	lsls	r3, r1, #2
 8006764:	4641      	mov	r1, r8
 8006766:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800676a:	4641      	mov	r1, r8
 800676c:	008a      	lsls	r2, r1, #2
 800676e:	4610      	mov	r0, r2
 8006770:	4619      	mov	r1, r3
 8006772:	4603      	mov	r3, r0
 8006774:	4622      	mov	r2, r4
 8006776:	189b      	adds	r3, r3, r2
 8006778:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800677c:	462b      	mov	r3, r5
 800677e:	460a      	mov	r2, r1
 8006780:	eb42 0303 	adc.w	r3, r2, r3
 8006784:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006788:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800678c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006790:	f7fa faa2 	bl	8000cd8 <__aeabi_ldivmod>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
    var1 = (((int64_t)bmp280->compensationParameters.dig_p9) * (p / 8192) * (p / 8192)) / 33554432;
 800679c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80067a0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80067a4:	b21b      	sxth	r3, r3
 80067a6:	17da      	asrs	r2, r3, #31
 80067a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80067ac:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80067b0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	da08      	bge.n	80067ca <BMP280_compensate_pressure+0x422>
 80067b8:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80067bc:	1851      	adds	r1, r2, r1
 80067be:	62b9      	str	r1, [r7, #40]	; 0x28
 80067c0:	f143 0300 	adc.w	r3, r3, #0
 80067c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067ca:	f04f 0000 	mov.w	r0, #0
 80067ce:	f04f 0100 	mov.w	r1, #0
 80067d2:	0b50      	lsrs	r0, r2, #13
 80067d4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80067d8:	1359      	asrs	r1, r3, #13
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80067e2:	4629      	mov	r1, r5
 80067e4:	fb02 f001 	mul.w	r0, r2, r1
 80067e8:	4621      	mov	r1, r4
 80067ea:	fb01 f103 	mul.w	r1, r1, r3
 80067ee:	4401      	add	r1, r0
 80067f0:	4620      	mov	r0, r4
 80067f2:	fba0 2302 	umull	r2, r3, r0, r2
 80067f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80067fa:	4613      	mov	r3, r2
 80067fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006804:	18cb      	adds	r3, r1, r3
 8006806:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800680a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800680e:	2b00      	cmp	r3, #0
 8006810:	da08      	bge.n	8006824 <BMP280_compensate_pressure+0x47c>
 8006812:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8006816:	1851      	adds	r1, r2, r1
 8006818:	6239      	str	r1, [r7, #32]
 800681a:	f143 0300 	adc.w	r3, r3, #0
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
 8006820:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006824:	f04f 0000 	mov.w	r0, #0
 8006828:	f04f 0100 	mov.w	r1, #0
 800682c:	0b50      	lsrs	r0, r2, #13
 800682e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8006832:	1359      	asrs	r1, r3, #13
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800683c:	4629      	mov	r1, r5
 800683e:	fb02 f001 	mul.w	r0, r2, r1
 8006842:	4621      	mov	r1, r4
 8006844:	fb01 f103 	mul.w	r1, r1, r3
 8006848:	4401      	add	r1, r0
 800684a:	4620      	mov	r0, r4
 800684c:	fba0 2302 	umull	r2, r3, r0, r2
 8006850:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006854:	4613      	mov	r3, r2
 8006856:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800685a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800685e:	18cb      	adds	r3, r1, r3
 8006860:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006864:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8006868:	2b00      	cmp	r3, #0
 800686a:	da08      	bge.n	800687e <BMP280_compensate_pressure+0x4d6>
 800686c:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8006870:	1851      	adds	r1, r2, r1
 8006872:	61b9      	str	r1, [r7, #24]
 8006874:	f143 0300 	adc.w	r3, r3, #0
 8006878:	61fb      	str	r3, [r7, #28]
 800687a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800687e:	f04f 0000 	mov.w	r0, #0
 8006882:	f04f 0100 	mov.w	r1, #0
 8006886:	0e50      	lsrs	r0, r2, #25
 8006888:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 800688c:	1659      	asrs	r1, r3, #25
 800688e:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    var2 = (((int64_t)bmp280->compensationParameters.dig_p8) * p) / 524288;
 8006892:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006896:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800689a:	b21b      	sxth	r3, r3
 800689c:	17da      	asrs	r2, r3, #31
 800689e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80068a2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80068a6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80068aa:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80068ae:	462a      	mov	r2, r5
 80068b0:	fb02 f203 	mul.w	r2, r2, r3
 80068b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80068b8:	4621      	mov	r1, r4
 80068ba:	fb01 f303 	mul.w	r3, r1, r3
 80068be:	441a      	add	r2, r3
 80068c0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80068c4:	4621      	mov	r1, r4
 80068c6:	fba3 1301 	umull	r1, r3, r3, r1
 80068ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068ce:	460b      	mov	r3, r1
 80068d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068d8:	18d3      	adds	r3, r2, r3
 80068da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068de:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80068e2:	2900      	cmp	r1, #0
 80068e4:	da07      	bge.n	80068f6 <BMP280_compensate_pressure+0x54e>
 80068e6:	4b33      	ldr	r3, [pc, #204]	; (80069b4 <BMP280_compensate_pressure+0x60c>)
 80068e8:	18c3      	adds	r3, r0, r3
 80068ea:	613b      	str	r3, [r7, #16]
 80068ec:	f141 0300 	adc.w	r3, r1, #0
 80068f0:	617b      	str	r3, [r7, #20]
 80068f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80068f6:	f04f 0200 	mov.w	r2, #0
 80068fa:	f04f 0300 	mov.w	r3, #0
 80068fe:	0cc2      	lsrs	r2, r0, #19
 8006900:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8006904:	14cb      	asrs	r3, r1, #19
 8006906:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    p = ((p + var1 + var2) / 256) + (((int64_t)bmp280->compensationParameters.dig_p7) * 16);
 800690a:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800690e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8006912:	1884      	adds	r4, r0, r2
 8006914:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8006918:	eb41 0303 	adc.w	r3, r1, r3
 800691c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006920:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8006924:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006928:	4621      	mov	r1, r4
 800692a:	1889      	adds	r1, r1, r2
 800692c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8006930:	4629      	mov	r1, r5
 8006932:	eb43 0101 	adc.w	r1, r3, r1
 8006936:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 800693a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800693e:	2b00      	cmp	r3, #0
 8006940:	da07      	bge.n	8006952 <BMP280_compensate_pressure+0x5aa>
 8006942:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8006946:	60b9      	str	r1, [r7, #8]
 8006948:	f143 0300 	adc.w	r3, r3, #0
 800694c:	60fb      	str	r3, [r7, #12]
 800694e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006952:	f04f 0000 	mov.w	r0, #0
 8006956:	f04f 0100 	mov.w	r1, #0
 800695a:	0a10      	lsrs	r0, r2, #8
 800695c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8006960:	1219      	asrs	r1, r3, #8
 8006962:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006966:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800696a:	b21b      	sxth	r3, r3
 800696c:	17da      	asrs	r2, r3, #31
 800696e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006972:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006976:	f04f 0200 	mov.w	r2, #0
 800697a:	f04f 0300 	mov.w	r3, #0
 800697e:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8006982:	464c      	mov	r4, r9
 8006984:	0123      	lsls	r3, r4, #4
 8006986:	4644      	mov	r4, r8
 8006988:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800698c:	4644      	mov	r4, r8
 800698e:	0122      	lsls	r2, r4, #4
 8006990:	1884      	adds	r4, r0, r2
 8006992:	603c      	str	r4, [r7, #0]
 8006994:	eb41 0303 	adc.w	r3, r1, r3
 8006998:	607b      	str	r3, [r7, #4]
 800699a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800699e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    return (uint32_t)p;
 80069a2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80069ac:	46bd      	mov	sp, r7
 80069ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069b2:	bf00      	nop
 80069b4:	0007ffff 	.word	0x0007ffff

080069b8 <MPU_Init>:

/// @brief Do the whole initialization of the IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_Init(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 80069b8:	b5b0      	push	{r4, r5, r7, lr}
 80069ba:	b09c      	sub	sp, #112	; 0x70
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
	// Disable BMP280
	HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 80069c2:	2201      	movs	r2, #1
 80069c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80069c8:	482c      	ldr	r0, [pc, #176]	; (8006a7c <MPU_Init+0xc4>)
 80069ca:	f001 fd47 	bl	800845c <HAL_GPIO_WritePin>

	// Set the config parameters
	pMPU9250->settings.gFullScaleRange = GFSR_500DPS;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	pMPU9250->settings.aFullScaleRange = AFSR_2G;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	pMPU9250->settings.CS_PIN = SPI2_IMU_CSIMU_Pin;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069e4:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	pMPU9250->settings.CS_PORT = SPI2_IMU_CSIMU_GPIO_Port;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	4a24      	ldr	r2, [pc, #144]	; (8006a7c <MPU_Init+0xc4>)
 80069ec:	66da      	str	r2, [r3, #108]	; 0x6c
	pMPU9250->attitude.tau = 0.98;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	4a23      	ldr	r2, [pc, #140]	; (8006a80 <MPU_Init+0xc8>)
 80069f2:	651a      	str	r2, [r3, #80]	; 0x50
	pMPU9250->attitude.lastTick = 0;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	2200      	movs	r2, #0
 80069f8:	655a      	str	r2, [r3, #84]	; 0x54
	pMPU9250->attitude.dt = 0;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	f04f 0200 	mov.w	r2, #0
 8006a00:	659a      	str	r2, [r3, #88]	; 0x58

	// Check if IMU configured properly and block if it didn't
	if (MPU_begin(SPIx, pMPU9250) != true)
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f843 	bl	8006a90 <MPU_begin>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d023      	beq.n	8006a58 <MPU_Init+0xa0>
	{
		char str[100] = "ERROR: MPU9250 ID is wrong.";
 8006a10:	4b1c      	ldr	r3, [pc, #112]	; (8006a84 <MPU_Init+0xcc>)
 8006a12:	f107 040c 	add.w	r4, r7, #12
 8006a16:	461d      	mov	r5, r3
 8006a18:	6828      	ldr	r0, [r5, #0]
 8006a1a:	6869      	ldr	r1, [r5, #4]
 8006a1c:	68aa      	ldr	r2, [r5, #8]
 8006a1e:	68eb      	ldr	r3, [r5, #12]
 8006a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a22:	6928      	ldr	r0, [r5, #16]
 8006a24:	6969      	ldr	r1, [r5, #20]
 8006a26:	69aa      	ldr	r2, [r5, #24]
 8006a28:	c407      	stmia	r4!, {r0, r1, r2}
 8006a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a2e:	2248      	movs	r2, #72	; 0x48
 8006a30:	2100      	movs	r1, #0
 8006a32:	4618      	mov	r0, r3
 8006a34:	f00b ff5b 	bl	80128ee <memset>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8006a38:	f107 030c 	add.w	r3, r7, #12
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7f9 fc3f 	bl	80002c0 <strlen>
 8006a42:	4603      	mov	r3, r0
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	f107 010c 	add.w	r1, r7, #12
 8006a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4e:	480e      	ldr	r0, [pc, #56]	; (8006a88 <MPU_Init+0xd0>)
 8006a50:	f006 fd3c 	bl	800d4cc <HAL_UART_Transmit>
		return 1;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e00c      	b.n	8006a72 <MPU_Init+0xba>
	}

	// Calibrate the IMU
	HAL_UART_Transmit(&huart3, "CALIBRATING...\r\n", strlen("CALIBRATING...\r\n"), HAL_MAX_DELAY);
 8006a58:	f04f 33ff 	mov.w	r3, #4294967295
 8006a5c:	2210      	movs	r2, #16
 8006a5e:	490b      	ldr	r1, [pc, #44]	; (8006a8c <MPU_Init+0xd4>)
 8006a60:	4809      	ldr	r0, [pc, #36]	; (8006a88 <MPU_Init+0xd0>)
 8006a62:	f006 fd33 	bl	800d4cc <HAL_UART_Transmit>
	MPU_calibrateGyro(SPIx, pMPU9250, 20);
 8006a66:	2214      	movs	r2, #20
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f85c 	bl	8006b28 <MPU_calibrateGyro>

	return 0;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3770      	adds	r7, #112	; 0x70
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bdb0      	pop	{r4, r5, r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	40020c00 	.word	0x40020c00
 8006a80:	3f7ae148 	.word	0x3f7ae148
 8006a84:	0801806c 	.word	0x0801806c
 8006a88:	20000bd4 	.word	0x20000bd4
 8006a8c:	08018058 	.word	0x08018058

08006a90 <MPU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
    // Initialize variables
    uint8_t check, addr, val;

    // Confirm device
    MPU_REG_READ(SPIx, pMPU9250, WHO_AM_I, &check, 1);
 8006a9a:	f107 030f 	add.w	r3, r7, #15
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	9200      	str	r2, [sp, #0]
 8006aa2:	2275      	movs	r2, #117	; 0x75
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f8c8 	bl	8006c3c <MPU_REG_READ>
    if (check == WHO_AM_I_9250_ANS)
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	2b70      	cmp	r3, #112	; 0x70
 8006ab0:	d135      	bne.n	8006b1e <MPU_begin+0x8e>
    {
        // Startup / reset the sensor
        addr = PWR_MGMT_1;
 8006ab2:	236b      	movs	r3, #107	; 0x6b
 8006ab4:	73bb      	strb	r3, [r7, #14]
        val = 0x00;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8006aba:	f107 030d 	add.w	r3, r7, #13
 8006abe:	f107 020e 	add.w	r2, r7, #14
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f898 	bl	8006bfa <MPU_REG_WRITE>

        // Disable I2C (SPI only)
        addr = USER_CTRL;
 8006aca:	236a      	movs	r3, #106	; 0x6a
 8006acc:	73bb      	strb	r3, [r7, #14]
        val = 0x10;
 8006ace:	2310      	movs	r3, #16
 8006ad0:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8006ad2:	f107 030d 	add.w	r3, r7, #13
 8006ad6:	f107 020e 	add.w	r2, r7, #14
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f88c 	bl	8006bfa <MPU_REG_WRITE>

        // Set the full scale ranges
        MPU_writeAccFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.aFullScaleRange);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8006ae8:	461a      	mov	r2, r3
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f8e1 	bl	8006cb4 <MPU_writeAccFullScaleRange>
        MPU_writeGyroFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.gFullScaleRange);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8006af8:	461a      	mov	r2, r3
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f941 	bl	8006d84 <MPU_writeGyroFullScaleRange>

        // Set 41 Hz LPF in Config Register
        uint8_t addr = CONFIG;
 8006b02:	231a      	movs	r3, #26
 8006b04:	733b      	strb	r3, [r7, #12]
        uint8_t val = 0x03;
 8006b06:	2303      	movs	r3, #3
 8006b08:	72fb      	strb	r3, [r7, #11]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8006b0a:	f107 030b 	add.w	r3, r7, #11
 8006b0e:	f107 020c 	add.w	r2, r7, #12
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f870 	bl	8006bfa <MPU_REG_WRITE>

        return 1;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e000      	b.n	8006b20 <MPU_begin+0x90>
    }
    else
    {
        return 0;
 8006b1e:	2300      	movs	r3, #0
    }
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <MPU_calibrateGyro>:
/// @brief Find offsets for each axis of gyroscope
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param numCalPoints Number of data points to average
void MPU_calibrateGyro(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint16_t numCalPoints)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	4613      	mov	r3, r2
 8006b34:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61bb      	str	r3, [r7, #24]
    int32_t z = 0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	617b      	str	r3, [r7, #20]

    // Zero guard
    if (numCalPoints == 0)
 8006b42:	88fb      	ldrh	r3, [r7, #6]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <MPU_calibrateGyro+0x24>
    {
        numCalPoints = 1;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	827b      	strh	r3, [r7, #18]
 8006b50:	e01e      	b.n	8006b90 <MPU_calibrateGyro+0x68>
    {
        MPU_readRawData(SPIx, pMPU9250);
 8006b52:	68b9      	ldr	r1, [r7, #8]
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 f97f 	bl	8006e58 <MPU_readRawData>
        x += pMPU9250->rawData.gx;
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006b60:	461a      	mov	r2, r3
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	4413      	add	r3, r2
 8006b66:	61fb      	str	r3, [r7, #28]
        y += pMPU9250->rawData.gy;
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	4413      	add	r3, r2
 8006b74:	61bb      	str	r3, [r7, #24]
        z += pMPU9250->rawData.gz;
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	4413      	add	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]
        HAL_Delay(3);
 8006b84:	2003      	movs	r0, #3
 8006b86:	f000 fdbd 	bl	8007704 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8006b8a:	8a7b      	ldrh	r3, [r7, #18]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	827b      	strh	r3, [r7, #18]
 8006b90:	8a7a      	ldrh	r2, [r7, #18]
 8006b92:	88fb      	ldrh	r3, [r7, #6]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d3dc      	bcc.n	8006b52 <MPU_calibrateGyro+0x2a>
    }

    // Average the saved data points to find the gyroscope offset
    pMPU9250->gyroBias.x = (float)x / (float)numCalPoints;
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	ee07 3a90 	vmov	s15, r3
 8006b9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006ba2:	88fb      	ldrh	r3, [r7, #6]
 8006ba4:	ee07 3a90 	vmov	s15, r3
 8006ba8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    pMPU9250->gyroBias.y = (float)y / (float)numCalPoints;
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	ee07 3a90 	vmov	s15, r3
 8006bbc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006bc0:	88fb      	ldrh	r3, [r7, #6]
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    pMPU9250->gyroBias.z = (float)z / (float)numCalPoints;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006bde:	88fb      	ldrh	r3, [r7, #6]
 8006be0:	ee07 3a90 	vmov	s15, r3
 8006be4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
}
 8006bf2:	bf00      	nop
 8006bf4:	3720      	adds	r7, #32
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <MPU_REG_WRITE>:
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param pAddr Pointer to address to be written to
/// @param pVal Pointer of value to write to given address
void MPU_REG_WRITE(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t *pAddr, uint8_t *pVal)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	607a      	str	r2, [r7, #4]
 8006c06:	603b      	str	r3, [r7, #0]
    MPU_CS(pMPU9250, CS_SELECT);
 8006c08:	2100      	movs	r1, #0
 8006c0a:	68b8      	ldr	r0, [r7, #8]
 8006c0c:	f000 f83e 	bl	8006c8c <MPU_CS>
    HAL_SPI_Transmit(SPIx, pAddr, 1, SPI_TIMOUT_MS);
 8006c10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c14:	2201      	movs	r2, #1
 8006c16:	6879      	ldr	r1, [r7, #4]
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f003 fb2a 	bl	800a272 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pVal, 1, SPI_TIMOUT_MS);
 8006c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c22:	2201      	movs	r2, #1
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f003 fb23 	bl	800a272 <HAL_SPI_Transmit>
    MPU_CS(pMPU9250, CS_DESELECT);
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	68b8      	ldr	r0, [r7, #8]
 8006c30:	f000 f82c 	bl	8006c8c <MPU_CS>
}
 8006c34:	bf00      	nop
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <MPU_REG_READ>:
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param addr Address to start reading at
/// @param pRxData Pointer to data buffer
/// @param RxSize Size of data buffer
void MPU_REG_READ(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t addr, uint8_t *pRxData, uint16_t RxSize)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	603b      	str	r3, [r7, #0]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	71fb      	strb	r3, [r7, #7]
    MPU_CS(pMPU9250, CS_SELECT);
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	68b8      	ldr	r0, [r7, #8]
 8006c50:	f000 f81c 	bl	8006c8c <MPU_CS>
    uint8_t writeAddr = addr | READWRITE;
 8006c54:	79fb      	ldrb	r3, [r7, #7]
 8006c56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(SPIx, &writeAddr, 1, SPI_TIMOUT_MS);
 8006c5e:	f107 0117 	add.w	r1, r7, #23
 8006c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c66:	2201      	movs	r2, #1
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f003 fb02 	bl	800a272 <HAL_SPI_Transmit>
    HAL_SPI_Receive(SPIx, pRxData, RxSize, SPI_TIMOUT_MS);
 8006c6e:	8c3a      	ldrh	r2, [r7, #32]
 8006c70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f003 fc69 	bl	800a54e <HAL_SPI_Receive>
    MPU_CS(pMPU9250, CS_DESELECT);
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	68b8      	ldr	r0, [r7, #8]
 8006c80:	f000 f804 	bl	8006c8c <MPU_CS>
}
 8006c84:	bf00      	nop
 8006c86:	3718      	adds	r7, #24
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <MPU_CS>:

/// @brief Set CS state to either start or end transmissions
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param state Set low to select, high to deselect
void MPU_CS(MPU9250_t *pMPU9250, uint8_t state)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	460b      	mov	r3, r1
 8006c96:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(pMPU9250->settings.CS_PORT, pMPU9250->settings.CS_PIN, state);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8006ca2:	78fa      	ldrb	r2, [r7, #3]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	f001 fbd9 	bl	800845c <HAL_GPIO_WritePin>
}
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
	...

08006cb4 <MPU_writeAccFullScaleRange>:
/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t aScale)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = ACCEL_CONFIG;
 8006cc2:	231c      	movs	r3, #28
 8006cc4:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (aScale)
 8006cc6:	79fb      	ldrb	r3, [r7, #7]
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	d847      	bhi.n	8006d5c <MPU_writeAccFullScaleRange+0xa8>
 8006ccc:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <MPU_writeAccFullScaleRange+0x20>)
 8006cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd2:	bf00      	nop
 8006cd4:	08006ce5 	.word	0x08006ce5
 8006cd8:	08006d03 	.word	0x08006d03
 8006cdc:	08006d21 	.word	0x08006d21
 8006ce0:	08006d3f 	.word	0x08006d3f
    {
    case AFSR_2G:
        pMPU9250->sensorData.aScaleFactor = 16384.0;
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8006cea:	615a      	str	r2, [r3, #20]
        val = 0x00;
 8006cec:	2300      	movs	r3, #0
 8006cee:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8006cf0:	f107 0316 	add.w	r3, r7, #22
 8006cf4:	f107 0217 	add.w	r2, r7, #23
 8006cf8:	68b9      	ldr	r1, [r7, #8]
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f7ff ff7d 	bl	8006bfa <MPU_REG_WRITE>
        break;
 8006d00:	e03b      	b.n	8006d7a <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_4G:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8006d08:	615a      	str	r2, [r3, #20]
        val = 0x08;
 8006d0a:	2308      	movs	r3, #8
 8006d0c:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8006d0e:	f107 0316 	add.w	r3, r7, #22
 8006d12:	f107 0217 	add.w	r2, r7, #23
 8006d16:	68b9      	ldr	r1, [r7, #8]
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f7ff ff6e 	bl	8006bfa <MPU_REG_WRITE>
        break;
 8006d1e:	e02c      	b.n	8006d7a <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_8G:
        pMPU9250->sensorData.aScaleFactor = 4096.0;
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8006d26:	615a      	str	r2, [r3, #20]
        val = 0x10;
 8006d28:	2310      	movs	r3, #16
 8006d2a:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8006d2c:	f107 0316 	add.w	r3, r7, #22
 8006d30:	f107 0217 	add.w	r2, r7, #23
 8006d34:	68b9      	ldr	r1, [r7, #8]
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f7ff ff5f 	bl	8006bfa <MPU_REG_WRITE>
        break;
 8006d3c:	e01d      	b.n	8006d7a <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_16G:
        pMPU9250->sensorData.aScaleFactor = 2048.0;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8006d44:	615a      	str	r2, [r3, #20]
        val = 0x18;
 8006d46:	2318      	movs	r3, #24
 8006d48:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8006d4a:	f107 0316 	add.w	r3, r7, #22
 8006d4e:	f107 0217 	add.w	r2, r7, #23
 8006d52:	68b9      	ldr	r1, [r7, #8]
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f7ff ff50 	bl	8006bfa <MPU_REG_WRITE>
        break;
 8006d5a:	e00e      	b.n	8006d7a <MPU_writeAccFullScaleRange+0xc6>
    default:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8006d62:	615a      	str	r2, [r3, #20]
        val = 0x08;
 8006d64:	2308      	movs	r3, #8
 8006d66:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8006d68:	f107 0316 	add.w	r3, r7, #22
 8006d6c:	f107 0217 	add.w	r2, r7, #23
 8006d70:	68b9      	ldr	r1, [r7, #8]
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f7ff ff41 	bl	8006bfa <MPU_REG_WRITE>
        break;
 8006d78:	bf00      	nop
    }
}
 8006d7a:	bf00      	nop
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop

08006d84 <MPU_writeGyroFullScaleRange>:
/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t gScale)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = GYRO_CONFIG;
 8006d92:	231b      	movs	r3, #27
 8006d94:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (gScale)
 8006d96:	79fb      	ldrb	r3, [r7, #7]
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d843      	bhi.n	8006e24 <MPU_writeGyroFullScaleRange+0xa0>
 8006d9c:	a201      	add	r2, pc, #4	; (adr r2, 8006da4 <MPU_writeGyroFullScaleRange+0x20>)
 8006d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da2:	bf00      	nop
 8006da4:	08006db5 	.word	0x08006db5
 8006da8:	08006dd1 	.word	0x08006dd1
 8006dac:	08006ded 	.word	0x08006ded
 8006db0:	08006e09 	.word	0x08006e09
    {
    case GFSR_250DPS:
        pMPU9250->sensorData.gScaleFactor = 131.0;
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	4a24      	ldr	r2, [pc, #144]	; (8006e48 <MPU_writeGyroFullScaleRange+0xc4>)
 8006db8:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x00;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8006dbe:	f107 0316 	add.w	r3, r7, #22
 8006dc2:	f107 0217 	add.w	r2, r7, #23
 8006dc6:	68b9      	ldr	r1, [r7, #8]
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f7ff ff16 	bl	8006bfa <MPU_REG_WRITE>
        break;
 8006dce:	e037      	b.n	8006e40 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_500DPS:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	4a1e      	ldr	r2, [pc, #120]	; (8006e4c <MPU_writeGyroFullScaleRange+0xc8>)
 8006dd4:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x08;
 8006dd6:	2308      	movs	r3, #8
 8006dd8:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8006dda:	f107 0316 	add.w	r3, r7, #22
 8006dde:	f107 0217 	add.w	r2, r7, #23
 8006de2:	68b9      	ldr	r1, [r7, #8]
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f7ff ff08 	bl	8006bfa <MPU_REG_WRITE>
        break;
 8006dea:	e029      	b.n	8006e40 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_1000DPS:
        pMPU9250->sensorData.gScaleFactor = 32.8;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	4a18      	ldr	r2, [pc, #96]	; (8006e50 <MPU_writeGyroFullScaleRange+0xcc>)
 8006df0:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x10;
 8006df2:	2310      	movs	r3, #16
 8006df4:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8006df6:	f107 0316 	add.w	r3, r7, #22
 8006dfa:	f107 0217 	add.w	r2, r7, #23
 8006dfe:	68b9      	ldr	r1, [r7, #8]
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f7ff fefa 	bl	8006bfa <MPU_REG_WRITE>
        break;
 8006e06:	e01b      	b.n	8006e40 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_2000DPS:
        pMPU9250->sensorData.gScaleFactor = 16.4;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	4a12      	ldr	r2, [pc, #72]	; (8006e54 <MPU_writeGyroFullScaleRange+0xd0>)
 8006e0c:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x18;
 8006e0e:	2318      	movs	r3, #24
 8006e10:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8006e12:	f107 0316 	add.w	r3, r7, #22
 8006e16:	f107 0217 	add.w	r2, r7, #23
 8006e1a:	68b9      	ldr	r1, [r7, #8]
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f7ff feec 	bl	8006bfa <MPU_REG_WRITE>
        break;
 8006e22:	e00d      	b.n	8006e40 <MPU_writeGyroFullScaleRange+0xbc>
    default:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	4a09      	ldr	r2, [pc, #36]	; (8006e4c <MPU_writeGyroFullScaleRange+0xc8>)
 8006e28:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x08;
 8006e2a:	2308      	movs	r3, #8
 8006e2c:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8006e2e:	f107 0316 	add.w	r3, r7, #22
 8006e32:	f107 0217 	add.w	r2, r7, #23
 8006e36:	68b9      	ldr	r1, [r7, #8]
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f7ff fede 	bl	8006bfa <MPU_REG_WRITE>
        break;
 8006e3e:	bf00      	nop
    }
}
 8006e40:	bf00      	nop
 8006e42:	3718      	adds	r7, #24
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	43030000 	.word	0x43030000
 8006e4c:	42830000 	.word	0x42830000
 8006e50:	42033333 	.word	0x42033333
 8006e54:	41833333 	.word	0x41833333

08006e58 <MPU_readRawData>:

/// @brief Read raw data from IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readRawData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b08e      	sub	sp, #56	; 0x38
 8006e5c:	af02      	add	r7, sp, #8
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
    // Init buffer
    uint8_t buf[6+2+6+24];

    // Subroutine for reading the raw data
    MPU_REG_READ(SPIx, pMPU9250, ACCEL_XOUT_H, buf, 6+2+6+24);
 8006e62:	f107 0308 	add.w	r3, r7, #8
 8006e66:	2226      	movs	r2, #38	; 0x26
 8006e68:	9200      	str	r2, [sp, #0]
 8006e6a:	223b      	movs	r2, #59	; 0x3b
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7ff fee4 	bl	8006c3c <MPU_REG_READ>

    // IMPORTANT Coordinate system conversion!
    // buf[0-1] -> IC X axis -> Y Drone axis
    // buf[2-3] -> IC Y axis -> X Drone axis
    // buf[4-5] -> IC Z axis -> Z Drone axis
    pMPU9250->rawData.ay = (buf[0] << 8 | buf[1]);
 8006e74:	7a3b      	ldrb	r3, [r7, #8]
 8006e76:	021b      	lsls	r3, r3, #8
 8006e78:	b21a      	sxth	r2, r3
 8006e7a:	7a7b      	ldrb	r3, [r7, #9]
 8006e7c:	b21b      	sxth	r3, r3
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	b21a      	sxth	r2, r3
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	805a      	strh	r2, [r3, #2]
    pMPU9250->rawData.ax = (buf[2] << 8 | buf[3]);
 8006e86:	7abb      	ldrb	r3, [r7, #10]
 8006e88:	021b      	lsls	r3, r3, #8
 8006e8a:	b21a      	sxth	r2, r3
 8006e8c:	7afb      	ldrb	r3, [r7, #11]
 8006e8e:	b21b      	sxth	r3, r3
 8006e90:	4313      	orrs	r3, r2
 8006e92:	b21a      	sxth	r2, r3
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	801a      	strh	r2, [r3, #0]
    pMPU9250->rawData.az = (buf[4] << 8 | buf[5]);
 8006e98:	7b3b      	ldrb	r3, [r7, #12]
 8006e9a:	021b      	lsls	r3, r3, #8
 8006e9c:	b21a      	sxth	r2, r3
 8006e9e:	7b7b      	ldrb	r3, [r7, #13]
 8006ea0:	b21b      	sxth	r3, r3
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	b21a      	sxth	r2, r3
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	809a      	strh	r2, [r3, #4]

    pMPU9250->rawData.temp = buf[6] << 8 | buf[7];
 8006eaa:	7bbb      	ldrb	r3, [r7, #14]
 8006eac:	021b      	lsls	r3, r3, #8
 8006eae:	b21a      	sxth	r2, r3
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	b21b      	sxth	r3, r3
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	b21a      	sxth	r2, r3
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	80da      	strh	r2, [r3, #6]

    // IMPORTANT Coordinate system conversion!
    // buf[ 8- 9] -> IC X axis -> -Y Drone axis
	// buf[10-11] -> IC Y axis -> -X Drone axis
	// buf[12-13] -> IC Z axis -> -Z Drone axis
    pMPU9250->rawData.gy = -(buf[8] << 8 | buf[9]);
 8006ebc:	7c3b      	ldrb	r3, [r7, #16]
 8006ebe:	021b      	lsls	r3, r3, #8
 8006ec0:	b21a      	sxth	r2, r3
 8006ec2:	7c7b      	ldrb	r3, [r7, #17]
 8006ec4:	b21b      	sxth	r3, r3
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	b21b      	sxth	r3, r3
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	425b      	negs	r3, r3
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	b21a      	sxth	r2, r3
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	815a      	strh	r2, [r3, #10]
    pMPU9250->rawData.gx = -(buf[10] << 8 | buf[11]);
 8006ed6:	7cbb      	ldrb	r3, [r7, #18]
 8006ed8:	021b      	lsls	r3, r3, #8
 8006eda:	b21a      	sxth	r2, r3
 8006edc:	7cfb      	ldrb	r3, [r7, #19]
 8006ede:	b21b      	sxth	r3, r3
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	b21b      	sxth	r3, r3
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	425b      	negs	r3, r3
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	b21a      	sxth	r2, r3
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	811a      	strh	r2, [r3, #8]
    pMPU9250->rawData.gz = -(buf[12] << 8 | buf[13]);
 8006ef0:	7d3b      	ldrb	r3, [r7, #20]
 8006ef2:	021b      	lsls	r3, r3, #8
 8006ef4:	b21a      	sxth	r2, r3
 8006ef6:	7d7b      	ldrb	r3, [r7, #21]
 8006ef8:	b21b      	sxth	r3, r3
 8006efa:	4313      	orrs	r3, r2
 8006efc:	b21b      	sxth	r3, r3
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	425b      	negs	r3, r3
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	b21a      	sxth	r2, r3
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	819a      	strh	r2, [r3, #12]

    //pMPU9250->rawData.mx = buf[14+MAGN_X_OFFS_H] << 8 | buf[14+MAGN_X_OFFS_L];
	//pMPU9250->rawData.my = buf[14+MAGN_Y_OFFS_H] << 8 | buf[14+MAGN_Y_OFFS_L];
	//pMPU9250->rawData.mz = buf[14+MAGN_Z_OFFS_H] << 8 | buf[14+MAGN_Z_OFFS_L];
}
 8006f0a:	bf00      	nop
 8006f0c:	3730      	adds	r7, #48	; 0x30
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	0000      	movs	r0, r0
 8006f14:	0000      	movs	r0, r0
	...

08006f18 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readProcessedData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
    // Get raw values from the IMU
    MPU_readRawData(SPIx, pMPU9250);
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7ff ff97 	bl	8006e58 <MPU_readRawData>

    // Convert accelerometer values to g's
    pMPU9250->sensorData.ax = pMPU9250->rawData.ax / pMPU9250->sensorData.aScaleFactor;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f30:	ee07 3a90 	vmov	s15, r3
 8006f34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	ed93 7a05 	vldr	s14, [r3, #20]
 8006f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	edc3 7a06 	vstr	s15, [r3, #24]
    pMPU9250->sensorData.ay = pMPU9250->rawData.ay / pMPU9250->sensorData.aScaleFactor;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006f4e:	ee07 3a90 	vmov	s15, r3
 8006f52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	ed93 7a05 	vldr	s14, [r3, #20]
 8006f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	edc3 7a07 	vstr	s15, [r3, #28]
    pMPU9250->sensorData.az = pMPU9250->rawData.az / pMPU9250->sensorData.aScaleFactor;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f6c:	ee07 3a90 	vmov	s15, r3
 8006f70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	ed93 7a05 	vldr	s14, [r3, #20]
 8006f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	edc3 7a08 	vstr	s15, [r3, #32]

    // Convert raw temperature data to Celsius
    pMPU9250->sensorData.temp = (pMPU9250->rawData.temp - 0) / TEMP_SENS + 21;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7f9 faf2 	bl	8000574 <__aeabi_i2d>
 8006f90:	a336      	add	r3, pc, #216	; (adr r3, 800706c <MPU_readProcessedData+0x154>)
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	f7f9 fc81 	bl	800089c <__aeabi_ddiv>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	4610      	mov	r0, r2
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	f04f 0200 	mov.w	r2, #0
 8006fa6:	4b30      	ldr	r3, [pc, #192]	; (8007068 <MPU_readProcessedData+0x150>)
 8006fa8:	f7f9 f998 	bl	80002dc <__adddf3>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	f7f9 fe40 	bl	8000c38 <__aeabi_d2f>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	625a      	str	r2, [r3, #36]	; 0x24

    // Compensate for gyro bias
    pMPU9250->sensorData.gx = pMPU9250->rawData.gx - pMPU9250->gyroBias.x;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006fc4:	ee07 3a90 	vmov	s15, r3
 8006fc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006fd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy = pMPU9250->rawData.gy - pMPU9250->gyroBias.y;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8006ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz = pMPU9250->rawData.gz - pMPU9250->gyroBias.z;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8007000:	ee07 3a90 	vmov	s15, r3
 8007004:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800700e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // Convert gyro values to deg/s
    pMPU9250->sensorData.gx /= pMPU9250->sensorData.gScaleFactor;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8007024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy /= pMPU9250->sensorData.gScaleFactor;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800703a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz /= pMPU9250->sensorData.gScaleFactor;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8007050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 800705a:	bf00      	nop
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	f3af 8000 	nop.w
 8007068:	40350000 	.word	0x40350000
 800706c:	851eb852 	.word	0x851eb852
 8007070:	4074ddeb 	.word	0x4074ddeb
 8007074:	00000000 	.word	0x00000000

08007078 <MPU_calcAttitude>:

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_calcAttitude(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8007078:	b5b0      	push	{r4, r5, r7, lr}
 800707a:	ed2d 8b02 	vpush	{d8}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
    // Read processed data
    MPU_readProcessedData(SPIx, pMPU9250);
 8007086:	6839      	ldr	r1, [r7, #0]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7ff ff45 	bl	8006f18 <MPU_readProcessedData>

    // Complementary filter
    float accelRoll = atan2f(pMPU9250->sensorData.ay, sqrt(pow(pMPU9250->sensorData.ax,2) + pow(pMPU9250->sensorData.az,2))) * RAD2DEG;
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	ed93 8a07 	vldr	s16, [r3, #28]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	4618      	mov	r0, r3
 800709a:	f7f9 fa7d 	bl	8000598 <__aeabi_f2d>
 800709e:	4602      	mov	r2, r0
 80070a0:	460b      	mov	r3, r1
 80070a2:	ed9f 1b89 	vldr	d1, [pc, #548]	; 80072c8 <MPU_calcAttitude+0x250>
 80070a6:	ec43 2b10 	vmov	d0, r2, r3
 80070aa:	f00f fcb9 	bl	8016a20 <pow>
 80070ae:	ec55 4b10 	vmov	r4, r5, d0
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7f9 fa6e 	bl	8000598 <__aeabi_f2d>
 80070bc:	4602      	mov	r2, r0
 80070be:	460b      	mov	r3, r1
 80070c0:	ed9f 1b81 	vldr	d1, [pc, #516]	; 80072c8 <MPU_calcAttitude+0x250>
 80070c4:	ec43 2b10 	vmov	d0, r2, r3
 80070c8:	f00f fcaa 	bl	8016a20 <pow>
 80070cc:	ec53 2b10 	vmov	r2, r3, d0
 80070d0:	4620      	mov	r0, r4
 80070d2:	4629      	mov	r1, r5
 80070d4:	f7f9 f902 	bl	80002dc <__adddf3>
 80070d8:	4602      	mov	r2, r0
 80070da:	460b      	mov	r3, r1
 80070dc:	ec43 2b17 	vmov	d7, r2, r3
 80070e0:	eeb0 0a47 	vmov.f32	s0, s14
 80070e4:	eef0 0a67 	vmov.f32	s1, s15
 80070e8:	f00f fd0a 	bl	8016b00 <sqrt>
 80070ec:	ec53 2b10 	vmov	r2, r3, d0
 80070f0:	4610      	mov	r0, r2
 80070f2:	4619      	mov	r1, r3
 80070f4:	f7f9 fda0 	bl	8000c38 <__aeabi_d2f>
 80070f8:	4603      	mov	r3, r0
 80070fa:	ee00 3a90 	vmov	s1, r3
 80070fe:	eeb0 0a48 	vmov.f32	s0, s16
 8007102:	f00f fd29 	bl	8016b58 <atan2f>
 8007106:	ee10 3a10 	vmov	r3, s0
 800710a:	4618      	mov	r0, r3
 800710c:	f7f9 fa44 	bl	8000598 <__aeabi_f2d>
 8007110:	a370      	add	r3, pc, #448	; (adr r3, 80072d4 <MPU_calcAttitude+0x25c>)
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	f7f9 fa97 	bl	8000648 <__aeabi_dmul>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	4610      	mov	r0, r2
 8007120:	4619      	mov	r1, r3
 8007122:	f7f9 fd89 	bl	8000c38 <__aeabi_d2f>
 8007126:	4603      	mov	r3, r0
 8007128:	617b      	str	r3, [r7, #20]
    float accelPitch = atan2f(-(pMPU9250->sensorData.ax), sqrt(pow(pMPU9250->sensorData.ay,2) + pow(pMPU9250->sensorData.az,2))) * RAD2DEG;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007130:	eeb1 8a67 	vneg.f32	s16, s15
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	4618      	mov	r0, r3
 800713a:	f7f9 fa2d 	bl	8000598 <__aeabi_f2d>
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	ed9f 1b61 	vldr	d1, [pc, #388]	; 80072c8 <MPU_calcAttitude+0x250>
 8007146:	ec43 2b10 	vmov	d0, r2, r3
 800714a:	f00f fc69 	bl	8016a20 <pow>
 800714e:	ec55 4b10 	vmov	r4, r5, d0
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	4618      	mov	r0, r3
 8007158:	f7f9 fa1e 	bl	8000598 <__aeabi_f2d>
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	ed9f 1b59 	vldr	d1, [pc, #356]	; 80072c8 <MPU_calcAttitude+0x250>
 8007164:	ec43 2b10 	vmov	d0, r2, r3
 8007168:	f00f fc5a 	bl	8016a20 <pow>
 800716c:	ec53 2b10 	vmov	r2, r3, d0
 8007170:	4620      	mov	r0, r4
 8007172:	4629      	mov	r1, r5
 8007174:	f7f9 f8b2 	bl	80002dc <__adddf3>
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	ec43 2b17 	vmov	d7, r2, r3
 8007180:	eeb0 0a47 	vmov.f32	s0, s14
 8007184:	eef0 0a67 	vmov.f32	s1, s15
 8007188:	f00f fcba 	bl	8016b00 <sqrt>
 800718c:	ec53 2b10 	vmov	r2, r3, d0
 8007190:	4610      	mov	r0, r2
 8007192:	4619      	mov	r1, r3
 8007194:	f7f9 fd50 	bl	8000c38 <__aeabi_d2f>
 8007198:	4603      	mov	r3, r0
 800719a:	ee00 3a90 	vmov	s1, r3
 800719e:	eeb0 0a48 	vmov.f32	s0, s16
 80071a2:	f00f fcd9 	bl	8016b58 <atan2f>
 80071a6:	ee10 3a10 	vmov	r3, s0
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7f9 f9f4 	bl	8000598 <__aeabi_f2d>
 80071b0:	a348      	add	r3, pc, #288	; (adr r3, 80072d4 <MPU_calcAttitude+0x25c>)
 80071b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b6:	f7f9 fa47 	bl	8000648 <__aeabi_dmul>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	4610      	mov	r0, r2
 80071c0:	4619      	mov	r1, r3
 80071c2:	f7f9 fd39 	bl	8000c38 <__aeabi_d2f>
 80071c6:	4603      	mov	r3, r0
 80071c8:	613b      	str	r3, [r7, #16]

    // Calculating dt
    uint32_t currentTick = xTaskGetTickCount();
 80071ca:	f009 fa4b 	bl	8010664 <xTaskGetTickCount>
 80071ce:	4603      	mov	r3, r0
 80071d0:	60fb      	str	r3, [r7, #12]
    if (pMPU9250->attitude.lastTick == 0 && pMPU9250->attitude.dt == 0)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d107      	bne.n	80071ea <MPU_calcAttitude+0x172>
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80071e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80071e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e8:	d00e      	beq.n	8007208 <MPU_calcAttitude+0x190>
    	{}
    else
    	pMPU9250->attitude.dt = (currentTick - pMPU9250->attitude.lastTick) / 1000.0f;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80071fa:	eddf 6a35 	vldr	s13, [pc, #212]	; 80072d0 <MPU_calcAttitude+0x258>
 80071fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    pMPU9250->attitude.lastTick = currentTick;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	655a      	str	r2, [r3, #84]	; 0x54

    //pMPU9250->attitude.roll += (pMPU9250->sensorData.gx * pMPU9250->attitude.dt);
    pMPU9250->attitude.roll = pMPU9250->attitude.tau * (pMPU9250->attitude.roll + pMPU9250->sensorData.gx * pMPU9250->attitude.dt) + (1.0f - pMPU9250->attitude.tau) * accelRoll;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007226:	ee66 7a27 	vmul.f32	s15, s12, s15
 800722a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800722e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007238:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800723c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007240:	edd7 7a05 	vldr	s15, [r7, #20]
 8007244:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    //pMPU9250->attitude.pitch += (pMPU9250->sensorData.gy * pMPU9250->attitude.dt);
    pMPU9250->attitude.pitch = pMPU9250->attitude.tau * (pMPU9250->attitude.pitch + pMPU9250->sensorData.gy * pMPU9250->attitude.dt) + (1.0f - pMPU9250->attitude.tau) * accelPitch;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800726a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800726e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007272:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800727c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007280:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007284:	edd7 7a04 	vldr	s15, [r7, #16]
 8007288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800728c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    pMPU9250->attitude.yaw += (pMPU9250->sensorData.gz * pMPU9250->attitude.dt);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80072a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80072ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
}
 80072b6:	bf00      	nop
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	ecbd 8b02 	vpop	{d8}
 80072c0:	bdb0      	pop	{r4, r5, r7, pc}
 80072c2:	bf00      	nop
 80072c4:	f3af 8000 	nop.w
 80072c8:	00000000 	.word	0x00000000
 80072cc:	40000000 	.word	0x40000000
 80072d0:	447a0000 	.word	0x447a0000
 80072d4:	1a63cbb0 	.word	0x1a63cbb0
 80072d8:	404ca5dc 	.word	0x404ca5dc

080072dc <HCSR04_Init>:
#include "HCSR04/HCSR04.h"

extern osSemaphoreId DistSemaphoreHandle;

uint8_t HCSR04_Init(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
	pHCSR04->TRIG_GPIO = DIS_TRIG_OUT_GPIO_Port;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a21      	ldr	r2, [pc, #132]	; (8007370 <HCSR04_Init+0x94>)
 80072ea:	601a      	str	r2, [r3, #0]
	pHCSR04->TRIG_PIN = DIS_TRIG_OUT_Pin;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80072f2:	809a      	strh	r2, [r3, #4]
	pHCSR04->TIM_Instance = TIM3;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a1f      	ldr	r2, [pc, #124]	; (8007374 <HCSR04_Init+0x98>)
 80072f8:	609a      	str	r2, [r3, #8]
	pHCSR04->IC_TIM_CH = TIM_CHANNEL_1;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	60da      	str	r2, [r3, #12]
	pHCSR04->TIM_CLK_MHz = 108;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	226c      	movs	r2, #108	; 0x6c
 8007304:	611a      	str	r2, [r3, #16]
	pHCSR04->Triggered = false;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	751a      	strb	r2, [r3, #20]

	if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_1)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d104      	bne.n	800731e <HCSR04_Init+0x42>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800731c:	e019      	b.n	8007352 <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_2)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	2b04      	cmp	r3, #4
 8007324:	d104      	bne.n	8007330 <HCSR04_Init+0x54>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2202      	movs	r2, #2
 800732a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800732e:	e010      	b.n	8007352 <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_3)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	2b08      	cmp	r3, #8
 8007336:	d104      	bne.n	8007342 <HCSR04_Init+0x66>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2204      	movs	r2, #4
 800733c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8007340:	e007      	b.n	8007352 <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_4)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	2b0c      	cmp	r3, #12
 8007348:	d103      	bne.n	8007352 <HCSR04_Init+0x76>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2208      	movs	r2, #8
 800734e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(htim);
 8007352:	6838      	ldr	r0, [r7, #0]
 8007354:	f004 fae2 	bl	800b91c <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(htim, pHCSR04->IC_TIM_CH);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	4619      	mov	r1, r3
 800735e:	6838      	ldr	r0, [r7, #0]
 8007360:	f004 fd08 	bl	800bd74 <HAL_TIM_IC_Start_IT>

	return 0;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	40020c00 	.word	0x40020c00
 8007374:	40000400 	.word	0x40000400

08007378 <HCSR04_TMR_IC_ISR>:
	}
}


void HCSR04_TMR_IC_ISR(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
	uint32_t PS = 0;
 8007382:	2300      	movs	r3, #0
 8007384:	60fb      	str	r3, [r7, #12]

	if((htim->Instance == pHCSR04->TIM_Instance) && (htim->Channel == pHCSR04->ACTIV_CH))
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	429a      	cmp	r2, r3
 8007390:	f040 812e 	bne.w	80075f0 <HCSR04_TMR_IC_ISR+0x278>
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	7f1a      	ldrb	r2, [r3, #28]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800739e:	429a      	cmp	r2, r3
 80073a0:	f040 8126 	bne.w	80075f0 <HCSR04_TMR_IC_ISR+0x278>
	{
		if (pHCSR04->EDGE_STATE == 0)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	7d5b      	ldrb	r3, [r3, #21]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d16d      	bne.n	8007488 <HCSR04_TMR_IC_ISR+0x110>
		{
			// Capture T1 & Reverse The ICU Edge Polarity
			pHCSR04->T1 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	4619      	mov	r1, r3
 80073b2:	6838      	ldr	r0, [r7, #0]
 80073b4:	f005 f9c8 	bl	800c748 <HAL_TIM_ReadCapturedValue>
 80073b8:	4602      	mov	r2, r0
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	621a      	str	r2, [r3, #32]
			pHCSR04->EDGE_STATE = 1;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d108      	bne.n	80073de <HCSR04_TMR_IC_ISR+0x66>
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6a1a      	ldr	r2, [r3, #32]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f022 020a 	bic.w	r2, r2, #10
 80073da:	621a      	str	r2, [r3, #32]
 80073dc:	e021      	b.n	8007422 <HCSR04_TMR_IC_ISR+0xaa>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d108      	bne.n	80073f8 <HCSR04_TMR_IC_ISR+0x80>
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	6812      	ldr	r2, [r2, #0]
 80073f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073f4:	6213      	str	r3, [r2, #32]
 80073f6:	e014      	b.n	8007422 <HCSR04_TMR_IC_ISR+0xaa>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	2b08      	cmp	r3, #8
 80073fe:	d108      	bne.n	8007412 <HCSR04_TMR_IC_ISR+0x9a>
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	6812      	ldr	r2, [r2, #0]
 800740a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800740e:	6213      	str	r3, [r2, #32]
 8007410:	e007      	b.n	8007422 <HCSR04_TMR_IC_ISR+0xaa>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	6812      	ldr	r2, [r2, #0]
 800741c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007420:	6213      	str	r3, [r2, #32]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d108      	bne.n	800743c <HCSR04_TMR_IC_ISR+0xc4>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6a1a      	ldr	r2, [r3, #32]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f042 0202 	orr.w	r2, r2, #2
 8007438:	621a      	str	r2, [r3, #32]
 800743a:	e021      	b.n	8007480 <HCSR04_TMR_IC_ISR+0x108>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	2b04      	cmp	r3, #4
 8007442:	d108      	bne.n	8007456 <HCSR04_TMR_IC_ISR+0xde>
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	6812      	ldr	r2, [r2, #0]
 800744e:	f043 0320 	orr.w	r3, r3, #32
 8007452:	6213      	str	r3, [r2, #32]
 8007454:	e014      	b.n	8007480 <HCSR04_TMR_IC_ISR+0x108>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	2b08      	cmp	r3, #8
 800745c:	d108      	bne.n	8007470 <HCSR04_TMR_IC_ISR+0xf8>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	6812      	ldr	r2, [r2, #0]
 8007468:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800746c:	6213      	str	r3, [r2, #32]
 800746e:	e007      	b.n	8007480 <HCSR04_TMR_IC_ISR+0x108>
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	6812      	ldr	r2, [r2, #0]
 800747a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800747e:	6213      	str	r3, [r2, #32]
			pHCSR04->TMR_OVC = 0;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	82da      	strh	r2, [r3, #22]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);

			osSemaphoreRelease(DistSemaphoreHandle);
		}
	}
}
 8007486:	e0b3      	b.n	80075f0 <HCSR04_TMR_IC_ISR+0x278>
		else if (pHCSR04->EDGE_STATE == 1)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	7d5b      	ldrb	r3, [r3, #21]
 800748c:	2b01      	cmp	r3, #1
 800748e:	f040 80af 	bne.w	80075f0 <HCSR04_TMR_IC_ISR+0x278>
			PS = pHCSR04->TIM_Instance->PSC;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007498:	60fb      	str	r3, [r7, #12]
			pHCSR04->TMR_ARR = pHCSR04->TIM_Instance->ARR;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	61da      	str	r2, [r3, #28]
			pHCSR04->T2 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	4619      	mov	r1, r3
 80074aa:	6838      	ldr	r0, [r7, #0]
 80074ac:	f005 f94c 	bl	800c748 <HAL_TIM_ReadCapturedValue>
 80074b0:	4602      	mov	r2, r0
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	625a      	str	r2, [r3, #36]	; 0x24
			if (pHCSR04->T1 < pHCSR04->T2)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a1a      	ldr	r2, [r3, #32]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	429a      	cmp	r2, r3
 80074c0:	d207      	bcs.n	80074d2 <HCSR04_TMR_IC_ISR+0x15a>
				pHCSR04->DIFF = pHCSR04->T2 - pHCSR04->T1;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	1ad2      	subs	r2, r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	629a      	str	r2, [r3, #40]	; 0x28
 80074d0:	e00f      	b.n	80074f2 <HCSR04_TMR_IC_ISR+0x17a>
			else if (pHCSR04->T2 < pHCSR04->T1)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d209      	bcs.n	80074f2 <HCSR04_TMR_IC_ISR+0x17a>
				pHCSR04->DIFF = (pHCSR04->T2 + 65535) - pHCSR04->T1;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	1ad2      	subs	r2, r2, r3
 80074e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074ec:	4413      	add	r3, r2
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	6293      	str	r3, [r2, #40]	; 0x28
			pHCSR04->DISTANCE = ((pHCSR04->DIFF / 1000.0f) * 340.0f / 2.0f) / (pHCSR04->TIM_CLK_MHz/(PS+1));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f6:	ee07 3a90 	vmov	s15, r3
 80074fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80074fe:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80075f8 <HCSR04_TMR_IC_ISR+0x280>
 8007502:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007506:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80075fc <HCSR04_TMR_IC_ISR+0x284>
 800750a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800750e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007512:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691a      	ldr	r2, [r3, #16]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3301      	adds	r3, #1
 800751e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007522:	ee07 3a90 	vmov	s15, r3
 8007526:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800752a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			pHCSR04->EDGE_STATE = 0;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d108      	bne.n	8007554 <HCSR04_TMR_IC_ISR+0x1dc>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6a1a      	ldr	r2, [r3, #32]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 020a 	bic.w	r2, r2, #10
 8007550:	621a      	str	r2, [r3, #32]
 8007552:	e021      	b.n	8007598 <HCSR04_TMR_IC_ISR+0x220>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	2b04      	cmp	r3, #4
 800755a:	d108      	bne.n	800756e <HCSR04_TMR_IC_ISR+0x1f6>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	6812      	ldr	r2, [r2, #0]
 8007566:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800756a:	6213      	str	r3, [r2, #32]
 800756c:	e014      	b.n	8007598 <HCSR04_TMR_IC_ISR+0x220>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	2b08      	cmp	r3, #8
 8007574:	d108      	bne.n	8007588 <HCSR04_TMR_IC_ISR+0x210>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6a1b      	ldr	r3, [r3, #32]
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	6812      	ldr	r2, [r2, #0]
 8007580:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007584:	6213      	str	r3, [r2, #32]
 8007586:	e007      	b.n	8007598 <HCSR04_TMR_IC_ISR+0x220>
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	6812      	ldr	r2, [r2, #0]
 8007592:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007596:	6213      	str	r3, [r2, #32]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d106      	bne.n	80075ae <HCSR04_TMR_IC_ISR+0x236>
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	6a12      	ldr	r2, [r2, #32]
 80075aa:	621a      	str	r2, [r3, #32]
 80075ac:	e01b      	b.n	80075e6 <HCSR04_TMR_IC_ISR+0x26e>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d106      	bne.n	80075c4 <HCSR04_TMR_IC_ISR+0x24c>
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	6812      	ldr	r2, [r2, #0]
 80075be:	6a1b      	ldr	r3, [r3, #32]
 80075c0:	6213      	str	r3, [r2, #32]
 80075c2:	e010      	b.n	80075e6 <HCSR04_TMR_IC_ISR+0x26e>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	2b08      	cmp	r3, #8
 80075ca:	d106      	bne.n	80075da <HCSR04_TMR_IC_ISR+0x262>
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	6812      	ldr	r2, [r2, #0]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	6213      	str	r3, [r2, #32]
 80075d8:	e005      	b.n	80075e6 <HCSR04_TMR_IC_ISR+0x26e>
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	6812      	ldr	r2, [r2, #0]
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	6213      	str	r3, [r2, #32]
			osSemaphoreRelease(DistSemaphoreHandle);
 80075e6:	4b06      	ldr	r3, [pc, #24]	; (8007600 <HCSR04_TMR_IC_ISR+0x288>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f007 fda6 	bl	800f13c <osSemaphoreRelease>
}
 80075f0:	bf00      	nop
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	447a0000 	.word	0x447a0000
 80075fc:	43aa0000 	.word	0x43aa0000
 8007600:	20000cf0 	.word	0x20000cf0

08007604 <HCSR04_Trigger>:

void HCSR04_Trigger(HCSR04_t* pHCSR04)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_SET);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6818      	ldr	r0, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	889b      	ldrh	r3, [r3, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	4619      	mov	r1, r3
 8007618:	f000 ff20 	bl	800845c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800761c:	2001      	movs	r0, #1
 800761e:	f000 f871 	bl	8007704 <HAL_Delay>
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_RESET);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6818      	ldr	r0, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	889b      	ldrh	r3, [r3, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	4619      	mov	r1, r3
 800762e:	f000 ff15 	bl	800845c <HAL_GPIO_WritePin>
}
 8007632:	bf00      	nop
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <HCSR04_Read>:

float HCSR04_Read(HCSR04_t* pHCSR04)
{
 800763a:	b480      	push	{r7}
 800763c:	b083      	sub	sp, #12
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
	return pHCSR04->DISTANCE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007646:	ee07 3a90 	vmov	s15, r3
}
 800764a:	eeb0 0a67 	vmov.f32	s0, s15
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8007658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007690 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800765c:	480d      	ldr	r0, [pc, #52]	; (8007694 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800765e:	490e      	ldr	r1, [pc, #56]	; (8007698 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007660:	4a0e      	ldr	r2, [pc, #56]	; (800769c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007664:	e002      	b.n	800766c <LoopCopyDataInit>

08007666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800766a:	3304      	adds	r3, #4

0800766c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800766c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800766e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007670:	d3f9      	bcc.n	8007666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007672:	4a0b      	ldr	r2, [pc, #44]	; (80076a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007674:	4c0b      	ldr	r4, [pc, #44]	; (80076a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007678:	e001      	b.n	800767e <LoopFillZerobss>

0800767a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800767a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800767c:	3204      	adds	r2, #4

0800767e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800767e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007680:	d3fb      	bcc.n	800767a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007682:	f7fe f801 	bl	8005688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007686:	f00b f9f3 	bl	8012a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800768a:	f7fb f965 	bl	8002958 <main>
  bx  lr    
 800768e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007690:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8007694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007698:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800769c:	080185d0 	.word	0x080185d0
  ldr r2, =_sbss
 80076a0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80076a4:	20004be8 	.word	0x20004be8

080076a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80076a8:	e7fe      	b.n	80076a8 <ADC_IRQHandler>

080076aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80076ae:	2003      	movs	r0, #3
 80076b0:	f000 f8f9 	bl	80078a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80076b4:	200f      	movs	r0, #15
 80076b6:	f7fd fe55 	bl	8005364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80076ba:	f7fd fb7b 	bl	8004db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80076c4:	b480      	push	{r7}
 80076c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80076c8:	4b06      	ldr	r3, [pc, #24]	; (80076e4 <HAL_IncTick+0x20>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	461a      	mov	r2, r3
 80076ce:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <HAL_IncTick+0x24>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4413      	add	r3, r2
 80076d4:	4a04      	ldr	r2, [pc, #16]	; (80076e8 <HAL_IncTick+0x24>)
 80076d6:	6013      	str	r3, [r2, #0]
}
 80076d8:	bf00      	nop
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	20000010 	.word	0x20000010
 80076e8:	20000d4c 	.word	0x20000d4c

080076ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
  return uwTick;
 80076f0:	4b03      	ldr	r3, [pc, #12]	; (8007700 <HAL_GetTick+0x14>)
 80076f2:	681b      	ldr	r3, [r3, #0]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	20000d4c 	.word	0x20000d4c

08007704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800770c:	f7ff ffee 	bl	80076ec <HAL_GetTick>
 8007710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771c:	d005      	beq.n	800772a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800771e:	4b0a      	ldr	r3, [pc, #40]	; (8007748 <HAL_Delay+0x44>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	4413      	add	r3, r2
 8007728:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800772a:	bf00      	nop
 800772c:	f7ff ffde 	bl	80076ec <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	429a      	cmp	r2, r3
 800773a:	d8f7      	bhi.n	800772c <HAL_Delay+0x28>
  {
  }
}
 800773c:	bf00      	nop
 800773e:	bf00      	nop
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	20000010 	.word	0x20000010

0800774c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f003 0307 	and.w	r3, r3, #7
 800775a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800775c:	4b0b      	ldr	r3, [pc, #44]	; (800778c <__NVIC_SetPriorityGrouping+0x40>)
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007768:	4013      	ands	r3, r2
 800776a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007774:	4b06      	ldr	r3, [pc, #24]	; (8007790 <__NVIC_SetPriorityGrouping+0x44>)
 8007776:	4313      	orrs	r3, r2
 8007778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800777a:	4a04      	ldr	r2, [pc, #16]	; (800778c <__NVIC_SetPriorityGrouping+0x40>)
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	60d3      	str	r3, [r2, #12]
}
 8007780:	bf00      	nop
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	e000ed00 	.word	0xe000ed00
 8007790:	05fa0000 	.word	0x05fa0000

08007794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007794:	b480      	push	{r7}
 8007796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007798:	4b04      	ldr	r3, [pc, #16]	; (80077ac <__NVIC_GetPriorityGrouping+0x18>)
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	0a1b      	lsrs	r3, r3, #8
 800779e:	f003 0307 	and.w	r3, r3, #7
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	e000ed00 	.word	0xe000ed00

080077b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	4603      	mov	r3, r0
 80077b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	db0b      	blt.n	80077da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80077c2:	79fb      	ldrb	r3, [r7, #7]
 80077c4:	f003 021f 	and.w	r2, r3, #31
 80077c8:	4907      	ldr	r1, [pc, #28]	; (80077e8 <__NVIC_EnableIRQ+0x38>)
 80077ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077ce:	095b      	lsrs	r3, r3, #5
 80077d0:	2001      	movs	r0, #1
 80077d2:	fa00 f202 	lsl.w	r2, r0, r2
 80077d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80077da:	bf00      	nop
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	e000e100 	.word	0xe000e100

080077ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	4603      	mov	r3, r0
 80077f4:	6039      	str	r1, [r7, #0]
 80077f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	db0a      	blt.n	8007816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	b2da      	uxtb	r2, r3
 8007804:	490c      	ldr	r1, [pc, #48]	; (8007838 <__NVIC_SetPriority+0x4c>)
 8007806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800780a:	0112      	lsls	r2, r2, #4
 800780c:	b2d2      	uxtb	r2, r2
 800780e:	440b      	add	r3, r1
 8007810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007814:	e00a      	b.n	800782c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	b2da      	uxtb	r2, r3
 800781a:	4908      	ldr	r1, [pc, #32]	; (800783c <__NVIC_SetPriority+0x50>)
 800781c:	79fb      	ldrb	r3, [r7, #7]
 800781e:	f003 030f 	and.w	r3, r3, #15
 8007822:	3b04      	subs	r3, #4
 8007824:	0112      	lsls	r2, r2, #4
 8007826:	b2d2      	uxtb	r2, r2
 8007828:	440b      	add	r3, r1
 800782a:	761a      	strb	r2, [r3, #24]
}
 800782c:	bf00      	nop
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	e000e100 	.word	0xe000e100
 800783c:	e000ed00 	.word	0xe000ed00

08007840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007840:	b480      	push	{r7}
 8007842:	b089      	sub	sp, #36	; 0x24
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f003 0307 	and.w	r3, r3, #7
 8007852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	f1c3 0307 	rsb	r3, r3, #7
 800785a:	2b04      	cmp	r3, #4
 800785c:	bf28      	it	cs
 800785e:	2304      	movcs	r3, #4
 8007860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	3304      	adds	r3, #4
 8007866:	2b06      	cmp	r3, #6
 8007868:	d902      	bls.n	8007870 <NVIC_EncodePriority+0x30>
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	3b03      	subs	r3, #3
 800786e:	e000      	b.n	8007872 <NVIC_EncodePriority+0x32>
 8007870:	2300      	movs	r3, #0
 8007872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007874:	f04f 32ff 	mov.w	r2, #4294967295
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	fa02 f303 	lsl.w	r3, r2, r3
 800787e:	43da      	mvns	r2, r3
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	401a      	ands	r2, r3
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007888:	f04f 31ff 	mov.w	r1, #4294967295
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	fa01 f303 	lsl.w	r3, r1, r3
 8007892:	43d9      	mvns	r1, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007898:	4313      	orrs	r3, r2
         );
}
 800789a:	4618      	mov	r0, r3
 800789c:	3724      	adds	r7, #36	; 0x24
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b082      	sub	sp, #8
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7ff ff4c 	bl	800774c <__NVIC_SetPriorityGrouping>
}
 80078b4:	bf00      	nop
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	4603      	mov	r3, r0
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80078ca:	2300      	movs	r3, #0
 80078cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80078ce:	f7ff ff61 	bl	8007794 <__NVIC_GetPriorityGrouping>
 80078d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	68b9      	ldr	r1, [r7, #8]
 80078d8:	6978      	ldr	r0, [r7, #20]
 80078da:	f7ff ffb1 	bl	8007840 <NVIC_EncodePriority>
 80078de:	4602      	mov	r2, r0
 80078e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078e4:	4611      	mov	r1, r2
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7ff ff80 	bl	80077ec <__NVIC_SetPriority>
}
 80078ec:	bf00      	nop
 80078ee:	3718      	adds	r7, #24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	4603      	mov	r3, r0
 80078fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80078fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007902:	4618      	mov	r0, r3
 8007904:	f7ff ff54 	bl	80077b0 <__NVIC_EnableIRQ>
}
 8007908:	bf00      	nop
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007918:	2300      	movs	r3, #0
 800791a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800791c:	f7ff fee6 	bl	80076ec <HAL_GetTick>
 8007920:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e099      	b.n	8007a60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 0201 	bic.w	r2, r2, #1
 800794a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800794c:	e00f      	b.n	800796e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800794e:	f7ff fecd 	bl	80076ec <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	2b05      	cmp	r3, #5
 800795a:	d908      	bls.n	800796e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2220      	movs	r2, #32
 8007960:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2203      	movs	r2, #3
 8007966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e078      	b.n	8007a60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1e8      	bne.n	800794e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	4b38      	ldr	r3, [pc, #224]	; (8007a68 <HAL_DMA_Init+0x158>)
 8007988:	4013      	ands	r3, r2
 800798a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800799a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	4313      	orrs	r3, r2
 80079be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	2b04      	cmp	r3, #4
 80079c6:	d107      	bne.n	80079d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d0:	4313      	orrs	r3, r2
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f023 0307 	bic.w	r3, r3, #7
 80079ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fe:	2b04      	cmp	r3, #4
 8007a00:	d117      	bne.n	8007a32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00e      	beq.n	8007a32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fb09 	bl	800802c <DMA_CheckFifoParam>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d008      	beq.n	8007a32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2240      	movs	r2, #64	; 0x40
 8007a24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e016      	b.n	8007a60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fac0 	bl	8007fc0 <DMA_CalcBaseAndBitshift>
 8007a40:	4603      	mov	r3, r0
 8007a42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a48:	223f      	movs	r2, #63	; 0x3f
 8007a4a:	409a      	lsls	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3718      	adds	r7, #24
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	e010803f 	.word	0xe010803f

08007a6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
 8007a78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d101      	bne.n	8007a92 <HAL_DMA_Start_IT+0x26>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e048      	b.n	8007b24 <HAL_DMA_Start_IT+0xb8>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d137      	bne.n	8007b16 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2202      	movs	r2, #2
 8007aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	68b9      	ldr	r1, [r7, #8]
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f000 fa52 	bl	8007f64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ac4:	223f      	movs	r2, #63	; 0x3f
 8007ac6:	409a      	lsls	r2, r3
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f042 0216 	orr.w	r2, r2, #22
 8007ada:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	695a      	ldr	r2, [r3, #20]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007aea:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d007      	beq.n	8007b04 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f042 0208 	orr.w	r2, r2, #8
 8007b02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f042 0201 	orr.w	r2, r2, #1
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	e005      	b.n	8007b22 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007b1e:	2302      	movs	r3, #2
 8007b20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3718      	adds	r7, #24
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007b3a:	f7ff fdd7 	bl	80076ec <HAL_GetTick>
 8007b3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d008      	beq.n	8007b5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2280      	movs	r2, #128	; 0x80
 8007b50:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e052      	b.n	8007c04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 0216 	bic.w	r2, r2, #22
 8007b6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	695a      	ldr	r2, [r3, #20]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d103      	bne.n	8007b8e <HAL_DMA_Abort+0x62>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d007      	beq.n	8007b9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 0208 	bic.w	r2, r2, #8
 8007b9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 0201 	bic.w	r2, r2, #1
 8007bac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007bae:	e013      	b.n	8007bd8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007bb0:	f7ff fd9c 	bl	80076ec <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	2b05      	cmp	r3, #5
 8007bbc:	d90c      	bls.n	8007bd8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2220      	movs	r2, #32
 8007bc2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2203      	movs	r2, #3
 8007bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e015      	b.n	8007c04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e4      	bne.n	8007bb0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bea:	223f      	movs	r2, #63	; 0x3f
 8007bec:	409a      	lsls	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d004      	beq.n	8007c2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2280      	movs	r2, #128	; 0x80
 8007c24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e00c      	b.n	8007c44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2205      	movs	r2, #5
 8007c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f022 0201 	bic.w	r2, r2, #1
 8007c40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007c5c:	4b8e      	ldr	r3, [pc, #568]	; (8007e98 <HAL_DMA_IRQHandler+0x248>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a8e      	ldr	r2, [pc, #568]	; (8007e9c <HAL_DMA_IRQHandler+0x24c>)
 8007c62:	fba2 2303 	umull	r2, r3, r2, r3
 8007c66:	0a9b      	lsrs	r3, r3, #10
 8007c68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c7a:	2208      	movs	r2, #8
 8007c7c:	409a      	lsls	r2, r3
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	4013      	ands	r3, r2
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d01a      	beq.n	8007cbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0304 	and.w	r3, r3, #4
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d013      	beq.n	8007cbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0204 	bic.w	r2, r2, #4
 8007ca2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ca8:	2208      	movs	r2, #8
 8007caa:	409a      	lsls	r2, r3
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb4:	f043 0201 	orr.w	r2, r3, #1
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	409a      	lsls	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d012      	beq.n	8007cf2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00b      	beq.n	8007cf2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cde:	2201      	movs	r2, #1
 8007ce0:	409a      	lsls	r2, r3
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cea:	f043 0202 	orr.w	r2, r3, #2
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cf6:	2204      	movs	r2, #4
 8007cf8:	409a      	lsls	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d012      	beq.n	8007d28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0302 	and.w	r3, r3, #2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00b      	beq.n	8007d28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d14:	2204      	movs	r2, #4
 8007d16:	409a      	lsls	r2, r3
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d20:	f043 0204 	orr.w	r2, r3, #4
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d2c:	2210      	movs	r2, #16
 8007d2e:	409a      	lsls	r2, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4013      	ands	r3, r2
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d043      	beq.n	8007dc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0308 	and.w	r3, r3, #8
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d03c      	beq.n	8007dc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d4a:	2210      	movs	r2, #16
 8007d4c:	409a      	lsls	r2, r3
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d018      	beq.n	8007d92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d108      	bne.n	8007d80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d024      	beq.n	8007dc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	4798      	blx	r3
 8007d7e:	e01f      	b.n	8007dc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d01b      	beq.n	8007dc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	4798      	blx	r3
 8007d90:	e016      	b.n	8007dc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d107      	bne.n	8007db0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f022 0208 	bic.w	r2, r2, #8
 8007dae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d003      	beq.n	8007dc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	409a      	lsls	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 808f 	beq.w	8007ef0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0310 	and.w	r3, r3, #16
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 8087 	beq.w	8007ef0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007de6:	2220      	movs	r2, #32
 8007de8:	409a      	lsls	r2, r3
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b05      	cmp	r3, #5
 8007df8:	d136      	bne.n	8007e68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 0216 	bic.w	r2, r2, #22
 8007e08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	695a      	ldr	r2, [r3, #20]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d103      	bne.n	8007e2a <HAL_DMA_IRQHandler+0x1da>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d007      	beq.n	8007e3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f022 0208 	bic.w	r2, r2, #8
 8007e38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e3e:	223f      	movs	r2, #63	; 0x3f
 8007e40:	409a      	lsls	r2, r3
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d07e      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	4798      	blx	r3
        }
        return;
 8007e66:	e079      	b.n	8007f5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d01d      	beq.n	8007eb2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10d      	bne.n	8007ea0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d031      	beq.n	8007ef0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	4798      	blx	r3
 8007e94:	e02c      	b.n	8007ef0 <HAL_DMA_IRQHandler+0x2a0>
 8007e96:	bf00      	nop
 8007e98:	20000008 	.word	0x20000008
 8007e9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d023      	beq.n	8007ef0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	4798      	blx	r3
 8007eb0:	e01e      	b.n	8007ef0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10f      	bne.n	8007ee0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f022 0210 	bic.w	r2, r2, #16
 8007ece:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d003      	beq.n	8007ef0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d032      	beq.n	8007f5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007efc:	f003 0301 	and.w	r3, r3, #1
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d022      	beq.n	8007f4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2205      	movs	r2, #5
 8007f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f022 0201 	bic.w	r2, r2, #1
 8007f1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	60bb      	str	r3, [r7, #8]
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d307      	bcc.n	8007f38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1f2      	bne.n	8007f1c <HAL_DMA_IRQHandler+0x2cc>
 8007f36:	e000      	b.n	8007f3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007f38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d005      	beq.n	8007f5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	4798      	blx	r3
 8007f5a:	e000      	b.n	8007f5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8007f5c:	bf00      	nop
    }
  }
}
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
 8007f70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007f80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	2b40      	cmp	r3, #64	; 0x40
 8007f90:	d108      	bne.n	8007fa4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007fa2:	e007      	b.n	8007fb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	60da      	str	r2, [r3, #12]
}
 8007fb4:	bf00      	nop
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	3b10      	subs	r3, #16
 8007fd0:	4a13      	ldr	r2, [pc, #76]	; (8008020 <DMA_CalcBaseAndBitshift+0x60>)
 8007fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd6:	091b      	lsrs	r3, r3, #4
 8007fd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007fda:	4a12      	ldr	r2, [pc, #72]	; (8008024 <DMA_CalcBaseAndBitshift+0x64>)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4413      	add	r3, r2
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2b03      	cmp	r3, #3
 8007fec:	d908      	bls.n	8008000 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	4b0c      	ldr	r3, [pc, #48]	; (8008028 <DMA_CalcBaseAndBitshift+0x68>)
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	1d1a      	adds	r2, r3, #4
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	659a      	str	r2, [r3, #88]	; 0x58
 8007ffe:	e006      	b.n	800800e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	461a      	mov	r2, r3
 8008006:	4b08      	ldr	r3, [pc, #32]	; (8008028 <DMA_CalcBaseAndBitshift+0x68>)
 8008008:	4013      	ands	r3, r2
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008012:	4618      	mov	r0, r3
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	aaaaaaab 	.word	0xaaaaaaab
 8008024:	08018108 	.word	0x08018108
 8008028:	fffffc00 	.word	0xfffffc00

0800802c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d11f      	bne.n	8008086 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	2b03      	cmp	r3, #3
 800804a:	d856      	bhi.n	80080fa <DMA_CheckFifoParam+0xce>
 800804c:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <DMA_CheckFifoParam+0x28>)
 800804e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008052:	bf00      	nop
 8008054:	08008065 	.word	0x08008065
 8008058:	08008077 	.word	0x08008077
 800805c:	08008065 	.word	0x08008065
 8008060:	080080fb 	.word	0x080080fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d046      	beq.n	80080fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008074:	e043      	b.n	80080fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800807e:	d140      	bne.n	8008102 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008084:	e03d      	b.n	8008102 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800808e:	d121      	bne.n	80080d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	2b03      	cmp	r3, #3
 8008094:	d837      	bhi.n	8008106 <DMA_CheckFifoParam+0xda>
 8008096:	a201      	add	r2, pc, #4	; (adr r2, 800809c <DMA_CheckFifoParam+0x70>)
 8008098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809c:	080080ad 	.word	0x080080ad
 80080a0:	080080b3 	.word	0x080080b3
 80080a4:	080080ad 	.word	0x080080ad
 80080a8:	080080c5 	.word	0x080080c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	73fb      	strb	r3, [r7, #15]
      break;
 80080b0:	e030      	b.n	8008114 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d025      	beq.n	800810a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080c2:	e022      	b.n	800810a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80080cc:	d11f      	bne.n	800810e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80080d2:	e01c      	b.n	800810e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d903      	bls.n	80080e2 <DMA_CheckFifoParam+0xb6>
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2b03      	cmp	r3, #3
 80080de:	d003      	beq.n	80080e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80080e0:	e018      	b.n	8008114 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	73fb      	strb	r3, [r7, #15]
      break;
 80080e6:	e015      	b.n	8008114 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00e      	beq.n	8008112 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	73fb      	strb	r3, [r7, #15]
      break;
 80080f8:	e00b      	b.n	8008112 <DMA_CheckFifoParam+0xe6>
      break;
 80080fa:	bf00      	nop
 80080fc:	e00a      	b.n	8008114 <DMA_CheckFifoParam+0xe8>
      break;
 80080fe:	bf00      	nop
 8008100:	e008      	b.n	8008114 <DMA_CheckFifoParam+0xe8>
      break;
 8008102:	bf00      	nop
 8008104:	e006      	b.n	8008114 <DMA_CheckFifoParam+0xe8>
      break;
 8008106:	bf00      	nop
 8008108:	e004      	b.n	8008114 <DMA_CheckFifoParam+0xe8>
      break;
 800810a:	bf00      	nop
 800810c:	e002      	b.n	8008114 <DMA_CheckFifoParam+0xe8>
      break;   
 800810e:	bf00      	nop
 8008110:	e000      	b.n	8008114 <DMA_CheckFifoParam+0xe8>
      break;
 8008112:	bf00      	nop
    }
  } 
  
  return status; 
 8008114:	7bfb      	ldrb	r3, [r7, #15]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop

08008124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008124:	b480      	push	{r7}
 8008126:	b089      	sub	sp, #36	; 0x24
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800812e:	2300      	movs	r3, #0
 8008130:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008132:	2300      	movs	r3, #0
 8008134:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008136:	2300      	movs	r3, #0
 8008138:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800813a:	2300      	movs	r3, #0
 800813c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800813e:	2300      	movs	r3, #0
 8008140:	61fb      	str	r3, [r7, #28]
 8008142:	e169      	b.n	8008418 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008144:	2201      	movs	r2, #1
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	fa02 f303 	lsl.w	r3, r2, r3
 800814c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	4013      	ands	r3, r2
 8008156:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	429a      	cmp	r2, r3
 800815e:	f040 8158 	bne.w	8008412 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f003 0303 	and.w	r3, r3, #3
 800816a:	2b01      	cmp	r3, #1
 800816c:	d005      	beq.n	800817a <HAL_GPIO_Init+0x56>
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f003 0303 	and.w	r3, r3, #3
 8008176:	2b02      	cmp	r3, #2
 8008178:	d130      	bne.n	80081dc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	005b      	lsls	r3, r3, #1
 8008184:	2203      	movs	r2, #3
 8008186:	fa02 f303 	lsl.w	r3, r2, r3
 800818a:	43db      	mvns	r3, r3
 800818c:	69ba      	ldr	r2, [r7, #24]
 800818e:	4013      	ands	r3, r2
 8008190:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	68da      	ldr	r2, [r3, #12]
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	fa02 f303 	lsl.w	r3, r2, r3
 800819e:	69ba      	ldr	r2, [r7, #24]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	69ba      	ldr	r2, [r7, #24]
 80081a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80081b0:	2201      	movs	r2, #1
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	fa02 f303 	lsl.w	r3, r2, r3
 80081b8:	43db      	mvns	r3, r3
 80081ba:	69ba      	ldr	r2, [r7, #24]
 80081bc:	4013      	ands	r3, r2
 80081be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	091b      	lsrs	r3, r3, #4
 80081c6:	f003 0201 	and.w	r2, r3, #1
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	fa02 f303 	lsl.w	r3, r2, r3
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	69ba      	ldr	r2, [r7, #24]
 80081da:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	f003 0303 	and.w	r3, r3, #3
 80081e4:	2b03      	cmp	r3, #3
 80081e6:	d017      	beq.n	8008218 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	2203      	movs	r2, #3
 80081f4:	fa02 f303 	lsl.w	r3, r2, r3
 80081f8:	43db      	mvns	r3, r3
 80081fa:	69ba      	ldr	r2, [r7, #24]
 80081fc:	4013      	ands	r3, r2
 80081fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	005b      	lsls	r3, r3, #1
 8008208:	fa02 f303 	lsl.w	r3, r2, r3
 800820c:	69ba      	ldr	r2, [r7, #24]
 800820e:	4313      	orrs	r3, r2
 8008210:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	f003 0303 	and.w	r3, r3, #3
 8008220:	2b02      	cmp	r3, #2
 8008222:	d123      	bne.n	800826c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	08da      	lsrs	r2, r3, #3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	3208      	adds	r2, #8
 800822c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	f003 0307 	and.w	r3, r3, #7
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	220f      	movs	r2, #15
 800823c:	fa02 f303 	lsl.w	r3, r2, r3
 8008240:	43db      	mvns	r3, r3
 8008242:	69ba      	ldr	r2, [r7, #24]
 8008244:	4013      	ands	r3, r2
 8008246:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	691a      	ldr	r2, [r3, #16]
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	f003 0307 	and.w	r3, r3, #7
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	fa02 f303 	lsl.w	r3, r2, r3
 8008258:	69ba      	ldr	r2, [r7, #24]
 800825a:	4313      	orrs	r3, r2
 800825c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	08da      	lsrs	r2, r3, #3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	3208      	adds	r2, #8
 8008266:	69b9      	ldr	r1, [r7, #24]
 8008268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	005b      	lsls	r3, r3, #1
 8008276:	2203      	movs	r2, #3
 8008278:	fa02 f303 	lsl.w	r3, r2, r3
 800827c:	43db      	mvns	r3, r3
 800827e:	69ba      	ldr	r2, [r7, #24]
 8008280:	4013      	ands	r3, r2
 8008282:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f003 0203 	and.w	r2, r3, #3
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	005b      	lsls	r3, r3, #1
 8008290:	fa02 f303 	lsl.w	r3, r2, r3
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	4313      	orrs	r3, r2
 8008298:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 80b2 	beq.w	8008412 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082ae:	4b60      	ldr	r3, [pc, #384]	; (8008430 <HAL_GPIO_Init+0x30c>)
 80082b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b2:	4a5f      	ldr	r2, [pc, #380]	; (8008430 <HAL_GPIO_Init+0x30c>)
 80082b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082b8:	6453      	str	r3, [r2, #68]	; 0x44
 80082ba:	4b5d      	ldr	r3, [pc, #372]	; (8008430 <HAL_GPIO_Init+0x30c>)
 80082bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80082c6:	4a5b      	ldr	r2, [pc, #364]	; (8008434 <HAL_GPIO_Init+0x310>)
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	089b      	lsrs	r3, r3, #2
 80082cc:	3302      	adds	r3, #2
 80082ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	f003 0303 	and.w	r3, r3, #3
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	220f      	movs	r2, #15
 80082de:	fa02 f303 	lsl.w	r3, r2, r3
 80082e2:	43db      	mvns	r3, r3
 80082e4:	69ba      	ldr	r2, [r7, #24]
 80082e6:	4013      	ands	r3, r2
 80082e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a52      	ldr	r2, [pc, #328]	; (8008438 <HAL_GPIO_Init+0x314>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d02b      	beq.n	800834a <HAL_GPIO_Init+0x226>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a51      	ldr	r2, [pc, #324]	; (800843c <HAL_GPIO_Init+0x318>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d025      	beq.n	8008346 <HAL_GPIO_Init+0x222>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a50      	ldr	r2, [pc, #320]	; (8008440 <HAL_GPIO_Init+0x31c>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d01f      	beq.n	8008342 <HAL_GPIO_Init+0x21e>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a4f      	ldr	r2, [pc, #316]	; (8008444 <HAL_GPIO_Init+0x320>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d019      	beq.n	800833e <HAL_GPIO_Init+0x21a>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a4e      	ldr	r2, [pc, #312]	; (8008448 <HAL_GPIO_Init+0x324>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d013      	beq.n	800833a <HAL_GPIO_Init+0x216>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a4d      	ldr	r2, [pc, #308]	; (800844c <HAL_GPIO_Init+0x328>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d00d      	beq.n	8008336 <HAL_GPIO_Init+0x212>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a4c      	ldr	r2, [pc, #304]	; (8008450 <HAL_GPIO_Init+0x32c>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d007      	beq.n	8008332 <HAL_GPIO_Init+0x20e>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a4b      	ldr	r2, [pc, #300]	; (8008454 <HAL_GPIO_Init+0x330>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d101      	bne.n	800832e <HAL_GPIO_Init+0x20a>
 800832a:	2307      	movs	r3, #7
 800832c:	e00e      	b.n	800834c <HAL_GPIO_Init+0x228>
 800832e:	2308      	movs	r3, #8
 8008330:	e00c      	b.n	800834c <HAL_GPIO_Init+0x228>
 8008332:	2306      	movs	r3, #6
 8008334:	e00a      	b.n	800834c <HAL_GPIO_Init+0x228>
 8008336:	2305      	movs	r3, #5
 8008338:	e008      	b.n	800834c <HAL_GPIO_Init+0x228>
 800833a:	2304      	movs	r3, #4
 800833c:	e006      	b.n	800834c <HAL_GPIO_Init+0x228>
 800833e:	2303      	movs	r3, #3
 8008340:	e004      	b.n	800834c <HAL_GPIO_Init+0x228>
 8008342:	2302      	movs	r3, #2
 8008344:	e002      	b.n	800834c <HAL_GPIO_Init+0x228>
 8008346:	2301      	movs	r3, #1
 8008348:	e000      	b.n	800834c <HAL_GPIO_Init+0x228>
 800834a:	2300      	movs	r3, #0
 800834c:	69fa      	ldr	r2, [r7, #28]
 800834e:	f002 0203 	and.w	r2, r2, #3
 8008352:	0092      	lsls	r2, r2, #2
 8008354:	4093      	lsls	r3, r2
 8008356:	69ba      	ldr	r2, [r7, #24]
 8008358:	4313      	orrs	r3, r2
 800835a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800835c:	4935      	ldr	r1, [pc, #212]	; (8008434 <HAL_GPIO_Init+0x310>)
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	089b      	lsrs	r3, r3, #2
 8008362:	3302      	adds	r3, #2
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800836a:	4b3b      	ldr	r3, [pc, #236]	; (8008458 <HAL_GPIO_Init+0x334>)
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	43db      	mvns	r3, r3
 8008374:	69ba      	ldr	r2, [r7, #24]
 8008376:	4013      	ands	r3, r2
 8008378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d003      	beq.n	800838e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008386:	69ba      	ldr	r2, [r7, #24]
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	4313      	orrs	r3, r2
 800838c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800838e:	4a32      	ldr	r2, [pc, #200]	; (8008458 <HAL_GPIO_Init+0x334>)
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008394:	4b30      	ldr	r3, [pc, #192]	; (8008458 <HAL_GPIO_Init+0x334>)
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	43db      	mvns	r3, r3
 800839e:	69ba      	ldr	r2, [r7, #24]
 80083a0:	4013      	ands	r3, r2
 80083a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d003      	beq.n	80083b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80083b0:	69ba      	ldr	r2, [r7, #24]
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80083b8:	4a27      	ldr	r2, [pc, #156]	; (8008458 <HAL_GPIO_Init+0x334>)
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80083be:	4b26      	ldr	r3, [pc, #152]	; (8008458 <HAL_GPIO_Init+0x334>)
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	43db      	mvns	r3, r3
 80083c8:	69ba      	ldr	r2, [r7, #24]
 80083ca:	4013      	ands	r3, r2
 80083cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d003      	beq.n	80083e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80083da:	69ba      	ldr	r2, [r7, #24]
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	4313      	orrs	r3, r2
 80083e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80083e2:	4a1d      	ldr	r2, [pc, #116]	; (8008458 <HAL_GPIO_Init+0x334>)
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80083e8:	4b1b      	ldr	r3, [pc, #108]	; (8008458 <HAL_GPIO_Init+0x334>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	43db      	mvns	r3, r3
 80083f2:	69ba      	ldr	r2, [r7, #24]
 80083f4:	4013      	ands	r3, r2
 80083f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d003      	beq.n	800840c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008404:	69ba      	ldr	r2, [r7, #24]
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	4313      	orrs	r3, r2
 800840a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800840c:	4a12      	ldr	r2, [pc, #72]	; (8008458 <HAL_GPIO_Init+0x334>)
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	3301      	adds	r3, #1
 8008416:	61fb      	str	r3, [r7, #28]
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	2b0f      	cmp	r3, #15
 800841c:	f67f ae92 	bls.w	8008144 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008420:	bf00      	nop
 8008422:	bf00      	nop
 8008424:	3724      	adds	r7, #36	; 0x24
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	40023800 	.word	0x40023800
 8008434:	40013800 	.word	0x40013800
 8008438:	40020000 	.word	0x40020000
 800843c:	40020400 	.word	0x40020400
 8008440:	40020800 	.word	0x40020800
 8008444:	40020c00 	.word	0x40020c00
 8008448:	40021000 	.word	0x40021000
 800844c:	40021400 	.word	0x40021400
 8008450:	40021800 	.word	0x40021800
 8008454:	40021c00 	.word	0x40021c00
 8008458:	40013c00 	.word	0x40013c00

0800845c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	460b      	mov	r3, r1
 8008466:	807b      	strh	r3, [r7, #2]
 8008468:	4613      	mov	r3, r2
 800846a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800846c:	787b      	ldrb	r3, [r7, #1]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d003      	beq.n	800847a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008472:	887a      	ldrh	r2, [r7, #2]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008478:	e003      	b.n	8008482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800847a:	887b      	ldrh	r3, [r7, #2]
 800847c:	041a      	lsls	r2, r3, #16
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	619a      	str	r2, [r3, #24]
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
	...

08008490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e07f      	b.n	80085a2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d106      	bne.n	80084bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7fc fca4 	bl	8004e04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2224      	movs	r2, #36	; 0x24
 80084c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f022 0201 	bic.w	r2, r2, #1
 80084d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685a      	ldr	r2, [r3, #4]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80084e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	689a      	ldr	r2, [r3, #8]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d107      	bne.n	800850a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	689a      	ldr	r2, [r3, #8]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008506:	609a      	str	r2, [r3, #8]
 8008508:	e006      	b.n	8008518 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	689a      	ldr	r2, [r3, #8]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008516:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	2b02      	cmp	r3, #2
 800851e:	d104      	bne.n	800852a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008528:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	6859      	ldr	r1, [r3, #4]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	4b1d      	ldr	r3, [pc, #116]	; (80085ac <HAL_I2C_Init+0x11c>)
 8008536:	430b      	orrs	r3, r1
 8008538:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68da      	ldr	r2, [r3, #12]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008548:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	691a      	ldr	r2, [r3, #16]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	430a      	orrs	r2, r1
 8008562:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	69d9      	ldr	r1, [r3, #28]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a1a      	ldr	r2, [r3, #32]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	430a      	orrs	r2, r1
 8008572:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f042 0201 	orr.w	r2, r2, #1
 8008582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2220      	movs	r2, #32
 800858e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	02008000 	.word	0x02008000

080085b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af02      	add	r7, sp, #8
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	4608      	mov	r0, r1
 80085ba:	4611      	mov	r1, r2
 80085bc:	461a      	mov	r2, r3
 80085be:	4603      	mov	r3, r0
 80085c0:	817b      	strh	r3, [r7, #10]
 80085c2:	460b      	mov	r3, r1
 80085c4:	813b      	strh	r3, [r7, #8]
 80085c6:	4613      	mov	r3, r2
 80085c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b20      	cmp	r3, #32
 80085d4:	f040 80f9 	bne.w	80087ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80085d8:	6a3b      	ldr	r3, [r7, #32]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d002      	beq.n	80085e4 <HAL_I2C_Mem_Write+0x34>
 80085de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d105      	bne.n	80085f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e0ed      	b.n	80087cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d101      	bne.n	80085fe <HAL_I2C_Mem_Write+0x4e>
 80085fa:	2302      	movs	r3, #2
 80085fc:	e0e6      	b.n	80087cc <HAL_I2C_Mem_Write+0x21c>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008606:	f7ff f871 	bl	80076ec <HAL_GetTick>
 800860a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	2319      	movs	r3, #25
 8008612:	2201      	movs	r2, #1
 8008614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f000 fac3 	bl	8008ba4 <I2C_WaitOnFlagUntilTimeout>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e0d1      	b.n	80087cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2221      	movs	r2, #33	; 0x21
 800862c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2240      	movs	r2, #64	; 0x40
 8008634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6a3a      	ldr	r2, [r7, #32]
 8008642:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008648:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008650:	88f8      	ldrh	r0, [r7, #6]
 8008652:	893a      	ldrh	r2, [r7, #8]
 8008654:	8979      	ldrh	r1, [r7, #10]
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	9301      	str	r3, [sp, #4]
 800865a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	4603      	mov	r3, r0
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 f9d3 	bl	8008a0c <I2C_RequestMemoryWrite>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d005      	beq.n	8008678 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	e0a9      	b.n	80087cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800867c:	b29b      	uxth	r3, r3
 800867e:	2bff      	cmp	r3, #255	; 0xff
 8008680:	d90e      	bls.n	80086a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	22ff      	movs	r2, #255	; 0xff
 8008686:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800868c:	b2da      	uxtb	r2, r3
 800868e:	8979      	ldrh	r1, [r7, #10]
 8008690:	2300      	movs	r3, #0
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f000 fc1f 	bl	8008edc <I2C_TransferConfig>
 800869e:	e00f      	b.n	80086c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086ae:	b2da      	uxtb	r2, r3
 80086b0:	8979      	ldrh	r1, [r7, #10]
 80086b2:	2300      	movs	r3, #0
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 fc0e 	bl	8008edc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086c0:	697a      	ldr	r2, [r7, #20]
 80086c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 faad 	bl	8008c24 <I2C_WaitOnTXISFlagUntilTimeout>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d001      	beq.n	80086d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e07b      	b.n	80087cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d8:	781a      	ldrb	r2, [r3, #0]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e4:	1c5a      	adds	r2, r3, #1
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	3b01      	subs	r3, #1
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086fc:	3b01      	subs	r3, #1
 80086fe:	b29a      	uxth	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008708:	b29b      	uxth	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d034      	beq.n	8008778 <HAL_I2C_Mem_Write+0x1c8>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008712:	2b00      	cmp	r3, #0
 8008714:	d130      	bne.n	8008778 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	9300      	str	r3, [sp, #0]
 800871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871c:	2200      	movs	r2, #0
 800871e:	2180      	movs	r1, #128	; 0x80
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f000 fa3f 	bl	8008ba4 <I2C_WaitOnFlagUntilTimeout>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e04d      	b.n	80087cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008734:	b29b      	uxth	r3, r3
 8008736:	2bff      	cmp	r3, #255	; 0xff
 8008738:	d90e      	bls.n	8008758 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	22ff      	movs	r2, #255	; 0xff
 800873e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008744:	b2da      	uxtb	r2, r3
 8008746:	8979      	ldrh	r1, [r7, #10]
 8008748:	2300      	movs	r3, #0
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f000 fbc3 	bl	8008edc <I2C_TransferConfig>
 8008756:	e00f      	b.n	8008778 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800875c:	b29a      	uxth	r2, r3
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008766:	b2da      	uxtb	r2, r3
 8008768:	8979      	ldrh	r1, [r7, #10]
 800876a:	2300      	movs	r3, #0
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f000 fbb2 	bl	8008edc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800877c:	b29b      	uxth	r3, r3
 800877e:	2b00      	cmp	r3, #0
 8008780:	d19e      	bne.n	80086c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008782:	697a      	ldr	r2, [r7, #20]
 8008784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 fa8c 	bl	8008ca4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e01a      	b.n	80087cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2220      	movs	r2, #32
 800879c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	6859      	ldr	r1, [r3, #4]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	4b0a      	ldr	r3, [pc, #40]	; (80087d4 <HAL_I2C_Mem_Write+0x224>)
 80087aa:	400b      	ands	r3, r1
 80087ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2220      	movs	r2, #32
 80087b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	e000      	b.n	80087cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80087ca:	2302      	movs	r3, #2
  }
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3718      	adds	r7, #24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	fe00e800 	.word	0xfe00e800

080087d8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b088      	sub	sp, #32
 80087dc:	af02      	add	r7, sp, #8
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	4608      	mov	r0, r1
 80087e2:	4611      	mov	r1, r2
 80087e4:	461a      	mov	r2, r3
 80087e6:	4603      	mov	r3, r0
 80087e8:	817b      	strh	r3, [r7, #10]
 80087ea:	460b      	mov	r3, r1
 80087ec:	813b      	strh	r3, [r7, #8]
 80087ee:	4613      	mov	r3, r2
 80087f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b20      	cmp	r3, #32
 80087fc:	f040 80fd 	bne.w	80089fa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008800:	6a3b      	ldr	r3, [r7, #32]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d002      	beq.n	800880c <HAL_I2C_Mem_Read+0x34>
 8008806:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008808:	2b00      	cmp	r3, #0
 800880a:	d105      	bne.n	8008818 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008812:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	e0f1      	b.n	80089fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800881e:	2b01      	cmp	r3, #1
 8008820:	d101      	bne.n	8008826 <HAL_I2C_Mem_Read+0x4e>
 8008822:	2302      	movs	r3, #2
 8008824:	e0ea      	b.n	80089fc <HAL_I2C_Mem_Read+0x224>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2201      	movs	r2, #1
 800882a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800882e:	f7fe ff5d 	bl	80076ec <HAL_GetTick>
 8008832:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	2319      	movs	r3, #25
 800883a:	2201      	movs	r2, #1
 800883c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 f9af 	bl	8008ba4 <I2C_WaitOnFlagUntilTimeout>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e0d5      	b.n	80089fc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2222      	movs	r2, #34	; 0x22
 8008854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2240      	movs	r2, #64	; 0x40
 800885c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6a3a      	ldr	r2, [r7, #32]
 800886a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008870:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008878:	88f8      	ldrh	r0, [r7, #6]
 800887a:	893a      	ldrh	r2, [r7, #8]
 800887c:	8979      	ldrh	r1, [r7, #10]
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	4603      	mov	r3, r0
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f000 f913 	bl	8008ab4 <I2C_RequestMemoryRead>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d005      	beq.n	80088a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e0ad      	b.n	80089fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	2bff      	cmp	r3, #255	; 0xff
 80088a8:	d90e      	bls.n	80088c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	22ff      	movs	r2, #255	; 0xff
 80088ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	8979      	ldrh	r1, [r7, #10]
 80088b8:	4b52      	ldr	r3, [pc, #328]	; (8008a04 <HAL_I2C_Mem_Read+0x22c>)
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f000 fb0b 	bl	8008edc <I2C_TransferConfig>
 80088c6:	e00f      	b.n	80088e8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088d6:	b2da      	uxtb	r2, r3
 80088d8:	8979      	ldrh	r1, [r7, #10]
 80088da:	4b4a      	ldr	r3, [pc, #296]	; (8008a04 <HAL_I2C_Mem_Read+0x22c>)
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 fafa 	bl	8008edc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ee:	2200      	movs	r2, #0
 80088f0:	2104      	movs	r1, #4
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f000 f956 	bl	8008ba4 <I2C_WaitOnFlagUntilTimeout>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d001      	beq.n	8008902 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e07c      	b.n	80089fc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890c:	b2d2      	uxtb	r2, r2
 800890e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800891e:	3b01      	subs	r3, #1
 8008920:	b29a      	uxth	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800892a:	b29b      	uxth	r3, r3
 800892c:	3b01      	subs	r3, #1
 800892e:	b29a      	uxth	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008938:	b29b      	uxth	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d034      	beq.n	80089a8 <HAL_I2C_Mem_Read+0x1d0>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008942:	2b00      	cmp	r3, #0
 8008944:	d130      	bne.n	80089a8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	9300      	str	r3, [sp, #0]
 800894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894c:	2200      	movs	r2, #0
 800894e:	2180      	movs	r1, #128	; 0x80
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f000 f927 	bl	8008ba4 <I2C_WaitOnFlagUntilTimeout>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	e04d      	b.n	80089fc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008964:	b29b      	uxth	r3, r3
 8008966:	2bff      	cmp	r3, #255	; 0xff
 8008968:	d90e      	bls.n	8008988 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	22ff      	movs	r2, #255	; 0xff
 800896e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008974:	b2da      	uxtb	r2, r3
 8008976:	8979      	ldrh	r1, [r7, #10]
 8008978:	2300      	movs	r3, #0
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 faab 	bl	8008edc <I2C_TransferConfig>
 8008986:	e00f      	b.n	80089a8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800898c:	b29a      	uxth	r2, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008996:	b2da      	uxtb	r2, r3
 8008998:	8979      	ldrh	r1, [r7, #10]
 800899a:	2300      	movs	r3, #0
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f000 fa9a 	bl	8008edc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d19a      	bne.n	80088e8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f000 f974 	bl	8008ca4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d001      	beq.n	80089c6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e01a      	b.n	80089fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2220      	movs	r2, #32
 80089cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	6859      	ldr	r1, [r3, #4]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	4b0b      	ldr	r3, [pc, #44]	; (8008a08 <HAL_I2C_Mem_Read+0x230>)
 80089da:	400b      	ands	r3, r1
 80089dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2220      	movs	r2, #32
 80089e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	e000      	b.n	80089fc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80089fa:	2302      	movs	r3, #2
  }
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3718      	adds	r7, #24
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	80002400 	.word	0x80002400
 8008a08:	fe00e800 	.word	0xfe00e800

08008a0c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af02      	add	r7, sp, #8
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	4608      	mov	r0, r1
 8008a16:	4611      	mov	r1, r2
 8008a18:	461a      	mov	r2, r3
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	817b      	strh	r3, [r7, #10]
 8008a1e:	460b      	mov	r3, r1
 8008a20:	813b      	strh	r3, [r7, #8]
 8008a22:	4613      	mov	r3, r2
 8008a24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008a26:	88fb      	ldrh	r3, [r7, #6]
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	8979      	ldrh	r1, [r7, #10]
 8008a2c:	4b20      	ldr	r3, [pc, #128]	; (8008ab0 <I2C_RequestMemoryWrite+0xa4>)
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f000 fa51 	bl	8008edc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a3a:	69fa      	ldr	r2, [r7, #28]
 8008a3c:	69b9      	ldr	r1, [r7, #24]
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f000 f8f0 	bl	8008c24 <I2C_WaitOnTXISFlagUntilTimeout>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e02c      	b.n	8008aa8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a4e:	88fb      	ldrh	r3, [r7, #6]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d105      	bne.n	8008a60 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a54:	893b      	ldrh	r3, [r7, #8]
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	629a      	str	r2, [r3, #40]	; 0x28
 8008a5e:	e015      	b.n	8008a8c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008a60:	893b      	ldrh	r3, [r7, #8]
 8008a62:	0a1b      	lsrs	r3, r3, #8
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a6e:	69fa      	ldr	r2, [r7, #28]
 8008a70:	69b9      	ldr	r1, [r7, #24]
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 f8d6 	bl	8008c24 <I2C_WaitOnTXISFlagUntilTimeout>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d001      	beq.n	8008a82 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e012      	b.n	8008aa8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a82:	893b      	ldrh	r3, [r7, #8]
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	2200      	movs	r2, #0
 8008a94:	2180      	movs	r1, #128	; 0x80
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f000 f884 	bl	8008ba4 <I2C_WaitOnFlagUntilTimeout>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d001      	beq.n	8008aa6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e000      	b.n	8008aa8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	80002000 	.word	0x80002000

08008ab4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af02      	add	r7, sp, #8
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	4608      	mov	r0, r1
 8008abe:	4611      	mov	r1, r2
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	817b      	strh	r3, [r7, #10]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	813b      	strh	r3, [r7, #8]
 8008aca:	4613      	mov	r3, r2
 8008acc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008ace:	88fb      	ldrh	r3, [r7, #6]
 8008ad0:	b2da      	uxtb	r2, r3
 8008ad2:	8979      	ldrh	r1, [r7, #10]
 8008ad4:	4b20      	ldr	r3, [pc, #128]	; (8008b58 <I2C_RequestMemoryRead+0xa4>)
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	2300      	movs	r3, #0
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f000 f9fe 	bl	8008edc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ae0:	69fa      	ldr	r2, [r7, #28]
 8008ae2:	69b9      	ldr	r1, [r7, #24]
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 f89d 	bl	8008c24 <I2C_WaitOnTXISFlagUntilTimeout>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e02c      	b.n	8008b4e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008af4:	88fb      	ldrh	r3, [r7, #6]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d105      	bne.n	8008b06 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008afa:	893b      	ldrh	r3, [r7, #8]
 8008afc:	b2da      	uxtb	r2, r3
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	629a      	str	r2, [r3, #40]	; 0x28
 8008b04:	e015      	b.n	8008b32 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008b06:	893b      	ldrh	r3, [r7, #8]
 8008b08:	0a1b      	lsrs	r3, r3, #8
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	b2da      	uxtb	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b14:	69fa      	ldr	r2, [r7, #28]
 8008b16:	69b9      	ldr	r1, [r7, #24]
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f000 f883 	bl	8008c24 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d001      	beq.n	8008b28 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e012      	b.n	8008b4e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b28:	893b      	ldrh	r3, [r7, #8]
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	2140      	movs	r1, #64	; 0x40
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 f831 	bl	8008ba4 <I2C_WaitOnFlagUntilTimeout>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d001      	beq.n	8008b4c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e000      	b.n	8008b4e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	80002000 	.word	0x80002000

08008b5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	699b      	ldr	r3, [r3, #24]
 8008b6a:	f003 0302 	and.w	r3, r3, #2
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d103      	bne.n	8008b7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2200      	movs	r2, #0
 8008b78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d007      	beq.n	8008b98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	699a      	ldr	r2, [r3, #24]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f042 0201 	orr.w	r2, r2, #1
 8008b96:	619a      	str	r2, [r3, #24]
  }
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	603b      	str	r3, [r7, #0]
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008bb4:	e022      	b.n	8008bfc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bbc:	d01e      	beq.n	8008bfc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bbe:	f7fe fd95 	bl	80076ec <HAL_GetTick>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d302      	bcc.n	8008bd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d113      	bne.n	8008bfc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bd8:	f043 0220 	orr.w	r2, r3, #32
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2220      	movs	r2, #32
 8008be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e00f      	b.n	8008c1c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	699a      	ldr	r2, [r3, #24]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	4013      	ands	r3, r2
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	bf0c      	ite	eq
 8008c0c:	2301      	moveq	r3, #1
 8008c0e:	2300      	movne	r3, #0
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	461a      	mov	r2, r3
 8008c14:	79fb      	ldrb	r3, [r7, #7]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d0cd      	beq.n	8008bb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008c30:	e02c      	b.n	8008c8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	68b9      	ldr	r1, [r7, #8]
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f000 f870 	bl	8008d1c <I2C_IsErrorOccurred>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e02a      	b.n	8008c9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4c:	d01e      	beq.n	8008c8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c4e:	f7fe fd4d 	bl	80076ec <HAL_GetTick>
 8008c52:	4602      	mov	r2, r0
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d302      	bcc.n	8008c64 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d113      	bne.n	8008c8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c68:	f043 0220 	orr.w	r2, r3, #32
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2220      	movs	r2, #32
 8008c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e007      	b.n	8008c9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	f003 0302 	and.w	r3, r3, #2
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d1cb      	bne.n	8008c32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008cb0:	e028      	b.n	8008d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	68b9      	ldr	r1, [r7, #8]
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f000 f830 	bl	8008d1c <I2C_IsErrorOccurred>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d001      	beq.n	8008cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e026      	b.n	8008d14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cc6:	f7fe fd11 	bl	80076ec <HAL_GetTick>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	1ad3      	subs	r3, r2, r3
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d302      	bcc.n	8008cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d113      	bne.n	8008d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce0:	f043 0220 	orr.w	r2, r3, #32
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2220      	movs	r2, #32
 8008cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e007      	b.n	8008d14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	f003 0320 	and.w	r3, r3, #32
 8008d0e:	2b20      	cmp	r3, #32
 8008d10:	d1cf      	bne.n	8008cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08a      	sub	sp, #40	; 0x28
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	f003 0310 	and.w	r3, r3, #16
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d068      	beq.n	8008e1a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2210      	movs	r2, #16
 8008d4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008d50:	e049      	b.n	8008de6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d58:	d045      	beq.n	8008de6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008d5a:	f7fe fcc7 	bl	80076ec <HAL_GetTick>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d302      	bcc.n	8008d70 <I2C_IsErrorOccurred+0x54>
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d13a      	bne.n	8008de6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d92:	d121      	bne.n	8008dd8 <I2C_IsErrorOccurred+0xbc>
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d9a:	d01d      	beq.n	8008dd8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008d9c:	7cfb      	ldrb	r3, [r7, #19]
 8008d9e:	2b20      	cmp	r3, #32
 8008da0:	d01a      	beq.n	8008dd8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008db0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008db2:	f7fe fc9b 	bl	80076ec <HAL_GetTick>
 8008db6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008db8:	e00e      	b.n	8008dd8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008dba:	f7fe fc97 	bl	80076ec <HAL_GetTick>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	2b19      	cmp	r3, #25
 8008dc6:	d907      	bls.n	8008dd8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8008dc8:	6a3b      	ldr	r3, [r7, #32]
 8008dca:	f043 0320 	orr.w	r3, r3, #32
 8008dce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008dd6:	e006      	b.n	8008de6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	f003 0320 	and.w	r3, r3, #32
 8008de2:	2b20      	cmp	r3, #32
 8008de4:	d1e9      	bne.n	8008dba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	699b      	ldr	r3, [r3, #24]
 8008dec:	f003 0320 	and.w	r3, r3, #32
 8008df0:	2b20      	cmp	r3, #32
 8008df2:	d003      	beq.n	8008dfc <I2C_IsErrorOccurred+0xe0>
 8008df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d0aa      	beq.n	8008d52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d103      	bne.n	8008e0c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2220      	movs	r2, #32
 8008e0a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	f043 0304 	orr.w	r3, r3, #4
 8008e12:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00b      	beq.n	8008e44 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	f043 0301 	orr.w	r3, r3, #1
 8008e32:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00b      	beq.n	8008e66 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008e4e:	6a3b      	ldr	r3, [r7, #32]
 8008e50:	f043 0308 	orr.w	r3, r3, #8
 8008e54:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00b      	beq.n	8008e88 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008e70:	6a3b      	ldr	r3, [r7, #32]
 8008e72:	f043 0302 	orr.w	r3, r3, #2
 8008e76:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d01c      	beq.n	8008eca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f7ff fe63 	bl	8008b5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6859      	ldr	r1, [r3, #4]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	4b0d      	ldr	r3, [pc, #52]	; (8008ed8 <I2C_IsErrorOccurred+0x1bc>)
 8008ea2:	400b      	ands	r3, r1
 8008ea4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	431a      	orrs	r2, r3
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2220      	movs	r2, #32
 8008eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3728      	adds	r7, #40	; 0x28
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	fe00e800 	.word	0xfe00e800

08008edc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b087      	sub	sp, #28
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	607b      	str	r3, [r7, #4]
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	817b      	strh	r3, [r7, #10]
 8008eea:	4613      	mov	r3, r2
 8008eec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008eee:	897b      	ldrh	r3, [r7, #10]
 8008ef0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008ef4:	7a7b      	ldrb	r3, [r7, #9]
 8008ef6:	041b      	lsls	r3, r3, #16
 8008ef8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008efc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008f02:	6a3b      	ldr	r3, [r7, #32]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f0a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685a      	ldr	r2, [r3, #4]
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	0d5b      	lsrs	r3, r3, #21
 8008f16:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008f1a:	4b08      	ldr	r3, [pc, #32]	; (8008f3c <I2C_TransferConfig+0x60>)
 8008f1c:	430b      	orrs	r3, r1
 8008f1e:	43db      	mvns	r3, r3
 8008f20:	ea02 0103 	and.w	r1, r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	697a      	ldr	r2, [r7, #20]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008f2e:	bf00      	nop
 8008f30:	371c      	adds	r7, #28
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	03ff63ff 	.word	0x03ff63ff

08008f40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b20      	cmp	r3, #32
 8008f54:	d138      	bne.n	8008fc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d101      	bne.n	8008f64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008f60:	2302      	movs	r3, #2
 8008f62:	e032      	b.n	8008fca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2224      	movs	r2, #36	; 0x24
 8008f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f022 0201 	bic.w	r2, r2, #1
 8008f82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6819      	ldr	r1, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f042 0201 	orr.w	r2, r2, #1
 8008fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2220      	movs	r2, #32
 8008fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	e000      	b.n	8008fca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008fc8:	2302      	movs	r3, #2
  }
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	b085      	sub	sp, #20
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	2b20      	cmp	r3, #32
 8008fea:	d139      	bne.n	8009060 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d101      	bne.n	8008ffa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	e033      	b.n	8009062 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2224      	movs	r2, #36	; 0x24
 8009006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f022 0201 	bic.w	r2, r2, #1
 8009018:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009028:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	021b      	lsls	r3, r3, #8
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	4313      	orrs	r3, r2
 8009032:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f042 0201 	orr.w	r2, r2, #1
 800904a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2220      	movs	r2, #32
 8009050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	e000      	b.n	8009062 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009060:	2302      	movs	r3, #2
  }
}
 8009062:	4618      	mov	r0, r3
 8009064:	3714      	adds	r7, #20
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
	...

08009070 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009076:	2300      	movs	r3, #0
 8009078:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800907a:	4b23      	ldr	r3, [pc, #140]	; (8009108 <HAL_PWREx_EnableOverDrive+0x98>)
 800907c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907e:	4a22      	ldr	r2, [pc, #136]	; (8009108 <HAL_PWREx_EnableOverDrive+0x98>)
 8009080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009084:	6413      	str	r3, [r2, #64]	; 0x40
 8009086:	4b20      	ldr	r3, [pc, #128]	; (8009108 <HAL_PWREx_EnableOverDrive+0x98>)
 8009088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800908e:	603b      	str	r3, [r7, #0]
 8009090:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009092:	4b1e      	ldr	r3, [pc, #120]	; (800910c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a1d      	ldr	r2, [pc, #116]	; (800910c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800909c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800909e:	f7fe fb25 	bl	80076ec <HAL_GetTick>
 80090a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80090a4:	e009      	b.n	80090ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80090a6:	f7fe fb21 	bl	80076ec <HAL_GetTick>
 80090aa:	4602      	mov	r2, r0
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090b4:	d901      	bls.n	80090ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80090b6:	2303      	movs	r3, #3
 80090b8:	e022      	b.n	8009100 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80090ba:	4b14      	ldr	r3, [pc, #80]	; (800910c <HAL_PWREx_EnableOverDrive+0x9c>)
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090c6:	d1ee      	bne.n	80090a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80090c8:	4b10      	ldr	r3, [pc, #64]	; (800910c <HAL_PWREx_EnableOverDrive+0x9c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a0f      	ldr	r2, [pc, #60]	; (800910c <HAL_PWREx_EnableOverDrive+0x9c>)
 80090ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80090d4:	f7fe fb0a 	bl	80076ec <HAL_GetTick>
 80090d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80090da:	e009      	b.n	80090f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80090dc:	f7fe fb06 	bl	80076ec <HAL_GetTick>
 80090e0:	4602      	mov	r2, r0
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090ea:	d901      	bls.n	80090f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e007      	b.n	8009100 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80090f0:	4b06      	ldr	r3, [pc, #24]	; (800910c <HAL_PWREx_EnableOverDrive+0x9c>)
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090fc:	d1ee      	bne.n	80090dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	40023800 	.word	0x40023800
 800910c:	40007000 	.word	0x40007000

08009110 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009118:	2300      	movs	r3, #0
 800911a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d101      	bne.n	8009126 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e291      	b.n	800964a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0301 	and.w	r3, r3, #1
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 8087 	beq.w	8009242 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009134:	4b96      	ldr	r3, [pc, #600]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	f003 030c 	and.w	r3, r3, #12
 800913c:	2b04      	cmp	r3, #4
 800913e:	d00c      	beq.n	800915a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009140:	4b93      	ldr	r3, [pc, #588]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	f003 030c 	and.w	r3, r3, #12
 8009148:	2b08      	cmp	r3, #8
 800914a:	d112      	bne.n	8009172 <HAL_RCC_OscConfig+0x62>
 800914c:	4b90      	ldr	r3, [pc, #576]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009154:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009158:	d10b      	bne.n	8009172 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800915a:	4b8d      	ldr	r3, [pc, #564]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009162:	2b00      	cmp	r3, #0
 8009164:	d06c      	beq.n	8009240 <HAL_RCC_OscConfig+0x130>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d168      	bne.n	8009240 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e26b      	b.n	800964a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800917a:	d106      	bne.n	800918a <HAL_RCC_OscConfig+0x7a>
 800917c:	4b84      	ldr	r3, [pc, #528]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a83      	ldr	r2, [pc, #524]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 8009182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	e02e      	b.n	80091e8 <HAL_RCC_OscConfig+0xd8>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10c      	bne.n	80091ac <HAL_RCC_OscConfig+0x9c>
 8009192:	4b7f      	ldr	r3, [pc, #508]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a7e      	ldr	r2, [pc, #504]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 8009198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	4b7c      	ldr	r3, [pc, #496]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a7b      	ldr	r2, [pc, #492]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 80091a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091a8:	6013      	str	r3, [r2, #0]
 80091aa:	e01d      	b.n	80091e8 <HAL_RCC_OscConfig+0xd8>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091b4:	d10c      	bne.n	80091d0 <HAL_RCC_OscConfig+0xc0>
 80091b6:	4b76      	ldr	r3, [pc, #472]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a75      	ldr	r2, [pc, #468]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 80091bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80091c0:	6013      	str	r3, [r2, #0]
 80091c2:	4b73      	ldr	r3, [pc, #460]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a72      	ldr	r2, [pc, #456]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 80091c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	e00b      	b.n	80091e8 <HAL_RCC_OscConfig+0xd8>
 80091d0:	4b6f      	ldr	r3, [pc, #444]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a6e      	ldr	r2, [pc, #440]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 80091d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091da:	6013      	str	r3, [r2, #0]
 80091dc:	4b6c      	ldr	r3, [pc, #432]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a6b      	ldr	r2, [pc, #428]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 80091e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d013      	beq.n	8009218 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091f0:	f7fe fa7c 	bl	80076ec <HAL_GetTick>
 80091f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091f6:	e008      	b.n	800920a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091f8:	f7fe fa78 	bl	80076ec <HAL_GetTick>
 80091fc:	4602      	mov	r2, r0
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	2b64      	cmp	r3, #100	; 0x64
 8009204:	d901      	bls.n	800920a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009206:	2303      	movs	r3, #3
 8009208:	e21f      	b.n	800964a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800920a:	4b61      	ldr	r3, [pc, #388]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009212:	2b00      	cmp	r3, #0
 8009214:	d0f0      	beq.n	80091f8 <HAL_RCC_OscConfig+0xe8>
 8009216:	e014      	b.n	8009242 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009218:	f7fe fa68 	bl	80076ec <HAL_GetTick>
 800921c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800921e:	e008      	b.n	8009232 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009220:	f7fe fa64 	bl	80076ec <HAL_GetTick>
 8009224:	4602      	mov	r2, r0
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	2b64      	cmp	r3, #100	; 0x64
 800922c:	d901      	bls.n	8009232 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800922e:	2303      	movs	r3, #3
 8009230:	e20b      	b.n	800964a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009232:	4b57      	ldr	r3, [pc, #348]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1f0      	bne.n	8009220 <HAL_RCC_OscConfig+0x110>
 800923e:	e000      	b.n	8009242 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 0302 	and.w	r3, r3, #2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d069      	beq.n	8009322 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800924e:	4b50      	ldr	r3, [pc, #320]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	f003 030c 	and.w	r3, r3, #12
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00b      	beq.n	8009272 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800925a:	4b4d      	ldr	r3, [pc, #308]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f003 030c 	and.w	r3, r3, #12
 8009262:	2b08      	cmp	r3, #8
 8009264:	d11c      	bne.n	80092a0 <HAL_RCC_OscConfig+0x190>
 8009266:	4b4a      	ldr	r3, [pc, #296]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800926e:	2b00      	cmp	r3, #0
 8009270:	d116      	bne.n	80092a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009272:	4b47      	ldr	r3, [pc, #284]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 0302 	and.w	r3, r3, #2
 800927a:	2b00      	cmp	r3, #0
 800927c:	d005      	beq.n	800928a <HAL_RCC_OscConfig+0x17a>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d001      	beq.n	800928a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e1df      	b.n	800964a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800928a:	4b41      	ldr	r3, [pc, #260]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	00db      	lsls	r3, r3, #3
 8009298:	493d      	ldr	r1, [pc, #244]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 800929a:	4313      	orrs	r3, r2
 800929c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800929e:	e040      	b.n	8009322 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d023      	beq.n	80092f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80092a8:	4b39      	ldr	r3, [pc, #228]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a38      	ldr	r2, [pc, #224]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 80092ae:	f043 0301 	orr.w	r3, r3, #1
 80092b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092b4:	f7fe fa1a 	bl	80076ec <HAL_GetTick>
 80092b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092ba:	e008      	b.n	80092ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80092bc:	f7fe fa16 	bl	80076ec <HAL_GetTick>
 80092c0:	4602      	mov	r2, r0
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d901      	bls.n	80092ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80092ca:	2303      	movs	r3, #3
 80092cc:	e1bd      	b.n	800964a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092ce:	4b30      	ldr	r3, [pc, #192]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 0302 	and.w	r3, r3, #2
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d0f0      	beq.n	80092bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092da:	4b2d      	ldr	r3, [pc, #180]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	00db      	lsls	r3, r3, #3
 80092e8:	4929      	ldr	r1, [pc, #164]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 80092ea:	4313      	orrs	r3, r2
 80092ec:	600b      	str	r3, [r1, #0]
 80092ee:	e018      	b.n	8009322 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80092f0:	4b27      	ldr	r3, [pc, #156]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a26      	ldr	r2, [pc, #152]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 80092f6:	f023 0301 	bic.w	r3, r3, #1
 80092fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092fc:	f7fe f9f6 	bl	80076ec <HAL_GetTick>
 8009300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009302:	e008      	b.n	8009316 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009304:	f7fe f9f2 	bl	80076ec <HAL_GetTick>
 8009308:	4602      	mov	r2, r0
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	2b02      	cmp	r3, #2
 8009310:	d901      	bls.n	8009316 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009312:	2303      	movs	r3, #3
 8009314:	e199      	b.n	800964a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009316:	4b1e      	ldr	r3, [pc, #120]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 0302 	and.w	r3, r3, #2
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1f0      	bne.n	8009304 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f003 0308 	and.w	r3, r3, #8
 800932a:	2b00      	cmp	r3, #0
 800932c:	d038      	beq.n	80093a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d019      	beq.n	800936a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009336:	4b16      	ldr	r3, [pc, #88]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 8009338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800933a:	4a15      	ldr	r2, [pc, #84]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 800933c:	f043 0301 	orr.w	r3, r3, #1
 8009340:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009342:	f7fe f9d3 	bl	80076ec <HAL_GetTick>
 8009346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009348:	e008      	b.n	800935c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800934a:	f7fe f9cf 	bl	80076ec <HAL_GetTick>
 800934e:	4602      	mov	r2, r0
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	1ad3      	subs	r3, r2, r3
 8009354:	2b02      	cmp	r3, #2
 8009356:	d901      	bls.n	800935c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009358:	2303      	movs	r3, #3
 800935a:	e176      	b.n	800964a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800935c:	4b0c      	ldr	r3, [pc, #48]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 800935e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009360:	f003 0302 	and.w	r3, r3, #2
 8009364:	2b00      	cmp	r3, #0
 8009366:	d0f0      	beq.n	800934a <HAL_RCC_OscConfig+0x23a>
 8009368:	e01a      	b.n	80093a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800936a:	4b09      	ldr	r3, [pc, #36]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 800936c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800936e:	4a08      	ldr	r2, [pc, #32]	; (8009390 <HAL_RCC_OscConfig+0x280>)
 8009370:	f023 0301 	bic.w	r3, r3, #1
 8009374:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009376:	f7fe f9b9 	bl	80076ec <HAL_GetTick>
 800937a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800937c:	e00a      	b.n	8009394 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800937e:	f7fe f9b5 	bl	80076ec <HAL_GetTick>
 8009382:	4602      	mov	r2, r0
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	2b02      	cmp	r3, #2
 800938a:	d903      	bls.n	8009394 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800938c:	2303      	movs	r3, #3
 800938e:	e15c      	b.n	800964a <HAL_RCC_OscConfig+0x53a>
 8009390:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009394:	4b91      	ldr	r3, [pc, #580]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 8009396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009398:	f003 0302 	and.w	r3, r3, #2
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1ee      	bne.n	800937e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 0304 	and.w	r3, r3, #4
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f000 80a4 	beq.w	80094f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093ae:	4b8b      	ldr	r3, [pc, #556]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 80093b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10d      	bne.n	80093d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80093ba:	4b88      	ldr	r3, [pc, #544]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 80093bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093be:	4a87      	ldr	r2, [pc, #540]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 80093c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093c4:	6413      	str	r3, [r2, #64]	; 0x40
 80093c6:	4b85      	ldr	r3, [pc, #532]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 80093c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093ce:	60bb      	str	r3, [r7, #8]
 80093d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80093d2:	2301      	movs	r3, #1
 80093d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80093d6:	4b82      	ldr	r3, [pc, #520]	; (80095e0 <HAL_RCC_OscConfig+0x4d0>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d118      	bne.n	8009414 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80093e2:	4b7f      	ldr	r3, [pc, #508]	; (80095e0 <HAL_RCC_OscConfig+0x4d0>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a7e      	ldr	r2, [pc, #504]	; (80095e0 <HAL_RCC_OscConfig+0x4d0>)
 80093e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80093ee:	f7fe f97d 	bl	80076ec <HAL_GetTick>
 80093f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80093f4:	e008      	b.n	8009408 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093f6:	f7fe f979 	bl	80076ec <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	2b64      	cmp	r3, #100	; 0x64
 8009402:	d901      	bls.n	8009408 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e120      	b.n	800964a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009408:	4b75      	ldr	r3, [pc, #468]	; (80095e0 <HAL_RCC_OscConfig+0x4d0>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009410:	2b00      	cmp	r3, #0
 8009412:	d0f0      	beq.n	80093f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d106      	bne.n	800942a <HAL_RCC_OscConfig+0x31a>
 800941c:	4b6f      	ldr	r3, [pc, #444]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 800941e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009420:	4a6e      	ldr	r2, [pc, #440]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 8009422:	f043 0301 	orr.w	r3, r3, #1
 8009426:	6713      	str	r3, [r2, #112]	; 0x70
 8009428:	e02d      	b.n	8009486 <HAL_RCC_OscConfig+0x376>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10c      	bne.n	800944c <HAL_RCC_OscConfig+0x33c>
 8009432:	4b6a      	ldr	r3, [pc, #424]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 8009434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009436:	4a69      	ldr	r2, [pc, #420]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 8009438:	f023 0301 	bic.w	r3, r3, #1
 800943c:	6713      	str	r3, [r2, #112]	; 0x70
 800943e:	4b67      	ldr	r3, [pc, #412]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 8009440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009442:	4a66      	ldr	r2, [pc, #408]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 8009444:	f023 0304 	bic.w	r3, r3, #4
 8009448:	6713      	str	r3, [r2, #112]	; 0x70
 800944a:	e01c      	b.n	8009486 <HAL_RCC_OscConfig+0x376>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	2b05      	cmp	r3, #5
 8009452:	d10c      	bne.n	800946e <HAL_RCC_OscConfig+0x35e>
 8009454:	4b61      	ldr	r3, [pc, #388]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 8009456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009458:	4a60      	ldr	r2, [pc, #384]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 800945a:	f043 0304 	orr.w	r3, r3, #4
 800945e:	6713      	str	r3, [r2, #112]	; 0x70
 8009460:	4b5e      	ldr	r3, [pc, #376]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 8009462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009464:	4a5d      	ldr	r2, [pc, #372]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 8009466:	f043 0301 	orr.w	r3, r3, #1
 800946a:	6713      	str	r3, [r2, #112]	; 0x70
 800946c:	e00b      	b.n	8009486 <HAL_RCC_OscConfig+0x376>
 800946e:	4b5b      	ldr	r3, [pc, #364]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 8009470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009472:	4a5a      	ldr	r2, [pc, #360]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 8009474:	f023 0301 	bic.w	r3, r3, #1
 8009478:	6713      	str	r3, [r2, #112]	; 0x70
 800947a:	4b58      	ldr	r3, [pc, #352]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 800947c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800947e:	4a57      	ldr	r2, [pc, #348]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 8009480:	f023 0304 	bic.w	r3, r3, #4
 8009484:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d015      	beq.n	80094ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800948e:	f7fe f92d 	bl	80076ec <HAL_GetTick>
 8009492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009494:	e00a      	b.n	80094ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009496:	f7fe f929 	bl	80076ec <HAL_GetTick>
 800949a:	4602      	mov	r2, r0
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	1ad3      	subs	r3, r2, r3
 80094a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d901      	bls.n	80094ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80094a8:	2303      	movs	r3, #3
 80094aa:	e0ce      	b.n	800964a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094ac:	4b4b      	ldr	r3, [pc, #300]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 80094ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094b0:	f003 0302 	and.w	r3, r3, #2
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d0ee      	beq.n	8009496 <HAL_RCC_OscConfig+0x386>
 80094b8:	e014      	b.n	80094e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094ba:	f7fe f917 	bl	80076ec <HAL_GetTick>
 80094be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094c0:	e00a      	b.n	80094d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094c2:	f7fe f913 	bl	80076ec <HAL_GetTick>
 80094c6:	4602      	mov	r2, r0
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d901      	bls.n	80094d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80094d4:	2303      	movs	r3, #3
 80094d6:	e0b8      	b.n	800964a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094d8:	4b40      	ldr	r3, [pc, #256]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 80094da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094dc:	f003 0302 	and.w	r3, r3, #2
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1ee      	bne.n	80094c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80094e4:	7dfb      	ldrb	r3, [r7, #23]
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d105      	bne.n	80094f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094ea:	4b3c      	ldr	r3, [pc, #240]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 80094ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ee:	4a3b      	ldr	r2, [pc, #236]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 80094f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f000 80a4 	beq.w	8009648 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009500:	4b36      	ldr	r3, [pc, #216]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	f003 030c 	and.w	r3, r3, #12
 8009508:	2b08      	cmp	r3, #8
 800950a:	d06b      	beq.n	80095e4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	2b02      	cmp	r3, #2
 8009512:	d149      	bne.n	80095a8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009514:	4b31      	ldr	r3, [pc, #196]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a30      	ldr	r2, [pc, #192]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 800951a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800951e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009520:	f7fe f8e4 	bl	80076ec <HAL_GetTick>
 8009524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009526:	e008      	b.n	800953a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009528:	f7fe f8e0 	bl	80076ec <HAL_GetTick>
 800952c:	4602      	mov	r2, r0
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	1ad3      	subs	r3, r2, r3
 8009532:	2b02      	cmp	r3, #2
 8009534:	d901      	bls.n	800953a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009536:	2303      	movs	r3, #3
 8009538:	e087      	b.n	800964a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800953a:	4b28      	ldr	r3, [pc, #160]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1f0      	bne.n	8009528 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	69da      	ldr	r2, [r3, #28]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	431a      	orrs	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009554:	019b      	lsls	r3, r3, #6
 8009556:	431a      	orrs	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800955c:	085b      	lsrs	r3, r3, #1
 800955e:	3b01      	subs	r3, #1
 8009560:	041b      	lsls	r3, r3, #16
 8009562:	431a      	orrs	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009568:	061b      	lsls	r3, r3, #24
 800956a:	4313      	orrs	r3, r2
 800956c:	4a1b      	ldr	r2, [pc, #108]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 800956e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009572:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009574:	4b19      	ldr	r3, [pc, #100]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a18      	ldr	r2, [pc, #96]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 800957a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800957e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009580:	f7fe f8b4 	bl	80076ec <HAL_GetTick>
 8009584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009586:	e008      	b.n	800959a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009588:	f7fe f8b0 	bl	80076ec <HAL_GetTick>
 800958c:	4602      	mov	r2, r0
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	2b02      	cmp	r3, #2
 8009594:	d901      	bls.n	800959a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009596:	2303      	movs	r3, #3
 8009598:	e057      	b.n	800964a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800959a:	4b10      	ldr	r3, [pc, #64]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d0f0      	beq.n	8009588 <HAL_RCC_OscConfig+0x478>
 80095a6:	e04f      	b.n	8009648 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095a8:	4b0c      	ldr	r3, [pc, #48]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a0b      	ldr	r2, [pc, #44]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 80095ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095b4:	f7fe f89a 	bl	80076ec <HAL_GetTick>
 80095b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095ba:	e008      	b.n	80095ce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095bc:	f7fe f896 	bl	80076ec <HAL_GetTick>
 80095c0:	4602      	mov	r2, r0
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d901      	bls.n	80095ce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80095ca:	2303      	movs	r3, #3
 80095cc:	e03d      	b.n	800964a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095ce:	4b03      	ldr	r3, [pc, #12]	; (80095dc <HAL_RCC_OscConfig+0x4cc>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d1f0      	bne.n	80095bc <HAL_RCC_OscConfig+0x4ac>
 80095da:	e035      	b.n	8009648 <HAL_RCC_OscConfig+0x538>
 80095dc:	40023800 	.word	0x40023800
 80095e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80095e4:	4b1b      	ldr	r3, [pc, #108]	; (8009654 <HAL_RCC_OscConfig+0x544>)
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d028      	beq.n	8009644 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d121      	bne.n	8009644 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800960a:	429a      	cmp	r2, r3
 800960c:	d11a      	bne.n	8009644 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009614:	4013      	ands	r3, r2
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800961a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800961c:	4293      	cmp	r3, r2
 800961e:	d111      	bne.n	8009644 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962a:	085b      	lsrs	r3, r3, #1
 800962c:	3b01      	subs	r3, #1
 800962e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009630:	429a      	cmp	r2, r3
 8009632:	d107      	bne.n	8009644 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009640:	429a      	cmp	r2, r3
 8009642:	d001      	beq.n	8009648 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	e000      	b.n	800964a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3718      	adds	r7, #24
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	40023800 	.word	0x40023800

08009658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009662:	2300      	movs	r3, #0
 8009664:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d101      	bne.n	8009670 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	e0d0      	b.n	8009812 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009670:	4b6a      	ldr	r3, [pc, #424]	; (800981c <HAL_RCC_ClockConfig+0x1c4>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 030f 	and.w	r3, r3, #15
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	429a      	cmp	r2, r3
 800967c:	d910      	bls.n	80096a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800967e:	4b67      	ldr	r3, [pc, #412]	; (800981c <HAL_RCC_ClockConfig+0x1c4>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f023 020f 	bic.w	r2, r3, #15
 8009686:	4965      	ldr	r1, [pc, #404]	; (800981c <HAL_RCC_ClockConfig+0x1c4>)
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	4313      	orrs	r3, r2
 800968c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800968e:	4b63      	ldr	r3, [pc, #396]	; (800981c <HAL_RCC_ClockConfig+0x1c4>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f003 030f 	and.w	r3, r3, #15
 8009696:	683a      	ldr	r2, [r7, #0]
 8009698:	429a      	cmp	r2, r3
 800969a:	d001      	beq.n	80096a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	e0b8      	b.n	8009812 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 0302 	and.w	r3, r3, #2
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d020      	beq.n	80096ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 0304 	and.w	r3, r3, #4
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d005      	beq.n	80096c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80096b8:	4b59      	ldr	r3, [pc, #356]	; (8009820 <HAL_RCC_ClockConfig+0x1c8>)
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	4a58      	ldr	r2, [pc, #352]	; (8009820 <HAL_RCC_ClockConfig+0x1c8>)
 80096be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80096c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 0308 	and.w	r3, r3, #8
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d005      	beq.n	80096dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80096d0:	4b53      	ldr	r3, [pc, #332]	; (8009820 <HAL_RCC_ClockConfig+0x1c8>)
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	4a52      	ldr	r2, [pc, #328]	; (8009820 <HAL_RCC_ClockConfig+0x1c8>)
 80096d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80096da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096dc:	4b50      	ldr	r3, [pc, #320]	; (8009820 <HAL_RCC_ClockConfig+0x1c8>)
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	494d      	ldr	r1, [pc, #308]	; (8009820 <HAL_RCC_ClockConfig+0x1c8>)
 80096ea:	4313      	orrs	r3, r2
 80096ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 0301 	and.w	r3, r3, #1
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d040      	beq.n	800977c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d107      	bne.n	8009712 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009702:	4b47      	ldr	r3, [pc, #284]	; (8009820 <HAL_RCC_ClockConfig+0x1c8>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800970a:	2b00      	cmp	r3, #0
 800970c:	d115      	bne.n	800973a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e07f      	b.n	8009812 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	2b02      	cmp	r3, #2
 8009718:	d107      	bne.n	800972a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800971a:	4b41      	ldr	r3, [pc, #260]	; (8009820 <HAL_RCC_ClockConfig+0x1c8>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009722:	2b00      	cmp	r3, #0
 8009724:	d109      	bne.n	800973a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e073      	b.n	8009812 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800972a:	4b3d      	ldr	r3, [pc, #244]	; (8009820 <HAL_RCC_ClockConfig+0x1c8>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 0302 	and.w	r3, r3, #2
 8009732:	2b00      	cmp	r3, #0
 8009734:	d101      	bne.n	800973a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e06b      	b.n	8009812 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800973a:	4b39      	ldr	r3, [pc, #228]	; (8009820 <HAL_RCC_ClockConfig+0x1c8>)
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	f023 0203 	bic.w	r2, r3, #3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	4936      	ldr	r1, [pc, #216]	; (8009820 <HAL_RCC_ClockConfig+0x1c8>)
 8009748:	4313      	orrs	r3, r2
 800974a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800974c:	f7fd ffce 	bl	80076ec <HAL_GetTick>
 8009750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009752:	e00a      	b.n	800976a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009754:	f7fd ffca 	bl	80076ec <HAL_GetTick>
 8009758:	4602      	mov	r2, r0
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009762:	4293      	cmp	r3, r2
 8009764:	d901      	bls.n	800976a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009766:	2303      	movs	r3, #3
 8009768:	e053      	b.n	8009812 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800976a:	4b2d      	ldr	r3, [pc, #180]	; (8009820 <HAL_RCC_ClockConfig+0x1c8>)
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f003 020c 	and.w	r2, r3, #12
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	429a      	cmp	r2, r3
 800977a:	d1eb      	bne.n	8009754 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800977c:	4b27      	ldr	r3, [pc, #156]	; (800981c <HAL_RCC_ClockConfig+0x1c4>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 030f 	and.w	r3, r3, #15
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	429a      	cmp	r2, r3
 8009788:	d210      	bcs.n	80097ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800978a:	4b24      	ldr	r3, [pc, #144]	; (800981c <HAL_RCC_ClockConfig+0x1c4>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f023 020f 	bic.w	r2, r3, #15
 8009792:	4922      	ldr	r1, [pc, #136]	; (800981c <HAL_RCC_ClockConfig+0x1c4>)
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	4313      	orrs	r3, r2
 8009798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800979a:	4b20      	ldr	r3, [pc, #128]	; (800981c <HAL_RCC_ClockConfig+0x1c4>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 030f 	and.w	r3, r3, #15
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d001      	beq.n	80097ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e032      	b.n	8009812 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 0304 	and.w	r3, r3, #4
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d008      	beq.n	80097ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80097b8:	4b19      	ldr	r3, [pc, #100]	; (8009820 <HAL_RCC_ClockConfig+0x1c8>)
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	4916      	ldr	r1, [pc, #88]	; (8009820 <HAL_RCC_ClockConfig+0x1c8>)
 80097c6:	4313      	orrs	r3, r2
 80097c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f003 0308 	and.w	r3, r3, #8
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d009      	beq.n	80097ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80097d6:	4b12      	ldr	r3, [pc, #72]	; (8009820 <HAL_RCC_ClockConfig+0x1c8>)
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	00db      	lsls	r3, r3, #3
 80097e4:	490e      	ldr	r1, [pc, #56]	; (8009820 <HAL_RCC_ClockConfig+0x1c8>)
 80097e6:	4313      	orrs	r3, r2
 80097e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80097ea:	f000 f821 	bl	8009830 <HAL_RCC_GetSysClockFreq>
 80097ee:	4602      	mov	r2, r0
 80097f0:	4b0b      	ldr	r3, [pc, #44]	; (8009820 <HAL_RCC_ClockConfig+0x1c8>)
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	091b      	lsrs	r3, r3, #4
 80097f6:	f003 030f 	and.w	r3, r3, #15
 80097fa:	490a      	ldr	r1, [pc, #40]	; (8009824 <HAL_RCC_ClockConfig+0x1cc>)
 80097fc:	5ccb      	ldrb	r3, [r1, r3]
 80097fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009802:	4a09      	ldr	r2, [pc, #36]	; (8009828 <HAL_RCC_ClockConfig+0x1d0>)
 8009804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009806:	4b09      	ldr	r3, [pc, #36]	; (800982c <HAL_RCC_ClockConfig+0x1d4>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4618      	mov	r0, r3
 800980c:	f7fb fdaa 	bl	8005364 <HAL_InitTick>

  return HAL_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	40023c00 	.word	0x40023c00
 8009820:	40023800 	.word	0x40023800
 8009824:	080180f0 	.word	0x080180f0
 8009828:	20000008 	.word	0x20000008
 800982c:	2000000c 	.word	0x2000000c

08009830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009834:	b090      	sub	sp, #64	; 0x40
 8009836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009838:	2300      	movs	r3, #0
 800983a:	637b      	str	r3, [r7, #52]	; 0x34
 800983c:	2300      	movs	r3, #0
 800983e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009840:	2300      	movs	r3, #0
 8009842:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8009844:	2300      	movs	r3, #0
 8009846:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009848:	4b59      	ldr	r3, [pc, #356]	; (80099b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	f003 030c 	and.w	r3, r3, #12
 8009850:	2b08      	cmp	r3, #8
 8009852:	d00d      	beq.n	8009870 <HAL_RCC_GetSysClockFreq+0x40>
 8009854:	2b08      	cmp	r3, #8
 8009856:	f200 80a1 	bhi.w	800999c <HAL_RCC_GetSysClockFreq+0x16c>
 800985a:	2b00      	cmp	r3, #0
 800985c:	d002      	beq.n	8009864 <HAL_RCC_GetSysClockFreq+0x34>
 800985e:	2b04      	cmp	r3, #4
 8009860:	d003      	beq.n	800986a <HAL_RCC_GetSysClockFreq+0x3a>
 8009862:	e09b      	b.n	800999c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009864:	4b53      	ldr	r3, [pc, #332]	; (80099b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8009866:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009868:	e09b      	b.n	80099a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800986a:	4b53      	ldr	r3, [pc, #332]	; (80099b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800986c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800986e:	e098      	b.n	80099a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009870:	4b4f      	ldr	r3, [pc, #316]	; (80099b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009878:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800987a:	4b4d      	ldr	r3, [pc, #308]	; (80099b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009882:	2b00      	cmp	r3, #0
 8009884:	d028      	beq.n	80098d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009886:	4b4a      	ldr	r3, [pc, #296]	; (80099b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	099b      	lsrs	r3, r3, #6
 800988c:	2200      	movs	r2, #0
 800988e:	623b      	str	r3, [r7, #32]
 8009890:	627a      	str	r2, [r7, #36]	; 0x24
 8009892:	6a3b      	ldr	r3, [r7, #32]
 8009894:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009898:	2100      	movs	r1, #0
 800989a:	4b47      	ldr	r3, [pc, #284]	; (80099b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800989c:	fb03 f201 	mul.w	r2, r3, r1
 80098a0:	2300      	movs	r3, #0
 80098a2:	fb00 f303 	mul.w	r3, r0, r3
 80098a6:	4413      	add	r3, r2
 80098a8:	4a43      	ldr	r2, [pc, #268]	; (80099b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80098aa:	fba0 1202 	umull	r1, r2, r0, r2
 80098ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80098b0:	460a      	mov	r2, r1
 80098b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80098b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098b6:	4413      	add	r3, r2
 80098b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098bc:	2200      	movs	r2, #0
 80098be:	61bb      	str	r3, [r7, #24]
 80098c0:	61fa      	str	r2, [r7, #28]
 80098c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80098c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80098ca:	f7f7 fa55 	bl	8000d78 <__aeabi_uldivmod>
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	4613      	mov	r3, r2
 80098d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098d6:	e053      	b.n	8009980 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80098d8:	4b35      	ldr	r3, [pc, #212]	; (80099b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	099b      	lsrs	r3, r3, #6
 80098de:	2200      	movs	r2, #0
 80098e0:	613b      	str	r3, [r7, #16]
 80098e2:	617a      	str	r2, [r7, #20]
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80098ea:	f04f 0b00 	mov.w	fp, #0
 80098ee:	4652      	mov	r2, sl
 80098f0:	465b      	mov	r3, fp
 80098f2:	f04f 0000 	mov.w	r0, #0
 80098f6:	f04f 0100 	mov.w	r1, #0
 80098fa:	0159      	lsls	r1, r3, #5
 80098fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009900:	0150      	lsls	r0, r2, #5
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	ebb2 080a 	subs.w	r8, r2, sl
 800990a:	eb63 090b 	sbc.w	r9, r3, fp
 800990e:	f04f 0200 	mov.w	r2, #0
 8009912:	f04f 0300 	mov.w	r3, #0
 8009916:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800991a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800991e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009922:	ebb2 0408 	subs.w	r4, r2, r8
 8009926:	eb63 0509 	sbc.w	r5, r3, r9
 800992a:	f04f 0200 	mov.w	r2, #0
 800992e:	f04f 0300 	mov.w	r3, #0
 8009932:	00eb      	lsls	r3, r5, #3
 8009934:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009938:	00e2      	lsls	r2, r4, #3
 800993a:	4614      	mov	r4, r2
 800993c:	461d      	mov	r5, r3
 800993e:	eb14 030a 	adds.w	r3, r4, sl
 8009942:	603b      	str	r3, [r7, #0]
 8009944:	eb45 030b 	adc.w	r3, r5, fp
 8009948:	607b      	str	r3, [r7, #4]
 800994a:	f04f 0200 	mov.w	r2, #0
 800994e:	f04f 0300 	mov.w	r3, #0
 8009952:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009956:	4629      	mov	r1, r5
 8009958:	028b      	lsls	r3, r1, #10
 800995a:	4621      	mov	r1, r4
 800995c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009960:	4621      	mov	r1, r4
 8009962:	028a      	lsls	r2, r1, #10
 8009964:	4610      	mov	r0, r2
 8009966:	4619      	mov	r1, r3
 8009968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800996a:	2200      	movs	r2, #0
 800996c:	60bb      	str	r3, [r7, #8]
 800996e:	60fa      	str	r2, [r7, #12]
 8009970:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009974:	f7f7 fa00 	bl	8000d78 <__aeabi_uldivmod>
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	4613      	mov	r3, r2
 800997e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009980:	4b0b      	ldr	r3, [pc, #44]	; (80099b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	0c1b      	lsrs	r3, r3, #16
 8009986:	f003 0303 	and.w	r3, r3, #3
 800998a:	3301      	adds	r3, #1
 800998c:	005b      	lsls	r3, r3, #1
 800998e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8009990:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009994:	fbb2 f3f3 	udiv	r3, r2, r3
 8009998:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800999a:	e002      	b.n	80099a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800999c:	4b05      	ldr	r3, [pc, #20]	; (80099b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800999e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80099a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80099a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3740      	adds	r7, #64	; 0x40
 80099a8:	46bd      	mov	sp, r7
 80099aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099ae:	bf00      	nop
 80099b0:	40023800 	.word	0x40023800
 80099b4:	00f42400 	.word	0x00f42400
 80099b8:	017d7840 	.word	0x017d7840

080099bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099bc:	b480      	push	{r7}
 80099be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80099c0:	4b03      	ldr	r3, [pc, #12]	; (80099d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80099c2:	681b      	ldr	r3, [r3, #0]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	20000008 	.word	0x20000008

080099d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80099d8:	f7ff fff0 	bl	80099bc <HAL_RCC_GetHCLKFreq>
 80099dc:	4602      	mov	r2, r0
 80099de:	4b05      	ldr	r3, [pc, #20]	; (80099f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	0a9b      	lsrs	r3, r3, #10
 80099e4:	f003 0307 	and.w	r3, r3, #7
 80099e8:	4903      	ldr	r1, [pc, #12]	; (80099f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80099ea:	5ccb      	ldrb	r3, [r1, r3]
 80099ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	40023800 	.word	0x40023800
 80099f8:	08018100 	.word	0x08018100

080099fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009a00:	f7ff ffdc 	bl	80099bc <HAL_RCC_GetHCLKFreq>
 8009a04:	4602      	mov	r2, r0
 8009a06:	4b05      	ldr	r3, [pc, #20]	; (8009a1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	0b5b      	lsrs	r3, r3, #13
 8009a0c:	f003 0307 	and.w	r3, r3, #7
 8009a10:	4903      	ldr	r1, [pc, #12]	; (8009a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a12:	5ccb      	ldrb	r3, [r1, r3]
 8009a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	40023800 	.word	0x40023800
 8009a20:	08018100 	.word	0x08018100

08009a24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	220f      	movs	r2, #15
 8009a32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009a34:	4b12      	ldr	r3, [pc, #72]	; (8009a80 <HAL_RCC_GetClockConfig+0x5c>)
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f003 0203 	and.w	r2, r3, #3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009a40:	4b0f      	ldr	r3, [pc, #60]	; (8009a80 <HAL_RCC_GetClockConfig+0x5c>)
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009a4c:	4b0c      	ldr	r3, [pc, #48]	; (8009a80 <HAL_RCC_GetClockConfig+0x5c>)
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009a58:	4b09      	ldr	r3, [pc, #36]	; (8009a80 <HAL_RCC_GetClockConfig+0x5c>)
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	08db      	lsrs	r3, r3, #3
 8009a5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009a66:	4b07      	ldr	r3, [pc, #28]	; (8009a84 <HAL_RCC_GetClockConfig+0x60>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f003 020f 	and.w	r2, r3, #15
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	601a      	str	r2, [r3, #0]
}
 8009a72:	bf00      	nop
 8009a74:	370c      	adds	r7, #12
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	40023800 	.word	0x40023800
 8009a84:	40023c00 	.word	0x40023c00

08009a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b088      	sub	sp, #32
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009a90:	2300      	movs	r3, #0
 8009a92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009a94:	2300      	movs	r3, #0
 8009a96:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 0301 	and.w	r3, r3, #1
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d012      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009aac:	4b65      	ldr	r3, [pc, #404]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	4a64      	ldr	r2, [pc, #400]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009ab2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009ab6:	6093      	str	r3, [r2, #8]
 8009ab8:	4b62      	ldr	r3, [pc, #392]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009aba:	689a      	ldr	r2, [r3, #8]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac0:	4960      	ldr	r1, [pc, #384]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d101      	bne.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d017      	beq.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009ade:	4b59      	ldr	r3, [pc, #356]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ae4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aec:	4955      	ldr	r1, [pc, #340]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009aee:	4313      	orrs	r3, r2
 8009af0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009afc:	d101      	bne.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8009afe:	2301      	movs	r3, #1
 8009b00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d101      	bne.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d017      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009b1a:	4b4a      	ldr	r3, [pc, #296]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b28:	4946      	ldr	r1, [pc, #280]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b38:	d101      	bne.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d101      	bne.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8009b46:	2301      	movs	r3, #1
 8009b48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f003 0320 	and.w	r3, r3, #32
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f000 808b 	beq.w	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009b58:	4b3a      	ldr	r3, [pc, #232]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5c:	4a39      	ldr	r2, [pc, #228]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b62:	6413      	str	r3, [r2, #64]	; 0x40
 8009b64:	4b37      	ldr	r3, [pc, #220]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b6c:	60fb      	str	r3, [r7, #12]
 8009b6e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009b70:	4b35      	ldr	r3, [pc, #212]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a34      	ldr	r2, [pc, #208]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b7c:	f7fd fdb6 	bl	80076ec <HAL_GetTick>
 8009b80:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009b82:	e008      	b.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b84:	f7fd fdb2 	bl	80076ec <HAL_GetTick>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	1ad3      	subs	r3, r2, r3
 8009b8e:	2b64      	cmp	r3, #100	; 0x64
 8009b90:	d901      	bls.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009b92:	2303      	movs	r3, #3
 8009b94:	e2bc      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009b96:	4b2c      	ldr	r3, [pc, #176]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d0f0      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009ba2:	4b28      	ldr	r3, [pc, #160]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009baa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d035      	beq.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bba:	693a      	ldr	r2, [r7, #16]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d02e      	beq.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009bc0:	4b20      	ldr	r3, [pc, #128]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bc8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009bca:	4b1e      	ldr	r3, [pc, #120]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bce:	4a1d      	ldr	r2, [pc, #116]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bd4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009bd6:	4b1b      	ldr	r3, [pc, #108]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bda:	4a1a      	ldr	r2, [pc, #104]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009be0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009be2:	4a18      	ldr	r2, [pc, #96]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009be8:	4b16      	ldr	r3, [pc, #88]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bec:	f003 0301 	and.w	r3, r3, #1
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d114      	bne.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bf4:	f7fd fd7a 	bl	80076ec <HAL_GetTick>
 8009bf8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bfa:	e00a      	b.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009bfc:	f7fd fd76 	bl	80076ec <HAL_GetTick>
 8009c00:	4602      	mov	r2, r0
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	1ad3      	subs	r3, r2, r3
 8009c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d901      	bls.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8009c0e:	2303      	movs	r3, #3
 8009c10:	e27e      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c12:	4b0c      	ldr	r3, [pc, #48]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c16:	f003 0302 	and.w	r3, r3, #2
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d0ee      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c2a:	d111      	bne.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8009c2c:	4b05      	ldr	r3, [pc, #20]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8009c38:	4b04      	ldr	r3, [pc, #16]	; (8009c4c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009c3a:	400b      	ands	r3, r1
 8009c3c:	4901      	ldr	r1, [pc, #4]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	608b      	str	r3, [r1, #8]
 8009c42:	e00b      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009c44:	40023800 	.word	0x40023800
 8009c48:	40007000 	.word	0x40007000
 8009c4c:	0ffffcff 	.word	0x0ffffcff
 8009c50:	4ba4      	ldr	r3, [pc, #656]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	4aa3      	ldr	r2, [pc, #652]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009c56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009c5a:	6093      	str	r3, [r2, #8]
 8009c5c:	4ba1      	ldr	r3, [pc, #644]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009c5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c68:	499e      	ldr	r1, [pc, #632]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 0310 	and.w	r3, r3, #16
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d010      	beq.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009c7a:	4b9a      	ldr	r3, [pc, #616]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c80:	4a98      	ldr	r2, [pc, #608]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009c8a:	4b96      	ldr	r3, [pc, #600]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009c8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c94:	4993      	ldr	r1, [pc, #588]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009c96:	4313      	orrs	r3, r2
 8009c98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00a      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009ca8:	4b8e      	ldr	r3, [pc, #568]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cb6:	498b      	ldr	r1, [pc, #556]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00a      	beq.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009cca:	4b86      	ldr	r3, [pc, #536]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cd8:	4982      	ldr	r1, [pc, #520]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d00a      	beq.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009cec:	4b7d      	ldr	r3, [pc, #500]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cfa:	497a      	ldr	r1, [pc, #488]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00a      	beq.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009d0e:	4b75      	ldr	r3, [pc, #468]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d14:	f023 0203 	bic.w	r2, r3, #3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d1c:	4971      	ldr	r1, [pc, #452]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00a      	beq.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009d30:	4b6c      	ldr	r3, [pc, #432]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d36:	f023 020c 	bic.w	r2, r3, #12
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3e:	4969      	ldr	r1, [pc, #420]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009d40:	4313      	orrs	r3, r2
 8009d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00a      	beq.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009d52:	4b64      	ldr	r3, [pc, #400]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d60:	4960      	ldr	r1, [pc, #384]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009d62:	4313      	orrs	r3, r2
 8009d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00a      	beq.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009d74:	4b5b      	ldr	r3, [pc, #364]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d82:	4958      	ldr	r1, [pc, #352]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009d84:	4313      	orrs	r3, r2
 8009d86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00a      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009d96:	4b53      	ldr	r3, [pc, #332]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009da4:	494f      	ldr	r1, [pc, #316]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009da6:	4313      	orrs	r3, r2
 8009da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00a      	beq.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009db8:	4b4a      	ldr	r3, [pc, #296]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dc6:	4947      	ldr	r1, [pc, #284]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d00a      	beq.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009dda:	4b42      	ldr	r3, [pc, #264]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009de0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009de8:	493e      	ldr	r1, [pc, #248]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009dea:	4313      	orrs	r3, r2
 8009dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00a      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009dfc:	4b39      	ldr	r3, [pc, #228]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e0a:	4936      	ldr	r1, [pc, #216]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d011      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009e1e:	4b31      	ldr	r3, [pc, #196]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e24:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e2c:	492d      	ldr	r1, [pc, #180]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e3c:	d101      	bne.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00a      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009e4e:	4b25      	ldr	r3, [pc, #148]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e54:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e5c:	4921      	ldr	r1, [pc, #132]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00a      	beq.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009e70:	4b1c      	ldr	r3, [pc, #112]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e7e:	4919      	ldr	r1, [pc, #100]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009e80:	4313      	orrs	r3, r2
 8009e82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00a      	beq.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8009e92:	4b14      	ldr	r3, [pc, #80]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e98:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ea0:	4910      	ldr	r1, [pc, #64]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d006      	beq.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x434>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f000 809d 	beq.w	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009ebc:	4b09      	ldr	r3, [pc, #36]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a08      	ldr	r2, [pc, #32]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009ec2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ec6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ec8:	f7fd fc10 	bl	80076ec <HAL_GetTick>
 8009ecc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009ece:	e00b      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009ed0:	f7fd fc0c 	bl	80076ec <HAL_GetTick>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	1ad3      	subs	r3, r2, r3
 8009eda:	2b64      	cmp	r3, #100	; 0x64
 8009edc:	d904      	bls.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e116      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8009ee2:	bf00      	nop
 8009ee4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009ee8:	4b8b      	ldr	r3, [pc, #556]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1ed      	bne.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f003 0301 	and.w	r3, r3, #1
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d017      	beq.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d113      	bne.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009f08:	4b83      	ldr	r3, [pc, #524]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8009f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f0e:	0e1b      	lsrs	r3, r3, #24
 8009f10:	f003 030f 	and.w	r3, r3, #15
 8009f14:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	019a      	lsls	r2, r3, #6
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	061b      	lsls	r3, r3, #24
 8009f20:	431a      	orrs	r2, r3
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	071b      	lsls	r3, r3, #28
 8009f28:	497b      	ldr	r1, [pc, #492]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d004      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f44:	d00a      	beq.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d024      	beq.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f5a:	d11f      	bne.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009f5c:	4b6e      	ldr	r3, [pc, #440]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8009f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f62:	0f1b      	lsrs	r3, r3, #28
 8009f64:	f003 0307 	and.w	r3, r3, #7
 8009f68:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	019a      	lsls	r2, r3, #6
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	061b      	lsls	r3, r3, #24
 8009f76:	431a      	orrs	r2, r3
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	071b      	lsls	r3, r3, #28
 8009f7c:	4966      	ldr	r1, [pc, #408]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009f84:	4b64      	ldr	r3, [pc, #400]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8009f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f8a:	f023 021f 	bic.w	r2, r3, #31
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	69db      	ldr	r3, [r3, #28]
 8009f92:	3b01      	subs	r3, #1
 8009f94:	4960      	ldr	r1, [pc, #384]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8009f96:	4313      	orrs	r3, r2
 8009f98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00d      	beq.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	019a      	lsls	r2, r3, #6
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	061b      	lsls	r3, r3, #24
 8009fb4:	431a      	orrs	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	071b      	lsls	r3, r3, #28
 8009fbc:	4956      	ldr	r1, [pc, #344]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009fc4:	4b54      	ldr	r3, [pc, #336]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a53      	ldr	r2, [pc, #332]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8009fca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009fce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fd0:	f7fd fb8c 	bl	80076ec <HAL_GetTick>
 8009fd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009fd6:	e008      	b.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009fd8:	f7fd fb88 	bl	80076ec <HAL_GetTick>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	2b64      	cmp	r3, #100	; 0x64
 8009fe4:	d901      	bls.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	e092      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009fea:	4b4b      	ldr	r3, [pc, #300]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d0f0      	beq.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	f040 8088 	bne.w	800a10e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009ffe:	4b46      	ldr	r3, [pc, #280]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a45      	ldr	r2, [pc, #276]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a00a:	f7fd fb6f 	bl	80076ec <HAL_GetTick>
 800a00e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a010:	e008      	b.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a012:	f7fd fb6b 	bl	80076ec <HAL_GetTick>
 800a016:	4602      	mov	r2, r0
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	1ad3      	subs	r3, r2, r3
 800a01c:	2b64      	cmp	r3, #100	; 0x64
 800a01e:	d901      	bls.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a020:	2303      	movs	r3, #3
 800a022:	e075      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a024:	4b3c      	ldr	r3, [pc, #240]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a02c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a030:	d0ef      	beq.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d003      	beq.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a042:	2b00      	cmp	r3, #0
 800a044:	d009      	beq.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d024      	beq.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a056:	2b00      	cmp	r3, #0
 800a058:	d120      	bne.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a05a:	4b2f      	ldr	r3, [pc, #188]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a060:	0c1b      	lsrs	r3, r3, #16
 800a062:	f003 0303 	and.w	r3, r3, #3
 800a066:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	019a      	lsls	r2, r3, #6
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	041b      	lsls	r3, r3, #16
 800a072:	431a      	orrs	r2, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	695b      	ldr	r3, [r3, #20]
 800a078:	061b      	lsls	r3, r3, #24
 800a07a:	4927      	ldr	r1, [pc, #156]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a07c:	4313      	orrs	r3, r2
 800a07e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a082:	4b25      	ldr	r3, [pc, #148]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a088:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a1b      	ldr	r3, [r3, #32]
 800a090:	3b01      	subs	r3, #1
 800a092:	021b      	lsls	r3, r3, #8
 800a094:	4920      	ldr	r1, [pc, #128]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a096:	4313      	orrs	r3, r2
 800a098:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d018      	beq.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x652>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0b0:	d113      	bne.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a0b2:	4b19      	ldr	r3, [pc, #100]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a0b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0b8:	0e1b      	lsrs	r3, r3, #24
 800a0ba:	f003 030f 	and.w	r3, r3, #15
 800a0be:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	019a      	lsls	r2, r3, #6
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	041b      	lsls	r3, r3, #16
 800a0cc:	431a      	orrs	r2, r3
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	061b      	lsls	r3, r3, #24
 800a0d2:	4911      	ldr	r1, [pc, #68]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a0da:	4b0f      	ldr	r3, [pc, #60]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a0e      	ldr	r2, [pc, #56]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a0e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0e6:	f7fd fb01 	bl	80076ec <HAL_GetTick>
 800a0ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a0ec:	e008      	b.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a0ee:	f7fd fafd 	bl	80076ec <HAL_GetTick>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	2b64      	cmp	r3, #100	; 0x64
 800a0fa:	d901      	bls.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	e007      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a100:	4b05      	ldr	r3, [pc, #20]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a10c:	d1ef      	bne.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3720      	adds	r7, #32
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	40023800 	.word	0x40023800

0800a11c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d101      	bne.n	800a12e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e09d      	b.n	800a26a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a132:	2b00      	cmp	r3, #0
 800a134:	d108      	bne.n	800a148 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a13e:	d009      	beq.n	800a154 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	61da      	str	r2, [r3, #28]
 800a146:	e005      	b.n	800a154 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a160:	b2db      	uxtb	r3, r3
 800a162:	2b00      	cmp	r3, #0
 800a164:	d106      	bne.n	800a174 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7fa fea8 	bl	8004ec4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2202      	movs	r2, #2
 800a178:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a18a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a194:	d902      	bls.n	800a19c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a196:	2300      	movs	r3, #0
 800a198:	60fb      	str	r3, [r7, #12]
 800a19a:	e002      	b.n	800a1a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a19c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a1aa:	d007      	beq.n	800a1bc <HAL_SPI_Init+0xa0>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1b4:	d002      	beq.n	800a1bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a1cc:	431a      	orrs	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	f003 0302 	and.w	r3, r3, #2
 800a1d6:	431a      	orrs	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	695b      	ldr	r3, [r3, #20]
 800a1dc:	f003 0301 	and.w	r3, r3, #1
 800a1e0:	431a      	orrs	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	699b      	ldr	r3, [r3, #24]
 800a1e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1ea:	431a      	orrs	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	69db      	ldr	r3, [r3, #28]
 800a1f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1f4:	431a      	orrs	r2, r3
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1fe:	ea42 0103 	orr.w	r1, r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a206:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	430a      	orrs	r2, r1
 800a210:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	699b      	ldr	r3, [r3, #24]
 800a216:	0c1b      	lsrs	r3, r3, #16
 800a218:	f003 0204 	and.w	r2, r3, #4
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a220:	f003 0310 	and.w	r3, r3, #16
 800a224:	431a      	orrs	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a22a:	f003 0308 	and.w	r3, r3, #8
 800a22e:	431a      	orrs	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a238:	ea42 0103 	orr.w	r1, r2, r3
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	430a      	orrs	r2, r1
 800a248:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	69da      	ldr	r2, [r3, #28]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a258:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a272:	b580      	push	{r7, lr}
 800a274:	b088      	sub	sp, #32
 800a276:	af00      	add	r7, sp, #0
 800a278:	60f8      	str	r0, [r7, #12]
 800a27a:	60b9      	str	r1, [r7, #8]
 800a27c:	603b      	str	r3, [r7, #0]
 800a27e:	4613      	mov	r3, r2
 800a280:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d101      	bne.n	800a294 <HAL_SPI_Transmit+0x22>
 800a290:	2302      	movs	r3, #2
 800a292:	e158      	b.n	800a546 <HAL_SPI_Transmit+0x2d4>
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2201      	movs	r2, #1
 800a298:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a29c:	f7fd fa26 	bl	80076ec <HAL_GetTick>
 800a2a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a2a2:	88fb      	ldrh	r3, [r7, #6]
 800a2a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d002      	beq.n	800a2b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a2b6:	e13d      	b.n	800a534 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d002      	beq.n	800a2c4 <HAL_SPI_Transmit+0x52>
 800a2be:	88fb      	ldrh	r3, [r7, #6]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d102      	bne.n	800a2ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a2c8:	e134      	b.n	800a534 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2203      	movs	r2, #3
 800a2ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	88fa      	ldrh	r2, [r7, #6]
 800a2e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	88fa      	ldrh	r2, [r7, #6]
 800a2e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2200      	movs	r2, #0
 800a30a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a314:	d10f      	bne.n	800a336 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a324:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a334:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a340:	2b40      	cmp	r3, #64	; 0x40
 800a342:	d007      	beq.n	800a354 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a352:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a35c:	d94b      	bls.n	800a3f6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d002      	beq.n	800a36c <HAL_SPI_Transmit+0xfa>
 800a366:	8afb      	ldrh	r3, [r7, #22]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d13e      	bne.n	800a3ea <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a370:	881a      	ldrh	r2, [r3, #0]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37c:	1c9a      	adds	r2, r3, #2
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a386:	b29b      	uxth	r3, r3
 800a388:	3b01      	subs	r3, #1
 800a38a:	b29a      	uxth	r2, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a390:	e02b      	b.n	800a3ea <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	f003 0302 	and.w	r3, r3, #2
 800a39c:	2b02      	cmp	r3, #2
 800a39e:	d112      	bne.n	800a3c6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a4:	881a      	ldrh	r2, [r3, #0]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b0:	1c9a      	adds	r2, r3, #2
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	b29a      	uxth	r2, r3
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a3c4:	e011      	b.n	800a3ea <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3c6:	f7fd f991 	bl	80076ec <HAL_GetTick>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	683a      	ldr	r2, [r7, #0]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d803      	bhi.n	800a3de <HAL_SPI_Transmit+0x16c>
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3dc:	d102      	bne.n	800a3e4 <HAL_SPI_Transmit+0x172>
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d102      	bne.n	800a3ea <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a3e8:	e0a4      	b.n	800a534 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1ce      	bne.n	800a392 <HAL_SPI_Transmit+0x120>
 800a3f4:	e07c      	b.n	800a4f0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d002      	beq.n	800a404 <HAL_SPI_Transmit+0x192>
 800a3fe:	8afb      	ldrh	r3, [r7, #22]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d170      	bne.n	800a4e6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a408:	b29b      	uxth	r3, r3
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d912      	bls.n	800a434 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a412:	881a      	ldrh	r2, [r3, #0]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a41e:	1c9a      	adds	r2, r3, #2
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a428:	b29b      	uxth	r3, r3
 800a42a:	3b02      	subs	r3, #2
 800a42c:	b29a      	uxth	r2, r3
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a432:	e058      	b.n	800a4e6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	330c      	adds	r3, #12
 800a43e:	7812      	ldrb	r2, [r2, #0]
 800a440:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a446:	1c5a      	adds	r2, r3, #1
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a450:	b29b      	uxth	r3, r3
 800a452:	3b01      	subs	r3, #1
 800a454:	b29a      	uxth	r2, r3
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a45a:	e044      	b.n	800a4e6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	f003 0302 	and.w	r3, r3, #2
 800a466:	2b02      	cmp	r3, #2
 800a468:	d12b      	bne.n	800a4c2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a46e:	b29b      	uxth	r3, r3
 800a470:	2b01      	cmp	r3, #1
 800a472:	d912      	bls.n	800a49a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a478:	881a      	ldrh	r2, [r3, #0]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a484:	1c9a      	adds	r2, r3, #2
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a48e:	b29b      	uxth	r3, r3
 800a490:	3b02      	subs	r3, #2
 800a492:	b29a      	uxth	r2, r3
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a498:	e025      	b.n	800a4e6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	330c      	adds	r3, #12
 800a4a4:	7812      	ldrb	r2, [r2, #0]
 800a4a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ac:	1c5a      	adds	r2, r3, #1
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a4c0:	e011      	b.n	800a4e6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4c2:	f7fd f913 	bl	80076ec <HAL_GetTick>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	683a      	ldr	r2, [r7, #0]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d803      	bhi.n	800a4da <HAL_SPI_Transmit+0x268>
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d8:	d102      	bne.n	800a4e0 <HAL_SPI_Transmit+0x26e>
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d102      	bne.n	800a4e6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800a4e0:	2303      	movs	r3, #3
 800a4e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a4e4:	e026      	b.n	800a534 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1b5      	bne.n	800a45c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a4f0:	69ba      	ldr	r2, [r7, #24]
 800a4f2:	6839      	ldr	r1, [r7, #0]
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f001 f8dd 	bl	800b6b4 <SPI_EndRxTxTransaction>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d002      	beq.n	800a506 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2220      	movs	r2, #32
 800a504:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d10a      	bne.n	800a524 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a50e:	2300      	movs	r3, #0
 800a510:	613b      	str	r3, [r7, #16]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	613b      	str	r3, [r7, #16]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	613b      	str	r3, [r7, #16]
 800a522:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d002      	beq.n	800a532 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	77fb      	strb	r3, [r7, #31]
 800a530:	e000      	b.n	800a534 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800a532:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a544:	7ffb      	ldrb	r3, [r7, #31]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3720      	adds	r7, #32
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b088      	sub	sp, #32
 800a552:	af02      	add	r7, sp, #8
 800a554:	60f8      	str	r0, [r7, #12]
 800a556:	60b9      	str	r1, [r7, #8]
 800a558:	603b      	str	r3, [r7, #0]
 800a55a:	4613      	mov	r3, r2
 800a55c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a55e:	2300      	movs	r3, #0
 800a560:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a56a:	d112      	bne.n	800a592 <HAL_SPI_Receive+0x44>
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10e      	bne.n	800a592 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2204      	movs	r2, #4
 800a578:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a57c:	88fa      	ldrh	r2, [r7, #6]
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	4613      	mov	r3, r2
 800a584:	68ba      	ldr	r2, [r7, #8]
 800a586:	68b9      	ldr	r1, [r7, #8]
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f000 f910 	bl	800a7ae <HAL_SPI_TransmitReceive>
 800a58e:	4603      	mov	r3, r0
 800a590:	e109      	b.n	800a7a6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d101      	bne.n	800a5a0 <HAL_SPI_Receive+0x52>
 800a59c:	2302      	movs	r3, #2
 800a59e:	e102      	b.n	800a7a6 <HAL_SPI_Receive+0x258>
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a5a8:	f7fd f8a0 	bl	80076ec <HAL_GetTick>
 800a5ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d002      	beq.n	800a5c0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a5ba:	2302      	movs	r3, #2
 800a5bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a5be:	e0e9      	b.n	800a794 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d002      	beq.n	800a5cc <HAL_SPI_Receive+0x7e>
 800a5c6:	88fb      	ldrh	r3, [r7, #6]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d102      	bne.n	800a5d2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a5d0:	e0e0      	b.n	800a794 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2204      	movs	r2, #4
 800a5d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	88fa      	ldrh	r2, [r7, #6]
 800a5ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	88fa      	ldrh	r2, [r7, #6]
 800a5f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2200      	movs	r2, #0
 800a600:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2200      	movs	r2, #0
 800a606:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2200      	movs	r2, #0
 800a612:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a61c:	d908      	bls.n	800a630 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	685a      	ldr	r2, [r3, #4]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a62c:	605a      	str	r2, [r3, #4]
 800a62e:	e007      	b.n	800a640 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	685a      	ldr	r2, [r3, #4]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a63e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a648:	d10f      	bne.n	800a66a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a658:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a668:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a674:	2b40      	cmp	r3, #64	; 0x40
 800a676:	d007      	beq.n	800a688 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a686:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	68db      	ldr	r3, [r3, #12]
 800a68c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a690:	d867      	bhi.n	800a762 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a692:	e030      	b.n	800a6f6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	f003 0301 	and.w	r3, r3, #1
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d117      	bne.n	800a6d2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f103 020c 	add.w	r2, r3, #12
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ae:	7812      	ldrb	r2, [r2, #0]
 800a6b0:	b2d2      	uxtb	r2, r2
 800a6b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b8:	1c5a      	adds	r2, r3, #1
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	3b01      	subs	r3, #1
 800a6c8:	b29a      	uxth	r2, r3
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a6d0:	e011      	b.n	800a6f6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6d2:	f7fd f80b 	bl	80076ec <HAL_GetTick>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	1ad3      	subs	r3, r2, r3
 800a6dc:	683a      	ldr	r2, [r7, #0]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d803      	bhi.n	800a6ea <HAL_SPI_Receive+0x19c>
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e8:	d102      	bne.n	800a6f0 <HAL_SPI_Receive+0x1a2>
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d102      	bne.n	800a6f6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a6f4:	e04e      	b.n	800a794 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d1c8      	bne.n	800a694 <HAL_SPI_Receive+0x146>
 800a702:	e034      	b.n	800a76e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	f003 0301 	and.w	r3, r3, #1
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d115      	bne.n	800a73e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	68da      	ldr	r2, [r3, #12]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71c:	b292      	uxth	r2, r2
 800a71e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a724:	1c9a      	adds	r2, r3, #2
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a730:	b29b      	uxth	r3, r3
 800a732:	3b01      	subs	r3, #1
 800a734:	b29a      	uxth	r2, r3
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a73c:	e011      	b.n	800a762 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a73e:	f7fc ffd5 	bl	80076ec <HAL_GetTick>
 800a742:	4602      	mov	r2, r0
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	1ad3      	subs	r3, r2, r3
 800a748:	683a      	ldr	r2, [r7, #0]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d803      	bhi.n	800a756 <HAL_SPI_Receive+0x208>
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a754:	d102      	bne.n	800a75c <HAL_SPI_Receive+0x20e>
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d102      	bne.n	800a762 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800a75c:	2303      	movs	r3, #3
 800a75e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a760:	e018      	b.n	800a794 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a768:	b29b      	uxth	r3, r3
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d1ca      	bne.n	800a704 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a76e:	693a      	ldr	r2, [r7, #16]
 800a770:	6839      	ldr	r1, [r7, #0]
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f000 ff22 	bl	800b5bc <SPI_EndRxTransaction>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d002      	beq.n	800a784 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2220      	movs	r2, #32
 800a782:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d002      	beq.n	800a792 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	75fb      	strb	r3, [r7, #23]
 800a790:	e000      	b.n	800a794 <HAL_SPI_Receive+0x246>
  }

error :
 800a792:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2201      	movs	r2, #1
 800a798:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a7a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3718      	adds	r7, #24
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b08a      	sub	sp, #40	; 0x28
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	60f8      	str	r0, [r7, #12]
 800a7b6:	60b9      	str	r1, [r7, #8]
 800a7b8:	607a      	str	r2, [r7, #4]
 800a7ba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d101      	bne.n	800a7d4 <HAL_SPI_TransmitReceive+0x26>
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	e1fb      	b.n	800abcc <HAL_SPI_TransmitReceive+0x41e>
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a7dc:	f7fc ff86 	bl	80076ec <HAL_GetTick>
 800a7e0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a7e8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a7f0:	887b      	ldrh	r3, [r7, #2]
 800a7f2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a7f4:	887b      	ldrh	r3, [r7, #2]
 800a7f6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a7f8:	7efb      	ldrb	r3, [r7, #27]
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d00e      	beq.n	800a81c <HAL_SPI_TransmitReceive+0x6e>
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a804:	d106      	bne.n	800a814 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d102      	bne.n	800a814 <HAL_SPI_TransmitReceive+0x66>
 800a80e:	7efb      	ldrb	r3, [r7, #27]
 800a810:	2b04      	cmp	r3, #4
 800a812:	d003      	beq.n	800a81c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a814:	2302      	movs	r3, #2
 800a816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a81a:	e1cd      	b.n	800abb8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d005      	beq.n	800a82e <HAL_SPI_TransmitReceive+0x80>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d002      	beq.n	800a82e <HAL_SPI_TransmitReceive+0x80>
 800a828:	887b      	ldrh	r3, [r7, #2]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d103      	bne.n	800a836 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a834:	e1c0      	b.n	800abb8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	2b04      	cmp	r3, #4
 800a840:	d003      	beq.n	800a84a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2205      	movs	r2, #5
 800a846:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	887a      	ldrh	r2, [r7, #2]
 800a85a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	887a      	ldrh	r2, [r7, #2]
 800a862:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	68ba      	ldr	r2, [r7, #8]
 800a86a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	887a      	ldrh	r2, [r7, #2]
 800a870:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	887a      	ldrh	r2, [r7, #2]
 800a876:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2200      	movs	r2, #0
 800a87c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2200      	movs	r2, #0
 800a882:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a88c:	d802      	bhi.n	800a894 <HAL_SPI_TransmitReceive+0xe6>
 800a88e:	8a3b      	ldrh	r3, [r7, #16]
 800a890:	2b01      	cmp	r3, #1
 800a892:	d908      	bls.n	800a8a6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	685a      	ldr	r2, [r3, #4]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a8a2:	605a      	str	r2, [r3, #4]
 800a8a4:	e007      	b.n	800a8b6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	685a      	ldr	r2, [r3, #4]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a8b4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8c0:	2b40      	cmp	r3, #64	; 0x40
 800a8c2:	d007      	beq.n	800a8d4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a8dc:	d97c      	bls.n	800a9d8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d002      	beq.n	800a8ec <HAL_SPI_TransmitReceive+0x13e>
 800a8e6:	8a7b      	ldrh	r3, [r7, #18]
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d169      	bne.n	800a9c0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f0:	881a      	ldrh	r2, [r3, #0]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8fc:	1c9a      	adds	r2, r3, #2
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a906:	b29b      	uxth	r3, r3
 800a908:	3b01      	subs	r3, #1
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a910:	e056      	b.n	800a9c0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	f003 0302 	and.w	r3, r3, #2
 800a91c:	2b02      	cmp	r3, #2
 800a91e:	d11b      	bne.n	800a958 <HAL_SPI_TransmitReceive+0x1aa>
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a924:	b29b      	uxth	r3, r3
 800a926:	2b00      	cmp	r3, #0
 800a928:	d016      	beq.n	800a958 <HAL_SPI_TransmitReceive+0x1aa>
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d113      	bne.n	800a958 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a934:	881a      	ldrh	r2, [r3, #0]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a940:	1c9a      	adds	r2, r3, #2
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	3b01      	subs	r3, #1
 800a94e:	b29a      	uxth	r2, r3
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a954:	2300      	movs	r3, #0
 800a956:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	f003 0301 	and.w	r3, r3, #1
 800a962:	2b01      	cmp	r3, #1
 800a964:	d11c      	bne.n	800a9a0 <HAL_SPI_TransmitReceive+0x1f2>
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d016      	beq.n	800a9a0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	68da      	ldr	r2, [r3, #12]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a97c:	b292      	uxth	r2, r2
 800a97e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a984:	1c9a      	adds	r2, r3, #2
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a990:	b29b      	uxth	r3, r3
 800a992:	3b01      	subs	r3, #1
 800a994:	b29a      	uxth	r2, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a99c:	2301      	movs	r3, #1
 800a99e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a9a0:	f7fc fea4 	bl	80076ec <HAL_GetTick>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d807      	bhi.n	800a9c0 <HAL_SPI_TransmitReceive+0x212>
 800a9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b6:	d003      	beq.n	800a9c0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a9b8:	2303      	movs	r3, #3
 800a9ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a9be:	e0fb      	b.n	800abb8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1a3      	bne.n	800a912 <HAL_SPI_TransmitReceive+0x164>
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d19d      	bne.n	800a912 <HAL_SPI_TransmitReceive+0x164>
 800a9d6:	e0df      	b.n	800ab98 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d003      	beq.n	800a9e8 <HAL_SPI_TransmitReceive+0x23a>
 800a9e0:	8a7b      	ldrh	r3, [r7, #18]
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	f040 80cb 	bne.w	800ab7e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d912      	bls.n	800aa18 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f6:	881a      	ldrh	r2, [r3, #0]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa02:	1c9a      	adds	r2, r3, #2
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	3b02      	subs	r3, #2
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aa16:	e0b2      	b.n	800ab7e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	330c      	adds	r3, #12
 800aa22:	7812      	ldrb	r2, [r2, #0]
 800aa24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa2a:	1c5a      	adds	r2, r3, #1
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	3b01      	subs	r3, #1
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa3e:	e09e      	b.n	800ab7e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	f003 0302 	and.w	r3, r3, #2
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	d134      	bne.n	800aab8 <HAL_SPI_TransmitReceive+0x30a>
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d02f      	beq.n	800aab8 <HAL_SPI_TransmitReceive+0x30a>
 800aa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d12c      	bne.n	800aab8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d912      	bls.n	800aa8e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa6c:	881a      	ldrh	r2, [r3, #0]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa78:	1c9a      	adds	r2, r3, #2
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	3b02      	subs	r3, #2
 800aa86:	b29a      	uxth	r2, r3
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aa8c:	e012      	b.n	800aab4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	330c      	adds	r3, #12
 800aa98:	7812      	ldrb	r2, [r2, #0]
 800aa9a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa0:	1c5a      	adds	r2, r3, #1
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	3b01      	subs	r3, #1
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aab4:	2300      	movs	r3, #0
 800aab6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	f003 0301 	and.w	r3, r3, #1
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d148      	bne.n	800ab58 <HAL_SPI_TransmitReceive+0x3aa>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aacc:	b29b      	uxth	r3, r3
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d042      	beq.n	800ab58 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aad8:	b29b      	uxth	r3, r3
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d923      	bls.n	800ab26 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	68da      	ldr	r2, [r3, #12]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae8:	b292      	uxth	r2, r2
 800aaea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf0:	1c9a      	adds	r2, r3, #2
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	3b02      	subs	r3, #2
 800ab00:	b29a      	uxth	r2, r3
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d81f      	bhi.n	800ab54 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	685a      	ldr	r2, [r3, #4]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ab22:	605a      	str	r2, [r3, #4]
 800ab24:	e016      	b.n	800ab54 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f103 020c 	add.w	r2, r3, #12
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab32:	7812      	ldrb	r2, [r2, #0]
 800ab34:	b2d2      	uxtb	r2, r2
 800ab36:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3c:	1c5a      	adds	r2, r3, #1
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ab54:	2301      	movs	r3, #1
 800ab56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ab58:	f7fc fdc8 	bl	80076ec <HAL_GetTick>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	1ad3      	subs	r3, r2, r3
 800ab62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d803      	bhi.n	800ab70 <HAL_SPI_TransmitReceive+0x3c2>
 800ab68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab6e:	d102      	bne.n	800ab76 <HAL_SPI_TransmitReceive+0x3c8>
 800ab70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d103      	bne.n	800ab7e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800ab76:	2303      	movs	r3, #3
 800ab78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800ab7c:	e01c      	b.n	800abb8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f47f af5b 	bne.w	800aa40 <HAL_SPI_TransmitReceive+0x292>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f47f af54 	bne.w	800aa40 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ab98:	69fa      	ldr	r2, [r7, #28]
 800ab9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab9c:	68f8      	ldr	r0, [r7, #12]
 800ab9e:	f000 fd89 	bl	800b6b4 <SPI_EndRxTxTransaction>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d006      	beq.n	800abb6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2220      	movs	r2, #32
 800abb2:	661a      	str	r2, [r3, #96]	; 0x60
 800abb4:	e000      	b.n	800abb8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800abb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800abc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3728      	adds	r7, #40	; 0x28
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b086      	sub	sp, #24
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	4613      	mov	r3, r2
 800abe0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d110      	bne.n	800ac10 <HAL_SPI_Receive_IT+0x3c>
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800abf6:	d10b      	bne.n	800ac10 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2204      	movs	r2, #4
 800abfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800ac00:	88fb      	ldrh	r3, [r7, #6]
 800ac02:	68ba      	ldr	r2, [r7, #8]
 800ac04:	68b9      	ldr	r1, [r7, #8]
 800ac06:	68f8      	ldr	r0, [r7, #12]
 800ac08:	f000 f894 	bl	800ad34 <HAL_SPI_TransmitReceive_IT>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	e089      	b.n	800ad24 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d101      	bne.n	800ac1e <HAL_SPI_Receive_IT+0x4a>
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	e082      	b.n	800ad24 <HAL_SPI_Receive_IT+0x150>
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2201      	movs	r2, #1
 800ac22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d002      	beq.n	800ac38 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800ac32:	2302      	movs	r3, #2
 800ac34:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ac36:	e070      	b.n	800ad1a <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d002      	beq.n	800ac44 <HAL_SPI_Receive_IT+0x70>
 800ac3e:	88fb      	ldrh	r3, [r7, #6]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d102      	bne.n	800ac4a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ac48:	e067      	b.n	800ad1a <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2204      	movs	r2, #4
 800ac4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	88fa      	ldrh	r2, [r7, #6]
 800ac62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	88fa      	ldrh	r2, [r7, #6]
 800ac6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2200      	movs	r2, #0
 800ac78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2200      	movs	r2, #0
 800ac84:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ac8e:	d90b      	bls.n	800aca8 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	685a      	ldr	r2, [r3, #4]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ac9e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	4a22      	ldr	r2, [pc, #136]	; (800ad2c <HAL_SPI_Receive_IT+0x158>)
 800aca4:	64da      	str	r2, [r3, #76]	; 0x4c
 800aca6:	e00a      	b.n	800acbe <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	685a      	ldr	r2, [r3, #4]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800acb6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	4a1d      	ldr	r2, [pc, #116]	; (800ad30 <HAL_SPI_Receive_IT+0x15c>)
 800acbc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	689b      	ldr	r3, [r3, #8]
 800acc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acc6:	d10f      	bne.n	800ace8 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acd6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ace6:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	685a      	ldr	r2, [r3, #4]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800acf6:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad02:	2b40      	cmp	r3, #64	; 0x40
 800ad04:	d008      	beq.n	800ad18 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad14:	601a      	str	r2, [r3, #0]
 800ad16:	e000      	b.n	800ad1a <HAL_SPI_Receive_IT+0x146>
  }

error :
 800ad18:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ad22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3718      	adds	r7, #24
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	0800b335 	.word	0x0800b335
 800ad30:	0800b2e5 	.word	0x0800b2e5

0800ad34 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b087      	sub	sp, #28
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
 800ad40:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ad42:	2300      	movs	r3, #0
 800ad44:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d101      	bne.n	800ad54 <HAL_SPI_TransmitReceive_IT+0x20>
 800ad50:	2302      	movs	r3, #2
 800ad52:	e091      	b.n	800ae78 <HAL_SPI_TransmitReceive_IT+0x144>
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2201      	movs	r2, #1
 800ad58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ad62:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ad6a:	7dbb      	ldrb	r3, [r7, #22]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d00d      	beq.n	800ad8c <HAL_SPI_TransmitReceive_IT+0x58>
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad76:	d106      	bne.n	800ad86 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d102      	bne.n	800ad86 <HAL_SPI_TransmitReceive_IT+0x52>
 800ad80:	7dbb      	ldrb	r3, [r7, #22]
 800ad82:	2b04      	cmp	r3, #4
 800ad84:	d002      	beq.n	800ad8c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800ad86:	2302      	movs	r3, #2
 800ad88:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ad8a:	e070      	b.n	800ae6e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d005      	beq.n	800ad9e <HAL_SPI_TransmitReceive_IT+0x6a>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d002      	beq.n	800ad9e <HAL_SPI_TransmitReceive_IT+0x6a>
 800ad98:	887b      	ldrh	r3, [r7, #2]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d102      	bne.n	800ada4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800ad9e:	2301      	movs	r3, #1
 800ada0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ada2:	e064      	b.n	800ae6e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	2b04      	cmp	r3, #4
 800adae:	d003      	beq.n	800adb8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2205      	movs	r2, #5
 800adb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2200      	movs	r2, #0
 800adbc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	887a      	ldrh	r2, [r7, #2]
 800adc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	887a      	ldrh	r2, [r7, #2]
 800adce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	887a      	ldrh	r2, [r7, #2]
 800adda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	887a      	ldrh	r2, [r7, #2]
 800ade2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800adee:	d906      	bls.n	800adfe <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	4a24      	ldr	r2, [pc, #144]	; (800ae84 <HAL_SPI_TransmitReceive_IT+0x150>)
 800adf4:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	4a23      	ldr	r2, [pc, #140]	; (800ae88 <HAL_SPI_TransmitReceive_IT+0x154>)
 800adfa:	651a      	str	r2, [r3, #80]	; 0x50
 800adfc:	e005      	b.n	800ae0a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	4a22      	ldr	r2, [pc, #136]	; (800ae8c <HAL_SPI_TransmitReceive_IT+0x158>)
 800ae02:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	4a22      	ldr	r2, [pc, #136]	; (800ae90 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800ae08:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ae12:	d802      	bhi.n	800ae1a <HAL_SPI_TransmitReceive_IT+0xe6>
 800ae14:	887b      	ldrh	r3, [r7, #2]
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d908      	bls.n	800ae2c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	685a      	ldr	r2, [r3, #4]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ae28:	605a      	str	r2, [r3, #4]
 800ae2a:	e007      	b.n	800ae3c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	685a      	ldr	r2, [r3, #4]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ae3a:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	685a      	ldr	r2, [r3, #4]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800ae4a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae56:	2b40      	cmp	r3, #64	; 0x40
 800ae58:	d008      	beq.n	800ae6c <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae68:	601a      	str	r2, [r3, #0]
 800ae6a:	e000      	b.n	800ae6e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800ae6c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ae76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	371c      	adds	r7, #28
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr
 800ae84:	0800b21f 	.word	0x0800b21f
 800ae88:	0800b285 	.word	0x0800b285
 800ae8c:	0800b0cf 	.word	0x0800b0cf
 800ae90:	0800b18d 	.word	0x0800b18d

0800ae94 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b088      	sub	sp, #32
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d10e      	bne.n	800aed4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d009      	beq.n	800aed4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d004      	beq.n	800aed4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	4798      	blx	r3
    return;
 800aed2:	e0ce      	b.n	800b072 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	f003 0302 	and.w	r3, r3, #2
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d009      	beq.n	800aef2 <HAL_SPI_IRQHandler+0x5e>
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d004      	beq.n	800aef2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	4798      	blx	r3
    return;
 800aef0:	e0bf      	b.n	800b072 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	f003 0320 	and.w	r3, r3, #32
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d10a      	bne.n	800af12 <HAL_SPI_IRQHandler+0x7e>
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af02:	2b00      	cmp	r3, #0
 800af04:	d105      	bne.n	800af12 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f000 80b0 	beq.w	800b072 <HAL_SPI_IRQHandler+0x1de>
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	f003 0320 	and.w	r3, r3, #32
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f000 80aa 	beq.w	800b072 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af24:	2b00      	cmp	r3, #0
 800af26:	d023      	beq.n	800af70 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	2b03      	cmp	r3, #3
 800af32:	d011      	beq.n	800af58 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af38:	f043 0204 	orr.w	r2, r3, #4
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af40:	2300      	movs	r3, #0
 800af42:	617b      	str	r3, [r7, #20]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	68db      	ldr	r3, [r3, #12]
 800af4a:	617b      	str	r3, [r7, #20]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	617b      	str	r3, [r7, #20]
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	e00b      	b.n	800af70 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af58:	2300      	movs	r3, #0
 800af5a:	613b      	str	r3, [r7, #16]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	613b      	str	r3, [r7, #16]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	613b      	str	r3, [r7, #16]
 800af6c:	693b      	ldr	r3, [r7, #16]
        return;
 800af6e:	e080      	b.n	800b072 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	f003 0320 	and.w	r3, r3, #32
 800af76:	2b00      	cmp	r3, #0
 800af78:	d014      	beq.n	800afa4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af7e:	f043 0201 	orr.w	r2, r3, #1
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800af86:	2300      	movs	r3, #0
 800af88:	60fb      	str	r3, [r7, #12]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	60fb      	str	r3, [r7, #12]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afa0:	601a      	str	r2, [r3, #0]
 800afa2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00c      	beq.n	800afc8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afb2:	f043 0208 	orr.w	r2, r3, #8
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800afba:	2300      	movs	r3, #0
 800afbc:	60bb      	str	r3, [r7, #8]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	60bb      	str	r3, [r7, #8]
 800afc6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d04f      	beq.n	800b070 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	685a      	ldr	r2, [r3, #4]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800afde:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	f003 0302 	and.w	r3, r3, #2
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d104      	bne.n	800affc <HAL_SPI_IRQHandler+0x168>
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	f003 0301 	and.w	r3, r3, #1
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d034      	beq.n	800b066 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	685a      	ldr	r2, [r3, #4]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f022 0203 	bic.w	r2, r2, #3
 800b00a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b010:	2b00      	cmp	r3, #0
 800b012:	d011      	beq.n	800b038 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b018:	4a17      	ldr	r2, [pc, #92]	; (800b078 <HAL_SPI_IRQHandler+0x1e4>)
 800b01a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b020:	4618      	mov	r0, r3
 800b022:	f7fc fdf3 	bl	8007c0c <HAL_DMA_Abort_IT>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d005      	beq.n	800b038 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b030:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d016      	beq.n	800b06e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b044:	4a0c      	ldr	r2, [pc, #48]	; (800b078 <HAL_SPI_IRQHandler+0x1e4>)
 800b046:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7fc fddd 	bl	8007c0c <HAL_DMA_Abort_IT>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d00a      	beq.n	800b06e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b05c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800b064:	e003      	b.n	800b06e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f812 	bl	800b090 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b06c:	e000      	b.n	800b070 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800b06e:	bf00      	nop
    return;
 800b070:	bf00      	nop
  }
}
 800b072:	3720      	adds	r7, #32
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}
 800b078:	0800b0a5 	.word	0x0800b0a5

0800b07c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b084:	bf00      	nop
 800b086:	370c      	adds	r7, #12
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b098:	bf00      	nop
 800b09a:	370c      	adds	r7, #12
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr

0800b0a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f7ff ffe5 	bl	800b090 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b0c6:	bf00      	nop
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b082      	sub	sp, #8
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d923      	bls.n	800b12a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68da      	ldr	r2, [r3, #12]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ec:	b292      	uxth	r2, r2
 800b0ee:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f4:	1c9a      	adds	r2, r3, #2
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b100:	b29b      	uxth	r3, r3
 800b102:	3b02      	subs	r3, #2
 800b104:	b29a      	uxth	r2, r3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b112:	b29b      	uxth	r3, r3
 800b114:	2b01      	cmp	r3, #1
 800b116:	d11f      	bne.n	800b158 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	685a      	ldr	r2, [r3, #4]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b126:	605a      	str	r2, [r3, #4]
 800b128:	e016      	b.n	800b158 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f103 020c 	add.w	r2, r3, #12
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b136:	7812      	ldrb	r2, [r2, #0]
 800b138:	b2d2      	uxtb	r2, r2
 800b13a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b140:	1c5a      	adds	r2, r3, #1
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	3b01      	subs	r3, #1
 800b150:	b29a      	uxth	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b15e:	b29b      	uxth	r3, r3
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10f      	bne.n	800b184 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	685a      	ldr	r2, [r3, #4]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b172:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b178:	b29b      	uxth	r3, r3
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d102      	bne.n	800b184 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 fb02 	bl	800b788 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b184:	bf00      	nop
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b198:	b29b      	uxth	r3, r3
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d912      	bls.n	800b1c4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a2:	881a      	ldrh	r2, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ae:	1c9a      	adds	r2, r3, #2
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	3b02      	subs	r3, #2
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b1c2:	e012      	b.n	800b1ea <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	330c      	adds	r3, #12
 800b1ce:	7812      	ldrb	r2, [r2, #0]
 800b1d0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d6:	1c5a      	adds	r2, r3, #1
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d110      	bne.n	800b216 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	685a      	ldr	r2, [r3, #4]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b202:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d102      	bne.n	800b216 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 fab9 	bl	800b788 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b216:	bf00      	nop
 800b218:	3708      	adds	r7, #8
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b082      	sub	sp, #8
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	68da      	ldr	r2, [r3, #12]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b230:	b292      	uxth	r2, r2
 800b232:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b238:	1c9a      	adds	r2, r3, #2
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b244:	b29b      	uxth	r3, r3
 800b246:	3b01      	subs	r3, #1
 800b248:	b29a      	uxth	r2, r3
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b256:	b29b      	uxth	r3, r3
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d10f      	bne.n	800b27c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	685a      	ldr	r2, [r3, #4]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b26a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b270:	b29b      	uxth	r3, r3
 800b272:	2b00      	cmp	r3, #0
 800b274:	d102      	bne.n	800b27c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 fa86 	bl	800b788 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b27c:	bf00      	nop
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b290:	881a      	ldrh	r2, [r3, #0]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b29c:	1c9a      	adds	r2, r3, #2
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	b29a      	uxth	r2, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d110      	bne.n	800b2dc <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	685a      	ldr	r2, [r3, #4]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b2c8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d102      	bne.n	800b2dc <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 fa56 	bl	800b788 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b2dc:	bf00      	nop
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f103 020c 	add.w	r2, r3, #12
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2f8:	7812      	ldrb	r2, [r2, #0]
 800b2fa:	b2d2      	uxtb	r2, r2
 800b2fc:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b302:	1c5a      	adds	r2, r3, #1
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b30e:	b29b      	uxth	r3, r3
 800b310:	3b01      	subs	r3, #1
 800b312:	b29a      	uxth	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b320:	b29b      	uxth	r3, r3
 800b322:	2b00      	cmp	r3, #0
 800b324:	d102      	bne.n	800b32c <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 fa70 	bl	800b80c <SPI_CloseRx_ISR>
  }
}
 800b32c:	bf00      	nop
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	68da      	ldr	r2, [r3, #12]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b346:	b292      	uxth	r2, r2
 800b348:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b34e:	1c9a      	adds	r2, r3, #2
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	3b01      	subs	r3, #1
 800b35e:	b29a      	uxth	r2, r3
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d102      	bne.n	800b378 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 fa4a 	bl	800b80c <SPI_CloseRx_ISR>
  }
}
 800b378:	bf00      	nop
 800b37a:	3708      	adds	r7, #8
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b088      	sub	sp, #32
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	603b      	str	r3, [r7, #0]
 800b38c:	4613      	mov	r3, r2
 800b38e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b390:	f7fc f9ac 	bl	80076ec <HAL_GetTick>
 800b394:	4602      	mov	r2, r0
 800b396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b398:	1a9b      	subs	r3, r3, r2
 800b39a:	683a      	ldr	r2, [r7, #0]
 800b39c:	4413      	add	r3, r2
 800b39e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b3a0:	f7fc f9a4 	bl	80076ec <HAL_GetTick>
 800b3a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b3a6:	4b39      	ldr	r3, [pc, #228]	; (800b48c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	015b      	lsls	r3, r3, #5
 800b3ac:	0d1b      	lsrs	r3, r3, #20
 800b3ae:	69fa      	ldr	r2, [r7, #28]
 800b3b0:	fb02 f303 	mul.w	r3, r2, r3
 800b3b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b3b6:	e054      	b.n	800b462 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3be:	d050      	beq.n	800b462 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b3c0:	f7fc f994 	bl	80076ec <HAL_GetTick>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	1ad3      	subs	r3, r2, r3
 800b3ca:	69fa      	ldr	r2, [r7, #28]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d902      	bls.n	800b3d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d13d      	bne.n	800b452 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	685a      	ldr	r2, [r3, #4]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b3e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3ee:	d111      	bne.n	800b414 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3f8:	d004      	beq.n	800b404 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b402:	d107      	bne.n	800b414 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b412:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b41c:	d10f      	bne.n	800b43e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b42c:	601a      	str	r2, [r3, #0]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b43c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2201      	movs	r2, #1
 800b442:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2200      	movs	r2, #0
 800b44a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b44e:	2303      	movs	r3, #3
 800b450:	e017      	b.n	800b482 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d101      	bne.n	800b45c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b458:	2300      	movs	r3, #0
 800b45a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	3b01      	subs	r3, #1
 800b460:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	689a      	ldr	r2, [r3, #8]
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	4013      	ands	r3, r2
 800b46c:	68ba      	ldr	r2, [r7, #8]
 800b46e:	429a      	cmp	r2, r3
 800b470:	bf0c      	ite	eq
 800b472:	2301      	moveq	r3, #1
 800b474:	2300      	movne	r3, #0
 800b476:	b2db      	uxtb	r3, r3
 800b478:	461a      	mov	r2, r3
 800b47a:	79fb      	ldrb	r3, [r7, #7]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d19b      	bne.n	800b3b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3720      	adds	r7, #32
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	20000008 	.word	0x20000008

0800b490 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b08a      	sub	sp, #40	; 0x28
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	607a      	str	r2, [r7, #4]
 800b49c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b4a2:	f7fc f923 	bl	80076ec <HAL_GetTick>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4aa:	1a9b      	subs	r3, r3, r2
 800b4ac:	683a      	ldr	r2, [r7, #0]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b4b2:	f7fc f91b 	bl	80076ec <HAL_GetTick>
 800b4b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	330c      	adds	r3, #12
 800b4be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b4c0:	4b3d      	ldr	r3, [pc, #244]	; (800b5b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	4413      	add	r3, r2
 800b4ca:	00da      	lsls	r2, r3, #3
 800b4cc:	1ad3      	subs	r3, r2, r3
 800b4ce:	0d1b      	lsrs	r3, r3, #20
 800b4d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4d2:	fb02 f303 	mul.w	r3, r2, r3
 800b4d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b4d8:	e060      	b.n	800b59c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b4e0:	d107      	bne.n	800b4f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d104      	bne.n	800b4f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b4e8:	69fb      	ldr	r3, [r7, #28]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b4f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4f8:	d050      	beq.n	800b59c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b4fa:	f7fc f8f7 	bl	80076ec <HAL_GetTick>
 800b4fe:	4602      	mov	r2, r0
 800b500:	6a3b      	ldr	r3, [r7, #32]
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b506:	429a      	cmp	r2, r3
 800b508:	d902      	bls.n	800b510 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d13d      	bne.n	800b58c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	685a      	ldr	r2, [r3, #4]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b51e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b528:	d111      	bne.n	800b54e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	689b      	ldr	r3, [r3, #8]
 800b52e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b532:	d004      	beq.n	800b53e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b53c:	d107      	bne.n	800b54e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b54c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b556:	d10f      	bne.n	800b578 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b566:	601a      	str	r2, [r3, #0]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b576:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2200      	movs	r2, #0
 800b584:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b588:	2303      	movs	r3, #3
 800b58a:	e010      	b.n	800b5ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d101      	bne.n	800b596 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b592:	2300      	movs	r3, #0
 800b594:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	3b01      	subs	r3, #1
 800b59a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	689a      	ldr	r2, [r3, #8]
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	4013      	ands	r3, r2
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d196      	bne.n	800b4da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3728      	adds	r7, #40	; 0x28
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	20000008 	.word	0x20000008

0800b5bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b088      	sub	sp, #32
 800b5c0:	af02      	add	r7, sp, #8
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b5d0:	d111      	bne.n	800b5f6 <SPI_EndRxTransaction+0x3a>
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5da:	d004      	beq.n	800b5e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5e4:	d107      	bne.n	800b5f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5f4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b5fe:	d112      	bne.n	800b626 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	9300      	str	r3, [sp, #0]
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	2200      	movs	r2, #0
 800b608:	2180      	movs	r1, #128	; 0x80
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f7ff feb8 	bl	800b380 <SPI_WaitFlagStateUntilTimeout>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d021      	beq.n	800b65a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b61a:	f043 0220 	orr.w	r2, r3, #32
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b622:	2303      	movs	r3, #3
 800b624:	e03d      	b.n	800b6a2 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b626:	4b21      	ldr	r3, [pc, #132]	; (800b6ac <SPI_EndRxTransaction+0xf0>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4a21      	ldr	r2, [pc, #132]	; (800b6b0 <SPI_EndRxTransaction+0xf4>)
 800b62c:	fba2 2303 	umull	r2, r3, r2, r3
 800b630:	0d5b      	lsrs	r3, r3, #21
 800b632:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b636:	fb02 f303 	mul.w	r3, r2, r3
 800b63a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00a      	beq.n	800b658 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	3b01      	subs	r3, #1
 800b646:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	689b      	ldr	r3, [r3, #8]
 800b64e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b652:	2b80      	cmp	r3, #128	; 0x80
 800b654:	d0f2      	beq.n	800b63c <SPI_EndRxTransaction+0x80>
 800b656:	e000      	b.n	800b65a <SPI_EndRxTransaction+0x9e>
        break;
 800b658:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b662:	d11d      	bne.n	800b6a0 <SPI_EndRxTransaction+0xe4>
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b66c:	d004      	beq.n	800b678 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b676:	d113      	bne.n	800b6a0 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	9300      	str	r3, [sp, #0]
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	2200      	movs	r2, #0
 800b680:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b684:	68f8      	ldr	r0, [r7, #12]
 800b686:	f7ff ff03 	bl	800b490 <SPI_WaitFifoStateUntilTimeout>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d007      	beq.n	800b6a0 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b694:	f043 0220 	orr.w	r2, r3, #32
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b69c:	2303      	movs	r3, #3
 800b69e:	e000      	b.n	800b6a2 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800b6a0:	2300      	movs	r3, #0
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3718      	adds	r7, #24
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	20000008 	.word	0x20000008
 800b6b0:	165e9f81 	.word	0x165e9f81

0800b6b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b088      	sub	sp, #32
 800b6b8:	af02      	add	r7, sp, #8
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f7ff fedf 	bl	800b490 <SPI_WaitFifoStateUntilTimeout>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d007      	beq.n	800b6e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6dc:	f043 0220 	orr.w	r2, r3, #32
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b6e4:	2303      	movs	r3, #3
 800b6e6:	e046      	b.n	800b776 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b6e8:	4b25      	ldr	r3, [pc, #148]	; (800b780 <SPI_EndRxTxTransaction+0xcc>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a25      	ldr	r2, [pc, #148]	; (800b784 <SPI_EndRxTxTransaction+0xd0>)
 800b6ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b6f2:	0d5b      	lsrs	r3, r3, #21
 800b6f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b6f8:	fb02 f303 	mul.w	r3, r2, r3
 800b6fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b706:	d112      	bne.n	800b72e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	9300      	str	r3, [sp, #0]
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	2200      	movs	r2, #0
 800b710:	2180      	movs	r1, #128	; 0x80
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f7ff fe34 	bl	800b380 <SPI_WaitFlagStateUntilTimeout>
 800b718:	4603      	mov	r3, r0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d016      	beq.n	800b74c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b722:	f043 0220 	orr.w	r2, r3, #32
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b72a:	2303      	movs	r3, #3
 800b72c:	e023      	b.n	800b776 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d00a      	beq.n	800b74a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	3b01      	subs	r3, #1
 800b738:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b744:	2b80      	cmp	r3, #128	; 0x80
 800b746:	d0f2      	beq.n	800b72e <SPI_EndRxTxTransaction+0x7a>
 800b748:	e000      	b.n	800b74c <SPI_EndRxTxTransaction+0x98>
        break;
 800b74a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	9300      	str	r3, [sp, #0]
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	2200      	movs	r2, #0
 800b754:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f7ff fe99 	bl	800b490 <SPI_WaitFifoStateUntilTimeout>
 800b75e:	4603      	mov	r3, r0
 800b760:	2b00      	cmp	r3, #0
 800b762:	d007      	beq.n	800b774 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b768:	f043 0220 	orr.w	r2, r3, #32
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b770:	2303      	movs	r3, #3
 800b772:	e000      	b.n	800b776 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800b774:	2300      	movs	r3, #0
}
 800b776:	4618      	mov	r0, r3
 800b778:	3718      	adds	r7, #24
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	20000008 	.word	0x20000008
 800b784:	165e9f81 	.word	0x165e9f81

0800b788 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b790:	f7fb ffac 	bl	80076ec <HAL_GetTick>
 800b794:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	685a      	ldr	r2, [r3, #4]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f022 0220 	bic.w	r2, r2, #32
 800b7a4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	2164      	movs	r1, #100	; 0x64
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f7ff ff82 	bl	800b6b4 <SPI_EndRxTxTransaction>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d005      	beq.n	800b7c2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7ba:	f043 0220 	orr.w	r2, r3, #32
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d115      	bne.n	800b7f6 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	2b04      	cmp	r3, #4
 800b7d4:	d107      	bne.n	800b7e6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2201      	movs	r2, #1
 800b7da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f7f7 f87c 	bl	80028dc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800b7e4:	e00e      	b.n	800b804 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f7ff fc44 	bl	800b07c <HAL_SPI_TxRxCpltCallback>
}
 800b7f4:	e006      	b.n	800b804 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f7ff fc46 	bl	800b090 <HAL_SPI_ErrorCallback>
}
 800b804:	bf00      	nop
 800b806:	3710      	adds	r7, #16
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	685a      	ldr	r2, [r3, #4]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b822:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b824:	f7fb ff62 	bl	80076ec <HAL_GetTick>
 800b828:	4603      	mov	r3, r0
 800b82a:	461a      	mov	r2, r3
 800b82c:	2164      	movs	r1, #100	; 0x64
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f7ff fec4 	bl	800b5bc <SPI_EndRxTransaction>
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d005      	beq.n	800b846 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b83e:	f043 0220 	orr.w	r2, r3, #32
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2201      	movs	r2, #1
 800b84a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b852:	2b00      	cmp	r3, #0
 800b854:	d103      	bne.n	800b85e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f7f7 f840 	bl	80028dc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800b85c:	e002      	b.n	800b864 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f7ff fc16 	bl	800b090 <HAL_SPI_ErrorCallback>
}
 800b864:	bf00      	nop
 800b866:	3708      	adds	r7, #8
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d101      	bne.n	800b87e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b87a:	2301      	movs	r3, #1
 800b87c:	e049      	b.n	800b912 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b884:	b2db      	uxtb	r3, r3
 800b886:	2b00      	cmp	r3, #0
 800b888:	d106      	bne.n	800b898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f7f9 fb94 	bl	8004fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2202      	movs	r2, #2
 800b89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	4610      	mov	r0, r2
 800b8ac:	f000 ffae 	bl	800c80c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2201      	movs	r2, #1
 800b904:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2201      	movs	r2, #1
 800b90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
	...

0800b91c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d001      	beq.n	800b934 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b930:	2301      	movs	r3, #1
 800b932:	e054      	b.n	800b9de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2202      	movs	r2, #2
 800b938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	68da      	ldr	r2, [r3, #12]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f042 0201 	orr.w	r2, r2, #1
 800b94a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a26      	ldr	r2, [pc, #152]	; (800b9ec <HAL_TIM_Base_Start_IT+0xd0>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d022      	beq.n	800b99c <HAL_TIM_Base_Start_IT+0x80>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b95e:	d01d      	beq.n	800b99c <HAL_TIM_Base_Start_IT+0x80>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a22      	ldr	r2, [pc, #136]	; (800b9f0 <HAL_TIM_Base_Start_IT+0xd4>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d018      	beq.n	800b99c <HAL_TIM_Base_Start_IT+0x80>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a21      	ldr	r2, [pc, #132]	; (800b9f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d013      	beq.n	800b99c <HAL_TIM_Base_Start_IT+0x80>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4a1f      	ldr	r2, [pc, #124]	; (800b9f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d00e      	beq.n	800b99c <HAL_TIM_Base_Start_IT+0x80>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4a1e      	ldr	r2, [pc, #120]	; (800b9fc <HAL_TIM_Base_Start_IT+0xe0>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d009      	beq.n	800b99c <HAL_TIM_Base_Start_IT+0x80>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4a1c      	ldr	r2, [pc, #112]	; (800ba00 <HAL_TIM_Base_Start_IT+0xe4>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d004      	beq.n	800b99c <HAL_TIM_Base_Start_IT+0x80>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a1b      	ldr	r2, [pc, #108]	; (800ba04 <HAL_TIM_Base_Start_IT+0xe8>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d115      	bne.n	800b9c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	689a      	ldr	r2, [r3, #8]
 800b9a2:	4b19      	ldr	r3, [pc, #100]	; (800ba08 <HAL_TIM_Base_Start_IT+0xec>)
 800b9a4:	4013      	ands	r3, r2
 800b9a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2b06      	cmp	r3, #6
 800b9ac:	d015      	beq.n	800b9da <HAL_TIM_Base_Start_IT+0xbe>
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9b4:	d011      	beq.n	800b9da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f042 0201 	orr.w	r2, r2, #1
 800b9c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9c6:	e008      	b.n	800b9da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f042 0201 	orr.w	r2, r2, #1
 800b9d6:	601a      	str	r2, [r3, #0]
 800b9d8:	e000      	b.n	800b9dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b9dc:	2300      	movs	r3, #0
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3714      	adds	r7, #20
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	40010000 	.word	0x40010000
 800b9f0:	40000400 	.word	0x40000400
 800b9f4:	40000800 	.word	0x40000800
 800b9f8:	40000c00 	.word	0x40000c00
 800b9fc:	40010400 	.word	0x40010400
 800ba00:	40014000 	.word	0x40014000
 800ba04:	40001800 	.word	0x40001800
 800ba08:	00010007 	.word	0x00010007

0800ba0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d101      	bne.n	800ba1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e049      	b.n	800bab2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d106      	bne.n	800ba38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f841 	bl	800baba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2202      	movs	r2, #2
 800ba3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	3304      	adds	r3, #4
 800ba48:	4619      	mov	r1, r3
 800ba4a:	4610      	mov	r0, r2
 800ba4c:	f000 fede 	bl	800c80c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2201      	movs	r2, #1
 800ba54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2201      	movs	r2, #1
 800ba64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2201      	movs	r2, #1
 800ba74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2201      	movs	r2, #1
 800ba94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2201      	movs	r2, #1
 800baa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3708      	adds	r7, #8
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800baba:	b480      	push	{r7}
 800babc:	b083      	sub	sp, #12
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bac2:	bf00      	nop
 800bac4:	370c      	adds	r7, #12
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr
	...

0800bad0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d109      	bne.n	800baf4 <HAL_TIM_PWM_Start+0x24>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	2b01      	cmp	r3, #1
 800baea:	bf14      	ite	ne
 800baec:	2301      	movne	r3, #1
 800baee:	2300      	moveq	r3, #0
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	e03c      	b.n	800bb6e <HAL_TIM_PWM_Start+0x9e>
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	2b04      	cmp	r3, #4
 800baf8:	d109      	bne.n	800bb0e <HAL_TIM_PWM_Start+0x3e>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	bf14      	ite	ne
 800bb06:	2301      	movne	r3, #1
 800bb08:	2300      	moveq	r3, #0
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	e02f      	b.n	800bb6e <HAL_TIM_PWM_Start+0x9e>
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	2b08      	cmp	r3, #8
 800bb12:	d109      	bne.n	800bb28 <HAL_TIM_PWM_Start+0x58>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	bf14      	ite	ne
 800bb20:	2301      	movne	r3, #1
 800bb22:	2300      	moveq	r3, #0
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	e022      	b.n	800bb6e <HAL_TIM_PWM_Start+0x9e>
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	2b0c      	cmp	r3, #12
 800bb2c:	d109      	bne.n	800bb42 <HAL_TIM_PWM_Start+0x72>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	bf14      	ite	ne
 800bb3a:	2301      	movne	r3, #1
 800bb3c:	2300      	moveq	r3, #0
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	e015      	b.n	800bb6e <HAL_TIM_PWM_Start+0x9e>
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	2b10      	cmp	r3, #16
 800bb46:	d109      	bne.n	800bb5c <HAL_TIM_PWM_Start+0x8c>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bb4e:	b2db      	uxtb	r3, r3
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	bf14      	ite	ne
 800bb54:	2301      	movne	r3, #1
 800bb56:	2300      	moveq	r3, #0
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	e008      	b.n	800bb6e <HAL_TIM_PWM_Start+0x9e>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	bf14      	ite	ne
 800bb68:	2301      	movne	r3, #1
 800bb6a:	2300      	moveq	r3, #0
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d001      	beq.n	800bb76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bb72:	2301      	movs	r3, #1
 800bb74:	e092      	b.n	800bc9c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d104      	bne.n	800bb86 <HAL_TIM_PWM_Start+0xb6>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2202      	movs	r2, #2
 800bb80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb84:	e023      	b.n	800bbce <HAL_TIM_PWM_Start+0xfe>
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	2b04      	cmp	r3, #4
 800bb8a:	d104      	bne.n	800bb96 <HAL_TIM_PWM_Start+0xc6>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2202      	movs	r2, #2
 800bb90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb94:	e01b      	b.n	800bbce <HAL_TIM_PWM_Start+0xfe>
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	2b08      	cmp	r3, #8
 800bb9a:	d104      	bne.n	800bba6 <HAL_TIM_PWM_Start+0xd6>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2202      	movs	r2, #2
 800bba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bba4:	e013      	b.n	800bbce <HAL_TIM_PWM_Start+0xfe>
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	2b0c      	cmp	r3, #12
 800bbaa:	d104      	bne.n	800bbb6 <HAL_TIM_PWM_Start+0xe6>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2202      	movs	r2, #2
 800bbb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bbb4:	e00b      	b.n	800bbce <HAL_TIM_PWM_Start+0xfe>
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	2b10      	cmp	r3, #16
 800bbba:	d104      	bne.n	800bbc6 <HAL_TIM_PWM_Start+0xf6>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2202      	movs	r2, #2
 800bbc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bbc4:	e003      	b.n	800bbce <HAL_TIM_PWM_Start+0xfe>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2202      	movs	r2, #2
 800bbca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	6839      	ldr	r1, [r7, #0]
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f001 fada 	bl	800d190 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a30      	ldr	r2, [pc, #192]	; (800bca4 <HAL_TIM_PWM_Start+0x1d4>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d004      	beq.n	800bbf0 <HAL_TIM_PWM_Start+0x120>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a2f      	ldr	r2, [pc, #188]	; (800bca8 <HAL_TIM_PWM_Start+0x1d8>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d101      	bne.n	800bbf4 <HAL_TIM_PWM_Start+0x124>
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	e000      	b.n	800bbf6 <HAL_TIM_PWM_Start+0x126>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d007      	beq.n	800bc0a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4a25      	ldr	r2, [pc, #148]	; (800bca4 <HAL_TIM_PWM_Start+0x1d4>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d022      	beq.n	800bc5a <HAL_TIM_PWM_Start+0x18a>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc1c:	d01d      	beq.n	800bc5a <HAL_TIM_PWM_Start+0x18a>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4a22      	ldr	r2, [pc, #136]	; (800bcac <HAL_TIM_PWM_Start+0x1dc>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d018      	beq.n	800bc5a <HAL_TIM_PWM_Start+0x18a>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	4a20      	ldr	r2, [pc, #128]	; (800bcb0 <HAL_TIM_PWM_Start+0x1e0>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d013      	beq.n	800bc5a <HAL_TIM_PWM_Start+0x18a>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4a1f      	ldr	r2, [pc, #124]	; (800bcb4 <HAL_TIM_PWM_Start+0x1e4>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d00e      	beq.n	800bc5a <HAL_TIM_PWM_Start+0x18a>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a19      	ldr	r2, [pc, #100]	; (800bca8 <HAL_TIM_PWM_Start+0x1d8>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d009      	beq.n	800bc5a <HAL_TIM_PWM_Start+0x18a>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4a1b      	ldr	r2, [pc, #108]	; (800bcb8 <HAL_TIM_PWM_Start+0x1e8>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d004      	beq.n	800bc5a <HAL_TIM_PWM_Start+0x18a>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4a19      	ldr	r2, [pc, #100]	; (800bcbc <HAL_TIM_PWM_Start+0x1ec>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d115      	bne.n	800bc86 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	689a      	ldr	r2, [r3, #8]
 800bc60:	4b17      	ldr	r3, [pc, #92]	; (800bcc0 <HAL_TIM_PWM_Start+0x1f0>)
 800bc62:	4013      	ands	r3, r2
 800bc64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2b06      	cmp	r3, #6
 800bc6a:	d015      	beq.n	800bc98 <HAL_TIM_PWM_Start+0x1c8>
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc72:	d011      	beq.n	800bc98 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f042 0201 	orr.w	r2, r2, #1
 800bc82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc84:	e008      	b.n	800bc98 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f042 0201 	orr.w	r2, r2, #1
 800bc94:	601a      	str	r2, [r3, #0]
 800bc96:	e000      	b.n	800bc9a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bc9a:	2300      	movs	r3, #0
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3710      	adds	r7, #16
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	40010000 	.word	0x40010000
 800bca8:	40010400 	.word	0x40010400
 800bcac:	40000400 	.word	0x40000400
 800bcb0:	40000800 	.word	0x40000800
 800bcb4:	40000c00 	.word	0x40000c00
 800bcb8:	40014000 	.word	0x40014000
 800bcbc:	40001800 	.word	0x40001800
 800bcc0:	00010007 	.word	0x00010007

0800bcc4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d101      	bne.n	800bcd6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	e049      	b.n	800bd6a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d106      	bne.n	800bcf0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f7f9 f988 	bl	8005000 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2202      	movs	r2, #2
 800bcf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	3304      	adds	r3, #4
 800bd00:	4619      	mov	r1, r3
 800bd02:	4610      	mov	r0, r2
 800bd04:	f000 fd82 	bl	800c80c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2201      	movs	r2, #1
 800bd14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2201      	movs	r2, #1
 800bd34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2201      	movs	r2, #1
 800bd44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2201      	movs	r2, #1
 800bd54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2201      	movs	r2, #1
 800bd64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd68:	2300      	movs	r3, #0
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3708      	adds	r7, #8
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
	...

0800bd74 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d104      	bne.n	800bd92 <HAL_TIM_IC_Start_IT+0x1e>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	e023      	b.n	800bdda <HAL_TIM_IC_Start_IT+0x66>
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	2b04      	cmp	r3, #4
 800bd96:	d104      	bne.n	800bda2 <HAL_TIM_IC_Start_IT+0x2e>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	e01b      	b.n	800bdda <HAL_TIM_IC_Start_IT+0x66>
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	2b08      	cmp	r3, #8
 800bda6:	d104      	bne.n	800bdb2 <HAL_TIM_IC_Start_IT+0x3e>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	e013      	b.n	800bdda <HAL_TIM_IC_Start_IT+0x66>
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	2b0c      	cmp	r3, #12
 800bdb6:	d104      	bne.n	800bdc2 <HAL_TIM_IC_Start_IT+0x4e>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	e00b      	b.n	800bdda <HAL_TIM_IC_Start_IT+0x66>
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	2b10      	cmp	r3, #16
 800bdc6:	d104      	bne.n	800bdd2 <HAL_TIM_IC_Start_IT+0x5e>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	e003      	b.n	800bdda <HAL_TIM_IC_Start_IT+0x66>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bdd8:	b2db      	uxtb	r3, r3
 800bdda:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d104      	bne.n	800bdec <HAL_TIM_IC_Start_IT+0x78>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	e013      	b.n	800be14 <HAL_TIM_IC_Start_IT+0xa0>
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	2b04      	cmp	r3, #4
 800bdf0:	d104      	bne.n	800bdfc <HAL_TIM_IC_Start_IT+0x88>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	e00b      	b.n	800be14 <HAL_TIM_IC_Start_IT+0xa0>
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	2b08      	cmp	r3, #8
 800be00:	d104      	bne.n	800be0c <HAL_TIM_IC_Start_IT+0x98>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	e003      	b.n	800be14 <HAL_TIM_IC_Start_IT+0xa0>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800be12:	b2db      	uxtb	r3, r3
 800be14:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800be16:	7bbb      	ldrb	r3, [r7, #14]
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d102      	bne.n	800be22 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800be1c:	7b7b      	ldrb	r3, [r7, #13]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d001      	beq.n	800be26 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800be22:	2301      	movs	r3, #1
 800be24:	e0e2      	b.n	800bfec <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d104      	bne.n	800be36 <HAL_TIM_IC_Start_IT+0xc2>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2202      	movs	r2, #2
 800be30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800be34:	e023      	b.n	800be7e <HAL_TIM_IC_Start_IT+0x10a>
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	2b04      	cmp	r3, #4
 800be3a:	d104      	bne.n	800be46 <HAL_TIM_IC_Start_IT+0xd2>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2202      	movs	r2, #2
 800be40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800be44:	e01b      	b.n	800be7e <HAL_TIM_IC_Start_IT+0x10a>
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	2b08      	cmp	r3, #8
 800be4a:	d104      	bne.n	800be56 <HAL_TIM_IC_Start_IT+0xe2>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2202      	movs	r2, #2
 800be50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800be54:	e013      	b.n	800be7e <HAL_TIM_IC_Start_IT+0x10a>
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	2b0c      	cmp	r3, #12
 800be5a:	d104      	bne.n	800be66 <HAL_TIM_IC_Start_IT+0xf2>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2202      	movs	r2, #2
 800be60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800be64:	e00b      	b.n	800be7e <HAL_TIM_IC_Start_IT+0x10a>
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	2b10      	cmp	r3, #16
 800be6a:	d104      	bne.n	800be76 <HAL_TIM_IC_Start_IT+0x102>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2202      	movs	r2, #2
 800be70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800be74:	e003      	b.n	800be7e <HAL_TIM_IC_Start_IT+0x10a>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2202      	movs	r2, #2
 800be7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d104      	bne.n	800be8e <HAL_TIM_IC_Start_IT+0x11a>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2202      	movs	r2, #2
 800be88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be8c:	e013      	b.n	800beb6 <HAL_TIM_IC_Start_IT+0x142>
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	2b04      	cmp	r3, #4
 800be92:	d104      	bne.n	800be9e <HAL_TIM_IC_Start_IT+0x12a>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2202      	movs	r2, #2
 800be98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be9c:	e00b      	b.n	800beb6 <HAL_TIM_IC_Start_IT+0x142>
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	2b08      	cmp	r3, #8
 800bea2:	d104      	bne.n	800beae <HAL_TIM_IC_Start_IT+0x13a>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2202      	movs	r2, #2
 800bea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800beac:	e003      	b.n	800beb6 <HAL_TIM_IC_Start_IT+0x142>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2202      	movs	r2, #2
 800beb2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	2b0c      	cmp	r3, #12
 800beba:	d841      	bhi.n	800bf40 <HAL_TIM_IC_Start_IT+0x1cc>
 800bebc:	a201      	add	r2, pc, #4	; (adr r2, 800bec4 <HAL_TIM_IC_Start_IT+0x150>)
 800bebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec2:	bf00      	nop
 800bec4:	0800bef9 	.word	0x0800bef9
 800bec8:	0800bf41 	.word	0x0800bf41
 800becc:	0800bf41 	.word	0x0800bf41
 800bed0:	0800bf41 	.word	0x0800bf41
 800bed4:	0800bf0b 	.word	0x0800bf0b
 800bed8:	0800bf41 	.word	0x0800bf41
 800bedc:	0800bf41 	.word	0x0800bf41
 800bee0:	0800bf41 	.word	0x0800bf41
 800bee4:	0800bf1d 	.word	0x0800bf1d
 800bee8:	0800bf41 	.word	0x0800bf41
 800beec:	0800bf41 	.word	0x0800bf41
 800bef0:	0800bf41 	.word	0x0800bf41
 800bef4:	0800bf2f 	.word	0x0800bf2f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	68da      	ldr	r2, [r3, #12]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f042 0202 	orr.w	r2, r2, #2
 800bf06:	60da      	str	r2, [r3, #12]
      break;
 800bf08:	e01d      	b.n	800bf46 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	68da      	ldr	r2, [r3, #12]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f042 0204 	orr.w	r2, r2, #4
 800bf18:	60da      	str	r2, [r3, #12]
      break;
 800bf1a:	e014      	b.n	800bf46 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	68da      	ldr	r2, [r3, #12]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f042 0208 	orr.w	r2, r2, #8
 800bf2a:	60da      	str	r2, [r3, #12]
      break;
 800bf2c:	e00b      	b.n	800bf46 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68da      	ldr	r2, [r3, #12]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f042 0210 	orr.w	r2, r2, #16
 800bf3c:	60da      	str	r2, [r3, #12]
      break;
 800bf3e:	e002      	b.n	800bf46 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800bf40:	2301      	movs	r3, #1
 800bf42:	73fb      	strb	r3, [r7, #15]
      break;
 800bf44:	bf00      	nop
  }

  if (status == HAL_OK)
 800bf46:	7bfb      	ldrb	r3, [r7, #15]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d14e      	bne.n	800bfea <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2201      	movs	r2, #1
 800bf52:	6839      	ldr	r1, [r7, #0]
 800bf54:	4618      	mov	r0, r3
 800bf56:	f001 f91b 	bl	800d190 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a25      	ldr	r2, [pc, #148]	; (800bff4 <HAL_TIM_IC_Start_IT+0x280>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d022      	beq.n	800bfaa <HAL_TIM_IC_Start_IT+0x236>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf6c:	d01d      	beq.n	800bfaa <HAL_TIM_IC_Start_IT+0x236>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4a21      	ldr	r2, [pc, #132]	; (800bff8 <HAL_TIM_IC_Start_IT+0x284>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d018      	beq.n	800bfaa <HAL_TIM_IC_Start_IT+0x236>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a1f      	ldr	r2, [pc, #124]	; (800bffc <HAL_TIM_IC_Start_IT+0x288>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d013      	beq.n	800bfaa <HAL_TIM_IC_Start_IT+0x236>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a1e      	ldr	r2, [pc, #120]	; (800c000 <HAL_TIM_IC_Start_IT+0x28c>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d00e      	beq.n	800bfaa <HAL_TIM_IC_Start_IT+0x236>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a1c      	ldr	r2, [pc, #112]	; (800c004 <HAL_TIM_IC_Start_IT+0x290>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d009      	beq.n	800bfaa <HAL_TIM_IC_Start_IT+0x236>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a1b      	ldr	r2, [pc, #108]	; (800c008 <HAL_TIM_IC_Start_IT+0x294>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d004      	beq.n	800bfaa <HAL_TIM_IC_Start_IT+0x236>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a19      	ldr	r2, [pc, #100]	; (800c00c <HAL_TIM_IC_Start_IT+0x298>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d115      	bne.n	800bfd6 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	689a      	ldr	r2, [r3, #8]
 800bfb0:	4b17      	ldr	r3, [pc, #92]	; (800c010 <HAL_TIM_IC_Start_IT+0x29c>)
 800bfb2:	4013      	ands	r3, r2
 800bfb4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	2b06      	cmp	r3, #6
 800bfba:	d015      	beq.n	800bfe8 <HAL_TIM_IC_Start_IT+0x274>
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfc2:	d011      	beq.n	800bfe8 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f042 0201 	orr.w	r2, r2, #1
 800bfd2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfd4:	e008      	b.n	800bfe8 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f042 0201 	orr.w	r2, r2, #1
 800bfe4:	601a      	str	r2, [r3, #0]
 800bfe6:	e000      	b.n	800bfea <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfe8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800bfea:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3710      	adds	r7, #16
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	40010000 	.word	0x40010000
 800bff8:	40000400 	.word	0x40000400
 800bffc:	40000800 	.word	0x40000800
 800c000:	40000c00 	.word	0x40000c00
 800c004:	40010400 	.word	0x40010400
 800c008:	40014000 	.word	0x40014000
 800c00c:	40001800 	.word	0x40001800
 800c010:	00010007 	.word	0x00010007

0800c014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	691b      	ldr	r3, [r3, #16]
 800c022:	f003 0302 	and.w	r3, r3, #2
 800c026:	2b02      	cmp	r3, #2
 800c028:	d122      	bne.n	800c070 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	68db      	ldr	r3, [r3, #12]
 800c030:	f003 0302 	and.w	r3, r3, #2
 800c034:	2b02      	cmp	r3, #2
 800c036:	d11b      	bne.n	800c070 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f06f 0202 	mvn.w	r2, #2
 800c040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2201      	movs	r2, #1
 800c046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	699b      	ldr	r3, [r3, #24]
 800c04e:	f003 0303 	and.w	r3, r3, #3
 800c052:	2b00      	cmp	r3, #0
 800c054:	d003      	beq.n	800c05e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f7f6 fc6a 	bl	8002930 <HAL_TIM_IC_CaptureCallback>
 800c05c:	e005      	b.n	800c06a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 fbb6 	bl	800c7d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f000 fbbd 	bl	800c7e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2200      	movs	r2, #0
 800c06e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	691b      	ldr	r3, [r3, #16]
 800c076:	f003 0304 	and.w	r3, r3, #4
 800c07a:	2b04      	cmp	r3, #4
 800c07c:	d122      	bne.n	800c0c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	f003 0304 	and.w	r3, r3, #4
 800c088:	2b04      	cmp	r3, #4
 800c08a:	d11b      	bne.n	800c0c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f06f 0204 	mvn.w	r2, #4
 800c094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2202      	movs	r2, #2
 800c09a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	699b      	ldr	r3, [r3, #24]
 800c0a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d003      	beq.n	800c0b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f7f6 fc40 	bl	8002930 <HAL_TIM_IC_CaptureCallback>
 800c0b0:	e005      	b.n	800c0be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 fb8c 	bl	800c7d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 fb93 	bl	800c7e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	691b      	ldr	r3, [r3, #16]
 800c0ca:	f003 0308 	and.w	r3, r3, #8
 800c0ce:	2b08      	cmp	r3, #8
 800c0d0:	d122      	bne.n	800c118 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	68db      	ldr	r3, [r3, #12]
 800c0d8:	f003 0308 	and.w	r3, r3, #8
 800c0dc:	2b08      	cmp	r3, #8
 800c0de:	d11b      	bne.n	800c118 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f06f 0208 	mvn.w	r2, #8
 800c0e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2204      	movs	r2, #4
 800c0ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	69db      	ldr	r3, [r3, #28]
 800c0f6:	f003 0303 	and.w	r3, r3, #3
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d003      	beq.n	800c106 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7f6 fc16 	bl	8002930 <HAL_TIM_IC_CaptureCallback>
 800c104:	e005      	b.n	800c112 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 fb62 	bl	800c7d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 fb69 	bl	800c7e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2200      	movs	r2, #0
 800c116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	f003 0310 	and.w	r3, r3, #16
 800c122:	2b10      	cmp	r3, #16
 800c124:	d122      	bne.n	800c16c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	f003 0310 	and.w	r3, r3, #16
 800c130:	2b10      	cmp	r3, #16
 800c132:	d11b      	bne.n	800c16c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f06f 0210 	mvn.w	r2, #16
 800c13c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2208      	movs	r2, #8
 800c142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	69db      	ldr	r3, [r3, #28]
 800c14a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d003      	beq.n	800c15a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f7f6 fbec 	bl	8002930 <HAL_TIM_IC_CaptureCallback>
 800c158:	e005      	b.n	800c166 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 fb38 	bl	800c7d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 fb3f 	bl	800c7e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2200      	movs	r2, #0
 800c16a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	691b      	ldr	r3, [r3, #16]
 800c172:	f003 0301 	and.w	r3, r3, #1
 800c176:	2b01      	cmp	r3, #1
 800c178:	d10e      	bne.n	800c198 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	f003 0301 	and.w	r3, r3, #1
 800c184:	2b01      	cmp	r3, #1
 800c186:	d107      	bne.n	800c198 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f06f 0201 	mvn.w	r2, #1
 800c190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f7f7 f98c 	bl	80034b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	691b      	ldr	r3, [r3, #16]
 800c19e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1a2:	2b80      	cmp	r3, #128	; 0x80
 800c1a4:	d10e      	bne.n	800c1c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1b0:	2b80      	cmp	r3, #128	; 0x80
 800c1b2:	d107      	bne.n	800c1c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c1bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f001 f922 	bl	800d408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1d2:	d10e      	bne.n	800c1f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1de:	2b80      	cmp	r3, #128	; 0x80
 800c1e0:	d107      	bne.n	800c1f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c1ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f001 f915 	bl	800d41c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	691b      	ldr	r3, [r3, #16]
 800c1f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1fc:	2b40      	cmp	r3, #64	; 0x40
 800c1fe:	d10e      	bne.n	800c21e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c20a:	2b40      	cmp	r3, #64	; 0x40
 800c20c:	d107      	bne.n	800c21e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f000 faed 	bl	800c7f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	691b      	ldr	r3, [r3, #16]
 800c224:	f003 0320 	and.w	r3, r3, #32
 800c228:	2b20      	cmp	r3, #32
 800c22a:	d10e      	bne.n	800c24a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	68db      	ldr	r3, [r3, #12]
 800c232:	f003 0320 	and.w	r3, r3, #32
 800c236:	2b20      	cmp	r3, #32
 800c238:	d107      	bne.n	800c24a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f06f 0220 	mvn.w	r2, #32
 800c242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f001 f8d5 	bl	800d3f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c24a:	bf00      	nop
 800c24c:	3708      	adds	r7, #8
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c252:	b580      	push	{r7, lr}
 800c254:	b086      	sub	sp, #24
 800c256:	af00      	add	r7, sp, #0
 800c258:	60f8      	str	r0, [r7, #12]
 800c25a:	60b9      	str	r1, [r7, #8]
 800c25c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c25e:	2300      	movs	r3, #0
 800c260:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d101      	bne.n	800c270 <HAL_TIM_IC_ConfigChannel+0x1e>
 800c26c:	2302      	movs	r3, #2
 800c26e:	e088      	b.n	800c382 <HAL_TIM_IC_ConfigChannel+0x130>
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d11b      	bne.n	800c2b6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800c28e:	f000 fdbb 	bl	800ce08 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	699a      	ldr	r2, [r3, #24]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f022 020c 	bic.w	r2, r2, #12
 800c2a0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	6999      	ldr	r1, [r3, #24]
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	689a      	ldr	r2, [r3, #8]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	430a      	orrs	r2, r1
 800c2b2:	619a      	str	r2, [r3, #24]
 800c2b4:	e060      	b.n	800c378 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2b04      	cmp	r3, #4
 800c2ba:	d11c      	bne.n	800c2f6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800c2cc:	f000 fe3f 	bl	800cf4e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	699a      	ldr	r2, [r3, #24]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c2de:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	6999      	ldr	r1, [r3, #24]
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	689b      	ldr	r3, [r3, #8]
 800c2ea:	021a      	lsls	r2, r3, #8
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	430a      	orrs	r2, r1
 800c2f2:	619a      	str	r2, [r3, #24]
 800c2f4:	e040      	b.n	800c378 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2b08      	cmp	r3, #8
 800c2fa:	d11b      	bne.n	800c334 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800c30c:	f000 fe8c 	bl	800d028 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	69da      	ldr	r2, [r3, #28]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f022 020c 	bic.w	r2, r2, #12
 800c31e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	69d9      	ldr	r1, [r3, #28]
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	689a      	ldr	r2, [r3, #8]
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	430a      	orrs	r2, r1
 800c330:	61da      	str	r2, [r3, #28]
 800c332:	e021      	b.n	800c378 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2b0c      	cmp	r3, #12
 800c338:	d11c      	bne.n	800c374 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800c34a:	f000 fea9 	bl	800d0a0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	69da      	ldr	r2, [r3, #28]
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c35c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	69d9      	ldr	r1, [r3, #28]
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	689b      	ldr	r3, [r3, #8]
 800c368:	021a      	lsls	r2, r3, #8
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	430a      	orrs	r2, r1
 800c370:	61da      	str	r2, [r3, #28]
 800c372:	e001      	b.n	800c378 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800c374:	2301      	movs	r3, #1
 800c376:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2200      	movs	r2, #0
 800c37c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c380:	7dfb      	ldrb	r3, [r7, #23]
}
 800c382:	4618      	mov	r0, r3
 800c384:	3718      	adds	r7, #24
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
	...

0800c38c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b086      	sub	sp, #24
 800c390:	af00      	add	r7, sp, #0
 800c392:	60f8      	str	r0, [r7, #12]
 800c394:	60b9      	str	r1, [r7, #8]
 800c396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c398:	2300      	movs	r3, #0
 800c39a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d101      	bne.n	800c3aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c3a6:	2302      	movs	r3, #2
 800c3a8:	e0ff      	b.n	800c5aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2b14      	cmp	r3, #20
 800c3b6:	f200 80f0 	bhi.w	800c59a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c3ba:	a201      	add	r2, pc, #4	; (adr r2, 800c3c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c0:	0800c415 	.word	0x0800c415
 800c3c4:	0800c59b 	.word	0x0800c59b
 800c3c8:	0800c59b 	.word	0x0800c59b
 800c3cc:	0800c59b 	.word	0x0800c59b
 800c3d0:	0800c455 	.word	0x0800c455
 800c3d4:	0800c59b 	.word	0x0800c59b
 800c3d8:	0800c59b 	.word	0x0800c59b
 800c3dc:	0800c59b 	.word	0x0800c59b
 800c3e0:	0800c497 	.word	0x0800c497
 800c3e4:	0800c59b 	.word	0x0800c59b
 800c3e8:	0800c59b 	.word	0x0800c59b
 800c3ec:	0800c59b 	.word	0x0800c59b
 800c3f0:	0800c4d7 	.word	0x0800c4d7
 800c3f4:	0800c59b 	.word	0x0800c59b
 800c3f8:	0800c59b 	.word	0x0800c59b
 800c3fc:	0800c59b 	.word	0x0800c59b
 800c400:	0800c519 	.word	0x0800c519
 800c404:	0800c59b 	.word	0x0800c59b
 800c408:	0800c59b 	.word	0x0800c59b
 800c40c:	0800c59b 	.word	0x0800c59b
 800c410:	0800c559 	.word	0x0800c559
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	68b9      	ldr	r1, [r7, #8]
 800c41a:	4618      	mov	r0, r3
 800c41c:	f000 fa96 	bl	800c94c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	699a      	ldr	r2, [r3, #24]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f042 0208 	orr.w	r2, r2, #8
 800c42e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	699a      	ldr	r2, [r3, #24]
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f022 0204 	bic.w	r2, r2, #4
 800c43e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	6999      	ldr	r1, [r3, #24]
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	691a      	ldr	r2, [r3, #16]
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	430a      	orrs	r2, r1
 800c450:	619a      	str	r2, [r3, #24]
      break;
 800c452:	e0a5      	b.n	800c5a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	68b9      	ldr	r1, [r7, #8]
 800c45a:	4618      	mov	r0, r3
 800c45c:	f000 fae8 	bl	800ca30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	699a      	ldr	r2, [r3, #24]
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c46e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	699a      	ldr	r2, [r3, #24]
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c47e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	6999      	ldr	r1, [r3, #24]
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	691b      	ldr	r3, [r3, #16]
 800c48a:	021a      	lsls	r2, r3, #8
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	430a      	orrs	r2, r1
 800c492:	619a      	str	r2, [r3, #24]
      break;
 800c494:	e084      	b.n	800c5a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	68b9      	ldr	r1, [r7, #8]
 800c49c:	4618      	mov	r0, r3
 800c49e:	f000 fb3f 	bl	800cb20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	69da      	ldr	r2, [r3, #28]
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f042 0208 	orr.w	r2, r2, #8
 800c4b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	69da      	ldr	r2, [r3, #28]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f022 0204 	bic.w	r2, r2, #4
 800c4c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	69d9      	ldr	r1, [r3, #28]
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	691a      	ldr	r2, [r3, #16]
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	430a      	orrs	r2, r1
 800c4d2:	61da      	str	r2, [r3, #28]
      break;
 800c4d4:	e064      	b.n	800c5a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	68b9      	ldr	r1, [r7, #8]
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f000 fb95 	bl	800cc0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	69da      	ldr	r2, [r3, #28]
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	69da      	ldr	r2, [r3, #28]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	69d9      	ldr	r1, [r3, #28]
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	691b      	ldr	r3, [r3, #16]
 800c50c:	021a      	lsls	r2, r3, #8
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	430a      	orrs	r2, r1
 800c514:	61da      	str	r2, [r3, #28]
      break;
 800c516:	e043      	b.n	800c5a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	68b9      	ldr	r1, [r7, #8]
 800c51e:	4618      	mov	r0, r3
 800c520:	f000 fbcc 	bl	800ccbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f042 0208 	orr.w	r2, r2, #8
 800c532:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f022 0204 	bic.w	r2, r2, #4
 800c542:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	691a      	ldr	r2, [r3, #16]
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	430a      	orrs	r2, r1
 800c554:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c556:	e023      	b.n	800c5a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	68b9      	ldr	r1, [r7, #8]
 800c55e:	4618      	mov	r0, r3
 800c560:	f000 fbfe 	bl	800cd60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c572:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c582:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	021a      	lsls	r2, r3, #8
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	430a      	orrs	r2, r1
 800c596:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c598:	e002      	b.n	800c5a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c59a:	2301      	movs	r3, #1
 800c59c:	75fb      	strb	r3, [r7, #23]
      break;
 800c59e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c5a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3718      	adds	r7, #24
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop

0800c5b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d101      	bne.n	800c5d0 <HAL_TIM_ConfigClockSource+0x1c>
 800c5cc:	2302      	movs	r3, #2
 800c5ce:	e0b4      	b.n	800c73a <HAL_TIM_ConfigClockSource+0x186>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2202      	movs	r2, #2
 800c5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	689b      	ldr	r3, [r3, #8]
 800c5e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c5e8:	68ba      	ldr	r2, [r7, #8]
 800c5ea:	4b56      	ldr	r3, [pc, #344]	; (800c744 <HAL_TIM_ConfigClockSource+0x190>)
 800c5ec:	4013      	ands	r3, r2
 800c5ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c5f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	68ba      	ldr	r2, [r7, #8]
 800c5fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c608:	d03e      	beq.n	800c688 <HAL_TIM_ConfigClockSource+0xd4>
 800c60a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c60e:	f200 8087 	bhi.w	800c720 <HAL_TIM_ConfigClockSource+0x16c>
 800c612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c616:	f000 8086 	beq.w	800c726 <HAL_TIM_ConfigClockSource+0x172>
 800c61a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c61e:	d87f      	bhi.n	800c720 <HAL_TIM_ConfigClockSource+0x16c>
 800c620:	2b70      	cmp	r3, #112	; 0x70
 800c622:	d01a      	beq.n	800c65a <HAL_TIM_ConfigClockSource+0xa6>
 800c624:	2b70      	cmp	r3, #112	; 0x70
 800c626:	d87b      	bhi.n	800c720 <HAL_TIM_ConfigClockSource+0x16c>
 800c628:	2b60      	cmp	r3, #96	; 0x60
 800c62a:	d050      	beq.n	800c6ce <HAL_TIM_ConfigClockSource+0x11a>
 800c62c:	2b60      	cmp	r3, #96	; 0x60
 800c62e:	d877      	bhi.n	800c720 <HAL_TIM_ConfigClockSource+0x16c>
 800c630:	2b50      	cmp	r3, #80	; 0x50
 800c632:	d03c      	beq.n	800c6ae <HAL_TIM_ConfigClockSource+0xfa>
 800c634:	2b50      	cmp	r3, #80	; 0x50
 800c636:	d873      	bhi.n	800c720 <HAL_TIM_ConfigClockSource+0x16c>
 800c638:	2b40      	cmp	r3, #64	; 0x40
 800c63a:	d058      	beq.n	800c6ee <HAL_TIM_ConfigClockSource+0x13a>
 800c63c:	2b40      	cmp	r3, #64	; 0x40
 800c63e:	d86f      	bhi.n	800c720 <HAL_TIM_ConfigClockSource+0x16c>
 800c640:	2b30      	cmp	r3, #48	; 0x30
 800c642:	d064      	beq.n	800c70e <HAL_TIM_ConfigClockSource+0x15a>
 800c644:	2b30      	cmp	r3, #48	; 0x30
 800c646:	d86b      	bhi.n	800c720 <HAL_TIM_ConfigClockSource+0x16c>
 800c648:	2b20      	cmp	r3, #32
 800c64a:	d060      	beq.n	800c70e <HAL_TIM_ConfigClockSource+0x15a>
 800c64c:	2b20      	cmp	r3, #32
 800c64e:	d867      	bhi.n	800c720 <HAL_TIM_ConfigClockSource+0x16c>
 800c650:	2b00      	cmp	r3, #0
 800c652:	d05c      	beq.n	800c70e <HAL_TIM_ConfigClockSource+0x15a>
 800c654:	2b10      	cmp	r3, #16
 800c656:	d05a      	beq.n	800c70e <HAL_TIM_ConfigClockSource+0x15a>
 800c658:	e062      	b.n	800c720 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c66a:	f000 fd71 	bl	800d150 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	689b      	ldr	r3, [r3, #8]
 800c674:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c67c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	68ba      	ldr	r2, [r7, #8]
 800c684:	609a      	str	r2, [r3, #8]
      break;
 800c686:	e04f      	b.n	800c728 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c698:	f000 fd5a 	bl	800d150 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	689a      	ldr	r2, [r3, #8]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c6aa:	609a      	str	r2, [r3, #8]
      break;
 800c6ac:	e03c      	b.n	800c728 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	f000 fc18 	bl	800cef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2150      	movs	r1, #80	; 0x50
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f000 fd27 	bl	800d11a <TIM_ITRx_SetConfig>
      break;
 800c6cc:	e02c      	b.n	800c728 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6da:	461a      	mov	r2, r3
 800c6dc:	f000 fc74 	bl	800cfc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	2160      	movs	r1, #96	; 0x60
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f000 fd17 	bl	800d11a <TIM_ITRx_SetConfig>
      break;
 800c6ec:	e01c      	b.n	800c728 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	f000 fbf8 	bl	800cef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2140      	movs	r1, #64	; 0x40
 800c706:	4618      	mov	r0, r3
 800c708:	f000 fd07 	bl	800d11a <TIM_ITRx_SetConfig>
      break;
 800c70c:	e00c      	b.n	800c728 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4619      	mov	r1, r3
 800c718:	4610      	mov	r0, r2
 800c71a:	f000 fcfe 	bl	800d11a <TIM_ITRx_SetConfig>
      break;
 800c71e:	e003      	b.n	800c728 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c720:	2301      	movs	r3, #1
 800c722:	73fb      	strb	r3, [r7, #15]
      break;
 800c724:	e000      	b.n	800c728 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c726:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2201      	movs	r2, #1
 800c72c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c738:	7bfb      	ldrb	r3, [r7, #15]
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	fffeff88 	.word	0xfffeff88

0800c748 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c748:	b480      	push	{r7}
 800c74a:	b085      	sub	sp, #20
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800c752:	2300      	movs	r3, #0
 800c754:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	2b0c      	cmp	r3, #12
 800c75a:	d831      	bhi.n	800c7c0 <HAL_TIM_ReadCapturedValue+0x78>
 800c75c:	a201      	add	r2, pc, #4	; (adr r2, 800c764 <HAL_TIM_ReadCapturedValue+0x1c>)
 800c75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c762:	bf00      	nop
 800c764:	0800c799 	.word	0x0800c799
 800c768:	0800c7c1 	.word	0x0800c7c1
 800c76c:	0800c7c1 	.word	0x0800c7c1
 800c770:	0800c7c1 	.word	0x0800c7c1
 800c774:	0800c7a3 	.word	0x0800c7a3
 800c778:	0800c7c1 	.word	0x0800c7c1
 800c77c:	0800c7c1 	.word	0x0800c7c1
 800c780:	0800c7c1 	.word	0x0800c7c1
 800c784:	0800c7ad 	.word	0x0800c7ad
 800c788:	0800c7c1 	.word	0x0800c7c1
 800c78c:	0800c7c1 	.word	0x0800c7c1
 800c790:	0800c7c1 	.word	0x0800c7c1
 800c794:	0800c7b7 	.word	0x0800c7b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c79e:	60fb      	str	r3, [r7, #12]

      break;
 800c7a0:	e00f      	b.n	800c7c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7a8:	60fb      	str	r3, [r7, #12]

      break;
 800c7aa:	e00a      	b.n	800c7c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7b2:	60fb      	str	r3, [r7, #12]

      break;
 800c7b4:	e005      	b.n	800c7c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7bc:	60fb      	str	r3, [r7, #12]

      break;
 800c7be:	e000      	b.n	800c7c2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800c7c0:	bf00      	nop
  }

  return tmpreg;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3714      	adds	r7, #20
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr

0800c7d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b083      	sub	sp, #12
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c7d8:	bf00      	nop
 800c7da:	370c      	adds	r7, #12
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr

0800c7e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c7ec:	bf00      	nop
 800c7ee:	370c      	adds	r7, #12
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr

0800c7f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c800:	bf00      	nop
 800c802:	370c      	adds	r7, #12
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr

0800c80c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b085      	sub	sp, #20
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	4a40      	ldr	r2, [pc, #256]	; (800c920 <TIM_Base_SetConfig+0x114>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d013      	beq.n	800c84c <TIM_Base_SetConfig+0x40>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c82a:	d00f      	beq.n	800c84c <TIM_Base_SetConfig+0x40>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4a3d      	ldr	r2, [pc, #244]	; (800c924 <TIM_Base_SetConfig+0x118>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d00b      	beq.n	800c84c <TIM_Base_SetConfig+0x40>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	4a3c      	ldr	r2, [pc, #240]	; (800c928 <TIM_Base_SetConfig+0x11c>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d007      	beq.n	800c84c <TIM_Base_SetConfig+0x40>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	4a3b      	ldr	r2, [pc, #236]	; (800c92c <TIM_Base_SetConfig+0x120>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d003      	beq.n	800c84c <TIM_Base_SetConfig+0x40>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	4a3a      	ldr	r2, [pc, #232]	; (800c930 <TIM_Base_SetConfig+0x124>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d108      	bne.n	800c85e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	68fa      	ldr	r2, [r7, #12]
 800c85a:	4313      	orrs	r3, r2
 800c85c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	4a2f      	ldr	r2, [pc, #188]	; (800c920 <TIM_Base_SetConfig+0x114>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d02b      	beq.n	800c8be <TIM_Base_SetConfig+0xb2>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c86c:	d027      	beq.n	800c8be <TIM_Base_SetConfig+0xb2>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4a2c      	ldr	r2, [pc, #176]	; (800c924 <TIM_Base_SetConfig+0x118>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d023      	beq.n	800c8be <TIM_Base_SetConfig+0xb2>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	4a2b      	ldr	r2, [pc, #172]	; (800c928 <TIM_Base_SetConfig+0x11c>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d01f      	beq.n	800c8be <TIM_Base_SetConfig+0xb2>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	4a2a      	ldr	r2, [pc, #168]	; (800c92c <TIM_Base_SetConfig+0x120>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d01b      	beq.n	800c8be <TIM_Base_SetConfig+0xb2>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	4a29      	ldr	r2, [pc, #164]	; (800c930 <TIM_Base_SetConfig+0x124>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d017      	beq.n	800c8be <TIM_Base_SetConfig+0xb2>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	4a28      	ldr	r2, [pc, #160]	; (800c934 <TIM_Base_SetConfig+0x128>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d013      	beq.n	800c8be <TIM_Base_SetConfig+0xb2>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	4a27      	ldr	r2, [pc, #156]	; (800c938 <TIM_Base_SetConfig+0x12c>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d00f      	beq.n	800c8be <TIM_Base_SetConfig+0xb2>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	4a26      	ldr	r2, [pc, #152]	; (800c93c <TIM_Base_SetConfig+0x130>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d00b      	beq.n	800c8be <TIM_Base_SetConfig+0xb2>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	4a25      	ldr	r2, [pc, #148]	; (800c940 <TIM_Base_SetConfig+0x134>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d007      	beq.n	800c8be <TIM_Base_SetConfig+0xb2>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	4a24      	ldr	r2, [pc, #144]	; (800c944 <TIM_Base_SetConfig+0x138>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d003      	beq.n	800c8be <TIM_Base_SetConfig+0xb2>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	4a23      	ldr	r2, [pc, #140]	; (800c948 <TIM_Base_SetConfig+0x13c>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d108      	bne.n	800c8d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	68db      	ldr	r3, [r3, #12]
 800c8ca:	68fa      	ldr	r2, [r7, #12]
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	695b      	ldr	r3, [r3, #20]
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	68fa      	ldr	r2, [r7, #12]
 800c8e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	689a      	ldr	r2, [r3, #8]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	4a0a      	ldr	r2, [pc, #40]	; (800c920 <TIM_Base_SetConfig+0x114>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d003      	beq.n	800c904 <TIM_Base_SetConfig+0xf8>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	4a0c      	ldr	r2, [pc, #48]	; (800c930 <TIM_Base_SetConfig+0x124>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d103      	bne.n	800c90c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	691a      	ldr	r2, [r3, #16]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2201      	movs	r2, #1
 800c910:	615a      	str	r2, [r3, #20]
}
 800c912:	bf00      	nop
 800c914:	3714      	adds	r7, #20
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	40010000 	.word	0x40010000
 800c924:	40000400 	.word	0x40000400
 800c928:	40000800 	.word	0x40000800
 800c92c:	40000c00 	.word	0x40000c00
 800c930:	40010400 	.word	0x40010400
 800c934:	40014000 	.word	0x40014000
 800c938:	40014400 	.word	0x40014400
 800c93c:	40014800 	.word	0x40014800
 800c940:	40001800 	.word	0x40001800
 800c944:	40001c00 	.word	0x40001c00
 800c948:	40002000 	.word	0x40002000

0800c94c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b087      	sub	sp, #28
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6a1b      	ldr	r3, [r3, #32]
 800c95a:	f023 0201 	bic.w	r2, r3, #1
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6a1b      	ldr	r3, [r3, #32]
 800c966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	699b      	ldr	r3, [r3, #24]
 800c972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c974:	68fa      	ldr	r2, [r7, #12]
 800c976:	4b2b      	ldr	r3, [pc, #172]	; (800ca24 <TIM_OC1_SetConfig+0xd8>)
 800c978:	4013      	ands	r3, r2
 800c97a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f023 0303 	bic.w	r3, r3, #3
 800c982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	68fa      	ldr	r2, [r7, #12]
 800c98a:	4313      	orrs	r3, r2
 800c98c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	f023 0302 	bic.w	r3, r3, #2
 800c994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	689b      	ldr	r3, [r3, #8]
 800c99a:	697a      	ldr	r2, [r7, #20]
 800c99c:	4313      	orrs	r3, r2
 800c99e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	4a21      	ldr	r2, [pc, #132]	; (800ca28 <TIM_OC1_SetConfig+0xdc>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d003      	beq.n	800c9b0 <TIM_OC1_SetConfig+0x64>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	4a20      	ldr	r2, [pc, #128]	; (800ca2c <TIM_OC1_SetConfig+0xe0>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d10c      	bne.n	800c9ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	f023 0308 	bic.w	r3, r3, #8
 800c9b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	68db      	ldr	r3, [r3, #12]
 800c9bc:	697a      	ldr	r2, [r7, #20]
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	f023 0304 	bic.w	r3, r3, #4
 800c9c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4a16      	ldr	r2, [pc, #88]	; (800ca28 <TIM_OC1_SetConfig+0xdc>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d003      	beq.n	800c9da <TIM_OC1_SetConfig+0x8e>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	4a15      	ldr	r2, [pc, #84]	; (800ca2c <TIM_OC1_SetConfig+0xe0>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d111      	bne.n	800c9fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c9e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	695b      	ldr	r3, [r3, #20]
 800c9ee:	693a      	ldr	r2, [r7, #16]
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	699b      	ldr	r3, [r3, #24]
 800c9f8:	693a      	ldr	r2, [r7, #16]
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	693a      	ldr	r2, [r7, #16]
 800ca02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	685a      	ldr	r2, [r3, #4]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	697a      	ldr	r2, [r7, #20]
 800ca16:	621a      	str	r2, [r3, #32]
}
 800ca18:	bf00      	nop
 800ca1a:	371c      	adds	r7, #28
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr
 800ca24:	fffeff8f 	.word	0xfffeff8f
 800ca28:	40010000 	.word	0x40010000
 800ca2c:	40010400 	.word	0x40010400

0800ca30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b087      	sub	sp, #28
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6a1b      	ldr	r3, [r3, #32]
 800ca3e:	f023 0210 	bic.w	r2, r3, #16
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6a1b      	ldr	r3, [r3, #32]
 800ca4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	699b      	ldr	r3, [r3, #24]
 800ca56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ca58:	68fa      	ldr	r2, [r7, #12]
 800ca5a:	4b2e      	ldr	r3, [pc, #184]	; (800cb14 <TIM_OC2_SetConfig+0xe4>)
 800ca5c:	4013      	ands	r3, r2
 800ca5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	021b      	lsls	r3, r3, #8
 800ca6e:	68fa      	ldr	r2, [r7, #12]
 800ca70:	4313      	orrs	r3, r2
 800ca72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	f023 0320 	bic.w	r3, r3, #32
 800ca7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	011b      	lsls	r3, r3, #4
 800ca82:	697a      	ldr	r2, [r7, #20]
 800ca84:	4313      	orrs	r3, r2
 800ca86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4a23      	ldr	r2, [pc, #140]	; (800cb18 <TIM_OC2_SetConfig+0xe8>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d003      	beq.n	800ca98 <TIM_OC2_SetConfig+0x68>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	4a22      	ldr	r2, [pc, #136]	; (800cb1c <TIM_OC2_SetConfig+0xec>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d10d      	bne.n	800cab4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	011b      	lsls	r3, r3, #4
 800caa6:	697a      	ldr	r2, [r7, #20]
 800caa8:	4313      	orrs	r3, r2
 800caaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cab2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	4a18      	ldr	r2, [pc, #96]	; (800cb18 <TIM_OC2_SetConfig+0xe8>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d003      	beq.n	800cac4 <TIM_OC2_SetConfig+0x94>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	4a17      	ldr	r2, [pc, #92]	; (800cb1c <TIM_OC2_SetConfig+0xec>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d113      	bne.n	800caec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800caca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cad2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	695b      	ldr	r3, [r3, #20]
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	693a      	ldr	r2, [r7, #16]
 800cadc:	4313      	orrs	r3, r2
 800cade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	699b      	ldr	r3, [r3, #24]
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	693a      	ldr	r2, [r7, #16]
 800cae8:	4313      	orrs	r3, r2
 800caea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	693a      	ldr	r2, [r7, #16]
 800caf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	68fa      	ldr	r2, [r7, #12]
 800caf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	685a      	ldr	r2, [r3, #4]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	697a      	ldr	r2, [r7, #20]
 800cb04:	621a      	str	r2, [r3, #32]
}
 800cb06:	bf00      	nop
 800cb08:	371c      	adds	r7, #28
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb10:	4770      	bx	lr
 800cb12:	bf00      	nop
 800cb14:	feff8fff 	.word	0xfeff8fff
 800cb18:	40010000 	.word	0x40010000
 800cb1c:	40010400 	.word	0x40010400

0800cb20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b087      	sub	sp, #28
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6a1b      	ldr	r3, [r3, #32]
 800cb2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6a1b      	ldr	r3, [r3, #32]
 800cb3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	69db      	ldr	r3, [r3, #28]
 800cb46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	4b2d      	ldr	r3, [pc, #180]	; (800cc00 <TIM_OC3_SetConfig+0xe0>)
 800cb4c:	4013      	ands	r3, r2
 800cb4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f023 0303 	bic.w	r3, r3, #3
 800cb56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cb68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	689b      	ldr	r3, [r3, #8]
 800cb6e:	021b      	lsls	r3, r3, #8
 800cb70:	697a      	ldr	r2, [r7, #20]
 800cb72:	4313      	orrs	r3, r2
 800cb74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	4a22      	ldr	r2, [pc, #136]	; (800cc04 <TIM_OC3_SetConfig+0xe4>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d003      	beq.n	800cb86 <TIM_OC3_SetConfig+0x66>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4a21      	ldr	r2, [pc, #132]	; (800cc08 <TIM_OC3_SetConfig+0xe8>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d10d      	bne.n	800cba2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cb8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	68db      	ldr	r3, [r3, #12]
 800cb92:	021b      	lsls	r3, r3, #8
 800cb94:	697a      	ldr	r2, [r7, #20]
 800cb96:	4313      	orrs	r3, r2
 800cb98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4a17      	ldr	r2, [pc, #92]	; (800cc04 <TIM_OC3_SetConfig+0xe4>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d003      	beq.n	800cbb2 <TIM_OC3_SetConfig+0x92>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	4a16      	ldr	r2, [pc, #88]	; (800cc08 <TIM_OC3_SetConfig+0xe8>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d113      	bne.n	800cbda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cbb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cbc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	695b      	ldr	r3, [r3, #20]
 800cbc6:	011b      	lsls	r3, r3, #4
 800cbc8:	693a      	ldr	r2, [r7, #16]
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	699b      	ldr	r3, [r3, #24]
 800cbd2:	011b      	lsls	r3, r3, #4
 800cbd4:	693a      	ldr	r2, [r7, #16]
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	693a      	ldr	r2, [r7, #16]
 800cbde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	685a      	ldr	r2, [r3, #4]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	697a      	ldr	r2, [r7, #20]
 800cbf2:	621a      	str	r2, [r3, #32]
}
 800cbf4:	bf00      	nop
 800cbf6:	371c      	adds	r7, #28
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr
 800cc00:	fffeff8f 	.word	0xfffeff8f
 800cc04:	40010000 	.word	0x40010000
 800cc08:	40010400 	.word	0x40010400

0800cc0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b087      	sub	sp, #28
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6a1b      	ldr	r3, [r3, #32]
 800cc1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6a1b      	ldr	r3, [r3, #32]
 800cc26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	69db      	ldr	r3, [r3, #28]
 800cc32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cc34:	68fa      	ldr	r2, [r7, #12]
 800cc36:	4b1e      	ldr	r3, [pc, #120]	; (800ccb0 <TIM_OC4_SetConfig+0xa4>)
 800cc38:	4013      	ands	r3, r2
 800cc3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	021b      	lsls	r3, r3, #8
 800cc4a:	68fa      	ldr	r2, [r7, #12]
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cc56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	689b      	ldr	r3, [r3, #8]
 800cc5c:	031b      	lsls	r3, r3, #12
 800cc5e:	693a      	ldr	r2, [r7, #16]
 800cc60:	4313      	orrs	r3, r2
 800cc62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	4a13      	ldr	r2, [pc, #76]	; (800ccb4 <TIM_OC4_SetConfig+0xa8>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d003      	beq.n	800cc74 <TIM_OC4_SetConfig+0x68>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	4a12      	ldr	r2, [pc, #72]	; (800ccb8 <TIM_OC4_SetConfig+0xac>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d109      	bne.n	800cc88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	695b      	ldr	r3, [r3, #20]
 800cc80:	019b      	lsls	r3, r3, #6
 800cc82:	697a      	ldr	r2, [r7, #20]
 800cc84:	4313      	orrs	r3, r2
 800cc86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	697a      	ldr	r2, [r7, #20]
 800cc8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	68fa      	ldr	r2, [r7, #12]
 800cc92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	685a      	ldr	r2, [r3, #4]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	693a      	ldr	r2, [r7, #16]
 800cca0:	621a      	str	r2, [r3, #32]
}
 800cca2:	bf00      	nop
 800cca4:	371c      	adds	r7, #28
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr
 800ccae:	bf00      	nop
 800ccb0:	feff8fff 	.word	0xfeff8fff
 800ccb4:	40010000 	.word	0x40010000
 800ccb8:	40010400 	.word	0x40010400

0800ccbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b087      	sub	sp, #28
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6a1b      	ldr	r3, [r3, #32]
 800ccca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6a1b      	ldr	r3, [r3, #32]
 800ccd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	4b1b      	ldr	r3, [pc, #108]	; (800cd54 <TIM_OC5_SetConfig+0x98>)
 800cce8:	4013      	ands	r3, r2
 800ccea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ccfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	689b      	ldr	r3, [r3, #8]
 800cd02:	041b      	lsls	r3, r3, #16
 800cd04:	693a      	ldr	r2, [r7, #16]
 800cd06:	4313      	orrs	r3, r2
 800cd08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4a12      	ldr	r2, [pc, #72]	; (800cd58 <TIM_OC5_SetConfig+0x9c>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d003      	beq.n	800cd1a <TIM_OC5_SetConfig+0x5e>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	4a11      	ldr	r2, [pc, #68]	; (800cd5c <TIM_OC5_SetConfig+0xa0>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d109      	bne.n	800cd2e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	695b      	ldr	r3, [r3, #20]
 800cd26:	021b      	lsls	r3, r3, #8
 800cd28:	697a      	ldr	r2, [r7, #20]
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	697a      	ldr	r2, [r7, #20]
 800cd32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	68fa      	ldr	r2, [r7, #12]
 800cd38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	685a      	ldr	r2, [r3, #4]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	693a      	ldr	r2, [r7, #16]
 800cd46:	621a      	str	r2, [r3, #32]
}
 800cd48:	bf00      	nop
 800cd4a:	371c      	adds	r7, #28
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr
 800cd54:	fffeff8f 	.word	0xfffeff8f
 800cd58:	40010000 	.word	0x40010000
 800cd5c:	40010400 	.word	0x40010400

0800cd60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b087      	sub	sp, #28
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6a1b      	ldr	r3, [r3, #32]
 800cd6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6a1b      	ldr	r3, [r3, #32]
 800cd7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	685b      	ldr	r3, [r3, #4]
 800cd80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	4b1c      	ldr	r3, [pc, #112]	; (800cdfc <TIM_OC6_SetConfig+0x9c>)
 800cd8c:	4013      	ands	r3, r2
 800cd8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	021b      	lsls	r3, r3, #8
 800cd96:	68fa      	ldr	r2, [r7, #12]
 800cd98:	4313      	orrs	r3, r2
 800cd9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cda2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	689b      	ldr	r3, [r3, #8]
 800cda8:	051b      	lsls	r3, r3, #20
 800cdaa:	693a      	ldr	r2, [r7, #16]
 800cdac:	4313      	orrs	r3, r2
 800cdae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	4a13      	ldr	r2, [pc, #76]	; (800ce00 <TIM_OC6_SetConfig+0xa0>)
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d003      	beq.n	800cdc0 <TIM_OC6_SetConfig+0x60>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	4a12      	ldr	r2, [pc, #72]	; (800ce04 <TIM_OC6_SetConfig+0xa4>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d109      	bne.n	800cdd4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cdc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	695b      	ldr	r3, [r3, #20]
 800cdcc:	029b      	lsls	r3, r3, #10
 800cdce:	697a      	ldr	r2, [r7, #20]
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	697a      	ldr	r2, [r7, #20]
 800cdd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	68fa      	ldr	r2, [r7, #12]
 800cdde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	685a      	ldr	r2, [r3, #4]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	693a      	ldr	r2, [r7, #16]
 800cdec:	621a      	str	r2, [r3, #32]
}
 800cdee:	bf00      	nop
 800cdf0:	371c      	adds	r7, #28
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop
 800cdfc:	feff8fff 	.word	0xfeff8fff
 800ce00:	40010000 	.word	0x40010000
 800ce04:	40010400 	.word	0x40010400

0800ce08 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b087      	sub	sp, #28
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	60f8      	str	r0, [r7, #12]
 800ce10:	60b9      	str	r1, [r7, #8]
 800ce12:	607a      	str	r2, [r7, #4]
 800ce14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	6a1b      	ldr	r3, [r3, #32]
 800ce1a:	f023 0201 	bic.w	r2, r3, #1
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	699b      	ldr	r3, [r3, #24]
 800ce26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	6a1b      	ldr	r3, [r3, #32]
 800ce2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	4a28      	ldr	r2, [pc, #160]	; (800ced4 <TIM_TI1_SetConfig+0xcc>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d01b      	beq.n	800ce6e <TIM_TI1_SetConfig+0x66>
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce3c:	d017      	beq.n	800ce6e <TIM_TI1_SetConfig+0x66>
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	4a25      	ldr	r2, [pc, #148]	; (800ced8 <TIM_TI1_SetConfig+0xd0>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d013      	beq.n	800ce6e <TIM_TI1_SetConfig+0x66>
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	4a24      	ldr	r2, [pc, #144]	; (800cedc <TIM_TI1_SetConfig+0xd4>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d00f      	beq.n	800ce6e <TIM_TI1_SetConfig+0x66>
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	4a23      	ldr	r2, [pc, #140]	; (800cee0 <TIM_TI1_SetConfig+0xd8>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d00b      	beq.n	800ce6e <TIM_TI1_SetConfig+0x66>
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	4a22      	ldr	r2, [pc, #136]	; (800cee4 <TIM_TI1_SetConfig+0xdc>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d007      	beq.n	800ce6e <TIM_TI1_SetConfig+0x66>
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	4a21      	ldr	r2, [pc, #132]	; (800cee8 <TIM_TI1_SetConfig+0xe0>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d003      	beq.n	800ce6e <TIM_TI1_SetConfig+0x66>
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	4a20      	ldr	r2, [pc, #128]	; (800ceec <TIM_TI1_SetConfig+0xe4>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d101      	bne.n	800ce72 <TIM_TI1_SetConfig+0x6a>
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e000      	b.n	800ce74 <TIM_TI1_SetConfig+0x6c>
 800ce72:	2300      	movs	r3, #0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d008      	beq.n	800ce8a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	f023 0303 	bic.w	r3, r3, #3
 800ce7e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ce80:	697a      	ldr	r2, [r7, #20]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	4313      	orrs	r3, r2
 800ce86:	617b      	str	r3, [r7, #20]
 800ce88:	e003      	b.n	800ce92 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	f043 0301 	orr.w	r3, r3, #1
 800ce90:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	011b      	lsls	r3, r3, #4
 800ce9e:	b2db      	uxtb	r3, r3
 800cea0:	697a      	ldr	r2, [r7, #20]
 800cea2:	4313      	orrs	r3, r2
 800cea4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	f023 030a 	bic.w	r3, r3, #10
 800ceac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	f003 030a 	and.w	r3, r3, #10
 800ceb4:	693a      	ldr	r2, [r7, #16]
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	697a      	ldr	r2, [r7, #20]
 800cebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	693a      	ldr	r2, [r7, #16]
 800cec4:	621a      	str	r2, [r3, #32]
}
 800cec6:	bf00      	nop
 800cec8:	371c      	adds	r7, #28
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr
 800ced2:	bf00      	nop
 800ced4:	40010000 	.word	0x40010000
 800ced8:	40000400 	.word	0x40000400
 800cedc:	40000800 	.word	0x40000800
 800cee0:	40000c00 	.word	0x40000c00
 800cee4:	40010400 	.word	0x40010400
 800cee8:	40014000 	.word	0x40014000
 800ceec:	40001800 	.word	0x40001800

0800cef0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b087      	sub	sp, #28
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6a1b      	ldr	r3, [r3, #32]
 800cf00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	6a1b      	ldr	r3, [r3, #32]
 800cf06:	f023 0201 	bic.w	r2, r3, #1
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	699b      	ldr	r3, [r3, #24]
 800cf12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cf1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	011b      	lsls	r3, r3, #4
 800cf20:	693a      	ldr	r2, [r7, #16]
 800cf22:	4313      	orrs	r3, r2
 800cf24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	f023 030a 	bic.w	r3, r3, #10
 800cf2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cf2e:	697a      	ldr	r2, [r7, #20]
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	4313      	orrs	r3, r2
 800cf34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	693a      	ldr	r2, [r7, #16]
 800cf3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	697a      	ldr	r2, [r7, #20]
 800cf40:	621a      	str	r2, [r3, #32]
}
 800cf42:	bf00      	nop
 800cf44:	371c      	adds	r7, #28
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr

0800cf4e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cf4e:	b480      	push	{r7}
 800cf50:	b087      	sub	sp, #28
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	60f8      	str	r0, [r7, #12]
 800cf56:	60b9      	str	r1, [r7, #8]
 800cf58:	607a      	str	r2, [r7, #4]
 800cf5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	6a1b      	ldr	r3, [r3, #32]
 800cf60:	f023 0210 	bic.w	r2, r3, #16
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	699b      	ldr	r3, [r3, #24]
 800cf6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	6a1b      	ldr	r3, [r3, #32]
 800cf72:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	021b      	lsls	r3, r3, #8
 800cf80:	697a      	ldr	r2, [r7, #20]
 800cf82:	4313      	orrs	r3, r2
 800cf84:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cf8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	031b      	lsls	r3, r3, #12
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	697a      	ldr	r2, [r7, #20]
 800cf96:	4313      	orrs	r3, r2
 800cf98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cfa0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	011b      	lsls	r3, r3, #4
 800cfa6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cfaa:	693a      	ldr	r2, [r7, #16]
 800cfac:	4313      	orrs	r3, r2
 800cfae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	697a      	ldr	r2, [r7, #20]
 800cfb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	693a      	ldr	r2, [r7, #16]
 800cfba:	621a      	str	r2, [r3, #32]
}
 800cfbc:	bf00      	nop
 800cfbe:	371c      	adds	r7, #28
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b087      	sub	sp, #28
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	60f8      	str	r0, [r7, #12]
 800cfd0:	60b9      	str	r1, [r7, #8]
 800cfd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	6a1b      	ldr	r3, [r3, #32]
 800cfd8:	f023 0210 	bic.w	r2, r3, #16
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	699b      	ldr	r3, [r3, #24]
 800cfe4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	6a1b      	ldr	r3, [r3, #32]
 800cfea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cff2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	031b      	lsls	r3, r3, #12
 800cff8:	697a      	ldr	r2, [r7, #20]
 800cffa:	4313      	orrs	r3, r2
 800cffc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d004:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	011b      	lsls	r3, r3, #4
 800d00a:	693a      	ldr	r2, [r7, #16]
 800d00c:	4313      	orrs	r3, r2
 800d00e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	697a      	ldr	r2, [r7, #20]
 800d014:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	693a      	ldr	r2, [r7, #16]
 800d01a:	621a      	str	r2, [r3, #32]
}
 800d01c:	bf00      	nop
 800d01e:	371c      	adds	r7, #28
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr

0800d028 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d028:	b480      	push	{r7}
 800d02a:	b087      	sub	sp, #28
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	60b9      	str	r1, [r7, #8]
 800d032:	607a      	str	r2, [r7, #4]
 800d034:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	6a1b      	ldr	r3, [r3, #32]
 800d03a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	69db      	ldr	r3, [r3, #28]
 800d046:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	6a1b      	ldr	r3, [r3, #32]
 800d04c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	f023 0303 	bic.w	r3, r3, #3
 800d054:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800d056:	697a      	ldr	r2, [r7, #20]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	4313      	orrs	r3, r2
 800d05c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d064:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	011b      	lsls	r3, r3, #4
 800d06a:	b2db      	uxtb	r3, r3
 800d06c:	697a      	ldr	r2, [r7, #20]
 800d06e:	4313      	orrs	r3, r2
 800d070:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800d078:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	021b      	lsls	r3, r3, #8
 800d07e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800d082:	693a      	ldr	r2, [r7, #16]
 800d084:	4313      	orrs	r3, r2
 800d086:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	697a      	ldr	r2, [r7, #20]
 800d08c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	693a      	ldr	r2, [r7, #16]
 800d092:	621a      	str	r2, [r3, #32]
}
 800d094:	bf00      	nop
 800d096:	371c      	adds	r7, #28
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b087      	sub	sp, #28
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	60b9      	str	r1, [r7, #8]
 800d0aa:	607a      	str	r2, [r7, #4]
 800d0ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	6a1b      	ldr	r3, [r3, #32]
 800d0b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	69db      	ldr	r3, [r3, #28]
 800d0be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	6a1b      	ldr	r3, [r3, #32]
 800d0c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	021b      	lsls	r3, r3, #8
 800d0d2:	697a      	ldr	r2, [r7, #20]
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d0de:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	031b      	lsls	r3, r3, #12
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	697a      	ldr	r2, [r7, #20]
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800d0f2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	031b      	lsls	r3, r3, #12
 800d0f8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800d0fc:	693a      	ldr	r2, [r7, #16]
 800d0fe:	4313      	orrs	r3, r2
 800d100:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	697a      	ldr	r2, [r7, #20]
 800d106:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	693a      	ldr	r2, [r7, #16]
 800d10c:	621a      	str	r2, [r3, #32]
}
 800d10e:	bf00      	nop
 800d110:	371c      	adds	r7, #28
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr

0800d11a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d11a:	b480      	push	{r7}
 800d11c:	b085      	sub	sp, #20
 800d11e:	af00      	add	r7, sp, #0
 800d120:	6078      	str	r0, [r7, #4]
 800d122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	689b      	ldr	r3, [r3, #8]
 800d128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d132:	683a      	ldr	r2, [r7, #0]
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	4313      	orrs	r3, r2
 800d138:	f043 0307 	orr.w	r3, r3, #7
 800d13c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	68fa      	ldr	r2, [r7, #12]
 800d142:	609a      	str	r2, [r3, #8]
}
 800d144:	bf00      	nop
 800d146:	3714      	adds	r7, #20
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr

0800d150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d150:	b480      	push	{r7}
 800d152:	b087      	sub	sp, #28
 800d154:	af00      	add	r7, sp, #0
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	60b9      	str	r1, [r7, #8]
 800d15a:	607a      	str	r2, [r7, #4]
 800d15c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d16a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	021a      	lsls	r2, r3, #8
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	431a      	orrs	r2, r3
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	4313      	orrs	r3, r2
 800d178:	697a      	ldr	r2, [r7, #20]
 800d17a:	4313      	orrs	r3, r2
 800d17c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	697a      	ldr	r2, [r7, #20]
 800d182:	609a      	str	r2, [r3, #8]
}
 800d184:	bf00      	nop
 800d186:	371c      	adds	r7, #28
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d190:	b480      	push	{r7}
 800d192:	b087      	sub	sp, #28
 800d194:	af00      	add	r7, sp, #0
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	f003 031f 	and.w	r3, r3, #31
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	fa02 f303 	lsl.w	r3, r2, r3
 800d1a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	6a1a      	ldr	r2, [r3, #32]
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	43db      	mvns	r3, r3
 800d1b2:	401a      	ands	r2, r3
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	6a1a      	ldr	r2, [r3, #32]
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	f003 031f 	and.w	r3, r3, #31
 800d1c2:	6879      	ldr	r1, [r7, #4]
 800d1c4:	fa01 f303 	lsl.w	r3, r1, r3
 800d1c8:	431a      	orrs	r2, r3
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	621a      	str	r2, [r3, #32]
}
 800d1ce:	bf00      	nop
 800d1d0:	371c      	adds	r7, #28
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr
	...

0800d1dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b085      	sub	sp, #20
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d101      	bne.n	800d1f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d1f0:	2302      	movs	r3, #2
 800d1f2:	e06d      	b.n	800d2d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2202      	movs	r2, #2
 800d200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	689b      	ldr	r3, [r3, #8]
 800d212:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a30      	ldr	r2, [pc, #192]	; (800d2dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d004      	beq.n	800d228 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4a2f      	ldr	r2, [pc, #188]	; (800d2e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d224:	4293      	cmp	r3, r2
 800d226:	d108      	bne.n	800d23a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d22e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	68fa      	ldr	r2, [r7, #12]
 800d236:	4313      	orrs	r3, r2
 800d238:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d240:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	68fa      	ldr	r2, [r7, #12]
 800d248:	4313      	orrs	r3, r2
 800d24a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	68fa      	ldr	r2, [r7, #12]
 800d252:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a20      	ldr	r2, [pc, #128]	; (800d2dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d022      	beq.n	800d2a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d266:	d01d      	beq.n	800d2a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4a1d      	ldr	r2, [pc, #116]	; (800d2e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d018      	beq.n	800d2a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4a1c      	ldr	r2, [pc, #112]	; (800d2e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d013      	beq.n	800d2a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a1a      	ldr	r2, [pc, #104]	; (800d2ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d00e      	beq.n	800d2a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a15      	ldr	r2, [pc, #84]	; (800d2e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d009      	beq.n	800d2a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a16      	ldr	r2, [pc, #88]	; (800d2f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d004      	beq.n	800d2a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4a15      	ldr	r2, [pc, #84]	; (800d2f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d10c      	bne.n	800d2be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	689b      	ldr	r3, [r3, #8]
 800d2b0:	68ba      	ldr	r2, [r7, #8]
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	68ba      	ldr	r2, [r7, #8]
 800d2bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2201      	movs	r2, #1
 800d2c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d2ce:	2300      	movs	r3, #0
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3714      	adds	r7, #20
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr
 800d2dc:	40010000 	.word	0x40010000
 800d2e0:	40010400 	.word	0x40010400
 800d2e4:	40000400 	.word	0x40000400
 800d2e8:	40000800 	.word	0x40000800
 800d2ec:	40000c00 	.word	0x40000c00
 800d2f0:	40014000 	.word	0x40014000
 800d2f4:	40001800 	.word	0x40001800

0800d2f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d302:	2300      	movs	r3, #0
 800d304:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d101      	bne.n	800d314 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d310:	2302      	movs	r3, #2
 800d312:	e065      	b.n	800d3e0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2201      	movs	r2, #1
 800d318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	68db      	ldr	r3, [r3, #12]
 800d326:	4313      	orrs	r3, r2
 800d328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	4313      	orrs	r3, r2
 800d336:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	4313      	orrs	r3, r2
 800d344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4313      	orrs	r3, r2
 800d352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	691b      	ldr	r3, [r3, #16]
 800d35e:	4313      	orrs	r3, r2
 800d360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	695b      	ldr	r3, [r3, #20]
 800d36c:	4313      	orrs	r3, r2
 800d36e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d37a:	4313      	orrs	r3, r2
 800d37c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	699b      	ldr	r3, [r3, #24]
 800d388:	041b      	lsls	r3, r3, #16
 800d38a:	4313      	orrs	r3, r2
 800d38c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	4a16      	ldr	r2, [pc, #88]	; (800d3ec <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d004      	beq.n	800d3a2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4a14      	ldr	r2, [pc, #80]	; (800d3f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d115      	bne.n	800d3ce <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ac:	051b      	lsls	r3, r3, #20
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	69db      	ldr	r3, [r3, #28]
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	6a1b      	ldr	r3, [r3, #32]
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	68fa      	ldr	r2, [r7, #12]
 800d3d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d3de:	2300      	movs	r3, #0
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3714      	adds	r7, #20
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr
 800d3ec:	40010000 	.word	0x40010000
 800d3f0:	40010400 	.word	0x40010400

0800d3f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b083      	sub	sp, #12
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d3fc:	bf00      	nop
 800d3fe:	370c      	adds	r7, #12
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr

0800d408 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d408:	b480      	push	{r7}
 800d40a:	b083      	sub	sp, #12
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d410:	bf00      	nop
 800d412:	370c      	adds	r7, #12
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b083      	sub	sp, #12
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d424:	bf00      	nop
 800d426:	370c      	adds	r7, #12
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d101      	bne.n	800d442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d43e:	2301      	movs	r3, #1
 800d440:	e040      	b.n	800d4c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d446:	2b00      	cmp	r3, #0
 800d448:	d106      	bne.n	800d458 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2200      	movs	r2, #0
 800d44e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f7f7 fe58 	bl	8005108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2224      	movs	r2, #36	; 0x24
 800d45c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f022 0201 	bic.w	r2, r2, #1
 800d46c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 fc2a 	bl	800dcc8 <UART_SetConfig>
 800d474:	4603      	mov	r3, r0
 800d476:	2b01      	cmp	r3, #1
 800d478:	d101      	bne.n	800d47e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d47a:	2301      	movs	r3, #1
 800d47c:	e022      	b.n	800d4c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d482:	2b00      	cmp	r3, #0
 800d484:	d002      	beq.n	800d48c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 fe82 	bl	800e190 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	685a      	ldr	r2, [r3, #4]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d49a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	689a      	ldr	r2, [r3, #8]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d4aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f042 0201 	orr.w	r2, r2, #1
 800d4ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 ff09 	bl	800e2d4 <UART_CheckIdleState>
 800d4c2:	4603      	mov	r3, r0
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3708      	adds	r7, #8
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b08a      	sub	sp, #40	; 0x28
 800d4d0:	af02      	add	r7, sp, #8
 800d4d2:	60f8      	str	r0, [r7, #12]
 800d4d4:	60b9      	str	r1, [r7, #8]
 800d4d6:	603b      	str	r3, [r7, #0]
 800d4d8:	4613      	mov	r3, r2
 800d4da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4e0:	2b20      	cmp	r3, #32
 800d4e2:	d171      	bne.n	800d5c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d002      	beq.n	800d4f0 <HAL_UART_Transmit+0x24>
 800d4ea:	88fb      	ldrh	r3, [r7, #6]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d101      	bne.n	800d4f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	e06a      	b.n	800d5ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2221      	movs	r2, #33	; 0x21
 800d500:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d502:	f7fa f8f3 	bl	80076ec <HAL_GetTick>
 800d506:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	88fa      	ldrh	r2, [r7, #6]
 800d50c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	88fa      	ldrh	r2, [r7, #6]
 800d514:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	689b      	ldr	r3, [r3, #8]
 800d51c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d520:	d108      	bne.n	800d534 <HAL_UART_Transmit+0x68>
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	691b      	ldr	r3, [r3, #16]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d104      	bne.n	800d534 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800d52a:	2300      	movs	r3, #0
 800d52c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	61bb      	str	r3, [r7, #24]
 800d532:	e003      	b.n	800d53c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d538:	2300      	movs	r3, #0
 800d53a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d53c:	e02c      	b.n	800d598 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	9300      	str	r3, [sp, #0]
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	2200      	movs	r2, #0
 800d546:	2180      	movs	r1, #128	; 0x80
 800d548:	68f8      	ldr	r0, [r7, #12]
 800d54a:	f000 fefa 	bl	800e342 <UART_WaitOnFlagUntilTimeout>
 800d54e:	4603      	mov	r3, r0
 800d550:	2b00      	cmp	r3, #0
 800d552:	d001      	beq.n	800d558 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800d554:	2303      	movs	r3, #3
 800d556:	e038      	b.n	800d5ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d10b      	bne.n	800d576 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d55e:	69bb      	ldr	r3, [r7, #24]
 800d560:	881b      	ldrh	r3, [r3, #0]
 800d562:	461a      	mov	r2, r3
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d56c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	3302      	adds	r3, #2
 800d572:	61bb      	str	r3, [r7, #24]
 800d574:	e007      	b.n	800d586 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d576:	69fb      	ldr	r3, [r7, #28]
 800d578:	781a      	ldrb	r2, [r3, #0]
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d580:	69fb      	ldr	r3, [r7, #28]
 800d582:	3301      	adds	r3, #1
 800d584:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d58c:	b29b      	uxth	r3, r3
 800d58e:	3b01      	subs	r3, #1
 800d590:	b29a      	uxth	r2, r3
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d1cc      	bne.n	800d53e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	9300      	str	r3, [sp, #0]
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	2140      	movs	r1, #64	; 0x40
 800d5ae:	68f8      	ldr	r0, [r7, #12]
 800d5b0:	f000 fec7 	bl	800e342 <UART_WaitOnFlagUntilTimeout>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d001      	beq.n	800d5be <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800d5ba:	2303      	movs	r3, #3
 800d5bc:	e005      	b.n	800d5ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2220      	movs	r2, #32
 800d5c2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	e000      	b.n	800d5ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800d5c8:	2302      	movs	r3, #2
  }
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3720      	adds	r7, #32
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b08a      	sub	sp, #40	; 0x28
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	60f8      	str	r0, [r7, #12]
 800d5da:	60b9      	str	r1, [r7, #8]
 800d5dc:	4613      	mov	r3, r2
 800d5de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5e6:	2b20      	cmp	r3, #32
 800d5e8:	d132      	bne.n	800d650 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d002      	beq.n	800d5f6 <HAL_UART_Receive_IT+0x24>
 800d5f0:	88fb      	ldrh	r3, [r7, #6]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d101      	bne.n	800d5fa <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	e02b      	b.n	800d652 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d018      	beq.n	800d640 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	e853 3f00 	ldrex	r3, [r3]
 800d61a:	613b      	str	r3, [r7, #16]
   return(result);
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d622:	627b      	str	r3, [r7, #36]	; 0x24
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	461a      	mov	r2, r3
 800d62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62c:	623b      	str	r3, [r7, #32]
 800d62e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d630:	69f9      	ldr	r1, [r7, #28]
 800d632:	6a3a      	ldr	r2, [r7, #32]
 800d634:	e841 2300 	strex	r3, r2, [r1]
 800d638:	61bb      	str	r3, [r7, #24]
   return(result);
 800d63a:	69bb      	ldr	r3, [r7, #24]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d1e6      	bne.n	800d60e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d640:	88fb      	ldrh	r3, [r7, #6]
 800d642:	461a      	mov	r2, r3
 800d644:	68b9      	ldr	r1, [r7, #8]
 800d646:	68f8      	ldr	r0, [r7, #12]
 800d648:	f000 ff42 	bl	800e4d0 <UART_Start_Receive_IT>
 800d64c:	4603      	mov	r3, r0
 800d64e:	e000      	b.n	800d652 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800d650:	2302      	movs	r3, #2
  }
}
 800d652:	4618      	mov	r0, r3
 800d654:	3728      	adds	r7, #40	; 0x28
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}

0800d65a <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d65a:	b580      	push	{r7, lr}
 800d65c:	b08a      	sub	sp, #40	; 0x28
 800d65e:	af00      	add	r7, sp, #0
 800d660:	60f8      	str	r0, [r7, #12]
 800d662:	60b9      	str	r1, [r7, #8]
 800d664:	4613      	mov	r3, r2
 800d666:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d66e:	2b20      	cmp	r3, #32
 800d670:	d132      	bne.n	800d6d8 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d002      	beq.n	800d67e <HAL_UART_Receive_DMA+0x24>
 800d678:	88fb      	ldrh	r3, [r7, #6]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d101      	bne.n	800d682 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d67e:	2301      	movs	r3, #1
 800d680:	e02b      	b.n	800d6da <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	2200      	movs	r2, #0
 800d686:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	685b      	ldr	r3, [r3, #4]
 800d68e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d692:	2b00      	cmp	r3, #0
 800d694:	d018      	beq.n	800d6c8 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	e853 3f00 	ldrex	r3, [r3]
 800d6a2:	613b      	str	r3, [r7, #16]
   return(result);
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d6aa:	627b      	str	r3, [r7, #36]	; 0x24
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b4:	623b      	str	r3, [r7, #32]
 800d6b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b8:	69f9      	ldr	r1, [r7, #28]
 800d6ba:	6a3a      	ldr	r2, [r7, #32]
 800d6bc:	e841 2300 	strex	r3, r2, [r1]
 800d6c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d6c2:	69bb      	ldr	r3, [r7, #24]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d1e6      	bne.n	800d696 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d6c8:	88fb      	ldrh	r3, [r7, #6]
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	68b9      	ldr	r1, [r7, #8]
 800d6ce:	68f8      	ldr	r0, [r7, #12]
 800d6d0:	f000 ffc4 	bl	800e65c <UART_Start_Receive_DMA>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	e000      	b.n	800d6da <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800d6d8:	2302      	movs	r3, #2
  }
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3728      	adds	r7, #40	; 0x28
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}
	...

0800d6e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b0ba      	sub	sp, #232	; 0xe8
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	69db      	ldr	r3, [r3, #28]
 800d6f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	689b      	ldr	r3, [r3, #8]
 800d706:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d70a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d70e:	f640 030f 	movw	r3, #2063	; 0x80f
 800d712:	4013      	ands	r3, r2
 800d714:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d718:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d115      	bne.n	800d74c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800d720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d724:	f003 0320 	and.w	r3, r3, #32
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d00f      	beq.n	800d74c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d72c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d730:	f003 0320 	and.w	r3, r3, #32
 800d734:	2b00      	cmp	r3, #0
 800d736:	d009      	beq.n	800d74c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	f000 8297 	beq.w	800dc70 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	4798      	blx	r3
      }
      return;
 800d74a:	e291      	b.n	800dc70 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d74c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d750:	2b00      	cmp	r3, #0
 800d752:	f000 8117 	beq.w	800d984 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800d756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d75a:	f003 0301 	and.w	r3, r3, #1
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d106      	bne.n	800d770 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800d762:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d766:	4b85      	ldr	r3, [pc, #532]	; (800d97c <HAL_UART_IRQHandler+0x298>)
 800d768:	4013      	ands	r3, r2
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	f000 810a 	beq.w	800d984 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d774:	f003 0301 	and.w	r3, r3, #1
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d011      	beq.n	800d7a0 <HAL_UART_IRQHandler+0xbc>
 800d77c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d784:	2b00      	cmp	r3, #0
 800d786:	d00b      	beq.n	800d7a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2201      	movs	r2, #1
 800d78e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d796:	f043 0201 	orr.w	r2, r3, #1
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d7a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7a4:	f003 0302 	and.w	r3, r3, #2
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d011      	beq.n	800d7d0 <HAL_UART_IRQHandler+0xec>
 800d7ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7b0:	f003 0301 	and.w	r3, r3, #1
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d00b      	beq.n	800d7d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	2202      	movs	r2, #2
 800d7be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7c6:	f043 0204 	orr.w	r2, r3, #4
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d7d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7d4:	f003 0304 	and.w	r3, r3, #4
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d011      	beq.n	800d800 <HAL_UART_IRQHandler+0x11c>
 800d7dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7e0:	f003 0301 	and.w	r3, r3, #1
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d00b      	beq.n	800d800 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	2204      	movs	r2, #4
 800d7ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7f6:	f043 0202 	orr.w	r2, r3, #2
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d804:	f003 0308 	and.w	r3, r3, #8
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d017      	beq.n	800d83c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d80c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d810:	f003 0320 	and.w	r3, r3, #32
 800d814:	2b00      	cmp	r3, #0
 800d816:	d105      	bne.n	800d824 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800d818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d81c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d820:	2b00      	cmp	r3, #0
 800d822:	d00b      	beq.n	800d83c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	2208      	movs	r2, #8
 800d82a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d832:	f043 0208 	orr.w	r2, r3, #8
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d83c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d844:	2b00      	cmp	r3, #0
 800d846:	d012      	beq.n	800d86e <HAL_UART_IRQHandler+0x18a>
 800d848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d84c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d850:	2b00      	cmp	r3, #0
 800d852:	d00c      	beq.n	800d86e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d85c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d864:	f043 0220 	orr.w	r2, r3, #32
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d874:	2b00      	cmp	r3, #0
 800d876:	f000 81fd 	beq.w	800dc74 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800d87a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d87e:	f003 0320 	and.w	r3, r3, #32
 800d882:	2b00      	cmp	r3, #0
 800d884:	d00d      	beq.n	800d8a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d88a:	f003 0320 	and.w	r3, r3, #32
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d007      	beq.n	800d8a2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d896:	2b00      	cmp	r3, #0
 800d898:	d003      	beq.n	800d8a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	689b      	ldr	r3, [r3, #8]
 800d8b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8b6:	2b40      	cmp	r3, #64	; 0x40
 800d8b8:	d005      	beq.n	800d8c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d8ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d8be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d04f      	beq.n	800d966 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f000 ff8e 	bl	800e7e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	689b      	ldr	r3, [r3, #8]
 800d8d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8d6:	2b40      	cmp	r3, #64	; 0x40
 800d8d8:	d141      	bne.n	800d95e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	3308      	adds	r3, #8
 800d8e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d8e8:	e853 3f00 	ldrex	r3, [r3]
 800d8ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d8f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d8f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	3308      	adds	r3, #8
 800d902:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d906:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d90a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d90e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d912:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d916:	e841 2300 	strex	r3, r2, [r1]
 800d91a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d91e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d922:	2b00      	cmp	r3, #0
 800d924:	d1d9      	bne.n	800d8da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d013      	beq.n	800d956 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d932:	4a13      	ldr	r2, [pc, #76]	; (800d980 <HAL_UART_IRQHandler+0x29c>)
 800d934:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fa f966 	bl	8007c0c <HAL_DMA_Abort_IT>
 800d940:	4603      	mov	r3, r0
 800d942:	2b00      	cmp	r3, #0
 800d944:	d017      	beq.n	800d976 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d94a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800d950:	4610      	mov	r0, r2
 800d952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d954:	e00f      	b.n	800d976 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f7f4 ff68 	bl	800282c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d95c:	e00b      	b.n	800d976 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f7f4 ff64 	bl	800282c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d964:	e007      	b.n	800d976 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f7f4 ff60 	bl	800282c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2200      	movs	r2, #0
 800d970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800d974:	e17e      	b.n	800dc74 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d976:	bf00      	nop
    return;
 800d978:	e17c      	b.n	800dc74 <HAL_UART_IRQHandler+0x590>
 800d97a:	bf00      	nop
 800d97c:	04000120 	.word	0x04000120
 800d980:	0800ea95 	.word	0x0800ea95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d988:	2b01      	cmp	r3, #1
 800d98a:	f040 814c 	bne.w	800dc26 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d98e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d992:	f003 0310 	and.w	r3, r3, #16
 800d996:	2b00      	cmp	r3, #0
 800d998:	f000 8145 	beq.w	800dc26 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d99c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9a0:	f003 0310 	and.w	r3, r3, #16
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	f000 813e 	beq.w	800dc26 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	2210      	movs	r2, #16
 800d9b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	689b      	ldr	r3, [r3, #8]
 800d9b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9bc:	2b40      	cmp	r3, #64	; 0x40
 800d9be:	f040 80b6 	bne.w	800db2e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d9ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	f000 8150 	beq.w	800dc78 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d9de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	f080 8148 	bcs.w	800dc78 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d9ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9f6:	69db      	ldr	r3, [r3, #28]
 800d9f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9fc:	f000 8086 	beq.w	800db0c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800da0c:	e853 3f00 	ldrex	r3, [r3]
 800da10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800da14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800da18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	461a      	mov	r2, r3
 800da26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800da2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800da2e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800da36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800da3a:	e841 2300 	strex	r3, r2, [r1]
 800da3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800da42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800da46:	2b00      	cmp	r3, #0
 800da48:	d1da      	bne.n	800da00 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	3308      	adds	r3, #8
 800da50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da54:	e853 3f00 	ldrex	r3, [r3]
 800da58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800da5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da5c:	f023 0301 	bic.w	r3, r3, #1
 800da60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	3308      	adds	r3, #8
 800da6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800da6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800da72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800da76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800da7a:	e841 2300 	strex	r3, r2, [r1]
 800da7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800da80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da82:	2b00      	cmp	r3, #0
 800da84:	d1e1      	bne.n	800da4a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	3308      	adds	r3, #8
 800da8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da90:	e853 3f00 	ldrex	r3, [r3]
 800da94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800da96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	3308      	adds	r3, #8
 800daa6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800daaa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800daac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dab0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dab2:	e841 2300 	strex	r3, r2, [r1]
 800dab6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d1e3      	bne.n	800da86 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2220      	movs	r2, #32
 800dac2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2200      	movs	r2, #0
 800daca:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dad4:	e853 3f00 	ldrex	r3, [r3]
 800dad8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dadc:	f023 0310 	bic.w	r3, r3, #16
 800dae0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	461a      	mov	r2, r3
 800daea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800daee:	65bb      	str	r3, [r7, #88]	; 0x58
 800daf0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daf2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800daf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800daf6:	e841 2300 	strex	r3, r2, [r1]
 800dafa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dafc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d1e4      	bne.n	800dacc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db06:	4618      	mov	r0, r3
 800db08:	f7fa f810 	bl	8007b2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2202      	movs	r2, #2
 800db10:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800db1e:	b29b      	uxth	r3, r3
 800db20:	1ad3      	subs	r3, r2, r3
 800db22:	b29b      	uxth	r3, r3
 800db24:	4619      	mov	r1, r3
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 f8c2 	bl	800dcb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800db2c:	e0a4      	b.n	800dc78 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	1ad3      	subs	r3, r2, r3
 800db3e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800db48:	b29b      	uxth	r3, r3
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	f000 8096 	beq.w	800dc7c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800db50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800db54:	2b00      	cmp	r3, #0
 800db56:	f000 8091 	beq.w	800dc7c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db62:	e853 3f00 	ldrex	r3, [r3]
 800db66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800db68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800db6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	461a      	mov	r2, r3
 800db78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800db7c:	647b      	str	r3, [r7, #68]	; 0x44
 800db7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800db82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db84:	e841 2300 	strex	r3, r2, [r1]
 800db88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800db8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d1e4      	bne.n	800db5a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	3308      	adds	r3, #8
 800db96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9a:	e853 3f00 	ldrex	r3, [r3]
 800db9e:	623b      	str	r3, [r7, #32]
   return(result);
 800dba0:	6a3b      	ldr	r3, [r7, #32]
 800dba2:	f023 0301 	bic.w	r3, r3, #1
 800dba6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	3308      	adds	r3, #8
 800dbb0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dbb4:	633a      	str	r2, [r7, #48]	; 0x30
 800dbb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbbc:	e841 2300 	strex	r3, r2, [r1]
 800dbc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d1e3      	bne.n	800db90 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2220      	movs	r2, #32
 800dbcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	e853 3f00 	ldrex	r3, [r3]
 800dbe8:	60fb      	str	r3, [r7, #12]
   return(result);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f023 0310 	bic.w	r3, r3, #16
 800dbf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dbfe:	61fb      	str	r3, [r7, #28]
 800dc00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc02:	69b9      	ldr	r1, [r7, #24]
 800dc04:	69fa      	ldr	r2, [r7, #28]
 800dc06:	e841 2300 	strex	r3, r2, [r1]
 800dc0a:	617b      	str	r3, [r7, #20]
   return(result);
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d1e4      	bne.n	800dbdc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2202      	movs	r2, #2
 800dc16:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dc18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dc1c:	4619      	mov	r1, r3
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f000 f846 	bl	800dcb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dc24:	e02a      	b.n	800dc7c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800dc26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d00e      	beq.n	800dc50 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800dc32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d008      	beq.n	800dc50 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d01c      	beq.n	800dc80 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	4798      	blx	r3
    }
    return;
 800dc4e:	e017      	b.n	800dc80 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dc50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d012      	beq.n	800dc82 <HAL_UART_IRQHandler+0x59e>
 800dc5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d00c      	beq.n	800dc82 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f000 ff29 	bl	800eac0 <UART_EndTransmit_IT>
    return;
 800dc6e:	e008      	b.n	800dc82 <HAL_UART_IRQHandler+0x59e>
      return;
 800dc70:	bf00      	nop
 800dc72:	e006      	b.n	800dc82 <HAL_UART_IRQHandler+0x59e>
    return;
 800dc74:	bf00      	nop
 800dc76:	e004      	b.n	800dc82 <HAL_UART_IRQHandler+0x59e>
      return;
 800dc78:	bf00      	nop
 800dc7a:	e002      	b.n	800dc82 <HAL_UART_IRQHandler+0x59e>
      return;
 800dc7c:	bf00      	nop
 800dc7e:	e000      	b.n	800dc82 <HAL_UART_IRQHandler+0x59e>
    return;
 800dc80:	bf00      	nop
  }

}
 800dc82:	37e8      	adds	r7, #232	; 0xe8
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dc90:	bf00      	nop
 800dc92:	370c      	adds	r7, #12
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr

0800dc9c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800dca4:	bf00      	nop
 800dca6:	370c      	adds	r7, #12
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr

0800dcb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b083      	sub	sp, #12
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	460b      	mov	r3, r1
 800dcba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dcbc:	bf00      	nop
 800dcbe:	370c      	adds	r7, #12
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr

0800dcc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b088      	sub	sp, #32
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	689a      	ldr	r2, [r3, #8]
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	691b      	ldr	r3, [r3, #16]
 800dcdc:	431a      	orrs	r2, r3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	695b      	ldr	r3, [r3, #20]
 800dce2:	431a      	orrs	r2, r3
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	69db      	ldr	r3, [r3, #28]
 800dce8:	4313      	orrs	r3, r2
 800dcea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	681a      	ldr	r2, [r3, #0]
 800dcf2:	4ba6      	ldr	r3, [pc, #664]	; (800df8c <UART_SetConfig+0x2c4>)
 800dcf4:	4013      	ands	r3, r2
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	6812      	ldr	r2, [r2, #0]
 800dcfa:	6979      	ldr	r1, [r7, #20]
 800dcfc:	430b      	orrs	r3, r1
 800dcfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	68da      	ldr	r2, [r3, #12]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	430a      	orrs	r2, r1
 800dd14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	699b      	ldr	r3, [r3, #24]
 800dd1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6a1b      	ldr	r3, [r3, #32]
 800dd20:	697a      	ldr	r2, [r7, #20]
 800dd22:	4313      	orrs	r3, r2
 800dd24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	689b      	ldr	r3, [r3, #8]
 800dd2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	697a      	ldr	r2, [r7, #20]
 800dd36:	430a      	orrs	r2, r1
 800dd38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	4a94      	ldr	r2, [pc, #592]	; (800df90 <UART_SetConfig+0x2c8>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d120      	bne.n	800dd86 <UART_SetConfig+0xbe>
 800dd44:	4b93      	ldr	r3, [pc, #588]	; (800df94 <UART_SetConfig+0x2cc>)
 800dd46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd4a:	f003 0303 	and.w	r3, r3, #3
 800dd4e:	2b03      	cmp	r3, #3
 800dd50:	d816      	bhi.n	800dd80 <UART_SetConfig+0xb8>
 800dd52:	a201      	add	r2, pc, #4	; (adr r2, 800dd58 <UART_SetConfig+0x90>)
 800dd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd58:	0800dd69 	.word	0x0800dd69
 800dd5c:	0800dd75 	.word	0x0800dd75
 800dd60:	0800dd6f 	.word	0x0800dd6f
 800dd64:	0800dd7b 	.word	0x0800dd7b
 800dd68:	2301      	movs	r3, #1
 800dd6a:	77fb      	strb	r3, [r7, #31]
 800dd6c:	e150      	b.n	800e010 <UART_SetConfig+0x348>
 800dd6e:	2302      	movs	r3, #2
 800dd70:	77fb      	strb	r3, [r7, #31]
 800dd72:	e14d      	b.n	800e010 <UART_SetConfig+0x348>
 800dd74:	2304      	movs	r3, #4
 800dd76:	77fb      	strb	r3, [r7, #31]
 800dd78:	e14a      	b.n	800e010 <UART_SetConfig+0x348>
 800dd7a:	2308      	movs	r3, #8
 800dd7c:	77fb      	strb	r3, [r7, #31]
 800dd7e:	e147      	b.n	800e010 <UART_SetConfig+0x348>
 800dd80:	2310      	movs	r3, #16
 800dd82:	77fb      	strb	r3, [r7, #31]
 800dd84:	e144      	b.n	800e010 <UART_SetConfig+0x348>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4a83      	ldr	r2, [pc, #524]	; (800df98 <UART_SetConfig+0x2d0>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d132      	bne.n	800ddf6 <UART_SetConfig+0x12e>
 800dd90:	4b80      	ldr	r3, [pc, #512]	; (800df94 <UART_SetConfig+0x2cc>)
 800dd92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd96:	f003 030c 	and.w	r3, r3, #12
 800dd9a:	2b0c      	cmp	r3, #12
 800dd9c:	d828      	bhi.n	800ddf0 <UART_SetConfig+0x128>
 800dd9e:	a201      	add	r2, pc, #4	; (adr r2, 800dda4 <UART_SetConfig+0xdc>)
 800dda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dda4:	0800ddd9 	.word	0x0800ddd9
 800dda8:	0800ddf1 	.word	0x0800ddf1
 800ddac:	0800ddf1 	.word	0x0800ddf1
 800ddb0:	0800ddf1 	.word	0x0800ddf1
 800ddb4:	0800dde5 	.word	0x0800dde5
 800ddb8:	0800ddf1 	.word	0x0800ddf1
 800ddbc:	0800ddf1 	.word	0x0800ddf1
 800ddc0:	0800ddf1 	.word	0x0800ddf1
 800ddc4:	0800dddf 	.word	0x0800dddf
 800ddc8:	0800ddf1 	.word	0x0800ddf1
 800ddcc:	0800ddf1 	.word	0x0800ddf1
 800ddd0:	0800ddf1 	.word	0x0800ddf1
 800ddd4:	0800ddeb 	.word	0x0800ddeb
 800ddd8:	2300      	movs	r3, #0
 800ddda:	77fb      	strb	r3, [r7, #31]
 800dddc:	e118      	b.n	800e010 <UART_SetConfig+0x348>
 800ddde:	2302      	movs	r3, #2
 800dde0:	77fb      	strb	r3, [r7, #31]
 800dde2:	e115      	b.n	800e010 <UART_SetConfig+0x348>
 800dde4:	2304      	movs	r3, #4
 800dde6:	77fb      	strb	r3, [r7, #31]
 800dde8:	e112      	b.n	800e010 <UART_SetConfig+0x348>
 800ddea:	2308      	movs	r3, #8
 800ddec:	77fb      	strb	r3, [r7, #31]
 800ddee:	e10f      	b.n	800e010 <UART_SetConfig+0x348>
 800ddf0:	2310      	movs	r3, #16
 800ddf2:	77fb      	strb	r3, [r7, #31]
 800ddf4:	e10c      	b.n	800e010 <UART_SetConfig+0x348>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4a68      	ldr	r2, [pc, #416]	; (800df9c <UART_SetConfig+0x2d4>)
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	d120      	bne.n	800de42 <UART_SetConfig+0x17a>
 800de00:	4b64      	ldr	r3, [pc, #400]	; (800df94 <UART_SetConfig+0x2cc>)
 800de02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800de0a:	2b30      	cmp	r3, #48	; 0x30
 800de0c:	d013      	beq.n	800de36 <UART_SetConfig+0x16e>
 800de0e:	2b30      	cmp	r3, #48	; 0x30
 800de10:	d814      	bhi.n	800de3c <UART_SetConfig+0x174>
 800de12:	2b20      	cmp	r3, #32
 800de14:	d009      	beq.n	800de2a <UART_SetConfig+0x162>
 800de16:	2b20      	cmp	r3, #32
 800de18:	d810      	bhi.n	800de3c <UART_SetConfig+0x174>
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d002      	beq.n	800de24 <UART_SetConfig+0x15c>
 800de1e:	2b10      	cmp	r3, #16
 800de20:	d006      	beq.n	800de30 <UART_SetConfig+0x168>
 800de22:	e00b      	b.n	800de3c <UART_SetConfig+0x174>
 800de24:	2300      	movs	r3, #0
 800de26:	77fb      	strb	r3, [r7, #31]
 800de28:	e0f2      	b.n	800e010 <UART_SetConfig+0x348>
 800de2a:	2302      	movs	r3, #2
 800de2c:	77fb      	strb	r3, [r7, #31]
 800de2e:	e0ef      	b.n	800e010 <UART_SetConfig+0x348>
 800de30:	2304      	movs	r3, #4
 800de32:	77fb      	strb	r3, [r7, #31]
 800de34:	e0ec      	b.n	800e010 <UART_SetConfig+0x348>
 800de36:	2308      	movs	r3, #8
 800de38:	77fb      	strb	r3, [r7, #31]
 800de3a:	e0e9      	b.n	800e010 <UART_SetConfig+0x348>
 800de3c:	2310      	movs	r3, #16
 800de3e:	77fb      	strb	r3, [r7, #31]
 800de40:	e0e6      	b.n	800e010 <UART_SetConfig+0x348>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4a56      	ldr	r2, [pc, #344]	; (800dfa0 <UART_SetConfig+0x2d8>)
 800de48:	4293      	cmp	r3, r2
 800de4a:	d120      	bne.n	800de8e <UART_SetConfig+0x1c6>
 800de4c:	4b51      	ldr	r3, [pc, #324]	; (800df94 <UART_SetConfig+0x2cc>)
 800de4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800de56:	2bc0      	cmp	r3, #192	; 0xc0
 800de58:	d013      	beq.n	800de82 <UART_SetConfig+0x1ba>
 800de5a:	2bc0      	cmp	r3, #192	; 0xc0
 800de5c:	d814      	bhi.n	800de88 <UART_SetConfig+0x1c0>
 800de5e:	2b80      	cmp	r3, #128	; 0x80
 800de60:	d009      	beq.n	800de76 <UART_SetConfig+0x1ae>
 800de62:	2b80      	cmp	r3, #128	; 0x80
 800de64:	d810      	bhi.n	800de88 <UART_SetConfig+0x1c0>
 800de66:	2b00      	cmp	r3, #0
 800de68:	d002      	beq.n	800de70 <UART_SetConfig+0x1a8>
 800de6a:	2b40      	cmp	r3, #64	; 0x40
 800de6c:	d006      	beq.n	800de7c <UART_SetConfig+0x1b4>
 800de6e:	e00b      	b.n	800de88 <UART_SetConfig+0x1c0>
 800de70:	2300      	movs	r3, #0
 800de72:	77fb      	strb	r3, [r7, #31]
 800de74:	e0cc      	b.n	800e010 <UART_SetConfig+0x348>
 800de76:	2302      	movs	r3, #2
 800de78:	77fb      	strb	r3, [r7, #31]
 800de7a:	e0c9      	b.n	800e010 <UART_SetConfig+0x348>
 800de7c:	2304      	movs	r3, #4
 800de7e:	77fb      	strb	r3, [r7, #31]
 800de80:	e0c6      	b.n	800e010 <UART_SetConfig+0x348>
 800de82:	2308      	movs	r3, #8
 800de84:	77fb      	strb	r3, [r7, #31]
 800de86:	e0c3      	b.n	800e010 <UART_SetConfig+0x348>
 800de88:	2310      	movs	r3, #16
 800de8a:	77fb      	strb	r3, [r7, #31]
 800de8c:	e0c0      	b.n	800e010 <UART_SetConfig+0x348>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	4a44      	ldr	r2, [pc, #272]	; (800dfa4 <UART_SetConfig+0x2dc>)
 800de94:	4293      	cmp	r3, r2
 800de96:	d125      	bne.n	800dee4 <UART_SetConfig+0x21c>
 800de98:	4b3e      	ldr	r3, [pc, #248]	; (800df94 <UART_SetConfig+0x2cc>)
 800de9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dea2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dea6:	d017      	beq.n	800ded8 <UART_SetConfig+0x210>
 800dea8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800deac:	d817      	bhi.n	800dede <UART_SetConfig+0x216>
 800deae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800deb2:	d00b      	beq.n	800decc <UART_SetConfig+0x204>
 800deb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800deb8:	d811      	bhi.n	800dede <UART_SetConfig+0x216>
 800deba:	2b00      	cmp	r3, #0
 800debc:	d003      	beq.n	800dec6 <UART_SetConfig+0x1fe>
 800debe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dec2:	d006      	beq.n	800ded2 <UART_SetConfig+0x20a>
 800dec4:	e00b      	b.n	800dede <UART_SetConfig+0x216>
 800dec6:	2300      	movs	r3, #0
 800dec8:	77fb      	strb	r3, [r7, #31]
 800deca:	e0a1      	b.n	800e010 <UART_SetConfig+0x348>
 800decc:	2302      	movs	r3, #2
 800dece:	77fb      	strb	r3, [r7, #31]
 800ded0:	e09e      	b.n	800e010 <UART_SetConfig+0x348>
 800ded2:	2304      	movs	r3, #4
 800ded4:	77fb      	strb	r3, [r7, #31]
 800ded6:	e09b      	b.n	800e010 <UART_SetConfig+0x348>
 800ded8:	2308      	movs	r3, #8
 800deda:	77fb      	strb	r3, [r7, #31]
 800dedc:	e098      	b.n	800e010 <UART_SetConfig+0x348>
 800dede:	2310      	movs	r3, #16
 800dee0:	77fb      	strb	r3, [r7, #31]
 800dee2:	e095      	b.n	800e010 <UART_SetConfig+0x348>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4a2f      	ldr	r2, [pc, #188]	; (800dfa8 <UART_SetConfig+0x2e0>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d125      	bne.n	800df3a <UART_SetConfig+0x272>
 800deee:	4b29      	ldr	r3, [pc, #164]	; (800df94 <UART_SetConfig+0x2cc>)
 800def0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800def4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800def8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800defc:	d017      	beq.n	800df2e <UART_SetConfig+0x266>
 800defe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800df02:	d817      	bhi.n	800df34 <UART_SetConfig+0x26c>
 800df04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df08:	d00b      	beq.n	800df22 <UART_SetConfig+0x25a>
 800df0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df0e:	d811      	bhi.n	800df34 <UART_SetConfig+0x26c>
 800df10:	2b00      	cmp	r3, #0
 800df12:	d003      	beq.n	800df1c <UART_SetConfig+0x254>
 800df14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df18:	d006      	beq.n	800df28 <UART_SetConfig+0x260>
 800df1a:	e00b      	b.n	800df34 <UART_SetConfig+0x26c>
 800df1c:	2301      	movs	r3, #1
 800df1e:	77fb      	strb	r3, [r7, #31]
 800df20:	e076      	b.n	800e010 <UART_SetConfig+0x348>
 800df22:	2302      	movs	r3, #2
 800df24:	77fb      	strb	r3, [r7, #31]
 800df26:	e073      	b.n	800e010 <UART_SetConfig+0x348>
 800df28:	2304      	movs	r3, #4
 800df2a:	77fb      	strb	r3, [r7, #31]
 800df2c:	e070      	b.n	800e010 <UART_SetConfig+0x348>
 800df2e:	2308      	movs	r3, #8
 800df30:	77fb      	strb	r3, [r7, #31]
 800df32:	e06d      	b.n	800e010 <UART_SetConfig+0x348>
 800df34:	2310      	movs	r3, #16
 800df36:	77fb      	strb	r3, [r7, #31]
 800df38:	e06a      	b.n	800e010 <UART_SetConfig+0x348>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4a1b      	ldr	r2, [pc, #108]	; (800dfac <UART_SetConfig+0x2e4>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d138      	bne.n	800dfb6 <UART_SetConfig+0x2ee>
 800df44:	4b13      	ldr	r3, [pc, #76]	; (800df94 <UART_SetConfig+0x2cc>)
 800df46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df4a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800df4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800df52:	d017      	beq.n	800df84 <UART_SetConfig+0x2bc>
 800df54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800df58:	d82a      	bhi.n	800dfb0 <UART_SetConfig+0x2e8>
 800df5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df5e:	d00b      	beq.n	800df78 <UART_SetConfig+0x2b0>
 800df60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df64:	d824      	bhi.n	800dfb0 <UART_SetConfig+0x2e8>
 800df66:	2b00      	cmp	r3, #0
 800df68:	d003      	beq.n	800df72 <UART_SetConfig+0x2aa>
 800df6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df6e:	d006      	beq.n	800df7e <UART_SetConfig+0x2b6>
 800df70:	e01e      	b.n	800dfb0 <UART_SetConfig+0x2e8>
 800df72:	2300      	movs	r3, #0
 800df74:	77fb      	strb	r3, [r7, #31]
 800df76:	e04b      	b.n	800e010 <UART_SetConfig+0x348>
 800df78:	2302      	movs	r3, #2
 800df7a:	77fb      	strb	r3, [r7, #31]
 800df7c:	e048      	b.n	800e010 <UART_SetConfig+0x348>
 800df7e:	2304      	movs	r3, #4
 800df80:	77fb      	strb	r3, [r7, #31]
 800df82:	e045      	b.n	800e010 <UART_SetConfig+0x348>
 800df84:	2308      	movs	r3, #8
 800df86:	77fb      	strb	r3, [r7, #31]
 800df88:	e042      	b.n	800e010 <UART_SetConfig+0x348>
 800df8a:	bf00      	nop
 800df8c:	efff69f3 	.word	0xefff69f3
 800df90:	40011000 	.word	0x40011000
 800df94:	40023800 	.word	0x40023800
 800df98:	40004400 	.word	0x40004400
 800df9c:	40004800 	.word	0x40004800
 800dfa0:	40004c00 	.word	0x40004c00
 800dfa4:	40005000 	.word	0x40005000
 800dfa8:	40011400 	.word	0x40011400
 800dfac:	40007800 	.word	0x40007800
 800dfb0:	2310      	movs	r3, #16
 800dfb2:	77fb      	strb	r3, [r7, #31]
 800dfb4:	e02c      	b.n	800e010 <UART_SetConfig+0x348>
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	4a72      	ldr	r2, [pc, #456]	; (800e184 <UART_SetConfig+0x4bc>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d125      	bne.n	800e00c <UART_SetConfig+0x344>
 800dfc0:	4b71      	ldr	r3, [pc, #452]	; (800e188 <UART_SetConfig+0x4c0>)
 800dfc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfc6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800dfca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800dfce:	d017      	beq.n	800e000 <UART_SetConfig+0x338>
 800dfd0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800dfd4:	d817      	bhi.n	800e006 <UART_SetConfig+0x33e>
 800dfd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dfda:	d00b      	beq.n	800dff4 <UART_SetConfig+0x32c>
 800dfdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dfe0:	d811      	bhi.n	800e006 <UART_SetConfig+0x33e>
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d003      	beq.n	800dfee <UART_SetConfig+0x326>
 800dfe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dfea:	d006      	beq.n	800dffa <UART_SetConfig+0x332>
 800dfec:	e00b      	b.n	800e006 <UART_SetConfig+0x33e>
 800dfee:	2300      	movs	r3, #0
 800dff0:	77fb      	strb	r3, [r7, #31]
 800dff2:	e00d      	b.n	800e010 <UART_SetConfig+0x348>
 800dff4:	2302      	movs	r3, #2
 800dff6:	77fb      	strb	r3, [r7, #31]
 800dff8:	e00a      	b.n	800e010 <UART_SetConfig+0x348>
 800dffa:	2304      	movs	r3, #4
 800dffc:	77fb      	strb	r3, [r7, #31]
 800dffe:	e007      	b.n	800e010 <UART_SetConfig+0x348>
 800e000:	2308      	movs	r3, #8
 800e002:	77fb      	strb	r3, [r7, #31]
 800e004:	e004      	b.n	800e010 <UART_SetConfig+0x348>
 800e006:	2310      	movs	r3, #16
 800e008:	77fb      	strb	r3, [r7, #31]
 800e00a:	e001      	b.n	800e010 <UART_SetConfig+0x348>
 800e00c:	2310      	movs	r3, #16
 800e00e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	69db      	ldr	r3, [r3, #28]
 800e014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e018:	d15b      	bne.n	800e0d2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800e01a:	7ffb      	ldrb	r3, [r7, #31]
 800e01c:	2b08      	cmp	r3, #8
 800e01e:	d828      	bhi.n	800e072 <UART_SetConfig+0x3aa>
 800e020:	a201      	add	r2, pc, #4	; (adr r2, 800e028 <UART_SetConfig+0x360>)
 800e022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e026:	bf00      	nop
 800e028:	0800e04d 	.word	0x0800e04d
 800e02c:	0800e055 	.word	0x0800e055
 800e030:	0800e05d 	.word	0x0800e05d
 800e034:	0800e073 	.word	0x0800e073
 800e038:	0800e063 	.word	0x0800e063
 800e03c:	0800e073 	.word	0x0800e073
 800e040:	0800e073 	.word	0x0800e073
 800e044:	0800e073 	.word	0x0800e073
 800e048:	0800e06b 	.word	0x0800e06b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e04c:	f7fb fcc2 	bl	80099d4 <HAL_RCC_GetPCLK1Freq>
 800e050:	61b8      	str	r0, [r7, #24]
        break;
 800e052:	e013      	b.n	800e07c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e054:	f7fb fcd2 	bl	80099fc <HAL_RCC_GetPCLK2Freq>
 800e058:	61b8      	str	r0, [r7, #24]
        break;
 800e05a:	e00f      	b.n	800e07c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e05c:	4b4b      	ldr	r3, [pc, #300]	; (800e18c <UART_SetConfig+0x4c4>)
 800e05e:	61bb      	str	r3, [r7, #24]
        break;
 800e060:	e00c      	b.n	800e07c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e062:	f7fb fbe5 	bl	8009830 <HAL_RCC_GetSysClockFreq>
 800e066:	61b8      	str	r0, [r7, #24]
        break;
 800e068:	e008      	b.n	800e07c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e06a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e06e:	61bb      	str	r3, [r7, #24]
        break;
 800e070:	e004      	b.n	800e07c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800e072:	2300      	movs	r3, #0
 800e074:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e076:	2301      	movs	r3, #1
 800e078:	77bb      	strb	r3, [r7, #30]
        break;
 800e07a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e07c:	69bb      	ldr	r3, [r7, #24]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d074      	beq.n	800e16c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e082:	69bb      	ldr	r3, [r7, #24]
 800e084:	005a      	lsls	r2, r3, #1
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	085b      	lsrs	r3, r3, #1
 800e08c:	441a      	add	r2, r3
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	fbb2 f3f3 	udiv	r3, r2, r3
 800e096:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	2b0f      	cmp	r3, #15
 800e09c:	d916      	bls.n	800e0cc <UART_SetConfig+0x404>
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0a4:	d212      	bcs.n	800e0cc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	b29b      	uxth	r3, r3
 800e0aa:	f023 030f 	bic.w	r3, r3, #15
 800e0ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	085b      	lsrs	r3, r3, #1
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	f003 0307 	and.w	r3, r3, #7
 800e0ba:	b29a      	uxth	r2, r3
 800e0bc:	89fb      	ldrh	r3, [r7, #14]
 800e0be:	4313      	orrs	r3, r2
 800e0c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	89fa      	ldrh	r2, [r7, #14]
 800e0c8:	60da      	str	r2, [r3, #12]
 800e0ca:	e04f      	b.n	800e16c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	77bb      	strb	r3, [r7, #30]
 800e0d0:	e04c      	b.n	800e16c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e0d2:	7ffb      	ldrb	r3, [r7, #31]
 800e0d4:	2b08      	cmp	r3, #8
 800e0d6:	d828      	bhi.n	800e12a <UART_SetConfig+0x462>
 800e0d8:	a201      	add	r2, pc, #4	; (adr r2, 800e0e0 <UART_SetConfig+0x418>)
 800e0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0de:	bf00      	nop
 800e0e0:	0800e105 	.word	0x0800e105
 800e0e4:	0800e10d 	.word	0x0800e10d
 800e0e8:	0800e115 	.word	0x0800e115
 800e0ec:	0800e12b 	.word	0x0800e12b
 800e0f0:	0800e11b 	.word	0x0800e11b
 800e0f4:	0800e12b 	.word	0x0800e12b
 800e0f8:	0800e12b 	.word	0x0800e12b
 800e0fc:	0800e12b 	.word	0x0800e12b
 800e100:	0800e123 	.word	0x0800e123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e104:	f7fb fc66 	bl	80099d4 <HAL_RCC_GetPCLK1Freq>
 800e108:	61b8      	str	r0, [r7, #24]
        break;
 800e10a:	e013      	b.n	800e134 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e10c:	f7fb fc76 	bl	80099fc <HAL_RCC_GetPCLK2Freq>
 800e110:	61b8      	str	r0, [r7, #24]
        break;
 800e112:	e00f      	b.n	800e134 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e114:	4b1d      	ldr	r3, [pc, #116]	; (800e18c <UART_SetConfig+0x4c4>)
 800e116:	61bb      	str	r3, [r7, #24]
        break;
 800e118:	e00c      	b.n	800e134 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e11a:	f7fb fb89 	bl	8009830 <HAL_RCC_GetSysClockFreq>
 800e11e:	61b8      	str	r0, [r7, #24]
        break;
 800e120:	e008      	b.n	800e134 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e126:	61bb      	str	r3, [r7, #24]
        break;
 800e128:	e004      	b.n	800e134 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800e12a:	2300      	movs	r3, #0
 800e12c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e12e:	2301      	movs	r3, #1
 800e130:	77bb      	strb	r3, [r7, #30]
        break;
 800e132:	bf00      	nop
    }

    if (pclk != 0U)
 800e134:	69bb      	ldr	r3, [r7, #24]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d018      	beq.n	800e16c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	085a      	lsrs	r2, r3, #1
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	441a      	add	r2, r3
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	fbb2 f3f3 	udiv	r3, r2, r3
 800e14c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	2b0f      	cmp	r3, #15
 800e152:	d909      	bls.n	800e168 <UART_SetConfig+0x4a0>
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e15a:	d205      	bcs.n	800e168 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	b29a      	uxth	r2, r3
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	60da      	str	r2, [r3, #12]
 800e166:	e001      	b.n	800e16c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e168:	2301      	movs	r3, #1
 800e16a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2200      	movs	r2, #0
 800e170:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2200      	movs	r2, #0
 800e176:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800e178:	7fbb      	ldrb	r3, [r7, #30]
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3720      	adds	r7, #32
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	40007c00 	.word	0x40007c00
 800e188:	40023800 	.word	0x40023800
 800e18c:	00f42400 	.word	0x00f42400

0800e190 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e190:	b480      	push	{r7}
 800e192:	b083      	sub	sp, #12
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e19c:	f003 0301 	and.w	r3, r3, #1
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d00a      	beq.n	800e1ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	685b      	ldr	r3, [r3, #4]
 800e1aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	430a      	orrs	r2, r1
 800e1b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1be:	f003 0302 	and.w	r3, r3, #2
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d00a      	beq.n	800e1dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	685b      	ldr	r3, [r3, #4]
 800e1cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	430a      	orrs	r2, r1
 800e1da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1e0:	f003 0304 	and.w	r3, r3, #4
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d00a      	beq.n	800e1fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	430a      	orrs	r2, r1
 800e1fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e202:	f003 0308 	and.w	r3, r3, #8
 800e206:	2b00      	cmp	r3, #0
 800e208:	d00a      	beq.n	800e220 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	430a      	orrs	r2, r1
 800e21e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e224:	f003 0310 	and.w	r3, r3, #16
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d00a      	beq.n	800e242 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	689b      	ldr	r3, [r3, #8]
 800e232:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	430a      	orrs	r2, r1
 800e240:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e246:	f003 0320 	and.w	r3, r3, #32
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d00a      	beq.n	800e264 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	689b      	ldr	r3, [r3, #8]
 800e254:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	430a      	orrs	r2, r1
 800e262:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d01a      	beq.n	800e2a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	430a      	orrs	r2, r1
 800e284:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e28a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e28e:	d10a      	bne.n	800e2a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	685b      	ldr	r3, [r3, #4]
 800e296:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	430a      	orrs	r2, r1
 800e2a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d00a      	beq.n	800e2c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	685b      	ldr	r3, [r3, #4]
 800e2b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	430a      	orrs	r2, r1
 800e2c6:	605a      	str	r2, [r3, #4]
  }
}
 800e2c8:	bf00      	nop
 800e2ca:	370c      	adds	r7, #12
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr

0800e2d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b086      	sub	sp, #24
 800e2d8:	af02      	add	r7, sp, #8
 800e2da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e2e4:	f7f9 fa02 	bl	80076ec <HAL_GetTick>
 800e2e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f003 0308 	and.w	r3, r3, #8
 800e2f4:	2b08      	cmp	r3, #8
 800e2f6:	d10e      	bne.n	800e316 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e2f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e2fc:	9300      	str	r3, [sp, #0]
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2200      	movs	r2, #0
 800e302:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f000 f81b 	bl	800e342 <UART_WaitOnFlagUntilTimeout>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d001      	beq.n	800e316 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e312:	2303      	movs	r3, #3
 800e314:	e011      	b.n	800e33a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2220      	movs	r2, #32
 800e31a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2220      	movs	r2, #32
 800e320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2200      	movs	r2, #0
 800e328:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2200      	movs	r2, #0
 800e32e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2200      	movs	r2, #0
 800e334:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800e338:	2300      	movs	r3, #0
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3710      	adds	r7, #16
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}

0800e342 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e342:	b580      	push	{r7, lr}
 800e344:	b09c      	sub	sp, #112	; 0x70
 800e346:	af00      	add	r7, sp, #0
 800e348:	60f8      	str	r0, [r7, #12]
 800e34a:	60b9      	str	r1, [r7, #8]
 800e34c:	603b      	str	r3, [r7, #0]
 800e34e:	4613      	mov	r3, r2
 800e350:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e352:	e0a7      	b.n	800e4a4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e35a:	f000 80a3 	beq.w	800e4a4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e35e:	f7f9 f9c5 	bl	80076ec <HAL_GetTick>
 800e362:	4602      	mov	r2, r0
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	1ad3      	subs	r3, r2, r3
 800e368:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d302      	bcc.n	800e374 <UART_WaitOnFlagUntilTimeout+0x32>
 800e36e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e370:	2b00      	cmp	r3, #0
 800e372:	d13f      	bne.n	800e3f4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e37a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e37c:	e853 3f00 	ldrex	r3, [r3]
 800e380:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e384:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e388:	667b      	str	r3, [r7, #100]	; 0x64
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	461a      	mov	r2, r3
 800e390:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e392:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e394:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e396:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e398:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e39a:	e841 2300 	strex	r3, r2, [r1]
 800e39e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e3a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d1e6      	bne.n	800e374 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	3308      	adds	r3, #8
 800e3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3b0:	e853 3f00 	ldrex	r3, [r3]
 800e3b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b8:	f023 0301 	bic.w	r3, r3, #1
 800e3bc:	663b      	str	r3, [r7, #96]	; 0x60
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	3308      	adds	r3, #8
 800e3c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e3c6:	64ba      	str	r2, [r7, #72]	; 0x48
 800e3c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e3cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e3ce:	e841 2300 	strex	r3, r2, [r1]
 800e3d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e3d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d1e5      	bne.n	800e3a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	2220      	movs	r2, #32
 800e3de:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	2220      	movs	r2, #32
 800e3e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800e3f0:	2303      	movs	r3, #3
 800e3f2:	e068      	b.n	800e4c6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f003 0304 	and.w	r3, r3, #4
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d050      	beq.n	800e4a4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	69db      	ldr	r3, [r3, #28]
 800e408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e40c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e410:	d148      	bne.n	800e4a4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e41a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e424:	e853 3f00 	ldrex	r3, [r3]
 800e428:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e430:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	461a      	mov	r2, r3
 800e438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e43a:	637b      	str	r3, [r7, #52]	; 0x34
 800e43c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e43e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e440:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e442:	e841 2300 	strex	r3, r2, [r1]
 800e446:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d1e6      	bne.n	800e41c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	3308      	adds	r3, #8
 800e454:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e456:	697b      	ldr	r3, [r7, #20]
 800e458:	e853 3f00 	ldrex	r3, [r3]
 800e45c:	613b      	str	r3, [r7, #16]
   return(result);
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	f023 0301 	bic.w	r3, r3, #1
 800e464:	66bb      	str	r3, [r7, #104]	; 0x68
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	3308      	adds	r3, #8
 800e46c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e46e:	623a      	str	r2, [r7, #32]
 800e470:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e472:	69f9      	ldr	r1, [r7, #28]
 800e474:	6a3a      	ldr	r2, [r7, #32]
 800e476:	e841 2300 	strex	r3, r2, [r1]
 800e47a:	61bb      	str	r3, [r7, #24]
   return(result);
 800e47c:	69bb      	ldr	r3, [r7, #24]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d1e5      	bne.n	800e44e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2220      	movs	r2, #32
 800e486:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2220      	movs	r2, #32
 800e48c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2220      	movs	r2, #32
 800e494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2200      	movs	r2, #0
 800e49c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800e4a0:	2303      	movs	r3, #3
 800e4a2:	e010      	b.n	800e4c6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	69da      	ldr	r2, [r3, #28]
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	4013      	ands	r3, r2
 800e4ae:	68ba      	ldr	r2, [r7, #8]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	bf0c      	ite	eq
 800e4b4:	2301      	moveq	r3, #1
 800e4b6:	2300      	movne	r3, #0
 800e4b8:	b2db      	uxtb	r3, r3
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	79fb      	ldrb	r3, [r7, #7]
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	f43f af48 	beq.w	800e354 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e4c4:	2300      	movs	r3, #0
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3770      	adds	r7, #112	; 0x70
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}
	...

0800e4d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b097      	sub	sp, #92	; 0x5c
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	4613      	mov	r3, r2
 800e4dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	68ba      	ldr	r2, [r7, #8]
 800e4e2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	88fa      	ldrh	r2, [r7, #6]
 800e4e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	88fa      	ldrh	r2, [r7, #6]
 800e4f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	689b      	ldr	r3, [r3, #8]
 800e4fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e502:	d10e      	bne.n	800e522 <UART_Start_Receive_IT+0x52>
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	691b      	ldr	r3, [r3, #16]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d105      	bne.n	800e518 <UART_Start_Receive_IT+0x48>
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e512:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e516:	e02d      	b.n	800e574 <UART_Start_Receive_IT+0xa4>
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	22ff      	movs	r2, #255	; 0xff
 800e51c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e520:	e028      	b.n	800e574 <UART_Start_Receive_IT+0xa4>
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	689b      	ldr	r3, [r3, #8]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d10d      	bne.n	800e546 <UART_Start_Receive_IT+0x76>
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	691b      	ldr	r3, [r3, #16]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d104      	bne.n	800e53c <UART_Start_Receive_IT+0x6c>
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	22ff      	movs	r2, #255	; 0xff
 800e536:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e53a:	e01b      	b.n	800e574 <UART_Start_Receive_IT+0xa4>
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	227f      	movs	r2, #127	; 0x7f
 800e540:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e544:	e016      	b.n	800e574 <UART_Start_Receive_IT+0xa4>
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	689b      	ldr	r3, [r3, #8]
 800e54a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e54e:	d10d      	bne.n	800e56c <UART_Start_Receive_IT+0x9c>
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	691b      	ldr	r3, [r3, #16]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d104      	bne.n	800e562 <UART_Start_Receive_IT+0x92>
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	227f      	movs	r2, #127	; 0x7f
 800e55c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e560:	e008      	b.n	800e574 <UART_Start_Receive_IT+0xa4>
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	223f      	movs	r2, #63	; 0x3f
 800e566:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e56a:	e003      	b.n	800e574 <UART_Start_Receive_IT+0xa4>
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	2200      	movs	r2, #0
 800e570:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	2200      	movs	r2, #0
 800e578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2222      	movs	r2, #34	; 0x22
 800e580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	3308      	adds	r3, #8
 800e58a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e58e:	e853 3f00 	ldrex	r3, [r3]
 800e592:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e596:	f043 0301 	orr.w	r3, r3, #1
 800e59a:	657b      	str	r3, [r7, #84]	; 0x54
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	3308      	adds	r3, #8
 800e5a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e5a4:	64ba      	str	r2, [r7, #72]	; 0x48
 800e5a6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e5aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5ac:	e841 2300 	strex	r3, r2, [r1]
 800e5b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d1e5      	bne.n	800e584 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	689b      	ldr	r3, [r3, #8]
 800e5bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5c0:	d107      	bne.n	800e5d2 <UART_Start_Receive_IT+0x102>
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	691b      	ldr	r3, [r3, #16]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d103      	bne.n	800e5d2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	4a21      	ldr	r2, [pc, #132]	; (800e654 <UART_Start_Receive_IT+0x184>)
 800e5ce:	669a      	str	r2, [r3, #104]	; 0x68
 800e5d0:	e002      	b.n	800e5d8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	4a20      	ldr	r2, [pc, #128]	; (800e658 <UART_Start_Receive_IT+0x188>)
 800e5d6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	691b      	ldr	r3, [r3, #16]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d019      	beq.n	800e614 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e8:	e853 3f00 	ldrex	r3, [r3]
 800e5ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e5f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5fe:	637b      	str	r3, [r7, #52]	; 0x34
 800e600:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e602:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e606:	e841 2300 	strex	r3, r2, [r1]
 800e60a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d1e6      	bne.n	800e5e0 <UART_Start_Receive_IT+0x110>
 800e612:	e018      	b.n	800e646 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	e853 3f00 	ldrex	r3, [r3]
 800e620:	613b      	str	r3, [r7, #16]
   return(result);
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	f043 0320 	orr.w	r3, r3, #32
 800e628:	653b      	str	r3, [r7, #80]	; 0x50
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	461a      	mov	r2, r3
 800e630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e632:	623b      	str	r3, [r7, #32]
 800e634:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e636:	69f9      	ldr	r1, [r7, #28]
 800e638:	6a3a      	ldr	r2, [r7, #32]
 800e63a:	e841 2300 	strex	r3, r2, [r1]
 800e63e:	61bb      	str	r3, [r7, #24]
   return(result);
 800e640:	69bb      	ldr	r3, [r7, #24]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d1e6      	bne.n	800e614 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800e646:	2300      	movs	r3, #0
}
 800e648:	4618      	mov	r0, r3
 800e64a:	375c      	adds	r7, #92	; 0x5c
 800e64c:	46bd      	mov	sp, r7
 800e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e652:	4770      	bx	lr
 800e654:	0800ec7b 	.word	0x0800ec7b
 800e658:	0800eb15 	.word	0x0800eb15

0800e65c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b096      	sub	sp, #88	; 0x58
 800e660:	af00      	add	r7, sp, #0
 800e662:	60f8      	str	r0, [r7, #12]
 800e664:	60b9      	str	r1, [r7, #8]
 800e666:	4613      	mov	r3, r2
 800e668:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	68ba      	ldr	r2, [r7, #8]
 800e66e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	88fa      	ldrh	r2, [r7, #6]
 800e674:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2200      	movs	r2, #0
 800e67c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	2222      	movs	r2, #34	; 0x22
 800e684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d028      	beq.n	800e6e2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e694:	4a3e      	ldr	r2, [pc, #248]	; (800e790 <UART_Start_Receive_DMA+0x134>)
 800e696:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e69c:	4a3d      	ldr	r2, [pc, #244]	; (800e794 <UART_Start_Receive_DMA+0x138>)
 800e69e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6a4:	4a3c      	ldr	r2, [pc, #240]	; (800e798 <UART_Start_Receive_DMA+0x13c>)
 800e6a6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	3324      	adds	r3, #36	; 0x24
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	88fb      	ldrh	r3, [r7, #6]
 800e6c4:	f7f9 f9d2 	bl	8007a6c <HAL_DMA_Start_IT>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d009      	beq.n	800e6e2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	2210      	movs	r2, #16
 800e6d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	2220      	movs	r2, #32
 800e6da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800e6de:	2301      	movs	r3, #1
 800e6e0:	e051      	b.n	800e786 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	691b      	ldr	r3, [r3, #16]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d018      	beq.n	800e71c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6f2:	e853 3f00 	ldrex	r3, [r3]
 800e6f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6fe:	657b      	str	r3, [r7, #84]	; 0x54
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	461a      	mov	r2, r3
 800e706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e708:	64bb      	str	r3, [r7, #72]	; 0x48
 800e70a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e70c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e70e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e710:	e841 2300 	strex	r3, r2, [r1]
 800e714:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d1e6      	bne.n	800e6ea <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	3308      	adds	r3, #8
 800e722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e726:	e853 3f00 	ldrex	r3, [r3]
 800e72a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72e:	f043 0301 	orr.w	r3, r3, #1
 800e732:	653b      	str	r3, [r7, #80]	; 0x50
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	3308      	adds	r3, #8
 800e73a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e73c:	637a      	str	r2, [r7, #52]	; 0x34
 800e73e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e740:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e744:	e841 2300 	strex	r3, r2, [r1]
 800e748:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d1e5      	bne.n	800e71c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	3308      	adds	r3, #8
 800e756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	e853 3f00 	ldrex	r3, [r3]
 800e75e:	613b      	str	r3, [r7, #16]
   return(result);
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e766:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	3308      	adds	r3, #8
 800e76e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e770:	623a      	str	r2, [r7, #32]
 800e772:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e774:	69f9      	ldr	r1, [r7, #28]
 800e776:	6a3a      	ldr	r2, [r7, #32]
 800e778:	e841 2300 	strex	r3, r2, [r1]
 800e77c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d1e5      	bne.n	800e750 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800e784:	2300      	movs	r3, #0
}
 800e786:	4618      	mov	r0, r3
 800e788:	3758      	adds	r7, #88	; 0x58
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
 800e78e:	bf00      	nop
 800e790:	0800e8b1 	.word	0x0800e8b1
 800e794:	0800e9d9 	.word	0x0800e9d9
 800e798:	0800ea17 	.word	0x0800ea17

0800e79c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e79c:	b480      	push	{r7}
 800e79e:	b089      	sub	sp, #36	; 0x24
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	e853 3f00 	ldrex	r3, [r3]
 800e7b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e7b8:	61fb      	str	r3, [r7, #28]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	461a      	mov	r2, r3
 800e7c0:	69fb      	ldr	r3, [r7, #28]
 800e7c2:	61bb      	str	r3, [r7, #24]
 800e7c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7c6:	6979      	ldr	r1, [r7, #20]
 800e7c8:	69ba      	ldr	r2, [r7, #24]
 800e7ca:	e841 2300 	strex	r3, r2, [r1]
 800e7ce:	613b      	str	r3, [r7, #16]
   return(result);
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d1e6      	bne.n	800e7a4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2220      	movs	r2, #32
 800e7da:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800e7dc:	bf00      	nop
 800e7de:	3724      	adds	r7, #36	; 0x24
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e6:	4770      	bx	lr

0800e7e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b095      	sub	sp, #84	; 0x54
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7f8:	e853 3f00 	ldrex	r3, [r3]
 800e7fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e800:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e804:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	461a      	mov	r2, r3
 800e80c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e80e:	643b      	str	r3, [r7, #64]	; 0x40
 800e810:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e812:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e814:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e816:	e841 2300 	strex	r3, r2, [r1]
 800e81a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d1e6      	bne.n	800e7f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	3308      	adds	r3, #8
 800e828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e82a:	6a3b      	ldr	r3, [r7, #32]
 800e82c:	e853 3f00 	ldrex	r3, [r3]
 800e830:	61fb      	str	r3, [r7, #28]
   return(result);
 800e832:	69fb      	ldr	r3, [r7, #28]
 800e834:	f023 0301 	bic.w	r3, r3, #1
 800e838:	64bb      	str	r3, [r7, #72]	; 0x48
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	3308      	adds	r3, #8
 800e840:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e842:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e844:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e84a:	e841 2300 	strex	r3, r2, [r1]
 800e84e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e852:	2b00      	cmp	r3, #0
 800e854:	d1e5      	bne.n	800e822 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e85a:	2b01      	cmp	r3, #1
 800e85c:	d118      	bne.n	800e890 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	e853 3f00 	ldrex	r3, [r3]
 800e86a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	f023 0310 	bic.w	r3, r3, #16
 800e872:	647b      	str	r3, [r7, #68]	; 0x44
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	461a      	mov	r2, r3
 800e87a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e87c:	61bb      	str	r3, [r7, #24]
 800e87e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e880:	6979      	ldr	r1, [r7, #20]
 800e882:	69ba      	ldr	r2, [r7, #24]
 800e884:	e841 2300 	strex	r3, r2, [r1]
 800e888:	613b      	str	r3, [r7, #16]
   return(result);
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d1e6      	bne.n	800e85e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2220      	movs	r2, #32
 800e894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2200      	movs	r2, #0
 800e89c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 800e8a4:	bf00      	nop
 800e8a6:	3754      	adds	r7, #84	; 0x54
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr

0800e8b0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b09c      	sub	sp, #112	; 0x70
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8bc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	69db      	ldr	r3, [r3, #28]
 800e8c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8c6:	d071      	beq.n	800e9ac <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e8c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e8d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8d8:	e853 3f00 	ldrex	r3, [r3]
 800e8dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e8de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e8e4:	66bb      	str	r3, [r7, #104]	; 0x68
 800e8e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	461a      	mov	r2, r3
 800e8ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e8ee:	65bb      	str	r3, [r7, #88]	; 0x58
 800e8f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e8f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e8f6:	e841 2300 	strex	r3, r2, [r1]
 800e8fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e8fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d1e6      	bne.n	800e8d0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	3308      	adds	r3, #8
 800e908:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e90c:	e853 3f00 	ldrex	r3, [r3]
 800e910:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e914:	f023 0301 	bic.w	r3, r3, #1
 800e918:	667b      	str	r3, [r7, #100]	; 0x64
 800e91a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	3308      	adds	r3, #8
 800e920:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e922:	647a      	str	r2, [r7, #68]	; 0x44
 800e924:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e926:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e928:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e92a:	e841 2300 	strex	r3, r2, [r1]
 800e92e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e932:	2b00      	cmp	r3, #0
 800e934:	d1e5      	bne.n	800e902 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	3308      	adds	r3, #8
 800e93c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e940:	e853 3f00 	ldrex	r3, [r3]
 800e944:	623b      	str	r3, [r7, #32]
   return(result);
 800e946:	6a3b      	ldr	r3, [r7, #32]
 800e948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e94c:	663b      	str	r3, [r7, #96]	; 0x60
 800e94e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	3308      	adds	r3, #8
 800e954:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e956:	633a      	str	r2, [r7, #48]	; 0x30
 800e958:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e95a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e95c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e95e:	e841 2300 	strex	r3, r2, [r1]
 800e962:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e966:	2b00      	cmp	r3, #0
 800e968:	d1e5      	bne.n	800e936 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e96a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e96c:	2220      	movs	r2, #32
 800e96e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e976:	2b01      	cmp	r3, #1
 800e978:	d118      	bne.n	800e9ac <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e97a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	e853 3f00 	ldrex	r3, [r3]
 800e986:	60fb      	str	r3, [r7, #12]
   return(result);
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	f023 0310 	bic.w	r3, r3, #16
 800e98e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	461a      	mov	r2, r3
 800e996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e998:	61fb      	str	r3, [r7, #28]
 800e99a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e99c:	69b9      	ldr	r1, [r7, #24]
 800e99e:	69fa      	ldr	r2, [r7, #28]
 800e9a0:	e841 2300 	strex	r3, r2, [r1]
 800e9a4:	617b      	str	r3, [r7, #20]
   return(result);
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d1e6      	bne.n	800e97a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e9ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9b6:	2b01      	cmp	r3, #1
 800e9b8:	d107      	bne.n	800e9ca <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e9ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e9c0:	4619      	mov	r1, r3
 800e9c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e9c4:	f7ff f974 	bl	800dcb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e9c8:	e002      	b.n	800e9d0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800e9ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e9cc:	f7f3 fe8c 	bl	80026e8 <HAL_UART_RxCpltCallback>
}
 800e9d0:	bf00      	nop
 800e9d2:	3770      	adds	r7, #112	; 0x70
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b084      	sub	sp, #16
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9e4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9f0:	2b01      	cmp	r3, #1
 800e9f2:	d109      	bne.n	800ea08 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e9fa:	085b      	lsrs	r3, r3, #1
 800e9fc:	b29b      	uxth	r3, r3
 800e9fe:	4619      	mov	r1, r3
 800ea00:	68f8      	ldr	r0, [r7, #12]
 800ea02:	f7ff f955 	bl	800dcb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ea06:	e002      	b.n	800ea0e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ea08:	68f8      	ldr	r0, [r7, #12]
 800ea0a:	f7ff f947 	bl	800dc9c <HAL_UART_RxHalfCpltCallback>
}
 800ea0e:	bf00      	nop
 800ea10:	3710      	adds	r7, #16
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}

0800ea16 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ea16:	b580      	push	{r7, lr}
 800ea18:	b086      	sub	sp, #24
 800ea1a:	af00      	add	r7, sp, #0
 800ea1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea22:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea28:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea30:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	689b      	ldr	r3, [r3, #8]
 800ea38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea3c:	2b80      	cmp	r3, #128	; 0x80
 800ea3e:	d109      	bne.n	800ea54 <UART_DMAError+0x3e>
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	2b21      	cmp	r3, #33	; 0x21
 800ea44:	d106      	bne.n	800ea54 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	2200      	movs	r2, #0
 800ea4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800ea4e:	6978      	ldr	r0, [r7, #20]
 800ea50:	f7ff fea4 	bl	800e79c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	689b      	ldr	r3, [r3, #8]
 800ea5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea5e:	2b40      	cmp	r3, #64	; 0x40
 800ea60:	d109      	bne.n	800ea76 <UART_DMAError+0x60>
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2b22      	cmp	r3, #34	; 0x22
 800ea66:	d106      	bne.n	800ea76 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800ea70:	6978      	ldr	r0, [r7, #20]
 800ea72:	f7ff feb9 	bl	800e7e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea7c:	f043 0210 	orr.w	r2, r3, #16
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ea86:	6978      	ldr	r0, [r7, #20]
 800ea88:	f7f3 fed0 	bl	800282c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea8c:	bf00      	nop
 800ea8e:	3718      	adds	r7, #24
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}

0800ea94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b084      	sub	sp, #16
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2200      	movs	r2, #0
 800eaae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eab2:	68f8      	ldr	r0, [r7, #12]
 800eab4:	f7f3 feba 	bl	800282c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eab8:	bf00      	nop
 800eaba:	3710      	adds	r7, #16
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b088      	sub	sp, #32
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	e853 3f00 	ldrex	r3, [r3]
 800ead4:	60bb      	str	r3, [r7, #8]
   return(result);
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eadc:	61fb      	str	r3, [r7, #28]
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	461a      	mov	r2, r3
 800eae4:	69fb      	ldr	r3, [r7, #28]
 800eae6:	61bb      	str	r3, [r7, #24]
 800eae8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaea:	6979      	ldr	r1, [r7, #20]
 800eaec:	69ba      	ldr	r2, [r7, #24]
 800eaee:	e841 2300 	strex	r3, r2, [r1]
 800eaf2:	613b      	str	r3, [r7, #16]
   return(result);
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d1e6      	bne.n	800eac8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2220      	movs	r2, #32
 800eafe:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2200      	movs	r2, #0
 800eb04:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f7ff f8be 	bl	800dc88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb0c:	bf00      	nop
 800eb0e:	3720      	adds	r7, #32
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}

0800eb14 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b096      	sub	sp, #88	; 0x58
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eb22:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb2c:	2b22      	cmp	r3, #34	; 0x22
 800eb2e:	f040 8098 	bne.w	800ec62 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb38:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800eb3c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800eb40:	b2d9      	uxtb	r1, r3
 800eb42:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800eb46:	b2da      	uxtb	r2, r3
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb4c:	400a      	ands	r2, r1
 800eb4e:	b2d2      	uxtb	r2, r2
 800eb50:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb56:	1c5a      	adds	r2, r3, #1
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800eb62:	b29b      	uxth	r3, r3
 800eb64:	3b01      	subs	r3, #1
 800eb66:	b29a      	uxth	r2, r3
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800eb74:	b29b      	uxth	r3, r3
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d17b      	bne.n	800ec72 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb82:	e853 3f00 	ldrex	r3, [r3]
 800eb86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eb88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eb8e:	653b      	str	r3, [r7, #80]	; 0x50
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	461a      	mov	r2, r3
 800eb96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb98:	647b      	str	r3, [r7, #68]	; 0x44
 800eb9a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eb9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eba0:	e841 2300 	strex	r3, r2, [r1]
 800eba4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d1e6      	bne.n	800eb7a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	3308      	adds	r3, #8
 800ebb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb6:	e853 3f00 	ldrex	r3, [r3]
 800ebba:	623b      	str	r3, [r7, #32]
   return(result);
 800ebbc:	6a3b      	ldr	r3, [r7, #32]
 800ebbe:	f023 0301 	bic.w	r3, r3, #1
 800ebc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	3308      	adds	r3, #8
 800ebca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ebcc:	633a      	str	r2, [r7, #48]	; 0x30
 800ebce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ebd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebd4:	e841 2300 	strex	r3, r2, [r1]
 800ebd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ebda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d1e5      	bne.n	800ebac <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2220      	movs	r2, #32
 800ebe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	d12e      	bne.n	800ec5a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	e853 3f00 	ldrex	r3, [r3]
 800ec0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f023 0310 	bic.w	r3, r3, #16
 800ec16:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec20:	61fb      	str	r3, [r7, #28]
 800ec22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec24:	69b9      	ldr	r1, [r7, #24]
 800ec26:	69fa      	ldr	r2, [r7, #28]
 800ec28:	e841 2300 	strex	r3, r2, [r1]
 800ec2c:	617b      	str	r3, [r7, #20]
   return(result);
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d1e6      	bne.n	800ec02 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	69db      	ldr	r3, [r3, #28]
 800ec3a:	f003 0310 	and.w	r3, r3, #16
 800ec3e:	2b10      	cmp	r3, #16
 800ec40:	d103      	bne.n	800ec4a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	2210      	movs	r2, #16
 800ec48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ec50:	4619      	mov	r1, r3
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f7ff f82c 	bl	800dcb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ec58:	e00b      	b.n	800ec72 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f7f3 fd44 	bl	80026e8 <HAL_UART_RxCpltCallback>
}
 800ec60:	e007      	b.n	800ec72 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	699a      	ldr	r2, [r3, #24]
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f042 0208 	orr.w	r2, r2, #8
 800ec70:	619a      	str	r2, [r3, #24]
}
 800ec72:	bf00      	nop
 800ec74:	3758      	adds	r7, #88	; 0x58
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}

0800ec7a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ec7a:	b580      	push	{r7, lr}
 800ec7c:	b096      	sub	sp, #88	; 0x58
 800ec7e:	af00      	add	r7, sp, #0
 800ec80:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ec88:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec92:	2b22      	cmp	r3, #34	; 0x22
 800ec94:	f040 8098 	bne.w	800edc8 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec9e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eca6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800eca8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800ecac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ecb0:	4013      	ands	r3, r2
 800ecb2:	b29a      	uxth	r2, r3
 800ecb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecb6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecbc:	1c9a      	adds	r2, r3, #2
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ecc8:	b29b      	uxth	r3, r3
 800ecca:	3b01      	subs	r3, #1
 800eccc:	b29a      	uxth	r2, r3
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d17b      	bne.n	800edd8 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ece6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ece8:	e853 3f00 	ldrex	r3, [r3]
 800ecec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ecee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ecf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	461a      	mov	r2, r3
 800ecfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecfe:	643b      	str	r3, [r7, #64]	; 0x40
 800ed00:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ed04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ed06:	e841 2300 	strex	r3, r2, [r1]
 800ed0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ed0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d1e6      	bne.n	800ece0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	3308      	adds	r3, #8
 800ed18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed1a:	6a3b      	ldr	r3, [r7, #32]
 800ed1c:	e853 3f00 	ldrex	r3, [r3]
 800ed20:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed22:	69fb      	ldr	r3, [r7, #28]
 800ed24:	f023 0301 	bic.w	r3, r3, #1
 800ed28:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	3308      	adds	r3, #8
 800ed30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed32:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ed34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed3a:	e841 2300 	strex	r3, r2, [r1]
 800ed3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ed40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d1e5      	bne.n	800ed12 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2220      	movs	r2, #32
 800ed4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2200      	movs	r2, #0
 800ed52:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2200      	movs	r2, #0
 800ed58:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed5e:	2b01      	cmp	r3, #1
 800ed60:	d12e      	bne.n	800edc0 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2200      	movs	r2, #0
 800ed66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	e853 3f00 	ldrex	r3, [r3]
 800ed74:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	f023 0310 	bic.w	r3, r3, #16
 800ed7c:	647b      	str	r3, [r7, #68]	; 0x44
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	461a      	mov	r2, r3
 800ed84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed86:	61bb      	str	r3, [r7, #24]
 800ed88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed8a:	6979      	ldr	r1, [r7, #20]
 800ed8c:	69ba      	ldr	r2, [r7, #24]
 800ed8e:	e841 2300 	strex	r3, r2, [r1]
 800ed92:	613b      	str	r3, [r7, #16]
   return(result);
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d1e6      	bne.n	800ed68 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	69db      	ldr	r3, [r3, #28]
 800eda0:	f003 0310 	and.w	r3, r3, #16
 800eda4:	2b10      	cmp	r3, #16
 800eda6:	d103      	bne.n	800edb0 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	2210      	movs	r2, #16
 800edae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800edb6:	4619      	mov	r1, r3
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f7fe ff79 	bl	800dcb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800edbe:	e00b      	b.n	800edd8 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f7f3 fc91 	bl	80026e8 <HAL_UART_RxCpltCallback>
}
 800edc6:	e007      	b.n	800edd8 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	699a      	ldr	r2, [r3, #24]
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	f042 0208 	orr.w	r2, r2, #8
 800edd6:	619a      	str	r2, [r3, #24]
}
 800edd8:	bf00      	nop
 800edda:	3758      	adds	r7, #88	; 0x58
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}

0800ede0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b085      	sub	sp, #20
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	4603      	mov	r3, r0
 800ede8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800edea:	2300      	movs	r3, #0
 800edec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800edee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800edf2:	2b84      	cmp	r3, #132	; 0x84
 800edf4:	d005      	beq.n	800ee02 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800edf6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	4413      	add	r3, r2
 800edfe:	3303      	adds	r3, #3
 800ee00:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ee02:	68fb      	ldr	r3, [r7, #12]
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3714      	adds	r7, #20
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr

0800ee10 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ee10:	b480      	push	{r7}
 800ee12:	b083      	sub	sp, #12
 800ee14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee16:	f3ef 8305 	mrs	r3, IPSR
 800ee1a:	607b      	str	r3, [r7, #4]
  return(result);
 800ee1c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	bf14      	ite	ne
 800ee22:	2301      	movne	r3, #1
 800ee24:	2300      	moveq	r3, #0
 800ee26:	b2db      	uxtb	r3, r3
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	370c      	adds	r7, #12
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee32:	4770      	bx	lr

0800ee34 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ee38:	f001 fafa 	bl	8010430 <vTaskStartScheduler>
  
  return osOK;
 800ee3c:	2300      	movs	r3, #0
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ee42:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee44:	b089      	sub	sp, #36	; 0x24
 800ee46:	af04      	add	r7, sp, #16
 800ee48:	6078      	str	r0, [r7, #4]
 800ee4a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	695b      	ldr	r3, [r3, #20]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d020      	beq.n	800ee96 <osThreadCreate+0x54>
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	699b      	ldr	r3, [r3, #24]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d01c      	beq.n	800ee96 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	685c      	ldr	r4, [r3, #4]
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	691e      	ldr	r6, [r3, #16]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7ff ffb6 	bl	800ede0 <makeFreeRtosPriority>
 800ee74:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	695b      	ldr	r3, [r3, #20]
 800ee7a:	687a      	ldr	r2, [r7, #4]
 800ee7c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ee7e:	9202      	str	r2, [sp, #8]
 800ee80:	9301      	str	r3, [sp, #4]
 800ee82:	9100      	str	r1, [sp, #0]
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	4632      	mov	r2, r6
 800ee88:	4629      	mov	r1, r5
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	f001 f864 	bl	800ff58 <xTaskCreateStatic>
 800ee90:	4603      	mov	r3, r0
 800ee92:	60fb      	str	r3, [r7, #12]
 800ee94:	e01c      	b.n	800eed0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	685c      	ldr	r4, [r3, #4]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eea2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7ff ff98 	bl	800ede0 <makeFreeRtosPriority>
 800eeb0:	4602      	mov	r2, r0
 800eeb2:	f107 030c 	add.w	r3, r7, #12
 800eeb6:	9301      	str	r3, [sp, #4]
 800eeb8:	9200      	str	r2, [sp, #0]
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	4632      	mov	r2, r6
 800eebe:	4629      	mov	r1, r5
 800eec0:	4620      	mov	r0, r4
 800eec2:	f001 f8ac 	bl	801001e <xTaskCreate>
 800eec6:	4603      	mov	r3, r0
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	d001      	beq.n	800eed0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800eecc:	2300      	movs	r3, #0
 800eece:	e000      	b.n	800eed2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800eed0:	68fb      	ldr	r3, [r7, #12]
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3714      	adds	r7, #20
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eeda <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800eeda:	b580      	push	{r7, lr}
 800eedc:	b084      	sub	sp, #16
 800eede:	af00      	add	r7, sp, #0
 800eee0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d001      	beq.n	800eef0 <osDelay+0x16>
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	e000      	b.n	800eef2 <osDelay+0x18>
 800eef0:	2301      	movs	r3, #1
 800eef2:	4618      	mov	r0, r3
 800eef4:	f001 fa66 	bl	80103c4 <vTaskDelay>
  
  return osOK;
 800eef8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	3710      	adds	r7, #16
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}

0800ef02 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ef02:	b580      	push	{r7, lr}
 800ef04:	b082      	sub	sp, #8
 800ef06:	af00      	add	r7, sp, #0
 800ef08:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	685b      	ldr	r3, [r3, #4]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d007      	beq.n	800ef22 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	4619      	mov	r1, r3
 800ef18:	2001      	movs	r0, #1
 800ef1a:	f000 fb84 	bl	800f626 <xQueueCreateMutexStatic>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	e003      	b.n	800ef2a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800ef22:	2001      	movs	r0, #1
 800ef24:	f000 fb67 	bl	800f5f6 <xQueueCreateMutex>
 800ef28:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3708      	adds	r7, #8
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
	...

0800ef34 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b084      	sub	sp, #16
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ef3e:	2300      	movs	r3, #0
 800ef40:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d101      	bne.n	800ef4c <osMutexWait+0x18>
    return osErrorParameter;
 800ef48:	2380      	movs	r3, #128	; 0x80
 800ef4a:	e03a      	b.n	800efc2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef56:	d103      	bne.n	800ef60 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800ef58:	f04f 33ff 	mov.w	r3, #4294967295
 800ef5c:	60fb      	str	r3, [r7, #12]
 800ef5e:	e009      	b.n	800ef74 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d006      	beq.n	800ef74 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d101      	bne.n	800ef74 <osMutexWait+0x40>
      ticks = 1;
 800ef70:	2301      	movs	r3, #1
 800ef72:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ef74:	f7ff ff4c 	bl	800ee10 <inHandlerMode>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d017      	beq.n	800efae <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ef7e:	f107 0308 	add.w	r3, r7, #8
 800ef82:	461a      	mov	r2, r3
 800ef84:	2100      	movs	r1, #0
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	f000 fe18 	bl	800fbbc <xQueueReceiveFromISR>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	2b01      	cmp	r3, #1
 800ef90:	d001      	beq.n	800ef96 <osMutexWait+0x62>
      return osErrorOS;
 800ef92:	23ff      	movs	r3, #255	; 0xff
 800ef94:	e015      	b.n	800efc2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d011      	beq.n	800efc0 <osMutexWait+0x8c>
 800ef9c:	4b0b      	ldr	r3, [pc, #44]	; (800efcc <osMutexWait+0x98>)
 800ef9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efa2:	601a      	str	r2, [r3, #0]
 800efa4:	f3bf 8f4f 	dsb	sy
 800efa8:	f3bf 8f6f 	isb	sy
 800efac:	e008      	b.n	800efc0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800efae:	68f9      	ldr	r1, [r7, #12]
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f000 fcef 	bl	800f994 <xQueueSemaphoreTake>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2b01      	cmp	r3, #1
 800efba:	d001      	beq.n	800efc0 <osMutexWait+0x8c>
    return osErrorOS;
 800efbc:	23ff      	movs	r3, #255	; 0xff
 800efbe:	e000      	b.n	800efc2 <osMutexWait+0x8e>
  }
  
  return osOK;
 800efc0:	2300      	movs	r3, #0
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3710      	adds	r7, #16
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
 800efca:	bf00      	nop
 800efcc:	e000ed04 	.word	0xe000ed04

0800efd0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800efd8:	2300      	movs	r3, #0
 800efda:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800efdc:	2300      	movs	r3, #0
 800efde:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800efe0:	f7ff ff16 	bl	800ee10 <inHandlerMode>
 800efe4:	4603      	mov	r3, r0
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d016      	beq.n	800f018 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800efea:	f107 0308 	add.w	r3, r7, #8
 800efee:	4619      	mov	r1, r3
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f000 fc39 	bl	800f868 <xQueueGiveFromISR>
 800eff6:	4603      	mov	r3, r0
 800eff8:	2b01      	cmp	r3, #1
 800effa:	d001      	beq.n	800f000 <osMutexRelease+0x30>
      return osErrorOS;
 800effc:	23ff      	movs	r3, #255	; 0xff
 800effe:	e017      	b.n	800f030 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d013      	beq.n	800f02e <osMutexRelease+0x5e>
 800f006:	4b0c      	ldr	r3, [pc, #48]	; (800f038 <osMutexRelease+0x68>)
 800f008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f00c:	601a      	str	r2, [r3, #0]
 800f00e:	f3bf 8f4f 	dsb	sy
 800f012:	f3bf 8f6f 	isb	sy
 800f016:	e00a      	b.n	800f02e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800f018:	2300      	movs	r3, #0
 800f01a:	2200      	movs	r2, #0
 800f01c:	2100      	movs	r1, #0
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f000 fb1c 	bl	800f65c <xQueueGenericSend>
 800f024:	4603      	mov	r3, r0
 800f026:	2b01      	cmp	r3, #1
 800f028:	d001      	beq.n	800f02e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800f02a:	23ff      	movs	r3, #255	; 0xff
 800f02c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800f02e:	68fb      	ldr	r3, [r7, #12]
}
 800f030:	4618      	mov	r0, r3
 800f032:	3710      	adds	r7, #16
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}
 800f038:	e000ed04 	.word	0xe000ed04

0800f03c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b086      	sub	sp, #24
 800f040:	af02      	add	r7, sp, #8
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d00f      	beq.n	800f06e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	2b01      	cmp	r3, #1
 800f052:	d10a      	bne.n	800f06a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	685b      	ldr	r3, [r3, #4]
 800f058:	2203      	movs	r2, #3
 800f05a:	9200      	str	r2, [sp, #0]
 800f05c:	2200      	movs	r2, #0
 800f05e:	2100      	movs	r1, #0
 800f060:	2001      	movs	r0, #1
 800f062:	f000 f9cb 	bl	800f3fc <xQueueGenericCreateStatic>
 800f066:	4603      	mov	r3, r0
 800f068:	e016      	b.n	800f098 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800f06a:	2300      	movs	r3, #0
 800f06c:	e014      	b.n	800f098 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	2b01      	cmp	r3, #1
 800f072:	d110      	bne.n	800f096 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800f074:	2203      	movs	r2, #3
 800f076:	2100      	movs	r1, #0
 800f078:	2001      	movs	r0, #1
 800f07a:	f000 fa41 	bl	800f500 <xQueueGenericCreate>
 800f07e:	60f8      	str	r0, [r7, #12]
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d005      	beq.n	800f092 <osSemaphoreCreate+0x56>
 800f086:	2300      	movs	r3, #0
 800f088:	2200      	movs	r2, #0
 800f08a:	2100      	movs	r1, #0
 800f08c:	68f8      	ldr	r0, [r7, #12]
 800f08e:	f000 fae5 	bl	800f65c <xQueueGenericSend>
      return sema;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	e000      	b.n	800f098 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800f096:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3710      	adds	r7, #16
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}

0800f0a0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b084      	sub	sp, #16
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
 800f0a8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d101      	bne.n	800f0b8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800f0b4:	2380      	movs	r3, #128	; 0x80
 800f0b6:	e03a      	b.n	800f12e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0c2:	d103      	bne.n	800f0cc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800f0c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f0c8:	60fb      	str	r3, [r7, #12]
 800f0ca:	e009      	b.n	800f0e0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d006      	beq.n	800f0e0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d101      	bne.n	800f0e0 <osSemaphoreWait+0x40>
      ticks = 1;
 800f0dc:	2301      	movs	r3, #1
 800f0de:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f0e0:	f7ff fe96 	bl	800ee10 <inHandlerMode>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d017      	beq.n	800f11a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f0ea:	f107 0308 	add.w	r3, r7, #8
 800f0ee:	461a      	mov	r2, r3
 800f0f0:	2100      	movs	r1, #0
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f000 fd62 	bl	800fbbc <xQueueReceiveFromISR>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	d001      	beq.n	800f102 <osSemaphoreWait+0x62>
      return osErrorOS;
 800f0fe:	23ff      	movs	r3, #255	; 0xff
 800f100:	e015      	b.n	800f12e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d011      	beq.n	800f12c <osSemaphoreWait+0x8c>
 800f108:	4b0b      	ldr	r3, [pc, #44]	; (800f138 <osSemaphoreWait+0x98>)
 800f10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f10e:	601a      	str	r2, [r3, #0]
 800f110:	f3bf 8f4f 	dsb	sy
 800f114:	f3bf 8f6f 	isb	sy
 800f118:	e008      	b.n	800f12c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800f11a:	68f9      	ldr	r1, [r7, #12]
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f000 fc39 	bl	800f994 <xQueueSemaphoreTake>
 800f122:	4603      	mov	r3, r0
 800f124:	2b01      	cmp	r3, #1
 800f126:	d001      	beq.n	800f12c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800f128:	23ff      	movs	r3, #255	; 0xff
 800f12a:	e000      	b.n	800f12e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800f12c:	2300      	movs	r3, #0
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3710      	adds	r7, #16
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	e000ed04 	.word	0xe000ed04

0800f13c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b084      	sub	sp, #16
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f144:	2300      	movs	r3, #0
 800f146:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f148:	2300      	movs	r3, #0
 800f14a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800f14c:	f7ff fe60 	bl	800ee10 <inHandlerMode>
 800f150:	4603      	mov	r3, r0
 800f152:	2b00      	cmp	r3, #0
 800f154:	d016      	beq.n	800f184 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f156:	f107 0308 	add.w	r3, r7, #8
 800f15a:	4619      	mov	r1, r3
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f000 fb83 	bl	800f868 <xQueueGiveFromISR>
 800f162:	4603      	mov	r3, r0
 800f164:	2b01      	cmp	r3, #1
 800f166:	d001      	beq.n	800f16c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800f168:	23ff      	movs	r3, #255	; 0xff
 800f16a:	e017      	b.n	800f19c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d013      	beq.n	800f19a <osSemaphoreRelease+0x5e>
 800f172:	4b0c      	ldr	r3, [pc, #48]	; (800f1a4 <osSemaphoreRelease+0x68>)
 800f174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f178:	601a      	str	r2, [r3, #0]
 800f17a:	f3bf 8f4f 	dsb	sy
 800f17e:	f3bf 8f6f 	isb	sy
 800f182:	e00a      	b.n	800f19a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800f184:	2300      	movs	r3, #0
 800f186:	2200      	movs	r2, #0
 800f188:	2100      	movs	r1, #0
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f000 fa66 	bl	800f65c <xQueueGenericSend>
 800f190:	4603      	mov	r3, r0
 800f192:	2b01      	cmp	r3, #1
 800f194:	d001      	beq.n	800f19a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800f196:	23ff      	movs	r3, #255	; 0xff
 800f198:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800f19a:	68fb      	ldr	r3, [r7, #12]
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3710      	adds	r7, #16
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}
 800f1a4:	e000ed04 	.word	0xe000ed04

0800f1a8 <osSemaphoreGetCount>:
* @brief  Returns the current count value of a counting semaphore
* @param  semaphore_id  semaphore_id ID obtained by \ref osSemaphoreCreate.
* @retval  count value
*/
uint32_t osSemaphoreGetCount(osSemaphoreId semaphore_id)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b082      	sub	sp, #8
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
  return uxSemaphoreGetCount(semaphore_id);
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f000 fd89 	bl	800fcc8 <uxQueueMessagesWaiting>
 800f1b6:	4603      	mov	r3, r0
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3708      	adds	r7, #8
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}

0800f1c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b083      	sub	sp, #12
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f103 0208 	add.w	r2, r3, #8
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f1d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f103 0208 	add.w	r2, r3, #8
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f103 0208 	add.w	r2, r3, #8
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f1f4:	bf00      	nop
 800f1f6:	370c      	adds	r7, #12
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fe:	4770      	bx	lr

0800f200 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f200:	b480      	push	{r7}
 800f202:	b083      	sub	sp, #12
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2200      	movs	r2, #0
 800f20c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f20e:	bf00      	nop
 800f210:	370c      	adds	r7, #12
 800f212:	46bd      	mov	sp, r7
 800f214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f218:	4770      	bx	lr

0800f21a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f21a:	b480      	push	{r7}
 800f21c:	b085      	sub	sp, #20
 800f21e:	af00      	add	r7, sp, #0
 800f220:	6078      	str	r0, [r7, #4]
 800f222:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	68fa      	ldr	r2, [r7, #12]
 800f22e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	689a      	ldr	r2, [r3, #8]
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	689b      	ldr	r3, [r3, #8]
 800f23c:	683a      	ldr	r2, [r7, #0]
 800f23e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	683a      	ldr	r2, [r7, #0]
 800f244:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	687a      	ldr	r2, [r7, #4]
 800f24a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	1c5a      	adds	r2, r3, #1
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	601a      	str	r2, [r3, #0]
}
 800f256:	bf00      	nop
 800f258:	3714      	adds	r7, #20
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr

0800f262 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f262:	b480      	push	{r7}
 800f264:	b085      	sub	sp, #20
 800f266:	af00      	add	r7, sp, #0
 800f268:	6078      	str	r0, [r7, #4]
 800f26a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f278:	d103      	bne.n	800f282 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	691b      	ldr	r3, [r3, #16]
 800f27e:	60fb      	str	r3, [r7, #12]
 800f280:	e00c      	b.n	800f29c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	3308      	adds	r3, #8
 800f286:	60fb      	str	r3, [r7, #12]
 800f288:	e002      	b.n	800f290 <vListInsert+0x2e>
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	685b      	ldr	r3, [r3, #4]
 800f28e:	60fb      	str	r3, [r7, #12]
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	685b      	ldr	r3, [r3, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	68ba      	ldr	r2, [r7, #8]
 800f298:	429a      	cmp	r2, r3
 800f29a:	d2f6      	bcs.n	800f28a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	685a      	ldr	r2, [r3, #4]
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	683a      	ldr	r2, [r7, #0]
 800f2aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	68fa      	ldr	r2, [r7, #12]
 800f2b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	683a      	ldr	r2, [r7, #0]
 800f2b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	687a      	ldr	r2, [r7, #4]
 800f2bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	1c5a      	adds	r2, r3, #1
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	601a      	str	r2, [r3, #0]
}
 800f2c8:	bf00      	nop
 800f2ca:	3714      	adds	r7, #20
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d2:	4770      	bx	lr

0800f2d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f2d4:	b480      	push	{r7}
 800f2d6:	b085      	sub	sp, #20
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	691b      	ldr	r3, [r3, #16]
 800f2e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	685b      	ldr	r3, [r3, #4]
 800f2e6:	687a      	ldr	r2, [r7, #4]
 800f2e8:	6892      	ldr	r2, [r2, #8]
 800f2ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	689b      	ldr	r3, [r3, #8]
 800f2f0:	687a      	ldr	r2, [r7, #4]
 800f2f2:	6852      	ldr	r2, [r2, #4]
 800f2f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	687a      	ldr	r2, [r7, #4]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d103      	bne.n	800f308 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	689a      	ldr	r2, [r3, #8]
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2200      	movs	r2, #0
 800f30c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	1e5a      	subs	r2, r3, #1
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	681b      	ldr	r3, [r3, #0]
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	3714      	adds	r7, #20
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr

0800f328 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b084      	sub	sp, #16
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d10c      	bne.n	800f356 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f340:	b672      	cpsid	i
 800f342:	f383 8811 	msr	BASEPRI, r3
 800f346:	f3bf 8f6f 	isb	sy
 800f34a:	f3bf 8f4f 	dsb	sy
 800f34e:	b662      	cpsie	i
 800f350:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f352:	bf00      	nop
 800f354:	e7fe      	b.n	800f354 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800f356:	f001 fff1 	bl	801133c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	681a      	ldr	r2, [r3, #0]
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f362:	68f9      	ldr	r1, [r7, #12]
 800f364:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f366:	fb01 f303 	mul.w	r3, r1, r3
 800f36a:	441a      	add	r2, r3
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2200      	movs	r2, #0
 800f374:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	681a      	ldr	r2, [r3, #0]
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	681a      	ldr	r2, [r3, #0]
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f386:	3b01      	subs	r3, #1
 800f388:	68f9      	ldr	r1, [r7, #12]
 800f38a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f38c:	fb01 f303 	mul.w	r3, r1, r3
 800f390:	441a      	add	r2, r3
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	22ff      	movs	r2, #255	; 0xff
 800f39a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	22ff      	movs	r2, #255	; 0xff
 800f3a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d114      	bne.n	800f3d6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	691b      	ldr	r3, [r3, #16]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d01a      	beq.n	800f3ea <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	3310      	adds	r3, #16
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f001 faa7 	bl	801090c <xTaskRemoveFromEventList>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d012      	beq.n	800f3ea <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f3c4:	4b0c      	ldr	r3, [pc, #48]	; (800f3f8 <xQueueGenericReset+0xd0>)
 800f3c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3ca:	601a      	str	r2, [r3, #0]
 800f3cc:	f3bf 8f4f 	dsb	sy
 800f3d0:	f3bf 8f6f 	isb	sy
 800f3d4:	e009      	b.n	800f3ea <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	3310      	adds	r3, #16
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7ff fef0 	bl	800f1c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	3324      	adds	r3, #36	; 0x24
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7ff feeb 	bl	800f1c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f3ea:	f001 ffdb 	bl	80113a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f3ee:	2301      	movs	r3, #1
}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3710      	adds	r7, #16
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}
 800f3f8:	e000ed04 	.word	0xe000ed04

0800f3fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b08e      	sub	sp, #56	; 0x38
 800f400:	af02      	add	r7, sp, #8
 800f402:	60f8      	str	r0, [r7, #12]
 800f404:	60b9      	str	r1, [r7, #8]
 800f406:	607a      	str	r2, [r7, #4]
 800f408:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d10c      	bne.n	800f42a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800f410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f414:	b672      	cpsid	i
 800f416:	f383 8811 	msr	BASEPRI, r3
 800f41a:	f3bf 8f6f 	isb	sy
 800f41e:	f3bf 8f4f 	dsb	sy
 800f422:	b662      	cpsie	i
 800f424:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f426:	bf00      	nop
 800f428:	e7fe      	b.n	800f428 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d10c      	bne.n	800f44a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800f430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f434:	b672      	cpsid	i
 800f436:	f383 8811 	msr	BASEPRI, r3
 800f43a:	f3bf 8f6f 	isb	sy
 800f43e:	f3bf 8f4f 	dsb	sy
 800f442:	b662      	cpsie	i
 800f444:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f446:	bf00      	nop
 800f448:	e7fe      	b.n	800f448 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d002      	beq.n	800f456 <xQueueGenericCreateStatic+0x5a>
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d001      	beq.n	800f45a <xQueueGenericCreateStatic+0x5e>
 800f456:	2301      	movs	r3, #1
 800f458:	e000      	b.n	800f45c <xQueueGenericCreateStatic+0x60>
 800f45a:	2300      	movs	r3, #0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d10c      	bne.n	800f47a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800f460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f464:	b672      	cpsid	i
 800f466:	f383 8811 	msr	BASEPRI, r3
 800f46a:	f3bf 8f6f 	isb	sy
 800f46e:	f3bf 8f4f 	dsb	sy
 800f472:	b662      	cpsie	i
 800f474:	623b      	str	r3, [r7, #32]
}
 800f476:	bf00      	nop
 800f478:	e7fe      	b.n	800f478 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d102      	bne.n	800f486 <xQueueGenericCreateStatic+0x8a>
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d101      	bne.n	800f48a <xQueueGenericCreateStatic+0x8e>
 800f486:	2301      	movs	r3, #1
 800f488:	e000      	b.n	800f48c <xQueueGenericCreateStatic+0x90>
 800f48a:	2300      	movs	r3, #0
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d10c      	bne.n	800f4aa <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800f490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f494:	b672      	cpsid	i
 800f496:	f383 8811 	msr	BASEPRI, r3
 800f49a:	f3bf 8f6f 	isb	sy
 800f49e:	f3bf 8f4f 	dsb	sy
 800f4a2:	b662      	cpsie	i
 800f4a4:	61fb      	str	r3, [r7, #28]
}
 800f4a6:	bf00      	nop
 800f4a8:	e7fe      	b.n	800f4a8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f4aa:	2348      	movs	r3, #72	; 0x48
 800f4ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	2b48      	cmp	r3, #72	; 0x48
 800f4b2:	d00c      	beq.n	800f4ce <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800f4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b8:	b672      	cpsid	i
 800f4ba:	f383 8811 	msr	BASEPRI, r3
 800f4be:	f3bf 8f6f 	isb	sy
 800f4c2:	f3bf 8f4f 	dsb	sy
 800f4c6:	b662      	cpsie	i
 800f4c8:	61bb      	str	r3, [r7, #24]
}
 800f4ca:	bf00      	nop
 800f4cc:	e7fe      	b.n	800f4cc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f4ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d00d      	beq.n	800f4f6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4dc:	2201      	movs	r2, #1
 800f4de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f4e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e8:	9300      	str	r3, [sp, #0]
 800f4ea:	4613      	mov	r3, r2
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	68b9      	ldr	r1, [r7, #8]
 800f4f0:	68f8      	ldr	r0, [r7, #12]
 800f4f2:	f000 f847 	bl	800f584 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3730      	adds	r7, #48	; 0x30
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}

0800f500 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f500:	b580      	push	{r7, lr}
 800f502:	b08a      	sub	sp, #40	; 0x28
 800f504:	af02      	add	r7, sp, #8
 800f506:	60f8      	str	r0, [r7, #12]
 800f508:	60b9      	str	r1, [r7, #8]
 800f50a:	4613      	mov	r3, r2
 800f50c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d10c      	bne.n	800f52e <xQueueGenericCreate+0x2e>
	__asm volatile
 800f514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f518:	b672      	cpsid	i
 800f51a:	f383 8811 	msr	BASEPRI, r3
 800f51e:	f3bf 8f6f 	isb	sy
 800f522:	f3bf 8f4f 	dsb	sy
 800f526:	b662      	cpsie	i
 800f528:	613b      	str	r3, [r7, #16]
}
 800f52a:	bf00      	nop
 800f52c:	e7fe      	b.n	800f52c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d102      	bne.n	800f53a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f534:	2300      	movs	r3, #0
 800f536:	61fb      	str	r3, [r7, #28]
 800f538:	e004      	b.n	800f544 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	68ba      	ldr	r2, [r7, #8]
 800f53e:	fb02 f303 	mul.w	r3, r2, r3
 800f542:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	3348      	adds	r3, #72	; 0x48
 800f548:	4618      	mov	r0, r3
 800f54a:	f002 f823 	bl	8011594 <pvPortMalloc>
 800f54e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f550:	69bb      	ldr	r3, [r7, #24]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d011      	beq.n	800f57a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f556:	69bb      	ldr	r3, [r7, #24]
 800f558:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	3348      	adds	r3, #72	; 0x48
 800f55e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f560:	69bb      	ldr	r3, [r7, #24]
 800f562:	2200      	movs	r2, #0
 800f564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f568:	79fa      	ldrb	r2, [r7, #7]
 800f56a:	69bb      	ldr	r3, [r7, #24]
 800f56c:	9300      	str	r3, [sp, #0]
 800f56e:	4613      	mov	r3, r2
 800f570:	697a      	ldr	r2, [r7, #20]
 800f572:	68b9      	ldr	r1, [r7, #8]
 800f574:	68f8      	ldr	r0, [r7, #12]
 800f576:	f000 f805 	bl	800f584 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f57a:	69bb      	ldr	r3, [r7, #24]
	}
 800f57c:	4618      	mov	r0, r3
 800f57e:	3720      	adds	r7, #32
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}

0800f584 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b084      	sub	sp, #16
 800f588:	af00      	add	r7, sp, #0
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	60b9      	str	r1, [r7, #8]
 800f58e:	607a      	str	r2, [r7, #4]
 800f590:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d103      	bne.n	800f5a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f598:	69bb      	ldr	r3, [r7, #24]
 800f59a:	69ba      	ldr	r2, [r7, #24]
 800f59c:	601a      	str	r2, [r3, #0]
 800f59e:	e002      	b.n	800f5a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f5a0:	69bb      	ldr	r3, [r7, #24]
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f5a6:	69bb      	ldr	r3, [r7, #24]
 800f5a8:	68fa      	ldr	r2, [r7, #12]
 800f5aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f5ac:	69bb      	ldr	r3, [r7, #24]
 800f5ae:	68ba      	ldr	r2, [r7, #8]
 800f5b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f5b2:	2101      	movs	r1, #1
 800f5b4:	69b8      	ldr	r0, [r7, #24]
 800f5b6:	f7ff feb7 	bl	800f328 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f5ba:	bf00      	nop
 800f5bc:	3710      	adds	r7, #16
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}

0800f5c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f5c2:	b580      	push	{r7, lr}
 800f5c4:	b082      	sub	sp, #8
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d00e      	beq.n	800f5ee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2200      	movs	r2, #0
 800f5e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	2100      	movs	r1, #0
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f000 f837 	bl	800f65c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f5ee:	bf00      	nop
 800f5f0:	3708      	adds	r7, #8
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}

0800f5f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f5f6:	b580      	push	{r7, lr}
 800f5f8:	b086      	sub	sp, #24
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f600:	2301      	movs	r3, #1
 800f602:	617b      	str	r3, [r7, #20]
 800f604:	2300      	movs	r3, #0
 800f606:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f608:	79fb      	ldrb	r3, [r7, #7]
 800f60a:	461a      	mov	r2, r3
 800f60c:	6939      	ldr	r1, [r7, #16]
 800f60e:	6978      	ldr	r0, [r7, #20]
 800f610:	f7ff ff76 	bl	800f500 <xQueueGenericCreate>
 800f614:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f616:	68f8      	ldr	r0, [r7, #12]
 800f618:	f7ff ffd3 	bl	800f5c2 <prvInitialiseMutex>

		return xNewQueue;
 800f61c:	68fb      	ldr	r3, [r7, #12]
	}
 800f61e:	4618      	mov	r0, r3
 800f620:	3718      	adds	r7, #24
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}

0800f626 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f626:	b580      	push	{r7, lr}
 800f628:	b088      	sub	sp, #32
 800f62a:	af02      	add	r7, sp, #8
 800f62c:	4603      	mov	r3, r0
 800f62e:	6039      	str	r1, [r7, #0]
 800f630:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f632:	2301      	movs	r3, #1
 800f634:	617b      	str	r3, [r7, #20]
 800f636:	2300      	movs	r3, #0
 800f638:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f63a:	79fb      	ldrb	r3, [r7, #7]
 800f63c:	9300      	str	r3, [sp, #0]
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	2200      	movs	r2, #0
 800f642:	6939      	ldr	r1, [r7, #16]
 800f644:	6978      	ldr	r0, [r7, #20]
 800f646:	f7ff fed9 	bl	800f3fc <xQueueGenericCreateStatic>
 800f64a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f64c:	68f8      	ldr	r0, [r7, #12]
 800f64e:	f7ff ffb8 	bl	800f5c2 <prvInitialiseMutex>

		return xNewQueue;
 800f652:	68fb      	ldr	r3, [r7, #12]
	}
 800f654:	4618      	mov	r0, r3
 800f656:	3718      	adds	r7, #24
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}

0800f65c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b08e      	sub	sp, #56	; 0x38
 800f660:	af00      	add	r7, sp, #0
 800f662:	60f8      	str	r0, [r7, #12]
 800f664:	60b9      	str	r1, [r7, #8]
 800f666:	607a      	str	r2, [r7, #4]
 800f668:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f66a:	2300      	movs	r3, #0
 800f66c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f674:	2b00      	cmp	r3, #0
 800f676:	d10c      	bne.n	800f692 <xQueueGenericSend+0x36>
	__asm volatile
 800f678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f67c:	b672      	cpsid	i
 800f67e:	f383 8811 	msr	BASEPRI, r3
 800f682:	f3bf 8f6f 	isb	sy
 800f686:	f3bf 8f4f 	dsb	sy
 800f68a:	b662      	cpsie	i
 800f68c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f68e:	bf00      	nop
 800f690:	e7fe      	b.n	800f690 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d103      	bne.n	800f6a0 <xQueueGenericSend+0x44>
 800f698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d101      	bne.n	800f6a4 <xQueueGenericSend+0x48>
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	e000      	b.n	800f6a6 <xQueueGenericSend+0x4a>
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d10c      	bne.n	800f6c4 <xQueueGenericSend+0x68>
	__asm volatile
 800f6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ae:	b672      	cpsid	i
 800f6b0:	f383 8811 	msr	BASEPRI, r3
 800f6b4:	f3bf 8f6f 	isb	sy
 800f6b8:	f3bf 8f4f 	dsb	sy
 800f6bc:	b662      	cpsie	i
 800f6be:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f6c0:	bf00      	nop
 800f6c2:	e7fe      	b.n	800f6c2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	2b02      	cmp	r3, #2
 800f6c8:	d103      	bne.n	800f6d2 <xQueueGenericSend+0x76>
 800f6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6ce:	2b01      	cmp	r3, #1
 800f6d0:	d101      	bne.n	800f6d6 <xQueueGenericSend+0x7a>
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	e000      	b.n	800f6d8 <xQueueGenericSend+0x7c>
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d10c      	bne.n	800f6f6 <xQueueGenericSend+0x9a>
	__asm volatile
 800f6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e0:	b672      	cpsid	i
 800f6e2:	f383 8811 	msr	BASEPRI, r3
 800f6e6:	f3bf 8f6f 	isb	sy
 800f6ea:	f3bf 8f4f 	dsb	sy
 800f6ee:	b662      	cpsie	i
 800f6f0:	623b      	str	r3, [r7, #32]
}
 800f6f2:	bf00      	nop
 800f6f4:	e7fe      	b.n	800f6f4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f6f6:	f001 fad1 	bl	8010c9c <xTaskGetSchedulerState>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d102      	bne.n	800f706 <xQueueGenericSend+0xaa>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d101      	bne.n	800f70a <xQueueGenericSend+0xae>
 800f706:	2301      	movs	r3, #1
 800f708:	e000      	b.n	800f70c <xQueueGenericSend+0xb0>
 800f70a:	2300      	movs	r3, #0
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d10c      	bne.n	800f72a <xQueueGenericSend+0xce>
	__asm volatile
 800f710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f714:	b672      	cpsid	i
 800f716:	f383 8811 	msr	BASEPRI, r3
 800f71a:	f3bf 8f6f 	isb	sy
 800f71e:	f3bf 8f4f 	dsb	sy
 800f722:	b662      	cpsie	i
 800f724:	61fb      	str	r3, [r7, #28]
}
 800f726:	bf00      	nop
 800f728:	e7fe      	b.n	800f728 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f72a:	f001 fe07 	bl	801133c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f736:	429a      	cmp	r2, r3
 800f738:	d302      	bcc.n	800f740 <xQueueGenericSend+0xe4>
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	2b02      	cmp	r3, #2
 800f73e:	d129      	bne.n	800f794 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f740:	683a      	ldr	r2, [r7, #0]
 800f742:	68b9      	ldr	r1, [r7, #8]
 800f744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f746:	f000 faf7 	bl	800fd38 <prvCopyDataToQueue>
 800f74a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f750:	2b00      	cmp	r3, #0
 800f752:	d010      	beq.n	800f776 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f756:	3324      	adds	r3, #36	; 0x24
 800f758:	4618      	mov	r0, r3
 800f75a:	f001 f8d7 	bl	801090c <xTaskRemoveFromEventList>
 800f75e:	4603      	mov	r3, r0
 800f760:	2b00      	cmp	r3, #0
 800f762:	d013      	beq.n	800f78c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f764:	4b3f      	ldr	r3, [pc, #252]	; (800f864 <xQueueGenericSend+0x208>)
 800f766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f76a:	601a      	str	r2, [r3, #0]
 800f76c:	f3bf 8f4f 	dsb	sy
 800f770:	f3bf 8f6f 	isb	sy
 800f774:	e00a      	b.n	800f78c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d007      	beq.n	800f78c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f77c:	4b39      	ldr	r3, [pc, #228]	; (800f864 <xQueueGenericSend+0x208>)
 800f77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f782:	601a      	str	r2, [r3, #0]
 800f784:	f3bf 8f4f 	dsb	sy
 800f788:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f78c:	f001 fe0a 	bl	80113a4 <vPortExitCritical>
				return pdPASS;
 800f790:	2301      	movs	r3, #1
 800f792:	e063      	b.n	800f85c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d103      	bne.n	800f7a2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f79a:	f001 fe03 	bl	80113a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	e05c      	b.n	800f85c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d106      	bne.n	800f7b6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f7a8:	f107 0314 	add.w	r3, r7, #20
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f001 f911 	bl	80109d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f7b6:	f001 fdf5 	bl	80113a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f7ba:	f000 fea7 	bl	801050c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f7be:	f001 fdbd 	bl	801133c <vPortEnterCritical>
 800f7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f7c8:	b25b      	sxtb	r3, r3
 800f7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ce:	d103      	bne.n	800f7d8 <xQueueGenericSend+0x17c>
 800f7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f7de:	b25b      	sxtb	r3, r3
 800f7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7e4:	d103      	bne.n	800f7ee <xQueueGenericSend+0x192>
 800f7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f7ee:	f001 fdd9 	bl	80113a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f7f2:	1d3a      	adds	r2, r7, #4
 800f7f4:	f107 0314 	add.w	r3, r7, #20
 800f7f8:	4611      	mov	r1, r2
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f001 f900 	bl	8010a00 <xTaskCheckForTimeOut>
 800f800:	4603      	mov	r3, r0
 800f802:	2b00      	cmp	r3, #0
 800f804:	d124      	bne.n	800f850 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f806:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f808:	f000 fb8e 	bl	800ff28 <prvIsQueueFull>
 800f80c:	4603      	mov	r3, r0
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d018      	beq.n	800f844 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f814:	3310      	adds	r3, #16
 800f816:	687a      	ldr	r2, [r7, #4]
 800f818:	4611      	mov	r1, r2
 800f81a:	4618      	mov	r0, r3
 800f81c:	f001 f850 	bl	80108c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f822:	f000 fb19 	bl	800fe58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f826:	f000 fe7f 	bl	8010528 <xTaskResumeAll>
 800f82a:	4603      	mov	r3, r0
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	f47f af7c 	bne.w	800f72a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800f832:	4b0c      	ldr	r3, [pc, #48]	; (800f864 <xQueueGenericSend+0x208>)
 800f834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f838:	601a      	str	r2, [r3, #0]
 800f83a:	f3bf 8f4f 	dsb	sy
 800f83e:	f3bf 8f6f 	isb	sy
 800f842:	e772      	b.n	800f72a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f846:	f000 fb07 	bl	800fe58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f84a:	f000 fe6d 	bl	8010528 <xTaskResumeAll>
 800f84e:	e76c      	b.n	800f72a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f852:	f000 fb01 	bl	800fe58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f856:	f000 fe67 	bl	8010528 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f85a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3738      	adds	r7, #56	; 0x38
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}
 800f864:	e000ed04 	.word	0xe000ed04

0800f868 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b08e      	sub	sp, #56	; 0x38
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d10c      	bne.n	800f896 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800f87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f880:	b672      	cpsid	i
 800f882:	f383 8811 	msr	BASEPRI, r3
 800f886:	f3bf 8f6f 	isb	sy
 800f88a:	f3bf 8f4f 	dsb	sy
 800f88e:	b662      	cpsie	i
 800f890:	623b      	str	r3, [r7, #32]
}
 800f892:	bf00      	nop
 800f894:	e7fe      	b.n	800f894 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d00c      	beq.n	800f8b8 <xQueueGiveFromISR+0x50>
	__asm volatile
 800f89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a2:	b672      	cpsid	i
 800f8a4:	f383 8811 	msr	BASEPRI, r3
 800f8a8:	f3bf 8f6f 	isb	sy
 800f8ac:	f3bf 8f4f 	dsb	sy
 800f8b0:	b662      	cpsie	i
 800f8b2:	61fb      	str	r3, [r7, #28]
}
 800f8b4:	bf00      	nop
 800f8b6:	e7fe      	b.n	800f8b6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d103      	bne.n	800f8c8 <xQueueGiveFromISR+0x60>
 800f8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c2:	689b      	ldr	r3, [r3, #8]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d101      	bne.n	800f8cc <xQueueGiveFromISR+0x64>
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	e000      	b.n	800f8ce <xQueueGiveFromISR+0x66>
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d10c      	bne.n	800f8ec <xQueueGiveFromISR+0x84>
	__asm volatile
 800f8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d6:	b672      	cpsid	i
 800f8d8:	f383 8811 	msr	BASEPRI, r3
 800f8dc:	f3bf 8f6f 	isb	sy
 800f8e0:	f3bf 8f4f 	dsb	sy
 800f8e4:	b662      	cpsie	i
 800f8e6:	61bb      	str	r3, [r7, #24]
}
 800f8e8:	bf00      	nop
 800f8ea:	e7fe      	b.n	800f8ea <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f8ec:	f001 fe0e 	bl	801150c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f8f0:	f3ef 8211 	mrs	r2, BASEPRI
 800f8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8f8:	b672      	cpsid	i
 800f8fa:	f383 8811 	msr	BASEPRI, r3
 800f8fe:	f3bf 8f6f 	isb	sy
 800f902:	f3bf 8f4f 	dsb	sy
 800f906:	b662      	cpsie	i
 800f908:	617a      	str	r2, [r7, #20]
 800f90a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f90c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f90e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f914:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f91a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d22b      	bcs.n	800f978 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f922:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f92c:	1c5a      	adds	r2, r3, #1
 800f92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f930:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f932:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f93a:	d112      	bne.n	800f962 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f940:	2b00      	cmp	r3, #0
 800f942:	d016      	beq.n	800f972 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f946:	3324      	adds	r3, #36	; 0x24
 800f948:	4618      	mov	r0, r3
 800f94a:	f000 ffdf 	bl	801090c <xTaskRemoveFromEventList>
 800f94e:	4603      	mov	r3, r0
 800f950:	2b00      	cmp	r3, #0
 800f952:	d00e      	beq.n	800f972 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d00b      	beq.n	800f972 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	2201      	movs	r2, #1
 800f95e:	601a      	str	r2, [r3, #0]
 800f960:	e007      	b.n	800f972 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f962:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f966:	3301      	adds	r3, #1
 800f968:	b2db      	uxtb	r3, r3
 800f96a:	b25a      	sxtb	r2, r3
 800f96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f96e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f972:	2301      	movs	r3, #1
 800f974:	637b      	str	r3, [r7, #52]	; 0x34
 800f976:	e001      	b.n	800f97c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f978:	2300      	movs	r3, #0
 800f97a:	637b      	str	r3, [r7, #52]	; 0x34
 800f97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f986:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	3738      	adds	r7, #56	; 0x38
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
	...

0800f994 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b08e      	sub	sp, #56	; 0x38
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d10c      	bne.n	800f9ca <xQueueSemaphoreTake+0x36>
	__asm volatile
 800f9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b4:	b672      	cpsid	i
 800f9b6:	f383 8811 	msr	BASEPRI, r3
 800f9ba:	f3bf 8f6f 	isb	sy
 800f9be:	f3bf 8f4f 	dsb	sy
 800f9c2:	b662      	cpsie	i
 800f9c4:	623b      	str	r3, [r7, #32]
}
 800f9c6:	bf00      	nop
 800f9c8:	e7fe      	b.n	800f9c8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d00c      	beq.n	800f9ec <xQueueSemaphoreTake+0x58>
	__asm volatile
 800f9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d6:	b672      	cpsid	i
 800f9d8:	f383 8811 	msr	BASEPRI, r3
 800f9dc:	f3bf 8f6f 	isb	sy
 800f9e0:	f3bf 8f4f 	dsb	sy
 800f9e4:	b662      	cpsie	i
 800f9e6:	61fb      	str	r3, [r7, #28]
}
 800f9e8:	bf00      	nop
 800f9ea:	e7fe      	b.n	800f9ea <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f9ec:	f001 f956 	bl	8010c9c <xTaskGetSchedulerState>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d102      	bne.n	800f9fc <xQueueSemaphoreTake+0x68>
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d101      	bne.n	800fa00 <xQueueSemaphoreTake+0x6c>
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	e000      	b.n	800fa02 <xQueueSemaphoreTake+0x6e>
 800fa00:	2300      	movs	r3, #0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d10c      	bne.n	800fa20 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800fa06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa0a:	b672      	cpsid	i
 800fa0c:	f383 8811 	msr	BASEPRI, r3
 800fa10:	f3bf 8f6f 	isb	sy
 800fa14:	f3bf 8f4f 	dsb	sy
 800fa18:	b662      	cpsie	i
 800fa1a:	61bb      	str	r3, [r7, #24]
}
 800fa1c:	bf00      	nop
 800fa1e:	e7fe      	b.n	800fa1e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fa20:	f001 fc8c 	bl	801133c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fa24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa28:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d024      	beq.n	800fa7a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fa30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa32:	1e5a      	subs	r2, r3, #1
 800fa34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa36:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fa38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d104      	bne.n	800fa4a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fa40:	f001 faf2 	bl	8011028 <pvTaskIncrementMutexHeldCount>
 800fa44:	4602      	mov	r2, r0
 800fa46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa48:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fa4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa4c:	691b      	ldr	r3, [r3, #16]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d00f      	beq.n	800fa72 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fa52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa54:	3310      	adds	r3, #16
 800fa56:	4618      	mov	r0, r3
 800fa58:	f000 ff58 	bl	801090c <xTaskRemoveFromEventList>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d007      	beq.n	800fa72 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fa62:	4b55      	ldr	r3, [pc, #340]	; (800fbb8 <xQueueSemaphoreTake+0x224>)
 800fa64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa68:	601a      	str	r2, [r3, #0]
 800fa6a:	f3bf 8f4f 	dsb	sy
 800fa6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fa72:	f001 fc97 	bl	80113a4 <vPortExitCritical>
				return pdPASS;
 800fa76:	2301      	movs	r3, #1
 800fa78:	e099      	b.n	800fbae <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d113      	bne.n	800faa8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d00c      	beq.n	800faa0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800fa86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa8a:	b672      	cpsid	i
 800fa8c:	f383 8811 	msr	BASEPRI, r3
 800fa90:	f3bf 8f6f 	isb	sy
 800fa94:	f3bf 8f4f 	dsb	sy
 800fa98:	b662      	cpsie	i
 800fa9a:	617b      	str	r3, [r7, #20]
}
 800fa9c:	bf00      	nop
 800fa9e:	e7fe      	b.n	800fa9e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800faa0:	f001 fc80 	bl	80113a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800faa4:	2300      	movs	r3, #0
 800faa6:	e082      	b.n	800fbae <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800faa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d106      	bne.n	800fabc <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800faae:	f107 030c 	add.w	r3, r7, #12
 800fab2:	4618      	mov	r0, r3
 800fab4:	f000 ff8e 	bl	80109d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fab8:	2301      	movs	r3, #1
 800faba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fabc:	f001 fc72 	bl	80113a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fac0:	f000 fd24 	bl	801050c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fac4:	f001 fc3a 	bl	801133c <vPortEnterCritical>
 800fac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800face:	b25b      	sxtb	r3, r3
 800fad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fad4:	d103      	bne.n	800fade <xQueueSemaphoreTake+0x14a>
 800fad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad8:	2200      	movs	r2, #0
 800fada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fae4:	b25b      	sxtb	r3, r3
 800fae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faea:	d103      	bne.n	800faf4 <xQueueSemaphoreTake+0x160>
 800faec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faee:	2200      	movs	r2, #0
 800faf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800faf4:	f001 fc56 	bl	80113a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800faf8:	463a      	mov	r2, r7
 800fafa:	f107 030c 	add.w	r3, r7, #12
 800fafe:	4611      	mov	r1, r2
 800fb00:	4618      	mov	r0, r3
 800fb02:	f000 ff7d 	bl	8010a00 <xTaskCheckForTimeOut>
 800fb06:	4603      	mov	r3, r0
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d132      	bne.n	800fb72 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fb0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb0e:	f000 f9f5 	bl	800fefc <prvIsQueueEmpty>
 800fb12:	4603      	mov	r3, r0
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d026      	beq.n	800fb66 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d109      	bne.n	800fb34 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800fb20:	f001 fc0c 	bl	801133c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb26:	689b      	ldr	r3, [r3, #8]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f001 f8d5 	bl	8010cd8 <xTaskPriorityInherit>
 800fb2e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800fb30:	f001 fc38 	bl	80113a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb36:	3324      	adds	r3, #36	; 0x24
 800fb38:	683a      	ldr	r2, [r7, #0]
 800fb3a:	4611      	mov	r1, r2
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f000 febf 	bl	80108c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fb42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb44:	f000 f988 	bl	800fe58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fb48:	f000 fcee 	bl	8010528 <xTaskResumeAll>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	f47f af66 	bne.w	800fa20 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800fb54:	4b18      	ldr	r3, [pc, #96]	; (800fbb8 <xQueueSemaphoreTake+0x224>)
 800fb56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb5a:	601a      	str	r2, [r3, #0]
 800fb5c:	f3bf 8f4f 	dsb	sy
 800fb60:	f3bf 8f6f 	isb	sy
 800fb64:	e75c      	b.n	800fa20 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fb66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb68:	f000 f976 	bl	800fe58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fb6c:	f000 fcdc 	bl	8010528 <xTaskResumeAll>
 800fb70:	e756      	b.n	800fa20 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fb72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb74:	f000 f970 	bl	800fe58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fb78:	f000 fcd6 	bl	8010528 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fb7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb7e:	f000 f9bd 	bl	800fefc <prvIsQueueEmpty>
 800fb82:	4603      	mov	r3, r0
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	f43f af4b 	beq.w	800fa20 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d00d      	beq.n	800fbac <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800fb90:	f001 fbd4 	bl	801133c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fb94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb96:	f000 f8b7 	bl	800fd08 <prvGetDisinheritPriorityAfterTimeout>
 800fb9a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9e:	689b      	ldr	r3, [r3, #8]
 800fba0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fba2:	4618      	mov	r0, r3
 800fba4:	f001 f9a2 	bl	8010eec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fba8:	f001 fbfc 	bl	80113a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fbac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3738      	adds	r7, #56	; 0x38
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}
 800fbb6:	bf00      	nop
 800fbb8:	e000ed04 	.word	0xe000ed04

0800fbbc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b08e      	sub	sp, #56	; 0x38
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	60f8      	str	r0, [r7, #12]
 800fbc4:	60b9      	str	r1, [r7, #8]
 800fbc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d10c      	bne.n	800fbec <xQueueReceiveFromISR+0x30>
	__asm volatile
 800fbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd6:	b672      	cpsid	i
 800fbd8:	f383 8811 	msr	BASEPRI, r3
 800fbdc:	f3bf 8f6f 	isb	sy
 800fbe0:	f3bf 8f4f 	dsb	sy
 800fbe4:	b662      	cpsie	i
 800fbe6:	623b      	str	r3, [r7, #32]
}
 800fbe8:	bf00      	nop
 800fbea:	e7fe      	b.n	800fbea <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d103      	bne.n	800fbfa <xQueueReceiveFromISR+0x3e>
 800fbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d101      	bne.n	800fbfe <xQueueReceiveFromISR+0x42>
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	e000      	b.n	800fc00 <xQueueReceiveFromISR+0x44>
 800fbfe:	2300      	movs	r3, #0
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d10c      	bne.n	800fc1e <xQueueReceiveFromISR+0x62>
	__asm volatile
 800fc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc08:	b672      	cpsid	i
 800fc0a:	f383 8811 	msr	BASEPRI, r3
 800fc0e:	f3bf 8f6f 	isb	sy
 800fc12:	f3bf 8f4f 	dsb	sy
 800fc16:	b662      	cpsie	i
 800fc18:	61fb      	str	r3, [r7, #28]
}
 800fc1a:	bf00      	nop
 800fc1c:	e7fe      	b.n	800fc1c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fc1e:	f001 fc75 	bl	801150c <vPortValidateInterruptPriority>
	__asm volatile
 800fc22:	f3ef 8211 	mrs	r2, BASEPRI
 800fc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc2a:	b672      	cpsid	i
 800fc2c:	f383 8811 	msr	BASEPRI, r3
 800fc30:	f3bf 8f6f 	isb	sy
 800fc34:	f3bf 8f4f 	dsb	sy
 800fc38:	b662      	cpsie	i
 800fc3a:	61ba      	str	r2, [r7, #24]
 800fc3c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fc3e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fc40:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc46:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d02f      	beq.n	800fcae <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fc54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fc58:	68b9      	ldr	r1, [r7, #8]
 800fc5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc5c:	f000 f8d6 	bl	800fe0c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc62:	1e5a      	subs	r2, r3, #1
 800fc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc66:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fc68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fc6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc70:	d112      	bne.n	800fc98 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc74:	691b      	ldr	r3, [r3, #16]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d016      	beq.n	800fca8 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7c:	3310      	adds	r3, #16
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f000 fe44 	bl	801090c <xTaskRemoveFromEventList>
 800fc84:	4603      	mov	r3, r0
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d00e      	beq.n	800fca8 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d00b      	beq.n	800fca8 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2201      	movs	r2, #1
 800fc94:	601a      	str	r2, [r3, #0]
 800fc96:	e007      	b.n	800fca8 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fc98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc9c:	3301      	adds	r3, #1
 800fc9e:	b2db      	uxtb	r3, r3
 800fca0:	b25a      	sxtb	r2, r3
 800fca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800fca8:	2301      	movs	r3, #1
 800fcaa:	637b      	str	r3, [r7, #52]	; 0x34
 800fcac:	e001      	b.n	800fcb2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	637b      	str	r3, [r7, #52]	; 0x34
 800fcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	f383 8811 	msr	BASEPRI, r3
}
 800fcbc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fcbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	3738      	adds	r7, #56	; 0x38
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}

0800fcc8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b084      	sub	sp, #16
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d10c      	bne.n	800fcf0 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800fcd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcda:	b672      	cpsid	i
 800fcdc:	f383 8811 	msr	BASEPRI, r3
 800fce0:	f3bf 8f6f 	isb	sy
 800fce4:	f3bf 8f4f 	dsb	sy
 800fce8:	b662      	cpsie	i
 800fcea:	60bb      	str	r3, [r7, #8]
}
 800fcec:	bf00      	nop
 800fcee:	e7fe      	b.n	800fcee <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800fcf0:	f001 fb24 	bl	801133c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcf8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800fcfa:	f001 fb53 	bl	80113a4 <vPortExitCritical>

	return uxReturn;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800fd00:	4618      	mov	r0, r3
 800fd02:	3710      	adds	r7, #16
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}

0800fd08 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fd08:	b480      	push	{r7}
 800fd0a:	b085      	sub	sp, #20
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d006      	beq.n	800fd26 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	f1c3 0307 	rsb	r3, r3, #7
 800fd22:	60fb      	str	r3, [r7, #12]
 800fd24:	e001      	b.n	800fd2a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fd26:	2300      	movs	r3, #0
 800fd28:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
	}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3714      	adds	r7, #20
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr

0800fd38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b086      	sub	sp, #24
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	60f8      	str	r0, [r7, #12]
 800fd40:	60b9      	str	r1, [r7, #8]
 800fd42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fd44:	2300      	movs	r3, #0
 800fd46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d10d      	bne.n	800fd72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d14d      	bne.n	800fdfa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	689b      	ldr	r3, [r3, #8]
 800fd62:	4618      	mov	r0, r3
 800fd64:	f001 f838 	bl	8010dd8 <xTaskPriorityDisinherit>
 800fd68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	609a      	str	r2, [r3, #8]
 800fd70:	e043      	b.n	800fdfa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d119      	bne.n	800fdac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	6858      	ldr	r0, [r3, #4]
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd80:	461a      	mov	r2, r3
 800fd82:	68b9      	ldr	r1, [r7, #8]
 800fd84:	f002 fe9b 	bl	8012abe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	685a      	ldr	r2, [r3, #4]
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd90:	441a      	add	r2, r3
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	685a      	ldr	r2, [r3, #4]
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	689b      	ldr	r3, [r3, #8]
 800fd9e:	429a      	cmp	r2, r3
 800fda0:	d32b      	bcc.n	800fdfa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	681a      	ldr	r2, [r3, #0]
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	605a      	str	r2, [r3, #4]
 800fdaa:	e026      	b.n	800fdfa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	68d8      	ldr	r0, [r3, #12]
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdb4:	461a      	mov	r2, r3
 800fdb6:	68b9      	ldr	r1, [r7, #8]
 800fdb8:	f002 fe81 	bl	8012abe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	68da      	ldr	r2, [r3, #12]
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdc4:	425b      	negs	r3, r3
 800fdc6:	441a      	add	r2, r3
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	68da      	ldr	r2, [r3, #12]
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d207      	bcs.n	800fde8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	689a      	ldr	r2, [r3, #8]
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fde0:	425b      	negs	r3, r3
 800fde2:	441a      	add	r2, r3
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2b02      	cmp	r3, #2
 800fdec:	d105      	bne.n	800fdfa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d002      	beq.n	800fdfa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fdf4:	693b      	ldr	r3, [r7, #16]
 800fdf6:	3b01      	subs	r3, #1
 800fdf8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fdfa:	693b      	ldr	r3, [r7, #16]
 800fdfc:	1c5a      	adds	r2, r3, #1
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fe02:	697b      	ldr	r3, [r7, #20]
}
 800fe04:	4618      	mov	r0, r3
 800fe06:	3718      	adds	r7, #24
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}

0800fe0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d018      	beq.n	800fe50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	68da      	ldr	r2, [r3, #12]
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe26:	441a      	add	r2, r3
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	68da      	ldr	r2, [r3, #12]
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	689b      	ldr	r3, [r3, #8]
 800fe34:	429a      	cmp	r2, r3
 800fe36:	d303      	bcc.n	800fe40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681a      	ldr	r2, [r3, #0]
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	68d9      	ldr	r1, [r3, #12]
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe48:	461a      	mov	r2, r3
 800fe4a:	6838      	ldr	r0, [r7, #0]
 800fe4c:	f002 fe37 	bl	8012abe <memcpy>
	}
}
 800fe50:	bf00      	nop
 800fe52:	3708      	adds	r7, #8
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}

0800fe58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b084      	sub	sp, #16
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fe60:	f001 fa6c 	bl	801133c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fe6c:	e011      	b.n	800fe92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d012      	beq.n	800fe9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	3324      	adds	r3, #36	; 0x24
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f000 fd46 	bl	801090c <xTaskRemoveFromEventList>
 800fe80:	4603      	mov	r3, r0
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d001      	beq.n	800fe8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fe86:	f000 fe21 	bl	8010acc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fe8a:	7bfb      	ldrb	r3, [r7, #15]
 800fe8c:	3b01      	subs	r3, #1
 800fe8e:	b2db      	uxtb	r3, r3
 800fe90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fe92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	dce9      	bgt.n	800fe6e <prvUnlockQueue+0x16>
 800fe9a:	e000      	b.n	800fe9e <prvUnlockQueue+0x46>
					break;
 800fe9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	22ff      	movs	r2, #255	; 0xff
 800fea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fea6:	f001 fa7d 	bl	80113a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800feaa:	f001 fa47 	bl	801133c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800feb4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800feb6:	e011      	b.n	800fedc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	691b      	ldr	r3, [r3, #16]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d012      	beq.n	800fee6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	3310      	adds	r3, #16
 800fec4:	4618      	mov	r0, r3
 800fec6:	f000 fd21 	bl	801090c <xTaskRemoveFromEventList>
 800feca:	4603      	mov	r3, r0
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d001      	beq.n	800fed4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fed0:	f000 fdfc 	bl	8010acc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fed4:	7bbb      	ldrb	r3, [r7, #14]
 800fed6:	3b01      	subs	r3, #1
 800fed8:	b2db      	uxtb	r3, r3
 800feda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fedc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	dce9      	bgt.n	800feb8 <prvUnlockQueue+0x60>
 800fee4:	e000      	b.n	800fee8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fee6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	22ff      	movs	r2, #255	; 0xff
 800feec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fef0:	f001 fa58 	bl	80113a4 <vPortExitCritical>
}
 800fef4:	bf00      	nop
 800fef6:	3710      	adds	r7, #16
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}

0800fefc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b084      	sub	sp, #16
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ff04:	f001 fa1a 	bl	801133c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d102      	bne.n	800ff16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ff10:	2301      	movs	r3, #1
 800ff12:	60fb      	str	r3, [r7, #12]
 800ff14:	e001      	b.n	800ff1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ff16:	2300      	movs	r3, #0
 800ff18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ff1a:	f001 fa43 	bl	80113a4 <vPortExitCritical>

	return xReturn;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3710      	adds	r7, #16
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}

0800ff28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b084      	sub	sp, #16
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ff30:	f001 fa04 	bl	801133c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	d102      	bne.n	800ff46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ff40:	2301      	movs	r3, #1
 800ff42:	60fb      	str	r3, [r7, #12]
 800ff44:	e001      	b.n	800ff4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ff46:	2300      	movs	r3, #0
 800ff48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ff4a:	f001 fa2b 	bl	80113a4 <vPortExitCritical>

	return xReturn;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3710      	adds	r7, #16
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b08e      	sub	sp, #56	; 0x38
 800ff5c:	af04      	add	r7, sp, #16
 800ff5e:	60f8      	str	r0, [r7, #12]
 800ff60:	60b9      	str	r1, [r7, #8]
 800ff62:	607a      	str	r2, [r7, #4]
 800ff64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ff66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d10c      	bne.n	800ff86 <xTaskCreateStatic+0x2e>
	__asm volatile
 800ff6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff70:	b672      	cpsid	i
 800ff72:	f383 8811 	msr	BASEPRI, r3
 800ff76:	f3bf 8f6f 	isb	sy
 800ff7a:	f3bf 8f4f 	dsb	sy
 800ff7e:	b662      	cpsie	i
 800ff80:	623b      	str	r3, [r7, #32]
}
 800ff82:	bf00      	nop
 800ff84:	e7fe      	b.n	800ff84 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ff86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d10c      	bne.n	800ffa6 <xTaskCreateStatic+0x4e>
	__asm volatile
 800ff8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff90:	b672      	cpsid	i
 800ff92:	f383 8811 	msr	BASEPRI, r3
 800ff96:	f3bf 8f6f 	isb	sy
 800ff9a:	f3bf 8f4f 	dsb	sy
 800ff9e:	b662      	cpsie	i
 800ffa0:	61fb      	str	r3, [r7, #28]
}
 800ffa2:	bf00      	nop
 800ffa4:	e7fe      	b.n	800ffa4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ffa6:	23a0      	movs	r3, #160	; 0xa0
 800ffa8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	2ba0      	cmp	r3, #160	; 0xa0
 800ffae:	d00c      	beq.n	800ffca <xTaskCreateStatic+0x72>
	__asm volatile
 800ffb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffb4:	b672      	cpsid	i
 800ffb6:	f383 8811 	msr	BASEPRI, r3
 800ffba:	f3bf 8f6f 	isb	sy
 800ffbe:	f3bf 8f4f 	dsb	sy
 800ffc2:	b662      	cpsie	i
 800ffc4:	61bb      	str	r3, [r7, #24]
}
 800ffc6:	bf00      	nop
 800ffc8:	e7fe      	b.n	800ffc8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ffca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ffcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d01e      	beq.n	8010010 <xTaskCreateStatic+0xb8>
 800ffd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d01b      	beq.n	8010010 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ffd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ffdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffe0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ffe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe4:	2202      	movs	r2, #2
 800ffe6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ffea:	2300      	movs	r3, #0
 800ffec:	9303      	str	r3, [sp, #12]
 800ffee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff0:	9302      	str	r3, [sp, #8]
 800fff2:	f107 0314 	add.w	r3, r7, #20
 800fff6:	9301      	str	r3, [sp, #4]
 800fff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fffa:	9300      	str	r3, [sp, #0]
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	68b9      	ldr	r1, [r7, #8]
 8010002:	68f8      	ldr	r0, [r7, #12]
 8010004:	f000 f850 	bl	80100a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801000a:	f000 f8ed 	bl	80101e8 <prvAddNewTaskToReadyList>
 801000e:	e001      	b.n	8010014 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8010010:	2300      	movs	r3, #0
 8010012:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010014:	697b      	ldr	r3, [r7, #20]
	}
 8010016:	4618      	mov	r0, r3
 8010018:	3728      	adds	r7, #40	; 0x28
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}

0801001e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801001e:	b580      	push	{r7, lr}
 8010020:	b08c      	sub	sp, #48	; 0x30
 8010022:	af04      	add	r7, sp, #16
 8010024:	60f8      	str	r0, [r7, #12]
 8010026:	60b9      	str	r1, [r7, #8]
 8010028:	603b      	str	r3, [r7, #0]
 801002a:	4613      	mov	r3, r2
 801002c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801002e:	88fb      	ldrh	r3, [r7, #6]
 8010030:	009b      	lsls	r3, r3, #2
 8010032:	4618      	mov	r0, r3
 8010034:	f001 faae 	bl	8011594 <pvPortMalloc>
 8010038:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d00e      	beq.n	801005e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010040:	20a0      	movs	r0, #160	; 0xa0
 8010042:	f001 faa7 	bl	8011594 <pvPortMalloc>
 8010046:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010048:	69fb      	ldr	r3, [r7, #28]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d003      	beq.n	8010056 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801004e:	69fb      	ldr	r3, [r7, #28]
 8010050:	697a      	ldr	r2, [r7, #20]
 8010052:	631a      	str	r2, [r3, #48]	; 0x30
 8010054:	e005      	b.n	8010062 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010056:	6978      	ldr	r0, [r7, #20]
 8010058:	f001 fb66 	bl	8011728 <vPortFree>
 801005c:	e001      	b.n	8010062 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801005e:	2300      	movs	r3, #0
 8010060:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010062:	69fb      	ldr	r3, [r7, #28]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d017      	beq.n	8010098 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010068:	69fb      	ldr	r3, [r7, #28]
 801006a:	2200      	movs	r2, #0
 801006c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010070:	88fa      	ldrh	r2, [r7, #6]
 8010072:	2300      	movs	r3, #0
 8010074:	9303      	str	r3, [sp, #12]
 8010076:	69fb      	ldr	r3, [r7, #28]
 8010078:	9302      	str	r3, [sp, #8]
 801007a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801007c:	9301      	str	r3, [sp, #4]
 801007e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010080:	9300      	str	r3, [sp, #0]
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	68b9      	ldr	r1, [r7, #8]
 8010086:	68f8      	ldr	r0, [r7, #12]
 8010088:	f000 f80e 	bl	80100a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801008c:	69f8      	ldr	r0, [r7, #28]
 801008e:	f000 f8ab 	bl	80101e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010092:	2301      	movs	r3, #1
 8010094:	61bb      	str	r3, [r7, #24]
 8010096:	e002      	b.n	801009e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010098:	f04f 33ff 	mov.w	r3, #4294967295
 801009c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801009e:	69bb      	ldr	r3, [r7, #24]
	}
 80100a0:	4618      	mov	r0, r3
 80100a2:	3720      	adds	r7, #32
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b088      	sub	sp, #32
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	60f8      	str	r0, [r7, #12]
 80100b0:	60b9      	str	r1, [r7, #8]
 80100b2:	607a      	str	r2, [r7, #4]
 80100b4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80100b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80100ba:	6879      	ldr	r1, [r7, #4]
 80100bc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80100c0:	440b      	add	r3, r1
 80100c2:	009b      	lsls	r3, r3, #2
 80100c4:	4413      	add	r3, r2
 80100c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80100c8:	69bb      	ldr	r3, [r7, #24]
 80100ca:	f023 0307 	bic.w	r3, r3, #7
 80100ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80100d0:	69bb      	ldr	r3, [r7, #24]
 80100d2:	f003 0307 	and.w	r3, r3, #7
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d00c      	beq.n	80100f4 <prvInitialiseNewTask+0x4c>
	__asm volatile
 80100da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100de:	b672      	cpsid	i
 80100e0:	f383 8811 	msr	BASEPRI, r3
 80100e4:	f3bf 8f6f 	isb	sy
 80100e8:	f3bf 8f4f 	dsb	sy
 80100ec:	b662      	cpsie	i
 80100ee:	617b      	str	r3, [r7, #20]
}
 80100f0:	bf00      	nop
 80100f2:	e7fe      	b.n	80100f2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d01f      	beq.n	801013a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80100fa:	2300      	movs	r3, #0
 80100fc:	61fb      	str	r3, [r7, #28]
 80100fe:	e012      	b.n	8010126 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010100:	68ba      	ldr	r2, [r7, #8]
 8010102:	69fb      	ldr	r3, [r7, #28]
 8010104:	4413      	add	r3, r2
 8010106:	7819      	ldrb	r1, [r3, #0]
 8010108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801010a:	69fb      	ldr	r3, [r7, #28]
 801010c:	4413      	add	r3, r2
 801010e:	3334      	adds	r3, #52	; 0x34
 8010110:	460a      	mov	r2, r1
 8010112:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010114:	68ba      	ldr	r2, [r7, #8]
 8010116:	69fb      	ldr	r3, [r7, #28]
 8010118:	4413      	add	r3, r2
 801011a:	781b      	ldrb	r3, [r3, #0]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d006      	beq.n	801012e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010120:	69fb      	ldr	r3, [r7, #28]
 8010122:	3301      	adds	r3, #1
 8010124:	61fb      	str	r3, [r7, #28]
 8010126:	69fb      	ldr	r3, [r7, #28]
 8010128:	2b0f      	cmp	r3, #15
 801012a:	d9e9      	bls.n	8010100 <prvInitialiseNewTask+0x58>
 801012c:	e000      	b.n	8010130 <prvInitialiseNewTask+0x88>
			{
				break;
 801012e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010132:	2200      	movs	r2, #0
 8010134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010138:	e003      	b.n	8010142 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801013a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801013c:	2200      	movs	r2, #0
 801013e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010144:	2b06      	cmp	r3, #6
 8010146:	d901      	bls.n	801014c <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010148:	2306      	movs	r3, #6
 801014a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801014c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801014e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010150:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010156:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801015a:	2200      	movs	r2, #0
 801015c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801015e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010160:	3304      	adds	r3, #4
 8010162:	4618      	mov	r0, r3
 8010164:	f7ff f84c 	bl	800f200 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801016a:	3318      	adds	r3, #24
 801016c:	4618      	mov	r0, r3
 801016e:	f7ff f847 	bl	800f200 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010176:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801017a:	f1c3 0207 	rsb	r2, r3, #7
 801017e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010180:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010186:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801018a:	2200      	movs	r2, #0
 801018c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010192:	2200      	movs	r2, #0
 8010194:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801019a:	334c      	adds	r3, #76	; 0x4c
 801019c:	224c      	movs	r2, #76	; 0x4c
 801019e:	2100      	movs	r1, #0
 80101a0:	4618      	mov	r0, r3
 80101a2:	f002 fba4 	bl	80128ee <memset>
 80101a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a8:	4a0c      	ldr	r2, [pc, #48]	; (80101dc <prvInitialiseNewTask+0x134>)
 80101aa:	651a      	str	r2, [r3, #80]	; 0x50
 80101ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ae:	4a0c      	ldr	r2, [pc, #48]	; (80101e0 <prvInitialiseNewTask+0x138>)
 80101b0:	655a      	str	r2, [r3, #84]	; 0x54
 80101b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b4:	4a0b      	ldr	r2, [pc, #44]	; (80101e4 <prvInitialiseNewTask+0x13c>)
 80101b6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80101b8:	683a      	ldr	r2, [r7, #0]
 80101ba:	68f9      	ldr	r1, [r7, #12]
 80101bc:	69b8      	ldr	r0, [r7, #24]
 80101be:	f000 ffad 	bl	801111c <pxPortInitialiseStack>
 80101c2:	4602      	mov	r2, r0
 80101c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80101c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d002      	beq.n	80101d4 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80101ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80101d4:	bf00      	nop
 80101d6:	3720      	adds	r7, #32
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	20004a9c 	.word	0x20004a9c
 80101e0:	20004b04 	.word	0x20004b04
 80101e4:	20004b6c 	.word	0x20004b6c

080101e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80101f0:	f001 f8a4 	bl	801133c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80101f4:	4b2a      	ldr	r3, [pc, #168]	; (80102a0 <prvAddNewTaskToReadyList+0xb8>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	3301      	adds	r3, #1
 80101fa:	4a29      	ldr	r2, [pc, #164]	; (80102a0 <prvAddNewTaskToReadyList+0xb8>)
 80101fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80101fe:	4b29      	ldr	r3, [pc, #164]	; (80102a4 <prvAddNewTaskToReadyList+0xbc>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d109      	bne.n	801021a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010206:	4a27      	ldr	r2, [pc, #156]	; (80102a4 <prvAddNewTaskToReadyList+0xbc>)
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801020c:	4b24      	ldr	r3, [pc, #144]	; (80102a0 <prvAddNewTaskToReadyList+0xb8>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	2b01      	cmp	r3, #1
 8010212:	d110      	bne.n	8010236 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010214:	f000 fc7e 	bl	8010b14 <prvInitialiseTaskLists>
 8010218:	e00d      	b.n	8010236 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801021a:	4b23      	ldr	r3, [pc, #140]	; (80102a8 <prvAddNewTaskToReadyList+0xc0>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d109      	bne.n	8010236 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010222:	4b20      	ldr	r3, [pc, #128]	; (80102a4 <prvAddNewTaskToReadyList+0xbc>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801022c:	429a      	cmp	r2, r3
 801022e:	d802      	bhi.n	8010236 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010230:	4a1c      	ldr	r2, [pc, #112]	; (80102a4 <prvAddNewTaskToReadyList+0xbc>)
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010236:	4b1d      	ldr	r3, [pc, #116]	; (80102ac <prvAddNewTaskToReadyList+0xc4>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	3301      	adds	r3, #1
 801023c:	4a1b      	ldr	r2, [pc, #108]	; (80102ac <prvAddNewTaskToReadyList+0xc4>)
 801023e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010244:	2201      	movs	r2, #1
 8010246:	409a      	lsls	r2, r3
 8010248:	4b19      	ldr	r3, [pc, #100]	; (80102b0 <prvAddNewTaskToReadyList+0xc8>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	4313      	orrs	r3, r2
 801024e:	4a18      	ldr	r2, [pc, #96]	; (80102b0 <prvAddNewTaskToReadyList+0xc8>)
 8010250:	6013      	str	r3, [r2, #0]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010256:	4613      	mov	r3, r2
 8010258:	009b      	lsls	r3, r3, #2
 801025a:	4413      	add	r3, r2
 801025c:	009b      	lsls	r3, r3, #2
 801025e:	4a15      	ldr	r2, [pc, #84]	; (80102b4 <prvAddNewTaskToReadyList+0xcc>)
 8010260:	441a      	add	r2, r3
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	3304      	adds	r3, #4
 8010266:	4619      	mov	r1, r3
 8010268:	4610      	mov	r0, r2
 801026a:	f7fe ffd6 	bl	800f21a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801026e:	f001 f899 	bl	80113a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010272:	4b0d      	ldr	r3, [pc, #52]	; (80102a8 <prvAddNewTaskToReadyList+0xc0>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d00e      	beq.n	8010298 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801027a:	4b0a      	ldr	r3, [pc, #40]	; (80102a4 <prvAddNewTaskToReadyList+0xbc>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010284:	429a      	cmp	r2, r3
 8010286:	d207      	bcs.n	8010298 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010288:	4b0b      	ldr	r3, [pc, #44]	; (80102b8 <prvAddNewTaskToReadyList+0xd0>)
 801028a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801028e:	601a      	str	r2, [r3, #0]
 8010290:	f3bf 8f4f 	dsb	sy
 8010294:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010298:	bf00      	nop
 801029a:	3708      	adds	r7, #8
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}
 80102a0:	20000e50 	.word	0x20000e50
 80102a4:	20000d50 	.word	0x20000d50
 80102a8:	20000e5c 	.word	0x20000e5c
 80102ac:	20000e6c 	.word	0x20000e6c
 80102b0:	20000e58 	.word	0x20000e58
 80102b4:	20000d54 	.word	0x20000d54
 80102b8:	e000ed04 	.word	0xe000ed04

080102bc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b08a      	sub	sp, #40	; 0x28
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80102c6:	2300      	movs	r3, #0
 80102c8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d10c      	bne.n	80102ea <vTaskDelayUntil+0x2e>
	__asm volatile
 80102d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d4:	b672      	cpsid	i
 80102d6:	f383 8811 	msr	BASEPRI, r3
 80102da:	f3bf 8f6f 	isb	sy
 80102de:	f3bf 8f4f 	dsb	sy
 80102e2:	b662      	cpsie	i
 80102e4:	617b      	str	r3, [r7, #20]
}
 80102e6:	bf00      	nop
 80102e8:	e7fe      	b.n	80102e8 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d10c      	bne.n	801030a <vTaskDelayUntil+0x4e>
	__asm volatile
 80102f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f4:	b672      	cpsid	i
 80102f6:	f383 8811 	msr	BASEPRI, r3
 80102fa:	f3bf 8f6f 	isb	sy
 80102fe:	f3bf 8f4f 	dsb	sy
 8010302:	b662      	cpsie	i
 8010304:	613b      	str	r3, [r7, #16]
}
 8010306:	bf00      	nop
 8010308:	e7fe      	b.n	8010308 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 801030a:	4b2b      	ldr	r3, [pc, #172]	; (80103b8 <vTaskDelayUntil+0xfc>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d00c      	beq.n	801032c <vTaskDelayUntil+0x70>
	__asm volatile
 8010312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010316:	b672      	cpsid	i
 8010318:	f383 8811 	msr	BASEPRI, r3
 801031c:	f3bf 8f6f 	isb	sy
 8010320:	f3bf 8f4f 	dsb	sy
 8010324:	b662      	cpsie	i
 8010326:	60fb      	str	r3, [r7, #12]
}
 8010328:	bf00      	nop
 801032a:	e7fe      	b.n	801032a <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 801032c:	f000 f8ee 	bl	801050c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8010330:	4b22      	ldr	r3, [pc, #136]	; (80103bc <vTaskDelayUntil+0x100>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	683a      	ldr	r2, [r7, #0]
 801033c:	4413      	add	r3, r2
 801033e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	6a3a      	ldr	r2, [r7, #32]
 8010346:	429a      	cmp	r2, r3
 8010348:	d20b      	bcs.n	8010362 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	69fa      	ldr	r2, [r7, #28]
 8010350:	429a      	cmp	r2, r3
 8010352:	d211      	bcs.n	8010378 <vTaskDelayUntil+0xbc>
 8010354:	69fa      	ldr	r2, [r7, #28]
 8010356:	6a3b      	ldr	r3, [r7, #32]
 8010358:	429a      	cmp	r2, r3
 801035a:	d90d      	bls.n	8010378 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 801035c:	2301      	movs	r3, #1
 801035e:	627b      	str	r3, [r7, #36]	; 0x24
 8010360:	e00a      	b.n	8010378 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	69fa      	ldr	r2, [r7, #28]
 8010368:	429a      	cmp	r2, r3
 801036a:	d303      	bcc.n	8010374 <vTaskDelayUntil+0xb8>
 801036c:	69fa      	ldr	r2, [r7, #28]
 801036e:	6a3b      	ldr	r3, [r7, #32]
 8010370:	429a      	cmp	r2, r3
 8010372:	d901      	bls.n	8010378 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8010374:	2301      	movs	r3, #1
 8010376:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	69fa      	ldr	r2, [r7, #28]
 801037c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801037e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010380:	2b00      	cmp	r3, #0
 8010382:	d006      	beq.n	8010392 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8010384:	69fa      	ldr	r2, [r7, #28]
 8010386:	6a3b      	ldr	r3, [r7, #32]
 8010388:	1ad3      	subs	r3, r2, r3
 801038a:	2100      	movs	r1, #0
 801038c:	4618      	mov	r0, r3
 801038e:	f000 fe5f 	bl	8011050 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8010392:	f000 f8c9 	bl	8010528 <xTaskResumeAll>
 8010396:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010398:	69bb      	ldr	r3, [r7, #24]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d107      	bne.n	80103ae <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 801039e:	4b08      	ldr	r3, [pc, #32]	; (80103c0 <vTaskDelayUntil+0x104>)
 80103a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103a4:	601a      	str	r2, [r3, #0]
 80103a6:	f3bf 8f4f 	dsb	sy
 80103aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80103ae:	bf00      	nop
 80103b0:	3728      	adds	r7, #40	; 0x28
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}
 80103b6:	bf00      	nop
 80103b8:	20000e78 	.word	0x20000e78
 80103bc:	20000e54 	.word	0x20000e54
 80103c0:	e000ed04 	.word	0xe000ed04

080103c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b084      	sub	sp, #16
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80103cc:	2300      	movs	r3, #0
 80103ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d019      	beq.n	801040a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80103d6:	4b14      	ldr	r3, [pc, #80]	; (8010428 <vTaskDelay+0x64>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d00c      	beq.n	80103f8 <vTaskDelay+0x34>
	__asm volatile
 80103de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103e2:	b672      	cpsid	i
 80103e4:	f383 8811 	msr	BASEPRI, r3
 80103e8:	f3bf 8f6f 	isb	sy
 80103ec:	f3bf 8f4f 	dsb	sy
 80103f0:	b662      	cpsie	i
 80103f2:	60bb      	str	r3, [r7, #8]
}
 80103f4:	bf00      	nop
 80103f6:	e7fe      	b.n	80103f6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80103f8:	f000 f888 	bl	801050c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80103fc:	2100      	movs	r1, #0
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f000 fe26 	bl	8011050 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010404:	f000 f890 	bl	8010528 <xTaskResumeAll>
 8010408:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d107      	bne.n	8010420 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8010410:	4b06      	ldr	r3, [pc, #24]	; (801042c <vTaskDelay+0x68>)
 8010412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010416:	601a      	str	r2, [r3, #0]
 8010418:	f3bf 8f4f 	dsb	sy
 801041c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010420:	bf00      	nop
 8010422:	3710      	adds	r7, #16
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}
 8010428:	20000e78 	.word	0x20000e78
 801042c:	e000ed04 	.word	0xe000ed04

08010430 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b08a      	sub	sp, #40	; 0x28
 8010434:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010436:	2300      	movs	r3, #0
 8010438:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801043a:	2300      	movs	r3, #0
 801043c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801043e:	463a      	mov	r2, r7
 8010440:	1d39      	adds	r1, r7, #4
 8010442:	f107 0308 	add.w	r3, r7, #8
 8010446:	4618      	mov	r0, r3
 8010448:	f7f2 f934 	bl	80026b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801044c:	6839      	ldr	r1, [r7, #0]
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	68ba      	ldr	r2, [r7, #8]
 8010452:	9202      	str	r2, [sp, #8]
 8010454:	9301      	str	r3, [sp, #4]
 8010456:	2300      	movs	r3, #0
 8010458:	9300      	str	r3, [sp, #0]
 801045a:	2300      	movs	r3, #0
 801045c:	460a      	mov	r2, r1
 801045e:	4923      	ldr	r1, [pc, #140]	; (80104ec <vTaskStartScheduler+0xbc>)
 8010460:	4823      	ldr	r0, [pc, #140]	; (80104f0 <vTaskStartScheduler+0xc0>)
 8010462:	f7ff fd79 	bl	800ff58 <xTaskCreateStatic>
 8010466:	4603      	mov	r3, r0
 8010468:	4a22      	ldr	r2, [pc, #136]	; (80104f4 <vTaskStartScheduler+0xc4>)
 801046a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801046c:	4b21      	ldr	r3, [pc, #132]	; (80104f4 <vTaskStartScheduler+0xc4>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d002      	beq.n	801047a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010474:	2301      	movs	r3, #1
 8010476:	617b      	str	r3, [r7, #20]
 8010478:	e001      	b.n	801047e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801047a:	2300      	movs	r3, #0
 801047c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	2b01      	cmp	r3, #1
 8010482:	d11d      	bne.n	80104c0 <vTaskStartScheduler+0x90>
	__asm volatile
 8010484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010488:	b672      	cpsid	i
 801048a:	f383 8811 	msr	BASEPRI, r3
 801048e:	f3bf 8f6f 	isb	sy
 8010492:	f3bf 8f4f 	dsb	sy
 8010496:	b662      	cpsie	i
 8010498:	613b      	str	r3, [r7, #16]
}
 801049a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801049c:	4b16      	ldr	r3, [pc, #88]	; (80104f8 <vTaskStartScheduler+0xc8>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	334c      	adds	r3, #76	; 0x4c
 80104a2:	4a16      	ldr	r2, [pc, #88]	; (80104fc <vTaskStartScheduler+0xcc>)
 80104a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80104a6:	4b16      	ldr	r3, [pc, #88]	; (8010500 <vTaskStartScheduler+0xd0>)
 80104a8:	f04f 32ff 	mov.w	r2, #4294967295
 80104ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80104ae:	4b15      	ldr	r3, [pc, #84]	; (8010504 <vTaskStartScheduler+0xd4>)
 80104b0:	2201      	movs	r2, #1
 80104b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80104b4:	4b14      	ldr	r3, [pc, #80]	; (8010508 <vTaskStartScheduler+0xd8>)
 80104b6:	2200      	movs	r2, #0
 80104b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80104ba:	f000 fec1 	bl	8011240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80104be:	e010      	b.n	80104e2 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80104c0:	697b      	ldr	r3, [r7, #20]
 80104c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104c6:	d10c      	bne.n	80104e2 <vTaskStartScheduler+0xb2>
	__asm volatile
 80104c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104cc:	b672      	cpsid	i
 80104ce:	f383 8811 	msr	BASEPRI, r3
 80104d2:	f3bf 8f6f 	isb	sy
 80104d6:	f3bf 8f4f 	dsb	sy
 80104da:	b662      	cpsie	i
 80104dc:	60fb      	str	r3, [r7, #12]
}
 80104de:	bf00      	nop
 80104e0:	e7fe      	b.n	80104e0 <vTaskStartScheduler+0xb0>
}
 80104e2:	bf00      	nop
 80104e4:	3718      	adds	r7, #24
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}
 80104ea:	bf00      	nop
 80104ec:	08018088 	.word	0x08018088
 80104f0:	08010ae5 	.word	0x08010ae5
 80104f4:	20000e74 	.word	0x20000e74
 80104f8:	20000d50 	.word	0x20000d50
 80104fc:	20000070 	.word	0x20000070
 8010500:	20000e70 	.word	0x20000e70
 8010504:	20000e5c 	.word	0x20000e5c
 8010508:	20000e54 	.word	0x20000e54

0801050c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801050c:	b480      	push	{r7}
 801050e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010510:	4b04      	ldr	r3, [pc, #16]	; (8010524 <vTaskSuspendAll+0x18>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	3301      	adds	r3, #1
 8010516:	4a03      	ldr	r2, [pc, #12]	; (8010524 <vTaskSuspendAll+0x18>)
 8010518:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801051a:	bf00      	nop
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	4770      	bx	lr
 8010524:	20000e78 	.word	0x20000e78

08010528 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b084      	sub	sp, #16
 801052c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801052e:	2300      	movs	r3, #0
 8010530:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010532:	2300      	movs	r3, #0
 8010534:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010536:	4b42      	ldr	r3, [pc, #264]	; (8010640 <xTaskResumeAll+0x118>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d10c      	bne.n	8010558 <xTaskResumeAll+0x30>
	__asm volatile
 801053e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010542:	b672      	cpsid	i
 8010544:	f383 8811 	msr	BASEPRI, r3
 8010548:	f3bf 8f6f 	isb	sy
 801054c:	f3bf 8f4f 	dsb	sy
 8010550:	b662      	cpsie	i
 8010552:	603b      	str	r3, [r7, #0]
}
 8010554:	bf00      	nop
 8010556:	e7fe      	b.n	8010556 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010558:	f000 fef0 	bl	801133c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801055c:	4b38      	ldr	r3, [pc, #224]	; (8010640 <xTaskResumeAll+0x118>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	3b01      	subs	r3, #1
 8010562:	4a37      	ldr	r2, [pc, #220]	; (8010640 <xTaskResumeAll+0x118>)
 8010564:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010566:	4b36      	ldr	r3, [pc, #216]	; (8010640 <xTaskResumeAll+0x118>)
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d161      	bne.n	8010632 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801056e:	4b35      	ldr	r3, [pc, #212]	; (8010644 <xTaskResumeAll+0x11c>)
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d05d      	beq.n	8010632 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010576:	e02e      	b.n	80105d6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010578:	4b33      	ldr	r3, [pc, #204]	; (8010648 <xTaskResumeAll+0x120>)
 801057a:	68db      	ldr	r3, [r3, #12]
 801057c:	68db      	ldr	r3, [r3, #12]
 801057e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	3318      	adds	r3, #24
 8010584:	4618      	mov	r0, r3
 8010586:	f7fe fea5 	bl	800f2d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	3304      	adds	r3, #4
 801058e:	4618      	mov	r0, r3
 8010590:	f7fe fea0 	bl	800f2d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010598:	2201      	movs	r2, #1
 801059a:	409a      	lsls	r2, r3
 801059c:	4b2b      	ldr	r3, [pc, #172]	; (801064c <xTaskResumeAll+0x124>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	4313      	orrs	r3, r2
 80105a2:	4a2a      	ldr	r2, [pc, #168]	; (801064c <xTaskResumeAll+0x124>)
 80105a4:	6013      	str	r3, [r2, #0]
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105aa:	4613      	mov	r3, r2
 80105ac:	009b      	lsls	r3, r3, #2
 80105ae:	4413      	add	r3, r2
 80105b0:	009b      	lsls	r3, r3, #2
 80105b2:	4a27      	ldr	r2, [pc, #156]	; (8010650 <xTaskResumeAll+0x128>)
 80105b4:	441a      	add	r2, r3
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	3304      	adds	r3, #4
 80105ba:	4619      	mov	r1, r3
 80105bc:	4610      	mov	r0, r2
 80105be:	f7fe fe2c 	bl	800f21a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105c6:	4b23      	ldr	r3, [pc, #140]	; (8010654 <xTaskResumeAll+0x12c>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105cc:	429a      	cmp	r2, r3
 80105ce:	d302      	bcc.n	80105d6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80105d0:	4b21      	ldr	r3, [pc, #132]	; (8010658 <xTaskResumeAll+0x130>)
 80105d2:	2201      	movs	r2, #1
 80105d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80105d6:	4b1c      	ldr	r3, [pc, #112]	; (8010648 <xTaskResumeAll+0x120>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d1cc      	bne.n	8010578 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d001      	beq.n	80105e8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80105e4:	f000 fb3a 	bl	8010c5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80105e8:	4b1c      	ldr	r3, [pc, #112]	; (801065c <xTaskResumeAll+0x134>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d010      	beq.n	8010616 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80105f4:	f000 f846 	bl	8010684 <xTaskIncrementTick>
 80105f8:	4603      	mov	r3, r0
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d002      	beq.n	8010604 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80105fe:	4b16      	ldr	r3, [pc, #88]	; (8010658 <xTaskResumeAll+0x130>)
 8010600:	2201      	movs	r2, #1
 8010602:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	3b01      	subs	r3, #1
 8010608:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d1f1      	bne.n	80105f4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8010610:	4b12      	ldr	r3, [pc, #72]	; (801065c <xTaskResumeAll+0x134>)
 8010612:	2200      	movs	r2, #0
 8010614:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010616:	4b10      	ldr	r3, [pc, #64]	; (8010658 <xTaskResumeAll+0x130>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d009      	beq.n	8010632 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801061e:	2301      	movs	r3, #1
 8010620:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010622:	4b0f      	ldr	r3, [pc, #60]	; (8010660 <xTaskResumeAll+0x138>)
 8010624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010628:	601a      	str	r2, [r3, #0]
 801062a:	f3bf 8f4f 	dsb	sy
 801062e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010632:	f000 feb7 	bl	80113a4 <vPortExitCritical>

	return xAlreadyYielded;
 8010636:	68bb      	ldr	r3, [r7, #8]
}
 8010638:	4618      	mov	r0, r3
 801063a:	3710      	adds	r7, #16
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}
 8010640:	20000e78 	.word	0x20000e78
 8010644:	20000e50 	.word	0x20000e50
 8010648:	20000e10 	.word	0x20000e10
 801064c:	20000e58 	.word	0x20000e58
 8010650:	20000d54 	.word	0x20000d54
 8010654:	20000d50 	.word	0x20000d50
 8010658:	20000e64 	.word	0x20000e64
 801065c:	20000e60 	.word	0x20000e60
 8010660:	e000ed04 	.word	0xe000ed04

08010664 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010664:	b480      	push	{r7}
 8010666:	b083      	sub	sp, #12
 8010668:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801066a:	4b05      	ldr	r3, [pc, #20]	; (8010680 <xTaskGetTickCount+0x1c>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010670:	687b      	ldr	r3, [r7, #4]
}
 8010672:	4618      	mov	r0, r3
 8010674:	370c      	adds	r7, #12
 8010676:	46bd      	mov	sp, r7
 8010678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067c:	4770      	bx	lr
 801067e:	bf00      	nop
 8010680:	20000e54 	.word	0x20000e54

08010684 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b086      	sub	sp, #24
 8010688:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801068a:	2300      	movs	r3, #0
 801068c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801068e:	4b4f      	ldr	r3, [pc, #316]	; (80107cc <xTaskIncrementTick+0x148>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	2b00      	cmp	r3, #0
 8010694:	f040 808a 	bne.w	80107ac <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010698:	4b4d      	ldr	r3, [pc, #308]	; (80107d0 <xTaskIncrementTick+0x14c>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	3301      	adds	r3, #1
 801069e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80106a0:	4a4b      	ldr	r2, [pc, #300]	; (80107d0 <xTaskIncrementTick+0x14c>)
 80106a2:	693b      	ldr	r3, [r7, #16]
 80106a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d122      	bne.n	80106f2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80106ac:	4b49      	ldr	r3, [pc, #292]	; (80107d4 <xTaskIncrementTick+0x150>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d00c      	beq.n	80106d0 <xTaskIncrementTick+0x4c>
	__asm volatile
 80106b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ba:	b672      	cpsid	i
 80106bc:	f383 8811 	msr	BASEPRI, r3
 80106c0:	f3bf 8f6f 	isb	sy
 80106c4:	f3bf 8f4f 	dsb	sy
 80106c8:	b662      	cpsie	i
 80106ca:	603b      	str	r3, [r7, #0]
}
 80106cc:	bf00      	nop
 80106ce:	e7fe      	b.n	80106ce <xTaskIncrementTick+0x4a>
 80106d0:	4b40      	ldr	r3, [pc, #256]	; (80107d4 <xTaskIncrementTick+0x150>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	60fb      	str	r3, [r7, #12]
 80106d6:	4b40      	ldr	r3, [pc, #256]	; (80107d8 <xTaskIncrementTick+0x154>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	4a3e      	ldr	r2, [pc, #248]	; (80107d4 <xTaskIncrementTick+0x150>)
 80106dc:	6013      	str	r3, [r2, #0]
 80106de:	4a3e      	ldr	r2, [pc, #248]	; (80107d8 <xTaskIncrementTick+0x154>)
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	6013      	str	r3, [r2, #0]
 80106e4:	4b3d      	ldr	r3, [pc, #244]	; (80107dc <xTaskIncrementTick+0x158>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	3301      	adds	r3, #1
 80106ea:	4a3c      	ldr	r2, [pc, #240]	; (80107dc <xTaskIncrementTick+0x158>)
 80106ec:	6013      	str	r3, [r2, #0]
 80106ee:	f000 fab5 	bl	8010c5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80106f2:	4b3b      	ldr	r3, [pc, #236]	; (80107e0 <xTaskIncrementTick+0x15c>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	693a      	ldr	r2, [r7, #16]
 80106f8:	429a      	cmp	r2, r3
 80106fa:	d348      	bcc.n	801078e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80106fc:	4b35      	ldr	r3, [pc, #212]	; (80107d4 <xTaskIncrementTick+0x150>)
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d104      	bne.n	8010710 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010706:	4b36      	ldr	r3, [pc, #216]	; (80107e0 <xTaskIncrementTick+0x15c>)
 8010708:	f04f 32ff 	mov.w	r2, #4294967295
 801070c:	601a      	str	r2, [r3, #0]
					break;
 801070e:	e03e      	b.n	801078e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010710:	4b30      	ldr	r3, [pc, #192]	; (80107d4 <xTaskIncrementTick+0x150>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	68db      	ldr	r3, [r3, #12]
 8010716:	68db      	ldr	r3, [r3, #12]
 8010718:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	685b      	ldr	r3, [r3, #4]
 801071e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010720:	693a      	ldr	r2, [r7, #16]
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	429a      	cmp	r2, r3
 8010726:	d203      	bcs.n	8010730 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010728:	4a2d      	ldr	r2, [pc, #180]	; (80107e0 <xTaskIncrementTick+0x15c>)
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801072e:	e02e      	b.n	801078e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	3304      	adds	r3, #4
 8010734:	4618      	mov	r0, r3
 8010736:	f7fe fdcd 	bl	800f2d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801073e:	2b00      	cmp	r3, #0
 8010740:	d004      	beq.n	801074c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010742:	68bb      	ldr	r3, [r7, #8]
 8010744:	3318      	adds	r3, #24
 8010746:	4618      	mov	r0, r3
 8010748:	f7fe fdc4 	bl	800f2d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010750:	2201      	movs	r2, #1
 8010752:	409a      	lsls	r2, r3
 8010754:	4b23      	ldr	r3, [pc, #140]	; (80107e4 <xTaskIncrementTick+0x160>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	4313      	orrs	r3, r2
 801075a:	4a22      	ldr	r2, [pc, #136]	; (80107e4 <xTaskIncrementTick+0x160>)
 801075c:	6013      	str	r3, [r2, #0]
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010762:	4613      	mov	r3, r2
 8010764:	009b      	lsls	r3, r3, #2
 8010766:	4413      	add	r3, r2
 8010768:	009b      	lsls	r3, r3, #2
 801076a:	4a1f      	ldr	r2, [pc, #124]	; (80107e8 <xTaskIncrementTick+0x164>)
 801076c:	441a      	add	r2, r3
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	3304      	adds	r3, #4
 8010772:	4619      	mov	r1, r3
 8010774:	4610      	mov	r0, r2
 8010776:	f7fe fd50 	bl	800f21a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801077e:	4b1b      	ldr	r3, [pc, #108]	; (80107ec <xTaskIncrementTick+0x168>)
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010784:	429a      	cmp	r2, r3
 8010786:	d3b9      	bcc.n	80106fc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8010788:	2301      	movs	r3, #1
 801078a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801078c:	e7b6      	b.n	80106fc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801078e:	4b17      	ldr	r3, [pc, #92]	; (80107ec <xTaskIncrementTick+0x168>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010794:	4914      	ldr	r1, [pc, #80]	; (80107e8 <xTaskIncrementTick+0x164>)
 8010796:	4613      	mov	r3, r2
 8010798:	009b      	lsls	r3, r3, #2
 801079a:	4413      	add	r3, r2
 801079c:	009b      	lsls	r3, r3, #2
 801079e:	440b      	add	r3, r1
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	2b01      	cmp	r3, #1
 80107a4:	d907      	bls.n	80107b6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80107a6:	2301      	movs	r3, #1
 80107a8:	617b      	str	r3, [r7, #20]
 80107aa:	e004      	b.n	80107b6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80107ac:	4b10      	ldr	r3, [pc, #64]	; (80107f0 <xTaskIncrementTick+0x16c>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	3301      	adds	r3, #1
 80107b2:	4a0f      	ldr	r2, [pc, #60]	; (80107f0 <xTaskIncrementTick+0x16c>)
 80107b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80107b6:	4b0f      	ldr	r3, [pc, #60]	; (80107f4 <xTaskIncrementTick+0x170>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d001      	beq.n	80107c2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80107be:	2301      	movs	r3, #1
 80107c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80107c2:	697b      	ldr	r3, [r7, #20]
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	3718      	adds	r7, #24
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}
 80107cc:	20000e78 	.word	0x20000e78
 80107d0:	20000e54 	.word	0x20000e54
 80107d4:	20000e08 	.word	0x20000e08
 80107d8:	20000e0c 	.word	0x20000e0c
 80107dc:	20000e68 	.word	0x20000e68
 80107e0:	20000e70 	.word	0x20000e70
 80107e4:	20000e58 	.word	0x20000e58
 80107e8:	20000d54 	.word	0x20000d54
 80107ec:	20000d50 	.word	0x20000d50
 80107f0:	20000e60 	.word	0x20000e60
 80107f4:	20000e64 	.word	0x20000e64

080107f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80107f8:	b480      	push	{r7}
 80107fa:	b087      	sub	sp, #28
 80107fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80107fe:	4b2a      	ldr	r3, [pc, #168]	; (80108a8 <vTaskSwitchContext+0xb0>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d003      	beq.n	801080e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010806:	4b29      	ldr	r3, [pc, #164]	; (80108ac <vTaskSwitchContext+0xb4>)
 8010808:	2201      	movs	r2, #1
 801080a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801080c:	e046      	b.n	801089c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801080e:	4b27      	ldr	r3, [pc, #156]	; (80108ac <vTaskSwitchContext+0xb4>)
 8010810:	2200      	movs	r2, #0
 8010812:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010814:	4b26      	ldr	r3, [pc, #152]	; (80108b0 <vTaskSwitchContext+0xb8>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	fab3 f383 	clz	r3, r3
 8010820:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010822:	7afb      	ldrb	r3, [r7, #11]
 8010824:	f1c3 031f 	rsb	r3, r3, #31
 8010828:	617b      	str	r3, [r7, #20]
 801082a:	4922      	ldr	r1, [pc, #136]	; (80108b4 <vTaskSwitchContext+0xbc>)
 801082c:	697a      	ldr	r2, [r7, #20]
 801082e:	4613      	mov	r3, r2
 8010830:	009b      	lsls	r3, r3, #2
 8010832:	4413      	add	r3, r2
 8010834:	009b      	lsls	r3, r3, #2
 8010836:	440b      	add	r3, r1
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d10c      	bne.n	8010858 <vTaskSwitchContext+0x60>
	__asm volatile
 801083e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010842:	b672      	cpsid	i
 8010844:	f383 8811 	msr	BASEPRI, r3
 8010848:	f3bf 8f6f 	isb	sy
 801084c:	f3bf 8f4f 	dsb	sy
 8010850:	b662      	cpsie	i
 8010852:	607b      	str	r3, [r7, #4]
}
 8010854:	bf00      	nop
 8010856:	e7fe      	b.n	8010856 <vTaskSwitchContext+0x5e>
 8010858:	697a      	ldr	r2, [r7, #20]
 801085a:	4613      	mov	r3, r2
 801085c:	009b      	lsls	r3, r3, #2
 801085e:	4413      	add	r3, r2
 8010860:	009b      	lsls	r3, r3, #2
 8010862:	4a14      	ldr	r2, [pc, #80]	; (80108b4 <vTaskSwitchContext+0xbc>)
 8010864:	4413      	add	r3, r2
 8010866:	613b      	str	r3, [r7, #16]
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	685b      	ldr	r3, [r3, #4]
 801086c:	685a      	ldr	r2, [r3, #4]
 801086e:	693b      	ldr	r3, [r7, #16]
 8010870:	605a      	str	r2, [r3, #4]
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	685a      	ldr	r2, [r3, #4]
 8010876:	693b      	ldr	r3, [r7, #16]
 8010878:	3308      	adds	r3, #8
 801087a:	429a      	cmp	r2, r3
 801087c:	d104      	bne.n	8010888 <vTaskSwitchContext+0x90>
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	685b      	ldr	r3, [r3, #4]
 8010882:	685a      	ldr	r2, [r3, #4]
 8010884:	693b      	ldr	r3, [r7, #16]
 8010886:	605a      	str	r2, [r3, #4]
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	685b      	ldr	r3, [r3, #4]
 801088c:	68db      	ldr	r3, [r3, #12]
 801088e:	4a0a      	ldr	r2, [pc, #40]	; (80108b8 <vTaskSwitchContext+0xc0>)
 8010890:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010892:	4b09      	ldr	r3, [pc, #36]	; (80108b8 <vTaskSwitchContext+0xc0>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	334c      	adds	r3, #76	; 0x4c
 8010898:	4a08      	ldr	r2, [pc, #32]	; (80108bc <vTaskSwitchContext+0xc4>)
 801089a:	6013      	str	r3, [r2, #0]
}
 801089c:	bf00      	nop
 801089e:	371c      	adds	r7, #28
 80108a0:	46bd      	mov	sp, r7
 80108a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a6:	4770      	bx	lr
 80108a8:	20000e78 	.word	0x20000e78
 80108ac:	20000e64 	.word	0x20000e64
 80108b0:	20000e58 	.word	0x20000e58
 80108b4:	20000d54 	.word	0x20000d54
 80108b8:	20000d50 	.word	0x20000d50
 80108bc:	20000070 	.word	0x20000070

080108c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d10c      	bne.n	80108ea <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80108d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108d4:	b672      	cpsid	i
 80108d6:	f383 8811 	msr	BASEPRI, r3
 80108da:	f3bf 8f6f 	isb	sy
 80108de:	f3bf 8f4f 	dsb	sy
 80108e2:	b662      	cpsie	i
 80108e4:	60fb      	str	r3, [r7, #12]
}
 80108e6:	bf00      	nop
 80108e8:	e7fe      	b.n	80108e8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80108ea:	4b07      	ldr	r3, [pc, #28]	; (8010908 <vTaskPlaceOnEventList+0x48>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	3318      	adds	r3, #24
 80108f0:	4619      	mov	r1, r3
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f7fe fcb5 	bl	800f262 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80108f8:	2101      	movs	r1, #1
 80108fa:	6838      	ldr	r0, [r7, #0]
 80108fc:	f000 fba8 	bl	8011050 <prvAddCurrentTaskToDelayedList>
}
 8010900:	bf00      	nop
 8010902:	3710      	adds	r7, #16
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}
 8010908:	20000d50 	.word	0x20000d50

0801090c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b086      	sub	sp, #24
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	68db      	ldr	r3, [r3, #12]
 8010918:	68db      	ldr	r3, [r3, #12]
 801091a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d10c      	bne.n	801093c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8010922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010926:	b672      	cpsid	i
 8010928:	f383 8811 	msr	BASEPRI, r3
 801092c:	f3bf 8f6f 	isb	sy
 8010930:	f3bf 8f4f 	dsb	sy
 8010934:	b662      	cpsie	i
 8010936:	60fb      	str	r3, [r7, #12]
}
 8010938:	bf00      	nop
 801093a:	e7fe      	b.n	801093a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801093c:	693b      	ldr	r3, [r7, #16]
 801093e:	3318      	adds	r3, #24
 8010940:	4618      	mov	r0, r3
 8010942:	f7fe fcc7 	bl	800f2d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010946:	4b1d      	ldr	r3, [pc, #116]	; (80109bc <xTaskRemoveFromEventList+0xb0>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d11c      	bne.n	8010988 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801094e:	693b      	ldr	r3, [r7, #16]
 8010950:	3304      	adds	r3, #4
 8010952:	4618      	mov	r0, r3
 8010954:	f7fe fcbe 	bl	800f2d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801095c:	2201      	movs	r2, #1
 801095e:	409a      	lsls	r2, r3
 8010960:	4b17      	ldr	r3, [pc, #92]	; (80109c0 <xTaskRemoveFromEventList+0xb4>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	4313      	orrs	r3, r2
 8010966:	4a16      	ldr	r2, [pc, #88]	; (80109c0 <xTaskRemoveFromEventList+0xb4>)
 8010968:	6013      	str	r3, [r2, #0]
 801096a:	693b      	ldr	r3, [r7, #16]
 801096c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801096e:	4613      	mov	r3, r2
 8010970:	009b      	lsls	r3, r3, #2
 8010972:	4413      	add	r3, r2
 8010974:	009b      	lsls	r3, r3, #2
 8010976:	4a13      	ldr	r2, [pc, #76]	; (80109c4 <xTaskRemoveFromEventList+0xb8>)
 8010978:	441a      	add	r2, r3
 801097a:	693b      	ldr	r3, [r7, #16]
 801097c:	3304      	adds	r3, #4
 801097e:	4619      	mov	r1, r3
 8010980:	4610      	mov	r0, r2
 8010982:	f7fe fc4a 	bl	800f21a <vListInsertEnd>
 8010986:	e005      	b.n	8010994 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010988:	693b      	ldr	r3, [r7, #16]
 801098a:	3318      	adds	r3, #24
 801098c:	4619      	mov	r1, r3
 801098e:	480e      	ldr	r0, [pc, #56]	; (80109c8 <xTaskRemoveFromEventList+0xbc>)
 8010990:	f7fe fc43 	bl	800f21a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010994:	693b      	ldr	r3, [r7, #16]
 8010996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010998:	4b0c      	ldr	r3, [pc, #48]	; (80109cc <xTaskRemoveFromEventList+0xc0>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801099e:	429a      	cmp	r2, r3
 80109a0:	d905      	bls.n	80109ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80109a2:	2301      	movs	r3, #1
 80109a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80109a6:	4b0a      	ldr	r3, [pc, #40]	; (80109d0 <xTaskRemoveFromEventList+0xc4>)
 80109a8:	2201      	movs	r2, #1
 80109aa:	601a      	str	r2, [r3, #0]
 80109ac:	e001      	b.n	80109b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80109ae:	2300      	movs	r3, #0
 80109b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80109b2:	697b      	ldr	r3, [r7, #20]
}
 80109b4:	4618      	mov	r0, r3
 80109b6:	3718      	adds	r7, #24
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}
 80109bc:	20000e78 	.word	0x20000e78
 80109c0:	20000e58 	.word	0x20000e58
 80109c4:	20000d54 	.word	0x20000d54
 80109c8:	20000e10 	.word	0x20000e10
 80109cc:	20000d50 	.word	0x20000d50
 80109d0:	20000e64 	.word	0x20000e64

080109d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80109d4:	b480      	push	{r7}
 80109d6:	b083      	sub	sp, #12
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80109dc:	4b06      	ldr	r3, [pc, #24]	; (80109f8 <vTaskInternalSetTimeOutState+0x24>)
 80109de:	681a      	ldr	r2, [r3, #0]
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80109e4:	4b05      	ldr	r3, [pc, #20]	; (80109fc <vTaskInternalSetTimeOutState+0x28>)
 80109e6:	681a      	ldr	r2, [r3, #0]
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	605a      	str	r2, [r3, #4]
}
 80109ec:	bf00      	nop
 80109ee:	370c      	adds	r7, #12
 80109f0:	46bd      	mov	sp, r7
 80109f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f6:	4770      	bx	lr
 80109f8:	20000e68 	.word	0x20000e68
 80109fc:	20000e54 	.word	0x20000e54

08010a00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b088      	sub	sp, #32
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
 8010a08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d10c      	bne.n	8010a2a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8010a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a14:	b672      	cpsid	i
 8010a16:	f383 8811 	msr	BASEPRI, r3
 8010a1a:	f3bf 8f6f 	isb	sy
 8010a1e:	f3bf 8f4f 	dsb	sy
 8010a22:	b662      	cpsie	i
 8010a24:	613b      	str	r3, [r7, #16]
}
 8010a26:	bf00      	nop
 8010a28:	e7fe      	b.n	8010a28 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d10c      	bne.n	8010a4a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8010a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a34:	b672      	cpsid	i
 8010a36:	f383 8811 	msr	BASEPRI, r3
 8010a3a:	f3bf 8f6f 	isb	sy
 8010a3e:	f3bf 8f4f 	dsb	sy
 8010a42:	b662      	cpsie	i
 8010a44:	60fb      	str	r3, [r7, #12]
}
 8010a46:	bf00      	nop
 8010a48:	e7fe      	b.n	8010a48 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8010a4a:	f000 fc77 	bl	801133c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010a4e:	4b1d      	ldr	r3, [pc, #116]	; (8010ac4 <xTaskCheckForTimeOut+0xc4>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	685b      	ldr	r3, [r3, #4]
 8010a58:	69ba      	ldr	r2, [r7, #24]
 8010a5a:	1ad3      	subs	r3, r2, r3
 8010a5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a66:	d102      	bne.n	8010a6e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	61fb      	str	r3, [r7, #28]
 8010a6c:	e023      	b.n	8010ab6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681a      	ldr	r2, [r3, #0]
 8010a72:	4b15      	ldr	r3, [pc, #84]	; (8010ac8 <xTaskCheckForTimeOut+0xc8>)
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	429a      	cmp	r2, r3
 8010a78:	d007      	beq.n	8010a8a <xTaskCheckForTimeOut+0x8a>
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	685b      	ldr	r3, [r3, #4]
 8010a7e:	69ba      	ldr	r2, [r7, #24]
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d302      	bcc.n	8010a8a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010a84:	2301      	movs	r3, #1
 8010a86:	61fb      	str	r3, [r7, #28]
 8010a88:	e015      	b.n	8010ab6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	697a      	ldr	r2, [r7, #20]
 8010a90:	429a      	cmp	r2, r3
 8010a92:	d20b      	bcs.n	8010aac <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	681a      	ldr	r2, [r3, #0]
 8010a98:	697b      	ldr	r3, [r7, #20]
 8010a9a:	1ad2      	subs	r2, r2, r3
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f7ff ff97 	bl	80109d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	61fb      	str	r3, [r7, #28]
 8010aaa:	e004      	b.n	8010ab6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010ab6:	f000 fc75 	bl	80113a4 <vPortExitCritical>

	return xReturn;
 8010aba:	69fb      	ldr	r3, [r7, #28]
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3720      	adds	r7, #32
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}
 8010ac4:	20000e54 	.word	0x20000e54
 8010ac8:	20000e68 	.word	0x20000e68

08010acc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010acc:	b480      	push	{r7}
 8010ace:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010ad0:	4b03      	ldr	r3, [pc, #12]	; (8010ae0 <vTaskMissedYield+0x14>)
 8010ad2:	2201      	movs	r2, #1
 8010ad4:	601a      	str	r2, [r3, #0]
}
 8010ad6:	bf00      	nop
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ade:	4770      	bx	lr
 8010ae0:	20000e64 	.word	0x20000e64

08010ae4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b082      	sub	sp, #8
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010aec:	f000 f852 	bl	8010b94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010af0:	4b06      	ldr	r3, [pc, #24]	; (8010b0c <prvIdleTask+0x28>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	2b01      	cmp	r3, #1
 8010af6:	d9f9      	bls.n	8010aec <prvIdleTask+0x8>
			{
				taskYIELD();
 8010af8:	4b05      	ldr	r3, [pc, #20]	; (8010b10 <prvIdleTask+0x2c>)
 8010afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010afe:	601a      	str	r2, [r3, #0]
 8010b00:	f3bf 8f4f 	dsb	sy
 8010b04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010b08:	e7f0      	b.n	8010aec <prvIdleTask+0x8>
 8010b0a:	bf00      	nop
 8010b0c:	20000d54 	.word	0x20000d54
 8010b10:	e000ed04 	.word	0xe000ed04

08010b14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b082      	sub	sp, #8
 8010b18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	607b      	str	r3, [r7, #4]
 8010b1e:	e00c      	b.n	8010b3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010b20:	687a      	ldr	r2, [r7, #4]
 8010b22:	4613      	mov	r3, r2
 8010b24:	009b      	lsls	r3, r3, #2
 8010b26:	4413      	add	r3, r2
 8010b28:	009b      	lsls	r3, r3, #2
 8010b2a:	4a12      	ldr	r2, [pc, #72]	; (8010b74 <prvInitialiseTaskLists+0x60>)
 8010b2c:	4413      	add	r3, r2
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7fe fb46 	bl	800f1c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	3301      	adds	r3, #1
 8010b38:	607b      	str	r3, [r7, #4]
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2b06      	cmp	r3, #6
 8010b3e:	d9ef      	bls.n	8010b20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010b40:	480d      	ldr	r0, [pc, #52]	; (8010b78 <prvInitialiseTaskLists+0x64>)
 8010b42:	f7fe fb3d 	bl	800f1c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010b46:	480d      	ldr	r0, [pc, #52]	; (8010b7c <prvInitialiseTaskLists+0x68>)
 8010b48:	f7fe fb3a 	bl	800f1c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010b4c:	480c      	ldr	r0, [pc, #48]	; (8010b80 <prvInitialiseTaskLists+0x6c>)
 8010b4e:	f7fe fb37 	bl	800f1c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010b52:	480c      	ldr	r0, [pc, #48]	; (8010b84 <prvInitialiseTaskLists+0x70>)
 8010b54:	f7fe fb34 	bl	800f1c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010b58:	480b      	ldr	r0, [pc, #44]	; (8010b88 <prvInitialiseTaskLists+0x74>)
 8010b5a:	f7fe fb31 	bl	800f1c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010b5e:	4b0b      	ldr	r3, [pc, #44]	; (8010b8c <prvInitialiseTaskLists+0x78>)
 8010b60:	4a05      	ldr	r2, [pc, #20]	; (8010b78 <prvInitialiseTaskLists+0x64>)
 8010b62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010b64:	4b0a      	ldr	r3, [pc, #40]	; (8010b90 <prvInitialiseTaskLists+0x7c>)
 8010b66:	4a05      	ldr	r2, [pc, #20]	; (8010b7c <prvInitialiseTaskLists+0x68>)
 8010b68:	601a      	str	r2, [r3, #0]
}
 8010b6a:	bf00      	nop
 8010b6c:	3708      	adds	r7, #8
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}
 8010b72:	bf00      	nop
 8010b74:	20000d54 	.word	0x20000d54
 8010b78:	20000de0 	.word	0x20000de0
 8010b7c:	20000df4 	.word	0x20000df4
 8010b80:	20000e10 	.word	0x20000e10
 8010b84:	20000e24 	.word	0x20000e24
 8010b88:	20000e3c 	.word	0x20000e3c
 8010b8c:	20000e08 	.word	0x20000e08
 8010b90:	20000e0c 	.word	0x20000e0c

08010b94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b082      	sub	sp, #8
 8010b98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010b9a:	e019      	b.n	8010bd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010b9c:	f000 fbce 	bl	801133c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ba0:	4b10      	ldr	r3, [pc, #64]	; (8010be4 <prvCheckTasksWaitingTermination+0x50>)
 8010ba2:	68db      	ldr	r3, [r3, #12]
 8010ba4:	68db      	ldr	r3, [r3, #12]
 8010ba6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	3304      	adds	r3, #4
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7fe fb91 	bl	800f2d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010bb2:	4b0d      	ldr	r3, [pc, #52]	; (8010be8 <prvCheckTasksWaitingTermination+0x54>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	3b01      	subs	r3, #1
 8010bb8:	4a0b      	ldr	r2, [pc, #44]	; (8010be8 <prvCheckTasksWaitingTermination+0x54>)
 8010bba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010bbc:	4b0b      	ldr	r3, [pc, #44]	; (8010bec <prvCheckTasksWaitingTermination+0x58>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	3b01      	subs	r3, #1
 8010bc2:	4a0a      	ldr	r2, [pc, #40]	; (8010bec <prvCheckTasksWaitingTermination+0x58>)
 8010bc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010bc6:	f000 fbed 	bl	80113a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f000 f810 	bl	8010bf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010bd0:	4b06      	ldr	r3, [pc, #24]	; (8010bec <prvCheckTasksWaitingTermination+0x58>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d1e1      	bne.n	8010b9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010bd8:	bf00      	nop
 8010bda:	bf00      	nop
 8010bdc:	3708      	adds	r7, #8
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}
 8010be2:	bf00      	nop
 8010be4:	20000e24 	.word	0x20000e24
 8010be8:	20000e50 	.word	0x20000e50
 8010bec:	20000e38 	.word	0x20000e38

08010bf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b084      	sub	sp, #16
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	334c      	adds	r3, #76	; 0x4c
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f001 fea5 	bl	801294c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d108      	bne.n	8010c1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c10:	4618      	mov	r0, r3
 8010c12:	f000 fd89 	bl	8011728 <vPortFree>
				vPortFree( pxTCB );
 8010c16:	6878      	ldr	r0, [r7, #4]
 8010c18:	f000 fd86 	bl	8011728 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010c1c:	e01a      	b.n	8010c54 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010c24:	2b01      	cmp	r3, #1
 8010c26:	d103      	bne.n	8010c30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f000 fd7d 	bl	8011728 <vPortFree>
	}
 8010c2e:	e011      	b.n	8010c54 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010c36:	2b02      	cmp	r3, #2
 8010c38:	d00c      	beq.n	8010c54 <prvDeleteTCB+0x64>
	__asm volatile
 8010c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c3e:	b672      	cpsid	i
 8010c40:	f383 8811 	msr	BASEPRI, r3
 8010c44:	f3bf 8f6f 	isb	sy
 8010c48:	f3bf 8f4f 	dsb	sy
 8010c4c:	b662      	cpsie	i
 8010c4e:	60fb      	str	r3, [r7, #12]
}
 8010c50:	bf00      	nop
 8010c52:	e7fe      	b.n	8010c52 <prvDeleteTCB+0x62>
	}
 8010c54:	bf00      	nop
 8010c56:	3710      	adds	r7, #16
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}

08010c5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	b083      	sub	sp, #12
 8010c60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010c62:	4b0c      	ldr	r3, [pc, #48]	; (8010c94 <prvResetNextTaskUnblockTime+0x38>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d104      	bne.n	8010c76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010c6c:	4b0a      	ldr	r3, [pc, #40]	; (8010c98 <prvResetNextTaskUnblockTime+0x3c>)
 8010c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8010c72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010c74:	e008      	b.n	8010c88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c76:	4b07      	ldr	r3, [pc, #28]	; (8010c94 <prvResetNextTaskUnblockTime+0x38>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	68db      	ldr	r3, [r3, #12]
 8010c7c:	68db      	ldr	r3, [r3, #12]
 8010c7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	685b      	ldr	r3, [r3, #4]
 8010c84:	4a04      	ldr	r2, [pc, #16]	; (8010c98 <prvResetNextTaskUnblockTime+0x3c>)
 8010c86:	6013      	str	r3, [r2, #0]
}
 8010c88:	bf00      	nop
 8010c8a:	370c      	adds	r7, #12
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c92:	4770      	bx	lr
 8010c94:	20000e08 	.word	0x20000e08
 8010c98:	20000e70 	.word	0x20000e70

08010c9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010c9c:	b480      	push	{r7}
 8010c9e:	b083      	sub	sp, #12
 8010ca0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010ca2:	4b0b      	ldr	r3, [pc, #44]	; (8010cd0 <xTaskGetSchedulerState+0x34>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d102      	bne.n	8010cb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010caa:	2301      	movs	r3, #1
 8010cac:	607b      	str	r3, [r7, #4]
 8010cae:	e008      	b.n	8010cc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010cb0:	4b08      	ldr	r3, [pc, #32]	; (8010cd4 <xTaskGetSchedulerState+0x38>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d102      	bne.n	8010cbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010cb8:	2302      	movs	r3, #2
 8010cba:	607b      	str	r3, [r7, #4]
 8010cbc:	e001      	b.n	8010cc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010cc2:	687b      	ldr	r3, [r7, #4]
	}
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	370c      	adds	r7, #12
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cce:	4770      	bx	lr
 8010cd0:	20000e5c 	.word	0x20000e5c
 8010cd4:	20000e78 	.word	0x20000e78

08010cd8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b084      	sub	sp, #16
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d069      	beq.n	8010dc2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cf2:	4b36      	ldr	r3, [pc, #216]	; (8010dcc <xTaskPriorityInherit+0xf4>)
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d259      	bcs.n	8010db0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	699b      	ldr	r3, [r3, #24]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	db06      	blt.n	8010d12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d04:	4b31      	ldr	r3, [pc, #196]	; (8010dcc <xTaskPriorityInherit+0xf4>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d0a:	f1c3 0207 	rsb	r2, r3, #7
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	6959      	ldr	r1, [r3, #20]
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d1a:	4613      	mov	r3, r2
 8010d1c:	009b      	lsls	r3, r3, #2
 8010d1e:	4413      	add	r3, r2
 8010d20:	009b      	lsls	r3, r3, #2
 8010d22:	4a2b      	ldr	r2, [pc, #172]	; (8010dd0 <xTaskPriorityInherit+0xf8>)
 8010d24:	4413      	add	r3, r2
 8010d26:	4299      	cmp	r1, r3
 8010d28:	d13a      	bne.n	8010da0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	3304      	adds	r3, #4
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7fe fad0 	bl	800f2d4 <uxListRemove>
 8010d34:	4603      	mov	r3, r0
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d115      	bne.n	8010d66 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d3e:	4924      	ldr	r1, [pc, #144]	; (8010dd0 <xTaskPriorityInherit+0xf8>)
 8010d40:	4613      	mov	r3, r2
 8010d42:	009b      	lsls	r3, r3, #2
 8010d44:	4413      	add	r3, r2
 8010d46:	009b      	lsls	r3, r3, #2
 8010d48:	440b      	add	r3, r1
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d10a      	bne.n	8010d66 <xTaskPriorityInherit+0x8e>
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d54:	2201      	movs	r2, #1
 8010d56:	fa02 f303 	lsl.w	r3, r2, r3
 8010d5a:	43da      	mvns	r2, r3
 8010d5c:	4b1d      	ldr	r3, [pc, #116]	; (8010dd4 <xTaskPriorityInherit+0xfc>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	4013      	ands	r3, r2
 8010d62:	4a1c      	ldr	r2, [pc, #112]	; (8010dd4 <xTaskPriorityInherit+0xfc>)
 8010d64:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010d66:	4b19      	ldr	r3, [pc, #100]	; (8010dcc <xTaskPriorityInherit+0xf4>)
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d6c:	68bb      	ldr	r3, [r7, #8]
 8010d6e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d74:	2201      	movs	r2, #1
 8010d76:	409a      	lsls	r2, r3
 8010d78:	4b16      	ldr	r3, [pc, #88]	; (8010dd4 <xTaskPriorityInherit+0xfc>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	4313      	orrs	r3, r2
 8010d7e:	4a15      	ldr	r2, [pc, #84]	; (8010dd4 <xTaskPriorityInherit+0xfc>)
 8010d80:	6013      	str	r3, [r2, #0]
 8010d82:	68bb      	ldr	r3, [r7, #8]
 8010d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d86:	4613      	mov	r3, r2
 8010d88:	009b      	lsls	r3, r3, #2
 8010d8a:	4413      	add	r3, r2
 8010d8c:	009b      	lsls	r3, r3, #2
 8010d8e:	4a10      	ldr	r2, [pc, #64]	; (8010dd0 <xTaskPriorityInherit+0xf8>)
 8010d90:	441a      	add	r2, r3
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	3304      	adds	r3, #4
 8010d96:	4619      	mov	r1, r3
 8010d98:	4610      	mov	r0, r2
 8010d9a:	f7fe fa3e 	bl	800f21a <vListInsertEnd>
 8010d9e:	e004      	b.n	8010daa <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010da0:	4b0a      	ldr	r3, [pc, #40]	; (8010dcc <xTaskPriorityInherit+0xf4>)
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010daa:	2301      	movs	r3, #1
 8010dac:	60fb      	str	r3, [r7, #12]
 8010dae:	e008      	b.n	8010dc2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010db4:	4b05      	ldr	r3, [pc, #20]	; (8010dcc <xTaskPriorityInherit+0xf4>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d201      	bcs.n	8010dc2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010dbe:	2301      	movs	r3, #1
 8010dc0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010dc2:	68fb      	ldr	r3, [r7, #12]
	}
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	3710      	adds	r7, #16
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}
 8010dcc:	20000d50 	.word	0x20000d50
 8010dd0:	20000d54 	.word	0x20000d54
 8010dd4:	20000e58 	.word	0x20000e58

08010dd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b086      	sub	sp, #24
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010de4:	2300      	movs	r3, #0
 8010de6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d072      	beq.n	8010ed4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010dee:	4b3c      	ldr	r3, [pc, #240]	; (8010ee0 <xTaskPriorityDisinherit+0x108>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	693a      	ldr	r2, [r7, #16]
 8010df4:	429a      	cmp	r2, r3
 8010df6:	d00c      	beq.n	8010e12 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8010df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dfc:	b672      	cpsid	i
 8010dfe:	f383 8811 	msr	BASEPRI, r3
 8010e02:	f3bf 8f6f 	isb	sy
 8010e06:	f3bf 8f4f 	dsb	sy
 8010e0a:	b662      	cpsie	i
 8010e0c:	60fb      	str	r3, [r7, #12]
}
 8010e0e:	bf00      	nop
 8010e10:	e7fe      	b.n	8010e10 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8010e12:	693b      	ldr	r3, [r7, #16]
 8010e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d10c      	bne.n	8010e34 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8010e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e1e:	b672      	cpsid	i
 8010e20:	f383 8811 	msr	BASEPRI, r3
 8010e24:	f3bf 8f6f 	isb	sy
 8010e28:	f3bf 8f4f 	dsb	sy
 8010e2c:	b662      	cpsie	i
 8010e2e:	60bb      	str	r3, [r7, #8]
}
 8010e30:	bf00      	nop
 8010e32:	e7fe      	b.n	8010e32 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8010e34:	693b      	ldr	r3, [r7, #16]
 8010e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e38:	1e5a      	subs	r2, r3, #1
 8010e3a:	693b      	ldr	r3, [r7, #16]
 8010e3c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e42:	693b      	ldr	r3, [r7, #16]
 8010e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d044      	beq.n	8010ed4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010e4a:	693b      	ldr	r3, [r7, #16]
 8010e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d140      	bne.n	8010ed4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010e52:	693b      	ldr	r3, [r7, #16]
 8010e54:	3304      	adds	r3, #4
 8010e56:	4618      	mov	r0, r3
 8010e58:	f7fe fa3c 	bl	800f2d4 <uxListRemove>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d115      	bne.n	8010e8e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e66:	491f      	ldr	r1, [pc, #124]	; (8010ee4 <xTaskPriorityDisinherit+0x10c>)
 8010e68:	4613      	mov	r3, r2
 8010e6a:	009b      	lsls	r3, r3, #2
 8010e6c:	4413      	add	r3, r2
 8010e6e:	009b      	lsls	r3, r3, #2
 8010e70:	440b      	add	r3, r1
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d10a      	bne.n	8010e8e <xTaskPriorityDisinherit+0xb6>
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e7c:	2201      	movs	r2, #1
 8010e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8010e82:	43da      	mvns	r2, r3
 8010e84:	4b18      	ldr	r3, [pc, #96]	; (8010ee8 <xTaskPriorityDisinherit+0x110>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	4013      	ands	r3, r2
 8010e8a:	4a17      	ldr	r2, [pc, #92]	; (8010ee8 <xTaskPriorityDisinherit+0x110>)
 8010e8c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e96:	693b      	ldr	r3, [r7, #16]
 8010e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e9a:	f1c3 0207 	rsb	r2, r3, #7
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010ea2:	693b      	ldr	r3, [r7, #16]
 8010ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ea6:	2201      	movs	r2, #1
 8010ea8:	409a      	lsls	r2, r3
 8010eaa:	4b0f      	ldr	r3, [pc, #60]	; (8010ee8 <xTaskPriorityDisinherit+0x110>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	4313      	orrs	r3, r2
 8010eb0:	4a0d      	ldr	r2, [pc, #52]	; (8010ee8 <xTaskPriorityDisinherit+0x110>)
 8010eb2:	6013      	str	r3, [r2, #0]
 8010eb4:	693b      	ldr	r3, [r7, #16]
 8010eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010eb8:	4613      	mov	r3, r2
 8010eba:	009b      	lsls	r3, r3, #2
 8010ebc:	4413      	add	r3, r2
 8010ebe:	009b      	lsls	r3, r3, #2
 8010ec0:	4a08      	ldr	r2, [pc, #32]	; (8010ee4 <xTaskPriorityDisinherit+0x10c>)
 8010ec2:	441a      	add	r2, r3
 8010ec4:	693b      	ldr	r3, [r7, #16]
 8010ec6:	3304      	adds	r3, #4
 8010ec8:	4619      	mov	r1, r3
 8010eca:	4610      	mov	r0, r2
 8010ecc:	f7fe f9a5 	bl	800f21a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010ed4:	697b      	ldr	r3, [r7, #20]
	}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	3718      	adds	r7, #24
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}
 8010ede:	bf00      	nop
 8010ee0:	20000d50 	.word	0x20000d50
 8010ee4:	20000d54 	.word	0x20000d54
 8010ee8:	20000e58 	.word	0x20000e58

08010eec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b088      	sub	sp, #32
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010efa:	2301      	movs	r3, #1
 8010efc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	f000 8087 	beq.w	8011014 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010f06:	69bb      	ldr	r3, [r7, #24]
 8010f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d10c      	bne.n	8010f28 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8010f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f12:	b672      	cpsid	i
 8010f14:	f383 8811 	msr	BASEPRI, r3
 8010f18:	f3bf 8f6f 	isb	sy
 8010f1c:	f3bf 8f4f 	dsb	sy
 8010f20:	b662      	cpsie	i
 8010f22:	60fb      	str	r3, [r7, #12]
}
 8010f24:	bf00      	nop
 8010f26:	e7fe      	b.n	8010f26 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010f28:	69bb      	ldr	r3, [r7, #24]
 8010f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f2c:	683a      	ldr	r2, [r7, #0]
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	d902      	bls.n	8010f38 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	61fb      	str	r3, [r7, #28]
 8010f36:	e002      	b.n	8010f3e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010f38:	69bb      	ldr	r3, [r7, #24]
 8010f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f3c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010f3e:	69bb      	ldr	r3, [r7, #24]
 8010f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f42:	69fa      	ldr	r2, [r7, #28]
 8010f44:	429a      	cmp	r2, r3
 8010f46:	d065      	beq.n	8011014 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010f48:	69bb      	ldr	r3, [r7, #24]
 8010f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f4c:	697a      	ldr	r2, [r7, #20]
 8010f4e:	429a      	cmp	r2, r3
 8010f50:	d160      	bne.n	8011014 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010f52:	4b32      	ldr	r3, [pc, #200]	; (801101c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	69ba      	ldr	r2, [r7, #24]
 8010f58:	429a      	cmp	r2, r3
 8010f5a:	d10c      	bne.n	8010f76 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8010f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f60:	b672      	cpsid	i
 8010f62:	f383 8811 	msr	BASEPRI, r3
 8010f66:	f3bf 8f6f 	isb	sy
 8010f6a:	f3bf 8f4f 	dsb	sy
 8010f6e:	b662      	cpsie	i
 8010f70:	60bb      	str	r3, [r7, #8]
}
 8010f72:	bf00      	nop
 8010f74:	e7fe      	b.n	8010f74 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010f76:	69bb      	ldr	r3, [r7, #24]
 8010f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f7a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010f7c:	69bb      	ldr	r3, [r7, #24]
 8010f7e:	69fa      	ldr	r2, [r7, #28]
 8010f80:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010f82:	69bb      	ldr	r3, [r7, #24]
 8010f84:	699b      	ldr	r3, [r3, #24]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	db04      	blt.n	8010f94 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f8a:	69fb      	ldr	r3, [r7, #28]
 8010f8c:	f1c3 0207 	rsb	r2, r3, #7
 8010f90:	69bb      	ldr	r3, [r7, #24]
 8010f92:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010f94:	69bb      	ldr	r3, [r7, #24]
 8010f96:	6959      	ldr	r1, [r3, #20]
 8010f98:	693a      	ldr	r2, [r7, #16]
 8010f9a:	4613      	mov	r3, r2
 8010f9c:	009b      	lsls	r3, r3, #2
 8010f9e:	4413      	add	r3, r2
 8010fa0:	009b      	lsls	r3, r3, #2
 8010fa2:	4a1f      	ldr	r2, [pc, #124]	; (8011020 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8010fa4:	4413      	add	r3, r2
 8010fa6:	4299      	cmp	r1, r3
 8010fa8:	d134      	bne.n	8011014 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010faa:	69bb      	ldr	r3, [r7, #24]
 8010fac:	3304      	adds	r3, #4
 8010fae:	4618      	mov	r0, r3
 8010fb0:	f7fe f990 	bl	800f2d4 <uxListRemove>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d115      	bne.n	8010fe6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010fba:	69bb      	ldr	r3, [r7, #24]
 8010fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fbe:	4918      	ldr	r1, [pc, #96]	; (8011020 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8010fc0:	4613      	mov	r3, r2
 8010fc2:	009b      	lsls	r3, r3, #2
 8010fc4:	4413      	add	r3, r2
 8010fc6:	009b      	lsls	r3, r3, #2
 8010fc8:	440b      	add	r3, r1
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d10a      	bne.n	8010fe6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8010fd0:	69bb      	ldr	r3, [r7, #24]
 8010fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fd4:	2201      	movs	r2, #1
 8010fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8010fda:	43da      	mvns	r2, r3
 8010fdc:	4b11      	ldr	r3, [pc, #68]	; (8011024 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	4013      	ands	r3, r2
 8010fe2:	4a10      	ldr	r2, [pc, #64]	; (8011024 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010fe4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010fe6:	69bb      	ldr	r3, [r7, #24]
 8010fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fea:	2201      	movs	r2, #1
 8010fec:	409a      	lsls	r2, r3
 8010fee:	4b0d      	ldr	r3, [pc, #52]	; (8011024 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	4313      	orrs	r3, r2
 8010ff4:	4a0b      	ldr	r2, [pc, #44]	; (8011024 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010ff6:	6013      	str	r3, [r2, #0]
 8010ff8:	69bb      	ldr	r3, [r7, #24]
 8010ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ffc:	4613      	mov	r3, r2
 8010ffe:	009b      	lsls	r3, r3, #2
 8011000:	4413      	add	r3, r2
 8011002:	009b      	lsls	r3, r3, #2
 8011004:	4a06      	ldr	r2, [pc, #24]	; (8011020 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8011006:	441a      	add	r2, r3
 8011008:	69bb      	ldr	r3, [r7, #24]
 801100a:	3304      	adds	r3, #4
 801100c:	4619      	mov	r1, r3
 801100e:	4610      	mov	r0, r2
 8011010:	f7fe f903 	bl	800f21a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011014:	bf00      	nop
 8011016:	3720      	adds	r7, #32
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}
 801101c:	20000d50 	.word	0x20000d50
 8011020:	20000d54 	.word	0x20000d54
 8011024:	20000e58 	.word	0x20000e58

08011028 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011028:	b480      	push	{r7}
 801102a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801102c:	4b07      	ldr	r3, [pc, #28]	; (801104c <pvTaskIncrementMutexHeldCount+0x24>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d004      	beq.n	801103e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011034:	4b05      	ldr	r3, [pc, #20]	; (801104c <pvTaskIncrementMutexHeldCount+0x24>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801103a:	3201      	adds	r2, #1
 801103c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801103e:	4b03      	ldr	r3, [pc, #12]	; (801104c <pvTaskIncrementMutexHeldCount+0x24>)
 8011040:	681b      	ldr	r3, [r3, #0]
	}
 8011042:	4618      	mov	r0, r3
 8011044:	46bd      	mov	sp, r7
 8011046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104a:	4770      	bx	lr
 801104c:	20000d50 	.word	0x20000d50

08011050 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b084      	sub	sp, #16
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
 8011058:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801105a:	4b29      	ldr	r3, [pc, #164]	; (8011100 <prvAddCurrentTaskToDelayedList+0xb0>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011060:	4b28      	ldr	r3, [pc, #160]	; (8011104 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	3304      	adds	r3, #4
 8011066:	4618      	mov	r0, r3
 8011068:	f7fe f934 	bl	800f2d4 <uxListRemove>
 801106c:	4603      	mov	r3, r0
 801106e:	2b00      	cmp	r3, #0
 8011070:	d10b      	bne.n	801108a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011072:	4b24      	ldr	r3, [pc, #144]	; (8011104 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011078:	2201      	movs	r2, #1
 801107a:	fa02 f303 	lsl.w	r3, r2, r3
 801107e:	43da      	mvns	r2, r3
 8011080:	4b21      	ldr	r3, [pc, #132]	; (8011108 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	4013      	ands	r3, r2
 8011086:	4a20      	ldr	r2, [pc, #128]	; (8011108 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011088:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011090:	d10a      	bne.n	80110a8 <prvAddCurrentTaskToDelayedList+0x58>
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d007      	beq.n	80110a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011098:	4b1a      	ldr	r3, [pc, #104]	; (8011104 <prvAddCurrentTaskToDelayedList+0xb4>)
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	3304      	adds	r3, #4
 801109e:	4619      	mov	r1, r3
 80110a0:	481a      	ldr	r0, [pc, #104]	; (801110c <prvAddCurrentTaskToDelayedList+0xbc>)
 80110a2:	f7fe f8ba 	bl	800f21a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80110a6:	e026      	b.n	80110f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80110a8:	68fa      	ldr	r2, [r7, #12]
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	4413      	add	r3, r2
 80110ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80110b0:	4b14      	ldr	r3, [pc, #80]	; (8011104 <prvAddCurrentTaskToDelayedList+0xb4>)
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	68ba      	ldr	r2, [r7, #8]
 80110b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80110b8:	68ba      	ldr	r2, [r7, #8]
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	429a      	cmp	r2, r3
 80110be:	d209      	bcs.n	80110d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80110c0:	4b13      	ldr	r3, [pc, #76]	; (8011110 <prvAddCurrentTaskToDelayedList+0xc0>)
 80110c2:	681a      	ldr	r2, [r3, #0]
 80110c4:	4b0f      	ldr	r3, [pc, #60]	; (8011104 <prvAddCurrentTaskToDelayedList+0xb4>)
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	3304      	adds	r3, #4
 80110ca:	4619      	mov	r1, r3
 80110cc:	4610      	mov	r0, r2
 80110ce:	f7fe f8c8 	bl	800f262 <vListInsert>
}
 80110d2:	e010      	b.n	80110f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80110d4:	4b0f      	ldr	r3, [pc, #60]	; (8011114 <prvAddCurrentTaskToDelayedList+0xc4>)
 80110d6:	681a      	ldr	r2, [r3, #0]
 80110d8:	4b0a      	ldr	r3, [pc, #40]	; (8011104 <prvAddCurrentTaskToDelayedList+0xb4>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	3304      	adds	r3, #4
 80110de:	4619      	mov	r1, r3
 80110e0:	4610      	mov	r0, r2
 80110e2:	f7fe f8be 	bl	800f262 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80110e6:	4b0c      	ldr	r3, [pc, #48]	; (8011118 <prvAddCurrentTaskToDelayedList+0xc8>)
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	68ba      	ldr	r2, [r7, #8]
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d202      	bcs.n	80110f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80110f0:	4a09      	ldr	r2, [pc, #36]	; (8011118 <prvAddCurrentTaskToDelayedList+0xc8>)
 80110f2:	68bb      	ldr	r3, [r7, #8]
 80110f4:	6013      	str	r3, [r2, #0]
}
 80110f6:	bf00      	nop
 80110f8:	3710      	adds	r7, #16
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}
 80110fe:	bf00      	nop
 8011100:	20000e54 	.word	0x20000e54
 8011104:	20000d50 	.word	0x20000d50
 8011108:	20000e58 	.word	0x20000e58
 801110c:	20000e3c 	.word	0x20000e3c
 8011110:	20000e0c 	.word	0x20000e0c
 8011114:	20000e08 	.word	0x20000e08
 8011118:	20000e70 	.word	0x20000e70

0801111c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801111c:	b480      	push	{r7}
 801111e:	b085      	sub	sp, #20
 8011120:	af00      	add	r7, sp, #0
 8011122:	60f8      	str	r0, [r7, #12]
 8011124:	60b9      	str	r1, [r7, #8]
 8011126:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	3b04      	subs	r3, #4
 801112c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	3b04      	subs	r3, #4
 801113a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	f023 0201 	bic.w	r2, r3, #1
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	3b04      	subs	r3, #4
 801114a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801114c:	4a0c      	ldr	r2, [pc, #48]	; (8011180 <pxPortInitialiseStack+0x64>)
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	3b14      	subs	r3, #20
 8011156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011158:	687a      	ldr	r2, [r7, #4]
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	3b04      	subs	r3, #4
 8011162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	f06f 0202 	mvn.w	r2, #2
 801116a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	3b20      	subs	r3, #32
 8011170:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011172:	68fb      	ldr	r3, [r7, #12]
}
 8011174:	4618      	mov	r0, r3
 8011176:	3714      	adds	r7, #20
 8011178:	46bd      	mov	sp, r7
 801117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117e:	4770      	bx	lr
 8011180:	08011185 	.word	0x08011185

08011184 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011184:	b480      	push	{r7}
 8011186:	b085      	sub	sp, #20
 8011188:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801118a:	2300      	movs	r3, #0
 801118c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801118e:	4b14      	ldr	r3, [pc, #80]	; (80111e0 <prvTaskExitError+0x5c>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011196:	d00c      	beq.n	80111b2 <prvTaskExitError+0x2e>
	__asm volatile
 8011198:	f04f 0350 	mov.w	r3, #80	; 0x50
 801119c:	b672      	cpsid	i
 801119e:	f383 8811 	msr	BASEPRI, r3
 80111a2:	f3bf 8f6f 	isb	sy
 80111a6:	f3bf 8f4f 	dsb	sy
 80111aa:	b662      	cpsie	i
 80111ac:	60fb      	str	r3, [r7, #12]
}
 80111ae:	bf00      	nop
 80111b0:	e7fe      	b.n	80111b0 <prvTaskExitError+0x2c>
	__asm volatile
 80111b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b6:	b672      	cpsid	i
 80111b8:	f383 8811 	msr	BASEPRI, r3
 80111bc:	f3bf 8f6f 	isb	sy
 80111c0:	f3bf 8f4f 	dsb	sy
 80111c4:	b662      	cpsie	i
 80111c6:	60bb      	str	r3, [r7, #8]
}
 80111c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80111ca:	bf00      	nop
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d0fc      	beq.n	80111cc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80111d2:	bf00      	nop
 80111d4:	bf00      	nop
 80111d6:	3714      	adds	r7, #20
 80111d8:	46bd      	mov	sp, r7
 80111da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111de:	4770      	bx	lr
 80111e0:	20000014 	.word	0x20000014
	...

080111f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80111f0:	4b07      	ldr	r3, [pc, #28]	; (8011210 <pxCurrentTCBConst2>)
 80111f2:	6819      	ldr	r1, [r3, #0]
 80111f4:	6808      	ldr	r0, [r1, #0]
 80111f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111fa:	f380 8809 	msr	PSP, r0
 80111fe:	f3bf 8f6f 	isb	sy
 8011202:	f04f 0000 	mov.w	r0, #0
 8011206:	f380 8811 	msr	BASEPRI, r0
 801120a:	4770      	bx	lr
 801120c:	f3af 8000 	nop.w

08011210 <pxCurrentTCBConst2>:
 8011210:	20000d50 	.word	0x20000d50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011214:	bf00      	nop
 8011216:	bf00      	nop

08011218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011218:	4808      	ldr	r0, [pc, #32]	; (801123c <prvPortStartFirstTask+0x24>)
 801121a:	6800      	ldr	r0, [r0, #0]
 801121c:	6800      	ldr	r0, [r0, #0]
 801121e:	f380 8808 	msr	MSP, r0
 8011222:	f04f 0000 	mov.w	r0, #0
 8011226:	f380 8814 	msr	CONTROL, r0
 801122a:	b662      	cpsie	i
 801122c:	b661      	cpsie	f
 801122e:	f3bf 8f4f 	dsb	sy
 8011232:	f3bf 8f6f 	isb	sy
 8011236:	df00      	svc	0
 8011238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801123a:	bf00      	nop
 801123c:	e000ed08 	.word	0xe000ed08

08011240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b084      	sub	sp, #16
 8011244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011246:	4b37      	ldr	r3, [pc, #220]	; (8011324 <xPortStartScheduler+0xe4>)
 8011248:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	781b      	ldrb	r3, [r3, #0]
 801124e:	b2db      	uxtb	r3, r3
 8011250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	22ff      	movs	r2, #255	; 0xff
 8011256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	781b      	ldrb	r3, [r3, #0]
 801125c:	b2db      	uxtb	r3, r3
 801125e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011260:	78fb      	ldrb	r3, [r7, #3]
 8011262:	b2db      	uxtb	r3, r3
 8011264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011268:	b2da      	uxtb	r2, r3
 801126a:	4b2f      	ldr	r3, [pc, #188]	; (8011328 <xPortStartScheduler+0xe8>)
 801126c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801126e:	4b2f      	ldr	r3, [pc, #188]	; (801132c <xPortStartScheduler+0xec>)
 8011270:	2207      	movs	r2, #7
 8011272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011274:	e009      	b.n	801128a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011276:	4b2d      	ldr	r3, [pc, #180]	; (801132c <xPortStartScheduler+0xec>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	3b01      	subs	r3, #1
 801127c:	4a2b      	ldr	r2, [pc, #172]	; (801132c <xPortStartScheduler+0xec>)
 801127e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011280:	78fb      	ldrb	r3, [r7, #3]
 8011282:	b2db      	uxtb	r3, r3
 8011284:	005b      	lsls	r3, r3, #1
 8011286:	b2db      	uxtb	r3, r3
 8011288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801128a:	78fb      	ldrb	r3, [r7, #3]
 801128c:	b2db      	uxtb	r3, r3
 801128e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011292:	2b80      	cmp	r3, #128	; 0x80
 8011294:	d0ef      	beq.n	8011276 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011296:	4b25      	ldr	r3, [pc, #148]	; (801132c <xPortStartScheduler+0xec>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	f1c3 0307 	rsb	r3, r3, #7
 801129e:	2b04      	cmp	r3, #4
 80112a0:	d00c      	beq.n	80112bc <xPortStartScheduler+0x7c>
	__asm volatile
 80112a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112a6:	b672      	cpsid	i
 80112a8:	f383 8811 	msr	BASEPRI, r3
 80112ac:	f3bf 8f6f 	isb	sy
 80112b0:	f3bf 8f4f 	dsb	sy
 80112b4:	b662      	cpsie	i
 80112b6:	60bb      	str	r3, [r7, #8]
}
 80112b8:	bf00      	nop
 80112ba:	e7fe      	b.n	80112ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80112bc:	4b1b      	ldr	r3, [pc, #108]	; (801132c <xPortStartScheduler+0xec>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	021b      	lsls	r3, r3, #8
 80112c2:	4a1a      	ldr	r2, [pc, #104]	; (801132c <xPortStartScheduler+0xec>)
 80112c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80112c6:	4b19      	ldr	r3, [pc, #100]	; (801132c <xPortStartScheduler+0xec>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80112ce:	4a17      	ldr	r2, [pc, #92]	; (801132c <xPortStartScheduler+0xec>)
 80112d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	b2da      	uxtb	r2, r3
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80112da:	4b15      	ldr	r3, [pc, #84]	; (8011330 <xPortStartScheduler+0xf0>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	4a14      	ldr	r2, [pc, #80]	; (8011330 <xPortStartScheduler+0xf0>)
 80112e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80112e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80112e6:	4b12      	ldr	r3, [pc, #72]	; (8011330 <xPortStartScheduler+0xf0>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	4a11      	ldr	r2, [pc, #68]	; (8011330 <xPortStartScheduler+0xf0>)
 80112ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80112f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80112f2:	f000 f8dd 	bl	80114b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80112f6:	4b0f      	ldr	r3, [pc, #60]	; (8011334 <xPortStartScheduler+0xf4>)
 80112f8:	2200      	movs	r2, #0
 80112fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80112fc:	f000 f8fc 	bl	80114f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011300:	4b0d      	ldr	r3, [pc, #52]	; (8011338 <xPortStartScheduler+0xf8>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	4a0c      	ldr	r2, [pc, #48]	; (8011338 <xPortStartScheduler+0xf8>)
 8011306:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801130a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801130c:	f7ff ff84 	bl	8011218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011310:	f7ff fa72 	bl	80107f8 <vTaskSwitchContext>
	prvTaskExitError();
 8011314:	f7ff ff36 	bl	8011184 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011318:	2300      	movs	r3, #0
}
 801131a:	4618      	mov	r0, r3
 801131c:	3710      	adds	r7, #16
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}
 8011322:	bf00      	nop
 8011324:	e000e400 	.word	0xe000e400
 8011328:	20000e7c 	.word	0x20000e7c
 801132c:	20000e80 	.word	0x20000e80
 8011330:	e000ed20 	.word	0xe000ed20
 8011334:	20000014 	.word	0x20000014
 8011338:	e000ef34 	.word	0xe000ef34

0801133c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801133c:	b480      	push	{r7}
 801133e:	b083      	sub	sp, #12
 8011340:	af00      	add	r7, sp, #0
	__asm volatile
 8011342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011346:	b672      	cpsid	i
 8011348:	f383 8811 	msr	BASEPRI, r3
 801134c:	f3bf 8f6f 	isb	sy
 8011350:	f3bf 8f4f 	dsb	sy
 8011354:	b662      	cpsie	i
 8011356:	607b      	str	r3, [r7, #4]
}
 8011358:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801135a:	4b10      	ldr	r3, [pc, #64]	; (801139c <vPortEnterCritical+0x60>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	3301      	adds	r3, #1
 8011360:	4a0e      	ldr	r2, [pc, #56]	; (801139c <vPortEnterCritical+0x60>)
 8011362:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011364:	4b0d      	ldr	r3, [pc, #52]	; (801139c <vPortEnterCritical+0x60>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	2b01      	cmp	r3, #1
 801136a:	d111      	bne.n	8011390 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801136c:	4b0c      	ldr	r3, [pc, #48]	; (80113a0 <vPortEnterCritical+0x64>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	b2db      	uxtb	r3, r3
 8011372:	2b00      	cmp	r3, #0
 8011374:	d00c      	beq.n	8011390 <vPortEnterCritical+0x54>
	__asm volatile
 8011376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801137a:	b672      	cpsid	i
 801137c:	f383 8811 	msr	BASEPRI, r3
 8011380:	f3bf 8f6f 	isb	sy
 8011384:	f3bf 8f4f 	dsb	sy
 8011388:	b662      	cpsie	i
 801138a:	603b      	str	r3, [r7, #0]
}
 801138c:	bf00      	nop
 801138e:	e7fe      	b.n	801138e <vPortEnterCritical+0x52>
	}
}
 8011390:	bf00      	nop
 8011392:	370c      	adds	r7, #12
 8011394:	46bd      	mov	sp, r7
 8011396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139a:	4770      	bx	lr
 801139c:	20000014 	.word	0x20000014
 80113a0:	e000ed04 	.word	0xe000ed04

080113a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80113a4:	b480      	push	{r7}
 80113a6:	b083      	sub	sp, #12
 80113a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80113aa:	4b13      	ldr	r3, [pc, #76]	; (80113f8 <vPortExitCritical+0x54>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d10c      	bne.n	80113cc <vPortExitCritical+0x28>
	__asm volatile
 80113b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b6:	b672      	cpsid	i
 80113b8:	f383 8811 	msr	BASEPRI, r3
 80113bc:	f3bf 8f6f 	isb	sy
 80113c0:	f3bf 8f4f 	dsb	sy
 80113c4:	b662      	cpsie	i
 80113c6:	607b      	str	r3, [r7, #4]
}
 80113c8:	bf00      	nop
 80113ca:	e7fe      	b.n	80113ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80113cc:	4b0a      	ldr	r3, [pc, #40]	; (80113f8 <vPortExitCritical+0x54>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	3b01      	subs	r3, #1
 80113d2:	4a09      	ldr	r2, [pc, #36]	; (80113f8 <vPortExitCritical+0x54>)
 80113d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80113d6:	4b08      	ldr	r3, [pc, #32]	; (80113f8 <vPortExitCritical+0x54>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d105      	bne.n	80113ea <vPortExitCritical+0x46>
 80113de:	2300      	movs	r3, #0
 80113e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	f383 8811 	msr	BASEPRI, r3
}
 80113e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80113ea:	bf00      	nop
 80113ec:	370c      	adds	r7, #12
 80113ee:	46bd      	mov	sp, r7
 80113f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f4:	4770      	bx	lr
 80113f6:	bf00      	nop
 80113f8:	20000014 	.word	0x20000014
 80113fc:	00000000 	.word	0x00000000

08011400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011400:	f3ef 8009 	mrs	r0, PSP
 8011404:	f3bf 8f6f 	isb	sy
 8011408:	4b15      	ldr	r3, [pc, #84]	; (8011460 <pxCurrentTCBConst>)
 801140a:	681a      	ldr	r2, [r3, #0]
 801140c:	f01e 0f10 	tst.w	lr, #16
 8011410:	bf08      	it	eq
 8011412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801141a:	6010      	str	r0, [r2, #0]
 801141c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011424:	b672      	cpsid	i
 8011426:	f380 8811 	msr	BASEPRI, r0
 801142a:	f3bf 8f4f 	dsb	sy
 801142e:	f3bf 8f6f 	isb	sy
 8011432:	b662      	cpsie	i
 8011434:	f7ff f9e0 	bl	80107f8 <vTaskSwitchContext>
 8011438:	f04f 0000 	mov.w	r0, #0
 801143c:	f380 8811 	msr	BASEPRI, r0
 8011440:	bc09      	pop	{r0, r3}
 8011442:	6819      	ldr	r1, [r3, #0]
 8011444:	6808      	ldr	r0, [r1, #0]
 8011446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801144a:	f01e 0f10 	tst.w	lr, #16
 801144e:	bf08      	it	eq
 8011450:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011454:	f380 8809 	msr	PSP, r0
 8011458:	f3bf 8f6f 	isb	sy
 801145c:	4770      	bx	lr
 801145e:	bf00      	nop

08011460 <pxCurrentTCBConst>:
 8011460:	20000d50 	.word	0x20000d50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011464:	bf00      	nop
 8011466:	bf00      	nop

08011468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b082      	sub	sp, #8
 801146c:	af00      	add	r7, sp, #0
	__asm volatile
 801146e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011472:	b672      	cpsid	i
 8011474:	f383 8811 	msr	BASEPRI, r3
 8011478:	f3bf 8f6f 	isb	sy
 801147c:	f3bf 8f4f 	dsb	sy
 8011480:	b662      	cpsie	i
 8011482:	607b      	str	r3, [r7, #4]
}
 8011484:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011486:	f7ff f8fd 	bl	8010684 <xTaskIncrementTick>
 801148a:	4603      	mov	r3, r0
 801148c:	2b00      	cmp	r3, #0
 801148e:	d003      	beq.n	8011498 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011490:	4b06      	ldr	r3, [pc, #24]	; (80114ac <SysTick_Handler+0x44>)
 8011492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011496:	601a      	str	r2, [r3, #0]
 8011498:	2300      	movs	r3, #0
 801149a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	f383 8811 	msr	BASEPRI, r3
}
 80114a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80114a4:	bf00      	nop
 80114a6:	3708      	adds	r7, #8
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}
 80114ac:	e000ed04 	.word	0xe000ed04

080114b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80114b0:	b480      	push	{r7}
 80114b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80114b4:	4b0b      	ldr	r3, [pc, #44]	; (80114e4 <vPortSetupTimerInterrupt+0x34>)
 80114b6:	2200      	movs	r2, #0
 80114b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80114ba:	4b0b      	ldr	r3, [pc, #44]	; (80114e8 <vPortSetupTimerInterrupt+0x38>)
 80114bc:	2200      	movs	r2, #0
 80114be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80114c0:	4b0a      	ldr	r3, [pc, #40]	; (80114ec <vPortSetupTimerInterrupt+0x3c>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	4a0a      	ldr	r2, [pc, #40]	; (80114f0 <vPortSetupTimerInterrupt+0x40>)
 80114c6:	fba2 2303 	umull	r2, r3, r2, r3
 80114ca:	099b      	lsrs	r3, r3, #6
 80114cc:	4a09      	ldr	r2, [pc, #36]	; (80114f4 <vPortSetupTimerInterrupt+0x44>)
 80114ce:	3b01      	subs	r3, #1
 80114d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80114d2:	4b04      	ldr	r3, [pc, #16]	; (80114e4 <vPortSetupTimerInterrupt+0x34>)
 80114d4:	2207      	movs	r2, #7
 80114d6:	601a      	str	r2, [r3, #0]
}
 80114d8:	bf00      	nop
 80114da:	46bd      	mov	sp, r7
 80114dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e0:	4770      	bx	lr
 80114e2:	bf00      	nop
 80114e4:	e000e010 	.word	0xe000e010
 80114e8:	e000e018 	.word	0xe000e018
 80114ec:	20000008 	.word	0x20000008
 80114f0:	10624dd3 	.word	0x10624dd3
 80114f4:	e000e014 	.word	0xe000e014

080114f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80114f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011508 <vPortEnableVFP+0x10>
 80114fc:	6801      	ldr	r1, [r0, #0]
 80114fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011502:	6001      	str	r1, [r0, #0]
 8011504:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011506:	bf00      	nop
 8011508:	e000ed88 	.word	0xe000ed88

0801150c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801150c:	b480      	push	{r7}
 801150e:	b085      	sub	sp, #20
 8011510:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011512:	f3ef 8305 	mrs	r3, IPSR
 8011516:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	2b0f      	cmp	r3, #15
 801151c:	d916      	bls.n	801154c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801151e:	4a19      	ldr	r2, [pc, #100]	; (8011584 <vPortValidateInterruptPriority+0x78>)
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	4413      	add	r3, r2
 8011524:	781b      	ldrb	r3, [r3, #0]
 8011526:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011528:	4b17      	ldr	r3, [pc, #92]	; (8011588 <vPortValidateInterruptPriority+0x7c>)
 801152a:	781b      	ldrb	r3, [r3, #0]
 801152c:	7afa      	ldrb	r2, [r7, #11]
 801152e:	429a      	cmp	r2, r3
 8011530:	d20c      	bcs.n	801154c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8011532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011536:	b672      	cpsid	i
 8011538:	f383 8811 	msr	BASEPRI, r3
 801153c:	f3bf 8f6f 	isb	sy
 8011540:	f3bf 8f4f 	dsb	sy
 8011544:	b662      	cpsie	i
 8011546:	607b      	str	r3, [r7, #4]
}
 8011548:	bf00      	nop
 801154a:	e7fe      	b.n	801154a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801154c:	4b0f      	ldr	r3, [pc, #60]	; (801158c <vPortValidateInterruptPriority+0x80>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011554:	4b0e      	ldr	r3, [pc, #56]	; (8011590 <vPortValidateInterruptPriority+0x84>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	429a      	cmp	r2, r3
 801155a:	d90c      	bls.n	8011576 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801155c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011560:	b672      	cpsid	i
 8011562:	f383 8811 	msr	BASEPRI, r3
 8011566:	f3bf 8f6f 	isb	sy
 801156a:	f3bf 8f4f 	dsb	sy
 801156e:	b662      	cpsie	i
 8011570:	603b      	str	r3, [r7, #0]
}
 8011572:	bf00      	nop
 8011574:	e7fe      	b.n	8011574 <vPortValidateInterruptPriority+0x68>
	}
 8011576:	bf00      	nop
 8011578:	3714      	adds	r7, #20
 801157a:	46bd      	mov	sp, r7
 801157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011580:	4770      	bx	lr
 8011582:	bf00      	nop
 8011584:	e000e3f0 	.word	0xe000e3f0
 8011588:	20000e7c 	.word	0x20000e7c
 801158c:	e000ed0c 	.word	0xe000ed0c
 8011590:	20000e80 	.word	0x20000e80

08011594 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b08a      	sub	sp, #40	; 0x28
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801159c:	2300      	movs	r3, #0
 801159e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80115a0:	f7fe ffb4 	bl	801050c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80115a4:	4b5b      	ldr	r3, [pc, #364]	; (8011714 <pvPortMalloc+0x180>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d101      	bne.n	80115b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80115ac:	f000 f91a 	bl	80117e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80115b0:	4b59      	ldr	r3, [pc, #356]	; (8011718 <pvPortMalloc+0x184>)
 80115b2:	681a      	ldr	r2, [r3, #0]
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	4013      	ands	r3, r2
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	f040 8092 	bne.w	80116e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d01f      	beq.n	8011604 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80115c4:	2208      	movs	r2, #8
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	4413      	add	r3, r2
 80115ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f003 0307 	and.w	r3, r3, #7
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d016      	beq.n	8011604 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	f023 0307 	bic.w	r3, r3, #7
 80115dc:	3308      	adds	r3, #8
 80115de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f003 0307 	and.w	r3, r3, #7
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d00c      	beq.n	8011604 <pvPortMalloc+0x70>
	__asm volatile
 80115ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115ee:	b672      	cpsid	i
 80115f0:	f383 8811 	msr	BASEPRI, r3
 80115f4:	f3bf 8f6f 	isb	sy
 80115f8:	f3bf 8f4f 	dsb	sy
 80115fc:	b662      	cpsie	i
 80115fe:	617b      	str	r3, [r7, #20]
}
 8011600:	bf00      	nop
 8011602:	e7fe      	b.n	8011602 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d06b      	beq.n	80116e2 <pvPortMalloc+0x14e>
 801160a:	4b44      	ldr	r3, [pc, #272]	; (801171c <pvPortMalloc+0x188>)
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	687a      	ldr	r2, [r7, #4]
 8011610:	429a      	cmp	r2, r3
 8011612:	d866      	bhi.n	80116e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011614:	4b42      	ldr	r3, [pc, #264]	; (8011720 <pvPortMalloc+0x18c>)
 8011616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011618:	4b41      	ldr	r3, [pc, #260]	; (8011720 <pvPortMalloc+0x18c>)
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801161e:	e004      	b.n	801162a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8011620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801162c:	685b      	ldr	r3, [r3, #4]
 801162e:	687a      	ldr	r2, [r7, #4]
 8011630:	429a      	cmp	r2, r3
 8011632:	d903      	bls.n	801163c <pvPortMalloc+0xa8>
 8011634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d1f1      	bne.n	8011620 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801163c:	4b35      	ldr	r3, [pc, #212]	; (8011714 <pvPortMalloc+0x180>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011642:	429a      	cmp	r2, r3
 8011644:	d04d      	beq.n	80116e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011646:	6a3b      	ldr	r3, [r7, #32]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	2208      	movs	r2, #8
 801164c:	4413      	add	r3, r2
 801164e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011652:	681a      	ldr	r2, [r3, #0]
 8011654:	6a3b      	ldr	r3, [r7, #32]
 8011656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801165a:	685a      	ldr	r2, [r3, #4]
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	1ad2      	subs	r2, r2, r3
 8011660:	2308      	movs	r3, #8
 8011662:	005b      	lsls	r3, r3, #1
 8011664:	429a      	cmp	r2, r3
 8011666:	d921      	bls.n	80116ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	4413      	add	r3, r2
 801166e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011670:	69bb      	ldr	r3, [r7, #24]
 8011672:	f003 0307 	and.w	r3, r3, #7
 8011676:	2b00      	cmp	r3, #0
 8011678:	d00c      	beq.n	8011694 <pvPortMalloc+0x100>
	__asm volatile
 801167a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801167e:	b672      	cpsid	i
 8011680:	f383 8811 	msr	BASEPRI, r3
 8011684:	f3bf 8f6f 	isb	sy
 8011688:	f3bf 8f4f 	dsb	sy
 801168c:	b662      	cpsie	i
 801168e:	613b      	str	r3, [r7, #16]
}
 8011690:	bf00      	nop
 8011692:	e7fe      	b.n	8011692 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011696:	685a      	ldr	r2, [r3, #4]
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	1ad2      	subs	r2, r2, r3
 801169c:	69bb      	ldr	r3, [r7, #24]
 801169e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80116a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116a2:	687a      	ldr	r2, [r7, #4]
 80116a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80116a6:	69b8      	ldr	r0, [r7, #24]
 80116a8:	f000 f8fe 	bl	80118a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80116ac:	4b1b      	ldr	r3, [pc, #108]	; (801171c <pvPortMalloc+0x188>)
 80116ae:	681a      	ldr	r2, [r3, #0]
 80116b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116b2:	685b      	ldr	r3, [r3, #4]
 80116b4:	1ad3      	subs	r3, r2, r3
 80116b6:	4a19      	ldr	r2, [pc, #100]	; (801171c <pvPortMalloc+0x188>)
 80116b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80116ba:	4b18      	ldr	r3, [pc, #96]	; (801171c <pvPortMalloc+0x188>)
 80116bc:	681a      	ldr	r2, [r3, #0]
 80116be:	4b19      	ldr	r3, [pc, #100]	; (8011724 <pvPortMalloc+0x190>)
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	429a      	cmp	r2, r3
 80116c4:	d203      	bcs.n	80116ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80116c6:	4b15      	ldr	r3, [pc, #84]	; (801171c <pvPortMalloc+0x188>)
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	4a16      	ldr	r2, [pc, #88]	; (8011724 <pvPortMalloc+0x190>)
 80116cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80116ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d0:	685a      	ldr	r2, [r3, #4]
 80116d2:	4b11      	ldr	r3, [pc, #68]	; (8011718 <pvPortMalloc+0x184>)
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	431a      	orrs	r2, r3
 80116d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80116dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116de:	2200      	movs	r2, #0
 80116e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80116e2:	f7fe ff21 	bl	8010528 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80116e6:	69fb      	ldr	r3, [r7, #28]
 80116e8:	f003 0307 	and.w	r3, r3, #7
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d00c      	beq.n	801170a <pvPortMalloc+0x176>
	__asm volatile
 80116f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116f4:	b672      	cpsid	i
 80116f6:	f383 8811 	msr	BASEPRI, r3
 80116fa:	f3bf 8f6f 	isb	sy
 80116fe:	f3bf 8f4f 	dsb	sy
 8011702:	b662      	cpsie	i
 8011704:	60fb      	str	r3, [r7, #12]
}
 8011706:	bf00      	nop
 8011708:	e7fe      	b.n	8011708 <pvPortMalloc+0x174>
	return pvReturn;
 801170a:	69fb      	ldr	r3, [r7, #28]
}
 801170c:	4618      	mov	r0, r3
 801170e:	3728      	adds	r7, #40	; 0x28
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}
 8011714:	20004a8c 	.word	0x20004a8c
 8011718:	20004a98 	.word	0x20004a98
 801171c:	20004a90 	.word	0x20004a90
 8011720:	20004a84 	.word	0x20004a84
 8011724:	20004a94 	.word	0x20004a94

08011728 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b086      	sub	sp, #24
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d04c      	beq.n	80117d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801173a:	2308      	movs	r3, #8
 801173c:	425b      	negs	r3, r3
 801173e:	697a      	ldr	r2, [r7, #20]
 8011740:	4413      	add	r3, r2
 8011742:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011744:	697b      	ldr	r3, [r7, #20]
 8011746:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011748:	693b      	ldr	r3, [r7, #16]
 801174a:	685a      	ldr	r2, [r3, #4]
 801174c:	4b23      	ldr	r3, [pc, #140]	; (80117dc <vPortFree+0xb4>)
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	4013      	ands	r3, r2
 8011752:	2b00      	cmp	r3, #0
 8011754:	d10c      	bne.n	8011770 <vPortFree+0x48>
	__asm volatile
 8011756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801175a:	b672      	cpsid	i
 801175c:	f383 8811 	msr	BASEPRI, r3
 8011760:	f3bf 8f6f 	isb	sy
 8011764:	f3bf 8f4f 	dsb	sy
 8011768:	b662      	cpsie	i
 801176a:	60fb      	str	r3, [r7, #12]
}
 801176c:	bf00      	nop
 801176e:	e7fe      	b.n	801176e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011770:	693b      	ldr	r3, [r7, #16]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d00c      	beq.n	8011792 <vPortFree+0x6a>
	__asm volatile
 8011778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801177c:	b672      	cpsid	i
 801177e:	f383 8811 	msr	BASEPRI, r3
 8011782:	f3bf 8f6f 	isb	sy
 8011786:	f3bf 8f4f 	dsb	sy
 801178a:	b662      	cpsie	i
 801178c:	60bb      	str	r3, [r7, #8]
}
 801178e:	bf00      	nop
 8011790:	e7fe      	b.n	8011790 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011792:	693b      	ldr	r3, [r7, #16]
 8011794:	685a      	ldr	r2, [r3, #4]
 8011796:	4b11      	ldr	r3, [pc, #68]	; (80117dc <vPortFree+0xb4>)
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	4013      	ands	r3, r2
 801179c:	2b00      	cmp	r3, #0
 801179e:	d019      	beq.n	80117d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80117a0:	693b      	ldr	r3, [r7, #16]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d115      	bne.n	80117d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80117a8:	693b      	ldr	r3, [r7, #16]
 80117aa:	685a      	ldr	r2, [r3, #4]
 80117ac:	4b0b      	ldr	r3, [pc, #44]	; (80117dc <vPortFree+0xb4>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	43db      	mvns	r3, r3
 80117b2:	401a      	ands	r2, r3
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80117b8:	f7fe fea8 	bl	801050c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80117bc:	693b      	ldr	r3, [r7, #16]
 80117be:	685a      	ldr	r2, [r3, #4]
 80117c0:	4b07      	ldr	r3, [pc, #28]	; (80117e0 <vPortFree+0xb8>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	4413      	add	r3, r2
 80117c6:	4a06      	ldr	r2, [pc, #24]	; (80117e0 <vPortFree+0xb8>)
 80117c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80117ca:	6938      	ldr	r0, [r7, #16]
 80117cc:	f000 f86c 	bl	80118a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80117d0:	f7fe feaa 	bl	8010528 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80117d4:	bf00      	nop
 80117d6:	3718      	adds	r7, #24
 80117d8:	46bd      	mov	sp, r7
 80117da:	bd80      	pop	{r7, pc}
 80117dc:	20004a98 	.word	0x20004a98
 80117e0:	20004a90 	.word	0x20004a90

080117e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80117e4:	b480      	push	{r7}
 80117e6:	b085      	sub	sp, #20
 80117e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80117ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80117ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80117f0:	4b27      	ldr	r3, [pc, #156]	; (8011890 <prvHeapInit+0xac>)
 80117f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	f003 0307 	and.w	r3, r3, #7
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d00c      	beq.n	8011818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	3307      	adds	r3, #7
 8011802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	f023 0307 	bic.w	r3, r3, #7
 801180a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801180c:	68ba      	ldr	r2, [r7, #8]
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	1ad3      	subs	r3, r2, r3
 8011812:	4a1f      	ldr	r2, [pc, #124]	; (8011890 <prvHeapInit+0xac>)
 8011814:	4413      	add	r3, r2
 8011816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801181c:	4a1d      	ldr	r2, [pc, #116]	; (8011894 <prvHeapInit+0xb0>)
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011822:	4b1c      	ldr	r3, [pc, #112]	; (8011894 <prvHeapInit+0xb0>)
 8011824:	2200      	movs	r2, #0
 8011826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	68ba      	ldr	r2, [r7, #8]
 801182c:	4413      	add	r3, r2
 801182e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011830:	2208      	movs	r2, #8
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	1a9b      	subs	r3, r3, r2
 8011836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	f023 0307 	bic.w	r3, r3, #7
 801183e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	4a15      	ldr	r2, [pc, #84]	; (8011898 <prvHeapInit+0xb4>)
 8011844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011846:	4b14      	ldr	r3, [pc, #80]	; (8011898 <prvHeapInit+0xb4>)
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	2200      	movs	r2, #0
 801184c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801184e:	4b12      	ldr	r3, [pc, #72]	; (8011898 <prvHeapInit+0xb4>)
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	2200      	movs	r2, #0
 8011854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	68fa      	ldr	r2, [r7, #12]
 801185e:	1ad2      	subs	r2, r2, r3
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011864:	4b0c      	ldr	r3, [pc, #48]	; (8011898 <prvHeapInit+0xb4>)
 8011866:	681a      	ldr	r2, [r3, #0]
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	685b      	ldr	r3, [r3, #4]
 8011870:	4a0a      	ldr	r2, [pc, #40]	; (801189c <prvHeapInit+0xb8>)
 8011872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011874:	683b      	ldr	r3, [r7, #0]
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	4a09      	ldr	r2, [pc, #36]	; (80118a0 <prvHeapInit+0xbc>)
 801187a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801187c:	4b09      	ldr	r3, [pc, #36]	; (80118a4 <prvHeapInit+0xc0>)
 801187e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011882:	601a      	str	r2, [r3, #0]
}
 8011884:	bf00      	nop
 8011886:	3714      	adds	r7, #20
 8011888:	46bd      	mov	sp, r7
 801188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188e:	4770      	bx	lr
 8011890:	20000e84 	.word	0x20000e84
 8011894:	20004a84 	.word	0x20004a84
 8011898:	20004a8c 	.word	0x20004a8c
 801189c:	20004a94 	.word	0x20004a94
 80118a0:	20004a90 	.word	0x20004a90
 80118a4:	20004a98 	.word	0x20004a98

080118a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80118a8:	b480      	push	{r7}
 80118aa:	b085      	sub	sp, #20
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80118b0:	4b28      	ldr	r3, [pc, #160]	; (8011954 <prvInsertBlockIntoFreeList+0xac>)
 80118b2:	60fb      	str	r3, [r7, #12]
 80118b4:	e002      	b.n	80118bc <prvInsertBlockIntoFreeList+0x14>
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	60fb      	str	r3, [r7, #12]
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	687a      	ldr	r2, [r7, #4]
 80118c2:	429a      	cmp	r2, r3
 80118c4:	d8f7      	bhi.n	80118b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	685b      	ldr	r3, [r3, #4]
 80118ce:	68ba      	ldr	r2, [r7, #8]
 80118d0:	4413      	add	r3, r2
 80118d2:	687a      	ldr	r2, [r7, #4]
 80118d4:	429a      	cmp	r2, r3
 80118d6:	d108      	bne.n	80118ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	685a      	ldr	r2, [r3, #4]
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	685b      	ldr	r3, [r3, #4]
 80118e0:	441a      	add	r2, r3
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	685b      	ldr	r3, [r3, #4]
 80118f2:	68ba      	ldr	r2, [r7, #8]
 80118f4:	441a      	add	r2, r3
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	429a      	cmp	r2, r3
 80118fc:	d118      	bne.n	8011930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	681a      	ldr	r2, [r3, #0]
 8011902:	4b15      	ldr	r3, [pc, #84]	; (8011958 <prvInsertBlockIntoFreeList+0xb0>)
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	429a      	cmp	r2, r3
 8011908:	d00d      	beq.n	8011926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	685a      	ldr	r2, [r3, #4]
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	685b      	ldr	r3, [r3, #4]
 8011914:	441a      	add	r2, r3
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	681a      	ldr	r2, [r3, #0]
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	601a      	str	r2, [r3, #0]
 8011924:	e008      	b.n	8011938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011926:	4b0c      	ldr	r3, [pc, #48]	; (8011958 <prvInsertBlockIntoFreeList+0xb0>)
 8011928:	681a      	ldr	r2, [r3, #0]
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	601a      	str	r2, [r3, #0]
 801192e:	e003      	b.n	8011938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	681a      	ldr	r2, [r3, #0]
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011938:	68fa      	ldr	r2, [r7, #12]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	429a      	cmp	r2, r3
 801193e:	d002      	beq.n	8011946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	687a      	ldr	r2, [r7, #4]
 8011944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011946:	bf00      	nop
 8011948:	3714      	adds	r7, #20
 801194a:	46bd      	mov	sp, r7
 801194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011950:	4770      	bx	lr
 8011952:	bf00      	nop
 8011954:	20004a84 	.word	0x20004a84
 8011958:	20004a8c 	.word	0x20004a8c

0801195c <__cvt>:
 801195c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011960:	ec55 4b10 	vmov	r4, r5, d0
 8011964:	2d00      	cmp	r5, #0
 8011966:	460e      	mov	r6, r1
 8011968:	4619      	mov	r1, r3
 801196a:	462b      	mov	r3, r5
 801196c:	bfbb      	ittet	lt
 801196e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011972:	461d      	movlt	r5, r3
 8011974:	2300      	movge	r3, #0
 8011976:	232d      	movlt	r3, #45	; 0x2d
 8011978:	700b      	strb	r3, [r1, #0]
 801197a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801197c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011980:	4691      	mov	r9, r2
 8011982:	f023 0820 	bic.w	r8, r3, #32
 8011986:	bfbc      	itt	lt
 8011988:	4622      	movlt	r2, r4
 801198a:	4614      	movlt	r4, r2
 801198c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011990:	d005      	beq.n	801199e <__cvt+0x42>
 8011992:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011996:	d100      	bne.n	801199a <__cvt+0x3e>
 8011998:	3601      	adds	r6, #1
 801199a:	2102      	movs	r1, #2
 801199c:	e000      	b.n	80119a0 <__cvt+0x44>
 801199e:	2103      	movs	r1, #3
 80119a0:	ab03      	add	r3, sp, #12
 80119a2:	9301      	str	r3, [sp, #4]
 80119a4:	ab02      	add	r3, sp, #8
 80119a6:	9300      	str	r3, [sp, #0]
 80119a8:	ec45 4b10 	vmov	d0, r4, r5
 80119ac:	4653      	mov	r3, sl
 80119ae:	4632      	mov	r2, r6
 80119b0:	f001 f922 	bl	8012bf8 <_dtoa_r>
 80119b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80119b8:	4607      	mov	r7, r0
 80119ba:	d102      	bne.n	80119c2 <__cvt+0x66>
 80119bc:	f019 0f01 	tst.w	r9, #1
 80119c0:	d022      	beq.n	8011a08 <__cvt+0xac>
 80119c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80119c6:	eb07 0906 	add.w	r9, r7, r6
 80119ca:	d110      	bne.n	80119ee <__cvt+0x92>
 80119cc:	783b      	ldrb	r3, [r7, #0]
 80119ce:	2b30      	cmp	r3, #48	; 0x30
 80119d0:	d10a      	bne.n	80119e8 <__cvt+0x8c>
 80119d2:	2200      	movs	r2, #0
 80119d4:	2300      	movs	r3, #0
 80119d6:	4620      	mov	r0, r4
 80119d8:	4629      	mov	r1, r5
 80119da:	f7ef f89d 	bl	8000b18 <__aeabi_dcmpeq>
 80119de:	b918      	cbnz	r0, 80119e8 <__cvt+0x8c>
 80119e0:	f1c6 0601 	rsb	r6, r6, #1
 80119e4:	f8ca 6000 	str.w	r6, [sl]
 80119e8:	f8da 3000 	ldr.w	r3, [sl]
 80119ec:	4499      	add	r9, r3
 80119ee:	2200      	movs	r2, #0
 80119f0:	2300      	movs	r3, #0
 80119f2:	4620      	mov	r0, r4
 80119f4:	4629      	mov	r1, r5
 80119f6:	f7ef f88f 	bl	8000b18 <__aeabi_dcmpeq>
 80119fa:	b108      	cbz	r0, 8011a00 <__cvt+0xa4>
 80119fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8011a00:	2230      	movs	r2, #48	; 0x30
 8011a02:	9b03      	ldr	r3, [sp, #12]
 8011a04:	454b      	cmp	r3, r9
 8011a06:	d307      	bcc.n	8011a18 <__cvt+0xbc>
 8011a08:	9b03      	ldr	r3, [sp, #12]
 8011a0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011a0c:	1bdb      	subs	r3, r3, r7
 8011a0e:	4638      	mov	r0, r7
 8011a10:	6013      	str	r3, [r2, #0]
 8011a12:	b004      	add	sp, #16
 8011a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a18:	1c59      	adds	r1, r3, #1
 8011a1a:	9103      	str	r1, [sp, #12]
 8011a1c:	701a      	strb	r2, [r3, #0]
 8011a1e:	e7f0      	b.n	8011a02 <__cvt+0xa6>

08011a20 <__exponent>:
 8011a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011a22:	4603      	mov	r3, r0
 8011a24:	2900      	cmp	r1, #0
 8011a26:	bfb8      	it	lt
 8011a28:	4249      	neglt	r1, r1
 8011a2a:	f803 2b02 	strb.w	r2, [r3], #2
 8011a2e:	bfb4      	ite	lt
 8011a30:	222d      	movlt	r2, #45	; 0x2d
 8011a32:	222b      	movge	r2, #43	; 0x2b
 8011a34:	2909      	cmp	r1, #9
 8011a36:	7042      	strb	r2, [r0, #1]
 8011a38:	dd2a      	ble.n	8011a90 <__exponent+0x70>
 8011a3a:	f10d 0207 	add.w	r2, sp, #7
 8011a3e:	4617      	mov	r7, r2
 8011a40:	260a      	movs	r6, #10
 8011a42:	4694      	mov	ip, r2
 8011a44:	fb91 f5f6 	sdiv	r5, r1, r6
 8011a48:	fb06 1415 	mls	r4, r6, r5, r1
 8011a4c:	3430      	adds	r4, #48	; 0x30
 8011a4e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8011a52:	460c      	mov	r4, r1
 8011a54:	2c63      	cmp	r4, #99	; 0x63
 8011a56:	f102 32ff 	add.w	r2, r2, #4294967295
 8011a5a:	4629      	mov	r1, r5
 8011a5c:	dcf1      	bgt.n	8011a42 <__exponent+0x22>
 8011a5e:	3130      	adds	r1, #48	; 0x30
 8011a60:	f1ac 0402 	sub.w	r4, ip, #2
 8011a64:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011a68:	1c41      	adds	r1, r0, #1
 8011a6a:	4622      	mov	r2, r4
 8011a6c:	42ba      	cmp	r2, r7
 8011a6e:	d30a      	bcc.n	8011a86 <__exponent+0x66>
 8011a70:	f10d 0209 	add.w	r2, sp, #9
 8011a74:	eba2 020c 	sub.w	r2, r2, ip
 8011a78:	42bc      	cmp	r4, r7
 8011a7a:	bf88      	it	hi
 8011a7c:	2200      	movhi	r2, #0
 8011a7e:	4413      	add	r3, r2
 8011a80:	1a18      	subs	r0, r3, r0
 8011a82:	b003      	add	sp, #12
 8011a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a86:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011a8a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8011a8e:	e7ed      	b.n	8011a6c <__exponent+0x4c>
 8011a90:	2330      	movs	r3, #48	; 0x30
 8011a92:	3130      	adds	r1, #48	; 0x30
 8011a94:	7083      	strb	r3, [r0, #2]
 8011a96:	70c1      	strb	r1, [r0, #3]
 8011a98:	1d03      	adds	r3, r0, #4
 8011a9a:	e7f1      	b.n	8011a80 <__exponent+0x60>

08011a9c <_printf_float>:
 8011a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aa0:	ed2d 8b02 	vpush	{d8}
 8011aa4:	b08d      	sub	sp, #52	; 0x34
 8011aa6:	460c      	mov	r4, r1
 8011aa8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011aac:	4616      	mov	r6, r2
 8011aae:	461f      	mov	r7, r3
 8011ab0:	4605      	mov	r5, r0
 8011ab2:	f000 ff37 	bl	8012924 <_localeconv_r>
 8011ab6:	f8d0 a000 	ldr.w	sl, [r0]
 8011aba:	4650      	mov	r0, sl
 8011abc:	f7ee fc00 	bl	80002c0 <strlen>
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	930a      	str	r3, [sp, #40]	; 0x28
 8011ac4:	6823      	ldr	r3, [r4, #0]
 8011ac6:	9305      	str	r3, [sp, #20]
 8011ac8:	f8d8 3000 	ldr.w	r3, [r8]
 8011acc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011ad0:	3307      	adds	r3, #7
 8011ad2:	f023 0307 	bic.w	r3, r3, #7
 8011ad6:	f103 0208 	add.w	r2, r3, #8
 8011ada:	f8c8 2000 	str.w	r2, [r8]
 8011ade:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011ae2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011ae6:	9307      	str	r3, [sp, #28]
 8011ae8:	f8cd 8018 	str.w	r8, [sp, #24]
 8011aec:	ee08 0a10 	vmov	s16, r0
 8011af0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8011af4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011af8:	4b9e      	ldr	r3, [pc, #632]	; (8011d74 <_printf_float+0x2d8>)
 8011afa:	f04f 32ff 	mov.w	r2, #4294967295
 8011afe:	f7ef f83d 	bl	8000b7c <__aeabi_dcmpun>
 8011b02:	bb88      	cbnz	r0, 8011b68 <_printf_float+0xcc>
 8011b04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011b08:	4b9a      	ldr	r3, [pc, #616]	; (8011d74 <_printf_float+0x2d8>)
 8011b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8011b0e:	f7ef f817 	bl	8000b40 <__aeabi_dcmple>
 8011b12:	bb48      	cbnz	r0, 8011b68 <_printf_float+0xcc>
 8011b14:	2200      	movs	r2, #0
 8011b16:	2300      	movs	r3, #0
 8011b18:	4640      	mov	r0, r8
 8011b1a:	4649      	mov	r1, r9
 8011b1c:	f7ef f806 	bl	8000b2c <__aeabi_dcmplt>
 8011b20:	b110      	cbz	r0, 8011b28 <_printf_float+0x8c>
 8011b22:	232d      	movs	r3, #45	; 0x2d
 8011b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b28:	4a93      	ldr	r2, [pc, #588]	; (8011d78 <_printf_float+0x2dc>)
 8011b2a:	4b94      	ldr	r3, [pc, #592]	; (8011d7c <_printf_float+0x2e0>)
 8011b2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011b30:	bf94      	ite	ls
 8011b32:	4690      	movls	r8, r2
 8011b34:	4698      	movhi	r8, r3
 8011b36:	2303      	movs	r3, #3
 8011b38:	6123      	str	r3, [r4, #16]
 8011b3a:	9b05      	ldr	r3, [sp, #20]
 8011b3c:	f023 0304 	bic.w	r3, r3, #4
 8011b40:	6023      	str	r3, [r4, #0]
 8011b42:	f04f 0900 	mov.w	r9, #0
 8011b46:	9700      	str	r7, [sp, #0]
 8011b48:	4633      	mov	r3, r6
 8011b4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8011b4c:	4621      	mov	r1, r4
 8011b4e:	4628      	mov	r0, r5
 8011b50:	f000 f9da 	bl	8011f08 <_printf_common>
 8011b54:	3001      	adds	r0, #1
 8011b56:	f040 8090 	bne.w	8011c7a <_printf_float+0x1de>
 8011b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8011b5e:	b00d      	add	sp, #52	; 0x34
 8011b60:	ecbd 8b02 	vpop	{d8}
 8011b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b68:	4642      	mov	r2, r8
 8011b6a:	464b      	mov	r3, r9
 8011b6c:	4640      	mov	r0, r8
 8011b6e:	4649      	mov	r1, r9
 8011b70:	f7ef f804 	bl	8000b7c <__aeabi_dcmpun>
 8011b74:	b140      	cbz	r0, 8011b88 <_printf_float+0xec>
 8011b76:	464b      	mov	r3, r9
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	bfbc      	itt	lt
 8011b7c:	232d      	movlt	r3, #45	; 0x2d
 8011b7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011b82:	4a7f      	ldr	r2, [pc, #508]	; (8011d80 <_printf_float+0x2e4>)
 8011b84:	4b7f      	ldr	r3, [pc, #508]	; (8011d84 <_printf_float+0x2e8>)
 8011b86:	e7d1      	b.n	8011b2c <_printf_float+0x90>
 8011b88:	6863      	ldr	r3, [r4, #4]
 8011b8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011b8e:	9206      	str	r2, [sp, #24]
 8011b90:	1c5a      	adds	r2, r3, #1
 8011b92:	d13f      	bne.n	8011c14 <_printf_float+0x178>
 8011b94:	2306      	movs	r3, #6
 8011b96:	6063      	str	r3, [r4, #4]
 8011b98:	9b05      	ldr	r3, [sp, #20]
 8011b9a:	6861      	ldr	r1, [r4, #4]
 8011b9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	9303      	str	r3, [sp, #12]
 8011ba4:	ab0a      	add	r3, sp, #40	; 0x28
 8011ba6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011baa:	ab09      	add	r3, sp, #36	; 0x24
 8011bac:	ec49 8b10 	vmov	d0, r8, r9
 8011bb0:	9300      	str	r3, [sp, #0]
 8011bb2:	6022      	str	r2, [r4, #0]
 8011bb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011bb8:	4628      	mov	r0, r5
 8011bba:	f7ff fecf 	bl	801195c <__cvt>
 8011bbe:	9b06      	ldr	r3, [sp, #24]
 8011bc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011bc2:	2b47      	cmp	r3, #71	; 0x47
 8011bc4:	4680      	mov	r8, r0
 8011bc6:	d108      	bne.n	8011bda <_printf_float+0x13e>
 8011bc8:	1cc8      	adds	r0, r1, #3
 8011bca:	db02      	blt.n	8011bd2 <_printf_float+0x136>
 8011bcc:	6863      	ldr	r3, [r4, #4]
 8011bce:	4299      	cmp	r1, r3
 8011bd0:	dd41      	ble.n	8011c56 <_printf_float+0x1ba>
 8011bd2:	f1ab 0302 	sub.w	r3, fp, #2
 8011bd6:	fa5f fb83 	uxtb.w	fp, r3
 8011bda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011bde:	d820      	bhi.n	8011c22 <_printf_float+0x186>
 8011be0:	3901      	subs	r1, #1
 8011be2:	465a      	mov	r2, fp
 8011be4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011be8:	9109      	str	r1, [sp, #36]	; 0x24
 8011bea:	f7ff ff19 	bl	8011a20 <__exponent>
 8011bee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011bf0:	1813      	adds	r3, r2, r0
 8011bf2:	2a01      	cmp	r2, #1
 8011bf4:	4681      	mov	r9, r0
 8011bf6:	6123      	str	r3, [r4, #16]
 8011bf8:	dc02      	bgt.n	8011c00 <_printf_float+0x164>
 8011bfa:	6822      	ldr	r2, [r4, #0]
 8011bfc:	07d2      	lsls	r2, r2, #31
 8011bfe:	d501      	bpl.n	8011c04 <_printf_float+0x168>
 8011c00:	3301      	adds	r3, #1
 8011c02:	6123      	str	r3, [r4, #16]
 8011c04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d09c      	beq.n	8011b46 <_printf_float+0xaa>
 8011c0c:	232d      	movs	r3, #45	; 0x2d
 8011c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c12:	e798      	b.n	8011b46 <_printf_float+0xaa>
 8011c14:	9a06      	ldr	r2, [sp, #24]
 8011c16:	2a47      	cmp	r2, #71	; 0x47
 8011c18:	d1be      	bne.n	8011b98 <_printf_float+0xfc>
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d1bc      	bne.n	8011b98 <_printf_float+0xfc>
 8011c1e:	2301      	movs	r3, #1
 8011c20:	e7b9      	b.n	8011b96 <_printf_float+0xfa>
 8011c22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011c26:	d118      	bne.n	8011c5a <_printf_float+0x1be>
 8011c28:	2900      	cmp	r1, #0
 8011c2a:	6863      	ldr	r3, [r4, #4]
 8011c2c:	dd0b      	ble.n	8011c46 <_printf_float+0x1aa>
 8011c2e:	6121      	str	r1, [r4, #16]
 8011c30:	b913      	cbnz	r3, 8011c38 <_printf_float+0x19c>
 8011c32:	6822      	ldr	r2, [r4, #0]
 8011c34:	07d0      	lsls	r0, r2, #31
 8011c36:	d502      	bpl.n	8011c3e <_printf_float+0x1a2>
 8011c38:	3301      	adds	r3, #1
 8011c3a:	440b      	add	r3, r1
 8011c3c:	6123      	str	r3, [r4, #16]
 8011c3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011c40:	f04f 0900 	mov.w	r9, #0
 8011c44:	e7de      	b.n	8011c04 <_printf_float+0x168>
 8011c46:	b913      	cbnz	r3, 8011c4e <_printf_float+0x1b2>
 8011c48:	6822      	ldr	r2, [r4, #0]
 8011c4a:	07d2      	lsls	r2, r2, #31
 8011c4c:	d501      	bpl.n	8011c52 <_printf_float+0x1b6>
 8011c4e:	3302      	adds	r3, #2
 8011c50:	e7f4      	b.n	8011c3c <_printf_float+0x1a0>
 8011c52:	2301      	movs	r3, #1
 8011c54:	e7f2      	b.n	8011c3c <_printf_float+0x1a0>
 8011c56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c5c:	4299      	cmp	r1, r3
 8011c5e:	db05      	blt.n	8011c6c <_printf_float+0x1d0>
 8011c60:	6823      	ldr	r3, [r4, #0]
 8011c62:	6121      	str	r1, [r4, #16]
 8011c64:	07d8      	lsls	r0, r3, #31
 8011c66:	d5ea      	bpl.n	8011c3e <_printf_float+0x1a2>
 8011c68:	1c4b      	adds	r3, r1, #1
 8011c6a:	e7e7      	b.n	8011c3c <_printf_float+0x1a0>
 8011c6c:	2900      	cmp	r1, #0
 8011c6e:	bfd4      	ite	le
 8011c70:	f1c1 0202 	rsble	r2, r1, #2
 8011c74:	2201      	movgt	r2, #1
 8011c76:	4413      	add	r3, r2
 8011c78:	e7e0      	b.n	8011c3c <_printf_float+0x1a0>
 8011c7a:	6823      	ldr	r3, [r4, #0]
 8011c7c:	055a      	lsls	r2, r3, #21
 8011c7e:	d407      	bmi.n	8011c90 <_printf_float+0x1f4>
 8011c80:	6923      	ldr	r3, [r4, #16]
 8011c82:	4642      	mov	r2, r8
 8011c84:	4631      	mov	r1, r6
 8011c86:	4628      	mov	r0, r5
 8011c88:	47b8      	blx	r7
 8011c8a:	3001      	adds	r0, #1
 8011c8c:	d12c      	bne.n	8011ce8 <_printf_float+0x24c>
 8011c8e:	e764      	b.n	8011b5a <_printf_float+0xbe>
 8011c90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011c94:	f240 80e0 	bls.w	8011e58 <_printf_float+0x3bc>
 8011c98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	f7ee ff3a 	bl	8000b18 <__aeabi_dcmpeq>
 8011ca4:	2800      	cmp	r0, #0
 8011ca6:	d034      	beq.n	8011d12 <_printf_float+0x276>
 8011ca8:	4a37      	ldr	r2, [pc, #220]	; (8011d88 <_printf_float+0x2ec>)
 8011caa:	2301      	movs	r3, #1
 8011cac:	4631      	mov	r1, r6
 8011cae:	4628      	mov	r0, r5
 8011cb0:	47b8      	blx	r7
 8011cb2:	3001      	adds	r0, #1
 8011cb4:	f43f af51 	beq.w	8011b5a <_printf_float+0xbe>
 8011cb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	db02      	blt.n	8011cc6 <_printf_float+0x22a>
 8011cc0:	6823      	ldr	r3, [r4, #0]
 8011cc2:	07d8      	lsls	r0, r3, #31
 8011cc4:	d510      	bpl.n	8011ce8 <_printf_float+0x24c>
 8011cc6:	ee18 3a10 	vmov	r3, s16
 8011cca:	4652      	mov	r2, sl
 8011ccc:	4631      	mov	r1, r6
 8011cce:	4628      	mov	r0, r5
 8011cd0:	47b8      	blx	r7
 8011cd2:	3001      	adds	r0, #1
 8011cd4:	f43f af41 	beq.w	8011b5a <_printf_float+0xbe>
 8011cd8:	f04f 0800 	mov.w	r8, #0
 8011cdc:	f104 091a 	add.w	r9, r4, #26
 8011ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ce2:	3b01      	subs	r3, #1
 8011ce4:	4543      	cmp	r3, r8
 8011ce6:	dc09      	bgt.n	8011cfc <_printf_float+0x260>
 8011ce8:	6823      	ldr	r3, [r4, #0]
 8011cea:	079b      	lsls	r3, r3, #30
 8011cec:	f100 8107 	bmi.w	8011efe <_printf_float+0x462>
 8011cf0:	68e0      	ldr	r0, [r4, #12]
 8011cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011cf4:	4298      	cmp	r0, r3
 8011cf6:	bfb8      	it	lt
 8011cf8:	4618      	movlt	r0, r3
 8011cfa:	e730      	b.n	8011b5e <_printf_float+0xc2>
 8011cfc:	2301      	movs	r3, #1
 8011cfe:	464a      	mov	r2, r9
 8011d00:	4631      	mov	r1, r6
 8011d02:	4628      	mov	r0, r5
 8011d04:	47b8      	blx	r7
 8011d06:	3001      	adds	r0, #1
 8011d08:	f43f af27 	beq.w	8011b5a <_printf_float+0xbe>
 8011d0c:	f108 0801 	add.w	r8, r8, #1
 8011d10:	e7e6      	b.n	8011ce0 <_printf_float+0x244>
 8011d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	dc39      	bgt.n	8011d8c <_printf_float+0x2f0>
 8011d18:	4a1b      	ldr	r2, [pc, #108]	; (8011d88 <_printf_float+0x2ec>)
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	4631      	mov	r1, r6
 8011d1e:	4628      	mov	r0, r5
 8011d20:	47b8      	blx	r7
 8011d22:	3001      	adds	r0, #1
 8011d24:	f43f af19 	beq.w	8011b5a <_printf_float+0xbe>
 8011d28:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011d2c:	4313      	orrs	r3, r2
 8011d2e:	d102      	bne.n	8011d36 <_printf_float+0x29a>
 8011d30:	6823      	ldr	r3, [r4, #0]
 8011d32:	07d9      	lsls	r1, r3, #31
 8011d34:	d5d8      	bpl.n	8011ce8 <_printf_float+0x24c>
 8011d36:	ee18 3a10 	vmov	r3, s16
 8011d3a:	4652      	mov	r2, sl
 8011d3c:	4631      	mov	r1, r6
 8011d3e:	4628      	mov	r0, r5
 8011d40:	47b8      	blx	r7
 8011d42:	3001      	adds	r0, #1
 8011d44:	f43f af09 	beq.w	8011b5a <_printf_float+0xbe>
 8011d48:	f04f 0900 	mov.w	r9, #0
 8011d4c:	f104 0a1a 	add.w	sl, r4, #26
 8011d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d52:	425b      	negs	r3, r3
 8011d54:	454b      	cmp	r3, r9
 8011d56:	dc01      	bgt.n	8011d5c <_printf_float+0x2c0>
 8011d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d5a:	e792      	b.n	8011c82 <_printf_float+0x1e6>
 8011d5c:	2301      	movs	r3, #1
 8011d5e:	4652      	mov	r2, sl
 8011d60:	4631      	mov	r1, r6
 8011d62:	4628      	mov	r0, r5
 8011d64:	47b8      	blx	r7
 8011d66:	3001      	adds	r0, #1
 8011d68:	f43f aef7 	beq.w	8011b5a <_printf_float+0xbe>
 8011d6c:	f109 0901 	add.w	r9, r9, #1
 8011d70:	e7ee      	b.n	8011d50 <_printf_float+0x2b4>
 8011d72:	bf00      	nop
 8011d74:	7fefffff 	.word	0x7fefffff
 8011d78:	08018110 	.word	0x08018110
 8011d7c:	08018114 	.word	0x08018114
 8011d80:	08018118 	.word	0x08018118
 8011d84:	0801811c 	.word	0x0801811c
 8011d88:	080184a8 	.word	0x080184a8
 8011d8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011d90:	429a      	cmp	r2, r3
 8011d92:	bfa8      	it	ge
 8011d94:	461a      	movge	r2, r3
 8011d96:	2a00      	cmp	r2, #0
 8011d98:	4691      	mov	r9, r2
 8011d9a:	dc37      	bgt.n	8011e0c <_printf_float+0x370>
 8011d9c:	f04f 0b00 	mov.w	fp, #0
 8011da0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011da4:	f104 021a 	add.w	r2, r4, #26
 8011da8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011daa:	9305      	str	r3, [sp, #20]
 8011dac:	eba3 0309 	sub.w	r3, r3, r9
 8011db0:	455b      	cmp	r3, fp
 8011db2:	dc33      	bgt.n	8011e1c <_printf_float+0x380>
 8011db4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011db8:	429a      	cmp	r2, r3
 8011dba:	db3b      	blt.n	8011e34 <_printf_float+0x398>
 8011dbc:	6823      	ldr	r3, [r4, #0]
 8011dbe:	07da      	lsls	r2, r3, #31
 8011dc0:	d438      	bmi.n	8011e34 <_printf_float+0x398>
 8011dc2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011dc6:	eba2 0903 	sub.w	r9, r2, r3
 8011dca:	9b05      	ldr	r3, [sp, #20]
 8011dcc:	1ad2      	subs	r2, r2, r3
 8011dce:	4591      	cmp	r9, r2
 8011dd0:	bfa8      	it	ge
 8011dd2:	4691      	movge	r9, r2
 8011dd4:	f1b9 0f00 	cmp.w	r9, #0
 8011dd8:	dc35      	bgt.n	8011e46 <_printf_float+0x3aa>
 8011dda:	f04f 0800 	mov.w	r8, #0
 8011dde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011de2:	f104 0a1a 	add.w	sl, r4, #26
 8011de6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011dea:	1a9b      	subs	r3, r3, r2
 8011dec:	eba3 0309 	sub.w	r3, r3, r9
 8011df0:	4543      	cmp	r3, r8
 8011df2:	f77f af79 	ble.w	8011ce8 <_printf_float+0x24c>
 8011df6:	2301      	movs	r3, #1
 8011df8:	4652      	mov	r2, sl
 8011dfa:	4631      	mov	r1, r6
 8011dfc:	4628      	mov	r0, r5
 8011dfe:	47b8      	blx	r7
 8011e00:	3001      	adds	r0, #1
 8011e02:	f43f aeaa 	beq.w	8011b5a <_printf_float+0xbe>
 8011e06:	f108 0801 	add.w	r8, r8, #1
 8011e0a:	e7ec      	b.n	8011de6 <_printf_float+0x34a>
 8011e0c:	4613      	mov	r3, r2
 8011e0e:	4631      	mov	r1, r6
 8011e10:	4642      	mov	r2, r8
 8011e12:	4628      	mov	r0, r5
 8011e14:	47b8      	blx	r7
 8011e16:	3001      	adds	r0, #1
 8011e18:	d1c0      	bne.n	8011d9c <_printf_float+0x300>
 8011e1a:	e69e      	b.n	8011b5a <_printf_float+0xbe>
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	4631      	mov	r1, r6
 8011e20:	4628      	mov	r0, r5
 8011e22:	9205      	str	r2, [sp, #20]
 8011e24:	47b8      	blx	r7
 8011e26:	3001      	adds	r0, #1
 8011e28:	f43f ae97 	beq.w	8011b5a <_printf_float+0xbe>
 8011e2c:	9a05      	ldr	r2, [sp, #20]
 8011e2e:	f10b 0b01 	add.w	fp, fp, #1
 8011e32:	e7b9      	b.n	8011da8 <_printf_float+0x30c>
 8011e34:	ee18 3a10 	vmov	r3, s16
 8011e38:	4652      	mov	r2, sl
 8011e3a:	4631      	mov	r1, r6
 8011e3c:	4628      	mov	r0, r5
 8011e3e:	47b8      	blx	r7
 8011e40:	3001      	adds	r0, #1
 8011e42:	d1be      	bne.n	8011dc2 <_printf_float+0x326>
 8011e44:	e689      	b.n	8011b5a <_printf_float+0xbe>
 8011e46:	9a05      	ldr	r2, [sp, #20]
 8011e48:	464b      	mov	r3, r9
 8011e4a:	4442      	add	r2, r8
 8011e4c:	4631      	mov	r1, r6
 8011e4e:	4628      	mov	r0, r5
 8011e50:	47b8      	blx	r7
 8011e52:	3001      	adds	r0, #1
 8011e54:	d1c1      	bne.n	8011dda <_printf_float+0x33e>
 8011e56:	e680      	b.n	8011b5a <_printf_float+0xbe>
 8011e58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e5a:	2a01      	cmp	r2, #1
 8011e5c:	dc01      	bgt.n	8011e62 <_printf_float+0x3c6>
 8011e5e:	07db      	lsls	r3, r3, #31
 8011e60:	d53a      	bpl.n	8011ed8 <_printf_float+0x43c>
 8011e62:	2301      	movs	r3, #1
 8011e64:	4642      	mov	r2, r8
 8011e66:	4631      	mov	r1, r6
 8011e68:	4628      	mov	r0, r5
 8011e6a:	47b8      	blx	r7
 8011e6c:	3001      	adds	r0, #1
 8011e6e:	f43f ae74 	beq.w	8011b5a <_printf_float+0xbe>
 8011e72:	ee18 3a10 	vmov	r3, s16
 8011e76:	4652      	mov	r2, sl
 8011e78:	4631      	mov	r1, r6
 8011e7a:	4628      	mov	r0, r5
 8011e7c:	47b8      	blx	r7
 8011e7e:	3001      	adds	r0, #1
 8011e80:	f43f ae6b 	beq.w	8011b5a <_printf_float+0xbe>
 8011e84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011e88:	2200      	movs	r2, #0
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8011e90:	f7ee fe42 	bl	8000b18 <__aeabi_dcmpeq>
 8011e94:	b9d8      	cbnz	r0, 8011ece <_printf_float+0x432>
 8011e96:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011e9a:	f108 0201 	add.w	r2, r8, #1
 8011e9e:	4631      	mov	r1, r6
 8011ea0:	4628      	mov	r0, r5
 8011ea2:	47b8      	blx	r7
 8011ea4:	3001      	adds	r0, #1
 8011ea6:	d10e      	bne.n	8011ec6 <_printf_float+0x42a>
 8011ea8:	e657      	b.n	8011b5a <_printf_float+0xbe>
 8011eaa:	2301      	movs	r3, #1
 8011eac:	4652      	mov	r2, sl
 8011eae:	4631      	mov	r1, r6
 8011eb0:	4628      	mov	r0, r5
 8011eb2:	47b8      	blx	r7
 8011eb4:	3001      	adds	r0, #1
 8011eb6:	f43f ae50 	beq.w	8011b5a <_printf_float+0xbe>
 8011eba:	f108 0801 	add.w	r8, r8, #1
 8011ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ec0:	3b01      	subs	r3, #1
 8011ec2:	4543      	cmp	r3, r8
 8011ec4:	dcf1      	bgt.n	8011eaa <_printf_float+0x40e>
 8011ec6:	464b      	mov	r3, r9
 8011ec8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011ecc:	e6da      	b.n	8011c84 <_printf_float+0x1e8>
 8011ece:	f04f 0800 	mov.w	r8, #0
 8011ed2:	f104 0a1a 	add.w	sl, r4, #26
 8011ed6:	e7f2      	b.n	8011ebe <_printf_float+0x422>
 8011ed8:	2301      	movs	r3, #1
 8011eda:	4642      	mov	r2, r8
 8011edc:	e7df      	b.n	8011e9e <_printf_float+0x402>
 8011ede:	2301      	movs	r3, #1
 8011ee0:	464a      	mov	r2, r9
 8011ee2:	4631      	mov	r1, r6
 8011ee4:	4628      	mov	r0, r5
 8011ee6:	47b8      	blx	r7
 8011ee8:	3001      	adds	r0, #1
 8011eea:	f43f ae36 	beq.w	8011b5a <_printf_float+0xbe>
 8011eee:	f108 0801 	add.w	r8, r8, #1
 8011ef2:	68e3      	ldr	r3, [r4, #12]
 8011ef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011ef6:	1a5b      	subs	r3, r3, r1
 8011ef8:	4543      	cmp	r3, r8
 8011efa:	dcf0      	bgt.n	8011ede <_printf_float+0x442>
 8011efc:	e6f8      	b.n	8011cf0 <_printf_float+0x254>
 8011efe:	f04f 0800 	mov.w	r8, #0
 8011f02:	f104 0919 	add.w	r9, r4, #25
 8011f06:	e7f4      	b.n	8011ef2 <_printf_float+0x456>

08011f08 <_printf_common>:
 8011f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f0c:	4616      	mov	r6, r2
 8011f0e:	4699      	mov	r9, r3
 8011f10:	688a      	ldr	r2, [r1, #8]
 8011f12:	690b      	ldr	r3, [r1, #16]
 8011f14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011f18:	4293      	cmp	r3, r2
 8011f1a:	bfb8      	it	lt
 8011f1c:	4613      	movlt	r3, r2
 8011f1e:	6033      	str	r3, [r6, #0]
 8011f20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011f24:	4607      	mov	r7, r0
 8011f26:	460c      	mov	r4, r1
 8011f28:	b10a      	cbz	r2, 8011f2e <_printf_common+0x26>
 8011f2a:	3301      	adds	r3, #1
 8011f2c:	6033      	str	r3, [r6, #0]
 8011f2e:	6823      	ldr	r3, [r4, #0]
 8011f30:	0699      	lsls	r1, r3, #26
 8011f32:	bf42      	ittt	mi
 8011f34:	6833      	ldrmi	r3, [r6, #0]
 8011f36:	3302      	addmi	r3, #2
 8011f38:	6033      	strmi	r3, [r6, #0]
 8011f3a:	6825      	ldr	r5, [r4, #0]
 8011f3c:	f015 0506 	ands.w	r5, r5, #6
 8011f40:	d106      	bne.n	8011f50 <_printf_common+0x48>
 8011f42:	f104 0a19 	add.w	sl, r4, #25
 8011f46:	68e3      	ldr	r3, [r4, #12]
 8011f48:	6832      	ldr	r2, [r6, #0]
 8011f4a:	1a9b      	subs	r3, r3, r2
 8011f4c:	42ab      	cmp	r3, r5
 8011f4e:	dc26      	bgt.n	8011f9e <_printf_common+0x96>
 8011f50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011f54:	1e13      	subs	r3, r2, #0
 8011f56:	6822      	ldr	r2, [r4, #0]
 8011f58:	bf18      	it	ne
 8011f5a:	2301      	movne	r3, #1
 8011f5c:	0692      	lsls	r2, r2, #26
 8011f5e:	d42b      	bmi.n	8011fb8 <_printf_common+0xb0>
 8011f60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011f64:	4649      	mov	r1, r9
 8011f66:	4638      	mov	r0, r7
 8011f68:	47c0      	blx	r8
 8011f6a:	3001      	adds	r0, #1
 8011f6c:	d01e      	beq.n	8011fac <_printf_common+0xa4>
 8011f6e:	6823      	ldr	r3, [r4, #0]
 8011f70:	6922      	ldr	r2, [r4, #16]
 8011f72:	f003 0306 	and.w	r3, r3, #6
 8011f76:	2b04      	cmp	r3, #4
 8011f78:	bf02      	ittt	eq
 8011f7a:	68e5      	ldreq	r5, [r4, #12]
 8011f7c:	6833      	ldreq	r3, [r6, #0]
 8011f7e:	1aed      	subeq	r5, r5, r3
 8011f80:	68a3      	ldr	r3, [r4, #8]
 8011f82:	bf0c      	ite	eq
 8011f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011f88:	2500      	movne	r5, #0
 8011f8a:	4293      	cmp	r3, r2
 8011f8c:	bfc4      	itt	gt
 8011f8e:	1a9b      	subgt	r3, r3, r2
 8011f90:	18ed      	addgt	r5, r5, r3
 8011f92:	2600      	movs	r6, #0
 8011f94:	341a      	adds	r4, #26
 8011f96:	42b5      	cmp	r5, r6
 8011f98:	d11a      	bne.n	8011fd0 <_printf_common+0xc8>
 8011f9a:	2000      	movs	r0, #0
 8011f9c:	e008      	b.n	8011fb0 <_printf_common+0xa8>
 8011f9e:	2301      	movs	r3, #1
 8011fa0:	4652      	mov	r2, sl
 8011fa2:	4649      	mov	r1, r9
 8011fa4:	4638      	mov	r0, r7
 8011fa6:	47c0      	blx	r8
 8011fa8:	3001      	adds	r0, #1
 8011faa:	d103      	bne.n	8011fb4 <_printf_common+0xac>
 8011fac:	f04f 30ff 	mov.w	r0, #4294967295
 8011fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fb4:	3501      	adds	r5, #1
 8011fb6:	e7c6      	b.n	8011f46 <_printf_common+0x3e>
 8011fb8:	18e1      	adds	r1, r4, r3
 8011fba:	1c5a      	adds	r2, r3, #1
 8011fbc:	2030      	movs	r0, #48	; 0x30
 8011fbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011fc2:	4422      	add	r2, r4
 8011fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011fc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011fcc:	3302      	adds	r3, #2
 8011fce:	e7c7      	b.n	8011f60 <_printf_common+0x58>
 8011fd0:	2301      	movs	r3, #1
 8011fd2:	4622      	mov	r2, r4
 8011fd4:	4649      	mov	r1, r9
 8011fd6:	4638      	mov	r0, r7
 8011fd8:	47c0      	blx	r8
 8011fda:	3001      	adds	r0, #1
 8011fdc:	d0e6      	beq.n	8011fac <_printf_common+0xa4>
 8011fde:	3601      	adds	r6, #1
 8011fe0:	e7d9      	b.n	8011f96 <_printf_common+0x8e>
	...

08011fe4 <_printf_i>:
 8011fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011fe8:	7e0f      	ldrb	r7, [r1, #24]
 8011fea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011fec:	2f78      	cmp	r7, #120	; 0x78
 8011fee:	4691      	mov	r9, r2
 8011ff0:	4680      	mov	r8, r0
 8011ff2:	460c      	mov	r4, r1
 8011ff4:	469a      	mov	sl, r3
 8011ff6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011ffa:	d807      	bhi.n	801200c <_printf_i+0x28>
 8011ffc:	2f62      	cmp	r7, #98	; 0x62
 8011ffe:	d80a      	bhi.n	8012016 <_printf_i+0x32>
 8012000:	2f00      	cmp	r7, #0
 8012002:	f000 80d4 	beq.w	80121ae <_printf_i+0x1ca>
 8012006:	2f58      	cmp	r7, #88	; 0x58
 8012008:	f000 80c0 	beq.w	801218c <_printf_i+0x1a8>
 801200c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012010:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012014:	e03a      	b.n	801208c <_printf_i+0xa8>
 8012016:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801201a:	2b15      	cmp	r3, #21
 801201c:	d8f6      	bhi.n	801200c <_printf_i+0x28>
 801201e:	a101      	add	r1, pc, #4	; (adr r1, 8012024 <_printf_i+0x40>)
 8012020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012024:	0801207d 	.word	0x0801207d
 8012028:	08012091 	.word	0x08012091
 801202c:	0801200d 	.word	0x0801200d
 8012030:	0801200d 	.word	0x0801200d
 8012034:	0801200d 	.word	0x0801200d
 8012038:	0801200d 	.word	0x0801200d
 801203c:	08012091 	.word	0x08012091
 8012040:	0801200d 	.word	0x0801200d
 8012044:	0801200d 	.word	0x0801200d
 8012048:	0801200d 	.word	0x0801200d
 801204c:	0801200d 	.word	0x0801200d
 8012050:	08012195 	.word	0x08012195
 8012054:	080120bd 	.word	0x080120bd
 8012058:	0801214f 	.word	0x0801214f
 801205c:	0801200d 	.word	0x0801200d
 8012060:	0801200d 	.word	0x0801200d
 8012064:	080121b7 	.word	0x080121b7
 8012068:	0801200d 	.word	0x0801200d
 801206c:	080120bd 	.word	0x080120bd
 8012070:	0801200d 	.word	0x0801200d
 8012074:	0801200d 	.word	0x0801200d
 8012078:	08012157 	.word	0x08012157
 801207c:	682b      	ldr	r3, [r5, #0]
 801207e:	1d1a      	adds	r2, r3, #4
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	602a      	str	r2, [r5, #0]
 8012084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801208c:	2301      	movs	r3, #1
 801208e:	e09f      	b.n	80121d0 <_printf_i+0x1ec>
 8012090:	6820      	ldr	r0, [r4, #0]
 8012092:	682b      	ldr	r3, [r5, #0]
 8012094:	0607      	lsls	r7, r0, #24
 8012096:	f103 0104 	add.w	r1, r3, #4
 801209a:	6029      	str	r1, [r5, #0]
 801209c:	d501      	bpl.n	80120a2 <_printf_i+0xbe>
 801209e:	681e      	ldr	r6, [r3, #0]
 80120a0:	e003      	b.n	80120aa <_printf_i+0xc6>
 80120a2:	0646      	lsls	r6, r0, #25
 80120a4:	d5fb      	bpl.n	801209e <_printf_i+0xba>
 80120a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80120aa:	2e00      	cmp	r6, #0
 80120ac:	da03      	bge.n	80120b6 <_printf_i+0xd2>
 80120ae:	232d      	movs	r3, #45	; 0x2d
 80120b0:	4276      	negs	r6, r6
 80120b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120b6:	485a      	ldr	r0, [pc, #360]	; (8012220 <_printf_i+0x23c>)
 80120b8:	230a      	movs	r3, #10
 80120ba:	e012      	b.n	80120e2 <_printf_i+0xfe>
 80120bc:	682b      	ldr	r3, [r5, #0]
 80120be:	6820      	ldr	r0, [r4, #0]
 80120c0:	1d19      	adds	r1, r3, #4
 80120c2:	6029      	str	r1, [r5, #0]
 80120c4:	0605      	lsls	r5, r0, #24
 80120c6:	d501      	bpl.n	80120cc <_printf_i+0xe8>
 80120c8:	681e      	ldr	r6, [r3, #0]
 80120ca:	e002      	b.n	80120d2 <_printf_i+0xee>
 80120cc:	0641      	lsls	r1, r0, #25
 80120ce:	d5fb      	bpl.n	80120c8 <_printf_i+0xe4>
 80120d0:	881e      	ldrh	r6, [r3, #0]
 80120d2:	4853      	ldr	r0, [pc, #332]	; (8012220 <_printf_i+0x23c>)
 80120d4:	2f6f      	cmp	r7, #111	; 0x6f
 80120d6:	bf0c      	ite	eq
 80120d8:	2308      	moveq	r3, #8
 80120da:	230a      	movne	r3, #10
 80120dc:	2100      	movs	r1, #0
 80120de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80120e2:	6865      	ldr	r5, [r4, #4]
 80120e4:	60a5      	str	r5, [r4, #8]
 80120e6:	2d00      	cmp	r5, #0
 80120e8:	bfa2      	ittt	ge
 80120ea:	6821      	ldrge	r1, [r4, #0]
 80120ec:	f021 0104 	bicge.w	r1, r1, #4
 80120f0:	6021      	strge	r1, [r4, #0]
 80120f2:	b90e      	cbnz	r6, 80120f8 <_printf_i+0x114>
 80120f4:	2d00      	cmp	r5, #0
 80120f6:	d04b      	beq.n	8012190 <_printf_i+0x1ac>
 80120f8:	4615      	mov	r5, r2
 80120fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80120fe:	fb03 6711 	mls	r7, r3, r1, r6
 8012102:	5dc7      	ldrb	r7, [r0, r7]
 8012104:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012108:	4637      	mov	r7, r6
 801210a:	42bb      	cmp	r3, r7
 801210c:	460e      	mov	r6, r1
 801210e:	d9f4      	bls.n	80120fa <_printf_i+0x116>
 8012110:	2b08      	cmp	r3, #8
 8012112:	d10b      	bne.n	801212c <_printf_i+0x148>
 8012114:	6823      	ldr	r3, [r4, #0]
 8012116:	07de      	lsls	r6, r3, #31
 8012118:	d508      	bpl.n	801212c <_printf_i+0x148>
 801211a:	6923      	ldr	r3, [r4, #16]
 801211c:	6861      	ldr	r1, [r4, #4]
 801211e:	4299      	cmp	r1, r3
 8012120:	bfde      	ittt	le
 8012122:	2330      	movle	r3, #48	; 0x30
 8012124:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012128:	f105 35ff 	addle.w	r5, r5, #4294967295
 801212c:	1b52      	subs	r2, r2, r5
 801212e:	6122      	str	r2, [r4, #16]
 8012130:	f8cd a000 	str.w	sl, [sp]
 8012134:	464b      	mov	r3, r9
 8012136:	aa03      	add	r2, sp, #12
 8012138:	4621      	mov	r1, r4
 801213a:	4640      	mov	r0, r8
 801213c:	f7ff fee4 	bl	8011f08 <_printf_common>
 8012140:	3001      	adds	r0, #1
 8012142:	d14a      	bne.n	80121da <_printf_i+0x1f6>
 8012144:	f04f 30ff 	mov.w	r0, #4294967295
 8012148:	b004      	add	sp, #16
 801214a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801214e:	6823      	ldr	r3, [r4, #0]
 8012150:	f043 0320 	orr.w	r3, r3, #32
 8012154:	6023      	str	r3, [r4, #0]
 8012156:	4833      	ldr	r0, [pc, #204]	; (8012224 <_printf_i+0x240>)
 8012158:	2778      	movs	r7, #120	; 0x78
 801215a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801215e:	6823      	ldr	r3, [r4, #0]
 8012160:	6829      	ldr	r1, [r5, #0]
 8012162:	061f      	lsls	r7, r3, #24
 8012164:	f851 6b04 	ldr.w	r6, [r1], #4
 8012168:	d402      	bmi.n	8012170 <_printf_i+0x18c>
 801216a:	065f      	lsls	r7, r3, #25
 801216c:	bf48      	it	mi
 801216e:	b2b6      	uxthmi	r6, r6
 8012170:	07df      	lsls	r7, r3, #31
 8012172:	bf48      	it	mi
 8012174:	f043 0320 	orrmi.w	r3, r3, #32
 8012178:	6029      	str	r1, [r5, #0]
 801217a:	bf48      	it	mi
 801217c:	6023      	strmi	r3, [r4, #0]
 801217e:	b91e      	cbnz	r6, 8012188 <_printf_i+0x1a4>
 8012180:	6823      	ldr	r3, [r4, #0]
 8012182:	f023 0320 	bic.w	r3, r3, #32
 8012186:	6023      	str	r3, [r4, #0]
 8012188:	2310      	movs	r3, #16
 801218a:	e7a7      	b.n	80120dc <_printf_i+0xf8>
 801218c:	4824      	ldr	r0, [pc, #144]	; (8012220 <_printf_i+0x23c>)
 801218e:	e7e4      	b.n	801215a <_printf_i+0x176>
 8012190:	4615      	mov	r5, r2
 8012192:	e7bd      	b.n	8012110 <_printf_i+0x12c>
 8012194:	682b      	ldr	r3, [r5, #0]
 8012196:	6826      	ldr	r6, [r4, #0]
 8012198:	6961      	ldr	r1, [r4, #20]
 801219a:	1d18      	adds	r0, r3, #4
 801219c:	6028      	str	r0, [r5, #0]
 801219e:	0635      	lsls	r5, r6, #24
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	d501      	bpl.n	80121a8 <_printf_i+0x1c4>
 80121a4:	6019      	str	r1, [r3, #0]
 80121a6:	e002      	b.n	80121ae <_printf_i+0x1ca>
 80121a8:	0670      	lsls	r0, r6, #25
 80121aa:	d5fb      	bpl.n	80121a4 <_printf_i+0x1c0>
 80121ac:	8019      	strh	r1, [r3, #0]
 80121ae:	2300      	movs	r3, #0
 80121b0:	6123      	str	r3, [r4, #16]
 80121b2:	4615      	mov	r5, r2
 80121b4:	e7bc      	b.n	8012130 <_printf_i+0x14c>
 80121b6:	682b      	ldr	r3, [r5, #0]
 80121b8:	1d1a      	adds	r2, r3, #4
 80121ba:	602a      	str	r2, [r5, #0]
 80121bc:	681d      	ldr	r5, [r3, #0]
 80121be:	6862      	ldr	r2, [r4, #4]
 80121c0:	2100      	movs	r1, #0
 80121c2:	4628      	mov	r0, r5
 80121c4:	f7ee f82c 	bl	8000220 <memchr>
 80121c8:	b108      	cbz	r0, 80121ce <_printf_i+0x1ea>
 80121ca:	1b40      	subs	r0, r0, r5
 80121cc:	6060      	str	r0, [r4, #4]
 80121ce:	6863      	ldr	r3, [r4, #4]
 80121d0:	6123      	str	r3, [r4, #16]
 80121d2:	2300      	movs	r3, #0
 80121d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121d8:	e7aa      	b.n	8012130 <_printf_i+0x14c>
 80121da:	6923      	ldr	r3, [r4, #16]
 80121dc:	462a      	mov	r2, r5
 80121de:	4649      	mov	r1, r9
 80121e0:	4640      	mov	r0, r8
 80121e2:	47d0      	blx	sl
 80121e4:	3001      	adds	r0, #1
 80121e6:	d0ad      	beq.n	8012144 <_printf_i+0x160>
 80121e8:	6823      	ldr	r3, [r4, #0]
 80121ea:	079b      	lsls	r3, r3, #30
 80121ec:	d413      	bmi.n	8012216 <_printf_i+0x232>
 80121ee:	68e0      	ldr	r0, [r4, #12]
 80121f0:	9b03      	ldr	r3, [sp, #12]
 80121f2:	4298      	cmp	r0, r3
 80121f4:	bfb8      	it	lt
 80121f6:	4618      	movlt	r0, r3
 80121f8:	e7a6      	b.n	8012148 <_printf_i+0x164>
 80121fa:	2301      	movs	r3, #1
 80121fc:	4632      	mov	r2, r6
 80121fe:	4649      	mov	r1, r9
 8012200:	4640      	mov	r0, r8
 8012202:	47d0      	blx	sl
 8012204:	3001      	adds	r0, #1
 8012206:	d09d      	beq.n	8012144 <_printf_i+0x160>
 8012208:	3501      	adds	r5, #1
 801220a:	68e3      	ldr	r3, [r4, #12]
 801220c:	9903      	ldr	r1, [sp, #12]
 801220e:	1a5b      	subs	r3, r3, r1
 8012210:	42ab      	cmp	r3, r5
 8012212:	dcf2      	bgt.n	80121fa <_printf_i+0x216>
 8012214:	e7eb      	b.n	80121ee <_printf_i+0x20a>
 8012216:	2500      	movs	r5, #0
 8012218:	f104 0619 	add.w	r6, r4, #25
 801221c:	e7f5      	b.n	801220a <_printf_i+0x226>
 801221e:	bf00      	nop
 8012220:	08018120 	.word	0x08018120
 8012224:	08018131 	.word	0x08018131

08012228 <_scanf_float>:
 8012228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801222c:	b087      	sub	sp, #28
 801222e:	4617      	mov	r7, r2
 8012230:	9303      	str	r3, [sp, #12]
 8012232:	688b      	ldr	r3, [r1, #8]
 8012234:	1e5a      	subs	r2, r3, #1
 8012236:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801223a:	bf83      	ittte	hi
 801223c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012240:	195b      	addhi	r3, r3, r5
 8012242:	9302      	strhi	r3, [sp, #8]
 8012244:	2300      	movls	r3, #0
 8012246:	bf86      	itte	hi
 8012248:	f240 135d 	movwhi	r3, #349	; 0x15d
 801224c:	608b      	strhi	r3, [r1, #8]
 801224e:	9302      	strls	r3, [sp, #8]
 8012250:	680b      	ldr	r3, [r1, #0]
 8012252:	468b      	mov	fp, r1
 8012254:	2500      	movs	r5, #0
 8012256:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801225a:	f84b 3b1c 	str.w	r3, [fp], #28
 801225e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012262:	4680      	mov	r8, r0
 8012264:	460c      	mov	r4, r1
 8012266:	465e      	mov	r6, fp
 8012268:	46aa      	mov	sl, r5
 801226a:	46a9      	mov	r9, r5
 801226c:	9501      	str	r5, [sp, #4]
 801226e:	68a2      	ldr	r2, [r4, #8]
 8012270:	b152      	cbz	r2, 8012288 <_scanf_float+0x60>
 8012272:	683b      	ldr	r3, [r7, #0]
 8012274:	781b      	ldrb	r3, [r3, #0]
 8012276:	2b4e      	cmp	r3, #78	; 0x4e
 8012278:	d864      	bhi.n	8012344 <_scanf_float+0x11c>
 801227a:	2b40      	cmp	r3, #64	; 0x40
 801227c:	d83c      	bhi.n	80122f8 <_scanf_float+0xd0>
 801227e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012282:	b2c8      	uxtb	r0, r1
 8012284:	280e      	cmp	r0, #14
 8012286:	d93a      	bls.n	80122fe <_scanf_float+0xd6>
 8012288:	f1b9 0f00 	cmp.w	r9, #0
 801228c:	d003      	beq.n	8012296 <_scanf_float+0x6e>
 801228e:	6823      	ldr	r3, [r4, #0]
 8012290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012294:	6023      	str	r3, [r4, #0]
 8012296:	f10a 3aff 	add.w	sl, sl, #4294967295
 801229a:	f1ba 0f01 	cmp.w	sl, #1
 801229e:	f200 8113 	bhi.w	80124c8 <_scanf_float+0x2a0>
 80122a2:	455e      	cmp	r6, fp
 80122a4:	f200 8105 	bhi.w	80124b2 <_scanf_float+0x28a>
 80122a8:	2501      	movs	r5, #1
 80122aa:	4628      	mov	r0, r5
 80122ac:	b007      	add	sp, #28
 80122ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122b2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80122b6:	2a0d      	cmp	r2, #13
 80122b8:	d8e6      	bhi.n	8012288 <_scanf_float+0x60>
 80122ba:	a101      	add	r1, pc, #4	; (adr r1, 80122c0 <_scanf_float+0x98>)
 80122bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80122c0:	080123ff 	.word	0x080123ff
 80122c4:	08012289 	.word	0x08012289
 80122c8:	08012289 	.word	0x08012289
 80122cc:	08012289 	.word	0x08012289
 80122d0:	0801245f 	.word	0x0801245f
 80122d4:	08012437 	.word	0x08012437
 80122d8:	08012289 	.word	0x08012289
 80122dc:	08012289 	.word	0x08012289
 80122e0:	0801240d 	.word	0x0801240d
 80122e4:	08012289 	.word	0x08012289
 80122e8:	08012289 	.word	0x08012289
 80122ec:	08012289 	.word	0x08012289
 80122f0:	08012289 	.word	0x08012289
 80122f4:	080123c5 	.word	0x080123c5
 80122f8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80122fc:	e7db      	b.n	80122b6 <_scanf_float+0x8e>
 80122fe:	290e      	cmp	r1, #14
 8012300:	d8c2      	bhi.n	8012288 <_scanf_float+0x60>
 8012302:	a001      	add	r0, pc, #4	; (adr r0, 8012308 <_scanf_float+0xe0>)
 8012304:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012308:	080123b7 	.word	0x080123b7
 801230c:	08012289 	.word	0x08012289
 8012310:	080123b7 	.word	0x080123b7
 8012314:	0801244b 	.word	0x0801244b
 8012318:	08012289 	.word	0x08012289
 801231c:	08012365 	.word	0x08012365
 8012320:	080123a1 	.word	0x080123a1
 8012324:	080123a1 	.word	0x080123a1
 8012328:	080123a1 	.word	0x080123a1
 801232c:	080123a1 	.word	0x080123a1
 8012330:	080123a1 	.word	0x080123a1
 8012334:	080123a1 	.word	0x080123a1
 8012338:	080123a1 	.word	0x080123a1
 801233c:	080123a1 	.word	0x080123a1
 8012340:	080123a1 	.word	0x080123a1
 8012344:	2b6e      	cmp	r3, #110	; 0x6e
 8012346:	d809      	bhi.n	801235c <_scanf_float+0x134>
 8012348:	2b60      	cmp	r3, #96	; 0x60
 801234a:	d8b2      	bhi.n	80122b2 <_scanf_float+0x8a>
 801234c:	2b54      	cmp	r3, #84	; 0x54
 801234e:	d077      	beq.n	8012440 <_scanf_float+0x218>
 8012350:	2b59      	cmp	r3, #89	; 0x59
 8012352:	d199      	bne.n	8012288 <_scanf_float+0x60>
 8012354:	2d07      	cmp	r5, #7
 8012356:	d197      	bne.n	8012288 <_scanf_float+0x60>
 8012358:	2508      	movs	r5, #8
 801235a:	e029      	b.n	80123b0 <_scanf_float+0x188>
 801235c:	2b74      	cmp	r3, #116	; 0x74
 801235e:	d06f      	beq.n	8012440 <_scanf_float+0x218>
 8012360:	2b79      	cmp	r3, #121	; 0x79
 8012362:	e7f6      	b.n	8012352 <_scanf_float+0x12a>
 8012364:	6821      	ldr	r1, [r4, #0]
 8012366:	05c8      	lsls	r0, r1, #23
 8012368:	d51a      	bpl.n	80123a0 <_scanf_float+0x178>
 801236a:	9b02      	ldr	r3, [sp, #8]
 801236c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012370:	6021      	str	r1, [r4, #0]
 8012372:	f109 0901 	add.w	r9, r9, #1
 8012376:	b11b      	cbz	r3, 8012380 <_scanf_float+0x158>
 8012378:	3b01      	subs	r3, #1
 801237a:	3201      	adds	r2, #1
 801237c:	9302      	str	r3, [sp, #8]
 801237e:	60a2      	str	r2, [r4, #8]
 8012380:	68a3      	ldr	r3, [r4, #8]
 8012382:	3b01      	subs	r3, #1
 8012384:	60a3      	str	r3, [r4, #8]
 8012386:	6923      	ldr	r3, [r4, #16]
 8012388:	3301      	adds	r3, #1
 801238a:	6123      	str	r3, [r4, #16]
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	3b01      	subs	r3, #1
 8012390:	2b00      	cmp	r3, #0
 8012392:	607b      	str	r3, [r7, #4]
 8012394:	f340 8084 	ble.w	80124a0 <_scanf_float+0x278>
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	3301      	adds	r3, #1
 801239c:	603b      	str	r3, [r7, #0]
 801239e:	e766      	b.n	801226e <_scanf_float+0x46>
 80123a0:	eb1a 0f05 	cmn.w	sl, r5
 80123a4:	f47f af70 	bne.w	8012288 <_scanf_float+0x60>
 80123a8:	6822      	ldr	r2, [r4, #0]
 80123aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80123ae:	6022      	str	r2, [r4, #0]
 80123b0:	f806 3b01 	strb.w	r3, [r6], #1
 80123b4:	e7e4      	b.n	8012380 <_scanf_float+0x158>
 80123b6:	6822      	ldr	r2, [r4, #0]
 80123b8:	0610      	lsls	r0, r2, #24
 80123ba:	f57f af65 	bpl.w	8012288 <_scanf_float+0x60>
 80123be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80123c2:	e7f4      	b.n	80123ae <_scanf_float+0x186>
 80123c4:	f1ba 0f00 	cmp.w	sl, #0
 80123c8:	d10e      	bne.n	80123e8 <_scanf_float+0x1c0>
 80123ca:	f1b9 0f00 	cmp.w	r9, #0
 80123ce:	d10e      	bne.n	80123ee <_scanf_float+0x1c6>
 80123d0:	6822      	ldr	r2, [r4, #0]
 80123d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80123d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80123da:	d108      	bne.n	80123ee <_scanf_float+0x1c6>
 80123dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80123e0:	6022      	str	r2, [r4, #0]
 80123e2:	f04f 0a01 	mov.w	sl, #1
 80123e6:	e7e3      	b.n	80123b0 <_scanf_float+0x188>
 80123e8:	f1ba 0f02 	cmp.w	sl, #2
 80123ec:	d055      	beq.n	801249a <_scanf_float+0x272>
 80123ee:	2d01      	cmp	r5, #1
 80123f0:	d002      	beq.n	80123f8 <_scanf_float+0x1d0>
 80123f2:	2d04      	cmp	r5, #4
 80123f4:	f47f af48 	bne.w	8012288 <_scanf_float+0x60>
 80123f8:	3501      	adds	r5, #1
 80123fa:	b2ed      	uxtb	r5, r5
 80123fc:	e7d8      	b.n	80123b0 <_scanf_float+0x188>
 80123fe:	f1ba 0f01 	cmp.w	sl, #1
 8012402:	f47f af41 	bne.w	8012288 <_scanf_float+0x60>
 8012406:	f04f 0a02 	mov.w	sl, #2
 801240a:	e7d1      	b.n	80123b0 <_scanf_float+0x188>
 801240c:	b97d      	cbnz	r5, 801242e <_scanf_float+0x206>
 801240e:	f1b9 0f00 	cmp.w	r9, #0
 8012412:	f47f af3c 	bne.w	801228e <_scanf_float+0x66>
 8012416:	6822      	ldr	r2, [r4, #0]
 8012418:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801241c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012420:	f47f af39 	bne.w	8012296 <_scanf_float+0x6e>
 8012424:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012428:	6022      	str	r2, [r4, #0]
 801242a:	2501      	movs	r5, #1
 801242c:	e7c0      	b.n	80123b0 <_scanf_float+0x188>
 801242e:	2d03      	cmp	r5, #3
 8012430:	d0e2      	beq.n	80123f8 <_scanf_float+0x1d0>
 8012432:	2d05      	cmp	r5, #5
 8012434:	e7de      	b.n	80123f4 <_scanf_float+0x1cc>
 8012436:	2d02      	cmp	r5, #2
 8012438:	f47f af26 	bne.w	8012288 <_scanf_float+0x60>
 801243c:	2503      	movs	r5, #3
 801243e:	e7b7      	b.n	80123b0 <_scanf_float+0x188>
 8012440:	2d06      	cmp	r5, #6
 8012442:	f47f af21 	bne.w	8012288 <_scanf_float+0x60>
 8012446:	2507      	movs	r5, #7
 8012448:	e7b2      	b.n	80123b0 <_scanf_float+0x188>
 801244a:	6822      	ldr	r2, [r4, #0]
 801244c:	0591      	lsls	r1, r2, #22
 801244e:	f57f af1b 	bpl.w	8012288 <_scanf_float+0x60>
 8012452:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8012456:	6022      	str	r2, [r4, #0]
 8012458:	f8cd 9004 	str.w	r9, [sp, #4]
 801245c:	e7a8      	b.n	80123b0 <_scanf_float+0x188>
 801245e:	6822      	ldr	r2, [r4, #0]
 8012460:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012464:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012468:	d006      	beq.n	8012478 <_scanf_float+0x250>
 801246a:	0550      	lsls	r0, r2, #21
 801246c:	f57f af0c 	bpl.w	8012288 <_scanf_float+0x60>
 8012470:	f1b9 0f00 	cmp.w	r9, #0
 8012474:	f43f af0f 	beq.w	8012296 <_scanf_float+0x6e>
 8012478:	0591      	lsls	r1, r2, #22
 801247a:	bf58      	it	pl
 801247c:	9901      	ldrpl	r1, [sp, #4]
 801247e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012482:	bf58      	it	pl
 8012484:	eba9 0101 	subpl.w	r1, r9, r1
 8012488:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801248c:	bf58      	it	pl
 801248e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012492:	6022      	str	r2, [r4, #0]
 8012494:	f04f 0900 	mov.w	r9, #0
 8012498:	e78a      	b.n	80123b0 <_scanf_float+0x188>
 801249a:	f04f 0a03 	mov.w	sl, #3
 801249e:	e787      	b.n	80123b0 <_scanf_float+0x188>
 80124a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80124a4:	4639      	mov	r1, r7
 80124a6:	4640      	mov	r0, r8
 80124a8:	4798      	blx	r3
 80124aa:	2800      	cmp	r0, #0
 80124ac:	f43f aedf 	beq.w	801226e <_scanf_float+0x46>
 80124b0:	e6ea      	b.n	8012288 <_scanf_float+0x60>
 80124b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80124b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80124ba:	463a      	mov	r2, r7
 80124bc:	4640      	mov	r0, r8
 80124be:	4798      	blx	r3
 80124c0:	6923      	ldr	r3, [r4, #16]
 80124c2:	3b01      	subs	r3, #1
 80124c4:	6123      	str	r3, [r4, #16]
 80124c6:	e6ec      	b.n	80122a2 <_scanf_float+0x7a>
 80124c8:	1e6b      	subs	r3, r5, #1
 80124ca:	2b06      	cmp	r3, #6
 80124cc:	d825      	bhi.n	801251a <_scanf_float+0x2f2>
 80124ce:	2d02      	cmp	r5, #2
 80124d0:	d836      	bhi.n	8012540 <_scanf_float+0x318>
 80124d2:	455e      	cmp	r6, fp
 80124d4:	f67f aee8 	bls.w	80122a8 <_scanf_float+0x80>
 80124d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80124dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80124e0:	463a      	mov	r2, r7
 80124e2:	4640      	mov	r0, r8
 80124e4:	4798      	blx	r3
 80124e6:	6923      	ldr	r3, [r4, #16]
 80124e8:	3b01      	subs	r3, #1
 80124ea:	6123      	str	r3, [r4, #16]
 80124ec:	e7f1      	b.n	80124d2 <_scanf_float+0x2aa>
 80124ee:	9802      	ldr	r0, [sp, #8]
 80124f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80124f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80124f8:	9002      	str	r0, [sp, #8]
 80124fa:	463a      	mov	r2, r7
 80124fc:	4640      	mov	r0, r8
 80124fe:	4798      	blx	r3
 8012500:	6923      	ldr	r3, [r4, #16]
 8012502:	3b01      	subs	r3, #1
 8012504:	6123      	str	r3, [r4, #16]
 8012506:	f10a 3aff 	add.w	sl, sl, #4294967295
 801250a:	fa5f fa8a 	uxtb.w	sl, sl
 801250e:	f1ba 0f02 	cmp.w	sl, #2
 8012512:	d1ec      	bne.n	80124ee <_scanf_float+0x2c6>
 8012514:	3d03      	subs	r5, #3
 8012516:	b2ed      	uxtb	r5, r5
 8012518:	1b76      	subs	r6, r6, r5
 801251a:	6823      	ldr	r3, [r4, #0]
 801251c:	05da      	lsls	r2, r3, #23
 801251e:	d52f      	bpl.n	8012580 <_scanf_float+0x358>
 8012520:	055b      	lsls	r3, r3, #21
 8012522:	d510      	bpl.n	8012546 <_scanf_float+0x31e>
 8012524:	455e      	cmp	r6, fp
 8012526:	f67f aebf 	bls.w	80122a8 <_scanf_float+0x80>
 801252a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801252e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012532:	463a      	mov	r2, r7
 8012534:	4640      	mov	r0, r8
 8012536:	4798      	blx	r3
 8012538:	6923      	ldr	r3, [r4, #16]
 801253a:	3b01      	subs	r3, #1
 801253c:	6123      	str	r3, [r4, #16]
 801253e:	e7f1      	b.n	8012524 <_scanf_float+0x2fc>
 8012540:	46aa      	mov	sl, r5
 8012542:	9602      	str	r6, [sp, #8]
 8012544:	e7df      	b.n	8012506 <_scanf_float+0x2de>
 8012546:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801254a:	6923      	ldr	r3, [r4, #16]
 801254c:	2965      	cmp	r1, #101	; 0x65
 801254e:	f103 33ff 	add.w	r3, r3, #4294967295
 8012552:	f106 35ff 	add.w	r5, r6, #4294967295
 8012556:	6123      	str	r3, [r4, #16]
 8012558:	d00c      	beq.n	8012574 <_scanf_float+0x34c>
 801255a:	2945      	cmp	r1, #69	; 0x45
 801255c:	d00a      	beq.n	8012574 <_scanf_float+0x34c>
 801255e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012562:	463a      	mov	r2, r7
 8012564:	4640      	mov	r0, r8
 8012566:	4798      	blx	r3
 8012568:	6923      	ldr	r3, [r4, #16]
 801256a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801256e:	3b01      	subs	r3, #1
 8012570:	1eb5      	subs	r5, r6, #2
 8012572:	6123      	str	r3, [r4, #16]
 8012574:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012578:	463a      	mov	r2, r7
 801257a:	4640      	mov	r0, r8
 801257c:	4798      	blx	r3
 801257e:	462e      	mov	r6, r5
 8012580:	6825      	ldr	r5, [r4, #0]
 8012582:	f015 0510 	ands.w	r5, r5, #16
 8012586:	d158      	bne.n	801263a <_scanf_float+0x412>
 8012588:	7035      	strb	r5, [r6, #0]
 801258a:	6823      	ldr	r3, [r4, #0]
 801258c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012594:	d11c      	bne.n	80125d0 <_scanf_float+0x3a8>
 8012596:	9b01      	ldr	r3, [sp, #4]
 8012598:	454b      	cmp	r3, r9
 801259a:	eba3 0209 	sub.w	r2, r3, r9
 801259e:	d124      	bne.n	80125ea <_scanf_float+0x3c2>
 80125a0:	2200      	movs	r2, #0
 80125a2:	4659      	mov	r1, fp
 80125a4:	4640      	mov	r0, r8
 80125a6:	f002 fcd3 	bl	8014f50 <_strtod_r>
 80125aa:	9b03      	ldr	r3, [sp, #12]
 80125ac:	6821      	ldr	r1, [r4, #0]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	f011 0f02 	tst.w	r1, #2
 80125b4:	ec57 6b10 	vmov	r6, r7, d0
 80125b8:	f103 0204 	add.w	r2, r3, #4
 80125bc:	d020      	beq.n	8012600 <_scanf_float+0x3d8>
 80125be:	9903      	ldr	r1, [sp, #12]
 80125c0:	600a      	str	r2, [r1, #0]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	e9c3 6700 	strd	r6, r7, [r3]
 80125c8:	68e3      	ldr	r3, [r4, #12]
 80125ca:	3301      	adds	r3, #1
 80125cc:	60e3      	str	r3, [r4, #12]
 80125ce:	e66c      	b.n	80122aa <_scanf_float+0x82>
 80125d0:	9b04      	ldr	r3, [sp, #16]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d0e4      	beq.n	80125a0 <_scanf_float+0x378>
 80125d6:	9905      	ldr	r1, [sp, #20]
 80125d8:	230a      	movs	r3, #10
 80125da:	462a      	mov	r2, r5
 80125dc:	3101      	adds	r1, #1
 80125de:	4640      	mov	r0, r8
 80125e0:	f002 fd3e 	bl	8015060 <_strtol_r>
 80125e4:	9b04      	ldr	r3, [sp, #16]
 80125e6:	9e05      	ldr	r6, [sp, #20]
 80125e8:	1ac2      	subs	r2, r0, r3
 80125ea:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80125ee:	429e      	cmp	r6, r3
 80125f0:	bf28      	it	cs
 80125f2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80125f6:	4912      	ldr	r1, [pc, #72]	; (8012640 <_scanf_float+0x418>)
 80125f8:	4630      	mov	r0, r6
 80125fa:	f000 f8e7 	bl	80127cc <siprintf>
 80125fe:	e7cf      	b.n	80125a0 <_scanf_float+0x378>
 8012600:	f011 0f04 	tst.w	r1, #4
 8012604:	9903      	ldr	r1, [sp, #12]
 8012606:	600a      	str	r2, [r1, #0]
 8012608:	d1db      	bne.n	80125c2 <_scanf_float+0x39a>
 801260a:	f8d3 8000 	ldr.w	r8, [r3]
 801260e:	ee10 2a10 	vmov	r2, s0
 8012612:	ee10 0a10 	vmov	r0, s0
 8012616:	463b      	mov	r3, r7
 8012618:	4639      	mov	r1, r7
 801261a:	f7ee faaf 	bl	8000b7c <__aeabi_dcmpun>
 801261e:	b128      	cbz	r0, 801262c <_scanf_float+0x404>
 8012620:	4808      	ldr	r0, [pc, #32]	; (8012644 <_scanf_float+0x41c>)
 8012622:	f000 fa5b 	bl	8012adc <nanf>
 8012626:	ed88 0a00 	vstr	s0, [r8]
 801262a:	e7cd      	b.n	80125c8 <_scanf_float+0x3a0>
 801262c:	4630      	mov	r0, r6
 801262e:	4639      	mov	r1, r7
 8012630:	f7ee fb02 	bl	8000c38 <__aeabi_d2f>
 8012634:	f8c8 0000 	str.w	r0, [r8]
 8012638:	e7c6      	b.n	80125c8 <_scanf_float+0x3a0>
 801263a:	2500      	movs	r5, #0
 801263c:	e635      	b.n	80122aa <_scanf_float+0x82>
 801263e:	bf00      	nop
 8012640:	08018142 	.word	0x08018142
 8012644:	080184f0 	.word	0x080184f0

08012648 <std>:
 8012648:	2300      	movs	r3, #0
 801264a:	b510      	push	{r4, lr}
 801264c:	4604      	mov	r4, r0
 801264e:	e9c0 3300 	strd	r3, r3, [r0]
 8012652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012656:	6083      	str	r3, [r0, #8]
 8012658:	8181      	strh	r1, [r0, #12]
 801265a:	6643      	str	r3, [r0, #100]	; 0x64
 801265c:	81c2      	strh	r2, [r0, #14]
 801265e:	6183      	str	r3, [r0, #24]
 8012660:	4619      	mov	r1, r3
 8012662:	2208      	movs	r2, #8
 8012664:	305c      	adds	r0, #92	; 0x5c
 8012666:	f000 f942 	bl	80128ee <memset>
 801266a:	4b0d      	ldr	r3, [pc, #52]	; (80126a0 <std+0x58>)
 801266c:	6263      	str	r3, [r4, #36]	; 0x24
 801266e:	4b0d      	ldr	r3, [pc, #52]	; (80126a4 <std+0x5c>)
 8012670:	62a3      	str	r3, [r4, #40]	; 0x28
 8012672:	4b0d      	ldr	r3, [pc, #52]	; (80126a8 <std+0x60>)
 8012674:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012676:	4b0d      	ldr	r3, [pc, #52]	; (80126ac <std+0x64>)
 8012678:	6323      	str	r3, [r4, #48]	; 0x30
 801267a:	4b0d      	ldr	r3, [pc, #52]	; (80126b0 <std+0x68>)
 801267c:	6224      	str	r4, [r4, #32]
 801267e:	429c      	cmp	r4, r3
 8012680:	d006      	beq.n	8012690 <std+0x48>
 8012682:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012686:	4294      	cmp	r4, r2
 8012688:	d002      	beq.n	8012690 <std+0x48>
 801268a:	33d0      	adds	r3, #208	; 0xd0
 801268c:	429c      	cmp	r4, r3
 801268e:	d105      	bne.n	801269c <std+0x54>
 8012690:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012698:	f000 ba0e 	b.w	8012ab8 <__retarget_lock_init_recursive>
 801269c:	bd10      	pop	{r4, pc}
 801269e:	bf00      	nop
 80126a0:	08012865 	.word	0x08012865
 80126a4:	0801288b 	.word	0x0801288b
 80126a8:	080128c3 	.word	0x080128c3
 80126ac:	080128e7 	.word	0x080128e7
 80126b0:	20004a9c 	.word	0x20004a9c

080126b4 <stdio_exit_handler>:
 80126b4:	4a02      	ldr	r2, [pc, #8]	; (80126c0 <stdio_exit_handler+0xc>)
 80126b6:	4903      	ldr	r1, [pc, #12]	; (80126c4 <stdio_exit_handler+0x10>)
 80126b8:	4803      	ldr	r0, [pc, #12]	; (80126c8 <stdio_exit_handler+0x14>)
 80126ba:	f000 b869 	b.w	8012790 <_fwalk_sglue>
 80126be:	bf00      	nop
 80126c0:	20000018 	.word	0x20000018
 80126c4:	08015a61 	.word	0x08015a61
 80126c8:	20000024 	.word	0x20000024

080126cc <cleanup_stdio>:
 80126cc:	6841      	ldr	r1, [r0, #4]
 80126ce:	4b0c      	ldr	r3, [pc, #48]	; (8012700 <cleanup_stdio+0x34>)
 80126d0:	4299      	cmp	r1, r3
 80126d2:	b510      	push	{r4, lr}
 80126d4:	4604      	mov	r4, r0
 80126d6:	d001      	beq.n	80126dc <cleanup_stdio+0x10>
 80126d8:	f003 f9c2 	bl	8015a60 <_fflush_r>
 80126dc:	68a1      	ldr	r1, [r4, #8]
 80126de:	4b09      	ldr	r3, [pc, #36]	; (8012704 <cleanup_stdio+0x38>)
 80126e0:	4299      	cmp	r1, r3
 80126e2:	d002      	beq.n	80126ea <cleanup_stdio+0x1e>
 80126e4:	4620      	mov	r0, r4
 80126e6:	f003 f9bb 	bl	8015a60 <_fflush_r>
 80126ea:	68e1      	ldr	r1, [r4, #12]
 80126ec:	4b06      	ldr	r3, [pc, #24]	; (8012708 <cleanup_stdio+0x3c>)
 80126ee:	4299      	cmp	r1, r3
 80126f0:	d004      	beq.n	80126fc <cleanup_stdio+0x30>
 80126f2:	4620      	mov	r0, r4
 80126f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126f8:	f003 b9b2 	b.w	8015a60 <_fflush_r>
 80126fc:	bd10      	pop	{r4, pc}
 80126fe:	bf00      	nop
 8012700:	20004a9c 	.word	0x20004a9c
 8012704:	20004b04 	.word	0x20004b04
 8012708:	20004b6c 	.word	0x20004b6c

0801270c <global_stdio_init.part.0>:
 801270c:	b510      	push	{r4, lr}
 801270e:	4b0b      	ldr	r3, [pc, #44]	; (801273c <global_stdio_init.part.0+0x30>)
 8012710:	4c0b      	ldr	r4, [pc, #44]	; (8012740 <global_stdio_init.part.0+0x34>)
 8012712:	4a0c      	ldr	r2, [pc, #48]	; (8012744 <global_stdio_init.part.0+0x38>)
 8012714:	601a      	str	r2, [r3, #0]
 8012716:	4620      	mov	r0, r4
 8012718:	2200      	movs	r2, #0
 801271a:	2104      	movs	r1, #4
 801271c:	f7ff ff94 	bl	8012648 <std>
 8012720:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012724:	2201      	movs	r2, #1
 8012726:	2109      	movs	r1, #9
 8012728:	f7ff ff8e 	bl	8012648 <std>
 801272c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012730:	2202      	movs	r2, #2
 8012732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012736:	2112      	movs	r1, #18
 8012738:	f7ff bf86 	b.w	8012648 <std>
 801273c:	20004bd4 	.word	0x20004bd4
 8012740:	20004a9c 	.word	0x20004a9c
 8012744:	080126b5 	.word	0x080126b5

08012748 <__sfp_lock_acquire>:
 8012748:	4801      	ldr	r0, [pc, #4]	; (8012750 <__sfp_lock_acquire+0x8>)
 801274a:	f000 b9b6 	b.w	8012aba <__retarget_lock_acquire_recursive>
 801274e:	bf00      	nop
 8012750:	20004bdd 	.word	0x20004bdd

08012754 <__sfp_lock_release>:
 8012754:	4801      	ldr	r0, [pc, #4]	; (801275c <__sfp_lock_release+0x8>)
 8012756:	f000 b9b1 	b.w	8012abc <__retarget_lock_release_recursive>
 801275a:	bf00      	nop
 801275c:	20004bdd 	.word	0x20004bdd

08012760 <__sinit>:
 8012760:	b510      	push	{r4, lr}
 8012762:	4604      	mov	r4, r0
 8012764:	f7ff fff0 	bl	8012748 <__sfp_lock_acquire>
 8012768:	6a23      	ldr	r3, [r4, #32]
 801276a:	b11b      	cbz	r3, 8012774 <__sinit+0x14>
 801276c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012770:	f7ff bff0 	b.w	8012754 <__sfp_lock_release>
 8012774:	4b04      	ldr	r3, [pc, #16]	; (8012788 <__sinit+0x28>)
 8012776:	6223      	str	r3, [r4, #32]
 8012778:	4b04      	ldr	r3, [pc, #16]	; (801278c <__sinit+0x2c>)
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d1f5      	bne.n	801276c <__sinit+0xc>
 8012780:	f7ff ffc4 	bl	801270c <global_stdio_init.part.0>
 8012784:	e7f2      	b.n	801276c <__sinit+0xc>
 8012786:	bf00      	nop
 8012788:	080126cd 	.word	0x080126cd
 801278c:	20004bd4 	.word	0x20004bd4

08012790 <_fwalk_sglue>:
 8012790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012794:	4607      	mov	r7, r0
 8012796:	4688      	mov	r8, r1
 8012798:	4614      	mov	r4, r2
 801279a:	2600      	movs	r6, #0
 801279c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80127a0:	f1b9 0901 	subs.w	r9, r9, #1
 80127a4:	d505      	bpl.n	80127b2 <_fwalk_sglue+0x22>
 80127a6:	6824      	ldr	r4, [r4, #0]
 80127a8:	2c00      	cmp	r4, #0
 80127aa:	d1f7      	bne.n	801279c <_fwalk_sglue+0xc>
 80127ac:	4630      	mov	r0, r6
 80127ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127b2:	89ab      	ldrh	r3, [r5, #12]
 80127b4:	2b01      	cmp	r3, #1
 80127b6:	d907      	bls.n	80127c8 <_fwalk_sglue+0x38>
 80127b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80127bc:	3301      	adds	r3, #1
 80127be:	d003      	beq.n	80127c8 <_fwalk_sglue+0x38>
 80127c0:	4629      	mov	r1, r5
 80127c2:	4638      	mov	r0, r7
 80127c4:	47c0      	blx	r8
 80127c6:	4306      	orrs	r6, r0
 80127c8:	3568      	adds	r5, #104	; 0x68
 80127ca:	e7e9      	b.n	80127a0 <_fwalk_sglue+0x10>

080127cc <siprintf>:
 80127cc:	b40e      	push	{r1, r2, r3}
 80127ce:	b500      	push	{lr}
 80127d0:	b09c      	sub	sp, #112	; 0x70
 80127d2:	ab1d      	add	r3, sp, #116	; 0x74
 80127d4:	9002      	str	r0, [sp, #8]
 80127d6:	9006      	str	r0, [sp, #24]
 80127d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80127dc:	4809      	ldr	r0, [pc, #36]	; (8012804 <siprintf+0x38>)
 80127de:	9107      	str	r1, [sp, #28]
 80127e0:	9104      	str	r1, [sp, #16]
 80127e2:	4909      	ldr	r1, [pc, #36]	; (8012808 <siprintf+0x3c>)
 80127e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80127e8:	9105      	str	r1, [sp, #20]
 80127ea:	6800      	ldr	r0, [r0, #0]
 80127ec:	9301      	str	r3, [sp, #4]
 80127ee:	a902      	add	r1, sp, #8
 80127f0:	f002 fc92 	bl	8015118 <_svfiprintf_r>
 80127f4:	9b02      	ldr	r3, [sp, #8]
 80127f6:	2200      	movs	r2, #0
 80127f8:	701a      	strb	r2, [r3, #0]
 80127fa:	b01c      	add	sp, #112	; 0x70
 80127fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8012800:	b003      	add	sp, #12
 8012802:	4770      	bx	lr
 8012804:	20000070 	.word	0x20000070
 8012808:	ffff0208 	.word	0xffff0208

0801280c <siscanf>:
 801280c:	b40e      	push	{r1, r2, r3}
 801280e:	b510      	push	{r4, lr}
 8012810:	b09f      	sub	sp, #124	; 0x7c
 8012812:	ac21      	add	r4, sp, #132	; 0x84
 8012814:	f44f 7101 	mov.w	r1, #516	; 0x204
 8012818:	f854 2b04 	ldr.w	r2, [r4], #4
 801281c:	9201      	str	r2, [sp, #4]
 801281e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8012822:	9004      	str	r0, [sp, #16]
 8012824:	9008      	str	r0, [sp, #32]
 8012826:	f7ed fd4b 	bl	80002c0 <strlen>
 801282a:	4b0c      	ldr	r3, [pc, #48]	; (801285c <siscanf+0x50>)
 801282c:	9005      	str	r0, [sp, #20]
 801282e:	9009      	str	r0, [sp, #36]	; 0x24
 8012830:	930d      	str	r3, [sp, #52]	; 0x34
 8012832:	480b      	ldr	r0, [pc, #44]	; (8012860 <siscanf+0x54>)
 8012834:	9a01      	ldr	r2, [sp, #4]
 8012836:	6800      	ldr	r0, [r0, #0]
 8012838:	9403      	str	r4, [sp, #12]
 801283a:	2300      	movs	r3, #0
 801283c:	9311      	str	r3, [sp, #68]	; 0x44
 801283e:	9316      	str	r3, [sp, #88]	; 0x58
 8012840:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012844:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012848:	a904      	add	r1, sp, #16
 801284a:	4623      	mov	r3, r4
 801284c:	f002 fdbc 	bl	80153c8 <__ssvfiscanf_r>
 8012850:	b01f      	add	sp, #124	; 0x7c
 8012852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012856:	b003      	add	sp, #12
 8012858:	4770      	bx	lr
 801285a:	bf00      	nop
 801285c:	08012887 	.word	0x08012887
 8012860:	20000070 	.word	0x20000070

08012864 <__sread>:
 8012864:	b510      	push	{r4, lr}
 8012866:	460c      	mov	r4, r1
 8012868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801286c:	f000 f8d6 	bl	8012a1c <_read_r>
 8012870:	2800      	cmp	r0, #0
 8012872:	bfab      	itete	ge
 8012874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012876:	89a3      	ldrhlt	r3, [r4, #12]
 8012878:	181b      	addge	r3, r3, r0
 801287a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801287e:	bfac      	ite	ge
 8012880:	6563      	strge	r3, [r4, #84]	; 0x54
 8012882:	81a3      	strhlt	r3, [r4, #12]
 8012884:	bd10      	pop	{r4, pc}

08012886 <__seofread>:
 8012886:	2000      	movs	r0, #0
 8012888:	4770      	bx	lr

0801288a <__swrite>:
 801288a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801288e:	461f      	mov	r7, r3
 8012890:	898b      	ldrh	r3, [r1, #12]
 8012892:	05db      	lsls	r3, r3, #23
 8012894:	4605      	mov	r5, r0
 8012896:	460c      	mov	r4, r1
 8012898:	4616      	mov	r6, r2
 801289a:	d505      	bpl.n	80128a8 <__swrite+0x1e>
 801289c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128a0:	2302      	movs	r3, #2
 80128a2:	2200      	movs	r2, #0
 80128a4:	f000 f8a8 	bl	80129f8 <_lseek_r>
 80128a8:	89a3      	ldrh	r3, [r4, #12]
 80128aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80128ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80128b2:	81a3      	strh	r3, [r4, #12]
 80128b4:	4632      	mov	r2, r6
 80128b6:	463b      	mov	r3, r7
 80128b8:	4628      	mov	r0, r5
 80128ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128be:	f000 b8bf 	b.w	8012a40 <_write_r>

080128c2 <__sseek>:
 80128c2:	b510      	push	{r4, lr}
 80128c4:	460c      	mov	r4, r1
 80128c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128ca:	f000 f895 	bl	80129f8 <_lseek_r>
 80128ce:	1c43      	adds	r3, r0, #1
 80128d0:	89a3      	ldrh	r3, [r4, #12]
 80128d2:	bf15      	itete	ne
 80128d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80128d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80128da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80128de:	81a3      	strheq	r3, [r4, #12]
 80128e0:	bf18      	it	ne
 80128e2:	81a3      	strhne	r3, [r4, #12]
 80128e4:	bd10      	pop	{r4, pc}

080128e6 <__sclose>:
 80128e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128ea:	f000 b81f 	b.w	801292c <_close_r>

080128ee <memset>:
 80128ee:	4402      	add	r2, r0
 80128f0:	4603      	mov	r3, r0
 80128f2:	4293      	cmp	r3, r2
 80128f4:	d100      	bne.n	80128f8 <memset+0xa>
 80128f6:	4770      	bx	lr
 80128f8:	f803 1b01 	strb.w	r1, [r3], #1
 80128fc:	e7f9      	b.n	80128f2 <memset+0x4>

080128fe <strncmp>:
 80128fe:	b510      	push	{r4, lr}
 8012900:	b16a      	cbz	r2, 801291e <strncmp+0x20>
 8012902:	3901      	subs	r1, #1
 8012904:	1884      	adds	r4, r0, r2
 8012906:	f810 2b01 	ldrb.w	r2, [r0], #1
 801290a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801290e:	429a      	cmp	r2, r3
 8012910:	d103      	bne.n	801291a <strncmp+0x1c>
 8012912:	42a0      	cmp	r0, r4
 8012914:	d001      	beq.n	801291a <strncmp+0x1c>
 8012916:	2a00      	cmp	r2, #0
 8012918:	d1f5      	bne.n	8012906 <strncmp+0x8>
 801291a:	1ad0      	subs	r0, r2, r3
 801291c:	bd10      	pop	{r4, pc}
 801291e:	4610      	mov	r0, r2
 8012920:	e7fc      	b.n	801291c <strncmp+0x1e>
	...

08012924 <_localeconv_r>:
 8012924:	4800      	ldr	r0, [pc, #0]	; (8012928 <_localeconv_r+0x4>)
 8012926:	4770      	bx	lr
 8012928:	20000164 	.word	0x20000164

0801292c <_close_r>:
 801292c:	b538      	push	{r3, r4, r5, lr}
 801292e:	4d06      	ldr	r5, [pc, #24]	; (8012948 <_close_r+0x1c>)
 8012930:	2300      	movs	r3, #0
 8012932:	4604      	mov	r4, r0
 8012934:	4608      	mov	r0, r1
 8012936:	602b      	str	r3, [r5, #0]
 8012938:	f7f2 fe3b 	bl	80055b2 <_close>
 801293c:	1c43      	adds	r3, r0, #1
 801293e:	d102      	bne.n	8012946 <_close_r+0x1a>
 8012940:	682b      	ldr	r3, [r5, #0]
 8012942:	b103      	cbz	r3, 8012946 <_close_r+0x1a>
 8012944:	6023      	str	r3, [r4, #0]
 8012946:	bd38      	pop	{r3, r4, r5, pc}
 8012948:	20004bd8 	.word	0x20004bd8

0801294c <_reclaim_reent>:
 801294c:	4b29      	ldr	r3, [pc, #164]	; (80129f4 <_reclaim_reent+0xa8>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	4283      	cmp	r3, r0
 8012952:	b570      	push	{r4, r5, r6, lr}
 8012954:	4604      	mov	r4, r0
 8012956:	d04b      	beq.n	80129f0 <_reclaim_reent+0xa4>
 8012958:	69c3      	ldr	r3, [r0, #28]
 801295a:	b143      	cbz	r3, 801296e <_reclaim_reent+0x22>
 801295c:	68db      	ldr	r3, [r3, #12]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d144      	bne.n	80129ec <_reclaim_reent+0xa0>
 8012962:	69e3      	ldr	r3, [r4, #28]
 8012964:	6819      	ldr	r1, [r3, #0]
 8012966:	b111      	cbz	r1, 801296e <_reclaim_reent+0x22>
 8012968:	4620      	mov	r0, r4
 801296a:	f000 ff37 	bl	80137dc <_free_r>
 801296e:	6961      	ldr	r1, [r4, #20]
 8012970:	b111      	cbz	r1, 8012978 <_reclaim_reent+0x2c>
 8012972:	4620      	mov	r0, r4
 8012974:	f000 ff32 	bl	80137dc <_free_r>
 8012978:	69e1      	ldr	r1, [r4, #28]
 801297a:	b111      	cbz	r1, 8012982 <_reclaim_reent+0x36>
 801297c:	4620      	mov	r0, r4
 801297e:	f000 ff2d 	bl	80137dc <_free_r>
 8012982:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012984:	b111      	cbz	r1, 801298c <_reclaim_reent+0x40>
 8012986:	4620      	mov	r0, r4
 8012988:	f000 ff28 	bl	80137dc <_free_r>
 801298c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801298e:	b111      	cbz	r1, 8012996 <_reclaim_reent+0x4a>
 8012990:	4620      	mov	r0, r4
 8012992:	f000 ff23 	bl	80137dc <_free_r>
 8012996:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012998:	b111      	cbz	r1, 80129a0 <_reclaim_reent+0x54>
 801299a:	4620      	mov	r0, r4
 801299c:	f000 ff1e 	bl	80137dc <_free_r>
 80129a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80129a2:	b111      	cbz	r1, 80129aa <_reclaim_reent+0x5e>
 80129a4:	4620      	mov	r0, r4
 80129a6:	f000 ff19 	bl	80137dc <_free_r>
 80129aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80129ac:	b111      	cbz	r1, 80129b4 <_reclaim_reent+0x68>
 80129ae:	4620      	mov	r0, r4
 80129b0:	f000 ff14 	bl	80137dc <_free_r>
 80129b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80129b6:	b111      	cbz	r1, 80129be <_reclaim_reent+0x72>
 80129b8:	4620      	mov	r0, r4
 80129ba:	f000 ff0f 	bl	80137dc <_free_r>
 80129be:	6a23      	ldr	r3, [r4, #32]
 80129c0:	b1b3      	cbz	r3, 80129f0 <_reclaim_reent+0xa4>
 80129c2:	4620      	mov	r0, r4
 80129c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129c8:	4718      	bx	r3
 80129ca:	5949      	ldr	r1, [r1, r5]
 80129cc:	b941      	cbnz	r1, 80129e0 <_reclaim_reent+0x94>
 80129ce:	3504      	adds	r5, #4
 80129d0:	69e3      	ldr	r3, [r4, #28]
 80129d2:	2d80      	cmp	r5, #128	; 0x80
 80129d4:	68d9      	ldr	r1, [r3, #12]
 80129d6:	d1f8      	bne.n	80129ca <_reclaim_reent+0x7e>
 80129d8:	4620      	mov	r0, r4
 80129da:	f000 feff 	bl	80137dc <_free_r>
 80129de:	e7c0      	b.n	8012962 <_reclaim_reent+0x16>
 80129e0:	680e      	ldr	r6, [r1, #0]
 80129e2:	4620      	mov	r0, r4
 80129e4:	f000 fefa 	bl	80137dc <_free_r>
 80129e8:	4631      	mov	r1, r6
 80129ea:	e7ef      	b.n	80129cc <_reclaim_reent+0x80>
 80129ec:	2500      	movs	r5, #0
 80129ee:	e7ef      	b.n	80129d0 <_reclaim_reent+0x84>
 80129f0:	bd70      	pop	{r4, r5, r6, pc}
 80129f2:	bf00      	nop
 80129f4:	20000070 	.word	0x20000070

080129f8 <_lseek_r>:
 80129f8:	b538      	push	{r3, r4, r5, lr}
 80129fa:	4d07      	ldr	r5, [pc, #28]	; (8012a18 <_lseek_r+0x20>)
 80129fc:	4604      	mov	r4, r0
 80129fe:	4608      	mov	r0, r1
 8012a00:	4611      	mov	r1, r2
 8012a02:	2200      	movs	r2, #0
 8012a04:	602a      	str	r2, [r5, #0]
 8012a06:	461a      	mov	r2, r3
 8012a08:	f7f2 fdfa 	bl	8005600 <_lseek>
 8012a0c:	1c43      	adds	r3, r0, #1
 8012a0e:	d102      	bne.n	8012a16 <_lseek_r+0x1e>
 8012a10:	682b      	ldr	r3, [r5, #0]
 8012a12:	b103      	cbz	r3, 8012a16 <_lseek_r+0x1e>
 8012a14:	6023      	str	r3, [r4, #0]
 8012a16:	bd38      	pop	{r3, r4, r5, pc}
 8012a18:	20004bd8 	.word	0x20004bd8

08012a1c <_read_r>:
 8012a1c:	b538      	push	{r3, r4, r5, lr}
 8012a1e:	4d07      	ldr	r5, [pc, #28]	; (8012a3c <_read_r+0x20>)
 8012a20:	4604      	mov	r4, r0
 8012a22:	4608      	mov	r0, r1
 8012a24:	4611      	mov	r1, r2
 8012a26:	2200      	movs	r2, #0
 8012a28:	602a      	str	r2, [r5, #0]
 8012a2a:	461a      	mov	r2, r3
 8012a2c:	f7f2 fd88 	bl	8005540 <_read>
 8012a30:	1c43      	adds	r3, r0, #1
 8012a32:	d102      	bne.n	8012a3a <_read_r+0x1e>
 8012a34:	682b      	ldr	r3, [r5, #0]
 8012a36:	b103      	cbz	r3, 8012a3a <_read_r+0x1e>
 8012a38:	6023      	str	r3, [r4, #0]
 8012a3a:	bd38      	pop	{r3, r4, r5, pc}
 8012a3c:	20004bd8 	.word	0x20004bd8

08012a40 <_write_r>:
 8012a40:	b538      	push	{r3, r4, r5, lr}
 8012a42:	4d07      	ldr	r5, [pc, #28]	; (8012a60 <_write_r+0x20>)
 8012a44:	4604      	mov	r4, r0
 8012a46:	4608      	mov	r0, r1
 8012a48:	4611      	mov	r1, r2
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	602a      	str	r2, [r5, #0]
 8012a4e:	461a      	mov	r2, r3
 8012a50:	f7f2 fd93 	bl	800557a <_write>
 8012a54:	1c43      	adds	r3, r0, #1
 8012a56:	d102      	bne.n	8012a5e <_write_r+0x1e>
 8012a58:	682b      	ldr	r3, [r5, #0]
 8012a5a:	b103      	cbz	r3, 8012a5e <_write_r+0x1e>
 8012a5c:	6023      	str	r3, [r4, #0]
 8012a5e:	bd38      	pop	{r3, r4, r5, pc}
 8012a60:	20004bd8 	.word	0x20004bd8

08012a64 <__errno>:
 8012a64:	4b01      	ldr	r3, [pc, #4]	; (8012a6c <__errno+0x8>)
 8012a66:	6818      	ldr	r0, [r3, #0]
 8012a68:	4770      	bx	lr
 8012a6a:	bf00      	nop
 8012a6c:	20000070 	.word	0x20000070

08012a70 <__libc_init_array>:
 8012a70:	b570      	push	{r4, r5, r6, lr}
 8012a72:	4d0d      	ldr	r5, [pc, #52]	; (8012aa8 <__libc_init_array+0x38>)
 8012a74:	4c0d      	ldr	r4, [pc, #52]	; (8012aac <__libc_init_array+0x3c>)
 8012a76:	1b64      	subs	r4, r4, r5
 8012a78:	10a4      	asrs	r4, r4, #2
 8012a7a:	2600      	movs	r6, #0
 8012a7c:	42a6      	cmp	r6, r4
 8012a7e:	d109      	bne.n	8012a94 <__libc_init_array+0x24>
 8012a80:	4d0b      	ldr	r5, [pc, #44]	; (8012ab0 <__libc_init_array+0x40>)
 8012a82:	4c0c      	ldr	r4, [pc, #48]	; (8012ab4 <__libc_init_array+0x44>)
 8012a84:	f005 f8ae 	bl	8017be4 <_init>
 8012a88:	1b64      	subs	r4, r4, r5
 8012a8a:	10a4      	asrs	r4, r4, #2
 8012a8c:	2600      	movs	r6, #0
 8012a8e:	42a6      	cmp	r6, r4
 8012a90:	d105      	bne.n	8012a9e <__libc_init_array+0x2e>
 8012a92:	bd70      	pop	{r4, r5, r6, pc}
 8012a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a98:	4798      	blx	r3
 8012a9a:	3601      	adds	r6, #1
 8012a9c:	e7ee      	b.n	8012a7c <__libc_init_array+0xc>
 8012a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012aa2:	4798      	blx	r3
 8012aa4:	3601      	adds	r6, #1
 8012aa6:	e7f2      	b.n	8012a8e <__libc_init_array+0x1e>
 8012aa8:	080185c8 	.word	0x080185c8
 8012aac:	080185c8 	.word	0x080185c8
 8012ab0:	080185c8 	.word	0x080185c8
 8012ab4:	080185cc 	.word	0x080185cc

08012ab8 <__retarget_lock_init_recursive>:
 8012ab8:	4770      	bx	lr

08012aba <__retarget_lock_acquire_recursive>:
 8012aba:	4770      	bx	lr

08012abc <__retarget_lock_release_recursive>:
 8012abc:	4770      	bx	lr

08012abe <memcpy>:
 8012abe:	440a      	add	r2, r1
 8012ac0:	4291      	cmp	r1, r2
 8012ac2:	f100 33ff 	add.w	r3, r0, #4294967295
 8012ac6:	d100      	bne.n	8012aca <memcpy+0xc>
 8012ac8:	4770      	bx	lr
 8012aca:	b510      	push	{r4, lr}
 8012acc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ad0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012ad4:	4291      	cmp	r1, r2
 8012ad6:	d1f9      	bne.n	8012acc <memcpy+0xe>
 8012ad8:	bd10      	pop	{r4, pc}
	...

08012adc <nanf>:
 8012adc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012ae4 <nanf+0x8>
 8012ae0:	4770      	bx	lr
 8012ae2:	bf00      	nop
 8012ae4:	7fc00000 	.word	0x7fc00000

08012ae8 <quorem>:
 8012ae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aec:	6903      	ldr	r3, [r0, #16]
 8012aee:	690c      	ldr	r4, [r1, #16]
 8012af0:	42a3      	cmp	r3, r4
 8012af2:	4607      	mov	r7, r0
 8012af4:	db7e      	blt.n	8012bf4 <quorem+0x10c>
 8012af6:	3c01      	subs	r4, #1
 8012af8:	f101 0814 	add.w	r8, r1, #20
 8012afc:	f100 0514 	add.w	r5, r0, #20
 8012b00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012b04:	9301      	str	r3, [sp, #4]
 8012b06:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012b0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012b0e:	3301      	adds	r3, #1
 8012b10:	429a      	cmp	r2, r3
 8012b12:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012b16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012b1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8012b1e:	d331      	bcc.n	8012b84 <quorem+0x9c>
 8012b20:	f04f 0e00 	mov.w	lr, #0
 8012b24:	4640      	mov	r0, r8
 8012b26:	46ac      	mov	ip, r5
 8012b28:	46f2      	mov	sl, lr
 8012b2a:	f850 2b04 	ldr.w	r2, [r0], #4
 8012b2e:	b293      	uxth	r3, r2
 8012b30:	fb06 e303 	mla	r3, r6, r3, lr
 8012b34:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012b38:	0c1a      	lsrs	r2, r3, #16
 8012b3a:	b29b      	uxth	r3, r3
 8012b3c:	ebaa 0303 	sub.w	r3, sl, r3
 8012b40:	f8dc a000 	ldr.w	sl, [ip]
 8012b44:	fa13 f38a 	uxtah	r3, r3, sl
 8012b48:	fb06 220e 	mla	r2, r6, lr, r2
 8012b4c:	9300      	str	r3, [sp, #0]
 8012b4e:	9b00      	ldr	r3, [sp, #0]
 8012b50:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012b54:	b292      	uxth	r2, r2
 8012b56:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012b5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012b5e:	f8bd 3000 	ldrh.w	r3, [sp]
 8012b62:	4581      	cmp	r9, r0
 8012b64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012b68:	f84c 3b04 	str.w	r3, [ip], #4
 8012b6c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012b70:	d2db      	bcs.n	8012b2a <quorem+0x42>
 8012b72:	f855 300b 	ldr.w	r3, [r5, fp]
 8012b76:	b92b      	cbnz	r3, 8012b84 <quorem+0x9c>
 8012b78:	9b01      	ldr	r3, [sp, #4]
 8012b7a:	3b04      	subs	r3, #4
 8012b7c:	429d      	cmp	r5, r3
 8012b7e:	461a      	mov	r2, r3
 8012b80:	d32c      	bcc.n	8012bdc <quorem+0xf4>
 8012b82:	613c      	str	r4, [r7, #16]
 8012b84:	4638      	mov	r0, r7
 8012b86:	f001 f9ef 	bl	8013f68 <__mcmp>
 8012b8a:	2800      	cmp	r0, #0
 8012b8c:	db22      	blt.n	8012bd4 <quorem+0xec>
 8012b8e:	3601      	adds	r6, #1
 8012b90:	4629      	mov	r1, r5
 8012b92:	2000      	movs	r0, #0
 8012b94:	f858 2b04 	ldr.w	r2, [r8], #4
 8012b98:	f8d1 c000 	ldr.w	ip, [r1]
 8012b9c:	b293      	uxth	r3, r2
 8012b9e:	1ac3      	subs	r3, r0, r3
 8012ba0:	0c12      	lsrs	r2, r2, #16
 8012ba2:	fa13 f38c 	uxtah	r3, r3, ip
 8012ba6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012baa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012bae:	b29b      	uxth	r3, r3
 8012bb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012bb4:	45c1      	cmp	r9, r8
 8012bb6:	f841 3b04 	str.w	r3, [r1], #4
 8012bba:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012bbe:	d2e9      	bcs.n	8012b94 <quorem+0xac>
 8012bc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012bc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012bc8:	b922      	cbnz	r2, 8012bd4 <quorem+0xec>
 8012bca:	3b04      	subs	r3, #4
 8012bcc:	429d      	cmp	r5, r3
 8012bce:	461a      	mov	r2, r3
 8012bd0:	d30a      	bcc.n	8012be8 <quorem+0x100>
 8012bd2:	613c      	str	r4, [r7, #16]
 8012bd4:	4630      	mov	r0, r6
 8012bd6:	b003      	add	sp, #12
 8012bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bdc:	6812      	ldr	r2, [r2, #0]
 8012bde:	3b04      	subs	r3, #4
 8012be0:	2a00      	cmp	r2, #0
 8012be2:	d1ce      	bne.n	8012b82 <quorem+0x9a>
 8012be4:	3c01      	subs	r4, #1
 8012be6:	e7c9      	b.n	8012b7c <quorem+0x94>
 8012be8:	6812      	ldr	r2, [r2, #0]
 8012bea:	3b04      	subs	r3, #4
 8012bec:	2a00      	cmp	r2, #0
 8012bee:	d1f0      	bne.n	8012bd2 <quorem+0xea>
 8012bf0:	3c01      	subs	r4, #1
 8012bf2:	e7eb      	b.n	8012bcc <quorem+0xe4>
 8012bf4:	2000      	movs	r0, #0
 8012bf6:	e7ee      	b.n	8012bd6 <quorem+0xee>

08012bf8 <_dtoa_r>:
 8012bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bfc:	ed2d 8b04 	vpush	{d8-d9}
 8012c00:	69c5      	ldr	r5, [r0, #28]
 8012c02:	b093      	sub	sp, #76	; 0x4c
 8012c04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012c08:	ec57 6b10 	vmov	r6, r7, d0
 8012c0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012c10:	9107      	str	r1, [sp, #28]
 8012c12:	4604      	mov	r4, r0
 8012c14:	920a      	str	r2, [sp, #40]	; 0x28
 8012c16:	930d      	str	r3, [sp, #52]	; 0x34
 8012c18:	b975      	cbnz	r5, 8012c38 <_dtoa_r+0x40>
 8012c1a:	2010      	movs	r0, #16
 8012c1c:	f000 fe2a 	bl	8013874 <malloc>
 8012c20:	4602      	mov	r2, r0
 8012c22:	61e0      	str	r0, [r4, #28]
 8012c24:	b920      	cbnz	r0, 8012c30 <_dtoa_r+0x38>
 8012c26:	4bae      	ldr	r3, [pc, #696]	; (8012ee0 <_dtoa_r+0x2e8>)
 8012c28:	21ef      	movs	r1, #239	; 0xef
 8012c2a:	48ae      	ldr	r0, [pc, #696]	; (8012ee4 <_dtoa_r+0x2ec>)
 8012c2c:	f002 ffe8 	bl	8015c00 <__assert_func>
 8012c30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012c34:	6005      	str	r5, [r0, #0]
 8012c36:	60c5      	str	r5, [r0, #12]
 8012c38:	69e3      	ldr	r3, [r4, #28]
 8012c3a:	6819      	ldr	r1, [r3, #0]
 8012c3c:	b151      	cbz	r1, 8012c54 <_dtoa_r+0x5c>
 8012c3e:	685a      	ldr	r2, [r3, #4]
 8012c40:	604a      	str	r2, [r1, #4]
 8012c42:	2301      	movs	r3, #1
 8012c44:	4093      	lsls	r3, r2
 8012c46:	608b      	str	r3, [r1, #8]
 8012c48:	4620      	mov	r0, r4
 8012c4a:	f000 ff07 	bl	8013a5c <_Bfree>
 8012c4e:	69e3      	ldr	r3, [r4, #28]
 8012c50:	2200      	movs	r2, #0
 8012c52:	601a      	str	r2, [r3, #0]
 8012c54:	1e3b      	subs	r3, r7, #0
 8012c56:	bfbb      	ittet	lt
 8012c58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012c5c:	9303      	strlt	r3, [sp, #12]
 8012c5e:	2300      	movge	r3, #0
 8012c60:	2201      	movlt	r2, #1
 8012c62:	bfac      	ite	ge
 8012c64:	f8c8 3000 	strge.w	r3, [r8]
 8012c68:	f8c8 2000 	strlt.w	r2, [r8]
 8012c6c:	4b9e      	ldr	r3, [pc, #632]	; (8012ee8 <_dtoa_r+0x2f0>)
 8012c6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012c72:	ea33 0308 	bics.w	r3, r3, r8
 8012c76:	d11b      	bne.n	8012cb0 <_dtoa_r+0xb8>
 8012c78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012c7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8012c7e:	6013      	str	r3, [r2, #0]
 8012c80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8012c84:	4333      	orrs	r3, r6
 8012c86:	f000 8593 	beq.w	80137b0 <_dtoa_r+0xbb8>
 8012c8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c8c:	b963      	cbnz	r3, 8012ca8 <_dtoa_r+0xb0>
 8012c8e:	4b97      	ldr	r3, [pc, #604]	; (8012eec <_dtoa_r+0x2f4>)
 8012c90:	e027      	b.n	8012ce2 <_dtoa_r+0xea>
 8012c92:	4b97      	ldr	r3, [pc, #604]	; (8012ef0 <_dtoa_r+0x2f8>)
 8012c94:	9300      	str	r3, [sp, #0]
 8012c96:	3308      	adds	r3, #8
 8012c98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012c9a:	6013      	str	r3, [r2, #0]
 8012c9c:	9800      	ldr	r0, [sp, #0]
 8012c9e:	b013      	add	sp, #76	; 0x4c
 8012ca0:	ecbd 8b04 	vpop	{d8-d9}
 8012ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ca8:	4b90      	ldr	r3, [pc, #576]	; (8012eec <_dtoa_r+0x2f4>)
 8012caa:	9300      	str	r3, [sp, #0]
 8012cac:	3303      	adds	r3, #3
 8012cae:	e7f3      	b.n	8012c98 <_dtoa_r+0xa0>
 8012cb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	ec51 0b17 	vmov	r0, r1, d7
 8012cba:	eeb0 8a47 	vmov.f32	s16, s14
 8012cbe:	eef0 8a67 	vmov.f32	s17, s15
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	f7ed ff28 	bl	8000b18 <__aeabi_dcmpeq>
 8012cc8:	4681      	mov	r9, r0
 8012cca:	b160      	cbz	r0, 8012ce6 <_dtoa_r+0xee>
 8012ccc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012cce:	2301      	movs	r3, #1
 8012cd0:	6013      	str	r3, [r2, #0]
 8012cd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	f000 8568 	beq.w	80137aa <_dtoa_r+0xbb2>
 8012cda:	4b86      	ldr	r3, [pc, #536]	; (8012ef4 <_dtoa_r+0x2fc>)
 8012cdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012cde:	6013      	str	r3, [r2, #0]
 8012ce0:	3b01      	subs	r3, #1
 8012ce2:	9300      	str	r3, [sp, #0]
 8012ce4:	e7da      	b.n	8012c9c <_dtoa_r+0xa4>
 8012ce6:	aa10      	add	r2, sp, #64	; 0x40
 8012ce8:	a911      	add	r1, sp, #68	; 0x44
 8012cea:	4620      	mov	r0, r4
 8012cec:	eeb0 0a48 	vmov.f32	s0, s16
 8012cf0:	eef0 0a68 	vmov.f32	s1, s17
 8012cf4:	f001 fa4e 	bl	8014194 <__d2b>
 8012cf8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012cfc:	4682      	mov	sl, r0
 8012cfe:	2d00      	cmp	r5, #0
 8012d00:	d07f      	beq.n	8012e02 <_dtoa_r+0x20a>
 8012d02:	ee18 3a90 	vmov	r3, s17
 8012d06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012d0a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8012d0e:	ec51 0b18 	vmov	r0, r1, d8
 8012d12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012d16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012d1a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8012d1e:	4619      	mov	r1, r3
 8012d20:	2200      	movs	r2, #0
 8012d22:	4b75      	ldr	r3, [pc, #468]	; (8012ef8 <_dtoa_r+0x300>)
 8012d24:	f7ed fad8 	bl	80002d8 <__aeabi_dsub>
 8012d28:	a367      	add	r3, pc, #412	; (adr r3, 8012ec8 <_dtoa_r+0x2d0>)
 8012d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d2e:	f7ed fc8b 	bl	8000648 <__aeabi_dmul>
 8012d32:	a367      	add	r3, pc, #412	; (adr r3, 8012ed0 <_dtoa_r+0x2d8>)
 8012d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d38:	f7ed fad0 	bl	80002dc <__adddf3>
 8012d3c:	4606      	mov	r6, r0
 8012d3e:	4628      	mov	r0, r5
 8012d40:	460f      	mov	r7, r1
 8012d42:	f7ed fc17 	bl	8000574 <__aeabi_i2d>
 8012d46:	a364      	add	r3, pc, #400	; (adr r3, 8012ed8 <_dtoa_r+0x2e0>)
 8012d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d4c:	f7ed fc7c 	bl	8000648 <__aeabi_dmul>
 8012d50:	4602      	mov	r2, r0
 8012d52:	460b      	mov	r3, r1
 8012d54:	4630      	mov	r0, r6
 8012d56:	4639      	mov	r1, r7
 8012d58:	f7ed fac0 	bl	80002dc <__adddf3>
 8012d5c:	4606      	mov	r6, r0
 8012d5e:	460f      	mov	r7, r1
 8012d60:	f7ed ff22 	bl	8000ba8 <__aeabi_d2iz>
 8012d64:	2200      	movs	r2, #0
 8012d66:	4683      	mov	fp, r0
 8012d68:	2300      	movs	r3, #0
 8012d6a:	4630      	mov	r0, r6
 8012d6c:	4639      	mov	r1, r7
 8012d6e:	f7ed fedd 	bl	8000b2c <__aeabi_dcmplt>
 8012d72:	b148      	cbz	r0, 8012d88 <_dtoa_r+0x190>
 8012d74:	4658      	mov	r0, fp
 8012d76:	f7ed fbfd 	bl	8000574 <__aeabi_i2d>
 8012d7a:	4632      	mov	r2, r6
 8012d7c:	463b      	mov	r3, r7
 8012d7e:	f7ed fecb 	bl	8000b18 <__aeabi_dcmpeq>
 8012d82:	b908      	cbnz	r0, 8012d88 <_dtoa_r+0x190>
 8012d84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012d88:	f1bb 0f16 	cmp.w	fp, #22
 8012d8c:	d857      	bhi.n	8012e3e <_dtoa_r+0x246>
 8012d8e:	4b5b      	ldr	r3, [pc, #364]	; (8012efc <_dtoa_r+0x304>)
 8012d90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d98:	ec51 0b18 	vmov	r0, r1, d8
 8012d9c:	f7ed fec6 	bl	8000b2c <__aeabi_dcmplt>
 8012da0:	2800      	cmp	r0, #0
 8012da2:	d04e      	beq.n	8012e42 <_dtoa_r+0x24a>
 8012da4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012da8:	2300      	movs	r3, #0
 8012daa:	930c      	str	r3, [sp, #48]	; 0x30
 8012dac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012dae:	1b5b      	subs	r3, r3, r5
 8012db0:	1e5a      	subs	r2, r3, #1
 8012db2:	bf45      	ittet	mi
 8012db4:	f1c3 0301 	rsbmi	r3, r3, #1
 8012db8:	9305      	strmi	r3, [sp, #20]
 8012dba:	2300      	movpl	r3, #0
 8012dbc:	2300      	movmi	r3, #0
 8012dbe:	9206      	str	r2, [sp, #24]
 8012dc0:	bf54      	ite	pl
 8012dc2:	9305      	strpl	r3, [sp, #20]
 8012dc4:	9306      	strmi	r3, [sp, #24]
 8012dc6:	f1bb 0f00 	cmp.w	fp, #0
 8012dca:	db3c      	blt.n	8012e46 <_dtoa_r+0x24e>
 8012dcc:	9b06      	ldr	r3, [sp, #24]
 8012dce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012dd2:	445b      	add	r3, fp
 8012dd4:	9306      	str	r3, [sp, #24]
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	9308      	str	r3, [sp, #32]
 8012dda:	9b07      	ldr	r3, [sp, #28]
 8012ddc:	2b09      	cmp	r3, #9
 8012dde:	d868      	bhi.n	8012eb2 <_dtoa_r+0x2ba>
 8012de0:	2b05      	cmp	r3, #5
 8012de2:	bfc4      	itt	gt
 8012de4:	3b04      	subgt	r3, #4
 8012de6:	9307      	strgt	r3, [sp, #28]
 8012de8:	9b07      	ldr	r3, [sp, #28]
 8012dea:	f1a3 0302 	sub.w	r3, r3, #2
 8012dee:	bfcc      	ite	gt
 8012df0:	2500      	movgt	r5, #0
 8012df2:	2501      	movle	r5, #1
 8012df4:	2b03      	cmp	r3, #3
 8012df6:	f200 8085 	bhi.w	8012f04 <_dtoa_r+0x30c>
 8012dfa:	e8df f003 	tbb	[pc, r3]
 8012dfe:	3b2e      	.short	0x3b2e
 8012e00:	5839      	.short	0x5839
 8012e02:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012e06:	441d      	add	r5, r3
 8012e08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012e0c:	2b20      	cmp	r3, #32
 8012e0e:	bfc1      	itttt	gt
 8012e10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012e14:	fa08 f803 	lslgt.w	r8, r8, r3
 8012e18:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8012e1c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8012e20:	bfd6      	itet	le
 8012e22:	f1c3 0320 	rsble	r3, r3, #32
 8012e26:	ea48 0003 	orrgt.w	r0, r8, r3
 8012e2a:	fa06 f003 	lslle.w	r0, r6, r3
 8012e2e:	f7ed fb91 	bl	8000554 <__aeabi_ui2d>
 8012e32:	2201      	movs	r2, #1
 8012e34:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8012e38:	3d01      	subs	r5, #1
 8012e3a:	920e      	str	r2, [sp, #56]	; 0x38
 8012e3c:	e76f      	b.n	8012d1e <_dtoa_r+0x126>
 8012e3e:	2301      	movs	r3, #1
 8012e40:	e7b3      	b.n	8012daa <_dtoa_r+0x1b2>
 8012e42:	900c      	str	r0, [sp, #48]	; 0x30
 8012e44:	e7b2      	b.n	8012dac <_dtoa_r+0x1b4>
 8012e46:	9b05      	ldr	r3, [sp, #20]
 8012e48:	eba3 030b 	sub.w	r3, r3, fp
 8012e4c:	9305      	str	r3, [sp, #20]
 8012e4e:	f1cb 0300 	rsb	r3, fp, #0
 8012e52:	9308      	str	r3, [sp, #32]
 8012e54:	2300      	movs	r3, #0
 8012e56:	930b      	str	r3, [sp, #44]	; 0x2c
 8012e58:	e7bf      	b.n	8012dda <_dtoa_r+0x1e2>
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8012e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	dc52      	bgt.n	8012f0a <_dtoa_r+0x312>
 8012e64:	2301      	movs	r3, #1
 8012e66:	9301      	str	r3, [sp, #4]
 8012e68:	9304      	str	r3, [sp, #16]
 8012e6a:	461a      	mov	r2, r3
 8012e6c:	920a      	str	r2, [sp, #40]	; 0x28
 8012e6e:	e00b      	b.n	8012e88 <_dtoa_r+0x290>
 8012e70:	2301      	movs	r3, #1
 8012e72:	e7f3      	b.n	8012e5c <_dtoa_r+0x264>
 8012e74:	2300      	movs	r3, #0
 8012e76:	9309      	str	r3, [sp, #36]	; 0x24
 8012e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e7a:	445b      	add	r3, fp
 8012e7c:	9301      	str	r3, [sp, #4]
 8012e7e:	3301      	adds	r3, #1
 8012e80:	2b01      	cmp	r3, #1
 8012e82:	9304      	str	r3, [sp, #16]
 8012e84:	bfb8      	it	lt
 8012e86:	2301      	movlt	r3, #1
 8012e88:	69e0      	ldr	r0, [r4, #28]
 8012e8a:	2100      	movs	r1, #0
 8012e8c:	2204      	movs	r2, #4
 8012e8e:	f102 0614 	add.w	r6, r2, #20
 8012e92:	429e      	cmp	r6, r3
 8012e94:	d93d      	bls.n	8012f12 <_dtoa_r+0x31a>
 8012e96:	6041      	str	r1, [r0, #4]
 8012e98:	4620      	mov	r0, r4
 8012e9a:	f000 fd9f 	bl	80139dc <_Balloc>
 8012e9e:	9000      	str	r0, [sp, #0]
 8012ea0:	2800      	cmp	r0, #0
 8012ea2:	d139      	bne.n	8012f18 <_dtoa_r+0x320>
 8012ea4:	4b16      	ldr	r3, [pc, #88]	; (8012f00 <_dtoa_r+0x308>)
 8012ea6:	4602      	mov	r2, r0
 8012ea8:	f240 11af 	movw	r1, #431	; 0x1af
 8012eac:	e6bd      	b.n	8012c2a <_dtoa_r+0x32>
 8012eae:	2301      	movs	r3, #1
 8012eb0:	e7e1      	b.n	8012e76 <_dtoa_r+0x27e>
 8012eb2:	2501      	movs	r5, #1
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	9307      	str	r3, [sp, #28]
 8012eb8:	9509      	str	r5, [sp, #36]	; 0x24
 8012eba:	f04f 33ff 	mov.w	r3, #4294967295
 8012ebe:	9301      	str	r3, [sp, #4]
 8012ec0:	9304      	str	r3, [sp, #16]
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	2312      	movs	r3, #18
 8012ec6:	e7d1      	b.n	8012e6c <_dtoa_r+0x274>
 8012ec8:	636f4361 	.word	0x636f4361
 8012ecc:	3fd287a7 	.word	0x3fd287a7
 8012ed0:	8b60c8b3 	.word	0x8b60c8b3
 8012ed4:	3fc68a28 	.word	0x3fc68a28
 8012ed8:	509f79fb 	.word	0x509f79fb
 8012edc:	3fd34413 	.word	0x3fd34413
 8012ee0:	08018154 	.word	0x08018154
 8012ee4:	0801816b 	.word	0x0801816b
 8012ee8:	7ff00000 	.word	0x7ff00000
 8012eec:	08018150 	.word	0x08018150
 8012ef0:	08018147 	.word	0x08018147
 8012ef4:	080184a9 	.word	0x080184a9
 8012ef8:	3ff80000 	.word	0x3ff80000
 8012efc:	08018258 	.word	0x08018258
 8012f00:	080181c3 	.word	0x080181c3
 8012f04:	2301      	movs	r3, #1
 8012f06:	9309      	str	r3, [sp, #36]	; 0x24
 8012f08:	e7d7      	b.n	8012eba <_dtoa_r+0x2c2>
 8012f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f0c:	9301      	str	r3, [sp, #4]
 8012f0e:	9304      	str	r3, [sp, #16]
 8012f10:	e7ba      	b.n	8012e88 <_dtoa_r+0x290>
 8012f12:	3101      	adds	r1, #1
 8012f14:	0052      	lsls	r2, r2, #1
 8012f16:	e7ba      	b.n	8012e8e <_dtoa_r+0x296>
 8012f18:	69e3      	ldr	r3, [r4, #28]
 8012f1a:	9a00      	ldr	r2, [sp, #0]
 8012f1c:	601a      	str	r2, [r3, #0]
 8012f1e:	9b04      	ldr	r3, [sp, #16]
 8012f20:	2b0e      	cmp	r3, #14
 8012f22:	f200 80a8 	bhi.w	8013076 <_dtoa_r+0x47e>
 8012f26:	2d00      	cmp	r5, #0
 8012f28:	f000 80a5 	beq.w	8013076 <_dtoa_r+0x47e>
 8012f2c:	f1bb 0f00 	cmp.w	fp, #0
 8012f30:	dd38      	ble.n	8012fa4 <_dtoa_r+0x3ac>
 8012f32:	4bc0      	ldr	r3, [pc, #768]	; (8013234 <_dtoa_r+0x63c>)
 8012f34:	f00b 020f 	and.w	r2, fp, #15
 8012f38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012f3c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012f40:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012f44:	ea4f 182b 	mov.w	r8, fp, asr #4
 8012f48:	d019      	beq.n	8012f7e <_dtoa_r+0x386>
 8012f4a:	4bbb      	ldr	r3, [pc, #748]	; (8013238 <_dtoa_r+0x640>)
 8012f4c:	ec51 0b18 	vmov	r0, r1, d8
 8012f50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012f54:	f7ed fca2 	bl	800089c <__aeabi_ddiv>
 8012f58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f5c:	f008 080f 	and.w	r8, r8, #15
 8012f60:	2503      	movs	r5, #3
 8012f62:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013238 <_dtoa_r+0x640>
 8012f66:	f1b8 0f00 	cmp.w	r8, #0
 8012f6a:	d10a      	bne.n	8012f82 <_dtoa_r+0x38a>
 8012f6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f70:	4632      	mov	r2, r6
 8012f72:	463b      	mov	r3, r7
 8012f74:	f7ed fc92 	bl	800089c <__aeabi_ddiv>
 8012f78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f7c:	e02b      	b.n	8012fd6 <_dtoa_r+0x3de>
 8012f7e:	2502      	movs	r5, #2
 8012f80:	e7ef      	b.n	8012f62 <_dtoa_r+0x36a>
 8012f82:	f018 0f01 	tst.w	r8, #1
 8012f86:	d008      	beq.n	8012f9a <_dtoa_r+0x3a2>
 8012f88:	4630      	mov	r0, r6
 8012f8a:	4639      	mov	r1, r7
 8012f8c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012f90:	f7ed fb5a 	bl	8000648 <__aeabi_dmul>
 8012f94:	3501      	adds	r5, #1
 8012f96:	4606      	mov	r6, r0
 8012f98:	460f      	mov	r7, r1
 8012f9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012f9e:	f109 0908 	add.w	r9, r9, #8
 8012fa2:	e7e0      	b.n	8012f66 <_dtoa_r+0x36e>
 8012fa4:	f000 809f 	beq.w	80130e6 <_dtoa_r+0x4ee>
 8012fa8:	f1cb 0600 	rsb	r6, fp, #0
 8012fac:	4ba1      	ldr	r3, [pc, #644]	; (8013234 <_dtoa_r+0x63c>)
 8012fae:	4fa2      	ldr	r7, [pc, #648]	; (8013238 <_dtoa_r+0x640>)
 8012fb0:	f006 020f 	and.w	r2, r6, #15
 8012fb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fbc:	ec51 0b18 	vmov	r0, r1, d8
 8012fc0:	f7ed fb42 	bl	8000648 <__aeabi_dmul>
 8012fc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fc8:	1136      	asrs	r6, r6, #4
 8012fca:	2300      	movs	r3, #0
 8012fcc:	2502      	movs	r5, #2
 8012fce:	2e00      	cmp	r6, #0
 8012fd0:	d17e      	bne.n	80130d0 <_dtoa_r+0x4d8>
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d1d0      	bne.n	8012f78 <_dtoa_r+0x380>
 8012fd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012fd8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	f000 8084 	beq.w	80130ea <_dtoa_r+0x4f2>
 8012fe2:	4b96      	ldr	r3, [pc, #600]	; (801323c <_dtoa_r+0x644>)
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	4640      	mov	r0, r8
 8012fe8:	4649      	mov	r1, r9
 8012fea:	f7ed fd9f 	bl	8000b2c <__aeabi_dcmplt>
 8012fee:	2800      	cmp	r0, #0
 8012ff0:	d07b      	beq.n	80130ea <_dtoa_r+0x4f2>
 8012ff2:	9b04      	ldr	r3, [sp, #16]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d078      	beq.n	80130ea <_dtoa_r+0x4f2>
 8012ff8:	9b01      	ldr	r3, [sp, #4]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	dd39      	ble.n	8013072 <_dtoa_r+0x47a>
 8012ffe:	4b90      	ldr	r3, [pc, #576]	; (8013240 <_dtoa_r+0x648>)
 8013000:	2200      	movs	r2, #0
 8013002:	4640      	mov	r0, r8
 8013004:	4649      	mov	r1, r9
 8013006:	f7ed fb1f 	bl	8000648 <__aeabi_dmul>
 801300a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801300e:	9e01      	ldr	r6, [sp, #4]
 8013010:	f10b 37ff 	add.w	r7, fp, #4294967295
 8013014:	3501      	adds	r5, #1
 8013016:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801301a:	4628      	mov	r0, r5
 801301c:	f7ed faaa 	bl	8000574 <__aeabi_i2d>
 8013020:	4642      	mov	r2, r8
 8013022:	464b      	mov	r3, r9
 8013024:	f7ed fb10 	bl	8000648 <__aeabi_dmul>
 8013028:	4b86      	ldr	r3, [pc, #536]	; (8013244 <_dtoa_r+0x64c>)
 801302a:	2200      	movs	r2, #0
 801302c:	f7ed f956 	bl	80002dc <__adddf3>
 8013030:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013038:	9303      	str	r3, [sp, #12]
 801303a:	2e00      	cmp	r6, #0
 801303c:	d158      	bne.n	80130f0 <_dtoa_r+0x4f8>
 801303e:	4b82      	ldr	r3, [pc, #520]	; (8013248 <_dtoa_r+0x650>)
 8013040:	2200      	movs	r2, #0
 8013042:	4640      	mov	r0, r8
 8013044:	4649      	mov	r1, r9
 8013046:	f7ed f947 	bl	80002d8 <__aeabi_dsub>
 801304a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801304e:	4680      	mov	r8, r0
 8013050:	4689      	mov	r9, r1
 8013052:	f7ed fd89 	bl	8000b68 <__aeabi_dcmpgt>
 8013056:	2800      	cmp	r0, #0
 8013058:	f040 8296 	bne.w	8013588 <_dtoa_r+0x990>
 801305c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013060:	4640      	mov	r0, r8
 8013062:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013066:	4649      	mov	r1, r9
 8013068:	f7ed fd60 	bl	8000b2c <__aeabi_dcmplt>
 801306c:	2800      	cmp	r0, #0
 801306e:	f040 8289 	bne.w	8013584 <_dtoa_r+0x98c>
 8013072:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013076:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013078:	2b00      	cmp	r3, #0
 801307a:	f2c0 814e 	blt.w	801331a <_dtoa_r+0x722>
 801307e:	f1bb 0f0e 	cmp.w	fp, #14
 8013082:	f300 814a 	bgt.w	801331a <_dtoa_r+0x722>
 8013086:	4b6b      	ldr	r3, [pc, #428]	; (8013234 <_dtoa_r+0x63c>)
 8013088:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801308c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013092:	2b00      	cmp	r3, #0
 8013094:	f280 80dc 	bge.w	8013250 <_dtoa_r+0x658>
 8013098:	9b04      	ldr	r3, [sp, #16]
 801309a:	2b00      	cmp	r3, #0
 801309c:	f300 80d8 	bgt.w	8013250 <_dtoa_r+0x658>
 80130a0:	f040 826f 	bne.w	8013582 <_dtoa_r+0x98a>
 80130a4:	4b68      	ldr	r3, [pc, #416]	; (8013248 <_dtoa_r+0x650>)
 80130a6:	2200      	movs	r2, #0
 80130a8:	4640      	mov	r0, r8
 80130aa:	4649      	mov	r1, r9
 80130ac:	f7ed facc 	bl	8000648 <__aeabi_dmul>
 80130b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80130b4:	f7ed fd4e 	bl	8000b54 <__aeabi_dcmpge>
 80130b8:	9e04      	ldr	r6, [sp, #16]
 80130ba:	4637      	mov	r7, r6
 80130bc:	2800      	cmp	r0, #0
 80130be:	f040 8245 	bne.w	801354c <_dtoa_r+0x954>
 80130c2:	9d00      	ldr	r5, [sp, #0]
 80130c4:	2331      	movs	r3, #49	; 0x31
 80130c6:	f805 3b01 	strb.w	r3, [r5], #1
 80130ca:	f10b 0b01 	add.w	fp, fp, #1
 80130ce:	e241      	b.n	8013554 <_dtoa_r+0x95c>
 80130d0:	07f2      	lsls	r2, r6, #31
 80130d2:	d505      	bpl.n	80130e0 <_dtoa_r+0x4e8>
 80130d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80130d8:	f7ed fab6 	bl	8000648 <__aeabi_dmul>
 80130dc:	3501      	adds	r5, #1
 80130de:	2301      	movs	r3, #1
 80130e0:	1076      	asrs	r6, r6, #1
 80130e2:	3708      	adds	r7, #8
 80130e4:	e773      	b.n	8012fce <_dtoa_r+0x3d6>
 80130e6:	2502      	movs	r5, #2
 80130e8:	e775      	b.n	8012fd6 <_dtoa_r+0x3de>
 80130ea:	9e04      	ldr	r6, [sp, #16]
 80130ec:	465f      	mov	r7, fp
 80130ee:	e792      	b.n	8013016 <_dtoa_r+0x41e>
 80130f0:	9900      	ldr	r1, [sp, #0]
 80130f2:	4b50      	ldr	r3, [pc, #320]	; (8013234 <_dtoa_r+0x63c>)
 80130f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80130f8:	4431      	add	r1, r6
 80130fa:	9102      	str	r1, [sp, #8]
 80130fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80130fe:	eeb0 9a47 	vmov.f32	s18, s14
 8013102:	eef0 9a67 	vmov.f32	s19, s15
 8013106:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801310a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801310e:	2900      	cmp	r1, #0
 8013110:	d044      	beq.n	801319c <_dtoa_r+0x5a4>
 8013112:	494e      	ldr	r1, [pc, #312]	; (801324c <_dtoa_r+0x654>)
 8013114:	2000      	movs	r0, #0
 8013116:	f7ed fbc1 	bl	800089c <__aeabi_ddiv>
 801311a:	ec53 2b19 	vmov	r2, r3, d9
 801311e:	f7ed f8db 	bl	80002d8 <__aeabi_dsub>
 8013122:	9d00      	ldr	r5, [sp, #0]
 8013124:	ec41 0b19 	vmov	d9, r0, r1
 8013128:	4649      	mov	r1, r9
 801312a:	4640      	mov	r0, r8
 801312c:	f7ed fd3c 	bl	8000ba8 <__aeabi_d2iz>
 8013130:	4606      	mov	r6, r0
 8013132:	f7ed fa1f 	bl	8000574 <__aeabi_i2d>
 8013136:	4602      	mov	r2, r0
 8013138:	460b      	mov	r3, r1
 801313a:	4640      	mov	r0, r8
 801313c:	4649      	mov	r1, r9
 801313e:	f7ed f8cb 	bl	80002d8 <__aeabi_dsub>
 8013142:	3630      	adds	r6, #48	; 0x30
 8013144:	f805 6b01 	strb.w	r6, [r5], #1
 8013148:	ec53 2b19 	vmov	r2, r3, d9
 801314c:	4680      	mov	r8, r0
 801314e:	4689      	mov	r9, r1
 8013150:	f7ed fcec 	bl	8000b2c <__aeabi_dcmplt>
 8013154:	2800      	cmp	r0, #0
 8013156:	d164      	bne.n	8013222 <_dtoa_r+0x62a>
 8013158:	4642      	mov	r2, r8
 801315a:	464b      	mov	r3, r9
 801315c:	4937      	ldr	r1, [pc, #220]	; (801323c <_dtoa_r+0x644>)
 801315e:	2000      	movs	r0, #0
 8013160:	f7ed f8ba 	bl	80002d8 <__aeabi_dsub>
 8013164:	ec53 2b19 	vmov	r2, r3, d9
 8013168:	f7ed fce0 	bl	8000b2c <__aeabi_dcmplt>
 801316c:	2800      	cmp	r0, #0
 801316e:	f040 80b6 	bne.w	80132de <_dtoa_r+0x6e6>
 8013172:	9b02      	ldr	r3, [sp, #8]
 8013174:	429d      	cmp	r5, r3
 8013176:	f43f af7c 	beq.w	8013072 <_dtoa_r+0x47a>
 801317a:	4b31      	ldr	r3, [pc, #196]	; (8013240 <_dtoa_r+0x648>)
 801317c:	ec51 0b19 	vmov	r0, r1, d9
 8013180:	2200      	movs	r2, #0
 8013182:	f7ed fa61 	bl	8000648 <__aeabi_dmul>
 8013186:	4b2e      	ldr	r3, [pc, #184]	; (8013240 <_dtoa_r+0x648>)
 8013188:	ec41 0b19 	vmov	d9, r0, r1
 801318c:	2200      	movs	r2, #0
 801318e:	4640      	mov	r0, r8
 8013190:	4649      	mov	r1, r9
 8013192:	f7ed fa59 	bl	8000648 <__aeabi_dmul>
 8013196:	4680      	mov	r8, r0
 8013198:	4689      	mov	r9, r1
 801319a:	e7c5      	b.n	8013128 <_dtoa_r+0x530>
 801319c:	ec51 0b17 	vmov	r0, r1, d7
 80131a0:	f7ed fa52 	bl	8000648 <__aeabi_dmul>
 80131a4:	9b02      	ldr	r3, [sp, #8]
 80131a6:	9d00      	ldr	r5, [sp, #0]
 80131a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80131aa:	ec41 0b19 	vmov	d9, r0, r1
 80131ae:	4649      	mov	r1, r9
 80131b0:	4640      	mov	r0, r8
 80131b2:	f7ed fcf9 	bl	8000ba8 <__aeabi_d2iz>
 80131b6:	4606      	mov	r6, r0
 80131b8:	f7ed f9dc 	bl	8000574 <__aeabi_i2d>
 80131bc:	3630      	adds	r6, #48	; 0x30
 80131be:	4602      	mov	r2, r0
 80131c0:	460b      	mov	r3, r1
 80131c2:	4640      	mov	r0, r8
 80131c4:	4649      	mov	r1, r9
 80131c6:	f7ed f887 	bl	80002d8 <__aeabi_dsub>
 80131ca:	f805 6b01 	strb.w	r6, [r5], #1
 80131ce:	9b02      	ldr	r3, [sp, #8]
 80131d0:	429d      	cmp	r5, r3
 80131d2:	4680      	mov	r8, r0
 80131d4:	4689      	mov	r9, r1
 80131d6:	f04f 0200 	mov.w	r2, #0
 80131da:	d124      	bne.n	8013226 <_dtoa_r+0x62e>
 80131dc:	4b1b      	ldr	r3, [pc, #108]	; (801324c <_dtoa_r+0x654>)
 80131de:	ec51 0b19 	vmov	r0, r1, d9
 80131e2:	f7ed f87b 	bl	80002dc <__adddf3>
 80131e6:	4602      	mov	r2, r0
 80131e8:	460b      	mov	r3, r1
 80131ea:	4640      	mov	r0, r8
 80131ec:	4649      	mov	r1, r9
 80131ee:	f7ed fcbb 	bl	8000b68 <__aeabi_dcmpgt>
 80131f2:	2800      	cmp	r0, #0
 80131f4:	d173      	bne.n	80132de <_dtoa_r+0x6e6>
 80131f6:	ec53 2b19 	vmov	r2, r3, d9
 80131fa:	4914      	ldr	r1, [pc, #80]	; (801324c <_dtoa_r+0x654>)
 80131fc:	2000      	movs	r0, #0
 80131fe:	f7ed f86b 	bl	80002d8 <__aeabi_dsub>
 8013202:	4602      	mov	r2, r0
 8013204:	460b      	mov	r3, r1
 8013206:	4640      	mov	r0, r8
 8013208:	4649      	mov	r1, r9
 801320a:	f7ed fc8f 	bl	8000b2c <__aeabi_dcmplt>
 801320e:	2800      	cmp	r0, #0
 8013210:	f43f af2f 	beq.w	8013072 <_dtoa_r+0x47a>
 8013214:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013216:	1e6b      	subs	r3, r5, #1
 8013218:	930f      	str	r3, [sp, #60]	; 0x3c
 801321a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801321e:	2b30      	cmp	r3, #48	; 0x30
 8013220:	d0f8      	beq.n	8013214 <_dtoa_r+0x61c>
 8013222:	46bb      	mov	fp, r7
 8013224:	e04a      	b.n	80132bc <_dtoa_r+0x6c4>
 8013226:	4b06      	ldr	r3, [pc, #24]	; (8013240 <_dtoa_r+0x648>)
 8013228:	f7ed fa0e 	bl	8000648 <__aeabi_dmul>
 801322c:	4680      	mov	r8, r0
 801322e:	4689      	mov	r9, r1
 8013230:	e7bd      	b.n	80131ae <_dtoa_r+0x5b6>
 8013232:	bf00      	nop
 8013234:	08018258 	.word	0x08018258
 8013238:	08018230 	.word	0x08018230
 801323c:	3ff00000 	.word	0x3ff00000
 8013240:	40240000 	.word	0x40240000
 8013244:	401c0000 	.word	0x401c0000
 8013248:	40140000 	.word	0x40140000
 801324c:	3fe00000 	.word	0x3fe00000
 8013250:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013254:	9d00      	ldr	r5, [sp, #0]
 8013256:	4642      	mov	r2, r8
 8013258:	464b      	mov	r3, r9
 801325a:	4630      	mov	r0, r6
 801325c:	4639      	mov	r1, r7
 801325e:	f7ed fb1d 	bl	800089c <__aeabi_ddiv>
 8013262:	f7ed fca1 	bl	8000ba8 <__aeabi_d2iz>
 8013266:	9001      	str	r0, [sp, #4]
 8013268:	f7ed f984 	bl	8000574 <__aeabi_i2d>
 801326c:	4642      	mov	r2, r8
 801326e:	464b      	mov	r3, r9
 8013270:	f7ed f9ea 	bl	8000648 <__aeabi_dmul>
 8013274:	4602      	mov	r2, r0
 8013276:	460b      	mov	r3, r1
 8013278:	4630      	mov	r0, r6
 801327a:	4639      	mov	r1, r7
 801327c:	f7ed f82c 	bl	80002d8 <__aeabi_dsub>
 8013280:	9e01      	ldr	r6, [sp, #4]
 8013282:	9f04      	ldr	r7, [sp, #16]
 8013284:	3630      	adds	r6, #48	; 0x30
 8013286:	f805 6b01 	strb.w	r6, [r5], #1
 801328a:	9e00      	ldr	r6, [sp, #0]
 801328c:	1bae      	subs	r6, r5, r6
 801328e:	42b7      	cmp	r7, r6
 8013290:	4602      	mov	r2, r0
 8013292:	460b      	mov	r3, r1
 8013294:	d134      	bne.n	8013300 <_dtoa_r+0x708>
 8013296:	f7ed f821 	bl	80002dc <__adddf3>
 801329a:	4642      	mov	r2, r8
 801329c:	464b      	mov	r3, r9
 801329e:	4606      	mov	r6, r0
 80132a0:	460f      	mov	r7, r1
 80132a2:	f7ed fc61 	bl	8000b68 <__aeabi_dcmpgt>
 80132a6:	b9c8      	cbnz	r0, 80132dc <_dtoa_r+0x6e4>
 80132a8:	4642      	mov	r2, r8
 80132aa:	464b      	mov	r3, r9
 80132ac:	4630      	mov	r0, r6
 80132ae:	4639      	mov	r1, r7
 80132b0:	f7ed fc32 	bl	8000b18 <__aeabi_dcmpeq>
 80132b4:	b110      	cbz	r0, 80132bc <_dtoa_r+0x6c4>
 80132b6:	9b01      	ldr	r3, [sp, #4]
 80132b8:	07db      	lsls	r3, r3, #31
 80132ba:	d40f      	bmi.n	80132dc <_dtoa_r+0x6e4>
 80132bc:	4651      	mov	r1, sl
 80132be:	4620      	mov	r0, r4
 80132c0:	f000 fbcc 	bl	8013a5c <_Bfree>
 80132c4:	2300      	movs	r3, #0
 80132c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80132c8:	702b      	strb	r3, [r5, #0]
 80132ca:	f10b 0301 	add.w	r3, fp, #1
 80132ce:	6013      	str	r3, [r2, #0]
 80132d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	f43f ace2 	beq.w	8012c9c <_dtoa_r+0xa4>
 80132d8:	601d      	str	r5, [r3, #0]
 80132da:	e4df      	b.n	8012c9c <_dtoa_r+0xa4>
 80132dc:	465f      	mov	r7, fp
 80132de:	462b      	mov	r3, r5
 80132e0:	461d      	mov	r5, r3
 80132e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80132e6:	2a39      	cmp	r2, #57	; 0x39
 80132e8:	d106      	bne.n	80132f8 <_dtoa_r+0x700>
 80132ea:	9a00      	ldr	r2, [sp, #0]
 80132ec:	429a      	cmp	r2, r3
 80132ee:	d1f7      	bne.n	80132e0 <_dtoa_r+0x6e8>
 80132f0:	9900      	ldr	r1, [sp, #0]
 80132f2:	2230      	movs	r2, #48	; 0x30
 80132f4:	3701      	adds	r7, #1
 80132f6:	700a      	strb	r2, [r1, #0]
 80132f8:	781a      	ldrb	r2, [r3, #0]
 80132fa:	3201      	adds	r2, #1
 80132fc:	701a      	strb	r2, [r3, #0]
 80132fe:	e790      	b.n	8013222 <_dtoa_r+0x62a>
 8013300:	4ba3      	ldr	r3, [pc, #652]	; (8013590 <_dtoa_r+0x998>)
 8013302:	2200      	movs	r2, #0
 8013304:	f7ed f9a0 	bl	8000648 <__aeabi_dmul>
 8013308:	2200      	movs	r2, #0
 801330a:	2300      	movs	r3, #0
 801330c:	4606      	mov	r6, r0
 801330e:	460f      	mov	r7, r1
 8013310:	f7ed fc02 	bl	8000b18 <__aeabi_dcmpeq>
 8013314:	2800      	cmp	r0, #0
 8013316:	d09e      	beq.n	8013256 <_dtoa_r+0x65e>
 8013318:	e7d0      	b.n	80132bc <_dtoa_r+0x6c4>
 801331a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801331c:	2a00      	cmp	r2, #0
 801331e:	f000 80ca 	beq.w	80134b6 <_dtoa_r+0x8be>
 8013322:	9a07      	ldr	r2, [sp, #28]
 8013324:	2a01      	cmp	r2, #1
 8013326:	f300 80ad 	bgt.w	8013484 <_dtoa_r+0x88c>
 801332a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801332c:	2a00      	cmp	r2, #0
 801332e:	f000 80a5 	beq.w	801347c <_dtoa_r+0x884>
 8013332:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013336:	9e08      	ldr	r6, [sp, #32]
 8013338:	9d05      	ldr	r5, [sp, #20]
 801333a:	9a05      	ldr	r2, [sp, #20]
 801333c:	441a      	add	r2, r3
 801333e:	9205      	str	r2, [sp, #20]
 8013340:	9a06      	ldr	r2, [sp, #24]
 8013342:	2101      	movs	r1, #1
 8013344:	441a      	add	r2, r3
 8013346:	4620      	mov	r0, r4
 8013348:	9206      	str	r2, [sp, #24]
 801334a:	f000 fc87 	bl	8013c5c <__i2b>
 801334e:	4607      	mov	r7, r0
 8013350:	b165      	cbz	r5, 801336c <_dtoa_r+0x774>
 8013352:	9b06      	ldr	r3, [sp, #24]
 8013354:	2b00      	cmp	r3, #0
 8013356:	dd09      	ble.n	801336c <_dtoa_r+0x774>
 8013358:	42ab      	cmp	r3, r5
 801335a:	9a05      	ldr	r2, [sp, #20]
 801335c:	bfa8      	it	ge
 801335e:	462b      	movge	r3, r5
 8013360:	1ad2      	subs	r2, r2, r3
 8013362:	9205      	str	r2, [sp, #20]
 8013364:	9a06      	ldr	r2, [sp, #24]
 8013366:	1aed      	subs	r5, r5, r3
 8013368:	1ad3      	subs	r3, r2, r3
 801336a:	9306      	str	r3, [sp, #24]
 801336c:	9b08      	ldr	r3, [sp, #32]
 801336e:	b1f3      	cbz	r3, 80133ae <_dtoa_r+0x7b6>
 8013370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013372:	2b00      	cmp	r3, #0
 8013374:	f000 80a3 	beq.w	80134be <_dtoa_r+0x8c6>
 8013378:	2e00      	cmp	r6, #0
 801337a:	dd10      	ble.n	801339e <_dtoa_r+0x7a6>
 801337c:	4639      	mov	r1, r7
 801337e:	4632      	mov	r2, r6
 8013380:	4620      	mov	r0, r4
 8013382:	f000 fd2b 	bl	8013ddc <__pow5mult>
 8013386:	4652      	mov	r2, sl
 8013388:	4601      	mov	r1, r0
 801338a:	4607      	mov	r7, r0
 801338c:	4620      	mov	r0, r4
 801338e:	f000 fc7b 	bl	8013c88 <__multiply>
 8013392:	4651      	mov	r1, sl
 8013394:	4680      	mov	r8, r0
 8013396:	4620      	mov	r0, r4
 8013398:	f000 fb60 	bl	8013a5c <_Bfree>
 801339c:	46c2      	mov	sl, r8
 801339e:	9b08      	ldr	r3, [sp, #32]
 80133a0:	1b9a      	subs	r2, r3, r6
 80133a2:	d004      	beq.n	80133ae <_dtoa_r+0x7b6>
 80133a4:	4651      	mov	r1, sl
 80133a6:	4620      	mov	r0, r4
 80133a8:	f000 fd18 	bl	8013ddc <__pow5mult>
 80133ac:	4682      	mov	sl, r0
 80133ae:	2101      	movs	r1, #1
 80133b0:	4620      	mov	r0, r4
 80133b2:	f000 fc53 	bl	8013c5c <__i2b>
 80133b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	4606      	mov	r6, r0
 80133bc:	f340 8081 	ble.w	80134c2 <_dtoa_r+0x8ca>
 80133c0:	461a      	mov	r2, r3
 80133c2:	4601      	mov	r1, r0
 80133c4:	4620      	mov	r0, r4
 80133c6:	f000 fd09 	bl	8013ddc <__pow5mult>
 80133ca:	9b07      	ldr	r3, [sp, #28]
 80133cc:	2b01      	cmp	r3, #1
 80133ce:	4606      	mov	r6, r0
 80133d0:	dd7a      	ble.n	80134c8 <_dtoa_r+0x8d0>
 80133d2:	f04f 0800 	mov.w	r8, #0
 80133d6:	6933      	ldr	r3, [r6, #16]
 80133d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80133dc:	6918      	ldr	r0, [r3, #16]
 80133de:	f000 fbef 	bl	8013bc0 <__hi0bits>
 80133e2:	f1c0 0020 	rsb	r0, r0, #32
 80133e6:	9b06      	ldr	r3, [sp, #24]
 80133e8:	4418      	add	r0, r3
 80133ea:	f010 001f 	ands.w	r0, r0, #31
 80133ee:	f000 8094 	beq.w	801351a <_dtoa_r+0x922>
 80133f2:	f1c0 0320 	rsb	r3, r0, #32
 80133f6:	2b04      	cmp	r3, #4
 80133f8:	f340 8085 	ble.w	8013506 <_dtoa_r+0x90e>
 80133fc:	9b05      	ldr	r3, [sp, #20]
 80133fe:	f1c0 001c 	rsb	r0, r0, #28
 8013402:	4403      	add	r3, r0
 8013404:	9305      	str	r3, [sp, #20]
 8013406:	9b06      	ldr	r3, [sp, #24]
 8013408:	4403      	add	r3, r0
 801340a:	4405      	add	r5, r0
 801340c:	9306      	str	r3, [sp, #24]
 801340e:	9b05      	ldr	r3, [sp, #20]
 8013410:	2b00      	cmp	r3, #0
 8013412:	dd05      	ble.n	8013420 <_dtoa_r+0x828>
 8013414:	4651      	mov	r1, sl
 8013416:	461a      	mov	r2, r3
 8013418:	4620      	mov	r0, r4
 801341a:	f000 fd39 	bl	8013e90 <__lshift>
 801341e:	4682      	mov	sl, r0
 8013420:	9b06      	ldr	r3, [sp, #24]
 8013422:	2b00      	cmp	r3, #0
 8013424:	dd05      	ble.n	8013432 <_dtoa_r+0x83a>
 8013426:	4631      	mov	r1, r6
 8013428:	461a      	mov	r2, r3
 801342a:	4620      	mov	r0, r4
 801342c:	f000 fd30 	bl	8013e90 <__lshift>
 8013430:	4606      	mov	r6, r0
 8013432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013434:	2b00      	cmp	r3, #0
 8013436:	d072      	beq.n	801351e <_dtoa_r+0x926>
 8013438:	4631      	mov	r1, r6
 801343a:	4650      	mov	r0, sl
 801343c:	f000 fd94 	bl	8013f68 <__mcmp>
 8013440:	2800      	cmp	r0, #0
 8013442:	da6c      	bge.n	801351e <_dtoa_r+0x926>
 8013444:	2300      	movs	r3, #0
 8013446:	4651      	mov	r1, sl
 8013448:	220a      	movs	r2, #10
 801344a:	4620      	mov	r0, r4
 801344c:	f000 fb28 	bl	8013aa0 <__multadd>
 8013450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013452:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013456:	4682      	mov	sl, r0
 8013458:	2b00      	cmp	r3, #0
 801345a:	f000 81b0 	beq.w	80137be <_dtoa_r+0xbc6>
 801345e:	2300      	movs	r3, #0
 8013460:	4639      	mov	r1, r7
 8013462:	220a      	movs	r2, #10
 8013464:	4620      	mov	r0, r4
 8013466:	f000 fb1b 	bl	8013aa0 <__multadd>
 801346a:	9b01      	ldr	r3, [sp, #4]
 801346c:	2b00      	cmp	r3, #0
 801346e:	4607      	mov	r7, r0
 8013470:	f300 8096 	bgt.w	80135a0 <_dtoa_r+0x9a8>
 8013474:	9b07      	ldr	r3, [sp, #28]
 8013476:	2b02      	cmp	r3, #2
 8013478:	dc59      	bgt.n	801352e <_dtoa_r+0x936>
 801347a:	e091      	b.n	80135a0 <_dtoa_r+0x9a8>
 801347c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801347e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013482:	e758      	b.n	8013336 <_dtoa_r+0x73e>
 8013484:	9b04      	ldr	r3, [sp, #16]
 8013486:	1e5e      	subs	r6, r3, #1
 8013488:	9b08      	ldr	r3, [sp, #32]
 801348a:	42b3      	cmp	r3, r6
 801348c:	bfbf      	itttt	lt
 801348e:	9b08      	ldrlt	r3, [sp, #32]
 8013490:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8013492:	9608      	strlt	r6, [sp, #32]
 8013494:	1af3      	sublt	r3, r6, r3
 8013496:	bfb4      	ite	lt
 8013498:	18d2      	addlt	r2, r2, r3
 801349a:	1b9e      	subge	r6, r3, r6
 801349c:	9b04      	ldr	r3, [sp, #16]
 801349e:	bfbc      	itt	lt
 80134a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80134a2:	2600      	movlt	r6, #0
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	bfb7      	itett	lt
 80134a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80134ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80134b0:	1a9d      	sublt	r5, r3, r2
 80134b2:	2300      	movlt	r3, #0
 80134b4:	e741      	b.n	801333a <_dtoa_r+0x742>
 80134b6:	9e08      	ldr	r6, [sp, #32]
 80134b8:	9d05      	ldr	r5, [sp, #20]
 80134ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80134bc:	e748      	b.n	8013350 <_dtoa_r+0x758>
 80134be:	9a08      	ldr	r2, [sp, #32]
 80134c0:	e770      	b.n	80133a4 <_dtoa_r+0x7ac>
 80134c2:	9b07      	ldr	r3, [sp, #28]
 80134c4:	2b01      	cmp	r3, #1
 80134c6:	dc19      	bgt.n	80134fc <_dtoa_r+0x904>
 80134c8:	9b02      	ldr	r3, [sp, #8]
 80134ca:	b9bb      	cbnz	r3, 80134fc <_dtoa_r+0x904>
 80134cc:	9b03      	ldr	r3, [sp, #12]
 80134ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80134d2:	b99b      	cbnz	r3, 80134fc <_dtoa_r+0x904>
 80134d4:	9b03      	ldr	r3, [sp, #12]
 80134d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80134da:	0d1b      	lsrs	r3, r3, #20
 80134dc:	051b      	lsls	r3, r3, #20
 80134de:	b183      	cbz	r3, 8013502 <_dtoa_r+0x90a>
 80134e0:	9b05      	ldr	r3, [sp, #20]
 80134e2:	3301      	adds	r3, #1
 80134e4:	9305      	str	r3, [sp, #20]
 80134e6:	9b06      	ldr	r3, [sp, #24]
 80134e8:	3301      	adds	r3, #1
 80134ea:	9306      	str	r3, [sp, #24]
 80134ec:	f04f 0801 	mov.w	r8, #1
 80134f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	f47f af6f 	bne.w	80133d6 <_dtoa_r+0x7de>
 80134f8:	2001      	movs	r0, #1
 80134fa:	e774      	b.n	80133e6 <_dtoa_r+0x7ee>
 80134fc:	f04f 0800 	mov.w	r8, #0
 8013500:	e7f6      	b.n	80134f0 <_dtoa_r+0x8f8>
 8013502:	4698      	mov	r8, r3
 8013504:	e7f4      	b.n	80134f0 <_dtoa_r+0x8f8>
 8013506:	d082      	beq.n	801340e <_dtoa_r+0x816>
 8013508:	9a05      	ldr	r2, [sp, #20]
 801350a:	331c      	adds	r3, #28
 801350c:	441a      	add	r2, r3
 801350e:	9205      	str	r2, [sp, #20]
 8013510:	9a06      	ldr	r2, [sp, #24]
 8013512:	441a      	add	r2, r3
 8013514:	441d      	add	r5, r3
 8013516:	9206      	str	r2, [sp, #24]
 8013518:	e779      	b.n	801340e <_dtoa_r+0x816>
 801351a:	4603      	mov	r3, r0
 801351c:	e7f4      	b.n	8013508 <_dtoa_r+0x910>
 801351e:	9b04      	ldr	r3, [sp, #16]
 8013520:	2b00      	cmp	r3, #0
 8013522:	dc37      	bgt.n	8013594 <_dtoa_r+0x99c>
 8013524:	9b07      	ldr	r3, [sp, #28]
 8013526:	2b02      	cmp	r3, #2
 8013528:	dd34      	ble.n	8013594 <_dtoa_r+0x99c>
 801352a:	9b04      	ldr	r3, [sp, #16]
 801352c:	9301      	str	r3, [sp, #4]
 801352e:	9b01      	ldr	r3, [sp, #4]
 8013530:	b963      	cbnz	r3, 801354c <_dtoa_r+0x954>
 8013532:	4631      	mov	r1, r6
 8013534:	2205      	movs	r2, #5
 8013536:	4620      	mov	r0, r4
 8013538:	f000 fab2 	bl	8013aa0 <__multadd>
 801353c:	4601      	mov	r1, r0
 801353e:	4606      	mov	r6, r0
 8013540:	4650      	mov	r0, sl
 8013542:	f000 fd11 	bl	8013f68 <__mcmp>
 8013546:	2800      	cmp	r0, #0
 8013548:	f73f adbb 	bgt.w	80130c2 <_dtoa_r+0x4ca>
 801354c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801354e:	9d00      	ldr	r5, [sp, #0]
 8013550:	ea6f 0b03 	mvn.w	fp, r3
 8013554:	f04f 0800 	mov.w	r8, #0
 8013558:	4631      	mov	r1, r6
 801355a:	4620      	mov	r0, r4
 801355c:	f000 fa7e 	bl	8013a5c <_Bfree>
 8013560:	2f00      	cmp	r7, #0
 8013562:	f43f aeab 	beq.w	80132bc <_dtoa_r+0x6c4>
 8013566:	f1b8 0f00 	cmp.w	r8, #0
 801356a:	d005      	beq.n	8013578 <_dtoa_r+0x980>
 801356c:	45b8      	cmp	r8, r7
 801356e:	d003      	beq.n	8013578 <_dtoa_r+0x980>
 8013570:	4641      	mov	r1, r8
 8013572:	4620      	mov	r0, r4
 8013574:	f000 fa72 	bl	8013a5c <_Bfree>
 8013578:	4639      	mov	r1, r7
 801357a:	4620      	mov	r0, r4
 801357c:	f000 fa6e 	bl	8013a5c <_Bfree>
 8013580:	e69c      	b.n	80132bc <_dtoa_r+0x6c4>
 8013582:	2600      	movs	r6, #0
 8013584:	4637      	mov	r7, r6
 8013586:	e7e1      	b.n	801354c <_dtoa_r+0x954>
 8013588:	46bb      	mov	fp, r7
 801358a:	4637      	mov	r7, r6
 801358c:	e599      	b.n	80130c2 <_dtoa_r+0x4ca>
 801358e:	bf00      	nop
 8013590:	40240000 	.word	0x40240000
 8013594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013596:	2b00      	cmp	r3, #0
 8013598:	f000 80c8 	beq.w	801372c <_dtoa_r+0xb34>
 801359c:	9b04      	ldr	r3, [sp, #16]
 801359e:	9301      	str	r3, [sp, #4]
 80135a0:	2d00      	cmp	r5, #0
 80135a2:	dd05      	ble.n	80135b0 <_dtoa_r+0x9b8>
 80135a4:	4639      	mov	r1, r7
 80135a6:	462a      	mov	r2, r5
 80135a8:	4620      	mov	r0, r4
 80135aa:	f000 fc71 	bl	8013e90 <__lshift>
 80135ae:	4607      	mov	r7, r0
 80135b0:	f1b8 0f00 	cmp.w	r8, #0
 80135b4:	d05b      	beq.n	801366e <_dtoa_r+0xa76>
 80135b6:	6879      	ldr	r1, [r7, #4]
 80135b8:	4620      	mov	r0, r4
 80135ba:	f000 fa0f 	bl	80139dc <_Balloc>
 80135be:	4605      	mov	r5, r0
 80135c0:	b928      	cbnz	r0, 80135ce <_dtoa_r+0x9d6>
 80135c2:	4b83      	ldr	r3, [pc, #524]	; (80137d0 <_dtoa_r+0xbd8>)
 80135c4:	4602      	mov	r2, r0
 80135c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80135ca:	f7ff bb2e 	b.w	8012c2a <_dtoa_r+0x32>
 80135ce:	693a      	ldr	r2, [r7, #16]
 80135d0:	3202      	adds	r2, #2
 80135d2:	0092      	lsls	r2, r2, #2
 80135d4:	f107 010c 	add.w	r1, r7, #12
 80135d8:	300c      	adds	r0, #12
 80135da:	f7ff fa70 	bl	8012abe <memcpy>
 80135de:	2201      	movs	r2, #1
 80135e0:	4629      	mov	r1, r5
 80135e2:	4620      	mov	r0, r4
 80135e4:	f000 fc54 	bl	8013e90 <__lshift>
 80135e8:	9b00      	ldr	r3, [sp, #0]
 80135ea:	3301      	adds	r3, #1
 80135ec:	9304      	str	r3, [sp, #16]
 80135ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80135f2:	4413      	add	r3, r2
 80135f4:	9308      	str	r3, [sp, #32]
 80135f6:	9b02      	ldr	r3, [sp, #8]
 80135f8:	f003 0301 	and.w	r3, r3, #1
 80135fc:	46b8      	mov	r8, r7
 80135fe:	9306      	str	r3, [sp, #24]
 8013600:	4607      	mov	r7, r0
 8013602:	9b04      	ldr	r3, [sp, #16]
 8013604:	4631      	mov	r1, r6
 8013606:	3b01      	subs	r3, #1
 8013608:	4650      	mov	r0, sl
 801360a:	9301      	str	r3, [sp, #4]
 801360c:	f7ff fa6c 	bl	8012ae8 <quorem>
 8013610:	4641      	mov	r1, r8
 8013612:	9002      	str	r0, [sp, #8]
 8013614:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013618:	4650      	mov	r0, sl
 801361a:	f000 fca5 	bl	8013f68 <__mcmp>
 801361e:	463a      	mov	r2, r7
 8013620:	9005      	str	r0, [sp, #20]
 8013622:	4631      	mov	r1, r6
 8013624:	4620      	mov	r0, r4
 8013626:	f000 fcbb 	bl	8013fa0 <__mdiff>
 801362a:	68c2      	ldr	r2, [r0, #12]
 801362c:	4605      	mov	r5, r0
 801362e:	bb02      	cbnz	r2, 8013672 <_dtoa_r+0xa7a>
 8013630:	4601      	mov	r1, r0
 8013632:	4650      	mov	r0, sl
 8013634:	f000 fc98 	bl	8013f68 <__mcmp>
 8013638:	4602      	mov	r2, r0
 801363a:	4629      	mov	r1, r5
 801363c:	4620      	mov	r0, r4
 801363e:	9209      	str	r2, [sp, #36]	; 0x24
 8013640:	f000 fa0c 	bl	8013a5c <_Bfree>
 8013644:	9b07      	ldr	r3, [sp, #28]
 8013646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013648:	9d04      	ldr	r5, [sp, #16]
 801364a:	ea43 0102 	orr.w	r1, r3, r2
 801364e:	9b06      	ldr	r3, [sp, #24]
 8013650:	4319      	orrs	r1, r3
 8013652:	d110      	bne.n	8013676 <_dtoa_r+0xa7e>
 8013654:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013658:	d029      	beq.n	80136ae <_dtoa_r+0xab6>
 801365a:	9b05      	ldr	r3, [sp, #20]
 801365c:	2b00      	cmp	r3, #0
 801365e:	dd02      	ble.n	8013666 <_dtoa_r+0xa6e>
 8013660:	9b02      	ldr	r3, [sp, #8]
 8013662:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8013666:	9b01      	ldr	r3, [sp, #4]
 8013668:	f883 9000 	strb.w	r9, [r3]
 801366c:	e774      	b.n	8013558 <_dtoa_r+0x960>
 801366e:	4638      	mov	r0, r7
 8013670:	e7ba      	b.n	80135e8 <_dtoa_r+0x9f0>
 8013672:	2201      	movs	r2, #1
 8013674:	e7e1      	b.n	801363a <_dtoa_r+0xa42>
 8013676:	9b05      	ldr	r3, [sp, #20]
 8013678:	2b00      	cmp	r3, #0
 801367a:	db04      	blt.n	8013686 <_dtoa_r+0xa8e>
 801367c:	9907      	ldr	r1, [sp, #28]
 801367e:	430b      	orrs	r3, r1
 8013680:	9906      	ldr	r1, [sp, #24]
 8013682:	430b      	orrs	r3, r1
 8013684:	d120      	bne.n	80136c8 <_dtoa_r+0xad0>
 8013686:	2a00      	cmp	r2, #0
 8013688:	dded      	ble.n	8013666 <_dtoa_r+0xa6e>
 801368a:	4651      	mov	r1, sl
 801368c:	2201      	movs	r2, #1
 801368e:	4620      	mov	r0, r4
 8013690:	f000 fbfe 	bl	8013e90 <__lshift>
 8013694:	4631      	mov	r1, r6
 8013696:	4682      	mov	sl, r0
 8013698:	f000 fc66 	bl	8013f68 <__mcmp>
 801369c:	2800      	cmp	r0, #0
 801369e:	dc03      	bgt.n	80136a8 <_dtoa_r+0xab0>
 80136a0:	d1e1      	bne.n	8013666 <_dtoa_r+0xa6e>
 80136a2:	f019 0f01 	tst.w	r9, #1
 80136a6:	d0de      	beq.n	8013666 <_dtoa_r+0xa6e>
 80136a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80136ac:	d1d8      	bne.n	8013660 <_dtoa_r+0xa68>
 80136ae:	9a01      	ldr	r2, [sp, #4]
 80136b0:	2339      	movs	r3, #57	; 0x39
 80136b2:	7013      	strb	r3, [r2, #0]
 80136b4:	462b      	mov	r3, r5
 80136b6:	461d      	mov	r5, r3
 80136b8:	3b01      	subs	r3, #1
 80136ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80136be:	2a39      	cmp	r2, #57	; 0x39
 80136c0:	d06c      	beq.n	801379c <_dtoa_r+0xba4>
 80136c2:	3201      	adds	r2, #1
 80136c4:	701a      	strb	r2, [r3, #0]
 80136c6:	e747      	b.n	8013558 <_dtoa_r+0x960>
 80136c8:	2a00      	cmp	r2, #0
 80136ca:	dd07      	ble.n	80136dc <_dtoa_r+0xae4>
 80136cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80136d0:	d0ed      	beq.n	80136ae <_dtoa_r+0xab6>
 80136d2:	9a01      	ldr	r2, [sp, #4]
 80136d4:	f109 0301 	add.w	r3, r9, #1
 80136d8:	7013      	strb	r3, [r2, #0]
 80136da:	e73d      	b.n	8013558 <_dtoa_r+0x960>
 80136dc:	9b04      	ldr	r3, [sp, #16]
 80136de:	9a08      	ldr	r2, [sp, #32]
 80136e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80136e4:	4293      	cmp	r3, r2
 80136e6:	d043      	beq.n	8013770 <_dtoa_r+0xb78>
 80136e8:	4651      	mov	r1, sl
 80136ea:	2300      	movs	r3, #0
 80136ec:	220a      	movs	r2, #10
 80136ee:	4620      	mov	r0, r4
 80136f0:	f000 f9d6 	bl	8013aa0 <__multadd>
 80136f4:	45b8      	cmp	r8, r7
 80136f6:	4682      	mov	sl, r0
 80136f8:	f04f 0300 	mov.w	r3, #0
 80136fc:	f04f 020a 	mov.w	r2, #10
 8013700:	4641      	mov	r1, r8
 8013702:	4620      	mov	r0, r4
 8013704:	d107      	bne.n	8013716 <_dtoa_r+0xb1e>
 8013706:	f000 f9cb 	bl	8013aa0 <__multadd>
 801370a:	4680      	mov	r8, r0
 801370c:	4607      	mov	r7, r0
 801370e:	9b04      	ldr	r3, [sp, #16]
 8013710:	3301      	adds	r3, #1
 8013712:	9304      	str	r3, [sp, #16]
 8013714:	e775      	b.n	8013602 <_dtoa_r+0xa0a>
 8013716:	f000 f9c3 	bl	8013aa0 <__multadd>
 801371a:	4639      	mov	r1, r7
 801371c:	4680      	mov	r8, r0
 801371e:	2300      	movs	r3, #0
 8013720:	220a      	movs	r2, #10
 8013722:	4620      	mov	r0, r4
 8013724:	f000 f9bc 	bl	8013aa0 <__multadd>
 8013728:	4607      	mov	r7, r0
 801372a:	e7f0      	b.n	801370e <_dtoa_r+0xb16>
 801372c:	9b04      	ldr	r3, [sp, #16]
 801372e:	9301      	str	r3, [sp, #4]
 8013730:	9d00      	ldr	r5, [sp, #0]
 8013732:	4631      	mov	r1, r6
 8013734:	4650      	mov	r0, sl
 8013736:	f7ff f9d7 	bl	8012ae8 <quorem>
 801373a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801373e:	9b00      	ldr	r3, [sp, #0]
 8013740:	f805 9b01 	strb.w	r9, [r5], #1
 8013744:	1aea      	subs	r2, r5, r3
 8013746:	9b01      	ldr	r3, [sp, #4]
 8013748:	4293      	cmp	r3, r2
 801374a:	dd07      	ble.n	801375c <_dtoa_r+0xb64>
 801374c:	4651      	mov	r1, sl
 801374e:	2300      	movs	r3, #0
 8013750:	220a      	movs	r2, #10
 8013752:	4620      	mov	r0, r4
 8013754:	f000 f9a4 	bl	8013aa0 <__multadd>
 8013758:	4682      	mov	sl, r0
 801375a:	e7ea      	b.n	8013732 <_dtoa_r+0xb3a>
 801375c:	9b01      	ldr	r3, [sp, #4]
 801375e:	2b00      	cmp	r3, #0
 8013760:	bfc8      	it	gt
 8013762:	461d      	movgt	r5, r3
 8013764:	9b00      	ldr	r3, [sp, #0]
 8013766:	bfd8      	it	le
 8013768:	2501      	movle	r5, #1
 801376a:	441d      	add	r5, r3
 801376c:	f04f 0800 	mov.w	r8, #0
 8013770:	4651      	mov	r1, sl
 8013772:	2201      	movs	r2, #1
 8013774:	4620      	mov	r0, r4
 8013776:	f000 fb8b 	bl	8013e90 <__lshift>
 801377a:	4631      	mov	r1, r6
 801377c:	4682      	mov	sl, r0
 801377e:	f000 fbf3 	bl	8013f68 <__mcmp>
 8013782:	2800      	cmp	r0, #0
 8013784:	dc96      	bgt.n	80136b4 <_dtoa_r+0xabc>
 8013786:	d102      	bne.n	801378e <_dtoa_r+0xb96>
 8013788:	f019 0f01 	tst.w	r9, #1
 801378c:	d192      	bne.n	80136b4 <_dtoa_r+0xabc>
 801378e:	462b      	mov	r3, r5
 8013790:	461d      	mov	r5, r3
 8013792:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013796:	2a30      	cmp	r2, #48	; 0x30
 8013798:	d0fa      	beq.n	8013790 <_dtoa_r+0xb98>
 801379a:	e6dd      	b.n	8013558 <_dtoa_r+0x960>
 801379c:	9a00      	ldr	r2, [sp, #0]
 801379e:	429a      	cmp	r2, r3
 80137a0:	d189      	bne.n	80136b6 <_dtoa_r+0xabe>
 80137a2:	f10b 0b01 	add.w	fp, fp, #1
 80137a6:	2331      	movs	r3, #49	; 0x31
 80137a8:	e796      	b.n	80136d8 <_dtoa_r+0xae0>
 80137aa:	4b0a      	ldr	r3, [pc, #40]	; (80137d4 <_dtoa_r+0xbdc>)
 80137ac:	f7ff ba99 	b.w	8012ce2 <_dtoa_r+0xea>
 80137b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	f47f aa6d 	bne.w	8012c92 <_dtoa_r+0x9a>
 80137b8:	4b07      	ldr	r3, [pc, #28]	; (80137d8 <_dtoa_r+0xbe0>)
 80137ba:	f7ff ba92 	b.w	8012ce2 <_dtoa_r+0xea>
 80137be:	9b01      	ldr	r3, [sp, #4]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	dcb5      	bgt.n	8013730 <_dtoa_r+0xb38>
 80137c4:	9b07      	ldr	r3, [sp, #28]
 80137c6:	2b02      	cmp	r3, #2
 80137c8:	f73f aeb1 	bgt.w	801352e <_dtoa_r+0x936>
 80137cc:	e7b0      	b.n	8013730 <_dtoa_r+0xb38>
 80137ce:	bf00      	nop
 80137d0:	080181c3 	.word	0x080181c3
 80137d4:	080184a8 	.word	0x080184a8
 80137d8:	08018147 	.word	0x08018147

080137dc <_free_r>:
 80137dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80137de:	2900      	cmp	r1, #0
 80137e0:	d044      	beq.n	801386c <_free_r+0x90>
 80137e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137e6:	9001      	str	r0, [sp, #4]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	f1a1 0404 	sub.w	r4, r1, #4
 80137ee:	bfb8      	it	lt
 80137f0:	18e4      	addlt	r4, r4, r3
 80137f2:	f000 f8e7 	bl	80139c4 <__malloc_lock>
 80137f6:	4a1e      	ldr	r2, [pc, #120]	; (8013870 <_free_r+0x94>)
 80137f8:	9801      	ldr	r0, [sp, #4]
 80137fa:	6813      	ldr	r3, [r2, #0]
 80137fc:	b933      	cbnz	r3, 801380c <_free_r+0x30>
 80137fe:	6063      	str	r3, [r4, #4]
 8013800:	6014      	str	r4, [r2, #0]
 8013802:	b003      	add	sp, #12
 8013804:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013808:	f000 b8e2 	b.w	80139d0 <__malloc_unlock>
 801380c:	42a3      	cmp	r3, r4
 801380e:	d908      	bls.n	8013822 <_free_r+0x46>
 8013810:	6825      	ldr	r5, [r4, #0]
 8013812:	1961      	adds	r1, r4, r5
 8013814:	428b      	cmp	r3, r1
 8013816:	bf01      	itttt	eq
 8013818:	6819      	ldreq	r1, [r3, #0]
 801381a:	685b      	ldreq	r3, [r3, #4]
 801381c:	1949      	addeq	r1, r1, r5
 801381e:	6021      	streq	r1, [r4, #0]
 8013820:	e7ed      	b.n	80137fe <_free_r+0x22>
 8013822:	461a      	mov	r2, r3
 8013824:	685b      	ldr	r3, [r3, #4]
 8013826:	b10b      	cbz	r3, 801382c <_free_r+0x50>
 8013828:	42a3      	cmp	r3, r4
 801382a:	d9fa      	bls.n	8013822 <_free_r+0x46>
 801382c:	6811      	ldr	r1, [r2, #0]
 801382e:	1855      	adds	r5, r2, r1
 8013830:	42a5      	cmp	r5, r4
 8013832:	d10b      	bne.n	801384c <_free_r+0x70>
 8013834:	6824      	ldr	r4, [r4, #0]
 8013836:	4421      	add	r1, r4
 8013838:	1854      	adds	r4, r2, r1
 801383a:	42a3      	cmp	r3, r4
 801383c:	6011      	str	r1, [r2, #0]
 801383e:	d1e0      	bne.n	8013802 <_free_r+0x26>
 8013840:	681c      	ldr	r4, [r3, #0]
 8013842:	685b      	ldr	r3, [r3, #4]
 8013844:	6053      	str	r3, [r2, #4]
 8013846:	440c      	add	r4, r1
 8013848:	6014      	str	r4, [r2, #0]
 801384a:	e7da      	b.n	8013802 <_free_r+0x26>
 801384c:	d902      	bls.n	8013854 <_free_r+0x78>
 801384e:	230c      	movs	r3, #12
 8013850:	6003      	str	r3, [r0, #0]
 8013852:	e7d6      	b.n	8013802 <_free_r+0x26>
 8013854:	6825      	ldr	r5, [r4, #0]
 8013856:	1961      	adds	r1, r4, r5
 8013858:	428b      	cmp	r3, r1
 801385a:	bf04      	itt	eq
 801385c:	6819      	ldreq	r1, [r3, #0]
 801385e:	685b      	ldreq	r3, [r3, #4]
 8013860:	6063      	str	r3, [r4, #4]
 8013862:	bf04      	itt	eq
 8013864:	1949      	addeq	r1, r1, r5
 8013866:	6021      	streq	r1, [r4, #0]
 8013868:	6054      	str	r4, [r2, #4]
 801386a:	e7ca      	b.n	8013802 <_free_r+0x26>
 801386c:	b003      	add	sp, #12
 801386e:	bd30      	pop	{r4, r5, pc}
 8013870:	20004be0 	.word	0x20004be0

08013874 <malloc>:
 8013874:	4b02      	ldr	r3, [pc, #8]	; (8013880 <malloc+0xc>)
 8013876:	4601      	mov	r1, r0
 8013878:	6818      	ldr	r0, [r3, #0]
 801387a:	f000 b823 	b.w	80138c4 <_malloc_r>
 801387e:	bf00      	nop
 8013880:	20000070 	.word	0x20000070

08013884 <sbrk_aligned>:
 8013884:	b570      	push	{r4, r5, r6, lr}
 8013886:	4e0e      	ldr	r6, [pc, #56]	; (80138c0 <sbrk_aligned+0x3c>)
 8013888:	460c      	mov	r4, r1
 801388a:	6831      	ldr	r1, [r6, #0]
 801388c:	4605      	mov	r5, r0
 801388e:	b911      	cbnz	r1, 8013896 <sbrk_aligned+0x12>
 8013890:	f002 f99c 	bl	8015bcc <_sbrk_r>
 8013894:	6030      	str	r0, [r6, #0]
 8013896:	4621      	mov	r1, r4
 8013898:	4628      	mov	r0, r5
 801389a:	f002 f997 	bl	8015bcc <_sbrk_r>
 801389e:	1c43      	adds	r3, r0, #1
 80138a0:	d00a      	beq.n	80138b8 <sbrk_aligned+0x34>
 80138a2:	1cc4      	adds	r4, r0, #3
 80138a4:	f024 0403 	bic.w	r4, r4, #3
 80138a8:	42a0      	cmp	r0, r4
 80138aa:	d007      	beq.n	80138bc <sbrk_aligned+0x38>
 80138ac:	1a21      	subs	r1, r4, r0
 80138ae:	4628      	mov	r0, r5
 80138b0:	f002 f98c 	bl	8015bcc <_sbrk_r>
 80138b4:	3001      	adds	r0, #1
 80138b6:	d101      	bne.n	80138bc <sbrk_aligned+0x38>
 80138b8:	f04f 34ff 	mov.w	r4, #4294967295
 80138bc:	4620      	mov	r0, r4
 80138be:	bd70      	pop	{r4, r5, r6, pc}
 80138c0:	20004be4 	.word	0x20004be4

080138c4 <_malloc_r>:
 80138c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138c8:	1ccd      	adds	r5, r1, #3
 80138ca:	f025 0503 	bic.w	r5, r5, #3
 80138ce:	3508      	adds	r5, #8
 80138d0:	2d0c      	cmp	r5, #12
 80138d2:	bf38      	it	cc
 80138d4:	250c      	movcc	r5, #12
 80138d6:	2d00      	cmp	r5, #0
 80138d8:	4607      	mov	r7, r0
 80138da:	db01      	blt.n	80138e0 <_malloc_r+0x1c>
 80138dc:	42a9      	cmp	r1, r5
 80138de:	d905      	bls.n	80138ec <_malloc_r+0x28>
 80138e0:	230c      	movs	r3, #12
 80138e2:	603b      	str	r3, [r7, #0]
 80138e4:	2600      	movs	r6, #0
 80138e6:	4630      	mov	r0, r6
 80138e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80139c0 <_malloc_r+0xfc>
 80138f0:	f000 f868 	bl	80139c4 <__malloc_lock>
 80138f4:	f8d8 3000 	ldr.w	r3, [r8]
 80138f8:	461c      	mov	r4, r3
 80138fa:	bb5c      	cbnz	r4, 8013954 <_malloc_r+0x90>
 80138fc:	4629      	mov	r1, r5
 80138fe:	4638      	mov	r0, r7
 8013900:	f7ff ffc0 	bl	8013884 <sbrk_aligned>
 8013904:	1c43      	adds	r3, r0, #1
 8013906:	4604      	mov	r4, r0
 8013908:	d155      	bne.n	80139b6 <_malloc_r+0xf2>
 801390a:	f8d8 4000 	ldr.w	r4, [r8]
 801390e:	4626      	mov	r6, r4
 8013910:	2e00      	cmp	r6, #0
 8013912:	d145      	bne.n	80139a0 <_malloc_r+0xdc>
 8013914:	2c00      	cmp	r4, #0
 8013916:	d048      	beq.n	80139aa <_malloc_r+0xe6>
 8013918:	6823      	ldr	r3, [r4, #0]
 801391a:	4631      	mov	r1, r6
 801391c:	4638      	mov	r0, r7
 801391e:	eb04 0903 	add.w	r9, r4, r3
 8013922:	f002 f953 	bl	8015bcc <_sbrk_r>
 8013926:	4581      	cmp	r9, r0
 8013928:	d13f      	bne.n	80139aa <_malloc_r+0xe6>
 801392a:	6821      	ldr	r1, [r4, #0]
 801392c:	1a6d      	subs	r5, r5, r1
 801392e:	4629      	mov	r1, r5
 8013930:	4638      	mov	r0, r7
 8013932:	f7ff ffa7 	bl	8013884 <sbrk_aligned>
 8013936:	3001      	adds	r0, #1
 8013938:	d037      	beq.n	80139aa <_malloc_r+0xe6>
 801393a:	6823      	ldr	r3, [r4, #0]
 801393c:	442b      	add	r3, r5
 801393e:	6023      	str	r3, [r4, #0]
 8013940:	f8d8 3000 	ldr.w	r3, [r8]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d038      	beq.n	80139ba <_malloc_r+0xf6>
 8013948:	685a      	ldr	r2, [r3, #4]
 801394a:	42a2      	cmp	r2, r4
 801394c:	d12b      	bne.n	80139a6 <_malloc_r+0xe2>
 801394e:	2200      	movs	r2, #0
 8013950:	605a      	str	r2, [r3, #4]
 8013952:	e00f      	b.n	8013974 <_malloc_r+0xb0>
 8013954:	6822      	ldr	r2, [r4, #0]
 8013956:	1b52      	subs	r2, r2, r5
 8013958:	d41f      	bmi.n	801399a <_malloc_r+0xd6>
 801395a:	2a0b      	cmp	r2, #11
 801395c:	d917      	bls.n	801398e <_malloc_r+0xca>
 801395e:	1961      	adds	r1, r4, r5
 8013960:	42a3      	cmp	r3, r4
 8013962:	6025      	str	r5, [r4, #0]
 8013964:	bf18      	it	ne
 8013966:	6059      	strne	r1, [r3, #4]
 8013968:	6863      	ldr	r3, [r4, #4]
 801396a:	bf08      	it	eq
 801396c:	f8c8 1000 	streq.w	r1, [r8]
 8013970:	5162      	str	r2, [r4, r5]
 8013972:	604b      	str	r3, [r1, #4]
 8013974:	4638      	mov	r0, r7
 8013976:	f104 060b 	add.w	r6, r4, #11
 801397a:	f000 f829 	bl	80139d0 <__malloc_unlock>
 801397e:	f026 0607 	bic.w	r6, r6, #7
 8013982:	1d23      	adds	r3, r4, #4
 8013984:	1af2      	subs	r2, r6, r3
 8013986:	d0ae      	beq.n	80138e6 <_malloc_r+0x22>
 8013988:	1b9b      	subs	r3, r3, r6
 801398a:	50a3      	str	r3, [r4, r2]
 801398c:	e7ab      	b.n	80138e6 <_malloc_r+0x22>
 801398e:	42a3      	cmp	r3, r4
 8013990:	6862      	ldr	r2, [r4, #4]
 8013992:	d1dd      	bne.n	8013950 <_malloc_r+0x8c>
 8013994:	f8c8 2000 	str.w	r2, [r8]
 8013998:	e7ec      	b.n	8013974 <_malloc_r+0xb0>
 801399a:	4623      	mov	r3, r4
 801399c:	6864      	ldr	r4, [r4, #4]
 801399e:	e7ac      	b.n	80138fa <_malloc_r+0x36>
 80139a0:	4634      	mov	r4, r6
 80139a2:	6876      	ldr	r6, [r6, #4]
 80139a4:	e7b4      	b.n	8013910 <_malloc_r+0x4c>
 80139a6:	4613      	mov	r3, r2
 80139a8:	e7cc      	b.n	8013944 <_malloc_r+0x80>
 80139aa:	230c      	movs	r3, #12
 80139ac:	603b      	str	r3, [r7, #0]
 80139ae:	4638      	mov	r0, r7
 80139b0:	f000 f80e 	bl	80139d0 <__malloc_unlock>
 80139b4:	e797      	b.n	80138e6 <_malloc_r+0x22>
 80139b6:	6025      	str	r5, [r4, #0]
 80139b8:	e7dc      	b.n	8013974 <_malloc_r+0xb0>
 80139ba:	605b      	str	r3, [r3, #4]
 80139bc:	deff      	udf	#255	; 0xff
 80139be:	bf00      	nop
 80139c0:	20004be0 	.word	0x20004be0

080139c4 <__malloc_lock>:
 80139c4:	4801      	ldr	r0, [pc, #4]	; (80139cc <__malloc_lock+0x8>)
 80139c6:	f7ff b878 	b.w	8012aba <__retarget_lock_acquire_recursive>
 80139ca:	bf00      	nop
 80139cc:	20004bdc 	.word	0x20004bdc

080139d0 <__malloc_unlock>:
 80139d0:	4801      	ldr	r0, [pc, #4]	; (80139d8 <__malloc_unlock+0x8>)
 80139d2:	f7ff b873 	b.w	8012abc <__retarget_lock_release_recursive>
 80139d6:	bf00      	nop
 80139d8:	20004bdc 	.word	0x20004bdc

080139dc <_Balloc>:
 80139dc:	b570      	push	{r4, r5, r6, lr}
 80139de:	69c6      	ldr	r6, [r0, #28]
 80139e0:	4604      	mov	r4, r0
 80139e2:	460d      	mov	r5, r1
 80139e4:	b976      	cbnz	r6, 8013a04 <_Balloc+0x28>
 80139e6:	2010      	movs	r0, #16
 80139e8:	f7ff ff44 	bl	8013874 <malloc>
 80139ec:	4602      	mov	r2, r0
 80139ee:	61e0      	str	r0, [r4, #28]
 80139f0:	b920      	cbnz	r0, 80139fc <_Balloc+0x20>
 80139f2:	4b18      	ldr	r3, [pc, #96]	; (8013a54 <_Balloc+0x78>)
 80139f4:	4818      	ldr	r0, [pc, #96]	; (8013a58 <_Balloc+0x7c>)
 80139f6:	216b      	movs	r1, #107	; 0x6b
 80139f8:	f002 f902 	bl	8015c00 <__assert_func>
 80139fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013a00:	6006      	str	r6, [r0, #0]
 8013a02:	60c6      	str	r6, [r0, #12]
 8013a04:	69e6      	ldr	r6, [r4, #28]
 8013a06:	68f3      	ldr	r3, [r6, #12]
 8013a08:	b183      	cbz	r3, 8013a2c <_Balloc+0x50>
 8013a0a:	69e3      	ldr	r3, [r4, #28]
 8013a0c:	68db      	ldr	r3, [r3, #12]
 8013a0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013a12:	b9b8      	cbnz	r0, 8013a44 <_Balloc+0x68>
 8013a14:	2101      	movs	r1, #1
 8013a16:	fa01 f605 	lsl.w	r6, r1, r5
 8013a1a:	1d72      	adds	r2, r6, #5
 8013a1c:	0092      	lsls	r2, r2, #2
 8013a1e:	4620      	mov	r0, r4
 8013a20:	f002 f90c 	bl	8015c3c <_calloc_r>
 8013a24:	b160      	cbz	r0, 8013a40 <_Balloc+0x64>
 8013a26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013a2a:	e00e      	b.n	8013a4a <_Balloc+0x6e>
 8013a2c:	2221      	movs	r2, #33	; 0x21
 8013a2e:	2104      	movs	r1, #4
 8013a30:	4620      	mov	r0, r4
 8013a32:	f002 f903 	bl	8015c3c <_calloc_r>
 8013a36:	69e3      	ldr	r3, [r4, #28]
 8013a38:	60f0      	str	r0, [r6, #12]
 8013a3a:	68db      	ldr	r3, [r3, #12]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d1e4      	bne.n	8013a0a <_Balloc+0x2e>
 8013a40:	2000      	movs	r0, #0
 8013a42:	bd70      	pop	{r4, r5, r6, pc}
 8013a44:	6802      	ldr	r2, [r0, #0]
 8013a46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013a50:	e7f7      	b.n	8013a42 <_Balloc+0x66>
 8013a52:	bf00      	nop
 8013a54:	08018154 	.word	0x08018154
 8013a58:	080181d4 	.word	0x080181d4

08013a5c <_Bfree>:
 8013a5c:	b570      	push	{r4, r5, r6, lr}
 8013a5e:	69c6      	ldr	r6, [r0, #28]
 8013a60:	4605      	mov	r5, r0
 8013a62:	460c      	mov	r4, r1
 8013a64:	b976      	cbnz	r6, 8013a84 <_Bfree+0x28>
 8013a66:	2010      	movs	r0, #16
 8013a68:	f7ff ff04 	bl	8013874 <malloc>
 8013a6c:	4602      	mov	r2, r0
 8013a6e:	61e8      	str	r0, [r5, #28]
 8013a70:	b920      	cbnz	r0, 8013a7c <_Bfree+0x20>
 8013a72:	4b09      	ldr	r3, [pc, #36]	; (8013a98 <_Bfree+0x3c>)
 8013a74:	4809      	ldr	r0, [pc, #36]	; (8013a9c <_Bfree+0x40>)
 8013a76:	218f      	movs	r1, #143	; 0x8f
 8013a78:	f002 f8c2 	bl	8015c00 <__assert_func>
 8013a7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013a80:	6006      	str	r6, [r0, #0]
 8013a82:	60c6      	str	r6, [r0, #12]
 8013a84:	b13c      	cbz	r4, 8013a96 <_Bfree+0x3a>
 8013a86:	69eb      	ldr	r3, [r5, #28]
 8013a88:	6862      	ldr	r2, [r4, #4]
 8013a8a:	68db      	ldr	r3, [r3, #12]
 8013a8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013a90:	6021      	str	r1, [r4, #0]
 8013a92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013a96:	bd70      	pop	{r4, r5, r6, pc}
 8013a98:	08018154 	.word	0x08018154
 8013a9c:	080181d4 	.word	0x080181d4

08013aa0 <__multadd>:
 8013aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aa4:	690d      	ldr	r5, [r1, #16]
 8013aa6:	4607      	mov	r7, r0
 8013aa8:	460c      	mov	r4, r1
 8013aaa:	461e      	mov	r6, r3
 8013aac:	f101 0c14 	add.w	ip, r1, #20
 8013ab0:	2000      	movs	r0, #0
 8013ab2:	f8dc 3000 	ldr.w	r3, [ip]
 8013ab6:	b299      	uxth	r1, r3
 8013ab8:	fb02 6101 	mla	r1, r2, r1, r6
 8013abc:	0c1e      	lsrs	r6, r3, #16
 8013abe:	0c0b      	lsrs	r3, r1, #16
 8013ac0:	fb02 3306 	mla	r3, r2, r6, r3
 8013ac4:	b289      	uxth	r1, r1
 8013ac6:	3001      	adds	r0, #1
 8013ac8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013acc:	4285      	cmp	r5, r0
 8013ace:	f84c 1b04 	str.w	r1, [ip], #4
 8013ad2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013ad6:	dcec      	bgt.n	8013ab2 <__multadd+0x12>
 8013ad8:	b30e      	cbz	r6, 8013b1e <__multadd+0x7e>
 8013ada:	68a3      	ldr	r3, [r4, #8]
 8013adc:	42ab      	cmp	r3, r5
 8013ade:	dc19      	bgt.n	8013b14 <__multadd+0x74>
 8013ae0:	6861      	ldr	r1, [r4, #4]
 8013ae2:	4638      	mov	r0, r7
 8013ae4:	3101      	adds	r1, #1
 8013ae6:	f7ff ff79 	bl	80139dc <_Balloc>
 8013aea:	4680      	mov	r8, r0
 8013aec:	b928      	cbnz	r0, 8013afa <__multadd+0x5a>
 8013aee:	4602      	mov	r2, r0
 8013af0:	4b0c      	ldr	r3, [pc, #48]	; (8013b24 <__multadd+0x84>)
 8013af2:	480d      	ldr	r0, [pc, #52]	; (8013b28 <__multadd+0x88>)
 8013af4:	21ba      	movs	r1, #186	; 0xba
 8013af6:	f002 f883 	bl	8015c00 <__assert_func>
 8013afa:	6922      	ldr	r2, [r4, #16]
 8013afc:	3202      	adds	r2, #2
 8013afe:	f104 010c 	add.w	r1, r4, #12
 8013b02:	0092      	lsls	r2, r2, #2
 8013b04:	300c      	adds	r0, #12
 8013b06:	f7fe ffda 	bl	8012abe <memcpy>
 8013b0a:	4621      	mov	r1, r4
 8013b0c:	4638      	mov	r0, r7
 8013b0e:	f7ff ffa5 	bl	8013a5c <_Bfree>
 8013b12:	4644      	mov	r4, r8
 8013b14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013b18:	3501      	adds	r5, #1
 8013b1a:	615e      	str	r6, [r3, #20]
 8013b1c:	6125      	str	r5, [r4, #16]
 8013b1e:	4620      	mov	r0, r4
 8013b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b24:	080181c3 	.word	0x080181c3
 8013b28:	080181d4 	.word	0x080181d4

08013b2c <__s2b>:
 8013b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b30:	460c      	mov	r4, r1
 8013b32:	4615      	mov	r5, r2
 8013b34:	461f      	mov	r7, r3
 8013b36:	2209      	movs	r2, #9
 8013b38:	3308      	adds	r3, #8
 8013b3a:	4606      	mov	r6, r0
 8013b3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013b40:	2100      	movs	r1, #0
 8013b42:	2201      	movs	r2, #1
 8013b44:	429a      	cmp	r2, r3
 8013b46:	db09      	blt.n	8013b5c <__s2b+0x30>
 8013b48:	4630      	mov	r0, r6
 8013b4a:	f7ff ff47 	bl	80139dc <_Balloc>
 8013b4e:	b940      	cbnz	r0, 8013b62 <__s2b+0x36>
 8013b50:	4602      	mov	r2, r0
 8013b52:	4b19      	ldr	r3, [pc, #100]	; (8013bb8 <__s2b+0x8c>)
 8013b54:	4819      	ldr	r0, [pc, #100]	; (8013bbc <__s2b+0x90>)
 8013b56:	21d3      	movs	r1, #211	; 0xd3
 8013b58:	f002 f852 	bl	8015c00 <__assert_func>
 8013b5c:	0052      	lsls	r2, r2, #1
 8013b5e:	3101      	adds	r1, #1
 8013b60:	e7f0      	b.n	8013b44 <__s2b+0x18>
 8013b62:	9b08      	ldr	r3, [sp, #32]
 8013b64:	6143      	str	r3, [r0, #20]
 8013b66:	2d09      	cmp	r5, #9
 8013b68:	f04f 0301 	mov.w	r3, #1
 8013b6c:	6103      	str	r3, [r0, #16]
 8013b6e:	dd16      	ble.n	8013b9e <__s2b+0x72>
 8013b70:	f104 0909 	add.w	r9, r4, #9
 8013b74:	46c8      	mov	r8, r9
 8013b76:	442c      	add	r4, r5
 8013b78:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013b7c:	4601      	mov	r1, r0
 8013b7e:	3b30      	subs	r3, #48	; 0x30
 8013b80:	220a      	movs	r2, #10
 8013b82:	4630      	mov	r0, r6
 8013b84:	f7ff ff8c 	bl	8013aa0 <__multadd>
 8013b88:	45a0      	cmp	r8, r4
 8013b8a:	d1f5      	bne.n	8013b78 <__s2b+0x4c>
 8013b8c:	f1a5 0408 	sub.w	r4, r5, #8
 8013b90:	444c      	add	r4, r9
 8013b92:	1b2d      	subs	r5, r5, r4
 8013b94:	1963      	adds	r3, r4, r5
 8013b96:	42bb      	cmp	r3, r7
 8013b98:	db04      	blt.n	8013ba4 <__s2b+0x78>
 8013b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b9e:	340a      	adds	r4, #10
 8013ba0:	2509      	movs	r5, #9
 8013ba2:	e7f6      	b.n	8013b92 <__s2b+0x66>
 8013ba4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013ba8:	4601      	mov	r1, r0
 8013baa:	3b30      	subs	r3, #48	; 0x30
 8013bac:	220a      	movs	r2, #10
 8013bae:	4630      	mov	r0, r6
 8013bb0:	f7ff ff76 	bl	8013aa0 <__multadd>
 8013bb4:	e7ee      	b.n	8013b94 <__s2b+0x68>
 8013bb6:	bf00      	nop
 8013bb8:	080181c3 	.word	0x080181c3
 8013bbc:	080181d4 	.word	0x080181d4

08013bc0 <__hi0bits>:
 8013bc0:	0c03      	lsrs	r3, r0, #16
 8013bc2:	041b      	lsls	r3, r3, #16
 8013bc4:	b9d3      	cbnz	r3, 8013bfc <__hi0bits+0x3c>
 8013bc6:	0400      	lsls	r0, r0, #16
 8013bc8:	2310      	movs	r3, #16
 8013bca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013bce:	bf04      	itt	eq
 8013bd0:	0200      	lsleq	r0, r0, #8
 8013bd2:	3308      	addeq	r3, #8
 8013bd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013bd8:	bf04      	itt	eq
 8013bda:	0100      	lsleq	r0, r0, #4
 8013bdc:	3304      	addeq	r3, #4
 8013bde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013be2:	bf04      	itt	eq
 8013be4:	0080      	lsleq	r0, r0, #2
 8013be6:	3302      	addeq	r3, #2
 8013be8:	2800      	cmp	r0, #0
 8013bea:	db05      	blt.n	8013bf8 <__hi0bits+0x38>
 8013bec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013bf0:	f103 0301 	add.w	r3, r3, #1
 8013bf4:	bf08      	it	eq
 8013bf6:	2320      	moveq	r3, #32
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	4770      	bx	lr
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	e7e4      	b.n	8013bca <__hi0bits+0xa>

08013c00 <__lo0bits>:
 8013c00:	6803      	ldr	r3, [r0, #0]
 8013c02:	f013 0207 	ands.w	r2, r3, #7
 8013c06:	d00c      	beq.n	8013c22 <__lo0bits+0x22>
 8013c08:	07d9      	lsls	r1, r3, #31
 8013c0a:	d422      	bmi.n	8013c52 <__lo0bits+0x52>
 8013c0c:	079a      	lsls	r2, r3, #30
 8013c0e:	bf49      	itett	mi
 8013c10:	085b      	lsrmi	r3, r3, #1
 8013c12:	089b      	lsrpl	r3, r3, #2
 8013c14:	6003      	strmi	r3, [r0, #0]
 8013c16:	2201      	movmi	r2, #1
 8013c18:	bf5c      	itt	pl
 8013c1a:	6003      	strpl	r3, [r0, #0]
 8013c1c:	2202      	movpl	r2, #2
 8013c1e:	4610      	mov	r0, r2
 8013c20:	4770      	bx	lr
 8013c22:	b299      	uxth	r1, r3
 8013c24:	b909      	cbnz	r1, 8013c2a <__lo0bits+0x2a>
 8013c26:	0c1b      	lsrs	r3, r3, #16
 8013c28:	2210      	movs	r2, #16
 8013c2a:	b2d9      	uxtb	r1, r3
 8013c2c:	b909      	cbnz	r1, 8013c32 <__lo0bits+0x32>
 8013c2e:	3208      	adds	r2, #8
 8013c30:	0a1b      	lsrs	r3, r3, #8
 8013c32:	0719      	lsls	r1, r3, #28
 8013c34:	bf04      	itt	eq
 8013c36:	091b      	lsreq	r3, r3, #4
 8013c38:	3204      	addeq	r2, #4
 8013c3a:	0799      	lsls	r1, r3, #30
 8013c3c:	bf04      	itt	eq
 8013c3e:	089b      	lsreq	r3, r3, #2
 8013c40:	3202      	addeq	r2, #2
 8013c42:	07d9      	lsls	r1, r3, #31
 8013c44:	d403      	bmi.n	8013c4e <__lo0bits+0x4e>
 8013c46:	085b      	lsrs	r3, r3, #1
 8013c48:	f102 0201 	add.w	r2, r2, #1
 8013c4c:	d003      	beq.n	8013c56 <__lo0bits+0x56>
 8013c4e:	6003      	str	r3, [r0, #0]
 8013c50:	e7e5      	b.n	8013c1e <__lo0bits+0x1e>
 8013c52:	2200      	movs	r2, #0
 8013c54:	e7e3      	b.n	8013c1e <__lo0bits+0x1e>
 8013c56:	2220      	movs	r2, #32
 8013c58:	e7e1      	b.n	8013c1e <__lo0bits+0x1e>
	...

08013c5c <__i2b>:
 8013c5c:	b510      	push	{r4, lr}
 8013c5e:	460c      	mov	r4, r1
 8013c60:	2101      	movs	r1, #1
 8013c62:	f7ff febb 	bl	80139dc <_Balloc>
 8013c66:	4602      	mov	r2, r0
 8013c68:	b928      	cbnz	r0, 8013c76 <__i2b+0x1a>
 8013c6a:	4b05      	ldr	r3, [pc, #20]	; (8013c80 <__i2b+0x24>)
 8013c6c:	4805      	ldr	r0, [pc, #20]	; (8013c84 <__i2b+0x28>)
 8013c6e:	f240 1145 	movw	r1, #325	; 0x145
 8013c72:	f001 ffc5 	bl	8015c00 <__assert_func>
 8013c76:	2301      	movs	r3, #1
 8013c78:	6144      	str	r4, [r0, #20]
 8013c7a:	6103      	str	r3, [r0, #16]
 8013c7c:	bd10      	pop	{r4, pc}
 8013c7e:	bf00      	nop
 8013c80:	080181c3 	.word	0x080181c3
 8013c84:	080181d4 	.word	0x080181d4

08013c88 <__multiply>:
 8013c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c8c:	4691      	mov	r9, r2
 8013c8e:	690a      	ldr	r2, [r1, #16]
 8013c90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013c94:	429a      	cmp	r2, r3
 8013c96:	bfb8      	it	lt
 8013c98:	460b      	movlt	r3, r1
 8013c9a:	460c      	mov	r4, r1
 8013c9c:	bfbc      	itt	lt
 8013c9e:	464c      	movlt	r4, r9
 8013ca0:	4699      	movlt	r9, r3
 8013ca2:	6927      	ldr	r7, [r4, #16]
 8013ca4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013ca8:	68a3      	ldr	r3, [r4, #8]
 8013caa:	6861      	ldr	r1, [r4, #4]
 8013cac:	eb07 060a 	add.w	r6, r7, sl
 8013cb0:	42b3      	cmp	r3, r6
 8013cb2:	b085      	sub	sp, #20
 8013cb4:	bfb8      	it	lt
 8013cb6:	3101      	addlt	r1, #1
 8013cb8:	f7ff fe90 	bl	80139dc <_Balloc>
 8013cbc:	b930      	cbnz	r0, 8013ccc <__multiply+0x44>
 8013cbe:	4602      	mov	r2, r0
 8013cc0:	4b44      	ldr	r3, [pc, #272]	; (8013dd4 <__multiply+0x14c>)
 8013cc2:	4845      	ldr	r0, [pc, #276]	; (8013dd8 <__multiply+0x150>)
 8013cc4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8013cc8:	f001 ff9a 	bl	8015c00 <__assert_func>
 8013ccc:	f100 0514 	add.w	r5, r0, #20
 8013cd0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013cd4:	462b      	mov	r3, r5
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	4543      	cmp	r3, r8
 8013cda:	d321      	bcc.n	8013d20 <__multiply+0x98>
 8013cdc:	f104 0314 	add.w	r3, r4, #20
 8013ce0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013ce4:	f109 0314 	add.w	r3, r9, #20
 8013ce8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013cec:	9202      	str	r2, [sp, #8]
 8013cee:	1b3a      	subs	r2, r7, r4
 8013cf0:	3a15      	subs	r2, #21
 8013cf2:	f022 0203 	bic.w	r2, r2, #3
 8013cf6:	3204      	adds	r2, #4
 8013cf8:	f104 0115 	add.w	r1, r4, #21
 8013cfc:	428f      	cmp	r7, r1
 8013cfe:	bf38      	it	cc
 8013d00:	2204      	movcc	r2, #4
 8013d02:	9201      	str	r2, [sp, #4]
 8013d04:	9a02      	ldr	r2, [sp, #8]
 8013d06:	9303      	str	r3, [sp, #12]
 8013d08:	429a      	cmp	r2, r3
 8013d0a:	d80c      	bhi.n	8013d26 <__multiply+0x9e>
 8013d0c:	2e00      	cmp	r6, #0
 8013d0e:	dd03      	ble.n	8013d18 <__multiply+0x90>
 8013d10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d05b      	beq.n	8013dd0 <__multiply+0x148>
 8013d18:	6106      	str	r6, [r0, #16]
 8013d1a:	b005      	add	sp, #20
 8013d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d20:	f843 2b04 	str.w	r2, [r3], #4
 8013d24:	e7d8      	b.n	8013cd8 <__multiply+0x50>
 8013d26:	f8b3 a000 	ldrh.w	sl, [r3]
 8013d2a:	f1ba 0f00 	cmp.w	sl, #0
 8013d2e:	d024      	beq.n	8013d7a <__multiply+0xf2>
 8013d30:	f104 0e14 	add.w	lr, r4, #20
 8013d34:	46a9      	mov	r9, r5
 8013d36:	f04f 0c00 	mov.w	ip, #0
 8013d3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013d3e:	f8d9 1000 	ldr.w	r1, [r9]
 8013d42:	fa1f fb82 	uxth.w	fp, r2
 8013d46:	b289      	uxth	r1, r1
 8013d48:	fb0a 110b 	mla	r1, sl, fp, r1
 8013d4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013d50:	f8d9 2000 	ldr.w	r2, [r9]
 8013d54:	4461      	add	r1, ip
 8013d56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013d5a:	fb0a c20b 	mla	r2, sl, fp, ip
 8013d5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013d62:	b289      	uxth	r1, r1
 8013d64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013d68:	4577      	cmp	r7, lr
 8013d6a:	f849 1b04 	str.w	r1, [r9], #4
 8013d6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013d72:	d8e2      	bhi.n	8013d3a <__multiply+0xb2>
 8013d74:	9a01      	ldr	r2, [sp, #4]
 8013d76:	f845 c002 	str.w	ip, [r5, r2]
 8013d7a:	9a03      	ldr	r2, [sp, #12]
 8013d7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013d80:	3304      	adds	r3, #4
 8013d82:	f1b9 0f00 	cmp.w	r9, #0
 8013d86:	d021      	beq.n	8013dcc <__multiply+0x144>
 8013d88:	6829      	ldr	r1, [r5, #0]
 8013d8a:	f104 0c14 	add.w	ip, r4, #20
 8013d8e:	46ae      	mov	lr, r5
 8013d90:	f04f 0a00 	mov.w	sl, #0
 8013d94:	f8bc b000 	ldrh.w	fp, [ip]
 8013d98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013d9c:	fb09 220b 	mla	r2, r9, fp, r2
 8013da0:	4452      	add	r2, sl
 8013da2:	b289      	uxth	r1, r1
 8013da4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013da8:	f84e 1b04 	str.w	r1, [lr], #4
 8013dac:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013db0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013db4:	f8be 1000 	ldrh.w	r1, [lr]
 8013db8:	fb09 110a 	mla	r1, r9, sl, r1
 8013dbc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8013dc0:	4567      	cmp	r7, ip
 8013dc2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013dc6:	d8e5      	bhi.n	8013d94 <__multiply+0x10c>
 8013dc8:	9a01      	ldr	r2, [sp, #4]
 8013dca:	50a9      	str	r1, [r5, r2]
 8013dcc:	3504      	adds	r5, #4
 8013dce:	e799      	b.n	8013d04 <__multiply+0x7c>
 8013dd0:	3e01      	subs	r6, #1
 8013dd2:	e79b      	b.n	8013d0c <__multiply+0x84>
 8013dd4:	080181c3 	.word	0x080181c3
 8013dd8:	080181d4 	.word	0x080181d4

08013ddc <__pow5mult>:
 8013ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013de0:	4615      	mov	r5, r2
 8013de2:	f012 0203 	ands.w	r2, r2, #3
 8013de6:	4606      	mov	r6, r0
 8013de8:	460f      	mov	r7, r1
 8013dea:	d007      	beq.n	8013dfc <__pow5mult+0x20>
 8013dec:	4c25      	ldr	r4, [pc, #148]	; (8013e84 <__pow5mult+0xa8>)
 8013dee:	3a01      	subs	r2, #1
 8013df0:	2300      	movs	r3, #0
 8013df2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013df6:	f7ff fe53 	bl	8013aa0 <__multadd>
 8013dfa:	4607      	mov	r7, r0
 8013dfc:	10ad      	asrs	r5, r5, #2
 8013dfe:	d03d      	beq.n	8013e7c <__pow5mult+0xa0>
 8013e00:	69f4      	ldr	r4, [r6, #28]
 8013e02:	b97c      	cbnz	r4, 8013e24 <__pow5mult+0x48>
 8013e04:	2010      	movs	r0, #16
 8013e06:	f7ff fd35 	bl	8013874 <malloc>
 8013e0a:	4602      	mov	r2, r0
 8013e0c:	61f0      	str	r0, [r6, #28]
 8013e0e:	b928      	cbnz	r0, 8013e1c <__pow5mult+0x40>
 8013e10:	4b1d      	ldr	r3, [pc, #116]	; (8013e88 <__pow5mult+0xac>)
 8013e12:	481e      	ldr	r0, [pc, #120]	; (8013e8c <__pow5mult+0xb0>)
 8013e14:	f240 11b3 	movw	r1, #435	; 0x1b3
 8013e18:	f001 fef2 	bl	8015c00 <__assert_func>
 8013e1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013e20:	6004      	str	r4, [r0, #0]
 8013e22:	60c4      	str	r4, [r0, #12]
 8013e24:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8013e28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013e2c:	b94c      	cbnz	r4, 8013e42 <__pow5mult+0x66>
 8013e2e:	f240 2171 	movw	r1, #625	; 0x271
 8013e32:	4630      	mov	r0, r6
 8013e34:	f7ff ff12 	bl	8013c5c <__i2b>
 8013e38:	2300      	movs	r3, #0
 8013e3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8013e3e:	4604      	mov	r4, r0
 8013e40:	6003      	str	r3, [r0, #0]
 8013e42:	f04f 0900 	mov.w	r9, #0
 8013e46:	07eb      	lsls	r3, r5, #31
 8013e48:	d50a      	bpl.n	8013e60 <__pow5mult+0x84>
 8013e4a:	4639      	mov	r1, r7
 8013e4c:	4622      	mov	r2, r4
 8013e4e:	4630      	mov	r0, r6
 8013e50:	f7ff ff1a 	bl	8013c88 <__multiply>
 8013e54:	4639      	mov	r1, r7
 8013e56:	4680      	mov	r8, r0
 8013e58:	4630      	mov	r0, r6
 8013e5a:	f7ff fdff 	bl	8013a5c <_Bfree>
 8013e5e:	4647      	mov	r7, r8
 8013e60:	106d      	asrs	r5, r5, #1
 8013e62:	d00b      	beq.n	8013e7c <__pow5mult+0xa0>
 8013e64:	6820      	ldr	r0, [r4, #0]
 8013e66:	b938      	cbnz	r0, 8013e78 <__pow5mult+0x9c>
 8013e68:	4622      	mov	r2, r4
 8013e6a:	4621      	mov	r1, r4
 8013e6c:	4630      	mov	r0, r6
 8013e6e:	f7ff ff0b 	bl	8013c88 <__multiply>
 8013e72:	6020      	str	r0, [r4, #0]
 8013e74:	f8c0 9000 	str.w	r9, [r0]
 8013e78:	4604      	mov	r4, r0
 8013e7a:	e7e4      	b.n	8013e46 <__pow5mult+0x6a>
 8013e7c:	4638      	mov	r0, r7
 8013e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e82:	bf00      	nop
 8013e84:	08018320 	.word	0x08018320
 8013e88:	08018154 	.word	0x08018154
 8013e8c:	080181d4 	.word	0x080181d4

08013e90 <__lshift>:
 8013e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e94:	460c      	mov	r4, r1
 8013e96:	6849      	ldr	r1, [r1, #4]
 8013e98:	6923      	ldr	r3, [r4, #16]
 8013e9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013e9e:	68a3      	ldr	r3, [r4, #8]
 8013ea0:	4607      	mov	r7, r0
 8013ea2:	4691      	mov	r9, r2
 8013ea4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013ea8:	f108 0601 	add.w	r6, r8, #1
 8013eac:	42b3      	cmp	r3, r6
 8013eae:	db0b      	blt.n	8013ec8 <__lshift+0x38>
 8013eb0:	4638      	mov	r0, r7
 8013eb2:	f7ff fd93 	bl	80139dc <_Balloc>
 8013eb6:	4605      	mov	r5, r0
 8013eb8:	b948      	cbnz	r0, 8013ece <__lshift+0x3e>
 8013eba:	4602      	mov	r2, r0
 8013ebc:	4b28      	ldr	r3, [pc, #160]	; (8013f60 <__lshift+0xd0>)
 8013ebe:	4829      	ldr	r0, [pc, #164]	; (8013f64 <__lshift+0xd4>)
 8013ec0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8013ec4:	f001 fe9c 	bl	8015c00 <__assert_func>
 8013ec8:	3101      	adds	r1, #1
 8013eca:	005b      	lsls	r3, r3, #1
 8013ecc:	e7ee      	b.n	8013eac <__lshift+0x1c>
 8013ece:	2300      	movs	r3, #0
 8013ed0:	f100 0114 	add.w	r1, r0, #20
 8013ed4:	f100 0210 	add.w	r2, r0, #16
 8013ed8:	4618      	mov	r0, r3
 8013eda:	4553      	cmp	r3, sl
 8013edc:	db33      	blt.n	8013f46 <__lshift+0xb6>
 8013ede:	6920      	ldr	r0, [r4, #16]
 8013ee0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013ee4:	f104 0314 	add.w	r3, r4, #20
 8013ee8:	f019 091f 	ands.w	r9, r9, #31
 8013eec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013ef0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013ef4:	d02b      	beq.n	8013f4e <__lshift+0xbe>
 8013ef6:	f1c9 0e20 	rsb	lr, r9, #32
 8013efa:	468a      	mov	sl, r1
 8013efc:	2200      	movs	r2, #0
 8013efe:	6818      	ldr	r0, [r3, #0]
 8013f00:	fa00 f009 	lsl.w	r0, r0, r9
 8013f04:	4310      	orrs	r0, r2
 8013f06:	f84a 0b04 	str.w	r0, [sl], #4
 8013f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f0e:	459c      	cmp	ip, r3
 8013f10:	fa22 f20e 	lsr.w	r2, r2, lr
 8013f14:	d8f3      	bhi.n	8013efe <__lshift+0x6e>
 8013f16:	ebac 0304 	sub.w	r3, ip, r4
 8013f1a:	3b15      	subs	r3, #21
 8013f1c:	f023 0303 	bic.w	r3, r3, #3
 8013f20:	3304      	adds	r3, #4
 8013f22:	f104 0015 	add.w	r0, r4, #21
 8013f26:	4584      	cmp	ip, r0
 8013f28:	bf38      	it	cc
 8013f2a:	2304      	movcc	r3, #4
 8013f2c:	50ca      	str	r2, [r1, r3]
 8013f2e:	b10a      	cbz	r2, 8013f34 <__lshift+0xa4>
 8013f30:	f108 0602 	add.w	r6, r8, #2
 8013f34:	3e01      	subs	r6, #1
 8013f36:	4638      	mov	r0, r7
 8013f38:	612e      	str	r6, [r5, #16]
 8013f3a:	4621      	mov	r1, r4
 8013f3c:	f7ff fd8e 	bl	8013a5c <_Bfree>
 8013f40:	4628      	mov	r0, r5
 8013f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f46:	f842 0f04 	str.w	r0, [r2, #4]!
 8013f4a:	3301      	adds	r3, #1
 8013f4c:	e7c5      	b.n	8013eda <__lshift+0x4a>
 8013f4e:	3904      	subs	r1, #4
 8013f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f54:	f841 2f04 	str.w	r2, [r1, #4]!
 8013f58:	459c      	cmp	ip, r3
 8013f5a:	d8f9      	bhi.n	8013f50 <__lshift+0xc0>
 8013f5c:	e7ea      	b.n	8013f34 <__lshift+0xa4>
 8013f5e:	bf00      	nop
 8013f60:	080181c3 	.word	0x080181c3
 8013f64:	080181d4 	.word	0x080181d4

08013f68 <__mcmp>:
 8013f68:	b530      	push	{r4, r5, lr}
 8013f6a:	6902      	ldr	r2, [r0, #16]
 8013f6c:	690c      	ldr	r4, [r1, #16]
 8013f6e:	1b12      	subs	r2, r2, r4
 8013f70:	d10e      	bne.n	8013f90 <__mcmp+0x28>
 8013f72:	f100 0314 	add.w	r3, r0, #20
 8013f76:	3114      	adds	r1, #20
 8013f78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013f7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013f80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013f84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013f88:	42a5      	cmp	r5, r4
 8013f8a:	d003      	beq.n	8013f94 <__mcmp+0x2c>
 8013f8c:	d305      	bcc.n	8013f9a <__mcmp+0x32>
 8013f8e:	2201      	movs	r2, #1
 8013f90:	4610      	mov	r0, r2
 8013f92:	bd30      	pop	{r4, r5, pc}
 8013f94:	4283      	cmp	r3, r0
 8013f96:	d3f3      	bcc.n	8013f80 <__mcmp+0x18>
 8013f98:	e7fa      	b.n	8013f90 <__mcmp+0x28>
 8013f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8013f9e:	e7f7      	b.n	8013f90 <__mcmp+0x28>

08013fa0 <__mdiff>:
 8013fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fa4:	460c      	mov	r4, r1
 8013fa6:	4606      	mov	r6, r0
 8013fa8:	4611      	mov	r1, r2
 8013faa:	4620      	mov	r0, r4
 8013fac:	4690      	mov	r8, r2
 8013fae:	f7ff ffdb 	bl	8013f68 <__mcmp>
 8013fb2:	1e05      	subs	r5, r0, #0
 8013fb4:	d110      	bne.n	8013fd8 <__mdiff+0x38>
 8013fb6:	4629      	mov	r1, r5
 8013fb8:	4630      	mov	r0, r6
 8013fba:	f7ff fd0f 	bl	80139dc <_Balloc>
 8013fbe:	b930      	cbnz	r0, 8013fce <__mdiff+0x2e>
 8013fc0:	4b3a      	ldr	r3, [pc, #232]	; (80140ac <__mdiff+0x10c>)
 8013fc2:	4602      	mov	r2, r0
 8013fc4:	f240 2137 	movw	r1, #567	; 0x237
 8013fc8:	4839      	ldr	r0, [pc, #228]	; (80140b0 <__mdiff+0x110>)
 8013fca:	f001 fe19 	bl	8015c00 <__assert_func>
 8013fce:	2301      	movs	r3, #1
 8013fd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013fd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fd8:	bfa4      	itt	ge
 8013fda:	4643      	movge	r3, r8
 8013fdc:	46a0      	movge	r8, r4
 8013fde:	4630      	mov	r0, r6
 8013fe0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013fe4:	bfa6      	itte	ge
 8013fe6:	461c      	movge	r4, r3
 8013fe8:	2500      	movge	r5, #0
 8013fea:	2501      	movlt	r5, #1
 8013fec:	f7ff fcf6 	bl	80139dc <_Balloc>
 8013ff0:	b920      	cbnz	r0, 8013ffc <__mdiff+0x5c>
 8013ff2:	4b2e      	ldr	r3, [pc, #184]	; (80140ac <__mdiff+0x10c>)
 8013ff4:	4602      	mov	r2, r0
 8013ff6:	f240 2145 	movw	r1, #581	; 0x245
 8013ffa:	e7e5      	b.n	8013fc8 <__mdiff+0x28>
 8013ffc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014000:	6926      	ldr	r6, [r4, #16]
 8014002:	60c5      	str	r5, [r0, #12]
 8014004:	f104 0914 	add.w	r9, r4, #20
 8014008:	f108 0514 	add.w	r5, r8, #20
 801400c:	f100 0e14 	add.w	lr, r0, #20
 8014010:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014014:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014018:	f108 0210 	add.w	r2, r8, #16
 801401c:	46f2      	mov	sl, lr
 801401e:	2100      	movs	r1, #0
 8014020:	f859 3b04 	ldr.w	r3, [r9], #4
 8014024:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014028:	fa11 f88b 	uxtah	r8, r1, fp
 801402c:	b299      	uxth	r1, r3
 801402e:	0c1b      	lsrs	r3, r3, #16
 8014030:	eba8 0801 	sub.w	r8, r8, r1
 8014034:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014038:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801403c:	fa1f f888 	uxth.w	r8, r8
 8014040:	1419      	asrs	r1, r3, #16
 8014042:	454e      	cmp	r6, r9
 8014044:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014048:	f84a 3b04 	str.w	r3, [sl], #4
 801404c:	d8e8      	bhi.n	8014020 <__mdiff+0x80>
 801404e:	1b33      	subs	r3, r6, r4
 8014050:	3b15      	subs	r3, #21
 8014052:	f023 0303 	bic.w	r3, r3, #3
 8014056:	3304      	adds	r3, #4
 8014058:	3415      	adds	r4, #21
 801405a:	42a6      	cmp	r6, r4
 801405c:	bf38      	it	cc
 801405e:	2304      	movcc	r3, #4
 8014060:	441d      	add	r5, r3
 8014062:	4473      	add	r3, lr
 8014064:	469e      	mov	lr, r3
 8014066:	462e      	mov	r6, r5
 8014068:	4566      	cmp	r6, ip
 801406a:	d30e      	bcc.n	801408a <__mdiff+0xea>
 801406c:	f10c 0203 	add.w	r2, ip, #3
 8014070:	1b52      	subs	r2, r2, r5
 8014072:	f022 0203 	bic.w	r2, r2, #3
 8014076:	3d03      	subs	r5, #3
 8014078:	45ac      	cmp	ip, r5
 801407a:	bf38      	it	cc
 801407c:	2200      	movcc	r2, #0
 801407e:	4413      	add	r3, r2
 8014080:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014084:	b17a      	cbz	r2, 80140a6 <__mdiff+0x106>
 8014086:	6107      	str	r7, [r0, #16]
 8014088:	e7a4      	b.n	8013fd4 <__mdiff+0x34>
 801408a:	f856 8b04 	ldr.w	r8, [r6], #4
 801408e:	fa11 f288 	uxtah	r2, r1, r8
 8014092:	1414      	asrs	r4, r2, #16
 8014094:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014098:	b292      	uxth	r2, r2
 801409a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801409e:	f84e 2b04 	str.w	r2, [lr], #4
 80140a2:	1421      	asrs	r1, r4, #16
 80140a4:	e7e0      	b.n	8014068 <__mdiff+0xc8>
 80140a6:	3f01      	subs	r7, #1
 80140a8:	e7ea      	b.n	8014080 <__mdiff+0xe0>
 80140aa:	bf00      	nop
 80140ac:	080181c3 	.word	0x080181c3
 80140b0:	080181d4 	.word	0x080181d4

080140b4 <__ulp>:
 80140b4:	b082      	sub	sp, #8
 80140b6:	ed8d 0b00 	vstr	d0, [sp]
 80140ba:	9a01      	ldr	r2, [sp, #4]
 80140bc:	4b0f      	ldr	r3, [pc, #60]	; (80140fc <__ulp+0x48>)
 80140be:	4013      	ands	r3, r2
 80140c0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	dc08      	bgt.n	80140da <__ulp+0x26>
 80140c8:	425b      	negs	r3, r3
 80140ca:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80140ce:	ea4f 5223 	mov.w	r2, r3, asr #20
 80140d2:	da04      	bge.n	80140de <__ulp+0x2a>
 80140d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80140d8:	4113      	asrs	r3, r2
 80140da:	2200      	movs	r2, #0
 80140dc:	e008      	b.n	80140f0 <__ulp+0x3c>
 80140de:	f1a2 0314 	sub.w	r3, r2, #20
 80140e2:	2b1e      	cmp	r3, #30
 80140e4:	bfda      	itte	le
 80140e6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80140ea:	40da      	lsrle	r2, r3
 80140ec:	2201      	movgt	r2, #1
 80140ee:	2300      	movs	r3, #0
 80140f0:	4619      	mov	r1, r3
 80140f2:	4610      	mov	r0, r2
 80140f4:	ec41 0b10 	vmov	d0, r0, r1
 80140f8:	b002      	add	sp, #8
 80140fa:	4770      	bx	lr
 80140fc:	7ff00000 	.word	0x7ff00000

08014100 <__b2d>:
 8014100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014104:	6906      	ldr	r6, [r0, #16]
 8014106:	f100 0814 	add.w	r8, r0, #20
 801410a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801410e:	1f37      	subs	r7, r6, #4
 8014110:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014114:	4610      	mov	r0, r2
 8014116:	f7ff fd53 	bl	8013bc0 <__hi0bits>
 801411a:	f1c0 0320 	rsb	r3, r0, #32
 801411e:	280a      	cmp	r0, #10
 8014120:	600b      	str	r3, [r1, #0]
 8014122:	491b      	ldr	r1, [pc, #108]	; (8014190 <__b2d+0x90>)
 8014124:	dc15      	bgt.n	8014152 <__b2d+0x52>
 8014126:	f1c0 0c0b 	rsb	ip, r0, #11
 801412a:	fa22 f30c 	lsr.w	r3, r2, ip
 801412e:	45b8      	cmp	r8, r7
 8014130:	ea43 0501 	orr.w	r5, r3, r1
 8014134:	bf34      	ite	cc
 8014136:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801413a:	2300      	movcs	r3, #0
 801413c:	3015      	adds	r0, #21
 801413e:	fa02 f000 	lsl.w	r0, r2, r0
 8014142:	fa23 f30c 	lsr.w	r3, r3, ip
 8014146:	4303      	orrs	r3, r0
 8014148:	461c      	mov	r4, r3
 801414a:	ec45 4b10 	vmov	d0, r4, r5
 801414e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014152:	45b8      	cmp	r8, r7
 8014154:	bf3a      	itte	cc
 8014156:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801415a:	f1a6 0708 	subcc.w	r7, r6, #8
 801415e:	2300      	movcs	r3, #0
 8014160:	380b      	subs	r0, #11
 8014162:	d012      	beq.n	801418a <__b2d+0x8a>
 8014164:	f1c0 0120 	rsb	r1, r0, #32
 8014168:	fa23 f401 	lsr.w	r4, r3, r1
 801416c:	4082      	lsls	r2, r0
 801416e:	4322      	orrs	r2, r4
 8014170:	4547      	cmp	r7, r8
 8014172:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8014176:	bf8c      	ite	hi
 8014178:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801417c:	2200      	movls	r2, #0
 801417e:	4083      	lsls	r3, r0
 8014180:	40ca      	lsrs	r2, r1
 8014182:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014186:	4313      	orrs	r3, r2
 8014188:	e7de      	b.n	8014148 <__b2d+0x48>
 801418a:	ea42 0501 	orr.w	r5, r2, r1
 801418e:	e7db      	b.n	8014148 <__b2d+0x48>
 8014190:	3ff00000 	.word	0x3ff00000

08014194 <__d2b>:
 8014194:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014198:	460f      	mov	r7, r1
 801419a:	2101      	movs	r1, #1
 801419c:	ec59 8b10 	vmov	r8, r9, d0
 80141a0:	4616      	mov	r6, r2
 80141a2:	f7ff fc1b 	bl	80139dc <_Balloc>
 80141a6:	4604      	mov	r4, r0
 80141a8:	b930      	cbnz	r0, 80141b8 <__d2b+0x24>
 80141aa:	4602      	mov	r2, r0
 80141ac:	4b24      	ldr	r3, [pc, #144]	; (8014240 <__d2b+0xac>)
 80141ae:	4825      	ldr	r0, [pc, #148]	; (8014244 <__d2b+0xb0>)
 80141b0:	f240 310f 	movw	r1, #783	; 0x30f
 80141b4:	f001 fd24 	bl	8015c00 <__assert_func>
 80141b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80141bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80141c0:	bb2d      	cbnz	r5, 801420e <__d2b+0x7a>
 80141c2:	9301      	str	r3, [sp, #4]
 80141c4:	f1b8 0300 	subs.w	r3, r8, #0
 80141c8:	d026      	beq.n	8014218 <__d2b+0x84>
 80141ca:	4668      	mov	r0, sp
 80141cc:	9300      	str	r3, [sp, #0]
 80141ce:	f7ff fd17 	bl	8013c00 <__lo0bits>
 80141d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80141d6:	b1e8      	cbz	r0, 8014214 <__d2b+0x80>
 80141d8:	f1c0 0320 	rsb	r3, r0, #32
 80141dc:	fa02 f303 	lsl.w	r3, r2, r3
 80141e0:	430b      	orrs	r3, r1
 80141e2:	40c2      	lsrs	r2, r0
 80141e4:	6163      	str	r3, [r4, #20]
 80141e6:	9201      	str	r2, [sp, #4]
 80141e8:	9b01      	ldr	r3, [sp, #4]
 80141ea:	61a3      	str	r3, [r4, #24]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	bf14      	ite	ne
 80141f0:	2202      	movne	r2, #2
 80141f2:	2201      	moveq	r2, #1
 80141f4:	6122      	str	r2, [r4, #16]
 80141f6:	b1bd      	cbz	r5, 8014228 <__d2b+0x94>
 80141f8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80141fc:	4405      	add	r5, r0
 80141fe:	603d      	str	r5, [r7, #0]
 8014200:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014204:	6030      	str	r0, [r6, #0]
 8014206:	4620      	mov	r0, r4
 8014208:	b003      	add	sp, #12
 801420a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801420e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014212:	e7d6      	b.n	80141c2 <__d2b+0x2e>
 8014214:	6161      	str	r1, [r4, #20]
 8014216:	e7e7      	b.n	80141e8 <__d2b+0x54>
 8014218:	a801      	add	r0, sp, #4
 801421a:	f7ff fcf1 	bl	8013c00 <__lo0bits>
 801421e:	9b01      	ldr	r3, [sp, #4]
 8014220:	6163      	str	r3, [r4, #20]
 8014222:	3020      	adds	r0, #32
 8014224:	2201      	movs	r2, #1
 8014226:	e7e5      	b.n	80141f4 <__d2b+0x60>
 8014228:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801422c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014230:	6038      	str	r0, [r7, #0]
 8014232:	6918      	ldr	r0, [r3, #16]
 8014234:	f7ff fcc4 	bl	8013bc0 <__hi0bits>
 8014238:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801423c:	e7e2      	b.n	8014204 <__d2b+0x70>
 801423e:	bf00      	nop
 8014240:	080181c3 	.word	0x080181c3
 8014244:	080181d4 	.word	0x080181d4

08014248 <__ratio>:
 8014248:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801424c:	4688      	mov	r8, r1
 801424e:	4669      	mov	r1, sp
 8014250:	4681      	mov	r9, r0
 8014252:	f7ff ff55 	bl	8014100 <__b2d>
 8014256:	a901      	add	r1, sp, #4
 8014258:	4640      	mov	r0, r8
 801425a:	ec55 4b10 	vmov	r4, r5, d0
 801425e:	f7ff ff4f 	bl	8014100 <__b2d>
 8014262:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014266:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801426a:	eba3 0c02 	sub.w	ip, r3, r2
 801426e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014272:	1a9b      	subs	r3, r3, r2
 8014274:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014278:	ec51 0b10 	vmov	r0, r1, d0
 801427c:	2b00      	cmp	r3, #0
 801427e:	bfd6      	itet	le
 8014280:	460a      	movle	r2, r1
 8014282:	462a      	movgt	r2, r5
 8014284:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014288:	468b      	mov	fp, r1
 801428a:	462f      	mov	r7, r5
 801428c:	bfd4      	ite	le
 801428e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014292:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014296:	4620      	mov	r0, r4
 8014298:	ee10 2a10 	vmov	r2, s0
 801429c:	465b      	mov	r3, fp
 801429e:	4639      	mov	r1, r7
 80142a0:	f7ec fafc 	bl	800089c <__aeabi_ddiv>
 80142a4:	ec41 0b10 	vmov	d0, r0, r1
 80142a8:	b003      	add	sp, #12
 80142aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080142ae <__copybits>:
 80142ae:	3901      	subs	r1, #1
 80142b0:	b570      	push	{r4, r5, r6, lr}
 80142b2:	1149      	asrs	r1, r1, #5
 80142b4:	6914      	ldr	r4, [r2, #16]
 80142b6:	3101      	adds	r1, #1
 80142b8:	f102 0314 	add.w	r3, r2, #20
 80142bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80142c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80142c4:	1f05      	subs	r5, r0, #4
 80142c6:	42a3      	cmp	r3, r4
 80142c8:	d30c      	bcc.n	80142e4 <__copybits+0x36>
 80142ca:	1aa3      	subs	r3, r4, r2
 80142cc:	3b11      	subs	r3, #17
 80142ce:	f023 0303 	bic.w	r3, r3, #3
 80142d2:	3211      	adds	r2, #17
 80142d4:	42a2      	cmp	r2, r4
 80142d6:	bf88      	it	hi
 80142d8:	2300      	movhi	r3, #0
 80142da:	4418      	add	r0, r3
 80142dc:	2300      	movs	r3, #0
 80142de:	4288      	cmp	r0, r1
 80142e0:	d305      	bcc.n	80142ee <__copybits+0x40>
 80142e2:	bd70      	pop	{r4, r5, r6, pc}
 80142e4:	f853 6b04 	ldr.w	r6, [r3], #4
 80142e8:	f845 6f04 	str.w	r6, [r5, #4]!
 80142ec:	e7eb      	b.n	80142c6 <__copybits+0x18>
 80142ee:	f840 3b04 	str.w	r3, [r0], #4
 80142f2:	e7f4      	b.n	80142de <__copybits+0x30>

080142f4 <__any_on>:
 80142f4:	f100 0214 	add.w	r2, r0, #20
 80142f8:	6900      	ldr	r0, [r0, #16]
 80142fa:	114b      	asrs	r3, r1, #5
 80142fc:	4298      	cmp	r0, r3
 80142fe:	b510      	push	{r4, lr}
 8014300:	db11      	blt.n	8014326 <__any_on+0x32>
 8014302:	dd0a      	ble.n	801431a <__any_on+0x26>
 8014304:	f011 011f 	ands.w	r1, r1, #31
 8014308:	d007      	beq.n	801431a <__any_on+0x26>
 801430a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801430e:	fa24 f001 	lsr.w	r0, r4, r1
 8014312:	fa00 f101 	lsl.w	r1, r0, r1
 8014316:	428c      	cmp	r4, r1
 8014318:	d10b      	bne.n	8014332 <__any_on+0x3e>
 801431a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801431e:	4293      	cmp	r3, r2
 8014320:	d803      	bhi.n	801432a <__any_on+0x36>
 8014322:	2000      	movs	r0, #0
 8014324:	bd10      	pop	{r4, pc}
 8014326:	4603      	mov	r3, r0
 8014328:	e7f7      	b.n	801431a <__any_on+0x26>
 801432a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801432e:	2900      	cmp	r1, #0
 8014330:	d0f5      	beq.n	801431e <__any_on+0x2a>
 8014332:	2001      	movs	r0, #1
 8014334:	e7f6      	b.n	8014324 <__any_on+0x30>

08014336 <sulp>:
 8014336:	b570      	push	{r4, r5, r6, lr}
 8014338:	4604      	mov	r4, r0
 801433a:	460d      	mov	r5, r1
 801433c:	ec45 4b10 	vmov	d0, r4, r5
 8014340:	4616      	mov	r6, r2
 8014342:	f7ff feb7 	bl	80140b4 <__ulp>
 8014346:	ec51 0b10 	vmov	r0, r1, d0
 801434a:	b17e      	cbz	r6, 801436c <sulp+0x36>
 801434c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014350:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014354:	2b00      	cmp	r3, #0
 8014356:	dd09      	ble.n	801436c <sulp+0x36>
 8014358:	051b      	lsls	r3, r3, #20
 801435a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801435e:	2400      	movs	r4, #0
 8014360:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014364:	4622      	mov	r2, r4
 8014366:	462b      	mov	r3, r5
 8014368:	f7ec f96e 	bl	8000648 <__aeabi_dmul>
 801436c:	bd70      	pop	{r4, r5, r6, pc}
	...

08014370 <_strtod_l>:
 8014370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014374:	ed2d 8b02 	vpush	{d8}
 8014378:	b09b      	sub	sp, #108	; 0x6c
 801437a:	4604      	mov	r4, r0
 801437c:	9213      	str	r2, [sp, #76]	; 0x4c
 801437e:	2200      	movs	r2, #0
 8014380:	9216      	str	r2, [sp, #88]	; 0x58
 8014382:	460d      	mov	r5, r1
 8014384:	f04f 0800 	mov.w	r8, #0
 8014388:	f04f 0900 	mov.w	r9, #0
 801438c:	460a      	mov	r2, r1
 801438e:	9215      	str	r2, [sp, #84]	; 0x54
 8014390:	7811      	ldrb	r1, [r2, #0]
 8014392:	292b      	cmp	r1, #43	; 0x2b
 8014394:	d04c      	beq.n	8014430 <_strtod_l+0xc0>
 8014396:	d83a      	bhi.n	801440e <_strtod_l+0x9e>
 8014398:	290d      	cmp	r1, #13
 801439a:	d834      	bhi.n	8014406 <_strtod_l+0x96>
 801439c:	2908      	cmp	r1, #8
 801439e:	d834      	bhi.n	801440a <_strtod_l+0x9a>
 80143a0:	2900      	cmp	r1, #0
 80143a2:	d03d      	beq.n	8014420 <_strtod_l+0xb0>
 80143a4:	2200      	movs	r2, #0
 80143a6:	920a      	str	r2, [sp, #40]	; 0x28
 80143a8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80143aa:	7832      	ldrb	r2, [r6, #0]
 80143ac:	2a30      	cmp	r2, #48	; 0x30
 80143ae:	f040 80b4 	bne.w	801451a <_strtod_l+0x1aa>
 80143b2:	7872      	ldrb	r2, [r6, #1]
 80143b4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80143b8:	2a58      	cmp	r2, #88	; 0x58
 80143ba:	d170      	bne.n	801449e <_strtod_l+0x12e>
 80143bc:	9302      	str	r3, [sp, #8]
 80143be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143c0:	9301      	str	r3, [sp, #4]
 80143c2:	ab16      	add	r3, sp, #88	; 0x58
 80143c4:	9300      	str	r3, [sp, #0]
 80143c6:	4a8e      	ldr	r2, [pc, #568]	; (8014600 <_strtod_l+0x290>)
 80143c8:	ab17      	add	r3, sp, #92	; 0x5c
 80143ca:	a915      	add	r1, sp, #84	; 0x54
 80143cc:	4620      	mov	r0, r4
 80143ce:	f001 fcb3 	bl	8015d38 <__gethex>
 80143d2:	f010 070f 	ands.w	r7, r0, #15
 80143d6:	4605      	mov	r5, r0
 80143d8:	d005      	beq.n	80143e6 <_strtod_l+0x76>
 80143da:	2f06      	cmp	r7, #6
 80143dc:	d12a      	bne.n	8014434 <_strtod_l+0xc4>
 80143de:	3601      	adds	r6, #1
 80143e0:	2300      	movs	r3, #0
 80143e2:	9615      	str	r6, [sp, #84]	; 0x54
 80143e4:	930a      	str	r3, [sp, #40]	; 0x28
 80143e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	f040 857f 	bne.w	8014eec <_strtod_l+0xb7c>
 80143ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143f0:	b1db      	cbz	r3, 801442a <_strtod_l+0xba>
 80143f2:	4642      	mov	r2, r8
 80143f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80143f8:	ec43 2b10 	vmov	d0, r2, r3
 80143fc:	b01b      	add	sp, #108	; 0x6c
 80143fe:	ecbd 8b02 	vpop	{d8}
 8014402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014406:	2920      	cmp	r1, #32
 8014408:	d1cc      	bne.n	80143a4 <_strtod_l+0x34>
 801440a:	3201      	adds	r2, #1
 801440c:	e7bf      	b.n	801438e <_strtod_l+0x1e>
 801440e:	292d      	cmp	r1, #45	; 0x2d
 8014410:	d1c8      	bne.n	80143a4 <_strtod_l+0x34>
 8014412:	2101      	movs	r1, #1
 8014414:	910a      	str	r1, [sp, #40]	; 0x28
 8014416:	1c51      	adds	r1, r2, #1
 8014418:	9115      	str	r1, [sp, #84]	; 0x54
 801441a:	7852      	ldrb	r2, [r2, #1]
 801441c:	2a00      	cmp	r2, #0
 801441e:	d1c3      	bne.n	80143a8 <_strtod_l+0x38>
 8014420:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014422:	9515      	str	r5, [sp, #84]	; 0x54
 8014424:	2b00      	cmp	r3, #0
 8014426:	f040 855f 	bne.w	8014ee8 <_strtod_l+0xb78>
 801442a:	4642      	mov	r2, r8
 801442c:	464b      	mov	r3, r9
 801442e:	e7e3      	b.n	80143f8 <_strtod_l+0x88>
 8014430:	2100      	movs	r1, #0
 8014432:	e7ef      	b.n	8014414 <_strtod_l+0xa4>
 8014434:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014436:	b13a      	cbz	r2, 8014448 <_strtod_l+0xd8>
 8014438:	2135      	movs	r1, #53	; 0x35
 801443a:	a818      	add	r0, sp, #96	; 0x60
 801443c:	f7ff ff37 	bl	80142ae <__copybits>
 8014440:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014442:	4620      	mov	r0, r4
 8014444:	f7ff fb0a 	bl	8013a5c <_Bfree>
 8014448:	3f01      	subs	r7, #1
 801444a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801444c:	2f04      	cmp	r7, #4
 801444e:	d806      	bhi.n	801445e <_strtod_l+0xee>
 8014450:	e8df f007 	tbb	[pc, r7]
 8014454:	201d0314 	.word	0x201d0314
 8014458:	14          	.byte	0x14
 8014459:	00          	.byte	0x00
 801445a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801445e:	05e9      	lsls	r1, r5, #23
 8014460:	bf48      	it	mi
 8014462:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8014466:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801446a:	0d1b      	lsrs	r3, r3, #20
 801446c:	051b      	lsls	r3, r3, #20
 801446e:	2b00      	cmp	r3, #0
 8014470:	d1b9      	bne.n	80143e6 <_strtod_l+0x76>
 8014472:	f7fe faf7 	bl	8012a64 <__errno>
 8014476:	2322      	movs	r3, #34	; 0x22
 8014478:	6003      	str	r3, [r0, #0]
 801447a:	e7b4      	b.n	80143e6 <_strtod_l+0x76>
 801447c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8014480:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014484:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014488:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801448c:	e7e7      	b.n	801445e <_strtod_l+0xee>
 801448e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014608 <_strtod_l+0x298>
 8014492:	e7e4      	b.n	801445e <_strtod_l+0xee>
 8014494:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014498:	f04f 38ff 	mov.w	r8, #4294967295
 801449c:	e7df      	b.n	801445e <_strtod_l+0xee>
 801449e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80144a0:	1c5a      	adds	r2, r3, #1
 80144a2:	9215      	str	r2, [sp, #84]	; 0x54
 80144a4:	785b      	ldrb	r3, [r3, #1]
 80144a6:	2b30      	cmp	r3, #48	; 0x30
 80144a8:	d0f9      	beq.n	801449e <_strtod_l+0x12e>
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d09b      	beq.n	80143e6 <_strtod_l+0x76>
 80144ae:	2301      	movs	r3, #1
 80144b0:	f04f 0a00 	mov.w	sl, #0
 80144b4:	9304      	str	r3, [sp, #16]
 80144b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80144b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80144ba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80144be:	46d3      	mov	fp, sl
 80144c0:	220a      	movs	r2, #10
 80144c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80144c4:	7806      	ldrb	r6, [r0, #0]
 80144c6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80144ca:	b2d9      	uxtb	r1, r3
 80144cc:	2909      	cmp	r1, #9
 80144ce:	d926      	bls.n	801451e <_strtod_l+0x1ae>
 80144d0:	494c      	ldr	r1, [pc, #304]	; (8014604 <_strtod_l+0x294>)
 80144d2:	2201      	movs	r2, #1
 80144d4:	f7fe fa13 	bl	80128fe <strncmp>
 80144d8:	2800      	cmp	r0, #0
 80144da:	d030      	beq.n	801453e <_strtod_l+0x1ce>
 80144dc:	2000      	movs	r0, #0
 80144de:	4632      	mov	r2, r6
 80144e0:	9005      	str	r0, [sp, #20]
 80144e2:	465e      	mov	r6, fp
 80144e4:	4603      	mov	r3, r0
 80144e6:	2a65      	cmp	r2, #101	; 0x65
 80144e8:	d001      	beq.n	80144ee <_strtod_l+0x17e>
 80144ea:	2a45      	cmp	r2, #69	; 0x45
 80144ec:	d113      	bne.n	8014516 <_strtod_l+0x1a6>
 80144ee:	b91e      	cbnz	r6, 80144f8 <_strtod_l+0x188>
 80144f0:	9a04      	ldr	r2, [sp, #16]
 80144f2:	4302      	orrs	r2, r0
 80144f4:	d094      	beq.n	8014420 <_strtod_l+0xb0>
 80144f6:	2600      	movs	r6, #0
 80144f8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80144fa:	1c6a      	adds	r2, r5, #1
 80144fc:	9215      	str	r2, [sp, #84]	; 0x54
 80144fe:	786a      	ldrb	r2, [r5, #1]
 8014500:	2a2b      	cmp	r2, #43	; 0x2b
 8014502:	d074      	beq.n	80145ee <_strtod_l+0x27e>
 8014504:	2a2d      	cmp	r2, #45	; 0x2d
 8014506:	d078      	beq.n	80145fa <_strtod_l+0x28a>
 8014508:	f04f 0c00 	mov.w	ip, #0
 801450c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014510:	2909      	cmp	r1, #9
 8014512:	d97f      	bls.n	8014614 <_strtod_l+0x2a4>
 8014514:	9515      	str	r5, [sp, #84]	; 0x54
 8014516:	2700      	movs	r7, #0
 8014518:	e09e      	b.n	8014658 <_strtod_l+0x2e8>
 801451a:	2300      	movs	r3, #0
 801451c:	e7c8      	b.n	80144b0 <_strtod_l+0x140>
 801451e:	f1bb 0f08 	cmp.w	fp, #8
 8014522:	bfd8      	it	le
 8014524:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014526:	f100 0001 	add.w	r0, r0, #1
 801452a:	bfda      	itte	le
 801452c:	fb02 3301 	mlale	r3, r2, r1, r3
 8014530:	9309      	strle	r3, [sp, #36]	; 0x24
 8014532:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8014536:	f10b 0b01 	add.w	fp, fp, #1
 801453a:	9015      	str	r0, [sp, #84]	; 0x54
 801453c:	e7c1      	b.n	80144c2 <_strtod_l+0x152>
 801453e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014540:	1c5a      	adds	r2, r3, #1
 8014542:	9215      	str	r2, [sp, #84]	; 0x54
 8014544:	785a      	ldrb	r2, [r3, #1]
 8014546:	f1bb 0f00 	cmp.w	fp, #0
 801454a:	d037      	beq.n	80145bc <_strtod_l+0x24c>
 801454c:	9005      	str	r0, [sp, #20]
 801454e:	465e      	mov	r6, fp
 8014550:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014554:	2b09      	cmp	r3, #9
 8014556:	d912      	bls.n	801457e <_strtod_l+0x20e>
 8014558:	2301      	movs	r3, #1
 801455a:	e7c4      	b.n	80144e6 <_strtod_l+0x176>
 801455c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801455e:	1c5a      	adds	r2, r3, #1
 8014560:	9215      	str	r2, [sp, #84]	; 0x54
 8014562:	785a      	ldrb	r2, [r3, #1]
 8014564:	3001      	adds	r0, #1
 8014566:	2a30      	cmp	r2, #48	; 0x30
 8014568:	d0f8      	beq.n	801455c <_strtod_l+0x1ec>
 801456a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801456e:	2b08      	cmp	r3, #8
 8014570:	f200 84c1 	bhi.w	8014ef6 <_strtod_l+0xb86>
 8014574:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014576:	9005      	str	r0, [sp, #20]
 8014578:	2000      	movs	r0, #0
 801457a:	930b      	str	r3, [sp, #44]	; 0x2c
 801457c:	4606      	mov	r6, r0
 801457e:	3a30      	subs	r2, #48	; 0x30
 8014580:	f100 0301 	add.w	r3, r0, #1
 8014584:	d014      	beq.n	80145b0 <_strtod_l+0x240>
 8014586:	9905      	ldr	r1, [sp, #20]
 8014588:	4419      	add	r1, r3
 801458a:	9105      	str	r1, [sp, #20]
 801458c:	4633      	mov	r3, r6
 801458e:	eb00 0c06 	add.w	ip, r0, r6
 8014592:	210a      	movs	r1, #10
 8014594:	4563      	cmp	r3, ip
 8014596:	d113      	bne.n	80145c0 <_strtod_l+0x250>
 8014598:	1833      	adds	r3, r6, r0
 801459a:	2b08      	cmp	r3, #8
 801459c:	f106 0601 	add.w	r6, r6, #1
 80145a0:	4406      	add	r6, r0
 80145a2:	dc1a      	bgt.n	80145da <_strtod_l+0x26a>
 80145a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80145a6:	230a      	movs	r3, #10
 80145a8:	fb03 2301 	mla	r3, r3, r1, r2
 80145ac:	9309      	str	r3, [sp, #36]	; 0x24
 80145ae:	2300      	movs	r3, #0
 80145b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80145b2:	1c51      	adds	r1, r2, #1
 80145b4:	9115      	str	r1, [sp, #84]	; 0x54
 80145b6:	7852      	ldrb	r2, [r2, #1]
 80145b8:	4618      	mov	r0, r3
 80145ba:	e7c9      	b.n	8014550 <_strtod_l+0x1e0>
 80145bc:	4658      	mov	r0, fp
 80145be:	e7d2      	b.n	8014566 <_strtod_l+0x1f6>
 80145c0:	2b08      	cmp	r3, #8
 80145c2:	f103 0301 	add.w	r3, r3, #1
 80145c6:	dc03      	bgt.n	80145d0 <_strtod_l+0x260>
 80145c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80145ca:	434f      	muls	r7, r1
 80145cc:	9709      	str	r7, [sp, #36]	; 0x24
 80145ce:	e7e1      	b.n	8014594 <_strtod_l+0x224>
 80145d0:	2b10      	cmp	r3, #16
 80145d2:	bfd8      	it	le
 80145d4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80145d8:	e7dc      	b.n	8014594 <_strtod_l+0x224>
 80145da:	2e10      	cmp	r6, #16
 80145dc:	bfdc      	itt	le
 80145de:	230a      	movle	r3, #10
 80145e0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80145e4:	e7e3      	b.n	80145ae <_strtod_l+0x23e>
 80145e6:	2300      	movs	r3, #0
 80145e8:	9305      	str	r3, [sp, #20]
 80145ea:	2301      	movs	r3, #1
 80145ec:	e780      	b.n	80144f0 <_strtod_l+0x180>
 80145ee:	f04f 0c00 	mov.w	ip, #0
 80145f2:	1caa      	adds	r2, r5, #2
 80145f4:	9215      	str	r2, [sp, #84]	; 0x54
 80145f6:	78aa      	ldrb	r2, [r5, #2]
 80145f8:	e788      	b.n	801450c <_strtod_l+0x19c>
 80145fa:	f04f 0c01 	mov.w	ip, #1
 80145fe:	e7f8      	b.n	80145f2 <_strtod_l+0x282>
 8014600:	08018330 	.word	0x08018330
 8014604:	0801832c 	.word	0x0801832c
 8014608:	7ff00000 	.word	0x7ff00000
 801460c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801460e:	1c51      	adds	r1, r2, #1
 8014610:	9115      	str	r1, [sp, #84]	; 0x54
 8014612:	7852      	ldrb	r2, [r2, #1]
 8014614:	2a30      	cmp	r2, #48	; 0x30
 8014616:	d0f9      	beq.n	801460c <_strtod_l+0x29c>
 8014618:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801461c:	2908      	cmp	r1, #8
 801461e:	f63f af7a 	bhi.w	8014516 <_strtod_l+0x1a6>
 8014622:	3a30      	subs	r2, #48	; 0x30
 8014624:	9208      	str	r2, [sp, #32]
 8014626:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014628:	920c      	str	r2, [sp, #48]	; 0x30
 801462a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801462c:	1c57      	adds	r7, r2, #1
 801462e:	9715      	str	r7, [sp, #84]	; 0x54
 8014630:	7852      	ldrb	r2, [r2, #1]
 8014632:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014636:	f1be 0f09 	cmp.w	lr, #9
 801463a:	d938      	bls.n	80146ae <_strtod_l+0x33e>
 801463c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801463e:	1a7f      	subs	r7, r7, r1
 8014640:	2f08      	cmp	r7, #8
 8014642:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8014646:	dc03      	bgt.n	8014650 <_strtod_l+0x2e0>
 8014648:	9908      	ldr	r1, [sp, #32]
 801464a:	428f      	cmp	r7, r1
 801464c:	bfa8      	it	ge
 801464e:	460f      	movge	r7, r1
 8014650:	f1bc 0f00 	cmp.w	ip, #0
 8014654:	d000      	beq.n	8014658 <_strtod_l+0x2e8>
 8014656:	427f      	negs	r7, r7
 8014658:	2e00      	cmp	r6, #0
 801465a:	d14f      	bne.n	80146fc <_strtod_l+0x38c>
 801465c:	9904      	ldr	r1, [sp, #16]
 801465e:	4301      	orrs	r1, r0
 8014660:	f47f aec1 	bne.w	80143e6 <_strtod_l+0x76>
 8014664:	2b00      	cmp	r3, #0
 8014666:	f47f aedb 	bne.w	8014420 <_strtod_l+0xb0>
 801466a:	2a69      	cmp	r2, #105	; 0x69
 801466c:	d029      	beq.n	80146c2 <_strtod_l+0x352>
 801466e:	dc26      	bgt.n	80146be <_strtod_l+0x34e>
 8014670:	2a49      	cmp	r2, #73	; 0x49
 8014672:	d026      	beq.n	80146c2 <_strtod_l+0x352>
 8014674:	2a4e      	cmp	r2, #78	; 0x4e
 8014676:	f47f aed3 	bne.w	8014420 <_strtod_l+0xb0>
 801467a:	499b      	ldr	r1, [pc, #620]	; (80148e8 <_strtod_l+0x578>)
 801467c:	a815      	add	r0, sp, #84	; 0x54
 801467e:	f001 fd9b 	bl	80161b8 <__match>
 8014682:	2800      	cmp	r0, #0
 8014684:	f43f aecc 	beq.w	8014420 <_strtod_l+0xb0>
 8014688:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801468a:	781b      	ldrb	r3, [r3, #0]
 801468c:	2b28      	cmp	r3, #40	; 0x28
 801468e:	d12f      	bne.n	80146f0 <_strtod_l+0x380>
 8014690:	4996      	ldr	r1, [pc, #600]	; (80148ec <_strtod_l+0x57c>)
 8014692:	aa18      	add	r2, sp, #96	; 0x60
 8014694:	a815      	add	r0, sp, #84	; 0x54
 8014696:	f001 fda3 	bl	80161e0 <__hexnan>
 801469a:	2805      	cmp	r0, #5
 801469c:	d128      	bne.n	80146f0 <_strtod_l+0x380>
 801469e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80146a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80146a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80146a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80146ac:	e69b      	b.n	80143e6 <_strtod_l+0x76>
 80146ae:	9f08      	ldr	r7, [sp, #32]
 80146b0:	210a      	movs	r1, #10
 80146b2:	fb01 2107 	mla	r1, r1, r7, r2
 80146b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80146ba:	9208      	str	r2, [sp, #32]
 80146bc:	e7b5      	b.n	801462a <_strtod_l+0x2ba>
 80146be:	2a6e      	cmp	r2, #110	; 0x6e
 80146c0:	e7d9      	b.n	8014676 <_strtod_l+0x306>
 80146c2:	498b      	ldr	r1, [pc, #556]	; (80148f0 <_strtod_l+0x580>)
 80146c4:	a815      	add	r0, sp, #84	; 0x54
 80146c6:	f001 fd77 	bl	80161b8 <__match>
 80146ca:	2800      	cmp	r0, #0
 80146cc:	f43f aea8 	beq.w	8014420 <_strtod_l+0xb0>
 80146d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80146d2:	4988      	ldr	r1, [pc, #544]	; (80148f4 <_strtod_l+0x584>)
 80146d4:	3b01      	subs	r3, #1
 80146d6:	a815      	add	r0, sp, #84	; 0x54
 80146d8:	9315      	str	r3, [sp, #84]	; 0x54
 80146da:	f001 fd6d 	bl	80161b8 <__match>
 80146de:	b910      	cbnz	r0, 80146e6 <_strtod_l+0x376>
 80146e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80146e2:	3301      	adds	r3, #1
 80146e4:	9315      	str	r3, [sp, #84]	; 0x54
 80146e6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8014904 <_strtod_l+0x594>
 80146ea:	f04f 0800 	mov.w	r8, #0
 80146ee:	e67a      	b.n	80143e6 <_strtod_l+0x76>
 80146f0:	4881      	ldr	r0, [pc, #516]	; (80148f8 <_strtod_l+0x588>)
 80146f2:	f001 fa7d 	bl	8015bf0 <nan>
 80146f6:	ec59 8b10 	vmov	r8, r9, d0
 80146fa:	e674      	b.n	80143e6 <_strtod_l+0x76>
 80146fc:	9b05      	ldr	r3, [sp, #20]
 80146fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014700:	1afb      	subs	r3, r7, r3
 8014702:	f1bb 0f00 	cmp.w	fp, #0
 8014706:	bf08      	it	eq
 8014708:	46b3      	moveq	fp, r6
 801470a:	2e10      	cmp	r6, #16
 801470c:	9308      	str	r3, [sp, #32]
 801470e:	4635      	mov	r5, r6
 8014710:	bfa8      	it	ge
 8014712:	2510      	movge	r5, #16
 8014714:	f7eb ff1e 	bl	8000554 <__aeabi_ui2d>
 8014718:	2e09      	cmp	r6, #9
 801471a:	4680      	mov	r8, r0
 801471c:	4689      	mov	r9, r1
 801471e:	dd13      	ble.n	8014748 <_strtod_l+0x3d8>
 8014720:	4b76      	ldr	r3, [pc, #472]	; (80148fc <_strtod_l+0x58c>)
 8014722:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014726:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801472a:	f7eb ff8d 	bl	8000648 <__aeabi_dmul>
 801472e:	4680      	mov	r8, r0
 8014730:	4650      	mov	r0, sl
 8014732:	4689      	mov	r9, r1
 8014734:	f7eb ff0e 	bl	8000554 <__aeabi_ui2d>
 8014738:	4602      	mov	r2, r0
 801473a:	460b      	mov	r3, r1
 801473c:	4640      	mov	r0, r8
 801473e:	4649      	mov	r1, r9
 8014740:	f7eb fdcc 	bl	80002dc <__adddf3>
 8014744:	4680      	mov	r8, r0
 8014746:	4689      	mov	r9, r1
 8014748:	2e0f      	cmp	r6, #15
 801474a:	dc38      	bgt.n	80147be <_strtod_l+0x44e>
 801474c:	9b08      	ldr	r3, [sp, #32]
 801474e:	2b00      	cmp	r3, #0
 8014750:	f43f ae49 	beq.w	80143e6 <_strtod_l+0x76>
 8014754:	dd24      	ble.n	80147a0 <_strtod_l+0x430>
 8014756:	2b16      	cmp	r3, #22
 8014758:	dc0b      	bgt.n	8014772 <_strtod_l+0x402>
 801475a:	4968      	ldr	r1, [pc, #416]	; (80148fc <_strtod_l+0x58c>)
 801475c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014760:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014764:	4642      	mov	r2, r8
 8014766:	464b      	mov	r3, r9
 8014768:	f7eb ff6e 	bl	8000648 <__aeabi_dmul>
 801476c:	4680      	mov	r8, r0
 801476e:	4689      	mov	r9, r1
 8014770:	e639      	b.n	80143e6 <_strtod_l+0x76>
 8014772:	9a08      	ldr	r2, [sp, #32]
 8014774:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8014778:	4293      	cmp	r3, r2
 801477a:	db20      	blt.n	80147be <_strtod_l+0x44e>
 801477c:	4c5f      	ldr	r4, [pc, #380]	; (80148fc <_strtod_l+0x58c>)
 801477e:	f1c6 060f 	rsb	r6, r6, #15
 8014782:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8014786:	4642      	mov	r2, r8
 8014788:	464b      	mov	r3, r9
 801478a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801478e:	f7eb ff5b 	bl	8000648 <__aeabi_dmul>
 8014792:	9b08      	ldr	r3, [sp, #32]
 8014794:	1b9e      	subs	r6, r3, r6
 8014796:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801479a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801479e:	e7e3      	b.n	8014768 <_strtod_l+0x3f8>
 80147a0:	9b08      	ldr	r3, [sp, #32]
 80147a2:	3316      	adds	r3, #22
 80147a4:	db0b      	blt.n	80147be <_strtod_l+0x44e>
 80147a6:	9b05      	ldr	r3, [sp, #20]
 80147a8:	1bdf      	subs	r7, r3, r7
 80147aa:	4b54      	ldr	r3, [pc, #336]	; (80148fc <_strtod_l+0x58c>)
 80147ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80147b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80147b4:	4640      	mov	r0, r8
 80147b6:	4649      	mov	r1, r9
 80147b8:	f7ec f870 	bl	800089c <__aeabi_ddiv>
 80147bc:	e7d6      	b.n	801476c <_strtod_l+0x3fc>
 80147be:	9b08      	ldr	r3, [sp, #32]
 80147c0:	1b75      	subs	r5, r6, r5
 80147c2:	441d      	add	r5, r3
 80147c4:	2d00      	cmp	r5, #0
 80147c6:	dd70      	ble.n	80148aa <_strtod_l+0x53a>
 80147c8:	f015 030f 	ands.w	r3, r5, #15
 80147cc:	d00a      	beq.n	80147e4 <_strtod_l+0x474>
 80147ce:	494b      	ldr	r1, [pc, #300]	; (80148fc <_strtod_l+0x58c>)
 80147d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80147d4:	4642      	mov	r2, r8
 80147d6:	464b      	mov	r3, r9
 80147d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80147dc:	f7eb ff34 	bl	8000648 <__aeabi_dmul>
 80147e0:	4680      	mov	r8, r0
 80147e2:	4689      	mov	r9, r1
 80147e4:	f035 050f 	bics.w	r5, r5, #15
 80147e8:	d04d      	beq.n	8014886 <_strtod_l+0x516>
 80147ea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80147ee:	dd22      	ble.n	8014836 <_strtod_l+0x4c6>
 80147f0:	2500      	movs	r5, #0
 80147f2:	46ab      	mov	fp, r5
 80147f4:	9509      	str	r5, [sp, #36]	; 0x24
 80147f6:	9505      	str	r5, [sp, #20]
 80147f8:	2322      	movs	r3, #34	; 0x22
 80147fa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8014904 <_strtod_l+0x594>
 80147fe:	6023      	str	r3, [r4, #0]
 8014800:	f04f 0800 	mov.w	r8, #0
 8014804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014806:	2b00      	cmp	r3, #0
 8014808:	f43f aded 	beq.w	80143e6 <_strtod_l+0x76>
 801480c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801480e:	4620      	mov	r0, r4
 8014810:	f7ff f924 	bl	8013a5c <_Bfree>
 8014814:	9905      	ldr	r1, [sp, #20]
 8014816:	4620      	mov	r0, r4
 8014818:	f7ff f920 	bl	8013a5c <_Bfree>
 801481c:	4659      	mov	r1, fp
 801481e:	4620      	mov	r0, r4
 8014820:	f7ff f91c 	bl	8013a5c <_Bfree>
 8014824:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014826:	4620      	mov	r0, r4
 8014828:	f7ff f918 	bl	8013a5c <_Bfree>
 801482c:	4629      	mov	r1, r5
 801482e:	4620      	mov	r0, r4
 8014830:	f7ff f914 	bl	8013a5c <_Bfree>
 8014834:	e5d7      	b.n	80143e6 <_strtod_l+0x76>
 8014836:	4b32      	ldr	r3, [pc, #200]	; (8014900 <_strtod_l+0x590>)
 8014838:	9304      	str	r3, [sp, #16]
 801483a:	2300      	movs	r3, #0
 801483c:	112d      	asrs	r5, r5, #4
 801483e:	4640      	mov	r0, r8
 8014840:	4649      	mov	r1, r9
 8014842:	469a      	mov	sl, r3
 8014844:	2d01      	cmp	r5, #1
 8014846:	dc21      	bgt.n	801488c <_strtod_l+0x51c>
 8014848:	b10b      	cbz	r3, 801484e <_strtod_l+0x4de>
 801484a:	4680      	mov	r8, r0
 801484c:	4689      	mov	r9, r1
 801484e:	492c      	ldr	r1, [pc, #176]	; (8014900 <_strtod_l+0x590>)
 8014850:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8014854:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014858:	4642      	mov	r2, r8
 801485a:	464b      	mov	r3, r9
 801485c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014860:	f7eb fef2 	bl	8000648 <__aeabi_dmul>
 8014864:	4b27      	ldr	r3, [pc, #156]	; (8014904 <_strtod_l+0x594>)
 8014866:	460a      	mov	r2, r1
 8014868:	400b      	ands	r3, r1
 801486a:	4927      	ldr	r1, [pc, #156]	; (8014908 <_strtod_l+0x598>)
 801486c:	428b      	cmp	r3, r1
 801486e:	4680      	mov	r8, r0
 8014870:	d8be      	bhi.n	80147f0 <_strtod_l+0x480>
 8014872:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014876:	428b      	cmp	r3, r1
 8014878:	bf86      	itte	hi
 801487a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801490c <_strtod_l+0x59c>
 801487e:	f04f 38ff 	movhi.w	r8, #4294967295
 8014882:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8014886:	2300      	movs	r3, #0
 8014888:	9304      	str	r3, [sp, #16]
 801488a:	e07b      	b.n	8014984 <_strtod_l+0x614>
 801488c:	07ea      	lsls	r2, r5, #31
 801488e:	d505      	bpl.n	801489c <_strtod_l+0x52c>
 8014890:	9b04      	ldr	r3, [sp, #16]
 8014892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014896:	f7eb fed7 	bl	8000648 <__aeabi_dmul>
 801489a:	2301      	movs	r3, #1
 801489c:	9a04      	ldr	r2, [sp, #16]
 801489e:	3208      	adds	r2, #8
 80148a0:	f10a 0a01 	add.w	sl, sl, #1
 80148a4:	106d      	asrs	r5, r5, #1
 80148a6:	9204      	str	r2, [sp, #16]
 80148a8:	e7cc      	b.n	8014844 <_strtod_l+0x4d4>
 80148aa:	d0ec      	beq.n	8014886 <_strtod_l+0x516>
 80148ac:	426d      	negs	r5, r5
 80148ae:	f015 020f 	ands.w	r2, r5, #15
 80148b2:	d00a      	beq.n	80148ca <_strtod_l+0x55a>
 80148b4:	4b11      	ldr	r3, [pc, #68]	; (80148fc <_strtod_l+0x58c>)
 80148b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80148ba:	4640      	mov	r0, r8
 80148bc:	4649      	mov	r1, r9
 80148be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c2:	f7eb ffeb 	bl	800089c <__aeabi_ddiv>
 80148c6:	4680      	mov	r8, r0
 80148c8:	4689      	mov	r9, r1
 80148ca:	112d      	asrs	r5, r5, #4
 80148cc:	d0db      	beq.n	8014886 <_strtod_l+0x516>
 80148ce:	2d1f      	cmp	r5, #31
 80148d0:	dd1e      	ble.n	8014910 <_strtod_l+0x5a0>
 80148d2:	2500      	movs	r5, #0
 80148d4:	46ab      	mov	fp, r5
 80148d6:	9509      	str	r5, [sp, #36]	; 0x24
 80148d8:	9505      	str	r5, [sp, #20]
 80148da:	2322      	movs	r3, #34	; 0x22
 80148dc:	f04f 0800 	mov.w	r8, #0
 80148e0:	f04f 0900 	mov.w	r9, #0
 80148e4:	6023      	str	r3, [r4, #0]
 80148e6:	e78d      	b.n	8014804 <_strtod_l+0x494>
 80148e8:	0801811d 	.word	0x0801811d
 80148ec:	08018344 	.word	0x08018344
 80148f0:	08018115 	.word	0x08018115
 80148f4:	0801814a 	.word	0x0801814a
 80148f8:	080184f0 	.word	0x080184f0
 80148fc:	08018258 	.word	0x08018258
 8014900:	08018230 	.word	0x08018230
 8014904:	7ff00000 	.word	0x7ff00000
 8014908:	7ca00000 	.word	0x7ca00000
 801490c:	7fefffff 	.word	0x7fefffff
 8014910:	f015 0310 	ands.w	r3, r5, #16
 8014914:	bf18      	it	ne
 8014916:	236a      	movne	r3, #106	; 0x6a
 8014918:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8014cbc <_strtod_l+0x94c>
 801491c:	9304      	str	r3, [sp, #16]
 801491e:	4640      	mov	r0, r8
 8014920:	4649      	mov	r1, r9
 8014922:	2300      	movs	r3, #0
 8014924:	07ea      	lsls	r2, r5, #31
 8014926:	d504      	bpl.n	8014932 <_strtod_l+0x5c2>
 8014928:	e9da 2300 	ldrd	r2, r3, [sl]
 801492c:	f7eb fe8c 	bl	8000648 <__aeabi_dmul>
 8014930:	2301      	movs	r3, #1
 8014932:	106d      	asrs	r5, r5, #1
 8014934:	f10a 0a08 	add.w	sl, sl, #8
 8014938:	d1f4      	bne.n	8014924 <_strtod_l+0x5b4>
 801493a:	b10b      	cbz	r3, 8014940 <_strtod_l+0x5d0>
 801493c:	4680      	mov	r8, r0
 801493e:	4689      	mov	r9, r1
 8014940:	9b04      	ldr	r3, [sp, #16]
 8014942:	b1bb      	cbz	r3, 8014974 <_strtod_l+0x604>
 8014944:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8014948:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801494c:	2b00      	cmp	r3, #0
 801494e:	4649      	mov	r1, r9
 8014950:	dd10      	ble.n	8014974 <_strtod_l+0x604>
 8014952:	2b1f      	cmp	r3, #31
 8014954:	f340 811e 	ble.w	8014b94 <_strtod_l+0x824>
 8014958:	2b34      	cmp	r3, #52	; 0x34
 801495a:	bfde      	ittt	le
 801495c:	f04f 33ff 	movle.w	r3, #4294967295
 8014960:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8014964:	4093      	lslle	r3, r2
 8014966:	f04f 0800 	mov.w	r8, #0
 801496a:	bfcc      	ite	gt
 801496c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8014970:	ea03 0901 	andle.w	r9, r3, r1
 8014974:	2200      	movs	r2, #0
 8014976:	2300      	movs	r3, #0
 8014978:	4640      	mov	r0, r8
 801497a:	4649      	mov	r1, r9
 801497c:	f7ec f8cc 	bl	8000b18 <__aeabi_dcmpeq>
 8014980:	2800      	cmp	r0, #0
 8014982:	d1a6      	bne.n	80148d2 <_strtod_l+0x562>
 8014984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014986:	9300      	str	r3, [sp, #0]
 8014988:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801498a:	4633      	mov	r3, r6
 801498c:	465a      	mov	r2, fp
 801498e:	4620      	mov	r0, r4
 8014990:	f7ff f8cc 	bl	8013b2c <__s2b>
 8014994:	9009      	str	r0, [sp, #36]	; 0x24
 8014996:	2800      	cmp	r0, #0
 8014998:	f43f af2a 	beq.w	80147f0 <_strtod_l+0x480>
 801499c:	9a08      	ldr	r2, [sp, #32]
 801499e:	9b05      	ldr	r3, [sp, #20]
 80149a0:	2a00      	cmp	r2, #0
 80149a2:	eba3 0307 	sub.w	r3, r3, r7
 80149a6:	bfa8      	it	ge
 80149a8:	2300      	movge	r3, #0
 80149aa:	930c      	str	r3, [sp, #48]	; 0x30
 80149ac:	2500      	movs	r5, #0
 80149ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80149b2:	9312      	str	r3, [sp, #72]	; 0x48
 80149b4:	46ab      	mov	fp, r5
 80149b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149b8:	4620      	mov	r0, r4
 80149ba:	6859      	ldr	r1, [r3, #4]
 80149bc:	f7ff f80e 	bl	80139dc <_Balloc>
 80149c0:	9005      	str	r0, [sp, #20]
 80149c2:	2800      	cmp	r0, #0
 80149c4:	f43f af18 	beq.w	80147f8 <_strtod_l+0x488>
 80149c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149ca:	691a      	ldr	r2, [r3, #16]
 80149cc:	3202      	adds	r2, #2
 80149ce:	f103 010c 	add.w	r1, r3, #12
 80149d2:	0092      	lsls	r2, r2, #2
 80149d4:	300c      	adds	r0, #12
 80149d6:	f7fe f872 	bl	8012abe <memcpy>
 80149da:	ec49 8b10 	vmov	d0, r8, r9
 80149de:	aa18      	add	r2, sp, #96	; 0x60
 80149e0:	a917      	add	r1, sp, #92	; 0x5c
 80149e2:	4620      	mov	r0, r4
 80149e4:	f7ff fbd6 	bl	8014194 <__d2b>
 80149e8:	ec49 8b18 	vmov	d8, r8, r9
 80149ec:	9016      	str	r0, [sp, #88]	; 0x58
 80149ee:	2800      	cmp	r0, #0
 80149f0:	f43f af02 	beq.w	80147f8 <_strtod_l+0x488>
 80149f4:	2101      	movs	r1, #1
 80149f6:	4620      	mov	r0, r4
 80149f8:	f7ff f930 	bl	8013c5c <__i2b>
 80149fc:	4683      	mov	fp, r0
 80149fe:	2800      	cmp	r0, #0
 8014a00:	f43f aefa 	beq.w	80147f8 <_strtod_l+0x488>
 8014a04:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014a06:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014a08:	2e00      	cmp	r6, #0
 8014a0a:	bfab      	itete	ge
 8014a0c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8014a0e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8014a10:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8014a12:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8014a16:	bfac      	ite	ge
 8014a18:	eb06 0a03 	addge.w	sl, r6, r3
 8014a1c:	1b9f      	sublt	r7, r3, r6
 8014a1e:	9b04      	ldr	r3, [sp, #16]
 8014a20:	1af6      	subs	r6, r6, r3
 8014a22:	4416      	add	r6, r2
 8014a24:	4ba0      	ldr	r3, [pc, #640]	; (8014ca8 <_strtod_l+0x938>)
 8014a26:	3e01      	subs	r6, #1
 8014a28:	429e      	cmp	r6, r3
 8014a2a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014a2e:	f280 80c4 	bge.w	8014bba <_strtod_l+0x84a>
 8014a32:	1b9b      	subs	r3, r3, r6
 8014a34:	2b1f      	cmp	r3, #31
 8014a36:	eba2 0203 	sub.w	r2, r2, r3
 8014a3a:	f04f 0101 	mov.w	r1, #1
 8014a3e:	f300 80b0 	bgt.w	8014ba2 <_strtod_l+0x832>
 8014a42:	fa01 f303 	lsl.w	r3, r1, r3
 8014a46:	930e      	str	r3, [sp, #56]	; 0x38
 8014a48:	2300      	movs	r3, #0
 8014a4a:	930d      	str	r3, [sp, #52]	; 0x34
 8014a4c:	eb0a 0602 	add.w	r6, sl, r2
 8014a50:	9b04      	ldr	r3, [sp, #16]
 8014a52:	45b2      	cmp	sl, r6
 8014a54:	4417      	add	r7, r2
 8014a56:	441f      	add	r7, r3
 8014a58:	4653      	mov	r3, sl
 8014a5a:	bfa8      	it	ge
 8014a5c:	4633      	movge	r3, r6
 8014a5e:	42bb      	cmp	r3, r7
 8014a60:	bfa8      	it	ge
 8014a62:	463b      	movge	r3, r7
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	bfc2      	ittt	gt
 8014a68:	1af6      	subgt	r6, r6, r3
 8014a6a:	1aff      	subgt	r7, r7, r3
 8014a6c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8014a70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	dd17      	ble.n	8014aa6 <_strtod_l+0x736>
 8014a76:	4659      	mov	r1, fp
 8014a78:	461a      	mov	r2, r3
 8014a7a:	4620      	mov	r0, r4
 8014a7c:	f7ff f9ae 	bl	8013ddc <__pow5mult>
 8014a80:	4683      	mov	fp, r0
 8014a82:	2800      	cmp	r0, #0
 8014a84:	f43f aeb8 	beq.w	80147f8 <_strtod_l+0x488>
 8014a88:	4601      	mov	r1, r0
 8014a8a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014a8c:	4620      	mov	r0, r4
 8014a8e:	f7ff f8fb 	bl	8013c88 <__multiply>
 8014a92:	900b      	str	r0, [sp, #44]	; 0x2c
 8014a94:	2800      	cmp	r0, #0
 8014a96:	f43f aeaf 	beq.w	80147f8 <_strtod_l+0x488>
 8014a9a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014a9c:	4620      	mov	r0, r4
 8014a9e:	f7fe ffdd 	bl	8013a5c <_Bfree>
 8014aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014aa4:	9316      	str	r3, [sp, #88]	; 0x58
 8014aa6:	2e00      	cmp	r6, #0
 8014aa8:	f300 808c 	bgt.w	8014bc4 <_strtod_l+0x854>
 8014aac:	9b08      	ldr	r3, [sp, #32]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	dd08      	ble.n	8014ac4 <_strtod_l+0x754>
 8014ab2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014ab4:	9905      	ldr	r1, [sp, #20]
 8014ab6:	4620      	mov	r0, r4
 8014ab8:	f7ff f990 	bl	8013ddc <__pow5mult>
 8014abc:	9005      	str	r0, [sp, #20]
 8014abe:	2800      	cmp	r0, #0
 8014ac0:	f43f ae9a 	beq.w	80147f8 <_strtod_l+0x488>
 8014ac4:	2f00      	cmp	r7, #0
 8014ac6:	dd08      	ble.n	8014ada <_strtod_l+0x76a>
 8014ac8:	9905      	ldr	r1, [sp, #20]
 8014aca:	463a      	mov	r2, r7
 8014acc:	4620      	mov	r0, r4
 8014ace:	f7ff f9df 	bl	8013e90 <__lshift>
 8014ad2:	9005      	str	r0, [sp, #20]
 8014ad4:	2800      	cmp	r0, #0
 8014ad6:	f43f ae8f 	beq.w	80147f8 <_strtod_l+0x488>
 8014ada:	f1ba 0f00 	cmp.w	sl, #0
 8014ade:	dd08      	ble.n	8014af2 <_strtod_l+0x782>
 8014ae0:	4659      	mov	r1, fp
 8014ae2:	4652      	mov	r2, sl
 8014ae4:	4620      	mov	r0, r4
 8014ae6:	f7ff f9d3 	bl	8013e90 <__lshift>
 8014aea:	4683      	mov	fp, r0
 8014aec:	2800      	cmp	r0, #0
 8014aee:	f43f ae83 	beq.w	80147f8 <_strtod_l+0x488>
 8014af2:	9a05      	ldr	r2, [sp, #20]
 8014af4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014af6:	4620      	mov	r0, r4
 8014af8:	f7ff fa52 	bl	8013fa0 <__mdiff>
 8014afc:	4605      	mov	r5, r0
 8014afe:	2800      	cmp	r0, #0
 8014b00:	f43f ae7a 	beq.w	80147f8 <_strtod_l+0x488>
 8014b04:	68c3      	ldr	r3, [r0, #12]
 8014b06:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b08:	2300      	movs	r3, #0
 8014b0a:	60c3      	str	r3, [r0, #12]
 8014b0c:	4659      	mov	r1, fp
 8014b0e:	f7ff fa2b 	bl	8013f68 <__mcmp>
 8014b12:	2800      	cmp	r0, #0
 8014b14:	da60      	bge.n	8014bd8 <_strtod_l+0x868>
 8014b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b18:	ea53 0308 	orrs.w	r3, r3, r8
 8014b1c:	f040 8084 	bne.w	8014c28 <_strtod_l+0x8b8>
 8014b20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d17f      	bne.n	8014c28 <_strtod_l+0x8b8>
 8014b28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014b2c:	0d1b      	lsrs	r3, r3, #20
 8014b2e:	051b      	lsls	r3, r3, #20
 8014b30:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014b34:	d978      	bls.n	8014c28 <_strtod_l+0x8b8>
 8014b36:	696b      	ldr	r3, [r5, #20]
 8014b38:	b913      	cbnz	r3, 8014b40 <_strtod_l+0x7d0>
 8014b3a:	692b      	ldr	r3, [r5, #16]
 8014b3c:	2b01      	cmp	r3, #1
 8014b3e:	dd73      	ble.n	8014c28 <_strtod_l+0x8b8>
 8014b40:	4629      	mov	r1, r5
 8014b42:	2201      	movs	r2, #1
 8014b44:	4620      	mov	r0, r4
 8014b46:	f7ff f9a3 	bl	8013e90 <__lshift>
 8014b4a:	4659      	mov	r1, fp
 8014b4c:	4605      	mov	r5, r0
 8014b4e:	f7ff fa0b 	bl	8013f68 <__mcmp>
 8014b52:	2800      	cmp	r0, #0
 8014b54:	dd68      	ble.n	8014c28 <_strtod_l+0x8b8>
 8014b56:	9904      	ldr	r1, [sp, #16]
 8014b58:	4a54      	ldr	r2, [pc, #336]	; (8014cac <_strtod_l+0x93c>)
 8014b5a:	464b      	mov	r3, r9
 8014b5c:	2900      	cmp	r1, #0
 8014b5e:	f000 8084 	beq.w	8014c6a <_strtod_l+0x8fa>
 8014b62:	ea02 0109 	and.w	r1, r2, r9
 8014b66:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014b6a:	dc7e      	bgt.n	8014c6a <_strtod_l+0x8fa>
 8014b6c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014b70:	f77f aeb3 	ble.w	80148da <_strtod_l+0x56a>
 8014b74:	4b4e      	ldr	r3, [pc, #312]	; (8014cb0 <_strtod_l+0x940>)
 8014b76:	4640      	mov	r0, r8
 8014b78:	4649      	mov	r1, r9
 8014b7a:	2200      	movs	r2, #0
 8014b7c:	f7eb fd64 	bl	8000648 <__aeabi_dmul>
 8014b80:	4b4a      	ldr	r3, [pc, #296]	; (8014cac <_strtod_l+0x93c>)
 8014b82:	400b      	ands	r3, r1
 8014b84:	4680      	mov	r8, r0
 8014b86:	4689      	mov	r9, r1
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	f47f ae3f 	bne.w	801480c <_strtod_l+0x49c>
 8014b8e:	2322      	movs	r3, #34	; 0x22
 8014b90:	6023      	str	r3, [r4, #0]
 8014b92:	e63b      	b.n	801480c <_strtod_l+0x49c>
 8014b94:	f04f 32ff 	mov.w	r2, #4294967295
 8014b98:	fa02 f303 	lsl.w	r3, r2, r3
 8014b9c:	ea03 0808 	and.w	r8, r3, r8
 8014ba0:	e6e8      	b.n	8014974 <_strtod_l+0x604>
 8014ba2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014ba6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014baa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014bae:	36e2      	adds	r6, #226	; 0xe2
 8014bb0:	fa01 f306 	lsl.w	r3, r1, r6
 8014bb4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8014bb8:	e748      	b.n	8014a4c <_strtod_l+0x6dc>
 8014bba:	2100      	movs	r1, #0
 8014bbc:	2301      	movs	r3, #1
 8014bbe:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8014bc2:	e743      	b.n	8014a4c <_strtod_l+0x6dc>
 8014bc4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014bc6:	4632      	mov	r2, r6
 8014bc8:	4620      	mov	r0, r4
 8014bca:	f7ff f961 	bl	8013e90 <__lshift>
 8014bce:	9016      	str	r0, [sp, #88]	; 0x58
 8014bd0:	2800      	cmp	r0, #0
 8014bd2:	f47f af6b 	bne.w	8014aac <_strtod_l+0x73c>
 8014bd6:	e60f      	b.n	80147f8 <_strtod_l+0x488>
 8014bd8:	46ca      	mov	sl, r9
 8014bda:	d171      	bne.n	8014cc0 <_strtod_l+0x950>
 8014bdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014bde:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014be2:	b352      	cbz	r2, 8014c3a <_strtod_l+0x8ca>
 8014be4:	4a33      	ldr	r2, [pc, #204]	; (8014cb4 <_strtod_l+0x944>)
 8014be6:	4293      	cmp	r3, r2
 8014be8:	d12a      	bne.n	8014c40 <_strtod_l+0x8d0>
 8014bea:	9b04      	ldr	r3, [sp, #16]
 8014bec:	4641      	mov	r1, r8
 8014bee:	b1fb      	cbz	r3, 8014c30 <_strtod_l+0x8c0>
 8014bf0:	4b2e      	ldr	r3, [pc, #184]	; (8014cac <_strtod_l+0x93c>)
 8014bf2:	ea09 0303 	and.w	r3, r9, r3
 8014bf6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8014bfe:	d81a      	bhi.n	8014c36 <_strtod_l+0x8c6>
 8014c00:	0d1b      	lsrs	r3, r3, #20
 8014c02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014c06:	fa02 f303 	lsl.w	r3, r2, r3
 8014c0a:	4299      	cmp	r1, r3
 8014c0c:	d118      	bne.n	8014c40 <_strtod_l+0x8d0>
 8014c0e:	4b2a      	ldr	r3, [pc, #168]	; (8014cb8 <_strtod_l+0x948>)
 8014c10:	459a      	cmp	sl, r3
 8014c12:	d102      	bne.n	8014c1a <_strtod_l+0x8aa>
 8014c14:	3101      	adds	r1, #1
 8014c16:	f43f adef 	beq.w	80147f8 <_strtod_l+0x488>
 8014c1a:	4b24      	ldr	r3, [pc, #144]	; (8014cac <_strtod_l+0x93c>)
 8014c1c:	ea0a 0303 	and.w	r3, sl, r3
 8014c20:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8014c24:	f04f 0800 	mov.w	r8, #0
 8014c28:	9b04      	ldr	r3, [sp, #16]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d1a2      	bne.n	8014b74 <_strtod_l+0x804>
 8014c2e:	e5ed      	b.n	801480c <_strtod_l+0x49c>
 8014c30:	f04f 33ff 	mov.w	r3, #4294967295
 8014c34:	e7e9      	b.n	8014c0a <_strtod_l+0x89a>
 8014c36:	4613      	mov	r3, r2
 8014c38:	e7e7      	b.n	8014c0a <_strtod_l+0x89a>
 8014c3a:	ea53 0308 	orrs.w	r3, r3, r8
 8014c3e:	d08a      	beq.n	8014b56 <_strtod_l+0x7e6>
 8014c40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c42:	b1e3      	cbz	r3, 8014c7e <_strtod_l+0x90e>
 8014c44:	ea13 0f0a 	tst.w	r3, sl
 8014c48:	d0ee      	beq.n	8014c28 <_strtod_l+0x8b8>
 8014c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c4c:	9a04      	ldr	r2, [sp, #16]
 8014c4e:	4640      	mov	r0, r8
 8014c50:	4649      	mov	r1, r9
 8014c52:	b1c3      	cbz	r3, 8014c86 <_strtod_l+0x916>
 8014c54:	f7ff fb6f 	bl	8014336 <sulp>
 8014c58:	4602      	mov	r2, r0
 8014c5a:	460b      	mov	r3, r1
 8014c5c:	ec51 0b18 	vmov	r0, r1, d8
 8014c60:	f7eb fb3c 	bl	80002dc <__adddf3>
 8014c64:	4680      	mov	r8, r0
 8014c66:	4689      	mov	r9, r1
 8014c68:	e7de      	b.n	8014c28 <_strtod_l+0x8b8>
 8014c6a:	4013      	ands	r3, r2
 8014c6c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014c70:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8014c74:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8014c78:	f04f 38ff 	mov.w	r8, #4294967295
 8014c7c:	e7d4      	b.n	8014c28 <_strtod_l+0x8b8>
 8014c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c80:	ea13 0f08 	tst.w	r3, r8
 8014c84:	e7e0      	b.n	8014c48 <_strtod_l+0x8d8>
 8014c86:	f7ff fb56 	bl	8014336 <sulp>
 8014c8a:	4602      	mov	r2, r0
 8014c8c:	460b      	mov	r3, r1
 8014c8e:	ec51 0b18 	vmov	r0, r1, d8
 8014c92:	f7eb fb21 	bl	80002d8 <__aeabi_dsub>
 8014c96:	2200      	movs	r2, #0
 8014c98:	2300      	movs	r3, #0
 8014c9a:	4680      	mov	r8, r0
 8014c9c:	4689      	mov	r9, r1
 8014c9e:	f7eb ff3b 	bl	8000b18 <__aeabi_dcmpeq>
 8014ca2:	2800      	cmp	r0, #0
 8014ca4:	d0c0      	beq.n	8014c28 <_strtod_l+0x8b8>
 8014ca6:	e618      	b.n	80148da <_strtod_l+0x56a>
 8014ca8:	fffffc02 	.word	0xfffffc02
 8014cac:	7ff00000 	.word	0x7ff00000
 8014cb0:	39500000 	.word	0x39500000
 8014cb4:	000fffff 	.word	0x000fffff
 8014cb8:	7fefffff 	.word	0x7fefffff
 8014cbc:	08018358 	.word	0x08018358
 8014cc0:	4659      	mov	r1, fp
 8014cc2:	4628      	mov	r0, r5
 8014cc4:	f7ff fac0 	bl	8014248 <__ratio>
 8014cc8:	ec57 6b10 	vmov	r6, r7, d0
 8014ccc:	ee10 0a10 	vmov	r0, s0
 8014cd0:	2200      	movs	r2, #0
 8014cd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014cd6:	4639      	mov	r1, r7
 8014cd8:	f7eb ff32 	bl	8000b40 <__aeabi_dcmple>
 8014cdc:	2800      	cmp	r0, #0
 8014cde:	d071      	beq.n	8014dc4 <_strtod_l+0xa54>
 8014ce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d17c      	bne.n	8014de0 <_strtod_l+0xa70>
 8014ce6:	f1b8 0f00 	cmp.w	r8, #0
 8014cea:	d15a      	bne.n	8014da2 <_strtod_l+0xa32>
 8014cec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d15d      	bne.n	8014db0 <_strtod_l+0xa40>
 8014cf4:	4b90      	ldr	r3, [pc, #576]	; (8014f38 <_strtod_l+0xbc8>)
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	4630      	mov	r0, r6
 8014cfa:	4639      	mov	r1, r7
 8014cfc:	f7eb ff16 	bl	8000b2c <__aeabi_dcmplt>
 8014d00:	2800      	cmp	r0, #0
 8014d02:	d15c      	bne.n	8014dbe <_strtod_l+0xa4e>
 8014d04:	4630      	mov	r0, r6
 8014d06:	4639      	mov	r1, r7
 8014d08:	4b8c      	ldr	r3, [pc, #560]	; (8014f3c <_strtod_l+0xbcc>)
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	f7eb fc9c 	bl	8000648 <__aeabi_dmul>
 8014d10:	4606      	mov	r6, r0
 8014d12:	460f      	mov	r7, r1
 8014d14:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014d18:	9606      	str	r6, [sp, #24]
 8014d1a:	9307      	str	r3, [sp, #28]
 8014d1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014d20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8014d24:	4b86      	ldr	r3, [pc, #536]	; (8014f40 <_strtod_l+0xbd0>)
 8014d26:	ea0a 0303 	and.w	r3, sl, r3
 8014d2a:	930d      	str	r3, [sp, #52]	; 0x34
 8014d2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014d2e:	4b85      	ldr	r3, [pc, #532]	; (8014f44 <_strtod_l+0xbd4>)
 8014d30:	429a      	cmp	r2, r3
 8014d32:	f040 8090 	bne.w	8014e56 <_strtod_l+0xae6>
 8014d36:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8014d3a:	ec49 8b10 	vmov	d0, r8, r9
 8014d3e:	f7ff f9b9 	bl	80140b4 <__ulp>
 8014d42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014d46:	ec51 0b10 	vmov	r0, r1, d0
 8014d4a:	f7eb fc7d 	bl	8000648 <__aeabi_dmul>
 8014d4e:	4642      	mov	r2, r8
 8014d50:	464b      	mov	r3, r9
 8014d52:	f7eb fac3 	bl	80002dc <__adddf3>
 8014d56:	460b      	mov	r3, r1
 8014d58:	4979      	ldr	r1, [pc, #484]	; (8014f40 <_strtod_l+0xbd0>)
 8014d5a:	4a7b      	ldr	r2, [pc, #492]	; (8014f48 <_strtod_l+0xbd8>)
 8014d5c:	4019      	ands	r1, r3
 8014d5e:	4291      	cmp	r1, r2
 8014d60:	4680      	mov	r8, r0
 8014d62:	d944      	bls.n	8014dee <_strtod_l+0xa7e>
 8014d64:	ee18 2a90 	vmov	r2, s17
 8014d68:	4b78      	ldr	r3, [pc, #480]	; (8014f4c <_strtod_l+0xbdc>)
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	d104      	bne.n	8014d78 <_strtod_l+0xa08>
 8014d6e:	ee18 3a10 	vmov	r3, s16
 8014d72:	3301      	adds	r3, #1
 8014d74:	f43f ad40 	beq.w	80147f8 <_strtod_l+0x488>
 8014d78:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8014f4c <_strtod_l+0xbdc>
 8014d7c:	f04f 38ff 	mov.w	r8, #4294967295
 8014d80:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014d82:	4620      	mov	r0, r4
 8014d84:	f7fe fe6a 	bl	8013a5c <_Bfree>
 8014d88:	9905      	ldr	r1, [sp, #20]
 8014d8a:	4620      	mov	r0, r4
 8014d8c:	f7fe fe66 	bl	8013a5c <_Bfree>
 8014d90:	4659      	mov	r1, fp
 8014d92:	4620      	mov	r0, r4
 8014d94:	f7fe fe62 	bl	8013a5c <_Bfree>
 8014d98:	4629      	mov	r1, r5
 8014d9a:	4620      	mov	r0, r4
 8014d9c:	f7fe fe5e 	bl	8013a5c <_Bfree>
 8014da0:	e609      	b.n	80149b6 <_strtod_l+0x646>
 8014da2:	f1b8 0f01 	cmp.w	r8, #1
 8014da6:	d103      	bne.n	8014db0 <_strtod_l+0xa40>
 8014da8:	f1b9 0f00 	cmp.w	r9, #0
 8014dac:	f43f ad95 	beq.w	80148da <_strtod_l+0x56a>
 8014db0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8014f08 <_strtod_l+0xb98>
 8014db4:	4f60      	ldr	r7, [pc, #384]	; (8014f38 <_strtod_l+0xbc8>)
 8014db6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014dba:	2600      	movs	r6, #0
 8014dbc:	e7ae      	b.n	8014d1c <_strtod_l+0x9ac>
 8014dbe:	4f5f      	ldr	r7, [pc, #380]	; (8014f3c <_strtod_l+0xbcc>)
 8014dc0:	2600      	movs	r6, #0
 8014dc2:	e7a7      	b.n	8014d14 <_strtod_l+0x9a4>
 8014dc4:	4b5d      	ldr	r3, [pc, #372]	; (8014f3c <_strtod_l+0xbcc>)
 8014dc6:	4630      	mov	r0, r6
 8014dc8:	4639      	mov	r1, r7
 8014dca:	2200      	movs	r2, #0
 8014dcc:	f7eb fc3c 	bl	8000648 <__aeabi_dmul>
 8014dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014dd2:	4606      	mov	r6, r0
 8014dd4:	460f      	mov	r7, r1
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d09c      	beq.n	8014d14 <_strtod_l+0x9a4>
 8014dda:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8014dde:	e79d      	b.n	8014d1c <_strtod_l+0x9ac>
 8014de0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8014f10 <_strtod_l+0xba0>
 8014de4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014de8:	ec57 6b17 	vmov	r6, r7, d7
 8014dec:	e796      	b.n	8014d1c <_strtod_l+0x9ac>
 8014dee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8014df2:	9b04      	ldr	r3, [sp, #16]
 8014df4:	46ca      	mov	sl, r9
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d1c2      	bne.n	8014d80 <_strtod_l+0xa10>
 8014dfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014dfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014e00:	0d1b      	lsrs	r3, r3, #20
 8014e02:	051b      	lsls	r3, r3, #20
 8014e04:	429a      	cmp	r2, r3
 8014e06:	d1bb      	bne.n	8014d80 <_strtod_l+0xa10>
 8014e08:	4630      	mov	r0, r6
 8014e0a:	4639      	mov	r1, r7
 8014e0c:	f7eb ffcc 	bl	8000da8 <__aeabi_d2lz>
 8014e10:	f7eb fbec 	bl	80005ec <__aeabi_l2d>
 8014e14:	4602      	mov	r2, r0
 8014e16:	460b      	mov	r3, r1
 8014e18:	4630      	mov	r0, r6
 8014e1a:	4639      	mov	r1, r7
 8014e1c:	f7eb fa5c 	bl	80002d8 <__aeabi_dsub>
 8014e20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014e22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014e26:	ea43 0308 	orr.w	r3, r3, r8
 8014e2a:	4313      	orrs	r3, r2
 8014e2c:	4606      	mov	r6, r0
 8014e2e:	460f      	mov	r7, r1
 8014e30:	d054      	beq.n	8014edc <_strtod_l+0xb6c>
 8014e32:	a339      	add	r3, pc, #228	; (adr r3, 8014f18 <_strtod_l+0xba8>)
 8014e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e38:	f7eb fe78 	bl	8000b2c <__aeabi_dcmplt>
 8014e3c:	2800      	cmp	r0, #0
 8014e3e:	f47f ace5 	bne.w	801480c <_strtod_l+0x49c>
 8014e42:	a337      	add	r3, pc, #220	; (adr r3, 8014f20 <_strtod_l+0xbb0>)
 8014e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e48:	4630      	mov	r0, r6
 8014e4a:	4639      	mov	r1, r7
 8014e4c:	f7eb fe8c 	bl	8000b68 <__aeabi_dcmpgt>
 8014e50:	2800      	cmp	r0, #0
 8014e52:	d095      	beq.n	8014d80 <_strtod_l+0xa10>
 8014e54:	e4da      	b.n	801480c <_strtod_l+0x49c>
 8014e56:	9b04      	ldr	r3, [sp, #16]
 8014e58:	b333      	cbz	r3, 8014ea8 <_strtod_l+0xb38>
 8014e5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e5c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014e60:	d822      	bhi.n	8014ea8 <_strtod_l+0xb38>
 8014e62:	a331      	add	r3, pc, #196	; (adr r3, 8014f28 <_strtod_l+0xbb8>)
 8014e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e68:	4630      	mov	r0, r6
 8014e6a:	4639      	mov	r1, r7
 8014e6c:	f7eb fe68 	bl	8000b40 <__aeabi_dcmple>
 8014e70:	b1a0      	cbz	r0, 8014e9c <_strtod_l+0xb2c>
 8014e72:	4639      	mov	r1, r7
 8014e74:	4630      	mov	r0, r6
 8014e76:	f7eb febf 	bl	8000bf8 <__aeabi_d2uiz>
 8014e7a:	2801      	cmp	r0, #1
 8014e7c:	bf38      	it	cc
 8014e7e:	2001      	movcc	r0, #1
 8014e80:	f7eb fb68 	bl	8000554 <__aeabi_ui2d>
 8014e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e86:	4606      	mov	r6, r0
 8014e88:	460f      	mov	r7, r1
 8014e8a:	bb23      	cbnz	r3, 8014ed6 <_strtod_l+0xb66>
 8014e8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014e90:	9010      	str	r0, [sp, #64]	; 0x40
 8014e92:	9311      	str	r3, [sp, #68]	; 0x44
 8014e94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014e98:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8014e9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014e9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014ea0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014ea4:	1a9b      	subs	r3, r3, r2
 8014ea6:	930f      	str	r3, [sp, #60]	; 0x3c
 8014ea8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8014eac:	eeb0 0a48 	vmov.f32	s0, s16
 8014eb0:	eef0 0a68 	vmov.f32	s1, s17
 8014eb4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8014eb8:	f7ff f8fc 	bl	80140b4 <__ulp>
 8014ebc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8014ec0:	ec53 2b10 	vmov	r2, r3, d0
 8014ec4:	f7eb fbc0 	bl	8000648 <__aeabi_dmul>
 8014ec8:	ec53 2b18 	vmov	r2, r3, d8
 8014ecc:	f7eb fa06 	bl	80002dc <__adddf3>
 8014ed0:	4680      	mov	r8, r0
 8014ed2:	4689      	mov	r9, r1
 8014ed4:	e78d      	b.n	8014df2 <_strtod_l+0xa82>
 8014ed6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8014eda:	e7db      	b.n	8014e94 <_strtod_l+0xb24>
 8014edc:	a314      	add	r3, pc, #80	; (adr r3, 8014f30 <_strtod_l+0xbc0>)
 8014ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ee2:	f7eb fe23 	bl	8000b2c <__aeabi_dcmplt>
 8014ee6:	e7b3      	b.n	8014e50 <_strtod_l+0xae0>
 8014ee8:	2300      	movs	r3, #0
 8014eea:	930a      	str	r3, [sp, #40]	; 0x28
 8014eec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014eee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014ef0:	6013      	str	r3, [r2, #0]
 8014ef2:	f7ff ba7c 	b.w	80143ee <_strtod_l+0x7e>
 8014ef6:	2a65      	cmp	r2, #101	; 0x65
 8014ef8:	f43f ab75 	beq.w	80145e6 <_strtod_l+0x276>
 8014efc:	2a45      	cmp	r2, #69	; 0x45
 8014efe:	f43f ab72 	beq.w	80145e6 <_strtod_l+0x276>
 8014f02:	2301      	movs	r3, #1
 8014f04:	f7ff bbaa 	b.w	801465c <_strtod_l+0x2ec>
 8014f08:	00000000 	.word	0x00000000
 8014f0c:	bff00000 	.word	0xbff00000
 8014f10:	00000000 	.word	0x00000000
 8014f14:	3ff00000 	.word	0x3ff00000
 8014f18:	94a03595 	.word	0x94a03595
 8014f1c:	3fdfffff 	.word	0x3fdfffff
 8014f20:	35afe535 	.word	0x35afe535
 8014f24:	3fe00000 	.word	0x3fe00000
 8014f28:	ffc00000 	.word	0xffc00000
 8014f2c:	41dfffff 	.word	0x41dfffff
 8014f30:	94a03595 	.word	0x94a03595
 8014f34:	3fcfffff 	.word	0x3fcfffff
 8014f38:	3ff00000 	.word	0x3ff00000
 8014f3c:	3fe00000 	.word	0x3fe00000
 8014f40:	7ff00000 	.word	0x7ff00000
 8014f44:	7fe00000 	.word	0x7fe00000
 8014f48:	7c9fffff 	.word	0x7c9fffff
 8014f4c:	7fefffff 	.word	0x7fefffff

08014f50 <_strtod_r>:
 8014f50:	4b01      	ldr	r3, [pc, #4]	; (8014f58 <_strtod_r+0x8>)
 8014f52:	f7ff ba0d 	b.w	8014370 <_strtod_l>
 8014f56:	bf00      	nop
 8014f58:	20000074 	.word	0x20000074

08014f5c <_strtol_l.constprop.0>:
 8014f5c:	2b01      	cmp	r3, #1
 8014f5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f62:	d001      	beq.n	8014f68 <_strtol_l.constprop.0+0xc>
 8014f64:	2b24      	cmp	r3, #36	; 0x24
 8014f66:	d906      	bls.n	8014f76 <_strtol_l.constprop.0+0x1a>
 8014f68:	f7fd fd7c 	bl	8012a64 <__errno>
 8014f6c:	2316      	movs	r3, #22
 8014f6e:	6003      	str	r3, [r0, #0]
 8014f70:	2000      	movs	r0, #0
 8014f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f76:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801505c <_strtol_l.constprop.0+0x100>
 8014f7a:	460d      	mov	r5, r1
 8014f7c:	462e      	mov	r6, r5
 8014f7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f82:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8014f86:	f017 0708 	ands.w	r7, r7, #8
 8014f8a:	d1f7      	bne.n	8014f7c <_strtol_l.constprop.0+0x20>
 8014f8c:	2c2d      	cmp	r4, #45	; 0x2d
 8014f8e:	d132      	bne.n	8014ff6 <_strtol_l.constprop.0+0x9a>
 8014f90:	782c      	ldrb	r4, [r5, #0]
 8014f92:	2701      	movs	r7, #1
 8014f94:	1cb5      	adds	r5, r6, #2
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d05b      	beq.n	8015052 <_strtol_l.constprop.0+0xf6>
 8014f9a:	2b10      	cmp	r3, #16
 8014f9c:	d109      	bne.n	8014fb2 <_strtol_l.constprop.0+0x56>
 8014f9e:	2c30      	cmp	r4, #48	; 0x30
 8014fa0:	d107      	bne.n	8014fb2 <_strtol_l.constprop.0+0x56>
 8014fa2:	782c      	ldrb	r4, [r5, #0]
 8014fa4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014fa8:	2c58      	cmp	r4, #88	; 0x58
 8014faa:	d14d      	bne.n	8015048 <_strtol_l.constprop.0+0xec>
 8014fac:	786c      	ldrb	r4, [r5, #1]
 8014fae:	2310      	movs	r3, #16
 8014fb0:	3502      	adds	r5, #2
 8014fb2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014fb6:	f108 38ff 	add.w	r8, r8, #4294967295
 8014fba:	f04f 0e00 	mov.w	lr, #0
 8014fbe:	fbb8 f9f3 	udiv	r9, r8, r3
 8014fc2:	4676      	mov	r6, lr
 8014fc4:	fb03 8a19 	mls	sl, r3, r9, r8
 8014fc8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014fcc:	f1bc 0f09 	cmp.w	ip, #9
 8014fd0:	d816      	bhi.n	8015000 <_strtol_l.constprop.0+0xa4>
 8014fd2:	4664      	mov	r4, ip
 8014fd4:	42a3      	cmp	r3, r4
 8014fd6:	dd24      	ble.n	8015022 <_strtol_l.constprop.0+0xc6>
 8014fd8:	f1be 3fff 	cmp.w	lr, #4294967295
 8014fdc:	d008      	beq.n	8014ff0 <_strtol_l.constprop.0+0x94>
 8014fde:	45b1      	cmp	r9, r6
 8014fe0:	d31c      	bcc.n	801501c <_strtol_l.constprop.0+0xc0>
 8014fe2:	d101      	bne.n	8014fe8 <_strtol_l.constprop.0+0x8c>
 8014fe4:	45a2      	cmp	sl, r4
 8014fe6:	db19      	blt.n	801501c <_strtol_l.constprop.0+0xc0>
 8014fe8:	fb06 4603 	mla	r6, r6, r3, r4
 8014fec:	f04f 0e01 	mov.w	lr, #1
 8014ff0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014ff4:	e7e8      	b.n	8014fc8 <_strtol_l.constprop.0+0x6c>
 8014ff6:	2c2b      	cmp	r4, #43	; 0x2b
 8014ff8:	bf04      	itt	eq
 8014ffa:	782c      	ldrbeq	r4, [r5, #0]
 8014ffc:	1cb5      	addeq	r5, r6, #2
 8014ffe:	e7ca      	b.n	8014f96 <_strtol_l.constprop.0+0x3a>
 8015000:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015004:	f1bc 0f19 	cmp.w	ip, #25
 8015008:	d801      	bhi.n	801500e <_strtol_l.constprop.0+0xb2>
 801500a:	3c37      	subs	r4, #55	; 0x37
 801500c:	e7e2      	b.n	8014fd4 <_strtol_l.constprop.0+0x78>
 801500e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015012:	f1bc 0f19 	cmp.w	ip, #25
 8015016:	d804      	bhi.n	8015022 <_strtol_l.constprop.0+0xc6>
 8015018:	3c57      	subs	r4, #87	; 0x57
 801501a:	e7db      	b.n	8014fd4 <_strtol_l.constprop.0+0x78>
 801501c:	f04f 3eff 	mov.w	lr, #4294967295
 8015020:	e7e6      	b.n	8014ff0 <_strtol_l.constprop.0+0x94>
 8015022:	f1be 3fff 	cmp.w	lr, #4294967295
 8015026:	d105      	bne.n	8015034 <_strtol_l.constprop.0+0xd8>
 8015028:	2322      	movs	r3, #34	; 0x22
 801502a:	6003      	str	r3, [r0, #0]
 801502c:	4646      	mov	r6, r8
 801502e:	b942      	cbnz	r2, 8015042 <_strtol_l.constprop.0+0xe6>
 8015030:	4630      	mov	r0, r6
 8015032:	e79e      	b.n	8014f72 <_strtol_l.constprop.0+0x16>
 8015034:	b107      	cbz	r7, 8015038 <_strtol_l.constprop.0+0xdc>
 8015036:	4276      	negs	r6, r6
 8015038:	2a00      	cmp	r2, #0
 801503a:	d0f9      	beq.n	8015030 <_strtol_l.constprop.0+0xd4>
 801503c:	f1be 0f00 	cmp.w	lr, #0
 8015040:	d000      	beq.n	8015044 <_strtol_l.constprop.0+0xe8>
 8015042:	1e69      	subs	r1, r5, #1
 8015044:	6011      	str	r1, [r2, #0]
 8015046:	e7f3      	b.n	8015030 <_strtol_l.constprop.0+0xd4>
 8015048:	2430      	movs	r4, #48	; 0x30
 801504a:	2b00      	cmp	r3, #0
 801504c:	d1b1      	bne.n	8014fb2 <_strtol_l.constprop.0+0x56>
 801504e:	2308      	movs	r3, #8
 8015050:	e7af      	b.n	8014fb2 <_strtol_l.constprop.0+0x56>
 8015052:	2c30      	cmp	r4, #48	; 0x30
 8015054:	d0a5      	beq.n	8014fa2 <_strtol_l.constprop.0+0x46>
 8015056:	230a      	movs	r3, #10
 8015058:	e7ab      	b.n	8014fb2 <_strtol_l.constprop.0+0x56>
 801505a:	bf00      	nop
 801505c:	08018381 	.word	0x08018381

08015060 <_strtol_r>:
 8015060:	f7ff bf7c 	b.w	8014f5c <_strtol_l.constprop.0>

08015064 <__ssputs_r>:
 8015064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015068:	688e      	ldr	r6, [r1, #8]
 801506a:	461f      	mov	r7, r3
 801506c:	42be      	cmp	r6, r7
 801506e:	680b      	ldr	r3, [r1, #0]
 8015070:	4682      	mov	sl, r0
 8015072:	460c      	mov	r4, r1
 8015074:	4690      	mov	r8, r2
 8015076:	d82c      	bhi.n	80150d2 <__ssputs_r+0x6e>
 8015078:	898a      	ldrh	r2, [r1, #12]
 801507a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801507e:	d026      	beq.n	80150ce <__ssputs_r+0x6a>
 8015080:	6965      	ldr	r5, [r4, #20]
 8015082:	6909      	ldr	r1, [r1, #16]
 8015084:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015088:	eba3 0901 	sub.w	r9, r3, r1
 801508c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015090:	1c7b      	adds	r3, r7, #1
 8015092:	444b      	add	r3, r9
 8015094:	106d      	asrs	r5, r5, #1
 8015096:	429d      	cmp	r5, r3
 8015098:	bf38      	it	cc
 801509a:	461d      	movcc	r5, r3
 801509c:	0553      	lsls	r3, r2, #21
 801509e:	d527      	bpl.n	80150f0 <__ssputs_r+0x8c>
 80150a0:	4629      	mov	r1, r5
 80150a2:	f7fe fc0f 	bl	80138c4 <_malloc_r>
 80150a6:	4606      	mov	r6, r0
 80150a8:	b360      	cbz	r0, 8015104 <__ssputs_r+0xa0>
 80150aa:	6921      	ldr	r1, [r4, #16]
 80150ac:	464a      	mov	r2, r9
 80150ae:	f7fd fd06 	bl	8012abe <memcpy>
 80150b2:	89a3      	ldrh	r3, [r4, #12]
 80150b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80150b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150bc:	81a3      	strh	r3, [r4, #12]
 80150be:	6126      	str	r6, [r4, #16]
 80150c0:	6165      	str	r5, [r4, #20]
 80150c2:	444e      	add	r6, r9
 80150c4:	eba5 0509 	sub.w	r5, r5, r9
 80150c8:	6026      	str	r6, [r4, #0]
 80150ca:	60a5      	str	r5, [r4, #8]
 80150cc:	463e      	mov	r6, r7
 80150ce:	42be      	cmp	r6, r7
 80150d0:	d900      	bls.n	80150d4 <__ssputs_r+0x70>
 80150d2:	463e      	mov	r6, r7
 80150d4:	6820      	ldr	r0, [r4, #0]
 80150d6:	4632      	mov	r2, r6
 80150d8:	4641      	mov	r1, r8
 80150da:	f000 fd5c 	bl	8015b96 <memmove>
 80150de:	68a3      	ldr	r3, [r4, #8]
 80150e0:	1b9b      	subs	r3, r3, r6
 80150e2:	60a3      	str	r3, [r4, #8]
 80150e4:	6823      	ldr	r3, [r4, #0]
 80150e6:	4433      	add	r3, r6
 80150e8:	6023      	str	r3, [r4, #0]
 80150ea:	2000      	movs	r0, #0
 80150ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150f0:	462a      	mov	r2, r5
 80150f2:	f001 f922 	bl	801633a <_realloc_r>
 80150f6:	4606      	mov	r6, r0
 80150f8:	2800      	cmp	r0, #0
 80150fa:	d1e0      	bne.n	80150be <__ssputs_r+0x5a>
 80150fc:	6921      	ldr	r1, [r4, #16]
 80150fe:	4650      	mov	r0, sl
 8015100:	f7fe fb6c 	bl	80137dc <_free_r>
 8015104:	230c      	movs	r3, #12
 8015106:	f8ca 3000 	str.w	r3, [sl]
 801510a:	89a3      	ldrh	r3, [r4, #12]
 801510c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015110:	81a3      	strh	r3, [r4, #12]
 8015112:	f04f 30ff 	mov.w	r0, #4294967295
 8015116:	e7e9      	b.n	80150ec <__ssputs_r+0x88>

08015118 <_svfiprintf_r>:
 8015118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801511c:	4698      	mov	r8, r3
 801511e:	898b      	ldrh	r3, [r1, #12]
 8015120:	061b      	lsls	r3, r3, #24
 8015122:	b09d      	sub	sp, #116	; 0x74
 8015124:	4607      	mov	r7, r0
 8015126:	460d      	mov	r5, r1
 8015128:	4614      	mov	r4, r2
 801512a:	d50e      	bpl.n	801514a <_svfiprintf_r+0x32>
 801512c:	690b      	ldr	r3, [r1, #16]
 801512e:	b963      	cbnz	r3, 801514a <_svfiprintf_r+0x32>
 8015130:	2140      	movs	r1, #64	; 0x40
 8015132:	f7fe fbc7 	bl	80138c4 <_malloc_r>
 8015136:	6028      	str	r0, [r5, #0]
 8015138:	6128      	str	r0, [r5, #16]
 801513a:	b920      	cbnz	r0, 8015146 <_svfiprintf_r+0x2e>
 801513c:	230c      	movs	r3, #12
 801513e:	603b      	str	r3, [r7, #0]
 8015140:	f04f 30ff 	mov.w	r0, #4294967295
 8015144:	e0d0      	b.n	80152e8 <_svfiprintf_r+0x1d0>
 8015146:	2340      	movs	r3, #64	; 0x40
 8015148:	616b      	str	r3, [r5, #20]
 801514a:	2300      	movs	r3, #0
 801514c:	9309      	str	r3, [sp, #36]	; 0x24
 801514e:	2320      	movs	r3, #32
 8015150:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015154:	f8cd 800c 	str.w	r8, [sp, #12]
 8015158:	2330      	movs	r3, #48	; 0x30
 801515a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015300 <_svfiprintf_r+0x1e8>
 801515e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015162:	f04f 0901 	mov.w	r9, #1
 8015166:	4623      	mov	r3, r4
 8015168:	469a      	mov	sl, r3
 801516a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801516e:	b10a      	cbz	r2, 8015174 <_svfiprintf_r+0x5c>
 8015170:	2a25      	cmp	r2, #37	; 0x25
 8015172:	d1f9      	bne.n	8015168 <_svfiprintf_r+0x50>
 8015174:	ebba 0b04 	subs.w	fp, sl, r4
 8015178:	d00b      	beq.n	8015192 <_svfiprintf_r+0x7a>
 801517a:	465b      	mov	r3, fp
 801517c:	4622      	mov	r2, r4
 801517e:	4629      	mov	r1, r5
 8015180:	4638      	mov	r0, r7
 8015182:	f7ff ff6f 	bl	8015064 <__ssputs_r>
 8015186:	3001      	adds	r0, #1
 8015188:	f000 80a9 	beq.w	80152de <_svfiprintf_r+0x1c6>
 801518c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801518e:	445a      	add	r2, fp
 8015190:	9209      	str	r2, [sp, #36]	; 0x24
 8015192:	f89a 3000 	ldrb.w	r3, [sl]
 8015196:	2b00      	cmp	r3, #0
 8015198:	f000 80a1 	beq.w	80152de <_svfiprintf_r+0x1c6>
 801519c:	2300      	movs	r3, #0
 801519e:	f04f 32ff 	mov.w	r2, #4294967295
 80151a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151a6:	f10a 0a01 	add.w	sl, sl, #1
 80151aa:	9304      	str	r3, [sp, #16]
 80151ac:	9307      	str	r3, [sp, #28]
 80151ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80151b2:	931a      	str	r3, [sp, #104]	; 0x68
 80151b4:	4654      	mov	r4, sl
 80151b6:	2205      	movs	r2, #5
 80151b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151bc:	4850      	ldr	r0, [pc, #320]	; (8015300 <_svfiprintf_r+0x1e8>)
 80151be:	f7eb f82f 	bl	8000220 <memchr>
 80151c2:	9a04      	ldr	r2, [sp, #16]
 80151c4:	b9d8      	cbnz	r0, 80151fe <_svfiprintf_r+0xe6>
 80151c6:	06d0      	lsls	r0, r2, #27
 80151c8:	bf44      	itt	mi
 80151ca:	2320      	movmi	r3, #32
 80151cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80151d0:	0711      	lsls	r1, r2, #28
 80151d2:	bf44      	itt	mi
 80151d4:	232b      	movmi	r3, #43	; 0x2b
 80151d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80151da:	f89a 3000 	ldrb.w	r3, [sl]
 80151de:	2b2a      	cmp	r3, #42	; 0x2a
 80151e0:	d015      	beq.n	801520e <_svfiprintf_r+0xf6>
 80151e2:	9a07      	ldr	r2, [sp, #28]
 80151e4:	4654      	mov	r4, sl
 80151e6:	2000      	movs	r0, #0
 80151e8:	f04f 0c0a 	mov.w	ip, #10
 80151ec:	4621      	mov	r1, r4
 80151ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80151f2:	3b30      	subs	r3, #48	; 0x30
 80151f4:	2b09      	cmp	r3, #9
 80151f6:	d94d      	bls.n	8015294 <_svfiprintf_r+0x17c>
 80151f8:	b1b0      	cbz	r0, 8015228 <_svfiprintf_r+0x110>
 80151fa:	9207      	str	r2, [sp, #28]
 80151fc:	e014      	b.n	8015228 <_svfiprintf_r+0x110>
 80151fe:	eba0 0308 	sub.w	r3, r0, r8
 8015202:	fa09 f303 	lsl.w	r3, r9, r3
 8015206:	4313      	orrs	r3, r2
 8015208:	9304      	str	r3, [sp, #16]
 801520a:	46a2      	mov	sl, r4
 801520c:	e7d2      	b.n	80151b4 <_svfiprintf_r+0x9c>
 801520e:	9b03      	ldr	r3, [sp, #12]
 8015210:	1d19      	adds	r1, r3, #4
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	9103      	str	r1, [sp, #12]
 8015216:	2b00      	cmp	r3, #0
 8015218:	bfbb      	ittet	lt
 801521a:	425b      	neglt	r3, r3
 801521c:	f042 0202 	orrlt.w	r2, r2, #2
 8015220:	9307      	strge	r3, [sp, #28]
 8015222:	9307      	strlt	r3, [sp, #28]
 8015224:	bfb8      	it	lt
 8015226:	9204      	strlt	r2, [sp, #16]
 8015228:	7823      	ldrb	r3, [r4, #0]
 801522a:	2b2e      	cmp	r3, #46	; 0x2e
 801522c:	d10c      	bne.n	8015248 <_svfiprintf_r+0x130>
 801522e:	7863      	ldrb	r3, [r4, #1]
 8015230:	2b2a      	cmp	r3, #42	; 0x2a
 8015232:	d134      	bne.n	801529e <_svfiprintf_r+0x186>
 8015234:	9b03      	ldr	r3, [sp, #12]
 8015236:	1d1a      	adds	r2, r3, #4
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	9203      	str	r2, [sp, #12]
 801523c:	2b00      	cmp	r3, #0
 801523e:	bfb8      	it	lt
 8015240:	f04f 33ff 	movlt.w	r3, #4294967295
 8015244:	3402      	adds	r4, #2
 8015246:	9305      	str	r3, [sp, #20]
 8015248:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015310 <_svfiprintf_r+0x1f8>
 801524c:	7821      	ldrb	r1, [r4, #0]
 801524e:	2203      	movs	r2, #3
 8015250:	4650      	mov	r0, sl
 8015252:	f7ea ffe5 	bl	8000220 <memchr>
 8015256:	b138      	cbz	r0, 8015268 <_svfiprintf_r+0x150>
 8015258:	9b04      	ldr	r3, [sp, #16]
 801525a:	eba0 000a 	sub.w	r0, r0, sl
 801525e:	2240      	movs	r2, #64	; 0x40
 8015260:	4082      	lsls	r2, r0
 8015262:	4313      	orrs	r3, r2
 8015264:	3401      	adds	r4, #1
 8015266:	9304      	str	r3, [sp, #16]
 8015268:	f814 1b01 	ldrb.w	r1, [r4], #1
 801526c:	4825      	ldr	r0, [pc, #148]	; (8015304 <_svfiprintf_r+0x1ec>)
 801526e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015272:	2206      	movs	r2, #6
 8015274:	f7ea ffd4 	bl	8000220 <memchr>
 8015278:	2800      	cmp	r0, #0
 801527a:	d038      	beq.n	80152ee <_svfiprintf_r+0x1d6>
 801527c:	4b22      	ldr	r3, [pc, #136]	; (8015308 <_svfiprintf_r+0x1f0>)
 801527e:	bb1b      	cbnz	r3, 80152c8 <_svfiprintf_r+0x1b0>
 8015280:	9b03      	ldr	r3, [sp, #12]
 8015282:	3307      	adds	r3, #7
 8015284:	f023 0307 	bic.w	r3, r3, #7
 8015288:	3308      	adds	r3, #8
 801528a:	9303      	str	r3, [sp, #12]
 801528c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801528e:	4433      	add	r3, r6
 8015290:	9309      	str	r3, [sp, #36]	; 0x24
 8015292:	e768      	b.n	8015166 <_svfiprintf_r+0x4e>
 8015294:	fb0c 3202 	mla	r2, ip, r2, r3
 8015298:	460c      	mov	r4, r1
 801529a:	2001      	movs	r0, #1
 801529c:	e7a6      	b.n	80151ec <_svfiprintf_r+0xd4>
 801529e:	2300      	movs	r3, #0
 80152a0:	3401      	adds	r4, #1
 80152a2:	9305      	str	r3, [sp, #20]
 80152a4:	4619      	mov	r1, r3
 80152a6:	f04f 0c0a 	mov.w	ip, #10
 80152aa:	4620      	mov	r0, r4
 80152ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152b0:	3a30      	subs	r2, #48	; 0x30
 80152b2:	2a09      	cmp	r2, #9
 80152b4:	d903      	bls.n	80152be <_svfiprintf_r+0x1a6>
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d0c6      	beq.n	8015248 <_svfiprintf_r+0x130>
 80152ba:	9105      	str	r1, [sp, #20]
 80152bc:	e7c4      	b.n	8015248 <_svfiprintf_r+0x130>
 80152be:	fb0c 2101 	mla	r1, ip, r1, r2
 80152c2:	4604      	mov	r4, r0
 80152c4:	2301      	movs	r3, #1
 80152c6:	e7f0      	b.n	80152aa <_svfiprintf_r+0x192>
 80152c8:	ab03      	add	r3, sp, #12
 80152ca:	9300      	str	r3, [sp, #0]
 80152cc:	462a      	mov	r2, r5
 80152ce:	4b0f      	ldr	r3, [pc, #60]	; (801530c <_svfiprintf_r+0x1f4>)
 80152d0:	a904      	add	r1, sp, #16
 80152d2:	4638      	mov	r0, r7
 80152d4:	f7fc fbe2 	bl	8011a9c <_printf_float>
 80152d8:	1c42      	adds	r2, r0, #1
 80152da:	4606      	mov	r6, r0
 80152dc:	d1d6      	bne.n	801528c <_svfiprintf_r+0x174>
 80152de:	89ab      	ldrh	r3, [r5, #12]
 80152e0:	065b      	lsls	r3, r3, #25
 80152e2:	f53f af2d 	bmi.w	8015140 <_svfiprintf_r+0x28>
 80152e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80152e8:	b01d      	add	sp, #116	; 0x74
 80152ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ee:	ab03      	add	r3, sp, #12
 80152f0:	9300      	str	r3, [sp, #0]
 80152f2:	462a      	mov	r2, r5
 80152f4:	4b05      	ldr	r3, [pc, #20]	; (801530c <_svfiprintf_r+0x1f4>)
 80152f6:	a904      	add	r1, sp, #16
 80152f8:	4638      	mov	r0, r7
 80152fa:	f7fc fe73 	bl	8011fe4 <_printf_i>
 80152fe:	e7eb      	b.n	80152d8 <_svfiprintf_r+0x1c0>
 8015300:	08018481 	.word	0x08018481
 8015304:	0801848b 	.word	0x0801848b
 8015308:	08011a9d 	.word	0x08011a9d
 801530c:	08015065 	.word	0x08015065
 8015310:	08018487 	.word	0x08018487

08015314 <_sungetc_r>:
 8015314:	b538      	push	{r3, r4, r5, lr}
 8015316:	1c4b      	adds	r3, r1, #1
 8015318:	4614      	mov	r4, r2
 801531a:	d103      	bne.n	8015324 <_sungetc_r+0x10>
 801531c:	f04f 35ff 	mov.w	r5, #4294967295
 8015320:	4628      	mov	r0, r5
 8015322:	bd38      	pop	{r3, r4, r5, pc}
 8015324:	8993      	ldrh	r3, [r2, #12]
 8015326:	f023 0320 	bic.w	r3, r3, #32
 801532a:	8193      	strh	r3, [r2, #12]
 801532c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801532e:	6852      	ldr	r2, [r2, #4]
 8015330:	b2cd      	uxtb	r5, r1
 8015332:	b18b      	cbz	r3, 8015358 <_sungetc_r+0x44>
 8015334:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015336:	4293      	cmp	r3, r2
 8015338:	dd08      	ble.n	801534c <_sungetc_r+0x38>
 801533a:	6823      	ldr	r3, [r4, #0]
 801533c:	1e5a      	subs	r2, r3, #1
 801533e:	6022      	str	r2, [r4, #0]
 8015340:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015344:	6863      	ldr	r3, [r4, #4]
 8015346:	3301      	adds	r3, #1
 8015348:	6063      	str	r3, [r4, #4]
 801534a:	e7e9      	b.n	8015320 <_sungetc_r+0xc>
 801534c:	4621      	mov	r1, r4
 801534e:	f000 fbe8 	bl	8015b22 <__submore>
 8015352:	2800      	cmp	r0, #0
 8015354:	d0f1      	beq.n	801533a <_sungetc_r+0x26>
 8015356:	e7e1      	b.n	801531c <_sungetc_r+0x8>
 8015358:	6921      	ldr	r1, [r4, #16]
 801535a:	6823      	ldr	r3, [r4, #0]
 801535c:	b151      	cbz	r1, 8015374 <_sungetc_r+0x60>
 801535e:	4299      	cmp	r1, r3
 8015360:	d208      	bcs.n	8015374 <_sungetc_r+0x60>
 8015362:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8015366:	42a9      	cmp	r1, r5
 8015368:	d104      	bne.n	8015374 <_sungetc_r+0x60>
 801536a:	3b01      	subs	r3, #1
 801536c:	3201      	adds	r2, #1
 801536e:	6023      	str	r3, [r4, #0]
 8015370:	6062      	str	r2, [r4, #4]
 8015372:	e7d5      	b.n	8015320 <_sungetc_r+0xc>
 8015374:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8015378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801537c:	6363      	str	r3, [r4, #52]	; 0x34
 801537e:	2303      	movs	r3, #3
 8015380:	63a3      	str	r3, [r4, #56]	; 0x38
 8015382:	4623      	mov	r3, r4
 8015384:	f803 5f46 	strb.w	r5, [r3, #70]!
 8015388:	6023      	str	r3, [r4, #0]
 801538a:	2301      	movs	r3, #1
 801538c:	e7dc      	b.n	8015348 <_sungetc_r+0x34>

0801538e <__ssrefill_r>:
 801538e:	b510      	push	{r4, lr}
 8015390:	460c      	mov	r4, r1
 8015392:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015394:	b169      	cbz	r1, 80153b2 <__ssrefill_r+0x24>
 8015396:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801539a:	4299      	cmp	r1, r3
 801539c:	d001      	beq.n	80153a2 <__ssrefill_r+0x14>
 801539e:	f7fe fa1d 	bl	80137dc <_free_r>
 80153a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80153a4:	6063      	str	r3, [r4, #4]
 80153a6:	2000      	movs	r0, #0
 80153a8:	6360      	str	r0, [r4, #52]	; 0x34
 80153aa:	b113      	cbz	r3, 80153b2 <__ssrefill_r+0x24>
 80153ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80153ae:	6023      	str	r3, [r4, #0]
 80153b0:	bd10      	pop	{r4, pc}
 80153b2:	6923      	ldr	r3, [r4, #16]
 80153b4:	6023      	str	r3, [r4, #0]
 80153b6:	2300      	movs	r3, #0
 80153b8:	6063      	str	r3, [r4, #4]
 80153ba:	89a3      	ldrh	r3, [r4, #12]
 80153bc:	f043 0320 	orr.w	r3, r3, #32
 80153c0:	81a3      	strh	r3, [r4, #12]
 80153c2:	f04f 30ff 	mov.w	r0, #4294967295
 80153c6:	e7f3      	b.n	80153b0 <__ssrefill_r+0x22>

080153c8 <__ssvfiscanf_r>:
 80153c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153cc:	460c      	mov	r4, r1
 80153ce:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80153d2:	2100      	movs	r1, #0
 80153d4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80153d8:	49a6      	ldr	r1, [pc, #664]	; (8015674 <__ssvfiscanf_r+0x2ac>)
 80153da:	91a0      	str	r1, [sp, #640]	; 0x280
 80153dc:	f10d 0804 	add.w	r8, sp, #4
 80153e0:	49a5      	ldr	r1, [pc, #660]	; (8015678 <__ssvfiscanf_r+0x2b0>)
 80153e2:	4fa6      	ldr	r7, [pc, #664]	; (801567c <__ssvfiscanf_r+0x2b4>)
 80153e4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8015680 <__ssvfiscanf_r+0x2b8>
 80153e8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80153ec:	4606      	mov	r6, r0
 80153ee:	91a1      	str	r1, [sp, #644]	; 0x284
 80153f0:	9300      	str	r3, [sp, #0]
 80153f2:	7813      	ldrb	r3, [r2, #0]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	f000 815a 	beq.w	80156ae <__ssvfiscanf_r+0x2e6>
 80153fa:	5cf9      	ldrb	r1, [r7, r3]
 80153fc:	f011 0108 	ands.w	r1, r1, #8
 8015400:	f102 0501 	add.w	r5, r2, #1
 8015404:	d019      	beq.n	801543a <__ssvfiscanf_r+0x72>
 8015406:	6863      	ldr	r3, [r4, #4]
 8015408:	2b00      	cmp	r3, #0
 801540a:	dd0f      	ble.n	801542c <__ssvfiscanf_r+0x64>
 801540c:	6823      	ldr	r3, [r4, #0]
 801540e:	781a      	ldrb	r2, [r3, #0]
 8015410:	5cba      	ldrb	r2, [r7, r2]
 8015412:	0712      	lsls	r2, r2, #28
 8015414:	d401      	bmi.n	801541a <__ssvfiscanf_r+0x52>
 8015416:	462a      	mov	r2, r5
 8015418:	e7eb      	b.n	80153f2 <__ssvfiscanf_r+0x2a>
 801541a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801541c:	3201      	adds	r2, #1
 801541e:	9245      	str	r2, [sp, #276]	; 0x114
 8015420:	6862      	ldr	r2, [r4, #4]
 8015422:	3301      	adds	r3, #1
 8015424:	3a01      	subs	r2, #1
 8015426:	6062      	str	r2, [r4, #4]
 8015428:	6023      	str	r3, [r4, #0]
 801542a:	e7ec      	b.n	8015406 <__ssvfiscanf_r+0x3e>
 801542c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801542e:	4621      	mov	r1, r4
 8015430:	4630      	mov	r0, r6
 8015432:	4798      	blx	r3
 8015434:	2800      	cmp	r0, #0
 8015436:	d0e9      	beq.n	801540c <__ssvfiscanf_r+0x44>
 8015438:	e7ed      	b.n	8015416 <__ssvfiscanf_r+0x4e>
 801543a:	2b25      	cmp	r3, #37	; 0x25
 801543c:	d012      	beq.n	8015464 <__ssvfiscanf_r+0x9c>
 801543e:	469a      	mov	sl, r3
 8015440:	6863      	ldr	r3, [r4, #4]
 8015442:	2b00      	cmp	r3, #0
 8015444:	f340 8091 	ble.w	801556a <__ssvfiscanf_r+0x1a2>
 8015448:	6822      	ldr	r2, [r4, #0]
 801544a:	7813      	ldrb	r3, [r2, #0]
 801544c:	4553      	cmp	r3, sl
 801544e:	f040 812e 	bne.w	80156ae <__ssvfiscanf_r+0x2e6>
 8015452:	6863      	ldr	r3, [r4, #4]
 8015454:	3b01      	subs	r3, #1
 8015456:	6063      	str	r3, [r4, #4]
 8015458:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801545a:	3201      	adds	r2, #1
 801545c:	3301      	adds	r3, #1
 801545e:	6022      	str	r2, [r4, #0]
 8015460:	9345      	str	r3, [sp, #276]	; 0x114
 8015462:	e7d8      	b.n	8015416 <__ssvfiscanf_r+0x4e>
 8015464:	9141      	str	r1, [sp, #260]	; 0x104
 8015466:	9143      	str	r1, [sp, #268]	; 0x10c
 8015468:	7853      	ldrb	r3, [r2, #1]
 801546a:	2b2a      	cmp	r3, #42	; 0x2a
 801546c:	bf02      	ittt	eq
 801546e:	2310      	moveq	r3, #16
 8015470:	1c95      	addeq	r5, r2, #2
 8015472:	9341      	streq	r3, [sp, #260]	; 0x104
 8015474:	220a      	movs	r2, #10
 8015476:	46aa      	mov	sl, r5
 8015478:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801547c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8015480:	2b09      	cmp	r3, #9
 8015482:	d91c      	bls.n	80154be <__ssvfiscanf_r+0xf6>
 8015484:	487e      	ldr	r0, [pc, #504]	; (8015680 <__ssvfiscanf_r+0x2b8>)
 8015486:	2203      	movs	r2, #3
 8015488:	f7ea feca 	bl	8000220 <memchr>
 801548c:	b138      	cbz	r0, 801549e <__ssvfiscanf_r+0xd6>
 801548e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015490:	eba0 0009 	sub.w	r0, r0, r9
 8015494:	2301      	movs	r3, #1
 8015496:	4083      	lsls	r3, r0
 8015498:	4313      	orrs	r3, r2
 801549a:	9341      	str	r3, [sp, #260]	; 0x104
 801549c:	4655      	mov	r5, sl
 801549e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80154a2:	2b78      	cmp	r3, #120	; 0x78
 80154a4:	d806      	bhi.n	80154b4 <__ssvfiscanf_r+0xec>
 80154a6:	2b57      	cmp	r3, #87	; 0x57
 80154a8:	d810      	bhi.n	80154cc <__ssvfiscanf_r+0x104>
 80154aa:	2b25      	cmp	r3, #37	; 0x25
 80154ac:	d0c7      	beq.n	801543e <__ssvfiscanf_r+0x76>
 80154ae:	d857      	bhi.n	8015560 <__ssvfiscanf_r+0x198>
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d065      	beq.n	8015580 <__ssvfiscanf_r+0x1b8>
 80154b4:	2303      	movs	r3, #3
 80154b6:	9347      	str	r3, [sp, #284]	; 0x11c
 80154b8:	230a      	movs	r3, #10
 80154ba:	9342      	str	r3, [sp, #264]	; 0x108
 80154bc:	e076      	b.n	80155ac <__ssvfiscanf_r+0x1e4>
 80154be:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80154c0:	fb02 1103 	mla	r1, r2, r3, r1
 80154c4:	3930      	subs	r1, #48	; 0x30
 80154c6:	9143      	str	r1, [sp, #268]	; 0x10c
 80154c8:	4655      	mov	r5, sl
 80154ca:	e7d4      	b.n	8015476 <__ssvfiscanf_r+0xae>
 80154cc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80154d0:	2a20      	cmp	r2, #32
 80154d2:	d8ef      	bhi.n	80154b4 <__ssvfiscanf_r+0xec>
 80154d4:	a101      	add	r1, pc, #4	; (adr r1, 80154dc <__ssvfiscanf_r+0x114>)
 80154d6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80154da:	bf00      	nop
 80154dc:	0801558f 	.word	0x0801558f
 80154e0:	080154b5 	.word	0x080154b5
 80154e4:	080154b5 	.word	0x080154b5
 80154e8:	080155ed 	.word	0x080155ed
 80154ec:	080154b5 	.word	0x080154b5
 80154f0:	080154b5 	.word	0x080154b5
 80154f4:	080154b5 	.word	0x080154b5
 80154f8:	080154b5 	.word	0x080154b5
 80154fc:	080154b5 	.word	0x080154b5
 8015500:	080154b5 	.word	0x080154b5
 8015504:	080154b5 	.word	0x080154b5
 8015508:	08015603 	.word	0x08015603
 801550c:	080155e9 	.word	0x080155e9
 8015510:	08015567 	.word	0x08015567
 8015514:	08015567 	.word	0x08015567
 8015518:	08015567 	.word	0x08015567
 801551c:	080154b5 	.word	0x080154b5
 8015520:	080155a5 	.word	0x080155a5
 8015524:	080154b5 	.word	0x080154b5
 8015528:	080154b5 	.word	0x080154b5
 801552c:	080154b5 	.word	0x080154b5
 8015530:	080154b5 	.word	0x080154b5
 8015534:	08015613 	.word	0x08015613
 8015538:	080155e1 	.word	0x080155e1
 801553c:	08015587 	.word	0x08015587
 8015540:	080154b5 	.word	0x080154b5
 8015544:	080154b5 	.word	0x080154b5
 8015548:	0801560f 	.word	0x0801560f
 801554c:	080154b5 	.word	0x080154b5
 8015550:	080155e9 	.word	0x080155e9
 8015554:	080154b5 	.word	0x080154b5
 8015558:	080154b5 	.word	0x080154b5
 801555c:	0801558f 	.word	0x0801558f
 8015560:	3b45      	subs	r3, #69	; 0x45
 8015562:	2b02      	cmp	r3, #2
 8015564:	d8a6      	bhi.n	80154b4 <__ssvfiscanf_r+0xec>
 8015566:	2305      	movs	r3, #5
 8015568:	e01f      	b.n	80155aa <__ssvfiscanf_r+0x1e2>
 801556a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801556c:	4621      	mov	r1, r4
 801556e:	4630      	mov	r0, r6
 8015570:	4798      	blx	r3
 8015572:	2800      	cmp	r0, #0
 8015574:	f43f af68 	beq.w	8015448 <__ssvfiscanf_r+0x80>
 8015578:	9844      	ldr	r0, [sp, #272]	; 0x110
 801557a:	2800      	cmp	r0, #0
 801557c:	f040 808d 	bne.w	801569a <__ssvfiscanf_r+0x2d2>
 8015580:	f04f 30ff 	mov.w	r0, #4294967295
 8015584:	e08f      	b.n	80156a6 <__ssvfiscanf_r+0x2de>
 8015586:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015588:	f042 0220 	orr.w	r2, r2, #32
 801558c:	9241      	str	r2, [sp, #260]	; 0x104
 801558e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015594:	9241      	str	r2, [sp, #260]	; 0x104
 8015596:	2210      	movs	r2, #16
 8015598:	2b6f      	cmp	r3, #111	; 0x6f
 801559a:	9242      	str	r2, [sp, #264]	; 0x108
 801559c:	bf34      	ite	cc
 801559e:	2303      	movcc	r3, #3
 80155a0:	2304      	movcs	r3, #4
 80155a2:	e002      	b.n	80155aa <__ssvfiscanf_r+0x1e2>
 80155a4:	2300      	movs	r3, #0
 80155a6:	9342      	str	r3, [sp, #264]	; 0x108
 80155a8:	2303      	movs	r3, #3
 80155aa:	9347      	str	r3, [sp, #284]	; 0x11c
 80155ac:	6863      	ldr	r3, [r4, #4]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	dd3d      	ble.n	801562e <__ssvfiscanf_r+0x266>
 80155b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80155b4:	0659      	lsls	r1, r3, #25
 80155b6:	d404      	bmi.n	80155c2 <__ssvfiscanf_r+0x1fa>
 80155b8:	6823      	ldr	r3, [r4, #0]
 80155ba:	781a      	ldrb	r2, [r3, #0]
 80155bc:	5cba      	ldrb	r2, [r7, r2]
 80155be:	0712      	lsls	r2, r2, #28
 80155c0:	d43c      	bmi.n	801563c <__ssvfiscanf_r+0x274>
 80155c2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80155c4:	2b02      	cmp	r3, #2
 80155c6:	dc4b      	bgt.n	8015660 <__ssvfiscanf_r+0x298>
 80155c8:	466b      	mov	r3, sp
 80155ca:	4622      	mov	r2, r4
 80155cc:	a941      	add	r1, sp, #260	; 0x104
 80155ce:	4630      	mov	r0, r6
 80155d0:	f000 f872 	bl	80156b8 <_scanf_chars>
 80155d4:	2801      	cmp	r0, #1
 80155d6:	d06a      	beq.n	80156ae <__ssvfiscanf_r+0x2e6>
 80155d8:	2802      	cmp	r0, #2
 80155da:	f47f af1c 	bne.w	8015416 <__ssvfiscanf_r+0x4e>
 80155de:	e7cb      	b.n	8015578 <__ssvfiscanf_r+0x1b0>
 80155e0:	2308      	movs	r3, #8
 80155e2:	9342      	str	r3, [sp, #264]	; 0x108
 80155e4:	2304      	movs	r3, #4
 80155e6:	e7e0      	b.n	80155aa <__ssvfiscanf_r+0x1e2>
 80155e8:	220a      	movs	r2, #10
 80155ea:	e7d5      	b.n	8015598 <__ssvfiscanf_r+0x1d0>
 80155ec:	4629      	mov	r1, r5
 80155ee:	4640      	mov	r0, r8
 80155f0:	f000 fa5e 	bl	8015ab0 <__sccl>
 80155f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80155f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155fa:	9341      	str	r3, [sp, #260]	; 0x104
 80155fc:	4605      	mov	r5, r0
 80155fe:	2301      	movs	r3, #1
 8015600:	e7d3      	b.n	80155aa <__ssvfiscanf_r+0x1e2>
 8015602:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015608:	9341      	str	r3, [sp, #260]	; 0x104
 801560a:	2300      	movs	r3, #0
 801560c:	e7cd      	b.n	80155aa <__ssvfiscanf_r+0x1e2>
 801560e:	2302      	movs	r3, #2
 8015610:	e7cb      	b.n	80155aa <__ssvfiscanf_r+0x1e2>
 8015612:	9841      	ldr	r0, [sp, #260]	; 0x104
 8015614:	06c3      	lsls	r3, r0, #27
 8015616:	f53f aefe 	bmi.w	8015416 <__ssvfiscanf_r+0x4e>
 801561a:	9b00      	ldr	r3, [sp, #0]
 801561c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801561e:	1d19      	adds	r1, r3, #4
 8015620:	9100      	str	r1, [sp, #0]
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	07c0      	lsls	r0, r0, #31
 8015626:	bf4c      	ite	mi
 8015628:	801a      	strhmi	r2, [r3, #0]
 801562a:	601a      	strpl	r2, [r3, #0]
 801562c:	e6f3      	b.n	8015416 <__ssvfiscanf_r+0x4e>
 801562e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015630:	4621      	mov	r1, r4
 8015632:	4630      	mov	r0, r6
 8015634:	4798      	blx	r3
 8015636:	2800      	cmp	r0, #0
 8015638:	d0bb      	beq.n	80155b2 <__ssvfiscanf_r+0x1ea>
 801563a:	e79d      	b.n	8015578 <__ssvfiscanf_r+0x1b0>
 801563c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801563e:	3201      	adds	r2, #1
 8015640:	9245      	str	r2, [sp, #276]	; 0x114
 8015642:	6862      	ldr	r2, [r4, #4]
 8015644:	3a01      	subs	r2, #1
 8015646:	2a00      	cmp	r2, #0
 8015648:	6062      	str	r2, [r4, #4]
 801564a:	dd02      	ble.n	8015652 <__ssvfiscanf_r+0x28a>
 801564c:	3301      	adds	r3, #1
 801564e:	6023      	str	r3, [r4, #0]
 8015650:	e7b2      	b.n	80155b8 <__ssvfiscanf_r+0x1f0>
 8015652:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015654:	4621      	mov	r1, r4
 8015656:	4630      	mov	r0, r6
 8015658:	4798      	blx	r3
 801565a:	2800      	cmp	r0, #0
 801565c:	d0ac      	beq.n	80155b8 <__ssvfiscanf_r+0x1f0>
 801565e:	e78b      	b.n	8015578 <__ssvfiscanf_r+0x1b0>
 8015660:	2b04      	cmp	r3, #4
 8015662:	dc0f      	bgt.n	8015684 <__ssvfiscanf_r+0x2bc>
 8015664:	466b      	mov	r3, sp
 8015666:	4622      	mov	r2, r4
 8015668:	a941      	add	r1, sp, #260	; 0x104
 801566a:	4630      	mov	r0, r6
 801566c:	f000 f87e 	bl	801576c <_scanf_i>
 8015670:	e7b0      	b.n	80155d4 <__ssvfiscanf_r+0x20c>
 8015672:	bf00      	nop
 8015674:	08015315 	.word	0x08015315
 8015678:	0801538f 	.word	0x0801538f
 801567c:	08018381 	.word	0x08018381
 8015680:	08018487 	.word	0x08018487
 8015684:	4b0b      	ldr	r3, [pc, #44]	; (80156b4 <__ssvfiscanf_r+0x2ec>)
 8015686:	2b00      	cmp	r3, #0
 8015688:	f43f aec5 	beq.w	8015416 <__ssvfiscanf_r+0x4e>
 801568c:	466b      	mov	r3, sp
 801568e:	4622      	mov	r2, r4
 8015690:	a941      	add	r1, sp, #260	; 0x104
 8015692:	4630      	mov	r0, r6
 8015694:	f7fc fdc8 	bl	8012228 <_scanf_float>
 8015698:	e79c      	b.n	80155d4 <__ssvfiscanf_r+0x20c>
 801569a:	89a3      	ldrh	r3, [r4, #12]
 801569c:	f013 0f40 	tst.w	r3, #64	; 0x40
 80156a0:	bf18      	it	ne
 80156a2:	f04f 30ff 	movne.w	r0, #4294967295
 80156a6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80156aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156ae:	9844      	ldr	r0, [sp, #272]	; 0x110
 80156b0:	e7f9      	b.n	80156a6 <__ssvfiscanf_r+0x2de>
 80156b2:	bf00      	nop
 80156b4:	08012229 	.word	0x08012229

080156b8 <_scanf_chars>:
 80156b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80156bc:	4615      	mov	r5, r2
 80156be:	688a      	ldr	r2, [r1, #8]
 80156c0:	4680      	mov	r8, r0
 80156c2:	460c      	mov	r4, r1
 80156c4:	b932      	cbnz	r2, 80156d4 <_scanf_chars+0x1c>
 80156c6:	698a      	ldr	r2, [r1, #24]
 80156c8:	2a00      	cmp	r2, #0
 80156ca:	bf0c      	ite	eq
 80156cc:	2201      	moveq	r2, #1
 80156ce:	f04f 32ff 	movne.w	r2, #4294967295
 80156d2:	608a      	str	r2, [r1, #8]
 80156d4:	6822      	ldr	r2, [r4, #0]
 80156d6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8015768 <_scanf_chars+0xb0>
 80156da:	06d1      	lsls	r1, r2, #27
 80156dc:	bf5f      	itttt	pl
 80156de:	681a      	ldrpl	r2, [r3, #0]
 80156e0:	1d11      	addpl	r1, r2, #4
 80156e2:	6019      	strpl	r1, [r3, #0]
 80156e4:	6816      	ldrpl	r6, [r2, #0]
 80156e6:	2700      	movs	r7, #0
 80156e8:	69a0      	ldr	r0, [r4, #24]
 80156ea:	b188      	cbz	r0, 8015710 <_scanf_chars+0x58>
 80156ec:	2801      	cmp	r0, #1
 80156ee:	d107      	bne.n	8015700 <_scanf_chars+0x48>
 80156f0:	682a      	ldr	r2, [r5, #0]
 80156f2:	7811      	ldrb	r1, [r2, #0]
 80156f4:	6962      	ldr	r2, [r4, #20]
 80156f6:	5c52      	ldrb	r2, [r2, r1]
 80156f8:	b952      	cbnz	r2, 8015710 <_scanf_chars+0x58>
 80156fa:	2f00      	cmp	r7, #0
 80156fc:	d031      	beq.n	8015762 <_scanf_chars+0xaa>
 80156fe:	e022      	b.n	8015746 <_scanf_chars+0x8e>
 8015700:	2802      	cmp	r0, #2
 8015702:	d120      	bne.n	8015746 <_scanf_chars+0x8e>
 8015704:	682b      	ldr	r3, [r5, #0]
 8015706:	781b      	ldrb	r3, [r3, #0]
 8015708:	f819 3003 	ldrb.w	r3, [r9, r3]
 801570c:	071b      	lsls	r3, r3, #28
 801570e:	d41a      	bmi.n	8015746 <_scanf_chars+0x8e>
 8015710:	6823      	ldr	r3, [r4, #0]
 8015712:	06da      	lsls	r2, r3, #27
 8015714:	bf5e      	ittt	pl
 8015716:	682b      	ldrpl	r3, [r5, #0]
 8015718:	781b      	ldrbpl	r3, [r3, #0]
 801571a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801571e:	682a      	ldr	r2, [r5, #0]
 8015720:	686b      	ldr	r3, [r5, #4]
 8015722:	3201      	adds	r2, #1
 8015724:	602a      	str	r2, [r5, #0]
 8015726:	68a2      	ldr	r2, [r4, #8]
 8015728:	3b01      	subs	r3, #1
 801572a:	3a01      	subs	r2, #1
 801572c:	606b      	str	r3, [r5, #4]
 801572e:	3701      	adds	r7, #1
 8015730:	60a2      	str	r2, [r4, #8]
 8015732:	b142      	cbz	r2, 8015746 <_scanf_chars+0x8e>
 8015734:	2b00      	cmp	r3, #0
 8015736:	dcd7      	bgt.n	80156e8 <_scanf_chars+0x30>
 8015738:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801573c:	4629      	mov	r1, r5
 801573e:	4640      	mov	r0, r8
 8015740:	4798      	blx	r3
 8015742:	2800      	cmp	r0, #0
 8015744:	d0d0      	beq.n	80156e8 <_scanf_chars+0x30>
 8015746:	6823      	ldr	r3, [r4, #0]
 8015748:	f013 0310 	ands.w	r3, r3, #16
 801574c:	d105      	bne.n	801575a <_scanf_chars+0xa2>
 801574e:	68e2      	ldr	r2, [r4, #12]
 8015750:	3201      	adds	r2, #1
 8015752:	60e2      	str	r2, [r4, #12]
 8015754:	69a2      	ldr	r2, [r4, #24]
 8015756:	b102      	cbz	r2, 801575a <_scanf_chars+0xa2>
 8015758:	7033      	strb	r3, [r6, #0]
 801575a:	6923      	ldr	r3, [r4, #16]
 801575c:	443b      	add	r3, r7
 801575e:	6123      	str	r3, [r4, #16]
 8015760:	2000      	movs	r0, #0
 8015762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015766:	bf00      	nop
 8015768:	08018381 	.word	0x08018381

0801576c <_scanf_i>:
 801576c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015770:	4698      	mov	r8, r3
 8015772:	4b74      	ldr	r3, [pc, #464]	; (8015944 <_scanf_i+0x1d8>)
 8015774:	460c      	mov	r4, r1
 8015776:	4682      	mov	sl, r0
 8015778:	4616      	mov	r6, r2
 801577a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801577e:	b087      	sub	sp, #28
 8015780:	ab03      	add	r3, sp, #12
 8015782:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015786:	4b70      	ldr	r3, [pc, #448]	; (8015948 <_scanf_i+0x1dc>)
 8015788:	69a1      	ldr	r1, [r4, #24]
 801578a:	4a70      	ldr	r2, [pc, #448]	; (801594c <_scanf_i+0x1e0>)
 801578c:	2903      	cmp	r1, #3
 801578e:	bf18      	it	ne
 8015790:	461a      	movne	r2, r3
 8015792:	68a3      	ldr	r3, [r4, #8]
 8015794:	9201      	str	r2, [sp, #4]
 8015796:	1e5a      	subs	r2, r3, #1
 8015798:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801579c:	bf88      	it	hi
 801579e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80157a2:	4627      	mov	r7, r4
 80157a4:	bf82      	ittt	hi
 80157a6:	eb03 0905 	addhi.w	r9, r3, r5
 80157aa:	f240 135d 	movwhi	r3, #349	; 0x15d
 80157ae:	60a3      	strhi	r3, [r4, #8]
 80157b0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80157b4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80157b8:	bf98      	it	ls
 80157ba:	f04f 0900 	movls.w	r9, #0
 80157be:	6023      	str	r3, [r4, #0]
 80157c0:	463d      	mov	r5, r7
 80157c2:	f04f 0b00 	mov.w	fp, #0
 80157c6:	6831      	ldr	r1, [r6, #0]
 80157c8:	ab03      	add	r3, sp, #12
 80157ca:	7809      	ldrb	r1, [r1, #0]
 80157cc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80157d0:	2202      	movs	r2, #2
 80157d2:	f7ea fd25 	bl	8000220 <memchr>
 80157d6:	b328      	cbz	r0, 8015824 <_scanf_i+0xb8>
 80157d8:	f1bb 0f01 	cmp.w	fp, #1
 80157dc:	d159      	bne.n	8015892 <_scanf_i+0x126>
 80157de:	6862      	ldr	r2, [r4, #4]
 80157e0:	b92a      	cbnz	r2, 80157ee <_scanf_i+0x82>
 80157e2:	6822      	ldr	r2, [r4, #0]
 80157e4:	2308      	movs	r3, #8
 80157e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80157ea:	6063      	str	r3, [r4, #4]
 80157ec:	6022      	str	r2, [r4, #0]
 80157ee:	6822      	ldr	r2, [r4, #0]
 80157f0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80157f4:	6022      	str	r2, [r4, #0]
 80157f6:	68a2      	ldr	r2, [r4, #8]
 80157f8:	1e51      	subs	r1, r2, #1
 80157fa:	60a1      	str	r1, [r4, #8]
 80157fc:	b192      	cbz	r2, 8015824 <_scanf_i+0xb8>
 80157fe:	6832      	ldr	r2, [r6, #0]
 8015800:	1c51      	adds	r1, r2, #1
 8015802:	6031      	str	r1, [r6, #0]
 8015804:	7812      	ldrb	r2, [r2, #0]
 8015806:	f805 2b01 	strb.w	r2, [r5], #1
 801580a:	6872      	ldr	r2, [r6, #4]
 801580c:	3a01      	subs	r2, #1
 801580e:	2a00      	cmp	r2, #0
 8015810:	6072      	str	r2, [r6, #4]
 8015812:	dc07      	bgt.n	8015824 <_scanf_i+0xb8>
 8015814:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8015818:	4631      	mov	r1, r6
 801581a:	4650      	mov	r0, sl
 801581c:	4790      	blx	r2
 801581e:	2800      	cmp	r0, #0
 8015820:	f040 8085 	bne.w	801592e <_scanf_i+0x1c2>
 8015824:	f10b 0b01 	add.w	fp, fp, #1
 8015828:	f1bb 0f03 	cmp.w	fp, #3
 801582c:	d1cb      	bne.n	80157c6 <_scanf_i+0x5a>
 801582e:	6863      	ldr	r3, [r4, #4]
 8015830:	b90b      	cbnz	r3, 8015836 <_scanf_i+0xca>
 8015832:	230a      	movs	r3, #10
 8015834:	6063      	str	r3, [r4, #4]
 8015836:	6863      	ldr	r3, [r4, #4]
 8015838:	4945      	ldr	r1, [pc, #276]	; (8015950 <_scanf_i+0x1e4>)
 801583a:	6960      	ldr	r0, [r4, #20]
 801583c:	1ac9      	subs	r1, r1, r3
 801583e:	f000 f937 	bl	8015ab0 <__sccl>
 8015842:	f04f 0b00 	mov.w	fp, #0
 8015846:	68a3      	ldr	r3, [r4, #8]
 8015848:	6822      	ldr	r2, [r4, #0]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d03d      	beq.n	80158ca <_scanf_i+0x15e>
 801584e:	6831      	ldr	r1, [r6, #0]
 8015850:	6960      	ldr	r0, [r4, #20]
 8015852:	f891 c000 	ldrb.w	ip, [r1]
 8015856:	f810 000c 	ldrb.w	r0, [r0, ip]
 801585a:	2800      	cmp	r0, #0
 801585c:	d035      	beq.n	80158ca <_scanf_i+0x15e>
 801585e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8015862:	d124      	bne.n	80158ae <_scanf_i+0x142>
 8015864:	0510      	lsls	r0, r2, #20
 8015866:	d522      	bpl.n	80158ae <_scanf_i+0x142>
 8015868:	f10b 0b01 	add.w	fp, fp, #1
 801586c:	f1b9 0f00 	cmp.w	r9, #0
 8015870:	d003      	beq.n	801587a <_scanf_i+0x10e>
 8015872:	3301      	adds	r3, #1
 8015874:	f109 39ff 	add.w	r9, r9, #4294967295
 8015878:	60a3      	str	r3, [r4, #8]
 801587a:	6873      	ldr	r3, [r6, #4]
 801587c:	3b01      	subs	r3, #1
 801587e:	2b00      	cmp	r3, #0
 8015880:	6073      	str	r3, [r6, #4]
 8015882:	dd1b      	ble.n	80158bc <_scanf_i+0x150>
 8015884:	6833      	ldr	r3, [r6, #0]
 8015886:	3301      	adds	r3, #1
 8015888:	6033      	str	r3, [r6, #0]
 801588a:	68a3      	ldr	r3, [r4, #8]
 801588c:	3b01      	subs	r3, #1
 801588e:	60a3      	str	r3, [r4, #8]
 8015890:	e7d9      	b.n	8015846 <_scanf_i+0xda>
 8015892:	f1bb 0f02 	cmp.w	fp, #2
 8015896:	d1ae      	bne.n	80157f6 <_scanf_i+0x8a>
 8015898:	6822      	ldr	r2, [r4, #0]
 801589a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801589e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80158a2:	d1bf      	bne.n	8015824 <_scanf_i+0xb8>
 80158a4:	2310      	movs	r3, #16
 80158a6:	6063      	str	r3, [r4, #4]
 80158a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80158ac:	e7a2      	b.n	80157f4 <_scanf_i+0x88>
 80158ae:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80158b2:	6022      	str	r2, [r4, #0]
 80158b4:	780b      	ldrb	r3, [r1, #0]
 80158b6:	f805 3b01 	strb.w	r3, [r5], #1
 80158ba:	e7de      	b.n	801587a <_scanf_i+0x10e>
 80158bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80158c0:	4631      	mov	r1, r6
 80158c2:	4650      	mov	r0, sl
 80158c4:	4798      	blx	r3
 80158c6:	2800      	cmp	r0, #0
 80158c8:	d0df      	beq.n	801588a <_scanf_i+0x11e>
 80158ca:	6823      	ldr	r3, [r4, #0]
 80158cc:	05d9      	lsls	r1, r3, #23
 80158ce:	d50d      	bpl.n	80158ec <_scanf_i+0x180>
 80158d0:	42bd      	cmp	r5, r7
 80158d2:	d909      	bls.n	80158e8 <_scanf_i+0x17c>
 80158d4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80158d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80158dc:	4632      	mov	r2, r6
 80158de:	4650      	mov	r0, sl
 80158e0:	4798      	blx	r3
 80158e2:	f105 39ff 	add.w	r9, r5, #4294967295
 80158e6:	464d      	mov	r5, r9
 80158e8:	42bd      	cmp	r5, r7
 80158ea:	d028      	beq.n	801593e <_scanf_i+0x1d2>
 80158ec:	6822      	ldr	r2, [r4, #0]
 80158ee:	f012 0210 	ands.w	r2, r2, #16
 80158f2:	d113      	bne.n	801591c <_scanf_i+0x1b0>
 80158f4:	702a      	strb	r2, [r5, #0]
 80158f6:	6863      	ldr	r3, [r4, #4]
 80158f8:	9e01      	ldr	r6, [sp, #4]
 80158fa:	4639      	mov	r1, r7
 80158fc:	4650      	mov	r0, sl
 80158fe:	47b0      	blx	r6
 8015900:	f8d8 3000 	ldr.w	r3, [r8]
 8015904:	6821      	ldr	r1, [r4, #0]
 8015906:	1d1a      	adds	r2, r3, #4
 8015908:	f8c8 2000 	str.w	r2, [r8]
 801590c:	f011 0f20 	tst.w	r1, #32
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	d00f      	beq.n	8015934 <_scanf_i+0x1c8>
 8015914:	6018      	str	r0, [r3, #0]
 8015916:	68e3      	ldr	r3, [r4, #12]
 8015918:	3301      	adds	r3, #1
 801591a:	60e3      	str	r3, [r4, #12]
 801591c:	6923      	ldr	r3, [r4, #16]
 801591e:	1bed      	subs	r5, r5, r7
 8015920:	445d      	add	r5, fp
 8015922:	442b      	add	r3, r5
 8015924:	6123      	str	r3, [r4, #16]
 8015926:	2000      	movs	r0, #0
 8015928:	b007      	add	sp, #28
 801592a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801592e:	f04f 0b00 	mov.w	fp, #0
 8015932:	e7ca      	b.n	80158ca <_scanf_i+0x15e>
 8015934:	07ca      	lsls	r2, r1, #31
 8015936:	bf4c      	ite	mi
 8015938:	8018      	strhmi	r0, [r3, #0]
 801593a:	6018      	strpl	r0, [r3, #0]
 801593c:	e7eb      	b.n	8015916 <_scanf_i+0x1aa>
 801593e:	2001      	movs	r0, #1
 8015940:	e7f2      	b.n	8015928 <_scanf_i+0x1bc>
 8015942:	bf00      	nop
 8015944:	08018090 	.word	0x08018090
 8015948:	0801647d 	.word	0x0801647d
 801594c:	08015061 	.word	0x08015061
 8015950:	080184a2 	.word	0x080184a2

08015954 <__sflush_r>:
 8015954:	898a      	ldrh	r2, [r1, #12]
 8015956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801595a:	4605      	mov	r5, r0
 801595c:	0710      	lsls	r0, r2, #28
 801595e:	460c      	mov	r4, r1
 8015960:	d458      	bmi.n	8015a14 <__sflush_r+0xc0>
 8015962:	684b      	ldr	r3, [r1, #4]
 8015964:	2b00      	cmp	r3, #0
 8015966:	dc05      	bgt.n	8015974 <__sflush_r+0x20>
 8015968:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801596a:	2b00      	cmp	r3, #0
 801596c:	dc02      	bgt.n	8015974 <__sflush_r+0x20>
 801596e:	2000      	movs	r0, #0
 8015970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015976:	2e00      	cmp	r6, #0
 8015978:	d0f9      	beq.n	801596e <__sflush_r+0x1a>
 801597a:	2300      	movs	r3, #0
 801597c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015980:	682f      	ldr	r7, [r5, #0]
 8015982:	6a21      	ldr	r1, [r4, #32]
 8015984:	602b      	str	r3, [r5, #0]
 8015986:	d032      	beq.n	80159ee <__sflush_r+0x9a>
 8015988:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801598a:	89a3      	ldrh	r3, [r4, #12]
 801598c:	075a      	lsls	r2, r3, #29
 801598e:	d505      	bpl.n	801599c <__sflush_r+0x48>
 8015990:	6863      	ldr	r3, [r4, #4]
 8015992:	1ac0      	subs	r0, r0, r3
 8015994:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015996:	b10b      	cbz	r3, 801599c <__sflush_r+0x48>
 8015998:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801599a:	1ac0      	subs	r0, r0, r3
 801599c:	2300      	movs	r3, #0
 801599e:	4602      	mov	r2, r0
 80159a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80159a2:	6a21      	ldr	r1, [r4, #32]
 80159a4:	4628      	mov	r0, r5
 80159a6:	47b0      	blx	r6
 80159a8:	1c43      	adds	r3, r0, #1
 80159aa:	89a3      	ldrh	r3, [r4, #12]
 80159ac:	d106      	bne.n	80159bc <__sflush_r+0x68>
 80159ae:	6829      	ldr	r1, [r5, #0]
 80159b0:	291d      	cmp	r1, #29
 80159b2:	d82b      	bhi.n	8015a0c <__sflush_r+0xb8>
 80159b4:	4a29      	ldr	r2, [pc, #164]	; (8015a5c <__sflush_r+0x108>)
 80159b6:	410a      	asrs	r2, r1
 80159b8:	07d6      	lsls	r6, r2, #31
 80159ba:	d427      	bmi.n	8015a0c <__sflush_r+0xb8>
 80159bc:	2200      	movs	r2, #0
 80159be:	6062      	str	r2, [r4, #4]
 80159c0:	04d9      	lsls	r1, r3, #19
 80159c2:	6922      	ldr	r2, [r4, #16]
 80159c4:	6022      	str	r2, [r4, #0]
 80159c6:	d504      	bpl.n	80159d2 <__sflush_r+0x7e>
 80159c8:	1c42      	adds	r2, r0, #1
 80159ca:	d101      	bne.n	80159d0 <__sflush_r+0x7c>
 80159cc:	682b      	ldr	r3, [r5, #0]
 80159ce:	b903      	cbnz	r3, 80159d2 <__sflush_r+0x7e>
 80159d0:	6560      	str	r0, [r4, #84]	; 0x54
 80159d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80159d4:	602f      	str	r7, [r5, #0]
 80159d6:	2900      	cmp	r1, #0
 80159d8:	d0c9      	beq.n	801596e <__sflush_r+0x1a>
 80159da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80159de:	4299      	cmp	r1, r3
 80159e0:	d002      	beq.n	80159e8 <__sflush_r+0x94>
 80159e2:	4628      	mov	r0, r5
 80159e4:	f7fd fefa 	bl	80137dc <_free_r>
 80159e8:	2000      	movs	r0, #0
 80159ea:	6360      	str	r0, [r4, #52]	; 0x34
 80159ec:	e7c0      	b.n	8015970 <__sflush_r+0x1c>
 80159ee:	2301      	movs	r3, #1
 80159f0:	4628      	mov	r0, r5
 80159f2:	47b0      	blx	r6
 80159f4:	1c41      	adds	r1, r0, #1
 80159f6:	d1c8      	bne.n	801598a <__sflush_r+0x36>
 80159f8:	682b      	ldr	r3, [r5, #0]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d0c5      	beq.n	801598a <__sflush_r+0x36>
 80159fe:	2b1d      	cmp	r3, #29
 8015a00:	d001      	beq.n	8015a06 <__sflush_r+0xb2>
 8015a02:	2b16      	cmp	r3, #22
 8015a04:	d101      	bne.n	8015a0a <__sflush_r+0xb6>
 8015a06:	602f      	str	r7, [r5, #0]
 8015a08:	e7b1      	b.n	801596e <__sflush_r+0x1a>
 8015a0a:	89a3      	ldrh	r3, [r4, #12]
 8015a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a10:	81a3      	strh	r3, [r4, #12]
 8015a12:	e7ad      	b.n	8015970 <__sflush_r+0x1c>
 8015a14:	690f      	ldr	r7, [r1, #16]
 8015a16:	2f00      	cmp	r7, #0
 8015a18:	d0a9      	beq.n	801596e <__sflush_r+0x1a>
 8015a1a:	0793      	lsls	r3, r2, #30
 8015a1c:	680e      	ldr	r6, [r1, #0]
 8015a1e:	bf08      	it	eq
 8015a20:	694b      	ldreq	r3, [r1, #20]
 8015a22:	600f      	str	r7, [r1, #0]
 8015a24:	bf18      	it	ne
 8015a26:	2300      	movne	r3, #0
 8015a28:	eba6 0807 	sub.w	r8, r6, r7
 8015a2c:	608b      	str	r3, [r1, #8]
 8015a2e:	f1b8 0f00 	cmp.w	r8, #0
 8015a32:	dd9c      	ble.n	801596e <__sflush_r+0x1a>
 8015a34:	6a21      	ldr	r1, [r4, #32]
 8015a36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015a38:	4643      	mov	r3, r8
 8015a3a:	463a      	mov	r2, r7
 8015a3c:	4628      	mov	r0, r5
 8015a3e:	47b0      	blx	r6
 8015a40:	2800      	cmp	r0, #0
 8015a42:	dc06      	bgt.n	8015a52 <__sflush_r+0xfe>
 8015a44:	89a3      	ldrh	r3, [r4, #12]
 8015a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a4a:	81a3      	strh	r3, [r4, #12]
 8015a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8015a50:	e78e      	b.n	8015970 <__sflush_r+0x1c>
 8015a52:	4407      	add	r7, r0
 8015a54:	eba8 0800 	sub.w	r8, r8, r0
 8015a58:	e7e9      	b.n	8015a2e <__sflush_r+0xda>
 8015a5a:	bf00      	nop
 8015a5c:	dfbffffe 	.word	0xdfbffffe

08015a60 <_fflush_r>:
 8015a60:	b538      	push	{r3, r4, r5, lr}
 8015a62:	690b      	ldr	r3, [r1, #16]
 8015a64:	4605      	mov	r5, r0
 8015a66:	460c      	mov	r4, r1
 8015a68:	b913      	cbnz	r3, 8015a70 <_fflush_r+0x10>
 8015a6a:	2500      	movs	r5, #0
 8015a6c:	4628      	mov	r0, r5
 8015a6e:	bd38      	pop	{r3, r4, r5, pc}
 8015a70:	b118      	cbz	r0, 8015a7a <_fflush_r+0x1a>
 8015a72:	6a03      	ldr	r3, [r0, #32]
 8015a74:	b90b      	cbnz	r3, 8015a7a <_fflush_r+0x1a>
 8015a76:	f7fc fe73 	bl	8012760 <__sinit>
 8015a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d0f3      	beq.n	8015a6a <_fflush_r+0xa>
 8015a82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015a84:	07d0      	lsls	r0, r2, #31
 8015a86:	d404      	bmi.n	8015a92 <_fflush_r+0x32>
 8015a88:	0599      	lsls	r1, r3, #22
 8015a8a:	d402      	bmi.n	8015a92 <_fflush_r+0x32>
 8015a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a8e:	f7fd f814 	bl	8012aba <__retarget_lock_acquire_recursive>
 8015a92:	4628      	mov	r0, r5
 8015a94:	4621      	mov	r1, r4
 8015a96:	f7ff ff5d 	bl	8015954 <__sflush_r>
 8015a9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015a9c:	07da      	lsls	r2, r3, #31
 8015a9e:	4605      	mov	r5, r0
 8015aa0:	d4e4      	bmi.n	8015a6c <_fflush_r+0xc>
 8015aa2:	89a3      	ldrh	r3, [r4, #12]
 8015aa4:	059b      	lsls	r3, r3, #22
 8015aa6:	d4e1      	bmi.n	8015a6c <_fflush_r+0xc>
 8015aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015aaa:	f7fd f807 	bl	8012abc <__retarget_lock_release_recursive>
 8015aae:	e7dd      	b.n	8015a6c <_fflush_r+0xc>

08015ab0 <__sccl>:
 8015ab0:	b570      	push	{r4, r5, r6, lr}
 8015ab2:	780b      	ldrb	r3, [r1, #0]
 8015ab4:	4604      	mov	r4, r0
 8015ab6:	2b5e      	cmp	r3, #94	; 0x5e
 8015ab8:	bf0b      	itete	eq
 8015aba:	784b      	ldrbeq	r3, [r1, #1]
 8015abc:	1c4a      	addne	r2, r1, #1
 8015abe:	1c8a      	addeq	r2, r1, #2
 8015ac0:	2100      	movne	r1, #0
 8015ac2:	bf08      	it	eq
 8015ac4:	2101      	moveq	r1, #1
 8015ac6:	3801      	subs	r0, #1
 8015ac8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8015acc:	f800 1f01 	strb.w	r1, [r0, #1]!
 8015ad0:	42a8      	cmp	r0, r5
 8015ad2:	d1fb      	bne.n	8015acc <__sccl+0x1c>
 8015ad4:	b90b      	cbnz	r3, 8015ada <__sccl+0x2a>
 8015ad6:	1e50      	subs	r0, r2, #1
 8015ad8:	bd70      	pop	{r4, r5, r6, pc}
 8015ada:	f081 0101 	eor.w	r1, r1, #1
 8015ade:	54e1      	strb	r1, [r4, r3]
 8015ae0:	4610      	mov	r0, r2
 8015ae2:	4602      	mov	r2, r0
 8015ae4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8015ae8:	2d2d      	cmp	r5, #45	; 0x2d
 8015aea:	d005      	beq.n	8015af8 <__sccl+0x48>
 8015aec:	2d5d      	cmp	r5, #93	; 0x5d
 8015aee:	d016      	beq.n	8015b1e <__sccl+0x6e>
 8015af0:	2d00      	cmp	r5, #0
 8015af2:	d0f1      	beq.n	8015ad8 <__sccl+0x28>
 8015af4:	462b      	mov	r3, r5
 8015af6:	e7f2      	b.n	8015ade <__sccl+0x2e>
 8015af8:	7846      	ldrb	r6, [r0, #1]
 8015afa:	2e5d      	cmp	r6, #93	; 0x5d
 8015afc:	d0fa      	beq.n	8015af4 <__sccl+0x44>
 8015afe:	42b3      	cmp	r3, r6
 8015b00:	dcf8      	bgt.n	8015af4 <__sccl+0x44>
 8015b02:	3002      	adds	r0, #2
 8015b04:	461a      	mov	r2, r3
 8015b06:	3201      	adds	r2, #1
 8015b08:	4296      	cmp	r6, r2
 8015b0a:	54a1      	strb	r1, [r4, r2]
 8015b0c:	dcfb      	bgt.n	8015b06 <__sccl+0x56>
 8015b0e:	1af2      	subs	r2, r6, r3
 8015b10:	3a01      	subs	r2, #1
 8015b12:	1c5d      	adds	r5, r3, #1
 8015b14:	42b3      	cmp	r3, r6
 8015b16:	bfa8      	it	ge
 8015b18:	2200      	movge	r2, #0
 8015b1a:	18ab      	adds	r3, r5, r2
 8015b1c:	e7e1      	b.n	8015ae2 <__sccl+0x32>
 8015b1e:	4610      	mov	r0, r2
 8015b20:	e7da      	b.n	8015ad8 <__sccl+0x28>

08015b22 <__submore>:
 8015b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b26:	460c      	mov	r4, r1
 8015b28:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015b2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015b2e:	4299      	cmp	r1, r3
 8015b30:	d11d      	bne.n	8015b6e <__submore+0x4c>
 8015b32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015b36:	f7fd fec5 	bl	80138c4 <_malloc_r>
 8015b3a:	b918      	cbnz	r0, 8015b44 <__submore+0x22>
 8015b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8015b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015b48:	63a3      	str	r3, [r4, #56]	; 0x38
 8015b4a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8015b4e:	6360      	str	r0, [r4, #52]	; 0x34
 8015b50:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8015b54:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015b58:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8015b5c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015b60:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8015b64:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8015b68:	6020      	str	r0, [r4, #0]
 8015b6a:	2000      	movs	r0, #0
 8015b6c:	e7e8      	b.n	8015b40 <__submore+0x1e>
 8015b6e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8015b70:	0077      	lsls	r7, r6, #1
 8015b72:	463a      	mov	r2, r7
 8015b74:	f000 fbe1 	bl	801633a <_realloc_r>
 8015b78:	4605      	mov	r5, r0
 8015b7a:	2800      	cmp	r0, #0
 8015b7c:	d0de      	beq.n	8015b3c <__submore+0x1a>
 8015b7e:	eb00 0806 	add.w	r8, r0, r6
 8015b82:	4601      	mov	r1, r0
 8015b84:	4632      	mov	r2, r6
 8015b86:	4640      	mov	r0, r8
 8015b88:	f7fc ff99 	bl	8012abe <memcpy>
 8015b8c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8015b90:	f8c4 8000 	str.w	r8, [r4]
 8015b94:	e7e9      	b.n	8015b6a <__submore+0x48>

08015b96 <memmove>:
 8015b96:	4288      	cmp	r0, r1
 8015b98:	b510      	push	{r4, lr}
 8015b9a:	eb01 0402 	add.w	r4, r1, r2
 8015b9e:	d902      	bls.n	8015ba6 <memmove+0x10>
 8015ba0:	4284      	cmp	r4, r0
 8015ba2:	4623      	mov	r3, r4
 8015ba4:	d807      	bhi.n	8015bb6 <memmove+0x20>
 8015ba6:	1e43      	subs	r3, r0, #1
 8015ba8:	42a1      	cmp	r1, r4
 8015baa:	d008      	beq.n	8015bbe <memmove+0x28>
 8015bac:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015bb0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015bb4:	e7f8      	b.n	8015ba8 <memmove+0x12>
 8015bb6:	4402      	add	r2, r0
 8015bb8:	4601      	mov	r1, r0
 8015bba:	428a      	cmp	r2, r1
 8015bbc:	d100      	bne.n	8015bc0 <memmove+0x2a>
 8015bbe:	bd10      	pop	{r4, pc}
 8015bc0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015bc4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015bc8:	e7f7      	b.n	8015bba <memmove+0x24>
	...

08015bcc <_sbrk_r>:
 8015bcc:	b538      	push	{r3, r4, r5, lr}
 8015bce:	4d06      	ldr	r5, [pc, #24]	; (8015be8 <_sbrk_r+0x1c>)
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	4604      	mov	r4, r0
 8015bd4:	4608      	mov	r0, r1
 8015bd6:	602b      	str	r3, [r5, #0]
 8015bd8:	f7ef fd20 	bl	800561c <_sbrk>
 8015bdc:	1c43      	adds	r3, r0, #1
 8015bde:	d102      	bne.n	8015be6 <_sbrk_r+0x1a>
 8015be0:	682b      	ldr	r3, [r5, #0]
 8015be2:	b103      	cbz	r3, 8015be6 <_sbrk_r+0x1a>
 8015be4:	6023      	str	r3, [r4, #0]
 8015be6:	bd38      	pop	{r3, r4, r5, pc}
 8015be8:	20004bd8 	.word	0x20004bd8
 8015bec:	00000000 	.word	0x00000000

08015bf0 <nan>:
 8015bf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015bf8 <nan+0x8>
 8015bf4:	4770      	bx	lr
 8015bf6:	bf00      	nop
 8015bf8:	00000000 	.word	0x00000000
 8015bfc:	7ff80000 	.word	0x7ff80000

08015c00 <__assert_func>:
 8015c00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015c02:	4614      	mov	r4, r2
 8015c04:	461a      	mov	r2, r3
 8015c06:	4b09      	ldr	r3, [pc, #36]	; (8015c2c <__assert_func+0x2c>)
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	4605      	mov	r5, r0
 8015c0c:	68d8      	ldr	r0, [r3, #12]
 8015c0e:	b14c      	cbz	r4, 8015c24 <__assert_func+0x24>
 8015c10:	4b07      	ldr	r3, [pc, #28]	; (8015c30 <__assert_func+0x30>)
 8015c12:	9100      	str	r1, [sp, #0]
 8015c14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015c18:	4906      	ldr	r1, [pc, #24]	; (8015c34 <__assert_func+0x34>)
 8015c1a:	462b      	mov	r3, r5
 8015c1c:	f000 fc3e 	bl	801649c <fiprintf>
 8015c20:	f000 fc4e 	bl	80164c0 <abort>
 8015c24:	4b04      	ldr	r3, [pc, #16]	; (8015c38 <__assert_func+0x38>)
 8015c26:	461c      	mov	r4, r3
 8015c28:	e7f3      	b.n	8015c12 <__assert_func+0x12>
 8015c2a:	bf00      	nop
 8015c2c:	20000070 	.word	0x20000070
 8015c30:	080184b5 	.word	0x080184b5
 8015c34:	080184c2 	.word	0x080184c2
 8015c38:	080184f0 	.word	0x080184f0

08015c3c <_calloc_r>:
 8015c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015c3e:	fba1 2402 	umull	r2, r4, r1, r2
 8015c42:	b94c      	cbnz	r4, 8015c58 <_calloc_r+0x1c>
 8015c44:	4611      	mov	r1, r2
 8015c46:	9201      	str	r2, [sp, #4]
 8015c48:	f7fd fe3c 	bl	80138c4 <_malloc_r>
 8015c4c:	9a01      	ldr	r2, [sp, #4]
 8015c4e:	4605      	mov	r5, r0
 8015c50:	b930      	cbnz	r0, 8015c60 <_calloc_r+0x24>
 8015c52:	4628      	mov	r0, r5
 8015c54:	b003      	add	sp, #12
 8015c56:	bd30      	pop	{r4, r5, pc}
 8015c58:	220c      	movs	r2, #12
 8015c5a:	6002      	str	r2, [r0, #0]
 8015c5c:	2500      	movs	r5, #0
 8015c5e:	e7f8      	b.n	8015c52 <_calloc_r+0x16>
 8015c60:	4621      	mov	r1, r4
 8015c62:	f7fc fe44 	bl	80128ee <memset>
 8015c66:	e7f4      	b.n	8015c52 <_calloc_r+0x16>

08015c68 <rshift>:
 8015c68:	6903      	ldr	r3, [r0, #16]
 8015c6a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015c6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c72:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015c76:	f100 0414 	add.w	r4, r0, #20
 8015c7a:	dd45      	ble.n	8015d08 <rshift+0xa0>
 8015c7c:	f011 011f 	ands.w	r1, r1, #31
 8015c80:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015c84:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015c88:	d10c      	bne.n	8015ca4 <rshift+0x3c>
 8015c8a:	f100 0710 	add.w	r7, r0, #16
 8015c8e:	4629      	mov	r1, r5
 8015c90:	42b1      	cmp	r1, r6
 8015c92:	d334      	bcc.n	8015cfe <rshift+0x96>
 8015c94:	1a9b      	subs	r3, r3, r2
 8015c96:	009b      	lsls	r3, r3, #2
 8015c98:	1eea      	subs	r2, r5, #3
 8015c9a:	4296      	cmp	r6, r2
 8015c9c:	bf38      	it	cc
 8015c9e:	2300      	movcc	r3, #0
 8015ca0:	4423      	add	r3, r4
 8015ca2:	e015      	b.n	8015cd0 <rshift+0x68>
 8015ca4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015ca8:	f1c1 0820 	rsb	r8, r1, #32
 8015cac:	40cf      	lsrs	r7, r1
 8015cae:	f105 0e04 	add.w	lr, r5, #4
 8015cb2:	46a1      	mov	r9, r4
 8015cb4:	4576      	cmp	r6, lr
 8015cb6:	46f4      	mov	ip, lr
 8015cb8:	d815      	bhi.n	8015ce6 <rshift+0x7e>
 8015cba:	1a9a      	subs	r2, r3, r2
 8015cbc:	0092      	lsls	r2, r2, #2
 8015cbe:	3a04      	subs	r2, #4
 8015cc0:	3501      	adds	r5, #1
 8015cc2:	42ae      	cmp	r6, r5
 8015cc4:	bf38      	it	cc
 8015cc6:	2200      	movcc	r2, #0
 8015cc8:	18a3      	adds	r3, r4, r2
 8015cca:	50a7      	str	r7, [r4, r2]
 8015ccc:	b107      	cbz	r7, 8015cd0 <rshift+0x68>
 8015cce:	3304      	adds	r3, #4
 8015cd0:	1b1a      	subs	r2, r3, r4
 8015cd2:	42a3      	cmp	r3, r4
 8015cd4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015cd8:	bf08      	it	eq
 8015cda:	2300      	moveq	r3, #0
 8015cdc:	6102      	str	r2, [r0, #16]
 8015cde:	bf08      	it	eq
 8015ce0:	6143      	streq	r3, [r0, #20]
 8015ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ce6:	f8dc c000 	ldr.w	ip, [ip]
 8015cea:	fa0c fc08 	lsl.w	ip, ip, r8
 8015cee:	ea4c 0707 	orr.w	r7, ip, r7
 8015cf2:	f849 7b04 	str.w	r7, [r9], #4
 8015cf6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015cfa:	40cf      	lsrs	r7, r1
 8015cfc:	e7da      	b.n	8015cb4 <rshift+0x4c>
 8015cfe:	f851 cb04 	ldr.w	ip, [r1], #4
 8015d02:	f847 cf04 	str.w	ip, [r7, #4]!
 8015d06:	e7c3      	b.n	8015c90 <rshift+0x28>
 8015d08:	4623      	mov	r3, r4
 8015d0a:	e7e1      	b.n	8015cd0 <rshift+0x68>

08015d0c <__hexdig_fun>:
 8015d0c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015d10:	2b09      	cmp	r3, #9
 8015d12:	d802      	bhi.n	8015d1a <__hexdig_fun+0xe>
 8015d14:	3820      	subs	r0, #32
 8015d16:	b2c0      	uxtb	r0, r0
 8015d18:	4770      	bx	lr
 8015d1a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015d1e:	2b05      	cmp	r3, #5
 8015d20:	d801      	bhi.n	8015d26 <__hexdig_fun+0x1a>
 8015d22:	3847      	subs	r0, #71	; 0x47
 8015d24:	e7f7      	b.n	8015d16 <__hexdig_fun+0xa>
 8015d26:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015d2a:	2b05      	cmp	r3, #5
 8015d2c:	d801      	bhi.n	8015d32 <__hexdig_fun+0x26>
 8015d2e:	3827      	subs	r0, #39	; 0x27
 8015d30:	e7f1      	b.n	8015d16 <__hexdig_fun+0xa>
 8015d32:	2000      	movs	r0, #0
 8015d34:	4770      	bx	lr
	...

08015d38 <__gethex>:
 8015d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d3c:	4617      	mov	r7, r2
 8015d3e:	680a      	ldr	r2, [r1, #0]
 8015d40:	b085      	sub	sp, #20
 8015d42:	f102 0b02 	add.w	fp, r2, #2
 8015d46:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015d4a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015d4e:	4681      	mov	r9, r0
 8015d50:	468a      	mov	sl, r1
 8015d52:	9302      	str	r3, [sp, #8]
 8015d54:	32fe      	adds	r2, #254	; 0xfe
 8015d56:	eb02 030b 	add.w	r3, r2, fp
 8015d5a:	46d8      	mov	r8, fp
 8015d5c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8015d60:	9301      	str	r3, [sp, #4]
 8015d62:	2830      	cmp	r0, #48	; 0x30
 8015d64:	d0f7      	beq.n	8015d56 <__gethex+0x1e>
 8015d66:	f7ff ffd1 	bl	8015d0c <__hexdig_fun>
 8015d6a:	4604      	mov	r4, r0
 8015d6c:	2800      	cmp	r0, #0
 8015d6e:	d138      	bne.n	8015de2 <__gethex+0xaa>
 8015d70:	49a7      	ldr	r1, [pc, #668]	; (8016010 <__gethex+0x2d8>)
 8015d72:	2201      	movs	r2, #1
 8015d74:	4640      	mov	r0, r8
 8015d76:	f7fc fdc2 	bl	80128fe <strncmp>
 8015d7a:	4606      	mov	r6, r0
 8015d7c:	2800      	cmp	r0, #0
 8015d7e:	d169      	bne.n	8015e54 <__gethex+0x11c>
 8015d80:	f898 0001 	ldrb.w	r0, [r8, #1]
 8015d84:	465d      	mov	r5, fp
 8015d86:	f7ff ffc1 	bl	8015d0c <__hexdig_fun>
 8015d8a:	2800      	cmp	r0, #0
 8015d8c:	d064      	beq.n	8015e58 <__gethex+0x120>
 8015d8e:	465a      	mov	r2, fp
 8015d90:	7810      	ldrb	r0, [r2, #0]
 8015d92:	2830      	cmp	r0, #48	; 0x30
 8015d94:	4690      	mov	r8, r2
 8015d96:	f102 0201 	add.w	r2, r2, #1
 8015d9a:	d0f9      	beq.n	8015d90 <__gethex+0x58>
 8015d9c:	f7ff ffb6 	bl	8015d0c <__hexdig_fun>
 8015da0:	2301      	movs	r3, #1
 8015da2:	fab0 f480 	clz	r4, r0
 8015da6:	0964      	lsrs	r4, r4, #5
 8015da8:	465e      	mov	r6, fp
 8015daa:	9301      	str	r3, [sp, #4]
 8015dac:	4642      	mov	r2, r8
 8015dae:	4615      	mov	r5, r2
 8015db0:	3201      	adds	r2, #1
 8015db2:	7828      	ldrb	r0, [r5, #0]
 8015db4:	f7ff ffaa 	bl	8015d0c <__hexdig_fun>
 8015db8:	2800      	cmp	r0, #0
 8015dba:	d1f8      	bne.n	8015dae <__gethex+0x76>
 8015dbc:	4994      	ldr	r1, [pc, #592]	; (8016010 <__gethex+0x2d8>)
 8015dbe:	2201      	movs	r2, #1
 8015dc0:	4628      	mov	r0, r5
 8015dc2:	f7fc fd9c 	bl	80128fe <strncmp>
 8015dc6:	b978      	cbnz	r0, 8015de8 <__gethex+0xb0>
 8015dc8:	b946      	cbnz	r6, 8015ddc <__gethex+0xa4>
 8015dca:	1c6e      	adds	r6, r5, #1
 8015dcc:	4632      	mov	r2, r6
 8015dce:	4615      	mov	r5, r2
 8015dd0:	3201      	adds	r2, #1
 8015dd2:	7828      	ldrb	r0, [r5, #0]
 8015dd4:	f7ff ff9a 	bl	8015d0c <__hexdig_fun>
 8015dd8:	2800      	cmp	r0, #0
 8015dda:	d1f8      	bne.n	8015dce <__gethex+0x96>
 8015ddc:	1b73      	subs	r3, r6, r5
 8015dde:	009e      	lsls	r6, r3, #2
 8015de0:	e004      	b.n	8015dec <__gethex+0xb4>
 8015de2:	2400      	movs	r4, #0
 8015de4:	4626      	mov	r6, r4
 8015de6:	e7e1      	b.n	8015dac <__gethex+0x74>
 8015de8:	2e00      	cmp	r6, #0
 8015dea:	d1f7      	bne.n	8015ddc <__gethex+0xa4>
 8015dec:	782b      	ldrb	r3, [r5, #0]
 8015dee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015df2:	2b50      	cmp	r3, #80	; 0x50
 8015df4:	d13d      	bne.n	8015e72 <__gethex+0x13a>
 8015df6:	786b      	ldrb	r3, [r5, #1]
 8015df8:	2b2b      	cmp	r3, #43	; 0x2b
 8015dfa:	d02f      	beq.n	8015e5c <__gethex+0x124>
 8015dfc:	2b2d      	cmp	r3, #45	; 0x2d
 8015dfe:	d031      	beq.n	8015e64 <__gethex+0x12c>
 8015e00:	1c69      	adds	r1, r5, #1
 8015e02:	f04f 0b00 	mov.w	fp, #0
 8015e06:	7808      	ldrb	r0, [r1, #0]
 8015e08:	f7ff ff80 	bl	8015d0c <__hexdig_fun>
 8015e0c:	1e42      	subs	r2, r0, #1
 8015e0e:	b2d2      	uxtb	r2, r2
 8015e10:	2a18      	cmp	r2, #24
 8015e12:	d82e      	bhi.n	8015e72 <__gethex+0x13a>
 8015e14:	f1a0 0210 	sub.w	r2, r0, #16
 8015e18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015e1c:	f7ff ff76 	bl	8015d0c <__hexdig_fun>
 8015e20:	f100 3cff 	add.w	ip, r0, #4294967295
 8015e24:	fa5f fc8c 	uxtb.w	ip, ip
 8015e28:	f1bc 0f18 	cmp.w	ip, #24
 8015e2c:	d91d      	bls.n	8015e6a <__gethex+0x132>
 8015e2e:	f1bb 0f00 	cmp.w	fp, #0
 8015e32:	d000      	beq.n	8015e36 <__gethex+0xfe>
 8015e34:	4252      	negs	r2, r2
 8015e36:	4416      	add	r6, r2
 8015e38:	f8ca 1000 	str.w	r1, [sl]
 8015e3c:	b1dc      	cbz	r4, 8015e76 <__gethex+0x13e>
 8015e3e:	9b01      	ldr	r3, [sp, #4]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	bf14      	ite	ne
 8015e44:	f04f 0800 	movne.w	r8, #0
 8015e48:	f04f 0806 	moveq.w	r8, #6
 8015e4c:	4640      	mov	r0, r8
 8015e4e:	b005      	add	sp, #20
 8015e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e54:	4645      	mov	r5, r8
 8015e56:	4626      	mov	r6, r4
 8015e58:	2401      	movs	r4, #1
 8015e5a:	e7c7      	b.n	8015dec <__gethex+0xb4>
 8015e5c:	f04f 0b00 	mov.w	fp, #0
 8015e60:	1ca9      	adds	r1, r5, #2
 8015e62:	e7d0      	b.n	8015e06 <__gethex+0xce>
 8015e64:	f04f 0b01 	mov.w	fp, #1
 8015e68:	e7fa      	b.n	8015e60 <__gethex+0x128>
 8015e6a:	230a      	movs	r3, #10
 8015e6c:	fb03 0002 	mla	r0, r3, r2, r0
 8015e70:	e7d0      	b.n	8015e14 <__gethex+0xdc>
 8015e72:	4629      	mov	r1, r5
 8015e74:	e7e0      	b.n	8015e38 <__gethex+0x100>
 8015e76:	eba5 0308 	sub.w	r3, r5, r8
 8015e7a:	3b01      	subs	r3, #1
 8015e7c:	4621      	mov	r1, r4
 8015e7e:	2b07      	cmp	r3, #7
 8015e80:	dc0a      	bgt.n	8015e98 <__gethex+0x160>
 8015e82:	4648      	mov	r0, r9
 8015e84:	f7fd fdaa 	bl	80139dc <_Balloc>
 8015e88:	4604      	mov	r4, r0
 8015e8a:	b940      	cbnz	r0, 8015e9e <__gethex+0x166>
 8015e8c:	4b61      	ldr	r3, [pc, #388]	; (8016014 <__gethex+0x2dc>)
 8015e8e:	4602      	mov	r2, r0
 8015e90:	21e4      	movs	r1, #228	; 0xe4
 8015e92:	4861      	ldr	r0, [pc, #388]	; (8016018 <__gethex+0x2e0>)
 8015e94:	f7ff feb4 	bl	8015c00 <__assert_func>
 8015e98:	3101      	adds	r1, #1
 8015e9a:	105b      	asrs	r3, r3, #1
 8015e9c:	e7ef      	b.n	8015e7e <__gethex+0x146>
 8015e9e:	f100 0a14 	add.w	sl, r0, #20
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	495a      	ldr	r1, [pc, #360]	; (8016010 <__gethex+0x2d8>)
 8015ea6:	f8cd a004 	str.w	sl, [sp, #4]
 8015eaa:	469b      	mov	fp, r3
 8015eac:	45a8      	cmp	r8, r5
 8015eae:	d342      	bcc.n	8015f36 <__gethex+0x1fe>
 8015eb0:	9801      	ldr	r0, [sp, #4]
 8015eb2:	f840 bb04 	str.w	fp, [r0], #4
 8015eb6:	eba0 000a 	sub.w	r0, r0, sl
 8015eba:	1080      	asrs	r0, r0, #2
 8015ebc:	6120      	str	r0, [r4, #16]
 8015ebe:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8015ec2:	4658      	mov	r0, fp
 8015ec4:	f7fd fe7c 	bl	8013bc0 <__hi0bits>
 8015ec8:	683d      	ldr	r5, [r7, #0]
 8015eca:	eba8 0000 	sub.w	r0, r8, r0
 8015ece:	42a8      	cmp	r0, r5
 8015ed0:	dd59      	ble.n	8015f86 <__gethex+0x24e>
 8015ed2:	eba0 0805 	sub.w	r8, r0, r5
 8015ed6:	4641      	mov	r1, r8
 8015ed8:	4620      	mov	r0, r4
 8015eda:	f7fe fa0b 	bl	80142f4 <__any_on>
 8015ede:	4683      	mov	fp, r0
 8015ee0:	b1b8      	cbz	r0, 8015f12 <__gethex+0x1da>
 8015ee2:	f108 33ff 	add.w	r3, r8, #4294967295
 8015ee6:	1159      	asrs	r1, r3, #5
 8015ee8:	f003 021f 	and.w	r2, r3, #31
 8015eec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015ef0:	f04f 0b01 	mov.w	fp, #1
 8015ef4:	fa0b f202 	lsl.w	r2, fp, r2
 8015ef8:	420a      	tst	r2, r1
 8015efa:	d00a      	beq.n	8015f12 <__gethex+0x1da>
 8015efc:	455b      	cmp	r3, fp
 8015efe:	dd06      	ble.n	8015f0e <__gethex+0x1d6>
 8015f00:	f1a8 0102 	sub.w	r1, r8, #2
 8015f04:	4620      	mov	r0, r4
 8015f06:	f7fe f9f5 	bl	80142f4 <__any_on>
 8015f0a:	2800      	cmp	r0, #0
 8015f0c:	d138      	bne.n	8015f80 <__gethex+0x248>
 8015f0e:	f04f 0b02 	mov.w	fp, #2
 8015f12:	4641      	mov	r1, r8
 8015f14:	4620      	mov	r0, r4
 8015f16:	f7ff fea7 	bl	8015c68 <rshift>
 8015f1a:	4446      	add	r6, r8
 8015f1c:	68bb      	ldr	r3, [r7, #8]
 8015f1e:	42b3      	cmp	r3, r6
 8015f20:	da41      	bge.n	8015fa6 <__gethex+0x26e>
 8015f22:	4621      	mov	r1, r4
 8015f24:	4648      	mov	r0, r9
 8015f26:	f7fd fd99 	bl	8013a5c <_Bfree>
 8015f2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	6013      	str	r3, [r2, #0]
 8015f30:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8015f34:	e78a      	b.n	8015e4c <__gethex+0x114>
 8015f36:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8015f3a:	2a2e      	cmp	r2, #46	; 0x2e
 8015f3c:	d014      	beq.n	8015f68 <__gethex+0x230>
 8015f3e:	2b20      	cmp	r3, #32
 8015f40:	d106      	bne.n	8015f50 <__gethex+0x218>
 8015f42:	9b01      	ldr	r3, [sp, #4]
 8015f44:	f843 bb04 	str.w	fp, [r3], #4
 8015f48:	f04f 0b00 	mov.w	fp, #0
 8015f4c:	9301      	str	r3, [sp, #4]
 8015f4e:	465b      	mov	r3, fp
 8015f50:	7828      	ldrb	r0, [r5, #0]
 8015f52:	9303      	str	r3, [sp, #12]
 8015f54:	f7ff feda 	bl	8015d0c <__hexdig_fun>
 8015f58:	9b03      	ldr	r3, [sp, #12]
 8015f5a:	f000 000f 	and.w	r0, r0, #15
 8015f5e:	4098      	lsls	r0, r3
 8015f60:	ea4b 0b00 	orr.w	fp, fp, r0
 8015f64:	3304      	adds	r3, #4
 8015f66:	e7a1      	b.n	8015eac <__gethex+0x174>
 8015f68:	45a8      	cmp	r8, r5
 8015f6a:	d8e8      	bhi.n	8015f3e <__gethex+0x206>
 8015f6c:	2201      	movs	r2, #1
 8015f6e:	4628      	mov	r0, r5
 8015f70:	9303      	str	r3, [sp, #12]
 8015f72:	f7fc fcc4 	bl	80128fe <strncmp>
 8015f76:	4926      	ldr	r1, [pc, #152]	; (8016010 <__gethex+0x2d8>)
 8015f78:	9b03      	ldr	r3, [sp, #12]
 8015f7a:	2800      	cmp	r0, #0
 8015f7c:	d1df      	bne.n	8015f3e <__gethex+0x206>
 8015f7e:	e795      	b.n	8015eac <__gethex+0x174>
 8015f80:	f04f 0b03 	mov.w	fp, #3
 8015f84:	e7c5      	b.n	8015f12 <__gethex+0x1da>
 8015f86:	da0b      	bge.n	8015fa0 <__gethex+0x268>
 8015f88:	eba5 0800 	sub.w	r8, r5, r0
 8015f8c:	4621      	mov	r1, r4
 8015f8e:	4642      	mov	r2, r8
 8015f90:	4648      	mov	r0, r9
 8015f92:	f7fd ff7d 	bl	8013e90 <__lshift>
 8015f96:	eba6 0608 	sub.w	r6, r6, r8
 8015f9a:	4604      	mov	r4, r0
 8015f9c:	f100 0a14 	add.w	sl, r0, #20
 8015fa0:	f04f 0b00 	mov.w	fp, #0
 8015fa4:	e7ba      	b.n	8015f1c <__gethex+0x1e4>
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	42b3      	cmp	r3, r6
 8015faa:	dd73      	ble.n	8016094 <__gethex+0x35c>
 8015fac:	1b9e      	subs	r6, r3, r6
 8015fae:	42b5      	cmp	r5, r6
 8015fb0:	dc34      	bgt.n	801601c <__gethex+0x2e4>
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	2b02      	cmp	r3, #2
 8015fb6:	d023      	beq.n	8016000 <__gethex+0x2c8>
 8015fb8:	2b03      	cmp	r3, #3
 8015fba:	d025      	beq.n	8016008 <__gethex+0x2d0>
 8015fbc:	2b01      	cmp	r3, #1
 8015fbe:	d115      	bne.n	8015fec <__gethex+0x2b4>
 8015fc0:	42b5      	cmp	r5, r6
 8015fc2:	d113      	bne.n	8015fec <__gethex+0x2b4>
 8015fc4:	2d01      	cmp	r5, #1
 8015fc6:	d10b      	bne.n	8015fe0 <__gethex+0x2a8>
 8015fc8:	9a02      	ldr	r2, [sp, #8]
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	6013      	str	r3, [r2, #0]
 8015fce:	2301      	movs	r3, #1
 8015fd0:	6123      	str	r3, [r4, #16]
 8015fd2:	f8ca 3000 	str.w	r3, [sl]
 8015fd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015fd8:	f04f 0862 	mov.w	r8, #98	; 0x62
 8015fdc:	601c      	str	r4, [r3, #0]
 8015fde:	e735      	b.n	8015e4c <__gethex+0x114>
 8015fe0:	1e69      	subs	r1, r5, #1
 8015fe2:	4620      	mov	r0, r4
 8015fe4:	f7fe f986 	bl	80142f4 <__any_on>
 8015fe8:	2800      	cmp	r0, #0
 8015fea:	d1ed      	bne.n	8015fc8 <__gethex+0x290>
 8015fec:	4621      	mov	r1, r4
 8015fee:	4648      	mov	r0, r9
 8015ff0:	f7fd fd34 	bl	8013a5c <_Bfree>
 8015ff4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015ff6:	2300      	movs	r3, #0
 8015ff8:	6013      	str	r3, [r2, #0]
 8015ffa:	f04f 0850 	mov.w	r8, #80	; 0x50
 8015ffe:	e725      	b.n	8015e4c <__gethex+0x114>
 8016000:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016002:	2b00      	cmp	r3, #0
 8016004:	d1f2      	bne.n	8015fec <__gethex+0x2b4>
 8016006:	e7df      	b.n	8015fc8 <__gethex+0x290>
 8016008:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801600a:	2b00      	cmp	r3, #0
 801600c:	d1dc      	bne.n	8015fc8 <__gethex+0x290>
 801600e:	e7ed      	b.n	8015fec <__gethex+0x2b4>
 8016010:	0801832c 	.word	0x0801832c
 8016014:	080181c3 	.word	0x080181c3
 8016018:	080184f1 	.word	0x080184f1
 801601c:	f106 38ff 	add.w	r8, r6, #4294967295
 8016020:	f1bb 0f00 	cmp.w	fp, #0
 8016024:	d133      	bne.n	801608e <__gethex+0x356>
 8016026:	f1b8 0f00 	cmp.w	r8, #0
 801602a:	d004      	beq.n	8016036 <__gethex+0x2fe>
 801602c:	4641      	mov	r1, r8
 801602e:	4620      	mov	r0, r4
 8016030:	f7fe f960 	bl	80142f4 <__any_on>
 8016034:	4683      	mov	fp, r0
 8016036:	ea4f 1268 	mov.w	r2, r8, asr #5
 801603a:	2301      	movs	r3, #1
 801603c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016040:	f008 081f 	and.w	r8, r8, #31
 8016044:	fa03 f308 	lsl.w	r3, r3, r8
 8016048:	4213      	tst	r3, r2
 801604a:	4631      	mov	r1, r6
 801604c:	4620      	mov	r0, r4
 801604e:	bf18      	it	ne
 8016050:	f04b 0b02 	orrne.w	fp, fp, #2
 8016054:	1bad      	subs	r5, r5, r6
 8016056:	f7ff fe07 	bl	8015c68 <rshift>
 801605a:	687e      	ldr	r6, [r7, #4]
 801605c:	f04f 0802 	mov.w	r8, #2
 8016060:	f1bb 0f00 	cmp.w	fp, #0
 8016064:	d04a      	beq.n	80160fc <__gethex+0x3c4>
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	2b02      	cmp	r3, #2
 801606a:	d016      	beq.n	801609a <__gethex+0x362>
 801606c:	2b03      	cmp	r3, #3
 801606e:	d018      	beq.n	80160a2 <__gethex+0x36a>
 8016070:	2b01      	cmp	r3, #1
 8016072:	d109      	bne.n	8016088 <__gethex+0x350>
 8016074:	f01b 0f02 	tst.w	fp, #2
 8016078:	d006      	beq.n	8016088 <__gethex+0x350>
 801607a:	f8da 3000 	ldr.w	r3, [sl]
 801607e:	ea4b 0b03 	orr.w	fp, fp, r3
 8016082:	f01b 0f01 	tst.w	fp, #1
 8016086:	d10f      	bne.n	80160a8 <__gethex+0x370>
 8016088:	f048 0810 	orr.w	r8, r8, #16
 801608c:	e036      	b.n	80160fc <__gethex+0x3c4>
 801608e:	f04f 0b01 	mov.w	fp, #1
 8016092:	e7d0      	b.n	8016036 <__gethex+0x2fe>
 8016094:	f04f 0801 	mov.w	r8, #1
 8016098:	e7e2      	b.n	8016060 <__gethex+0x328>
 801609a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801609c:	f1c3 0301 	rsb	r3, r3, #1
 80160a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80160a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d0ef      	beq.n	8016088 <__gethex+0x350>
 80160a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80160ac:	f104 0214 	add.w	r2, r4, #20
 80160b0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80160b4:	9301      	str	r3, [sp, #4]
 80160b6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80160ba:	2300      	movs	r3, #0
 80160bc:	4694      	mov	ip, r2
 80160be:	f852 1b04 	ldr.w	r1, [r2], #4
 80160c2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80160c6:	d01e      	beq.n	8016106 <__gethex+0x3ce>
 80160c8:	3101      	adds	r1, #1
 80160ca:	f8cc 1000 	str.w	r1, [ip]
 80160ce:	f1b8 0f02 	cmp.w	r8, #2
 80160d2:	f104 0214 	add.w	r2, r4, #20
 80160d6:	d13d      	bne.n	8016154 <__gethex+0x41c>
 80160d8:	683b      	ldr	r3, [r7, #0]
 80160da:	3b01      	subs	r3, #1
 80160dc:	42ab      	cmp	r3, r5
 80160de:	d10b      	bne.n	80160f8 <__gethex+0x3c0>
 80160e0:	1169      	asrs	r1, r5, #5
 80160e2:	2301      	movs	r3, #1
 80160e4:	f005 051f 	and.w	r5, r5, #31
 80160e8:	fa03 f505 	lsl.w	r5, r3, r5
 80160ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80160f0:	421d      	tst	r5, r3
 80160f2:	bf18      	it	ne
 80160f4:	f04f 0801 	movne.w	r8, #1
 80160f8:	f048 0820 	orr.w	r8, r8, #32
 80160fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80160fe:	601c      	str	r4, [r3, #0]
 8016100:	9b02      	ldr	r3, [sp, #8]
 8016102:	601e      	str	r6, [r3, #0]
 8016104:	e6a2      	b.n	8015e4c <__gethex+0x114>
 8016106:	4290      	cmp	r0, r2
 8016108:	f842 3c04 	str.w	r3, [r2, #-4]
 801610c:	d8d6      	bhi.n	80160bc <__gethex+0x384>
 801610e:	68a2      	ldr	r2, [r4, #8]
 8016110:	4593      	cmp	fp, r2
 8016112:	db17      	blt.n	8016144 <__gethex+0x40c>
 8016114:	6861      	ldr	r1, [r4, #4]
 8016116:	4648      	mov	r0, r9
 8016118:	3101      	adds	r1, #1
 801611a:	f7fd fc5f 	bl	80139dc <_Balloc>
 801611e:	4682      	mov	sl, r0
 8016120:	b918      	cbnz	r0, 801612a <__gethex+0x3f2>
 8016122:	4b1b      	ldr	r3, [pc, #108]	; (8016190 <__gethex+0x458>)
 8016124:	4602      	mov	r2, r0
 8016126:	2184      	movs	r1, #132	; 0x84
 8016128:	e6b3      	b.n	8015e92 <__gethex+0x15a>
 801612a:	6922      	ldr	r2, [r4, #16]
 801612c:	3202      	adds	r2, #2
 801612e:	f104 010c 	add.w	r1, r4, #12
 8016132:	0092      	lsls	r2, r2, #2
 8016134:	300c      	adds	r0, #12
 8016136:	f7fc fcc2 	bl	8012abe <memcpy>
 801613a:	4621      	mov	r1, r4
 801613c:	4648      	mov	r0, r9
 801613e:	f7fd fc8d 	bl	8013a5c <_Bfree>
 8016142:	4654      	mov	r4, sl
 8016144:	6922      	ldr	r2, [r4, #16]
 8016146:	1c51      	adds	r1, r2, #1
 8016148:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801614c:	6121      	str	r1, [r4, #16]
 801614e:	2101      	movs	r1, #1
 8016150:	6151      	str	r1, [r2, #20]
 8016152:	e7bc      	b.n	80160ce <__gethex+0x396>
 8016154:	6921      	ldr	r1, [r4, #16]
 8016156:	4559      	cmp	r1, fp
 8016158:	dd0b      	ble.n	8016172 <__gethex+0x43a>
 801615a:	2101      	movs	r1, #1
 801615c:	4620      	mov	r0, r4
 801615e:	f7ff fd83 	bl	8015c68 <rshift>
 8016162:	68bb      	ldr	r3, [r7, #8]
 8016164:	3601      	adds	r6, #1
 8016166:	42b3      	cmp	r3, r6
 8016168:	f6ff aedb 	blt.w	8015f22 <__gethex+0x1ea>
 801616c:	f04f 0801 	mov.w	r8, #1
 8016170:	e7c2      	b.n	80160f8 <__gethex+0x3c0>
 8016172:	f015 051f 	ands.w	r5, r5, #31
 8016176:	d0f9      	beq.n	801616c <__gethex+0x434>
 8016178:	9b01      	ldr	r3, [sp, #4]
 801617a:	441a      	add	r2, r3
 801617c:	f1c5 0520 	rsb	r5, r5, #32
 8016180:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8016184:	f7fd fd1c 	bl	8013bc0 <__hi0bits>
 8016188:	42a8      	cmp	r0, r5
 801618a:	dbe6      	blt.n	801615a <__gethex+0x422>
 801618c:	e7ee      	b.n	801616c <__gethex+0x434>
 801618e:	bf00      	nop
 8016190:	080181c3 	.word	0x080181c3

08016194 <L_shift>:
 8016194:	f1c2 0208 	rsb	r2, r2, #8
 8016198:	0092      	lsls	r2, r2, #2
 801619a:	b570      	push	{r4, r5, r6, lr}
 801619c:	f1c2 0620 	rsb	r6, r2, #32
 80161a0:	6843      	ldr	r3, [r0, #4]
 80161a2:	6804      	ldr	r4, [r0, #0]
 80161a4:	fa03 f506 	lsl.w	r5, r3, r6
 80161a8:	432c      	orrs	r4, r5
 80161aa:	40d3      	lsrs	r3, r2
 80161ac:	6004      	str	r4, [r0, #0]
 80161ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80161b2:	4288      	cmp	r0, r1
 80161b4:	d3f4      	bcc.n	80161a0 <L_shift+0xc>
 80161b6:	bd70      	pop	{r4, r5, r6, pc}

080161b8 <__match>:
 80161b8:	b530      	push	{r4, r5, lr}
 80161ba:	6803      	ldr	r3, [r0, #0]
 80161bc:	3301      	adds	r3, #1
 80161be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80161c2:	b914      	cbnz	r4, 80161ca <__match+0x12>
 80161c4:	6003      	str	r3, [r0, #0]
 80161c6:	2001      	movs	r0, #1
 80161c8:	bd30      	pop	{r4, r5, pc}
 80161ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80161ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80161d2:	2d19      	cmp	r5, #25
 80161d4:	bf98      	it	ls
 80161d6:	3220      	addls	r2, #32
 80161d8:	42a2      	cmp	r2, r4
 80161da:	d0f0      	beq.n	80161be <__match+0x6>
 80161dc:	2000      	movs	r0, #0
 80161de:	e7f3      	b.n	80161c8 <__match+0x10>

080161e0 <__hexnan>:
 80161e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161e4:	680b      	ldr	r3, [r1, #0]
 80161e6:	6801      	ldr	r1, [r0, #0]
 80161e8:	115e      	asrs	r6, r3, #5
 80161ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80161ee:	f013 031f 	ands.w	r3, r3, #31
 80161f2:	b087      	sub	sp, #28
 80161f4:	bf18      	it	ne
 80161f6:	3604      	addne	r6, #4
 80161f8:	2500      	movs	r5, #0
 80161fa:	1f37      	subs	r7, r6, #4
 80161fc:	4682      	mov	sl, r0
 80161fe:	4690      	mov	r8, r2
 8016200:	9301      	str	r3, [sp, #4]
 8016202:	f846 5c04 	str.w	r5, [r6, #-4]
 8016206:	46b9      	mov	r9, r7
 8016208:	463c      	mov	r4, r7
 801620a:	9502      	str	r5, [sp, #8]
 801620c:	46ab      	mov	fp, r5
 801620e:	784a      	ldrb	r2, [r1, #1]
 8016210:	1c4b      	adds	r3, r1, #1
 8016212:	9303      	str	r3, [sp, #12]
 8016214:	b342      	cbz	r2, 8016268 <__hexnan+0x88>
 8016216:	4610      	mov	r0, r2
 8016218:	9105      	str	r1, [sp, #20]
 801621a:	9204      	str	r2, [sp, #16]
 801621c:	f7ff fd76 	bl	8015d0c <__hexdig_fun>
 8016220:	2800      	cmp	r0, #0
 8016222:	d14f      	bne.n	80162c4 <__hexnan+0xe4>
 8016224:	9a04      	ldr	r2, [sp, #16]
 8016226:	9905      	ldr	r1, [sp, #20]
 8016228:	2a20      	cmp	r2, #32
 801622a:	d818      	bhi.n	801625e <__hexnan+0x7e>
 801622c:	9b02      	ldr	r3, [sp, #8]
 801622e:	459b      	cmp	fp, r3
 8016230:	dd13      	ble.n	801625a <__hexnan+0x7a>
 8016232:	454c      	cmp	r4, r9
 8016234:	d206      	bcs.n	8016244 <__hexnan+0x64>
 8016236:	2d07      	cmp	r5, #7
 8016238:	dc04      	bgt.n	8016244 <__hexnan+0x64>
 801623a:	462a      	mov	r2, r5
 801623c:	4649      	mov	r1, r9
 801623e:	4620      	mov	r0, r4
 8016240:	f7ff ffa8 	bl	8016194 <L_shift>
 8016244:	4544      	cmp	r4, r8
 8016246:	d950      	bls.n	80162ea <__hexnan+0x10a>
 8016248:	2300      	movs	r3, #0
 801624a:	f1a4 0904 	sub.w	r9, r4, #4
 801624e:	f844 3c04 	str.w	r3, [r4, #-4]
 8016252:	f8cd b008 	str.w	fp, [sp, #8]
 8016256:	464c      	mov	r4, r9
 8016258:	461d      	mov	r5, r3
 801625a:	9903      	ldr	r1, [sp, #12]
 801625c:	e7d7      	b.n	801620e <__hexnan+0x2e>
 801625e:	2a29      	cmp	r2, #41	; 0x29
 8016260:	d155      	bne.n	801630e <__hexnan+0x12e>
 8016262:	3102      	adds	r1, #2
 8016264:	f8ca 1000 	str.w	r1, [sl]
 8016268:	f1bb 0f00 	cmp.w	fp, #0
 801626c:	d04f      	beq.n	801630e <__hexnan+0x12e>
 801626e:	454c      	cmp	r4, r9
 8016270:	d206      	bcs.n	8016280 <__hexnan+0xa0>
 8016272:	2d07      	cmp	r5, #7
 8016274:	dc04      	bgt.n	8016280 <__hexnan+0xa0>
 8016276:	462a      	mov	r2, r5
 8016278:	4649      	mov	r1, r9
 801627a:	4620      	mov	r0, r4
 801627c:	f7ff ff8a 	bl	8016194 <L_shift>
 8016280:	4544      	cmp	r4, r8
 8016282:	d934      	bls.n	80162ee <__hexnan+0x10e>
 8016284:	f1a8 0204 	sub.w	r2, r8, #4
 8016288:	4623      	mov	r3, r4
 801628a:	f853 1b04 	ldr.w	r1, [r3], #4
 801628e:	f842 1f04 	str.w	r1, [r2, #4]!
 8016292:	429f      	cmp	r7, r3
 8016294:	d2f9      	bcs.n	801628a <__hexnan+0xaa>
 8016296:	1b3b      	subs	r3, r7, r4
 8016298:	f023 0303 	bic.w	r3, r3, #3
 801629c:	3304      	adds	r3, #4
 801629e:	3e03      	subs	r6, #3
 80162a0:	3401      	adds	r4, #1
 80162a2:	42a6      	cmp	r6, r4
 80162a4:	bf38      	it	cc
 80162a6:	2304      	movcc	r3, #4
 80162a8:	4443      	add	r3, r8
 80162aa:	2200      	movs	r2, #0
 80162ac:	f843 2b04 	str.w	r2, [r3], #4
 80162b0:	429f      	cmp	r7, r3
 80162b2:	d2fb      	bcs.n	80162ac <__hexnan+0xcc>
 80162b4:	683b      	ldr	r3, [r7, #0]
 80162b6:	b91b      	cbnz	r3, 80162c0 <__hexnan+0xe0>
 80162b8:	4547      	cmp	r7, r8
 80162ba:	d126      	bne.n	801630a <__hexnan+0x12a>
 80162bc:	2301      	movs	r3, #1
 80162be:	603b      	str	r3, [r7, #0]
 80162c0:	2005      	movs	r0, #5
 80162c2:	e025      	b.n	8016310 <__hexnan+0x130>
 80162c4:	3501      	adds	r5, #1
 80162c6:	2d08      	cmp	r5, #8
 80162c8:	f10b 0b01 	add.w	fp, fp, #1
 80162cc:	dd06      	ble.n	80162dc <__hexnan+0xfc>
 80162ce:	4544      	cmp	r4, r8
 80162d0:	d9c3      	bls.n	801625a <__hexnan+0x7a>
 80162d2:	2300      	movs	r3, #0
 80162d4:	f844 3c04 	str.w	r3, [r4, #-4]
 80162d8:	2501      	movs	r5, #1
 80162da:	3c04      	subs	r4, #4
 80162dc:	6822      	ldr	r2, [r4, #0]
 80162de:	f000 000f 	and.w	r0, r0, #15
 80162e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80162e6:	6020      	str	r0, [r4, #0]
 80162e8:	e7b7      	b.n	801625a <__hexnan+0x7a>
 80162ea:	2508      	movs	r5, #8
 80162ec:	e7b5      	b.n	801625a <__hexnan+0x7a>
 80162ee:	9b01      	ldr	r3, [sp, #4]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d0df      	beq.n	80162b4 <__hexnan+0xd4>
 80162f4:	f1c3 0320 	rsb	r3, r3, #32
 80162f8:	f04f 32ff 	mov.w	r2, #4294967295
 80162fc:	40da      	lsrs	r2, r3
 80162fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016302:	4013      	ands	r3, r2
 8016304:	f846 3c04 	str.w	r3, [r6, #-4]
 8016308:	e7d4      	b.n	80162b4 <__hexnan+0xd4>
 801630a:	3f04      	subs	r7, #4
 801630c:	e7d2      	b.n	80162b4 <__hexnan+0xd4>
 801630e:	2004      	movs	r0, #4
 8016310:	b007      	add	sp, #28
 8016312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016316 <__ascii_mbtowc>:
 8016316:	b082      	sub	sp, #8
 8016318:	b901      	cbnz	r1, 801631c <__ascii_mbtowc+0x6>
 801631a:	a901      	add	r1, sp, #4
 801631c:	b142      	cbz	r2, 8016330 <__ascii_mbtowc+0x1a>
 801631e:	b14b      	cbz	r3, 8016334 <__ascii_mbtowc+0x1e>
 8016320:	7813      	ldrb	r3, [r2, #0]
 8016322:	600b      	str	r3, [r1, #0]
 8016324:	7812      	ldrb	r2, [r2, #0]
 8016326:	1e10      	subs	r0, r2, #0
 8016328:	bf18      	it	ne
 801632a:	2001      	movne	r0, #1
 801632c:	b002      	add	sp, #8
 801632e:	4770      	bx	lr
 8016330:	4610      	mov	r0, r2
 8016332:	e7fb      	b.n	801632c <__ascii_mbtowc+0x16>
 8016334:	f06f 0001 	mvn.w	r0, #1
 8016338:	e7f8      	b.n	801632c <__ascii_mbtowc+0x16>

0801633a <_realloc_r>:
 801633a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801633e:	4680      	mov	r8, r0
 8016340:	4614      	mov	r4, r2
 8016342:	460e      	mov	r6, r1
 8016344:	b921      	cbnz	r1, 8016350 <_realloc_r+0x16>
 8016346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801634a:	4611      	mov	r1, r2
 801634c:	f7fd baba 	b.w	80138c4 <_malloc_r>
 8016350:	b92a      	cbnz	r2, 801635e <_realloc_r+0x24>
 8016352:	f7fd fa43 	bl	80137dc <_free_r>
 8016356:	4625      	mov	r5, r4
 8016358:	4628      	mov	r0, r5
 801635a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801635e:	f000 f8b6 	bl	80164ce <_malloc_usable_size_r>
 8016362:	4284      	cmp	r4, r0
 8016364:	4607      	mov	r7, r0
 8016366:	d802      	bhi.n	801636e <_realloc_r+0x34>
 8016368:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801636c:	d812      	bhi.n	8016394 <_realloc_r+0x5a>
 801636e:	4621      	mov	r1, r4
 8016370:	4640      	mov	r0, r8
 8016372:	f7fd faa7 	bl	80138c4 <_malloc_r>
 8016376:	4605      	mov	r5, r0
 8016378:	2800      	cmp	r0, #0
 801637a:	d0ed      	beq.n	8016358 <_realloc_r+0x1e>
 801637c:	42bc      	cmp	r4, r7
 801637e:	4622      	mov	r2, r4
 8016380:	4631      	mov	r1, r6
 8016382:	bf28      	it	cs
 8016384:	463a      	movcs	r2, r7
 8016386:	f7fc fb9a 	bl	8012abe <memcpy>
 801638a:	4631      	mov	r1, r6
 801638c:	4640      	mov	r0, r8
 801638e:	f7fd fa25 	bl	80137dc <_free_r>
 8016392:	e7e1      	b.n	8016358 <_realloc_r+0x1e>
 8016394:	4635      	mov	r5, r6
 8016396:	e7df      	b.n	8016358 <_realloc_r+0x1e>

08016398 <_strtoul_l.constprop.0>:
 8016398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801639c:	4f36      	ldr	r7, [pc, #216]	; (8016478 <_strtoul_l.constprop.0+0xe0>)
 801639e:	4686      	mov	lr, r0
 80163a0:	460d      	mov	r5, r1
 80163a2:	4628      	mov	r0, r5
 80163a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80163a8:	5d3e      	ldrb	r6, [r7, r4]
 80163aa:	f016 0608 	ands.w	r6, r6, #8
 80163ae:	d1f8      	bne.n	80163a2 <_strtoul_l.constprop.0+0xa>
 80163b0:	2c2d      	cmp	r4, #45	; 0x2d
 80163b2:	d130      	bne.n	8016416 <_strtoul_l.constprop.0+0x7e>
 80163b4:	782c      	ldrb	r4, [r5, #0]
 80163b6:	2601      	movs	r6, #1
 80163b8:	1c85      	adds	r5, r0, #2
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d057      	beq.n	801646e <_strtoul_l.constprop.0+0xd6>
 80163be:	2b10      	cmp	r3, #16
 80163c0:	d109      	bne.n	80163d6 <_strtoul_l.constprop.0+0x3e>
 80163c2:	2c30      	cmp	r4, #48	; 0x30
 80163c4:	d107      	bne.n	80163d6 <_strtoul_l.constprop.0+0x3e>
 80163c6:	7828      	ldrb	r0, [r5, #0]
 80163c8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80163cc:	2858      	cmp	r0, #88	; 0x58
 80163ce:	d149      	bne.n	8016464 <_strtoul_l.constprop.0+0xcc>
 80163d0:	786c      	ldrb	r4, [r5, #1]
 80163d2:	2310      	movs	r3, #16
 80163d4:	3502      	adds	r5, #2
 80163d6:	f04f 38ff 	mov.w	r8, #4294967295
 80163da:	2700      	movs	r7, #0
 80163dc:	fbb8 f8f3 	udiv	r8, r8, r3
 80163e0:	fb03 f908 	mul.w	r9, r3, r8
 80163e4:	ea6f 0909 	mvn.w	r9, r9
 80163e8:	4638      	mov	r0, r7
 80163ea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80163ee:	f1bc 0f09 	cmp.w	ip, #9
 80163f2:	d815      	bhi.n	8016420 <_strtoul_l.constprop.0+0x88>
 80163f4:	4664      	mov	r4, ip
 80163f6:	42a3      	cmp	r3, r4
 80163f8:	dd23      	ble.n	8016442 <_strtoul_l.constprop.0+0xaa>
 80163fa:	f1b7 3fff 	cmp.w	r7, #4294967295
 80163fe:	d007      	beq.n	8016410 <_strtoul_l.constprop.0+0x78>
 8016400:	4580      	cmp	r8, r0
 8016402:	d31b      	bcc.n	801643c <_strtoul_l.constprop.0+0xa4>
 8016404:	d101      	bne.n	801640a <_strtoul_l.constprop.0+0x72>
 8016406:	45a1      	cmp	r9, r4
 8016408:	db18      	blt.n	801643c <_strtoul_l.constprop.0+0xa4>
 801640a:	fb00 4003 	mla	r0, r0, r3, r4
 801640e:	2701      	movs	r7, #1
 8016410:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016414:	e7e9      	b.n	80163ea <_strtoul_l.constprop.0+0x52>
 8016416:	2c2b      	cmp	r4, #43	; 0x2b
 8016418:	bf04      	itt	eq
 801641a:	782c      	ldrbeq	r4, [r5, #0]
 801641c:	1c85      	addeq	r5, r0, #2
 801641e:	e7cc      	b.n	80163ba <_strtoul_l.constprop.0+0x22>
 8016420:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016424:	f1bc 0f19 	cmp.w	ip, #25
 8016428:	d801      	bhi.n	801642e <_strtoul_l.constprop.0+0x96>
 801642a:	3c37      	subs	r4, #55	; 0x37
 801642c:	e7e3      	b.n	80163f6 <_strtoul_l.constprop.0+0x5e>
 801642e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016432:	f1bc 0f19 	cmp.w	ip, #25
 8016436:	d804      	bhi.n	8016442 <_strtoul_l.constprop.0+0xaa>
 8016438:	3c57      	subs	r4, #87	; 0x57
 801643a:	e7dc      	b.n	80163f6 <_strtoul_l.constprop.0+0x5e>
 801643c:	f04f 37ff 	mov.w	r7, #4294967295
 8016440:	e7e6      	b.n	8016410 <_strtoul_l.constprop.0+0x78>
 8016442:	1c7b      	adds	r3, r7, #1
 8016444:	d106      	bne.n	8016454 <_strtoul_l.constprop.0+0xbc>
 8016446:	2322      	movs	r3, #34	; 0x22
 8016448:	f8ce 3000 	str.w	r3, [lr]
 801644c:	4638      	mov	r0, r7
 801644e:	b932      	cbnz	r2, 801645e <_strtoul_l.constprop.0+0xc6>
 8016450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016454:	b106      	cbz	r6, 8016458 <_strtoul_l.constprop.0+0xc0>
 8016456:	4240      	negs	r0, r0
 8016458:	2a00      	cmp	r2, #0
 801645a:	d0f9      	beq.n	8016450 <_strtoul_l.constprop.0+0xb8>
 801645c:	b107      	cbz	r7, 8016460 <_strtoul_l.constprop.0+0xc8>
 801645e:	1e69      	subs	r1, r5, #1
 8016460:	6011      	str	r1, [r2, #0]
 8016462:	e7f5      	b.n	8016450 <_strtoul_l.constprop.0+0xb8>
 8016464:	2430      	movs	r4, #48	; 0x30
 8016466:	2b00      	cmp	r3, #0
 8016468:	d1b5      	bne.n	80163d6 <_strtoul_l.constprop.0+0x3e>
 801646a:	2308      	movs	r3, #8
 801646c:	e7b3      	b.n	80163d6 <_strtoul_l.constprop.0+0x3e>
 801646e:	2c30      	cmp	r4, #48	; 0x30
 8016470:	d0a9      	beq.n	80163c6 <_strtoul_l.constprop.0+0x2e>
 8016472:	230a      	movs	r3, #10
 8016474:	e7af      	b.n	80163d6 <_strtoul_l.constprop.0+0x3e>
 8016476:	bf00      	nop
 8016478:	08018381 	.word	0x08018381

0801647c <_strtoul_r>:
 801647c:	f7ff bf8c 	b.w	8016398 <_strtoul_l.constprop.0>

08016480 <__ascii_wctomb>:
 8016480:	b149      	cbz	r1, 8016496 <__ascii_wctomb+0x16>
 8016482:	2aff      	cmp	r2, #255	; 0xff
 8016484:	bf85      	ittet	hi
 8016486:	238a      	movhi	r3, #138	; 0x8a
 8016488:	6003      	strhi	r3, [r0, #0]
 801648a:	700a      	strbls	r2, [r1, #0]
 801648c:	f04f 30ff 	movhi.w	r0, #4294967295
 8016490:	bf98      	it	ls
 8016492:	2001      	movls	r0, #1
 8016494:	4770      	bx	lr
 8016496:	4608      	mov	r0, r1
 8016498:	4770      	bx	lr
	...

0801649c <fiprintf>:
 801649c:	b40e      	push	{r1, r2, r3}
 801649e:	b503      	push	{r0, r1, lr}
 80164a0:	4601      	mov	r1, r0
 80164a2:	ab03      	add	r3, sp, #12
 80164a4:	4805      	ldr	r0, [pc, #20]	; (80164bc <fiprintf+0x20>)
 80164a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80164aa:	6800      	ldr	r0, [r0, #0]
 80164ac:	9301      	str	r3, [sp, #4]
 80164ae:	f000 f83f 	bl	8016530 <_vfiprintf_r>
 80164b2:	b002      	add	sp, #8
 80164b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80164b8:	b003      	add	sp, #12
 80164ba:	4770      	bx	lr
 80164bc:	20000070 	.word	0x20000070

080164c0 <abort>:
 80164c0:	b508      	push	{r3, lr}
 80164c2:	2006      	movs	r0, #6
 80164c4:	f000 fa0c 	bl	80168e0 <raise>
 80164c8:	2001      	movs	r0, #1
 80164ca:	f7ef f82f 	bl	800552c <_exit>

080164ce <_malloc_usable_size_r>:
 80164ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80164d2:	1f18      	subs	r0, r3, #4
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	bfbc      	itt	lt
 80164d8:	580b      	ldrlt	r3, [r1, r0]
 80164da:	18c0      	addlt	r0, r0, r3
 80164dc:	4770      	bx	lr

080164de <__sfputc_r>:
 80164de:	6893      	ldr	r3, [r2, #8]
 80164e0:	3b01      	subs	r3, #1
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	b410      	push	{r4}
 80164e6:	6093      	str	r3, [r2, #8]
 80164e8:	da08      	bge.n	80164fc <__sfputc_r+0x1e>
 80164ea:	6994      	ldr	r4, [r2, #24]
 80164ec:	42a3      	cmp	r3, r4
 80164ee:	db01      	blt.n	80164f4 <__sfputc_r+0x16>
 80164f0:	290a      	cmp	r1, #10
 80164f2:	d103      	bne.n	80164fc <__sfputc_r+0x1e>
 80164f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80164f8:	f000 b934 	b.w	8016764 <__swbuf_r>
 80164fc:	6813      	ldr	r3, [r2, #0]
 80164fe:	1c58      	adds	r0, r3, #1
 8016500:	6010      	str	r0, [r2, #0]
 8016502:	7019      	strb	r1, [r3, #0]
 8016504:	4608      	mov	r0, r1
 8016506:	f85d 4b04 	ldr.w	r4, [sp], #4
 801650a:	4770      	bx	lr

0801650c <__sfputs_r>:
 801650c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801650e:	4606      	mov	r6, r0
 8016510:	460f      	mov	r7, r1
 8016512:	4614      	mov	r4, r2
 8016514:	18d5      	adds	r5, r2, r3
 8016516:	42ac      	cmp	r4, r5
 8016518:	d101      	bne.n	801651e <__sfputs_r+0x12>
 801651a:	2000      	movs	r0, #0
 801651c:	e007      	b.n	801652e <__sfputs_r+0x22>
 801651e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016522:	463a      	mov	r2, r7
 8016524:	4630      	mov	r0, r6
 8016526:	f7ff ffda 	bl	80164de <__sfputc_r>
 801652a:	1c43      	adds	r3, r0, #1
 801652c:	d1f3      	bne.n	8016516 <__sfputs_r+0xa>
 801652e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016530 <_vfiprintf_r>:
 8016530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016534:	460d      	mov	r5, r1
 8016536:	b09d      	sub	sp, #116	; 0x74
 8016538:	4614      	mov	r4, r2
 801653a:	4698      	mov	r8, r3
 801653c:	4606      	mov	r6, r0
 801653e:	b118      	cbz	r0, 8016548 <_vfiprintf_r+0x18>
 8016540:	6a03      	ldr	r3, [r0, #32]
 8016542:	b90b      	cbnz	r3, 8016548 <_vfiprintf_r+0x18>
 8016544:	f7fc f90c 	bl	8012760 <__sinit>
 8016548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801654a:	07d9      	lsls	r1, r3, #31
 801654c:	d405      	bmi.n	801655a <_vfiprintf_r+0x2a>
 801654e:	89ab      	ldrh	r3, [r5, #12]
 8016550:	059a      	lsls	r2, r3, #22
 8016552:	d402      	bmi.n	801655a <_vfiprintf_r+0x2a>
 8016554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016556:	f7fc fab0 	bl	8012aba <__retarget_lock_acquire_recursive>
 801655a:	89ab      	ldrh	r3, [r5, #12]
 801655c:	071b      	lsls	r3, r3, #28
 801655e:	d501      	bpl.n	8016564 <_vfiprintf_r+0x34>
 8016560:	692b      	ldr	r3, [r5, #16]
 8016562:	b99b      	cbnz	r3, 801658c <_vfiprintf_r+0x5c>
 8016564:	4629      	mov	r1, r5
 8016566:	4630      	mov	r0, r6
 8016568:	f000 f93a 	bl	80167e0 <__swsetup_r>
 801656c:	b170      	cbz	r0, 801658c <_vfiprintf_r+0x5c>
 801656e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016570:	07dc      	lsls	r4, r3, #31
 8016572:	d504      	bpl.n	801657e <_vfiprintf_r+0x4e>
 8016574:	f04f 30ff 	mov.w	r0, #4294967295
 8016578:	b01d      	add	sp, #116	; 0x74
 801657a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801657e:	89ab      	ldrh	r3, [r5, #12]
 8016580:	0598      	lsls	r0, r3, #22
 8016582:	d4f7      	bmi.n	8016574 <_vfiprintf_r+0x44>
 8016584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016586:	f7fc fa99 	bl	8012abc <__retarget_lock_release_recursive>
 801658a:	e7f3      	b.n	8016574 <_vfiprintf_r+0x44>
 801658c:	2300      	movs	r3, #0
 801658e:	9309      	str	r3, [sp, #36]	; 0x24
 8016590:	2320      	movs	r3, #32
 8016592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016596:	f8cd 800c 	str.w	r8, [sp, #12]
 801659a:	2330      	movs	r3, #48	; 0x30
 801659c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016750 <_vfiprintf_r+0x220>
 80165a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80165a4:	f04f 0901 	mov.w	r9, #1
 80165a8:	4623      	mov	r3, r4
 80165aa:	469a      	mov	sl, r3
 80165ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80165b0:	b10a      	cbz	r2, 80165b6 <_vfiprintf_r+0x86>
 80165b2:	2a25      	cmp	r2, #37	; 0x25
 80165b4:	d1f9      	bne.n	80165aa <_vfiprintf_r+0x7a>
 80165b6:	ebba 0b04 	subs.w	fp, sl, r4
 80165ba:	d00b      	beq.n	80165d4 <_vfiprintf_r+0xa4>
 80165bc:	465b      	mov	r3, fp
 80165be:	4622      	mov	r2, r4
 80165c0:	4629      	mov	r1, r5
 80165c2:	4630      	mov	r0, r6
 80165c4:	f7ff ffa2 	bl	801650c <__sfputs_r>
 80165c8:	3001      	adds	r0, #1
 80165ca:	f000 80a9 	beq.w	8016720 <_vfiprintf_r+0x1f0>
 80165ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80165d0:	445a      	add	r2, fp
 80165d2:	9209      	str	r2, [sp, #36]	; 0x24
 80165d4:	f89a 3000 	ldrb.w	r3, [sl]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	f000 80a1 	beq.w	8016720 <_vfiprintf_r+0x1f0>
 80165de:	2300      	movs	r3, #0
 80165e0:	f04f 32ff 	mov.w	r2, #4294967295
 80165e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80165e8:	f10a 0a01 	add.w	sl, sl, #1
 80165ec:	9304      	str	r3, [sp, #16]
 80165ee:	9307      	str	r3, [sp, #28]
 80165f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80165f4:	931a      	str	r3, [sp, #104]	; 0x68
 80165f6:	4654      	mov	r4, sl
 80165f8:	2205      	movs	r2, #5
 80165fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80165fe:	4854      	ldr	r0, [pc, #336]	; (8016750 <_vfiprintf_r+0x220>)
 8016600:	f7e9 fe0e 	bl	8000220 <memchr>
 8016604:	9a04      	ldr	r2, [sp, #16]
 8016606:	b9d8      	cbnz	r0, 8016640 <_vfiprintf_r+0x110>
 8016608:	06d1      	lsls	r1, r2, #27
 801660a:	bf44      	itt	mi
 801660c:	2320      	movmi	r3, #32
 801660e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016612:	0713      	lsls	r3, r2, #28
 8016614:	bf44      	itt	mi
 8016616:	232b      	movmi	r3, #43	; 0x2b
 8016618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801661c:	f89a 3000 	ldrb.w	r3, [sl]
 8016620:	2b2a      	cmp	r3, #42	; 0x2a
 8016622:	d015      	beq.n	8016650 <_vfiprintf_r+0x120>
 8016624:	9a07      	ldr	r2, [sp, #28]
 8016626:	4654      	mov	r4, sl
 8016628:	2000      	movs	r0, #0
 801662a:	f04f 0c0a 	mov.w	ip, #10
 801662e:	4621      	mov	r1, r4
 8016630:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016634:	3b30      	subs	r3, #48	; 0x30
 8016636:	2b09      	cmp	r3, #9
 8016638:	d94d      	bls.n	80166d6 <_vfiprintf_r+0x1a6>
 801663a:	b1b0      	cbz	r0, 801666a <_vfiprintf_r+0x13a>
 801663c:	9207      	str	r2, [sp, #28]
 801663e:	e014      	b.n	801666a <_vfiprintf_r+0x13a>
 8016640:	eba0 0308 	sub.w	r3, r0, r8
 8016644:	fa09 f303 	lsl.w	r3, r9, r3
 8016648:	4313      	orrs	r3, r2
 801664a:	9304      	str	r3, [sp, #16]
 801664c:	46a2      	mov	sl, r4
 801664e:	e7d2      	b.n	80165f6 <_vfiprintf_r+0xc6>
 8016650:	9b03      	ldr	r3, [sp, #12]
 8016652:	1d19      	adds	r1, r3, #4
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	9103      	str	r1, [sp, #12]
 8016658:	2b00      	cmp	r3, #0
 801665a:	bfbb      	ittet	lt
 801665c:	425b      	neglt	r3, r3
 801665e:	f042 0202 	orrlt.w	r2, r2, #2
 8016662:	9307      	strge	r3, [sp, #28]
 8016664:	9307      	strlt	r3, [sp, #28]
 8016666:	bfb8      	it	lt
 8016668:	9204      	strlt	r2, [sp, #16]
 801666a:	7823      	ldrb	r3, [r4, #0]
 801666c:	2b2e      	cmp	r3, #46	; 0x2e
 801666e:	d10c      	bne.n	801668a <_vfiprintf_r+0x15a>
 8016670:	7863      	ldrb	r3, [r4, #1]
 8016672:	2b2a      	cmp	r3, #42	; 0x2a
 8016674:	d134      	bne.n	80166e0 <_vfiprintf_r+0x1b0>
 8016676:	9b03      	ldr	r3, [sp, #12]
 8016678:	1d1a      	adds	r2, r3, #4
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	9203      	str	r2, [sp, #12]
 801667e:	2b00      	cmp	r3, #0
 8016680:	bfb8      	it	lt
 8016682:	f04f 33ff 	movlt.w	r3, #4294967295
 8016686:	3402      	adds	r4, #2
 8016688:	9305      	str	r3, [sp, #20]
 801668a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016760 <_vfiprintf_r+0x230>
 801668e:	7821      	ldrb	r1, [r4, #0]
 8016690:	2203      	movs	r2, #3
 8016692:	4650      	mov	r0, sl
 8016694:	f7e9 fdc4 	bl	8000220 <memchr>
 8016698:	b138      	cbz	r0, 80166aa <_vfiprintf_r+0x17a>
 801669a:	9b04      	ldr	r3, [sp, #16]
 801669c:	eba0 000a 	sub.w	r0, r0, sl
 80166a0:	2240      	movs	r2, #64	; 0x40
 80166a2:	4082      	lsls	r2, r0
 80166a4:	4313      	orrs	r3, r2
 80166a6:	3401      	adds	r4, #1
 80166a8:	9304      	str	r3, [sp, #16]
 80166aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80166ae:	4829      	ldr	r0, [pc, #164]	; (8016754 <_vfiprintf_r+0x224>)
 80166b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80166b4:	2206      	movs	r2, #6
 80166b6:	f7e9 fdb3 	bl	8000220 <memchr>
 80166ba:	2800      	cmp	r0, #0
 80166bc:	d03f      	beq.n	801673e <_vfiprintf_r+0x20e>
 80166be:	4b26      	ldr	r3, [pc, #152]	; (8016758 <_vfiprintf_r+0x228>)
 80166c0:	bb1b      	cbnz	r3, 801670a <_vfiprintf_r+0x1da>
 80166c2:	9b03      	ldr	r3, [sp, #12]
 80166c4:	3307      	adds	r3, #7
 80166c6:	f023 0307 	bic.w	r3, r3, #7
 80166ca:	3308      	adds	r3, #8
 80166cc:	9303      	str	r3, [sp, #12]
 80166ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166d0:	443b      	add	r3, r7
 80166d2:	9309      	str	r3, [sp, #36]	; 0x24
 80166d4:	e768      	b.n	80165a8 <_vfiprintf_r+0x78>
 80166d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80166da:	460c      	mov	r4, r1
 80166dc:	2001      	movs	r0, #1
 80166de:	e7a6      	b.n	801662e <_vfiprintf_r+0xfe>
 80166e0:	2300      	movs	r3, #0
 80166e2:	3401      	adds	r4, #1
 80166e4:	9305      	str	r3, [sp, #20]
 80166e6:	4619      	mov	r1, r3
 80166e8:	f04f 0c0a 	mov.w	ip, #10
 80166ec:	4620      	mov	r0, r4
 80166ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80166f2:	3a30      	subs	r2, #48	; 0x30
 80166f4:	2a09      	cmp	r2, #9
 80166f6:	d903      	bls.n	8016700 <_vfiprintf_r+0x1d0>
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d0c6      	beq.n	801668a <_vfiprintf_r+0x15a>
 80166fc:	9105      	str	r1, [sp, #20]
 80166fe:	e7c4      	b.n	801668a <_vfiprintf_r+0x15a>
 8016700:	fb0c 2101 	mla	r1, ip, r1, r2
 8016704:	4604      	mov	r4, r0
 8016706:	2301      	movs	r3, #1
 8016708:	e7f0      	b.n	80166ec <_vfiprintf_r+0x1bc>
 801670a:	ab03      	add	r3, sp, #12
 801670c:	9300      	str	r3, [sp, #0]
 801670e:	462a      	mov	r2, r5
 8016710:	4b12      	ldr	r3, [pc, #72]	; (801675c <_vfiprintf_r+0x22c>)
 8016712:	a904      	add	r1, sp, #16
 8016714:	4630      	mov	r0, r6
 8016716:	f7fb f9c1 	bl	8011a9c <_printf_float>
 801671a:	4607      	mov	r7, r0
 801671c:	1c78      	adds	r0, r7, #1
 801671e:	d1d6      	bne.n	80166ce <_vfiprintf_r+0x19e>
 8016720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016722:	07d9      	lsls	r1, r3, #31
 8016724:	d405      	bmi.n	8016732 <_vfiprintf_r+0x202>
 8016726:	89ab      	ldrh	r3, [r5, #12]
 8016728:	059a      	lsls	r2, r3, #22
 801672a:	d402      	bmi.n	8016732 <_vfiprintf_r+0x202>
 801672c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801672e:	f7fc f9c5 	bl	8012abc <__retarget_lock_release_recursive>
 8016732:	89ab      	ldrh	r3, [r5, #12]
 8016734:	065b      	lsls	r3, r3, #25
 8016736:	f53f af1d 	bmi.w	8016574 <_vfiprintf_r+0x44>
 801673a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801673c:	e71c      	b.n	8016578 <_vfiprintf_r+0x48>
 801673e:	ab03      	add	r3, sp, #12
 8016740:	9300      	str	r3, [sp, #0]
 8016742:	462a      	mov	r2, r5
 8016744:	4b05      	ldr	r3, [pc, #20]	; (801675c <_vfiprintf_r+0x22c>)
 8016746:	a904      	add	r1, sp, #16
 8016748:	4630      	mov	r0, r6
 801674a:	f7fb fc4b 	bl	8011fe4 <_printf_i>
 801674e:	e7e4      	b.n	801671a <_vfiprintf_r+0x1ea>
 8016750:	08018481 	.word	0x08018481
 8016754:	0801848b 	.word	0x0801848b
 8016758:	08011a9d 	.word	0x08011a9d
 801675c:	0801650d 	.word	0x0801650d
 8016760:	08018487 	.word	0x08018487

08016764 <__swbuf_r>:
 8016764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016766:	460e      	mov	r6, r1
 8016768:	4614      	mov	r4, r2
 801676a:	4605      	mov	r5, r0
 801676c:	b118      	cbz	r0, 8016776 <__swbuf_r+0x12>
 801676e:	6a03      	ldr	r3, [r0, #32]
 8016770:	b90b      	cbnz	r3, 8016776 <__swbuf_r+0x12>
 8016772:	f7fb fff5 	bl	8012760 <__sinit>
 8016776:	69a3      	ldr	r3, [r4, #24]
 8016778:	60a3      	str	r3, [r4, #8]
 801677a:	89a3      	ldrh	r3, [r4, #12]
 801677c:	071a      	lsls	r2, r3, #28
 801677e:	d525      	bpl.n	80167cc <__swbuf_r+0x68>
 8016780:	6923      	ldr	r3, [r4, #16]
 8016782:	b31b      	cbz	r3, 80167cc <__swbuf_r+0x68>
 8016784:	6823      	ldr	r3, [r4, #0]
 8016786:	6922      	ldr	r2, [r4, #16]
 8016788:	1a98      	subs	r0, r3, r2
 801678a:	6963      	ldr	r3, [r4, #20]
 801678c:	b2f6      	uxtb	r6, r6
 801678e:	4283      	cmp	r3, r0
 8016790:	4637      	mov	r7, r6
 8016792:	dc04      	bgt.n	801679e <__swbuf_r+0x3a>
 8016794:	4621      	mov	r1, r4
 8016796:	4628      	mov	r0, r5
 8016798:	f7ff f962 	bl	8015a60 <_fflush_r>
 801679c:	b9e0      	cbnz	r0, 80167d8 <__swbuf_r+0x74>
 801679e:	68a3      	ldr	r3, [r4, #8]
 80167a0:	3b01      	subs	r3, #1
 80167a2:	60a3      	str	r3, [r4, #8]
 80167a4:	6823      	ldr	r3, [r4, #0]
 80167a6:	1c5a      	adds	r2, r3, #1
 80167a8:	6022      	str	r2, [r4, #0]
 80167aa:	701e      	strb	r6, [r3, #0]
 80167ac:	6962      	ldr	r2, [r4, #20]
 80167ae:	1c43      	adds	r3, r0, #1
 80167b0:	429a      	cmp	r2, r3
 80167b2:	d004      	beq.n	80167be <__swbuf_r+0x5a>
 80167b4:	89a3      	ldrh	r3, [r4, #12]
 80167b6:	07db      	lsls	r3, r3, #31
 80167b8:	d506      	bpl.n	80167c8 <__swbuf_r+0x64>
 80167ba:	2e0a      	cmp	r6, #10
 80167bc:	d104      	bne.n	80167c8 <__swbuf_r+0x64>
 80167be:	4621      	mov	r1, r4
 80167c0:	4628      	mov	r0, r5
 80167c2:	f7ff f94d 	bl	8015a60 <_fflush_r>
 80167c6:	b938      	cbnz	r0, 80167d8 <__swbuf_r+0x74>
 80167c8:	4638      	mov	r0, r7
 80167ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167cc:	4621      	mov	r1, r4
 80167ce:	4628      	mov	r0, r5
 80167d0:	f000 f806 	bl	80167e0 <__swsetup_r>
 80167d4:	2800      	cmp	r0, #0
 80167d6:	d0d5      	beq.n	8016784 <__swbuf_r+0x20>
 80167d8:	f04f 37ff 	mov.w	r7, #4294967295
 80167dc:	e7f4      	b.n	80167c8 <__swbuf_r+0x64>
	...

080167e0 <__swsetup_r>:
 80167e0:	b538      	push	{r3, r4, r5, lr}
 80167e2:	4b2a      	ldr	r3, [pc, #168]	; (801688c <__swsetup_r+0xac>)
 80167e4:	4605      	mov	r5, r0
 80167e6:	6818      	ldr	r0, [r3, #0]
 80167e8:	460c      	mov	r4, r1
 80167ea:	b118      	cbz	r0, 80167f4 <__swsetup_r+0x14>
 80167ec:	6a03      	ldr	r3, [r0, #32]
 80167ee:	b90b      	cbnz	r3, 80167f4 <__swsetup_r+0x14>
 80167f0:	f7fb ffb6 	bl	8012760 <__sinit>
 80167f4:	89a3      	ldrh	r3, [r4, #12]
 80167f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80167fa:	0718      	lsls	r0, r3, #28
 80167fc:	d422      	bmi.n	8016844 <__swsetup_r+0x64>
 80167fe:	06d9      	lsls	r1, r3, #27
 8016800:	d407      	bmi.n	8016812 <__swsetup_r+0x32>
 8016802:	2309      	movs	r3, #9
 8016804:	602b      	str	r3, [r5, #0]
 8016806:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801680a:	81a3      	strh	r3, [r4, #12]
 801680c:	f04f 30ff 	mov.w	r0, #4294967295
 8016810:	e034      	b.n	801687c <__swsetup_r+0x9c>
 8016812:	0758      	lsls	r0, r3, #29
 8016814:	d512      	bpl.n	801683c <__swsetup_r+0x5c>
 8016816:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016818:	b141      	cbz	r1, 801682c <__swsetup_r+0x4c>
 801681a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801681e:	4299      	cmp	r1, r3
 8016820:	d002      	beq.n	8016828 <__swsetup_r+0x48>
 8016822:	4628      	mov	r0, r5
 8016824:	f7fc ffda 	bl	80137dc <_free_r>
 8016828:	2300      	movs	r3, #0
 801682a:	6363      	str	r3, [r4, #52]	; 0x34
 801682c:	89a3      	ldrh	r3, [r4, #12]
 801682e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016832:	81a3      	strh	r3, [r4, #12]
 8016834:	2300      	movs	r3, #0
 8016836:	6063      	str	r3, [r4, #4]
 8016838:	6923      	ldr	r3, [r4, #16]
 801683a:	6023      	str	r3, [r4, #0]
 801683c:	89a3      	ldrh	r3, [r4, #12]
 801683e:	f043 0308 	orr.w	r3, r3, #8
 8016842:	81a3      	strh	r3, [r4, #12]
 8016844:	6923      	ldr	r3, [r4, #16]
 8016846:	b94b      	cbnz	r3, 801685c <__swsetup_r+0x7c>
 8016848:	89a3      	ldrh	r3, [r4, #12]
 801684a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801684e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016852:	d003      	beq.n	801685c <__swsetup_r+0x7c>
 8016854:	4621      	mov	r1, r4
 8016856:	4628      	mov	r0, r5
 8016858:	f000 f884 	bl	8016964 <__smakebuf_r>
 801685c:	89a0      	ldrh	r0, [r4, #12]
 801685e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016862:	f010 0301 	ands.w	r3, r0, #1
 8016866:	d00a      	beq.n	801687e <__swsetup_r+0x9e>
 8016868:	2300      	movs	r3, #0
 801686a:	60a3      	str	r3, [r4, #8]
 801686c:	6963      	ldr	r3, [r4, #20]
 801686e:	425b      	negs	r3, r3
 8016870:	61a3      	str	r3, [r4, #24]
 8016872:	6923      	ldr	r3, [r4, #16]
 8016874:	b943      	cbnz	r3, 8016888 <__swsetup_r+0xa8>
 8016876:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801687a:	d1c4      	bne.n	8016806 <__swsetup_r+0x26>
 801687c:	bd38      	pop	{r3, r4, r5, pc}
 801687e:	0781      	lsls	r1, r0, #30
 8016880:	bf58      	it	pl
 8016882:	6963      	ldrpl	r3, [r4, #20]
 8016884:	60a3      	str	r3, [r4, #8]
 8016886:	e7f4      	b.n	8016872 <__swsetup_r+0x92>
 8016888:	2000      	movs	r0, #0
 801688a:	e7f7      	b.n	801687c <__swsetup_r+0x9c>
 801688c:	20000070 	.word	0x20000070

08016890 <_raise_r>:
 8016890:	291f      	cmp	r1, #31
 8016892:	b538      	push	{r3, r4, r5, lr}
 8016894:	4604      	mov	r4, r0
 8016896:	460d      	mov	r5, r1
 8016898:	d904      	bls.n	80168a4 <_raise_r+0x14>
 801689a:	2316      	movs	r3, #22
 801689c:	6003      	str	r3, [r0, #0]
 801689e:	f04f 30ff 	mov.w	r0, #4294967295
 80168a2:	bd38      	pop	{r3, r4, r5, pc}
 80168a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80168a6:	b112      	cbz	r2, 80168ae <_raise_r+0x1e>
 80168a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80168ac:	b94b      	cbnz	r3, 80168c2 <_raise_r+0x32>
 80168ae:	4620      	mov	r0, r4
 80168b0:	f000 f830 	bl	8016914 <_getpid_r>
 80168b4:	462a      	mov	r2, r5
 80168b6:	4601      	mov	r1, r0
 80168b8:	4620      	mov	r0, r4
 80168ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80168be:	f000 b817 	b.w	80168f0 <_kill_r>
 80168c2:	2b01      	cmp	r3, #1
 80168c4:	d00a      	beq.n	80168dc <_raise_r+0x4c>
 80168c6:	1c59      	adds	r1, r3, #1
 80168c8:	d103      	bne.n	80168d2 <_raise_r+0x42>
 80168ca:	2316      	movs	r3, #22
 80168cc:	6003      	str	r3, [r0, #0]
 80168ce:	2001      	movs	r0, #1
 80168d0:	e7e7      	b.n	80168a2 <_raise_r+0x12>
 80168d2:	2400      	movs	r4, #0
 80168d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80168d8:	4628      	mov	r0, r5
 80168da:	4798      	blx	r3
 80168dc:	2000      	movs	r0, #0
 80168de:	e7e0      	b.n	80168a2 <_raise_r+0x12>

080168e0 <raise>:
 80168e0:	4b02      	ldr	r3, [pc, #8]	; (80168ec <raise+0xc>)
 80168e2:	4601      	mov	r1, r0
 80168e4:	6818      	ldr	r0, [r3, #0]
 80168e6:	f7ff bfd3 	b.w	8016890 <_raise_r>
 80168ea:	bf00      	nop
 80168ec:	20000070 	.word	0x20000070

080168f0 <_kill_r>:
 80168f0:	b538      	push	{r3, r4, r5, lr}
 80168f2:	4d07      	ldr	r5, [pc, #28]	; (8016910 <_kill_r+0x20>)
 80168f4:	2300      	movs	r3, #0
 80168f6:	4604      	mov	r4, r0
 80168f8:	4608      	mov	r0, r1
 80168fa:	4611      	mov	r1, r2
 80168fc:	602b      	str	r3, [r5, #0]
 80168fe:	f7ee fe05 	bl	800550c <_kill>
 8016902:	1c43      	adds	r3, r0, #1
 8016904:	d102      	bne.n	801690c <_kill_r+0x1c>
 8016906:	682b      	ldr	r3, [r5, #0]
 8016908:	b103      	cbz	r3, 801690c <_kill_r+0x1c>
 801690a:	6023      	str	r3, [r4, #0]
 801690c:	bd38      	pop	{r3, r4, r5, pc}
 801690e:	bf00      	nop
 8016910:	20004bd8 	.word	0x20004bd8

08016914 <_getpid_r>:
 8016914:	f7ee bdf2 	b.w	80054fc <_getpid>

08016918 <__swhatbuf_r>:
 8016918:	b570      	push	{r4, r5, r6, lr}
 801691a:	460c      	mov	r4, r1
 801691c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016920:	2900      	cmp	r1, #0
 8016922:	b096      	sub	sp, #88	; 0x58
 8016924:	4615      	mov	r5, r2
 8016926:	461e      	mov	r6, r3
 8016928:	da0d      	bge.n	8016946 <__swhatbuf_r+0x2e>
 801692a:	89a3      	ldrh	r3, [r4, #12]
 801692c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016930:	f04f 0100 	mov.w	r1, #0
 8016934:	bf0c      	ite	eq
 8016936:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801693a:	2340      	movne	r3, #64	; 0x40
 801693c:	2000      	movs	r0, #0
 801693e:	6031      	str	r1, [r6, #0]
 8016940:	602b      	str	r3, [r5, #0]
 8016942:	b016      	add	sp, #88	; 0x58
 8016944:	bd70      	pop	{r4, r5, r6, pc}
 8016946:	466a      	mov	r2, sp
 8016948:	f000 f848 	bl	80169dc <_fstat_r>
 801694c:	2800      	cmp	r0, #0
 801694e:	dbec      	blt.n	801692a <__swhatbuf_r+0x12>
 8016950:	9901      	ldr	r1, [sp, #4]
 8016952:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8016956:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801695a:	4259      	negs	r1, r3
 801695c:	4159      	adcs	r1, r3
 801695e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016962:	e7eb      	b.n	801693c <__swhatbuf_r+0x24>

08016964 <__smakebuf_r>:
 8016964:	898b      	ldrh	r3, [r1, #12]
 8016966:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016968:	079d      	lsls	r5, r3, #30
 801696a:	4606      	mov	r6, r0
 801696c:	460c      	mov	r4, r1
 801696e:	d507      	bpl.n	8016980 <__smakebuf_r+0x1c>
 8016970:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016974:	6023      	str	r3, [r4, #0]
 8016976:	6123      	str	r3, [r4, #16]
 8016978:	2301      	movs	r3, #1
 801697a:	6163      	str	r3, [r4, #20]
 801697c:	b002      	add	sp, #8
 801697e:	bd70      	pop	{r4, r5, r6, pc}
 8016980:	ab01      	add	r3, sp, #4
 8016982:	466a      	mov	r2, sp
 8016984:	f7ff ffc8 	bl	8016918 <__swhatbuf_r>
 8016988:	9900      	ldr	r1, [sp, #0]
 801698a:	4605      	mov	r5, r0
 801698c:	4630      	mov	r0, r6
 801698e:	f7fc ff99 	bl	80138c4 <_malloc_r>
 8016992:	b948      	cbnz	r0, 80169a8 <__smakebuf_r+0x44>
 8016994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016998:	059a      	lsls	r2, r3, #22
 801699a:	d4ef      	bmi.n	801697c <__smakebuf_r+0x18>
 801699c:	f023 0303 	bic.w	r3, r3, #3
 80169a0:	f043 0302 	orr.w	r3, r3, #2
 80169a4:	81a3      	strh	r3, [r4, #12]
 80169a6:	e7e3      	b.n	8016970 <__smakebuf_r+0xc>
 80169a8:	89a3      	ldrh	r3, [r4, #12]
 80169aa:	6020      	str	r0, [r4, #0]
 80169ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80169b0:	81a3      	strh	r3, [r4, #12]
 80169b2:	9b00      	ldr	r3, [sp, #0]
 80169b4:	6163      	str	r3, [r4, #20]
 80169b6:	9b01      	ldr	r3, [sp, #4]
 80169b8:	6120      	str	r0, [r4, #16]
 80169ba:	b15b      	cbz	r3, 80169d4 <__smakebuf_r+0x70>
 80169bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80169c0:	4630      	mov	r0, r6
 80169c2:	f000 f81d 	bl	8016a00 <_isatty_r>
 80169c6:	b128      	cbz	r0, 80169d4 <__smakebuf_r+0x70>
 80169c8:	89a3      	ldrh	r3, [r4, #12]
 80169ca:	f023 0303 	bic.w	r3, r3, #3
 80169ce:	f043 0301 	orr.w	r3, r3, #1
 80169d2:	81a3      	strh	r3, [r4, #12]
 80169d4:	89a3      	ldrh	r3, [r4, #12]
 80169d6:	431d      	orrs	r5, r3
 80169d8:	81a5      	strh	r5, [r4, #12]
 80169da:	e7cf      	b.n	801697c <__smakebuf_r+0x18>

080169dc <_fstat_r>:
 80169dc:	b538      	push	{r3, r4, r5, lr}
 80169de:	4d07      	ldr	r5, [pc, #28]	; (80169fc <_fstat_r+0x20>)
 80169e0:	2300      	movs	r3, #0
 80169e2:	4604      	mov	r4, r0
 80169e4:	4608      	mov	r0, r1
 80169e6:	4611      	mov	r1, r2
 80169e8:	602b      	str	r3, [r5, #0]
 80169ea:	f7ee fdee 	bl	80055ca <_fstat>
 80169ee:	1c43      	adds	r3, r0, #1
 80169f0:	d102      	bne.n	80169f8 <_fstat_r+0x1c>
 80169f2:	682b      	ldr	r3, [r5, #0]
 80169f4:	b103      	cbz	r3, 80169f8 <_fstat_r+0x1c>
 80169f6:	6023      	str	r3, [r4, #0]
 80169f8:	bd38      	pop	{r3, r4, r5, pc}
 80169fa:	bf00      	nop
 80169fc:	20004bd8 	.word	0x20004bd8

08016a00 <_isatty_r>:
 8016a00:	b538      	push	{r3, r4, r5, lr}
 8016a02:	4d06      	ldr	r5, [pc, #24]	; (8016a1c <_isatty_r+0x1c>)
 8016a04:	2300      	movs	r3, #0
 8016a06:	4604      	mov	r4, r0
 8016a08:	4608      	mov	r0, r1
 8016a0a:	602b      	str	r3, [r5, #0]
 8016a0c:	f7ee fded 	bl	80055ea <_isatty>
 8016a10:	1c43      	adds	r3, r0, #1
 8016a12:	d102      	bne.n	8016a1a <_isatty_r+0x1a>
 8016a14:	682b      	ldr	r3, [r5, #0]
 8016a16:	b103      	cbz	r3, 8016a1a <_isatty_r+0x1a>
 8016a18:	6023      	str	r3, [r4, #0]
 8016a1a:	bd38      	pop	{r3, r4, r5, pc}
 8016a1c:	20004bd8 	.word	0x20004bd8

08016a20 <pow>:
 8016a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a22:	ed2d 8b02 	vpush	{d8}
 8016a26:	eeb0 8a40 	vmov.f32	s16, s0
 8016a2a:	eef0 8a60 	vmov.f32	s17, s1
 8016a2e:	ec55 4b11 	vmov	r4, r5, d1
 8016a32:	f000 f979 	bl	8016d28 <__ieee754_pow>
 8016a36:	4622      	mov	r2, r4
 8016a38:	462b      	mov	r3, r5
 8016a3a:	4620      	mov	r0, r4
 8016a3c:	4629      	mov	r1, r5
 8016a3e:	ec57 6b10 	vmov	r6, r7, d0
 8016a42:	f7ea f89b 	bl	8000b7c <__aeabi_dcmpun>
 8016a46:	2800      	cmp	r0, #0
 8016a48:	d13b      	bne.n	8016ac2 <pow+0xa2>
 8016a4a:	ec51 0b18 	vmov	r0, r1, d8
 8016a4e:	2200      	movs	r2, #0
 8016a50:	2300      	movs	r3, #0
 8016a52:	f7ea f861 	bl	8000b18 <__aeabi_dcmpeq>
 8016a56:	b1b8      	cbz	r0, 8016a88 <pow+0x68>
 8016a58:	2200      	movs	r2, #0
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	4620      	mov	r0, r4
 8016a5e:	4629      	mov	r1, r5
 8016a60:	f7ea f85a 	bl	8000b18 <__aeabi_dcmpeq>
 8016a64:	2800      	cmp	r0, #0
 8016a66:	d146      	bne.n	8016af6 <pow+0xd6>
 8016a68:	ec45 4b10 	vmov	d0, r4, r5
 8016a6c:	f000 f876 	bl	8016b5c <finite>
 8016a70:	b338      	cbz	r0, 8016ac2 <pow+0xa2>
 8016a72:	2200      	movs	r2, #0
 8016a74:	2300      	movs	r3, #0
 8016a76:	4620      	mov	r0, r4
 8016a78:	4629      	mov	r1, r5
 8016a7a:	f7ea f857 	bl	8000b2c <__aeabi_dcmplt>
 8016a7e:	b300      	cbz	r0, 8016ac2 <pow+0xa2>
 8016a80:	f7fb fff0 	bl	8012a64 <__errno>
 8016a84:	2322      	movs	r3, #34	; 0x22
 8016a86:	e01b      	b.n	8016ac0 <pow+0xa0>
 8016a88:	ec47 6b10 	vmov	d0, r6, r7
 8016a8c:	f000 f866 	bl	8016b5c <finite>
 8016a90:	b9e0      	cbnz	r0, 8016acc <pow+0xac>
 8016a92:	eeb0 0a48 	vmov.f32	s0, s16
 8016a96:	eef0 0a68 	vmov.f32	s1, s17
 8016a9a:	f000 f85f 	bl	8016b5c <finite>
 8016a9e:	b1a8      	cbz	r0, 8016acc <pow+0xac>
 8016aa0:	ec45 4b10 	vmov	d0, r4, r5
 8016aa4:	f000 f85a 	bl	8016b5c <finite>
 8016aa8:	b180      	cbz	r0, 8016acc <pow+0xac>
 8016aaa:	4632      	mov	r2, r6
 8016aac:	463b      	mov	r3, r7
 8016aae:	4630      	mov	r0, r6
 8016ab0:	4639      	mov	r1, r7
 8016ab2:	f7ea f863 	bl	8000b7c <__aeabi_dcmpun>
 8016ab6:	2800      	cmp	r0, #0
 8016ab8:	d0e2      	beq.n	8016a80 <pow+0x60>
 8016aba:	f7fb ffd3 	bl	8012a64 <__errno>
 8016abe:	2321      	movs	r3, #33	; 0x21
 8016ac0:	6003      	str	r3, [r0, #0]
 8016ac2:	ecbd 8b02 	vpop	{d8}
 8016ac6:	ec47 6b10 	vmov	d0, r6, r7
 8016aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016acc:	2200      	movs	r2, #0
 8016ace:	2300      	movs	r3, #0
 8016ad0:	4630      	mov	r0, r6
 8016ad2:	4639      	mov	r1, r7
 8016ad4:	f7ea f820 	bl	8000b18 <__aeabi_dcmpeq>
 8016ad8:	2800      	cmp	r0, #0
 8016ada:	d0f2      	beq.n	8016ac2 <pow+0xa2>
 8016adc:	eeb0 0a48 	vmov.f32	s0, s16
 8016ae0:	eef0 0a68 	vmov.f32	s1, s17
 8016ae4:	f000 f83a 	bl	8016b5c <finite>
 8016ae8:	2800      	cmp	r0, #0
 8016aea:	d0ea      	beq.n	8016ac2 <pow+0xa2>
 8016aec:	ec45 4b10 	vmov	d0, r4, r5
 8016af0:	f000 f834 	bl	8016b5c <finite>
 8016af4:	e7c3      	b.n	8016a7e <pow+0x5e>
 8016af6:	4f01      	ldr	r7, [pc, #4]	; (8016afc <pow+0xdc>)
 8016af8:	2600      	movs	r6, #0
 8016afa:	e7e2      	b.n	8016ac2 <pow+0xa2>
 8016afc:	3ff00000 	.word	0x3ff00000

08016b00 <sqrt>:
 8016b00:	b538      	push	{r3, r4, r5, lr}
 8016b02:	ed2d 8b02 	vpush	{d8}
 8016b06:	ec55 4b10 	vmov	r4, r5, d0
 8016b0a:	f000 f833 	bl	8016b74 <__ieee754_sqrt>
 8016b0e:	4622      	mov	r2, r4
 8016b10:	462b      	mov	r3, r5
 8016b12:	4620      	mov	r0, r4
 8016b14:	4629      	mov	r1, r5
 8016b16:	eeb0 8a40 	vmov.f32	s16, s0
 8016b1a:	eef0 8a60 	vmov.f32	s17, s1
 8016b1e:	f7ea f82d 	bl	8000b7c <__aeabi_dcmpun>
 8016b22:	b990      	cbnz	r0, 8016b4a <sqrt+0x4a>
 8016b24:	2200      	movs	r2, #0
 8016b26:	2300      	movs	r3, #0
 8016b28:	4620      	mov	r0, r4
 8016b2a:	4629      	mov	r1, r5
 8016b2c:	f7e9 fffe 	bl	8000b2c <__aeabi_dcmplt>
 8016b30:	b158      	cbz	r0, 8016b4a <sqrt+0x4a>
 8016b32:	f7fb ff97 	bl	8012a64 <__errno>
 8016b36:	2321      	movs	r3, #33	; 0x21
 8016b38:	6003      	str	r3, [r0, #0]
 8016b3a:	2200      	movs	r2, #0
 8016b3c:	2300      	movs	r3, #0
 8016b3e:	4610      	mov	r0, r2
 8016b40:	4619      	mov	r1, r3
 8016b42:	f7e9 feab 	bl	800089c <__aeabi_ddiv>
 8016b46:	ec41 0b18 	vmov	d8, r0, r1
 8016b4a:	eeb0 0a48 	vmov.f32	s0, s16
 8016b4e:	eef0 0a68 	vmov.f32	s1, s17
 8016b52:	ecbd 8b02 	vpop	{d8}
 8016b56:	bd38      	pop	{r3, r4, r5, pc}

08016b58 <atan2f>:
 8016b58:	f000 be1a 	b.w	8017790 <__ieee754_atan2f>

08016b5c <finite>:
 8016b5c:	b082      	sub	sp, #8
 8016b5e:	ed8d 0b00 	vstr	d0, [sp]
 8016b62:	9801      	ldr	r0, [sp, #4]
 8016b64:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8016b68:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8016b6c:	0fc0      	lsrs	r0, r0, #31
 8016b6e:	b002      	add	sp, #8
 8016b70:	4770      	bx	lr
	...

08016b74 <__ieee754_sqrt>:
 8016b74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b78:	ec55 4b10 	vmov	r4, r5, d0
 8016b7c:	4e67      	ldr	r6, [pc, #412]	; (8016d1c <__ieee754_sqrt+0x1a8>)
 8016b7e:	43ae      	bics	r6, r5
 8016b80:	ee10 0a10 	vmov	r0, s0
 8016b84:	ee10 2a10 	vmov	r2, s0
 8016b88:	4629      	mov	r1, r5
 8016b8a:	462b      	mov	r3, r5
 8016b8c:	d10d      	bne.n	8016baa <__ieee754_sqrt+0x36>
 8016b8e:	f7e9 fd5b 	bl	8000648 <__aeabi_dmul>
 8016b92:	4602      	mov	r2, r0
 8016b94:	460b      	mov	r3, r1
 8016b96:	4620      	mov	r0, r4
 8016b98:	4629      	mov	r1, r5
 8016b9a:	f7e9 fb9f 	bl	80002dc <__adddf3>
 8016b9e:	4604      	mov	r4, r0
 8016ba0:	460d      	mov	r5, r1
 8016ba2:	ec45 4b10 	vmov	d0, r4, r5
 8016ba6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016baa:	2d00      	cmp	r5, #0
 8016bac:	dc0b      	bgt.n	8016bc6 <__ieee754_sqrt+0x52>
 8016bae:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016bb2:	4326      	orrs	r6, r4
 8016bb4:	d0f5      	beq.n	8016ba2 <__ieee754_sqrt+0x2e>
 8016bb6:	b135      	cbz	r5, 8016bc6 <__ieee754_sqrt+0x52>
 8016bb8:	f7e9 fb8e 	bl	80002d8 <__aeabi_dsub>
 8016bbc:	4602      	mov	r2, r0
 8016bbe:	460b      	mov	r3, r1
 8016bc0:	f7e9 fe6c 	bl	800089c <__aeabi_ddiv>
 8016bc4:	e7eb      	b.n	8016b9e <__ieee754_sqrt+0x2a>
 8016bc6:	1509      	asrs	r1, r1, #20
 8016bc8:	f000 808d 	beq.w	8016ce6 <__ieee754_sqrt+0x172>
 8016bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016bd0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8016bd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016bd8:	07c9      	lsls	r1, r1, #31
 8016bda:	bf5c      	itt	pl
 8016bdc:	005b      	lslpl	r3, r3, #1
 8016bde:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8016be2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016be6:	bf58      	it	pl
 8016be8:	0052      	lslpl	r2, r2, #1
 8016bea:	2500      	movs	r5, #0
 8016bec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8016bf0:	1076      	asrs	r6, r6, #1
 8016bf2:	0052      	lsls	r2, r2, #1
 8016bf4:	f04f 0e16 	mov.w	lr, #22
 8016bf8:	46ac      	mov	ip, r5
 8016bfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8016bfe:	eb0c 0001 	add.w	r0, ip, r1
 8016c02:	4298      	cmp	r0, r3
 8016c04:	bfde      	ittt	le
 8016c06:	1a1b      	suble	r3, r3, r0
 8016c08:	eb00 0c01 	addle.w	ip, r0, r1
 8016c0c:	186d      	addle	r5, r5, r1
 8016c0e:	005b      	lsls	r3, r3, #1
 8016c10:	f1be 0e01 	subs.w	lr, lr, #1
 8016c14:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8016c18:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8016c1c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8016c20:	d1ed      	bne.n	8016bfe <__ieee754_sqrt+0x8a>
 8016c22:	4674      	mov	r4, lr
 8016c24:	2720      	movs	r7, #32
 8016c26:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8016c2a:	4563      	cmp	r3, ip
 8016c2c:	eb01 000e 	add.w	r0, r1, lr
 8016c30:	dc02      	bgt.n	8016c38 <__ieee754_sqrt+0xc4>
 8016c32:	d113      	bne.n	8016c5c <__ieee754_sqrt+0xe8>
 8016c34:	4290      	cmp	r0, r2
 8016c36:	d811      	bhi.n	8016c5c <__ieee754_sqrt+0xe8>
 8016c38:	2800      	cmp	r0, #0
 8016c3a:	eb00 0e01 	add.w	lr, r0, r1
 8016c3e:	da57      	bge.n	8016cf0 <__ieee754_sqrt+0x17c>
 8016c40:	f1be 0f00 	cmp.w	lr, #0
 8016c44:	db54      	blt.n	8016cf0 <__ieee754_sqrt+0x17c>
 8016c46:	f10c 0801 	add.w	r8, ip, #1
 8016c4a:	eba3 030c 	sub.w	r3, r3, ip
 8016c4e:	4290      	cmp	r0, r2
 8016c50:	bf88      	it	hi
 8016c52:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8016c56:	1a12      	subs	r2, r2, r0
 8016c58:	440c      	add	r4, r1
 8016c5a:	46c4      	mov	ip, r8
 8016c5c:	005b      	lsls	r3, r3, #1
 8016c5e:	3f01      	subs	r7, #1
 8016c60:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8016c64:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8016c68:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8016c6c:	d1dd      	bne.n	8016c2a <__ieee754_sqrt+0xb6>
 8016c6e:	4313      	orrs	r3, r2
 8016c70:	d01b      	beq.n	8016caa <__ieee754_sqrt+0x136>
 8016c72:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8016d20 <__ieee754_sqrt+0x1ac>
 8016c76:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8016d24 <__ieee754_sqrt+0x1b0>
 8016c7a:	e9da 0100 	ldrd	r0, r1, [sl]
 8016c7e:	e9db 2300 	ldrd	r2, r3, [fp]
 8016c82:	f7e9 fb29 	bl	80002d8 <__aeabi_dsub>
 8016c86:	e9da 8900 	ldrd	r8, r9, [sl]
 8016c8a:	4602      	mov	r2, r0
 8016c8c:	460b      	mov	r3, r1
 8016c8e:	4640      	mov	r0, r8
 8016c90:	4649      	mov	r1, r9
 8016c92:	f7e9 ff55 	bl	8000b40 <__aeabi_dcmple>
 8016c96:	b140      	cbz	r0, 8016caa <__ieee754_sqrt+0x136>
 8016c98:	f1b4 3fff 	cmp.w	r4, #4294967295
 8016c9c:	e9da 0100 	ldrd	r0, r1, [sl]
 8016ca0:	e9db 2300 	ldrd	r2, r3, [fp]
 8016ca4:	d126      	bne.n	8016cf4 <__ieee754_sqrt+0x180>
 8016ca6:	3501      	adds	r5, #1
 8016ca8:	463c      	mov	r4, r7
 8016caa:	106a      	asrs	r2, r5, #1
 8016cac:	0863      	lsrs	r3, r4, #1
 8016cae:	07e9      	lsls	r1, r5, #31
 8016cb0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016cb4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8016cb8:	bf48      	it	mi
 8016cba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8016cbe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8016cc2:	461c      	mov	r4, r3
 8016cc4:	e76d      	b.n	8016ba2 <__ieee754_sqrt+0x2e>
 8016cc6:	0ad3      	lsrs	r3, r2, #11
 8016cc8:	3815      	subs	r0, #21
 8016cca:	0552      	lsls	r2, r2, #21
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d0fa      	beq.n	8016cc6 <__ieee754_sqrt+0x152>
 8016cd0:	02dc      	lsls	r4, r3, #11
 8016cd2:	d50a      	bpl.n	8016cea <__ieee754_sqrt+0x176>
 8016cd4:	f1c1 0420 	rsb	r4, r1, #32
 8016cd8:	fa22 f404 	lsr.w	r4, r2, r4
 8016cdc:	1e4d      	subs	r5, r1, #1
 8016cde:	408a      	lsls	r2, r1
 8016ce0:	4323      	orrs	r3, r4
 8016ce2:	1b41      	subs	r1, r0, r5
 8016ce4:	e772      	b.n	8016bcc <__ieee754_sqrt+0x58>
 8016ce6:	4608      	mov	r0, r1
 8016ce8:	e7f0      	b.n	8016ccc <__ieee754_sqrt+0x158>
 8016cea:	005b      	lsls	r3, r3, #1
 8016cec:	3101      	adds	r1, #1
 8016cee:	e7ef      	b.n	8016cd0 <__ieee754_sqrt+0x15c>
 8016cf0:	46e0      	mov	r8, ip
 8016cf2:	e7aa      	b.n	8016c4a <__ieee754_sqrt+0xd6>
 8016cf4:	f7e9 faf2 	bl	80002dc <__adddf3>
 8016cf8:	e9da 8900 	ldrd	r8, r9, [sl]
 8016cfc:	4602      	mov	r2, r0
 8016cfe:	460b      	mov	r3, r1
 8016d00:	4640      	mov	r0, r8
 8016d02:	4649      	mov	r1, r9
 8016d04:	f7e9 ff12 	bl	8000b2c <__aeabi_dcmplt>
 8016d08:	b120      	cbz	r0, 8016d14 <__ieee754_sqrt+0x1a0>
 8016d0a:	1ca0      	adds	r0, r4, #2
 8016d0c:	bf08      	it	eq
 8016d0e:	3501      	addeq	r5, #1
 8016d10:	3402      	adds	r4, #2
 8016d12:	e7ca      	b.n	8016caa <__ieee754_sqrt+0x136>
 8016d14:	3401      	adds	r4, #1
 8016d16:	f024 0401 	bic.w	r4, r4, #1
 8016d1a:	e7c6      	b.n	8016caa <__ieee754_sqrt+0x136>
 8016d1c:	7ff00000 	.word	0x7ff00000
 8016d20:	200001e0 	.word	0x200001e0
 8016d24:	200001e8 	.word	0x200001e8

08016d28 <__ieee754_pow>:
 8016d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d2c:	ed2d 8b06 	vpush	{d8-d10}
 8016d30:	b089      	sub	sp, #36	; 0x24
 8016d32:	ed8d 1b00 	vstr	d1, [sp]
 8016d36:	e9dd 2900 	ldrd	r2, r9, [sp]
 8016d3a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8016d3e:	ea58 0102 	orrs.w	r1, r8, r2
 8016d42:	ec57 6b10 	vmov	r6, r7, d0
 8016d46:	d115      	bne.n	8016d74 <__ieee754_pow+0x4c>
 8016d48:	19b3      	adds	r3, r6, r6
 8016d4a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8016d4e:	4152      	adcs	r2, r2
 8016d50:	4299      	cmp	r1, r3
 8016d52:	4b89      	ldr	r3, [pc, #548]	; (8016f78 <__ieee754_pow+0x250>)
 8016d54:	4193      	sbcs	r3, r2
 8016d56:	f080 84d1 	bcs.w	80176fc <__ieee754_pow+0x9d4>
 8016d5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016d5e:	4630      	mov	r0, r6
 8016d60:	4639      	mov	r1, r7
 8016d62:	f7e9 fabb 	bl	80002dc <__adddf3>
 8016d66:	ec41 0b10 	vmov	d0, r0, r1
 8016d6a:	b009      	add	sp, #36	; 0x24
 8016d6c:	ecbd 8b06 	vpop	{d8-d10}
 8016d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d74:	4b81      	ldr	r3, [pc, #516]	; (8016f7c <__ieee754_pow+0x254>)
 8016d76:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8016d7a:	429c      	cmp	r4, r3
 8016d7c:	ee10 aa10 	vmov	sl, s0
 8016d80:	463d      	mov	r5, r7
 8016d82:	dc06      	bgt.n	8016d92 <__ieee754_pow+0x6a>
 8016d84:	d101      	bne.n	8016d8a <__ieee754_pow+0x62>
 8016d86:	2e00      	cmp	r6, #0
 8016d88:	d1e7      	bne.n	8016d5a <__ieee754_pow+0x32>
 8016d8a:	4598      	cmp	r8, r3
 8016d8c:	dc01      	bgt.n	8016d92 <__ieee754_pow+0x6a>
 8016d8e:	d10f      	bne.n	8016db0 <__ieee754_pow+0x88>
 8016d90:	b172      	cbz	r2, 8016db0 <__ieee754_pow+0x88>
 8016d92:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8016d96:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8016d9a:	ea55 050a 	orrs.w	r5, r5, sl
 8016d9e:	d1dc      	bne.n	8016d5a <__ieee754_pow+0x32>
 8016da0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016da4:	18db      	adds	r3, r3, r3
 8016da6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8016daa:	4152      	adcs	r2, r2
 8016dac:	429d      	cmp	r5, r3
 8016dae:	e7d0      	b.n	8016d52 <__ieee754_pow+0x2a>
 8016db0:	2d00      	cmp	r5, #0
 8016db2:	da3b      	bge.n	8016e2c <__ieee754_pow+0x104>
 8016db4:	4b72      	ldr	r3, [pc, #456]	; (8016f80 <__ieee754_pow+0x258>)
 8016db6:	4598      	cmp	r8, r3
 8016db8:	dc51      	bgt.n	8016e5e <__ieee754_pow+0x136>
 8016dba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8016dbe:	4598      	cmp	r8, r3
 8016dc0:	f340 84ab 	ble.w	801771a <__ieee754_pow+0x9f2>
 8016dc4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016dc8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016dcc:	2b14      	cmp	r3, #20
 8016dce:	dd0f      	ble.n	8016df0 <__ieee754_pow+0xc8>
 8016dd0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016dd4:	fa22 f103 	lsr.w	r1, r2, r3
 8016dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8016ddc:	4293      	cmp	r3, r2
 8016dde:	f040 849c 	bne.w	801771a <__ieee754_pow+0x9f2>
 8016de2:	f001 0101 	and.w	r1, r1, #1
 8016de6:	f1c1 0302 	rsb	r3, r1, #2
 8016dea:	9304      	str	r3, [sp, #16]
 8016dec:	b182      	cbz	r2, 8016e10 <__ieee754_pow+0xe8>
 8016dee:	e05f      	b.n	8016eb0 <__ieee754_pow+0x188>
 8016df0:	2a00      	cmp	r2, #0
 8016df2:	d15b      	bne.n	8016eac <__ieee754_pow+0x184>
 8016df4:	f1c3 0314 	rsb	r3, r3, #20
 8016df8:	fa48 f103 	asr.w	r1, r8, r3
 8016dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8016e00:	4543      	cmp	r3, r8
 8016e02:	f040 8487 	bne.w	8017714 <__ieee754_pow+0x9ec>
 8016e06:	f001 0101 	and.w	r1, r1, #1
 8016e0a:	f1c1 0302 	rsb	r3, r1, #2
 8016e0e:	9304      	str	r3, [sp, #16]
 8016e10:	4b5c      	ldr	r3, [pc, #368]	; (8016f84 <__ieee754_pow+0x25c>)
 8016e12:	4598      	cmp	r8, r3
 8016e14:	d132      	bne.n	8016e7c <__ieee754_pow+0x154>
 8016e16:	f1b9 0f00 	cmp.w	r9, #0
 8016e1a:	f280 8477 	bge.w	801770c <__ieee754_pow+0x9e4>
 8016e1e:	4959      	ldr	r1, [pc, #356]	; (8016f84 <__ieee754_pow+0x25c>)
 8016e20:	4632      	mov	r2, r6
 8016e22:	463b      	mov	r3, r7
 8016e24:	2000      	movs	r0, #0
 8016e26:	f7e9 fd39 	bl	800089c <__aeabi_ddiv>
 8016e2a:	e79c      	b.n	8016d66 <__ieee754_pow+0x3e>
 8016e2c:	2300      	movs	r3, #0
 8016e2e:	9304      	str	r3, [sp, #16]
 8016e30:	2a00      	cmp	r2, #0
 8016e32:	d13d      	bne.n	8016eb0 <__ieee754_pow+0x188>
 8016e34:	4b51      	ldr	r3, [pc, #324]	; (8016f7c <__ieee754_pow+0x254>)
 8016e36:	4598      	cmp	r8, r3
 8016e38:	d1ea      	bne.n	8016e10 <__ieee754_pow+0xe8>
 8016e3a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016e3e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016e42:	ea53 030a 	orrs.w	r3, r3, sl
 8016e46:	f000 8459 	beq.w	80176fc <__ieee754_pow+0x9d4>
 8016e4a:	4b4f      	ldr	r3, [pc, #316]	; (8016f88 <__ieee754_pow+0x260>)
 8016e4c:	429c      	cmp	r4, r3
 8016e4e:	dd08      	ble.n	8016e62 <__ieee754_pow+0x13a>
 8016e50:	f1b9 0f00 	cmp.w	r9, #0
 8016e54:	f2c0 8456 	blt.w	8017704 <__ieee754_pow+0x9dc>
 8016e58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016e5c:	e783      	b.n	8016d66 <__ieee754_pow+0x3e>
 8016e5e:	2302      	movs	r3, #2
 8016e60:	e7e5      	b.n	8016e2e <__ieee754_pow+0x106>
 8016e62:	f1b9 0f00 	cmp.w	r9, #0
 8016e66:	f04f 0000 	mov.w	r0, #0
 8016e6a:	f04f 0100 	mov.w	r1, #0
 8016e6e:	f6bf af7a 	bge.w	8016d66 <__ieee754_pow+0x3e>
 8016e72:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016e76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016e7a:	e774      	b.n	8016d66 <__ieee754_pow+0x3e>
 8016e7c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8016e80:	d106      	bne.n	8016e90 <__ieee754_pow+0x168>
 8016e82:	4632      	mov	r2, r6
 8016e84:	463b      	mov	r3, r7
 8016e86:	4630      	mov	r0, r6
 8016e88:	4639      	mov	r1, r7
 8016e8a:	f7e9 fbdd 	bl	8000648 <__aeabi_dmul>
 8016e8e:	e76a      	b.n	8016d66 <__ieee754_pow+0x3e>
 8016e90:	4b3e      	ldr	r3, [pc, #248]	; (8016f8c <__ieee754_pow+0x264>)
 8016e92:	4599      	cmp	r9, r3
 8016e94:	d10c      	bne.n	8016eb0 <__ieee754_pow+0x188>
 8016e96:	2d00      	cmp	r5, #0
 8016e98:	db0a      	blt.n	8016eb0 <__ieee754_pow+0x188>
 8016e9a:	ec47 6b10 	vmov	d0, r6, r7
 8016e9e:	b009      	add	sp, #36	; 0x24
 8016ea0:	ecbd 8b06 	vpop	{d8-d10}
 8016ea4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ea8:	f7ff be64 	b.w	8016b74 <__ieee754_sqrt>
 8016eac:	2300      	movs	r3, #0
 8016eae:	9304      	str	r3, [sp, #16]
 8016eb0:	ec47 6b10 	vmov	d0, r6, r7
 8016eb4:	f000 fc62 	bl	801777c <fabs>
 8016eb8:	ec51 0b10 	vmov	r0, r1, d0
 8016ebc:	f1ba 0f00 	cmp.w	sl, #0
 8016ec0:	d129      	bne.n	8016f16 <__ieee754_pow+0x1ee>
 8016ec2:	b124      	cbz	r4, 8016ece <__ieee754_pow+0x1a6>
 8016ec4:	4b2f      	ldr	r3, [pc, #188]	; (8016f84 <__ieee754_pow+0x25c>)
 8016ec6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8016eca:	429a      	cmp	r2, r3
 8016ecc:	d123      	bne.n	8016f16 <__ieee754_pow+0x1ee>
 8016ece:	f1b9 0f00 	cmp.w	r9, #0
 8016ed2:	da05      	bge.n	8016ee0 <__ieee754_pow+0x1b8>
 8016ed4:	4602      	mov	r2, r0
 8016ed6:	460b      	mov	r3, r1
 8016ed8:	2000      	movs	r0, #0
 8016eda:	492a      	ldr	r1, [pc, #168]	; (8016f84 <__ieee754_pow+0x25c>)
 8016edc:	f7e9 fcde 	bl	800089c <__aeabi_ddiv>
 8016ee0:	2d00      	cmp	r5, #0
 8016ee2:	f6bf af40 	bge.w	8016d66 <__ieee754_pow+0x3e>
 8016ee6:	9b04      	ldr	r3, [sp, #16]
 8016ee8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016eec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016ef0:	431c      	orrs	r4, r3
 8016ef2:	d108      	bne.n	8016f06 <__ieee754_pow+0x1de>
 8016ef4:	4602      	mov	r2, r0
 8016ef6:	460b      	mov	r3, r1
 8016ef8:	4610      	mov	r0, r2
 8016efa:	4619      	mov	r1, r3
 8016efc:	f7e9 f9ec 	bl	80002d8 <__aeabi_dsub>
 8016f00:	4602      	mov	r2, r0
 8016f02:	460b      	mov	r3, r1
 8016f04:	e78f      	b.n	8016e26 <__ieee754_pow+0xfe>
 8016f06:	9b04      	ldr	r3, [sp, #16]
 8016f08:	2b01      	cmp	r3, #1
 8016f0a:	f47f af2c 	bne.w	8016d66 <__ieee754_pow+0x3e>
 8016f0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016f12:	4619      	mov	r1, r3
 8016f14:	e727      	b.n	8016d66 <__ieee754_pow+0x3e>
 8016f16:	0feb      	lsrs	r3, r5, #31
 8016f18:	3b01      	subs	r3, #1
 8016f1a:	9306      	str	r3, [sp, #24]
 8016f1c:	9a06      	ldr	r2, [sp, #24]
 8016f1e:	9b04      	ldr	r3, [sp, #16]
 8016f20:	4313      	orrs	r3, r2
 8016f22:	d102      	bne.n	8016f2a <__ieee754_pow+0x202>
 8016f24:	4632      	mov	r2, r6
 8016f26:	463b      	mov	r3, r7
 8016f28:	e7e6      	b.n	8016ef8 <__ieee754_pow+0x1d0>
 8016f2a:	4b19      	ldr	r3, [pc, #100]	; (8016f90 <__ieee754_pow+0x268>)
 8016f2c:	4598      	cmp	r8, r3
 8016f2e:	f340 80fb 	ble.w	8017128 <__ieee754_pow+0x400>
 8016f32:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016f36:	4598      	cmp	r8, r3
 8016f38:	4b13      	ldr	r3, [pc, #76]	; (8016f88 <__ieee754_pow+0x260>)
 8016f3a:	dd0c      	ble.n	8016f56 <__ieee754_pow+0x22e>
 8016f3c:	429c      	cmp	r4, r3
 8016f3e:	dc0f      	bgt.n	8016f60 <__ieee754_pow+0x238>
 8016f40:	f1b9 0f00 	cmp.w	r9, #0
 8016f44:	da0f      	bge.n	8016f66 <__ieee754_pow+0x23e>
 8016f46:	2000      	movs	r0, #0
 8016f48:	b009      	add	sp, #36	; 0x24
 8016f4a:	ecbd 8b06 	vpop	{d8-d10}
 8016f4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f52:	f000 be3e 	b.w	8017bd2 <__math_oflow>
 8016f56:	429c      	cmp	r4, r3
 8016f58:	dbf2      	blt.n	8016f40 <__ieee754_pow+0x218>
 8016f5a:	4b0a      	ldr	r3, [pc, #40]	; (8016f84 <__ieee754_pow+0x25c>)
 8016f5c:	429c      	cmp	r4, r3
 8016f5e:	dd19      	ble.n	8016f94 <__ieee754_pow+0x26c>
 8016f60:	f1b9 0f00 	cmp.w	r9, #0
 8016f64:	dcef      	bgt.n	8016f46 <__ieee754_pow+0x21e>
 8016f66:	2000      	movs	r0, #0
 8016f68:	b009      	add	sp, #36	; 0x24
 8016f6a:	ecbd 8b06 	vpop	{d8-d10}
 8016f6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f72:	f000 be25 	b.w	8017bc0 <__math_uflow>
 8016f76:	bf00      	nop
 8016f78:	fff00000 	.word	0xfff00000
 8016f7c:	7ff00000 	.word	0x7ff00000
 8016f80:	433fffff 	.word	0x433fffff
 8016f84:	3ff00000 	.word	0x3ff00000
 8016f88:	3fefffff 	.word	0x3fefffff
 8016f8c:	3fe00000 	.word	0x3fe00000
 8016f90:	41e00000 	.word	0x41e00000
 8016f94:	4b60      	ldr	r3, [pc, #384]	; (8017118 <__ieee754_pow+0x3f0>)
 8016f96:	2200      	movs	r2, #0
 8016f98:	f7e9 f99e 	bl	80002d8 <__aeabi_dsub>
 8016f9c:	a354      	add	r3, pc, #336	; (adr r3, 80170f0 <__ieee754_pow+0x3c8>)
 8016f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fa2:	4604      	mov	r4, r0
 8016fa4:	460d      	mov	r5, r1
 8016fa6:	f7e9 fb4f 	bl	8000648 <__aeabi_dmul>
 8016faa:	a353      	add	r3, pc, #332	; (adr r3, 80170f8 <__ieee754_pow+0x3d0>)
 8016fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fb0:	4606      	mov	r6, r0
 8016fb2:	460f      	mov	r7, r1
 8016fb4:	4620      	mov	r0, r4
 8016fb6:	4629      	mov	r1, r5
 8016fb8:	f7e9 fb46 	bl	8000648 <__aeabi_dmul>
 8016fbc:	4b57      	ldr	r3, [pc, #348]	; (801711c <__ieee754_pow+0x3f4>)
 8016fbe:	4682      	mov	sl, r0
 8016fc0:	468b      	mov	fp, r1
 8016fc2:	2200      	movs	r2, #0
 8016fc4:	4620      	mov	r0, r4
 8016fc6:	4629      	mov	r1, r5
 8016fc8:	f7e9 fb3e 	bl	8000648 <__aeabi_dmul>
 8016fcc:	4602      	mov	r2, r0
 8016fce:	460b      	mov	r3, r1
 8016fd0:	a14b      	add	r1, pc, #300	; (adr r1, 8017100 <__ieee754_pow+0x3d8>)
 8016fd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016fd6:	f7e9 f97f 	bl	80002d8 <__aeabi_dsub>
 8016fda:	4622      	mov	r2, r4
 8016fdc:	462b      	mov	r3, r5
 8016fde:	f7e9 fb33 	bl	8000648 <__aeabi_dmul>
 8016fe2:	4602      	mov	r2, r0
 8016fe4:	460b      	mov	r3, r1
 8016fe6:	2000      	movs	r0, #0
 8016fe8:	494d      	ldr	r1, [pc, #308]	; (8017120 <__ieee754_pow+0x3f8>)
 8016fea:	f7e9 f975 	bl	80002d8 <__aeabi_dsub>
 8016fee:	4622      	mov	r2, r4
 8016ff0:	4680      	mov	r8, r0
 8016ff2:	4689      	mov	r9, r1
 8016ff4:	462b      	mov	r3, r5
 8016ff6:	4620      	mov	r0, r4
 8016ff8:	4629      	mov	r1, r5
 8016ffa:	f7e9 fb25 	bl	8000648 <__aeabi_dmul>
 8016ffe:	4602      	mov	r2, r0
 8017000:	460b      	mov	r3, r1
 8017002:	4640      	mov	r0, r8
 8017004:	4649      	mov	r1, r9
 8017006:	f7e9 fb1f 	bl	8000648 <__aeabi_dmul>
 801700a:	a33f      	add	r3, pc, #252	; (adr r3, 8017108 <__ieee754_pow+0x3e0>)
 801700c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017010:	f7e9 fb1a 	bl	8000648 <__aeabi_dmul>
 8017014:	4602      	mov	r2, r0
 8017016:	460b      	mov	r3, r1
 8017018:	4650      	mov	r0, sl
 801701a:	4659      	mov	r1, fp
 801701c:	f7e9 f95c 	bl	80002d8 <__aeabi_dsub>
 8017020:	4602      	mov	r2, r0
 8017022:	460b      	mov	r3, r1
 8017024:	4680      	mov	r8, r0
 8017026:	4689      	mov	r9, r1
 8017028:	4630      	mov	r0, r6
 801702a:	4639      	mov	r1, r7
 801702c:	f7e9 f956 	bl	80002dc <__adddf3>
 8017030:	2000      	movs	r0, #0
 8017032:	4632      	mov	r2, r6
 8017034:	463b      	mov	r3, r7
 8017036:	4604      	mov	r4, r0
 8017038:	460d      	mov	r5, r1
 801703a:	f7e9 f94d 	bl	80002d8 <__aeabi_dsub>
 801703e:	4602      	mov	r2, r0
 8017040:	460b      	mov	r3, r1
 8017042:	4640      	mov	r0, r8
 8017044:	4649      	mov	r1, r9
 8017046:	f7e9 f947 	bl	80002d8 <__aeabi_dsub>
 801704a:	9b04      	ldr	r3, [sp, #16]
 801704c:	9a06      	ldr	r2, [sp, #24]
 801704e:	3b01      	subs	r3, #1
 8017050:	4313      	orrs	r3, r2
 8017052:	4682      	mov	sl, r0
 8017054:	468b      	mov	fp, r1
 8017056:	f040 81e7 	bne.w	8017428 <__ieee754_pow+0x700>
 801705a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8017110 <__ieee754_pow+0x3e8>
 801705e:	eeb0 8a47 	vmov.f32	s16, s14
 8017062:	eef0 8a67 	vmov.f32	s17, s15
 8017066:	e9dd 6700 	ldrd	r6, r7, [sp]
 801706a:	2600      	movs	r6, #0
 801706c:	4632      	mov	r2, r6
 801706e:	463b      	mov	r3, r7
 8017070:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017074:	f7e9 f930 	bl	80002d8 <__aeabi_dsub>
 8017078:	4622      	mov	r2, r4
 801707a:	462b      	mov	r3, r5
 801707c:	f7e9 fae4 	bl	8000648 <__aeabi_dmul>
 8017080:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017084:	4680      	mov	r8, r0
 8017086:	4689      	mov	r9, r1
 8017088:	4650      	mov	r0, sl
 801708a:	4659      	mov	r1, fp
 801708c:	f7e9 fadc 	bl	8000648 <__aeabi_dmul>
 8017090:	4602      	mov	r2, r0
 8017092:	460b      	mov	r3, r1
 8017094:	4640      	mov	r0, r8
 8017096:	4649      	mov	r1, r9
 8017098:	f7e9 f920 	bl	80002dc <__adddf3>
 801709c:	4632      	mov	r2, r6
 801709e:	463b      	mov	r3, r7
 80170a0:	4680      	mov	r8, r0
 80170a2:	4689      	mov	r9, r1
 80170a4:	4620      	mov	r0, r4
 80170a6:	4629      	mov	r1, r5
 80170a8:	f7e9 face 	bl	8000648 <__aeabi_dmul>
 80170ac:	460b      	mov	r3, r1
 80170ae:	4604      	mov	r4, r0
 80170b0:	460d      	mov	r5, r1
 80170b2:	4602      	mov	r2, r0
 80170b4:	4649      	mov	r1, r9
 80170b6:	4640      	mov	r0, r8
 80170b8:	f7e9 f910 	bl	80002dc <__adddf3>
 80170bc:	4b19      	ldr	r3, [pc, #100]	; (8017124 <__ieee754_pow+0x3fc>)
 80170be:	4299      	cmp	r1, r3
 80170c0:	ec45 4b19 	vmov	d9, r4, r5
 80170c4:	4606      	mov	r6, r0
 80170c6:	460f      	mov	r7, r1
 80170c8:	468b      	mov	fp, r1
 80170ca:	f340 82f0 	ble.w	80176ae <__ieee754_pow+0x986>
 80170ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80170d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80170d6:	4303      	orrs	r3, r0
 80170d8:	f000 81e4 	beq.w	80174a4 <__ieee754_pow+0x77c>
 80170dc:	ec51 0b18 	vmov	r0, r1, d8
 80170e0:	2200      	movs	r2, #0
 80170e2:	2300      	movs	r3, #0
 80170e4:	f7e9 fd22 	bl	8000b2c <__aeabi_dcmplt>
 80170e8:	3800      	subs	r0, #0
 80170ea:	bf18      	it	ne
 80170ec:	2001      	movne	r0, #1
 80170ee:	e72b      	b.n	8016f48 <__ieee754_pow+0x220>
 80170f0:	60000000 	.word	0x60000000
 80170f4:	3ff71547 	.word	0x3ff71547
 80170f8:	f85ddf44 	.word	0xf85ddf44
 80170fc:	3e54ae0b 	.word	0x3e54ae0b
 8017100:	55555555 	.word	0x55555555
 8017104:	3fd55555 	.word	0x3fd55555
 8017108:	652b82fe 	.word	0x652b82fe
 801710c:	3ff71547 	.word	0x3ff71547
 8017110:	00000000 	.word	0x00000000
 8017114:	bff00000 	.word	0xbff00000
 8017118:	3ff00000 	.word	0x3ff00000
 801711c:	3fd00000 	.word	0x3fd00000
 8017120:	3fe00000 	.word	0x3fe00000
 8017124:	408fffff 	.word	0x408fffff
 8017128:	4bd5      	ldr	r3, [pc, #852]	; (8017480 <__ieee754_pow+0x758>)
 801712a:	402b      	ands	r3, r5
 801712c:	2200      	movs	r2, #0
 801712e:	b92b      	cbnz	r3, 801713c <__ieee754_pow+0x414>
 8017130:	4bd4      	ldr	r3, [pc, #848]	; (8017484 <__ieee754_pow+0x75c>)
 8017132:	f7e9 fa89 	bl	8000648 <__aeabi_dmul>
 8017136:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801713a:	460c      	mov	r4, r1
 801713c:	1523      	asrs	r3, r4, #20
 801713e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017142:	4413      	add	r3, r2
 8017144:	9305      	str	r3, [sp, #20]
 8017146:	4bd0      	ldr	r3, [pc, #832]	; (8017488 <__ieee754_pow+0x760>)
 8017148:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801714c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8017150:	429c      	cmp	r4, r3
 8017152:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8017156:	dd08      	ble.n	801716a <__ieee754_pow+0x442>
 8017158:	4bcc      	ldr	r3, [pc, #816]	; (801748c <__ieee754_pow+0x764>)
 801715a:	429c      	cmp	r4, r3
 801715c:	f340 8162 	ble.w	8017424 <__ieee754_pow+0x6fc>
 8017160:	9b05      	ldr	r3, [sp, #20]
 8017162:	3301      	adds	r3, #1
 8017164:	9305      	str	r3, [sp, #20]
 8017166:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801716a:	2400      	movs	r4, #0
 801716c:	00e3      	lsls	r3, r4, #3
 801716e:	9307      	str	r3, [sp, #28]
 8017170:	4bc7      	ldr	r3, [pc, #796]	; (8017490 <__ieee754_pow+0x768>)
 8017172:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017176:	ed93 7b00 	vldr	d7, [r3]
 801717a:	4629      	mov	r1, r5
 801717c:	ec53 2b17 	vmov	r2, r3, d7
 8017180:	eeb0 9a47 	vmov.f32	s18, s14
 8017184:	eef0 9a67 	vmov.f32	s19, s15
 8017188:	4682      	mov	sl, r0
 801718a:	f7e9 f8a5 	bl	80002d8 <__aeabi_dsub>
 801718e:	4652      	mov	r2, sl
 8017190:	4606      	mov	r6, r0
 8017192:	460f      	mov	r7, r1
 8017194:	462b      	mov	r3, r5
 8017196:	ec51 0b19 	vmov	r0, r1, d9
 801719a:	f7e9 f89f 	bl	80002dc <__adddf3>
 801719e:	4602      	mov	r2, r0
 80171a0:	460b      	mov	r3, r1
 80171a2:	2000      	movs	r0, #0
 80171a4:	49bb      	ldr	r1, [pc, #748]	; (8017494 <__ieee754_pow+0x76c>)
 80171a6:	f7e9 fb79 	bl	800089c <__aeabi_ddiv>
 80171aa:	ec41 0b1a 	vmov	d10, r0, r1
 80171ae:	4602      	mov	r2, r0
 80171b0:	460b      	mov	r3, r1
 80171b2:	4630      	mov	r0, r6
 80171b4:	4639      	mov	r1, r7
 80171b6:	f7e9 fa47 	bl	8000648 <__aeabi_dmul>
 80171ba:	2300      	movs	r3, #0
 80171bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80171c0:	9302      	str	r3, [sp, #8]
 80171c2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80171c6:	46ab      	mov	fp, r5
 80171c8:	106d      	asrs	r5, r5, #1
 80171ca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80171ce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80171d2:	ec41 0b18 	vmov	d8, r0, r1
 80171d6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80171da:	2200      	movs	r2, #0
 80171dc:	4640      	mov	r0, r8
 80171de:	4649      	mov	r1, r9
 80171e0:	4614      	mov	r4, r2
 80171e2:	461d      	mov	r5, r3
 80171e4:	f7e9 fa30 	bl	8000648 <__aeabi_dmul>
 80171e8:	4602      	mov	r2, r0
 80171ea:	460b      	mov	r3, r1
 80171ec:	4630      	mov	r0, r6
 80171ee:	4639      	mov	r1, r7
 80171f0:	f7e9 f872 	bl	80002d8 <__aeabi_dsub>
 80171f4:	ec53 2b19 	vmov	r2, r3, d9
 80171f8:	4606      	mov	r6, r0
 80171fa:	460f      	mov	r7, r1
 80171fc:	4620      	mov	r0, r4
 80171fe:	4629      	mov	r1, r5
 8017200:	f7e9 f86a 	bl	80002d8 <__aeabi_dsub>
 8017204:	4602      	mov	r2, r0
 8017206:	460b      	mov	r3, r1
 8017208:	4650      	mov	r0, sl
 801720a:	4659      	mov	r1, fp
 801720c:	f7e9 f864 	bl	80002d8 <__aeabi_dsub>
 8017210:	4642      	mov	r2, r8
 8017212:	464b      	mov	r3, r9
 8017214:	f7e9 fa18 	bl	8000648 <__aeabi_dmul>
 8017218:	4602      	mov	r2, r0
 801721a:	460b      	mov	r3, r1
 801721c:	4630      	mov	r0, r6
 801721e:	4639      	mov	r1, r7
 8017220:	f7e9 f85a 	bl	80002d8 <__aeabi_dsub>
 8017224:	ec53 2b1a 	vmov	r2, r3, d10
 8017228:	f7e9 fa0e 	bl	8000648 <__aeabi_dmul>
 801722c:	ec53 2b18 	vmov	r2, r3, d8
 8017230:	ec41 0b19 	vmov	d9, r0, r1
 8017234:	ec51 0b18 	vmov	r0, r1, d8
 8017238:	f7e9 fa06 	bl	8000648 <__aeabi_dmul>
 801723c:	a37c      	add	r3, pc, #496	; (adr r3, 8017430 <__ieee754_pow+0x708>)
 801723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017242:	4604      	mov	r4, r0
 8017244:	460d      	mov	r5, r1
 8017246:	f7e9 f9ff 	bl	8000648 <__aeabi_dmul>
 801724a:	a37b      	add	r3, pc, #492	; (adr r3, 8017438 <__ieee754_pow+0x710>)
 801724c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017250:	f7e9 f844 	bl	80002dc <__adddf3>
 8017254:	4622      	mov	r2, r4
 8017256:	462b      	mov	r3, r5
 8017258:	f7e9 f9f6 	bl	8000648 <__aeabi_dmul>
 801725c:	a378      	add	r3, pc, #480	; (adr r3, 8017440 <__ieee754_pow+0x718>)
 801725e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017262:	f7e9 f83b 	bl	80002dc <__adddf3>
 8017266:	4622      	mov	r2, r4
 8017268:	462b      	mov	r3, r5
 801726a:	f7e9 f9ed 	bl	8000648 <__aeabi_dmul>
 801726e:	a376      	add	r3, pc, #472	; (adr r3, 8017448 <__ieee754_pow+0x720>)
 8017270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017274:	f7e9 f832 	bl	80002dc <__adddf3>
 8017278:	4622      	mov	r2, r4
 801727a:	462b      	mov	r3, r5
 801727c:	f7e9 f9e4 	bl	8000648 <__aeabi_dmul>
 8017280:	a373      	add	r3, pc, #460	; (adr r3, 8017450 <__ieee754_pow+0x728>)
 8017282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017286:	f7e9 f829 	bl	80002dc <__adddf3>
 801728a:	4622      	mov	r2, r4
 801728c:	462b      	mov	r3, r5
 801728e:	f7e9 f9db 	bl	8000648 <__aeabi_dmul>
 8017292:	a371      	add	r3, pc, #452	; (adr r3, 8017458 <__ieee754_pow+0x730>)
 8017294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017298:	f7e9 f820 	bl	80002dc <__adddf3>
 801729c:	4622      	mov	r2, r4
 801729e:	4606      	mov	r6, r0
 80172a0:	460f      	mov	r7, r1
 80172a2:	462b      	mov	r3, r5
 80172a4:	4620      	mov	r0, r4
 80172a6:	4629      	mov	r1, r5
 80172a8:	f7e9 f9ce 	bl	8000648 <__aeabi_dmul>
 80172ac:	4602      	mov	r2, r0
 80172ae:	460b      	mov	r3, r1
 80172b0:	4630      	mov	r0, r6
 80172b2:	4639      	mov	r1, r7
 80172b4:	f7e9 f9c8 	bl	8000648 <__aeabi_dmul>
 80172b8:	4642      	mov	r2, r8
 80172ba:	4604      	mov	r4, r0
 80172bc:	460d      	mov	r5, r1
 80172be:	464b      	mov	r3, r9
 80172c0:	ec51 0b18 	vmov	r0, r1, d8
 80172c4:	f7e9 f80a 	bl	80002dc <__adddf3>
 80172c8:	ec53 2b19 	vmov	r2, r3, d9
 80172cc:	f7e9 f9bc 	bl	8000648 <__aeabi_dmul>
 80172d0:	4622      	mov	r2, r4
 80172d2:	462b      	mov	r3, r5
 80172d4:	f7e9 f802 	bl	80002dc <__adddf3>
 80172d8:	4642      	mov	r2, r8
 80172da:	4682      	mov	sl, r0
 80172dc:	468b      	mov	fp, r1
 80172de:	464b      	mov	r3, r9
 80172e0:	4640      	mov	r0, r8
 80172e2:	4649      	mov	r1, r9
 80172e4:	f7e9 f9b0 	bl	8000648 <__aeabi_dmul>
 80172e8:	4b6b      	ldr	r3, [pc, #428]	; (8017498 <__ieee754_pow+0x770>)
 80172ea:	2200      	movs	r2, #0
 80172ec:	4606      	mov	r6, r0
 80172ee:	460f      	mov	r7, r1
 80172f0:	f7e8 fff4 	bl	80002dc <__adddf3>
 80172f4:	4652      	mov	r2, sl
 80172f6:	465b      	mov	r3, fp
 80172f8:	f7e8 fff0 	bl	80002dc <__adddf3>
 80172fc:	2000      	movs	r0, #0
 80172fe:	4604      	mov	r4, r0
 8017300:	460d      	mov	r5, r1
 8017302:	4602      	mov	r2, r0
 8017304:	460b      	mov	r3, r1
 8017306:	4640      	mov	r0, r8
 8017308:	4649      	mov	r1, r9
 801730a:	f7e9 f99d 	bl	8000648 <__aeabi_dmul>
 801730e:	4b62      	ldr	r3, [pc, #392]	; (8017498 <__ieee754_pow+0x770>)
 8017310:	4680      	mov	r8, r0
 8017312:	4689      	mov	r9, r1
 8017314:	2200      	movs	r2, #0
 8017316:	4620      	mov	r0, r4
 8017318:	4629      	mov	r1, r5
 801731a:	f7e8 ffdd 	bl	80002d8 <__aeabi_dsub>
 801731e:	4632      	mov	r2, r6
 8017320:	463b      	mov	r3, r7
 8017322:	f7e8 ffd9 	bl	80002d8 <__aeabi_dsub>
 8017326:	4602      	mov	r2, r0
 8017328:	460b      	mov	r3, r1
 801732a:	4650      	mov	r0, sl
 801732c:	4659      	mov	r1, fp
 801732e:	f7e8 ffd3 	bl	80002d8 <__aeabi_dsub>
 8017332:	ec53 2b18 	vmov	r2, r3, d8
 8017336:	f7e9 f987 	bl	8000648 <__aeabi_dmul>
 801733a:	4622      	mov	r2, r4
 801733c:	4606      	mov	r6, r0
 801733e:	460f      	mov	r7, r1
 8017340:	462b      	mov	r3, r5
 8017342:	ec51 0b19 	vmov	r0, r1, d9
 8017346:	f7e9 f97f 	bl	8000648 <__aeabi_dmul>
 801734a:	4602      	mov	r2, r0
 801734c:	460b      	mov	r3, r1
 801734e:	4630      	mov	r0, r6
 8017350:	4639      	mov	r1, r7
 8017352:	f7e8 ffc3 	bl	80002dc <__adddf3>
 8017356:	4606      	mov	r6, r0
 8017358:	460f      	mov	r7, r1
 801735a:	4602      	mov	r2, r0
 801735c:	460b      	mov	r3, r1
 801735e:	4640      	mov	r0, r8
 8017360:	4649      	mov	r1, r9
 8017362:	f7e8 ffbb 	bl	80002dc <__adddf3>
 8017366:	a33e      	add	r3, pc, #248	; (adr r3, 8017460 <__ieee754_pow+0x738>)
 8017368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801736c:	2000      	movs	r0, #0
 801736e:	4604      	mov	r4, r0
 8017370:	460d      	mov	r5, r1
 8017372:	f7e9 f969 	bl	8000648 <__aeabi_dmul>
 8017376:	4642      	mov	r2, r8
 8017378:	ec41 0b18 	vmov	d8, r0, r1
 801737c:	464b      	mov	r3, r9
 801737e:	4620      	mov	r0, r4
 8017380:	4629      	mov	r1, r5
 8017382:	f7e8 ffa9 	bl	80002d8 <__aeabi_dsub>
 8017386:	4602      	mov	r2, r0
 8017388:	460b      	mov	r3, r1
 801738a:	4630      	mov	r0, r6
 801738c:	4639      	mov	r1, r7
 801738e:	f7e8 ffa3 	bl	80002d8 <__aeabi_dsub>
 8017392:	a335      	add	r3, pc, #212	; (adr r3, 8017468 <__ieee754_pow+0x740>)
 8017394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017398:	f7e9 f956 	bl	8000648 <__aeabi_dmul>
 801739c:	a334      	add	r3, pc, #208	; (adr r3, 8017470 <__ieee754_pow+0x748>)
 801739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173a2:	4606      	mov	r6, r0
 80173a4:	460f      	mov	r7, r1
 80173a6:	4620      	mov	r0, r4
 80173a8:	4629      	mov	r1, r5
 80173aa:	f7e9 f94d 	bl	8000648 <__aeabi_dmul>
 80173ae:	4602      	mov	r2, r0
 80173b0:	460b      	mov	r3, r1
 80173b2:	4630      	mov	r0, r6
 80173b4:	4639      	mov	r1, r7
 80173b6:	f7e8 ff91 	bl	80002dc <__adddf3>
 80173ba:	9a07      	ldr	r2, [sp, #28]
 80173bc:	4b37      	ldr	r3, [pc, #220]	; (801749c <__ieee754_pow+0x774>)
 80173be:	4413      	add	r3, r2
 80173c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173c4:	f7e8 ff8a 	bl	80002dc <__adddf3>
 80173c8:	4682      	mov	sl, r0
 80173ca:	9805      	ldr	r0, [sp, #20]
 80173cc:	468b      	mov	fp, r1
 80173ce:	f7e9 f8d1 	bl	8000574 <__aeabi_i2d>
 80173d2:	9a07      	ldr	r2, [sp, #28]
 80173d4:	4b32      	ldr	r3, [pc, #200]	; (80174a0 <__ieee754_pow+0x778>)
 80173d6:	4413      	add	r3, r2
 80173d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80173dc:	4606      	mov	r6, r0
 80173de:	460f      	mov	r7, r1
 80173e0:	4652      	mov	r2, sl
 80173e2:	465b      	mov	r3, fp
 80173e4:	ec51 0b18 	vmov	r0, r1, d8
 80173e8:	f7e8 ff78 	bl	80002dc <__adddf3>
 80173ec:	4642      	mov	r2, r8
 80173ee:	464b      	mov	r3, r9
 80173f0:	f7e8 ff74 	bl	80002dc <__adddf3>
 80173f4:	4632      	mov	r2, r6
 80173f6:	463b      	mov	r3, r7
 80173f8:	f7e8 ff70 	bl	80002dc <__adddf3>
 80173fc:	2000      	movs	r0, #0
 80173fe:	4632      	mov	r2, r6
 8017400:	463b      	mov	r3, r7
 8017402:	4604      	mov	r4, r0
 8017404:	460d      	mov	r5, r1
 8017406:	f7e8 ff67 	bl	80002d8 <__aeabi_dsub>
 801740a:	4642      	mov	r2, r8
 801740c:	464b      	mov	r3, r9
 801740e:	f7e8 ff63 	bl	80002d8 <__aeabi_dsub>
 8017412:	ec53 2b18 	vmov	r2, r3, d8
 8017416:	f7e8 ff5f 	bl	80002d8 <__aeabi_dsub>
 801741a:	4602      	mov	r2, r0
 801741c:	460b      	mov	r3, r1
 801741e:	4650      	mov	r0, sl
 8017420:	4659      	mov	r1, fp
 8017422:	e610      	b.n	8017046 <__ieee754_pow+0x31e>
 8017424:	2401      	movs	r4, #1
 8017426:	e6a1      	b.n	801716c <__ieee754_pow+0x444>
 8017428:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8017478 <__ieee754_pow+0x750>
 801742c:	e617      	b.n	801705e <__ieee754_pow+0x336>
 801742e:	bf00      	nop
 8017430:	4a454eef 	.word	0x4a454eef
 8017434:	3fca7e28 	.word	0x3fca7e28
 8017438:	93c9db65 	.word	0x93c9db65
 801743c:	3fcd864a 	.word	0x3fcd864a
 8017440:	a91d4101 	.word	0xa91d4101
 8017444:	3fd17460 	.word	0x3fd17460
 8017448:	518f264d 	.word	0x518f264d
 801744c:	3fd55555 	.word	0x3fd55555
 8017450:	db6fabff 	.word	0xdb6fabff
 8017454:	3fdb6db6 	.word	0x3fdb6db6
 8017458:	33333303 	.word	0x33333303
 801745c:	3fe33333 	.word	0x3fe33333
 8017460:	e0000000 	.word	0xe0000000
 8017464:	3feec709 	.word	0x3feec709
 8017468:	dc3a03fd 	.word	0xdc3a03fd
 801746c:	3feec709 	.word	0x3feec709
 8017470:	145b01f5 	.word	0x145b01f5
 8017474:	be3e2fe0 	.word	0xbe3e2fe0
 8017478:	00000000 	.word	0x00000000
 801747c:	3ff00000 	.word	0x3ff00000
 8017480:	7ff00000 	.word	0x7ff00000
 8017484:	43400000 	.word	0x43400000
 8017488:	0003988e 	.word	0x0003988e
 801748c:	000bb679 	.word	0x000bb679
 8017490:	08018558 	.word	0x08018558
 8017494:	3ff00000 	.word	0x3ff00000
 8017498:	40080000 	.word	0x40080000
 801749c:	08018578 	.word	0x08018578
 80174a0:	08018568 	.word	0x08018568
 80174a4:	a3b3      	add	r3, pc, #716	; (adr r3, 8017774 <__ieee754_pow+0xa4c>)
 80174a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174aa:	4640      	mov	r0, r8
 80174ac:	4649      	mov	r1, r9
 80174ae:	f7e8 ff15 	bl	80002dc <__adddf3>
 80174b2:	4622      	mov	r2, r4
 80174b4:	ec41 0b1a 	vmov	d10, r0, r1
 80174b8:	462b      	mov	r3, r5
 80174ba:	4630      	mov	r0, r6
 80174bc:	4639      	mov	r1, r7
 80174be:	f7e8 ff0b 	bl	80002d8 <__aeabi_dsub>
 80174c2:	4602      	mov	r2, r0
 80174c4:	460b      	mov	r3, r1
 80174c6:	ec51 0b1a 	vmov	r0, r1, d10
 80174ca:	f7e9 fb4d 	bl	8000b68 <__aeabi_dcmpgt>
 80174ce:	2800      	cmp	r0, #0
 80174d0:	f47f ae04 	bne.w	80170dc <__ieee754_pow+0x3b4>
 80174d4:	4aa2      	ldr	r2, [pc, #648]	; (8017760 <__ieee754_pow+0xa38>)
 80174d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80174da:	4293      	cmp	r3, r2
 80174dc:	f340 8107 	ble.w	80176ee <__ieee754_pow+0x9c6>
 80174e0:	151b      	asrs	r3, r3, #20
 80174e2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80174e6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80174ea:	fa4a fa03 	asr.w	sl, sl, r3
 80174ee:	44da      	add	sl, fp
 80174f0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80174f4:	489b      	ldr	r0, [pc, #620]	; (8017764 <__ieee754_pow+0xa3c>)
 80174f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80174fa:	4108      	asrs	r0, r1
 80174fc:	ea00 030a 	and.w	r3, r0, sl
 8017500:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8017504:	f1c1 0114 	rsb	r1, r1, #20
 8017508:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801750c:	fa4a fa01 	asr.w	sl, sl, r1
 8017510:	f1bb 0f00 	cmp.w	fp, #0
 8017514:	f04f 0200 	mov.w	r2, #0
 8017518:	4620      	mov	r0, r4
 801751a:	4629      	mov	r1, r5
 801751c:	bfb8      	it	lt
 801751e:	f1ca 0a00 	rsblt	sl, sl, #0
 8017522:	f7e8 fed9 	bl	80002d8 <__aeabi_dsub>
 8017526:	ec41 0b19 	vmov	d9, r0, r1
 801752a:	4642      	mov	r2, r8
 801752c:	464b      	mov	r3, r9
 801752e:	ec51 0b19 	vmov	r0, r1, d9
 8017532:	f7e8 fed3 	bl	80002dc <__adddf3>
 8017536:	a37a      	add	r3, pc, #488	; (adr r3, 8017720 <__ieee754_pow+0x9f8>)
 8017538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801753c:	2000      	movs	r0, #0
 801753e:	4604      	mov	r4, r0
 8017540:	460d      	mov	r5, r1
 8017542:	f7e9 f881 	bl	8000648 <__aeabi_dmul>
 8017546:	ec53 2b19 	vmov	r2, r3, d9
 801754a:	4606      	mov	r6, r0
 801754c:	460f      	mov	r7, r1
 801754e:	4620      	mov	r0, r4
 8017550:	4629      	mov	r1, r5
 8017552:	f7e8 fec1 	bl	80002d8 <__aeabi_dsub>
 8017556:	4602      	mov	r2, r0
 8017558:	460b      	mov	r3, r1
 801755a:	4640      	mov	r0, r8
 801755c:	4649      	mov	r1, r9
 801755e:	f7e8 febb 	bl	80002d8 <__aeabi_dsub>
 8017562:	a371      	add	r3, pc, #452	; (adr r3, 8017728 <__ieee754_pow+0xa00>)
 8017564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017568:	f7e9 f86e 	bl	8000648 <__aeabi_dmul>
 801756c:	a370      	add	r3, pc, #448	; (adr r3, 8017730 <__ieee754_pow+0xa08>)
 801756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017572:	4680      	mov	r8, r0
 8017574:	4689      	mov	r9, r1
 8017576:	4620      	mov	r0, r4
 8017578:	4629      	mov	r1, r5
 801757a:	f7e9 f865 	bl	8000648 <__aeabi_dmul>
 801757e:	4602      	mov	r2, r0
 8017580:	460b      	mov	r3, r1
 8017582:	4640      	mov	r0, r8
 8017584:	4649      	mov	r1, r9
 8017586:	f7e8 fea9 	bl	80002dc <__adddf3>
 801758a:	4604      	mov	r4, r0
 801758c:	460d      	mov	r5, r1
 801758e:	4602      	mov	r2, r0
 8017590:	460b      	mov	r3, r1
 8017592:	4630      	mov	r0, r6
 8017594:	4639      	mov	r1, r7
 8017596:	f7e8 fea1 	bl	80002dc <__adddf3>
 801759a:	4632      	mov	r2, r6
 801759c:	463b      	mov	r3, r7
 801759e:	4680      	mov	r8, r0
 80175a0:	4689      	mov	r9, r1
 80175a2:	f7e8 fe99 	bl	80002d8 <__aeabi_dsub>
 80175a6:	4602      	mov	r2, r0
 80175a8:	460b      	mov	r3, r1
 80175aa:	4620      	mov	r0, r4
 80175ac:	4629      	mov	r1, r5
 80175ae:	f7e8 fe93 	bl	80002d8 <__aeabi_dsub>
 80175b2:	4642      	mov	r2, r8
 80175b4:	4606      	mov	r6, r0
 80175b6:	460f      	mov	r7, r1
 80175b8:	464b      	mov	r3, r9
 80175ba:	4640      	mov	r0, r8
 80175bc:	4649      	mov	r1, r9
 80175be:	f7e9 f843 	bl	8000648 <__aeabi_dmul>
 80175c2:	a35d      	add	r3, pc, #372	; (adr r3, 8017738 <__ieee754_pow+0xa10>)
 80175c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175c8:	4604      	mov	r4, r0
 80175ca:	460d      	mov	r5, r1
 80175cc:	f7e9 f83c 	bl	8000648 <__aeabi_dmul>
 80175d0:	a35b      	add	r3, pc, #364	; (adr r3, 8017740 <__ieee754_pow+0xa18>)
 80175d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175d6:	f7e8 fe7f 	bl	80002d8 <__aeabi_dsub>
 80175da:	4622      	mov	r2, r4
 80175dc:	462b      	mov	r3, r5
 80175de:	f7e9 f833 	bl	8000648 <__aeabi_dmul>
 80175e2:	a359      	add	r3, pc, #356	; (adr r3, 8017748 <__ieee754_pow+0xa20>)
 80175e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175e8:	f7e8 fe78 	bl	80002dc <__adddf3>
 80175ec:	4622      	mov	r2, r4
 80175ee:	462b      	mov	r3, r5
 80175f0:	f7e9 f82a 	bl	8000648 <__aeabi_dmul>
 80175f4:	a356      	add	r3, pc, #344	; (adr r3, 8017750 <__ieee754_pow+0xa28>)
 80175f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175fa:	f7e8 fe6d 	bl	80002d8 <__aeabi_dsub>
 80175fe:	4622      	mov	r2, r4
 8017600:	462b      	mov	r3, r5
 8017602:	f7e9 f821 	bl	8000648 <__aeabi_dmul>
 8017606:	a354      	add	r3, pc, #336	; (adr r3, 8017758 <__ieee754_pow+0xa30>)
 8017608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801760c:	f7e8 fe66 	bl	80002dc <__adddf3>
 8017610:	4622      	mov	r2, r4
 8017612:	462b      	mov	r3, r5
 8017614:	f7e9 f818 	bl	8000648 <__aeabi_dmul>
 8017618:	4602      	mov	r2, r0
 801761a:	460b      	mov	r3, r1
 801761c:	4640      	mov	r0, r8
 801761e:	4649      	mov	r1, r9
 8017620:	f7e8 fe5a 	bl	80002d8 <__aeabi_dsub>
 8017624:	4604      	mov	r4, r0
 8017626:	460d      	mov	r5, r1
 8017628:	4602      	mov	r2, r0
 801762a:	460b      	mov	r3, r1
 801762c:	4640      	mov	r0, r8
 801762e:	4649      	mov	r1, r9
 8017630:	f7e9 f80a 	bl	8000648 <__aeabi_dmul>
 8017634:	2200      	movs	r2, #0
 8017636:	ec41 0b19 	vmov	d9, r0, r1
 801763a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801763e:	4620      	mov	r0, r4
 8017640:	4629      	mov	r1, r5
 8017642:	f7e8 fe49 	bl	80002d8 <__aeabi_dsub>
 8017646:	4602      	mov	r2, r0
 8017648:	460b      	mov	r3, r1
 801764a:	ec51 0b19 	vmov	r0, r1, d9
 801764e:	f7e9 f925 	bl	800089c <__aeabi_ddiv>
 8017652:	4632      	mov	r2, r6
 8017654:	4604      	mov	r4, r0
 8017656:	460d      	mov	r5, r1
 8017658:	463b      	mov	r3, r7
 801765a:	4640      	mov	r0, r8
 801765c:	4649      	mov	r1, r9
 801765e:	f7e8 fff3 	bl	8000648 <__aeabi_dmul>
 8017662:	4632      	mov	r2, r6
 8017664:	463b      	mov	r3, r7
 8017666:	f7e8 fe39 	bl	80002dc <__adddf3>
 801766a:	4602      	mov	r2, r0
 801766c:	460b      	mov	r3, r1
 801766e:	4620      	mov	r0, r4
 8017670:	4629      	mov	r1, r5
 8017672:	f7e8 fe31 	bl	80002d8 <__aeabi_dsub>
 8017676:	4642      	mov	r2, r8
 8017678:	464b      	mov	r3, r9
 801767a:	f7e8 fe2d 	bl	80002d8 <__aeabi_dsub>
 801767e:	460b      	mov	r3, r1
 8017680:	4602      	mov	r2, r0
 8017682:	4939      	ldr	r1, [pc, #228]	; (8017768 <__ieee754_pow+0xa40>)
 8017684:	2000      	movs	r0, #0
 8017686:	f7e8 fe27 	bl	80002d8 <__aeabi_dsub>
 801768a:	ec41 0b10 	vmov	d0, r0, r1
 801768e:	ee10 3a90 	vmov	r3, s1
 8017692:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8017696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801769a:	da2b      	bge.n	80176f4 <__ieee754_pow+0x9cc>
 801769c:	4650      	mov	r0, sl
 801769e:	f000 f9f3 	bl	8017a88 <scalbn>
 80176a2:	ec51 0b10 	vmov	r0, r1, d0
 80176a6:	ec53 2b18 	vmov	r2, r3, d8
 80176aa:	f7ff bbee 	b.w	8016e8a <__ieee754_pow+0x162>
 80176ae:	4b2f      	ldr	r3, [pc, #188]	; (801776c <__ieee754_pow+0xa44>)
 80176b0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80176b4:	429e      	cmp	r6, r3
 80176b6:	f77f af0d 	ble.w	80174d4 <__ieee754_pow+0x7ac>
 80176ba:	4b2d      	ldr	r3, [pc, #180]	; (8017770 <__ieee754_pow+0xa48>)
 80176bc:	440b      	add	r3, r1
 80176be:	4303      	orrs	r3, r0
 80176c0:	d009      	beq.n	80176d6 <__ieee754_pow+0x9ae>
 80176c2:	ec51 0b18 	vmov	r0, r1, d8
 80176c6:	2200      	movs	r2, #0
 80176c8:	2300      	movs	r3, #0
 80176ca:	f7e9 fa2f 	bl	8000b2c <__aeabi_dcmplt>
 80176ce:	3800      	subs	r0, #0
 80176d0:	bf18      	it	ne
 80176d2:	2001      	movne	r0, #1
 80176d4:	e448      	b.n	8016f68 <__ieee754_pow+0x240>
 80176d6:	4622      	mov	r2, r4
 80176d8:	462b      	mov	r3, r5
 80176da:	f7e8 fdfd 	bl	80002d8 <__aeabi_dsub>
 80176de:	4642      	mov	r2, r8
 80176e0:	464b      	mov	r3, r9
 80176e2:	f7e9 fa37 	bl	8000b54 <__aeabi_dcmpge>
 80176e6:	2800      	cmp	r0, #0
 80176e8:	f43f aef4 	beq.w	80174d4 <__ieee754_pow+0x7ac>
 80176ec:	e7e9      	b.n	80176c2 <__ieee754_pow+0x99a>
 80176ee:	f04f 0a00 	mov.w	sl, #0
 80176f2:	e71a      	b.n	801752a <__ieee754_pow+0x802>
 80176f4:	ec51 0b10 	vmov	r0, r1, d0
 80176f8:	4619      	mov	r1, r3
 80176fa:	e7d4      	b.n	80176a6 <__ieee754_pow+0x97e>
 80176fc:	491a      	ldr	r1, [pc, #104]	; (8017768 <__ieee754_pow+0xa40>)
 80176fe:	2000      	movs	r0, #0
 8017700:	f7ff bb31 	b.w	8016d66 <__ieee754_pow+0x3e>
 8017704:	2000      	movs	r0, #0
 8017706:	2100      	movs	r1, #0
 8017708:	f7ff bb2d 	b.w	8016d66 <__ieee754_pow+0x3e>
 801770c:	4630      	mov	r0, r6
 801770e:	4639      	mov	r1, r7
 8017710:	f7ff bb29 	b.w	8016d66 <__ieee754_pow+0x3e>
 8017714:	9204      	str	r2, [sp, #16]
 8017716:	f7ff bb7b 	b.w	8016e10 <__ieee754_pow+0xe8>
 801771a:	2300      	movs	r3, #0
 801771c:	f7ff bb65 	b.w	8016dea <__ieee754_pow+0xc2>
 8017720:	00000000 	.word	0x00000000
 8017724:	3fe62e43 	.word	0x3fe62e43
 8017728:	fefa39ef 	.word	0xfefa39ef
 801772c:	3fe62e42 	.word	0x3fe62e42
 8017730:	0ca86c39 	.word	0x0ca86c39
 8017734:	be205c61 	.word	0xbe205c61
 8017738:	72bea4d0 	.word	0x72bea4d0
 801773c:	3e663769 	.word	0x3e663769
 8017740:	c5d26bf1 	.word	0xc5d26bf1
 8017744:	3ebbbd41 	.word	0x3ebbbd41
 8017748:	af25de2c 	.word	0xaf25de2c
 801774c:	3f11566a 	.word	0x3f11566a
 8017750:	16bebd93 	.word	0x16bebd93
 8017754:	3f66c16c 	.word	0x3f66c16c
 8017758:	5555553e 	.word	0x5555553e
 801775c:	3fc55555 	.word	0x3fc55555
 8017760:	3fe00000 	.word	0x3fe00000
 8017764:	fff00000 	.word	0xfff00000
 8017768:	3ff00000 	.word	0x3ff00000
 801776c:	4090cbff 	.word	0x4090cbff
 8017770:	3f6f3400 	.word	0x3f6f3400
 8017774:	652b82fe 	.word	0x652b82fe
 8017778:	3c971547 	.word	0x3c971547

0801777c <fabs>:
 801777c:	ec51 0b10 	vmov	r0, r1, d0
 8017780:	ee10 2a10 	vmov	r2, s0
 8017784:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017788:	ec43 2b10 	vmov	d0, r2, r3
 801778c:	4770      	bx	lr
	...

08017790 <__ieee754_atan2f>:
 8017790:	ee10 2a90 	vmov	r2, s1
 8017794:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8017798:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801779c:	b510      	push	{r4, lr}
 801779e:	eef0 7a40 	vmov.f32	s15, s0
 80177a2:	dc06      	bgt.n	80177b2 <__ieee754_atan2f+0x22>
 80177a4:	ee10 0a10 	vmov	r0, s0
 80177a8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80177ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80177b0:	dd04      	ble.n	80177bc <__ieee754_atan2f+0x2c>
 80177b2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80177b6:	eeb0 0a67 	vmov.f32	s0, s15
 80177ba:	bd10      	pop	{r4, pc}
 80177bc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80177c0:	d103      	bne.n	80177ca <__ieee754_atan2f+0x3a>
 80177c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177c6:	f000 b883 	b.w	80178d0 <atanf>
 80177ca:	1794      	asrs	r4, r2, #30
 80177cc:	f004 0402 	and.w	r4, r4, #2
 80177d0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80177d4:	b943      	cbnz	r3, 80177e8 <__ieee754_atan2f+0x58>
 80177d6:	2c02      	cmp	r4, #2
 80177d8:	d05e      	beq.n	8017898 <__ieee754_atan2f+0x108>
 80177da:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80178ac <__ieee754_atan2f+0x11c>
 80177de:	2c03      	cmp	r4, #3
 80177e0:	bf08      	it	eq
 80177e2:	eef0 7a47 	vmoveq.f32	s15, s14
 80177e6:	e7e6      	b.n	80177b6 <__ieee754_atan2f+0x26>
 80177e8:	b941      	cbnz	r1, 80177fc <__ieee754_atan2f+0x6c>
 80177ea:	eddf 7a31 	vldr	s15, [pc, #196]	; 80178b0 <__ieee754_atan2f+0x120>
 80177ee:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80178b4 <__ieee754_atan2f+0x124>
 80177f2:	2800      	cmp	r0, #0
 80177f4:	bfb8      	it	lt
 80177f6:	eef0 7a47 	vmovlt.f32	s15, s14
 80177fa:	e7dc      	b.n	80177b6 <__ieee754_atan2f+0x26>
 80177fc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8017800:	d110      	bne.n	8017824 <__ieee754_atan2f+0x94>
 8017802:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017806:	f104 34ff 	add.w	r4, r4, #4294967295
 801780a:	d107      	bne.n	801781c <__ieee754_atan2f+0x8c>
 801780c:	2c02      	cmp	r4, #2
 801780e:	d846      	bhi.n	801789e <__ieee754_atan2f+0x10e>
 8017810:	4b29      	ldr	r3, [pc, #164]	; (80178b8 <__ieee754_atan2f+0x128>)
 8017812:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8017816:	edd3 7a00 	vldr	s15, [r3]
 801781a:	e7cc      	b.n	80177b6 <__ieee754_atan2f+0x26>
 801781c:	2c02      	cmp	r4, #2
 801781e:	d841      	bhi.n	80178a4 <__ieee754_atan2f+0x114>
 8017820:	4b26      	ldr	r3, [pc, #152]	; (80178bc <__ieee754_atan2f+0x12c>)
 8017822:	e7f6      	b.n	8017812 <__ieee754_atan2f+0x82>
 8017824:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017828:	d0df      	beq.n	80177ea <__ieee754_atan2f+0x5a>
 801782a:	1a5b      	subs	r3, r3, r1
 801782c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8017830:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8017834:	da1a      	bge.n	801786c <__ieee754_atan2f+0xdc>
 8017836:	2a00      	cmp	r2, #0
 8017838:	da01      	bge.n	801783e <__ieee754_atan2f+0xae>
 801783a:	313c      	adds	r1, #60	; 0x3c
 801783c:	db19      	blt.n	8017872 <__ieee754_atan2f+0xe2>
 801783e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8017842:	f000 f919 	bl	8017a78 <fabsf>
 8017846:	f000 f843 	bl	80178d0 <atanf>
 801784a:	eef0 7a40 	vmov.f32	s15, s0
 801784e:	2c01      	cmp	r4, #1
 8017850:	d012      	beq.n	8017878 <__ieee754_atan2f+0xe8>
 8017852:	2c02      	cmp	r4, #2
 8017854:	d017      	beq.n	8017886 <__ieee754_atan2f+0xf6>
 8017856:	2c00      	cmp	r4, #0
 8017858:	d0ad      	beq.n	80177b6 <__ieee754_atan2f+0x26>
 801785a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80178c0 <__ieee754_atan2f+0x130>
 801785e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017862:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80178c4 <__ieee754_atan2f+0x134>
 8017866:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801786a:	e7a4      	b.n	80177b6 <__ieee754_atan2f+0x26>
 801786c:	eddf 7a10 	vldr	s15, [pc, #64]	; 80178b0 <__ieee754_atan2f+0x120>
 8017870:	e7ed      	b.n	801784e <__ieee754_atan2f+0xbe>
 8017872:	eddf 7a15 	vldr	s15, [pc, #84]	; 80178c8 <__ieee754_atan2f+0x138>
 8017876:	e7ea      	b.n	801784e <__ieee754_atan2f+0xbe>
 8017878:	ee17 3a90 	vmov	r3, s15
 801787c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017880:	ee07 3a90 	vmov	s15, r3
 8017884:	e797      	b.n	80177b6 <__ieee754_atan2f+0x26>
 8017886:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80178c0 <__ieee754_atan2f+0x130>
 801788a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801788e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80178c4 <__ieee754_atan2f+0x134>
 8017892:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017896:	e78e      	b.n	80177b6 <__ieee754_atan2f+0x26>
 8017898:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80178c4 <__ieee754_atan2f+0x134>
 801789c:	e78b      	b.n	80177b6 <__ieee754_atan2f+0x26>
 801789e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80178cc <__ieee754_atan2f+0x13c>
 80178a2:	e788      	b.n	80177b6 <__ieee754_atan2f+0x26>
 80178a4:	eddf 7a08 	vldr	s15, [pc, #32]	; 80178c8 <__ieee754_atan2f+0x138>
 80178a8:	e785      	b.n	80177b6 <__ieee754_atan2f+0x26>
 80178aa:	bf00      	nop
 80178ac:	c0490fdb 	.word	0xc0490fdb
 80178b0:	3fc90fdb 	.word	0x3fc90fdb
 80178b4:	bfc90fdb 	.word	0xbfc90fdb
 80178b8:	08018588 	.word	0x08018588
 80178bc:	08018594 	.word	0x08018594
 80178c0:	33bbbd2e 	.word	0x33bbbd2e
 80178c4:	40490fdb 	.word	0x40490fdb
 80178c8:	00000000 	.word	0x00000000
 80178cc:	3f490fdb 	.word	0x3f490fdb

080178d0 <atanf>:
 80178d0:	b538      	push	{r3, r4, r5, lr}
 80178d2:	ee10 5a10 	vmov	r5, s0
 80178d6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80178da:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80178de:	eef0 7a40 	vmov.f32	s15, s0
 80178e2:	db10      	blt.n	8017906 <atanf+0x36>
 80178e4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80178e8:	dd04      	ble.n	80178f4 <atanf+0x24>
 80178ea:	ee70 7a00 	vadd.f32	s15, s0, s0
 80178ee:	eeb0 0a67 	vmov.f32	s0, s15
 80178f2:	bd38      	pop	{r3, r4, r5, pc}
 80178f4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8017a2c <atanf+0x15c>
 80178f8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8017a30 <atanf+0x160>
 80178fc:	2d00      	cmp	r5, #0
 80178fe:	bfd8      	it	le
 8017900:	eef0 7a47 	vmovle.f32	s15, s14
 8017904:	e7f3      	b.n	80178ee <atanf+0x1e>
 8017906:	4b4b      	ldr	r3, [pc, #300]	; (8017a34 <atanf+0x164>)
 8017908:	429c      	cmp	r4, r3
 801790a:	dc10      	bgt.n	801792e <atanf+0x5e>
 801790c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8017910:	da0a      	bge.n	8017928 <atanf+0x58>
 8017912:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8017a38 <atanf+0x168>
 8017916:	ee30 7a07 	vadd.f32	s14, s0, s14
 801791a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801791e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017926:	dce2      	bgt.n	80178ee <atanf+0x1e>
 8017928:	f04f 33ff 	mov.w	r3, #4294967295
 801792c:	e013      	b.n	8017956 <atanf+0x86>
 801792e:	f000 f8a3 	bl	8017a78 <fabsf>
 8017932:	4b42      	ldr	r3, [pc, #264]	; (8017a3c <atanf+0x16c>)
 8017934:	429c      	cmp	r4, r3
 8017936:	dc4f      	bgt.n	80179d8 <atanf+0x108>
 8017938:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801793c:	429c      	cmp	r4, r3
 801793e:	dc41      	bgt.n	80179c4 <atanf+0xf4>
 8017940:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017944:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017948:	eea0 7a27 	vfma.f32	s14, s0, s15
 801794c:	2300      	movs	r3, #0
 801794e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017952:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017956:	1c5a      	adds	r2, r3, #1
 8017958:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801795c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8017a40 <atanf+0x170>
 8017960:	eddf 5a38 	vldr	s11, [pc, #224]	; 8017a44 <atanf+0x174>
 8017964:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8017a48 <atanf+0x178>
 8017968:	ee66 6a06 	vmul.f32	s13, s12, s12
 801796c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8017970:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8017a4c <atanf+0x17c>
 8017974:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017978:	eddf 5a35 	vldr	s11, [pc, #212]	; 8017a50 <atanf+0x180>
 801797c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8017980:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8017a54 <atanf+0x184>
 8017984:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017988:	eddf 5a33 	vldr	s11, [pc, #204]	; 8017a58 <atanf+0x188>
 801798c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8017990:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8017a5c <atanf+0x18c>
 8017994:	eea6 5a87 	vfma.f32	s10, s13, s14
 8017998:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8017a60 <atanf+0x190>
 801799c:	eea5 7a26 	vfma.f32	s14, s10, s13
 80179a0:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8017a64 <atanf+0x194>
 80179a4:	eea7 5a26 	vfma.f32	s10, s14, s13
 80179a8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8017a68 <atanf+0x198>
 80179ac:	eea5 7a26 	vfma.f32	s14, s10, s13
 80179b0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80179b4:	eea5 7a86 	vfma.f32	s14, s11, s12
 80179b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80179bc:	d121      	bne.n	8017a02 <atanf+0x132>
 80179be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80179c2:	e794      	b.n	80178ee <atanf+0x1e>
 80179c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80179c8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80179cc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80179d0:	2301      	movs	r3, #1
 80179d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80179d6:	e7be      	b.n	8017956 <atanf+0x86>
 80179d8:	4b24      	ldr	r3, [pc, #144]	; (8017a6c <atanf+0x19c>)
 80179da:	429c      	cmp	r4, r3
 80179dc:	dc0b      	bgt.n	80179f6 <atanf+0x126>
 80179de:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80179e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80179e6:	eea0 7a27 	vfma.f32	s14, s0, s15
 80179ea:	2302      	movs	r3, #2
 80179ec:	ee70 6a67 	vsub.f32	s13, s0, s15
 80179f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80179f4:	e7af      	b.n	8017956 <atanf+0x86>
 80179f6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80179fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80179fe:	2303      	movs	r3, #3
 8017a00:	e7a9      	b.n	8017956 <atanf+0x86>
 8017a02:	4a1b      	ldr	r2, [pc, #108]	; (8017a70 <atanf+0x1a0>)
 8017a04:	491b      	ldr	r1, [pc, #108]	; (8017a74 <atanf+0x1a4>)
 8017a06:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017a0a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017a0e:	edd3 6a00 	vldr	s13, [r3]
 8017a12:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017a16:	2d00      	cmp	r5, #0
 8017a18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017a1c:	edd2 7a00 	vldr	s15, [r2]
 8017a20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017a24:	bfb8      	it	lt
 8017a26:	eef1 7a67 	vneglt.f32	s15, s15
 8017a2a:	e760      	b.n	80178ee <atanf+0x1e>
 8017a2c:	3fc90fdb 	.word	0x3fc90fdb
 8017a30:	bfc90fdb 	.word	0xbfc90fdb
 8017a34:	3edfffff 	.word	0x3edfffff
 8017a38:	7149f2ca 	.word	0x7149f2ca
 8017a3c:	3f97ffff 	.word	0x3f97ffff
 8017a40:	3c8569d7 	.word	0x3c8569d7
 8017a44:	3d4bda59 	.word	0x3d4bda59
 8017a48:	bd6ef16b 	.word	0xbd6ef16b
 8017a4c:	3d886b35 	.word	0x3d886b35
 8017a50:	3dba2e6e 	.word	0x3dba2e6e
 8017a54:	3e124925 	.word	0x3e124925
 8017a58:	3eaaaaab 	.word	0x3eaaaaab
 8017a5c:	bd15a221 	.word	0xbd15a221
 8017a60:	bd9d8795 	.word	0xbd9d8795
 8017a64:	bde38e38 	.word	0xbde38e38
 8017a68:	be4ccccd 	.word	0xbe4ccccd
 8017a6c:	401bffff 	.word	0x401bffff
 8017a70:	080185a0 	.word	0x080185a0
 8017a74:	080185b0 	.word	0x080185b0

08017a78 <fabsf>:
 8017a78:	ee10 3a10 	vmov	r3, s0
 8017a7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017a80:	ee00 3a10 	vmov	s0, r3
 8017a84:	4770      	bx	lr
	...

08017a88 <scalbn>:
 8017a88:	b570      	push	{r4, r5, r6, lr}
 8017a8a:	ec55 4b10 	vmov	r4, r5, d0
 8017a8e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8017a92:	4606      	mov	r6, r0
 8017a94:	462b      	mov	r3, r5
 8017a96:	b999      	cbnz	r1, 8017ac0 <scalbn+0x38>
 8017a98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017a9c:	4323      	orrs	r3, r4
 8017a9e:	d03f      	beq.n	8017b20 <scalbn+0x98>
 8017aa0:	4b35      	ldr	r3, [pc, #212]	; (8017b78 <scalbn+0xf0>)
 8017aa2:	4629      	mov	r1, r5
 8017aa4:	ee10 0a10 	vmov	r0, s0
 8017aa8:	2200      	movs	r2, #0
 8017aaa:	f7e8 fdcd 	bl	8000648 <__aeabi_dmul>
 8017aae:	4b33      	ldr	r3, [pc, #204]	; (8017b7c <scalbn+0xf4>)
 8017ab0:	429e      	cmp	r6, r3
 8017ab2:	4604      	mov	r4, r0
 8017ab4:	460d      	mov	r5, r1
 8017ab6:	da10      	bge.n	8017ada <scalbn+0x52>
 8017ab8:	a327      	add	r3, pc, #156	; (adr r3, 8017b58 <scalbn+0xd0>)
 8017aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017abe:	e01f      	b.n	8017b00 <scalbn+0x78>
 8017ac0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8017ac4:	4291      	cmp	r1, r2
 8017ac6:	d10c      	bne.n	8017ae2 <scalbn+0x5a>
 8017ac8:	ee10 2a10 	vmov	r2, s0
 8017acc:	4620      	mov	r0, r4
 8017ace:	4629      	mov	r1, r5
 8017ad0:	f7e8 fc04 	bl	80002dc <__adddf3>
 8017ad4:	4604      	mov	r4, r0
 8017ad6:	460d      	mov	r5, r1
 8017ad8:	e022      	b.n	8017b20 <scalbn+0x98>
 8017ada:	460b      	mov	r3, r1
 8017adc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8017ae0:	3936      	subs	r1, #54	; 0x36
 8017ae2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8017ae6:	4296      	cmp	r6, r2
 8017ae8:	dd0d      	ble.n	8017b06 <scalbn+0x7e>
 8017aea:	2d00      	cmp	r5, #0
 8017aec:	a11c      	add	r1, pc, #112	; (adr r1, 8017b60 <scalbn+0xd8>)
 8017aee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017af2:	da02      	bge.n	8017afa <scalbn+0x72>
 8017af4:	a11c      	add	r1, pc, #112	; (adr r1, 8017b68 <scalbn+0xe0>)
 8017af6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017afa:	a319      	add	r3, pc, #100	; (adr r3, 8017b60 <scalbn+0xd8>)
 8017afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b00:	f7e8 fda2 	bl	8000648 <__aeabi_dmul>
 8017b04:	e7e6      	b.n	8017ad4 <scalbn+0x4c>
 8017b06:	1872      	adds	r2, r6, r1
 8017b08:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017b0c:	428a      	cmp	r2, r1
 8017b0e:	dcec      	bgt.n	8017aea <scalbn+0x62>
 8017b10:	2a00      	cmp	r2, #0
 8017b12:	dd08      	ble.n	8017b26 <scalbn+0x9e>
 8017b14:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017b18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017b1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017b20:	ec45 4b10 	vmov	d0, r4, r5
 8017b24:	bd70      	pop	{r4, r5, r6, pc}
 8017b26:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017b2a:	da08      	bge.n	8017b3e <scalbn+0xb6>
 8017b2c:	2d00      	cmp	r5, #0
 8017b2e:	a10a      	add	r1, pc, #40	; (adr r1, 8017b58 <scalbn+0xd0>)
 8017b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017b34:	dac0      	bge.n	8017ab8 <scalbn+0x30>
 8017b36:	a10e      	add	r1, pc, #56	; (adr r1, 8017b70 <scalbn+0xe8>)
 8017b38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017b3c:	e7bc      	b.n	8017ab8 <scalbn+0x30>
 8017b3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017b42:	3236      	adds	r2, #54	; 0x36
 8017b44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017b48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8017b4c:	4620      	mov	r0, r4
 8017b4e:	4b0c      	ldr	r3, [pc, #48]	; (8017b80 <scalbn+0xf8>)
 8017b50:	2200      	movs	r2, #0
 8017b52:	e7d5      	b.n	8017b00 <scalbn+0x78>
 8017b54:	f3af 8000 	nop.w
 8017b58:	c2f8f359 	.word	0xc2f8f359
 8017b5c:	01a56e1f 	.word	0x01a56e1f
 8017b60:	8800759c 	.word	0x8800759c
 8017b64:	7e37e43c 	.word	0x7e37e43c
 8017b68:	8800759c 	.word	0x8800759c
 8017b6c:	fe37e43c 	.word	0xfe37e43c
 8017b70:	c2f8f359 	.word	0xc2f8f359
 8017b74:	81a56e1f 	.word	0x81a56e1f
 8017b78:	43500000 	.word	0x43500000
 8017b7c:	ffff3cb0 	.word	0xffff3cb0
 8017b80:	3c900000 	.word	0x3c900000

08017b84 <with_errno>:
 8017b84:	b570      	push	{r4, r5, r6, lr}
 8017b86:	4604      	mov	r4, r0
 8017b88:	460d      	mov	r5, r1
 8017b8a:	4616      	mov	r6, r2
 8017b8c:	f7fa ff6a 	bl	8012a64 <__errno>
 8017b90:	4629      	mov	r1, r5
 8017b92:	6006      	str	r6, [r0, #0]
 8017b94:	4620      	mov	r0, r4
 8017b96:	bd70      	pop	{r4, r5, r6, pc}

08017b98 <xflow>:
 8017b98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017b9a:	4614      	mov	r4, r2
 8017b9c:	461d      	mov	r5, r3
 8017b9e:	b108      	cbz	r0, 8017ba4 <xflow+0xc>
 8017ba0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017ba4:	e9cd 2300 	strd	r2, r3, [sp]
 8017ba8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017bac:	4620      	mov	r0, r4
 8017bae:	4629      	mov	r1, r5
 8017bb0:	f7e8 fd4a 	bl	8000648 <__aeabi_dmul>
 8017bb4:	2222      	movs	r2, #34	; 0x22
 8017bb6:	b003      	add	sp, #12
 8017bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017bbc:	f7ff bfe2 	b.w	8017b84 <with_errno>

08017bc0 <__math_uflow>:
 8017bc0:	b508      	push	{r3, lr}
 8017bc2:	2200      	movs	r2, #0
 8017bc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8017bc8:	f7ff ffe6 	bl	8017b98 <xflow>
 8017bcc:	ec41 0b10 	vmov	d0, r0, r1
 8017bd0:	bd08      	pop	{r3, pc}

08017bd2 <__math_oflow>:
 8017bd2:	b508      	push	{r3, lr}
 8017bd4:	2200      	movs	r2, #0
 8017bd6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8017bda:	f7ff ffdd 	bl	8017b98 <xflow>
 8017bde:	ec41 0b10 	vmov	d0, r0, r1
 8017be2:	bd08      	pop	{r3, pc}

08017be4 <_init>:
 8017be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017be6:	bf00      	nop
 8017be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017bea:	bc08      	pop	{r3}
 8017bec:	469e      	mov	lr, r3
 8017bee:	4770      	bx	lr

08017bf0 <_fini>:
 8017bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bf2:	bf00      	nop
 8017bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017bf6:	bc08      	pop	{r3}
 8017bf8:	469e      	mov	lr, r3
 8017bfa:	4770      	bx	lr
