
DroneFW_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b9a4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d78  0801bb88  0801bb88  0002bb88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c900  0801c900  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801c900  0801c900  0002c900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c908  0801c908  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c908  0801c908  0002c908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c90c  0801c90c  0002c90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801c910  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008ef4  200001f0  0801cb00  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200090e4  0801cb00  000390e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002bd00  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000062b2  00000000  00000000  0005bf63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f80  00000000  00000000  00062218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001858  00000000  00000000  00064198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00009ed5  00000000  00000000  000659f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d8cf  00000000  00000000  0006f8c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eee65  00000000  00000000  0009d194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a03c  00000000  00000000  0018bffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00196038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801bb6c 	.word	0x0801bb6c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0801bb6c 	.word	0x0801bb6c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_ldivmod>:
 8000cd8:	b97b      	cbnz	r3, 8000cfa <__aeabi_ldivmod+0x22>
 8000cda:	b972      	cbnz	r2, 8000cfa <__aeabi_ldivmod+0x22>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bfbe      	ittt	lt
 8000ce0:	2000      	movlt	r0, #0
 8000ce2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ce6:	e006      	blt.n	8000cf6 <__aeabi_ldivmod+0x1e>
 8000ce8:	bf08      	it	eq
 8000cea:	2800      	cmpeq	r0, #0
 8000cec:	bf1c      	itt	ne
 8000cee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cf2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf6:	f000 b9f1 	b.w	80010dc <__aeabi_idiv0>
 8000cfa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d02:	2900      	cmp	r1, #0
 8000d04:	db09      	blt.n	8000d1a <__aeabi_ldivmod+0x42>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db1a      	blt.n	8000d40 <__aeabi_ldivmod+0x68>
 8000d0a:	f000 f883 	bl	8000e14 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4770      	bx	lr
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db1b      	blt.n	8000d5c <__aeabi_ldivmod+0x84>
 8000d24:	f000 f876 	bl	8000e14 <__udivmoddi4>
 8000d28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d30:	b004      	add	sp, #16
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	4252      	negs	r2, r2
 8000d3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3e:	4770      	bx	lr
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	f000 f865 	bl	8000e14 <__udivmoddi4>
 8000d4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d52:	b004      	add	sp, #16
 8000d54:	4240      	negs	r0, r0
 8000d56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5a:	4770      	bx	lr
 8000d5c:	4252      	negs	r2, r2
 8000d5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d62:	f000 f857 	bl	8000e14 <__udivmoddi4>
 8000d66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6e:	b004      	add	sp, #16
 8000d70:	4252      	negs	r2, r2
 8000d72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_uldivmod>:
 8000d78:	b953      	cbnz	r3, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7a:	b94a      	cbnz	r2, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bf08      	it	eq
 8000d80:	2800      	cmpeq	r0, #0
 8000d82:	bf1c      	itt	ne
 8000d84:	f04f 31ff 	movne.w	r1, #4294967295
 8000d88:	f04f 30ff 	movne.w	r0, #4294967295
 8000d8c:	f000 b9a6 	b.w	80010dc <__aeabi_idiv0>
 8000d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d98:	f000 f83c 	bl	8000e14 <__udivmoddi4>
 8000d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da4:	b004      	add	sp, #16
 8000da6:	4770      	bx	lr

08000da8 <__aeabi_d2lz>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	2200      	movs	r2, #0
 8000dac:	2300      	movs	r3, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	460d      	mov	r5, r1
 8000db2:	f7ff febb 	bl	8000b2c <__aeabi_dcmplt>
 8000db6:	b928      	cbnz	r0, 8000dc4 <__aeabi_d2lz+0x1c>
 8000db8:	4620      	mov	r0, r4
 8000dba:	4629      	mov	r1, r5
 8000dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc0:	f000 b80a 	b.w	8000dd8 <__aeabi_d2ulz>
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dca:	f000 f805 	bl	8000dd8 <__aeabi_d2ulz>
 8000dce:	4240      	negs	r0, r0
 8000dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd4:	bd38      	pop	{r3, r4, r5, pc}
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_d2ulz>:
 8000dd8:	b5d0      	push	{r4, r6, r7, lr}
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__aeabi_d2ulz+0x34>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4606      	mov	r6, r0
 8000de0:	460f      	mov	r7, r1
 8000de2:	f7ff fc31 	bl	8000648 <__aeabi_dmul>
 8000de6:	f7ff ff07 	bl	8000bf8 <__aeabi_d2uiz>
 8000dea:	4604      	mov	r4, r0
 8000dec:	f7ff fbb2 	bl	8000554 <__aeabi_ui2d>
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <__aeabi_d2ulz+0x38>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f7ff fc28 	bl	8000648 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	4639      	mov	r1, r7
 8000e00:	f7ff fa6a 	bl	80002d8 <__aeabi_dsub>
 8000e04:	f7ff fef8 	bl	8000bf8 <__aeabi_d2uiz>
 8000e08:	4621      	mov	r1, r4
 8000e0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e0c:	3df00000 	.word	0x3df00000
 8000e10:	41f00000 	.word	0x41f00000

08000e14 <__udivmoddi4>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	9e08      	ldr	r6, [sp, #32]
 8000e1a:	460d      	mov	r5, r1
 8000e1c:	4604      	mov	r4, r0
 8000e1e:	460f      	mov	r7, r1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d14a      	bne.n	8000eba <__udivmoddi4+0xa6>
 8000e24:	428a      	cmp	r2, r1
 8000e26:	4694      	mov	ip, r2
 8000e28:	d965      	bls.n	8000ef6 <__udivmoddi4+0xe2>
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	b143      	cbz	r3, 8000e42 <__udivmoddi4+0x2e>
 8000e30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e34:	f1c3 0220 	rsb	r2, r3, #32
 8000e38:	409f      	lsls	r7, r3
 8000e3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3e:	4317      	orrs	r7, r2
 8000e40:	409c      	lsls	r4, r3
 8000e42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e46:	fa1f f58c 	uxth.w	r5, ip
 8000e4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e4e:	0c22      	lsrs	r2, r4, #16
 8000e50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e58:	fb01 f005 	mul.w	r0, r1, r5
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	d90a      	bls.n	8000e76 <__udivmoddi4+0x62>
 8000e60:	eb1c 0202 	adds.w	r2, ip, r2
 8000e64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e68:	f080 811c 	bcs.w	80010a4 <__udivmoddi4+0x290>
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	f240 8119 	bls.w	80010a4 <__udivmoddi4+0x290>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4462      	add	r2, ip
 8000e76:	1a12      	subs	r2, r2, r0
 8000e78:	b2a4      	uxth	r4, r4
 8000e7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e86:	fb00 f505 	mul.w	r5, r0, r5
 8000e8a:	42a5      	cmp	r5, r4
 8000e8c:	d90a      	bls.n	8000ea4 <__udivmoddi4+0x90>
 8000e8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e96:	f080 8107 	bcs.w	80010a8 <__udivmoddi4+0x294>
 8000e9a:	42a5      	cmp	r5, r4
 8000e9c:	f240 8104 	bls.w	80010a8 <__udivmoddi4+0x294>
 8000ea0:	4464      	add	r4, ip
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	2100      	movs	r1, #0
 8000eac:	b11e      	cbz	r6, 8000eb6 <__udivmoddi4+0xa2>
 8000eae:	40dc      	lsrs	r4, r3
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0xbc>
 8000ebe:	2e00      	cmp	r6, #0
 8000ec0:	f000 80ed 	beq.w	800109e <__udivmoddi4+0x28a>
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed0:	fab3 f183 	clz	r1, r3
 8000ed4:	2900      	cmp	r1, #0
 8000ed6:	d149      	bne.n	8000f6c <__udivmoddi4+0x158>
 8000ed8:	42ab      	cmp	r3, r5
 8000eda:	d302      	bcc.n	8000ee2 <__udivmoddi4+0xce>
 8000edc:	4282      	cmp	r2, r0
 8000ede:	f200 80f8 	bhi.w	80010d2 <__udivmoddi4+0x2be>
 8000ee2:	1a84      	subs	r4, r0, r2
 8000ee4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ee8:	2001      	movs	r0, #1
 8000eea:	4617      	mov	r7, r2
 8000eec:	2e00      	cmp	r6, #0
 8000eee:	d0e2      	beq.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ef4:	e7df      	b.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef6:	b902      	cbnz	r2, 8000efa <__udivmoddi4+0xe6>
 8000ef8:	deff      	udf	#255	; 0xff
 8000efa:	fab2 f382 	clz	r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f040 8090 	bne.w	8001024 <__udivmoddi4+0x210>
 8000f04:	1a8a      	subs	r2, r1, r2
 8000f06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f0a:	fa1f fe8c 	uxth.w	lr, ip
 8000f0e:	2101      	movs	r1, #1
 8000f10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f14:	fb07 2015 	mls	r0, r7, r5, r2
 8000f18:	0c22      	lsrs	r2, r4, #16
 8000f1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f1e:	fb0e f005 	mul.w	r0, lr, r5
 8000f22:	4290      	cmp	r0, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x124>
 8000f26:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x122>
 8000f30:	4290      	cmp	r0, r2
 8000f32:	f200 80cb 	bhi.w	80010cc <__udivmoddi4+0x2b8>
 8000f36:	4645      	mov	r5, r8
 8000f38:	1a12      	subs	r2, r2, r0
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f40:	fb07 2210 	mls	r2, r7, r0, r2
 8000f44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f48:	fb0e fe00 	mul.w	lr, lr, r0
 8000f4c:	45a6      	cmp	lr, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x14e>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f58:	d202      	bcs.n	8000f60 <__udivmoddi4+0x14c>
 8000f5a:	45a6      	cmp	lr, r4
 8000f5c:	f200 80bb 	bhi.w	80010d6 <__udivmoddi4+0x2c2>
 8000f60:	4610      	mov	r0, r2
 8000f62:	eba4 040e 	sub.w	r4, r4, lr
 8000f66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f6a:	e79f      	b.n	8000eac <__udivmoddi4+0x98>
 8000f6c:	f1c1 0720 	rsb	r7, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f82:	40fd      	lsrs	r5, r7
 8000f84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f88:	4323      	orrs	r3, r4
 8000f8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f8e:	fa1f fe8c 	uxth.w	lr, ip
 8000f92:	fb09 5518 	mls	r5, r9, r8, r5
 8000f96:	0c1c      	lsrs	r4, r3, #16
 8000f98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000fa0:	42a5      	cmp	r5, r4
 8000fa2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fa6:	fa00 f001 	lsl.w	r0, r0, r1
 8000faa:	d90b      	bls.n	8000fc4 <__udivmoddi4+0x1b0>
 8000fac:	eb1c 0404 	adds.w	r4, ip, r4
 8000fb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fb4:	f080 8088 	bcs.w	80010c8 <__udivmoddi4+0x2b4>
 8000fb8:	42a5      	cmp	r5, r4
 8000fba:	f240 8085 	bls.w	80010c8 <__udivmoddi4+0x2b4>
 8000fbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000fc2:	4464      	add	r4, ip
 8000fc4:	1b64      	subs	r4, r4, r5
 8000fc6:	b29d      	uxth	r5, r3
 8000fc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000fd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fd8:	45a6      	cmp	lr, r4
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x1da>
 8000fdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fe4:	d26c      	bcs.n	80010c0 <__udivmoddi4+0x2ac>
 8000fe6:	45a6      	cmp	lr, r4
 8000fe8:	d96a      	bls.n	80010c0 <__udivmoddi4+0x2ac>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	4464      	add	r4, ip
 8000fee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ff2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ff6:	eba4 040e 	sub.w	r4, r4, lr
 8000ffa:	42ac      	cmp	r4, r5
 8000ffc:	46c8      	mov	r8, r9
 8000ffe:	46ae      	mov	lr, r5
 8001000:	d356      	bcc.n	80010b0 <__udivmoddi4+0x29c>
 8001002:	d053      	beq.n	80010ac <__udivmoddi4+0x298>
 8001004:	b156      	cbz	r6, 800101c <__udivmoddi4+0x208>
 8001006:	ebb0 0208 	subs.w	r2, r0, r8
 800100a:	eb64 040e 	sbc.w	r4, r4, lr
 800100e:	fa04 f707 	lsl.w	r7, r4, r7
 8001012:	40ca      	lsrs	r2, r1
 8001014:	40cc      	lsrs	r4, r1
 8001016:	4317      	orrs	r7, r2
 8001018:	e9c6 7400 	strd	r7, r4, [r6]
 800101c:	4618      	mov	r0, r3
 800101e:	2100      	movs	r1, #0
 8001020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001024:	f1c3 0120 	rsb	r1, r3, #32
 8001028:	fa02 fc03 	lsl.w	ip, r2, r3
 800102c:	fa20 f201 	lsr.w	r2, r0, r1
 8001030:	fa25 f101 	lsr.w	r1, r5, r1
 8001034:	409d      	lsls	r5, r3
 8001036:	432a      	orrs	r2, r5
 8001038:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103c:	fa1f fe8c 	uxth.w	lr, ip
 8001040:	fbb1 f0f7 	udiv	r0, r1, r7
 8001044:	fb07 1510 	mls	r5, r7, r0, r1
 8001048:	0c11      	lsrs	r1, r2, #16
 800104a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800104e:	fb00 f50e 	mul.w	r5, r0, lr
 8001052:	428d      	cmp	r5, r1
 8001054:	fa04 f403 	lsl.w	r4, r4, r3
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x258>
 800105a:	eb1c 0101 	adds.w	r1, ip, r1
 800105e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001062:	d22f      	bcs.n	80010c4 <__udivmoddi4+0x2b0>
 8001064:	428d      	cmp	r5, r1
 8001066:	d92d      	bls.n	80010c4 <__udivmoddi4+0x2b0>
 8001068:	3802      	subs	r0, #2
 800106a:	4461      	add	r1, ip
 800106c:	1b49      	subs	r1, r1, r5
 800106e:	b292      	uxth	r2, r2
 8001070:	fbb1 f5f7 	udiv	r5, r1, r7
 8001074:	fb07 1115 	mls	r1, r7, r5, r1
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	fb05 f10e 	mul.w	r1, r5, lr
 8001080:	4291      	cmp	r1, r2
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x282>
 8001084:	eb1c 0202 	adds.w	r2, ip, r2
 8001088:	f105 38ff 	add.w	r8, r5, #4294967295
 800108c:	d216      	bcs.n	80010bc <__udivmoddi4+0x2a8>
 800108e:	4291      	cmp	r1, r2
 8001090:	d914      	bls.n	80010bc <__udivmoddi4+0x2a8>
 8001092:	3d02      	subs	r5, #2
 8001094:	4462      	add	r2, ip
 8001096:	1a52      	subs	r2, r2, r1
 8001098:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800109c:	e738      	b.n	8000f10 <__udivmoddi4+0xfc>
 800109e:	4631      	mov	r1, r6
 80010a0:	4630      	mov	r0, r6
 80010a2:	e708      	b.n	8000eb6 <__udivmoddi4+0xa2>
 80010a4:	4639      	mov	r1, r7
 80010a6:	e6e6      	b.n	8000e76 <__udivmoddi4+0x62>
 80010a8:	4610      	mov	r0, r2
 80010aa:	e6fb      	b.n	8000ea4 <__udivmoddi4+0x90>
 80010ac:	4548      	cmp	r0, r9
 80010ae:	d2a9      	bcs.n	8001004 <__udivmoddi4+0x1f0>
 80010b0:	ebb9 0802 	subs.w	r8, r9, r2
 80010b4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010b8:	3b01      	subs	r3, #1
 80010ba:	e7a3      	b.n	8001004 <__udivmoddi4+0x1f0>
 80010bc:	4645      	mov	r5, r8
 80010be:	e7ea      	b.n	8001096 <__udivmoddi4+0x282>
 80010c0:	462b      	mov	r3, r5
 80010c2:	e794      	b.n	8000fee <__udivmoddi4+0x1da>
 80010c4:	4640      	mov	r0, r8
 80010c6:	e7d1      	b.n	800106c <__udivmoddi4+0x258>
 80010c8:	46d0      	mov	r8, sl
 80010ca:	e77b      	b.n	8000fc4 <__udivmoddi4+0x1b0>
 80010cc:	3d02      	subs	r5, #2
 80010ce:	4462      	add	r2, ip
 80010d0:	e732      	b.n	8000f38 <__udivmoddi4+0x124>
 80010d2:	4608      	mov	r0, r1
 80010d4:	e70a      	b.n	8000eec <__udivmoddi4+0xd8>
 80010d6:	4464      	add	r4, ip
 80010d8:	3802      	subs	r0, #2
 80010da:	e742      	b.n	8000f62 <__udivmoddi4+0x14e>

080010dc <__aeabi_idiv0>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <PIDController_Init>:
#include "Controller/PID.h"
#include <stdint.h>

void PIDController_Init(PIDController *pid)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	// Clear Anti-windup flag
	pid->antiWindup = false;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// Clear controller variables
	pid->integrator = 0.0f;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
	pid->prev_error = 0.0f;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	631a      	str	r2, [r3, #48]	; 0x30
	pid->differentiator  = 0.0f;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	635a      	str	r2, [r3, #52]	; 0x34
	pid->prev_measurement = 0.0f;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	63da      	str	r2, [r3, #60]	; 0x3c

	// Clear output
	pid->out = 0.0f;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	641a      	str	r2, [r3, #64]	; 0x40

	// Calculate low-pass filter parameters
	pid->tau = 5 * pid->T;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	edd3 7a03 	vldr	s15, [r3, #12]
 800111e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001122:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	edc3 7a05 	vstr	s15, [r3, #20]
	pid->alpha = ( 2*pid->T ) / ( 2*pid->tau + pid->T );
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001132:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	edd3 7a05 	vldr	s15, [r3, #20]
 800113c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	edd3 7a03 	vldr	s15, [r3, #12]
 8001146:	ee37 7a27 	vadd.f32	s14, s14, s15
 800114a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	edc3 7a06 	vstr	s15, [r3, #24]

	// Reset lastTick
	pid->lastTick = 0;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float reference, float measurement, bool enable_integration)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	ed87 0a02 	vstr	s0, [r7, #8]
 8001174:	edc7 0a01 	vstr	s1, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	70fb      	strb	r3, [r7, #3]
	// Check if enough time has passed for the T sample time
	bool run = false;
 800117c:	2300      	movs	r3, #0
 800117e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t currentTick = xTaskGetTickCount();
 8001182:	f012 f8cb 	bl	801331c <xTaskGetTickCount>
 8001186:	4603      	mov	r3, r0
 8001188:	623b      	str	r3, [r7, #32]
	// First run after initialization
	if (pid->lastTick == 0)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d106      	bne.n	80011a0 <PIDController_Update+0x38>
	{
		run = true;
 8001192:	2301      	movs	r3, #1
 8001194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pid->lastTick = currentTick;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6a3a      	ldr	r2, [r7, #32]
 800119c:	611a      	str	r2, [r3, #16]
 800119e:	e01a      	b.n	80011d6 <PIDController_Update+0x6e>
	}
	// If enough time has passed (Tick's unit is ms, while T's unit is s)
	else if (currentTick - pid->lastTick >= (pid->T * 1000))
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	6a3a      	ldr	r2, [r7, #32]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80011b6:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001364 <PIDController_Update+0x1fc>
 80011ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c6:	db03      	blt.n	80011d0 <PIDController_Update+0x68>
		run = true;
 80011c8:	2301      	movs	r3, #1
 80011ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011ce:	e002      	b.n	80011d6 <PIDController_Update+0x6e>
	// If it is too early
	else
		run = false;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	pid->lastTick = currentTick;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6a3a      	ldr	r2, [r7, #32]
 80011da:	611a      	str	r2, [r3, #16]

	// PID algorithm
	if (run)
 80011dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80ba 	beq.w	800135a <PIDController_Update+0x1f2>
	{
		//Error signal
		float error = reference - measurement;
 80011e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80011ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f2:	edc7 7a07 	vstr	s15, [r7, #28]

		// Proportional
		float proportional_result = pid->Kp * error;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001204:	edc7 7a06 	vstr	s15, [r7, #24]

		// Integral with Anti-windup
		if (!pid->antiWindup && enable_integration)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800120e:	f083 0301 	eor.w	r3, r3, #1
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	d01c      	beq.n	8001252 <PIDController_Update+0xea>
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d019      	beq.n	8001252 <PIDController_Update+0xea>
		{
			pid->integrator = pid->integrator + error * pid->T;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	edd3 6a03 	vldr	s13, [r3, #12]
 800122a:	edd7 7a07 	vldr	s15, [r7, #28]
 800122e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			pid->integrator_result = pid->Ki * pid->integrator;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		}

		// Derivative
		pid->differentiator = -(measurement - pid->prev_measurement) / pid->T;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001258:	ed97 7a01 	vldr	s14, [r7, #4]
 800125c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001260:	eef1 6a67 	vneg.f32	s13, s15
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	ed93 7a03 	vldr	s14, [r3, #12]
 800126a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		pid->differentiator_result = pid->Kd * pid->differentiator;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	ed93 7a02 	vldr	s14, [r3, #8]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		// Store previous measurement for later use
		pid->prev_measurement = measurement;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	63da      	str	r2, [r3, #60]	; 0x3c
		// Store previous measurement for later use
		//pid->prev_measurement = measurement;


		// Compute output
		pid->out = proportional_result + pid->integrator_result + pid->differentiator_result;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001296:	edd7 7a06 	vldr	s15, [r7, #24]
 800129a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80012a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		float pre_saturation_output = pid->out;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	617b      	str	r3, [r7, #20]

		// Saturating (clamping) the output
		if (pid->out > pid->limMax)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	edd3 7a08 	vldr	s15, [r3, #32]
 80012c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c8:	dd04      	ble.n	80012d4 <PIDController_Update+0x16c>
			pid->out = pid->limMax;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6a1a      	ldr	r2, [r3, #32]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	641a      	str	r2, [r3, #64]	; 0x40
 80012d2:	e00e      	b.n	80012f2 <PIDController_Update+0x18a>
		else if (pid->out < pid->limMin)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	edd3 7a07 	vldr	s15, [r3, #28]
 80012e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e8:	d503      	bpl.n	80012f2 <PIDController_Update+0x18a>
			pid->out = pid->limMin;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	69da      	ldr	r2, [r3, #28]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40

		// Anti-windup check
		// If clamping had an effect...
		if (pre_saturation_output != pid->out
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80012f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80012fc:	eeb4 7a67 	vcmp.f32	s14, s15
 8001300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001304:	d020      	beq.n	8001348 <PIDController_Update+0x1e0>
				// ...and if the integrator is trying to make saturation worse
				&& ((pre_saturation_output > 0 && error > 0) || (pre_saturation_output < 0 && error < 0)))
 8001306:	edd7 7a05 	vldr	s15, [r7, #20]
 800130a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001312:	dd06      	ble.n	8001322 <PIDController_Update+0x1ba>
 8001314:	edd7 7a07 	vldr	s15, [r7, #28]
 8001318:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001320:	dc0d      	bgt.n	800133e <PIDController_Update+0x1d6>
 8001322:	edd7 7a05 	vldr	s15, [r7, #20]
 8001326:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132e:	d50b      	bpl.n	8001348 <PIDController_Update+0x1e0>
 8001330:	edd7 7a07 	vldr	s15, [r7, #28]
 8001334:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133c:	d504      	bpl.n	8001348 <PIDController_Update+0x1e0>
			pid->antiWindup = true;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001346:	e003      	b.n	8001350 <PIDController_Update+0x1e8>
		else
			pid->antiWindup = false;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24


		return 0;
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	ee07 3a90 	vmov	s15, r3
 8001358:	e7ff      	b.n	800135a <PIDController_Update+0x1f2>
	}
}
 800135a:	eeb0 0a67 	vmov.f32	s0, s15
 800135e:	3728      	adds	r7, #40	; 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	447a0000 	.word	0x447a0000

08001368 <DoublePIDController_Init>:

void DoublePIDController_Init(DoublePIDController *pid)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	// Clear Anti-windup flag
	pid->outer.antiWindup = false;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	pid->inner.antiWindup = false;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// Clear controller variables
	pid->outer.integrator = 0.0f;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	66da      	str	r2, [r3, #108]	; 0x6c
	pid->inner.integrator = 0.0f;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
	pid->outer.differentiator  = 0.0f;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	679a      	str	r2, [r3, #120]	; 0x78
	pid->inner.differentiator  = 0.0f;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	635a      	str	r2, [r3, #52]	; 0x34

	pid->outer.prev_measurement = 0.0f;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	pid->inner.prev_measurement = 0.0f;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	63da      	str	r2, [r3, #60]	; 0x3c

	// Clear output
	pid->outer.out = 0.0f;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	pid->inner.out = 0.0f;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	641a      	str	r2, [r3, #64]	; 0x40
	// Calculate low-pass filter parameters
	//pid->tau = 5 * pid->T;
	//pid->alpha = ( 2*pid->T ) / ( 2*pid->tau + pid->T );

	// Reset lastTick
	pid->outer.lastTick = 0;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	655a      	str	r2, [r3, #84]	; 0x54
	pid->inner.lastTick = 0;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <DoublePIDController_Update>:

float DoublePIDController_Update(DoublePIDController *pid, float outer_reference, float outer_measurement, float inner_measurement, bool enable_integration)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	; 0x38
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6178      	str	r0, [r7, #20]
 80013e4:	ed87 0a04 	vstr	s0, [r7, #16]
 80013e8:	edc7 0a03 	vstr	s1, [r7, #12]
 80013ec:	ed87 1a02 	vstr	s2, [r7, #8]
 80013f0:	460b      	mov	r3, r1
 80013f2:	71fb      	strb	r3, [r7, #7]
	// Check if enough time has passed for the T sample time
	// I use the outer PID's properties for that
	bool run = false;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t currentTick = xTaskGetTickCount();
 80013fa:	f011 ff8f 	bl	801331c <xTaskGetTickCount>
 80013fe:	4603      	mov	r3, r0
 8001400:	633b      	str	r3, [r7, #48]	; 0x30
	// First run after initialization
	if (pid->outer.lastTick == 0)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001406:	2b00      	cmp	r3, #0
 8001408:	d106      	bne.n	8001418 <DoublePIDController_Update+0x3c>
	{
		run = true;
 800140a:	2301      	movs	r3, #1
 800140c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		pid->outer.lastTick = currentTick;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001414:	655a      	str	r2, [r3, #84]	; 0x54
 8001416:	e01a      	b.n	800144e <DoublePIDController_Update+0x72>
	}
	// If enough time has passed (Tick's unit is ms, while T's unit is s)
	else if (currentTick - pid->outer.lastTick >= (pid->outer.T * 1000))
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800141c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800142e:	eddf 6ac1 	vldr	s13, [pc, #772]	; 8001734 <DoublePIDController_Update+0x358>
 8001432:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001436:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143e:	db03      	blt.n	8001448 <DoublePIDController_Update+0x6c>
		run = true;
 8001440:	2301      	movs	r3, #1
 8001442:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001446:	e002      	b.n	800144e <DoublePIDController_Update+0x72>
	// If it is too early
	else
		run = false;
 8001448:	2300      	movs	r3, #0
 800144a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	pid->outer.lastTick = currentTick;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001452:	655a      	str	r2, [r3, #84]	; 0x54

	// PID algorithm
	if (run)
 8001454:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 8166 	beq.w	800172a <DoublePIDController_Update+0x34e>
	{
		// Outer PID Controller
		//Error signal
		float outer_error = outer_reference - outer_measurement;
 800145e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001462:	edd7 7a03 	vldr	s15, [r7, #12]
 8001466:	ee77 7a67 	vsub.f32	s15, s14, s15
 800146a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Proportional
		float outer_proportional_result = pid->outer.Kp * outer_error;
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001474:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Integral with Anti-windup
		if (!pid->outer.antiWindup && enable_integration)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001486:	f083 0301 	eor.w	r3, r3, #1
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d01c      	beq.n	80014ca <DoublePIDController_Update+0xee>
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d019      	beq.n	80014ca <DoublePIDController_Update+0xee>
		{
			pid->outer.integrator = pid->outer.integrator + outer_error * pid->outer.T;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 80014a2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80014a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			pid->outer.integrator_result = pid->outer.Ki * pid->outer.integrator;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80014c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		}

		// Derivative
		pid->outer.differentiator = -inner_measurement;
 80014ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80014ce:	eef1 7a67 	vneg.f32	s15, s15
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		pid->outer.differentiator_result = pid->outer.Kd * pid->outer.differentiator;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80014e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
		// Derivative with low-pass filter
		//pid->outer.differentiator = 0.4f * pid->outer.differentiator + 0.6f * (-inner_measurement);
		//pid->outer.differentiator_result = pid->outer.Kd * pid->outer.differentiator;

		// Compute output
		pid->outer.out = outer_proportional_result + pid->outer.integrator_result + pid->outer.differentiator_result;
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80014f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80014f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		float outer_pre_saturation_output = pid->outer.out;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001512:	627b      	str	r3, [r7, #36]	; 0x24

		// Saturating (clamping) the output
		if (pid->outer.out > pid->outer.limMax)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001520:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001528:	dd05      	ble.n	8001536 <DoublePIDController_Update+0x15a>
			pid->outer.out = pid->outer.limMax;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001534:	e00f      	b.n	8001556 <DoublePIDController_Update+0x17a>
		else if (pid->outer.out < pid->outer.limMin)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154a:	d504      	bpl.n	8001556 <DoublePIDController_Update+0x17a>
			pid->outer.out = pid->outer.limMin;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

		// Anti-windup check
		// If clamping had an effect...
		if (outer_pre_saturation_output != pid->outer.out
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800155c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001560:	eeb4 7a67 	vcmp.f32	s14, s15
 8001564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001568:	d020      	beq.n	80015ac <DoublePIDController_Update+0x1d0>
				// ...and if the integrator is trying to make saturation worse
				&& ((outer_pre_saturation_output > 0 && outer_error > 0) || (outer_pre_saturation_output < 0 && outer_error < 0)))
 800156a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800156e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001576:	dd06      	ble.n	8001586 <DoublePIDController_Update+0x1aa>
 8001578:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800157c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001584:	dc0d      	bgt.n	80015a2 <DoublePIDController_Update+0x1c6>
 8001586:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800158a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001592:	d50b      	bpl.n	80015ac <DoublePIDController_Update+0x1d0>
 8001594:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001598:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800159c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a0:	d504      	bpl.n	80015ac <DoublePIDController_Update+0x1d0>
			pid->outer.antiWindup = true;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80015aa:	e003      	b.n	80015b4 <DoublePIDController_Update+0x1d8>
		else
			pid->outer.antiWindup = false;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68



		// Inner PID Controller
		//Error signal
		float inner_error = pid->outer.out - inner_measurement;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80015ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80015be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c2:	edc7 7a08 	vstr	s15, [r7, #32]

		// Proportional
		float inner_proportional_result = pid->inner.Kp * inner_error;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	edd3 7a00 	vldr	s15, [r3]
 80015cc:	ed97 7a08 	vldr	s14, [r7, #32]
 80015d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d4:	edc7 7a07 	vstr	s15, [r7, #28]

		// Integral with Anti-windup
		if (!pid->inner.antiWindup && enable_integration)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015de:	f083 0301 	eor.w	r3, r3, #1
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d01c      	beq.n	8001622 <DoublePIDController_Update+0x246>
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d019      	beq.n	8001622 <DoublePIDController_Update+0x246>
		{
			pid->inner.integrator = pid->inner.integrator + inner_error * pid->inner.T;
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	edd3 6a03 	vldr	s13, [r3, #12]
 80015fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80015fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			pid->inner.integrator_result = pid->inner.Ki * pid->inner.integrator;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		}

		// Derivative
		pid->inner.differentiator =-(inner_measurement - pid->inner.prev_measurement) / pid->inner.T;
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001628:	ed97 7a02 	vldr	s14, [r7, #8]
 800162c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001630:	eef1 6a67 	vneg.f32	s13, s15
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	ed93 7a03 	vldr	s14, [r3, #12]
 800163a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		pid->inner.differentiator_result = pid->inner.Kd * pid->inner.differentiator;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	ed93 7a02 	vldr	s14, [r3, #8]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		// Store previous measurement for later use
		pid->inner.prev_measurement = inner_measurement;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	63da      	str	r2, [r3, #60]	; 0x3c
		//pid->inner.differentiator_result = pid->inner.Kd * pid->inner.differentiator;
		// Store previous measurement for later use
		//pid->inner.prev_measurement = inner_measurement;

		// Compute output
		pid->inner.out = inner_proportional_result + pid->inner.integrator_result + pid->inner.differentiator_result;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001666:	edd7 7a07 	vldr	s15, [r7, #28]
 800166a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		float inner_pre_saturation_output = pid->inner.out;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	61bb      	str	r3, [r7, #24]

		// Saturating (clamping) the output
		if (pid->inner.out > pid->inner.limMax)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001690:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001698:	dd04      	ble.n	80016a4 <DoublePIDController_Update+0x2c8>
			pid->inner.out = pid->inner.limMax;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	6a1a      	ldr	r2, [r3, #32]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	641a      	str	r2, [r3, #64]	; 0x40
 80016a2:	e00e      	b.n	80016c2 <DoublePIDController_Update+0x2e6>
		else if (pid->inner.out < pid->inner.limMin)
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	edd3 7a07 	vldr	s15, [r3, #28]
 80016b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b8:	d503      	bpl.n	80016c2 <DoublePIDController_Update+0x2e6>
			pid->inner.out = pid->inner.limMin;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	69da      	ldr	r2, [r3, #28]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40

		// Anti-windup check
		// If clamping had an effect...
		if (inner_pre_saturation_output != pid->inner.out
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80016c8:	ed97 7a06 	vldr	s14, [r7, #24]
 80016cc:	eeb4 7a67 	vcmp.f32	s14, s15
 80016d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d4:	d020      	beq.n	8001718 <DoublePIDController_Update+0x33c>
				// ...and if the integrator is trying to make saturation worse
				&& ((inner_pre_saturation_output > 0 && inner_error > 0) || (inner_pre_saturation_output < 0 && inner_error < 0)))
 80016d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e2:	dd06      	ble.n	80016f2 <DoublePIDController_Update+0x316>
 80016e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80016e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f0:	dc0d      	bgt.n	800170e <DoublePIDController_Update+0x332>
 80016f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80016f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	d50b      	bpl.n	8001718 <DoublePIDController_Update+0x33c>
 8001700:	edd7 7a08 	vldr	s15, [r7, #32]
 8001704:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170c:	d504      	bpl.n	8001718 <DoublePIDController_Update+0x33c>
			pid->inner.antiWindup = true;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001716:	e003      	b.n	8001720 <DoublePIDController_Update+0x344>
		else
			pid->inner.antiWindup = false;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24


		return 0;
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	e7ff      	b.n	800172a <DoublePIDController_Update+0x34e>
	}
}
 800172a:	eeb0 0a67 	vmov.f32	s0, s15
 800172e:	3738      	adds	r7, #56	; 0x38
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	447a0000 	.word	0x447a0000

08001738 <FloatToUint8s>:

volatile uint8_t Spi1Buffer[64] = { 0 };
volatile uint8_t Spi1ReceivedData[64] = { 0 };

void FloatToUint8s(float* src, uint8_t* array, int position)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
	memcpy(array+position, src, sizeof(float));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	4413      	add	r3, r2
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	601a      	str	r2, [r3, #0]
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <FloatFromUint8s>:

void FloatFromUint8s(uint8_t* array, int position, float* dest)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  memcpy(dest, array+position, sizeof(float));
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	4413      	add	r3, r2
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	601a      	str	r2, [r3, #0]
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <Uint16ToUint8s>:

void Uint16ToUint8s(uint16_t* src, uint8_t* array, int position)
{
 8001782:	b480      	push	{r7}
 8001784:	b085      	sub	sp, #20
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
	memcpy(array+position, src, sizeof(uint16_t));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	4413      	add	r3, r2
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	8812      	ldrh	r2, [r2, #0]
 8001798:	b292      	uxth	r2, r2
 800179a:	801a      	strh	r2, [r3, #0]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <Int16ToUint8s>:

void Int16ToUint8s(int16_t* src, uint8_t* array, int position)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
	memcpy(array+position, src, sizeof(int16_t));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	4413      	add	r3, r2
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	8812      	ldrh	r2, [r2, #0]
 80017be:	b292      	uxth	r2, r2
 80017c0:	801a      	strh	r2, [r3, #0]
}
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <LPF_Init>:
#include "LPF.h"

void LPF_Init(LPF *lpf)
{
 80017ce:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	lpf->prevU = 0.0;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
	lpf->prevY = 0.0;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	605a      	str	r2, [r3, #4]

	lpf->tau = 1.0 / lpf->f_cutoff;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	ed93 7a03 	vldr	s14, [r3, #12]
 80017ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	edc3 7a04 	vstr	s15, [r3, #16]

	lpf->alpha = lpf->T / (2.0 * lpf->tau + lpf->T);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fec9 	bl	8000598 <__aeabi_f2d>
 8001806:	4604      	mov	r4, r0
 8001808:	460d      	mov	r5, r1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fec2 	bl	8000598 <__aeabi_f2d>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	f7fe fd60 	bl	80002dc <__adddf3>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4690      	mov	r8, r2
 8001822:	4699      	mov	r9, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe feb5 	bl	8000598 <__aeabi_f2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4640      	mov	r0, r8
 8001834:	4649      	mov	r1, r9
 8001836:	f7fe fd51 	bl	80002dc <__adddf3>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4620      	mov	r0, r4
 8001840:	4629      	mov	r1, r5
 8001842:	f7ff f82b 	bl	800089c <__aeabi_ddiv>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff f9f3 	bl	8000c38 <__aeabi_d2f>
 8001852:	4602      	mov	r2, r0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	615a      	str	r2, [r3, #20]
	lpf->beta = (2.0 * lpf->tau - lpf->T) / (2.0 * lpf->tau + lpf->T);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe9b 	bl	8000598 <__aeabi_f2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	f7fe fd39 	bl	80002dc <__adddf3>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4614      	mov	r4, r2
 8001870:	461d      	mov	r5, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe8e 	bl	8000598 <__aeabi_f2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4620      	mov	r0, r4
 8001882:	4629      	mov	r1, r5
 8001884:	f7fe fd28 	bl	80002d8 <__aeabi_dsub>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4614      	mov	r4, r2
 800188e:	461d      	mov	r5, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe7f 	bl	8000598 <__aeabi_f2d>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	f7fe fd1d 	bl	80002dc <__adddf3>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4690      	mov	r8, r2
 80018a8:	4699      	mov	r9, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe72 	bl	8000598 <__aeabi_f2d>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4640      	mov	r0, r8
 80018ba:	4649      	mov	r1, r9
 80018bc:	f7fe fd0e 	bl	80002dc <__adddf3>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4620      	mov	r0, r4
 80018c6:	4629      	mov	r1, r5
 80018c8:	f7fe ffe8 	bl	800089c <__aeabi_ddiv>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff f9b0 	bl	8000c38 <__aeabi_d2f>
 80018d8:	4602      	mov	r2, r0
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	619a      	str	r2, [r3, #24]
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080018e8 <LPF_Calculate>:

float LPF_Calculate(LPF *lpf, float U)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	ed87 0a00 	vstr	s0, [r7]
	float Y = lpf->alpha * (U + lpf->prevU) + lpf->beta * lpf->prevY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	ed93 7a05 	vldr	s14, [r3, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	edd3 6a00 	vldr	s13, [r3]
 8001900:	edd7 7a00 	vldr	s15, [r7]
 8001904:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001908:	ee27 7a27 	vmul.f32	s14, s14, s15
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	edd3 7a01 	vldr	s15, [r3, #4]
 8001918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800191c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001920:	edc7 7a03 	vstr	s15, [r7, #12]

	lpf->prevU = U;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	601a      	str	r2, [r3, #0]
	lpf->prevY = Y;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	605a      	str	r2, [r3, #4]

	return Y;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	ee07 3a90 	vmov	s15, r3
}
 8001936:	eeb0 0a67 	vmov.f32	s0, s15
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <TaskController>:
extern osMutexId ImuMutexHandle;
extern osMutexId RemoteDataMutexHandle;
extern osMutexId ControllerMutexHandle;

void TaskController(void const *argument)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 800194c:	23c8      	movs	r3, #200	; 0xc8
 800194e:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8001950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fbb2 f3f3 	udiv	r3, r2, r3
 800195a:	613b      	str	r3, [r7, #16]

	// Roll
	// Outer
	DPID_Roll.outer.Kp = 8;
 800195c:	4baf      	ldr	r3, [pc, #700]	; (8001c1c <TaskController+0x2d8>)
 800195e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8001962:	645a      	str	r2, [r3, #68]	; 0x44
	DPID_Roll.outer.Ki = 0.5;
 8001964:	4bad      	ldr	r3, [pc, #692]	; (8001c1c <TaskController+0x2d8>)
 8001966:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800196a:	649a      	str	r2, [r3, #72]	; 0x48
	DPID_Roll.outer.Kd = 0.15;
 800196c:	4bab      	ldr	r3, [pc, #684]	; (8001c1c <TaskController+0x2d8>)
 800196e:	4aac      	ldr	r2, [pc, #688]	; (8001c20 <TaskController+0x2dc>)
 8001970:	64da      	str	r2, [r3, #76]	; 0x4c
	DPID_Roll.outer.T = 1.0f / xFrequency;
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800197c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001984:	4ba5      	ldr	r3, [pc, #660]	; (8001c1c <TaskController+0x2d8>)
 8001986:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	DPID_Roll.outer.limMin = -50;
 800198a:	4ba4      	ldr	r3, [pc, #656]	; (8001c1c <TaskController+0x2d8>)
 800198c:	4aa5      	ldr	r2, [pc, #660]	; (8001c24 <TaskController+0x2e0>)
 800198e:	661a      	str	r2, [r3, #96]	; 0x60
	DPID_Roll.outer.limMax = 50;
 8001990:	4ba2      	ldr	r3, [pc, #648]	; (8001c1c <TaskController+0x2d8>)
 8001992:	4aa5      	ldr	r2, [pc, #660]	; (8001c28 <TaskController+0x2e4>)
 8001994:	665a      	str	r2, [r3, #100]	; 0x64
	// Inner
	DPID_Roll.inner.Kp = 0.6;
 8001996:	4ba1      	ldr	r3, [pc, #644]	; (8001c1c <TaskController+0x2d8>)
 8001998:	4aa4      	ldr	r2, [pc, #656]	; (8001c2c <TaskController+0x2e8>)
 800199a:	601a      	str	r2, [r3, #0]
	DPID_Roll.inner.Ki = 0;
 800199c:	4b9f      	ldr	r3, [pc, #636]	; (8001c1c <TaskController+0x2d8>)
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	605a      	str	r2, [r3, #4]
	DPID_Roll.inner.Kd = 0.06;
 80019a4:	4b9d      	ldr	r3, [pc, #628]	; (8001c1c <TaskController+0x2d8>)
 80019a6:	4aa2      	ldr	r2, [pc, #648]	; (8001c30 <TaskController+0x2ec>)
 80019a8:	609a      	str	r2, [r3, #8]
	DPID_Roll.inner.T = 1.0f / xFrequency;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019bc:	4b97      	ldr	r3, [pc, #604]	; (8001c1c <TaskController+0x2d8>)
 80019be:	edc3 7a03 	vstr	s15, [r3, #12]
	DPID_Roll.inner.limMin = -500;
 80019c2:	4b96      	ldr	r3, [pc, #600]	; (8001c1c <TaskController+0x2d8>)
 80019c4:	4a9b      	ldr	r2, [pc, #620]	; (8001c34 <TaskController+0x2f0>)
 80019c6:	61da      	str	r2, [r3, #28]
	DPID_Roll.inner.limMax = 500;
 80019c8:	4b94      	ldr	r3, [pc, #592]	; (8001c1c <TaskController+0x2d8>)
 80019ca:	4a9b      	ldr	r2, [pc, #620]	; (8001c38 <TaskController+0x2f4>)
 80019cc:	621a      	str	r2, [r3, #32]
	// Init
	DoublePIDController_Init(&DPID_Roll);
 80019ce:	4893      	ldr	r0, [pc, #588]	; (8001c1c <TaskController+0x2d8>)
 80019d0:	f7ff fcca 	bl	8001368 <DoublePIDController_Init>

	// Pitch
	// Outer
	DPID_Pitch.outer.Kp = 8;
 80019d4:	4b99      	ldr	r3, [pc, #612]	; (8001c3c <TaskController+0x2f8>)
 80019d6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80019da:	645a      	str	r2, [r3, #68]	; 0x44
	DPID_Pitch.outer.Ki = 0.5;
 80019dc:	4b97      	ldr	r3, [pc, #604]	; (8001c3c <TaskController+0x2f8>)
 80019de:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80019e2:	649a      	str	r2, [r3, #72]	; 0x48
	DPID_Pitch.outer.Kd = 0.15;
 80019e4:	4b95      	ldr	r3, [pc, #596]	; (8001c3c <TaskController+0x2f8>)
 80019e6:	4a8e      	ldr	r2, [pc, #568]	; (8001c20 <TaskController+0x2dc>)
 80019e8:	64da      	str	r2, [r3, #76]	; 0x4c
	DPID_Pitch.outer.T = 1.0f / xFrequency;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019fc:	4b8f      	ldr	r3, [pc, #572]	; (8001c3c <TaskController+0x2f8>)
 80019fe:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	DPID_Pitch.outer.limMin = -50;
 8001a02:	4b8e      	ldr	r3, [pc, #568]	; (8001c3c <TaskController+0x2f8>)
 8001a04:	4a87      	ldr	r2, [pc, #540]	; (8001c24 <TaskController+0x2e0>)
 8001a06:	661a      	str	r2, [r3, #96]	; 0x60
	DPID_Pitch.outer.limMax = 50;
 8001a08:	4b8c      	ldr	r3, [pc, #560]	; (8001c3c <TaskController+0x2f8>)
 8001a0a:	4a87      	ldr	r2, [pc, #540]	; (8001c28 <TaskController+0x2e4>)
 8001a0c:	665a      	str	r2, [r3, #100]	; 0x64
	// Inner
	DPID_Pitch.inner.Kp = 0.6;
 8001a0e:	4b8b      	ldr	r3, [pc, #556]	; (8001c3c <TaskController+0x2f8>)
 8001a10:	4a86      	ldr	r2, [pc, #536]	; (8001c2c <TaskController+0x2e8>)
 8001a12:	601a      	str	r2, [r3, #0]
	DPID_Pitch.inner.Ki = 0;
 8001a14:	4b89      	ldr	r3, [pc, #548]	; (8001c3c <TaskController+0x2f8>)
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	605a      	str	r2, [r3, #4]
	DPID_Pitch.inner.Kd = 0.06;
 8001a1c:	4b87      	ldr	r3, [pc, #540]	; (8001c3c <TaskController+0x2f8>)
 8001a1e:	4a84      	ldr	r2, [pc, #528]	; (8001c30 <TaskController+0x2ec>)
 8001a20:	609a      	str	r2, [r3, #8]
	DPID_Pitch.inner.T = 1.0f / xFrequency;
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a34:	4b81      	ldr	r3, [pc, #516]	; (8001c3c <TaskController+0x2f8>)
 8001a36:	edc3 7a03 	vstr	s15, [r3, #12]
	DPID_Pitch.inner.limMin = -500;
 8001a3a:	4b80      	ldr	r3, [pc, #512]	; (8001c3c <TaskController+0x2f8>)
 8001a3c:	4a7d      	ldr	r2, [pc, #500]	; (8001c34 <TaskController+0x2f0>)
 8001a3e:	61da      	str	r2, [r3, #28]
	DPID_Pitch.inner.limMax = 500;
 8001a40:	4b7e      	ldr	r3, [pc, #504]	; (8001c3c <TaskController+0x2f8>)
 8001a42:	4a7d      	ldr	r2, [pc, #500]	; (8001c38 <TaskController+0x2f4>)
 8001a44:	621a      	str	r2, [r3, #32]
	// Init
	DoublePIDController_Init(&DPID_Pitch);
 8001a46:	487d      	ldr	r0, [pc, #500]	; (8001c3c <TaskController+0x2f8>)
 8001a48:	f7ff fc8e 	bl	8001368 <DoublePIDController_Init>

	// Yaw
	PID_Yaw.Kp = 6;
 8001a4c:	4b7c      	ldr	r3, [pc, #496]	; (8001c40 <TaskController+0x2fc>)
 8001a4e:	4a7d      	ldr	r2, [pc, #500]	; (8001c44 <TaskController+0x300>)
 8001a50:	601a      	str	r2, [r3, #0]
	PID_Yaw.Ki = 0;
 8001a52:	4b7b      	ldr	r3, [pc, #492]	; (8001c40 <TaskController+0x2fc>)
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
	PID_Yaw.Kd = 0;
 8001a5a:	4b79      	ldr	r3, [pc, #484]	; (8001c40 <TaskController+0x2fc>)
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
	PID_Yaw.T = 1.0f / xFrequency;
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a74:	4b72      	ldr	r3, [pc, #456]	; (8001c40 <TaskController+0x2fc>)
 8001a76:	edc3 7a03 	vstr	s15, [r3, #12]
	PID_Yaw.limMin = -500;
 8001a7a:	4b71      	ldr	r3, [pc, #452]	; (8001c40 <TaskController+0x2fc>)
 8001a7c:	4a6d      	ldr	r2, [pc, #436]	; (8001c34 <TaskController+0x2f0>)
 8001a7e:	61da      	str	r2, [r3, #28]
	PID_Yaw.limMax = 500;
 8001a80:	4b6f      	ldr	r3, [pc, #444]	; (8001c40 <TaskController+0x2fc>)
 8001a82:	4a6d      	ldr	r2, [pc, #436]	; (8001c38 <TaskController+0x2f4>)
 8001a84:	621a      	str	r2, [r3, #32]
	// Init
	PIDController_Init(&PID_Yaw);
 8001a86:	486e      	ldr	r0, [pc, #440]	; (8001c40 <TaskController+0x2fc>)
 8001a88:	f7ff fb2a 	bl	80010e0 <PIDController_Init>

	// Throttle
	PID_Throttle.Kp = 0;
 8001a8c:	4b6e      	ldr	r3, [pc, #440]	; (8001c48 <TaskController+0x304>)
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
	PID_Throttle.Ki = 0;
 8001a94:	4b6c      	ldr	r3, [pc, #432]	; (8001c48 <TaskController+0x304>)
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	605a      	str	r2, [r3, #4]
	PID_Throttle.Kd = 0;
 8001a9c:	4b6a      	ldr	r3, [pc, #424]	; (8001c48 <TaskController+0x304>)
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
	PID_Throttle.T = 1.0f / xFrequency;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ab6:	4b64      	ldr	r3, [pc, #400]	; (8001c48 <TaskController+0x304>)
 8001ab8:	edc3 7a03 	vstr	s15, [r3, #12]
	PID_Throttle.limMin = 0;
 8001abc:	4b62      	ldr	r3, [pc, #392]	; (8001c48 <TaskController+0x304>)
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	61da      	str	r2, [r3, #28]
	PID_Throttle.limMax = 800;
 8001ac4:	4b60      	ldr	r3, [pc, #384]	; (8001c48 <TaskController+0x304>)
 8001ac6:	4a61      	ldr	r2, [pc, #388]	; (8001c4c <TaskController+0x308>)
 8001ac8:	621a      	str	r2, [r3, #32]
	// Init
	PIDController_Init(&PID_Throttle);
 8001aca:	485f      	ldr	r0, [pc, #380]	; (8001c48 <TaskController+0x304>)
 8001acc:	f7ff fb08 	bl	80010e0 <PIDController_Init>


	xLastWakeTime = xTaskGetTickCount();
 8001ad0:	f011 fc24 	bl	801331c <xTaskGetTickCount>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	60bb      	str	r3, [r7, #8]
	// Infinite loop
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8001ad8:	f107 0308 	add.w	r3, r7, #8
 8001adc:	6939      	ldr	r1, [r7, #16]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f011 fa48 	bl	8012f74 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8001ae4:	f011 fc1a 	bl	801331c <xTaskGetTickCount>
 8001ae8:	60f8      	str	r0, [r7, #12]

		if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK
 8001aea:	4b59      	ldr	r3, [pc, #356]	; (8001c50 <TaskController+0x30c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f04f 31ff 	mov.w	r1, #4294967295
 8001af2:	4618      	mov	r0, r3
 8001af4:	f010 f87a 	bl	8011bec <osMutexWait>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f040 81bb 	bne.w	8001e76 <TaskController+0x532>
				&& osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK
 8001b00:	4b54      	ldr	r3, [pc, #336]	; (8001c54 <TaskController+0x310>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f010 f86f 	bl	8011bec <osMutexWait>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f040 81b0 	bne.w	8001e76 <TaskController+0x532>
				&& osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 8001b16:	4b50      	ldr	r3, [pc, #320]	; (8001c58 <TaskController+0x314>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f010 f864 	bl	8011bec <osMutexWait>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f040 81a5 	bne.w	8001e76 <TaskController+0x532>
		{
			if (SWC > 490)
 8001b2c:	4b4b      	ldr	r3, [pc, #300]	; (8001c5c <TaskController+0x318>)
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8001b34:	d92f      	bls.n	8001b96 <TaskController+0x252>
			{
				DPID_Roll.outer.integrator = 0.0f;
 8001b36:	4b39      	ldr	r3, [pc, #228]	; (8001c1c <TaskController+0x2d8>)
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	66da      	str	r2, [r3, #108]	; 0x6c
				DPID_Roll.outer.integrator_result = 0.0f;
 8001b3e:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <TaskController+0x2d8>)
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	671a      	str	r2, [r3, #112]	; 0x70
				DPID_Roll.inner.integrator = 0.0f;
 8001b46:	4b35      	ldr	r3, [pc, #212]	; (8001c1c <TaskController+0x2d8>)
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	629a      	str	r2, [r3, #40]	; 0x28
				DPID_Roll.inner.integrator_result = 0.0f;
 8001b4e:	4b33      	ldr	r3, [pc, #204]	; (8001c1c <TaskController+0x2d8>)
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	62da      	str	r2, [r3, #44]	; 0x2c
				DPID_Pitch.outer.integrator = 0.0f;
 8001b56:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <TaskController+0x2f8>)
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	66da      	str	r2, [r3, #108]	; 0x6c
				DPID_Pitch.outer.integrator_result = 0.0f;
 8001b5e:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <TaskController+0x2f8>)
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	671a      	str	r2, [r3, #112]	; 0x70
				DPID_Pitch.inner.integrator = 0.0f;
 8001b66:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <TaskController+0x2f8>)
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	629a      	str	r2, [r3, #40]	; 0x28
				DPID_Pitch.inner.integrator_result = 0.0f;
 8001b6e:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <TaskController+0x2f8>)
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	62da      	str	r2, [r3, #44]	; 0x2c
				PID_Yaw.integrator = 0.0f;
 8001b76:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <TaskController+0x2fc>)
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	629a      	str	r2, [r3, #40]	; 0x28
				PID_Yaw.integrator_result = 0.0f;
 8001b7e:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <TaskController+0x2fc>)
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	62da      	str	r2, [r3, #44]	; 0x2c
				PID_Throttle.integrator = 0.0f;
 8001b86:	4b30      	ldr	r3, [pc, #192]	; (8001c48 <TaskController+0x304>)
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	629a      	str	r2, [r3, #40]	; 0x28
				PID_Throttle.integrator_result = 0.0f;
 8001b8e:	4b2e      	ldr	r3, [pc, #184]	; (8001c48 <TaskController+0x304>)
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	62da      	str	r2, [r3, #44]	; 0x2c
			DPID_Roll.inner.Kd = VRB / 2000.0f;

			DPID_Pitch.outer.Kd = VRA / 2000.0f;
			DPID_Pitch.inner.Kd = VRB / 2000.0f;
			*/
			if (Tune_single_true_double_false)
 8001b96:	4b32      	ldr	r3, [pc, #200]	; (8001c60 <TaskController+0x31c>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 80c9 	beq.w	8001d32 <TaskController+0x3ee>
			{
				// Roll
				PIDController_Update(&DPID_Roll.inner, (Roll_in / 10.0f), GyroData[0], (Throttle_in > 10));
 8001ba0:	4b30      	ldr	r3, [pc, #192]	; (8001c64 <TaskController+0x320>)
 8001ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba6:	ee07 3a90 	vmov	s15, r3
 8001baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bae:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001bb2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bb6:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <TaskController+0x324>)
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <TaskController+0x328>)
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	2b0a      	cmp	r3, #10
 8001bc2:	bf8c      	ite	hi
 8001bc4:	2301      	movhi	r3, #1
 8001bc6:	2300      	movls	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	4619      	mov	r1, r3
 8001bcc:	eef0 0a67 	vmov.f32	s1, s15
 8001bd0:	eeb0 0a47 	vmov.f32	s0, s14
 8001bd4:	4811      	ldr	r0, [pc, #68]	; (8001c1c <TaskController+0x2d8>)
 8001bd6:	f7ff fac7 	bl	8001168 <PIDController_Update>
				Roll_controlled = (int16_t)(DPID_Roll.inner.out);
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <TaskController+0x2d8>)
 8001bdc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001be0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001be4:	ee17 3a90 	vmov	r3, s15
 8001be8:	b21a      	sxth	r2, r3
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <TaskController+0x32c>)
 8001bec:	801a      	strh	r2, [r3, #0]

				// Pitch
				PIDController_Update(&DPID_Pitch.inner, (-Pitch_in / 10.0f), GyroData[1], (Throttle_in > 10));
 8001bee:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <TaskController+0x330>)
 8001bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf4:	425b      	negs	r3, r3
 8001bf6:	ee07 3a90 	vmov	s15, r3
 8001bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bfe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001c02:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <TaskController+0x324>)
 8001c08:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c0c:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <TaskController+0x328>)
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	2b0a      	cmp	r3, #10
 8001c12:	bf8c      	ite	hi
 8001c14:	2301      	movhi	r3, #1
 8001c16:	2300      	movls	r3, #0
 8001c18:	e02e      	b.n	8001c78 <TaskController+0x334>
 8001c1a:	bf00      	nop
 8001c1c:	20000218 	.word	0x20000218
 8001c20:	3e19999a 	.word	0x3e19999a
 8001c24:	c2480000 	.word	0xc2480000
 8001c28:	42480000 	.word	0x42480000
 8001c2c:	3f19999a 	.word	0x3f19999a
 8001c30:	3d75c28f 	.word	0x3d75c28f
 8001c34:	c3fa0000 	.word	0xc3fa0000
 8001c38:	43fa0000 	.word	0x43fa0000
 8001c3c:	200002a0 	.word	0x200002a0
 8001c40:	20000328 	.word	0x20000328
 8001c44:	40c00000 	.word	0x40c00000
 8001c48:	2000036c 	.word	0x2000036c
 8001c4c:	44480000 	.word	0x44480000
 8001c50:	20000de8 	.word	0x20000de8
 8001c54:	20000dd4 	.word	0x20000dd4
 8001c58:	20000dd8 	.word	0x20000dd8
 8001c5c:	200003c4 	.word	0x200003c4
 8001c60:	2000020c 	.word	0x2000020c
 8001c64:	200003b4 	.word	0x200003b4
 8001c68:	20000450 	.word	0x20000450
 8001c6c:	200003b0 	.word	0x200003b0
 8001c70:	200003b6 	.word	0x200003b6
 8001c74:	200003b8 	.word	0x200003b8
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	eef0 0a67 	vmov.f32	s1, s15
 8001c80:	eeb0 0a47 	vmov.f32	s0, s14
 8001c84:	4884      	ldr	r0, [pc, #528]	; (8001e98 <TaskController+0x554>)
 8001c86:	f7ff fa6f 	bl	8001168 <PIDController_Update>
				Pitch_controlled = (int16_t)(DPID_Pitch.inner.out);
 8001c8a:	4b83      	ldr	r3, [pc, #524]	; (8001e98 <TaskController+0x554>)
 8001c8c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001c90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c94:	ee17 3a90 	vmov	r3, s15
 8001c98:	b21a      	sxth	r2, r3
 8001c9a:	4b80      	ldr	r3, [pc, #512]	; (8001e9c <TaskController+0x558>)
 8001c9c:	801a      	strh	r2, [r3, #0]

				// Yaw
				PIDController_Update(&PID_Yaw, (Yaw_in / 10.0f), GyroData[2], (Throttle_in > 10));
 8001c9e:	4b80      	ldr	r3, [pc, #512]	; (8001ea0 <TaskController+0x55c>)
 8001ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cac:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001cb0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cb4:	4b7b      	ldr	r3, [pc, #492]	; (8001ea4 <TaskController+0x560>)
 8001cb6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cba:	4b7b      	ldr	r3, [pc, #492]	; (8001ea8 <TaskController+0x564>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	2b0a      	cmp	r3, #10
 8001cc0:	bf8c      	ite	hi
 8001cc2:	2301      	movhi	r3, #1
 8001cc4:	2300      	movls	r3, #0
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	4619      	mov	r1, r3
 8001cca:	eef0 0a67 	vmov.f32	s1, s15
 8001cce:	eeb0 0a47 	vmov.f32	s0, s14
 8001cd2:	4876      	ldr	r0, [pc, #472]	; (8001eac <TaskController+0x568>)
 8001cd4:	f7ff fa48 	bl	8001168 <PIDController_Update>
				Yaw_controlled = (int16_t)(PID_Yaw.out);
 8001cd8:	4b74      	ldr	r3, [pc, #464]	; (8001eac <TaskController+0x568>)
 8001cda:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001cde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ce2:	ee17 3a90 	vmov	r3, s15
 8001ce6:	b21a      	sxth	r2, r3
 8001ce8:	4b71      	ldr	r3, [pc, #452]	; (8001eb0 <TaskController+0x56c>)
 8001cea:	801a      	strh	r2, [r3, #0]

				// Throttle
				PIDController_Update(&PID_Throttle, Throttle_in, Distance, (Throttle_in > 35));
 8001cec:	4b6e      	ldr	r3, [pc, #440]	; (8001ea8 <TaskController+0x564>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	ee07 3a90 	vmov	s15, r3
 8001cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cf8:	4b6e      	ldr	r3, [pc, #440]	; (8001eb4 <TaskController+0x570>)
 8001cfa:	ed93 7a00 	vldr	s14, [r3]
 8001cfe:	4b6a      	ldr	r3, [pc, #424]	; (8001ea8 <TaskController+0x564>)
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	2b23      	cmp	r3, #35	; 0x23
 8001d04:	bf8c      	ite	hi
 8001d06:	2301      	movhi	r3, #1
 8001d08:	2300      	movls	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	eef0 0a47 	vmov.f32	s1, s14
 8001d12:	eeb0 0a67 	vmov.f32	s0, s15
 8001d16:	4868      	ldr	r0, [pc, #416]	; (8001eb8 <TaskController+0x574>)
 8001d18:	f7ff fa26 	bl	8001168 <PIDController_Update>
				Throttle_controlled = (uint16_t)(PID_Throttle.out);
 8001d1c:	4b66      	ldr	r3, [pc, #408]	; (8001eb8 <TaskController+0x574>)
 8001d1e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d26:	ee17 3a90 	vmov	r3, s15
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	4b63      	ldr	r3, [pc, #396]	; (8001ebc <TaskController+0x578>)
 8001d2e:	801a      	strh	r2, [r3, #0]
 8001d30:	e0a1      	b.n	8001e76 <TaskController+0x532>
			}
			else
			{
				// Roll
				DoublePIDController_Update(&DPID_Roll, (Roll_in / 25.0f), Fusion_output.angle.roll, GyroData[0], (Throttle_in > 10));
 8001d32:	4b63      	ldr	r3, [pc, #396]	; (8001ec0 <TaskController+0x57c>)
 8001d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d40:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001d44:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d48:	4b5e      	ldr	r3, [pc, #376]	; (8001ec4 <TaskController+0x580>)
 8001d4a:	edd3 7a00 	vldr	s15, [r3]
 8001d4e:	4b55      	ldr	r3, [pc, #340]	; (8001ea4 <TaskController+0x560>)
 8001d50:	edd3 6a00 	vldr	s13, [r3]
 8001d54:	4b54      	ldr	r3, [pc, #336]	; (8001ea8 <TaskController+0x564>)
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	2b0a      	cmp	r3, #10
 8001d5a:	bf8c      	ite	hi
 8001d5c:	2301      	movhi	r3, #1
 8001d5e:	2300      	movls	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	4619      	mov	r1, r3
 8001d64:	eeb0 1a66 	vmov.f32	s2, s13
 8001d68:	eef0 0a67 	vmov.f32	s1, s15
 8001d6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001d70:	4855      	ldr	r0, [pc, #340]	; (8001ec8 <TaskController+0x584>)
 8001d72:	f7ff fb33 	bl	80013dc <DoublePIDController_Update>
				//DoublePIDController_Update(&DPID_Roll, (SWD / 70.0f), Fusion_output.angle.roll, GyroData[0], (Throttle_in > 10));
				Roll_controlled = (int16_t)(DPID_Roll.inner.out);
 8001d76:	4b54      	ldr	r3, [pc, #336]	; (8001ec8 <TaskController+0x584>)
 8001d78:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001d7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d80:	ee17 3a90 	vmov	r3, s15
 8001d84:	b21a      	sxth	r2, r3
 8001d86:	4b51      	ldr	r3, [pc, #324]	; (8001ecc <TaskController+0x588>)
 8001d88:	801a      	strh	r2, [r3, #0]

				// Pitch
				DoublePIDController_Update(&DPID_Pitch, (-Pitch_in / 25.0f), Fusion_output.angle.pitch, GyroData[1], (Throttle_in > 10));
 8001d8a:	4b51      	ldr	r3, [pc, #324]	; (8001ed0 <TaskController+0x58c>)
 8001d8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d90:	425b      	negs	r3, r3
 8001d92:	ee07 3a90 	vmov	s15, r3
 8001d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d9a:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001d9e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001da2:	4b48      	ldr	r3, [pc, #288]	; (8001ec4 <TaskController+0x580>)
 8001da4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001da8:	4b3e      	ldr	r3, [pc, #248]	; (8001ea4 <TaskController+0x560>)
 8001daa:	edd3 6a01 	vldr	s13, [r3, #4]
 8001dae:	4b3e      	ldr	r3, [pc, #248]	; (8001ea8 <TaskController+0x564>)
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	2b0a      	cmp	r3, #10
 8001db4:	bf8c      	ite	hi
 8001db6:	2301      	movhi	r3, #1
 8001db8:	2300      	movls	r3, #0
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	eeb0 1a66 	vmov.f32	s2, s13
 8001dc2:	eef0 0a67 	vmov.f32	s1, s15
 8001dc6:	eeb0 0a47 	vmov.f32	s0, s14
 8001dca:	4833      	ldr	r0, [pc, #204]	; (8001e98 <TaskController+0x554>)
 8001dcc:	f7ff fb06 	bl	80013dc <DoublePIDController_Update>
				//DoublePIDController_Update(&DPID_Pitch, (SWD / 70.0f), Fusion_output.angle.pitch, GyroData[1], (Throttle_in > 10));
				Pitch_controlled = (int16_t)(DPID_Pitch.inner.out);
 8001dd0:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <TaskController+0x554>)
 8001dd2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dda:	ee17 3a90 	vmov	r3, s15
 8001dde:	b21a      	sxth	r2, r3
 8001de0:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <TaskController+0x558>)
 8001de2:	801a      	strh	r2, [r3, #0]

				// Yaw
				PIDController_Update(&PID_Yaw, (Yaw_in / 10.0f), GyroData[2], (Throttle_in > 10));
 8001de4:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <TaskController+0x55c>)
 8001de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dea:	ee07 3a90 	vmov	s15, r3
 8001dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001df6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001dfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ea4 <TaskController+0x560>)
 8001dfc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e00:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <TaskController+0x564>)
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	2b0a      	cmp	r3, #10
 8001e06:	bf8c      	ite	hi
 8001e08:	2301      	movhi	r3, #1
 8001e0a:	2300      	movls	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	4619      	mov	r1, r3
 8001e10:	eef0 0a67 	vmov.f32	s1, s15
 8001e14:	eeb0 0a47 	vmov.f32	s0, s14
 8001e18:	4824      	ldr	r0, [pc, #144]	; (8001eac <TaskController+0x568>)
 8001e1a:	f7ff f9a5 	bl	8001168 <PIDController_Update>
				Yaw_controlled = (int16_t)(PID_Yaw.out);
 8001e1e:	4b23      	ldr	r3, [pc, #140]	; (8001eac <TaskController+0x568>)
 8001e20:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001e24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e28:	ee17 3a90 	vmov	r3, s15
 8001e2c:	b21a      	sxth	r2, r3
 8001e2e:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <TaskController+0x56c>)
 8001e30:	801a      	strh	r2, [r3, #0]

				// Throttle
				PIDController_Update(&PID_Throttle, Throttle_in, Distance, (Throttle_in > 35));
 8001e32:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <TaskController+0x564>)
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	ee07 3a90 	vmov	s15, r3
 8001e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <TaskController+0x570>)
 8001e40:	ed93 7a00 	vldr	s14, [r3]
 8001e44:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <TaskController+0x564>)
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	2b23      	cmp	r3, #35	; 0x23
 8001e4a:	bf8c      	ite	hi
 8001e4c:	2301      	movhi	r3, #1
 8001e4e:	2300      	movls	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	4619      	mov	r1, r3
 8001e54:	eef0 0a47 	vmov.f32	s1, s14
 8001e58:	eeb0 0a67 	vmov.f32	s0, s15
 8001e5c:	4816      	ldr	r0, [pc, #88]	; (8001eb8 <TaskController+0x574>)
 8001e5e:	f7ff f983 	bl	8001168 <PIDController_Update>
				Throttle_controlled = (uint16_t)(PID_Throttle.out);
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <TaskController+0x574>)
 8001e64:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001e68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e6c:	ee17 3a90 	vmov	r3, s15
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <TaskController+0x578>)
 8001e74:	801a      	strh	r2, [r3, #0]
			}
		}
		osMutexRelease(ControllerMutexHandle);
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <TaskController+0x590>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f00f ff04 	bl	8011c88 <osMutexRelease>
		osMutexRelease(RemoteDataMutexHandle);
 8001e80:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <TaskController+0x594>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f00f feff 	bl	8011c88 <osMutexRelease>
		osMutexRelease(ImuMutexHandle);
 8001e8a:	4b14      	ldr	r3, [pc, #80]	; (8001edc <TaskController+0x598>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f00f fefa 	bl	8011c88 <osMutexRelease>
	{
 8001e94:	e620      	b.n	8001ad8 <TaskController+0x194>
 8001e96:	bf00      	nop
 8001e98:	200002a0 	.word	0x200002a0
 8001e9c:	200003ba 	.word	0x200003ba
 8001ea0:	200003bc 	.word	0x200003bc
 8001ea4:	20000450 	.word	0x20000450
 8001ea8:	200003b0 	.word	0x200003b0
 8001eac:	20000328 	.word	0x20000328
 8001eb0:	200003be 	.word	0x200003be
 8001eb4:	20000510 	.word	0x20000510
 8001eb8:	2000036c 	.word	0x2000036c
 8001ebc:	200003b2 	.word	0x200003b2
 8001ec0:	200003b4 	.word	0x200003b4
 8001ec4:	20000468 	.word	0x20000468
 8001ec8:	20000218 	.word	0x20000218
 8001ecc:	200003b6 	.word	0x200003b6
 8001ed0:	200003b8 	.word	0x200003b8
 8001ed4:	20000de8 	.word	0x20000de8
 8001ed8:	20000dd4 	.word	0x20000dd4
 8001edc:	20000dd8 	.word	0x20000dd8

08001ee0 <TaskDiagnostics>:
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;
extern osMutexId ControllerMutexHandle;

void TaskDiagnostics(void const *argument)
{
 8001ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ee4:	f5ad 7d5a 	sub.w	sp, sp, #872	; 0x368
 8001ee8:	af14      	add	r7, sp, #80	; 0x50
 8001eea:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001eee:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8001ef2:	6018      	str	r0, [r3, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5; //Hz
 8001ef4:	2305      	movs	r3, #5
 8001ef6:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8001efa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001efe:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
	char UARTstr[512];
	uint8_t SpiIntData[64];
	uint8_t SpiFloatData1[64];
	uint8_t SpiFloatData2[64];

	SpiIntData[0] = (uint8_t)('i');
 8001f0a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001f0e:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001f12:	2269      	movs	r2, #105	; 0x69
 8001f14:	701a      	strb	r2, [r3, #0]
	SpiFloatData1[0] = (uint8_t)('f');
 8001f16:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001f1a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001f1e:	2266      	movs	r2, #102	; 0x66
 8001f20:	701a      	strb	r2, [r3, #0]
	SpiFloatData2[0] = (uint8_t)('g');
 8001f22:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001f26:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8001f2a:	2267      	movs	r2, #103	; 0x67
 8001f2c:	701a      	strb	r2, [r3, #0]

	xLastWakeTime = xTaskGetTickCount();
 8001f2e:	f011 f9f5 	bl	801331c <xTaskGetTickCount>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8001f38:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8001f3c:	f8d7 1310 	ldr.w	r1, [r7, #784]	; 0x310
 8001f40:	4618      	mov	r0, r3
 8001f42:	f011 f817 	bl	8012f74 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8001f46:	f011 f9e9 	bl	801331c <xTaskGetTickCount>
 8001f4a:	f8c7 030c 	str.w	r0, [r7, #780]	; 0x30c

		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001f4e:	4bc3      	ldr	r3, [pc, #780]	; (800225c <TaskDiagnostics+0x37c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f04f 31ff 	mov.w	r1, #4294967295
 8001f56:	4618      	mov	r0, r3
 8001f58:	f00f fe48 	bl	8011bec <osMutexWait>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 811d 	bne.w	800219e <TaskDiagnostics+0x2be>
		{
			uint16_t Throttle1 = (uint16_t)(TIM1->CCR1-1000);
 8001f64:	4bbe      	ldr	r3, [pc, #760]	; (8002260 <TaskDiagnostics+0x380>)
 8001f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001f74:	f2a3 23d2 	subw	r3, r3, #722	; 0x2d2
 8001f78:	801a      	strh	r2, [r3, #0]
			uint16_t Throttle2 = (uint16_t)(TIM1->CCR2-1000);
 8001f7a:	4bb9      	ldr	r3, [pc, #740]	; (8002260 <TaskDiagnostics+0x380>)
 8001f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001f8a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8001f8e:	801a      	strh	r2, [r3, #0]
			uint16_t Throttle3 = (uint16_t)(TIM1->CCR3-1000);
 8001f90:	4bb3      	ldr	r3, [pc, #716]	; (8002260 <TaskDiagnostics+0x380>)
 8001f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001fa0:	f2a3 23d6 	subw	r3, r3, #726	; 0x2d6
 8001fa4:	801a      	strh	r2, [r3, #0]
			uint16_t Throttle4 = (uint16_t)(TIM1->CCR4-1000);
 8001fa6:	4bae      	ldr	r3, [pc, #696]	; (8002260 <TaskDiagnostics+0x380>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001fb6:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8001fba:	801a      	strh	r2, [r3, #0]

			sprintf(UARTstr, "Throttle: (%d) %d %d %d %d\r\n", Throttle_in, Throttle1, Throttle2, Throttle3, Throttle4);
 8001fbc:	4ba9      	ldr	r3, [pc, #676]	; (8002264 <TaskDiagnostics+0x384>)
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	461c      	mov	r4, r3
 8001fc2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001fc6:	f2a3 23d2 	subw	r3, r3, #722	; 0x2d2
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	461d      	mov	r5, r3
 8001fce:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001fd2:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001fde:	f2a3 23d6 	subw	r3, r3, #726	; 0x2d6
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001fea:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001ff4:	9302      	str	r3, [sp, #8]
 8001ff6:	9101      	str	r1, [sp, #4]
 8001ff8:	9200      	str	r2, [sp, #0]
 8001ffa:	462b      	mov	r3, r5
 8001ffc:	4622      	mov	r2, r4
 8001ffe:	499a      	ldr	r1, [pc, #616]	; (8002268 <TaskDiagnostics+0x388>)
 8002000:	f004 fa94 	bl	800652c <sprintf_>
			Uint16ToUint8s(&Throttle_in, SpiIntData, 1);
 8002004:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002008:	2201      	movs	r2, #1
 800200a:	4619      	mov	r1, r3
 800200c:	4895      	ldr	r0, [pc, #596]	; (8002264 <TaskDiagnostics+0x384>)
 800200e:	f7ff fbb8 	bl	8001782 <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle1, SpiIntData, 3);
 8002012:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002016:	f107 0346 	add.w	r3, r7, #70	; 0x46
 800201a:	2203      	movs	r2, #3
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fbb0 	bl	8001782 <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle2, SpiIntData, 5);
 8002022:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002026:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800202a:	2205      	movs	r2, #5
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fba8 	bl	8001782 <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle3, SpiIntData, 7);
 8002032:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002036:	f107 0342 	add.w	r3, r7, #66	; 0x42
 800203a:	2207      	movs	r2, #7
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fba0 	bl	8001782 <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle4, SpiIntData, 9);
 8002042:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002046:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800204a:	2209      	movs	r2, #9
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fb98 	bl	8001782 <Uint16ToUint8s>

			sprintf(UARTstr, "%sPitch: %d\r\n", UARTstr, Pitch_in);
 8002052:	4b86      	ldr	r3, [pc, #536]	; (800226c <TaskDiagnostics+0x38c>)
 8002054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002058:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800205c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8002060:	4983      	ldr	r1, [pc, #524]	; (8002270 <TaskDiagnostics+0x390>)
 8002062:	f004 fa63 	bl	800652c <sprintf_>
			Int16ToUint8s(&Pitch_in, SpiIntData, 11);
 8002066:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800206a:	220b      	movs	r2, #11
 800206c:	4619      	mov	r1, r3
 800206e:	487f      	ldr	r0, [pc, #508]	; (800226c <TaskDiagnostics+0x38c>)
 8002070:	f7ff fb9a 	bl	80017a8 <Int16ToUint8s>

			int16_t Roll_in_devided = Roll_in / 10;
 8002074:	4b7f      	ldr	r3, [pc, #508]	; (8002274 <TaskDiagnostics+0x394>)
 8002076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800207a:	4a7f      	ldr	r2, [pc, #508]	; (8002278 <TaskDiagnostics+0x398>)
 800207c:	fb82 1203 	smull	r1, r2, r2, r3
 8002080:	1092      	asrs	r2, r2, #2
 8002082:	17db      	asrs	r3, r3, #31
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	b21a      	sxth	r2, r3
 8002088:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800208c:	f2a3 23da 	subw	r3, r3, #730	; 0x2da
 8002090:	801a      	strh	r2, [r3, #0]
			sprintf(UARTstr, "%sRoll: %d\r\n", UARTstr, Roll_in_devided);
 8002092:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002096:	f2a3 23da 	subw	r3, r3, #730	; 0x2da
 800209a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800209e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80020a2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80020a6:	4975      	ldr	r1, [pc, #468]	; (800227c <TaskDiagnostics+0x39c>)
 80020a8:	f004 fa40 	bl	800652c <sprintf_>
			Int16ToUint8s(&Roll_in_devided, SpiIntData, 13);
 80020ac:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80020b0:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80020b4:	220d      	movs	r2, #13
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fb76 	bl	80017a8 <Int16ToUint8s>

			sprintf(UARTstr, "%sYaw: %d\r\n", UARTstr, Yaw_in);
 80020bc:	4b70      	ldr	r3, [pc, #448]	; (8002280 <TaskDiagnostics+0x3a0>)
 80020be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80020c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80020ca:	496e      	ldr	r1, [pc, #440]	; (8002284 <TaskDiagnostics+0x3a4>)
 80020cc:	f004 fa2e 	bl	800652c <sprintf_>
			Int16ToUint8s(&Yaw_in, SpiIntData, 15);
 80020d0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020d4:	220f      	movs	r2, #15
 80020d6:	4619      	mov	r1, r3
 80020d8:	4869      	ldr	r0, [pc, #420]	; (8002280 <TaskDiagnostics+0x3a0>)
 80020da:	f7ff fb65 	bl	80017a8 <Int16ToUint8s>

			sprintf(UARTstr, "%sSWA: %d\r\n", UARTstr, SWA);
 80020de:	4b6a      	ldr	r3, [pc, #424]	; (8002288 <TaskDiagnostics+0x3a8>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80020e6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80020ea:	4968      	ldr	r1, [pc, #416]	; (800228c <TaskDiagnostics+0x3ac>)
 80020ec:	f004 fa1e 	bl	800652c <sprintf_>
			Uint16ToUint8s(&SWA, SpiIntData, 17);
 80020f0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020f4:	2211      	movs	r2, #17
 80020f6:	4619      	mov	r1, r3
 80020f8:	4863      	ldr	r0, [pc, #396]	; (8002288 <TaskDiagnostics+0x3a8>)
 80020fa:	f7ff fb42 	bl	8001782 <Uint16ToUint8s>

			sprintf(UARTstr, "%sSWB: %d\r\n", UARTstr, SWB);
 80020fe:	4b64      	ldr	r3, [pc, #400]	; (8002290 <TaskDiagnostics+0x3b0>)
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002106:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800210a:	4962      	ldr	r1, [pc, #392]	; (8002294 <TaskDiagnostics+0x3b4>)
 800210c:	f004 fa0e 	bl	800652c <sprintf_>
			Uint16ToUint8s(&SWB, SpiIntData, 19);
 8002110:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002114:	2213      	movs	r2, #19
 8002116:	4619      	mov	r1, r3
 8002118:	485d      	ldr	r0, [pc, #372]	; (8002290 <TaskDiagnostics+0x3b0>)
 800211a:	f7ff fb32 	bl	8001782 <Uint16ToUint8s>

			sprintf(UARTstr, "%sSWC: %d\r\n", UARTstr, SWC);
 800211e:	4b5e      	ldr	r3, [pc, #376]	; (8002298 <TaskDiagnostics+0x3b8>)
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002126:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800212a:	495c      	ldr	r1, [pc, #368]	; (800229c <TaskDiagnostics+0x3bc>)
 800212c:	f004 f9fe 	bl	800652c <sprintf_>
			Uint16ToUint8s(&SWC, SpiIntData, 21);
 8002130:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002134:	2215      	movs	r2, #21
 8002136:	4619      	mov	r1, r3
 8002138:	4857      	ldr	r0, [pc, #348]	; (8002298 <TaskDiagnostics+0x3b8>)
 800213a:	f7ff fb22 	bl	8001782 <Uint16ToUint8s>

			sprintf(UARTstr, "%sSWD: %d\r\n", UARTstr, SWD);
 800213e:	4b58      	ldr	r3, [pc, #352]	; (80022a0 <TaskDiagnostics+0x3c0>)
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002146:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800214a:	4956      	ldr	r1, [pc, #344]	; (80022a4 <TaskDiagnostics+0x3c4>)
 800214c:	f004 f9ee 	bl	800652c <sprintf_>
			Uint16ToUint8s(&SWD, SpiIntData, 23);
 8002150:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002154:	2217      	movs	r2, #23
 8002156:	4619      	mov	r1, r3
 8002158:	4851      	ldr	r0, [pc, #324]	; (80022a0 <TaskDiagnostics+0x3c0>)
 800215a:	f7ff fb12 	bl	8001782 <Uint16ToUint8s>

			sprintf(UARTstr, "%sVRA: %d\r\n", UARTstr, VRA);
 800215e:	4b52      	ldr	r3, [pc, #328]	; (80022a8 <TaskDiagnostics+0x3c8>)
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002166:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800216a:	4950      	ldr	r1, [pc, #320]	; (80022ac <TaskDiagnostics+0x3cc>)
 800216c:	f004 f9de 	bl	800652c <sprintf_>
			Uint16ToUint8s(&VRA, SpiIntData, 25);
 8002170:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002174:	2219      	movs	r2, #25
 8002176:	4619      	mov	r1, r3
 8002178:	484b      	ldr	r0, [pc, #300]	; (80022a8 <TaskDiagnostics+0x3c8>)
 800217a:	f7ff fb02 	bl	8001782 <Uint16ToUint8s>

			sprintf(UARTstr, "%sVRB: %d\r\n", UARTstr, VRB);
 800217e:	4b4c      	ldr	r3, [pc, #304]	; (80022b0 <TaskDiagnostics+0x3d0>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002186:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800218a:	494a      	ldr	r1, [pc, #296]	; (80022b4 <TaskDiagnostics+0x3d4>)
 800218c:	f004 f9ce 	bl	800652c <sprintf_>
			Uint16ToUint8s(&VRB, SpiIntData, 27);
 8002190:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002194:	221b      	movs	r2, #27
 8002196:	4619      	mov	r1, r3
 8002198:	4845      	ldr	r0, [pc, #276]	; (80022b0 <TaskDiagnostics+0x3d0>)
 800219a:	f7ff faf2 	bl	8001782 <Uint16ToUint8s>
		}
		osMutexRelease(RemoteDataMutexHandle);
 800219e:	4b2f      	ldr	r3, [pc, #188]	; (800225c <TaskDiagnostics+0x37c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f00f fd70 	bl	8011c88 <osMutexRelease>

		if (IsImuAvailable)
 80021a8:	4b43      	ldr	r3, [pc, #268]	; (80022b8 <TaskDiagnostics+0x3d8>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 8127 	beq.w	8002400 <TaskDiagnostics+0x520>
		{
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 80021b2:	4b42      	ldr	r3, [pc, #264]	; (80022bc <TaskDiagnostics+0x3dc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f04f 31ff 	mov.w	r1, #4294967295
 80021ba:	4618      	mov	r0, r3
 80021bc:	f00f fd16 	bl	8011bec <osMutexWait>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f040 8117 	bne.w	80023f6 <TaskDiagnostics+0x516>
			{
				sprintf(UARTstr,
 80021c8:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <TaskDiagnostics+0x3e0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe f9e3 	bl	8000598 <__aeabi_f2d>
 80021d2:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
						"%sTemp: %.4f\r\nAcc:  %1.4f ; %1.4f ; %1.4f\r\nGyro: %1.4f ; %1.4f ; %1.4f\r\nRoll: %1.2f ° ; Pitch: %1.2f ° ; Yaw: %1.2f °\r\n",
						UARTstr,
						TempData,
						AccData[0], AccData[1], AccData[2],
 80021d6:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <TaskDiagnostics+0x3e4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe f9dc 	bl	8000598 <__aeabi_f2d>
 80021e0:	e9c7 0108 	strd	r0, r1, [r7, #32]
						AccData[0], AccData[1], AccData[2],
 80021e4:	4b37      	ldr	r3, [pc, #220]	; (80022c4 <TaskDiagnostics+0x3e4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f9d5 	bl	8000598 <__aeabi_f2d>
 80021ee:	e9c7 0106 	strd	r0, r1, [r7, #24]
						AccData[0], AccData[1], AccData[2],
 80021f2:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <TaskDiagnostics+0x3e4>)
 80021f4:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe f9ce 	bl	8000598 <__aeabi_f2d>
 80021fc:	e9c7 0104 	strd	r0, r1, [r7, #16]
						GyroData[0], GyroData[1], GyroData[2],
 8002200:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <TaskDiagnostics+0x3e8>)
 8002202:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe f9c7 	bl	8000598 <__aeabi_f2d>
 800220a:	e9c7 0102 	strd	r0, r1, [r7, #8]
						GyroData[0], GyroData[1], GyroData[2],
 800220e:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <TaskDiagnostics+0x3e8>)
 8002210:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe f9c0 	bl	8000598 <__aeabi_f2d>
 8002218:	e9c7 0100 	strd	r0, r1, [r7]
						GyroData[0], GyroData[1], GyroData[2],
 800221c:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <TaskDiagnostics+0x3e8>)
 800221e:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe f9b9 	bl	8000598 <__aeabi_f2d>
 8002226:	4682      	mov	sl, r0
 8002228:	468b      	mov	fp, r1
 800222a:	4b28      	ldr	r3, [pc, #160]	; (80022cc <TaskDiagnostics+0x3ec>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe f9b2 	bl	8000598 <__aeabi_f2d>
 8002234:	4680      	mov	r8, r0
 8002236:	4689      	mov	r9, r1
 8002238:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <TaskDiagnostics+0x3f0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe f9ab 	bl	8000598 <__aeabi_f2d>
 8002242:	4604      	mov	r4, r0
 8002244:	460d      	mov	r5, r1
 8002246:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <TaskDiagnostics+0x3f4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe f9a4 	bl	8000598 <__aeabi_f2d>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002258:	e03e      	b.n	80022d8 <TaskDiagnostics+0x3f8>
 800225a:	bf00      	nop
 800225c:	20000dd4 	.word	0x20000dd4
 8002260:	40010000 	.word	0x40010000
 8002264:	200003b0 	.word	0x200003b0
 8002268:	0801bb88 	.word	0x0801bb88
 800226c:	200003b8 	.word	0x200003b8
 8002270:	0801bba8 	.word	0x0801bba8
 8002274:	200003b4 	.word	0x200003b4
 8002278:	66666667 	.word	0x66666667
 800227c:	0801bbb8 	.word	0x0801bbb8
 8002280:	200003bc 	.word	0x200003bc
 8002284:	0801bbc8 	.word	0x0801bbc8
 8002288:	200003c0 	.word	0x200003c0
 800228c:	0801bbd4 	.word	0x0801bbd4
 8002290:	200003c2 	.word	0x200003c2
 8002294:	0801bbe0 	.word	0x0801bbe0
 8002298:	200003c4 	.word	0x200003c4
 800229c:	0801bbec 	.word	0x0801bbec
 80022a0:	200003c6 	.word	0x200003c6
 80022a4:	0801bbf8 	.word	0x0801bbf8
 80022a8:	200003c8 	.word	0x200003c8
 80022ac:	0801bc04 	.word	0x0801bc04
 80022b0:	200003ca 	.word	0x200003ca
 80022b4:	0801bc10 	.word	0x0801bc10
 80022b8:	20000214 	.word	0x20000214
 80022bc:	20000dd8 	.word	0x20000dd8
 80022c0:	2000044c 	.word	0x2000044c
 80022c4:	20000440 	.word	0x20000440
 80022c8:	20000450 	.word	0x20000450
 80022cc:	2000045c 	.word	0x2000045c
 80022d0:	20000460 	.word	0x20000460
 80022d4:	20000464 	.word	0x20000464
 80022d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80022dc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80022e0:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 80022e4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80022e8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 80022ec:	ed97 7b00 	vldr	d7, [r7]
 80022f0:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80022f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80022f8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80022fc:	ed97 7b04 	vldr	d7, [r7, #16]
 8002300:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002304:	ed97 7b06 	vldr	d7, [r7, #24]
 8002308:	ed8d 7b04 	vstr	d7, [sp, #16]
 800230c:	ed97 7b08 	vldr	d7, [r7, #32]
 8002310:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002314:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002318:	ed8d 7b00 	vstr	d7, [sp]
 800231c:	460a      	mov	r2, r1
 800231e:	4998      	ldr	r1, [pc, #608]	; (8002580 <TaskDiagnostics+0x6a0>)
 8002320:	f004 f904 	bl	800652c <sprintf_>
						Roll_measured, Pitch_measured, Yaw_measured);
				FloatToUint8s(&TempData, SpiFloatData1, 1);
 8002324:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002328:	2201      	movs	r2, #1
 800232a:	4619      	mov	r1, r3
 800232c:	4895      	ldr	r0, [pc, #596]	; (8002584 <TaskDiagnostics+0x6a4>)
 800232e:	f7ff fa03 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(AccData, SpiFloatData1, 5);
 8002332:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002336:	2205      	movs	r2, #5
 8002338:	4619      	mov	r1, r3
 800233a:	4893      	ldr	r0, [pc, #588]	; (8002588 <TaskDiagnostics+0x6a8>)
 800233c:	f7ff f9fc 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(AccData+1, SpiFloatData1, 9);
 8002340:	4892      	ldr	r0, [pc, #584]	; (800258c <TaskDiagnostics+0x6ac>)
 8002342:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002346:	2209      	movs	r2, #9
 8002348:	4619      	mov	r1, r3
 800234a:	f7ff f9f5 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(AccData+2, SpiFloatData1, 13);
 800234e:	4890      	ldr	r0, [pc, #576]	; (8002590 <TaskDiagnostics+0x6b0>)
 8002350:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002354:	220d      	movs	r2, #13
 8002356:	4619      	mov	r1, r3
 8002358:	f7ff f9ee 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(GyroData, SpiFloatData1, 17);
 800235c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002360:	2211      	movs	r2, #17
 8002362:	4619      	mov	r1, r3
 8002364:	488b      	ldr	r0, [pc, #556]	; (8002594 <TaskDiagnostics+0x6b4>)
 8002366:	f7ff f9e7 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(GyroData+1, SpiFloatData1, 21);
 800236a:	488b      	ldr	r0, [pc, #556]	; (8002598 <TaskDiagnostics+0x6b8>)
 800236c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002370:	2215      	movs	r2, #21
 8002372:	4619      	mov	r1, r3
 8002374:	f7ff f9e0 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(GyroData+2, SpiFloatData1, 25);
 8002378:	4888      	ldr	r0, [pc, #544]	; (800259c <TaskDiagnostics+0x6bc>)
 800237a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800237e:	2219      	movs	r2, #25
 8002380:	4619      	mov	r1, r3
 8002382:	f7ff f9d9 	bl	8001738 <FloatToUint8s>

				sprintf(UARTstr,
 8002386:	4b86      	ldr	r3, [pc, #536]	; (80025a0 <TaskDiagnostics+0x6c0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe f904 	bl	8000598 <__aeabi_f2d>
 8002390:	4604      	mov	r4, r0
 8002392:	460d      	mov	r5, r1
 8002394:	4b83      	ldr	r3, [pc, #524]	; (80025a4 <TaskDiagnostics+0x6c4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe f8fd 	bl	8000598 <__aeabi_f2d>
 800239e:	4680      	mov	r8, r0
 80023a0:	4689      	mov	r9, r1
 80023a2:	4b81      	ldr	r3, [pc, #516]	; (80025a8 <TaskDiagnostics+0x6c8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe f8f6 	bl	8000598 <__aeabi_f2d>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80023b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80023b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80023bc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80023c0:	e9cd 4500 	strd	r4, r5, [sp]
 80023c4:	460a      	mov	r2, r1
 80023c6:	4979      	ldr	r1, [pc, #484]	; (80025ac <TaskDiagnostics+0x6cc>)
 80023c8:	f004 f8b0 	bl	800652c <sprintf_>
						"%sBMP_Temp: %.4f\r\nBMP_Pres: %.4f\r\nBMP_Alt: %.4f\r\n",
						UARTstr,
						BMP_Temp, BMP_Pres, BMP_Alt);
				FloatToUint8s(&BMP_Temp, SpiFloatData1, 29);
 80023cc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80023d0:	221d      	movs	r2, #29
 80023d2:	4619      	mov	r1, r3
 80023d4:	4872      	ldr	r0, [pc, #456]	; (80025a0 <TaskDiagnostics+0x6c0>)
 80023d6:	f7ff f9af 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&BMP_Pres, SpiFloatData1, 33);
 80023da:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80023de:	2221      	movs	r2, #33	; 0x21
 80023e0:	4619      	mov	r1, r3
 80023e2:	4870      	ldr	r0, [pc, #448]	; (80025a4 <TaskDiagnostics+0x6c4>)
 80023e4:	f7ff f9a8 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&BMP_Alt, SpiFloatData1, 37);
 80023e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80023ec:	2225      	movs	r2, #37	; 0x25
 80023ee:	4619      	mov	r1, r3
 80023f0:	486d      	ldr	r0, [pc, #436]	; (80025a8 <TaskDiagnostics+0x6c8>)
 80023f2:	f7ff f9a1 	bl	8001738 <FloatToUint8s>
			}
			osMutexRelease(ImuMutexHandle);
 80023f6:	4b6e      	ldr	r3, [pc, #440]	; (80025b0 <TaskDiagnostics+0x6d0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f00f fc44 	bl	8011c88 <osMutexRelease>
		}

		if (IsMagnAvailable)
 8002400:	4b6c      	ldr	r3, [pc, #432]	; (80025b4 <TaskDiagnostics+0x6d4>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d056      	beq.n	80024b6 <TaskDiagnostics+0x5d6>
		{
			if (osMutexWait(MagnMutexHandle, osWaitForever) == osOK)
 8002408:	4b6b      	ldr	r3, [pc, #428]	; (80025b8 <TaskDiagnostics+0x6d8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f04f 31ff 	mov.w	r1, #4294967295
 8002410:	4618      	mov	r0, r3
 8002412:	f00f fbeb 	bl	8011bec <osMutexWait>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d147      	bne.n	80024ac <TaskDiagnostics+0x5cc>
			{
				sprintf(UARTstr,
 800241c:	4b67      	ldr	r3, [pc, #412]	; (80025bc <TaskDiagnostics+0x6dc>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f8b9 	bl	8000598 <__aeabi_f2d>
 8002426:	4604      	mov	r4, r0
 8002428:	460d      	mov	r5, r1
 800242a:	4b65      	ldr	r3, [pc, #404]	; (80025c0 <TaskDiagnostics+0x6e0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe f8b2 	bl	8000598 <__aeabi_f2d>
 8002434:	4680      	mov	r8, r0
 8002436:	4689      	mov	r9, r1
 8002438:	4b62      	ldr	r3, [pc, #392]	; (80025c4 <TaskDiagnostics+0x6e4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe f8ab 	bl	8000598 <__aeabi_f2d>
 8002442:	4682      	mov	sl, r0
 8002444:	468b      	mov	fp, r1
 8002446:	4b60      	ldr	r3, [pc, #384]	; (80025c8 <TaskDiagnostics+0x6e8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe f8a4 	bl	8000598 <__aeabi_f2d>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002458:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800245c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002460:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002464:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002468:	e9cd 4500 	strd	r4, r5, [sp]
 800246c:	460a      	mov	r2, r1
 800246e:	4957      	ldr	r1, [pc, #348]	; (80025cc <TaskDiagnostics+0x6ec>)
 8002470:	f004 f85c 	bl	800652c <sprintf_>
						"%sMAG_X_RAW: %.4f\r\nMAG_Y_RAW: %.4f\r\nMAG_Z_RAW: %.4f\r\ndir: %.4f\r\n",
						UARTstr,
						MAG_X_RAW, MAG_Y_RAW, MAG_Z_RAW, MAG_dir);
				FloatToUint8s(&MAG_X_RAW, SpiFloatData1, 41);
 8002474:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002478:	2229      	movs	r2, #41	; 0x29
 800247a:	4619      	mov	r1, r3
 800247c:	484f      	ldr	r0, [pc, #316]	; (80025bc <TaskDiagnostics+0x6dc>)
 800247e:	f7ff f95b 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&MAG_Y_RAW, SpiFloatData1, 45);
 8002482:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002486:	222d      	movs	r2, #45	; 0x2d
 8002488:	4619      	mov	r1, r3
 800248a:	484d      	ldr	r0, [pc, #308]	; (80025c0 <TaskDiagnostics+0x6e0>)
 800248c:	f7ff f954 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&MAG_Z_RAW, SpiFloatData1, 49);
 8002490:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002494:	2231      	movs	r2, #49	; 0x31
 8002496:	4619      	mov	r1, r3
 8002498:	484a      	ldr	r0, [pc, #296]	; (80025c4 <TaskDiagnostics+0x6e4>)
 800249a:	f7ff f94d 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&MAG_dir, SpiFloatData1, 53);
 800249e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80024a2:	2235      	movs	r2, #53	; 0x35
 80024a4:	4619      	mov	r1, r3
 80024a6:	4848      	ldr	r0, [pc, #288]	; (80025c8 <TaskDiagnostics+0x6e8>)
 80024a8:	f7ff f946 	bl	8001738 <FloatToUint8s>
			}
			osMutexRelease(MagnMutexHandle);
 80024ac:	4b42      	ldr	r3, [pc, #264]	; (80025b8 <TaskDiagnostics+0x6d8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f00f fbe9 	bl	8011c88 <osMutexRelease>
		}

		if (IsDistAvailable)
 80024b6:	4b46      	ldr	r3, [pc, #280]	; (80025d0 <TaskDiagnostics+0x6f0>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d026      	beq.n	800250c <TaskDiagnostics+0x62c>
		{
			if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 80024be:	4b45      	ldr	r3, [pc, #276]	; (80025d4 <TaskDiagnostics+0x6f4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f04f 31ff 	mov.w	r1, #4294967295
 80024c6:	4618      	mov	r0, r3
 80024c8:	f00f fb90 	bl	8011bec <osMutexWait>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d117      	bne.n	8002502 <TaskDiagnostics+0x622>
			{
				sprintf(UARTstr, "%sDistance: %.0f mm\r\n", UARTstr, Distance);
 80024d2:	4b41      	ldr	r3, [pc, #260]	; (80025d8 <TaskDiagnostics+0x6f8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe f85e 	bl	8000598 <__aeabi_f2d>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80024e4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80024e8:	e9cd 2300 	strd	r2, r3, [sp]
 80024ec:	460a      	mov	r2, r1
 80024ee:	493b      	ldr	r1, [pc, #236]	; (80025dc <TaskDiagnostics+0x6fc>)
 80024f0:	f004 f81c 	bl	800652c <sprintf_>
				FloatToUint8s(&Distance, SpiFloatData1, 57);
 80024f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80024f8:	2239      	movs	r2, #57	; 0x39
 80024fa:	4619      	mov	r1, r3
 80024fc:	4836      	ldr	r0, [pc, #216]	; (80025d8 <TaskDiagnostics+0x6f8>)
 80024fe:	f7ff f91b 	bl	8001738 <FloatToUint8s>
			}
			osMutexRelease(DistMutexHandle);
 8002502:	4b34      	ldr	r3, [pc, #208]	; (80025d4 <TaskDiagnostics+0x6f4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f00f fbbe 	bl	8011c88 <osMutexRelease>
				SpiIntData[32] = (uint8_t)GPS.altitude_unit;
			}
			osMutexRelease(GpsDataMutexHandle);
		}

		sprintf(UARTstr, "%s\r\n\r\n", UARTstr);
 800250c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002514:	4932      	ldr	r1, [pc, #200]	; (80025e0 <TaskDiagnostics+0x700>)
 8002516:	4618      	mov	r0, r3
 8002518:	f004 f808 	bl	800652c <sprintf_>

		// Sending log info
		if (Diag)
 800251c:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <TaskDiagnostics+0x704>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	f43f ad09 	beq.w	8001f38 <TaskDiagnostics+0x58>
		{
			HAL_UART_Transmit(&huart3, UARTstr, strlen(UARTstr), HAL_MAX_DELAY);
 8002526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800252a:	4618      	mov	r0, r3
 800252c:	f7fd fec8 	bl	80002c0 <strlen>
 8002530:	4603      	mov	r3, r0
 8002532:	b29a      	uxth	r2, r3
 8002534:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002538:	f04f 33ff 	mov.w	r3, #4294967295
 800253c:	482a      	ldr	r0, [pc, #168]	; (80025e8 <TaskDiagnostics+0x708>)
 800253e:	f00d fe21 	bl	8010184 <HAL_UART_Transmit>

			HAL_SPI_Transmit(&hspi1, SpiIntData, 64, HAL_MAX_DELAY);
 8002542:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002546:	f04f 33ff 	mov.w	r3, #4294967295
 800254a:	2240      	movs	r2, #64	; 0x40
 800254c:	4827      	ldr	r0, [pc, #156]	; (80025ec <TaskDiagnostics+0x70c>)
 800254e:	f00b f934 	bl	800d7ba <HAL_SPI_Transmit>
			osDelay(10);
 8002552:	200a      	movs	r0, #10
 8002554:	f00f fb1d 	bl	8011b92 <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData1, 64, HAL_MAX_DELAY);
 8002558:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800255c:	f04f 33ff 	mov.w	r3, #4294967295
 8002560:	2240      	movs	r2, #64	; 0x40
 8002562:	4822      	ldr	r0, [pc, #136]	; (80025ec <TaskDiagnostics+0x70c>)
 8002564:	f00b f929 	bl	800d7ba <HAL_SPI_Transmit>
			osDelay(10);
 8002568:	200a      	movs	r0, #10
 800256a:	f00f fb12 	bl	8011b92 <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData2, 64, HAL_MAX_DELAY);
 800256e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002572:	f04f 33ff 	mov.w	r3, #4294967295
 8002576:	2240      	movs	r2, #64	; 0x40
 8002578:	481c      	ldr	r0, [pc, #112]	; (80025ec <TaskDiagnostics+0x70c>)
 800257a:	f00b f91e 	bl	800d7ba <HAL_SPI_Transmit>
	{
 800257e:	e4db      	b.n	8001f38 <TaskDiagnostics+0x58>
 8002580:	0801bc1c 	.word	0x0801bc1c
 8002584:	2000044c 	.word	0x2000044c
 8002588:	20000440 	.word	0x20000440
 800258c:	20000444 	.word	0x20000444
 8002590:	20000448 	.word	0x20000448
 8002594:	20000450 	.word	0x20000450
 8002598:	20000454 	.word	0x20000454
 800259c:	20000458 	.word	0x20000458
 80025a0:	200004a4 	.word	0x200004a4
 80025a4:	200004a8 	.word	0x200004a8
 80025a8:	200004ac 	.word	0x200004ac
 80025ac:	0801bc98 	.word	0x0801bc98
 80025b0:	20000dd8 	.word	0x20000dd8
 80025b4:	20000215 	.word	0x20000215
 80025b8:	20000dd0 	.word	0x20000dd0
 80025bc:	200004c8 	.word	0x200004c8
 80025c0:	200004cc 	.word	0x200004cc
 80025c4:	200004d0 	.word	0x200004d0
 80025c8:	200004d4 	.word	0x200004d4
 80025cc:	0801bccc 	.word	0x0801bccc
 80025d0:	20000216 	.word	0x20000216
 80025d4:	20000de0 	.word	0x20000de0
 80025d8:	20000510 	.word	0x20000510
 80025dc:	0801bd10 	.word	0x0801bd10
 80025e0:	0801bd28 	.word	0x0801bd28
 80025e4:	20000000 	.word	0x20000000
 80025e8:	20000ccc 	.word	0x20000ccc
 80025ec:	20000a5c 	.word	0x20000a5c

080025f0 <ConvertToPwm>:
extern TIM_HandleTypeDef htim1;
extern osMutexId RemoteDataMutexHandle;
extern osMutexId ControllerMutexHandle;

uint32_t ConvertToPwm(int32_t raw)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	// Norm raw data to 0-1000
	if (raw < 0)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	da02      	bge.n	8002604 <ConvertToPwm+0x14>
		raw = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	e006      	b.n	8002612 <ConvertToPwm+0x22>
	else if (raw > 1000)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800260a:	dd02      	ble.n	8002612 <ConvertToPwm+0x22>
		raw = 1000;
 800260c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002610:	607b      	str	r3, [r7, #4]

	// Add 50, so the range will be 1000-2000
	return (uint32_t)(raw + 1000);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <TaskMotor>:

void TaskMotor(void const *argument)
{
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b08b      	sub	sp, #44	; 0x2c
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 800262c:	23c8      	movs	r3, #200	; 0xc8
 800262e:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8002630:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	fbb2 f3f3 	udiv	r3, r2, r3
 800263a:	613b      	str	r3, [r7, #16]

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800263c:	2100      	movs	r1, #0
 800263e:	489e      	ldr	r0, [pc, #632]	; (80028b8 <TaskMotor+0x294>)
 8002640:	f00c f8a2 	bl	800e788 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002644:	2104      	movs	r1, #4
 8002646:	489c      	ldr	r0, [pc, #624]	; (80028b8 <TaskMotor+0x294>)
 8002648:	f00c f89e 	bl	800e788 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800264c:	2108      	movs	r1, #8
 800264e:	489a      	ldr	r0, [pc, #616]	; (80028b8 <TaskMotor+0x294>)
 8002650:	f00c f89a 	bl	800e788 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002654:	210c      	movs	r1, #12
 8002656:	4898      	ldr	r0, [pc, #608]	; (80028b8 <TaskMotor+0x294>)
 8002658:	f00c f896 	bl	800e788 <HAL_TIM_PWM_Start>
	uint8_t ESC1_start_signal;
	uint8_t ESC2_start_signal;
	uint8_t ESC3_start_signal;
	uint8_t ESC4_start_signal;

	TIM1->CCR1 = (uint32_t) (50);
 800265c:	4b97      	ldr	r3, [pc, #604]	; (80028bc <TaskMotor+0x298>)
 800265e:	2232      	movs	r2, #50	; 0x32
 8002660:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (uint32_t) (50);
 8002662:	4b96      	ldr	r3, [pc, #600]	; (80028bc <TaskMotor+0x298>)
 8002664:	2232      	movs	r2, #50	; 0x32
 8002666:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (uint32_t) (50);
 8002668:	4b94      	ldr	r3, [pc, #592]	; (80028bc <TaskMotor+0x298>)
 800266a:	2232      	movs	r2, #50	; 0x32
 800266c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = (uint32_t) (50);
 800266e:	4b93      	ldr	r3, [pc, #588]	; (80028bc <TaskMotor+0x298>)
 8002670:	2232      	movs	r2, #50	; 0x32
 8002672:	641a      	str	r2, [r3, #64]	; 0x40

	xLastWakeTime = xTaskGetTickCount();
 8002674:	f010 fe52 	bl	801331c <xTaskGetTickCount>
 8002678:	4603      	mov	r3, r0
 800267a:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 800267c:	f107 0308 	add.w	r3, r7, #8
 8002680:	6939      	ldr	r1, [r7, #16]
 8002682:	4618      	mov	r0, r3
 8002684:	f010 fc76 	bl	8012f74 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8002688:	f010 fe48 	bl	801331c <xTaskGetTickCount>
 800268c:	60f8      	str	r0, [r7, #12]

		//Log("Mot - RDMutEnter");
		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 800268e:	4b8c      	ldr	r3, [pc, #560]	; (80028c0 <TaskMotor+0x29c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f04f 31ff 	mov.w	r1, #4294967295
 8002696:	4618      	mov	r0, r3
 8002698:	f00f faa8 	bl	8011bec <osMutexWait>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f040 8103 	bne.w	80028aa <TaskMotor+0x286>
		{
			// Hardware safety
			if (SWA < 10)
 80026a4:	4b87      	ldr	r3, [pc, #540]	; (80028c4 <TaskMotor+0x2a0>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	2b09      	cmp	r3, #9
 80026aa:	d806      	bhi.n	80026ba <TaskMotor+0x96>
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_SET);
 80026ac:	2201      	movs	r2, #1
 80026ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026b2:	4885      	ldr	r0, [pc, #532]	; (80028c8 <TaskMotor+0x2a4>)
 80026b4:	f009 f976 	bl	800b9a4 <HAL_GPIO_WritePin>
 80026b8:	e005      	b.n	80026c6 <TaskMotor+0xa2>

			else
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 80026ba:	2200      	movs	r2, #0
 80026bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026c0:	4881      	ldr	r0, [pc, #516]	; (80028c8 <TaskMotor+0x2a4>)
 80026c2:	f009 f96f 	bl	800b9a4 <HAL_GPIO_WritePin>

			// Software safety
			if (SWB < 10)
 80026c6:	4b81      	ldr	r3, [pc, #516]	; (80028cc <TaskMotor+0x2a8>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	2b09      	cmp	r3, #9
 80026cc:	d803      	bhi.n	80026d6 <TaskMotor+0xb2>
				Rotors = false;
 80026ce:	4b80      	ldr	r3, [pc, #512]	; (80028d0 <TaskMotor+0x2ac>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e002      	b.n	80026dc <TaskMotor+0xb8>
			else
				Rotors = true;
 80026d6:	4b7e      	ldr	r3, [pc, #504]	; (80028d0 <TaskMotor+0x2ac>)
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]

			// Setting PWM speed
			if (Rotors)
 80026dc:	4b7c      	ldr	r3, [pc, #496]	; (80028d0 <TaskMotor+0x2ac>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80ca 	beq.w	800287a <TaskMotor+0x256>
				int32_t ESC1_Speed;
				int32_t ESC2_Speed;
				int32_t ESC3_Speed;
				int32_t ESC4_Speed;

				if (Throttle_in > 50)
 80026e6:	4b7b      	ldr	r3, [pc, #492]	; (80028d4 <TaskMotor+0x2b0>)
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	2b32      	cmp	r3, #50	; 0x32
 80026ec:	f240 80a4 	bls.w	8002838 <TaskMotor+0x214>
				{
					if (SWD < 10)
 80026f0:	4b79      	ldr	r3, [pc, #484]	; (80028d8 <TaskMotor+0x2b4>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	2b09      	cmp	r3, #9
 80026f6:	d84f      	bhi.n	8002798 <TaskMotor+0x174>
					{
						if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK)
 80026f8:	4b78      	ldr	r3, [pc, #480]	; (80028dc <TaskMotor+0x2b8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002700:	4618      	mov	r0, r3
 8002702:	f00f fa73 	bl	8011bec <osMutexWait>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d13f      	bne.n	800278c <TaskMotor+0x168>
						{
							ESC1_Speed = Throttle_in + Roll_controlled + Pitch_controlled - Yaw_controlled;
 800270c:	4b71      	ldr	r3, [pc, #452]	; (80028d4 <TaskMotor+0x2b0>)
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	4b73      	ldr	r3, [pc, #460]	; (80028e0 <TaskMotor+0x2bc>)
 8002714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002718:	4413      	add	r3, r2
 800271a:	4a72      	ldr	r2, [pc, #456]	; (80028e4 <TaskMotor+0x2c0>)
 800271c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002720:	4413      	add	r3, r2
 8002722:	4a71      	ldr	r2, [pc, #452]	; (80028e8 <TaskMotor+0x2c4>)
 8002724:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
							ESC2_Speed = Throttle_in - Roll_controlled + Pitch_controlled + Yaw_controlled;
 800272c:	4b69      	ldr	r3, [pc, #420]	; (80028d4 <TaskMotor+0x2b0>)
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	4b6b      	ldr	r3, [pc, #428]	; (80028e0 <TaskMotor+0x2bc>)
 8002734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	4a6a      	ldr	r2, [pc, #424]	; (80028e4 <TaskMotor+0x2c0>)
 800273c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002740:	4413      	add	r3, r2
 8002742:	4a69      	ldr	r2, [pc, #420]	; (80028e8 <TaskMotor+0x2c4>)
 8002744:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002748:	4413      	add	r3, r2
 800274a:	623b      	str	r3, [r7, #32]
							ESC3_Speed = Throttle_in - Roll_controlled - Pitch_controlled - Yaw_controlled;
 800274c:	4b61      	ldr	r3, [pc, #388]	; (80028d4 <TaskMotor+0x2b0>)
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	4b63      	ldr	r3, [pc, #396]	; (80028e0 <TaskMotor+0x2bc>)
 8002754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	4a62      	ldr	r2, [pc, #392]	; (80028e4 <TaskMotor+0x2c0>)
 800275c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	4a61      	ldr	r2, [pc, #388]	; (80028e8 <TaskMotor+0x2c4>)
 8002764:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	61fb      	str	r3, [r7, #28]
							ESC4_Speed = Throttle_in + Roll_controlled - Pitch_controlled + Yaw_controlled;
 800276c:	4b59      	ldr	r3, [pc, #356]	; (80028d4 <TaskMotor+0x2b0>)
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	4b5b      	ldr	r3, [pc, #364]	; (80028e0 <TaskMotor+0x2bc>)
 8002774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002778:	4413      	add	r3, r2
 800277a:	4a5a      	ldr	r2, [pc, #360]	; (80028e4 <TaskMotor+0x2c0>)
 800277c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	4a59      	ldr	r2, [pc, #356]	; (80028e8 <TaskMotor+0x2c4>)
 8002784:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002788:	4413      	add	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
						}
						osMutexRelease(ControllerMutexHandle);
 800278c:	4b53      	ldr	r3, [pc, #332]	; (80028dc <TaskMotor+0x2b8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f00f fa79 	bl	8011c88 <osMutexRelease>
 8002796:	e057      	b.n	8002848 <TaskMotor+0x224>
					}
					else
					{
						if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK)
 8002798:	4b50      	ldr	r3, [pc, #320]	; (80028dc <TaskMotor+0x2b8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f04f 31ff 	mov.w	r1, #4294967295
 80027a0:	4618      	mov	r0, r3
 80027a2:	f00f fa23 	bl	8011bec <osMutexWait>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d13f      	bne.n	800282c <TaskMotor+0x208>
						{
							ESC1_Speed = Throttle_controlled + Roll_controlled + Pitch_controlled - Yaw_controlled;
 80027ac:	4b4f      	ldr	r3, [pc, #316]	; (80028ec <TaskMotor+0x2c8>)
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b4b      	ldr	r3, [pc, #300]	; (80028e0 <TaskMotor+0x2bc>)
 80027b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b8:	4413      	add	r3, r2
 80027ba:	4a4a      	ldr	r2, [pc, #296]	; (80028e4 <TaskMotor+0x2c0>)
 80027bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80027c0:	4413      	add	r3, r2
 80027c2:	4a49      	ldr	r2, [pc, #292]	; (80028e8 <TaskMotor+0x2c4>)
 80027c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
							ESC2_Speed = Throttle_controlled - Roll_controlled + Pitch_controlled + Yaw_controlled;
 80027cc:	4b47      	ldr	r3, [pc, #284]	; (80028ec <TaskMotor+0x2c8>)
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4b43      	ldr	r3, [pc, #268]	; (80028e0 <TaskMotor+0x2bc>)
 80027d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	4a42      	ldr	r2, [pc, #264]	; (80028e4 <TaskMotor+0x2c0>)
 80027dc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80027e0:	4413      	add	r3, r2
 80027e2:	4a41      	ldr	r2, [pc, #260]	; (80028e8 <TaskMotor+0x2c4>)
 80027e4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80027e8:	4413      	add	r3, r2
 80027ea:	623b      	str	r3, [r7, #32]
							ESC3_Speed = Throttle_controlled - Roll_controlled - Pitch_controlled - Yaw_controlled;
 80027ec:	4b3f      	ldr	r3, [pc, #252]	; (80028ec <TaskMotor+0x2c8>)
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b3b      	ldr	r3, [pc, #236]	; (80028e0 <TaskMotor+0x2bc>)
 80027f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	4a3a      	ldr	r2, [pc, #232]	; (80028e4 <TaskMotor+0x2c0>)
 80027fc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	4a39      	ldr	r2, [pc, #228]	; (80028e8 <TaskMotor+0x2c4>)
 8002804:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	61fb      	str	r3, [r7, #28]
							ESC4_Speed = Throttle_controlled + Roll_controlled - Pitch_controlled + Yaw_controlled;
 800280c:	4b37      	ldr	r3, [pc, #220]	; (80028ec <TaskMotor+0x2c8>)
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	4b33      	ldr	r3, [pc, #204]	; (80028e0 <TaskMotor+0x2bc>)
 8002814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002818:	4413      	add	r3, r2
 800281a:	4a32      	ldr	r2, [pc, #200]	; (80028e4 <TaskMotor+0x2c0>)
 800281c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	4a31      	ldr	r2, [pc, #196]	; (80028e8 <TaskMotor+0x2c4>)
 8002824:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002828:	4413      	add	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
						}
						osMutexRelease(ControllerMutexHandle);
 800282c:	4b2b      	ldr	r3, [pc, #172]	; (80028dc <TaskMotor+0x2b8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f00f fa29 	bl	8011c88 <osMutexRelease>
 8002836:	e007      	b.n	8002848 <TaskMotor+0x224>
					}
				}
				else
				{
					ESC1_Speed = 0;
 8002838:	2300      	movs	r3, #0
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
					ESC2_Speed = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	623b      	str	r3, [r7, #32]
					ESC3_Speed = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	61fb      	str	r3, [r7, #28]
					ESC4_Speed = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	61bb      	str	r3, [r7, #24]
				}

				TIM1->CCR1 = ConvertToPwm(ESC1_Speed);
 8002848:	4c1c      	ldr	r4, [pc, #112]	; (80028bc <TaskMotor+0x298>)
 800284a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800284c:	f7ff fed0 	bl	80025f0 <ConvertToPwm>
 8002850:	4603      	mov	r3, r0
 8002852:	6363      	str	r3, [r4, #52]	; 0x34
				TIM1->CCR2 = ConvertToPwm(ESC2_Speed);
 8002854:	4c19      	ldr	r4, [pc, #100]	; (80028bc <TaskMotor+0x298>)
 8002856:	6a38      	ldr	r0, [r7, #32]
 8002858:	f7ff feca 	bl	80025f0 <ConvertToPwm>
 800285c:	4603      	mov	r3, r0
 800285e:	63a3      	str	r3, [r4, #56]	; 0x38
				TIM1->CCR3 = ConvertToPwm(ESC3_Speed);
 8002860:	4c16      	ldr	r4, [pc, #88]	; (80028bc <TaskMotor+0x298>)
 8002862:	69f8      	ldr	r0, [r7, #28]
 8002864:	f7ff fec4 	bl	80025f0 <ConvertToPwm>
 8002868:	4603      	mov	r3, r0
 800286a:	63e3      	str	r3, [r4, #60]	; 0x3c
				TIM1->CCR4 = ConvertToPwm(ESC4_Speed);
 800286c:	4c13      	ldr	r4, [pc, #76]	; (80028bc <TaskMotor+0x298>)
 800286e:	69b8      	ldr	r0, [r7, #24]
 8002870:	f7ff febe 	bl	80025f0 <ConvertToPwm>
 8002874:	4603      	mov	r3, r0
 8002876:	6423      	str	r3, [r4, #64]	; 0x40
 8002878:	e017      	b.n	80028aa <TaskMotor+0x286>
			}
			else
			{
				TIM1->CCR1 = ConvertToPwm(0);
 800287a:	4c10      	ldr	r4, [pc, #64]	; (80028bc <TaskMotor+0x298>)
 800287c:	2000      	movs	r0, #0
 800287e:	f7ff feb7 	bl	80025f0 <ConvertToPwm>
 8002882:	4603      	mov	r3, r0
 8002884:	6363      	str	r3, [r4, #52]	; 0x34
				TIM1->CCR2 = ConvertToPwm(0);
 8002886:	4c0d      	ldr	r4, [pc, #52]	; (80028bc <TaskMotor+0x298>)
 8002888:	2000      	movs	r0, #0
 800288a:	f7ff feb1 	bl	80025f0 <ConvertToPwm>
 800288e:	4603      	mov	r3, r0
 8002890:	63a3      	str	r3, [r4, #56]	; 0x38
				TIM1->CCR3 = ConvertToPwm(0);
 8002892:	4c0a      	ldr	r4, [pc, #40]	; (80028bc <TaskMotor+0x298>)
 8002894:	2000      	movs	r0, #0
 8002896:	f7ff feab 	bl	80025f0 <ConvertToPwm>
 800289a:	4603      	mov	r3, r0
 800289c:	63e3      	str	r3, [r4, #60]	; 0x3c
				TIM1->CCR4 = ConvertToPwm(0);
 800289e:	4c07      	ldr	r4, [pc, #28]	; (80028bc <TaskMotor+0x298>)
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7ff fea5 	bl	80025f0 <ConvertToPwm>
 80028a6:	4603      	mov	r3, r0
 80028a8:	6423      	str	r3, [r4, #64]	; 0x40
			}
		}
		osMutexRelease(RemoteDataMutexHandle);
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <TaskMotor+0x29c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f00f f9ea 	bl	8011c88 <osMutexRelease>
	{
 80028b4:	e6e2      	b.n	800267c <TaskMotor+0x58>
 80028b6:	bf00      	nop
 80028b8:	20000b24 	.word	0x20000b24
 80028bc:	40010000 	.word	0x40010000
 80028c0:	20000dd4 	.word	0x20000dd4
 80028c4:	200003c0 	.word	0x200003c0
 80028c8:	40021000 	.word	0x40021000
 80028cc:	200003c2 	.word	0x200003c2
 80028d0:	20000002 	.word	0x20000002
 80028d4:	200003b0 	.word	0x200003b0
 80028d8:	200003c6 	.word	0x200003c6
 80028dc:	20000de8 	.word	0x20000de8
 80028e0:	200003b6 	.word	0x200003b6
 80028e4:	200003ba 	.word	0x200003ba
 80028e8:	200003be 	.word	0x200003be
 80028ec:	200003b2 	.word	0x200003b2

080028f0 <TaskPower>:
#include "Globals.h"

void TaskPower(void const *argument)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1; //Hz
 80028f8:	2301      	movs	r3, #1
 80028fa:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 80028fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	fbb2 f3f3 	udiv	r3, r2, r3
 8002906:	613b      	str	r3, [r7, #16]

	// ...

	xLastWakeTime = xTaskGetTickCount();
 8002908:	f010 fd08 	bl	801331c <xTaskGetTickCount>
 800290c:	4603      	mov	r3, r0
 800290e:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for (;;)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8002910:	f107 0308 	add.w	r3, r7, #8
 8002914:	6939      	ldr	r1, [r7, #16]
 8002916:	4618      	mov	r0, r3
 8002918:	f010 fb2c 	bl	8012f74 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 800291c:	f010 fcfe 	bl	801331c <xTaskGetTickCount>
 8002920:	60f8      	str	r0, [r7, #12]
	{
 8002922:	e7f5      	b.n	8002910 <TaskPower+0x20>

08002924 <TaskRemote>:
// Task Remote
// - Starts Interrupt UART communication with the Receiver
// - If a complete package of data has arrived from the Remote Controller to the Buffer,
//   it processes that and saves it to the corresponding Global variables.
void TaskRemote(void const *argument)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	; 0x28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50; //Hz
 800292c:	2332      	movs	r3, #50	; 0x32
 800292e:	61bb      	str	r3, [r7, #24]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8002930:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	fbb2 f3f3 	udiv	r3, r2, r3
 800293a:	617b      	str	r3, [r7, #20]

	static uint16_t channelValues[IBUS_MAXCHANNELS];// Output values of the channels (1000 ... 2000)

	HAL_UART_Receive_DMA(&huart2, &Uart2Buffer, 64);
 800293c:	2240      	movs	r2, #64	; 0x40
 800293e:	496b      	ldr	r1, [pc, #428]	; (8002aec <TaskRemote+0x1c8>)
 8002940:	486b      	ldr	r0, [pc, #428]	; (8002af0 <TaskRemote+0x1cc>)
 8002942:	f00d fce6 	bl	8010312 <HAL_UART_Receive_DMA>

	xLastWakeTime = xTaskGetTickCount();
 8002946:	f010 fce9 	bl	801331c <xTaskGetTickCount>
 800294a:	4603      	mov	r3, r0
 800294c:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 800294e:	f107 030c 	add.w	r3, r7, #12
 8002952:	6979      	ldr	r1, [r7, #20]
 8002954:	4618      	mov	r0, r3
 8002956:	f010 fb0d 	bl	8012f74 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 800295a:	f010 fcdf 	bl	801331c <xTaskGetTickCount>
 800295e:	6138      	str	r0, [r7, #16]

		if (osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever) == osOK)
 8002960:	4b64      	ldr	r3, [pc, #400]	; (8002af4 <TaskRemote+0x1d0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f04f 31ff 	mov.w	r1, #4294967295
 8002968:	4618      	mov	r0, r3
 800296a:	f00f f9f5 	bl	8011d58 <osSemaphoreWait>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1ec      	bne.n	800294e <TaskRemote+0x2a>
		{
			//Find the last complete 32 bit iBus packet in the 64 bit RemoteBuffer
			if (osMutexWait(RemoteBufferMutexHandle, osWaitForever) == osOK)
 8002974:	4b60      	ldr	r3, [pc, #384]	; (8002af8 <TaskRemote+0x1d4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f04f 31ff 	mov.w	r1, #4294967295
 800297c:	4618      	mov	r0, r3
 800297e:	f00f f935 	bl	8011bec <osMutexWait>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d12f      	bne.n	80029e8 <TaskRemote+0xc4>
			{
				for (int i = 32; i >= 0; i--)
 8002988:	2320      	movs	r3, #32
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
 800298c:	e024      	b.n	80029d8 <TaskRemote+0xb4>
				{
					if (RemoteBuffer[i] == 0x20 && RemoteBuffer[i+1] == 0x40)
 800298e:	4a5b      	ldr	r2, [pc, #364]	; (8002afc <TaskRemote+0x1d8>)
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	4413      	add	r3, r2
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b20      	cmp	r3, #32
 800299a:	d11a      	bne.n	80029d2 <TaskRemote+0xae>
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	3301      	adds	r3, #1
 80029a0:	4a56      	ldr	r2, [pc, #344]	; (8002afc <TaskRemote+0x1d8>)
 80029a2:	5cd3      	ldrb	r3, [r2, r3]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b40      	cmp	r3, #64	; 0x40
 80029a8:	d113      	bne.n	80029d2 <TaskRemote+0xae>
					{
						for (int j = 0; j < IBUS_PACKET_SIZE; j++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	623b      	str	r3, [r7, #32]
 80029ae:	e00d      	b.n	80029cc <TaskRemote+0xa8>
							LastIbusPacket[j] = RemoteBuffer[i+j];
 80029b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	4413      	add	r3, r2
 80029b6:	4a51      	ldr	r2, [pc, #324]	; (8002afc <TaskRemote+0x1d8>)
 80029b8:	5cd3      	ldrb	r3, [r2, r3]
 80029ba:	b2d9      	uxtb	r1, r3
 80029bc:	4a50      	ldr	r2, [pc, #320]	; (8002b00 <TaskRemote+0x1dc>)
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	4413      	add	r3, r2
 80029c2:	460a      	mov	r2, r1
 80029c4:	701a      	strb	r2, [r3, #0]
						for (int j = 0; j < IBUS_PACKET_SIZE; j++)
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	3301      	adds	r3, #1
 80029ca:	623b      	str	r3, [r7, #32]
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	2b1f      	cmp	r3, #31
 80029d0:	ddee      	ble.n	80029b0 <TaskRemote+0x8c>
				for (int i = 32; i >= 0; i--)
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	3b01      	subs	r3, #1
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	2b00      	cmp	r3, #0
 80029dc:	dad7      	bge.n	800298e <TaskRemote+0x6a>
					}
				}
				osMutexRelease(RemoteBufferMutexHandle);
 80029de:	4b46      	ldr	r3, [pc, #280]	; (8002af8 <TaskRemote+0x1d4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f00f f950 	bl	8011c88 <osMutexRelease>
			// And cycle through the raw data and convert it to actual integer values
			// ibus pattern example:
			// i=0  1     2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21  22 23 24  25  26 27  28 28  30 31
			//   20 40    DB 5  DC 5  54 5  DC 5  E8 3  D0 7  D2 5  E8 3  DC 5  DC 5   DC 5   DC 5   DC 5   DC 5   DA F3
			// | Header | CH1 | CH2 | CH3 | CH4 | CH5 | CH6 | CH7 | CH8 | CH9 | CH10 | CH11 | CH12 | CH13 | CH14 | Checksum |
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
 80029ec:	e018      	b.n	8002a20 <TaskRemote+0xfc>
				channelValues[i] = (LastIbusPacket[3 + 2 * i] << 8) + LastIbusPacket[2 + 2 * i];
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	3303      	adds	r3, #3
 80029f4:	4a42      	ldr	r2, [pc, #264]	; (8002b00 <TaskRemote+0x1dc>)
 80029f6:	5cd3      	ldrb	r3, [r2, r3]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	3301      	adds	r3, #1
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	493e      	ldr	r1, [pc, #248]	; (8002b00 <TaskRemote+0x1dc>)
 8002a08:	5ccb      	ldrb	r3, [r1, r3]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	b299      	uxth	r1, r3
 8002a12:	4a3c      	ldr	r2, [pc, #240]	; (8002b04 <TaskRemote+0x1e0>)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	61fb      	str	r3, [r7, #28]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	2b09      	cmp	r3, #9
 8002a24:	dde3      	ble.n	80029ee <TaskRemote+0xca>

			// Setting the speed
			if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8002a26:	4b38      	ldr	r3, [pc, #224]	; (8002b08 <TaskRemote+0x1e4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f04f 31ff 	mov.w	r1, #4294967295
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f00f f8dc 	bl	8011bec <osMutexWait>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d151      	bne.n	8002ade <TaskRemote+0x1ba>
			{
				Throttle_in = channelValues[THROTTLE_CHANNEL] - 1000;
 8002a3a:	4b32      	ldr	r3, [pc, #200]	; (8002b04 <TaskRemote+0x1e0>)
 8002a3c:	889b      	ldrh	r3, [r3, #4]
 8002a3e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	4b31      	ldr	r3, [pc, #196]	; (8002b0c <TaskRemote+0x1e8>)
 8002a46:	801a      	strh	r2, [r3, #0]
				// Limit input Throttle, so the Controllers can keep the drone stable at high RPM, too
				if (Throttle_in > 800)
 8002a48:	4b30      	ldr	r3, [pc, #192]	; (8002b0c <TaskRemote+0x1e8>)
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002a50:	d903      	bls.n	8002a5a <TaskRemote+0x136>
					Throttle_in = 800;
 8002a52:	4b2e      	ldr	r3, [pc, #184]	; (8002b0c <TaskRemote+0x1e8>)
 8002a54:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002a58:	801a      	strh	r2, [r3, #0]

				Pitch_in = channelValues[PITCH_CHANNEL] - 1500;
 8002a5a:	4b2a      	ldr	r3, [pc, #168]	; (8002b04 <TaskRemote+0x1e0>)
 8002a5c:	885b      	ldrh	r3, [r3, #2]
 8002a5e:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	b21a      	sxth	r2, r3
 8002a66:	4b2a      	ldr	r3, [pc, #168]	; (8002b10 <TaskRemote+0x1ec>)
 8002a68:	801a      	strh	r2, [r3, #0]
				Roll_in = channelValues[ROLL_CHANNEL] - 1500;
 8002a6a:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <TaskRemote+0x1e0>)
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	b21a      	sxth	r2, r3
 8002a76:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <TaskRemote+0x1f0>)
 8002a78:	801a      	strh	r2, [r3, #0]
				Yaw_in = channelValues[YAW_CHANNEL] - 1500;
 8002a7a:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <TaskRemote+0x1e0>)
 8002a7c:	88db      	ldrh	r3, [r3, #6]
 8002a7e:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	b21a      	sxth	r2, r3
 8002a86:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <TaskRemote+0x1f4>)
 8002a88:	801a      	strh	r2, [r3, #0]

				SWA = channelValues[SWA_CHANNEL] - 1000;
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	; (8002b04 <TaskRemote+0x1e0>)
 8002a8c:	891b      	ldrh	r3, [r3, #8]
 8002a8e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <TaskRemote+0x1f8>)
 8002a96:	801a      	strh	r2, [r3, #0]
				SWB = channelValues[SWB_CHANNEL] - 1000;
 8002a98:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <TaskRemote+0x1e0>)
 8002a9a:	895b      	ldrh	r3, [r3, #10]
 8002a9c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	4b1f      	ldr	r3, [pc, #124]	; (8002b20 <TaskRemote+0x1fc>)
 8002aa4:	801a      	strh	r2, [r3, #0]
				SWC = channelValues[SWC_CHANNEL] - 1000;
 8002aa6:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <TaskRemote+0x1e0>)
 8002aa8:	899b      	ldrh	r3, [r3, #12]
 8002aaa:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <TaskRemote+0x200>)
 8002ab2:	801a      	strh	r2, [r3, #0]
				SWD = channelValues[SWD_CHANNEL] - 1000;
 8002ab4:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <TaskRemote+0x1e0>)
 8002ab6:	89db      	ldrh	r3, [r3, #14]
 8002ab8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <TaskRemote+0x204>)
 8002ac0:	801a      	strh	r2, [r3, #0]
				VRA = channelValues[VRA_CHANNEL] - 1000;
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <TaskRemote+0x1e0>)
 8002ac4:	8a1b      	ldrh	r3, [r3, #16]
 8002ac6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <TaskRemote+0x208>)
 8002ace:	801a      	strh	r2, [r3, #0]
				VRB = channelValues[VRB_CHANNEL] - 1000;
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <TaskRemote+0x1e0>)
 8002ad2:	8a5b      	ldrh	r3, [r3, #18]
 8002ad4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <TaskRemote+0x20c>)
 8002adc:	801a      	strh	r2, [r3, #0]
			}
			osMutexRelease(RemoteDataMutexHandle);
 8002ade:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <TaskRemote+0x1e4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f00f f8d0 	bl	8011c88 <osMutexRelease>
	{
 8002ae8:	e731      	b.n	800294e <TaskRemote+0x2a>
 8002aea:	bf00      	nop
 8002aec:	20000514 	.word	0x20000514
 8002af0:	20000c44 	.word	0x20000c44
 8002af4:	20000df4 	.word	0x20000df4
 8002af8:	20000de4 	.word	0x20000de4
 8002afc:	20000554 	.word	0x20000554
 8002b00:	20000594 	.word	0x20000594
 8002b04:	20000754 	.word	0x20000754
 8002b08:	20000dd4 	.word	0x20000dd4
 8002b0c:	200003b0 	.word	0x200003b0
 8002b10:	200003b8 	.word	0x200003b8
 8002b14:	200003b4 	.word	0x200003b4
 8002b18:	200003bc 	.word	0x200003bc
 8002b1c:	200003c0 	.word	0x200003c0
 8002b20:	200003c2 	.word	0x200003c2
 8002b24:	200003c4 	.word	0x200003c4
 8002b28:	200003c6 	.word	0x200003c6
 8002b2c:	200003c8 	.word	0x200003c8
 8002b30:	200003ca 	.word	0x200003ca

08002b34 <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8002b3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b42:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002b58 <FusionRadiansToDegrees+0x24>
 8002b46:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	42652ee0 	.word	0x42652ee0

08002b5c <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8002b66:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b6a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002b6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b76:	d802      	bhi.n	8002b7e <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8002b78:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8002bac <FusionAsin+0x50>
 8002b7c:	e011      	b.n	8002ba2 <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 8002b7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8e:	db02      	blt.n	8002b96 <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 8002b90:	eddf 7a07 	vldr	s15, [pc, #28]	; 8002bb0 <FusionAsin+0x54>
 8002b94:	e005      	b.n	8002ba2 <FusionAsin+0x46>
    }
    return asinf(value);
 8002b96:	ed97 0a01 	vldr	s0, [r7, #4]
 8002b9a:	f016 fe09 	bl	80197b0 <asinf>
 8002b9e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	bfc90fdb 	.word	0xbfc90fdb
 8002bb0:	3fc90fdb 	.word	0x3fc90fdb

08002bb4 <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b090      	sub	sp, #64	; 0x40
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	eeb0 6a40 	vmov.f32	s12, s0
 8002bbe:	eef0 6a60 	vmov.f32	s13, s1
 8002bc2:	eeb0 7a41 	vmov.f32	s14, s2
 8002bc6:	eef0 7a61 	vmov.f32	s15, s3
 8002bca:	ed87 6a04 	vstr	s12, [r7, #16]
 8002bce:	edc7 6a05 	vstr	s13, [r7, #20]
 8002bd2:	ed87 7a06 	vstr	s14, [r7, #24]
 8002bd6:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 8002bda:	ed97 7a06 	vldr	s14, [r7, #24]
 8002bde:	edd7 7a06 	vldr	s15, [r7, #24]
 8002be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002bea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bee:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 8002bf2:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bf6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bfe:	edd7 6a06 	vldr	s13, [r7, #24]
 8002c02:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c0a:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002c0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c12:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c22:	eef0 0a67 	vmov.f32	s1, s15
 8002c26:	eeb0 0a66 	vmov.f32	s0, s13
 8002c2a:	f016 fded 	bl	8019808 <atan2f>
 8002c2e:	eef0 7a40 	vmov.f32	s15, s0
 8002c32:	eeb0 0a67 	vmov.f32	s0, s15
 8002c36:	f7ff ff7d 	bl	8002b34 <FusionRadiansToDegrees>
 8002c3a:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8002c3e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 8002c42:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c46:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c52:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c62:	eeb0 0a67 	vmov.f32	s0, s15
 8002c66:	f7ff ff79 	bl	8002b5c <FusionAsin>
 8002c6a:	eef0 7a40 	vmov.f32	s15, s0
 8002c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c72:	f7ff ff5f 	bl	8002b34 <FusionRadiansToDegrees>
 8002c76:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8002c7a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 8002c7e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c82:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c8a:	edd7 6a05 	vldr	s13, [r7, #20]
 8002c8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c96:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002c9a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cae:	eef0 0a67 	vmov.f32	s1, s15
 8002cb2:	eeb0 0a66 	vmov.f32	s0, s13
 8002cb6:	f016 fda7 	bl	8019808 <atan2f>
 8002cba:	eef0 7a40 	vmov.f32	s15, s0
 8002cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc2:	f7ff ff37 	bl	8002b34 <FusionRadiansToDegrees>
 8002cc6:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8002cca:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 8002cce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cd2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002cd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cd8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002cdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce2:	ee06 1a90 	vmov	s13, r1
 8002ce6:	ee07 2a10 	vmov	s14, r2
 8002cea:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8002cee:	eeb0 0a66 	vmov.f32	s0, s13
 8002cf2:	eef0 0a47 	vmov.f32	s1, s14
 8002cf6:	eeb0 1a67 	vmov.f32	s2, s15
 8002cfa:	3740      	adds	r7, #64	; 0x40
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <TaskSensorData>:
extern osMutexId ImuMutexHandle;
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;

void TaskSensorData(void const *argument)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b0d8      	sub	sp, #352	; 0x160
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002d0a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002d0e:	6018      	str	r0, [r3, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 8002d10:	23c8      	movs	r3, #200	; 0xc8
 8002d12:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8002d16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d1a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d22:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

	bool RecalibrateGyro = false;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
	bool RecalibrateFusion = false;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e

	// Low Pass Filters
	LPF GyroLPF[3];

	GyroLPF[0].T = 1.0 / xFrequency;
 8002d32:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8002d36:	f7fd fc0d 	bl	8000554 <__aeabi_ui2d>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	f04f 0000 	mov.w	r0, #0
 8002d42:	49ca      	ldr	r1, [pc, #808]	; (800306c <TaskSensorData+0x36c>)
 8002d44:	f7fd fdaa 	bl	800089c <__aeabi_ddiv>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4619      	mov	r1, r3
 8002d50:	f7fd ff72 	bl	8000c38 <__aeabi_d2f>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	GyroLPF[0].f_cutoff = 40;
 8002d5a:	4bc5      	ldr	r3, [pc, #788]	; (8003070 <TaskSensorData+0x370>)
 8002d5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	LPF_Init(&(GyroLPF[0]));
 8002d60:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe fd32 	bl	80017ce <LPF_Init>

	GyroLPF[1].T = 1.0 / xFrequency;
 8002d6a:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8002d6e:	f7fd fbf1 	bl	8000554 <__aeabi_ui2d>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	f04f 0000 	mov.w	r0, #0
 8002d7a:	49bc      	ldr	r1, [pc, #752]	; (800306c <TaskSensorData+0x36c>)
 8002d7c:	f7fd fd8e 	bl	800089c <__aeabi_ddiv>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4610      	mov	r0, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	f7fd ff56 	bl	8000c38 <__aeabi_d2f>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	GyroLPF[1].f_cutoff = 40;
 8002d92:	4bb7      	ldr	r3, [pc, #732]	; (8003070 <TaskSensorData+0x370>)
 8002d94:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	LPF_Init(&(GyroLPF[1]));
 8002d98:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d9c:	331c      	adds	r3, #28
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe fd15 	bl	80017ce <LPF_Init>

	GyroLPF[2].T = 1.0 / xFrequency;
 8002da4:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8002da8:	f7fd fbd4 	bl	8000554 <__aeabi_ui2d>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	f04f 0000 	mov.w	r0, #0
 8002db4:	49ad      	ldr	r1, [pc, #692]	; (800306c <TaskSensorData+0x36c>)
 8002db6:	f7fd fd71 	bl	800089c <__aeabi_ddiv>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f7fd ff39 	bl	8000c38 <__aeabi_d2f>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	GyroLPF[2].f_cutoff = 40;
 8002dcc:	4ba8      	ldr	r3, [pc, #672]	; (8003070 <TaskSensorData+0x370>)
 8002dce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	LPF_Init(&(GyroLPF[2]));
 8002dd2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002dd6:	3338      	adds	r3, #56	; 0x38
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe fcf8 	bl	80017ce <LPF_Init>

	// Initialize
	FusionGyroOffset gyroOffset;
	FusionAhrs ahrs;

	FusionGyroOffsetInitialise(&gyroOffset, xFrequency);
 8002dde:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002de2:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8002de6:	4618      	mov	r0, r3
 8002de8:	f005 fee8 	bl	8008bbc <FusionGyroOffsetInitialise>
	FusionAhrsInitialise(&ahrs);
 8002dec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002df0:	4618      	mov	r0, r3
 8002df2:	f004 fc65 	bl	80076c0 <FusionAhrsInitialise>

	// Set AHRS algorithm settings
	FusionAhrsSettings fusionSettings;
	fusionSettings.convention = FusionConventionNwu;
 8002df6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002dfa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
	fusionSettings.gain = 0.5f;
 8002e02:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002e06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e0a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002e0e:	605a      	str	r2, [r3, #4]
	fusionSettings.gyroscopeRange = 2000.0f;
 8002e10:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002e14:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e18:	4a96      	ldr	r2, [pc, #600]	; (8003074 <TaskSensorData+0x374>)
 8002e1a:	609a      	str	r2, [r3, #8]
	fusionSettings.accelerationRejection = 10.0f;
 8002e1c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002e20:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e24:	4a94      	ldr	r2, [pc, #592]	; (8003078 <TaskSensorData+0x378>)
 8002e26:	60da      	str	r2, [r3, #12]
	fusionSettings.magneticRejection = 10.0f;
 8002e28:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002e2c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e30:	4a91      	ldr	r2, [pc, #580]	; (8003078 <TaskSensorData+0x378>)
 8002e32:	611a      	str	r2, [r3, #16]
	fusionSettings.recoveryTriggerPeriod = 5.0f * xFrequency;
 8002e34:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e38:	ee07 3a90 	vmov	s15, r3
 8002e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e40:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e4c:	ee17 2a90 	vmov	r2, s15
 8002e50:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002e54:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e58:	615a      	str	r2, [r3, #20]
	FusionAhrsSetSettings(&ahrs, &fusionSettings);
 8002e5a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e62:	4611      	mov	r1, r2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f004 fcad 	bl	80077c4 <FusionAhrsSetSettings>



	xLastWakeTime = xTaskGetTickCount();
 8002e6a:	f010 fa57 	bl	801331c <xTaskGetTickCount>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8002e74:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8002e78:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f010 f879 	bl	8012f74 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8002e82:	f010 fa4b 	bl	801331c <xTaskGetTickCount>
 8002e86:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150

		// IMU Data
		if (IsImuAvailable)
 8002e8a:	4b7c      	ldr	r3, [pc, #496]	; (800307c <TaskSensorData+0x37c>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 808f 	beq.w	8002fb2 <TaskSensorData+0x2b2>
		{
			if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8002e94:	4b7a      	ldr	r3, [pc, #488]	; (8003080 <TaskSensorData+0x380>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f04f 31ff 	mov.w	r1, #4294967295
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f00e fea5 	bl	8011bec <osMutexWait>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10b      	bne.n	8002ec0 <TaskSensorData+0x1c0>
			{
				if (SWC > 990)
 8002ea8:	4b76      	ldr	r3, [pc, #472]	; (8003084 <TaskSensorData+0x384>)
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	f240 32de 	movw	r2, #990	; 0x3de
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d905      	bls.n	8002ec0 <TaskSensorData+0x1c0>
				{
					RecalibrateGyro = true;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
					RecalibrateFusion = true;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
				}
			}
			osMutexRelease(RemoteDataMutexHandle);
 8002ec0:	4b6f      	ldr	r3, [pc, #444]	; (8003080 <TaskSensorData+0x380>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f00e fedf 	bl	8011c88 <osMutexRelease>

			MPU_readProcessedData(&hspi2, &MPU9250);
 8002eca:	496f      	ldr	r1, [pc, #444]	; (8003088 <TaskSensorData+0x388>)
 8002ecc:	486f      	ldr	r0, [pc, #444]	; (800308c <TaskSensorData+0x38c>)
 8002ece:	f007 fbfb 	bl	800a6c8 <MPU_readProcessedData>
			BMP280_measure(&BMP280);
 8002ed2:	486f      	ldr	r0, [pc, #444]	; (8003090 <TaskSensorData+0x390>)
 8002ed4:	f006 fc68 	bl	80097a8 <BMP280_measure>

			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 8002ed8:	4b6e      	ldr	r3, [pc, #440]	; (8003094 <TaskSensorData+0x394>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f00e fe83 	bl	8011bec <osMutexWait>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d15d      	bne.n	8002fa8 <TaskSensorData+0x2a8>
			{
				if (RecalibrateGyro)
 8002eec:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00e      	beq.n	8002f12 <TaskSensorData+0x212>
				{
					HAL_UART_Transmit(&huart3, "CALIBRATING GYRO...\r\n", strlen("CALIBRATING GYRO...\r\n"), HAL_MAX_DELAY);
 8002ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef8:	2215      	movs	r2, #21
 8002efa:	4967      	ldr	r1, [pc, #412]	; (8003098 <TaskSensorData+0x398>)
 8002efc:	4867      	ldr	r0, [pc, #412]	; (800309c <TaskSensorData+0x39c>)
 8002efe:	f00d f941 	bl	8010184 <HAL_UART_Transmit>
					MPU_calibrateGyro(&hspi2, &MPU9250, 20);
 8002f02:	2214      	movs	r2, #20
 8002f04:	4960      	ldr	r1, [pc, #384]	; (8003088 <TaskSensorData+0x388>)
 8002f06:	4861      	ldr	r0, [pc, #388]	; (800308c <TaskSensorData+0x38c>)
 8002f08:	f007 f9e3 	bl	800a2d2 <MPU_calibrateGyro>

					RecalibrateGyro = false;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
				}

				AccData[0] = MPU9250.sensorData.ax;
 8002f12:	4b5d      	ldr	r3, [pc, #372]	; (8003088 <TaskSensorData+0x388>)
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	4a62      	ldr	r2, [pc, #392]	; (80030a0 <TaskSensorData+0x3a0>)
 8002f18:	6013      	str	r3, [r2, #0]
				AccData[1] = MPU9250.sensorData.ay;
 8002f1a:	4b5b      	ldr	r3, [pc, #364]	; (8003088 <TaskSensorData+0x388>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	4a60      	ldr	r2, [pc, #384]	; (80030a0 <TaskSensorData+0x3a0>)
 8002f20:	6053      	str	r3, [r2, #4]
				AccData[2] = MPU9250.sensorData.az;
 8002f22:	4b59      	ldr	r3, [pc, #356]	; (8003088 <TaskSensorData+0x388>)
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	4a5e      	ldr	r2, [pc, #376]	; (80030a0 <TaskSensorData+0x3a0>)
 8002f28:	6093      	str	r3, [r2, #8]

				TempData = MPU9250.sensorData.temp;
 8002f2a:	4b57      	ldr	r3, [pc, #348]	; (8003088 <TaskSensorData+0x388>)
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	4a5d      	ldr	r2, [pc, #372]	; (80030a4 <TaskSensorData+0x3a4>)
 8002f30:	6013      	str	r3, [r2, #0]

				GyroData[0] = LPF_Calculate(&(GyroLPF[0]), MPU9250.sensorData.gx);
 8002f32:	4b55      	ldr	r3, [pc, #340]	; (8003088 <TaskSensorData+0x388>)
 8002f34:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002f38:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe fcd1 	bl	80018e8 <LPF_Calculate>
 8002f46:	eef0 7a40 	vmov.f32	s15, s0
 8002f4a:	4b57      	ldr	r3, [pc, #348]	; (80030a8 <TaskSensorData+0x3a8>)
 8002f4c:	edc3 7a00 	vstr	s15, [r3]
				GyroData[1] = LPF_Calculate(&(GyroLPF[1]), MPU9250.sensorData.gy);
 8002f50:	4b4d      	ldr	r3, [pc, #308]	; (8003088 <TaskSensorData+0x388>)
 8002f52:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002f56:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002f5a:	331c      	adds	r3, #28
 8002f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fe fcc1 	bl	80018e8 <LPF_Calculate>
 8002f66:	eef0 7a40 	vmov.f32	s15, s0
 8002f6a:	4b4f      	ldr	r3, [pc, #316]	; (80030a8 <TaskSensorData+0x3a8>)
 8002f6c:	edc3 7a01 	vstr	s15, [r3, #4]
				GyroData[2] = LPF_Calculate(&(GyroLPF[2]), MPU9250.sensorData.gz);
 8002f70:	4b45      	ldr	r3, [pc, #276]	; (8003088 <TaskSensorData+0x388>)
 8002f72:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002f76:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002f7a:	3338      	adds	r3, #56	; 0x38
 8002f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fe fcb1 	bl	80018e8 <LPF_Calculate>
 8002f86:	eef0 7a40 	vmov.f32	s15, s0
 8002f8a:	4b47      	ldr	r3, [pc, #284]	; (80030a8 <TaskSensorData+0x3a8>)
 8002f8c:	edc3 7a02 	vstr	s15, [r3, #8]

				BMP_Temp = BMP280.measurement.temperature;
 8002f90:	4b3f      	ldr	r3, [pc, #252]	; (8003090 <TaskSensorData+0x390>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	4a45      	ldr	r2, [pc, #276]	; (80030ac <TaskSensorData+0x3ac>)
 8002f96:	6013      	str	r3, [r2, #0]
				BMP_Pres = BMP280.measurement.pressure;
 8002f98:	4b3d      	ldr	r3, [pc, #244]	; (8003090 <TaskSensorData+0x390>)
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	4a44      	ldr	r2, [pc, #272]	; (80030b0 <TaskSensorData+0x3b0>)
 8002f9e:	6013      	str	r3, [r2, #0]
				BMP_Alt = BMP280.measurement.altitude;
 8002fa0:	4b3b      	ldr	r3, [pc, #236]	; (8003090 <TaskSensorData+0x390>)
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	4a43      	ldr	r2, [pc, #268]	; (80030b4 <TaskSensorData+0x3b4>)
 8002fa6:	6013      	str	r3, [r2, #0]

			}
			osMutexRelease(ImuMutexHandle);
 8002fa8:	4b3a      	ldr	r3, [pc, #232]	; (8003094 <TaskSensorData+0x394>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f00e fe6b 	bl	8011c88 <osMutexRelease>
		}

		// Magnetometer Data
		if (IsMagnAvailable)
 8002fb2:	4b41      	ldr	r3, [pc, #260]	; (80030b8 <TaskSensorData+0x3b8>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8141 	beq.w	800323e <TaskSensorData+0x53e>
		{
			if (osMutexWait(MagnMutexHandle, osWaitForever) == osOK)
 8002fbc:	4b3f      	ldr	r3, [pc, #252]	; (80030bc <TaskSensorData+0x3bc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f00e fe11 	bl	8011bec <osMutexWait>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f040 8131 	bne.w	8003234 <TaskSensorData+0x534>
			{
				struct Vector res = HMC5883L_readRaw();
 8002fd2:	f006 f8cb 	bl	800916c <HMC5883L_readRaw>
 8002fd6:	eef0 6a40 	vmov.f32	s13, s0
 8002fda:	eeb0 7a60 	vmov.f32	s14, s1
 8002fde:	eef0 7a41 	vmov.f32	s15, s2
 8002fe2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002fe6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002fea:	edc3 6a00 	vstr	s13, [r3]
 8002fee:	ed83 7a01 	vstr	s14, [r3, #4]
 8002ff2:	edc3 7a02 	vstr	s15, [r3, #8]
				MAG_X_RAW = res.XAxis;
 8002ff6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002ffa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a2f      	ldr	r2, [pc, #188]	; (80030c0 <TaskSensorData+0x3c0>)
 8003002:	6013      	str	r3, [r2, #0]
				MAG_Y_RAW = res.YAxis;
 8003004:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003008:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4a2d      	ldr	r2, [pc, #180]	; (80030c4 <TaskSensorData+0x3c4>)
 8003010:	6013      	str	r3, [r2, #0]
				MAG_Z_RAW = res.ZAxis;
 8003012:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003016:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4a2a      	ldr	r2, [pc, #168]	; (80030c8 <TaskSensorData+0x3c8>)
 800301e:	6013      	str	r3, [r2, #0]
				//MAG_Y_NORM = MAG_Y_RAW / magnitude;
				//MAG_Z_NORM = MAG_Z_RAW / magnitude;

				//MAG_dir = atan2f(MAG_X_NORM, MAG_Y_NORM)*180.0f/M_PI;

				if (MAG_Y_RAW != 0)
 8003020:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <TaskSensorData+0x3c4>)
 8003022:	edd3 7a00 	vldr	s15, [r3]
 8003026:	eef5 7a40 	vcmp.f32	s15, #0.0
 800302a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302e:	f000 809b 	beq.w	8003168 <TaskSensorData+0x468>
				{
					if (MAG_Y_RAW > 0)
 8003032:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <TaskSensorData+0x3c4>)
 8003034:	edd3 7a00 	vldr	s15, [r3]
 8003038:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800303c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003040:	dd5e      	ble.n	8003100 <TaskSensorData+0x400>
						MAG_dir = 90.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 8003042:	4b1f      	ldr	r3, [pc, #124]	; (80030c0 <TaskSensorData+0x3c0>)
 8003044:	edd3 7a00 	vldr	s15, [r3]
 8003048:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <TaskSensorData+0x3c4>)
 800304a:	ed93 7a00 	vldr	s14, [r3]
 800304e:	eef0 0a47 	vmov.f32	s1, s14
 8003052:	eeb0 0a67 	vmov.f32	s0, s15
 8003056:	f016 fbd7 	bl	8019808 <atan2f>
 800305a:	eef0 7a40 	vmov.f32	s15, s0
 800305e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80030cc <TaskSensorData+0x3cc>
 8003062:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003066:	ee17 0a90 	vmov	r0, s15
 800306a:	e031      	b.n	80030d0 <TaskSensorData+0x3d0>
 800306c:	3ff00000 	.word	0x3ff00000
 8003070:	42200000 	.word	0x42200000
 8003074:	44fa0000 	.word	0x44fa0000
 8003078:	41200000 	.word	0x41200000
 800307c:	20000214 	.word	0x20000214
 8003080:	20000dd4 	.word	0x20000dd4
 8003084:	200003c4 	.word	0x200003c4
 8003088:	200003cc 	.word	0x200003cc
 800308c:	20000ac0 	.word	0x20000ac0
 8003090:	20000474 	.word	0x20000474
 8003094:	20000dd8 	.word	0x20000dd8
 8003098:	0801bd30 	.word	0x0801bd30
 800309c:	20000ccc 	.word	0x20000ccc
 80030a0:	20000440 	.word	0x20000440
 80030a4:	2000044c 	.word	0x2000044c
 80030a8:	20000450 	.word	0x20000450
 80030ac:	200004a4 	.word	0x200004a4
 80030b0:	200004a8 	.word	0x200004a8
 80030b4:	200004ac 	.word	0x200004ac
 80030b8:	20000215 	.word	0x20000215
 80030bc:	20000dd0 	.word	0x20000dd0
 80030c0:	200004c8 	.word	0x200004c8
 80030c4:	200004cc 	.word	0x200004cc
 80030c8:	200004d0 	.word	0x200004d0
 80030cc:	43340000 	.word	0x43340000
 80030d0:	f7fd fa62 	bl	8000598 <__aeabi_f2d>
 80030d4:	a330      	add	r3, pc, #192	; (adr r3, 8003198 <TaskSensorData+0x498>)
 80030d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030da:	f7fd fbdf 	bl	800089c <__aeabi_ddiv>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	f04f 0000 	mov.w	r0, #0
 80030e6:	4930      	ldr	r1, [pc, #192]	; (80031a8 <TaskSensorData+0x4a8>)
 80030e8:	f7fd f8f6 	bl	80002d8 <__aeabi_dsub>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4610      	mov	r0, r2
 80030f2:	4619      	mov	r1, r3
 80030f4:	f7fd fda0 	bl	8000c38 <__aeabi_d2f>
 80030f8:	4603      	mov	r3, r0
 80030fa:	4a2c      	ldr	r2, [pc, #176]	; (80031ac <TaskSensorData+0x4ac>)
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e068      	b.n	80031d2 <TaskSensorData+0x4d2>
					else if (MAG_Y_RAW < 0)
 8003100:	4b2b      	ldr	r3, [pc, #172]	; (80031b0 <TaskSensorData+0x4b0>)
 8003102:	edd3 7a00 	vldr	s15, [r3]
 8003106:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800310a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310e:	d560      	bpl.n	80031d2 <TaskSensorData+0x4d2>
						MAG_dir = 270.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 8003110:	4b28      	ldr	r3, [pc, #160]	; (80031b4 <TaskSensorData+0x4b4>)
 8003112:	edd3 7a00 	vldr	s15, [r3]
 8003116:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <TaskSensorData+0x4b0>)
 8003118:	ed93 7a00 	vldr	s14, [r3]
 800311c:	eef0 0a47 	vmov.f32	s1, s14
 8003120:	eeb0 0a67 	vmov.f32	s0, s15
 8003124:	f016 fb70 	bl	8019808 <atan2f>
 8003128:	eef0 7a40 	vmov.f32	s15, s0
 800312c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80031b8 <TaskSensorData+0x4b8>
 8003130:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003134:	ee17 0a90 	vmov	r0, s15
 8003138:	f7fd fa2e 	bl	8000598 <__aeabi_f2d>
 800313c:	a316      	add	r3, pc, #88	; (adr r3, 8003198 <TaskSensorData+0x498>)
 800313e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003142:	f7fd fbab 	bl	800089c <__aeabi_ddiv>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	a115      	add	r1, pc, #84	; (adr r1, 80031a0 <TaskSensorData+0x4a0>)
 800314c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003150:	f7fd f8c2 	bl	80002d8 <__aeabi_dsub>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4610      	mov	r0, r2
 800315a:	4619      	mov	r1, r3
 800315c:	f7fd fd6c 	bl	8000c38 <__aeabi_d2f>
 8003160:	4603      	mov	r3, r0
 8003162:	4a12      	ldr	r2, [pc, #72]	; (80031ac <TaskSensorData+0x4ac>)
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e034      	b.n	80031d2 <TaskSensorData+0x4d2>
				}
				else if (MAG_Y_RAW == 0)
 8003168:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <TaskSensorData+0x4b0>)
 800316a:	edd3 7a00 	vldr	s15, [r3]
 800316e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003176:	d12c      	bne.n	80031d2 <TaskSensorData+0x4d2>
				{
					if (MAG_X_RAW > 0)
 8003178:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <TaskSensorData+0x4b4>)
 800317a:	edd3 7a00 	vldr	s15, [r3]
 800317e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003186:	dd19      	ble.n	80031bc <TaskSensorData+0x4bc>
						MAG_dir = 0.0f;
 8003188:	4b08      	ldr	r3, [pc, #32]	; (80031ac <TaskSensorData+0x4ac>)
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	e01f      	b.n	80031d2 <TaskSensorData+0x4d2>
 8003192:	bf00      	nop
 8003194:	f3af 8000 	nop.w
 8003198:	54442d18 	.word	0x54442d18
 800319c:	400921fb 	.word	0x400921fb
 80031a0:	00000000 	.word	0x00000000
 80031a4:	4070e000 	.word	0x4070e000
 80031a8:	40568000 	.word	0x40568000
 80031ac:	200004d4 	.word	0x200004d4
 80031b0:	200004cc 	.word	0x200004cc
 80031b4:	200004c8 	.word	0x200004c8
 80031b8:	43340000 	.word	0x43340000
					else if (MAG_X_RAW < 0)
 80031bc:	4bd6      	ldr	r3, [pc, #856]	; (8003518 <TaskSensorData+0x818>)
 80031be:	edd3 7a00 	vldr	s15, [r3]
 80031c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ca:	d502      	bpl.n	80031d2 <TaskSensorData+0x4d2>
						MAG_dir = 180.0f;
 80031cc:	4bd3      	ldr	r3, [pc, #844]	; (800351c <TaskSensorData+0x81c>)
 80031ce:	4ad4      	ldr	r2, [pc, #848]	; (8003520 <TaskSensorData+0x820>)
 80031d0:	601a      	str	r2, [r3, #0]
				}

				MAG_dir += declination;
 80031d2:	4bd2      	ldr	r3, [pc, #840]	; (800351c <TaskSensorData+0x81c>)
 80031d4:	ed93 7a00 	vldr	s14, [r3]
 80031d8:	4bd2      	ldr	r3, [pc, #840]	; (8003524 <TaskSensorData+0x824>)
 80031da:	edd3 7a00 	vldr	s15, [r3]
 80031de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e2:	4bce      	ldr	r3, [pc, #824]	; (800351c <TaskSensorData+0x81c>)
 80031e4:	edc3 7a00 	vstr	s15, [r3]

				if (MAG_dir < 0)
 80031e8:	4bcc      	ldr	r3, [pc, #816]	; (800351c <TaskSensorData+0x81c>)
 80031ea:	edd3 7a00 	vldr	s15, [r3]
 80031ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f6:	d509      	bpl.n	800320c <TaskSensorData+0x50c>
					MAG_dir += 360.0f;
 80031f8:	4bc8      	ldr	r3, [pc, #800]	; (800351c <TaskSensorData+0x81c>)
 80031fa:	edd3 7a00 	vldr	s15, [r3]
 80031fe:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8003528 <TaskSensorData+0x828>
 8003202:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003206:	4bc5      	ldr	r3, [pc, #788]	; (800351c <TaskSensorData+0x81c>)
 8003208:	edc3 7a00 	vstr	s15, [r3]
				if (MAG_dir > 360.0f)
 800320c:	4bc3      	ldr	r3, [pc, #780]	; (800351c <TaskSensorData+0x81c>)
 800320e:	edd3 7a00 	vldr	s15, [r3]
 8003212:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8003528 <TaskSensorData+0x828>
 8003216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800321a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321e:	dd09      	ble.n	8003234 <TaskSensorData+0x534>
					MAG_dir -= 360.0f;
 8003220:	4bbe      	ldr	r3, [pc, #760]	; (800351c <TaskSensorData+0x81c>)
 8003222:	edd3 7a00 	vldr	s15, [r3]
 8003226:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 8003528 <TaskSensorData+0x828>
 800322a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800322e:	4bbb      	ldr	r3, [pc, #748]	; (800351c <TaskSensorData+0x81c>)
 8003230:	edc3 7a00 	vstr	s15, [r3]
			}
			osMutexRelease(MagnMutexHandle);
 8003234:	4bbd      	ldr	r3, [pc, #756]	; (800352c <TaskSensorData+0x82c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f00e fd25 	bl	8011c88 <osMutexRelease>
		}

		// Calculate Fusion algorithm
		if ((osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 800323e:	4bbc      	ldr	r3, [pc, #752]	; (8003530 <TaskSensorData+0x830>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f04f 31ff 	mov.w	r1, #4294967295
 8003246:	4618      	mov	r0, r3
 8003248:	f00e fcd0 	bl	8011bec <osMutexWait>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	f040 814c 	bne.w	80034ec <TaskSensorData+0x7ec>
			&& (osMutexWait(MagnMutexHandle, osWaitForever) == osOK))
 8003254:	4bb5      	ldr	r3, [pc, #724]	; (800352c <TaskSensorData+0x82c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f04f 31ff 	mov.w	r1, #4294967295
 800325c:	4618      	mov	r0, r3
 800325e:	f00e fcc5 	bl	8011bec <osMutexWait>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	f040 8141 	bne.w	80034ec <TaskSensorData+0x7ec>
		{
			// Acquire latest sensor data
			//const clock_t timestamp = clock(); // replace this with actual gyroscope timestamp

			FusionVector accelerometer = {AccData[0], AccData[1], AccData[2]}; // accelerometer data in g
 800326a:	4bb2      	ldr	r3, [pc, #712]	; (8003534 <TaskSensorData+0x834>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003272:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	4bae      	ldr	r3, [pc, #696]	; (8003534 <TaskSensorData+0x834>)
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003280:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	4bab      	ldr	r3, [pc, #684]	; (8003534 <TaskSensorData+0x834>)
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800328e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003292:	609a      	str	r2, [r3, #8]
			FusionVector gyroscope = {GyroData[0], GyroData[1], GyroData[2]}; // gyroscope data in degrees/s
 8003294:	4ba8      	ldr	r3, [pc, #672]	; (8003538 <TaskSensorData+0x838>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800329c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	4ba5      	ldr	r3, [pc, #660]	; (8003538 <TaskSensorData+0x838>)
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80032aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80032ae:	605a      	str	r2, [r3, #4]
 80032b0:	4ba1      	ldr	r3, [pc, #644]	; (8003538 <TaskSensorData+0x838>)
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80032b8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80032bc:	609a      	str	r2, [r3, #8]
			FusionVector magnetometer = {MAG_X_RAW, MAG_Y_RAW, MAG_Z_RAW}; // magnetometer data in arbitrary units
 80032be:	4b96      	ldr	r3, [pc, #600]	; (8003518 <TaskSensorData+0x818>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80032c6:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	4b9b      	ldr	r3, [pc, #620]	; (800353c <TaskSensorData+0x83c>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80032d4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	4b99      	ldr	r3, [pc, #612]	; (8003540 <TaskSensorData+0x840>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80032e2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80032e6:	609a      	str	r2, [r3, #8]

			// Recalibration if needed
			if (RecalibrateFusion)
 80032e8:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d03f      	beq.n	8003370 <TaskSensorData+0x670>
			{
				HAL_UART_Transmit(&huart3, "CALIBRATING FUSION...\r\n", strlen("CALIBRATING FUSION...\r\n"), HAL_MAX_DELAY);
 80032f0:	f04f 33ff 	mov.w	r3, #4294967295
 80032f4:	2217      	movs	r2, #23
 80032f6:	4993      	ldr	r1, [pc, #588]	; (8003544 <TaskSensorData+0x844>)
 80032f8:	4893      	ldr	r0, [pc, #588]	; (8003548 <TaskSensorData+0x848>)
 80032fa:	f00c ff43 	bl	8010184 <HAL_UART_Transmit>
				FusionOffsetUpdate(&ahrs, gyroscope, accelerometer, magnetometer, 20);
 80032fe:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003302:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003306:	edd3 3a00 	vldr	s7, [r3]
 800330a:	ed93 4a01 	vldr	s8, [r3, #4]
 800330e:	edd3 4a02 	vldr	s9, [r3, #8]
 8003312:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003316:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800331a:	ed93 5a00 	vldr	s10, [r3]
 800331e:	edd3 5a01 	vldr	s11, [r3, #4]
 8003322:	ed93 6a02 	vldr	s12, [r3, #8]
 8003326:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800332a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800332e:	edd3 6a00 	vldr	s13, [r3]
 8003332:	ed93 7a01 	vldr	s14, [r3, #4]
 8003336:	edd3 7a02 	vldr	s15, [r3, #8]
 800333a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800333e:	2114      	movs	r1, #20
 8003340:	eeb0 3a63 	vmov.f32	s6, s7
 8003344:	eef0 3a44 	vmov.f32	s7, s8
 8003348:	eeb0 4a64 	vmov.f32	s8, s9
 800334c:	eef0 1a45 	vmov.f32	s3, s10
 8003350:	eeb0 2a65 	vmov.f32	s4, s11
 8003354:	eef0 2a46 	vmov.f32	s5, s12
 8003358:	eeb0 0a66 	vmov.f32	s0, s13
 800335c:	eef0 0a47 	vmov.f32	s1, s14
 8003360:	eeb0 1a67 	vmov.f32	s2, s15
 8003364:	4618      	mov	r0, r3
 8003366:	f005 faff 	bl	8008968 <FusionOffsetUpdate>

				RecalibrateFusion = false;
 800336a:	2300      	movs	r3, #0
 800336c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
//			gyroscope = FusionCalibrationInertial(gyroscope, gyroscopeMisalignment, gyroscopeSensitivity, gyroscopeOffset);
//			accelerometer = FusionCalibrationInertial(accelerometer, accelerometerMisalignment, accelerometerSensitivity, accelerometerOffset);
//			magnetometer = FusionCalibrationMagnetic(magnetometer, softIronMatrix, hardIronOffset);

			// Update gyroscope offset correction algorithm
			gyroscope = FusionGyroOffsetUpdate(&gyroOffset, gyroscope);
 8003370:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003374:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003378:	edd3 6a00 	vldr	s13, [r3]
 800337c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003380:	edd3 7a02 	vldr	s15, [r3, #8]
 8003384:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003388:	eeb0 0a66 	vmov.f32	s0, s13
 800338c:	eef0 0a47 	vmov.f32	s1, s14
 8003390:	eeb0 1a67 	vmov.f32	s2, s15
 8003394:	4618      	mov	r0, r3
 8003396:	f005 fc43 	bl	8008c20 <FusionGyroOffsetUpdate>
 800339a:	eef0 6a40 	vmov.f32	s13, s0
 800339e:	eeb0 7a60 	vmov.f32	s14, s1
 80033a2:	eef0 7a41 	vmov.f32	s15, s2
 80033a6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80033aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80033ae:	edc3 6a00 	vstr	s13, [r3]
 80033b2:	ed83 7a01 	vstr	s14, [r3, #4]
 80033b6:	edc3 7a02 	vstr	s15, [r3, #8]
			//static clock_t previousTimestamp;
			//const float deltaTime = (float) (timestamp - previousTimestamp) / (float) CLOCKS_PER_SEC;
			//previousTimestamp = timestamp;

			// Update gyroscope AHRS algorithm
			FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, 1.0f / xFrequency);
 80033ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80033be:	ee07 3a90 	vmov	s15, r3
 80033c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033ca:	eec7 4a27 	vdiv.f32	s9, s14, s15
 80033ce:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80033d2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80033d6:	ed93 3a00 	vldr	s6, [r3]
 80033da:	edd3 3a01 	vldr	s7, [r3, #4]
 80033de:	ed93 4a02 	vldr	s8, [r3, #8]
 80033e2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80033e6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80033ea:	ed93 5a00 	vldr	s10, [r3]
 80033ee:	edd3 5a01 	vldr	s11, [r3, #4]
 80033f2:	ed93 6a02 	vldr	s12, [r3, #8]
 80033f6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80033fa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80033fe:	edd3 6a00 	vldr	s13, [r3]
 8003402:	ed93 7a01 	vldr	s14, [r3, #4]
 8003406:	edd3 7a02 	vldr	s15, [r3, #8]
 800340a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800340e:	eef0 1a45 	vmov.f32	s3, s10
 8003412:	eeb0 2a65 	vmov.f32	s4, s11
 8003416:	eef0 2a46 	vmov.f32	s5, s12
 800341a:	eeb0 0a66 	vmov.f32	s0, s13
 800341e:	eef0 0a47 	vmov.f32	s1, s14
 8003422:	eeb0 1a67 	vmov.f32	s2, s15
 8003426:	4618      	mov	r0, r3
 8003428:	f004 fa90 	bl	800794c <FusionAhrsUpdate>
			//FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, 1.0f / xFrequency);

			// Algorithm outputs
			Fusion_output = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 800342c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003430:	4618      	mov	r0, r3
 8003432:	f005 f8af 	bl	8008594 <FusionAhrsGetQuaternion>
 8003436:	eeb0 6a40 	vmov.f32	s12, s0
 800343a:	eef0 6a60 	vmov.f32	s13, s1
 800343e:	eeb0 7a41 	vmov.f32	s14, s2
 8003442:	eef0 7a61 	vmov.f32	s15, s3
 8003446:	ed87 6a50 	vstr	s12, [r7, #320]	; 0x140
 800344a:	edc7 6a51 	vstr	s13, [r7, #324]	; 0x144
 800344e:	ed87 7a52 	vstr	s14, [r7, #328]	; 0x148
 8003452:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c
 8003456:	ed97 6a50 	vldr	s12, [r7, #320]	; 0x140
 800345a:	edd7 6a51 	vldr	s13, [r7, #324]	; 0x144
 800345e:	ed97 7a52 	vldr	s14, [r7, #328]	; 0x148
 8003462:	edd7 7a53 	vldr	s15, [r7, #332]	; 0x14c
 8003466:	eeb0 0a46 	vmov.f32	s0, s12
 800346a:	eef0 0a66 	vmov.f32	s1, s13
 800346e:	eeb0 1a47 	vmov.f32	s2, s14
 8003472:	eef0 1a67 	vmov.f32	s3, s15
 8003476:	f7ff fb9d 	bl	8002bb4 <FusionQuaternionToEuler>
 800347a:	eef0 6a40 	vmov.f32	s13, s0
 800347e:	eeb0 7a60 	vmov.f32	s14, s1
 8003482:	eef0 7a41 	vmov.f32	s15, s2
 8003486:	4b31      	ldr	r3, [pc, #196]	; (800354c <TaskSensorData+0x84c>)
 8003488:	edc3 6a00 	vstr	s13, [r3]
 800348c:	ed83 7a01 	vstr	s14, [r3, #4]
 8003490:	edc3 7a02 	vstr	s15, [r3, #8]
			Fusion_output = FusionApplyEulerOffset(Fusion_output, ahrs.fusionEulerOffset);
 8003494:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003498:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800349c:	ed93 5a1d 	vldr	s10, [r3, #116]	; 0x74
 80034a0:	edd3 5a1e 	vldr	s11, [r3, #120]	; 0x78
 80034a4:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 80034a8:	4b28      	ldr	r3, [pc, #160]	; (800354c <TaskSensorData+0x84c>)
 80034aa:	edd3 6a00 	vldr	s13, [r3]
 80034ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80034b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80034b6:	eef0 1a45 	vmov.f32	s3, s10
 80034ba:	eeb0 2a65 	vmov.f32	s4, s11
 80034be:	eef0 2a46 	vmov.f32	s5, s12
 80034c2:	eeb0 0a66 	vmov.f32	s0, s13
 80034c6:	eef0 0a47 	vmov.f32	s1, s14
 80034ca:	eeb0 1a67 	vmov.f32	s2, s15
 80034ce:	f005 fb27 	bl	8008b20 <FusionApplyEulerOffset>
 80034d2:	eef0 6a40 	vmov.f32	s13, s0
 80034d6:	eeb0 7a60 	vmov.f32	s14, s1
 80034da:	eef0 7a41 	vmov.f32	s15, s2
 80034de:	4b1b      	ldr	r3, [pc, #108]	; (800354c <TaskSensorData+0x84c>)
 80034e0:	edc3 6a00 	vstr	s13, [r3]
 80034e4:	ed83 7a01 	vstr	s14, [r3, #4]
 80034e8:	edc3 7a02 	vstr	s15, [r3, #8]
		}
		osMutexRelease(ImuMutexHandle);
 80034ec:	4b10      	ldr	r3, [pc, #64]	; (8003530 <TaskSensorData+0x830>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f00e fbc9 	bl	8011c88 <osMutexRelease>
		osMutexRelease(MagnMutexHandle);
 80034f6:	4b0d      	ldr	r3, [pc, #52]	; (800352c <TaskSensorData+0x82c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f00e fbc4 	bl	8011c88 <osMutexRelease>

		// Distance Data
		if (IsDistAvailable)
 8003500:	4b13      	ldr	r3, [pc, #76]	; (8003550 <TaskSensorData+0x850>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d055      	beq.n	80035b4 <TaskSensorData+0x8b4>
		{
			if (!HCSR04.Triggered)
 8003508:	4b12      	ldr	r3, [pc, #72]	; (8003554 <TaskSensorData+0x854>)
 800350a:	7d1b      	ldrb	r3, [r3, #20]
 800350c:	f083 0301 	eor.w	r3, r3, #1
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d027      	beq.n	8003566 <TaskSensorData+0x866>
 8003516:	e01f      	b.n	8003558 <TaskSensorData+0x858>
 8003518:	200004c8 	.word	0x200004c8
 800351c:	200004d4 	.word	0x200004d4
 8003520:	43340000 	.word	0x43340000
 8003524:	20000004 	.word	0x20000004
 8003528:	43b40000 	.word	0x43b40000
 800352c:	20000dd0 	.word	0x20000dd0
 8003530:	20000dd8 	.word	0x20000dd8
 8003534:	20000440 	.word	0x20000440
 8003538:	20000450 	.word	0x20000450
 800353c:	200004cc 	.word	0x200004cc
 8003540:	200004d0 	.word	0x200004d0
 8003544:	0801bd48 	.word	0x0801bd48
 8003548:	20000ccc 	.word	0x20000ccc
 800354c:	20000468 	.word	0x20000468
 8003550:	20000216 	.word	0x20000216
 8003554:	200004d8 	.word	0x200004d8
			{
				HCSR04_Trigger(&HCSR04);
 8003558:	4832      	ldr	r0, [pc, #200]	; (8003624 <TaskSensorData+0x924>)
 800355a:	f007 faf7 	bl	800ab4c <HCSR04_Trigger>
				HCSR04.Triggered = true;
 800355e:	4b31      	ldr	r3, [pc, #196]	; (8003624 <TaskSensorData+0x924>)
 8003560:	2201      	movs	r2, #1
 8003562:	751a      	strb	r2, [r3, #20]
 8003564:	e026      	b.n	80035b4 <TaskSensorData+0x8b4>
			}
			else if (HCSR04.Triggered)
 8003566:	4b2f      	ldr	r3, [pc, #188]	; (8003624 <TaskSensorData+0x924>)
 8003568:	7d1b      	ldrb	r3, [r3, #20]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d022      	beq.n	80035b4 <TaskSensorData+0x8b4>
			{
				if (osSemaphoreWait(DistSemaphoreHandle, 0) == osOK)
 800356e:	4b2e      	ldr	r3, [pc, #184]	; (8003628 <TaskSensorData+0x928>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2100      	movs	r1, #0
 8003574:	4618      	mov	r0, r3
 8003576:	f00e fbef 	bl	8011d58 <osSemaphoreWait>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d119      	bne.n	80035b4 <TaskSensorData+0x8b4>
				{
					if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 8003580:	4b2a      	ldr	r3, [pc, #168]	; (800362c <TaskSensorData+0x92c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f04f 31ff 	mov.w	r1, #4294967295
 8003588:	4618      	mov	r0, r3
 800358a:	f00e fb2f 	bl	8011bec <osMutexWait>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d107      	bne.n	80035a4 <TaskSensorData+0x8a4>
						Distance = HCSR04_Read(&HCSR04);
 8003594:	4823      	ldr	r0, [pc, #140]	; (8003624 <TaskSensorData+0x924>)
 8003596:	f007 faf4 	bl	800ab82 <HCSR04_Read>
 800359a:	eef0 7a40 	vmov.f32	s15, s0
 800359e:	4b24      	ldr	r3, [pc, #144]	; (8003630 <TaskSensorData+0x930>)
 80035a0:	edc3 7a00 	vstr	s15, [r3]
					osMutexRelease(DistMutexHandle);
 80035a4:	4b21      	ldr	r3, [pc, #132]	; (800362c <TaskSensorData+0x92c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f00e fb6d 	bl	8011c88 <osMutexRelease>

					HCSR04.Triggered = false;
 80035ae:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <TaskSensorData+0x924>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	751a      	strb	r2, [r3, #20]
				}
			}
		}

		// GPS Data
		if (IsGpsAvailable)
 80035b4:	4b1f      	ldr	r3, [pc, #124]	; (8003634 <TaskSensorData+0x934>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f43f ac5b 	beq.w	8002e74 <TaskSensorData+0x174>
		{
			if (osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever) == osOK)
 80035be:	4b1e      	ldr	r3, [pc, #120]	; (8003638 <TaskSensorData+0x938>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f04f 31ff 	mov.w	r1, #4294967295
 80035c6:	4618      	mov	r0, r3
 80035c8:	f00e fbc6 	bl	8011d58 <osSemaphoreWait>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f47f ac50 	bne.w	8002e74 <TaskSensorData+0x174>
			{
				if (ProcessGPSPackageBuffer)
 80035d4:	4b19      	ldr	r3, [pc, #100]	; (800363c <TaskSensorData+0x93c>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f43f ac4a 	beq.w	8002e74 <TaskSensorData+0x174>
				{
					//HAL_UART_Transmit(&huart3, GPSPackageBuffer, GPS_BUFFSIZE, HAL_MAX_DELAY);
					//HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

					if (osMutexWait(GpsDataMutexHandle, osWaitForever) == osOK)
 80035e0:	4b17      	ldr	r3, [pc, #92]	; (8003640 <TaskSensorData+0x940>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f04f 31ff 	mov.w	r1, #4294967295
 80035e8:	4618      	mov	r0, r3
 80035ea:	f00e faff 	bl	8011bec <osMutexWait>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10d      	bne.n	8003610 <TaskSensorData+0x910>
					{
						if (GPS_validate((char*) GPSPackageBuffer))
 80035f4:	4813      	ldr	r0, [pc, #76]	; (8003644 <TaskSensorData+0x944>)
 80035f6:	f005 fbe9 	bl	8008dcc <GPS_validate>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <TaskSensorData+0x906>
							GPS_parse((char*) GPSPackageBuffer);
 8003600:	4810      	ldr	r0, [pc, #64]	; (8003644 <TaskSensorData+0x944>)
 8003602:	f005 fc45 	bl	8008e90 <GPS_parse>
						memset(GPSPackageBuffer, 0, sizeof(GPSPackageBuffer));
 8003606:	22ff      	movs	r2, #255	; 0xff
 8003608:	2100      	movs	r1, #0
 800360a:	480e      	ldr	r0, [pc, #56]	; (8003644 <TaskSensorData+0x944>)
 800360c:	f011 ffc7 	bl	801559e <memset>
					}
					osMutexRelease(GpsDataMutexHandle);
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <TaskSensorData+0x940>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f00e fb37 	bl	8011c88 <osMutexRelease>

					ProcessGPSPackageBuffer = false;
 800361a:	4b08      	ldr	r3, [pc, #32]	; (800363c <TaskSensorData+0x93c>)
 800361c:	2200      	movs	r2, #0
 800361e:	701a      	strb	r2, [r3, #0]
	{
 8003620:	e428      	b.n	8002e74 <TaskSensorData+0x174>
 8003622:	bf00      	nop
 8003624:	200004d8 	.word	0x200004d8
 8003628:	20000dec 	.word	0x20000dec
 800362c:	20000de0 	.word	0x20000de0
 8003630:	20000510 	.word	0x20000510
 8003634:	20000217 	.word	0x20000217
 8003638:	20000df0 	.word	0x20000df0
 800363c:	20000713 	.word	0x20000713
 8003640:	20000ddc 	.word	0x20000ddc
 8003644:	20000614 	.word	0x20000614

08003648 <TaskTune>:
extern osMutexId ImuMutexHandle;;
extern osMutexId RemoteDataMutexHandle;


void TaskTune(void const *argument)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b0c6      	sub	sp, #280	; 0x118
 800364c:	af02      	add	r7, sp, #8
 800364e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003652:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003656:	6018      	str	r0, [r3, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100; //Hz
 8003658:	2364      	movs	r3, #100	; 0x64
 800365a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 800365e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003662:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003666:	fbb2 f3f3 	udiv	r3, r2, r3
 800366a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

	//HAL_SPI_Receive_IT(&hspi1, Spi1Buffer, 64);

	uint8_t SpiTuneData1[64];
	uint8_t SpiTuneData2[64];
	SpiTuneData1[0] = (uint8_t)('t');
 800366e:	2374      	movs	r3, #116	; 0x74
 8003670:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	SpiTuneData2[0] = (uint8_t)('u');
 8003674:	2375      	movs	r3, #117	; 0x75
 8003676:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uint8_t LastValidTuningData[6];
	bool NewTuneCommand = false;
 800367a:	2300      	movs	r3, #0
 800367c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f


	// PID controllers to be tuned
	PIDController* PID_Ro = &DPID_Roll.outer;
 8003680:	4bb7      	ldr	r3, [pc, #732]	; (8003960 <TaskTune+0x318>)
 8003682:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	int16_t PID_Ro_ref_devided; // Calculated in every cycle
	float PID_Ro_ref_devided_float; // Needed only for single loop tuning
	float* PID_Ro_meas = &(Fusion_output.angle.roll);
 8003686:	4bb7      	ldr	r3, [pc, #732]	; (8003964 <TaskTune+0x31c>)
 8003688:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	float* PID_Ro_out = &(PID_Ro->out);
 800368c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003690:	3340      	adds	r3, #64	; 0x40
 8003692:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

	PIDController* PID_Ri = &DPID_Roll.inner;
 8003696:	4bb4      	ldr	r3, [pc, #720]	; (8003968 <TaskTune+0x320>)
 8003698:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	float* PID_Ri_ref = &(PID_Ro->out);
 800369c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036a0:	3340      	adds	r3, #64	; 0x40
 80036a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	//float* PID_Ri_ref = &(Fusion_output.angle.roll);
	float* PID_Ri_meas = GyroData;
 80036a6:	4bb1      	ldr	r3, [pc, #708]	; (800396c <TaskTune+0x324>)
 80036a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	//float* PID_Ri_meas = &Roll_measured;
	int16_t* PID_Ri_out = &Roll_controlled;
 80036ac:	4bb0      	ldr	r3, [pc, #704]	; (8003970 <TaskTune+0x328>)
 80036ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	PIDController* PID_Po = &DPID_Pitch.outer;
 80036b2:	4bb0      	ldr	r3, [pc, #704]	; (8003974 <TaskTune+0x32c>)
 80036b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	int16_t PID_Po_ref_devided; // Calculated in every cycle
	float PID_Po_ref_devided_float; // Needed only for single loop tuning
	float* PID_Po_meas = &(Fusion_output.angle.pitch);
 80036b8:	4baf      	ldr	r3, [pc, #700]	; (8003978 <TaskTune+0x330>)
 80036ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	float* PID_Po_out = &(PID_Po->out);
 80036be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036c2:	3340      	adds	r3, #64	; 0x40
 80036c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	PIDController* PID_Pi = &DPID_Pitch.inner;
 80036c8:	4bac      	ldr	r3, [pc, #688]	; (800397c <TaskTune+0x334>)
 80036ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	float* PID_Pi_ref = &(PID_Po->out);
 80036ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036d2:	3340      	adds	r3, #64	; 0x40
 80036d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	float* PID_Pi_meas = GyroData+1;
 80036d8:	4ba9      	ldr	r3, [pc, #676]	; (8003980 <TaskTune+0x338>)
 80036da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	int16_t* PID_Pi_out = &Pitch_controlled;
 80036de:	4ba9      	ldr	r3, [pc, #676]	; (8003984 <TaskTune+0x33c>)
 80036e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	PIDController* PID_Y = &PID_Yaw;
 80036e4:	4ba8      	ldr	r3, [pc, #672]	; (8003988 <TaskTune+0x340>)
 80036e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	int16_t PID_Y_ref_devided; // Calculated in every cycle
	float* PID_Y_meas = GyroData+2;
 80036ea:	4ba8      	ldr	r3, [pc, #672]	; (800398c <TaskTune+0x344>)
 80036ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	int16_t* PID_Y_out = &Yaw_controlled;
 80036f0:	4ba7      	ldr	r3, [pc, #668]	; (8003990 <TaskTune+0x348>)
 80036f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	PIDController* PID_T = &PID_Throttle;
 80036f6:	4ba7      	ldr	r3, [pc, #668]	; (8003994 <TaskTune+0x34c>)
 80036f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	uint16_t PID_T_ref_devided; // Calculated in every cycle
	float* PID_T_meas = &Distance;
 80036fc:	4ba6      	ldr	r3, [pc, #664]	; (8003998 <TaskTune+0x350>)
 80036fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	uint16_t* PID_T_out = &Throttle_controlled;
 8003702:	4ba6      	ldr	r3, [pc, #664]	; (800399c <TaskTune+0x354>)
 8003704:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac


	xLastWakeTime = xTaskGetTickCount();
 8003708:	f00f fe08 	bl	801331c <xTaskGetTickCount>
 800370c:	4603      	mov	r3, r0
 800370e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8003712:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003716:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 800371a:	4618      	mov	r0, r3
 800371c:	f00f fc2a 	bl	8012f74 <vTaskDelayUntil>

		if (Tune)
 8003720:	4b9f      	ldr	r3, [pc, #636]	; (80039a0 <TaskTune+0x358>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 81ee 	beq.w	8003b06 <TaskTune+0x4be>
		{
			if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK
 800372a:	4b9e      	ldr	r3, [pc, #632]	; (80039a4 <TaskTune+0x35c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f04f 31ff 	mov.w	r1, #4294967295
 8003732:	4618      	mov	r0, r3
 8003734:	f00e fa5a 	bl	8011bec <osMutexWait>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	f040 81d4 	bne.w	8003ae8 <TaskTune+0x4a0>
					&& osMutexWait(ImuMutexHandle, osWaitForever) == osOK
 8003740:	4b99      	ldr	r3, [pc, #612]	; (80039a8 <TaskTune+0x360>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f04f 31ff 	mov.w	r1, #4294967295
 8003748:	4618      	mov	r0, r3
 800374a:	f00e fa4f 	bl	8011bec <osMutexWait>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	f040 81c9 	bne.w	8003ae8 <TaskTune+0x4a0>
					&& osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8003756:	4b95      	ldr	r3, [pc, #596]	; (80039ac <TaskTune+0x364>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f04f 31ff 	mov.w	r1, #4294967295
 800375e:	4618      	mov	r0, r3
 8003760:	f00e fa44 	bl	8011bec <osMutexWait>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	f040 81be 	bne.w	8003ae8 <TaskTune+0x4a0>
//				else
//					Tune_single_true_double_false = true;

				// Pack PID_Ro data
				//Gains
				FloatToUint8s(&(PID_Ro->Kp), SpiTuneData1, 1);
 800376c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003770:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003774:	2201      	movs	r2, #1
 8003776:	4618      	mov	r0, r3
 8003778:	f7fd ffde 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&(PID_Ro->Ki), SpiTuneData1, 5);
 800377c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003780:	3304      	adds	r3, #4
 8003782:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003786:	2205      	movs	r2, #5
 8003788:	4618      	mov	r0, r3
 800378a:	f7fd ffd5 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&(PID_Ro->Kd), SpiTuneData1, 9);
 800378e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003792:	3308      	adds	r3, #8
 8003794:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003798:	2209      	movs	r2, #9
 800379a:	4618      	mov	r0, r3
 800379c:	f7fd ffcc 	bl	8001738 <FloatToUint8s>
				// Reference -> Calculated in every cycle
				PID_Ro_ref_devided = Roll_in / 25;
 80037a0:	4b83      	ldr	r3, [pc, #524]	; (80039b0 <TaskTune+0x368>)
 80037a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037a6:	4a83      	ldr	r2, [pc, #524]	; (80039b4 <TaskTune+0x36c>)
 80037a8:	fb82 1203 	smull	r1, r2, r2, r3
 80037ac:	10d2      	asrs	r2, r2, #3
 80037ae:	17db      	asrs	r3, r3, #31
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	b21b      	sxth	r3, r3
 80037b4:	83fb      	strh	r3, [r7, #30]
				//PID_Ro_ref_devided = SWD / 70;
				Int16ToUint8s(&PID_Ro_ref_devided, SpiTuneData1, 13);
 80037b6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80037ba:	f107 031e 	add.w	r3, r7, #30
 80037be:	220d      	movs	r2, #13
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fd fff1 	bl	80017a8 <Int16ToUint8s>
				// Measurement
				FloatToUint8s(PID_Ro_meas, SpiTuneData1, 15);
 80037c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037ca:	220f      	movs	r2, #15
 80037cc:	4619      	mov	r1, r3
 80037ce:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80037d2:	f7fd ffb1 	bl	8001738 <FloatToUint8s>
				// Output
				FloatToUint8s(PID_Ro_out, SpiTuneData1, 19);
 80037d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037da:	2213      	movs	r2, #19
 80037dc:	4619      	mov	r1, r3
 80037de:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80037e2:	f7fd ffa9 	bl	8001738 <FloatToUint8s>


				// Pack PID_Ri data
				// Gains
				FloatToUint8s(&(PID_Ri->Kp), SpiTuneData1, 23);
 80037e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80037ea:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80037ee:	2217      	movs	r2, #23
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fd ffa1 	bl	8001738 <FloatToUint8s>
				//FloatToUint8s(&(PID_Ri->Ki), SpiTuneData1, 27);
				FloatToUint8s(&(PID_Ri->Kd), SpiTuneData1, 27);
 80037f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80037fa:	3308      	adds	r3, #8
 80037fc:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003800:	221b      	movs	r2, #27
 8003802:	4618      	mov	r0, r3
 8003804:	f7fd ff98 	bl	8001738 <FloatToUint8s>
				// Reference
				if (Tune_single_true_double_false)
 8003808:	4b6b      	ldr	r3, [pc, #428]	; (80039b8 <TaskTune+0x370>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01b      	beq.n	8003848 <TaskTune+0x200>
				{
					PID_Ro_ref_devided_float = Roll_in / 10.0;
 8003810:	4b67      	ldr	r3, [pc, #412]	; (80039b0 <TaskTune+0x368>)
 8003812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003816:	4618      	mov	r0, r3
 8003818:	f7fc feac 	bl	8000574 <__aeabi_i2d>
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	4b66      	ldr	r3, [pc, #408]	; (80039bc <TaskTune+0x374>)
 8003822:	f7fd f83b 	bl	800089c <__aeabi_ddiv>
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	4610      	mov	r0, r2
 800382c:	4619      	mov	r1, r3
 800382e:	f7fd fa03 	bl	8000c38 <__aeabi_d2f>
 8003832:	4603      	mov	r3, r0
 8003834:	61bb      	str	r3, [r7, #24]
					FloatToUint8s(&PID_Ro_ref_devided_float, SpiTuneData1, 31);
 8003836:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800383a:	f107 0318 	add.w	r3, r7, #24
 800383e:	221f      	movs	r2, #31
 8003840:	4618      	mov	r0, r3
 8003842:	f7fd ff79 	bl	8001738 <FloatToUint8s>
 8003846:	e007      	b.n	8003858 <TaskTune+0x210>
				}
				else
					FloatToUint8s(PID_Ri_ref, SpiTuneData1, 31);
 8003848:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800384c:	221f      	movs	r2, #31
 800384e:	4619      	mov	r1, r3
 8003850:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8003854:	f7fd ff70 	bl	8001738 <FloatToUint8s>
				// Measurement
				FloatToUint8s(PID_Ri_meas, SpiTuneData1, 35);
 8003858:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800385c:	2223      	movs	r2, #35	; 0x23
 800385e:	4619      	mov	r1, r3
 8003860:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8003864:	f7fd ff68 	bl	8001738 <FloatToUint8s>
				// Output
				Int16ToUint8s(PID_Ri_out, SpiTuneData1, 39);
 8003868:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800386c:	2227      	movs	r2, #39	; 0x27
 800386e:	4619      	mov	r1, r3
 8003870:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8003874:	f7fd ff98 	bl	80017a8 <Int16ToUint8s>


				// Pack PID_Po data
				//Gains
				FloatToUint8s(&(PID_Po->Kp), SpiTuneData2, 1);
 8003878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800387c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003880:	2201      	movs	r2, #1
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd ff58 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&(PID_Po->Ki), SpiTuneData2, 5);
 8003888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800388c:	3304      	adds	r3, #4
 800388e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003892:	2205      	movs	r2, #5
 8003894:	4618      	mov	r0, r3
 8003896:	f7fd ff4f 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&(PID_Po->Kd), SpiTuneData2, 9);
 800389a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800389e:	3308      	adds	r3, #8
 80038a0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80038a4:	2209      	movs	r2, #9
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd ff46 	bl	8001738 <FloatToUint8s>
				// Reference -> Calculated in every cycle
				PID_Po_ref_devided = -Pitch_in / 25;
 80038ac:	4b44      	ldr	r3, [pc, #272]	; (80039c0 <TaskTune+0x378>)
 80038ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038b2:	4a40      	ldr	r2, [pc, #256]	; (80039b4 <TaskTune+0x36c>)
 80038b4:	fb82 1203 	smull	r1, r2, r2, r3
 80038b8:	10d2      	asrs	r2, r2, #3
 80038ba:	17db      	asrs	r3, r3, #31
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	b21b      	sxth	r3, r3
 80038c0:	82fb      	strh	r3, [r7, #22]
				Int16ToUint8s(&PID_Po_ref_devided, SpiTuneData2, 13);
 80038c2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80038c6:	f107 0316 	add.w	r3, r7, #22
 80038ca:	220d      	movs	r2, #13
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fd ff6b 	bl	80017a8 <Int16ToUint8s>
				// Measurement
				FloatToUint8s(PID_Po_meas, SpiTuneData2, 15);
 80038d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038d6:	220f      	movs	r2, #15
 80038d8:	4619      	mov	r1, r3
 80038da:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80038de:	f7fd ff2b 	bl	8001738 <FloatToUint8s>
				// Output
				FloatToUint8s(PID_Po_out, SpiTuneData2, 19);
 80038e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038e6:	2213      	movs	r2, #19
 80038e8:	4619      	mov	r1, r3
 80038ea:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80038ee:	f7fd ff23 	bl	8001738 <FloatToUint8s>


				// Pack PID_Pi data
				// Gains
				FloatToUint8s(&(PID_Pi->Kp), SpiTuneData2, 23);
 80038f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80038f6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80038fa:	2217      	movs	r2, #23
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fd ff1b 	bl	8001738 <FloatToUint8s>
				//FloatToUint8s(&(PID_Pi->Ki), SpiTuneData2, 27);
				FloatToUint8s(&(PID_Pi->Kd), SpiTuneData2, 27);
 8003902:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003906:	3308      	adds	r3, #8
 8003908:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800390c:	221b      	movs	r2, #27
 800390e:	4618      	mov	r0, r3
 8003910:	f7fd ff12 	bl	8001738 <FloatToUint8s>
				// Reference
				if (Tune_single_true_double_false)
 8003914:	4b28      	ldr	r3, [pc, #160]	; (80039b8 <TaskTune+0x370>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d053      	beq.n	80039c4 <TaskTune+0x37c>
				{
					PID_Po_ref_devided_float = -Pitch_in / 10.0;
 800391c:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <TaskTune+0x378>)
 800391e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003922:	425b      	negs	r3, r3
 8003924:	4618      	mov	r0, r3
 8003926:	f7fc fe25 	bl	8000574 <__aeabi_i2d>
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	4b23      	ldr	r3, [pc, #140]	; (80039bc <TaskTune+0x374>)
 8003930:	f7fc ffb4 	bl	800089c <__aeabi_ddiv>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4610      	mov	r0, r2
 800393a:	4619      	mov	r1, r3
 800393c:	f7fd f97c 	bl	8000c38 <__aeabi_d2f>
 8003940:	4602      	mov	r2, r0
 8003942:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003946:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800394a:	601a      	str	r2, [r3, #0]
					FloatToUint8s(&PID_Po_ref_devided_float, SpiTuneData2, 31);
 800394c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003950:	f107 0310 	add.w	r3, r7, #16
 8003954:	221f      	movs	r2, #31
 8003956:	4618      	mov	r0, r3
 8003958:	f7fd feee 	bl	8001738 <FloatToUint8s>
 800395c:	e03a      	b.n	80039d4 <TaskTune+0x38c>
 800395e:	bf00      	nop
 8003960:	2000025c 	.word	0x2000025c
 8003964:	20000468 	.word	0x20000468
 8003968:	20000218 	.word	0x20000218
 800396c:	20000450 	.word	0x20000450
 8003970:	200003b6 	.word	0x200003b6
 8003974:	200002e4 	.word	0x200002e4
 8003978:	2000046c 	.word	0x2000046c
 800397c:	200002a0 	.word	0x200002a0
 8003980:	20000454 	.word	0x20000454
 8003984:	200003ba 	.word	0x200003ba
 8003988:	20000328 	.word	0x20000328
 800398c:	20000458 	.word	0x20000458
 8003990:	200003be 	.word	0x200003be
 8003994:	2000036c 	.word	0x2000036c
 8003998:	20000510 	.word	0x20000510
 800399c:	200003b2 	.word	0x200003b2
 80039a0:	20000001 	.word	0x20000001
 80039a4:	20000de8 	.word	0x20000de8
 80039a8:	20000dd8 	.word	0x20000dd8
 80039ac:	20000dd4 	.word	0x20000dd4
 80039b0:	200003b4 	.word	0x200003b4
 80039b4:	51eb851f 	.word	0x51eb851f
 80039b8:	2000020c 	.word	0x2000020c
 80039bc:	40240000 	.word	0x40240000
 80039c0:	200003b8 	.word	0x200003b8
				}
				else
					FloatToUint8s(PID_Pi_ref, SpiTuneData2, 31);
 80039c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039c8:	221f      	movs	r2, #31
 80039ca:	4619      	mov	r1, r3
 80039cc:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80039d0:	f7fd feb2 	bl	8001738 <FloatToUint8s>
				// Measurement
				FloatToUint8s(PID_Pi_meas, SpiTuneData2, 35);
 80039d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039d8:	2223      	movs	r2, #35	; 0x23
 80039da:	4619      	mov	r1, r3
 80039dc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80039e0:	f7fd feaa 	bl	8001738 <FloatToUint8s>
				// Output
				Int16ToUint8s(PID_Pi_out, SpiTuneData2, 39);
 80039e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039e8:	2227      	movs	r2, #39	; 0x27
 80039ea:	4619      	mov	r1, r3
 80039ec:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80039f0:	f7fd feda 	bl	80017a8 <Int16ToUint8s>


				// Pack PID_Y data
				// Gains
				FloatToUint8s(&(PID_Y->Kp), SpiTuneData1, 41);
 80039f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039f8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80039fc:	2229      	movs	r2, #41	; 0x29
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fd fe9a 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&(PID_Y->Ki), SpiTuneData1, 45);
 8003a04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a08:	3304      	adds	r3, #4
 8003a0a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003a0e:	222d      	movs	r2, #45	; 0x2d
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fd fe91 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&(PID_Y->Kd), SpiTuneData1, 49);
 8003a16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003a20:	2231      	movs	r2, #49	; 0x31
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fd fe88 	bl	8001738 <FloatToUint8s>
				// Reference -> Calculated in every cycle
				PID_Y_ref_devided = Yaw_in / 10;
 8003a28:	4bbc      	ldr	r3, [pc, #752]	; (8003d1c <TaskTune+0x6d4>)
 8003a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a2e:	4abc      	ldr	r2, [pc, #752]	; (8003d20 <TaskTune+0x6d8>)
 8003a30:	fb82 1203 	smull	r1, r2, r2, r3
 8003a34:	1092      	asrs	r2, r2, #2
 8003a36:	17db      	asrs	r3, r3, #31
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	b21a      	sxth	r2, r3
 8003a3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a40:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003a44:	801a      	strh	r2, [r3, #0]
				Int16ToUint8s(&PID_Y_ref_devided, SpiTuneData2, 41);
 8003a46:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003a4a:	f107 030e 	add.w	r3, r7, #14
 8003a4e:	2229      	movs	r2, #41	; 0x29
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fd fea9 	bl	80017a8 <Int16ToUint8s>
				// Measurement
				FloatToUint8s(PID_Y_meas, SpiTuneData2, 43);
 8003a56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a5a:	222b      	movs	r2, #43	; 0x2b
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8003a62:	f7fd fe69 	bl	8001738 <FloatToUint8s>
				// Output
				Int16ToUint8s(PID_Y_out, SpiTuneData2, 47);
 8003a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a6a:	222f      	movs	r2, #47	; 0x2f
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8003a72:	f7fd fe99 	bl	80017a8 <Int16ToUint8s>


				// Pack PID_T data
				// Gains
				FloatToUint8s(&(PID_T->Kp), SpiTuneData2, 49);
 8003a76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a7a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003a7e:	2231      	movs	r2, #49	; 0x31
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fd fe59 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&(PID_T->Ki), SpiTuneData2, 53);
 8003a86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003a90:	2235      	movs	r2, #53	; 0x35
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fd fe50 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&(PID_T->Kd), SpiTuneData2, 57);
 8003a98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003aa2:	2239      	movs	r2, #57	; 0x39
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fd fe47 	bl	8001738 <FloatToUint8s>
				// Reference -> Calculated in every cycle
				PID_T_ref_devided = Throttle_in;
 8003aaa:	4b9e      	ldr	r3, [pc, #632]	; (8003d24 <TaskTune+0x6dc>)
 8003aac:	881a      	ldrh	r2, [r3, #0]
 8003aae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ab2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ab6:	801a      	strh	r2, [r3, #0]
				Uint16ToUint8s(&PID_T_ref_devided, SpiTuneData1, 53);
 8003ab8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003abc:	f107 030c 	add.w	r3, r7, #12
 8003ac0:	2235      	movs	r2, #53	; 0x35
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fd fe5d 	bl	8001782 <Uint16ToUint8s>
				// Measurement
				FloatToUint8s(PID_T_meas, SpiTuneData1, 55);
 8003ac8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003acc:	2237      	movs	r2, #55	; 0x37
 8003ace:	4619      	mov	r1, r3
 8003ad0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8003ad4:	f7fd fe30 	bl	8001738 <FloatToUint8s>
				// Output
				Uint16ToUint8s(PID_T_out, SpiTuneData1, 59);
 8003ad8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003adc:	223b      	movs	r2, #59	; 0x3b
 8003ade:	4619      	mov	r1, r3
 8003ae0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003ae4:	f7fd fe4d 	bl	8001782 <Uint16ToUint8s>

			}
			osMutexRelease(ControllerMutexHandle);
 8003ae8:	4b8f      	ldr	r3, [pc, #572]	; (8003d28 <TaskTune+0x6e0>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f00e f8cb 	bl	8011c88 <osMutexRelease>
			osMutexRelease(ImuMutexHandle);
 8003af2:	4b8e      	ldr	r3, [pc, #568]	; (8003d2c <TaskTune+0x6e4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f00e f8c6 	bl	8011c88 <osMutexRelease>
			osMutexRelease(RemoteDataMutexHandle);
 8003afc:	4b8c      	ldr	r3, [pc, #560]	; (8003d30 <TaskTune+0x6e8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f00e f8c1 	bl	8011c88 <osMutexRelease>
		}

		// Send packed data and receive tune data
		HAL_SPI_TransmitReceive(&hspi1, SpiTuneData1, Spi1Buffer, 64, HAL_MAX_DELAY);
 8003b06:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	2340      	movs	r3, #64	; 0x40
 8003b12:	4a88      	ldr	r2, [pc, #544]	; (8003d34 <TaskTune+0x6ec>)
 8003b14:	4888      	ldr	r0, [pc, #544]	; (8003d38 <TaskTune+0x6f0>)
 8003b16:	f00a f8ee 	bl	800dcf6 <HAL_SPI_TransmitReceive>
		osDelay(5);
 8003b1a:	2005      	movs	r0, #5
 8003b1c:	f00e f839 	bl	8011b92 <osDelay>
		HAL_SPI_TransmitReceive(&hspi1, SpiTuneData2, Spi1Buffer, 64, HAL_MAX_DELAY);
 8003b20:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003b24:	f04f 33ff 	mov.w	r3, #4294967295
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	2340      	movs	r3, #64	; 0x40
 8003b2c:	4a81      	ldr	r2, [pc, #516]	; (8003d34 <TaskTune+0x6ec>)
 8003b2e:	4882      	ldr	r0, [pc, #520]	; (8003d38 <TaskTune+0x6f0>)
 8003b30:	f00a f8e1 	bl	800dcf6 <HAL_SPI_TransmitReceive>



		// Check if any new valid command has arrived
		if (Spi1Buffer[1] != 0)
 8003b34:	4b7f      	ldr	r3, [pc, #508]	; (8003d34 <TaskTune+0x6ec>)
 8003b36:	785b      	ldrb	r3, [r3, #1]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d01f      	beq.n	8003b7e <TaskTune+0x536>
		{
			for (int i = 0; i < 6; i++)
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003b44:	e017      	b.n	8003b76 <TaskTune+0x52e>
			{
				if (LastValidTuningData[i] == Spi1Buffer[i+1])
 8003b46:	f107 0220 	add.w	r2, r7, #32
 8003b4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b4e:	4413      	add	r3, r2
 8003b50:	781a      	ldrb	r2, [r3, #0]
 8003b52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b56:	3301      	adds	r3, #1
 8003b58:	4976      	ldr	r1, [pc, #472]	; (8003d34 <TaskTune+0x6ec>)
 8003b5a:	5ccb      	ldrb	r3, [r1, r3]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d003      	beq.n	8003b6a <TaskTune+0x522>
					continue;
				else
				{
					NewTuneCommand = true;
 8003b62:	2301      	movs	r3, #1
 8003b64:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
					break;
 8003b68:	e009      	b.n	8003b7e <TaskTune+0x536>
					continue;
 8003b6a:	bf00      	nop
			for (int i = 0; i < 6; i++)
 8003b6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b70:	3301      	adds	r3, #1
 8003b72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003b76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b7a:	2b05      	cmp	r3, #5
 8003b7c:	dde3      	ble.n	8003b46 <TaskTune+0x4fe>
				}
			}
		}

		// If any new tuning command has arrived
		if (NewTuneCommand)
 8003b7e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f43f adc5 	beq.w	8003712 <TaskTune+0xca>
		{
			// Tune controllers based on the received data
			float float_value = 0;
 8003b88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
			FloatFromUint8s(Spi1Buffer, 3, &float_value);
 8003b96:	f107 0308 	add.w	r3, r7, #8
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	2103      	movs	r1, #3
 8003b9e:	4865      	ldr	r0, [pc, #404]	; (8003d34 <TaskTune+0x6ec>)
 8003ba0:	f7fd fddc 	bl	800175c <FloatFromUint8s>

			if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK)
 8003ba4:	4b60      	ldr	r3, [pc, #384]	; (8003d28 <TaskTune+0x6e0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bac:	4618      	mov	r0, r3
 8003bae:	f00e f81d 	bl	8011bec <osMutexWait>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f040 812c 	bne.w	8003e12 <TaskTune+0x7ca>
			{
				if (Spi1Buffer[1] == 1) // PID_Ro
 8003bba:	4b5e      	ldr	r3, [pc, #376]	; (8003d34 <TaskTune+0x6ec>)
 8003bbc:	785b      	ldrb	r3, [r3, #1]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d12a      	bne.n	8003c1a <TaskTune+0x5d2>
				{
					if (Spi1Buffer[2] == 'p')
 8003bc4:	4b5b      	ldr	r3, [pc, #364]	; (8003d34 <TaskTune+0x6ec>)
 8003bc6:	789b      	ldrb	r3, [r3, #2]
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b70      	cmp	r3, #112	; 0x70
 8003bcc:	d108      	bne.n	8003be0 <TaskTune+0x598>
						PID_Ro->Kp = float_value;
 8003bce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	e118      	b.n	8003e12 <TaskTune+0x7ca>
					else if (Spi1Buffer[2] == 'i')
 8003be0:	4b54      	ldr	r3, [pc, #336]	; (8003d34 <TaskTune+0x6ec>)
 8003be2:	789b      	ldrb	r3, [r3, #2]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b69      	cmp	r3, #105	; 0x69
 8003be8:	d108      	bne.n	8003bfc <TaskTune+0x5b4>
						PID_Ro->Ki = float_value;
 8003bea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	e10a      	b.n	8003e12 <TaskTune+0x7ca>
					else if (Spi1Buffer[2] == 'd')
 8003bfc:	4b4d      	ldr	r3, [pc, #308]	; (8003d34 <TaskTune+0x6ec>)
 8003bfe:	789b      	ldrb	r3, [r3, #2]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b64      	cmp	r3, #100	; 0x64
 8003c04:	f040 8105 	bne.w	8003e12 <TaskTune+0x7ca>
						PID_Ro->Kd = float_value;
 8003c08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	e0fb      	b.n	8003e12 <TaskTune+0x7ca>
				}
				else if (Spi1Buffer[1] == 2) // PID_Ri
 8003c1a:	4b46      	ldr	r3, [pc, #280]	; (8003d34 <TaskTune+0x6ec>)
 8003c1c:	785b      	ldrb	r3, [r3, #1]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d12a      	bne.n	8003c7a <TaskTune+0x632>
				{
					if (Spi1Buffer[2] == 'p')
 8003c24:	4b43      	ldr	r3, [pc, #268]	; (8003d34 <TaskTune+0x6ec>)
 8003c26:	789b      	ldrb	r3, [r3, #2]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b70      	cmp	r3, #112	; 0x70
 8003c2c:	d108      	bne.n	8003c40 <TaskTune+0x5f8>
						PID_Ri->Kp = float_value;
 8003c2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	e0e8      	b.n	8003e12 <TaskTune+0x7ca>
					else if (Spi1Buffer[2] == 'i')
 8003c40:	4b3c      	ldr	r3, [pc, #240]	; (8003d34 <TaskTune+0x6ec>)
 8003c42:	789b      	ldrb	r3, [r3, #2]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b69      	cmp	r3, #105	; 0x69
 8003c48:	d108      	bne.n	8003c5c <TaskTune+0x614>
						PID_Ri->Ki = float_value;
 8003c4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	e0da      	b.n	8003e12 <TaskTune+0x7ca>
					else if (Spi1Buffer[2] == 'd')
 8003c5c:	4b35      	ldr	r3, [pc, #212]	; (8003d34 <TaskTune+0x6ec>)
 8003c5e:	789b      	ldrb	r3, [r3, #2]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b64      	cmp	r3, #100	; 0x64
 8003c64:	f040 80d5 	bne.w	8003e12 <TaskTune+0x7ca>
						PID_Ri->Kd = float_value;
 8003c68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003c76:	609a      	str	r2, [r3, #8]
 8003c78:	e0cb      	b.n	8003e12 <TaskTune+0x7ca>
				}
				else if (Spi1Buffer[1] == 3) // PID_Po
 8003c7a:	4b2e      	ldr	r3, [pc, #184]	; (8003d34 <TaskTune+0x6ec>)
 8003c7c:	785b      	ldrb	r3, [r3, #1]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d12a      	bne.n	8003cda <TaskTune+0x692>
				{
					if (Spi1Buffer[2] == 'p')
 8003c84:	4b2b      	ldr	r3, [pc, #172]	; (8003d34 <TaskTune+0x6ec>)
 8003c86:	789b      	ldrb	r3, [r3, #2]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b70      	cmp	r3, #112	; 0x70
 8003c8c:	d108      	bne.n	8003ca0 <TaskTune+0x658>
						PID_Po->Kp = float_value;
 8003c8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	e0b8      	b.n	8003e12 <TaskTune+0x7ca>
					else if (Spi1Buffer[2] == 'i')
 8003ca0:	4b24      	ldr	r3, [pc, #144]	; (8003d34 <TaskTune+0x6ec>)
 8003ca2:	789b      	ldrb	r3, [r3, #2]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b69      	cmp	r3, #105	; 0x69
 8003ca8:	d108      	bne.n	8003cbc <TaskTune+0x674>
						PID_Po->Ki = float_value;
 8003caa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	e0aa      	b.n	8003e12 <TaskTune+0x7ca>
					else if (Spi1Buffer[2] == 'd')
 8003cbc:	4b1d      	ldr	r3, [pc, #116]	; (8003d34 <TaskTune+0x6ec>)
 8003cbe:	789b      	ldrb	r3, [r3, #2]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b64      	cmp	r3, #100	; 0x64
 8003cc4:	f040 80a5 	bne.w	8003e12 <TaskTune+0x7ca>
						PID_Po->Kd = float_value;
 8003cc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	e09b      	b.n	8003e12 <TaskTune+0x7ca>
				}
				else if (Spi1Buffer[1] == 4) // PID_Pi
 8003cda:	4b16      	ldr	r3, [pc, #88]	; (8003d34 <TaskTune+0x6ec>)
 8003cdc:	785b      	ldrb	r3, [r3, #1]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d139      	bne.n	8003d58 <TaskTune+0x710>
				{
					if (Spi1Buffer[2] == 'p')
 8003ce4:	4b13      	ldr	r3, [pc, #76]	; (8003d34 <TaskTune+0x6ec>)
 8003ce6:	789b      	ldrb	r3, [r3, #2]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b70      	cmp	r3, #112	; 0x70
 8003cec:	d108      	bne.n	8003d00 <TaskTune+0x6b8>
						PID_Pi->Kp = float_value;
 8003cee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003cf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	e088      	b.n	8003e12 <TaskTune+0x7ca>
					else if (Spi1Buffer[2] == 'i')
 8003d00:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <TaskTune+0x6ec>)
 8003d02:	789b      	ldrb	r3, [r3, #2]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b69      	cmp	r3, #105	; 0x69
 8003d08:	d118      	bne.n	8003d3c <TaskTune+0x6f4>
						PID_Pi->Ki = float_value;
 8003d0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003d0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003d18:	605a      	str	r2, [r3, #4]
 8003d1a:	e07a      	b.n	8003e12 <TaskTune+0x7ca>
 8003d1c:	200003bc 	.word	0x200003bc
 8003d20:	66666667 	.word	0x66666667
 8003d24:	200003b0 	.word	0x200003b0
 8003d28:	20000de8 	.word	0x20000de8
 8003d2c:	20000dd8 	.word	0x20000dd8
 8003d30:	20000dd4 	.word	0x20000dd4
 8003d34:	20000714 	.word	0x20000714
 8003d38:	20000a5c 	.word	0x20000a5c
					else if (Spi1Buffer[2] == 'd')
 8003d3c:	4b46      	ldr	r3, [pc, #280]	; (8003e58 <TaskTune+0x810>)
 8003d3e:	789b      	ldrb	r3, [r3, #2]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b64      	cmp	r3, #100	; 0x64
 8003d44:	d165      	bne.n	8003e12 <TaskTune+0x7ca>
						PID_Pi->Kd = float_value;
 8003d46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003d54:	609a      	str	r2, [r3, #8]
 8003d56:	e05c      	b.n	8003e12 <TaskTune+0x7ca>
				}
				else if (Spi1Buffer[1] == 5) // PID_Y
 8003d58:	4b3f      	ldr	r3, [pc, #252]	; (8003e58 <TaskTune+0x810>)
 8003d5a:	785b      	ldrb	r3, [r3, #1]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b05      	cmp	r3, #5
 8003d60:	d129      	bne.n	8003db6 <TaskTune+0x76e>
				{
					if (Spi1Buffer[2] == 'p')
 8003d62:	4b3d      	ldr	r3, [pc, #244]	; (8003e58 <TaskTune+0x810>)
 8003d64:	789b      	ldrb	r3, [r3, #2]
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b70      	cmp	r3, #112	; 0x70
 8003d6a:	d108      	bne.n	8003d7e <TaskTune+0x736>
						PID_Y->Kp = float_value;
 8003d6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003d70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	e049      	b.n	8003e12 <TaskTune+0x7ca>
					else if (Spi1Buffer[2] == 'i')
 8003d7e:	4b36      	ldr	r3, [pc, #216]	; (8003e58 <TaskTune+0x810>)
 8003d80:	789b      	ldrb	r3, [r3, #2]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b69      	cmp	r3, #105	; 0x69
 8003d86:	d108      	bne.n	8003d9a <TaskTune+0x752>
						PID_Y->Ki = float_value;
 8003d88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d96:	605a      	str	r2, [r3, #4]
 8003d98:	e03b      	b.n	8003e12 <TaskTune+0x7ca>
					else if (Spi1Buffer[2] == 'd')
 8003d9a:	4b2f      	ldr	r3, [pc, #188]	; (8003e58 <TaskTune+0x810>)
 8003d9c:	789b      	ldrb	r3, [r3, #2]
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b64      	cmp	r3, #100	; 0x64
 8003da2:	d136      	bne.n	8003e12 <TaskTune+0x7ca>
						PID_Y->Kd = float_value;
 8003da4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003db2:	609a      	str	r2, [r3, #8]
 8003db4:	e02d      	b.n	8003e12 <TaskTune+0x7ca>
				}
				else if (Spi1Buffer[1] == 6) // PID_T
 8003db6:	4b28      	ldr	r3, [pc, #160]	; (8003e58 <TaskTune+0x810>)
 8003db8:	785b      	ldrb	r3, [r3, #1]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b06      	cmp	r3, #6
 8003dbe:	d128      	bne.n	8003e12 <TaskTune+0x7ca>
				{
					if (Spi1Buffer[2] == 'p')
 8003dc0:	4b25      	ldr	r3, [pc, #148]	; (8003e58 <TaskTune+0x810>)
 8003dc2:	789b      	ldrb	r3, [r3, #2]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b70      	cmp	r3, #112	; 0x70
 8003dc8:	d108      	bne.n	8003ddc <TaskTune+0x794>
						PID_T->Kp = float_value;
 8003dca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	e01a      	b.n	8003e12 <TaskTune+0x7ca>
					else if (Spi1Buffer[2] == 'i')
 8003ddc:	4b1e      	ldr	r3, [pc, #120]	; (8003e58 <TaskTune+0x810>)
 8003dde:	789b      	ldrb	r3, [r3, #2]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b69      	cmp	r3, #105	; 0x69
 8003de4:	d108      	bne.n	8003df8 <TaskTune+0x7b0>
						PID_T->Ki = float_value;
 8003de6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	e00c      	b.n	8003e12 <TaskTune+0x7ca>
					else if (Spi1Buffer[2] == 'd')
 8003df8:	4b17      	ldr	r3, [pc, #92]	; (8003e58 <TaskTune+0x810>)
 8003dfa:	789b      	ldrb	r3, [r3, #2]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b64      	cmp	r3, #100	; 0x64
 8003e00:	d107      	bne.n	8003e12 <TaskTune+0x7ca>
						PID_T->Kd = float_value;
 8003e02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e10:	609a      	str	r2, [r3, #8]
				}
			}
			osMutexRelease(ControllerMutexHandle);
 8003e12:	4b12      	ldr	r3, [pc, #72]	; (8003e5c <TaskTune+0x814>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f00d ff36 	bl	8011c88 <osMutexRelease>

			// And finally save the current tuning data
			for (int i = 0; i < 6; i++)
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003e22:	e011      	b.n	8003e48 <TaskTune+0x800>
				LastValidTuningData[i] = Spi1Buffer[i+1];
 8003e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e28:	3301      	adds	r3, #1
 8003e2a:	4a0b      	ldr	r2, [pc, #44]	; (8003e58 <TaskTune+0x810>)
 8003e2c:	5cd3      	ldrb	r3, [r2, r3]
 8003e2e:	b2d9      	uxtb	r1, r3
 8003e30:	f107 0220 	add.w	r2, r7, #32
 8003e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e38:	4413      	add	r3, r2
 8003e3a:	460a      	mov	r2, r1
 8003e3c:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 6; i++)
 8003e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e42:	3301      	adds	r3, #1
 8003e44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e4c:	2b05      	cmp	r3, #5
 8003e4e:	dde9      	ble.n	8003e24 <TaskTune+0x7dc>

			NewTuneCommand = false;
 8003e50:	2300      	movs	r3, #0
 8003e52:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8003e56:	e45c      	b.n	8003712 <TaskTune+0xca>
 8003e58:	20000714 	.word	0x20000714
 8003e5c:	20000de8 	.word	0x20000de8

08003e60 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4a07      	ldr	r2, [pc, #28]	; (8003e8c <vApplicationGetIdleTaskMemory+0x2c>)
 8003e70:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	4a06      	ldr	r2, [pc, #24]	; (8003e90 <vApplicationGetIdleTaskMemory+0x30>)
 8003e76:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2280      	movs	r2, #128	; 0x80
 8003e7c:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20000768 	.word	0x20000768
 8003e90:	20000808 	.word	0x20000808

08003e94 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a42      	ldr	r2, [pc, #264]	; (8003fa8 <HAL_UART_RxCpltCallback+0x114>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d130      	bne.n	8003f06 <HAL_UART_RxCpltCallback+0x72>
	{
		Uart2CallbackCounter++;
 8003ea4:	4b41      	ldr	r3, [pc, #260]	; (8003fac <HAL_UART_RxCpltCallback+0x118>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	4a40      	ldr	r2, [pc, #256]	; (8003fac <HAL_UART_RxCpltCallback+0x118>)
 8003eac:	6013      	str	r3, [r2, #0]

		if (osMutexWait(RemoteBufferMutexHandle, 0) == osOK)
 8003eae:	4b40      	ldr	r3, [pc, #256]	; (8003fb0 <HAL_UART_RxCpltCallback+0x11c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f00d fe99 	bl	8011bec <osMutexWait>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d11c      	bne.n	8003efa <HAL_UART_RxCpltCallback+0x66>
		{
			for (int i = 0; i < REM_BUF_SIZE; i++)
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	e00c      	b.n	8003ee0 <HAL_UART_RxCpltCallback+0x4c>
				RemoteBuffer[i] = Uart2Buffer[i];
 8003ec6:	4a3b      	ldr	r2, [pc, #236]	; (8003fb4 <HAL_UART_RxCpltCallback+0x120>)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	b2d9      	uxtb	r1, r3
 8003ed0:	4a39      	ldr	r2, [pc, #228]	; (8003fb8 <HAL_UART_RxCpltCallback+0x124>)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	460a      	mov	r2, r1
 8003ed8:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < REM_BUF_SIZE; i++)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	3301      	adds	r3, #1
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b3f      	cmp	r3, #63	; 0x3f
 8003ee4:	ddef      	ble.n	8003ec6 <HAL_UART_RxCpltCallback+0x32>

			osMutexRelease(RemoteBufferMutexHandle);
 8003ee6:	4b32      	ldr	r3, [pc, #200]	; (8003fb0 <HAL_UART_RxCpltCallback+0x11c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f00d fecc 	bl	8011c88 <osMutexRelease>

			// Signal to TaskTemote
			osSemaphoreRelease(RemoteBufferFullSemaphoreHandle);
 8003ef0:	4b32      	ldr	r3, [pc, #200]	; (8003fbc <HAL_UART_RxCpltCallback+0x128>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f00d ff7d 	bl	8011df4 <osSemaphoreRelease>
		}

		HAL_UART_Receive_IT(&huart2, &Uart2Buffer, 64);
 8003efa:	2240      	movs	r2, #64	; 0x40
 8003efc:	492d      	ldr	r1, [pc, #180]	; (8003fb4 <HAL_UART_RxCpltCallback+0x120>)
 8003efe:	482a      	ldr	r0, [pc, #168]	; (8003fa8 <HAL_UART_RxCpltCallback+0x114>)
 8003f00:	f00c f9c3 	bl	801028a <HAL_UART_Receive_IT>
			//HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}

		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
	}
}
 8003f04:	e04b      	b.n	8003f9e <HAL_UART_RxCpltCallback+0x10a>
	else if (huart == &huart4)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a2d      	ldr	r2, [pc, #180]	; (8003fc0 <HAL_UART_RxCpltCallback+0x12c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d147      	bne.n	8003f9e <HAL_UART_RxCpltCallback+0x10a>
		if ((GPSPackageIndex == 0 && Uart4Buffer == '$')
 8003f0e:	4b2d      	ldr	r3, [pc, #180]	; (8003fc4 <HAL_UART_RxCpltCallback+0x130>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d104      	bne.n	8003f22 <HAL_UART_RxCpltCallback+0x8e>
 8003f18:	4b2b      	ldr	r3, [pc, #172]	; (8003fc8 <HAL_UART_RxCpltCallback+0x134>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b24      	cmp	r3, #36	; 0x24
 8003f20:	d013      	beq.n	8003f4a <HAL_UART_RxCpltCallback+0xb6>
				|| (GPSPackageIndex == 1 && Uart4Buffer == 'G')
 8003f22:	4b28      	ldr	r3, [pc, #160]	; (8003fc4 <HAL_UART_RxCpltCallback+0x130>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d104      	bne.n	8003f36 <HAL_UART_RxCpltCallback+0xa2>
 8003f2c:	4b26      	ldr	r3, [pc, #152]	; (8003fc8 <HAL_UART_RxCpltCallback+0x134>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b47      	cmp	r3, #71	; 0x47
 8003f34:	d009      	beq.n	8003f4a <HAL_UART_RxCpltCallback+0xb6>
				|| (1 < GPSPackageIndex && GPSPackageIndex < GPS_BUFFSIZE))
 8003f36:	4b23      	ldr	r3, [pc, #140]	; (8003fc4 <HAL_UART_RxCpltCallback+0x130>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d926      	bls.n	8003f8e <HAL_UART_RxCpltCallback+0xfa>
 8003f40:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <HAL_UART_RxCpltCallback+0x130>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2bff      	cmp	r3, #255	; 0xff
 8003f48:	d021      	beq.n	8003f8e <HAL_UART_RxCpltCallback+0xfa>
			GPSPackageBuffer[GPSPackageIndex] = Uart4Buffer;
 8003f4a:	4b1e      	ldr	r3, [pc, #120]	; (8003fc4 <HAL_UART_RxCpltCallback+0x130>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	461a      	mov	r2, r3
 8003f52:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <HAL_UART_RxCpltCallback+0x134>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	b2d9      	uxtb	r1, r3
 8003f58:	4b1c      	ldr	r3, [pc, #112]	; (8003fcc <HAL_UART_RxCpltCallback+0x138>)
 8003f5a:	5499      	strb	r1, [r3, r2]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8003f5c:	4b19      	ldr	r3, [pc, #100]	; (8003fc4 <HAL_UART_RxCpltCallback+0x130>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2bfd      	cmp	r3, #253	; 0xfd
 8003f64:	d807      	bhi.n	8003f76 <HAL_UART_RxCpltCallback+0xe2>
				GPSPackageIndex++;
 8003f66:	4b17      	ldr	r3, [pc, #92]	; (8003fc4 <HAL_UART_RxCpltCallback+0x130>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	4b14      	ldr	r3, [pc, #80]	; (8003fc4 <HAL_UART_RxCpltCallback+0x130>)
 8003f72:	701a      	strb	r2, [r3, #0]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8003f74:	e00e      	b.n	8003f94 <HAL_UART_RxCpltCallback+0x100>
				GPSPackageIndex = 0;
 8003f76:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <HAL_UART_RxCpltCallback+0x130>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	701a      	strb	r2, [r3, #0]
				ProcessGPSPackageBuffer = true;
 8003f7c:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <HAL_UART_RxCpltCallback+0x13c>)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	701a      	strb	r2, [r3, #0]
				osSemaphoreRelease(GpsBufferSemaphoreHandle);
 8003f82:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <HAL_UART_RxCpltCallback+0x140>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f00d ff34 	bl	8011df4 <osSemaphoreRelease>
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8003f8c:	e002      	b.n	8003f94 <HAL_UART_RxCpltCallback+0x100>
			GPSPackageIndex = 0;
 8003f8e:	4b0d      	ldr	r3, [pc, #52]	; (8003fc4 <HAL_UART_RxCpltCallback+0x130>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
 8003f94:	2201      	movs	r2, #1
 8003f96:	490c      	ldr	r1, [pc, #48]	; (8003fc8 <HAL_UART_RxCpltCallback+0x134>)
 8003f98:	4809      	ldr	r0, [pc, #36]	; (8003fc0 <HAL_UART_RxCpltCallback+0x12c>)
 8003f9a:	f00c f9ba 	bl	8010312 <HAL_UART_Receive_DMA>
}
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000c44 	.word	0x20000c44
 8003fac:	20000210 	.word	0x20000210
 8003fb0:	20000de4 	.word	0x20000de4
 8003fb4:	20000514 	.word	0x20000514
 8003fb8:	20000554 	.word	0x20000554
 8003fbc:	20000df4 	.word	0x20000df4
 8003fc0:	20000bbc 	.word	0x20000bbc
 8003fc4:	20000611 	.word	0x20000611
 8003fc8:	20000610 	.word	0x20000610
 8003fcc:	20000614 	.word	0x20000614
 8003fd0:	20000713 	.word	0x20000713
 8003fd4:	20000df0 	.word	0x20000df0

08003fd8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08a      	sub	sp, #40	; 0x28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a23      	ldr	r2, [pc, #140]	; (8004070 <HAL_UART_ErrorCallback+0x98>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d11c      	bne.n	8004022 <HAL_UART_ErrorCallback+0x4a>
	{
		if (huart->ErrorCode != 0)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d03a      	beq.n	8004068 <HAL_UART_ErrorCallback+0x90>
		{
			//Diag = false;

			char str[32];
			sprintf(str, "UART2 Error Callback: %d\r\n", huart->ErrorCode);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003ff8:	f107 0308 	add.w	r3, r7, #8
 8003ffc:	491d      	ldr	r1, [pc, #116]	; (8004074 <HAL_UART_ErrorCallback+0x9c>)
 8003ffe:	4618      	mov	r0, r3
 8004000:	f002 fa94 	bl	800652c <sprintf_>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8004004:	f107 0308 	add.w	r3, r7, #8
 8004008:	4618      	mov	r0, r3
 800400a:	f7fc f959 	bl	80002c0 <strlen>
 800400e:	4603      	mov	r3, r0
 8004010:	b29a      	uxth	r2, r3
 8004012:	f107 0108 	add.w	r1, r7, #8
 8004016:	f04f 33ff 	mov.w	r3, #4294967295
 800401a:	4817      	ldr	r0, [pc, #92]	; (8004078 <HAL_UART_ErrorCallback+0xa0>)
 800401c:	f00c f8b2 	bl	8010184 <HAL_UART_Transmit>
			char str[32];
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}
	}
}
 8004020:	e022      	b.n	8004068 <HAL_UART_ErrorCallback+0x90>
	else if (huart == &huart4)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a15      	ldr	r2, [pc, #84]	; (800407c <HAL_UART_ErrorCallback+0xa4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d11e      	bne.n	8004068 <HAL_UART_ErrorCallback+0x90>
		if (huart->ErrorCode != 0)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004030:	2b00      	cmp	r3, #0
 8004032:	d019      	beq.n	8004068 <HAL_UART_ErrorCallback+0x90>
			Diag = false;
 8004034:	4b12      	ldr	r3, [pc, #72]	; (8004080 <HAL_UART_ErrorCallback+0xa8>)
 8004036:	2200      	movs	r2, #0
 8004038:	701a      	strb	r2, [r3, #0]
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004040:	f107 0308 	add.w	r3, r7, #8
 8004044:	490f      	ldr	r1, [pc, #60]	; (8004084 <HAL_UART_ErrorCallback+0xac>)
 8004046:	4618      	mov	r0, r3
 8004048:	f002 fa70 	bl	800652c <sprintf_>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 800404c:	f107 0308 	add.w	r3, r7, #8
 8004050:	4618      	mov	r0, r3
 8004052:	f7fc f935 	bl	80002c0 <strlen>
 8004056:	4603      	mov	r3, r0
 8004058:	b29a      	uxth	r2, r3
 800405a:	f107 0108 	add.w	r1, r7, #8
 800405e:	f04f 33ff 	mov.w	r3, #4294967295
 8004062:	4805      	ldr	r0, [pc, #20]	; (8004078 <HAL_UART_ErrorCallback+0xa0>)
 8004064:	f00c f88e 	bl	8010184 <HAL_UART_Transmit>
}
 8004068:	bf00      	nop
 800406a:	3728      	adds	r7, #40	; 0x28
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	20000c44 	.word	0x20000c44
 8004074:	0801bd60 	.word	0x0801bd60
 8004078:	20000ccc 	.word	0x20000ccc
 800407c:	20000bbc 	.word	0x20000bbc
 8004080:	20000000 	.word	0x20000000
 8004084:	0801bd7c 	.word	0x0801bd7c

08004088 <HAL_TIM_IC_CaptureCallback>:
			}
		}
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a05      	ldr	r2, [pc, #20]	; (80040a8 <HAL_TIM_IC_CaptureCallback+0x20>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d103      	bne.n	80040a0 <HAL_TIM_IC_CaptureCallback+0x18>
	{
		HCSR04_TMR_IC_ISR(&HCSR04, htim);
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4804      	ldr	r0, [pc, #16]	; (80040ac <HAL_TIM_IC_CaptureCallback+0x24>)
 800409c:	f006 fc10 	bl	800a8c0 <HCSR04_TMR_IC_ISR>
	}
}
 80040a0:	bf00      	nop
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20000b70 	.word	0x20000b70
 80040ac:	200004d8 	.word	0x200004d8

080040b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80040b0:	b5b0      	push	{r4, r5, r7, lr}
 80040b2:	b0c6      	sub	sp, #280	; 0x118
 80040b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80040b6:	f006 fd9c 	bl	800abf2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80040ba:	f000 f9eb 	bl	8004494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80040be:	f000 fce7 	bl	8004a90 <MX_GPIO_Init>
  MX_DMA_Init();
 80040c2:	f000 fcc7 	bl	8004a54 <MX_DMA_Init>
  MX_SPI1_Init();
 80040c6:	f000 fa91 	bl	80045ec <MX_SPI1_Init>
  MX_SPI2_Init();
 80040ca:	f000 facd 	bl	8004668 <MX_SPI2_Init>
  MX_TIM1_Init();
 80040ce:	f000 fb09 	bl	80046e4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80040d2:	f000 fbd7 	bl	8004884 <MX_TIM3_Init>
  MX_UART4_Init();
 80040d6:	f000 fc29 	bl	800492c <MX_UART4_Init>
  MX_USART2_UART_Init();
 80040da:	f000 fc57 	bl	800498c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80040de:	f000 fa45 	bl	800456c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80040e2:	f000 fc87 	bl	80049f4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Init IMU
  	if(MPU_Init(&hspi2, &MPU9250) == 0 && BMP280_initialize(&hspi2, &BMP280) == 0)
 80040e6:	4916      	ldr	r1, [pc, #88]	; (8004140 <main+0x90>)
 80040e8:	4816      	ldr	r0, [pc, #88]	; (8004144 <main+0x94>)
 80040ea:	f005 fff5 	bl	800a0d8 <MPU_Init>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <main+0x5a>
 80040f4:	4914      	ldr	r1, [pc, #80]	; (8004148 <main+0x98>)
 80040f6:	4813      	ldr	r0, [pc, #76]	; (8004144 <main+0x94>)
 80040f8:	f005 f9a0 	bl	800943c <BMP280_initialize>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d103      	bne.n	800410a <main+0x5a>
  		IsImuAvailable = true;
 8004102:	4b12      	ldr	r3, [pc, #72]	; (800414c <main+0x9c>)
 8004104:	2201      	movs	r2, #1
 8004106:	701a      	strb	r2, [r3, #0]
 8004108:	e002      	b.n	8004110 <main+0x60>
  	else
  		IsImuAvailable = false;
 800410a:	4b10      	ldr	r3, [pc, #64]	; (800414c <main+0x9c>)
 800410c:	2200      	movs	r2, #0
 800410e:	701a      	strb	r2, [r3, #0]

  	// Init Magnetometer
  	if (HMC5883L_Init() == 0)
 8004110:	f005 f816 	bl	8009140 <HMC5883L_Init>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d103      	bne.n	8004122 <main+0x72>
  		IsMagnAvailable = true;
 800411a:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <main+0xa0>)
 800411c:	2201      	movs	r2, #1
 800411e:	701a      	strb	r2, [r3, #0]
 8004120:	e002      	b.n	8004128 <main+0x78>
  	else
  		IsMagnAvailable = false;
 8004122:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <main+0xa0>)
 8004124:	2200      	movs	r2, #0
 8004126:	701a      	strb	r2, [r3, #0]

  	// Init Distance sensor
  	if (HCSR04_Init(&HCSR04, &htim3) == 0)
 8004128:	490a      	ldr	r1, [pc, #40]	; (8004154 <main+0xa4>)
 800412a:	480b      	ldr	r0, [pc, #44]	; (8004158 <main+0xa8>)
 800412c:	f006 fb7a 	bl	800a824 <HCSR04_Init>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d114      	bne.n	8004160 <main+0xb0>
  		IsDistAvailable = true;
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <main+0xac>)
 8004138:	2201      	movs	r2, #1
 800413a:	701a      	strb	r2, [r3, #0]
 800413c:	e013      	b.n	8004166 <main+0xb6>
 800413e:	bf00      	nop
 8004140:	200003cc 	.word	0x200003cc
 8004144:	20000ac0 	.word	0x20000ac0
 8004148:	20000474 	.word	0x20000474
 800414c:	20000214 	.word	0x20000214
 8004150:	20000215 	.word	0x20000215
 8004154:	20000b70 	.word	0x20000b70
 8004158:	200004d8 	.word	0x200004d8
 800415c:	20000216 	.word	0x20000216
  	else
  		IsDistAvailable = false;
 8004160:	4bb3      	ldr	r3, [pc, #716]	; (8004430 <main+0x380>)
 8004162:	2200      	movs	r2, #0
 8004164:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MagnMutex */
  osMutexDef(MagnMutex);
 8004166:	2300      	movs	r3, #0
 8004168:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800416c:	2300      	movs	r3, #0
 800416e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  MagnMutexHandle = osMutexCreate(osMutex(MagnMutex));
 8004172:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004176:	4618      	mov	r0, r3
 8004178:	f00d fd1f 	bl	8011bba <osMutexCreate>
 800417c:	4603      	mov	r3, r0
 800417e:	4aad      	ldr	r2, [pc, #692]	; (8004434 <main+0x384>)
 8004180:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteDataMutex */
  osMutexDef(RemoteDataMutex);
 8004182:	2300      	movs	r3, #0
 8004184:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004188:	2300      	movs	r3, #0
 800418a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RemoteDataMutexHandle = osMutexCreate(osMutex(RemoteDataMutex));
 800418e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004192:	4618      	mov	r0, r3
 8004194:	f00d fd11 	bl	8011bba <osMutexCreate>
 8004198:	4603      	mov	r3, r0
 800419a:	4aa7      	ldr	r2, [pc, #668]	; (8004438 <main+0x388>)
 800419c:	6013      	str	r3, [r2, #0]

  /* definition and creation of ImuMutex */
  osMutexDef(ImuMutex);
 800419e:	2300      	movs	r3, #0
 80041a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80041a4:	2300      	movs	r3, #0
 80041a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  ImuMutexHandle = osMutexCreate(osMutex(ImuMutex));
 80041aa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80041ae:	4618      	mov	r0, r3
 80041b0:	f00d fd03 	bl	8011bba <osMutexCreate>
 80041b4:	4603      	mov	r3, r0
 80041b6:	4aa1      	ldr	r2, [pc, #644]	; (800443c <main+0x38c>)
 80041b8:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsDataMutex */
  osMutexDef(GpsDataMutex);
 80041ba:	2300      	movs	r3, #0
 80041bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80041c0:	2300      	movs	r3, #0
 80041c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  GpsDataMutexHandle = osMutexCreate(osMutex(GpsDataMutex));
 80041c6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80041ca:	4618      	mov	r0, r3
 80041cc:	f00d fcf5 	bl	8011bba <osMutexCreate>
 80041d0:	4603      	mov	r3, r0
 80041d2:	4a9b      	ldr	r2, [pc, #620]	; (8004440 <main+0x390>)
 80041d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of DistMutex */
  osMutexDef(DistMutex);
 80041d6:	2300      	movs	r3, #0
 80041d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80041dc:	2300      	movs	r3, #0
 80041de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  DistMutexHandle = osMutexCreate(osMutex(DistMutex));
 80041e2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80041e6:	4618      	mov	r0, r3
 80041e8:	f00d fce7 	bl	8011bba <osMutexCreate>
 80041ec:	4603      	mov	r3, r0
 80041ee:	4a95      	ldr	r2, [pc, #596]	; (8004444 <main+0x394>)
 80041f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferMutex */
  osMutexDef(RemoteBufferMutex);
 80041f2:	2300      	movs	r3, #0
 80041f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041f8:	2300      	movs	r3, #0
 80041fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RemoteBufferMutexHandle = osMutexCreate(osMutex(RemoteBufferMutex));
 80041fe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004202:	4618      	mov	r0, r3
 8004204:	f00d fcd9 	bl	8011bba <osMutexCreate>
 8004208:	4603      	mov	r3, r0
 800420a:	4a8f      	ldr	r2, [pc, #572]	; (8004448 <main+0x398>)
 800420c:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControllerMutex */
  osMutexDef(ControllerMutex);
 800420e:	2300      	movs	r3, #0
 8004210:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004214:	2300      	movs	r3, #0
 8004216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  ControllerMutexHandle = osMutexCreate(osMutex(ControllerMutex));
 800421a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800421e:	4618      	mov	r0, r3
 8004220:	f00d fccb 	bl	8011bba <osMutexCreate>
 8004224:	4603      	mov	r3, r0
 8004226:	4a89      	ldr	r2, [pc, #548]	; (800444c <main+0x39c>)
 8004228:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */

	osMutexRelease(MagnMutexHandle);
 800422a:	4b82      	ldr	r3, [pc, #520]	; (8004434 <main+0x384>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f00d fd2a 	bl	8011c88 <osMutexRelease>
	osMutexRelease(RemoteDataMutexHandle);
 8004234:	4b80      	ldr	r3, [pc, #512]	; (8004438 <main+0x388>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f00d fd25 	bl	8011c88 <osMutexRelease>
	osMutexRelease(ImuMutexHandle);
 800423e:	4b7f      	ldr	r3, [pc, #508]	; (800443c <main+0x38c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f00d fd20 	bl	8011c88 <osMutexRelease>
	osMutexRelease(GpsDataMutexHandle);
 8004248:	4b7d      	ldr	r3, [pc, #500]	; (8004440 <main+0x390>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4618      	mov	r0, r3
 800424e:	f00d fd1b 	bl	8011c88 <osMutexRelease>
	osMutexRelease(RemoteBufferMutexHandle);
 8004252:	4b7d      	ldr	r3, [pc, #500]	; (8004448 <main+0x398>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f00d fd16 	bl	8011c88 <osMutexRelease>
	osMutexRelease(ControllerMutexHandle);
 800425c:	4b7b      	ldr	r3, [pc, #492]	; (800444c <main+0x39c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4618      	mov	r0, r3
 8004262:	f00d fd11 	bl	8011c88 <osMutexRelease>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of DistSemaphore */
  osSemaphoreDef(DistSemaphore);
 8004266:	2300      	movs	r3, #0
 8004268:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800426c:	2300      	movs	r3, #0
 800426e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  DistSemaphoreHandle = osSemaphoreCreate(osSemaphore(DistSemaphore), 1);
 8004272:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004276:	2101      	movs	r1, #1
 8004278:	4618      	mov	r0, r3
 800427a:	f00d fd3b 	bl	8011cf4 <osSemaphoreCreate>
 800427e:	4603      	mov	r3, r0
 8004280:	4a73      	ldr	r2, [pc, #460]	; (8004450 <main+0x3a0>)
 8004282:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsBufferSemaphore */
  osSemaphoreDef(GpsBufferSemaphore);
 8004284:	2300      	movs	r3, #0
 8004286:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800428a:	2300      	movs	r3, #0
 800428c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GpsBufferSemaphoreHandle = osSemaphoreCreate(osSemaphore(GpsBufferSemaphore), 1);
 8004290:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004294:	2101      	movs	r1, #1
 8004296:	4618      	mov	r0, r3
 8004298:	f00d fd2c 	bl	8011cf4 <osSemaphoreCreate>
 800429c:	4603      	mov	r3, r0
 800429e:	4a6d      	ldr	r2, [pc, #436]	; (8004454 <main+0x3a4>)
 80042a0:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferFullSemaphore */
  osSemaphoreDef(RemoteBufferFullSemaphore);
 80042a2:	2300      	movs	r3, #0
 80042a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042a8:	2300      	movs	r3, #0
 80042aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RemoteBufferFullSemaphoreHandle = osSemaphoreCreate(osSemaphore(RemoteBufferFullSemaphore), 1);
 80042ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80042b2:	2101      	movs	r1, #1
 80042b4:	4618      	mov	r0, r3
 80042b6:	f00d fd1d 	bl	8011cf4 <osSemaphoreCreate>
 80042ba:	4603      	mov	r3, r0
 80042bc:	4a66      	ldr	r2, [pc, #408]	; (8004458 <main+0x3a8>)
 80042be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  if (osSemaphoreGetCount(DistSemaphoreHandle) == 1)
 80042c0:	4b63      	ldr	r3, [pc, #396]	; (8004450 <main+0x3a0>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f00d fdcb 	bl	8011e60 <osSemaphoreGetCount>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d106      	bne.n	80042de <main+0x22e>
  	  osSemaphoreWait(DistSemaphoreHandle, osWaitForever);
 80042d0:	4b5f      	ldr	r3, [pc, #380]	; (8004450 <main+0x3a0>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f04f 31ff 	mov.w	r1, #4294967295
 80042d8:	4618      	mov	r0, r3
 80042da:	f00d fd3d 	bl	8011d58 <osSemaphoreWait>
  if (osSemaphoreGetCount(GpsBufferSemaphoreHandle) == 1)
 80042de:	4b5d      	ldr	r3, [pc, #372]	; (8004454 <main+0x3a4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f00d fdbc 	bl	8011e60 <osSemaphoreGetCount>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d106      	bne.n	80042fc <main+0x24c>
  	  osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever);
 80042ee:	4b59      	ldr	r3, [pc, #356]	; (8004454 <main+0x3a4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f04f 31ff 	mov.w	r1, #4294967295
 80042f6:	4618      	mov	r0, r3
 80042f8:	f00d fd2e 	bl	8011d58 <osSemaphoreWait>

  if (osSemaphoreGetCount(RemoteBufferFullSemaphoreHandle) == 1)
 80042fc:	4b56      	ldr	r3, [pc, #344]	; (8004458 <main+0x3a8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f00d fdad 	bl	8011e60 <osSemaphoreGetCount>
 8004306:	4603      	mov	r3, r0
 8004308:	2b01      	cmp	r3, #1
 800430a:	d106      	bne.n	800431a <main+0x26a>
  	  osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever);
 800430c:	4b52      	ldr	r3, [pc, #328]	; (8004458 <main+0x3a8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f04f 31ff 	mov.w	r1, #4294967295
 8004314:	4618      	mov	r0, r3
 8004316:	f00d fd1f 	bl	8011d58 <osSemaphoreWait>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskSensorData */
  osThreadDef(TaskSensorData, RunTaskSensorData, osPriorityHigh, 0, 512);
 800431a:	4b50      	ldr	r3, [pc, #320]	; (800445c <main+0x3ac>)
 800431c:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8004320:	461d      	mov	r5, r3
 8004322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004324:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004326:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800432a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSensorDataHandle = osThreadCreate(osThread(TaskSensorData), NULL);
 800432e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004332:	2100      	movs	r1, #0
 8004334:	4618      	mov	r0, r3
 8004336:	f00d fbe0 	bl	8011afa <osThreadCreate>
 800433a:	4603      	mov	r3, r0
 800433c:	4a48      	ldr	r2, [pc, #288]	; (8004460 <main+0x3b0>)
 800433e:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskController */
  osThreadDef(TaskController, RunTaskController, osPriorityAboveNormal, 0, 512);
 8004340:	4b48      	ldr	r3, [pc, #288]	; (8004464 <main+0x3b4>)
 8004342:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8004346:	461d      	mov	r5, r3
 8004348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800434a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800434c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004350:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskControllerHandle = osThreadCreate(osThread(TaskController), NULL);
 8004354:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004358:	2100      	movs	r1, #0
 800435a:	4618      	mov	r0, r3
 800435c:	f00d fbcd 	bl	8011afa <osThreadCreate>
 8004360:	4603      	mov	r3, r0
 8004362:	4a41      	ldr	r2, [pc, #260]	; (8004468 <main+0x3b8>)
 8004364:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskRemote */
  osThreadDef(TaskRemote, RunTaskRemote, osPriorityRealtime, 0, 512);
 8004366:	4b41      	ldr	r3, [pc, #260]	; (800446c <main+0x3bc>)
 8004368:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800436c:	461d      	mov	r5, r3
 800436e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004372:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004376:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskRemoteHandle = osThreadCreate(osThread(TaskRemote), NULL);
 800437a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800437e:	2100      	movs	r1, #0
 8004380:	4618      	mov	r0, r3
 8004382:	f00d fbba 	bl	8011afa <osThreadCreate>
 8004386:	4603      	mov	r3, r0
 8004388:	4a39      	ldr	r2, [pc, #228]	; (8004470 <main+0x3c0>)
 800438a:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskMotor */
  osThreadDef(TaskMotor, RunTaskMotor, osPriorityNormal, 0, 256);
 800438c:	4b39      	ldr	r3, [pc, #228]	; (8004474 <main+0x3c4>)
 800438e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8004392:	461d      	mov	r5, r3
 8004394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004398:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800439c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskMotorHandle = osThreadCreate(osThread(TaskMotor), NULL);
 80043a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80043a4:	2100      	movs	r1, #0
 80043a6:	4618      	mov	r0, r3
 80043a8:	f00d fba7 	bl	8011afa <osThreadCreate>
 80043ac:	4603      	mov	r3, r0
 80043ae:	4a32      	ldr	r2, [pc, #200]	; (8004478 <main+0x3c8>)
 80043b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskPower */
  osThreadDef(TaskPower, RunTaskPower, osPriorityBelowNormal, 0, 256);
 80043b2:	4b32      	ldr	r3, [pc, #200]	; (800447c <main+0x3cc>)
 80043b4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80043b8:	461d      	mov	r5, r3
 80043ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80043c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskPowerHandle = osThreadCreate(osThread(TaskPower), NULL);
 80043c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80043ca:	2100      	movs	r1, #0
 80043cc:	4618      	mov	r0, r3
 80043ce:	f00d fb94 	bl	8011afa <osThreadCreate>
 80043d2:	4603      	mov	r3, r0
 80043d4:	4a2a      	ldr	r2, [pc, #168]	; (8004480 <main+0x3d0>)
 80043d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskDiagnostics */
  osThreadDef(TaskDiagnostics, RunTaskDiagnostics, osPriorityLow, 0, 2048);
 80043d8:	4b2a      	ldr	r3, [pc, #168]	; (8004484 <main+0x3d4>)
 80043da:	f107 0420 	add.w	r4, r7, #32
 80043de:	461d      	mov	r5, r3
 80043e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80043e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDiagnosticsHandle = osThreadCreate(osThread(TaskDiagnostics), NULL);
 80043ec:	f107 0320 	add.w	r3, r7, #32
 80043f0:	2100      	movs	r1, #0
 80043f2:	4618      	mov	r0, r3
 80043f4:	f00d fb81 	bl	8011afa <osThreadCreate>
 80043f8:	4603      	mov	r3, r0
 80043fa:	4a23      	ldr	r2, [pc, #140]	; (8004488 <main+0x3d8>)
 80043fc:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTune */
  osThreadDef(TaskTune, RunTaskTune, osPriorityBelowNormal, 0, 512);
 80043fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004402:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004406:	4a21      	ldr	r2, [pc, #132]	; (800448c <main+0x3dc>)
 8004408:	461c      	mov	r4, r3
 800440a:	4615      	mov	r5, r2
 800440c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800440e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004410:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004414:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTuneHandle = osThreadCreate(osThread(TaskTune), NULL);
 8004418:	1d3b      	adds	r3, r7, #4
 800441a:	2100      	movs	r1, #0
 800441c:	4618      	mov	r0, r3
 800441e:	f00d fb6c 	bl	8011afa <osThreadCreate>
 8004422:	4603      	mov	r3, r0
 8004424:	4a1a      	ldr	r2, [pc, #104]	; (8004490 <main+0x3e0>)
 8004426:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004428:	f00d fb60 	bl	8011aec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800442c:	e7fe      	b.n	800442c <main+0x37c>
 800442e:	bf00      	nop
 8004430:	20000216 	.word	0x20000216
 8004434:	20000dd0 	.word	0x20000dd0
 8004438:	20000dd4 	.word	0x20000dd4
 800443c:	20000dd8 	.word	0x20000dd8
 8004440:	20000ddc 	.word	0x20000ddc
 8004444:	20000de0 	.word	0x20000de0
 8004448:	20000de4 	.word	0x20000de4
 800444c:	20000de8 	.word	0x20000de8
 8004450:	20000dec 	.word	0x20000dec
 8004454:	20000df0 	.word	0x20000df0
 8004458:	20000df4 	.word	0x20000df4
 800445c:	0801bdc4 	.word	0x0801bdc4
 8004460:	20000db4 	.word	0x20000db4
 8004464:	0801bdf0 	.word	0x0801bdf0
 8004468:	20000db8 	.word	0x20000db8
 800446c:	0801be18 	.word	0x0801be18
 8004470:	20000dbc 	.word	0x20000dbc
 8004474:	0801be40 	.word	0x0801be40
 8004478:	20000dc0 	.word	0x20000dc0
 800447c:	0801be68 	.word	0x0801be68
 8004480:	20000dc4 	.word	0x20000dc4
 8004484:	0801be94 	.word	0x0801be94
 8004488:	20000dc8 	.word	0x20000dc8
 800448c:	0801bebc 	.word	0x0801bebc
 8004490:	20000dcc 	.word	0x20000dcc

08004494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b094      	sub	sp, #80	; 0x50
 8004498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800449a:	f107 0320 	add.w	r3, r7, #32
 800449e:	2230      	movs	r2, #48	; 0x30
 80044a0:	2100      	movs	r1, #0
 80044a2:	4618      	mov	r0, r3
 80044a4:	f011 f87b 	bl	801559e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044a8:	f107 030c 	add.w	r3, r7, #12
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	609a      	str	r2, [r3, #8]
 80044b4:	60da      	str	r2, [r3, #12]
 80044b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80044b8:	4b2a      	ldr	r3, [pc, #168]	; (8004564 <SystemClock_Config+0xd0>)
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	4a29      	ldr	r2, [pc, #164]	; (8004564 <SystemClock_Config+0xd0>)
 80044be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c2:	6413      	str	r3, [r2, #64]	; 0x40
 80044c4:	4b27      	ldr	r3, [pc, #156]	; (8004564 <SystemClock_Config+0xd0>)
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044d0:	4b25      	ldr	r3, [pc, #148]	; (8004568 <SystemClock_Config+0xd4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a24      	ldr	r2, [pc, #144]	; (8004568 <SystemClock_Config+0xd4>)
 80044d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	4b22      	ldr	r3, [pc, #136]	; (8004568 <SystemClock_Config+0xd4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044e4:	607b      	str	r3, [r7, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80044e8:	2302      	movs	r3, #2
 80044ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80044ec:	2301      	movs	r3, #1
 80044ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80044f0:	2310      	movs	r3, #16
 80044f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044f4:	2302      	movs	r3, #2
 80044f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80044f8:	2300      	movs	r3, #0
 80044fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80044fc:	2308      	movs	r3, #8
 80044fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8004500:	23d8      	movs	r3, #216	; 0xd8
 8004502:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004504:	2302      	movs	r3, #2
 8004506:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004508:	2302      	movs	r3, #2
 800450a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800450c:	f107 0320 	add.w	r3, r7, #32
 8004510:	4618      	mov	r0, r3
 8004512:	f008 f8a1 	bl	800c658 <HAL_RCC_OscConfig>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800451c:	f000 fbac 	bl	8004c78 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004520:	f008 f84a 	bl	800c5b8 <HAL_PWREx_EnableOverDrive>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800452a:	f000 fba5 	bl	8004c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800452e:	230f      	movs	r3, #15
 8004530:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004532:	2302      	movs	r3, #2
 8004534:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800453a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800453e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004544:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8004546:	f107 030c 	add.w	r3, r7, #12
 800454a:	2107      	movs	r1, #7
 800454c:	4618      	mov	r0, r3
 800454e:	f008 fb27 	bl	800cba0 <HAL_RCC_ClockConfig>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8004558:	f000 fb8e 	bl	8004c78 <Error_Handler>
  }
}
 800455c:	bf00      	nop
 800455e:	3750      	adds	r7, #80	; 0x50
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40023800 	.word	0x40023800
 8004568:	40007000 	.word	0x40007000

0800456c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004570:	4b1b      	ldr	r3, [pc, #108]	; (80045e0 <MX_I2C1_Init+0x74>)
 8004572:	4a1c      	ldr	r2, [pc, #112]	; (80045e4 <MX_I2C1_Init+0x78>)
 8004574:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xA0404E72;
 8004576:	4b1a      	ldr	r3, [pc, #104]	; (80045e0 <MX_I2C1_Init+0x74>)
 8004578:	4a1b      	ldr	r2, [pc, #108]	; (80045e8 <MX_I2C1_Init+0x7c>)
 800457a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800457c:	4b18      	ldr	r3, [pc, #96]	; (80045e0 <MX_I2C1_Init+0x74>)
 800457e:	2200      	movs	r2, #0
 8004580:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004582:	4b17      	ldr	r3, [pc, #92]	; (80045e0 <MX_I2C1_Init+0x74>)
 8004584:	2201      	movs	r2, #1
 8004586:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004588:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <MX_I2C1_Init+0x74>)
 800458a:	2200      	movs	r2, #0
 800458c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800458e:	4b14      	ldr	r3, [pc, #80]	; (80045e0 <MX_I2C1_Init+0x74>)
 8004590:	2200      	movs	r2, #0
 8004592:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004594:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <MX_I2C1_Init+0x74>)
 8004596:	2200      	movs	r2, #0
 8004598:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800459a:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <MX_I2C1_Init+0x74>)
 800459c:	2200      	movs	r2, #0
 800459e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80045a0:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <MX_I2C1_Init+0x74>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80045a6:	480e      	ldr	r0, [pc, #56]	; (80045e0 <MX_I2C1_Init+0x74>)
 80045a8:	f007 fa16 	bl	800b9d8 <HAL_I2C_Init>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80045b2:	f000 fb61 	bl	8004c78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80045b6:	2100      	movs	r1, #0
 80045b8:	4809      	ldr	r0, [pc, #36]	; (80045e0 <MX_I2C1_Init+0x74>)
 80045ba:	f007 ff65 	bl	800c488 <HAL_I2CEx_ConfigAnalogFilter>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80045c4:	f000 fb58 	bl	8004c78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80045c8:	2100      	movs	r1, #0
 80045ca:	4805      	ldr	r0, [pc, #20]	; (80045e0 <MX_I2C1_Init+0x74>)
 80045cc:	f007 ffa7 	bl	800c51e <HAL_I2CEx_ConfigDigitalFilter>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80045d6:	f000 fb4f 	bl	8004c78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80045da:	bf00      	nop
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20000a08 	.word	0x20000a08
 80045e4:	40005400 	.word	0x40005400
 80045e8:	a0404e72 	.word	0xa0404e72

080045ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80045f0:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <MX_SPI1_Init+0x74>)
 80045f2:	4a1c      	ldr	r2, [pc, #112]	; (8004664 <MX_SPI1_Init+0x78>)
 80045f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80045f6:	4b1a      	ldr	r3, [pc, #104]	; (8004660 <MX_SPI1_Init+0x74>)
 80045f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80045fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80045fe:	4b18      	ldr	r3, [pc, #96]	; (8004660 <MX_SPI1_Init+0x74>)
 8004600:	2200      	movs	r2, #0
 8004602:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004604:	4b16      	ldr	r3, [pc, #88]	; (8004660 <MX_SPI1_Init+0x74>)
 8004606:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800460a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800460c:	4b14      	ldr	r3, [pc, #80]	; (8004660 <MX_SPI1_Init+0x74>)
 800460e:	2202      	movs	r2, #2
 8004610:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004612:	4b13      	ldr	r3, [pc, #76]	; (8004660 <MX_SPI1_Init+0x74>)
 8004614:	2201      	movs	r2, #1
 8004616:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8004618:	4b11      	ldr	r3, [pc, #68]	; (8004660 <MX_SPI1_Init+0x74>)
 800461a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800461e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004620:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <MX_SPI1_Init+0x74>)
 8004622:	2220      	movs	r2, #32
 8004624:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004626:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <MX_SPI1_Init+0x74>)
 8004628:	2200      	movs	r2, #0
 800462a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800462c:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <MX_SPI1_Init+0x74>)
 800462e:	2200      	movs	r2, #0
 8004630:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004632:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <MX_SPI1_Init+0x74>)
 8004634:	2200      	movs	r2, #0
 8004636:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004638:	4b09      	ldr	r3, [pc, #36]	; (8004660 <MX_SPI1_Init+0x74>)
 800463a:	2207      	movs	r2, #7
 800463c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800463e:	4b08      	ldr	r3, [pc, #32]	; (8004660 <MX_SPI1_Init+0x74>)
 8004640:	2200      	movs	r2, #0
 8004642:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004644:	4b06      	ldr	r3, [pc, #24]	; (8004660 <MX_SPI1_Init+0x74>)
 8004646:	2200      	movs	r2, #0
 8004648:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800464a:	4805      	ldr	r0, [pc, #20]	; (8004660 <MX_SPI1_Init+0x74>)
 800464c:	f009 f80a 	bl	800d664 <HAL_SPI_Init>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004656:	f000 fb0f 	bl	8004c78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800465a:	bf00      	nop
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	20000a5c 	.word	0x20000a5c
 8004664:	40013000 	.word	0x40013000

08004668 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800466c:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <MX_SPI2_Init+0x74>)
 800466e:	4a1c      	ldr	r2, [pc, #112]	; (80046e0 <MX_SPI2_Init+0x78>)
 8004670:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004672:	4b1a      	ldr	r3, [pc, #104]	; (80046dc <MX_SPI2_Init+0x74>)
 8004674:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004678:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800467a:	4b18      	ldr	r3, [pc, #96]	; (80046dc <MX_SPI2_Init+0x74>)
 800467c:	2200      	movs	r2, #0
 800467e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004680:	4b16      	ldr	r3, [pc, #88]	; (80046dc <MX_SPI2_Init+0x74>)
 8004682:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004686:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004688:	4b14      	ldr	r3, [pc, #80]	; (80046dc <MX_SPI2_Init+0x74>)
 800468a:	2202      	movs	r2, #2
 800468c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800468e:	4b13      	ldr	r3, [pc, #76]	; (80046dc <MX_SPI2_Init+0x74>)
 8004690:	2201      	movs	r2, #1
 8004692:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004694:	4b11      	ldr	r3, [pc, #68]	; (80046dc <MX_SPI2_Init+0x74>)
 8004696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800469a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800469c:	4b0f      	ldr	r3, [pc, #60]	; (80046dc <MX_SPI2_Init+0x74>)
 800469e:	2228      	movs	r2, #40	; 0x28
 80046a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80046a2:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <MX_SPI2_Init+0x74>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80046a8:	4b0c      	ldr	r3, [pc, #48]	; (80046dc <MX_SPI2_Init+0x74>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046ae:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <MX_SPI2_Init+0x74>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80046b4:	4b09      	ldr	r3, [pc, #36]	; (80046dc <MX_SPI2_Init+0x74>)
 80046b6:	2207      	movs	r2, #7
 80046b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80046ba:	4b08      	ldr	r3, [pc, #32]	; (80046dc <MX_SPI2_Init+0x74>)
 80046bc:	2200      	movs	r2, #0
 80046be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <MX_SPI2_Init+0x74>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80046c6:	4805      	ldr	r0, [pc, #20]	; (80046dc <MX_SPI2_Init+0x74>)
 80046c8:	f008 ffcc 	bl	800d664 <HAL_SPI_Init>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80046d2:	f000 fad1 	bl	8004c78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80046d6:	bf00      	nop
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000ac0 	.word	0x20000ac0
 80046e0:	40003800 	.word	0x40003800

080046e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b09a      	sub	sp, #104	; 0x68
 80046e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	605a      	str	r2, [r3, #4]
 80046f4:	609a      	str	r2, [r3, #8]
 80046f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	605a      	str	r2, [r3, #4]
 8004702:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004704:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	605a      	str	r2, [r3, #4]
 800470e:	609a      	str	r2, [r3, #8]
 8004710:	60da      	str	r2, [r3, #12]
 8004712:	611a      	str	r2, [r3, #16]
 8004714:	615a      	str	r2, [r3, #20]
 8004716:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004718:	1d3b      	adds	r3, r7, #4
 800471a:	222c      	movs	r2, #44	; 0x2c
 800471c:	2100      	movs	r1, #0
 800471e:	4618      	mov	r0, r3
 8004720:	f010 ff3d 	bl	801559e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004724:	4b55      	ldr	r3, [pc, #340]	; (800487c <MX_TIM1_Init+0x198>)
 8004726:	4a56      	ldr	r2, [pc, #344]	; (8004880 <MX_TIM1_Init+0x19c>)
 8004728:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 800472a:	4b54      	ldr	r3, [pc, #336]	; (800487c <MX_TIM1_Init+0x198>)
 800472c:	22d7      	movs	r2, #215	; 0xd7
 800472e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004730:	4b52      	ldr	r3, [pc, #328]	; (800487c <MX_TIM1_Init+0x198>)
 8004732:	2200      	movs	r2, #0
 8004734:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8004736:	4b51      	ldr	r3, [pc, #324]	; (800487c <MX_TIM1_Init+0x198>)
 8004738:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800473c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800473e:	4b4f      	ldr	r3, [pc, #316]	; (800487c <MX_TIM1_Init+0x198>)
 8004740:	2200      	movs	r2, #0
 8004742:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004744:	4b4d      	ldr	r3, [pc, #308]	; (800487c <MX_TIM1_Init+0x198>)
 8004746:	2200      	movs	r2, #0
 8004748:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800474a:	4b4c      	ldr	r3, [pc, #304]	; (800487c <MX_TIM1_Init+0x198>)
 800474c:	2280      	movs	r2, #128	; 0x80
 800474e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004750:	484a      	ldr	r0, [pc, #296]	; (800487c <MX_TIM1_Init+0x198>)
 8004752:	f009 fee7 	bl	800e524 <HAL_TIM_Base_Init>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800475c:	f000 fa8c 	bl	8004c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004764:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004766:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800476a:	4619      	mov	r1, r3
 800476c:	4843      	ldr	r0, [pc, #268]	; (800487c <MX_TIM1_Init+0x198>)
 800476e:	f00a fd7d 	bl	800f26c <HAL_TIM_ConfigClockSource>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004778:	f000 fa7e 	bl	8004c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800477c:	483f      	ldr	r0, [pc, #252]	; (800487c <MX_TIM1_Init+0x198>)
 800477e:	f009 ffa1 	bl	800e6c4 <HAL_TIM_PWM_Init>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004788:	f000 fa76 	bl	8004c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800478c:	2300      	movs	r3, #0
 800478e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004790:	2300      	movs	r3, #0
 8004792:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004794:	2300      	movs	r3, #0
 8004796:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004798:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800479c:	4619      	mov	r1, r3
 800479e:	4837      	ldr	r0, [pc, #220]	; (800487c <MX_TIM1_Init+0x198>)
 80047a0:	f00b fb78 	bl	800fe94 <HAL_TIMEx_MasterConfigSynchronization>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80047aa:	f000 fa65 	bl	8004c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047ae:	2360      	movs	r3, #96	; 0x60
 80047b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80047b2:	2300      	movs	r3, #0
 80047b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047b6:	2300      	movs	r3, #0
 80047b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80047ba:	2300      	movs	r3, #0
 80047bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80047be:	2304      	movs	r3, #4
 80047c0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80047c2:	2300      	movs	r3, #0
 80047c4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80047c6:	2300      	movs	r3, #0
 80047c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047ce:	2200      	movs	r2, #0
 80047d0:	4619      	mov	r1, r3
 80047d2:	482a      	ldr	r0, [pc, #168]	; (800487c <MX_TIM1_Init+0x198>)
 80047d4:	f00a fc36 	bl	800f044 <HAL_TIM_PWM_ConfigChannel>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80047de:	f000 fa4b 	bl	8004c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80047e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047e6:	2204      	movs	r2, #4
 80047e8:	4619      	mov	r1, r3
 80047ea:	4824      	ldr	r0, [pc, #144]	; (800487c <MX_TIM1_Init+0x198>)
 80047ec:	f00a fc2a 	bl	800f044 <HAL_TIM_PWM_ConfigChannel>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80047f6:	f000 fa3f 	bl	8004c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80047fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047fe:	2208      	movs	r2, #8
 8004800:	4619      	mov	r1, r3
 8004802:	481e      	ldr	r0, [pc, #120]	; (800487c <MX_TIM1_Init+0x198>)
 8004804:	f00a fc1e 	bl	800f044 <HAL_TIM_PWM_ConfigChannel>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800480e:	f000 fa33 	bl	8004c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004812:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004816:	220c      	movs	r2, #12
 8004818:	4619      	mov	r1, r3
 800481a:	4818      	ldr	r0, [pc, #96]	; (800487c <MX_TIM1_Init+0x198>)
 800481c:	f00a fc12 	bl	800f044 <HAL_TIM_PWM_ConfigChannel>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8004826:	f000 fa27 	bl	8004c78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800482a:	2300      	movs	r3, #0
 800482c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800482e:	2300      	movs	r3, #0
 8004830:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800483e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004842:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004844:	2300      	movs	r3, #0
 8004846:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004848:	2300      	movs	r3, #0
 800484a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800484c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004852:	2300      	movs	r3, #0
 8004854:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004856:	2300      	movs	r3, #0
 8004858:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800485a:	1d3b      	adds	r3, r7, #4
 800485c:	4619      	mov	r1, r3
 800485e:	4807      	ldr	r0, [pc, #28]	; (800487c <MX_TIM1_Init+0x198>)
 8004860:	f00b fba6 	bl	800ffb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 800486a:	f000 fa05 	bl	8004c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800486e:	4803      	ldr	r0, [pc, #12]	; (800487c <MX_TIM1_Init+0x198>)
 8004870:	f001 ffe2 	bl	8006838 <HAL_TIM_MspPostInit>

}
 8004874:	bf00      	nop
 8004876:	3768      	adds	r7, #104	; 0x68
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	20000b24 	.word	0x20000b24
 8004880:	40010000 	.word	0x40010000

08004884 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800488a:	f107 0314 	add.w	r3, r7, #20
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	605a      	str	r2, [r3, #4]
 8004894:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004896:	1d3b      	adds	r3, r7, #4
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	605a      	str	r2, [r3, #4]
 800489e:	609a      	str	r2, [r3, #8]
 80048a0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80048a2:	4b20      	ldr	r3, [pc, #128]	; (8004924 <MX_TIM3_Init+0xa0>)
 80048a4:	4a20      	ldr	r2, [pc, #128]	; (8004928 <MX_TIM3_Init+0xa4>)
 80048a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 80048a8:	4b1e      	ldr	r3, [pc, #120]	; (8004924 <MX_TIM3_Init+0xa0>)
 80048aa:	226b      	movs	r2, #107	; 0x6b
 80048ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048ae:	4b1d      	ldr	r3, [pc, #116]	; (8004924 <MX_TIM3_Init+0xa0>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 80048b4:	4b1b      	ldr	r3, [pc, #108]	; (8004924 <MX_TIM3_Init+0xa0>)
 80048b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80048ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048bc:	4b19      	ldr	r3, [pc, #100]	; (8004924 <MX_TIM3_Init+0xa0>)
 80048be:	2200      	movs	r2, #0
 80048c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048c2:	4b18      	ldr	r3, [pc, #96]	; (8004924 <MX_TIM3_Init+0xa0>)
 80048c4:	2280      	movs	r2, #128	; 0x80
 80048c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80048c8:	4816      	ldr	r0, [pc, #88]	; (8004924 <MX_TIM3_Init+0xa0>)
 80048ca:	f00a f857 	bl	800e97c <HAL_TIM_IC_Init>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80048d4:	f000 f9d0 	bl	8004c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048dc:	2300      	movs	r3, #0
 80048de:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80048e0:	f107 0314 	add.w	r3, r7, #20
 80048e4:	4619      	mov	r1, r3
 80048e6:	480f      	ldr	r0, [pc, #60]	; (8004924 <MX_TIM3_Init+0xa0>)
 80048e8:	f00b fad4 	bl	800fe94 <HAL_TIMEx_MasterConfigSynchronization>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80048f2:	f000 f9c1 	bl	8004c78 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80048f6:	2300      	movs	r3, #0
 80048f8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80048fa:	2301      	movs	r3, #1
 80048fc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004902:	2300      	movs	r3, #0
 8004904:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004906:	1d3b      	adds	r3, r7, #4
 8004908:	2200      	movs	r2, #0
 800490a:	4619      	mov	r1, r3
 800490c:	4805      	ldr	r0, [pc, #20]	; (8004924 <MX_TIM3_Init+0xa0>)
 800490e:	f00a fafc 	bl	800ef0a <HAL_TIM_IC_ConfigChannel>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004918:	f000 f9ae 	bl	8004c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800491c:	bf00      	nop
 800491e:	3720      	adds	r7, #32
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	20000b70 	.word	0x20000b70
 8004928:	40000400 	.word	0x40000400

0800492c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004930:	4b14      	ldr	r3, [pc, #80]	; (8004984 <MX_UART4_Init+0x58>)
 8004932:	4a15      	ldr	r2, [pc, #84]	; (8004988 <MX_UART4_Init+0x5c>)
 8004934:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8004936:	4b13      	ldr	r3, [pc, #76]	; (8004984 <MX_UART4_Init+0x58>)
 8004938:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800493c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800493e:	4b11      	ldr	r3, [pc, #68]	; (8004984 <MX_UART4_Init+0x58>)
 8004940:	2200      	movs	r2, #0
 8004942:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004944:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <MX_UART4_Init+0x58>)
 8004946:	2200      	movs	r2, #0
 8004948:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800494a:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <MX_UART4_Init+0x58>)
 800494c:	2200      	movs	r2, #0
 800494e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004950:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <MX_UART4_Init+0x58>)
 8004952:	220c      	movs	r2, #12
 8004954:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <MX_UART4_Init+0x58>)
 8004958:	2200      	movs	r2, #0
 800495a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800495c:	4b09      	ldr	r3, [pc, #36]	; (8004984 <MX_UART4_Init+0x58>)
 800495e:	2200      	movs	r2, #0
 8004960:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004962:	4b08      	ldr	r3, [pc, #32]	; (8004984 <MX_UART4_Init+0x58>)
 8004964:	2200      	movs	r2, #0
 8004966:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004968:	4b06      	ldr	r3, [pc, #24]	; (8004984 <MX_UART4_Init+0x58>)
 800496a:	2200      	movs	r2, #0
 800496c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800496e:	4805      	ldr	r0, [pc, #20]	; (8004984 <MX_UART4_Init+0x58>)
 8004970:	f00b fbba 	bl	80100e8 <HAL_UART_Init>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800497a:	f000 f97d 	bl	8004c78 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000bbc 	.word	0x20000bbc
 8004988:	40004c00 	.word	0x40004c00

0800498c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004990:	4b16      	ldr	r3, [pc, #88]	; (80049ec <MX_USART2_UART_Init+0x60>)
 8004992:	4a17      	ldr	r2, [pc, #92]	; (80049f0 <MX_USART2_UART_Init+0x64>)
 8004994:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004996:	4b15      	ldr	r3, [pc, #84]	; (80049ec <MX_USART2_UART_Init+0x60>)
 8004998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800499c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800499e:	4b13      	ldr	r3, [pc, #76]	; (80049ec <MX_USART2_UART_Init+0x60>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80049a4:	4b11      	ldr	r3, [pc, #68]	; (80049ec <MX_USART2_UART_Init+0x60>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80049aa:	4b10      	ldr	r3, [pc, #64]	; (80049ec <MX_USART2_UART_Init+0x60>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80049b0:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <MX_USART2_UART_Init+0x60>)
 80049b2:	2204      	movs	r2, #4
 80049b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049b6:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <MX_USART2_UART_Init+0x60>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80049bc:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <MX_USART2_UART_Init+0x60>)
 80049be:	2200      	movs	r2, #0
 80049c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049c2:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <MX_USART2_UART_Init+0x60>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80049c8:	4b08      	ldr	r3, [pc, #32]	; (80049ec <MX_USART2_UART_Init+0x60>)
 80049ca:	2210      	movs	r2, #16
 80049cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80049ce:	4b07      	ldr	r3, [pc, #28]	; (80049ec <MX_USART2_UART_Init+0x60>)
 80049d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80049d4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80049d6:	4805      	ldr	r0, [pc, #20]	; (80049ec <MX_USART2_UART_Init+0x60>)
 80049d8:	f00b fb86 	bl	80100e8 <HAL_UART_Init>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80049e2:	f000 f949 	bl	8004c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80049e6:	bf00      	nop
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20000c44 	.word	0x20000c44
 80049f0:	40004400 	.word	0x40004400

080049f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80049f8:	4b14      	ldr	r3, [pc, #80]	; (8004a4c <MX_USART3_UART_Init+0x58>)
 80049fa:	4a15      	ldr	r2, [pc, #84]	; (8004a50 <MX_USART3_UART_Init+0x5c>)
 80049fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80049fe:	4b13      	ldr	r3, [pc, #76]	; (8004a4c <MX_USART3_UART_Init+0x58>)
 8004a00:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8004a04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004a06:	4b11      	ldr	r3, [pc, #68]	; (8004a4c <MX_USART3_UART_Init+0x58>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004a0c:	4b0f      	ldr	r3, [pc, #60]	; (8004a4c <MX_USART3_UART_Init+0x58>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004a12:	4b0e      	ldr	r3, [pc, #56]	; (8004a4c <MX_USART3_UART_Init+0x58>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8004a18:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <MX_USART3_UART_Init+0x58>)
 8004a1a:	2208      	movs	r2, #8
 8004a1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <MX_USART3_UART_Init+0x58>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a24:	4b09      	ldr	r3, [pc, #36]	; (8004a4c <MX_USART3_UART_Init+0x58>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a2a:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <MX_USART3_UART_Init+0x58>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a30:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <MX_USART3_UART_Init+0x58>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004a36:	4805      	ldr	r0, [pc, #20]	; (8004a4c <MX_USART3_UART_Init+0x58>)
 8004a38:	f00b fb56 	bl	80100e8 <HAL_UART_Init>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004a42:	f000 f919 	bl	8004c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004a46:	bf00      	nop
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20000ccc 	.word	0x20000ccc
 8004a50:	40004800 	.word	0x40004800

08004a54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004a5a:	4b0c      	ldr	r3, [pc, #48]	; (8004a8c <MX_DMA_Init+0x38>)
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	4a0b      	ldr	r2, [pc, #44]	; (8004a8c <MX_DMA_Init+0x38>)
 8004a60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a64:	6313      	str	r3, [r2, #48]	; 0x30
 8004a66:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <MX_DMA_Init+0x38>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a6e:	607b      	str	r3, [r7, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 8, 0);
 8004a72:	2200      	movs	r2, #0
 8004a74:	2108      	movs	r1, #8
 8004a76:	2010      	movs	r0, #16
 8004a78:	f006 f9c4 	bl	800ae04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004a7c:	2010      	movs	r0, #16
 8004a7e:	f006 f9dd 	bl	800ae3c <HAL_NVIC_EnableIRQ>

}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40023800 	.word	0x40023800

08004a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08a      	sub	sp, #40	; 0x28
 8004a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a96:	f107 0314 	add.w	r3, r7, #20
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	605a      	str	r2, [r3, #4]
 8004aa0:	609a      	str	r2, [r3, #8]
 8004aa2:	60da      	str	r2, [r3, #12]
 8004aa4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aa6:	4b41      	ldr	r3, [pc, #260]	; (8004bac <MX_GPIO_Init+0x11c>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aaa:	4a40      	ldr	r2, [pc, #256]	; (8004bac <MX_GPIO_Init+0x11c>)
 8004aac:	f043 0301 	orr.w	r3, r3, #1
 8004ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ab2:	4b3e      	ldr	r3, [pc, #248]	; (8004bac <MX_GPIO_Init+0x11c>)
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004abe:	4b3b      	ldr	r3, [pc, #236]	; (8004bac <MX_GPIO_Init+0x11c>)
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	4a3a      	ldr	r2, [pc, #232]	; (8004bac <MX_GPIO_Init+0x11c>)
 8004ac4:	f043 0310 	orr.w	r3, r3, #16
 8004ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8004aca:	4b38      	ldr	r3, [pc, #224]	; (8004bac <MX_GPIO_Init+0x11c>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	f003 0310 	and.w	r3, r3, #16
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ad6:	4b35      	ldr	r3, [pc, #212]	; (8004bac <MX_GPIO_Init+0x11c>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	4a34      	ldr	r2, [pc, #208]	; (8004bac <MX_GPIO_Init+0x11c>)
 8004adc:	f043 0302 	orr.w	r3, r3, #2
 8004ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ae2:	4b32      	ldr	r3, [pc, #200]	; (8004bac <MX_GPIO_Init+0x11c>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	60bb      	str	r3, [r7, #8]
 8004aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004aee:	4b2f      	ldr	r3, [pc, #188]	; (8004bac <MX_GPIO_Init+0x11c>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	4a2e      	ldr	r2, [pc, #184]	; (8004bac <MX_GPIO_Init+0x11c>)
 8004af4:	f043 0308 	orr.w	r3, r3, #8
 8004af8:	6313      	str	r3, [r2, #48]	; 0x30
 8004afa:	4b2c      	ldr	r3, [pc, #176]	; (8004bac <MX_GPIO_Init+0x11c>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	607b      	str	r3, [r7, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b06:	4b29      	ldr	r3, [pc, #164]	; (8004bac <MX_GPIO_Init+0x11c>)
 8004b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0a:	4a28      	ldr	r2, [pc, #160]	; (8004bac <MX_GPIO_Init+0x11c>)
 8004b0c:	f043 0304 	orr.w	r3, r3, #4
 8004b10:	6313      	str	r3, [r2, #48]	; 0x30
 8004b12:	4b26      	ldr	r3, [pc, #152]	; (8004bac <MX_GPIO_Init+0x11c>)
 8004b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b16:	f003 0304 	and.w	r3, r3, #4
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b24:	4822      	ldr	r0, [pc, #136]	; (8004bb0 <MX_GPIO_Init+0x120>)
 8004b26:	f006 ff3d 	bl	800b9a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8004b30:	4820      	ldr	r0, [pc, #128]	; (8004bb4 <MX_GPIO_Init+0x124>)
 8004b32:	f006 ff37 	bl	800b9a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPS_PPS_IN_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_IN_Pin;
 8004b36:	2304      	movs	r3, #4
 8004b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_PPS_IN_GPIO_Port, &GPIO_InitStruct);
 8004b42:	f107 0314 	add.w	r3, r7, #20
 8004b46:	4619      	mov	r1, r3
 8004b48:	481b      	ldr	r0, [pc, #108]	; (8004bb8 <MX_GPIO_Init+0x128>)
 8004b4a:	f006 fd8f 	bl	800b66c <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_DOWN_OUT_Pin */
  GPIO_InitStruct.Pin = ESC_DOWN_OUT_Pin;
 8004b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b54:	2301      	movs	r3, #1
 8004b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESC_DOWN_OUT_GPIO_Port, &GPIO_InitStruct);
 8004b60:	f107 0314 	add.w	r3, r7, #20
 8004b64:	4619      	mov	r1, r3
 8004b66:	4812      	ldr	r0, [pc, #72]	; (8004bb0 <MX_GPIO_Init+0x120>)
 8004b68:	f006 fd80 	bl	800b66c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_IMU_CSIMU_Pin SPI2_IMU_CSBM_Pin DIS_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin;
 8004b6c:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8004b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b72:	2301      	movs	r3, #1
 8004b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b7e:	f107 0314 	add.w	r3, r7, #20
 8004b82:	4619      	mov	r1, r3
 8004b84:	480b      	ldr	r0, [pc, #44]	; (8004bb4 <MX_GPIO_Init+0x124>)
 8004b86:	f006 fd71 	bl	800b66c <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_RDY_IN_Pin */
  GPIO_InitStruct.Pin = MAG_RDY_IN_Pin;
 8004b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b90:	2300      	movs	r3, #0
 8004b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAG_RDY_IN_GPIO_Port, &GPIO_InitStruct);
 8004b98:	f107 0314 	add.w	r3, r7, #20
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4807      	ldr	r0, [pc, #28]	; (8004bbc <MX_GPIO_Init+0x12c>)
 8004ba0:	f006 fd64 	bl	800b66c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004ba4:	bf00      	nop
 8004ba6:	3728      	adds	r7, #40	; 0x28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	40020c00 	.word	0x40020c00
 8004bb8:	40020000 	.word	0x40020000
 8004bbc:	40020400 	.word	0x40020400

08004bc0 <RunTaskSensorData>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RunTaskSensorData */
void RunTaskSensorData(void const * argument)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TaskSensorData(argument);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7fe f899 	bl	8002d00 <TaskSensorData>
  /* USER CODE END 5 */
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <RunTaskController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskController */
void RunTaskController(void const * argument)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b082      	sub	sp, #8
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskController */
	TaskController(argument);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7fc feb0 	bl	8001944 <TaskController>
  /* USER CODE END RunTaskController */
}
 8004be4:	bf00      	nop
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <RunTaskRemote>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskRemote */
void RunTaskRemote(void const * argument)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskRemote */
	TaskRemote(argument);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7fd fe95 	bl	8002924 <TaskRemote>
  /* USER CODE END RunTaskRemote */
}
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <RunTaskMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskMotor */
void RunTaskMotor(void const * argument)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskMotor */
	TaskMotor(argument);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fd fd0a 	bl	8002624 <TaskMotor>
  /* USER CODE END RunTaskMotor */
}
 8004c10:	bf00      	nop
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <RunTaskPower>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskPower */
void RunTaskPower(void const * argument)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskPower */
	TaskPower(argument);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7fd fe65 	bl	80028f0 <TaskPower>
  /* USER CODE END RunTaskPower */
}
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <RunTaskDiagnostics>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskDiagnostics */
void RunTaskDiagnostics(void const * argument)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskDiagnostics */
	TaskDiagnostics(argument);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fd f952 	bl	8001ee0 <TaskDiagnostics>
  /* USER CODE END RunTaskDiagnostics */
}
 8004c3c:	bf00      	nop
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <RunTaskTune>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskTune */
void RunTaskTune(void const * argument)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskTune */
	TaskTune(argument);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7fe fcfb 	bl	8003648 <TaskTune>
  /* USER CODE END RunTaskTune */
}
 8004c52:	bf00      	nop
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b082      	sub	sp, #8
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6a:	d101      	bne.n	8004c70 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004c6c:	f005 ffce 	bl	800ac0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c7c:	b672      	cpsid	i
}
 8004c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004c80:	e7fe      	b.n	8004c80 <Error_Handler+0x8>

08004c82 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b085      	sub	sp, #20
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
 8004c8e:	4603      	mov	r3, r0
 8004c90:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d204      	bcs.n	8004ca4 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	7bfa      	ldrb	r2, [r7, #15]
 8004ca2:	701a      	strb	r2, [r3, #0]
  }
}
 8004ca4:	bf00      	nop
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	607a      	str	r2, [r7, #4]
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8004cc0:	bf00      	nop
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	e002      	b.n	8004ce2 <_strnlen_s+0x16>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d004      	beq.n	8004cf4 <_strnlen_s+0x28>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	1e5a      	subs	r2, r3, #1
 8004cee:	603a      	str	r2, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1f3      	bne.n	8004cdc <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	1ad3      	subs	r3, r2, r3
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8004d10:	79fb      	ldrb	r3, [r7, #7]
 8004d12:	2b2f      	cmp	r3, #47	; 0x2f
 8004d14:	d904      	bls.n	8004d20 <_is_digit+0x1a>
 8004d16:	79fb      	ldrb	r3, [r7, #7]
 8004d18:	2b39      	cmp	r3, #57	; 0x39
 8004d1a:	d801      	bhi.n	8004d20 <_is_digit+0x1a>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e000      	b.n	8004d22 <_is_digit+0x1c>
 8004d20:	2300      	movs	r3, #0
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	b2db      	uxtb	r3, r3
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8004d40:	e00e      	b.n	8004d60 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	1c59      	adds	r1, r3, #1
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6011      	str	r1, [r2, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	4403      	add	r3, r0
 8004d5c:	3b30      	subs	r3, #48	; 0x30
 8004d5e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff ffcd 	bl	8004d06 <_is_digit>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e7      	bne.n	8004d42 <_atoi+0xe>
  }
  return i;
 8004d72:	68fb      	ldr	r3, [r7, #12]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8004d7c:	b590      	push	{r4, r7, lr}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8004d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d125      	bne.n	8004de4 <_out_rev+0x68>
 8004d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d120      	bne.n	8004de4 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	617b      	str	r3, [r7, #20]
 8004da6:	e00a      	b.n	8004dbe <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	1c53      	adds	r3, r2, #1
 8004dac:	607b      	str	r3, [r7, #4]
 8004dae:	68fc      	ldr	r4, [r7, #12]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	2020      	movs	r0, #32
 8004db6:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d3f0      	bcc.n	8004da8 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8004dc6:	e00d      	b.n	8004de4 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8004dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd2:	4413      	add	r3, r2
 8004dd4:	7818      	ldrb	r0, [r3, #0]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	1c53      	adds	r3, r2, #1
 8004dda:	607b      	str	r3, [r7, #4]
 8004ddc:	68fc      	ldr	r4, [r7, #12]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68b9      	ldr	r1, [r7, #8]
 8004de2:	47a0      	blx	r4
  while (len) {
 8004de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1ee      	bne.n	8004dc8 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8004dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00e      	beq.n	8004e12 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8004df4:	e007      	b.n	8004e06 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	1c53      	adds	r3, r2, #1
 8004dfa:	607b      	str	r3, [r7, #4]
 8004dfc:	68fc      	ldr	r4, [r7, #12]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68b9      	ldr	r1, [r7, #8]
 8004e02:	2020      	movs	r0, #32
 8004e04:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d8f1      	bhi.n	8004df6 <_out_rev+0x7a>
    }
  }

  return idx;
 8004e12:	687b      	ldr	r3, [r7, #4]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	371c      	adds	r7, #28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd90      	pop	{r4, r7, pc}

08004e1c <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af04      	add	r7, sp, #16
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d136      	bne.n	8004ea2 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8004e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d018      	beq.n	8004e6c <_ntoa_format+0x50>
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d013      	beq.n	8004e6c <_ntoa_format+0x50>
 8004e44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d104      	bne.n	8004e56 <_ntoa_format+0x3a>
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	f003 030c 	and.w	r3, r3, #12
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <_ntoa_format+0x50>
      width--;
 8004e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004e5c:	e006      	b.n	8004e6c <_ntoa_format+0x50>
      buf[len++] = '0';
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	61fa      	str	r2, [r7, #28]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	4413      	add	r3, r2
 8004e68:	2230      	movs	r2, #48	; 0x30
 8004e6a:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004e6c:	69fa      	ldr	r2, [r7, #28]
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d20a      	bcs.n	8004e8a <_ntoa_format+0x6e>
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	2b1f      	cmp	r3, #31
 8004e78:	d9f1      	bls.n	8004e5e <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004e7a:	e006      	b.n	8004e8a <_ntoa_format+0x6e>
      buf[len++] = '0';
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	61fa      	str	r2, [r7, #28]
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	4413      	add	r3, r2
 8004e86:	2230      	movs	r2, #48	; 0x30
 8004e88:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d006      	beq.n	8004ea2 <_ntoa_format+0x86>
 8004e94:	69fa      	ldr	r2, [r7, #28]
 8004e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d202      	bcs.n	8004ea2 <_ntoa_format+0x86>
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	2b1f      	cmp	r3, #31
 8004ea0:	d9ec      	bls.n	8004e7c <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	f003 0310 	and.w	r3, r3, #16
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d058      	beq.n	8004f5e <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d116      	bne.n	8004ee4 <_ntoa_format+0xc8>
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d013      	beq.n	8004ee4 <_ntoa_format+0xc8>
 8004ebc:	69fa      	ldr	r2, [r7, #28]
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d003      	beq.n	8004ecc <_ntoa_format+0xb0>
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d10b      	bne.n	8004ee4 <_ntoa_format+0xc8>
      len--;
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <_ntoa_format+0xc8>
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	2b10      	cmp	r3, #16
 8004edc:	d102      	bne.n	8004ee4 <_ntoa_format+0xc8>
        len--;
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	2b10      	cmp	r3, #16
 8004ee8:	d10f      	bne.n	8004f0a <_ntoa_format+0xee>
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	f003 0320 	and.w	r3, r3, #32
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10a      	bne.n	8004f0a <_ntoa_format+0xee>
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	2b1f      	cmp	r3, #31
 8004ef8:	d807      	bhi.n	8004f0a <_ntoa_format+0xee>
      buf[len++] = 'x';
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	61fa      	str	r2, [r7, #28]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4413      	add	r3, r2
 8004f04:	2278      	movs	r2, #120	; 0x78
 8004f06:	701a      	strb	r2, [r3, #0]
 8004f08:	e01f      	b.n	8004f4a <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	2b10      	cmp	r3, #16
 8004f0e:	d10f      	bne.n	8004f30 <_ntoa_format+0x114>
 8004f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <_ntoa_format+0x114>
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	2b1f      	cmp	r3, #31
 8004f1e:	d807      	bhi.n	8004f30 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	61fa      	str	r2, [r7, #28]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	4413      	add	r3, r2
 8004f2a:	2258      	movs	r2, #88	; 0x58
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	e00c      	b.n	8004f4a <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d109      	bne.n	8004f4a <_ntoa_format+0x12e>
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	2b1f      	cmp	r3, #31
 8004f3a:	d806      	bhi.n	8004f4a <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	61fa      	str	r2, [r7, #28]
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	4413      	add	r3, r2
 8004f46:	2262      	movs	r2, #98	; 0x62
 8004f48:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	2b1f      	cmp	r3, #31
 8004f4e:	d806      	bhi.n	8004f5e <_ntoa_format+0x142>
      buf[len++] = '0';
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	61fa      	str	r2, [r7, #28]
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	4413      	add	r3, r2
 8004f5a:	2230      	movs	r2, #48	; 0x30
 8004f5c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	2b1f      	cmp	r3, #31
 8004f62:	d824      	bhi.n	8004fae <_ntoa_format+0x192>
    if (negative) {
 8004f64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <_ntoa_format+0x160>
      buf[len++] = '-';
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	61fa      	str	r2, [r7, #28]
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4413      	add	r3, r2
 8004f76:	222d      	movs	r2, #45	; 0x2d
 8004f78:	701a      	strb	r2, [r3, #0]
 8004f7a:	e018      	b.n	8004fae <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d007      	beq.n	8004f96 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	61fa      	str	r2, [r7, #28]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	4413      	add	r3, r2
 8004f90:	222b      	movs	r2, #43	; 0x2b
 8004f92:	701a      	strb	r2, [r3, #0]
 8004f94:	e00b      	b.n	8004fae <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d006      	beq.n	8004fae <_ntoa_format+0x192>
      buf[len++] = ' ';
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	61fa      	str	r2, [r7, #28]
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	4413      	add	r3, r2
 8004faa:	2220      	movs	r2, #32
 8004fac:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8004fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb0:	9303      	str	r3, [sp, #12]
 8004fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb4:	9302      	str	r3, [sp, #8]
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	9301      	str	r3, [sp, #4]
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f7ff fed9 	bl	8004d7c <_out_rev>
 8004fca:	4603      	mov	r3, r0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b096      	sub	sp, #88	; 0x58
 8004fd8:	af08      	add	r7, sp, #32
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8004fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d103      	bne.n	8004ff4 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8004fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fee:	f023 0310 	bic.w	r3, r3, #16
 8004ff2:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8004ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <_ntoa_long+0x30>
 8004ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	d032      	beq.n	800506a <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8005004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005006:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005008:	fbb3 f2f2 	udiv	r2, r3, r2
 800500c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800500e:	fb01 f202 	mul.w	r2, r1, r2
 8005012:	1a9b      	subs	r3, r3, r2
 8005014:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8005018:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800501c:	2b09      	cmp	r3, #9
 800501e:	d804      	bhi.n	800502a <_ntoa_long+0x56>
 8005020:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005024:	3330      	adds	r3, #48	; 0x30
 8005026:	b2da      	uxtb	r2, r3
 8005028:	e00d      	b.n	8005046 <_ntoa_long+0x72>
 800502a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <_ntoa_long+0x64>
 8005034:	2241      	movs	r2, #65	; 0x41
 8005036:	e000      	b.n	800503a <_ntoa_long+0x66>
 8005038:	2261      	movs	r2, #97	; 0x61
 800503a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800503e:	4413      	add	r3, r2
 8005040:	b2db      	uxtb	r3, r3
 8005042:	3b0a      	subs	r3, #10
 8005044:	b2da      	uxtb	r2, r3
 8005046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005048:	1c59      	adds	r1, r3, #1
 800504a:	6379      	str	r1, [r7, #52]	; 0x34
 800504c:	3338      	adds	r3, #56	; 0x38
 800504e:	443b      	add	r3, r7
 8005050:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8005054:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005058:	fbb2 f3f3 	udiv	r3, r2, r3
 800505c:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800505e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <_ntoa_long+0x96>
 8005064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005066:	2b1f      	cmp	r3, #31
 8005068:	d9cc      	bls.n	8005004 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800506a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800506c:	9306      	str	r3, [sp, #24]
 800506e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005070:	9305      	str	r3, [sp, #20]
 8005072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005074:	9304      	str	r3, [sp, #16]
 8005076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005078:	9303      	str	r3, [sp, #12]
 800507a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800507e:	9302      	str	r3, [sp, #8]
 8005080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005082:	9301      	str	r3, [sp, #4]
 8005084:	f107 0310 	add.w	r3, r7, #16
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	68b9      	ldr	r1, [r7, #8]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f7ff fec3 	bl	8004e1c <_ntoa_format>
 8005096:	4603      	mov	r3, r0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3738      	adds	r7, #56	; 0x38
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b096      	sub	sp, #88	; 0x58
 80050a4:	af08      	add	r7, sp, #32
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80050b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050b6:	4313      	orrs	r3, r2
 80050b8:	d103      	bne.n	80050c2 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80050ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050bc:	f023 0310 	bic.w	r3, r3, #16
 80050c0:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80050c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <_ntoa_long_long+0x34>
 80050cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050d0:	4313      	orrs	r3, r2
 80050d2:	d037      	beq.n	8005144 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 80050d4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80050d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80050dc:	f7fb fe4c 	bl	8000d78 <__aeabi_uldivmod>
 80050e0:	4613      	mov	r3, r2
 80050e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80050e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050ea:	2b09      	cmp	r3, #9
 80050ec:	d804      	bhi.n	80050f8 <_ntoa_long_long+0x58>
 80050ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050f2:	3330      	adds	r3, #48	; 0x30
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	e00d      	b.n	8005114 <_ntoa_long_long+0x74>
 80050f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050fa:	f003 0320 	and.w	r3, r3, #32
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <_ntoa_long_long+0x66>
 8005102:	2241      	movs	r2, #65	; 0x41
 8005104:	e000      	b.n	8005108 <_ntoa_long_long+0x68>
 8005106:	2261      	movs	r2, #97	; 0x61
 8005108:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800510c:	4413      	add	r3, r2
 800510e:	b2db      	uxtb	r3, r3
 8005110:	3b0a      	subs	r3, #10
 8005112:	b2da      	uxtb	r2, r3
 8005114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005116:	1c59      	adds	r1, r3, #1
 8005118:	6379      	str	r1, [r7, #52]	; 0x34
 800511a:	3338      	adds	r3, #56	; 0x38
 800511c:	443b      	add	r3, r7
 800511e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8005122:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005126:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800512a:	f7fb fe25 	bl	8000d78 <__aeabi_uldivmod>
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8005136:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800513a:	4313      	orrs	r3, r2
 800513c:	d002      	beq.n	8005144 <_ntoa_long_long+0xa4>
 800513e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005140:	2b1f      	cmp	r3, #31
 8005142:	d9c7      	bls.n	80050d4 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8005144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005146:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005148:	9206      	str	r2, [sp, #24]
 800514a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800514c:	9205      	str	r2, [sp, #20]
 800514e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005150:	9204      	str	r2, [sp, #16]
 8005152:	9303      	str	r3, [sp, #12]
 8005154:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005158:	9302      	str	r3, [sp, #8]
 800515a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515c:	9301      	str	r3, [sp, #4]
 800515e:	f107 0310 	add.w	r3, r7, #16
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	68b9      	ldr	r1, [r7, #8]
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f7ff fe56 	bl	8004e1c <_ntoa_format>
 8005170:	4603      	mov	r3, r0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3738      	adds	r7, #56	; 0x38
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	0000      	movs	r0, r0
 800517c:	0000      	movs	r0, r0
	...

08005180 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005180:	b590      	push	{r4, r7, lr}
 8005182:	b09d      	sub	sp, #116	; 0x74
 8005184:	af04      	add	r7, sp, #16
 8005186:	6178      	str	r0, [r7, #20]
 8005188:	6139      	str	r1, [r7, #16]
 800518a:	60fa      	str	r2, [r7, #12]
 800518c:	60bb      	str	r3, [r7, #8]
 800518e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8005192:	2300      	movs	r3, #0
 8005194:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80051a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051aa:	f7fb fcb5 	bl	8000b18 <__aeabi_dcmpeq>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10f      	bne.n	80051d4 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80051b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051b6:	9303      	str	r3, [sp, #12]
 80051b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051ba:	9302      	str	r3, [sp, #8]
 80051bc:	2303      	movs	r3, #3
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	4ba7      	ldr	r3, [pc, #668]	; (8005460 <_ftoa+0x2e0>)
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	6939      	ldr	r1, [r7, #16]
 80051ca:	6978      	ldr	r0, [r7, #20]
 80051cc:	f7ff fdd6 	bl	8004d7c <_out_rev>
 80051d0:	4603      	mov	r3, r0
 80051d2:	e222      	b.n	800561a <_ftoa+0x49a>
  if (value < -DBL_MAX)
 80051d4:	f04f 32ff 	mov.w	r2, #4294967295
 80051d8:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80051dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051e0:	f7fb fca4 	bl	8000b2c <__aeabi_dcmplt>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00f      	beq.n	800520a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80051ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ec:	9303      	str	r3, [sp, #12]
 80051ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051f0:	9302      	str	r3, [sp, #8]
 80051f2:	2304      	movs	r3, #4
 80051f4:	9301      	str	r3, [sp, #4]
 80051f6:	4b9b      	ldr	r3, [pc, #620]	; (8005464 <_ftoa+0x2e4>)
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	6939      	ldr	r1, [r7, #16]
 8005200:	6978      	ldr	r0, [r7, #20]
 8005202:	f7ff fdbb 	bl	8004d7c <_out_rev>
 8005206:	4603      	mov	r3, r0
 8005208:	e207      	b.n	800561a <_ftoa+0x49a>
  if (value > DBL_MAX)
 800520a:	f04f 32ff 	mov.w	r2, #4294967295
 800520e:	4b96      	ldr	r3, [pc, #600]	; (8005468 <_ftoa+0x2e8>)
 8005210:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005214:	f7fb fca8 	bl	8000b68 <__aeabi_dcmpgt>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d01d      	beq.n	800525a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800521e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <_ftoa+0xac>
 8005228:	4b90      	ldr	r3, [pc, #576]	; (800546c <_ftoa+0x2ec>)
 800522a:	e000      	b.n	800522e <_ftoa+0xae>
 800522c:	4b90      	ldr	r3, [pc, #576]	; (8005470 <_ftoa+0x2f0>)
 800522e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005230:	f002 0204 	and.w	r2, r2, #4
 8005234:	2a00      	cmp	r2, #0
 8005236:	d001      	beq.n	800523c <_ftoa+0xbc>
 8005238:	2204      	movs	r2, #4
 800523a:	e000      	b.n	800523e <_ftoa+0xbe>
 800523c:	2203      	movs	r2, #3
 800523e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005240:	9103      	str	r1, [sp, #12]
 8005242:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005244:	9102      	str	r1, [sp, #8]
 8005246:	9201      	str	r2, [sp, #4]
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	6939      	ldr	r1, [r7, #16]
 8005250:	6978      	ldr	r0, [r7, #20]
 8005252:	f7ff fd93 	bl	8004d7c <_out_rev>
 8005256:	4603      	mov	r3, r0
 8005258:	e1df      	b.n	800561a <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800525a:	a37d      	add	r3, pc, #500	; (adr r3, 8005450 <_ftoa+0x2d0>)
 800525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005260:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005264:	f7fb fc80 	bl	8000b68 <__aeabi_dcmpgt>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d109      	bne.n	8005282 <_ftoa+0x102>
 800526e:	a37a      	add	r3, pc, #488	; (adr r3, 8005458 <_ftoa+0x2d8>)
 8005270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005274:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005278:	f7fb fc58 	bl	8000b2c <__aeabi_dcmplt>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00f      	beq.n	80052a2 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8005282:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005284:	9302      	str	r3, [sp, #8]
 8005286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005288:	9301      	str	r3, [sp, #4]
 800528a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	ed97 0b00 	vldr	d0, [r7]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	6939      	ldr	r1, [r7, #16]
 8005298:	6978      	ldr	r0, [r7, #20]
 800529a:	f000 f9c9 	bl	8005630 <_etoa>
 800529e:	4603      	mov	r3, r0
 80052a0:	e1bb      	b.n	800561a <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80052a2:	2300      	movs	r3, #0
 80052a4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 80052a8:	f04f 0200 	mov.w	r2, #0
 80052ac:	f04f 0300 	mov.w	r3, #0
 80052b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052b4:	f7fb fc3a 	bl	8000b2c <__aeabi_dcmplt>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00e      	beq.n	80052dc <_ftoa+0x15c>
    negative = true;
 80052be:	2301      	movs	r3, #1
 80052c0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 80052c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052c8:	f04f 0000 	mov.w	r0, #0
 80052cc:	f04f 0100 	mov.w	r1, #0
 80052d0:	f7fb f802 	bl	80002d8 <__aeabi_dsub>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80052dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10d      	bne.n	8005302 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80052e6:	2306      	movs	r3, #6
 80052e8:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80052ea:	e00a      	b.n	8005302 <_ftoa+0x182>
    buf[len++] = '0';
 80052ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80052f2:	3360      	adds	r3, #96	; 0x60
 80052f4:	443b      	add	r3, r7
 80052f6:	2230      	movs	r2, #48	; 0x30
 80052f8:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80052fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052fe:	3b01      	subs	r3, #1
 8005300:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8005302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005304:	2b1f      	cmp	r3, #31
 8005306:	d802      	bhi.n	800530e <_ftoa+0x18e>
 8005308:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800530a:	2b09      	cmp	r3, #9
 800530c:	d8ee      	bhi.n	80052ec <_ftoa+0x16c>
  }

  int whole = (int)value;
 800530e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005312:	f7fb fc49 	bl	8000ba8 <__aeabi_d2iz>
 8005316:	4603      	mov	r3, r0
 8005318:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800531a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800531c:	f7fb f92a 	bl	8000574 <__aeabi_i2d>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005328:	f7fa ffd6 	bl	80002d8 <__aeabi_dsub>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4610      	mov	r0, r2
 8005332:	4619      	mov	r1, r3
 8005334:	4a4f      	ldr	r2, [pc, #316]	; (8005474 <_ftoa+0x2f4>)
 8005336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	4413      	add	r3, r2
 800533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005340:	f7fb f982 	bl	8000648 <__aeabi_dmul>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800534c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005350:	f7fb fc52 	bl	8000bf8 <__aeabi_d2uiz>
 8005354:	4603      	mov	r3, r0
 8005356:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8005358:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800535a:	f7fb f8fb 	bl	8000554 <__aeabi_ui2d>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005366:	f7fa ffb7 	bl	80002d8 <__aeabi_dsub>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	4b40      	ldr	r3, [pc, #256]	; (8005478 <_ftoa+0x2f8>)
 8005378:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800537c:	f7fb fbf4 	bl	8000b68 <__aeabi_dcmpgt>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d016      	beq.n	80053b4 <_ftoa+0x234>
    ++frac;
 8005386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005388:	3301      	adds	r3, #1
 800538a:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800538c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800538e:	f7fb f8e1 	bl	8000554 <__aeabi_ui2d>
 8005392:	4a38      	ldr	r2, [pc, #224]	; (8005474 <_ftoa+0x2f4>)
 8005394:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	4413      	add	r3, r2
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	f7fb fbd9 	bl	8000b54 <__aeabi_dcmpge>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01a      	beq.n	80053de <_ftoa+0x25e>
      frac = 0;
 80053a8:	2300      	movs	r3, #0
 80053aa:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 80053ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ae:	3301      	adds	r3, #1
 80053b0:	657b      	str	r3, [r7, #84]	; 0x54
 80053b2:	e014      	b.n	80053de <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	4b2f      	ldr	r3, [pc, #188]	; (8005478 <_ftoa+0x2f8>)
 80053ba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80053be:	f7fb fbb5 	bl	8000b2c <__aeabi_dcmplt>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10a      	bne.n	80053de <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80053c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d004      	beq.n	80053d8 <_ftoa+0x258>
 80053ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80053d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053da:	3301      	adds	r3, #1
 80053dc:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 80053de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d14b      	bne.n	800547c <_ftoa+0x2fc>
    diff = value - (double)whole;
 80053e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80053e6:	f7fb f8c5 	bl	8000574 <__aeabi_i2d>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053f2:	f7fa ff71 	bl	80002d8 <__aeabi_dsub>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80053fe:	2301      	movs	r3, #1
 8005400:	461c      	mov	r4, r3
 8005402:	f04f 0200 	mov.w	r2, #0
 8005406:	4b1c      	ldr	r3, [pc, #112]	; (8005478 <_ftoa+0x2f8>)
 8005408:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800540c:	f7fb fb8e 	bl	8000b2c <__aeabi_dcmplt>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <_ftoa+0x29a>
 8005416:	2300      	movs	r3, #0
 8005418:	461c      	mov	r4, r3
 800541a:	b2e3      	uxtb	r3, r4
 800541c:	f083 0301 	eor.w	r3, r3, #1
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d109      	bne.n	800543a <_ftoa+0x2ba>
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	4b13      	ldr	r3, [pc, #76]	; (8005478 <_ftoa+0x2f8>)
 800542c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005430:	f7fb fb9a 	bl	8000b68 <__aeabi_dcmpgt>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d064      	beq.n	8005504 <_ftoa+0x384>
 800543a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 8081 	beq.w	8005548 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8005446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005448:	3301      	adds	r3, #1
 800544a:	657b      	str	r3, [r7, #84]	; 0x54
 800544c:	e07c      	b.n	8005548 <_ftoa+0x3c8>
 800544e:	bf00      	nop
 8005450:	00000000 	.word	0x00000000
 8005454:	41cdcd65 	.word	0x41cdcd65
 8005458:	00000000 	.word	0x00000000
 800545c:	c1cdcd65 	.word	0xc1cdcd65
 8005460:	0801bed8 	.word	0x0801bed8
 8005464:	0801bedc 	.word	0x0801bedc
 8005468:	7fefffff 	.word	0x7fefffff
 800546c:	0801bee4 	.word	0x0801bee4
 8005470:	0801beec 	.word	0x0801beec
 8005474:	0801bff8 	.word	0x0801bff8
 8005478:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 800547c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800547e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005480:	e01f      	b.n	80054c2 <_ftoa+0x342>
      --count;
 8005482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005484:	3b01      	subs	r3, #1
 8005486:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8005488:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800548a:	4b66      	ldr	r3, [pc, #408]	; (8005624 <_ftoa+0x4a4>)
 800548c:	fba3 2301 	umull	r2, r3, r3, r1
 8005490:	08da      	lsrs	r2, r3, #3
 8005492:	4613      	mov	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	1aca      	subs	r2, r1, r3
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054a0:	1c59      	adds	r1, r3, #1
 80054a2:	65f9      	str	r1, [r7, #92]	; 0x5c
 80054a4:	3230      	adds	r2, #48	; 0x30
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	3360      	adds	r3, #96	; 0x60
 80054aa:	443b      	add	r3, r7
 80054ac:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80054b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b2:	4a5c      	ldr	r2, [pc, #368]	; (8005624 <_ftoa+0x4a4>)
 80054b4:	fba2 2303 	umull	r2, r3, r2, r3
 80054b8:	08db      	lsrs	r3, r3, #3
 80054ba:	653b      	str	r3, [r7, #80]	; 0x50
 80054bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80054c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054c4:	2b1f      	cmp	r3, #31
 80054c6:	d9dc      	bls.n	8005482 <_ftoa+0x302>
 80054c8:	e009      	b.n	80054de <_ftoa+0x35e>
        break;
 80054ca:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80054cc:	e007      	b.n	80054de <_ftoa+0x35e>
      buf[len++] = '0';
 80054ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80054d4:	3360      	adds	r3, #96	; 0x60
 80054d6:	443b      	add	r3, r7
 80054d8:	2230      	movs	r2, #48	; 0x30
 80054da:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80054de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054e0:	2b1f      	cmp	r3, #31
 80054e2:	d804      	bhi.n	80054ee <_ftoa+0x36e>
 80054e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e6:	1e5a      	subs	r2, r3, #1
 80054e8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1ef      	bne.n	80054ce <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80054ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054f0:	2b1f      	cmp	r3, #31
 80054f2:	d829      	bhi.n	8005548 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 80054f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80054fa:	3360      	adds	r3, #96	; 0x60
 80054fc:	443b      	add	r3, r7
 80054fe:	222e      	movs	r2, #46	; 0x2e
 8005500:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005504:	e020      	b.n	8005548 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8005506:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005508:	4b47      	ldr	r3, [pc, #284]	; (8005628 <_ftoa+0x4a8>)
 800550a:	fb83 1302 	smull	r1, r3, r3, r2
 800550e:	1099      	asrs	r1, r3, #2
 8005510:	17d3      	asrs	r3, r2, #31
 8005512:	1ac9      	subs	r1, r1, r3
 8005514:	460b      	mov	r3, r1
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	440b      	add	r3, r1
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	1ad1      	subs	r1, r2, r3
 800551e:	b2ca      	uxtb	r2, r1
 8005520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005522:	1c59      	adds	r1, r3, #1
 8005524:	65f9      	str	r1, [r7, #92]	; 0x5c
 8005526:	3230      	adds	r2, #48	; 0x30
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	3360      	adds	r3, #96	; 0x60
 800552c:	443b      	add	r3, r7
 800552e:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8005532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005534:	4a3c      	ldr	r2, [pc, #240]	; (8005628 <_ftoa+0x4a8>)
 8005536:	fb82 1203 	smull	r1, r2, r2, r3
 800553a:	1092      	asrs	r2, r2, #2
 800553c:	17db      	asrs	r3, r3, #31
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	657b      	str	r3, [r7, #84]	; 0x54
 8005542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800554a:	2b1f      	cmp	r3, #31
 800554c:	d9db      	bls.n	8005506 <_ftoa+0x386>
 800554e:	e000      	b.n	8005552 <_ftoa+0x3d2>
      break;
 8005550:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8005552:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d123      	bne.n	80055a4 <_ftoa+0x424>
 800555c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01e      	beq.n	80055a4 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8005566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005568:	2b00      	cmp	r3, #0
 800556a:	d014      	beq.n	8005596 <_ftoa+0x416>
 800556c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005570:	2b00      	cmp	r3, #0
 8005572:	d104      	bne.n	800557e <_ftoa+0x3fe>
 8005574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005576:	f003 030c 	and.w	r3, r3, #12
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00b      	beq.n	8005596 <_ftoa+0x416>
      width--;
 800557e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005580:	3b01      	subs	r3, #1
 8005582:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8005584:	e007      	b.n	8005596 <_ftoa+0x416>
      buf[len++] = '0';
 8005586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800558c:	3360      	adds	r3, #96	; 0x60
 800558e:	443b      	add	r3, r7
 8005590:	2230      	movs	r2, #48	; 0x30
 8005592:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8005596:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800559a:	429a      	cmp	r2, r3
 800559c:	d202      	bcs.n	80055a4 <_ftoa+0x424>
 800559e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055a0:	2b1f      	cmp	r3, #31
 80055a2:	d9f0      	bls.n	8005586 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80055a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055a6:	2b1f      	cmp	r3, #31
 80055a8:	d827      	bhi.n	80055fa <_ftoa+0x47a>
    if (negative) {
 80055aa:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d008      	beq.n	80055c4 <_ftoa+0x444>
      buf[len++] = '-';
 80055b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80055b8:	3360      	adds	r3, #96	; 0x60
 80055ba:	443b      	add	r3, r7
 80055bc:	222d      	movs	r2, #45	; 0x2d
 80055be:	f803 2c48 	strb.w	r2, [r3, #-72]
 80055c2:	e01a      	b.n	80055fa <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 80055c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d008      	beq.n	80055e0 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80055ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80055d4:	3360      	adds	r3, #96	; 0x60
 80055d6:	443b      	add	r3, r7
 80055d8:	222b      	movs	r2, #43	; 0x2b
 80055da:	f803 2c48 	strb.w	r2, [r3, #-72]
 80055de:	e00c      	b.n	80055fa <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 80055e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d007      	beq.n	80055fa <_ftoa+0x47a>
      buf[len++] = ' ';
 80055ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80055f0:	3360      	adds	r3, #96	; 0x60
 80055f2:	443b      	add	r3, r7
 80055f4:	2220      	movs	r2, #32
 80055f6:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80055fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055fc:	9303      	str	r3, [sp, #12]
 80055fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005600:	9302      	str	r3, [sp, #8]
 8005602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005604:	9301      	str	r3, [sp, #4]
 8005606:	f107 0318 	add.w	r3, r7, #24
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	6939      	ldr	r1, [r7, #16]
 8005612:	6978      	ldr	r0, [r7, #20]
 8005614:	f7ff fbb2 	bl	8004d7c <_out_rev>
 8005618:	4603      	mov	r3, r0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3764      	adds	r7, #100	; 0x64
 800561e:	46bd      	mov	sp, r7
 8005620:	bd90      	pop	{r4, r7, pc}
 8005622:	bf00      	nop
 8005624:	cccccccd 	.word	0xcccccccd
 8005628:	66666667 	.word	0x66666667
 800562c:	00000000 	.word	0x00000000

08005630 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005634:	b09f      	sub	sp, #124	; 0x7c
 8005636:	af06      	add	r7, sp, #24
 8005638:	6278      	str	r0, [r7, #36]	; 0x24
 800563a:	6239      	str	r1, [r7, #32]
 800563c:	61fa      	str	r2, [r7, #28]
 800563e:	61bb      	str	r3, [r7, #24]
 8005640:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8005644:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005648:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800564c:	f7fb fa64 	bl	8000b18 <__aeabi_dcmpeq>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d014      	beq.n	8005680 <_etoa+0x50>
 8005656:	f04f 32ff 	mov.w	r2, #4294967295
 800565a:	4bc1      	ldr	r3, [pc, #772]	; (8005960 <_etoa+0x330>)
 800565c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005660:	f7fb fa82 	bl	8000b68 <__aeabi_dcmpgt>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10a      	bne.n	8005680 <_etoa+0x50>
 800566a:	f04f 32ff 	mov.w	r2, #4294967295
 800566e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8005672:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005676:	f7fb fa59 	bl	8000b2c <__aeabi_dcmplt>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d012      	beq.n	80056a6 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8005680:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005684:	9302      	str	r3, [sp, #8]
 8005686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800568a:	9301      	str	r3, [sp, #4]
 800568c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	ed97 0b04 	vldr	d0, [r7, #16]
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	6a39      	ldr	r1, [r7, #32]
 800569c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800569e:	f7ff fd6f 	bl	8005180 <_ftoa>
 80056a2:	4603      	mov	r3, r0
 80056a4:	e23f      	b.n	8005b26 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 80056a6:	2301      	movs	r3, #1
 80056a8:	461e      	mov	r6, r3
 80056aa:	f04f 0200 	mov.w	r2, #0
 80056ae:	f04f 0300 	mov.w	r3, #0
 80056b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80056b6:	f7fb fa39 	bl	8000b2c <__aeabi_dcmplt>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <_etoa+0x94>
 80056c0:	2300      	movs	r3, #0
 80056c2:	461e      	mov	r6, r3
 80056c4:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 80056c8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d009      	beq.n	80056e4 <_etoa+0xb4>
    value = -value;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80056da:	607b      	str	r3, [r7, #4]
 80056dc:	ed97 7b00 	vldr	d7, [r7]
 80056e0:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80056e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80056e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d102      	bne.n	80056f6 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80056f0:	2306      	movs	r3, #6
 80056f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80056f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80056fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80056fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	f04f 0300 	mov.w	r3, #0
 800570a:	0d0a      	lsrs	r2, r1, #20
 800570c:	2300      	movs	r3, #0
 800570e:	4613      	mov	r3, r2
 8005710:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005714:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005718:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800571a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800571e:	4690      	mov	r8, r2
 8005720:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8005724:	4644      	mov	r4, r8
 8005726:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 800572a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800572e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8005732:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005734:	f7fa ff1e 	bl	8000574 <__aeabi_i2d>
 8005738:	a37d      	add	r3, pc, #500	; (adr r3, 8005930 <_etoa+0x300>)
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	f7fa ff83 	bl	8000648 <__aeabi_dmul>
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4610      	mov	r0, r2
 8005748:	4619      	mov	r1, r3
 800574a:	a37b      	add	r3, pc, #492	; (adr r3, 8005938 <_etoa+0x308>)
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	f7fa fdc4 	bl	80002dc <__adddf3>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	4614      	mov	r4, r2
 800575a:	461d      	mov	r5, r3
 800575c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	4b7f      	ldr	r3, [pc, #508]	; (8005964 <_etoa+0x334>)
 8005766:	f7fa fdb7 	bl	80002d8 <__aeabi_dsub>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	4610      	mov	r0, r2
 8005770:	4619      	mov	r1, r3
 8005772:	a373      	add	r3, pc, #460	; (adr r3, 8005940 <_etoa+0x310>)
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	f7fa ff66 	bl	8000648 <__aeabi_dmul>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4620      	mov	r0, r4
 8005782:	4629      	mov	r1, r5
 8005784:	f7fa fdaa 	bl	80002dc <__adddf3>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	4610      	mov	r0, r2
 800578e:	4619      	mov	r1, r3
 8005790:	f7fb fa0a 	bl	8000ba8 <__aeabi_d2iz>
 8005794:	4603      	mov	r3, r0
 8005796:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8005798:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800579a:	f7fa feeb 	bl	8000574 <__aeabi_i2d>
 800579e:	a36a      	add	r3, pc, #424	; (adr r3, 8005948 <_etoa+0x318>)
 80057a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a4:	f7fa ff50 	bl	8000648 <__aeabi_dmul>
 80057a8:	4602      	mov	r2, r0
 80057aa:	460b      	mov	r3, r1
 80057ac:	4610      	mov	r0, r2
 80057ae:	4619      	mov	r1, r3
 80057b0:	f04f 0200 	mov.w	r2, #0
 80057b4:	4b6c      	ldr	r3, [pc, #432]	; (8005968 <_etoa+0x338>)
 80057b6:	f7fa fd91 	bl	80002dc <__adddf3>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4610      	mov	r0, r2
 80057c0:	4619      	mov	r1, r3
 80057c2:	f7fb f9f1 	bl	8000ba8 <__aeabi_d2iz>
 80057c6:	4603      	mov	r3, r0
 80057c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80057ca:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80057cc:	f7fa fed2 	bl	8000574 <__aeabi_i2d>
 80057d0:	a35f      	add	r3, pc, #380	; (adr r3, 8005950 <_etoa+0x320>)
 80057d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d6:	f7fa ff37 	bl	8000648 <__aeabi_dmul>
 80057da:	4602      	mov	r2, r0
 80057dc:	460b      	mov	r3, r1
 80057de:	4614      	mov	r4, r2
 80057e0:	461d      	mov	r5, r3
 80057e2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80057e4:	f7fa fec6 	bl	8000574 <__aeabi_i2d>
 80057e8:	a35b      	add	r3, pc, #364	; (adr r3, 8005958 <_etoa+0x328>)
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	f7fa ff2b 	bl	8000648 <__aeabi_dmul>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	4620      	mov	r0, r4
 80057f8:	4629      	mov	r1, r5
 80057fa:	f7fa fd6d 	bl	80002d8 <__aeabi_dsub>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8005806:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800580a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800580e:	f7fa ff1b 	bl	8000648 <__aeabi_dmul>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800581a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800581c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8005820:	17da      	asrs	r2, r3, #31
 8005822:	469a      	mov	sl, r3
 8005824:	4693      	mov	fp, r2
 8005826:	f04f 0200 	mov.w	r2, #0
 800582a:	f04f 0300 	mov.w	r3, #0
 800582e:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8005832:	2200      	movs	r2, #0
 8005834:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8005838:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800583c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	f7fa fd4a 	bl	80002dc <__adddf3>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	4690      	mov	r8, r2
 800584e:	4699      	mov	r9, r3
 8005850:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005854:	f04f 0000 	mov.w	r0, #0
 8005858:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800585c:	f7fa fd3c 	bl	80002d8 <__aeabi_dsub>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4692      	mov	sl, r2
 8005866:	469b      	mov	fp, r3
 8005868:	f04f 0200 	mov.w	r2, #0
 800586c:	4b3f      	ldr	r3, [pc, #252]	; (800596c <_etoa+0x33c>)
 800586e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005872:	f7fb f813 	bl	800089c <__aeabi_ddiv>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4610      	mov	r0, r2
 800587c:	4619      	mov	r1, r3
 800587e:	f04f 0200 	mov.w	r2, #0
 8005882:	4b3b      	ldr	r3, [pc, #236]	; (8005970 <_etoa+0x340>)
 8005884:	f7fa fd2a 	bl	80002dc <__adddf3>
 8005888:	4602      	mov	r2, r0
 800588a:	460b      	mov	r3, r1
 800588c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005890:	f7fb f804 	bl	800089c <__aeabi_ddiv>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	4610      	mov	r0, r2
 800589a:	4619      	mov	r1, r3
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	4b34      	ldr	r3, [pc, #208]	; (8005974 <_etoa+0x344>)
 80058a2:	f7fa fd1b 	bl	80002dc <__adddf3>
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80058ae:	f7fa fff5 	bl	800089c <__aeabi_ddiv>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4650      	mov	r0, sl
 80058b8:	4659      	mov	r1, fp
 80058ba:	f7fa fd0f 	bl	80002dc <__adddf3>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4640      	mov	r0, r8
 80058c4:	4649      	mov	r1, r9
 80058c6:	f7fa ffe9 	bl	800089c <__aeabi_ddiv>
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	4610      	mov	r0, r2
 80058d0:	4619      	mov	r1, r3
 80058d2:	f04f 0200 	mov.w	r2, #0
 80058d6:	4b28      	ldr	r3, [pc, #160]	; (8005978 <_etoa+0x348>)
 80058d8:	f7fa fd00 	bl	80002dc <__adddf3>
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	4620      	mov	r0, r4
 80058e2:	4629      	mov	r1, r5
 80058e4:	f7fa feb0 	bl	8000648 <__aeabi_dmul>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 80058f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80058f8:	f7fb f918 	bl	8000b2c <__aeabi_dcmplt>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00d      	beq.n	800591e <_etoa+0x2ee>
    expval--;
 8005902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005904:	3b01      	subs	r3, #1
 8005906:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8005908:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	4b17      	ldr	r3, [pc, #92]	; (8005970 <_etoa+0x340>)
 8005912:	f7fa ffc3 	bl	800089c <__aeabi_ddiv>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800591e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005920:	2b63      	cmp	r3, #99	; 0x63
 8005922:	dc2b      	bgt.n	800597c <_etoa+0x34c>
 8005924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005926:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800592a:	db27      	blt.n	800597c <_etoa+0x34c>
 800592c:	2304      	movs	r3, #4
 800592e:	e026      	b.n	800597e <_etoa+0x34e>
 8005930:	509f79fb 	.word	0x509f79fb
 8005934:	3fd34413 	.word	0x3fd34413
 8005938:	8b60c8b3 	.word	0x8b60c8b3
 800593c:	3fc68a28 	.word	0x3fc68a28
 8005940:	636f4361 	.word	0x636f4361
 8005944:	3fd287a7 	.word	0x3fd287a7
 8005948:	0979a371 	.word	0x0979a371
 800594c:	400a934f 	.word	0x400a934f
 8005950:	bbb55516 	.word	0xbbb55516
 8005954:	40026bb1 	.word	0x40026bb1
 8005958:	fefa39ef 	.word	0xfefa39ef
 800595c:	3fe62e42 	.word	0x3fe62e42
 8005960:	7fefffff 	.word	0x7fefffff
 8005964:	3ff80000 	.word	0x3ff80000
 8005968:	3fe00000 	.word	0x3fe00000
 800596c:	402c0000 	.word	0x402c0000
 8005970:	40240000 	.word	0x40240000
 8005974:	40180000 	.word	0x40180000
 8005978:	3ff00000 	.word	0x3ff00000
 800597c:	2305      	movs	r3, #5
 800597e:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8005980:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005988:	2b00      	cmp	r3, #0
 800598a:	d03d      	beq.n	8005a08 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800598c:	a368      	add	r3, pc, #416	; (adr r3, 8005b30 <_etoa+0x500>)
 800598e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005992:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005996:	f7fb f8dd 	bl	8000b54 <__aeabi_dcmpge>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d024      	beq.n	80059ea <_etoa+0x3ba>
 80059a0:	a365      	add	r3, pc, #404	; (adr r3, 8005b38 <_etoa+0x508>)
 80059a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80059aa:	f7fb f8bf 	bl	8000b2c <__aeabi_dcmplt>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d01a      	beq.n	80059ea <_etoa+0x3ba>
      if ((int)prec > expval) {
 80059b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059ba:	429a      	cmp	r2, r3
 80059bc:	da07      	bge.n	80059ce <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 80059be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80059c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	3b01      	subs	r3, #1
 80059c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059cc:	e002      	b.n	80059d4 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80059d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 80059e4:	2300      	movs	r3, #0
 80059e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059e8:	e00e      	b.n	8005a08 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80059ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <_etoa+0x3d8>
 80059f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d004      	beq.n	8005a08 <_etoa+0x3d8>
        --prec;
 80059fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a02:	3b01      	subs	r3, #1
 8005a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8005a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a0c:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8005a0e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005a12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d904      	bls.n	8005a22 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8005a18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	657b      	str	r3, [r7, #84]	; 0x54
 8005a20:	e001      	b.n	8005a26 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8005a26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d004      	beq.n	8005a3c <_etoa+0x40c>
 8005a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8005a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d009      	beq.n	8005a56 <_etoa+0x426>
    value /= conv.F;
 8005a42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a4a:	f7fa ff27 	bl	800089c <__aeabi_ddiv>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8005a5a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d006      	beq.n	8005a70 <_etoa+0x440>
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	60bb      	str	r3, [r7, #8]
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005a6c:	60fb      	str	r3, [r7, #12]
 8005a6e:	e003      	b.n	8005a78 <_etoa+0x448>
 8005a70:	ed97 7b04 	vldr	d7, [r7, #16]
 8005a74:	ed87 7b02 	vstr	d7, [r7, #8]
 8005a78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a80:	9302      	str	r3, [sp, #8]
 8005a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a84:	9301      	str	r3, [sp, #4]
 8005a86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	ed97 0b02 	vldr	d0, [r7, #8]
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	6a39      	ldr	r1, [r7, #32]
 8005a96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a98:	f7ff fb72 	bl	8005180 <_ftoa>
 8005a9c:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8005a9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d03f      	beq.n	8005b24 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8005aa4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <_etoa+0x484>
 8005ab0:	2045      	movs	r0, #69	; 0x45
 8005ab2:	e000      	b.n	8005ab6 <_etoa+0x486>
 8005ab4:	2065      	movs	r0, #101	; 0x65
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	1c53      	adds	r3, r2, #1
 8005aba:	61fb      	str	r3, [r7, #28]
 8005abc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	6a39      	ldr	r1, [r7, #32]
 8005ac2:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8005ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	bfb8      	it	lt
 8005aca:	425b      	neglt	r3, r3
 8005acc:	4618      	mov	r0, r3
 8005ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ad0:	0fdb      	lsrs	r3, r3, #31
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ad6:	3a01      	subs	r2, #1
 8005ad8:	2105      	movs	r1, #5
 8005ada:	9105      	str	r1, [sp, #20]
 8005adc:	9204      	str	r2, [sp, #16]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	9203      	str	r2, [sp, #12]
 8005ae2:	220a      	movs	r2, #10
 8005ae4:	9202      	str	r2, [sp, #8]
 8005ae6:	9301      	str	r3, [sp, #4]
 8005ae8:	9000      	str	r0, [sp, #0]
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	69fa      	ldr	r2, [r7, #28]
 8005aee:	6a39      	ldr	r1, [r7, #32]
 8005af0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005af2:	f7ff fa6f 	bl	8004fd4 <_ntoa_long>
 8005af6:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8005af8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00f      	beq.n	8005b24 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8005b04:	e007      	b.n	8005b16 <_etoa+0x4e6>
 8005b06:	69fa      	ldr	r2, [r7, #28]
 8005b08:	1c53      	adds	r3, r2, #1
 8005b0a:	61fb      	str	r3, [r7, #28]
 8005b0c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	6a39      	ldr	r1, [r7, #32]
 8005b12:	2020      	movs	r0, #32
 8005b14:	47a0      	blx	r4
 8005b16:	69fa      	ldr	r2, [r7, #28]
 8005b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d8f0      	bhi.n	8005b06 <_etoa+0x4d6>
    }
  }
  return idx;
 8005b24:	69fb      	ldr	r3, [r7, #28]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3764      	adds	r7, #100	; 0x64
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b30:	eb1c432d 	.word	0xeb1c432d
 8005b34:	3f1a36e2 	.word	0x3f1a36e2
 8005b38:	00000000 	.word	0x00000000
 8005b3c:	412e8480 	.word	0x412e8480

08005b40 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8005b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b44:	b0a3      	sub	sp, #140	; 0x8c
 8005b46:	af0a      	add	r7, sp, #40	; 0x28
 8005b48:	6178      	str	r0, [r7, #20]
 8005b4a:	6139      	str	r1, [r7, #16]
 8005b4c:	60fa      	str	r2, [r7, #12]
 8005b4e:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f040 84cf 	bne.w	80064fa <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 8005b5c:	4ba8      	ldr	r3, [pc, #672]	; (8005e00 <_vsnprintf+0x2c0>)
 8005b5e:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8005b60:	f000 bccb 	b.w	80064fa <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b25      	cmp	r3, #37	; 0x25
 8005b6a:	d00d      	beq.n	8005b88 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	7818      	ldrb	r0, [r3, #0]
 8005b70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b72:	1c53      	adds	r3, r2, #1
 8005b74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b76:	697c      	ldr	r4, [r7, #20]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6939      	ldr	r1, [r7, #16]
 8005b7c:	47a0      	blx	r4
      format++;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	3301      	adds	r3, #1
 8005b82:	60bb      	str	r3, [r7, #8]
      continue;
 8005b84:	f000 bcb9 	b.w	80064fa <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	3b20      	subs	r3, #32
 8005b98:	2b10      	cmp	r3, #16
 8005b9a:	d857      	bhi.n	8005c4c <_vsnprintf+0x10c>
 8005b9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ba4 <_vsnprintf+0x64>)
 8005b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba2:	bf00      	nop
 8005ba4:	08005c25 	.word	0x08005c25
 8005ba8:	08005c4d 	.word	0x08005c4d
 8005bac:	08005c4d 	.word	0x08005c4d
 8005bb0:	08005c39 	.word	0x08005c39
 8005bb4:	08005c4d 	.word	0x08005c4d
 8005bb8:	08005c4d 	.word	0x08005c4d
 8005bbc:	08005c4d 	.word	0x08005c4d
 8005bc0:	08005c4d 	.word	0x08005c4d
 8005bc4:	08005c4d 	.word	0x08005c4d
 8005bc8:	08005c4d 	.word	0x08005c4d
 8005bcc:	08005c4d 	.word	0x08005c4d
 8005bd0:	08005c11 	.word	0x08005c11
 8005bd4:	08005c4d 	.word	0x08005c4d
 8005bd8:	08005bfd 	.word	0x08005bfd
 8005bdc:	08005c4d 	.word	0x08005c4d
 8005be0:	08005c4d 	.word	0x08005c4d
 8005be4:	08005be9 	.word	0x08005be9
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8005be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bea:	f043 0301 	orr.w	r3, r3, #1
 8005bee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	60bb      	str	r3, [r7, #8]
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	653b      	str	r3, [r7, #80]	; 0x50
 8005bfa:	e02a      	b.n	8005c52 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8005bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bfe:	f043 0302 	orr.w	r3, r3, #2
 8005c02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	3301      	adds	r3, #1
 8005c08:	60bb      	str	r3, [r7, #8]
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	653b      	str	r3, [r7, #80]	; 0x50
 8005c0e:	e020      	b.n	8005c52 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8005c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c12:	f043 0304 	orr.w	r3, r3, #4
 8005c16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	60bb      	str	r3, [r7, #8]
 8005c1e:	2301      	movs	r3, #1
 8005c20:	653b      	str	r3, [r7, #80]	; 0x50
 8005c22:	e016      	b.n	8005c52 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8005c24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c26:	f043 0308 	orr.w	r3, r3, #8
 8005c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	60bb      	str	r3, [r7, #8]
 8005c32:	2301      	movs	r3, #1
 8005c34:	653b      	str	r3, [r7, #80]	; 0x50
 8005c36:	e00c      	b.n	8005c52 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8005c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c3a:	f043 0310 	orr.w	r3, r3, #16
 8005c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	3301      	adds	r3, #1
 8005c44:	60bb      	str	r3, [r7, #8]
 8005c46:	2301      	movs	r3, #1
 8005c48:	653b      	str	r3, [r7, #80]	; 0x50
 8005c4a:	e002      	b.n	8005c52 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c50:	bf00      	nop
      }
    } while (n);
 8005c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d19c      	bne.n	8005b92 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff f850 	bl	8004d06 <_is_digit>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d006      	beq.n	8005c7a <_vsnprintf+0x13a>
      width = _atoi(&format);
 8005c6c:	f107 0308 	add.w	r3, r7, #8
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff f85f 	bl	8004d34 <_atoi>
 8005c76:	65b8      	str	r0, [r7, #88]	; 0x58
 8005c78:	e01a      	b.n	8005cb0 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c80:	d116      	bne.n	8005cb0 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8005c82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c86:	1d1a      	adds	r2, r3, #4
 8005c88:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8005c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	da07      	bge.n	8005ca6 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8005c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c98:	f043 0302 	orr.w	r3, r3, #2
 8005c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca0:	425b      	negs	r3, r3
 8005ca2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ca4:	e001      	b.n	8005caa <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca8:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	3301      	adds	r3, #1
 8005cae:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b2e      	cmp	r3, #46	; 0x2e
 8005cba:	d127      	bne.n	8005d0c <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8005cbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cc2:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff f819 	bl	8004d06 <_is_digit>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d006      	beq.n	8005ce8 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8005cda:	f107 0308 	add.w	r3, r7, #8
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff f828 	bl	8004d34 <_atoi>
 8005ce4:	6578      	str	r0, [r7, #84]	; 0x54
 8005ce6:	e011      	b.n	8005d0c <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b2a      	cmp	r3, #42	; 0x2a
 8005cee:	d10d      	bne.n	8005d0c <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8005cf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cf4:	1d1a      	adds	r2, r3, #4
 8005cf6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8005cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005d04:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	3b68      	subs	r3, #104	; 0x68
 8005d12:	2b12      	cmp	r3, #18
 8005d14:	d866      	bhi.n	8005de4 <_vsnprintf+0x2a4>
 8005d16:	a201      	add	r2, pc, #4	; (adr r2, 8005d1c <_vsnprintf+0x1dc>)
 8005d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1c:	08005d8f 	.word	0x08005d8f
 8005d20:	08005de5 	.word	0x08005de5
 8005d24:	08005dc5 	.word	0x08005dc5
 8005d28:	08005de5 	.word	0x08005de5
 8005d2c:	08005d69 	.word	0x08005d69
 8005d30:	08005de5 	.word	0x08005de5
 8005d34:	08005de5 	.word	0x08005de5
 8005d38:	08005de5 	.word	0x08005de5
 8005d3c:	08005de5 	.word	0x08005de5
 8005d40:	08005de5 	.word	0x08005de5
 8005d44:	08005de5 	.word	0x08005de5
 8005d48:	08005de5 	.word	0x08005de5
 8005d4c:	08005db5 	.word	0x08005db5
 8005d50:	08005de5 	.word	0x08005de5
 8005d54:	08005de5 	.word	0x08005de5
 8005d58:	08005de5 	.word	0x08005de5
 8005d5c:	08005de5 	.word	0x08005de5
 8005d60:	08005de5 	.word	0x08005de5
 8005d64:	08005dd5 	.word	0x08005dd5
      case 'l' :
        flags |= FLAGS_LONG;
 8005d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	3301      	adds	r3, #1
 8005d74:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b6c      	cmp	r3, #108	; 0x6c
 8005d7c:	d134      	bne.n	8005de8 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8005d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d84:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	60bb      	str	r3, [r7, #8]
        }
        break;
 8005d8c:	e02c      	b.n	8005de8 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8005d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d94:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b68      	cmp	r3, #104	; 0x68
 8005da2:	d123      	bne.n	8005dec <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 8005da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005daa:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	3301      	adds	r3, #1
 8005db0:	60bb      	str	r3, [r7, #8]
        }
        break;
 8005db2:	e01b      	b.n	8005dec <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005db4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dba:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	60bb      	str	r3, [r7, #8]
        break;
 8005dc2:	e014      	b.n	8005dee <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005dc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dca:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	60bb      	str	r3, [r7, #8]
        break;
 8005dd2:	e00c      	b.n	8005dee <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dda:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	3301      	adds	r3, #1
 8005de0:	60bb      	str	r3, [r7, #8]
        break;
 8005de2:	e004      	b.n	8005dee <_vsnprintf+0x2ae>
      default :
        break;
 8005de4:	bf00      	nop
 8005de6:	e002      	b.n	8005dee <_vsnprintf+0x2ae>
        break;
 8005de8:	bf00      	nop
 8005dea:	e000      	b.n	8005dee <_vsnprintf+0x2ae>
        break;
 8005dec:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b67      	cmp	r3, #103	; 0x67
 8005df4:	f300 80b8 	bgt.w	8005f68 <_vsnprintf+0x428>
 8005df8:	2b25      	cmp	r3, #37	; 0x25
 8005dfa:	da27      	bge.n	8005e4c <_vsnprintf+0x30c>
 8005dfc:	e370      	b.n	80064e0 <_vsnprintf+0x9a0>
 8005dfe:	bf00      	nop
 8005e00:	08004cb1 	.word	0x08004cb1
 8005e04:	3b69      	subs	r3, #105	; 0x69
 8005e06:	2201      	movs	r2, #1
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	f249 0241 	movw	r2, #36929	; 0x9041
 8005e10:	401a      	ands	r2, r3
 8005e12:	2a00      	cmp	r2, #0
 8005e14:	bf14      	ite	ne
 8005e16:	2201      	movne	r2, #1
 8005e18:	2200      	moveq	r2, #0
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	2a00      	cmp	r2, #0
 8005e1e:	f040 80aa 	bne.w	8005f76 <_vsnprintf+0x436>
 8005e22:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8005e26:	2a00      	cmp	r2, #0
 8005e28:	bf14      	ite	ne
 8005e2a:	2201      	movne	r2, #1
 8005e2c:	2200      	moveq	r2, #0
 8005e2e:	b2d2      	uxtb	r2, r2
 8005e30:	2a00      	cmp	r2, #0
 8005e32:	f040 82fb 	bne.w	800642c <_vsnprintf+0x8ec>
 8005e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	bf14      	ite	ne
 8005e3e:	2301      	movne	r3, #1
 8005e40:	2300      	moveq	r3, #0
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f040 828d 	bne.w	8006364 <_vsnprintf+0x824>
 8005e4a:	e349      	b.n	80064e0 <_vsnprintf+0x9a0>
 8005e4c:	3b25      	subs	r3, #37	; 0x25
 8005e4e:	2b42      	cmp	r3, #66	; 0x42
 8005e50:	f200 8346 	bhi.w	80064e0 <_vsnprintf+0x9a0>
 8005e54:	a201      	add	r2, pc, #4	; (adr r2, 8005e5c <_vsnprintf+0x31c>)
 8005e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5a:	bf00      	nop
 8005e5c:	080064c9 	.word	0x080064c9
 8005e60:	080064e1 	.word	0x080064e1
 8005e64:	080064e1 	.word	0x080064e1
 8005e68:	080064e1 	.word	0x080064e1
 8005e6c:	080064e1 	.word	0x080064e1
 8005e70:	080064e1 	.word	0x080064e1
 8005e74:	080064e1 	.word	0x080064e1
 8005e78:	080064e1 	.word	0x080064e1
 8005e7c:	080064e1 	.word	0x080064e1
 8005e80:	080064e1 	.word	0x080064e1
 8005e84:	080064e1 	.word	0x080064e1
 8005e88:	080064e1 	.word	0x080064e1
 8005e8c:	080064e1 	.word	0x080064e1
 8005e90:	080064e1 	.word	0x080064e1
 8005e94:	080064e1 	.word	0x080064e1
 8005e98:	080064e1 	.word	0x080064e1
 8005e9c:	080064e1 	.word	0x080064e1
 8005ea0:	080064e1 	.word	0x080064e1
 8005ea4:	080064e1 	.word	0x080064e1
 8005ea8:	080064e1 	.word	0x080064e1
 8005eac:	080064e1 	.word	0x080064e1
 8005eb0:	080064e1 	.word	0x080064e1
 8005eb4:	080064e1 	.word	0x080064e1
 8005eb8:	080064e1 	.word	0x080064e1
 8005ebc:	080064e1 	.word	0x080064e1
 8005ec0:	080064e1 	.word	0x080064e1
 8005ec4:	080064e1 	.word	0x080064e1
 8005ec8:	080064e1 	.word	0x080064e1
 8005ecc:	080064e1 	.word	0x080064e1
 8005ed0:	080064e1 	.word	0x080064e1
 8005ed4:	080064e1 	.word	0x080064e1
 8005ed8:	080064e1 	.word	0x080064e1
 8005edc:	0800627d 	.word	0x0800627d
 8005ee0:	0800622d 	.word	0x0800622d
 8005ee4:	0800627d 	.word	0x0800627d
 8005ee8:	080064e1 	.word	0x080064e1
 8005eec:	080064e1 	.word	0x080064e1
 8005ef0:	080064e1 	.word	0x080064e1
 8005ef4:	080064e1 	.word	0x080064e1
 8005ef8:	080064e1 	.word	0x080064e1
 8005efc:	080064e1 	.word	0x080064e1
 8005f00:	080064e1 	.word	0x080064e1
 8005f04:	080064e1 	.word	0x080064e1
 8005f08:	080064e1 	.word	0x080064e1
 8005f0c:	080064e1 	.word	0x080064e1
 8005f10:	080064e1 	.word	0x080064e1
 8005f14:	080064e1 	.word	0x080064e1
 8005f18:	080064e1 	.word	0x080064e1
 8005f1c:	080064e1 	.word	0x080064e1
 8005f20:	080064e1 	.word	0x080064e1
 8005f24:	080064e1 	.word	0x080064e1
 8005f28:	08005f77 	.word	0x08005f77
 8005f2c:	080064e1 	.word	0x080064e1
 8005f30:	080064e1 	.word	0x080064e1
 8005f34:	080064e1 	.word	0x080064e1
 8005f38:	080064e1 	.word	0x080064e1
 8005f3c:	080064e1 	.word	0x080064e1
 8005f40:	080064e1 	.word	0x080064e1
 8005f44:	080064e1 	.word	0x080064e1
 8005f48:	080064e1 	.word	0x080064e1
 8005f4c:	080064e1 	.word	0x080064e1
 8005f50:	08005f77 	.word	0x08005f77
 8005f54:	080062ed 	.word	0x080062ed
 8005f58:	08005f77 	.word	0x08005f77
 8005f5c:	0800627d 	.word	0x0800627d
 8005f60:	0800622d 	.word	0x0800622d
 8005f64:	0800627d 	.word	0x0800627d
 8005f68:	2b78      	cmp	r3, #120	; 0x78
 8005f6a:	f300 82b9 	bgt.w	80064e0 <_vsnprintf+0x9a0>
 8005f6e:	2b69      	cmp	r3, #105	; 0x69
 8005f70:	f6bf af48 	bge.w	8005e04 <_vsnprintf+0x2c4>
 8005f74:	e2b4      	b.n	80064e0 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b78      	cmp	r3, #120	; 0x78
 8005f7c:	d003      	beq.n	8005f86 <_vsnprintf+0x446>
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	2b58      	cmp	r3, #88	; 0x58
 8005f84:	d102      	bne.n	8005f8c <_vsnprintf+0x44c>
          base = 16U;
 8005f86:	2310      	movs	r3, #16
 8005f88:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f8a:	e013      	b.n	8005fb4 <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b6f      	cmp	r3, #111	; 0x6f
 8005f92:	d102      	bne.n	8005f9a <_vsnprintf+0x45a>
          base =  8U;
 8005f94:	2308      	movs	r3, #8
 8005f96:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f98:	e00c      	b.n	8005fb4 <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b62      	cmp	r3, #98	; 0x62
 8005fa0:	d102      	bne.n	8005fa8 <_vsnprintf+0x468>
          base =  2U;
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fa6:	e005      	b.n	8005fb4 <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 8005fa8:	230a      	movs	r3, #10
 8005faa:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8005fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fae:	f023 0310 	bic.w	r3, r3, #16
 8005fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b58      	cmp	r3, #88	; 0x58
 8005fba:	d103      	bne.n	8005fc4 <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 8005fbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fbe:	f043 0320 	orr.w	r3, r3, #32
 8005fc2:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b69      	cmp	r3, #105	; 0x69
 8005fca:	d007      	beq.n	8005fdc <_vsnprintf+0x49c>
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2b64      	cmp	r3, #100	; 0x64
 8005fd2:	d003      	beq.n	8005fdc <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8005fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fd6:	f023 030c 	bic.w	r3, r3, #12
 8005fda:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8005fdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 8005fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fe8:	f023 0301 	bic.w	r3, r3, #1
 8005fec:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b69      	cmp	r3, #105	; 0x69
 8005ff4:	d004      	beq.n	8006000 <_vsnprintf+0x4c0>
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b64      	cmp	r3, #100	; 0x64
 8005ffc:	f040 8098 	bne.w	8006130 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8006000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006006:	2b00      	cmp	r3, #0
 8006008:	d031      	beq.n	800606e <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800600a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800600e:	3307      	adds	r3, #7
 8006010:	f023 0307 	bic.w	r3, r3, #7
 8006014:	f103 0208 	add.w	r2, r3, #8
 8006018:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8006024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006028:	2b00      	cmp	r3, #0
 800602a:	da06      	bge.n	800603a <_vsnprintf+0x4fa>
 800602c:	2100      	movs	r1, #0
 800602e:	f1d2 0800 	rsbs	r8, r2, #0
 8006032:	eb61 0903 	sbc.w	r9, r1, r3
 8006036:	4642      	mov	r2, r8
 8006038:	464b      	mov	r3, r9
 800603a:	69f9      	ldr	r1, [r7, #28]
 800603c:	0fc9      	lsrs	r1, r1, #31
 800603e:	b2c9      	uxtb	r1, r1
 8006040:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006042:	2400      	movs	r4, #0
 8006044:	4682      	mov	sl, r0
 8006046:	46a3      	mov	fp, r4
 8006048:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800604a:	9008      	str	r0, [sp, #32]
 800604c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800604e:	9007      	str	r0, [sp, #28]
 8006050:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006052:	9006      	str	r0, [sp, #24]
 8006054:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8006058:	9102      	str	r1, [sp, #8]
 800605a:	e9cd 2300 	strd	r2, r3, [sp]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006062:	6939      	ldr	r1, [r7, #16]
 8006064:	6978      	ldr	r0, [r7, #20]
 8006066:	f7ff f81b 	bl	80050a0 <_ntoa_long_long>
 800606a:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800606c:	e0da      	b.n	8006224 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800606e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006074:	2b00      	cmp	r3, #0
 8006076:	d020      	beq.n	80060ba <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 8006078:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800607c:	1d1a      	adds	r2, r3, #4
 800607e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	2b00      	cmp	r3, #0
 800608a:	bfb8      	it	lt
 800608c:	425b      	neglt	r3, r3
 800608e:	4619      	mov	r1, r3
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	0fdb      	lsrs	r3, r3, #31
 8006094:	b2db      	uxtb	r3, r3
 8006096:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006098:	9205      	str	r2, [sp, #20]
 800609a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800609c:	9204      	str	r2, [sp, #16]
 800609e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060a0:	9203      	str	r2, [sp, #12]
 80060a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060a4:	9202      	str	r2, [sp, #8]
 80060a6:	9301      	str	r3, [sp, #4]
 80060a8:	9100      	str	r1, [sp, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060ae:	6939      	ldr	r1, [r7, #16]
 80060b0:	6978      	ldr	r0, [r7, #20]
 80060b2:	f7fe ff8f 	bl	8004fd4 <_ntoa_long>
 80060b6:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80060b8:	e0b4      	b.n	8006224 <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80060ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d007      	beq.n	80060d4 <_vsnprintf+0x594>
 80060c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060c8:	1d1a      	adds	r2, r3, #4
 80060ca:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	e012      	b.n	80060fa <_vsnprintf+0x5ba>
 80060d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d007      	beq.n	80060ee <_vsnprintf+0x5ae>
 80060de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060e2:	1d1a      	adds	r2, r3, #4
 80060e4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	b21b      	sxth	r3, r3
 80060ec:	e005      	b.n	80060fa <_vsnprintf+0x5ba>
 80060ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060f2:	1d1a      	adds	r2, r3, #4
 80060f4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	2b00      	cmp	r3, #0
 8006100:	bfb8      	it	lt
 8006102:	425b      	neglt	r3, r3
 8006104:	4619      	mov	r1, r3
 8006106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006108:	0fdb      	lsrs	r3, r3, #31
 800610a:	b2db      	uxtb	r3, r3
 800610c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800610e:	9205      	str	r2, [sp, #20]
 8006110:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006112:	9204      	str	r2, [sp, #16]
 8006114:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006116:	9203      	str	r2, [sp, #12]
 8006118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800611a:	9202      	str	r2, [sp, #8]
 800611c:	9301      	str	r3, [sp, #4]
 800611e:	9100      	str	r1, [sp, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006124:	6939      	ldr	r1, [r7, #16]
 8006126:	6978      	ldr	r0, [r7, #20]
 8006128:	f7fe ff54 	bl	8004fd4 <_ntoa_long>
 800612c:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800612e:	e079      	b.n	8006224 <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8006130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006136:	2b00      	cmp	r3, #0
 8006138:	d022      	beq.n	8006180 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800613a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800613e:	3307      	adds	r3, #7
 8006140:	f023 0307 	bic.w	r3, r3, #7
 8006144:	f103 0208 	add.w	r2, r3, #8
 8006148:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006150:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006152:	2000      	movs	r0, #0
 8006154:	460d      	mov	r5, r1
 8006156:	4606      	mov	r6, r0
 8006158:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800615a:	9108      	str	r1, [sp, #32]
 800615c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800615e:	9107      	str	r1, [sp, #28]
 8006160:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006162:	9106      	str	r1, [sp, #24]
 8006164:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8006168:	2100      	movs	r1, #0
 800616a:	9102      	str	r1, [sp, #8]
 800616c:	e9cd 2300 	strd	r2, r3, [sp]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006174:	6939      	ldr	r1, [r7, #16]
 8006176:	6978      	ldr	r0, [r7, #20]
 8006178:	f7fe ff92 	bl	80050a0 <_ntoa_long_long>
 800617c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800617e:	e051      	b.n	8006224 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8006180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006186:	2b00      	cmp	r3, #0
 8006188:	d018      	beq.n	80061bc <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800618a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800618e:	1d1a      	adds	r2, r3, #4
 8006190:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006198:	9205      	str	r2, [sp, #20]
 800619a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800619c:	9204      	str	r2, [sp, #16]
 800619e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061a0:	9203      	str	r2, [sp, #12]
 80061a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061a4:	9202      	str	r2, [sp, #8]
 80061a6:	2200      	movs	r2, #0
 80061a8:	9201      	str	r2, [sp, #4]
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061b0:	6939      	ldr	r1, [r7, #16]
 80061b2:	6978      	ldr	r0, [r7, #20]
 80061b4:	f7fe ff0e 	bl	8004fd4 <_ntoa_long>
 80061b8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80061ba:	e033      	b.n	8006224 <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80061bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d007      	beq.n	80061d6 <_vsnprintf+0x696>
 80061c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061ca:	1d1a      	adds	r2, r3, #4
 80061cc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	e012      	b.n	80061fc <_vsnprintf+0x6bc>
 80061d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d007      	beq.n	80061f0 <_vsnprintf+0x6b0>
 80061e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061e4:	1d1a      	adds	r2, r3, #4
 80061e6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	e005      	b.n	80061fc <_vsnprintf+0x6bc>
 80061f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061f4:	1d1a      	adds	r2, r3, #4
 80061f6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80061fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006200:	9305      	str	r3, [sp, #20]
 8006202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006204:	9304      	str	r3, [sp, #16]
 8006206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006208:	9303      	str	r3, [sp, #12]
 800620a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800620c:	9302      	str	r3, [sp, #8]
 800620e:	2300      	movs	r3, #0
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800621a:	6939      	ldr	r1, [r7, #16]
 800621c:	6978      	ldr	r0, [r7, #20]
 800621e:	f7fe fed9 	bl	8004fd4 <_ntoa_long>
 8006222:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	3301      	adds	r3, #1
 8006228:	60bb      	str	r3, [r7, #8]
        break;
 800622a:	e166      	b.n	80064fa <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b46      	cmp	r3, #70	; 0x46
 8006232:	d103      	bne.n	800623c <_vsnprintf+0x6fc>
 8006234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006236:	f043 0320 	orr.w	r3, r3, #32
 800623a:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800623c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006240:	3307      	adds	r3, #7
 8006242:	f023 0307 	bic.w	r3, r3, #7
 8006246:	f103 0208 	add.w	r2, r3, #8
 800624a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800624e:	ed93 7b00 	vldr	d7, [r3]
 8006252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006254:	9302      	str	r3, [sp, #8]
 8006256:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006258:	9301      	str	r3, [sp, #4]
 800625a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	eeb0 0a47 	vmov.f32	s0, s14
 8006262:	eef0 0a67 	vmov.f32	s1, s15
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800626a:	6939      	ldr	r1, [r7, #16]
 800626c:	6978      	ldr	r0, [r7, #20]
 800626e:	f7fe ff87 	bl	8005180 <_ftoa>
 8006272:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	3301      	adds	r3, #1
 8006278:	60bb      	str	r3, [r7, #8]
        break;
 800627a:	e13e      	b.n	80064fa <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b67      	cmp	r3, #103	; 0x67
 8006282:	d003      	beq.n	800628c <_vsnprintf+0x74c>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b47      	cmp	r3, #71	; 0x47
 800628a:	d103      	bne.n	8006294 <_vsnprintf+0x754>
 800628c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800628e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006292:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	2b45      	cmp	r3, #69	; 0x45
 800629a:	d003      	beq.n	80062a4 <_vsnprintf+0x764>
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b47      	cmp	r3, #71	; 0x47
 80062a2:	d103      	bne.n	80062ac <_vsnprintf+0x76c>
 80062a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062a6:	f043 0320 	orr.w	r3, r3, #32
 80062aa:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80062ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062b0:	3307      	adds	r3, #7
 80062b2:	f023 0307 	bic.w	r3, r3, #7
 80062b6:	f103 0208 	add.w	r2, r3, #8
 80062ba:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80062be:	ed93 7b00 	vldr	d7, [r3]
 80062c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062c4:	9302      	str	r3, [sp, #8]
 80062c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062c8:	9301      	str	r3, [sp, #4]
 80062ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	eeb0 0a47 	vmov.f32	s0, s14
 80062d2:	eef0 0a67 	vmov.f32	s1, s15
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062da:	6939      	ldr	r1, [r7, #16]
 80062dc:	6978      	ldr	r0, [r7, #20]
 80062de:	f7ff f9a7 	bl	8005630 <_etoa>
 80062e2:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	3301      	adds	r3, #1
 80062e8:	60bb      	str	r3, [r7, #8]
        break;
 80062ea:	e106      	b.n	80064fa <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80062ec:	2301      	movs	r3, #1
 80062ee:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80062f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10e      	bne.n	8006318 <_vsnprintf+0x7d8>
          while (l++ < width) {
 80062fa:	e007      	b.n	800630c <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 80062fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062fe:	1c53      	adds	r3, r2, #1
 8006300:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006302:	697c      	ldr	r4, [r7, #20]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6939      	ldr	r1, [r7, #16]
 8006308:	2020      	movs	r0, #32
 800630a:	47a0      	blx	r4
          while (l++ < width) {
 800630c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	647a      	str	r2, [r7, #68]	; 0x44
 8006312:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006314:	429a      	cmp	r2, r3
 8006316:	d8f1      	bhi.n	80062fc <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8006318:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800631c:	1d1a      	adds	r2, r3, #4
 800631e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	b2d8      	uxtb	r0, r3
 8006326:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006328:	1c53      	adds	r3, r2, #1
 800632a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800632c:	697c      	ldr	r4, [r7, #20]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6939      	ldr	r1, [r7, #16]
 8006332:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8006334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00e      	beq.n	800635c <_vsnprintf+0x81c>
          while (l++ < width) {
 800633e:	e007      	b.n	8006350 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8006340:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006342:	1c53      	adds	r3, r2, #1
 8006344:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006346:	697c      	ldr	r4, [r7, #20]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6939      	ldr	r1, [r7, #16]
 800634c:	2020      	movs	r0, #32
 800634e:	47a0      	blx	r4
          while (l++ < width) {
 8006350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	647a      	str	r2, [r7, #68]	; 0x44
 8006356:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006358:	429a      	cmp	r2, r3
 800635a:	d8f1      	bhi.n	8006340 <_vsnprintf+0x800>
          }
        }
        format++;
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	3301      	adds	r3, #1
 8006360:	60bb      	str	r3, [r7, #8]
        break;
 8006362:	e0ca      	b.n	80064fa <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8006364:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006368:	1d1a      	adds	r2, r3, #4
 800636a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8006372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <_vsnprintf+0x83c>
 8006378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800637a:	e001      	b.n	8006380 <_vsnprintf+0x840>
 800637c:	f04f 33ff 	mov.w	r3, #4294967295
 8006380:	4619      	mov	r1, r3
 8006382:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006384:	f7fe fca2 	bl	8004ccc <_strnlen_s>
 8006388:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800638a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800638c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 8006394:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006398:	4293      	cmp	r3, r2
 800639a:	bf28      	it	cs
 800639c:	4613      	movcs	r3, r2
 800639e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 80063a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d11a      	bne.n	80063e0 <_vsnprintf+0x8a0>
          while (l++ < width) {
 80063aa:	e007      	b.n	80063bc <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 80063ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063ae:	1c53      	adds	r3, r2, #1
 80063b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b2:	697c      	ldr	r4, [r7, #20]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6939      	ldr	r1, [r7, #16]
 80063b8:	2020      	movs	r0, #32
 80063ba:	47a0      	blx	r4
          while (l++ < width) {
 80063bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80063c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d8f1      	bhi.n	80063ac <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80063c8:	e00a      	b.n	80063e0 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 80063ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	643a      	str	r2, [r7, #64]	; 0x40
 80063d0:	7818      	ldrb	r0, [r3, #0]
 80063d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063d4:	1c53      	adds	r3, r2, #1
 80063d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d8:	697c      	ldr	r4, [r7, #20]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6939      	ldr	r1, [r7, #16]
 80063de:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80063e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d009      	beq.n	80063fc <_vsnprintf+0x8bc>
 80063e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0eb      	beq.n	80063ca <_vsnprintf+0x88a>
 80063f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063f4:	1e5a      	subs	r2, r3, #1
 80063f6:	657a      	str	r2, [r7, #84]	; 0x54
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e6      	bne.n	80063ca <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80063fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063fe:	f003 0302 	and.w	r3, r3, #2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00e      	beq.n	8006424 <_vsnprintf+0x8e4>
          while (l++ < width) {
 8006406:	e007      	b.n	8006418 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8006408:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800640a:	1c53      	adds	r3, r2, #1
 800640c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800640e:	697c      	ldr	r4, [r7, #20]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6939      	ldr	r1, [r7, #16]
 8006414:	2020      	movs	r0, #32
 8006416:	47a0      	blx	r4
          while (l++ < width) {
 8006418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800641e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006420:	429a      	cmp	r2, r3
 8006422:	d8f1      	bhi.n	8006408 <_vsnprintf+0x8c8>
          }
        }
        format++;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	3301      	adds	r3, #1
 8006428:	60bb      	str	r3, [r7, #8]
        break;
 800642a:	e066      	b.n	80064fa <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800642c:	2308      	movs	r3, #8
 800642e:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8006430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006432:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8006436:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8006438:	2300      	movs	r3, #0
 800643a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 800643e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006442:	2b00      	cmp	r3, #0
 8006444:	d023      	beq.n	800648e <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8006446:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800644a:	1d1a      	adds	r2, r3, #4
 800644c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	2300      	movs	r3, #0
 8006456:	603a      	str	r2, [r7, #0]
 8006458:	607b      	str	r3, [r7, #4]
 800645a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800645c:	9308      	str	r3, [sp, #32]
 800645e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006460:	9307      	str	r3, [sp, #28]
 8006462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006464:	9306      	str	r3, [sp, #24]
 8006466:	f04f 0210 	mov.w	r2, #16
 800646a:	f04f 0300 	mov.w	r3, #0
 800646e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006472:	2300      	movs	r3, #0
 8006474:	9302      	str	r3, [sp, #8]
 8006476:	e9d7 3400 	ldrd	r3, r4, [r7]
 800647a:	e9cd 3400 	strd	r3, r4, [sp]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006482:	6939      	ldr	r1, [r7, #16]
 8006484:	6978      	ldr	r0, [r7, #20]
 8006486:	f7fe fe0b 	bl	80050a0 <_ntoa_long_long>
 800648a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800648c:	e018      	b.n	80064c0 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800648e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006492:	1d1a      	adds	r2, r3, #4
 8006494:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800649e:	9305      	str	r3, [sp, #20]
 80064a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064a2:	9304      	str	r3, [sp, #16]
 80064a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064a6:	9303      	str	r3, [sp, #12]
 80064a8:	2310      	movs	r3, #16
 80064aa:	9302      	str	r3, [sp, #8]
 80064ac:	2300      	movs	r3, #0
 80064ae:	9301      	str	r3, [sp, #4]
 80064b0:	9200      	str	r2, [sp, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064b6:	6939      	ldr	r1, [r7, #16]
 80064b8:	6978      	ldr	r0, [r7, #20]
 80064ba:	f7fe fd8b 	bl	8004fd4 <_ntoa_long>
 80064be:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	3301      	adds	r3, #1
 80064c4:	60bb      	str	r3, [r7, #8]
        break;
 80064c6:	e018      	b.n	80064fa <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80064c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064ca:	1c53      	adds	r3, r2, #1
 80064cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064ce:	697c      	ldr	r4, [r7, #20]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6939      	ldr	r1, [r7, #16]
 80064d4:	2025      	movs	r0, #37	; 0x25
 80064d6:	47a0      	blx	r4
        format++;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	3301      	adds	r3, #1
 80064dc:	60bb      	str	r3, [r7, #8]
        break;
 80064de:	e00c      	b.n	80064fa <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	7818      	ldrb	r0, [r3, #0]
 80064e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064e6:	1c53      	adds	r3, r2, #1
 80064e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064ea:	697c      	ldr	r4, [r7, #20]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6939      	ldr	r1, [r7, #16]
 80064f0:	47a0      	blx	r4
        format++;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	3301      	adds	r3, #1
 80064f6:	60bb      	str	r3, [r7, #8]
        break;
 80064f8:	bf00      	nop
  while (*format)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f47f ab30 	bne.w	8005b64 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8006504:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	429a      	cmp	r2, r3
 800650a:	d302      	bcc.n	8006512 <_vsnprintf+0x9d2>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	1e5a      	subs	r2, r3, #1
 8006510:	e000      	b.n	8006514 <_vsnprintf+0x9d4>
 8006512:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006514:	697c      	ldr	r4, [r7, #20]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6939      	ldr	r1, [r7, #16]
 800651a:	2000      	movs	r0, #0
 800651c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800651e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006520:	4618      	mov	r0, r3
 8006522:	3764      	adds	r7, #100	; 0x64
 8006524:	46bd      	mov	sp, r7
 8006526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652a:	bf00      	nop

0800652c <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 800652c:	b40e      	push	{r1, r2, r3}
 800652e:	b580      	push	{r7, lr}
 8006530:	b087      	sub	sp, #28
 8006532:	af02      	add	r7, sp, #8
 8006534:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8006536:	f107 0320 	add.w	r3, r7, #32
 800653a:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	f04f 32ff 	mov.w	r2, #4294967295
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	4805      	ldr	r0, [pc, #20]	; (8006560 <sprintf_+0x34>)
 800654a:	f7ff faf9 	bl	8005b40 <_vsnprintf>
 800654e:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8006550:	68fb      	ldr	r3, [r7, #12]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800655c:	b003      	add	sp, #12
 800655e:	4770      	bx	lr
 8006560:	08004c83 	.word	0x08004c83

08006564 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800656a:	4b11      	ldr	r3, [pc, #68]	; (80065b0 <HAL_MspInit+0x4c>)
 800656c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656e:	4a10      	ldr	r2, [pc, #64]	; (80065b0 <HAL_MspInit+0x4c>)
 8006570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006574:	6413      	str	r3, [r2, #64]	; 0x40
 8006576:	4b0e      	ldr	r3, [pc, #56]	; (80065b0 <HAL_MspInit+0x4c>)
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800657e:	607b      	str	r3, [r7, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006582:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <HAL_MspInit+0x4c>)
 8006584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006586:	4a0a      	ldr	r2, [pc, #40]	; (80065b0 <HAL_MspInit+0x4c>)
 8006588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800658c:	6453      	str	r3, [r2, #68]	; 0x44
 800658e:	4b08      	ldr	r3, [pc, #32]	; (80065b0 <HAL_MspInit+0x4c>)
 8006590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800659a:	2200      	movs	r2, #0
 800659c:	210f      	movs	r1, #15
 800659e:	f06f 0001 	mvn.w	r0, #1
 80065a2:	f004 fc2f 	bl	800ae04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80065a6:	bf00      	nop
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	40023800 	.word	0x40023800

080065b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b0aa      	sub	sp, #168	; 0xa8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80065c0:	2200      	movs	r2, #0
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	605a      	str	r2, [r3, #4]
 80065c6:	609a      	str	r2, [r3, #8]
 80065c8:	60da      	str	r2, [r3, #12]
 80065ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80065cc:	f107 0314 	add.w	r3, r7, #20
 80065d0:	2280      	movs	r2, #128	; 0x80
 80065d2:	2100      	movs	r1, #0
 80065d4:	4618      	mov	r0, r3
 80065d6:	f00e ffe2 	bl	801559e <memset>
  if(hi2c->Instance==I2C1)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a22      	ldr	r2, [pc, #136]	; (8006668 <HAL_I2C_MspInit+0xb4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d13c      	bne.n	800665e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80065e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80065e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80065ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80065ee:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065f0:	f107 0314 	add.w	r3, r7, #20
 80065f4:	4618      	mov	r0, r3
 80065f6:	f006 fceb 	bl	800cfd0 <HAL_RCCEx_PeriphCLKConfig>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8006600:	f7fe fb3a 	bl	8004c78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006604:	4b19      	ldr	r3, [pc, #100]	; (800666c <HAL_I2C_MspInit+0xb8>)
 8006606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006608:	4a18      	ldr	r2, [pc, #96]	; (800666c <HAL_I2C_MspInit+0xb8>)
 800660a:	f043 0302 	orr.w	r3, r3, #2
 800660e:	6313      	str	r3, [r2, #48]	; 0x30
 8006610:	4b16      	ldr	r3, [pc, #88]	; (800666c <HAL_I2C_MspInit+0xb8>)
 8006612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	613b      	str	r3, [r7, #16]
 800661a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_MAG_SCL_Pin|I2C1_MAG_SDA_Pin;
 800661c:	23c0      	movs	r3, #192	; 0xc0
 800661e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006622:	2312      	movs	r3, #18
 8006624:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006628:	2300      	movs	r3, #0
 800662a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800662e:	2303      	movs	r3, #3
 8006630:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006634:	2304      	movs	r3, #4
 8006636:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800663a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800663e:	4619      	mov	r1, r3
 8006640:	480b      	ldr	r0, [pc, #44]	; (8006670 <HAL_I2C_MspInit+0xbc>)
 8006642:	f005 f813 	bl	800b66c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006646:	4b09      	ldr	r3, [pc, #36]	; (800666c <HAL_I2C_MspInit+0xb8>)
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	4a08      	ldr	r2, [pc, #32]	; (800666c <HAL_I2C_MspInit+0xb8>)
 800664c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006650:	6413      	str	r3, [r2, #64]	; 0x40
 8006652:	4b06      	ldr	r3, [pc, #24]	; (800666c <HAL_I2C_MspInit+0xb8>)
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800665e:	bf00      	nop
 8006660:	37a8      	adds	r7, #168	; 0xa8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	40005400 	.word	0x40005400
 800666c:	40023800 	.word	0x40023800
 8006670:	40020400 	.word	0x40020400

08006674 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b08c      	sub	sp, #48	; 0x30
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800667c:	f107 031c 	add.w	r3, r7, #28
 8006680:	2200      	movs	r2, #0
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	605a      	str	r2, [r3, #4]
 8006686:	609a      	str	r2, [r3, #8]
 8006688:	60da      	str	r2, [r3, #12]
 800668a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a2e      	ldr	r2, [pc, #184]	; (800674c <HAL_SPI_MspInit+0xd8>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d128      	bne.n	80066e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006696:	4b2e      	ldr	r3, [pc, #184]	; (8006750 <HAL_SPI_MspInit+0xdc>)
 8006698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669a:	4a2d      	ldr	r2, [pc, #180]	; (8006750 <HAL_SPI_MspInit+0xdc>)
 800669c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80066a0:	6453      	str	r3, [r2, #68]	; 0x44
 80066a2:	4b2b      	ldr	r3, [pc, #172]	; (8006750 <HAL_SPI_MspInit+0xdc>)
 80066a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066aa:	61bb      	str	r3, [r7, #24]
 80066ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066ae:	4b28      	ldr	r3, [pc, #160]	; (8006750 <HAL_SPI_MspInit+0xdc>)
 80066b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b2:	4a27      	ldr	r2, [pc, #156]	; (8006750 <HAL_SPI_MspInit+0xdc>)
 80066b4:	f043 0301 	orr.w	r3, r3, #1
 80066b8:	6313      	str	r3, [r2, #48]	; 0x30
 80066ba:	4b25      	ldr	r3, [pc, #148]	; (8006750 <HAL_SPI_MspInit+0xdc>)
 80066bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_ESP_NSS_Pin|SPI1_ESP_SCK_Pin|SPI1_ESP_MISO_Pin|SPI1_ESP_MOSI_Pin;
 80066c6:	23f0      	movs	r3, #240	; 0xf0
 80066c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066ca:	2302      	movs	r3, #2
 80066cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ce:	2300      	movs	r3, #0
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066d2:	2303      	movs	r3, #3
 80066d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80066d6:	2305      	movs	r3, #5
 80066d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066da:	f107 031c 	add.w	r3, r7, #28
 80066de:	4619      	mov	r1, r3
 80066e0:	481c      	ldr	r0, [pc, #112]	; (8006754 <HAL_SPI_MspInit+0xe0>)
 80066e2:	f004 ffc3 	bl	800b66c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80066e6:	e02d      	b.n	8006744 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI2)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a1a      	ldr	r2, [pc, #104]	; (8006758 <HAL_SPI_MspInit+0xe4>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d128      	bne.n	8006744 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80066f2:	4b17      	ldr	r3, [pc, #92]	; (8006750 <HAL_SPI_MspInit+0xdc>)
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	4a16      	ldr	r2, [pc, #88]	; (8006750 <HAL_SPI_MspInit+0xdc>)
 80066f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066fc:	6413      	str	r3, [r2, #64]	; 0x40
 80066fe:	4b14      	ldr	r3, [pc, #80]	; (8006750 <HAL_SPI_MspInit+0xdc>)
 8006700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006706:	613b      	str	r3, [r7, #16]
 8006708:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800670a:	4b11      	ldr	r3, [pc, #68]	; (8006750 <HAL_SPI_MspInit+0xdc>)
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	4a10      	ldr	r2, [pc, #64]	; (8006750 <HAL_SPI_MspInit+0xdc>)
 8006710:	f043 0302 	orr.w	r3, r3, #2
 8006714:	6313      	str	r3, [r2, #48]	; 0x30
 8006716:	4b0e      	ldr	r3, [pc, #56]	; (8006750 <HAL_SPI_MspInit+0xdc>)
 8006718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_IMU_SCK_Pin|SPI2_IMU_MISO_Pin|SPI2_IMU_MOSI_Pin;
 8006722:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006728:	2302      	movs	r3, #2
 800672a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800672c:	2300      	movs	r3, #0
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006730:	2303      	movs	r3, #3
 8006732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006734:	2305      	movs	r3, #5
 8006736:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006738:	f107 031c 	add.w	r3, r7, #28
 800673c:	4619      	mov	r1, r3
 800673e:	4807      	ldr	r0, [pc, #28]	; (800675c <HAL_SPI_MspInit+0xe8>)
 8006740:	f004 ff94 	bl	800b66c <HAL_GPIO_Init>
}
 8006744:	bf00      	nop
 8006746:	3730      	adds	r7, #48	; 0x30
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	40013000 	.word	0x40013000
 8006750:	40023800 	.word	0x40023800
 8006754:	40020000 	.word	0x40020000
 8006758:	40003800 	.word	0x40003800
 800675c:	40020400 	.word	0x40020400

08006760 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a0a      	ldr	r2, [pc, #40]	; (8006798 <HAL_TIM_Base_MspInit+0x38>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d10b      	bne.n	800678a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006772:	4b0a      	ldr	r3, [pc, #40]	; (800679c <HAL_TIM_Base_MspInit+0x3c>)
 8006774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006776:	4a09      	ldr	r2, [pc, #36]	; (800679c <HAL_TIM_Base_MspInit+0x3c>)
 8006778:	f043 0301 	orr.w	r3, r3, #1
 800677c:	6453      	str	r3, [r2, #68]	; 0x44
 800677e:	4b07      	ldr	r3, [pc, #28]	; (800679c <HAL_TIM_Base_MspInit+0x3c>)
 8006780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800678a:	bf00      	nop
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	40010000 	.word	0x40010000
 800679c:	40023800 	.word	0x40023800

080067a0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08a      	sub	sp, #40	; 0x28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067a8:	f107 0314 	add.w	r3, r7, #20
 80067ac:	2200      	movs	r2, #0
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	605a      	str	r2, [r3, #4]
 80067b2:	609a      	str	r2, [r3, #8]
 80067b4:	60da      	str	r2, [r3, #12]
 80067b6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a1b      	ldr	r2, [pc, #108]	; (800682c <HAL_TIM_IC_MspInit+0x8c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d12f      	bne.n	8006822 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80067c2:	4b1b      	ldr	r3, [pc, #108]	; (8006830 <HAL_TIM_IC_MspInit+0x90>)
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	4a1a      	ldr	r2, [pc, #104]	; (8006830 <HAL_TIM_IC_MspInit+0x90>)
 80067c8:	f043 0302 	orr.w	r3, r3, #2
 80067cc:	6413      	str	r3, [r2, #64]	; 0x40
 80067ce:	4b18      	ldr	r3, [pc, #96]	; (8006830 <HAL_TIM_IC_MspInit+0x90>)
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	613b      	str	r3, [r7, #16]
 80067d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067da:	4b15      	ldr	r3, [pc, #84]	; (8006830 <HAL_TIM_IC_MspInit+0x90>)
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	4a14      	ldr	r2, [pc, #80]	; (8006830 <HAL_TIM_IC_MspInit+0x90>)
 80067e0:	f043 0304 	orr.w	r3, r3, #4
 80067e4:	6313      	str	r3, [r2, #48]	; 0x30
 80067e6:	4b12      	ldr	r3, [pc, #72]	; (8006830 <HAL_TIM_IC_MspInit+0x90>)
 80067e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_DIS_ECHO_CH1_Pin;
 80067f2:	2340      	movs	r3, #64	; 0x40
 80067f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067f6:	2302      	movs	r3, #2
 80067f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067fa:	2300      	movs	r3, #0
 80067fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067fe:	2300      	movs	r3, #0
 8006800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006802:	2302      	movs	r3, #2
 8006804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM3_DIS_ECHO_CH1_GPIO_Port, &GPIO_InitStruct);
 8006806:	f107 0314 	add.w	r3, r7, #20
 800680a:	4619      	mov	r1, r3
 800680c:	4809      	ldr	r0, [pc, #36]	; (8006834 <HAL_TIM_IC_MspInit+0x94>)
 800680e:	f004 ff2d 	bl	800b66c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8006812:	2200      	movs	r2, #0
 8006814:	2106      	movs	r1, #6
 8006816:	201d      	movs	r0, #29
 8006818:	f004 faf4 	bl	800ae04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800681c:	201d      	movs	r0, #29
 800681e:	f004 fb0d 	bl	800ae3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006822:	bf00      	nop
 8006824:	3728      	adds	r7, #40	; 0x28
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	40000400 	.word	0x40000400
 8006830:	40023800 	.word	0x40023800
 8006834:	40020800 	.word	0x40020800

08006838 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b088      	sub	sp, #32
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006840:	f107 030c 	add.w	r3, r7, #12
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	605a      	str	r2, [r3, #4]
 800684a:	609a      	str	r2, [r3, #8]
 800684c:	60da      	str	r2, [r3, #12]
 800684e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a11      	ldr	r2, [pc, #68]	; (800689c <HAL_TIM_MspPostInit+0x64>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d11c      	bne.n	8006894 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800685a:	4b11      	ldr	r3, [pc, #68]	; (80068a0 <HAL_TIM_MspPostInit+0x68>)
 800685c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685e:	4a10      	ldr	r2, [pc, #64]	; (80068a0 <HAL_TIM_MspPostInit+0x68>)
 8006860:	f043 0310 	orr.w	r3, r3, #16
 8006864:	6313      	str	r3, [r2, #48]	; 0x30
 8006866:	4b0e      	ldr	r3, [pc, #56]	; (80068a0 <HAL_TIM_MspPostInit+0x68>)
 8006868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686a:	f003 0310 	and.w	r3, r3, #16
 800686e:	60bb      	str	r3, [r7, #8]
 8006870:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_ESC1_CH1_Pin|TIM1_ESC2_CH2_Pin|TIM1_ESC3_CH3_Pin|TIM1_ESC4_CH4_Pin;
 8006872:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8006876:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006878:	2302      	movs	r3, #2
 800687a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800687c:	2300      	movs	r3, #0
 800687e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006880:	2300      	movs	r3, #0
 8006882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006884:	2301      	movs	r3, #1
 8006886:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006888:	f107 030c 	add.w	r3, r7, #12
 800688c:	4619      	mov	r1, r3
 800688e:	4805      	ldr	r0, [pc, #20]	; (80068a4 <HAL_TIM_MspPostInit+0x6c>)
 8006890:	f004 feec 	bl	800b66c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006894:	bf00      	nop
 8006896:	3720      	adds	r7, #32
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	40010000 	.word	0x40010000
 80068a0:	40023800 	.word	0x40023800
 80068a4:	40021000 	.word	0x40021000

080068a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b0ae      	sub	sp, #184	; 0xb8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80068b4:	2200      	movs	r2, #0
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	605a      	str	r2, [r3, #4]
 80068ba:	609a      	str	r2, [r3, #8]
 80068bc:	60da      	str	r2, [r3, #12]
 80068be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80068c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068c4:	2280      	movs	r2, #128	; 0x80
 80068c6:	2100      	movs	r1, #0
 80068c8:	4618      	mov	r0, r3
 80068ca:	f00e fe68 	bl	801559e <memset>
  if(huart->Instance==UART4)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a83      	ldr	r2, [pc, #524]	; (8006ae0 <HAL_UART_MspInit+0x238>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d144      	bne.n	8006962 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80068d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068dc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 80068de:	2340      	movs	r3, #64	; 0x40
 80068e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80068e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068e6:	4618      	mov	r0, r3
 80068e8:	f006 fb72 	bl	800cfd0 <HAL_RCCEx_PeriphCLKConfig>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80068f2:	f7fe f9c1 	bl	8004c78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80068f6:	4b7b      	ldr	r3, [pc, #492]	; (8006ae4 <HAL_UART_MspInit+0x23c>)
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	4a7a      	ldr	r2, [pc, #488]	; (8006ae4 <HAL_UART_MspInit+0x23c>)
 80068fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006900:	6413      	str	r3, [r2, #64]	; 0x40
 8006902:	4b78      	ldr	r3, [pc, #480]	; (8006ae4 <HAL_UART_MspInit+0x23c>)
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800690a:	623b      	str	r3, [r7, #32]
 800690c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800690e:	4b75      	ldr	r3, [pc, #468]	; (8006ae4 <HAL_UART_MspInit+0x23c>)
 8006910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006912:	4a74      	ldr	r2, [pc, #464]	; (8006ae4 <HAL_UART_MspInit+0x23c>)
 8006914:	f043 0301 	orr.w	r3, r3, #1
 8006918:	6313      	str	r3, [r2, #48]	; 0x30
 800691a:	4b72      	ldr	r3, [pc, #456]	; (8006ae4 <HAL_UART_MspInit+0x23c>)
 800691c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	61fb      	str	r3, [r7, #28]
 8006924:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_GPS_TX_Pin|UART4_GPS_RX_Pin;
 8006926:	2303      	movs	r3, #3
 8006928:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800692c:	2302      	movs	r3, #2
 800692e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006932:	2300      	movs	r3, #0
 8006934:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006938:	2303      	movs	r3, #3
 800693a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800693e:	2308      	movs	r3, #8
 8006940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006944:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006948:	4619      	mov	r1, r3
 800694a:	4867      	ldr	r0, [pc, #412]	; (8006ae8 <HAL_UART_MspInit+0x240>)
 800694c:	f004 fe8e 	bl	800b66c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8006950:	2200      	movs	r2, #0
 8006952:	2106      	movs	r1, #6
 8006954:	2034      	movs	r0, #52	; 0x34
 8006956:	f004 fa55 	bl	800ae04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800695a:	2034      	movs	r0, #52	; 0x34
 800695c:	f004 fa6e 	bl	800ae3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006960:	e0b9      	b.n	8006ad6 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART2)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a61      	ldr	r2, [pc, #388]	; (8006aec <HAL_UART_MspInit+0x244>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d172      	bne.n	8006a52 <HAL_UART_MspInit+0x1aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800696c:	2380      	movs	r3, #128	; 0x80
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8006970:	2304      	movs	r3, #4
 8006972:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006978:	4618      	mov	r0, r3
 800697a:	f006 fb29 	bl	800cfd0 <HAL_RCCEx_PeriphCLKConfig>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8006984:	f7fe f978 	bl	8004c78 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006988:	4b56      	ldr	r3, [pc, #344]	; (8006ae4 <HAL_UART_MspInit+0x23c>)
 800698a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698c:	4a55      	ldr	r2, [pc, #340]	; (8006ae4 <HAL_UART_MspInit+0x23c>)
 800698e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006992:	6413      	str	r3, [r2, #64]	; 0x40
 8006994:	4b53      	ldr	r3, [pc, #332]	; (8006ae4 <HAL_UART_MspInit+0x23c>)
 8006996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800699c:	61bb      	str	r3, [r7, #24]
 800699e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80069a0:	4b50      	ldr	r3, [pc, #320]	; (8006ae4 <HAL_UART_MspInit+0x23c>)
 80069a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a4:	4a4f      	ldr	r2, [pc, #316]	; (8006ae4 <HAL_UART_MspInit+0x23c>)
 80069a6:	f043 0308 	orr.w	r3, r3, #8
 80069aa:	6313      	str	r3, [r2, #48]	; 0x30
 80069ac:	4b4d      	ldr	r3, [pc, #308]	; (8006ae4 <HAL_UART_MspInit+0x23c>)
 80069ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b0:	f003 0308 	and.w	r3, r3, #8
 80069b4:	617b      	str	r3, [r7, #20]
 80069b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_IBUS_TX_Pin|UART2_IBUS_RX_Pin;
 80069b8:	2360      	movs	r3, #96	; 0x60
 80069ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069be:	2302      	movs	r3, #2
 80069c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c4:	2300      	movs	r3, #0
 80069c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069ca:	2303      	movs	r3, #3
 80069cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80069d0:	2307      	movs	r3, #7
 80069d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80069da:	4619      	mov	r1, r3
 80069dc:	4844      	ldr	r0, [pc, #272]	; (8006af0 <HAL_UART_MspInit+0x248>)
 80069de:	f004 fe45 	bl	800b66c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80069e2:	4b44      	ldr	r3, [pc, #272]	; (8006af4 <HAL_UART_MspInit+0x24c>)
 80069e4:	4a44      	ldr	r2, [pc, #272]	; (8006af8 <HAL_UART_MspInit+0x250>)
 80069e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80069e8:	4b42      	ldr	r3, [pc, #264]	; (8006af4 <HAL_UART_MspInit+0x24c>)
 80069ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80069ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069f0:	4b40      	ldr	r3, [pc, #256]	; (8006af4 <HAL_UART_MspInit+0x24c>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069f6:	4b3f      	ldr	r3, [pc, #252]	; (8006af4 <HAL_UART_MspInit+0x24c>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80069fc:	4b3d      	ldr	r3, [pc, #244]	; (8006af4 <HAL_UART_MspInit+0x24c>)
 80069fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a02:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a04:	4b3b      	ldr	r3, [pc, #236]	; (8006af4 <HAL_UART_MspInit+0x24c>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a0a:	4b3a      	ldr	r3, [pc, #232]	; (8006af4 <HAL_UART_MspInit+0x24c>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006a10:	4b38      	ldr	r3, [pc, #224]	; (8006af4 <HAL_UART_MspInit+0x24c>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006a16:	4b37      	ldr	r3, [pc, #220]	; (8006af4 <HAL_UART_MspInit+0x24c>)
 8006a18:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006a1c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006a1e:	4b35      	ldr	r3, [pc, #212]	; (8006af4 <HAL_UART_MspInit+0x24c>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006a24:	4833      	ldr	r0, [pc, #204]	; (8006af4 <HAL_UART_MspInit+0x24c>)
 8006a26:	f004 fa17 	bl	800ae58 <HAL_DMA_Init>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8006a30:	f7fe f922 	bl	8004c78 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a2f      	ldr	r2, [pc, #188]	; (8006af4 <HAL_UART_MspInit+0x24c>)
 8006a38:	675a      	str	r2, [r3, #116]	; 0x74
 8006a3a:	4a2e      	ldr	r2, [pc, #184]	; (8006af4 <HAL_UART_MspInit+0x24c>)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8006a40:	2200      	movs	r2, #0
 8006a42:	2107      	movs	r1, #7
 8006a44:	2026      	movs	r0, #38	; 0x26
 8006a46:	f004 f9dd 	bl	800ae04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006a4a:	2026      	movs	r0, #38	; 0x26
 8006a4c:	f004 f9f6 	bl	800ae3c <HAL_NVIC_EnableIRQ>
}
 8006a50:	e041      	b.n	8006ad6 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a29      	ldr	r2, [pc, #164]	; (8006afc <HAL_UART_MspInit+0x254>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d13c      	bne.n	8006ad6 <HAL_UART_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006a5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a60:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8006a62:	2310      	movs	r3, #16
 8006a64:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f006 fab0 	bl	800cfd0 <HAL_RCCEx_PeriphCLKConfig>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8006a76:	f7fe f8ff 	bl	8004c78 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006a7a:	4b1a      	ldr	r3, [pc, #104]	; (8006ae4 <HAL_UART_MspInit+0x23c>)
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	4a19      	ldr	r2, [pc, #100]	; (8006ae4 <HAL_UART_MspInit+0x23c>)
 8006a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a84:	6413      	str	r3, [r2, #64]	; 0x40
 8006a86:	4b17      	ldr	r3, [pc, #92]	; (8006ae4 <HAL_UART_MspInit+0x23c>)
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a8e:	613b      	str	r3, [r7, #16]
 8006a90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a92:	4b14      	ldr	r3, [pc, #80]	; (8006ae4 <HAL_UART_MspInit+0x23c>)
 8006a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a96:	4a13      	ldr	r2, [pc, #76]	; (8006ae4 <HAL_UART_MspInit+0x23c>)
 8006a98:	f043 0304 	orr.w	r3, r3, #4
 8006a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a9e:	4b11      	ldr	r3, [pc, #68]	; (8006ae4 <HAL_UART_MspInit+0x23c>)
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	f003 0304 	and.w	r3, r3, #4
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_PC_TX_Pin|UART3_PC_RX_Pin;
 8006aaa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006aae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006ac4:	2307      	movs	r3, #7
 8006ac6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006aca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006ace:	4619      	mov	r1, r3
 8006ad0:	480b      	ldr	r0, [pc, #44]	; (8006b00 <HAL_UART_MspInit+0x258>)
 8006ad2:	f004 fdcb 	bl	800b66c <HAL_GPIO_Init>
}
 8006ad6:	bf00      	nop
 8006ad8:	37b8      	adds	r7, #184	; 0xb8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	40004c00 	.word	0x40004c00
 8006ae4:	40023800 	.word	0x40023800
 8006ae8:	40020000 	.word	0x40020000
 8006aec:	40004400 	.word	0x40004400
 8006af0:	40020c00 	.word	0x40020c00
 8006af4:	20000d54 	.word	0x20000d54
 8006af8:	40026088 	.word	0x40026088
 8006afc:	40004800 	.word	0x40004800
 8006b00:	40020800 	.word	0x40020800

08006b04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08e      	sub	sp, #56	; 0x38
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8006b14:	4b34      	ldr	r3, [pc, #208]	; (8006be8 <HAL_InitTick+0xe4>)
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	4a33      	ldr	r2, [pc, #204]	; (8006be8 <HAL_InitTick+0xe4>)
 8006b1a:	f043 0301 	orr.w	r3, r3, #1
 8006b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8006b20:	4b31      	ldr	r3, [pc, #196]	; (8006be8 <HAL_InitTick+0xe4>)
 8006b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006b2c:	f107 0210 	add.w	r2, r7, #16
 8006b30:	f107 0314 	add.w	r3, r7, #20
 8006b34:	4611      	mov	r1, r2
 8006b36:	4618      	mov	r0, r3
 8006b38:	f006 fa18 	bl	800cf6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d103      	bne.n	8006b4e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006b46:	f006 f9e9 	bl	800cf1c <HAL_RCC_GetPCLK1Freq>
 8006b4a:	6378      	str	r0, [r7, #52]	; 0x34
 8006b4c:	e004      	b.n	8006b58 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006b4e:	f006 f9e5 	bl	800cf1c <HAL_RCC_GetPCLK1Freq>
 8006b52:	4603      	mov	r3, r0
 8006b54:	005b      	lsls	r3, r3, #1
 8006b56:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5a:	4a24      	ldr	r2, [pc, #144]	; (8006bec <HAL_InitTick+0xe8>)
 8006b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b60:	0c9b      	lsrs	r3, r3, #18
 8006b62:	3b01      	subs	r3, #1
 8006b64:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8006b66:	4b22      	ldr	r3, [pc, #136]	; (8006bf0 <HAL_InitTick+0xec>)
 8006b68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006b6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8006b6e:	4b20      	ldr	r3, [pc, #128]	; (8006bf0 <HAL_InitTick+0xec>)
 8006b70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006b74:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8006b76:	4a1e      	ldr	r2, [pc, #120]	; (8006bf0 <HAL_InitTick+0xec>)
 8006b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8006b7c:	4b1c      	ldr	r3, [pc, #112]	; (8006bf0 <HAL_InitTick+0xec>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b82:	4b1b      	ldr	r3, [pc, #108]	; (8006bf0 <HAL_InitTick+0xec>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b88:	4b19      	ldr	r3, [pc, #100]	; (8006bf0 <HAL_InitTick+0xec>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8006b8e:	4818      	ldr	r0, [pc, #96]	; (8006bf0 <HAL_InitTick+0xec>)
 8006b90:	f007 fcc8 	bl	800e524 <HAL_TIM_Base_Init>
 8006b94:	4603      	mov	r3, r0
 8006b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8006b9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d11b      	bne.n	8006bda <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8006ba2:	4813      	ldr	r0, [pc, #76]	; (8006bf0 <HAL_InitTick+0xec>)
 8006ba4:	f007 fd16 	bl	800e5d4 <HAL_TIM_Base_Start_IT>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8006bae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d111      	bne.n	8006bda <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006bb6:	201c      	movs	r0, #28
 8006bb8:	f004 f940 	bl	800ae3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b0f      	cmp	r3, #15
 8006bc0:	d808      	bhi.n	8006bd4 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	6879      	ldr	r1, [r7, #4]
 8006bc6:	201c      	movs	r0, #28
 8006bc8:	f004 f91c 	bl	800ae04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006bcc:	4a09      	ldr	r2, [pc, #36]	; (8006bf4 <HAL_InitTick+0xf0>)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	e002      	b.n	8006bda <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006bda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3738      	adds	r7, #56	; 0x38
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	40023800 	.word	0x40023800
 8006bec:	431bde83 	.word	0x431bde83
 8006bf0:	20000df8 	.word	0x20000df8
 8006bf4:	2000000c 	.word	0x2000000c

08006bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006bfc:	e7fe      	b.n	8006bfc <NMI_Handler+0x4>

08006bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c02:	e7fe      	b.n	8006c02 <HardFault_Handler+0x4>

08006c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006c04:	b480      	push	{r7}
 8006c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006c08:	e7fe      	b.n	8006c08 <MemManage_Handler+0x4>

08006c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006c0e:	e7fe      	b.n	8006c0e <BusFault_Handler+0x4>

08006c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006c14:	e7fe      	b.n	8006c14 <UsageFault_Handler+0x4>

08006c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006c16:	b480      	push	{r7}
 8006c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006c1a:	bf00      	nop
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006c28:	4802      	ldr	r0, [pc, #8]	; (8006c34 <DMA1_Stream5_IRQHandler+0x10>)
 8006c2a:	f004 fab5 	bl	800b198 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006c2e:	bf00      	nop
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20000d54 	.word	0x20000d54

08006c38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006c3c:	4802      	ldr	r0, [pc, #8]	; (8006c48 <TIM2_IRQHandler+0x10>)
 8006c3e:	f008 f845 	bl	800eccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006c42:	bf00      	nop
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20000df8 	.word	0x20000df8

08006c4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006c50:	4802      	ldr	r0, [pc, #8]	; (8006c5c <TIM3_IRQHandler+0x10>)
 8006c52:	f008 f83b 	bl	800eccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006c56:	bf00      	nop
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20000b70 	.word	0x20000b70

08006c60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006c64:	4802      	ldr	r0, [pc, #8]	; (8006c70 <USART2_IRQHandler+0x10>)
 8006c66:	f009 fb99 	bl	801039c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006c6a:	bf00      	nop
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	20000c44 	.word	0x20000c44

08006c74 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006c78:	4802      	ldr	r0, [pc, #8]	; (8006c84 <UART4_IRQHandler+0x10>)
 8006c7a:	f009 fb8f 	bl	801039c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006c7e:	bf00      	nop
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20000bbc 	.word	0x20000bbc

08006c88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	af00      	add	r7, sp, #0
  return 1;
 8006c8c:	2301      	movs	r3, #1
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <_kill>:

int _kill(int pid, int sig)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006ca2:	f00e fd37 	bl	8015714 <__errno>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2216      	movs	r2, #22
 8006caa:	601a      	str	r2, [r3, #0]
  return -1;
 8006cac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <_exit>:

void _exit (int status)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7ff ffe7 	bl	8006c98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006cca:	e7fe      	b.n	8006cca <_exit+0x12>

08006ccc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006cd8:	2300      	movs	r3, #0
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	e00a      	b.n	8006cf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006cde:	f3af 8000 	nop.w
 8006ce2:	4601      	mov	r1, r0
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	60ba      	str	r2, [r7, #8]
 8006cea:	b2ca      	uxtb	r2, r1
 8006cec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	dbf0      	blt.n	8006cde <_read+0x12>
  }

  return len;
 8006cfc:	687b      	ldr	r3, [r7, #4]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b086      	sub	sp, #24
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d12:	2300      	movs	r3, #0
 8006d14:	617b      	str	r3, [r7, #20]
 8006d16:	e009      	b.n	8006d2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	1c5a      	adds	r2, r3, #1
 8006d1c:	60ba      	str	r2, [r7, #8]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	dbf1      	blt.n	8006d18 <_write+0x12>
  }
  return len;
 8006d34:	687b      	ldr	r3, [r7, #4]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <_close>:

int _close(int file)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006d46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d66:	605a      	str	r2, [r3, #4]
  return 0;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <_isatty>:

int _isatty(int file)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b083      	sub	sp, #12
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006d7e:	2301      	movs	r3, #1
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
	...

08006da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006db0:	4a14      	ldr	r2, [pc, #80]	; (8006e04 <_sbrk+0x5c>)
 8006db2:	4b15      	ldr	r3, [pc, #84]	; (8006e08 <_sbrk+0x60>)
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006dbc:	4b13      	ldr	r3, [pc, #76]	; (8006e0c <_sbrk+0x64>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d102      	bne.n	8006dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006dc4:	4b11      	ldr	r3, [pc, #68]	; (8006e0c <_sbrk+0x64>)
 8006dc6:	4a12      	ldr	r2, [pc, #72]	; (8006e10 <_sbrk+0x68>)
 8006dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006dca:	4b10      	ldr	r3, [pc, #64]	; (8006e0c <_sbrk+0x64>)
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d207      	bcs.n	8006de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006dd8:	f00e fc9c 	bl	8015714 <__errno>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	220c      	movs	r2, #12
 8006de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006de2:	f04f 33ff 	mov.w	r3, #4294967295
 8006de6:	e009      	b.n	8006dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006de8:	4b08      	ldr	r3, [pc, #32]	; (8006e0c <_sbrk+0x64>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006dee:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <_sbrk+0x64>)
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4413      	add	r3, r2
 8006df6:	4a05      	ldr	r2, [pc, #20]	; (8006e0c <_sbrk+0x64>)
 8006df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	20040000 	.word	0x20040000
 8006e08:	00000400 	.word	0x00000400
 8006e0c:	20000e44 	.word	0x20000e44
 8006e10:	200090e8 	.word	0x200090e8

08006e14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006e14:	b480      	push	{r7}
 8006e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006e18:	4b06      	ldr	r3, [pc, #24]	; (8006e34 <SystemInit+0x20>)
 8006e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e1e:	4a05      	ldr	r2, [pc, #20]	; (8006e34 <SystemInit+0x20>)
 8006e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006e28:	bf00      	nop
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	e000ed00 	.word	0xe000ed00

08006e38 <FusionDegreesToRadians>:
static inline float FusionDegreesToRadians(const float degrees) {
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 8006e42:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e46:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006e5c <FusionDegreesToRadians+0x24>
 8006e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	3c8efa35 	.word	0x3c8efa35

08006e60 <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	105a      	asrs	r2, r3, #1
 8006e72:	4b10      	ldr	r3, [pc, #64]	; (8006eb4 <FusionFastInverseSqrt+0x54>)
 8006e74:	1a9b      	subs	r3, r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 8006e78:	ed97 7a03 	vldr	s14, [r7, #12]
 8006e7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e80:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8006eb8 <FusionFastInverseSqrt+0x58>
 8006e84:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006e88:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006e90:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006e98:	eddf 6a08 	vldr	s13, [pc, #32]	; 8006ebc <FusionFastInverseSqrt+0x5c>
 8006e9c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8006ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	5f1f1412 	.word	0x5f1f1412
 8006eb8:	3f36d312 	.word	0x3f36d312
 8006ebc:	3fd851ff 	.word	0x3fd851ff

08006ec0 <FusionVectorIsZero>:
static inline bool FusionVectorIsZero(const FusionVector vector) {
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	eef0 6a40 	vmov.f32	s13, s0
 8006eca:	eeb0 7a60 	vmov.f32	s14, s1
 8006ece:	eef0 7a41 	vmov.f32	s15, s2
 8006ed2:	edc7 6a01 	vstr	s13, [r7, #4]
 8006ed6:	ed87 7a02 	vstr	s14, [r7, #8]
 8006eda:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 8006ede:	edd7 7a01 	vldr	s15, [r7, #4]
 8006ee2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eea:	d10f      	bne.n	8006f0c <FusionVectorIsZero+0x4c>
 8006eec:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ef0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ef8:	d108      	bne.n	8006f0c <FusionVectorIsZero+0x4c>
 8006efa:	edd7 7a03 	vldr	s15, [r7, #12]
 8006efe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f06:	d101      	bne.n	8006f0c <FusionVectorIsZero+0x4c>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e000      	b.n	8006f0e <FusionVectorIsZero+0x4e>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	b2db      	uxtb	r3, r3
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 8006f20:	b480      	push	{r7}
 8006f22:	b091      	sub	sp, #68	; 0x44
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	eeb0 5a40 	vmov.f32	s10, s0
 8006f2a:	eef0 5a60 	vmov.f32	s11, s1
 8006f2e:	eeb0 6a41 	vmov.f32	s12, s2
 8006f32:	eef0 6a61 	vmov.f32	s13, s3
 8006f36:	eeb0 7a42 	vmov.f32	s14, s4
 8006f3a:	eef0 7a62 	vmov.f32	s15, s5
 8006f3e:	ed87 5a07 	vstr	s10, [r7, #28]
 8006f42:	edc7 5a08 	vstr	s11, [r7, #32]
 8006f46:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8006f4a:	edc7 6a04 	vstr	s13, [r7, #16]
 8006f4e:	ed87 7a05 	vstr	s14, [r7, #20]
 8006f52:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 8006f56:	ed97 7a07 	vldr	s14, [r7, #28]
 8006f5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8006f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8006f62:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 8006f66:	ed97 7a08 	vldr	s14, [r7, #32]
 8006f6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8006f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8006f72:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 8006f76:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006f7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8006f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8006f82:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8006f86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006f8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006f8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006f90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006f94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f9a:	ee06 1a90 	vmov	s13, r1
 8006f9e:	ee07 2a10 	vmov	s14, r2
 8006fa2:	ee07 3a90 	vmov	s15, r3
}
 8006fa6:	eeb0 0a66 	vmov.f32	s0, s13
 8006faa:	eef0 0a47 	vmov.f32	s1, s14
 8006fae:	eeb0 1a67 	vmov.f32	s2, s15
 8006fb2:	3744      	adds	r7, #68	; 0x44
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	eef0 6a40 	vmov.f32	s13, s0
 8006fc6:	eeb0 7a60 	vmov.f32	s14, s1
 8006fca:	eef0 7a41 	vmov.f32	s15, s2
 8006fce:	edc7 6a01 	vstr	s13, [r7, #4]
 8006fd2:	ed87 7a02 	vstr	s14, [r7, #8]
 8006fd6:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 8006fda:	ed97 7a01 	vldr	s14, [r7, #4]
 8006fde:	edd7 7a02 	vldr	s15, [r7, #8]
 8006fe2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006fe6:	edd7 7a03 	vldr	s15, [r7, #12]
 8006fea:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8006fee:	eeb0 0a67 	vmov.f32	s0, s15
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8006ffc:	b480      	push	{r7}
 8006ffe:	b08f      	sub	sp, #60	; 0x3c
 8007000:	af00      	add	r7, sp, #0
 8007002:	eef0 6a40 	vmov.f32	s13, s0
 8007006:	eeb0 7a60 	vmov.f32	s14, s1
 800700a:	eef0 7a41 	vmov.f32	s15, s2
 800700e:	edc7 1a04 	vstr	s3, [r7, #16]
 8007012:	edc7 6a05 	vstr	s13, [r7, #20]
 8007016:	ed87 7a06 	vstr	s14, [r7, #24]
 800701a:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 800701e:	ed97 7a05 	vldr	s14, [r7, #20]
 8007022:	edd7 7a04 	vldr	s15, [r7, #16]
 8007026:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800702a:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800702e:	ed97 7a06 	vldr	s14, [r7, #24]
 8007032:	edd7 7a04 	vldr	s15, [r7, #16]
 8007036:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800703a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800703e:	ed97 7a07 	vldr	s14, [r7, #28]
 8007042:	edd7 7a04 	vldr	s15, [r7, #16]
 8007046:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800704a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 800704e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007052:	f107 0220 	add.w	r2, r7, #32
 8007056:	ca07      	ldmia	r2, {r0, r1, r2}
 8007058:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800705c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800705e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007062:	ee06 1a90 	vmov	s13, r1
 8007066:	ee07 2a10 	vmov	s14, r2
 800706a:	ee07 3a90 	vmov	s15, r3
}
 800706e:	eeb0 0a66 	vmov.f32	s0, s13
 8007072:	eef0 0a47 	vmov.f32	s1, s14
 8007076:	eeb0 1a67 	vmov.f32	s2, s15
 800707a:	373c      	adds	r7, #60	; 0x3c
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8007084:	b480      	push	{r7}
 8007086:	b091      	sub	sp, #68	; 0x44
 8007088:	af00      	add	r7, sp, #0
 800708a:	eeb0 5a40 	vmov.f32	s10, s0
 800708e:	eef0 5a60 	vmov.f32	s11, s1
 8007092:	eeb0 6a41 	vmov.f32	s12, s2
 8007096:	eef0 6a61 	vmov.f32	s13, s3
 800709a:	eeb0 7a42 	vmov.f32	s14, s4
 800709e:	eef0 7a62 	vmov.f32	s15, s5
 80070a2:	ed87 5a07 	vstr	s10, [r7, #28]
 80070a6:	edc7 5a08 	vstr	s11, [r7, #32]
 80070aa:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80070ae:	edc7 6a04 	vstr	s13, [r7, #16]
 80070b2:	ed87 7a05 	vstr	s14, [r7, #20]
 80070b6:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 80070ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80070be:	edd7 7a04 	vldr	s15, [r7, #16]
 80070c2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80070c6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 80070ca:	ed97 7a08 	vldr	s14, [r7, #32]
 80070ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80070d2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80070d6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 80070da:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80070de:	edd7 7a06 	vldr	s15, [r7, #24]
 80070e2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80070e6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80070ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80070ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80070f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80070f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80070f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80070fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070fe:	ee06 1a90 	vmov	s13, r1
 8007102:	ee07 2a10 	vmov	s14, r2
 8007106:	ee07 3a90 	vmov	s15, r3
}
 800710a:	eeb0 0a66 	vmov.f32	s0, s13
 800710e:	eef0 0a47 	vmov.f32	s1, s14
 8007112:	eeb0 1a67 	vmov.f32	s2, s15
 8007116:	3744      	adds	r7, #68	; 0x44
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8007120:	b480      	push	{r7}
 8007122:	b091      	sub	sp, #68	; 0x44
 8007124:	af00      	add	r7, sp, #0
 8007126:	eeb0 5a40 	vmov.f32	s10, s0
 800712a:	eef0 5a60 	vmov.f32	s11, s1
 800712e:	eeb0 6a41 	vmov.f32	s12, s2
 8007132:	eef0 6a61 	vmov.f32	s13, s3
 8007136:	eeb0 7a42 	vmov.f32	s14, s4
 800713a:	eef0 7a62 	vmov.f32	s15, s5
 800713e:	ed87 5a07 	vstr	s10, [r7, #28]
 8007142:	edc7 5a08 	vstr	s11, [r7, #32]
 8007146:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800714a:	edc7 6a04 	vstr	s13, [r7, #16]
 800714e:	ed87 7a05 	vstr	s14, [r7, #20]
 8007152:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 8007156:	ed97 7a08 	vldr	s14, [r7, #32]
 800715a:	edd7 7a06 	vldr	s15, [r7, #24]
 800715e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007162:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007166:	edd7 7a05 	vldr	s15, [r7, #20]
 800716a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800716e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8007172:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 8007176:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800717a:	edd7 7a04 	vldr	s15, [r7, #16]
 800717e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007182:	edd7 6a07 	vldr	s13, [r7, #28]
 8007186:	edd7 7a06 	vldr	s15, [r7, #24]
 800718a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800718e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8007192:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 8007196:	ed97 7a07 	vldr	s14, [r7, #28]
 800719a:	edd7 7a05 	vldr	s15, [r7, #20]
 800719e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80071a2:	edd7 6a08 	vldr	s13, [r7, #32]
 80071a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80071aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80071ae:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80071b2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80071b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80071ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80071be:	ca07      	ldmia	r2, {r0, r1, r2}
 80071c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80071c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80071c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ca:	ee06 1a90 	vmov	s13, r1
 80071ce:	ee07 2a10 	vmov	s14, r2
 80071d2:	ee07 3a90 	vmov	s15, r3
}
 80071d6:	eeb0 0a66 	vmov.f32	s0, s13
 80071da:	eef0 0a47 	vmov.f32	s1, s14
 80071de:	eeb0 1a67 	vmov.f32	s2, s15
 80071e2:	3744      	adds	r7, #68	; 0x44
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <FusionVectorDotProduct>:
static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08a      	sub	sp, #40	; 0x28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	eeb0 5a40 	vmov.f32	s10, s0
 80071f6:	eef0 5a60 	vmov.f32	s11, s1
 80071fa:	eeb0 6a41 	vmov.f32	s12, s2
 80071fe:	eef0 6a61 	vmov.f32	s13, s3
 8007202:	eeb0 7a42 	vmov.f32	s14, s4
 8007206:	eef0 7a62 	vmov.f32	s15, s5
 800720a:	ed87 5a03 	vstr	s10, [r7, #12]
 800720e:	edc7 5a04 	vstr	s11, [r7, #16]
 8007212:	ed87 6a05 	vstr	s12, [r7, #20]
 8007216:	edc7 6a00 	vstr	s13, [r7]
 800721a:	ed87 7a01 	vstr	s14, [r7, #4]
 800721e:	edc7 7a02 	vstr	s15, [r7, #8]
    return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 8007222:	ed97 5a00 	vldr	s10, [r7]
 8007226:	edd7 5a01 	vldr	s11, [r7, #4]
 800722a:	ed97 6a02 	vldr	s12, [r7, #8]
 800722e:	edd7 6a03 	vldr	s13, [r7, #12]
 8007232:	ed97 7a04 	vldr	s14, [r7, #16]
 8007236:	edd7 7a05 	vldr	s15, [r7, #20]
 800723a:	eef0 1a45 	vmov.f32	s3, s10
 800723e:	eeb0 2a65 	vmov.f32	s4, s11
 8007242:	eef0 2a46 	vmov.f32	s5, s12
 8007246:	eeb0 0a66 	vmov.f32	s0, s13
 800724a:	eef0 0a47 	vmov.f32	s1, s14
 800724e:	eeb0 1a67 	vmov.f32	s2, s15
 8007252:	f7ff ff17 	bl	8007084 <FusionVectorHadamardProduct>
 8007256:	eef0 6a40 	vmov.f32	s13, s0
 800725a:	eeb0 7a60 	vmov.f32	s14, s1
 800725e:	eef0 7a41 	vmov.f32	s15, s2
 8007262:	edc7 6a07 	vstr	s13, [r7, #28]
 8007266:	ed87 7a08 	vstr	s14, [r7, #32]
 800726a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800726e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007272:	ed97 7a08 	vldr	s14, [r7, #32]
 8007276:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800727a:	eeb0 0a66 	vmov.f32	s0, s13
 800727e:	eef0 0a47 	vmov.f32	s1, s14
 8007282:	eeb0 1a67 	vmov.f32	s2, s15
 8007286:	f7ff fe99 	bl	8006fbc <FusionVectorSum>
 800728a:	eef0 7a40 	vmov.f32	s15, s0
}
 800728e:	eeb0 0a67 	vmov.f32	s0, s15
 8007292:	3728      	adds	r7, #40	; 0x28
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af00      	add	r7, sp, #0
 800729e:	eef0 6a40 	vmov.f32	s13, s0
 80072a2:	eeb0 7a60 	vmov.f32	s14, s1
 80072a6:	eef0 7a41 	vmov.f32	s15, s2
 80072aa:	edc7 6a01 	vstr	s13, [r7, #4]
 80072ae:	ed87 7a02 	vstr	s14, [r7, #8]
 80072b2:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 80072b6:	ed97 5a01 	vldr	s10, [r7, #4]
 80072ba:	edd7 5a02 	vldr	s11, [r7, #8]
 80072be:	ed97 6a03 	vldr	s12, [r7, #12]
 80072c2:	edd7 6a01 	vldr	s13, [r7, #4]
 80072c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80072ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80072ce:	eef0 1a45 	vmov.f32	s3, s10
 80072d2:	eeb0 2a65 	vmov.f32	s4, s11
 80072d6:	eef0 2a46 	vmov.f32	s5, s12
 80072da:	eeb0 0a66 	vmov.f32	s0, s13
 80072de:	eef0 0a47 	vmov.f32	s1, s14
 80072e2:	eeb0 1a67 	vmov.f32	s2, s15
 80072e6:	f7ff fecd 	bl	8007084 <FusionVectorHadamardProduct>
 80072ea:	eef0 6a40 	vmov.f32	s13, s0
 80072ee:	eeb0 7a60 	vmov.f32	s14, s1
 80072f2:	eef0 7a41 	vmov.f32	s15, s2
 80072f6:	edc7 6a05 	vstr	s13, [r7, #20]
 80072fa:	ed87 7a06 	vstr	s14, [r7, #24]
 80072fe:	edc7 7a07 	vstr	s15, [r7, #28]
 8007302:	edd7 6a05 	vldr	s13, [r7, #20]
 8007306:	ed97 7a06 	vldr	s14, [r7, #24]
 800730a:	edd7 7a07 	vldr	s15, [r7, #28]
 800730e:	eeb0 0a66 	vmov.f32	s0, s13
 8007312:	eef0 0a47 	vmov.f32	s1, s14
 8007316:	eeb0 1a67 	vmov.f32	s2, s15
 800731a:	f7ff fe4f 	bl	8006fbc <FusionVectorSum>
 800731e:	eef0 7a40 	vmov.f32	s15, s0
}
 8007322:	eeb0 0a67 	vmov.f32	s0, s15
 8007326:	3720      	adds	r7, #32
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 800732c:	b580      	push	{r7, lr}
 800732e:	b08c      	sub	sp, #48	; 0x30
 8007330:	af00      	add	r7, sp, #0
 8007332:	eef0 6a40 	vmov.f32	s13, s0
 8007336:	eeb0 7a60 	vmov.f32	s14, s1
 800733a:	eef0 7a41 	vmov.f32	s15, s2
 800733e:	edc7 6a05 	vstr	s13, [r7, #20]
 8007342:	ed87 7a06 	vstr	s14, [r7, #24]
 8007346:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800734a:	edd7 6a05 	vldr	s13, [r7, #20]
 800734e:	ed97 7a06 	vldr	s14, [r7, #24]
 8007352:	edd7 7a07 	vldr	s15, [r7, #28]
 8007356:	eeb0 0a66 	vmov.f32	s0, s13
 800735a:	eef0 0a47 	vmov.f32	s1, s14
 800735e:	eeb0 1a67 	vmov.f32	s2, s15
 8007362:	f7ff ff99 	bl	8007298 <FusionVectorMagnitudeSquared>
 8007366:	eef0 7a40 	vmov.f32	s15, s0
 800736a:	eeb0 0a67 	vmov.f32	s0, s15
 800736e:	f7ff fd77 	bl	8006e60 <FusionFastInverseSqrt>
 8007372:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8007376:	edd7 6a05 	vldr	s13, [r7, #20]
 800737a:	ed97 7a06 	vldr	s14, [r7, #24]
 800737e:	edd7 7a07 	vldr	s15, [r7, #28]
 8007382:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 8007386:	eeb0 0a66 	vmov.f32	s0, s13
 800738a:	eef0 0a47 	vmov.f32	s1, s14
 800738e:	eeb0 1a67 	vmov.f32	s2, s15
 8007392:	f7ff fe33 	bl	8006ffc <FusionVectorMultiplyScalar>
 8007396:	eef0 6a40 	vmov.f32	s13, s0
 800739a:	eeb0 7a60 	vmov.f32	s14, s1
 800739e:	eef0 7a41 	vmov.f32	s15, s2
 80073a2:	edc7 6a08 	vstr	s13, [r7, #32]
 80073a6:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80073aa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80073ae:	6a39      	ldr	r1, [r7, #32]
 80073b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b4:	ee06 1a90 	vmov	s13, r1
 80073b8:	ee07 2a10 	vmov	s14, r2
 80073bc:	ee07 3a90 	vmov	s15, r3
}
 80073c0:	eeb0 0a66 	vmov.f32	s0, s13
 80073c4:	eef0 0a47 	vmov.f32	s1, s14
 80073c8:	eeb0 1a67 	vmov.f32	s2, s15
 80073cc:	3730      	adds	r7, #48	; 0x30
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <FusionQuaternionAdd>:
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 80073d2:	b490      	push	{r4, r7}
 80073d4:	b094      	sub	sp, #80	; 0x50
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	eeb0 4a40 	vmov.f32	s8, s0
 80073dc:	eef0 4a60 	vmov.f32	s9, s1
 80073e0:	eeb0 5a41 	vmov.f32	s10, s2
 80073e4:	eef0 5a61 	vmov.f32	s11, s3
 80073e8:	eeb0 6a42 	vmov.f32	s12, s4
 80073ec:	eef0 6a62 	vmov.f32	s13, s5
 80073f0:	eeb0 7a43 	vmov.f32	s14, s6
 80073f4:	eef0 7a63 	vmov.f32	s15, s7
 80073f8:	ed87 4a08 	vstr	s8, [r7, #32]
 80073fc:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8007400:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8007404:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8007408:	ed87 6a04 	vstr	s12, [r7, #16]
 800740c:	edc7 6a05 	vstr	s13, [r7, #20]
 8007410:	ed87 7a06 	vstr	s14, [r7, #24]
 8007414:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = quaternionA.element.w + quaternionB.element.w,
 8007418:	ed97 7a08 	vldr	s14, [r7, #32]
 800741c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007420:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007424:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 8007428:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800742c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007430:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007434:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 8007438:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800743c:	edd7 7a06 	vldr	s15, [r7, #24]
 8007440:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007444:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 8007448:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800744c:	edd7 7a07 	vldr	s15, [r7, #28]
 8007450:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007454:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8007458:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800745c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007460:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007462:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007466:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007468:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800746a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800746c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800746e:	ee06 0a10 	vmov	s12, r0
 8007472:	ee06 1a90 	vmov	s13, r1
 8007476:	ee07 2a10 	vmov	s14, r2
 800747a:	ee07 3a90 	vmov	s15, r3
}
 800747e:	eeb0 0a46 	vmov.f32	s0, s12
 8007482:	eef0 0a66 	vmov.f32	s1, s13
 8007486:	eeb0 1a47 	vmov.f32	s2, s14
 800748a:	eef0 1a67 	vmov.f32	s3, s15
 800748e:	3750      	adds	r7, #80	; 0x50
 8007490:	46bd      	mov	sp, r7
 8007492:	bc90      	pop	{r4, r7}
 8007494:	4770      	bx	lr

08007496 <FusionQuaternionMultiplyVector>:
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 8007496:	b490      	push	{r4, r7}
 8007498:	b094      	sub	sp, #80	; 0x50
 800749a:	af00      	add	r7, sp, #0
 800749c:	eef0 4a40 	vmov.f32	s9, s0
 80074a0:	eeb0 5a60 	vmov.f32	s10, s1
 80074a4:	eef0 5a41 	vmov.f32	s11, s2
 80074a8:	eeb0 6a61 	vmov.f32	s12, s3
 80074ac:	eef0 6a42 	vmov.f32	s13, s4
 80074b0:	eeb0 7a62 	vmov.f32	s14, s5
 80074b4:	eef0 7a43 	vmov.f32	s15, s6
 80074b8:	edc7 4a08 	vstr	s9, [r7, #32]
 80074bc:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 80074c0:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 80074c4:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 80074c8:	edc7 6a05 	vstr	s13, [r7, #20]
 80074cc:	ed87 7a06 	vstr	s14, [r7, #24]
 80074d0:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 80074d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80074d8:	eeb1 7a67 	vneg.f32	s14, s15
 80074dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80074e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80074e4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80074e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80074ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80074f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80074f4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80074f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80074fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007500:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007504:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 8007508:	ed97 7a08 	vldr	s14, [r7, #32]
 800750c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007510:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007514:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8007518:	edd7 7a07 	vldr	s15, [r7, #28]
 800751c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007520:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007524:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8007528:	edd7 7a06 	vldr	s15, [r7, #24]
 800752c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007530:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007534:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 8007538:	ed97 7a08 	vldr	s14, [r7, #32]
 800753c:	edd7 7a06 	vldr	s15, [r7, #24]
 8007540:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007544:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007548:	edd7 7a07 	vldr	s15, [r7, #28]
 800754c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007550:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007554:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8007558:	edd7 7a05 	vldr	s15, [r7, #20]
 800755c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007560:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007564:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 8007568:	ed97 7a08 	vldr	s14, [r7, #32]
 800756c:	edd7 7a07 	vldr	s15, [r7, #28]
 8007570:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007574:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007578:	edd7 7a06 	vldr	s15, [r7, #24]
 800757c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007580:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007584:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8007588:	edd7 7a05 	vldr	s15, [r7, #20]
 800758c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007590:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007594:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8007598:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800759c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80075a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80075a6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80075a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ae:	ee06 0a10 	vmov	s12, r0
 80075b2:	ee06 1a90 	vmov	s13, r1
 80075b6:	ee07 2a10 	vmov	s14, r2
 80075ba:	ee07 3a90 	vmov	s15, r3
}
 80075be:	eeb0 0a46 	vmov.f32	s0, s12
 80075c2:	eef0 0a66 	vmov.f32	s1, s13
 80075c6:	eeb0 1a47 	vmov.f32	s2, s14
 80075ca:	eef0 1a67 	vmov.f32	s3, s15
 80075ce:	3750      	adds	r7, #80	; 0x50
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bc90      	pop	{r4, r7}
 80075d4:	4770      	bx	lr

080075d6 <FusionQuaternionNormalise>:
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 80075d6:	b590      	push	{r4, r7, lr}
 80075d8:	b093      	sub	sp, #76	; 0x4c
 80075da:	af00      	add	r7, sp, #0
 80075dc:	eeb0 6a40 	vmov.f32	s12, s0
 80075e0:	eef0 6a60 	vmov.f32	s13, s1
 80075e4:	eeb0 7a41 	vmov.f32	s14, s2
 80075e8:	eef0 7a61 	vmov.f32	s15, s3
 80075ec:	ed87 6a04 	vstr	s12, [r7, #16]
 80075f0:	edc7 6a05 	vstr	s13, [r7, #20]
 80075f4:	ed87 7a06 	vstr	s14, [r7, #24]
 80075f8:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 80075fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8007600:	edd7 7a04 	vldr	s15, [r7, #16]
 8007604:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007608:	edd7 6a05 	vldr	s13, [r7, #20]
 800760c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007614:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007618:	edd7 6a06 	vldr	s13, [r7, #24]
 800761c:	edd7 7a06 	vldr	s15, [r7, #24]
 8007620:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007624:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007628:	edd7 6a07 	vldr	s13, [r7, #28]
 800762c:	edd7 7a07 	vldr	s15, [r7, #28]
 8007630:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007638:	eeb0 0a67 	vmov.f32	s0, s15
 800763c:	f7ff fc10 	bl	8006e60 <FusionFastInverseSqrt>
 8007640:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
            .w = Q.w * magnitudeReciprocal,
 8007644:	ed97 7a04 	vldr	s14, [r7, #16]
 8007648:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800764c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007650:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 8007654:	ed97 7a05 	vldr	s14, [r7, #20]
 8007658:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800765c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007660:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 8007664:	ed97 7a06 	vldr	s14, [r7, #24]
 8007668:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800766c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007670:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 8007674:	ed97 7a07 	vldr	s14, [r7, #28]
 8007678:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800767c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007680:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8007684:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8007688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800768c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800768e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007692:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007694:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007696:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800769a:	ee06 0a10 	vmov	s12, r0
 800769e:	ee06 1a90 	vmov	s13, r1
 80076a2:	ee07 2a10 	vmov	s14, r2
 80076a6:	ee07 3a90 	vmov	s15, r3
}
 80076aa:	eeb0 0a46 	vmov.f32	s0, s12
 80076ae:	eef0 0a66 	vmov.f32	s1, s13
 80076b2:	eeb0 1a47 	vmov.f32	s2, s14
 80076b6:	eef0 1a67 	vmov.f32	s3, s15
 80076ba:	374c      	adds	r7, #76	; 0x4c
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd90      	pop	{r4, r7, pc}

080076c0 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 80076c0:	b5b0      	push	{r4, r5, r7, lr}
 80076c2:	b088      	sub	sp, #32
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 80076c8:	4b0b      	ldr	r3, [pc, #44]	; (80076f8 <FusionAhrsInitialise+0x38>)
 80076ca:	f107 0408 	add.w	r4, r7, #8
 80076ce:	461d      	mov	r5, r3
 80076d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80076d8:	e884 0003 	stmia.w	r4, {r0, r1}
            .gyroscopeRange = 0.0f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .recoveryTriggerPeriod = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 80076dc:	f107 0308 	add.w	r3, r7, #8
 80076e0:	4619      	mov	r1, r3
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f86e 	bl	80077c4 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f807 	bl	80076fc <FusionAhrsReset>
}
 80076ee:	bf00      	nop
 80076f0:	3720      	adds	r7, #32
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bdb0      	pop	{r4, r5, r7, pc}
 80076f6:	bf00      	nop
 80076f8:	0801bef0 	.word	0x0801bef0

080076fc <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 80076fc:	b480      	push	{r7}
 80076fe:	b091      	sub	sp, #68	; 0x44
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800770a:	619a      	str	r2, [r3, #24]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f04f 0200 	mov.w	r2, #0
 8007712:	61da      	str	r2, [r3, #28]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f04f 0200 	mov.w	r2, #0
 800771a:	621a      	str	r2, [r3, #32]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f04f 0200 	mov.w	r2, #0
 8007722:	625a      	str	r2, [r3, #36]	; 0x24
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f04f 0200 	mov.w	r2, #0
 800772a:	629a      	str	r2, [r3, #40]	; 0x28
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f04f 0200 	mov.w	r2, #0
 8007732:	62da      	str	r2, [r3, #44]	; 0x2c
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f04f 0200 	mov.w	r2, #0
 800773a:	631a      	str	r2, [r3, #48]	; 0x30
    ahrs->initialising = true;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ahrs->rampedGain = INITIAL_GAIN;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a1e      	ldr	r2, [pc, #120]	; (80077c0 <FusionAhrsReset+0xc4>)
 8007748:	639a      	str	r2, [r3, #56]	; 0x38
    ahrs->angularRateRecovery = false;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f04f 0200 	mov.w	r2, #0
 8007758:	645a      	str	r2, [r3, #68]	; 0x44
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f04f 0200 	mov.w	r2, #0
 8007760:	649a      	str	r2, [r3, #72]	; 0x48
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f04f 0200 	mov.w	r2, #0
 8007768:	64da      	str	r2, [r3, #76]	; 0x4c
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f04f 0200 	mov.w	r2, #0
 8007770:	651a      	str	r2, [r3, #80]	; 0x50
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f04f 0200 	mov.w	r2, #0
 8007778:	655a      	str	r2, [r3, #84]	; 0x54
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f04f 0200 	mov.w	r2, #0
 8007780:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerometerIgnored = false;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->accelerationRecoveryTrigger = 0;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	695b      	ldr	r3, [r3, #20]
 8007794:	461a      	mov	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magnetometerIgnored = false;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    ahrs->magneticRecoveryTrigger = 0;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	66da      	str	r2, [r3, #108]	; 0x6c
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	461a      	mov	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	671a      	str	r2, [r3, #112]	; 0x70
}
 80077b2:	bf00      	nop
 80077b4:	3744      	adds	r7, #68	; 0x44
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	41200000 	.word	0x41200000

080077c4 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	781a      	ldrb	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	605a      	str	r2, [r3, #4]
    ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->gyroscopeRange;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80077e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80077e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ec:	d007      	beq.n	80077fe <FusionAhrsSetSettings+0x3a>
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80077f4:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8007940 <FusionAhrsSetSettings+0x17c>
 80077f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80077fc:	e001      	b.n	8007802 <FusionAhrsSetSettings+0x3e>
 80077fe:	eddf 7a51 	vldr	s15, [pc, #324]	; 8007944 <FusionAhrsSetSettings+0x180>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	edd3 7a03 	vldr	s15, [r3, #12]
 800780e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007816:	d01b      	beq.n	8007850 <FusionAhrsSetSettings+0x8c>
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	edd3 7a03 	vldr	s15, [r3, #12]
 800781e:	eeb0 0a67 	vmov.f32	s0, s15
 8007822:	f7ff fb09 	bl	8006e38 <FusionDegreesToRadians>
 8007826:	eef0 7a40 	vmov.f32	s15, s0
 800782a:	eeb0 0a67 	vmov.f32	s0, s15
 800782e:	f012 f84b 	bl	80198c8 <sinf>
 8007832:	eef0 7a40 	vmov.f32	s15, s0
 8007836:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800783a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800783e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8007842:	eeb0 0a67 	vmov.f32	s0, s15
 8007846:	f011 ffe1 	bl	801980c <powf>
 800784a:	eef0 7a40 	vmov.f32	s15, s0
 800784e:	e001      	b.n	8007854 <FusionAhrsSetSettings+0x90>
 8007850:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8007944 <FusionAhrsSetSettings+0x180>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	edd3 7a04 	vldr	s15, [r3, #16]
 8007860:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007868:	d01b      	beq.n	80078a2 <FusionAhrsSetSettings+0xde>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	edd3 7a04 	vldr	s15, [r3, #16]
 8007870:	eeb0 0a67 	vmov.f32	s0, s15
 8007874:	f7ff fae0 	bl	8006e38 <FusionDegreesToRadians>
 8007878:	eef0 7a40 	vmov.f32	s15, s0
 800787c:	eeb0 0a67 	vmov.f32	s0, s15
 8007880:	f012 f822 	bl	80198c8 <sinf>
 8007884:	eef0 7a40 	vmov.f32	s15, s0
 8007888:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800788c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007890:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8007894:	eeb0 0a67 	vmov.f32	s0, s15
 8007898:	f011 ffb8 	bl	801980c <powf>
 800789c:	eef0 7a40 	vmov.f32	s15, s0
 80078a0:	e001      	b.n	80078a6 <FusionAhrsSetSettings+0xe2>
 80078a2:	eddf 7a28 	vldr	s15, [pc, #160]	; 8007944 <FusionAhrsSetSettings+0x180>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	edc3 7a04 	vstr	s15, [r3, #16]
    ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	695a      	ldr	r2, [r3, #20]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	615a      	str	r2, [r3, #20]
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	695b      	ldr	r3, [r3, #20]
 80078b8:	461a      	mov	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	461a      	mov	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	671a      	str	r2, [r3, #112]	; 0x70
    if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable acceleration and magnetic rejection features if gain is zero
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80078ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80078d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078d6:	d003      	beq.n	80078e0 <FusionAhrsSetSettings+0x11c>
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d105      	bne.n	80078ec <FusionAhrsSetSettings+0x128>
        ahrs->settings.accelerationRejection = FLT_MAX;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a19      	ldr	r2, [pc, #100]	; (8007948 <FusionAhrsSetSettings+0x184>)
 80078e4:	60da      	str	r2, [r3, #12]
        ahrs->settings.magneticRejection = FLT_MAX;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a17      	ldr	r2, [pc, #92]	; (8007948 <FusionAhrsSetSettings+0x184>)
 80078ea:	611a      	str	r2, [r3, #16]
    }
    if (ahrs->initialising == false) {
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80078f2:	f083 0301 	eor.w	r3, r3, #1
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d003      	beq.n	8007904 <FusionAhrsSetSettings+0x140>
        ahrs->rampedGain = ahrs->settings.gain;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	639a      	str	r2, [r3, #56]	; 0x38
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	edd3 7a01 	vldr	s15, [r3, #4]
 800790a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800790e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007912:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8007916:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

    ahrs->fusionEulerOffset = FUSION_EULER_ZERO;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f04f 0200 	mov.w	r2, #0
 8007926:	675a      	str	r2, [r3, #116]	; 0x74
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f04f 0200 	mov.w	r2, #0
 800792e:	679a      	str	r2, [r3, #120]	; 0x78
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f04f 0200 	mov.w	r2, #0
 8007936:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8007938:	bf00      	nop
 800793a:	3718      	adds	r7, #24
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	3f7ae148 	.word	0x3f7ae148
 8007944:	7f7fffff 	.word	0x7f7fffff
 8007948:	7f7fffff 	.word	0x7f7fffff

0800794c <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 800794c:	b590      	push	{r4, r7, lr}
 800794e:	b0bf      	sub	sp, #252	; 0xfc
 8007950:	af00      	add	r7, sp, #0
 8007952:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007954:	eeb0 5a61 	vmov.f32	s10, s3
 8007958:	eef0 5a42 	vmov.f32	s11, s4
 800795c:	eeb0 6a62 	vmov.f32	s12, s5
 8007960:	eef0 6a43 	vmov.f32	s13, s6
 8007964:	eeb0 7a63 	vmov.f32	s14, s7
 8007968:	eef0 7a44 	vmov.f32	s15, s8
 800796c:	edc7 4a01 	vstr	s9, [r7, #4]
 8007970:	ed87 0a08 	vstr	s0, [r7, #32]
 8007974:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 8007978:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 800797c:	ed87 5a05 	vstr	s10, [r7, #20]
 8007980:	edc7 5a06 	vstr	s11, [r7, #24]
 8007984:	ed87 6a07 	vstr	s12, [r7, #28]
 8007988:	edc7 6a02 	vstr	s13, [r7, #8]
 800798c:	ed87 7a03 	vstr	s14, [r7, #12]
 8007990:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 8007994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007996:	3328      	adds	r3, #40	; 0x28
 8007998:	f107 0214 	add.w	r2, r7, #20
 800799c:	ca07      	ldmia	r2, {r0, r1, r2}
 800799e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Reinitialise if gyroscope range exceeded
    if ((fabs(gyroscope.axis.x) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.y) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.z) > ahrs->settings.gyroscopeRange)) {
 80079a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80079a6:	eeb0 7ae7 	vabs.f32	s14, s15
 80079aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80079b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80079b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b8:	dc17      	bgt.n	80079ea <FusionAhrsUpdate+0x9e>
 80079ba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80079be:	eeb0 7ae7 	vabs.f32	s14, s15
 80079c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80079c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80079cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d0:	dc0b      	bgt.n	80079ea <FusionAhrsUpdate+0x9e>
 80079d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80079d6:	eeb0 7ae7 	vabs.f32	s14, s15
 80079da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80079e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80079e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e8:	dd15      	ble.n	8007a16 <FusionAhrsUpdate+0xca>
        const FusionQuaternion quaternion = ahrs->quaternion;
 80079ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ec:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80079f0:	3318      	adds	r3, #24
 80079f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80079f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        FusionAhrsReset(ahrs);
 80079f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079fa:	f7ff fe7f 	bl	80076fc <FusionAhrsReset>
        ahrs->quaternion = quaternion;
 80079fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a00:	f103 0418 	add.w	r4, r3, #24
 8007a04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007a08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007a0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        ahrs->angularRateRecovery = true;
 8007a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 8007a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d02d      	beq.n	8007a7c <FusionAhrsUpdate+0x130>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 8007a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a22:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8007a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a28:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8007a2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007a30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 8007a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a40:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8007a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a46:	edd3 7a01 	vldr	s15, [r3, #4]
 8007a4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a52:	d407      	bmi.n	8007a64 <FusionAhrsUpdate+0x118>
 8007a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a56:	edd3 7a01 	vldr	s15, [r3, #4]
 8007a5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a62:	d10b      	bne.n	8007a7c <FusionAhrsUpdate+0x130>
            ahrs->rampedGain = ahrs->settings.gain;
 8007a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6a:	639a      	str	r2, [r3, #56]	; 0x38
            ahrs->initialising = false;
 8007a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            ahrs->angularRateRecovery = false;
 8007a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 8007a7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a7e:	f000 faf4 	bl	800806a <HalfGravity>
 8007a82:	eef0 6a40 	vmov.f32	s13, s0
 8007a86:	eeb0 7a60 	vmov.f32	s14, s1
 8007a8a:	eef0 7a41 	vmov.f32	s15, s2
 8007a8e:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 8007a92:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 8007a96:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8007a9a:	f04f 0300 	mov.w	r3, #0
 8007a9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007aa2:	f04f 0300 	mov.w	r3, #0
 8007aa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007aaa:	f04f 0300 	mov.w	r3, #0
 8007aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 8007ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    if (FusionVectorIsZero(accelerometer) == false) {
 8007aba:	edd7 6a05 	vldr	s13, [r7, #20]
 8007abe:	ed97 7a06 	vldr	s14, [r7, #24]
 8007ac2:	edd7 7a07 	vldr	s15, [r7, #28]
 8007ac6:	eeb0 0a66 	vmov.f32	s0, s13
 8007aca:	eef0 0a47 	vmov.f32	s1, s14
 8007ace:	eeb0 1a67 	vmov.f32	s2, s15
 8007ad2:	f7ff f9f5 	bl	8006ec0 <FusionVectorIsZero>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	f083 0301 	eor.w	r3, r3, #1
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 809c 	beq.w	8007c1c <FusionAhrsUpdate+0x2d0>

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = Feedback(FusionVectorNormalise(accelerometer), halfGravity);
 8007ae4:	edd7 6a05 	vldr	s13, [r7, #20]
 8007ae8:	ed97 7a06 	vldr	s14, [r7, #24]
 8007aec:	edd7 7a07 	vldr	s15, [r7, #28]
 8007af0:	eeb0 0a66 	vmov.f32	s0, s13
 8007af4:	eef0 0a47 	vmov.f32	s1, s14
 8007af8:	eeb0 1a67 	vmov.f32	s2, s15
 8007afc:	f7ff fc16 	bl	800732c <FusionVectorNormalise>
 8007b00:	eef0 6a40 	vmov.f32	s13, s0
 8007b04:	eeb0 7a60 	vmov.f32	s14, s1
 8007b08:	eef0 7a41 	vmov.f32	s15, s2
 8007b0c:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 8007b10:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 8007b14:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 8007b18:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8007b1a:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 8007b1e:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8007b22:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 8007b26:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 8007b2a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8007b2e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8007b32:	eef0 1a45 	vmov.f32	s3, s10
 8007b36:	eeb0 2a65 	vmov.f32	s4, s11
 8007b3a:	eef0 2a46 	vmov.f32	s5, s12
 8007b3e:	eeb0 0a66 	vmov.f32	s0, s13
 8007b42:	eef0 0a47 	vmov.f32	s1, s14
 8007b46:	eeb0 1a67 	vmov.f32	s2, s15
 8007b4a:	f000 fc55 	bl	80083f8 <Feedback>
 8007b4e:	eef0 6a40 	vmov.f32	s13, s0
 8007b52:	eeb0 7a60 	vmov.f32	s14, s1
 8007b56:	eef0 7a41 	vmov.f32	s15, s2
 8007b5a:	edc4 6a11 	vstr	s13, [r4, #68]	; 0x44
 8007b5e:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 8007b62:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c

        // Don't ignore accelerometer if acceleration error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection))) {
 8007b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d118      	bne.n	8007ba2 <FusionAhrsUpdate+0x256>
 8007b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b72:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8007b76:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8007b7a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8007b7e:	eeb0 0a66 	vmov.f32	s0, s13
 8007b82:	eef0 0a47 	vmov.f32	s1, s14
 8007b86:	eeb0 1a67 	vmov.f32	s2, s15
 8007b8a:	f7ff fb85 	bl	8007298 <FusionVectorMagnitudeSquared>
 8007b8e:	eeb0 7a40 	vmov.f32	s14, s0
 8007b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b94:	edd3 7a03 	vldr	s15, [r3, #12]
 8007b98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba0:	d80a      	bhi.n	8007bb8 <FusionAhrsUpdate+0x26c>
            ahrs->accelerometerIgnored = false;
 8007ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            ahrs->accelerationRecoveryTrigger -= 9;
 8007baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bae:	f1a3 0209 	sub.w	r2, r3, #9
 8007bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb4:	661a      	str	r2, [r3, #96]	; 0x60
 8007bb6:	e004      	b.n	8007bc2 <FusionAhrsUpdate+0x276>
        } else {
            ahrs->accelerationRecoveryTrigger += 1;
 8007bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bbc:	1c5a      	adds	r2, r3, #1
 8007bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc0:	661a      	str	r2, [r3, #96]	; 0x60
        }

        // Don't ignore accelerometer during acceleration recovery
        if (ahrs->accelerationRecoveryTrigger > ahrs->accelerationRecoveryTimeout) {
 8007bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	dd07      	ble.n	8007bde <FusionAhrsUpdate+0x292>
            ahrs->accelerationRecoveryTimeout = 0;
 8007bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	665a      	str	r2, [r3, #100]	; 0x64
            ahrs->accelerometerIgnored = false;
 8007bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8007bdc:	e004      	b.n	8007be8 <FusionAhrsUpdate+0x29c>
        } else {
            ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8007bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	461a      	mov	r2, r3
 8007be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be6:	665a      	str	r2, [r3, #100]	; 0x64
        }
        ahrs->accelerationRecoveryTrigger = Clamp(ahrs->accelerationRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 8007be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bea:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8007bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	f000 fcb5 	bl	8008562 <Clamp>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfc:	661a      	str	r2, [r3, #96]	; 0x60

        // Apply accelerometer feedback
        if (ahrs->accelerometerIgnored == false) {
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c04:	f083 0301 	eor.w	r3, r3, #1
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d006      	beq.n	8007c1c <FusionAhrsUpdate+0x2d0>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 8007c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c10:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007c14:	3244      	adds	r2, #68	; 0x44
 8007c16:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 8007c1c:	f04f 0300 	mov.w	r3, #0
 8007c20:	673b      	str	r3, [r7, #112]	; 0x70
 8007c22:	f04f 0300 	mov.w	r3, #0
 8007c26:	677b      	str	r3, [r7, #116]	; 0x74
 8007c28:	f04f 0300 	mov.w	r3, #0
 8007c2c:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = true;
 8007c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    if (FusionVectorIsZero(magnetometer) == false) {
 8007c36:	edd7 6a02 	vldr	s13, [r7, #8]
 8007c3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8007c3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007c42:	eeb0 0a66 	vmov.f32	s0, s13
 8007c46:	eef0 0a47 	vmov.f32	s1, s14
 8007c4a:	eeb0 1a67 	vmov.f32	s2, s15
 8007c4e:	f7ff f937 	bl	8006ec0 <FusionVectorIsZero>
 8007c52:	4603      	mov	r3, r0
 8007c54:	f083 0301 	eor.w	r3, r3, #1
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 80d1 	beq.w	8007e02 <FusionAhrsUpdate+0x4b6>

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 8007c60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c62:	f000 fabf 	bl	80081e4 <HalfMagnetic>
 8007c66:	eef0 6a40 	vmov.f32	s13, s0
 8007c6a:	eeb0 7a60 	vmov.f32	s14, s1
 8007c6e:	eef0 7a41 	vmov.f32	s15, s2
 8007c72:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 8007c76:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 8007c7a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = Feedback(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 8007c7e:	ed97 5a02 	vldr	s10, [r7, #8]
 8007c82:	edd7 5a03 	vldr	s11, [r7, #12]
 8007c86:	ed97 6a04 	vldr	s12, [r7, #16]
 8007c8a:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8007c8e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8007c92:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8007c96:	eef0 1a45 	vmov.f32	s3, s10
 8007c9a:	eeb0 2a65 	vmov.f32	s4, s11
 8007c9e:	eef0 2a46 	vmov.f32	s5, s12
 8007ca2:	eeb0 0a66 	vmov.f32	s0, s13
 8007ca6:	eef0 0a47 	vmov.f32	s1, s14
 8007caa:	eeb0 1a67 	vmov.f32	s2, s15
 8007cae:	f7ff fa37 	bl	8007120 <FusionVectorCrossProduct>
 8007cb2:	eef0 6a40 	vmov.f32	s13, s0
 8007cb6:	eeb0 7a60 	vmov.f32	s14, s1
 8007cba:	eef0 7a41 	vmov.f32	s15, s2
 8007cbe:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 8007cc2:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 8007cc6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 8007cca:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8007cce:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8007cd2:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8007cd6:	eeb0 0a66 	vmov.f32	s0, s13
 8007cda:	eef0 0a47 	vmov.f32	s1, s14
 8007cde:	eeb0 1a67 	vmov.f32	s2, s15
 8007ce2:	f7ff fb23 	bl	800732c <FusionVectorNormalise>
 8007ce6:	eef0 6a40 	vmov.f32	s13, s0
 8007cea:	eeb0 7a60 	vmov.f32	s14, s1
 8007cee:	eef0 7a41 	vmov.f32	s15, s2
 8007cf2:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 8007cf6:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 8007cfa:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 8007cfe:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8007d00:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 8007d04:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8007d08:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 8007d0c:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8007d10:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8007d14:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8007d18:	eef0 1a45 	vmov.f32	s3, s10
 8007d1c:	eeb0 2a65 	vmov.f32	s4, s11
 8007d20:	eef0 2a46 	vmov.f32	s5, s12
 8007d24:	eeb0 0a66 	vmov.f32	s0, s13
 8007d28:	eef0 0a47 	vmov.f32	s1, s14
 8007d2c:	eeb0 1a67 	vmov.f32	s2, s15
 8007d30:	f000 fb62 	bl	80083f8 <Feedback>
 8007d34:	eef0 6a40 	vmov.f32	s13, s0
 8007d38:	eeb0 7a60 	vmov.f32	s14, s1
 8007d3c:	eef0 7a41 	vmov.f32	s15, s2
 8007d40:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
 8007d44:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 8007d48:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58

        // Don't ignore magnetometer if magnetic error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection))) {
 8007d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d118      	bne.n	8007d88 <FusionAhrsUpdate+0x43c>
 8007d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d58:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8007d5c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8007d60:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007d64:	eeb0 0a66 	vmov.f32	s0, s13
 8007d68:	eef0 0a47 	vmov.f32	s1, s14
 8007d6c:	eeb0 1a67 	vmov.f32	s2, s15
 8007d70:	f7ff fa92 	bl	8007298 <FusionVectorMagnitudeSquared>
 8007d74:	eeb0 7a40 	vmov.f32	s14, s0
 8007d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7a:	edd3 7a04 	vldr	s15, [r3, #16]
 8007d7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d86:	d80a      	bhi.n	8007d9e <FusionAhrsUpdate+0x452>
            ahrs->magnetometerIgnored = false;
 8007d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            ahrs->magneticRecoveryTrigger -= 9;
 8007d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d94:	f1a3 0209 	sub.w	r2, r3, #9
 8007d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9a:	66da      	str	r2, [r3, #108]	; 0x6c
 8007d9c:	e004      	b.n	8007da8 <FusionAhrsUpdate+0x45c>
        } else {
            ahrs->magneticRecoveryTrigger += 1;
 8007d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007da2:	1c5a      	adds	r2, r3, #1
 8007da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da6:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        // Don't ignore magnetometer during magnetic recovery
        if (ahrs->magneticRecoveryTrigger > ahrs->magneticRecoveryTimeout) {
 8007da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007daa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db0:	429a      	cmp	r2, r3
 8007db2:	dd07      	ble.n	8007dc4 <FusionAhrsUpdate+0x478>
            ahrs->magneticRecoveryTimeout = 0;
 8007db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db6:	2200      	movs	r2, #0
 8007db8:	671a      	str	r2, [r3, #112]	; 0x70
            ahrs->magnetometerIgnored = false;
 8007dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8007dc2:	e004      	b.n	8007dce <FusionAhrsUpdate+0x482>
        } else {
            ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8007dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	461a      	mov	r2, r3
 8007dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dcc:	671a      	str	r2, [r3, #112]	; 0x70
        }
        ahrs->magneticRecoveryTrigger = Clamp(ahrs->magneticRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 8007dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	2100      	movs	r1, #0
 8007dda:	f000 fbc2 	bl	8008562 <Clamp>
 8007dde:	4602      	mov	r2, r0
 8007de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de2:	66da      	str	r2, [r3, #108]	; 0x6c

        // Apply magnetometer feedback
        if (ahrs->magnetometerIgnored == false) {
 8007de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8007dea:	f083 0301 	eor.w	r3, r3, #1
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d006      	beq.n	8007e02 <FusionAhrsUpdate+0x4b6>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 8007df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007df6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007dfa:	3250      	adds	r2, #80	; 0x50
 8007dfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8007dfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 8007e02:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8007e06:	f7ff f817 	bl	8006e38 <FusionDegreesToRadians>
 8007e0a:	eeb0 6a40 	vmov.f32	s12, s0
 8007e0e:	edd7 6a08 	vldr	s13, [r7, #32]
 8007e12:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007e16:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007e1a:	eef0 1a46 	vmov.f32	s3, s12
 8007e1e:	eeb0 0a66 	vmov.f32	s0, s13
 8007e22:	eef0 0a47 	vmov.f32	s1, s14
 8007e26:	eeb0 1a67 	vmov.f32	s2, s15
 8007e2a:	f7ff f8e7 	bl	8006ffc <FusionVectorMultiplyScalar>
 8007e2e:	eef0 6a40 	vmov.f32	s13, s0
 8007e32:	eeb0 7a60 	vmov.f32	s14, s1
 8007e36:	eef0 7a41 	vmov.f32	s15, s2
 8007e3a:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 8007e3e:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 8007e42:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 8007e46:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 8007e4a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8007e4e:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 8007e52:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8007e56:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8007e5a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007e5e:	eef0 1a45 	vmov.f32	s3, s10
 8007e62:	eeb0 2a65 	vmov.f32	s4, s11
 8007e66:	eef0 2a46 	vmov.f32	s5, s12
 8007e6a:	eeb0 0a66 	vmov.f32	s0, s13
 8007e6e:	eef0 0a47 	vmov.f32	s1, s14
 8007e72:	eeb0 1a67 	vmov.f32	s2, s15
 8007e76:	f7ff f853 	bl	8006f20 <FusionVectorAdd>
 8007e7a:	eef0 6a40 	vmov.f32	s13, s0
 8007e7e:	eeb0 7a60 	vmov.f32	s14, s1
 8007e82:	eef0 7a41 	vmov.f32	s15, s2
 8007e86:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 8007e8a:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 8007e8e:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e94:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8007e98:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 8007e9c:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8007ea0:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8007ea4:	eef0 1a46 	vmov.f32	s3, s12
 8007ea8:	eeb0 0a66 	vmov.f32	s0, s13
 8007eac:	eef0 0a47 	vmov.f32	s1, s14
 8007eb0:	eeb0 1a67 	vmov.f32	s2, s15
 8007eb4:	f7ff f8a2 	bl	8006ffc <FusionVectorMultiplyScalar>
 8007eb8:	eef0 6a40 	vmov.f32	s13, s0
 8007ebc:	eeb0 7a60 	vmov.f32	s14, s1
 8007ec0:	eef0 7a41 	vmov.f32	s15, s2
 8007ec4:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 8007ec8:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 8007ecc:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 8007ed0:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 8007ed4:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 8007ed8:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 8007edc:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8007ee0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8007ee4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8007ee8:	eef0 1a45 	vmov.f32	s3, s10
 8007eec:	eeb0 2a65 	vmov.f32	s4, s11
 8007ef0:	eef0 2a46 	vmov.f32	s5, s12
 8007ef4:	eeb0 0a66 	vmov.f32	s0, s13
 8007ef8:	eef0 0a47 	vmov.f32	s1, s14
 8007efc:	eeb0 1a67 	vmov.f32	s2, s15
 8007f00:	f7ff f80e 	bl	8006f20 <FusionVectorAdd>
 8007f04:	eef0 6a40 	vmov.f32	s13, s0
 8007f08:	eeb0 7a60 	vmov.f32	s14, s1
 8007f0c:	eef0 7a41 	vmov.f32	s15, s2
 8007f10:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 8007f14:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 8007f18:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 8007f1c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8007f20:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007f24:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8007f28:	edd7 1a01 	vldr	s3, [r7, #4]
 8007f2c:	eeb0 0a66 	vmov.f32	s0, s13
 8007f30:	eef0 0a47 	vmov.f32	s1, s14
 8007f34:	eeb0 1a67 	vmov.f32	s2, s15
 8007f38:	f7ff f860 	bl	8006ffc <FusionVectorMultiplyScalar>
 8007f3c:	eef0 6a40 	vmov.f32	s13, s0
 8007f40:	eeb0 7a60 	vmov.f32	s14, s1
 8007f44:	eef0 7a41 	vmov.f32	s15, s2
 8007f48:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 8007f4c:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 8007f50:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 8007f54:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 8007f58:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 8007f5c:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 8007f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f62:	ed93 6a06 	vldr	s12, [r3, #24]
 8007f66:	edd3 6a07 	vldr	s13, [r3, #28]
 8007f6a:	ed93 7a08 	vldr	s14, [r3, #32]
 8007f6e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007f72:	eeb0 2a64 	vmov.f32	s4, s9
 8007f76:	eef0 2a45 	vmov.f32	s5, s10
 8007f7a:	eeb0 3a65 	vmov.f32	s6, s11
 8007f7e:	eeb0 0a46 	vmov.f32	s0, s12
 8007f82:	eef0 0a66 	vmov.f32	s1, s13
 8007f86:	eeb0 1a47 	vmov.f32	s2, s14
 8007f8a:	eef0 1a67 	vmov.f32	s3, s15
 8007f8e:	f7ff fa82 	bl	8007496 <FusionQuaternionMultiplyVector>
 8007f92:	eeb0 6a40 	vmov.f32	s12, s0
 8007f96:	eef0 6a60 	vmov.f32	s13, s1
 8007f9a:	eeb0 7a41 	vmov.f32	s14, s2
 8007f9e:	eef0 7a61 	vmov.f32	s15, s3
 8007fa2:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 8007fa6:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 8007faa:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 8007fae:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 8007fb2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8007fb4:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 8007fb8:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 8007fbc:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 8007fc0:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 8007fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc6:	ed93 6a06 	vldr	s12, [r3, #24]
 8007fca:	edd3 6a07 	vldr	s13, [r3, #28]
 8007fce:	ed93 7a08 	vldr	s14, [r3, #32]
 8007fd2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007fd6:	eeb0 2a44 	vmov.f32	s4, s8
 8007fda:	eef0 2a64 	vmov.f32	s5, s9
 8007fde:	eeb0 3a45 	vmov.f32	s6, s10
 8007fe2:	eef0 3a65 	vmov.f32	s7, s11
 8007fe6:	eeb0 0a46 	vmov.f32	s0, s12
 8007fea:	eef0 0a66 	vmov.f32	s1, s13
 8007fee:	eeb0 1a47 	vmov.f32	s2, s14
 8007ff2:	eef0 1a67 	vmov.f32	s3, s15
 8007ff6:	f7ff f9ec 	bl	80073d2 <FusionQuaternionAdd>
 8007ffa:	eeb0 6a40 	vmov.f32	s12, s0
 8007ffe:	eef0 6a60 	vmov.f32	s13, s1
 8008002:	eeb0 7a41 	vmov.f32	s14, s2
 8008006:	eef0 7a61 	vmov.f32	s15, s3
 800800a:	ed84 6a06 	vstr	s12, [r4, #24]
 800800e:	edc4 6a07 	vstr	s13, [r4, #28]
 8008012:	ed84 7a08 	vstr	s14, [r4, #32]
 8008016:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 800801a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800801c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801e:	ed93 6a06 	vldr	s12, [r3, #24]
 8008022:	edd3 6a07 	vldr	s13, [r3, #28]
 8008026:	ed93 7a08 	vldr	s14, [r3, #32]
 800802a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800802e:	eeb0 0a46 	vmov.f32	s0, s12
 8008032:	eef0 0a66 	vmov.f32	s1, s13
 8008036:	eeb0 1a47 	vmov.f32	s2, s14
 800803a:	eef0 1a67 	vmov.f32	s3, s15
 800803e:	f7ff faca 	bl	80075d6 <FusionQuaternionNormalise>
 8008042:	eeb0 6a40 	vmov.f32	s12, s0
 8008046:	eef0 6a60 	vmov.f32	s13, s1
 800804a:	eeb0 7a41 	vmov.f32	s14, s2
 800804e:	eef0 7a61 	vmov.f32	s15, s3
 8008052:	ed84 6a06 	vstr	s12, [r4, #24]
 8008056:	edc4 6a07 	vstr	s13, [r4, #28]
 800805a:	ed84 7a08 	vstr	s14, [r4, #32]
 800805e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 8008062:	bf00      	nop
 8008064:	37fc      	adds	r7, #252	; 0xfc
 8008066:	46bd      	mov	sp, r7
 8008068:	bd90      	pop	{r4, r7, pc}

0800806a <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static inline FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 800806a:	b480      	push	{r7}
 800806c:	b093      	sub	sp, #76	; 0x4c
 800806e:	af00      	add	r7, sp, #0
 8008070:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	2b01      	cmp	r3, #1
 8008078:	dc02      	bgt.n	8008080 <HalfGravity+0x16>
 800807a:	2b00      	cmp	r3, #0
 800807c:	da03      	bge.n	8008086 <HalfGravity+0x1c>
 800807e:	e094      	b.n	80081aa <HalfGravity+0x140>
 8008080:	2b02      	cmp	r3, #2
 8008082:	d048      	beq.n	8008116 <HalfGravity+0xac>
 8008084:	e091      	b.n	80081aa <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	ed93 7a07 	vldr	s14, [r3, #28]
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008092:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	edd3 6a06 	vldr	s13, [r3, #24]
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	edd3 7a08 	vldr	s15, [r3, #32]
 80080a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80080a6:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80080aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	ed93 7a08 	vldr	s14, [r3, #32]
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80080ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	edd3 6a06 	vldr	s13, [r3, #24]
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	edd3 7a07 	vldr	s15, [r3, #28]
 80080ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80080ce:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80080d2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	ed93 7a06 	vldr	s14, [r3, #24]
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	edd3 7a06 	vldr	s15, [r3, #24]
 80080e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80080ea:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80080fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80080fe:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8008102:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 8008106:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800810a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800810e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008110:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008114:	e052      	b.n	80081bc <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	ed93 7a06 	vldr	s14, [r3, #24]
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	edd3 7a08 	vldr	s15, [r3, #32]
 8008122:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	edd3 6a07 	vldr	s13, [r3, #28]
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008132:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008136:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800813a:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	ed93 7a08 	vldr	s14, [r3, #32]
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800814a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	edd3 6a06 	vldr	s13, [r3, #24]
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	edd3 7a07 	vldr	s15, [r3, #28]
 800815a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800815e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008162:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 8008166:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	ed93 7a06 	vldr	s14, [r3, #24]
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	edd3 7a06 	vldr	s15, [r3, #24]
 8008176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800817a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800817e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800818e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008192:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8008196:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 800819a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800819e:	f107 0218 	add.w	r2, r7, #24
 80081a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80081a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80081a8:	e008      	b.n	80081bc <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 80081aa:	f04f 0300 	mov.w	r3, #0
 80081ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081b0:	f04f 0300 	mov.w	r3, #0
 80081b4:	643b      	str	r3, [r7, #64]	; 0x40
 80081b6:	f04f 0300 	mov.w	r3, #0
 80081ba:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 80081bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081c2:	ee06 1a90 	vmov	s13, r1
 80081c6:	ee07 2a10 	vmov	s14, r2
 80081ca:	ee07 3a90 	vmov	s15, r3
 80081ce:	eeb0 0a66 	vmov.f32	s0, s13
 80081d2:	eef0 0a47 	vmov.f32	s1, s14
 80081d6:	eeb0 1a67 	vmov.f32	s2, s15
 80081da:	374c      	adds	r7, #76	; 0x4c
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static inline FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 80081e4:	b480      	push	{r7}
 80081e6:	b097      	sub	sp, #92	; 0x5c
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	f000 809a 	beq.w	800832a <HalfMagnetic+0x146>
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	f300 80e1 	bgt.w	80083be <HalfMagnetic+0x1da>
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d002      	beq.n	8008206 <HalfMagnetic+0x22>
 8008200:	2b01      	cmp	r3, #1
 8008202:	d048      	beq.n	8008296 <HalfMagnetic+0xb2>
 8008204:	e0db      	b.n	80083be <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	ed93 7a07 	vldr	s14, [r3, #28]
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	edd3 7a08 	vldr	s15, [r3, #32]
 8008212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	edd3 6a06 	vldr	s13, [r3, #24]
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008222:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008226:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800822a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	ed93 7a06 	vldr	s14, [r3, #24]
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	edd3 7a06 	vldr	s15, [r3, #24]
 800823a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800823e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008242:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	edd3 6a08 	vldr	s13, [r3, #32]
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	edd3 7a08 	vldr	s15, [r3, #32]
 8008252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008256:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800825a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	ed93 7a08 	vldr	s14, [r3, #32]
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800826a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	edd3 6a06 	vldr	s13, [r3, #24]
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	edd3 7a07 	vldr	s15, [r3, #28]
 800827a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800827e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8008282:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 8008286:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800828a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800828e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008290:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008294:	e09c      	b.n	80083d0 <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	ed93 7a06 	vldr	s14, [r3, #24]
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	edd3 7a06 	vldr	s15, [r3, #24]
 80082a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80082aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	edd3 6a07 	vldr	s13, [r3, #28]
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	edd3 7a07 	vldr	s15, [r3, #28]
 80082ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80082be:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80082c2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	ed93 7a06 	vldr	s14, [r3, #24]
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80082d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	edd3 6a07 	vldr	s13, [r3, #28]
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	edd3 7a08 	vldr	s15, [r3, #32]
 80082e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80082e6:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80082ea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	ed93 7a07 	vldr	s14, [r3, #28]
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80082fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	edd3 6a06 	vldr	s13, [r3, #24]
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	edd3 7a08 	vldr	s15, [r3, #32]
 800830a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800830e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008312:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8008316:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800831a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800831e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008322:	ca07      	ldmia	r2, {r0, r1, r2}
 8008324:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008328:	e052      	b.n	80083d0 <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	ed93 7a07 	vldr	s14, [r3, #28]
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	edd3 7a08 	vldr	s15, [r3, #32]
 8008336:	ee27 7a27 	vmul.f32	s14, s14, s15
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	edd3 6a06 	vldr	s13, [r3, #24]
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008346:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800834a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800834e:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8008352:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	ed93 7a06 	vldr	s14, [r3, #24]
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	edd3 7a06 	vldr	s15, [r3, #24]
 8008362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008366:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800836a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	edd3 6a08 	vldr	s13, [r3, #32]
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	edd3 7a08 	vldr	s15, [r3, #32]
 800837a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800837e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8008382:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	ed93 7a06 	vldr	s14, [r3, #24]
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	edd3 7a07 	vldr	s15, [r3, #28]
 8008392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	edd3 6a08 	vldr	s13, [r3, #32]
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80083a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083a6:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80083aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 80083ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80083b2:	f107 021c 	add.w	r2, r7, #28
 80083b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80083b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80083bc:	e008      	b.n	80083d0 <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 80083be:	f04f 0300 	mov.w	r3, #0
 80083c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083c4:	f04f 0300 	mov.w	r3, #0
 80083c8:	653b      	str	r3, [r7, #80]	; 0x50
 80083ca:	f04f 0300 	mov.w	r3, #0
 80083ce:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 80083d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80083d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083d6:	ee06 1a90 	vmov	s13, r1
 80083da:	ee07 2a10 	vmov	s14, r2
 80083de:	ee07 3a90 	vmov	s15, r3
 80083e2:	eeb0 0a66 	vmov.f32	s0, s13
 80083e6:	eef0 0a47 	vmov.f32	s1, s14
 80083ea:	eeb0 1a67 	vmov.f32	s2, s15
 80083ee:	375c      	adds	r7, #92	; 0x5c
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <Feedback>:
 * @brief Returns the feedback.
 * @param sensor Sensor.
 * @param reference Reference.
 * @return Feedback.
 */
static inline FusionVector Feedback(const FusionVector sensor, const FusionVector reference) {
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b090      	sub	sp, #64	; 0x40
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	eeb0 5a40 	vmov.f32	s10, s0
 8008402:	eef0 5a60 	vmov.f32	s11, s1
 8008406:	eeb0 6a41 	vmov.f32	s12, s2
 800840a:	eef0 6a61 	vmov.f32	s13, s3
 800840e:	eeb0 7a42 	vmov.f32	s14, s4
 8008412:	eef0 7a62 	vmov.f32	s15, s5
 8008416:	ed87 5a07 	vstr	s10, [r7, #28]
 800841a:	edc7 5a08 	vstr	s11, [r7, #32]
 800841e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8008422:	edc7 6a04 	vstr	s13, [r7, #16]
 8008426:	ed87 7a05 	vstr	s14, [r7, #20]
 800842a:	edc7 7a06 	vstr	s15, [r7, #24]
    if (FusionVectorDotProduct(sensor, reference) < 0.0f) { // if error is >90 degrees
 800842e:	ed97 5a04 	vldr	s10, [r7, #16]
 8008432:	edd7 5a05 	vldr	s11, [r7, #20]
 8008436:	ed97 6a06 	vldr	s12, [r7, #24]
 800843a:	edd7 6a07 	vldr	s13, [r7, #28]
 800843e:	ed97 7a08 	vldr	s14, [r7, #32]
 8008442:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008446:	eef0 1a45 	vmov.f32	s3, s10
 800844a:	eeb0 2a65 	vmov.f32	s4, s11
 800844e:	eef0 2a46 	vmov.f32	s5, s12
 8008452:	eeb0 0a66 	vmov.f32	s0, s13
 8008456:	eef0 0a47 	vmov.f32	s1, s14
 800845a:	eeb0 1a67 	vmov.f32	s2, s15
 800845e:	f7fe fec5 	bl	80071ec <FusionVectorDotProduct>
 8008462:	eef0 7a40 	vmov.f32	s15, s0
 8008466:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800846a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800846e:	d540      	bpl.n	80084f2 <Feedback+0xfa>
        return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 8008470:	ed97 5a04 	vldr	s10, [r7, #16]
 8008474:	edd7 5a05 	vldr	s11, [r7, #20]
 8008478:	ed97 6a06 	vldr	s12, [r7, #24]
 800847c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008480:	ed97 7a08 	vldr	s14, [r7, #32]
 8008484:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008488:	eef0 1a45 	vmov.f32	s3, s10
 800848c:	eeb0 2a65 	vmov.f32	s4, s11
 8008490:	eef0 2a46 	vmov.f32	s5, s12
 8008494:	eeb0 0a66 	vmov.f32	s0, s13
 8008498:	eef0 0a47 	vmov.f32	s1, s14
 800849c:	eeb0 1a67 	vmov.f32	s2, s15
 80084a0:	f7fe fe3e 	bl	8007120 <FusionVectorCrossProduct>
 80084a4:	eef0 6a40 	vmov.f32	s13, s0
 80084a8:	eeb0 7a60 	vmov.f32	s14, s1
 80084ac:	eef0 7a41 	vmov.f32	s15, s2
 80084b0:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 80084b4:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 80084b8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 80084bc:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80084c0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80084c4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80084c8:	eeb0 0a66 	vmov.f32	s0, s13
 80084cc:	eef0 0a47 	vmov.f32	s1, s14
 80084d0:	eeb0 1a67 	vmov.f32	s2, s15
 80084d4:	f7fe ff2a 	bl	800732c <FusionVectorNormalise>
 80084d8:	eef0 6a40 	vmov.f32	s13, s0
 80084dc:	eeb0 7a60 	vmov.f32	s14, s1
 80084e0:	eef0 7a41 	vmov.f32	s15, s2
 80084e4:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 80084e8:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 80084ec:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80084f0:	e025      	b.n	800853e <Feedback+0x146>
    }
    return FusionVectorCrossProduct(sensor, reference);
 80084f2:	ed97 5a04 	vldr	s10, [r7, #16]
 80084f6:	edd7 5a05 	vldr	s11, [r7, #20]
 80084fa:	ed97 6a06 	vldr	s12, [r7, #24]
 80084fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008502:	ed97 7a08 	vldr	s14, [r7, #32]
 8008506:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800850a:	eef0 1a45 	vmov.f32	s3, s10
 800850e:	eeb0 2a65 	vmov.f32	s4, s11
 8008512:	eef0 2a46 	vmov.f32	s5, s12
 8008516:	eeb0 0a66 	vmov.f32	s0, s13
 800851a:	eef0 0a47 	vmov.f32	s1, s14
 800851e:	eeb0 1a67 	vmov.f32	s2, s15
 8008522:	f7fe fdfd 	bl	8007120 <FusionVectorCrossProduct>
 8008526:	eef0 6a40 	vmov.f32	s13, s0
 800852a:	eeb0 7a60 	vmov.f32	s14, s1
 800852e:	eef0 7a41 	vmov.f32	s15, s2
 8008532:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8008536:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800853a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
}
 800853e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008544:	ee06 1a90 	vmov	s13, r1
 8008548:	ee07 2a10 	vmov	s14, r2
 800854c:	ee07 3a90 	vmov	s15, r3
 8008550:	eeb0 0a66 	vmov.f32	s0, s13
 8008554:	eef0 0a47 	vmov.f32	s1, s14
 8008558:	eeb0 1a67 	vmov.f32	s2, s15
 800855c:	3740      	adds	r7, #64	; 0x40
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <Clamp>:
 * @param value Value.
 * @param min Minimum value.
 * @param max Maximum value.
 * @return Value limited to maximum and minimum.
 */
static inline int Clamp(const int value, const int min, const int max) {
 8008562:	b480      	push	{r7}
 8008564:	b085      	sub	sp, #20
 8008566:	af00      	add	r7, sp, #0
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	607a      	str	r2, [r7, #4]
    if (value < min) {
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	429a      	cmp	r2, r3
 8008574:	da01      	bge.n	800857a <Clamp+0x18>
        return min;
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	e006      	b.n	8008588 <Clamp+0x26>
    }
    if (value > max) {
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	429a      	cmp	r2, r3
 8008580:	dd01      	ble.n	8008586 <Clamp+0x24>
        return max;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	e000      	b.n	8008588 <Clamp+0x26>
    }
    return value;
 8008586:	68fb      	ldr	r3, [r7, #12]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3714      	adds	r7, #20
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 8008594:	b490      	push	{r4, r7}
 8008596:	b08a      	sub	sp, #40	; 0x28
 8008598:	af00      	add	r7, sp, #0
 800859a:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	f107 0418 	add.w	r4, r7, #24
 80085a2:	3318      	adds	r3, #24
 80085a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80085a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80085aa:	69b8      	ldr	r0, [r7, #24]
 80085ac:	69f9      	ldr	r1, [r7, #28]
 80085ae:	6a3a      	ldr	r2, [r7, #32]
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	ee06 0a10 	vmov	s12, r0
 80085b6:	ee06 1a90 	vmov	s13, r1
 80085ba:	ee07 2a10 	vmov	s14, r2
 80085be:	ee07 3a90 	vmov	s15, r3
}
 80085c2:	eeb0 0a46 	vmov.f32	s0, s12
 80085c6:	eef0 0a66 	vmov.f32	s1, s13
 80085ca:	eeb0 1a47 	vmov.f32	s2, s14
 80085ce:	eef0 1a67 	vmov.f32	s3, s15
 80085d2:	3728      	adds	r7, #40	; 0x28
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bc90      	pop	{r4, r7}
 80085d8:	4770      	bx	lr
	...

080085dc <FusionRadiansToDegrees>:
static inline float FusionRadiansToDegrees(const float radians) {
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 80085e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80085ea:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8008600 <FusionRadiansToDegrees+0x24>
 80085ee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80085f2:	eeb0 0a67 	vmov.f32	s0, s15
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	42652ee0 	.word	0x42652ee0

08008604 <FusionAsin>:
static inline float FusionAsin(const float value) {
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 800860e:	edd7 7a01 	vldr	s15, [r7, #4]
 8008612:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008616:	eef4 7ac7 	vcmpe.f32	s15, s14
 800861a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800861e:	d802      	bhi.n	8008626 <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8008620:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8008654 <FusionAsin+0x50>
 8008624:	e011      	b.n	800864a <FusionAsin+0x46>
    if (value >= 1.0f) {
 8008626:	edd7 7a01 	vldr	s15, [r7, #4]
 800862a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800862e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008636:	db02      	blt.n	800863e <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 8008638:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008658 <FusionAsin+0x54>
 800863c:	e005      	b.n	800864a <FusionAsin+0x46>
    return asinf(value);
 800863e:	ed97 0a01 	vldr	s0, [r7, #4]
 8008642:	f011 f8b5 	bl	80197b0 <asinf>
 8008646:	eef0 7a40 	vmov.f32	s15, s0
}
 800864a:	eeb0 0a67 	vmov.f32	s0, s15
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	bfc90fdb 	.word	0xbfc90fdb
 8008658:	3fc90fdb 	.word	0x3fc90fdb

0800865c <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 800865c:	b480      	push	{r7}
 800865e:	b091      	sub	sp, #68	; 0x44
 8008660:	af00      	add	r7, sp, #0
 8008662:	eeb0 5a40 	vmov.f32	s10, s0
 8008666:	eef0 5a60 	vmov.f32	s11, s1
 800866a:	eeb0 6a41 	vmov.f32	s12, s2
 800866e:	eef0 6a61 	vmov.f32	s13, s3
 8008672:	eeb0 7a42 	vmov.f32	s14, s4
 8008676:	eef0 7a62 	vmov.f32	s15, s5
 800867a:	ed87 5a07 	vstr	s10, [r7, #28]
 800867e:	edc7 5a08 	vstr	s11, [r7, #32]
 8008682:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8008686:	edc7 6a04 	vstr	s13, [r7, #16]
 800868a:	ed87 7a05 	vstr	s14, [r7, #20]
 800868e:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 8008692:	ed97 7a07 	vldr	s14, [r7, #28]
 8008696:	edd7 7a04 	vldr	s15, [r7, #16]
 800869a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800869e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 80086a2:	ed97 7a08 	vldr	s14, [r7, #32]
 80086a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80086aa:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80086ae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 80086b2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80086b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80086ba:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80086be:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80086c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80086c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80086ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80086cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80086d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80086d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d6:	ee06 1a90 	vmov	s13, r1
 80086da:	ee07 2a10 	vmov	s14, r2
 80086de:	ee07 3a90 	vmov	s15, r3
}
 80086e2:	eeb0 0a66 	vmov.f32	s0, s13
 80086e6:	eef0 0a47 	vmov.f32	s1, s14
 80086ea:	eeb0 1a67 	vmov.f32	s2, s15
 80086ee:	3744      	adds	r7, #68	; 0x44
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <FusionVectorSubtract>:
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 80086f8:	b480      	push	{r7}
 80086fa:	b091      	sub	sp, #68	; 0x44
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	eeb0 5a40 	vmov.f32	s10, s0
 8008702:	eef0 5a60 	vmov.f32	s11, s1
 8008706:	eeb0 6a41 	vmov.f32	s12, s2
 800870a:	eef0 6a61 	vmov.f32	s13, s3
 800870e:	eeb0 7a42 	vmov.f32	s14, s4
 8008712:	eef0 7a62 	vmov.f32	s15, s5
 8008716:	ed87 5a07 	vstr	s10, [r7, #28]
 800871a:	edc7 5a08 	vstr	s11, [r7, #32]
 800871e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8008722:	edc7 6a04 	vstr	s13, [r7, #16]
 8008726:	ed87 7a05 	vstr	s14, [r7, #20]
 800872a:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x - vectorB.axis.x,
 800872e:	ed97 7a07 	vldr	s14, [r7, #28]
 8008732:	edd7 7a04 	vldr	s15, [r7, #16]
 8008736:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800873a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 800873e:	ed97 7a08 	vldr	s14, [r7, #32]
 8008742:	edd7 7a05 	vldr	s15, [r7, #20]
 8008746:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800874a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 800874e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008752:	edd7 7a06 	vldr	s15, [r7, #24]
 8008756:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800875a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800875e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008762:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008766:	ca07      	ldmia	r2, {r0, r1, r2}
 8008768:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800876c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800876e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008772:	ee06 1a90 	vmov	s13, r1
 8008776:	ee07 2a10 	vmov	s14, r2
 800877a:	ee07 3a90 	vmov	s15, r3
}
 800877e:	eeb0 0a66 	vmov.f32	s0, s13
 8008782:	eef0 0a47 	vmov.f32	s1, s14
 8008786:	eeb0 1a67 	vmov.f32	s2, s15
 800878a:	3744      	adds	r7, #68	; 0x44
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8008794:	b480      	push	{r7}
 8008796:	b08f      	sub	sp, #60	; 0x3c
 8008798:	af00      	add	r7, sp, #0
 800879a:	eef0 6a40 	vmov.f32	s13, s0
 800879e:	eeb0 7a60 	vmov.f32	s14, s1
 80087a2:	eef0 7a41 	vmov.f32	s15, s2
 80087a6:	edc7 1a04 	vstr	s3, [r7, #16]
 80087aa:	edc7 6a05 	vstr	s13, [r7, #20]
 80087ae:	ed87 7a06 	vstr	s14, [r7, #24]
 80087b2:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 80087b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80087ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80087be:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80087c2:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 80087c6:	ed97 7a06 	vldr	s14, [r7, #24]
 80087ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80087ce:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80087d2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 80087d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80087da:	edd7 7a04 	vldr	s15, [r7, #16]
 80087de:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80087e2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 80087e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80087ea:	f107 0220 	add.w	r2, r7, #32
 80087ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80087f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80087f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087fa:	ee06 1a90 	vmov	s13, r1
 80087fe:	ee07 2a10 	vmov	s14, r2
 8008802:	ee07 3a90 	vmov	s15, r3
}
 8008806:	eeb0 0a66 	vmov.f32	s0, s13
 800880a:	eef0 0a47 	vmov.f32	s1, s14
 800880e:	eeb0 1a67 	vmov.f32	s2, s15
 8008812:	373c      	adds	r7, #60	; 0x3c
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <FusionQuaternionToEuler>:
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 800881c:	b580      	push	{r7, lr}
 800881e:	b090      	sub	sp, #64	; 0x40
 8008820:	af00      	add	r7, sp, #0
 8008822:	eeb0 6a40 	vmov.f32	s12, s0
 8008826:	eef0 6a60 	vmov.f32	s13, s1
 800882a:	eeb0 7a41 	vmov.f32	s14, s2
 800882e:	eef0 7a61 	vmov.f32	s15, s3
 8008832:	ed87 6a04 	vstr	s12, [r7, #16]
 8008836:	edc7 6a05 	vstr	s13, [r7, #20]
 800883a:	ed87 7a06 	vstr	s14, [r7, #24]
 800883e:	edc7 7a07 	vstr	s15, [r7, #28]
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 8008842:	ed97 7a06 	vldr	s14, [r7, #24]
 8008846:	edd7 7a06 	vldr	s15, [r7, #24]
 800884a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800884e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008852:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008856:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 800885a:	ed97 7a04 	vldr	s14, [r7, #16]
 800885e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008862:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008866:	edd7 6a06 	vldr	s13, [r7, #24]
 800886a:	edd7 7a07 	vldr	s15, [r7, #28]
 800886e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008872:	ee77 6a27 	vadd.f32	s13, s14, s15
 8008876:	ed97 7a05 	vldr	s14, [r7, #20]
 800887a:	edd7 7a05 	vldr	s15, [r7, #20]
 800887e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008882:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800888a:	eef0 0a67 	vmov.f32	s1, s15
 800888e:	eeb0 0a66 	vmov.f32	s0, s13
 8008892:	f010 ffb9 	bl	8019808 <atan2f>
 8008896:	eef0 7a40 	vmov.f32	s15, s0
 800889a:	eeb0 0a67 	vmov.f32	s0, s15
 800889e:	f7ff fe9d 	bl	80085dc <FusionRadiansToDegrees>
 80088a2:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 80088a6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 80088aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80088ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80088b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80088b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80088ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80088be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80088c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80088ca:	eeb0 0a67 	vmov.f32	s0, s15
 80088ce:	f7ff fe99 	bl	8008604 <FusionAsin>
 80088d2:	eef0 7a40 	vmov.f32	s15, s0
 80088d6:	eeb0 0a67 	vmov.f32	s0, s15
 80088da:	f7ff fe7f 	bl	80085dc <FusionRadiansToDegrees>
 80088de:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 80088e2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 80088e6:	ed97 7a04 	vldr	s14, [r7, #16]
 80088ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80088ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80088f2:	edd7 6a05 	vldr	s13, [r7, #20]
 80088f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80088fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80088fe:	ee77 6a27 	vadd.f32	s13, s14, s15
 8008902:	ed97 7a07 	vldr	s14, [r7, #28]
 8008906:	edd7 7a07 	vldr	s15, [r7, #28]
 800890a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800890e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008916:	eef0 0a67 	vmov.f32	s1, s15
 800891a:	eeb0 0a66 	vmov.f32	s0, s13
 800891e:	f010 ff73 	bl	8019808 <atan2f>
 8008922:	eef0 7a40 	vmov.f32	s15, s0
 8008926:	eeb0 0a67 	vmov.f32	s0, s15
 800892a:	f7ff fe57 	bl	80085dc <FusionRadiansToDegrees>
 800892e:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8008932:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return euler;
 8008936:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800893a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800893e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008940:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008944:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894a:	ee06 1a90 	vmov	s13, r1
 800894e:	ee07 2a10 	vmov	s14, r2
 8008952:	ee07 3a90 	vmov	s15, r3
}
 8008956:	eeb0 0a66 	vmov.f32	s0, s13
 800895a:	eef0 0a47 	vmov.f32	s1, s14
 800895e:	eeb0 1a67 	vmov.f32	s2, s15
 8008962:	3740      	adds	r7, #64	; 0x40
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <FusionOffsetUpdate>:

//------------------------------------------------------------------------------
// Functions

void FusionOffsetUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, uint16_t numCalPoints)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b098      	sub	sp, #96	; 0x60
 800896c:	af00      	add	r7, sp, #0
 800896e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008970:	eef0 4a41 	vmov.f32	s9, s2
 8008974:	eeb0 5a61 	vmov.f32	s10, s3
 8008978:	eef0 5a42 	vmov.f32	s11, s4
 800897c:	eeb0 6a62 	vmov.f32	s12, s5
 8008980:	eef0 6a43 	vmov.f32	s13, s6
 8008984:	eeb0 7a63 	vmov.f32	s14, s7
 8008988:	eef0 7a44 	vmov.f32	s15, s8
 800898c:	460b      	mov	r3, r1
 800898e:	ed87 0a08 	vstr	s0, [r7, #32]
 8008992:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 8008996:	edc7 4a0a 	vstr	s9, [r7, #40]	; 0x28
 800899a:	ed87 5a05 	vstr	s10, [r7, #20]
 800899e:	edc7 5a06 	vstr	s11, [r7, #24]
 80089a2:	ed87 6a07 	vstr	s12, [r7, #28]
 80089a6:	edc7 6a02 	vstr	s13, [r7, #8]
 80089aa:	ed87 7a03 	vstr	s14, [r7, #12]
 80089ae:	edc7 7a04 	vstr	s15, [r7, #16]
 80089b2:	80fb      	strh	r3, [r7, #6]
	// Init
	FusionEuler temp;
	float x = 0;
 80089b4:	f04f 0300 	mov.w	r3, #0
 80089b8:	65fb      	str	r3, [r7, #92]	; 0x5c
	float y = 0;
 80089ba:	f04f 0300 	mov.w	r3, #0
 80089be:	65bb      	str	r3, [r7, #88]	; 0x58
	float z = 0;
 80089c0:	f04f 0300 	mov.w	r3, #0
 80089c4:	657b      	str	r3, [r7, #84]	; 0x54

	// Zero guard
	if (numCalPoints == 0)
 80089c6:	88fb      	ldrh	r3, [r7, #6]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d101      	bne.n	80089d0 <FusionOffsetUpdate+0x68>
	{
		numCalPoints = 1;
 80089cc:	2301      	movs	r3, #1
 80089ce:	80fb      	strh	r3, [r7, #6]
	}

	// Save specified number of points
	for (uint16_t ii = 0; ii < numCalPoints; ii++)
 80089d0:	2300      	movs	r3, #0
 80089d2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80089d6:	e073      	b.n	8008ac0 <FusionOffsetUpdate+0x158>
	{
		FusionAhrsUpdate(ahrs, gyroscope, accelerometer, magnetometer, 0.005);
 80089d8:	ed97 3a02 	vldr	s6, [r7, #8]
 80089dc:	edd7 3a03 	vldr	s7, [r7, #12]
 80089e0:	ed97 4a04 	vldr	s8, [r7, #16]
 80089e4:	ed97 5a05 	vldr	s10, [r7, #20]
 80089e8:	edd7 5a06 	vldr	s11, [r7, #24]
 80089ec:	ed97 6a07 	vldr	s12, [r7, #28]
 80089f0:	edd7 6a08 	vldr	s13, [r7, #32]
 80089f4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80089f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80089fc:	eddf 4a47 	vldr	s9, [pc, #284]	; 8008b1c <FusionOffsetUpdate+0x1b4>
 8008a00:	eef0 1a45 	vmov.f32	s3, s10
 8008a04:	eeb0 2a65 	vmov.f32	s4, s11
 8008a08:	eef0 2a46 	vmov.f32	s5, s12
 8008a0c:	eeb0 0a66 	vmov.f32	s0, s13
 8008a10:	eef0 0a47 	vmov.f32	s1, s14
 8008a14:	eeb0 1a67 	vmov.f32	s2, s15
 8008a18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a1a:	f7fe ff97 	bl	800794c <FusionAhrsUpdate>
		temp = FusionQuaternionToEuler(FusionAhrsGetQuaternion(ahrs));
 8008a1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a20:	f7ff fdb8 	bl	8008594 <FusionAhrsGetQuaternion>
 8008a24:	eeb0 6a40 	vmov.f32	s12, s0
 8008a28:	eef0 6a60 	vmov.f32	s13, s1
 8008a2c:	eeb0 7a41 	vmov.f32	s14, s2
 8008a30:	eef0 7a61 	vmov.f32	s15, s3
 8008a34:	ed87 6a10 	vstr	s12, [r7, #64]	; 0x40
 8008a38:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 8008a3c:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 8008a40:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8008a44:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8008a48:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8008a4c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008a50:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8008a54:	eeb0 0a46 	vmov.f32	s0, s12
 8008a58:	eef0 0a66 	vmov.f32	s1, s13
 8008a5c:	eeb0 1a47 	vmov.f32	s2, s14
 8008a60:	eef0 1a67 	vmov.f32	s3, s15
 8008a64:	f7ff feda 	bl	800881c <FusionQuaternionToEuler>
 8008a68:	eef0 6a40 	vmov.f32	s13, s0
 8008a6c:	eeb0 7a60 	vmov.f32	s14, s1
 8008a70:	eef0 7a41 	vmov.f32	s15, s2
 8008a74:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 8008a78:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8008a7c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		x += temp.angle.roll;
 8008a80:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008a84:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a8c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		y += temp.angle.pitch;
 8008a90:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008a94:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a9c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		z += temp.angle.yaw;
 8008aa0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008aa4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008aac:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		HAL_Delay(5);
 8008ab0:	2005      	movs	r0, #5
 8008ab2:	f002 f8cb 	bl	800ac4c <HAL_Delay>
	for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8008ab6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8008aba:	3301      	adds	r3, #1
 8008abc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8008ac0:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8008ac4:	88fb      	ldrh	r3, [r7, #6]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d386      	bcc.n	80089d8 <FusionOffsetUpdate+0x70>
	}

    // Average the saved data points to find the fusion offset
	ahrs->fusionEulerOffset.angle.roll = x / (float)numCalPoints;
 8008aca:	88fb      	ldrh	r3, [r7, #6]
 8008acc:	ee07 3a90 	vmov	s15, r3
 8008ad0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ad4:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8008ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ade:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	ahrs->fusionEulerOffset.angle.pitch = y / (float)numCalPoints;
 8008ae2:	88fb      	ldrh	r3, [r7, #6]
 8008ae4:	ee07 3a90 	vmov	s15, r3
 8008ae8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008aec:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8008af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af6:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	ahrs->fusionEulerOffset.angle.yaw = z / (float)numCalPoints;
 8008afa:	88fb      	ldrh	r3, [r7, #6]
 8008afc:	ee07 3a90 	vmov	s15, r3
 8008b00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b04:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8008b08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0e:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
}
 8008b12:	bf00      	nop
 8008b14:	3760      	adds	r7, #96	; 0x60
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	3ba3d70a 	.word	0x3ba3d70a

08008b20 <FusionApplyEulerOffset>:

FusionEuler FusionApplyEulerOffset(FusionEuler uncalibrated, FusionEuler eulerOffset)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b091      	sub	sp, #68	; 0x44
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	eeb0 5a40 	vmov.f32	s10, s0
 8008b2a:	eef0 5a60 	vmov.f32	s11, s1
 8008b2e:	eeb0 6a41 	vmov.f32	s12, s2
 8008b32:	eef0 6a61 	vmov.f32	s13, s3
 8008b36:	eeb0 7a42 	vmov.f32	s14, s4
 8008b3a:	eef0 7a62 	vmov.f32	s15, s5
 8008b3e:	ed87 5a07 	vstr	s10, [r7, #28]
 8008b42:	edc7 5a08 	vstr	s11, [r7, #32]
 8008b46:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8008b4a:	edc7 6a04 	vstr	s13, [r7, #16]
 8008b4e:	ed87 7a05 	vstr	s14, [r7, #20]
 8008b52:	edc7 7a06 	vstr	s15, [r7, #24]
	const FusionEuler result = {.angle = {
			.roll = uncalibrated.angle.roll - eulerOffset.angle.roll,
 8008b56:	ed97 7a07 	vldr	s14, [r7, #28]
 8008b5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8008b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
	const FusionEuler result = {.angle = {
 8008b62:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			.pitch = uncalibrated.angle.pitch - eulerOffset.angle.pitch,
 8008b66:	ed97 7a08 	vldr	s14, [r7, #32]
 8008b6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
	const FusionEuler result = {.angle = {
 8008b72:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			.yaw = uncalibrated.angle.yaw - eulerOffset.angle.yaw,
 8008b76:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008b7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8008b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
	const FusionEuler result = {.angle = {
 8008b82:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	    }};
	return result;
 8008b86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008b8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008b8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008b90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008b94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008b96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9a:	ee06 1a90 	vmov	s13, r1
 8008b9e:	ee07 2a10 	vmov	s14, r2
 8008ba2:	ee07 3a90 	vmov	s15, r3
}
 8008ba6:	eeb0 0a66 	vmov.f32	s0, s13
 8008baa:	eef0 0a47 	vmov.f32	s1, s14
 8008bae:	eeb0 1a67 	vmov.f32	s2, s15
 8008bb2:	3744      	adds	r7, #68	; 0x44
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <FusionGyroOffsetInitialise>:
/**
 * @brief Initialises the gyroscope offset algorithm.
 * @param offset Gyroscope offset algorithm structure.
 * @param sampleRate Sample rate in Hz.
 */
void FusionGyroOffsetInitialise(FusionGyroOffset *const offset, const unsigned int sampleRate) {
 8008bbc:	b480      	push	{r7}
 8008bbe:	b087      	sub	sp, #28
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
    offset->filterCoefficient = 2.0f * (float) M_PI * CUTOFF_FREQUENCY * (1.0f / (float) sampleRate);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	ee07 3a90 	vmov	s15, r3
 8008bcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008bd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bd8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008c1c <FusionGyroOffsetInitialise+0x60>
 8008bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	edc3 7a00 	vstr	s15, [r3]
    offset->timeout = TIMEOUT * sampleRate;
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	4613      	mov	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	441a      	add	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	605a      	str	r2, [r3, #4]
    offset->timer = 0;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	609a      	str	r2, [r3, #8]
    offset->gyroscopeOffset = FUSION_VECTOR_ZERO;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f04f 0200 	mov.w	r2, #0
 8008bfe:	60da      	str	r2, [r3, #12]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f04f 0200 	mov.w	r2, #0
 8008c06:	611a      	str	r2, [r3, #16]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f04f 0200 	mov.w	r2, #0
 8008c0e:	615a      	str	r2, [r3, #20]
}
 8008c10:	bf00      	nop
 8008c12:	371c      	adds	r7, #28
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	3e00adfd 	.word	0x3e00adfd

08008c20 <FusionGyroOffsetUpdate>:
 * gyroscope measurement.
 * @param offset Gyroscope offset algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector FusionGyroOffsetUpdate(FusionGyroOffset *const offset, FusionVector gyroscope) {
 8008c20:	b590      	push	{r4, r7, lr}
 8008c22:	b08f      	sub	sp, #60	; 0x3c
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	61f8      	str	r0, [r7, #28]
 8008c28:	eef0 6a40 	vmov.f32	s13, s0
 8008c2c:	eeb0 7a60 	vmov.f32	s14, s1
 8008c30:	eef0 7a41 	vmov.f32	s15, s2
 8008c34:	edc7 6a04 	vstr	s13, [r7, #16]
 8008c38:	ed87 7a05 	vstr	s14, [r7, #20]
 8008c3c:	edc7 7a06 	vstr	s15, [r7, #24]

    // Subtract offset from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, offset->gyroscopeOffset);
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	ed93 5a03 	vldr	s10, [r3, #12]
 8008c46:	edd3 5a04 	vldr	s11, [r3, #16]
 8008c4a:	ed93 6a05 	vldr	s12, [r3, #20]
 8008c4e:	edd7 6a04 	vldr	s13, [r7, #16]
 8008c52:	ed97 7a05 	vldr	s14, [r7, #20]
 8008c56:	edd7 7a06 	vldr	s15, [r7, #24]
 8008c5a:	eef0 1a45 	vmov.f32	s3, s10
 8008c5e:	eeb0 2a65 	vmov.f32	s4, s11
 8008c62:	eef0 2a46 	vmov.f32	s5, s12
 8008c66:	eeb0 0a66 	vmov.f32	s0, s13
 8008c6a:	eef0 0a47 	vmov.f32	s1, s14
 8008c6e:	eeb0 1a67 	vmov.f32	s2, s15
 8008c72:	f7ff fd41 	bl	80086f8 <FusionVectorSubtract>
 8008c76:	eef0 6a40 	vmov.f32	s13, s0
 8008c7a:	eeb0 7a60 	vmov.f32	s14, s1
 8008c7e:	eef0 7a41 	vmov.f32	s15, s2
 8008c82:	edc7 6a04 	vstr	s13, [r7, #16]
 8008c86:	ed87 7a05 	vstr	s14, [r7, #20]
 8008c8a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Reset timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > THRESHOLD) || (fabs(gyroscope.axis.y) > THRESHOLD) || (fabs(gyroscope.axis.z) > THRESHOLD)) {
 8008c8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008c92:	eef0 7ae7 	vabs.f32	s15, s15
 8008c96:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8008c9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ca2:	dc15      	bgt.n	8008cd0 <FusionGyroOffsetUpdate+0xb0>
 8008ca4:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ca8:	eef0 7ae7 	vabs.f32	s15, s15
 8008cac:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8008cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb8:	dc0a      	bgt.n	8008cd0 <FusionGyroOffsetUpdate+0xb0>
 8008cba:	edd7 7a06 	vldr	s15, [r7, #24]
 8008cbe:	eef0 7ae7 	vabs.f32	s15, s15
 8008cc2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8008cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cce:	dd0a      	ble.n	8008ce6 <FusionGyroOffsetUpdate+0xc6>
        offset->timer = 0;
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	609a      	str	r2, [r3, #8]
        return gyroscope;
 8008cd6:	f107 0320 	add.w	r3, r7, #32
 8008cda:	f107 0210 	add.w	r2, r7, #16
 8008cde:	ca07      	ldmia	r2, {r0, r1, r2}
 8008ce0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008ce4:	e060      	b.n	8008da8 <FusionGyroOffsetUpdate+0x188>
    }

    // Increment timer while gyroscope stationary
    if (offset->timer < offset->timeout) {
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	689a      	ldr	r2, [r3, #8]
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d20c      	bcs.n	8008d0c <FusionGyroOffsetUpdate+0xec>
        offset->timer++;
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	1c5a      	adds	r2, r3, #1
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	609a      	str	r2, [r3, #8]
        return gyroscope;
 8008cfc:	f107 0320 	add.w	r3, r7, #32
 8008d00:	f107 0210 	add.w	r2, r7, #16
 8008d04:	ca07      	ldmia	r2, {r0, r1, r2}
 8008d06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008d0a:	e04d      	b.n	8008da8 <FusionGyroOffsetUpdate+0x188>
    }

    // Adjust offset if timer has elapsed
    offset->gyroscopeOffset = FusionVectorAdd(offset->gyroscopeOffset, FusionVectorMultiplyScalar(gyroscope, offset->filterCoefficient));
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	ed93 6a00 	vldr	s12, [r3]
 8008d12:	edd7 6a04 	vldr	s13, [r7, #16]
 8008d16:	ed97 7a05 	vldr	s14, [r7, #20]
 8008d1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8008d1e:	eef0 1a46 	vmov.f32	s3, s12
 8008d22:	eeb0 0a66 	vmov.f32	s0, s13
 8008d26:	eef0 0a47 	vmov.f32	s1, s14
 8008d2a:	eeb0 1a67 	vmov.f32	s2, s15
 8008d2e:	f7ff fd31 	bl	8008794 <FusionVectorMultiplyScalar>
 8008d32:	eef0 6a40 	vmov.f32	s13, s0
 8008d36:	eeb0 7a60 	vmov.f32	s14, s1
 8008d3a:	eef0 7a41 	vmov.f32	s15, s2
 8008d3e:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8008d42:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8008d46:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8008d4a:	69fc      	ldr	r4, [r7, #28]
 8008d4c:	ed97 5a0b 	vldr	s10, [r7, #44]	; 0x2c
 8008d50:	edd7 5a0c 	vldr	s11, [r7, #48]	; 0x30
 8008d54:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	edd3 6a03 	vldr	s13, [r3, #12]
 8008d5e:	ed93 7a04 	vldr	s14, [r3, #16]
 8008d62:	edd3 7a05 	vldr	s15, [r3, #20]
 8008d66:	eef0 1a45 	vmov.f32	s3, s10
 8008d6a:	eeb0 2a65 	vmov.f32	s4, s11
 8008d6e:	eef0 2a46 	vmov.f32	s5, s12
 8008d72:	eeb0 0a66 	vmov.f32	s0, s13
 8008d76:	eef0 0a47 	vmov.f32	s1, s14
 8008d7a:	eeb0 1a67 	vmov.f32	s2, s15
 8008d7e:	f7ff fc6d 	bl	800865c <FusionVectorAdd>
 8008d82:	eef0 6a40 	vmov.f32	s13, s0
 8008d86:	eeb0 7a60 	vmov.f32	s14, s1
 8008d8a:	eef0 7a41 	vmov.f32	s15, s2
 8008d8e:	edc4 6a03 	vstr	s13, [r4, #12]
 8008d92:	ed84 7a04 	vstr	s14, [r4, #16]
 8008d96:	edc4 7a05 	vstr	s15, [r4, #20]
    return gyroscope;
 8008d9a:	f107 0320 	add.w	r3, r7, #32
 8008d9e:	f107 0210 	add.w	r2, r7, #16
 8008da2:	ca07      	ldmia	r2, {r0, r1, r2}
 8008da4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8008da8:	6a39      	ldr	r1, [r7, #32]
 8008daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dae:	ee06 1a90 	vmov	s13, r1
 8008db2:	ee07 2a10 	vmov	s14, r2
 8008db6:	ee07 3a90 	vmov	s15, r3
 8008dba:	eeb0 0a66 	vmov.f32	s0, s13
 8008dbe:	eef0 0a47 	vmov.f32	s1, s14
 8008dc2:	eeb0 1a67 	vmov.f32	s2, s15
 8008dc6:	373c      	adds	r7, #60	; 0x3c
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd90      	pop	{r4, r7, pc}

08008dcc <GPS_validate>:

	return 0;
}

int GPS_validate(char *nmeastr)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
	char check[3];
	char checkcalcstr[3];
	int i;
	int calculated_check;

	i = 0;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	617b      	str	r3, [r7, #20]
	calculated_check = 0;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	613b      	str	r3, [r7, #16]

	// check to ensure that the string starts with a $
	if (nmeastr[i] == '$')
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	4413      	add	r3, r2
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	2b24      	cmp	r3, #36	; 0x24
 8008de6:	d103      	bne.n	8008df0 <GPS_validate+0x24>
		i++;
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	3301      	adds	r3, #1
 8008dec:	617b      	str	r3, [r7, #20]
	else
		return 0;

	//No NULL reached, 75 char largest possible NMEA message, no '*' reached
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8008dee:	e00c      	b.n	8008e0a <GPS_validate+0x3e>
		return 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	e047      	b.n	8008e84 <GPS_validate+0xb8>
	{
		calculated_check ^= nmeastr[i]; // calculate the checksum
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	4413      	add	r3, r2
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	4053      	eors	r3, r2
 8008e02:	613b      	str	r3, [r7, #16]
		i++;
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	3301      	adds	r3, #1
 8008e08:	617b      	str	r3, [r7, #20]
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	4413      	add	r3, r2
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d008      	beq.n	8008e28 <GPS_validate+0x5c>
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e20:	d002      	beq.n	8008e28 <GPS_validate+0x5c>
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	2b4a      	cmp	r3, #74	; 0x4a
 8008e26:	dde5      	ble.n	8008df4 <GPS_validate+0x28>
	}

	if (i >= 75)
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	2b4a      	cmp	r3, #74	; 0x4a
 8008e2c:	dd01      	ble.n	8008e32 <GPS_validate+0x66>
	{
		return 0; // the string was too long so return an error
 8008e2e:	2300      	movs	r3, #0
 8008e30:	e028      	b.n	8008e84 <GPS_validate+0xb8>
	}

	if (nmeastr[i] == '*')
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	4413      	add	r3, r2
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e3c:	d119      	bne.n	8008e72 <GPS_validate+0xa6>
	{
		check[0] = nmeastr[i + 1];    //put hex chars in check string
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	3301      	adds	r3, #1
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	4413      	add	r3, r2
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	733b      	strb	r3, [r7, #12]
		check[1] = nmeastr[i + 2];
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	3302      	adds	r3, #2
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	4413      	add	r3, r2
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	737b      	strb	r3, [r7, #13]
		check[2] = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	73bb      	strb	r3, [r7, #14]
	}
	else
		return 0;    // no checksum separator found there for invalid

	sprintf(checkcalcstr, "%02X", calculated_check);
 8008e5a:	f107 0308 	add.w	r3, r7, #8
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	490a      	ldr	r1, [pc, #40]	; (8008e8c <GPS_validate+0xc0>)
 8008e62:	4618      	mov	r0, r3
 8008e64:	f00c fb0a 	bl	801547c <siprintf>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8008e68:	7a3a      	ldrb	r2, [r7, #8]
 8008e6a:	7b3b      	ldrb	r3, [r7, #12]
			1 : 0;
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d108      	bne.n	8008e82 <GPS_validate+0xb6>
 8008e70:	e001      	b.n	8008e76 <GPS_validate+0xaa>
		return 0;    // no checksum separator found there for invalid
 8008e72:	2300      	movs	r3, #0
 8008e74:	e006      	b.n	8008e84 <GPS_validate+0xb8>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8008e76:	7a7a      	ldrb	r2, [r7, #9]
 8008e78:	7b7b      	ldrb	r3, [r7, #13]
			1 : 0;
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d101      	bne.n	8008e82 <GPS_validate+0xb6>
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e000      	b.n	8008e84 <GPS_validate+0xb8>
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3718      	adds	r7, #24
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	0801bf08 	.word	0x0801bf08

08008e90 <GPS_parse>:

void GPS_parse(char *GPSstrParse)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b08a      	sub	sp, #40	; 0x28
 8008e94:	af08      	add	r7, sp, #32
 8008e96:	6078      	str	r0, [r7, #4]
	if (!strncmp(GPSstrParse, "$GPGGA", 6))
 8008e98:	2206      	movs	r2, #6
 8008e9a:	4964      	ldr	r1, [pc, #400]	; (800902c <GPS_parse+0x19c>)
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f00c fb86 	bl	80155ae <strncmp>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d138      	bne.n	8008f1a <GPS_parse+0x8a>
	{
		if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c",
 8008ea8:	4b61      	ldr	r3, [pc, #388]	; (8009030 <GPS_parse+0x1a0>)
 8008eaa:	9307      	str	r3, [sp, #28]
 8008eac:	4b61      	ldr	r3, [pc, #388]	; (8009034 <GPS_parse+0x1a4>)
 8008eae:	9306      	str	r3, [sp, #24]
 8008eb0:	4b61      	ldr	r3, [pc, #388]	; (8009038 <GPS_parse+0x1a8>)
 8008eb2:	9305      	str	r3, [sp, #20]
 8008eb4:	4b61      	ldr	r3, [pc, #388]	; (800903c <GPS_parse+0x1ac>)
 8008eb6:	9304      	str	r3, [sp, #16]
 8008eb8:	4b61      	ldr	r3, [pc, #388]	; (8009040 <GPS_parse+0x1b0>)
 8008eba:	9303      	str	r3, [sp, #12]
 8008ebc:	4b61      	ldr	r3, [pc, #388]	; (8009044 <GPS_parse+0x1b4>)
 8008ebe:	9302      	str	r3, [sp, #8]
 8008ec0:	4b61      	ldr	r3, [pc, #388]	; (8009048 <GPS_parse+0x1b8>)
 8008ec2:	9301      	str	r3, [sp, #4]
 8008ec4:	4b61      	ldr	r3, [pc, #388]	; (800904c <GPS_parse+0x1bc>)
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	4b61      	ldr	r3, [pc, #388]	; (8009050 <GPS_parse+0x1c0>)
 8008eca:	4a62      	ldr	r2, [pc, #392]	; (8009054 <GPS_parse+0x1c4>)
 8008ecc:	4962      	ldr	r1, [pc, #392]	; (8009058 <GPS_parse+0x1c8>)
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f00c faf4 	bl	80154bc <siscanf>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f340 80a4 	ble.w	8009024 <GPS_parse+0x194>
				&GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude,
				&GPS.ew, &GPS.fix, &GPS.num_of_satelites, &GPS.horizontal_dilution_of_precision,
				&GPS.mean_sea_level_altitude, &GPS.altitude_unit) >= 1)
		{
			GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8008edc:	4b5f      	ldr	r3, [pc, #380]	; (800905c <GPS_parse+0x1cc>)
 8008ede:	edd3 7a04 	vldr	s15, [r3, #16]
 8008ee2:	4b5e      	ldr	r3, [pc, #376]	; (800905c <GPS_parse+0x1cc>)
 8008ee4:	7d1b      	ldrb	r3, [r3, #20]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8008eec:	f000 f8da 	bl	80090a4 <GPS_nmea_to_dec>
 8008ef0:	eef0 7a40 	vmov.f32	s15, s0
 8008ef4:	4b59      	ldr	r3, [pc, #356]	; (800905c <GPS_parse+0x1cc>)
 8008ef6:	edc3 7a01 	vstr	s15, [r3, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8008efa:	4b58      	ldr	r3, [pc, #352]	; (800905c <GPS_parse+0x1cc>)
 8008efc:	edd3 7a06 	vldr	s15, [r3, #24]
 8008f00:	4b56      	ldr	r3, [pc, #344]	; (800905c <GPS_parse+0x1cc>)
 8008f02:	7f1b      	ldrb	r3, [r3, #28]
 8008f04:	4618      	mov	r0, r3
 8008f06:	eeb0 0a67 	vmov.f32	s0, s15
 8008f0a:	f000 f8cb 	bl	80090a4 <GPS_nmea_to_dec>
 8008f0e:	eef0 7a40 	vmov.f32	s15, s0
 8008f12:	4b52      	ldr	r3, [pc, #328]	; (800905c <GPS_parse+0x1cc>)
 8008f14:	edc3 7a00 	vstr	s15, [r3]
			return;
 8008f18:	e084      	b.n	8009024 <GPS_parse+0x194>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPRMC", 6))
 8008f1a:	2206      	movs	r2, #6
 8008f1c:	4950      	ldr	r1, [pc, #320]	; (8009060 <GPS_parse+0x1d0>)
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f00c fb45 	bl	80155ae <strncmp>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d123      	bne.n	8008f72 <GPS_parse+0xe2>
	{
		if (sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time,
 8008f2a:	4b4e      	ldr	r3, [pc, #312]	; (8009064 <GPS_parse+0x1d4>)
 8008f2c:	9305      	str	r3, [sp, #20]
 8008f2e:	4b4e      	ldr	r3, [pc, #312]	; (8009068 <GPS_parse+0x1d8>)
 8008f30:	9304      	str	r3, [sp, #16]
 8008f32:	4b4e      	ldr	r3, [pc, #312]	; (800906c <GPS_parse+0x1dc>)
 8008f34:	9303      	str	r3, [sp, #12]
 8008f36:	4b43      	ldr	r3, [pc, #268]	; (8009044 <GPS_parse+0x1b4>)
 8008f38:	9302      	str	r3, [sp, #8]
 8008f3a:	4b43      	ldr	r3, [pc, #268]	; (8009048 <GPS_parse+0x1b8>)
 8008f3c:	9301      	str	r3, [sp, #4]
 8008f3e:	4b43      	ldr	r3, [pc, #268]	; (800904c <GPS_parse+0x1bc>)
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	4b43      	ldr	r3, [pc, #268]	; (8009050 <GPS_parse+0x1c0>)
 8008f44:	4a43      	ldr	r2, [pc, #268]	; (8009054 <GPS_parse+0x1c4>)
 8008f46:	494a      	ldr	r1, [pc, #296]	; (8009070 <GPS_parse+0x1e0>)
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f00c fab7 	bl	80154bc <siscanf>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	dd67      	ble.n	8009024 <GPS_parse+0x194>
				&GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew,
				&GPS.speed_over_ground, &GPS.course_over_ground, &GPS.utc_date) >= 1)
		{
			if (GPS.ns == '\0')
 8008f54:	4b41      	ldr	r3, [pc, #260]	; (800905c <GPS_parse+0x1cc>)
 8008f56:	7d1b      	ldrb	r3, [r3, #20]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d102      	bne.n	8008f62 <GPS_parse+0xd2>
				GPS.ns = ' ';
 8008f5c:	4b3f      	ldr	r3, [pc, #252]	; (800905c <GPS_parse+0x1cc>)
 8008f5e:	2220      	movs	r2, #32
 8008f60:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8008f62:	4b3e      	ldr	r3, [pc, #248]	; (800905c <GPS_parse+0x1cc>)
 8008f64:	7f1b      	ldrb	r3, [r3, #28]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d157      	bne.n	800901a <GPS_parse+0x18a>
				GPS.ew = ' ';
 8008f6a:	4b3c      	ldr	r3, [pc, #240]	; (800905c <GPS_parse+0x1cc>)
 8008f6c:	2220      	movs	r2, #32
 8008f6e:	771a      	strb	r2, [r3, #28]
			return;
 8008f70:	e053      	b.n	800901a <GPS_parse+0x18a>
		}

	}
	else if (!strncmp(GPSstrParse, "$GPGLL", 6))
 8008f72:	2206      	movs	r2, #6
 8008f74:	493f      	ldr	r1, [pc, #252]	; (8009074 <GPS_parse+0x1e4>)
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f00c fb19 	bl	80155ae <strncmp>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d11f      	bne.n	8008fc2 <GPS_parse+0x132>
	{
		if (sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude,
 8008f82:	4b3d      	ldr	r3, [pc, #244]	; (8009078 <GPS_parse+0x1e8>)
 8008f84:	9303      	str	r3, [sp, #12]
 8008f86:	4b33      	ldr	r3, [pc, #204]	; (8009054 <GPS_parse+0x1c4>)
 8008f88:	9302      	str	r3, [sp, #8]
 8008f8a:	4b2e      	ldr	r3, [pc, #184]	; (8009044 <GPS_parse+0x1b4>)
 8008f8c:	9301      	str	r3, [sp, #4]
 8008f8e:	4b2e      	ldr	r3, [pc, #184]	; (8009048 <GPS_parse+0x1b8>)
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	4b2e      	ldr	r3, [pc, #184]	; (800904c <GPS_parse+0x1bc>)
 8008f94:	4a2e      	ldr	r2, [pc, #184]	; (8009050 <GPS_parse+0x1c0>)
 8008f96:	4939      	ldr	r1, [pc, #228]	; (800907c <GPS_parse+0x1ec>)
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f00c fa8f 	bl	80154bc <siscanf>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	dd3f      	ble.n	8009024 <GPS_parse+0x194>
				&GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time,
				&GPS.gll_status) >= 1)
		{
			if (GPS.ns == '\0')
 8008fa4:	4b2d      	ldr	r3, [pc, #180]	; (800905c <GPS_parse+0x1cc>)
 8008fa6:	7d1b      	ldrb	r3, [r3, #20]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d102      	bne.n	8008fb2 <GPS_parse+0x122>
				GPS.ns = '?';
 8008fac:	4b2b      	ldr	r3, [pc, #172]	; (800905c <GPS_parse+0x1cc>)
 8008fae:	223f      	movs	r2, #63	; 0x3f
 8008fb0:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8008fb2:	4b2a      	ldr	r3, [pc, #168]	; (800905c <GPS_parse+0x1cc>)
 8008fb4:	7f1b      	ldrb	r3, [r3, #28]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d131      	bne.n	800901e <GPS_parse+0x18e>
				GPS.ew = '?';
 8008fba:	4b28      	ldr	r3, [pc, #160]	; (800905c <GPS_parse+0x1cc>)
 8008fbc:	223f      	movs	r2, #63	; 0x3f
 8008fbe:	771a      	strb	r2, [r3, #28]
			return;
 8008fc0:	e02d      	b.n	800901e <GPS_parse+0x18e>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPVTG", 6))
 8008fc2:	2206      	movs	r2, #6
 8008fc4:	492e      	ldr	r1, [pc, #184]	; (8009080 <GPS_parse+0x1f0>)
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f00c faf1 	bl	80155ae <strncmp>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d128      	bne.n	8009024 <GPS_parse+0x194>
	{
		if (sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t,
 8008fd2:	4b2c      	ldr	r3, [pc, #176]	; (8009084 <GPS_parse+0x1f4>)
 8008fd4:	9305      	str	r3, [sp, #20]
 8008fd6:	4b2c      	ldr	r3, [pc, #176]	; (8009088 <GPS_parse+0x1f8>)
 8008fd8:	9304      	str	r3, [sp, #16]
 8008fda:	4b2c      	ldr	r3, [pc, #176]	; (800908c <GPS_parse+0x1fc>)
 8008fdc:	9303      	str	r3, [sp, #12]
 8008fde:	4b23      	ldr	r3, [pc, #140]	; (800906c <GPS_parse+0x1dc>)
 8008fe0:	9302      	str	r3, [sp, #8]
 8008fe2:	4b2b      	ldr	r3, [pc, #172]	; (8009090 <GPS_parse+0x200>)
 8008fe4:	9301      	str	r3, [sp, #4]
 8008fe6:	4b2b      	ldr	r3, [pc, #172]	; (8009094 <GPS_parse+0x204>)
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	4b2b      	ldr	r3, [pc, #172]	; (8009098 <GPS_parse+0x208>)
 8008fec:	4a2b      	ldr	r2, [pc, #172]	; (800909c <GPS_parse+0x20c>)
 8008fee:	492c      	ldr	r1, [pc, #176]	; (80090a0 <GPS_parse+0x210>)
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f00c fa63 	bl	80154bc <siscanf>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	dd13      	ble.n	8009024 <GPS_parse+0x194>
				&GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit,
				&GPS.speed_over_ground, &GPS.speed_k_unit, &GPS.speed_km,
				&GPS.speed_km_unit) >= 1)
		{
			if (GPS.ns == '\0')
 8008ffc:	4b17      	ldr	r3, [pc, #92]	; (800905c <GPS_parse+0x1cc>)
 8008ffe:	7d1b      	ldrb	r3, [r3, #20]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d102      	bne.n	800900a <GPS_parse+0x17a>
				GPS.ns = '?';
 8009004:	4b15      	ldr	r3, [pc, #84]	; (800905c <GPS_parse+0x1cc>)
 8009006:	223f      	movs	r2, #63	; 0x3f
 8009008:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 800900a:	4b14      	ldr	r3, [pc, #80]	; (800905c <GPS_parse+0x1cc>)
 800900c:	7f1b      	ldrb	r3, [r3, #28]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d107      	bne.n	8009022 <GPS_parse+0x192>
				GPS.ew = '?';
 8009012:	4b12      	ldr	r3, [pc, #72]	; (800905c <GPS_parse+0x1cc>)
 8009014:	223f      	movs	r2, #63	; 0x3f
 8009016:	771a      	strb	r2, [r3, #28]
			return;
 8009018:	e003      	b.n	8009022 <GPS_parse+0x192>
			return;
 800901a:	bf00      	nop
 800901c:	e002      	b.n	8009024 <GPS_parse+0x194>
			return;
 800901e:	bf00      	nop
 8009020:	e000      	b.n	8009024 <GPS_parse+0x194>
			return;
 8009022:	bf00      	nop
		}
	}
}
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	0801bf10 	.word	0x0801bf10
 8009030:	200005e4 	.word	0x200005e4
 8009034:	200005e0 	.word	0x200005e0
 8009038:	200005dc 	.word	0x200005dc
 800903c:	200005d8 	.word	0x200005d8
 8009040:	200005d4 	.word	0x200005d4
 8009044:	200005d0 	.word	0x200005d0
 8009048:	200005cc 	.word	0x200005cc
 800904c:	200005c8 	.word	0x200005c8
 8009050:	200005c4 	.word	0x200005c4
 8009054:	200005c0 	.word	0x200005c0
 8009058:	0801bf18 	.word	0x0801bf18
 800905c:	200005b4 	.word	0x200005b4
 8009060:	0801bf40 	.word	0x0801bf40
 8009064:	200005f0 	.word	0x200005f0
 8009068:	200005ec 	.word	0x200005ec
 800906c:	200005e8 	.word	0x200005e8
 8009070:	0801bf48 	.word	0x0801bf48
 8009074:	0801bf68 	.word	0x0801bf68
 8009078:	200005f4 	.word	0x200005f4
 800907c:	0801bf70 	.word	0x0801bf70
 8009080:	0801bf8c 	.word	0x0801bf8c
 8009084:	2000060c 	.word	0x2000060c
 8009088:	20000608 	.word	0x20000608
 800908c:	20000605 	.word	0x20000605
 8009090:	20000604 	.word	0x20000604
 8009094:	20000600 	.word	0x20000600
 8009098:	200005fc 	.word	0x200005fc
 800909c:	200005f8 	.word	0x200005f8
 80090a0:	0801bf94 	.word	0x0801bf94

080090a4 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80090ae:	4603      	mov	r3, r0
 80090b0:	70fb      	strb	r3, [r7, #3]
	int degree = (int) (deg_coord / 100);
 80090b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80090b6:	eddf 6a20 	vldr	s13, [pc, #128]	; 8009138 <GPS_nmea_to_dec+0x94>
 80090ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80090be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090c2:	ee17 3a90 	vmov	r3, s15
 80090c6:	613b      	str	r3, [r7, #16]
	float minutes = deg_coord - degree * 100;
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	2264      	movs	r2, #100	; 0x64
 80090cc:	fb02 f303 	mul.w	r3, r2, r3
 80090d0:	ee07 3a90 	vmov	s15, r3
 80090d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80090dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090e0:	edc7 7a03 	vstr	s15, [r7, #12]
	float dec_deg = minutes / 60;
 80090e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80090e8:	eddf 6a14 	vldr	s13, [pc, #80]	; 800913c <GPS_nmea_to_dec+0x98>
 80090ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80090f0:	edc7 7a02 	vstr	s15, [r7, #8]
	float decimal = degree + dec_deg;
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	ee07 3a90 	vmov	s15, r3
 80090fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8009102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009106:	edc7 7a05 	vstr	s15, [r7, #20]
	if (nsew == 'S' || nsew == 'W')
 800910a:	78fb      	ldrb	r3, [r7, #3]
 800910c:	2b53      	cmp	r3, #83	; 0x53
 800910e:	d002      	beq.n	8009116 <GPS_nmea_to_dec+0x72>
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	2b57      	cmp	r3, #87	; 0x57
 8009114:	d105      	bne.n	8009122 <GPS_nmea_to_dec+0x7e>
	{ // return negative
		decimal *= -1;
 8009116:	edd7 7a05 	vldr	s15, [r7, #20]
 800911a:	eef1 7a67 	vneg.f32	s15, s15
 800911e:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return decimal;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	ee07 3a90 	vmov	s15, r3
}
 8009128:	eeb0 0a67 	vmov.f32	s0, s15
 800912c:	371c      	adds	r7, #28
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	42c80000 	.word	0x42c80000
 800913c:	42700000 	.word	0x42700000

08009140 <HMC5883L_Init>:
#include "GY-271/HMC5883L.h"
#include "Globals.h"


uint8_t HMC5883L_Init()
{
 8009140:	b580      	push	{r7, lr}
 8009142:	af00      	add	r7, sp, #0
	HMC5883L_setRange(HMC5883L_RANGE_8_1GA);
 8009144:	2007      	movs	r0, #7
 8009146:	f000 f871 	bl	800922c <HMC5883L_setRange>
	HMC5883L_setMeasurementMode(HMC5883L_CONTINOUS);
 800914a:	2000      	movs	r0, #0
 800914c:	f000 f8c8 	bl	80092e0 <HMC5883L_setMeasurementMode>
	HMC5883L_setDataRate(HMC5883L_DATARATE_75HZ);
 8009150:	2006      	movs	r0, #6
 8009152:	f000 f8e0 	bl	8009316 <HMC5883L_setDataRate>
	HMC5883L_setSamples(HMC5883L_SAMPLES_4);
 8009156:	2002      	movs	r0, #2
 8009158:	f000 f8fc 	bl	8009354 <HMC5883L_setSamples>
	HMC5883L_setOffset(0, 0);
 800915c:	2100      	movs	r1, #0
 800915e:	2000      	movs	r0, #0
 8009160:	f000 f84e 	bl	8009200 <HMC5883L_setOffset>

	return 0;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	bd80      	pop	{r7, pc}
	...

0800916c <HMC5883L_readRaw>:

Vector HMC5883L_readRaw(void)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b088      	sub	sp, #32
 8009170:	af00      	add	r7, sp, #0
    v.XAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_X_M) - xOffset;
 8009172:	2003      	movs	r0, #3
 8009174:	f000 f946 	bl	8009404 <HMC5883L_readRegister16>
 8009178:	4603      	mov	r3, r0
 800917a:	461a      	mov	r2, r3
 800917c:	4b1d      	ldr	r3, [pc, #116]	; (80091f4 <HMC5883L_readRaw+0x88>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	ee07 3a90 	vmov	s15, r3
 8009186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800918a:	4b1b      	ldr	r3, [pc, #108]	; (80091f8 <HMC5883L_readRaw+0x8c>)
 800918c:	edc3 7a00 	vstr	s15, [r3]
    v.YAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Y_M) - yOffset;
 8009190:	2007      	movs	r0, #7
 8009192:	f000 f937 	bl	8009404 <HMC5883L_readRegister16>
 8009196:	4603      	mov	r3, r0
 8009198:	461a      	mov	r2, r3
 800919a:	4b18      	ldr	r3, [pc, #96]	; (80091fc <HMC5883L_readRaw+0x90>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	ee07 3a90 	vmov	s15, r3
 80091a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091a8:	4b13      	ldr	r3, [pc, #76]	; (80091f8 <HMC5883L_readRaw+0x8c>)
 80091aa:	edc3 7a01 	vstr	s15, [r3, #4]
    v.ZAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Z_M);
 80091ae:	2005      	movs	r0, #5
 80091b0:	f000 f928 	bl	8009404 <HMC5883L_readRegister16>
 80091b4:	4603      	mov	r3, r0
 80091b6:	ee07 3a90 	vmov	s15, r3
 80091ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091be:	4b0e      	ldr	r3, [pc, #56]	; (80091f8 <HMC5883L_readRaw+0x8c>)
 80091c0:	edc3 7a02 	vstr	s15, [r3, #8]

    return v;
 80091c4:	4a0c      	ldr	r2, [pc, #48]	; (80091f8 <HMC5883L_readRaw+0x8c>)
 80091c6:	f107 0314 	add.w	r3, r7, #20
 80091ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80091cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80091d0:	6979      	ldr	r1, [r7, #20]
 80091d2:	69ba      	ldr	r2, [r7, #24]
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	ee06 1a90 	vmov	s13, r1
 80091da:	ee07 2a10 	vmov	s14, r2
 80091de:	ee07 3a90 	vmov	s15, r3
}
 80091e2:	eeb0 0a66 	vmov.f32	s0, s13
 80091e6:	eef0 0a47 	vmov.f32	s1, s14
 80091ea:	eeb0 1a67 	vmov.f32	s2, s15
 80091ee:	3720      	adds	r7, #32
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	200004c0 	.word	0x200004c0
 80091f8:	200004b4 	.word	0x200004b4
 80091fc:	200004c4 	.word	0x200004c4

08009200 <HMC5883L_setOffset>:

    return v;
}

void HMC5883L_setOffset(int xo, int yo)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
    xOffset = xo;
 800920a:	4a06      	ldr	r2, [pc, #24]	; (8009224 <HMC5883L_setOffset+0x24>)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6013      	str	r3, [r2, #0]
    yOffset = yo;
 8009210:	4a05      	ldr	r2, [pc, #20]	; (8009228 <HMC5883L_setOffset+0x28>)
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	6013      	str	r3, [r2, #0]
}
 8009216:	bf00      	nop
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	200004c0 	.word	0x200004c0
 8009228:	200004c4 	.word	0x200004c4

0800922c <HMC5883L_setRange>:

void HMC5883L_setRange(uint8_t range)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	4603      	mov	r3, r0
 8009234:	71fb      	strb	r3, [r7, #7]
    switch(range)
 8009236:	79fb      	ldrb	r3, [r7, #7]
 8009238:	2b07      	cmp	r3, #7
 800923a:	d833      	bhi.n	80092a4 <HMC5883L_setRange+0x78>
 800923c:	a201      	add	r2, pc, #4	; (adr r2, 8009244 <HMC5883L_setRange+0x18>)
 800923e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009242:	bf00      	nop
 8009244:	08009265 	.word	0x08009265
 8009248:	0800926d 	.word	0x0800926d
 800924c:	08009275 	.word	0x08009275
 8009250:	0800927d 	.word	0x0800927d
 8009254:	08009285 	.word	0x08009285
 8009258:	0800928d 	.word	0x0800928d
 800925c:	08009295 	.word	0x08009295
 8009260:	0800929d 	.word	0x0800929d
    {
	case HMC5883L_RANGE_0_88GA:
	    mG_per_LSB = 0.073f;
 8009264:	4b15      	ldr	r3, [pc, #84]	; (80092bc <HMC5883L_setRange+0x90>)
 8009266:	4a16      	ldr	r2, [pc, #88]	; (80092c0 <HMC5883L_setRange+0x94>)
 8009268:	601a      	str	r2, [r3, #0]
	    break;
 800926a:	e01c      	b.n	80092a6 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_3GA:
	    mG_per_LSB = 0.92f;
 800926c:	4b13      	ldr	r3, [pc, #76]	; (80092bc <HMC5883L_setRange+0x90>)
 800926e:	4a15      	ldr	r2, [pc, #84]	; (80092c4 <HMC5883L_setRange+0x98>)
 8009270:	601a      	str	r2, [r3, #0]
	    break;
 8009272:	e018      	b.n	80092a6 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_9GA:
	    mG_per_LSB = 1.22f;
 8009274:	4b11      	ldr	r3, [pc, #68]	; (80092bc <HMC5883L_setRange+0x90>)
 8009276:	4a14      	ldr	r2, [pc, #80]	; (80092c8 <HMC5883L_setRange+0x9c>)
 8009278:	601a      	str	r2, [r3, #0]
	    break;
 800927a:	e014      	b.n	80092a6 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_2_5GA:
	    mG_per_LSB = 1.52f;
 800927c:	4b0f      	ldr	r3, [pc, #60]	; (80092bc <HMC5883L_setRange+0x90>)
 800927e:	4a13      	ldr	r2, [pc, #76]	; (80092cc <HMC5883L_setRange+0xa0>)
 8009280:	601a      	str	r2, [r3, #0]
	    break;
 8009282:	e010      	b.n	80092a6 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4GA:
	    mG_per_LSB = 2.27f;
 8009284:	4b0d      	ldr	r3, [pc, #52]	; (80092bc <HMC5883L_setRange+0x90>)
 8009286:	4a12      	ldr	r2, [pc, #72]	; (80092d0 <HMC5883L_setRange+0xa4>)
 8009288:	601a      	str	r2, [r3, #0]
	    break;
 800928a:	e00c      	b.n	80092a6 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4_7GA:
	    mG_per_LSB = 2.56f;
 800928c:	4b0b      	ldr	r3, [pc, #44]	; (80092bc <HMC5883L_setRange+0x90>)
 800928e:	4a11      	ldr	r2, [pc, #68]	; (80092d4 <HMC5883L_setRange+0xa8>)
 8009290:	601a      	str	r2, [r3, #0]
	    break;
 8009292:	e008      	b.n	80092a6 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_5_6GA:
	    mG_per_LSB = 3.03f;
 8009294:	4b09      	ldr	r3, [pc, #36]	; (80092bc <HMC5883L_setRange+0x90>)
 8009296:	4a10      	ldr	r2, [pc, #64]	; (80092d8 <HMC5883L_setRange+0xac>)
 8009298:	601a      	str	r2, [r3, #0]
	    break;
 800929a:	e004      	b.n	80092a6 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_8_1GA:
	    mG_per_LSB = 4.35f;
 800929c:	4b07      	ldr	r3, [pc, #28]	; (80092bc <HMC5883L_setRange+0x90>)
 800929e:	4a0f      	ldr	r2, [pc, #60]	; (80092dc <HMC5883L_setRange+0xb0>)
 80092a0:	601a      	str	r2, [r3, #0]
	    break;
 80092a2:	e000      	b.n	80092a6 <HMC5883L_setRange+0x7a>

	default:
	    break;
 80092a4:	bf00      	nop
    }

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_B, range << 5);
 80092a6:	79fb      	ldrb	r3, [r7, #7]
 80092a8:	015b      	lsls	r3, r3, #5
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	4619      	mov	r1, r3
 80092ae:	2001      	movs	r0, #1
 80092b0:	f000 f870 	bl	8009394 <HMC5883L_writeRegister8>
}
 80092b4:	bf00      	nop
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	200004b0 	.word	0x200004b0
 80092c0:	3d958106 	.word	0x3d958106
 80092c4:	3f6b851f 	.word	0x3f6b851f
 80092c8:	3f9c28f6 	.word	0x3f9c28f6
 80092cc:	3fc28f5c 	.word	0x3fc28f5c
 80092d0:	401147ae 	.word	0x401147ae
 80092d4:	4023d70a 	.word	0x4023d70a
 80092d8:	4041eb85 	.word	0x4041eb85
 80092dc:	408b3333 	.word	0x408b3333

080092e0 <HMC5883L_setMeasurementMode>:
{
    return (uint8_t)((HMC5883L_readRegister8(HMC5883L_REG_CONFIG_B) >> 5));
}

void HMC5883L_setMeasurementMode(uint8_t mode)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	4603      	mov	r3, r0
 80092e8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_MODE);
 80092ea:	2002      	movs	r0, #2
 80092ec:	f000 f86e 	bl	80093cc <HMC5883L_readRegister8>
 80092f0:	4603      	mov	r3, r0
 80092f2:	73fb      	strb	r3, [r7, #15]
    // Mask out the lower 2 bits
    value &= 0b11111100;
 80092f4:	7bfb      	ldrb	r3, [r7, #15]
 80092f6:	f023 0303 	bic.w	r3, r3, #3
 80092fa:	73fb      	strb	r3, [r7, #15]
    // Set the lower 2 bits
    value |= mode;
 80092fc:	7bfa      	ldrb	r2, [r7, #15]
 80092fe:	79fb      	ldrb	r3, [r7, #7]
 8009300:	4313      	orrs	r3, r2
 8009302:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_MODE, value);
 8009304:	7bfb      	ldrb	r3, [r7, #15]
 8009306:	4619      	mov	r1, r3
 8009308:	2002      	movs	r0, #2
 800930a:	f000 f843 	bl	8009394 <HMC5883L_writeRegister8>
}
 800930e:	bf00      	nop
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <HMC5883L_setDataRate>:

    return value;
}

void HMC5883L_setDataRate(uint8_t dataRate)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b084      	sub	sp, #16
 800931a:	af00      	add	r7, sp, #0
 800931c:	4603      	mov	r3, r0
 800931e:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 8009320:	2000      	movs	r0, #0
 8009322:	f000 f853 	bl	80093cc <HMC5883L_readRegister8>
 8009326:	4603      	mov	r3, r0
 8009328:	73fb      	strb	r3, [r7, #15]
    // Mask out bits
    value &= 0b11100011;
 800932a:	7bfb      	ldrb	r3, [r7, #15]
 800932c:	f023 031c 	bic.w	r3, r3, #28
 8009330:	73fb      	strb	r3, [r7, #15]
    // Set bits
    value |= (dataRate << 2);
 8009332:	79fb      	ldrb	r3, [r7, #7]
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	b25a      	sxtb	r2, r3
 8009338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800933c:	4313      	orrs	r3, r2
 800933e:	b25b      	sxtb	r3, r3
 8009340:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 8009342:	7bfb      	ldrb	r3, [r7, #15]
 8009344:	4619      	mov	r1, r3
 8009346:	2000      	movs	r0, #0
 8009348:	f000 f824 	bl	8009394 <HMC5883L_writeRegister8>
}
 800934c:	bf00      	nop
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <HMC5883L_setSamples>:

    return value;
}

void HMC5883L_setSamples(uint8_t samples)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	4603      	mov	r3, r0
 800935c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 800935e:	2000      	movs	r0, #0
 8009360:	f000 f834 	bl	80093cc <HMC5883L_readRegister8>
 8009364:	4603      	mov	r3, r0
 8009366:	73fb      	strb	r3, [r7, #15]
    // Mask out bits
    value &= 0b10011111;
 8009368:	7bfb      	ldrb	r3, [r7, #15]
 800936a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800936e:	73fb      	strb	r3, [r7, #15]
    // Set bits
    value |= (samples << 5);
 8009370:	79fb      	ldrb	r3, [r7, #7]
 8009372:	015b      	lsls	r3, r3, #5
 8009374:	b25a      	sxtb	r2, r3
 8009376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800937a:	4313      	orrs	r3, r2
 800937c:	b25b      	sxtb	r3, r3
 800937e:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 8009380:	7bfb      	ldrb	r3, [r7, #15]
 8009382:	4619      	mov	r1, r3
 8009384:	2000      	movs	r0, #0
 8009386:	f000 f805 	bl	8009394 <HMC5883L_writeRegister8>
}
 800938a:	bf00      	nop
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
	...

08009394 <HMC5883L_writeRegister8>:
    return value;
}

// Write byte to register
void HMC5883L_writeRegister8(uint8_t reg, uint8_t value)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b086      	sub	sp, #24
 8009398:	af04      	add	r7, sp, #16
 800939a:	4603      	mov	r3, r0
 800939c:	460a      	mov	r2, r1
 800939e:	71fb      	strb	r3, [r7, #7]
 80093a0:	4613      	mov	r3, r2
 80093a2:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1 , &value, 1, 500);
 80093a4:	79fb      	ldrb	r3, [r7, #7]
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80093ac:	9302      	str	r3, [sp, #8]
 80093ae:	2301      	movs	r3, #1
 80093b0:	9301      	str	r3, [sp, #4]
 80093b2:	1dbb      	adds	r3, r7, #6
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	2301      	movs	r3, #1
 80093b8:	213c      	movs	r1, #60	; 0x3c
 80093ba:	4803      	ldr	r0, [pc, #12]	; (80093c8 <HMC5883L_writeRegister8+0x34>)
 80093bc:	f002 fb9c 	bl	800baf8 <HAL_I2C_Mem_Write>
}
 80093c0:	bf00      	nop
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	20000a08 	.word	0x20000a08

080093cc <HMC5883L_readRegister8>:
    return value;
}

// Read byte from register
uint8_t HMC5883L_readRegister8(uint8_t reg)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b088      	sub	sp, #32
 80093d0:	af04      	add	r7, sp, #16
 80093d2:	4603      	mov	r3, r0
 80093d4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 1, 500);
 80093d6:	79fb      	ldrb	r3, [r7, #7]
 80093d8:	b29a      	uxth	r2, r3
 80093da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80093de:	9302      	str	r3, [sp, #8]
 80093e0:	2301      	movs	r3, #1
 80093e2:	9301      	str	r3, [sp, #4]
 80093e4:	f107 030f 	add.w	r3, r7, #15
 80093e8:	9300      	str	r3, [sp, #0]
 80093ea:	2301      	movs	r3, #1
 80093ec:	213c      	movs	r1, #60	; 0x3c
 80093ee:	4804      	ldr	r0, [pc, #16]	; (8009400 <HMC5883L_readRegister8+0x34>)
 80093f0:	f002 fc96 	bl	800bd20 <HAL_I2C_Mem_Read>
    return value;
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	20000a08 	.word	0x20000a08

08009404 <HMC5883L_readRegister16>:

// Read word from register
int16_t HMC5883L_readRegister16(uint8_t reg)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af04      	add	r7, sp, #16
 800940a:	4603      	mov	r3, r0
 800940c:	71fb      	strb	r3, [r7, #7]
    int16_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 2, 500);
 800940e:	79fb      	ldrb	r3, [r7, #7]
 8009410:	b29a      	uxth	r2, r3
 8009412:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009416:	9302      	str	r3, [sp, #8]
 8009418:	2302      	movs	r3, #2
 800941a:	9301      	str	r3, [sp, #4]
 800941c:	f107 030e 	add.w	r3, r7, #14
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	2301      	movs	r3, #1
 8009424:	213c      	movs	r1, #60	; 0x3c
 8009426:	4804      	ldr	r0, [pc, #16]	; (8009438 <HMC5883L_readRegister16+0x34>)
 8009428:	f002 fc7a 	bl	800bd20 <HAL_I2C_Mem_Read>
    return value;
 800942c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8009430:	4618      	mov	r0, r3
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	20000a08 	.word	0x20000a08

0800943c <BMP280_initialize>:

/** Initialize the device with desired configuration
 * @return 1, if device is not recognized, 0 otherwise.
 * */
uint8_t BMP280_initialize(SPI_HandleTypeDef *SPIx, BMP280_t *bmp280)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
	// Disable MPU9250
	HAL_GPIO_WritePin(SPI2_IMU_CSIMU_GPIO_Port, SPI2_IMU_CSIMU_Pin, GPIO_PIN_SET);
 8009446:	2201      	movs	r2, #1
 8009448:	f44f 7180 	mov.w	r1, #256	; 0x100
 800944c:	481a      	ldr	r0, [pc, #104]	; (80094b8 <BMP280_initialize+0x7c>)
 800944e:	f002 faa9 	bl	800b9a4 <HAL_GPIO_WritePin>

	bmp280->spiHandle = SPIx;
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	601a      	str	r2, [r3, #0]

    if (BMP280_getID(bmp280) != BMP280_CHIP_ID)
 8009458:	6838      	ldr	r0, [r7, #0]
 800945a:	f000 f83c 	bl	80094d6 <BMP280_getID>
 800945e:	4603      	mov	r3, r0
 8009460:	2b58      	cmp	r3, #88	; 0x58
 8009462:	d001      	beq.n	8009468 <BMP280_initialize+0x2c>
    {
        return 1;
 8009464:	2301      	movs	r3, #1
 8009466:	e023      	b.n	80094b0 <BMP280_initialize+0x74>
    }

    // Reset device and wait
    BMP280_reset(bmp280);
 8009468:	6838      	ldr	r0, [r7, #0]
 800946a:	f000 f827 	bl	80094bc <BMP280_reset>
    HAL_Delay(500);
 800946e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009472:	f001 fbeb 	bl	800ac4c <HAL_Delay>

    // BEGIN OF CONFIGURATION ----------------------------------
    BMP280_setPressureOversampling(bmp280, oversampling_x16);
 8009476:	2105      	movs	r1, #5
 8009478:	6838      	ldr	r0, [r7, #0]
 800947a:	f000 f8ef 	bl	800965c <BMP280_setPressureOversampling>
    BMP280_setTemperatureOversampling(bmp280, oversampling_x2);
 800947e:	2102      	movs	r1, #2
 8009480:	6838      	ldr	r0, [r7, #0]
 8009482:	f000 f90c 	bl	800969e <BMP280_setTemperatureOversampling>

    BMP280_setPowerMode(bmp280, mode_normal);
 8009486:	2103      	movs	r1, #3
 8009488:	6838      	ldr	r0, [r7, #0]
 800948a:	f000 f929 	bl	80096e0 <BMP280_setPowerMode>
    BMP280_setFilterCoefficient(bmp280, filter_coeff_16);
 800948e:	2104      	movs	r1, #4
 8009490:	6838      	ldr	r0, [r7, #0]
 8009492:	f000 f966 	bl	8009762 <BMP280_setFilterCoefficient>
    BMP280_setStandbyTime(bmp280, standby_time_500us);
 8009496:	2100      	movs	r1, #0
 8009498:	6838      	ldr	r0, [r7, #0]
 800949a:	f000 f941 	bl	8009720 <BMP280_setStandbyTime>
    // END OF CONFIGURATION --------------------------

    BMP280_readCompensationParameters(bmp280);
 800949e:	6838      	ldr	r0, [r7, #0]
 80094a0:	f000 f826 	bl	80094f0 <BMP280_readCompensationParameters>
    BMP280_setReferencePressure(bmp280, 100, 50);
 80094a4:	2232      	movs	r2, #50	; 0x32
 80094a6:	2164      	movs	r1, #100	; 0x64
 80094a8:	6838      	ldr	r0, [r7, #0]
 80094aa:	f000 f89e 	bl	80095ea <BMP280_setReferencePressure>

    return 0;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	40020c00 	.word	0x40020c00

080094bc <BMP280_reset>:

/** Perform power-on reset procedure */
void BMP280_reset(BMP280_t *bmp280)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
    BMP280_writeRegister(bmp280, BMP280_REG_RESET, BMP280_RESET_VALUE);
 80094c4:	22b6      	movs	r2, #182	; 0xb6
 80094c6:	21e0      	movs	r1, #224	; 0xe0
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 fa27 	bl	800991c <BMP280_writeRegister>
}
 80094ce:	bf00      	nop
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <BMP280_getID>:
/**
 * Read chip identification number.
 * @return chip ID
 * */
uint8_t BMP280_getID(BMP280_t *bmp280)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b082      	sub	sp, #8
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
    return BMP280_readRegister(bmp280, BMP280_REG_ID);
 80094de:	21d0      	movs	r1, #208	; 0xd0
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f9ff 	bl	80098e4 <BMP280_readRegister>
 80094e6:	4603      	mov	r3, r0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <BMP280_readCompensationParameters>:

void BMP280_readCompensationParameters(BMP280_t *bmp280)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b088      	sub	sp, #32
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
    uint8_t buf[24];
    BMP280_readMBRegister(bmp280, BMP280_REG_CALIB, buf, 24);
 80094f8:	f107 0208 	add.w	r2, r7, #8
 80094fc:	2318      	movs	r3, #24
 80094fe:	2188      	movs	r1, #136	; 0x88
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 fa2a 	bl	800995a <BMP280_readMBRegister>
    bmp280->compensationParameters.dig_t1 = ((buf[1] << 8) | buf[0]);
 8009506:	7a7b      	ldrb	r3, [r7, #9]
 8009508:	021b      	lsls	r3, r3, #8
 800950a:	b21a      	sxth	r2, r3
 800950c:	7a3b      	ldrb	r3, [r7, #8]
 800950e:	b21b      	sxth	r3, r3
 8009510:	4313      	orrs	r3, r2
 8009512:	b21b      	sxth	r3, r3
 8009514:	b29a      	uxth	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	831a      	strh	r2, [r3, #24]
    bmp280->compensationParameters.dig_t2 = ((buf[3] << 8) | buf[2]);
 800951a:	7afb      	ldrb	r3, [r7, #11]
 800951c:	021b      	lsls	r3, r3, #8
 800951e:	b21a      	sxth	r2, r3
 8009520:	7abb      	ldrb	r3, [r7, #10]
 8009522:	b21b      	sxth	r3, r3
 8009524:	4313      	orrs	r3, r2
 8009526:	b21a      	sxth	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	835a      	strh	r2, [r3, #26]
    bmp280->compensationParameters.dig_t3 = ((buf[5] << 8) | buf[4]);
 800952c:	7b7b      	ldrb	r3, [r7, #13]
 800952e:	021b      	lsls	r3, r3, #8
 8009530:	b21a      	sxth	r2, r3
 8009532:	7b3b      	ldrb	r3, [r7, #12]
 8009534:	b21b      	sxth	r3, r3
 8009536:	4313      	orrs	r3, r2
 8009538:	b21a      	sxth	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	839a      	strh	r2, [r3, #28]
    bmp280->compensationParameters.dig_p1 = ((buf[7] << 8) | buf[6]);
 800953e:	7bfb      	ldrb	r3, [r7, #15]
 8009540:	021b      	lsls	r3, r3, #8
 8009542:	b21a      	sxth	r2, r3
 8009544:	7bbb      	ldrb	r3, [r7, #14]
 8009546:	b21b      	sxth	r3, r3
 8009548:	4313      	orrs	r3, r2
 800954a:	b21b      	sxth	r3, r3
 800954c:	b29a      	uxth	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	83da      	strh	r2, [r3, #30]
    bmp280->compensationParameters.dig_p2 = ((buf[9] << 8) | buf[8]);
 8009552:	7c7b      	ldrb	r3, [r7, #17]
 8009554:	021b      	lsls	r3, r3, #8
 8009556:	b21a      	sxth	r2, r3
 8009558:	7c3b      	ldrb	r3, [r7, #16]
 800955a:	b21b      	sxth	r3, r3
 800955c:	4313      	orrs	r3, r2
 800955e:	b21a      	sxth	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	841a      	strh	r2, [r3, #32]
    bmp280->compensationParameters.dig_p3 = ((buf[11] << 8) | buf[10]);
 8009564:	7cfb      	ldrb	r3, [r7, #19]
 8009566:	021b      	lsls	r3, r3, #8
 8009568:	b21a      	sxth	r2, r3
 800956a:	7cbb      	ldrb	r3, [r7, #18]
 800956c:	b21b      	sxth	r3, r3
 800956e:	4313      	orrs	r3, r2
 8009570:	b21a      	sxth	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	845a      	strh	r2, [r3, #34]	; 0x22
    bmp280->compensationParameters.dig_p4 = ((buf[13] << 8) | buf[12]);
 8009576:	7d7b      	ldrb	r3, [r7, #21]
 8009578:	021b      	lsls	r3, r3, #8
 800957a:	b21a      	sxth	r2, r3
 800957c:	7d3b      	ldrb	r3, [r7, #20]
 800957e:	b21b      	sxth	r3, r3
 8009580:	4313      	orrs	r3, r2
 8009582:	b21a      	sxth	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	849a      	strh	r2, [r3, #36]	; 0x24
    bmp280->compensationParameters.dig_p5 = ((buf[15] << 8) | buf[14]);
 8009588:	7dfb      	ldrb	r3, [r7, #23]
 800958a:	021b      	lsls	r3, r3, #8
 800958c:	b21a      	sxth	r2, r3
 800958e:	7dbb      	ldrb	r3, [r7, #22]
 8009590:	b21b      	sxth	r3, r3
 8009592:	4313      	orrs	r3, r2
 8009594:	b21a      	sxth	r2, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	84da      	strh	r2, [r3, #38]	; 0x26
    bmp280->compensationParameters.dig_p6 = ((buf[17] << 8) | buf[16]);
 800959a:	7e7b      	ldrb	r3, [r7, #25]
 800959c:	021b      	lsls	r3, r3, #8
 800959e:	b21a      	sxth	r2, r3
 80095a0:	7e3b      	ldrb	r3, [r7, #24]
 80095a2:	b21b      	sxth	r3, r3
 80095a4:	4313      	orrs	r3, r2
 80095a6:	b21a      	sxth	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	851a      	strh	r2, [r3, #40]	; 0x28
    bmp280->compensationParameters.dig_p7 = ((buf[19] << 8) | buf[18]);
 80095ac:	7efb      	ldrb	r3, [r7, #27]
 80095ae:	021b      	lsls	r3, r3, #8
 80095b0:	b21a      	sxth	r2, r3
 80095b2:	7ebb      	ldrb	r3, [r7, #26]
 80095b4:	b21b      	sxth	r3, r3
 80095b6:	4313      	orrs	r3, r2
 80095b8:	b21a      	sxth	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    bmp280->compensationParameters.dig_p8 = ((buf[21] << 8) | buf[20]);
 80095be:	7f7b      	ldrb	r3, [r7, #29]
 80095c0:	021b      	lsls	r3, r3, #8
 80095c2:	b21a      	sxth	r2, r3
 80095c4:	7f3b      	ldrb	r3, [r7, #28]
 80095c6:	b21b      	sxth	r3, r3
 80095c8:	4313      	orrs	r3, r2
 80095ca:	b21a      	sxth	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	859a      	strh	r2, [r3, #44]	; 0x2c
    bmp280->compensationParameters.dig_p9 = ((buf[23] << 8) | buf[22]);
 80095d0:	7ffb      	ldrb	r3, [r7, #31]
 80095d2:	021b      	lsls	r3, r3, #8
 80095d4:	b21a      	sxth	r2, r3
 80095d6:	7fbb      	ldrb	r3, [r7, #30]
 80095d8:	b21b      	sxth	r3, r3
 80095da:	4313      	orrs	r3, r2
 80095dc:	b21a      	sxth	r2, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 80095e2:	bf00      	nop
 80095e4:	3720      	adds	r7, #32
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <BMP280_setReferencePressure>:
 * Set reference pressure for altitude calculation by averaging pressure measurements.
 * @param samples: Number of measurements to average.
 * @param delay: Delay between measurements (in ms).
 * */
void BMP280_setReferencePressure(BMP280_t *bmp280, uint16_t samples, uint8_t delay)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b084      	sub	sp, #16
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	460b      	mov	r3, r1
 80095f4:	807b      	strh	r3, [r7, #2]
 80095f6:	4613      	mov	r3, r2
 80095f8:	707b      	strb	r3, [r7, #1]
    HAL_Delay(500);
 80095fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80095fe:	f001 fb25 	bl	800ac4c <HAL_Delay>
    float sum = 0;
 8009602:	f04f 0300 	mov.w	r3, #0
 8009606:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < samples; i++)
 8009608:	2300      	movs	r3, #0
 800960a:	60bb      	str	r3, [r7, #8]
 800960c:	e012      	b.n	8009634 <BMP280_setReferencePressure+0x4a>
    {
        BMP280_measure(bmp280);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f8ca 	bl	80097a8 <BMP280_measure>
        sum += bmp280->measurement.pressure;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	edd3 7a04 	vldr	s15, [r3, #16]
 800961a:	ed97 7a03 	vldr	s14, [r7, #12]
 800961e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009622:	edc7 7a03 	vstr	s15, [r7, #12]
        HAL_Delay(delay);
 8009626:	787b      	ldrb	r3, [r7, #1]
 8009628:	4618      	mov	r0, r3
 800962a:	f001 fb0f 	bl	800ac4c <HAL_Delay>
    for (int i = 0; i < samples; i++)
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	3301      	adds	r3, #1
 8009632:	60bb      	str	r3, [r7, #8]
 8009634:	887b      	ldrh	r3, [r7, #2]
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	429a      	cmp	r2, r3
 800963a:	dbe8      	blt.n	800960e <BMP280_setReferencePressure+0x24>
    }
    bmp280->p_reference = sum / samples;
 800963c:	887b      	ldrh	r3, [r7, #2]
 800963e:	ee07 3a90 	vmov	s15, r3
 8009642:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009646:	edd7 6a03 	vldr	s13, [r7, #12]
 800964a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8009654:	bf00      	nop
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <BMP280_setPressureOversampling>:

/** Configure pressure oversampling */
void BMP280_setPressureOversampling(BMP280_t *bmp280, uint8_t osrs_p)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	460b      	mov	r3, r1
 8009666:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 8009668:	21f4      	movs	r1, #244	; 0xf4
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f93a 	bl	80098e4 <BMP280_readRegister>
 8009670:	4603      	mov	r3, r0
 8009672:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11100011) | (osrs_p << 2);
 8009674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009678:	f023 031c 	bic.w	r3, r3, #28
 800967c:	b25a      	sxtb	r2, r3
 800967e:	78fb      	ldrb	r3, [r7, #3]
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	b25b      	sxtb	r3, r3
 8009684:	4313      	orrs	r3, r2
 8009686:	b25b      	sxtb	r3, r3
 8009688:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 800968a:	7bfb      	ldrb	r3, [r7, #15]
 800968c:	461a      	mov	r2, r3
 800968e:	21f4      	movs	r1, #244	; 0xf4
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f943 	bl	800991c <BMP280_writeRegister>
}
 8009696:	bf00      	nop
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <BMP280_setTemperatureOversampling>:

/** Configure temperature oversampling */
void BMP280_setTemperatureOversampling(BMP280_t *bmp280, uint8_t osrs_t)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b084      	sub	sp, #16
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	460b      	mov	r3, r1
 80096a8:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 80096aa:	21f4      	movs	r1, #244	; 0xf4
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 f919 	bl	80098e4 <BMP280_readRegister>
 80096b2:	4603      	mov	r3, r0
 80096b4:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b00011111) | (osrs_t << 5);
 80096b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096ba:	f003 031f 	and.w	r3, r3, #31
 80096be:	b25a      	sxtb	r2, r3
 80096c0:	78fb      	ldrb	r3, [r7, #3]
 80096c2:	015b      	lsls	r3, r3, #5
 80096c4:	b25b      	sxtb	r3, r3
 80096c6:	4313      	orrs	r3, r2
 80096c8:	b25b      	sxtb	r3, r3
 80096ca:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
 80096ce:	461a      	mov	r2, r3
 80096d0:	21f4      	movs	r1, #244	; 0xf4
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 f922 	bl	800991c <BMP280_writeRegister>
}
 80096d8:	bf00      	nop
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <BMP280_setPowerMode>:

/** Configure power mode */
void BMP280_setPowerMode(BMP280_t *bmp280, uint8_t mode)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	460b      	mov	r3, r1
 80096ea:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 80096ec:	21f4      	movs	r1, #244	; 0xf4
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f8f8 	bl	80098e4 <BMP280_readRegister>
 80096f4:	4603      	mov	r3, r0
 80096f6:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11111100) | mode;
 80096f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096fc:	f023 0303 	bic.w	r3, r3, #3
 8009700:	b25a      	sxtb	r2, r3
 8009702:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009706:	4313      	orrs	r3, r2
 8009708:	b25b      	sxtb	r3, r3
 800970a:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 800970c:	7bfb      	ldrb	r3, [r7, #15]
 800970e:	461a      	mov	r2, r3
 8009710:	21f4      	movs	r1, #244	; 0xf4
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f902 	bl	800991c <BMP280_writeRegister>
}
 8009718:	bf00      	nop
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <BMP280_setStandbyTime>:

/** Configure standby time */
void BMP280_setStandbyTime(BMP280_t *bmp280, uint8_t t_sb)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	460b      	mov	r3, r1
 800972a:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 800972c:	21f5      	movs	r1, #245	; 0xf5
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f8d8 	bl	80098e4 <BMP280_readRegister>
 8009734:	4603      	mov	r3, r0
 8009736:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b00011111) | (t_sb << 5);
 8009738:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800973c:	f003 031f 	and.w	r3, r3, #31
 8009740:	b25a      	sxtb	r2, r3
 8009742:	78fb      	ldrb	r3, [r7, #3]
 8009744:	015b      	lsls	r3, r3, #5
 8009746:	b25b      	sxtb	r3, r3
 8009748:	4313      	orrs	r3, r2
 800974a:	b25b      	sxtb	r3, r3
 800974c:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 800974e:	7bfb      	ldrb	r3, [r7, #15]
 8009750:	461a      	mov	r2, r3
 8009752:	21f5      	movs	r1, #245	; 0xf5
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f8e1 	bl	800991c <BMP280_writeRegister>
}
 800975a:	bf00      	nop
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <BMP280_setFilterCoefficient>:

/** Configure IIR filter */
void BMP280_setFilterCoefficient(BMP280_t *bmp280, uint8_t filter)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b084      	sub	sp, #16
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	460b      	mov	r3, r1
 800976c:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 800976e:	21f5      	movs	r1, #245	; 0xf5
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f8b7 	bl	80098e4 <BMP280_readRegister>
 8009776:	4603      	mov	r3, r0
 8009778:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b11100011) | (filter << 2);
 800977a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800977e:	f023 031c 	bic.w	r3, r3, #28
 8009782:	b25a      	sxtb	r2, r3
 8009784:	78fb      	ldrb	r3, [r7, #3]
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	b25b      	sxtb	r3, r3
 800978a:	4313      	orrs	r3, r2
 800978c:	b25b      	sxtb	r3, r3
 800978e:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 8009790:	7bfb      	ldrb	r3, [r7, #15]
 8009792:	461a      	mov	r2, r3
 8009794:	21f5      	movs	r1, #245	; 0xf5
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f8c0 	bl	800991c <BMP280_writeRegister>
}
 800979c:	bf00      	nop
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	0000      	movs	r0, r0
	...

080097a8 <BMP280_measure>:
/**
 * Read latest measurement from sensor and execute compensation.
 * Stores the results in measurement member variable.
 * */
void BMP280_measure(BMP280_t *bmp280)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
    uint8_t data[6];
    BMP280_readMBRegister(bmp280, BMP280_REG_DATA, data, 6);
 80097b0:	f107 0208 	add.w	r2, r7, #8
 80097b4:	2306      	movs	r3, #6
 80097b6:	21f7      	movs	r1, #247	; 0xf7
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 f8ce 	bl	800995a <BMP280_readMBRegister>

    int32_t adc_P = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80097be:	7a3b      	ldrb	r3, [r7, #8]
 80097c0:	031a      	lsls	r2, r3, #12
 80097c2:	7a7b      	ldrb	r3, [r7, #9]
 80097c4:	011b      	lsls	r3, r3, #4
 80097c6:	4313      	orrs	r3, r2
 80097c8:	7aba      	ldrb	r2, [r7, #10]
 80097ca:	0912      	lsrs	r2, r2, #4
 80097cc:	b2d2      	uxtb	r2, r2
 80097ce:	4313      	orrs	r3, r2
 80097d0:	617b      	str	r3, [r7, #20]
    int32_t adc_T = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80097d2:	7afb      	ldrb	r3, [r7, #11]
 80097d4:	031a      	lsls	r2, r3, #12
 80097d6:	7b3b      	ldrb	r3, [r7, #12]
 80097d8:	011b      	lsls	r3, r3, #4
 80097da:	4313      	orrs	r3, r2
 80097dc:	7b7a      	ldrb	r2, [r7, #13]
 80097de:	0912      	lsrs	r2, r2, #4
 80097e0:	b2d2      	uxtb	r2, r2
 80097e2:	4313      	orrs	r3, r2
 80097e4:	613b      	str	r3, [r7, #16]

    bmp280->measurement.temperature = (float)BMP280_compensate_temperature(bmp280, adc_T) / 100.0;
 80097e6:	6939      	ldr	r1, [r7, #16]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f917 	bl	8009a1c <BMP280_compensate_temperature>
 80097ee:	ee07 0a90 	vmov	s15, r0
 80097f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097f6:	ee17 0a90 	vmov	r0, s15
 80097fa:	f7f6 fecd 	bl	8000598 <__aeabi_f2d>
 80097fe:	f04f 0200 	mov.w	r2, #0
 8009802:	4b35      	ldr	r3, [pc, #212]	; (80098d8 <BMP280_measure+0x130>)
 8009804:	f7f7 f84a 	bl	800089c <__aeabi_ddiv>
 8009808:	4602      	mov	r2, r0
 800980a:	460b      	mov	r3, r1
 800980c:	4610      	mov	r0, r2
 800980e:	4619      	mov	r1, r3
 8009810:	f7f7 fa12 	bl	8000c38 <__aeabi_d2f>
 8009814:	4602      	mov	r2, r0
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	60da      	str	r2, [r3, #12]
    bmp280->measurement.pressure = (float)BMP280_compensate_pressure(bmp280, adc_P) / 256.0;
 800981a:	6979      	ldr	r1, [r7, #20]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f953 	bl	8009ac8 <BMP280_compensate_pressure>
 8009822:	ee07 0a90 	vmov	s15, r0
 8009826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800982a:	ee17 0a90 	vmov	r0, s15
 800982e:	f7f6 feb3 	bl	8000598 <__aeabi_f2d>
 8009832:	f04f 0200 	mov.w	r2, #0
 8009836:	4b29      	ldr	r3, [pc, #164]	; (80098dc <BMP280_measure+0x134>)
 8009838:	f7f7 f830 	bl	800089c <__aeabi_ddiv>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	4610      	mov	r0, r2
 8009842:	4619      	mov	r1, r3
 8009844:	f7f7 f9f8 	bl	8000c38 <__aeabi_d2f>
 8009848:	4602      	mov	r2, r0
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	611a      	str	r2, [r3, #16]

    if (bmp280->p_reference > 0)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	edd3 7a01 	vldr	s15, [r3, #4]
 8009854:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800985c:	dc00      	bgt.n	8009860 <BMP280_measure+0xb8>
    {
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
    }
}
 800985e:	e02c      	b.n	80098ba <BMP280_measure+0x112>
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	ed93 7a04 	vldr	s14, [r3, #16]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	edd3 7a01 	vldr	s15, [r3, #4]
 800986c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009870:	ee16 0a90 	vmov	r0, s13
 8009874:	f7f6 fe90 	bl	8000598 <__aeabi_f2d>
 8009878:	4602      	mov	r2, r0
 800987a:	460b      	mov	r3, r1
 800987c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80098c8 <BMP280_measure+0x120>
 8009880:	ec43 2b10 	vmov	d0, r2, r3
 8009884:	f00f ff24 	bl	80196d0 <pow>
 8009888:	ec53 2b10 	vmov	r2, r3, d0
 800988c:	f04f 0000 	mov.w	r0, #0
 8009890:	4913      	ldr	r1, [pc, #76]	; (80098e0 <BMP280_measure+0x138>)
 8009892:	f7f6 fd21 	bl	80002d8 <__aeabi_dsub>
 8009896:	4602      	mov	r2, r0
 8009898:	460b      	mov	r3, r1
 800989a:	4610      	mov	r0, r2
 800989c:	4619      	mov	r1, r3
 800989e:	a30c      	add	r3, pc, #48	; (adr r3, 80098d0 <BMP280_measure+0x128>)
 80098a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a4:	f7f6 fed0 	bl	8000648 <__aeabi_dmul>
 80098a8:	4602      	mov	r2, r0
 80098aa:	460b      	mov	r3, r1
 80098ac:	4610      	mov	r0, r2
 80098ae:	4619      	mov	r1, r3
 80098b0:	f7f7 f9c2 	bl	8000c38 <__aeabi_d2f>
 80098b4:	4602      	mov	r2, r0
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	615a      	str	r2, [r3, #20]
}
 80098ba:	bf00      	nop
 80098bc:	3718      	adds	r7, #24
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	f3af 8000 	nop.w
 80098c8:	1a36e2eb 	.word	0x1a36e2eb
 80098cc:	3fc85bc0 	.word	0x3fc85bc0
 80098d0:	00000000 	.word	0x00000000
 80098d4:	4150e92d 	.word	0x4150e92d
 80098d8:	40590000 	.word	0x40590000
 80098dc:	40700000 	.word	0x40700000
 80098e0:	3ff00000 	.word	0x3ff00000

080098e4 <BMP280_readRegister>:
 * Read a register
 * @param address: Register address.
 * @return Register value.
 * */
uint8_t BMP280_readRegister(BMP280_t *bmp280, uint8_t address)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	460b      	mov	r3, r1
 80098ee:	70fb      	strb	r3, [r7, #3]
    BMP280_spiCSNlow(bmp280);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f883 	bl	80099fc <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 80098f6:	78fb      	ldrb	r3, [r7, #3]
 80098f8:	4619      	mov	r1, r3
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f855 	bl	80099aa <BMP280_spiReadWrite>
    uint8_t value = BMP280_spiReadWrite(bmp280, 0);
 8009900:	2100      	movs	r1, #0
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 f851 	bl	80099aa <BMP280_spiReadWrite>
 8009908:	4603      	mov	r3, r0
 800990a:	73fb      	strb	r3, [r7, #15]
    BMP280_spiCSNhigh(bmp280);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f865 	bl	80099dc <BMP280_spiCSNhigh>
    return value;
 8009912:	7bfb      	ldrb	r3, [r7, #15]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <BMP280_writeRegister>:
 * Write to a register
 * @param address: Register address.
 * @param value: Value to write.
 * */
void BMP280_writeRegister(BMP280_t *bmp280, uint8_t address, uint8_t value)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	460b      	mov	r3, r1
 8009926:	70fb      	strb	r3, [r7, #3]
 8009928:	4613      	mov	r3, r2
 800992a:	70bb      	strb	r3, [r7, #2]
    BMP280_spiCSNlow(bmp280);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f865 	bl	80099fc <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address & BMP280_SPI_MASK_WRITE);
 8009932:	78fb      	ldrb	r3, [r7, #3]
 8009934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009938:	b2db      	uxtb	r3, r3
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f834 	bl	80099aa <BMP280_spiReadWrite>
    BMP280_spiReadWrite(bmp280, value);
 8009942:	78bb      	ldrb	r3, [r7, #2]
 8009944:	4619      	mov	r1, r3
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f82f 	bl	80099aa <BMP280_spiReadWrite>
    BMP280_spiCSNhigh(bmp280);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 f845 	bl	80099dc <BMP280_spiCSNhigh>
}
 8009952:	bf00      	nop
 8009954:	3708      	adds	r7, #8
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <BMP280_readMBRegister>:
 * @param address: Register address.
 * @param values: Array pointer to store values in.
 * @param length: Number of bytes to read.
 * */
void BMP280_readMBRegister(BMP280_t *bmp280, uint8_t address, uint8_t *values, uint8_t length)
{
 800995a:	b590      	push	{r4, r7, lr}
 800995c:	b085      	sub	sp, #20
 800995e:	af00      	add	r7, sp, #0
 8009960:	60f8      	str	r0, [r7, #12]
 8009962:	607a      	str	r2, [r7, #4]
 8009964:	461a      	mov	r2, r3
 8009966:	460b      	mov	r3, r1
 8009968:	72fb      	strb	r3, [r7, #11]
 800996a:	4613      	mov	r3, r2
 800996c:	72bb      	strb	r3, [r7, #10]
    BMP280_spiCSNlow(bmp280);
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f000 f844 	bl	80099fc <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 8009974:	7afb      	ldrb	r3, [r7, #11]
 8009976:	4619      	mov	r1, r3
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f000 f816 	bl	80099aa <BMP280_spiReadWrite>
    while (length--)
 800997e:	e008      	b.n	8009992 <BMP280_readMBRegister+0x38>
    {
        *values++ = BMP280_spiReadWrite(bmp280, 0);
 8009980:	687c      	ldr	r4, [r7, #4]
 8009982:	1c63      	adds	r3, r4, #1
 8009984:	607b      	str	r3, [r7, #4]
 8009986:	2100      	movs	r1, #0
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f000 f80e 	bl	80099aa <BMP280_spiReadWrite>
 800998e:	4603      	mov	r3, r0
 8009990:	7023      	strb	r3, [r4, #0]
    while (length--)
 8009992:	7abb      	ldrb	r3, [r7, #10]
 8009994:	1e5a      	subs	r2, r3, #1
 8009996:	72ba      	strb	r2, [r7, #10]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1f1      	bne.n	8009980 <BMP280_readMBRegister+0x26>
    }
    BMP280_spiCSNhigh(bmp280);
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f000 f81d 	bl	80099dc <BMP280_spiCSNhigh>
}
 80099a2:	bf00      	nop
 80099a4:	3714      	adds	r7, #20
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd90      	pop	{r4, r7, pc}

080099aa <BMP280_spiReadWrite>:
 * SPI transmit and receive one byte simultaneously
 * @param tx_message: Transmit byte.
 * @return Received byte.
 * */
uint8_t BMP280_spiReadWrite(BMP280_t *bmp280, uint8_t tx_message)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b086      	sub	sp, #24
 80099ae:	af02      	add	r7, sp, #8
 80099b0:	6078      	str	r0, [r7, #4]
 80099b2:	460b      	mov	r3, r1
 80099b4:	70fb      	strb	r3, [r7, #3]
    uint8_t rx_message = 255;
 80099b6:	23ff      	movs	r3, #255	; 0xff
 80099b8:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(bmp280->spiHandle, &tx_message, &rx_message, 1, HAL_MAX_DELAY);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6818      	ldr	r0, [r3, #0]
 80099be:	f107 020f 	add.w	r2, r7, #15
 80099c2:	1cf9      	adds	r1, r7, #3
 80099c4:	f04f 33ff 	mov.w	r3, #4294967295
 80099c8:	9300      	str	r3, [sp, #0]
 80099ca:	2301      	movs	r3, #1
 80099cc:	f004 f993 	bl	800dcf6 <HAL_SPI_TransmitReceive>
    return rx_message;
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
	...

080099dc <BMP280_spiCSNhigh>:

/** Pull chip select high (inactive) */
void BMP280_spiCSNhigh(BMP280_t *bmp280)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 80099e4:	2201      	movs	r2, #1
 80099e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80099ea:	4803      	ldr	r0, [pc, #12]	; (80099f8 <BMP280_spiCSNhigh+0x1c>)
 80099ec:	f001 ffda 	bl	800b9a4 <HAL_GPIO_WritePin>
}
 80099f0:	bf00      	nop
 80099f2:	3708      	adds	r7, #8
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	40020c00 	.word	0x40020c00

080099fc <BMP280_spiCSNlow>:

/** Pull chip select low (active) */
void BMP280_spiCSNlow(BMP280_t *bmp280)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_RESET);
 8009a04:	2200      	movs	r2, #0
 8009a06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a0a:	4803      	ldr	r0, [pc, #12]	; (8009a18 <BMP280_spiCSNlow+0x1c>)
 8009a0c:	f001 ffca 	bl	800b9a4 <HAL_GPIO_WritePin>
}
 8009a10:	bf00      	nop
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	40020c00 	.word	0x40020c00

08009a1c <BMP280_compensate_temperature>:
 * Calculate sensor temperature from measurement and compensation parameters.
 * @param uncomp_temp: Raw temperature measurement.
 * @return Temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
 * */
int32_t BMP280_compensate_temperature(BMP280_t *bmp280, int32_t uncomp_temp)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
    int32_t var1, var2;
    var1 = ((((uncomp_temp / 8) - ((int32_t)bmp280->compensationParameters.dig_t1 << 1))) * ((int32_t)bmp280->compensationParameters.dig_t2)) / 2048;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	da00      	bge.n	8009a2e <BMP280_compensate_temperature+0x12>
 8009a2c:	3307      	adds	r3, #7
 8009a2e:	10db      	asrs	r3, r3, #3
 8009a30:	461a      	mov	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	8b1b      	ldrh	r3, [r3, #24]
 8009a36:	005b      	lsls	r3, r3, #1
 8009a38:	1ad3      	subs	r3, r2, r3
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 8009a40:	fb02 f303 	mul.w	r3, r2, r3
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	da01      	bge.n	8009a4c <BMP280_compensate_temperature+0x30>
 8009a48:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8009a4c:	12db      	asrs	r3, r3, #11
 8009a4e:	60fb      	str	r3, [r7, #12]
    var2 = (((((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1)) * ((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1))) / 4096) * ((int32_t)bmp280->compensationParameters.dig_t3)) / 16384;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	da00      	bge.n	8009a58 <BMP280_compensate_temperature+0x3c>
 8009a56:	330f      	adds	r3, #15
 8009a58:	111b      	asrs	r3, r3, #4
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	8b1b      	ldrh	r3, [r3, #24]
 8009a60:	1ad2      	subs	r2, r2, r3
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	da00      	bge.n	8009a6a <BMP280_compensate_temperature+0x4e>
 8009a68:	330f      	adds	r3, #15
 8009a6a:	111b      	asrs	r3, r3, #4
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	8b1b      	ldrh	r3, [r3, #24]
 8009a72:	1acb      	subs	r3, r1, r3
 8009a74:	fb02 f303 	mul.w	r3, r2, r3
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	da01      	bge.n	8009a80 <BMP280_compensate_temperature+0x64>
 8009a7c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8009a80:	131b      	asrs	r3, r3, #12
 8009a82:	461a      	mov	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8009a8a:	fb02 f303 	mul.w	r3, r2, r3
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	da03      	bge.n	8009a9a <BMP280_compensate_temperature+0x7e>
 8009a92:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8009a96:	441a      	add	r2, r3
 8009a98:	4613      	mov	r3, r2
 8009a9a:	139b      	asrs	r3, r3, #14
 8009a9c:	60bb      	str	r3, [r7, #8]
    bmp280->t_fine = var1 + var2;
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	441a      	add	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	609a      	str	r2, [r3, #8]
    return (bmp280->t_fine * 5 + 128) / 256;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	689a      	ldr	r2, [r3, #8]
 8009aac:	4613      	mov	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	3380      	adds	r3, #128	; 0x80
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	da00      	bge.n	8009aba <BMP280_compensate_temperature+0x9e>
 8009ab8:	33ff      	adds	r3, #255	; 0xff
 8009aba:	121b      	asrs	r3, r3, #8
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3714      	adds	r7, #20
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <BMP280_compensate_pressure>:
 * @param uncomp_pres: Raw pressure measurement.
 * @return Pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
 * Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
 * */
uint32_t BMP280_compensate_pressure(BMP280_t *bmp280, int32_t uncomp_pres)
{
 8009ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009acc:	b0d6      	sub	sp, #344	; 0x158
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 8009ad4:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
    int64_t var1, var2, p;
    var1 = ((int64_t)(bmp280->t_fine)) - 128000;
 8009ad8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	17da      	asrs	r2, r3, #31
 8009ae0:	461c      	mov	r4, r3
 8009ae2:	4615      	mov	r5, r2
 8009ae4:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8009ae8:	f145 3bff 	adc.w	fp, r5, #4294967295
 8009aec:	e9c7 ab54 	strd	sl, fp, [r7, #336]	; 0x150
    var2 = var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p6;
 8009af0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8009af4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009af8:	fb03 f102 	mul.w	r1, r3, r2
 8009afc:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8009b00:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009b04:	fb02 f303 	mul.w	r3, r2, r3
 8009b08:	18ca      	adds	r2, r1, r3
 8009b0a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009b0e:	fba3 8903 	umull	r8, r9, r3, r3
 8009b12:	eb02 0309 	add.w	r3, r2, r9
 8009b16:	4699      	mov	r9, r3
 8009b18:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009b1c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8009b20:	b21b      	sxth	r3, r3
 8009b22:	17da      	asrs	r2, r3, #31
 8009b24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009b28:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009b2c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8009b30:	4603      	mov	r3, r0
 8009b32:	fb03 f209 	mul.w	r2, r3, r9
 8009b36:	460b      	mov	r3, r1
 8009b38:	fb08 f303 	mul.w	r3, r8, r3
 8009b3c:	4413      	add	r3, r2
 8009b3e:	4602      	mov	r2, r0
 8009b40:	fba8 1202 	umull	r1, r2, r8, r2
 8009b44:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8009b48:	460a      	mov	r2, r1
 8009b4a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8009b4e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8009b52:	4413      	add	r3, r2
 8009b54:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009b58:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8009b5c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8009b60:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + ((var1 * (int64_t)bmp280->compensationParameters.dig_p5) * 131072);
 8009b64:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009b68:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8009b6c:	b21b      	sxth	r3, r3
 8009b6e:	17da      	asrs	r2, r3, #31
 8009b70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b74:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8009b78:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009b7c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8009b80:	462a      	mov	r2, r5
 8009b82:	fb02 f203 	mul.w	r2, r2, r3
 8009b86:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009b8a:	4621      	mov	r1, r4
 8009b8c:	fb01 f303 	mul.w	r3, r1, r3
 8009b90:	441a      	add	r2, r3
 8009b92:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009b96:	4621      	mov	r1, r4
 8009b98:	fba3 1301 	umull	r1, r3, r3, r1
 8009b9c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8009ba6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009baa:	18d3      	adds	r3, r2, r3
 8009bac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8009bb0:	f04f 0000 	mov.w	r0, #0
 8009bb4:	f04f 0100 	mov.w	r1, #0
 8009bb8:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 8009bbc:	462b      	mov	r3, r5
 8009bbe:	0459      	lsls	r1, r3, #17
 8009bc0:	4623      	mov	r3, r4
 8009bc2:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8009bc6:	4623      	mov	r3, r4
 8009bc8:	0458      	lsls	r0, r3, #17
 8009bca:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009bce:	1814      	adds	r4, r2, r0
 8009bd0:	67bc      	str	r4, [r7, #120]	; 0x78
 8009bd2:	414b      	adcs	r3, r1
 8009bd4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009bd6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8009bda:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + (((int64_t)bmp280->compensationParameters.dig_p4) * 34359738368);
 8009bde:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009be2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8009be6:	b21b      	sxth	r3, r3
 8009be8:	17da      	asrs	r2, r3, #31
 8009bea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009bee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009bf2:	f04f 0000 	mov.w	r0, #0
 8009bf6:	f04f 0100 	mov.w	r1, #0
 8009bfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009bfe:	00d9      	lsls	r1, r3, #3
 8009c00:	2000      	movs	r0, #0
 8009c02:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009c06:	1814      	adds	r4, r2, r0
 8009c08:	673c      	str	r4, [r7, #112]	; 0x70
 8009c0a:	414b      	adcs	r3, r1
 8009c0c:	677b      	str	r3, [r7, #116]	; 0x74
 8009c0e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8009c12:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var1 = ((var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p3) / 256) + ((var1 * (int64_t)bmp280->compensationParameters.dig_p2) * 4096);
 8009c16:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8009c1a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009c1e:	fb03 f102 	mul.w	r1, r3, r2
 8009c22:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8009c26:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009c2a:	fb02 f303 	mul.w	r3, r2, r3
 8009c2e:	18ca      	adds	r2, r1, r3
 8009c30:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009c34:	fba3 1303 	umull	r1, r3, r3, r3
 8009c38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009c42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c46:	18d3      	adds	r3, r2, r3
 8009c48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009c4c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009c50:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8009c54:	b21b      	sxth	r3, r3
 8009c56:	17da      	asrs	r2, r3, #31
 8009c58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009c60:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8009c64:	462b      	mov	r3, r5
 8009c66:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009c6a:	4642      	mov	r2, r8
 8009c6c:	fb02 f203 	mul.w	r2, r2, r3
 8009c70:	464b      	mov	r3, r9
 8009c72:	4621      	mov	r1, r4
 8009c74:	fb01 f303 	mul.w	r3, r1, r3
 8009c78:	4413      	add	r3, r2
 8009c7a:	4622      	mov	r2, r4
 8009c7c:	4641      	mov	r1, r8
 8009c7e:	fba2 1201 	umull	r1, r2, r2, r1
 8009c82:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8009c86:	460a      	mov	r2, r1
 8009c88:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8009c8c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8009c90:	4413      	add	r3, r2
 8009c92:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009c96:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	da07      	bge.n	8009cae <BMP280_compensate_pressure+0x1e6>
 8009c9e:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8009ca2:	66b9      	str	r1, [r7, #104]	; 0x68
 8009ca4:	f143 0300 	adc.w	r3, r3, #0
 8009ca8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009caa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009cae:	f04f 0000 	mov.w	r0, #0
 8009cb2:	f04f 0100 	mov.w	r1, #0
 8009cb6:	0a10      	lsrs	r0, r2, #8
 8009cb8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8009cbc:	1219      	asrs	r1, r3, #8
 8009cbe:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009cc2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8009cc6:	b21b      	sxth	r3, r3
 8009cc8:	17da      	asrs	r2, r3, #31
 8009cca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009cce:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8009cd2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009cd6:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8009cda:	464a      	mov	r2, r9
 8009cdc:	fb02 f203 	mul.w	r2, r2, r3
 8009ce0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009ce4:	4644      	mov	r4, r8
 8009ce6:	fb04 f303 	mul.w	r3, r4, r3
 8009cea:	441a      	add	r2, r3
 8009cec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009cf0:	4644      	mov	r4, r8
 8009cf2:	fba3 4304 	umull	r4, r3, r3, r4
 8009cf6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009cfa:	4623      	mov	r3, r4
 8009cfc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009d00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009d04:	18d3      	adds	r3, r2, r3
 8009d06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009d0a:	f04f 0200 	mov.w	r2, #0
 8009d0e:	f04f 0300 	mov.w	r3, #0
 8009d12:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8009d16:	464c      	mov	r4, r9
 8009d18:	0323      	lsls	r3, r4, #12
 8009d1a:	4644      	mov	r4, r8
 8009d1c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8009d20:	4644      	mov	r4, r8
 8009d22:	0322      	lsls	r2, r4, #12
 8009d24:	1884      	adds	r4, r0, r2
 8009d26:	663c      	str	r4, [r7, #96]	; 0x60
 8009d28:	eb41 0303 	adc.w	r3, r1, r3
 8009d2c:	667b      	str	r3, [r7, #100]	; 0x64
 8009d2e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8009d32:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
    var1 = ((INT64_C(0x800000000000) + var1) * ((int64_t)bmp280->compensationParameters.dig_p1)) / 8589934592;
 8009d36:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009d3a:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8009d3e:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8009d42:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8009d46:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009d4a:	8bdb      	ldrh	r3, [r3, #30]
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009d58:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8009d5c:	462b      	mov	r3, r5
 8009d5e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009d62:	4642      	mov	r2, r8
 8009d64:	fb02 f203 	mul.w	r2, r2, r3
 8009d68:	464b      	mov	r3, r9
 8009d6a:	4621      	mov	r1, r4
 8009d6c:	fb01 f303 	mul.w	r3, r1, r3
 8009d70:	4413      	add	r3, r2
 8009d72:	4622      	mov	r2, r4
 8009d74:	4641      	mov	r1, r8
 8009d76:	fba2 1201 	umull	r1, r2, r2, r1
 8009d7a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8009d7e:	460a      	mov	r2, r1
 8009d80:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8009d84:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009d88:	4413      	add	r3, r2
 8009d8a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009d8e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	da06      	bge.n	8009da4 <BMP280_compensate_pressure+0x2dc>
 8009d96:	1e51      	subs	r1, r2, #1
 8009d98:	65b9      	str	r1, [r7, #88]	; 0x58
 8009d9a:	f143 0301 	adc.w	r3, r3, #1
 8009d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009da0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009da4:	f04f 0000 	mov.w	r0, #0
 8009da8:	f04f 0100 	mov.w	r1, #0
 8009dac:	1058      	asrs	r0, r3, #1
 8009dae:	17d9      	asrs	r1, r3, #31
 8009db0:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    if (var1 == 0)
 8009db4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009db8:	4313      	orrs	r3, r2
 8009dba:	d101      	bne.n	8009dc0 <BMP280_compensate_pressure+0x2f8>
    {
        return 0;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	e182      	b.n	800a0c6 <BMP280_compensate_pressure+0x5fe>
    }
    p = 1048576 - uncomp_pres;
 8009dc0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009dc4:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8009dc8:	17da      	asrs	r2, r3, #31
 8009dca:	653b      	str	r3, [r7, #80]	; 0x50
 8009dcc:	657a      	str	r2, [r7, #84]	; 0x54
 8009dce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8009dd2:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    p = (((((p * 2147483648U)) - var2) * 3125) / var1);
 8009dd6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8009dda:	f04f 0000 	mov.w	r0, #0
 8009dde:	f04f 0100 	mov.w	r1, #0
 8009de2:	07d9      	lsls	r1, r3, #31
 8009de4:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8009de8:	07d0      	lsls	r0, r2, #31
 8009dea:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009dee:	1a84      	subs	r4, r0, r2
 8009df0:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8009df4:	eb61 0303 	sbc.w	r3, r1, r3
 8009df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009dfc:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8009e00:	4622      	mov	r2, r4
 8009e02:	462b      	mov	r3, r5
 8009e04:	1891      	adds	r1, r2, r2
 8009e06:	64b9      	str	r1, [r7, #72]	; 0x48
 8009e08:	415b      	adcs	r3, r3
 8009e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009e10:	4621      	mov	r1, r4
 8009e12:	1851      	adds	r1, r2, r1
 8009e14:	6439      	str	r1, [r7, #64]	; 0x40
 8009e16:	4629      	mov	r1, r5
 8009e18:	414b      	adcs	r3, r1
 8009e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8009e1c:	f04f 0200 	mov.w	r2, #0
 8009e20:	f04f 0300 	mov.w	r3, #0
 8009e24:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8009e28:	4649      	mov	r1, r9
 8009e2a:	018b      	lsls	r3, r1, #6
 8009e2c:	4641      	mov	r1, r8
 8009e2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009e32:	4641      	mov	r1, r8
 8009e34:	018a      	lsls	r2, r1, #6
 8009e36:	4641      	mov	r1, r8
 8009e38:	1889      	adds	r1, r1, r2
 8009e3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8009e3c:	4649      	mov	r1, r9
 8009e3e:	eb43 0101 	adc.w	r1, r3, r1
 8009e42:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009e44:	f04f 0200 	mov.w	r2, #0
 8009e48:	f04f 0300 	mov.w	r3, #0
 8009e4c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8009e50:	4649      	mov	r1, r9
 8009e52:	008b      	lsls	r3, r1, #2
 8009e54:	4641      	mov	r1, r8
 8009e56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e5a:	4641      	mov	r1, r8
 8009e5c:	008a      	lsls	r2, r1, #2
 8009e5e:	4610      	mov	r0, r2
 8009e60:	4619      	mov	r1, r3
 8009e62:	4603      	mov	r3, r0
 8009e64:	4622      	mov	r2, r4
 8009e66:	189b      	adds	r3, r3, r2
 8009e68:	633b      	str	r3, [r7, #48]	; 0x30
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	462a      	mov	r2, r5
 8009e6e:	eb42 0303 	adc.w	r3, r2, r3
 8009e72:	637b      	str	r3, [r7, #52]	; 0x34
 8009e74:	f04f 0200 	mov.w	r2, #0
 8009e78:	f04f 0300 	mov.w	r3, #0
 8009e7c:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8009e80:	4649      	mov	r1, r9
 8009e82:	008b      	lsls	r3, r1, #2
 8009e84:	4641      	mov	r1, r8
 8009e86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e8a:	4641      	mov	r1, r8
 8009e8c:	008a      	lsls	r2, r1, #2
 8009e8e:	4610      	mov	r0, r2
 8009e90:	4619      	mov	r1, r3
 8009e92:	4603      	mov	r3, r0
 8009e94:	4622      	mov	r2, r4
 8009e96:	189b      	adds	r3, r3, r2
 8009e98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009e9c:	462b      	mov	r3, r5
 8009e9e:	460a      	mov	r2, r1
 8009ea0:	eb42 0303 	adc.w	r3, r2, r3
 8009ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ea8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009eac:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009eb0:	f7f6 ff12 	bl	8000cd8 <__aeabi_ldivmod>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
    var1 = (((int64_t)bmp280->compensationParameters.dig_p9) * (p / 8192) * (p / 8192)) / 33554432;
 8009ebc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009ec0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8009ec4:	b21b      	sxth	r3, r3
 8009ec6:	17da      	asrs	r2, r3, #31
 8009ec8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009ecc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009ed0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	da08      	bge.n	8009eea <BMP280_compensate_pressure+0x422>
 8009ed8:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8009edc:	1851      	adds	r1, r2, r1
 8009ede:	62b9      	str	r1, [r7, #40]	; 0x28
 8009ee0:	f143 0300 	adc.w	r3, r3, #0
 8009ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ee6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009eea:	f04f 0000 	mov.w	r0, #0
 8009eee:	f04f 0100 	mov.w	r1, #0
 8009ef2:	0b50      	lsrs	r0, r2, #13
 8009ef4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8009ef8:	1359      	asrs	r1, r3, #13
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8009f02:	4629      	mov	r1, r5
 8009f04:	fb02 f001 	mul.w	r0, r2, r1
 8009f08:	4621      	mov	r1, r4
 8009f0a:	fb01 f103 	mul.w	r1, r1, r3
 8009f0e:	4401      	add	r1, r0
 8009f10:	4620      	mov	r0, r4
 8009f12:	fba0 2302 	umull	r2, r3, r0, r2
 8009f16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f24:	18cb      	adds	r3, r1, r3
 8009f26:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009f2a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	da08      	bge.n	8009f44 <BMP280_compensate_pressure+0x47c>
 8009f32:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8009f36:	1851      	adds	r1, r2, r1
 8009f38:	6239      	str	r1, [r7, #32]
 8009f3a:	f143 0300 	adc.w	r3, r3, #0
 8009f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8009f40:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f44:	f04f 0000 	mov.w	r0, #0
 8009f48:	f04f 0100 	mov.w	r1, #0
 8009f4c:	0b50      	lsrs	r0, r2, #13
 8009f4e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8009f52:	1359      	asrs	r1, r3, #13
 8009f54:	4602      	mov	r2, r0
 8009f56:	460b      	mov	r3, r1
 8009f58:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	fb02 f001 	mul.w	r0, r2, r1
 8009f62:	4621      	mov	r1, r4
 8009f64:	fb01 f103 	mul.w	r1, r1, r3
 8009f68:	4401      	add	r1, r0
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	fba0 2302 	umull	r2, r3, r0, r2
 8009f70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009f74:	4613      	mov	r3, r2
 8009f76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f7e:	18cb      	adds	r3, r1, r3
 8009f80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009f84:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	da08      	bge.n	8009f9e <BMP280_compensate_pressure+0x4d6>
 8009f8c:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8009f90:	1851      	adds	r1, r2, r1
 8009f92:	61b9      	str	r1, [r7, #24]
 8009f94:	f143 0300 	adc.w	r3, r3, #0
 8009f98:	61fb      	str	r3, [r7, #28]
 8009f9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f9e:	f04f 0000 	mov.w	r0, #0
 8009fa2:	f04f 0100 	mov.w	r1, #0
 8009fa6:	0e50      	lsrs	r0, r2, #25
 8009fa8:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8009fac:	1659      	asrs	r1, r3, #25
 8009fae:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    var2 = (((int64_t)bmp280->compensationParameters.dig_p8) * p) / 524288;
 8009fb2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009fb6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8009fba:	b21b      	sxth	r3, r3
 8009fbc:	17da      	asrs	r2, r3, #31
 8009fbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009fc2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009fc6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009fca:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8009fce:	462a      	mov	r2, r5
 8009fd0:	fb02 f203 	mul.w	r2, r2, r3
 8009fd4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009fd8:	4621      	mov	r1, r4
 8009fda:	fb01 f303 	mul.w	r3, r1, r3
 8009fde:	441a      	add	r2, r3
 8009fe0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009fe4:	4621      	mov	r1, r4
 8009fe6:	fba3 1301 	umull	r1, r3, r3, r1
 8009fea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009fee:	460b      	mov	r3, r1
 8009ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ff8:	18d3      	adds	r3, r2, r3
 8009ffa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009ffe:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800a002:	2900      	cmp	r1, #0
 800a004:	da07      	bge.n	800a016 <BMP280_compensate_pressure+0x54e>
 800a006:	4b33      	ldr	r3, [pc, #204]	; (800a0d4 <BMP280_compensate_pressure+0x60c>)
 800a008:	18c3      	adds	r3, r0, r3
 800a00a:	613b      	str	r3, [r7, #16]
 800a00c:	f141 0300 	adc.w	r3, r1, #0
 800a010:	617b      	str	r3, [r7, #20]
 800a012:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a016:	f04f 0200 	mov.w	r2, #0
 800a01a:	f04f 0300 	mov.w	r3, #0
 800a01e:	0cc2      	lsrs	r2, r0, #19
 800a020:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800a024:	14cb      	asrs	r3, r1, #19
 800a026:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    p = ((p + var1 + var2) / 256) + (((int64_t)bmp280->compensationParameters.dig_p7) * 16);
 800a02a:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800a02e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800a032:	1884      	adds	r4, r0, r2
 800a034:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800a038:	eb41 0303 	adc.w	r3, r1, r3
 800a03c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a040:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a044:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a048:	4621      	mov	r1, r4
 800a04a:	1889      	adds	r1, r1, r2
 800a04c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800a050:	4629      	mov	r1, r5
 800a052:	eb43 0101 	adc.w	r1, r3, r1
 800a056:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 800a05a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800a05e:	2b00      	cmp	r3, #0
 800a060:	da07      	bge.n	800a072 <BMP280_compensate_pressure+0x5aa>
 800a062:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 800a066:	60b9      	str	r1, [r7, #8]
 800a068:	f143 0300 	adc.w	r3, r3, #0
 800a06c:	60fb      	str	r3, [r7, #12]
 800a06e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a072:	f04f 0000 	mov.w	r0, #0
 800a076:	f04f 0100 	mov.w	r1, #0
 800a07a:	0a10      	lsrs	r0, r2, #8
 800a07c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800a080:	1219      	asrs	r1, r3, #8
 800a082:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a086:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800a08a:	b21b      	sxth	r3, r3
 800a08c:	17da      	asrs	r2, r3, #31
 800a08e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a092:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800a096:	f04f 0200 	mov.w	r2, #0
 800a09a:	f04f 0300 	mov.w	r3, #0
 800a09e:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 800a0a2:	464c      	mov	r4, r9
 800a0a4:	0123      	lsls	r3, r4, #4
 800a0a6:	4644      	mov	r4, r8
 800a0a8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800a0ac:	4644      	mov	r4, r8
 800a0ae:	0122      	lsls	r2, r4, #4
 800a0b0:	1884      	adds	r4, r0, r2
 800a0b2:	603c      	str	r4, [r7, #0]
 800a0b4:	eb41 0303 	adc.w	r3, r1, r3
 800a0b8:	607b      	str	r3, [r7, #4]
 800a0ba:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a0be:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    return (uint32_t)p;
 800a0c2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0d2:	bf00      	nop
 800a0d4:	0007ffff 	.word	0x0007ffff

0800a0d8 <MPU_Init>:

/// @brief Do the whole initialization of the IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_Init(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 800a0d8:	b5b0      	push	{r4, r5, r7, lr}
 800a0da:	b09c      	sub	sp, #112	; 0x70
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
	// Disable BMP280
	HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0e8:	482c      	ldr	r0, [pc, #176]	; (800a19c <MPU_Init+0xc4>)
 800a0ea:	f001 fc5b 	bl	800b9a4 <HAL_GPIO_WritePin>

	// Set the config parameters
	pMPU9250->settings.gFullScaleRange = GFSR_2000DPS;
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	2203      	movs	r2, #3
 800a0f2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	pMPU9250->settings.aFullScaleRange = AFSR_16G;
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	2203      	movs	r2, #3
 800a0fa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	pMPU9250->settings.CS_PIN = SPI2_IMU_CSIMU_Pin;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a104:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	pMPU9250->settings.CS_PORT = SPI2_IMU_CSIMU_GPIO_Port;
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	4a24      	ldr	r2, [pc, #144]	; (800a19c <MPU_Init+0xc4>)
 800a10c:	66da      	str	r2, [r3, #108]	; 0x6c
	pMPU9250->attitude.tau = 0.98;
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	4a23      	ldr	r2, [pc, #140]	; (800a1a0 <MPU_Init+0xc8>)
 800a112:	651a      	str	r2, [r3, #80]	; 0x50
	pMPU9250->attitude.lastTick = 0;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	2200      	movs	r2, #0
 800a118:	655a      	str	r2, [r3, #84]	; 0x54
	pMPU9250->attitude.dt = 0;
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	f04f 0200 	mov.w	r2, #0
 800a120:	659a      	str	r2, [r3, #88]	; 0x58

	// Check if IMU configured properly and block if it didn't
	if (MPU_begin(SPIx, pMPU9250) != true)
 800a122:	6839      	ldr	r1, [r7, #0]
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 f843 	bl	800a1b0 <MPU_begin>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d023      	beq.n	800a178 <MPU_Init+0xa0>
	{
		char str[100] = "ERROR: MPU9250 ID is wrong.";
 800a130:	4b1c      	ldr	r3, [pc, #112]	; (800a1a4 <MPU_Init+0xcc>)
 800a132:	f107 040c 	add.w	r4, r7, #12
 800a136:	461d      	mov	r5, r3
 800a138:	6828      	ldr	r0, [r5, #0]
 800a13a:	6869      	ldr	r1, [r5, #4]
 800a13c:	68aa      	ldr	r2, [r5, #8]
 800a13e:	68eb      	ldr	r3, [r5, #12]
 800a140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a142:	6928      	ldr	r0, [r5, #16]
 800a144:	6969      	ldr	r1, [r5, #20]
 800a146:	69aa      	ldr	r2, [r5, #24]
 800a148:	c407      	stmia	r4!, {r0, r1, r2}
 800a14a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a14e:	2248      	movs	r2, #72	; 0x48
 800a150:	2100      	movs	r1, #0
 800a152:	4618      	mov	r0, r3
 800a154:	f00b fa23 	bl	801559e <memset>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 800a158:	f107 030c 	add.w	r3, r7, #12
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7f6 f8af 	bl	80002c0 <strlen>
 800a162:	4603      	mov	r3, r0
 800a164:	b29a      	uxth	r2, r3
 800a166:	f107 010c 	add.w	r1, r7, #12
 800a16a:	f04f 33ff 	mov.w	r3, #4294967295
 800a16e:	480e      	ldr	r0, [pc, #56]	; (800a1a8 <MPU_Init+0xd0>)
 800a170:	f006 f808 	bl	8010184 <HAL_UART_Transmit>
		return 1;
 800a174:	2301      	movs	r3, #1
 800a176:	e00c      	b.n	800a192 <MPU_Init+0xba>
	}

	// Calibrate the IMU
	HAL_UART_Transmit(&huart3, "CALIBRATING...\r\n", strlen("CALIBRATING...\r\n"), HAL_MAX_DELAY);
 800a178:	f04f 33ff 	mov.w	r3, #4294967295
 800a17c:	2210      	movs	r2, #16
 800a17e:	490b      	ldr	r1, [pc, #44]	; (800a1ac <MPU_Init+0xd4>)
 800a180:	4809      	ldr	r0, [pc, #36]	; (800a1a8 <MPU_Init+0xd0>)
 800a182:	f005 ffff 	bl	8010184 <HAL_UART_Transmit>
	MPU_calibrateGyro(SPIx, pMPU9250, 20);
 800a186:	2214      	movs	r2, #20
 800a188:	6839      	ldr	r1, [r7, #0]
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f8a1 	bl	800a2d2 <MPU_calibrateGyro>

	return 0;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3770      	adds	r7, #112	; 0x70
 800a196:	46bd      	mov	sp, r7
 800a198:	bdb0      	pop	{r4, r5, r7, pc}
 800a19a:	bf00      	nop
 800a19c:	40020c00 	.word	0x40020c00
 800a1a0:	3f7ae148 	.word	0x3f7ae148
 800a1a4:	0801bfc8 	.word	0x0801bfc8
 800a1a8:	20000ccc 	.word	0x20000ccc
 800a1ac:	0801bfb4 	.word	0x0801bfb4

0800a1b0 <MPU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af02      	add	r7, sp, #8
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
    // Initialize variables
    uint8_t check, addr, val;

    // Confirm device
    MPU_REG_READ(SPIx, pMPU9250, WHO_AM_I, &check, 1);
 800a1ba:	f107 030f 	add.w	r3, r7, #15
 800a1be:	2201      	movs	r2, #1
 800a1c0:	9200      	str	r2, [sp, #0]
 800a1c2:	2275      	movs	r2, #117	; 0x75
 800a1c4:	6839      	ldr	r1, [r7, #0]
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f90d 	bl	800a3e6 <MPU_REG_READ>
    if (check == WHO_AM_I_9250_ANS)
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
 800a1ce:	2b70      	cmp	r3, #112	; 0x70
 800a1d0:	d17a      	bne.n	800a2c8 <MPU_begin+0x118>
    {
    	// Reset the sensor
    	addr = PWR_MGMT_1;
 800a1d2:	236b      	movs	r3, #107	; 0x6b
 800a1d4:	73bb      	strb	r3, [r7, #14]
        val = 0x80;
 800a1d6:	2380      	movs	r3, #128	; 0x80
 800a1d8:	737b      	strb	r3, [r7, #13]
    	MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a1da:	f107 030d 	add.w	r3, r7, #13
 800a1de:	f107 020e 	add.w	r2, r7, #14
 800a1e2:	6839      	ldr	r1, [r7, #0]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 f8dd 	bl	800a3a4 <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a1ea:	2032      	movs	r0, #50	; 0x32
 800a1ec:	f000 fd2e 	bl	800ac4c <HAL_Delay>

        // Startup & use PLL
        addr = PWR_MGMT_1;
 800a1f0:	236b      	movs	r3, #107	; 0x6b
 800a1f2:	73bb      	strb	r3, [r7, #14]
        val = 0x01;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a1f8:	f107 030d 	add.w	r3, r7, #13
 800a1fc:	f107 020e 	add.w	r2, r7, #14
 800a200:	6839      	ldr	r1, [r7, #0]
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f8ce 	bl	800a3a4 <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a208:	2032      	movs	r0, #50	; 0x32
 800a20a:	f000 fd1f 	bl	800ac4c <HAL_Delay>

        // Enable everything
        addr = PWR_MGMT_2;
 800a20e:	236c      	movs	r3, #108	; 0x6c
 800a210:	73bb      	strb	r3, [r7, #14]
        val = 0x00;
 800a212:	2300      	movs	r3, #0
 800a214:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a216:	f107 030d 	add.w	r3, r7, #13
 800a21a:	f107 020e 	add.w	r2, r7, #14
 800a21e:	6839      	ldr	r1, [r7, #0]
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 f8bf 	bl	800a3a4 <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a226:	2032      	movs	r0, #50	; 0x32
 800a228:	f000 fd10 	bl	800ac4c <HAL_Delay>

        // Sample rate is 1000 Hz
		addr = SMPLRT_DIV;
 800a22c:	2319      	movs	r3, #25
 800a22e:	73bb      	strb	r3, [r7, #14]
		val = 0x00;
 800a230:	2300      	movs	r3, #0
 800a232:	737b      	strb	r3, [r7, #13]
		MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a234:	f107 030d 	add.w	r3, r7, #13
 800a238:	f107 020e 	add.w	r2, r7, #14
 800a23c:	6839      	ldr	r1, [r7, #0]
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 f8b0 	bl	800a3a4 <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a244:	2032      	movs	r0, #50	; 0x32
 800a246:	f000 fd01 	bl	800ac4c <HAL_Delay>


    	// Gyro
    	// Set 20 Hz LPF for gyro
		uint8_t addr = CONFIG;
 800a24a:	231a      	movs	r3, #26
 800a24c:	733b      	strb	r3, [r7, #12]
		uint8_t val = 0x04;
 800a24e:	2304      	movs	r3, #4
 800a250:	72fb      	strb	r3, [r7, #11]
		MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a252:	f107 030b 	add.w	r3, r7, #11
 800a256:	f107 020c 	add.w	r2, r7, #12
 800a25a:	6839      	ldr	r1, [r7, #0]
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f8a1 	bl	800a3a4 <MPU_REG_WRITE>
		HAL_Delay(50);
 800a262:	2032      	movs	r0, #50	; 0x32
 800a264:	f000 fcf2 	bl	800ac4c <HAL_Delay>

		// Set the full scale range for gyro
        MPU_writeGyroFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.gFullScaleRange);
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800a26e:	461a      	mov	r2, r3
 800a270:	6839      	ldr	r1, [r7, #0]
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f95c 	bl	800a530 <MPU_writeGyroFullScaleRange>


		// Accel
		// Set the full scale range for accel
        MPU_writeAccFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.aFullScaleRange);
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800a27e:	461a      	mov	r2, r3
 800a280:	6839      	ldr	r1, [r7, #0]
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f8ea 	bl	800a45c <MPU_writeAccFullScaleRange>

        // Set 44.8 Hz LPF for accel
		addr = ACCEL_CONFIG_2;
 800a288:	231d      	movs	r3, #29
 800a28a:	733b      	strb	r3, [r7, #12]
		val = 0x03;
 800a28c:	2303      	movs	r3, #3
 800a28e:	72fb      	strb	r3, [r7, #11]
		MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a290:	f107 030b 	add.w	r3, r7, #11
 800a294:	f107 020c 	add.w	r2, r7, #12
 800a298:	6839      	ldr	r1, [r7, #0]
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f882 	bl	800a3a4 <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a2a0:	2032      	movs	r0, #50	; 0x32
 800a2a2:	f000 fcd3 	bl	800ac4c <HAL_Delay>


        // Disable I2C (SPI only)
        addr = USER_CTRL;
 800a2a6:	236a      	movs	r3, #106	; 0x6a
 800a2a8:	733b      	strb	r3, [r7, #12]
        val = 0x10;
 800a2aa:	2310      	movs	r3, #16
 800a2ac:	72fb      	strb	r3, [r7, #11]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a2ae:	f107 030b 	add.w	r3, r7, #11
 800a2b2:	f107 020c 	add.w	r2, r7, #12
 800a2b6:	6839      	ldr	r1, [r7, #0]
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 f873 	bl	800a3a4 <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a2be:	2032      	movs	r0, #50	; 0x32
 800a2c0:	f000 fcc4 	bl	800ac4c <HAL_Delay>

        return 1;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e000      	b.n	800a2ca <MPU_begin+0x11a>
    }
    else
        return 0;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3710      	adds	r7, #16
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <MPU_calibrateGyro>:
/// @brief Find offsets for each axis of gyroscope
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param numCalPoints Number of data points to average
void MPU_calibrateGyro(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint16_t numCalPoints)
{
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b088      	sub	sp, #32
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	60f8      	str	r0, [r7, #12]
 800a2da:	60b9      	str	r1, [r7, #8]
 800a2dc:	4613      	mov	r3, r2
 800a2de:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	61bb      	str	r3, [r7, #24]
    int32_t z = 0;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	617b      	str	r3, [r7, #20]

    // Zero guard
    if (numCalPoints == 0)
 800a2ec:	88fb      	ldrh	r3, [r7, #6]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d101      	bne.n	800a2f6 <MPU_calibrateGyro+0x24>
    {
        numCalPoints = 1;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	827b      	strh	r3, [r7, #18]
 800a2fa:	e01e      	b.n	800a33a <MPU_calibrateGyro+0x68>
    {
        MPU_readRawData(SPIx, pMPU9250);
 800a2fc:	68b9      	ldr	r1, [r7, #8]
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	f000 f984 	bl	800a60c <MPU_readRawData>
        x += pMPU9250->rawData.gx;
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a30a:	461a      	mov	r2, r3
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	4413      	add	r3, r2
 800a310:	61fb      	str	r3, [r7, #28]
        y += pMPU9250->rawData.gy;
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a318:	461a      	mov	r2, r3
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	4413      	add	r3, r2
 800a31e:	61bb      	str	r3, [r7, #24]
        z += pMPU9250->rawData.gz;
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a326:	461a      	mov	r2, r3
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	4413      	add	r3, r2
 800a32c:	617b      	str	r3, [r7, #20]
        HAL_Delay(3);
 800a32e:	2003      	movs	r0, #3
 800a330:	f000 fc8c 	bl	800ac4c <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800a334:	8a7b      	ldrh	r3, [r7, #18]
 800a336:	3301      	adds	r3, #1
 800a338:	827b      	strh	r3, [r7, #18]
 800a33a:	8a7a      	ldrh	r2, [r7, #18]
 800a33c:	88fb      	ldrh	r3, [r7, #6]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d3dc      	bcc.n	800a2fc <MPU_calibrateGyro+0x2a>
    }

    // Average the saved data points to find the gyroscope offset
    pMPU9250->gyroBias.x = (float)x / (float)numCalPoints;
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	ee07 3a90 	vmov	s15, r3
 800a348:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a34c:	88fb      	ldrh	r3, [r7, #6]
 800a34e:	ee07 3a90 	vmov	s15, r3
 800a352:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    pMPU9250->gyroBias.y = (float)y / (float)numCalPoints;
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	ee07 3a90 	vmov	s15, r3
 800a366:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a36a:	88fb      	ldrh	r3, [r7, #6]
 800a36c:	ee07 3a90 	vmov	s15, r3
 800a370:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    pMPU9250->gyroBias.z = (float)z / (float)numCalPoints;
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	ee07 3a90 	vmov	s15, r3
 800a384:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a388:	88fb      	ldrh	r3, [r7, #6]
 800a38a:	ee07 3a90 	vmov	s15, r3
 800a38e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
}
 800a39c:	bf00      	nop
 800a39e:	3720      	adds	r7, #32
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <MPU_REG_WRITE>:
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param pAddr Pointer to address to be written to
/// @param pVal Pointer of value to write to given address
void MPU_REG_WRITE(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t *pAddr, uint8_t *pVal)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
 800a3b0:	603b      	str	r3, [r7, #0]
    MPU_CS(pMPU9250, CS_SELECT);
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	68b8      	ldr	r0, [r7, #8]
 800a3b6:	f000 f83e 	bl	800a436 <MPU_CS>
    HAL_SPI_Transmit(SPIx, pAddr, 1, SPI_TIMOUT_MS);
 800a3ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a3be:	2201      	movs	r2, #1
 800a3c0:	6879      	ldr	r1, [r7, #4]
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f003 f9f9 	bl	800d7ba <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pVal, 1, SPI_TIMOUT_MS);
 800a3c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	6839      	ldr	r1, [r7, #0]
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f003 f9f2 	bl	800d7ba <HAL_SPI_Transmit>
    MPU_CS(pMPU9250, CS_DESELECT);
 800a3d6:	2101      	movs	r1, #1
 800a3d8:	68b8      	ldr	r0, [r7, #8]
 800a3da:	f000 f82c 	bl	800a436 <MPU_CS>
}
 800a3de:	bf00      	nop
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <MPU_REG_READ>:
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param addr Address to start reading at
/// @param pRxData Pointer to data buffer
/// @param RxSize Size of data buffer
void MPU_REG_READ(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t addr, uint8_t *pRxData, uint16_t RxSize)
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b086      	sub	sp, #24
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	60f8      	str	r0, [r7, #12]
 800a3ee:	60b9      	str	r1, [r7, #8]
 800a3f0:	603b      	str	r3, [r7, #0]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	71fb      	strb	r3, [r7, #7]
    MPU_CS(pMPU9250, CS_SELECT);
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	68b8      	ldr	r0, [r7, #8]
 800a3fa:	f000 f81c 	bl	800a436 <MPU_CS>
    uint8_t writeAddr = addr | READWRITE;
 800a3fe:	79fb      	ldrb	r3, [r7, #7]
 800a400:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a404:	b2db      	uxtb	r3, r3
 800a406:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(SPIx, &writeAddr, 1, SPI_TIMOUT_MS);
 800a408:	f107 0117 	add.w	r1, r7, #23
 800a40c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a410:	2201      	movs	r2, #1
 800a412:	68f8      	ldr	r0, [r7, #12]
 800a414:	f003 f9d1 	bl	800d7ba <HAL_SPI_Transmit>
    HAL_SPI_Receive(SPIx, pRxData, RxSize, SPI_TIMOUT_MS);
 800a418:	8c3a      	ldrh	r2, [r7, #32]
 800a41a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a41e:	6839      	ldr	r1, [r7, #0]
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f003 fb38 	bl	800da96 <HAL_SPI_Receive>
    MPU_CS(pMPU9250, CS_DESELECT);
 800a426:	2101      	movs	r1, #1
 800a428:	68b8      	ldr	r0, [r7, #8]
 800a42a:	f000 f804 	bl	800a436 <MPU_CS>
}
 800a42e:	bf00      	nop
 800a430:	3718      	adds	r7, #24
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <MPU_CS>:

/// @brief Set CS state to either start or end transmissions
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param state Set low to select, high to deselect
void MPU_CS(MPU9250_t *pMPU9250, uint8_t state)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b082      	sub	sp, #8
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	460b      	mov	r3, r1
 800a440:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(pMPU9250->settings.CS_PORT, pMPU9250->settings.CS_PIN, state);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800a44c:	78fa      	ldrb	r2, [r7, #3]
 800a44e:	4619      	mov	r1, r3
 800a450:	f001 faa8 	bl	800b9a4 <HAL_GPIO_WritePin>
}
 800a454:	bf00      	nop
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <MPU_writeAccFullScaleRange>:
/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t aScale)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	4613      	mov	r3, r2
 800a468:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = ACCEL_CONFIG;
 800a46a:	231c      	movs	r3, #28
 800a46c:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (aScale)
 800a46e:	79fb      	ldrb	r3, [r7, #7]
 800a470:	2b03      	cmp	r3, #3
 800a472:	d847      	bhi.n	800a504 <MPU_writeAccFullScaleRange+0xa8>
 800a474:	a201      	add	r2, pc, #4	; (adr r2, 800a47c <MPU_writeAccFullScaleRange+0x20>)
 800a476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a47a:	bf00      	nop
 800a47c:	0800a48d 	.word	0x0800a48d
 800a480:	0800a4ab 	.word	0x0800a4ab
 800a484:	0800a4c9 	.word	0x0800a4c9
 800a488:	0800a4e7 	.word	0x0800a4e7
    {
    case AFSR_2G:
        pMPU9250->sensorData.aScaleFactor = 16384.0;
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800a492:	615a      	str	r2, [r3, #20]
        val = 0x00;
 800a494:	2300      	movs	r3, #0
 800a496:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a498:	f107 0316 	add.w	r3, r7, #22
 800a49c:	f107 0217 	add.w	r2, r7, #23
 800a4a0:	68b9      	ldr	r1, [r7, #8]
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f7ff ff7e 	bl	800a3a4 <MPU_REG_WRITE>
        break;
 800a4a8:	e03b      	b.n	800a522 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_4G:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800a4b0:	615a      	str	r2, [r3, #20]
        val = 0x08;
 800a4b2:	2308      	movs	r3, #8
 800a4b4:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a4b6:	f107 0316 	add.w	r3, r7, #22
 800a4ba:	f107 0217 	add.w	r2, r7, #23
 800a4be:	68b9      	ldr	r1, [r7, #8]
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f7ff ff6f 	bl	800a3a4 <MPU_REG_WRITE>
        break;
 800a4c6:	e02c      	b.n	800a522 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_8G:
        pMPU9250->sensorData.aScaleFactor = 4096.0;
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800a4ce:	615a      	str	r2, [r3, #20]
        val = 0x10;
 800a4d0:	2310      	movs	r3, #16
 800a4d2:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a4d4:	f107 0316 	add.w	r3, r7, #22
 800a4d8:	f107 0217 	add.w	r2, r7, #23
 800a4dc:	68b9      	ldr	r1, [r7, #8]
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f7ff ff60 	bl	800a3a4 <MPU_REG_WRITE>
        break;
 800a4e4:	e01d      	b.n	800a522 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_16G:
        pMPU9250->sensorData.aScaleFactor = 2048.0;
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 800a4ec:	615a      	str	r2, [r3, #20]
        val = 0x18;
 800a4ee:	2318      	movs	r3, #24
 800a4f0:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a4f2:	f107 0316 	add.w	r3, r7, #22
 800a4f6:	f107 0217 	add.w	r2, r7, #23
 800a4fa:	68b9      	ldr	r1, [r7, #8]
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	f7ff ff51 	bl	800a3a4 <MPU_REG_WRITE>
        break;
 800a502:	e00e      	b.n	800a522 <MPU_writeAccFullScaleRange+0xc6>
    default:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800a50a:	615a      	str	r2, [r3, #20]
        val = 0x08;
 800a50c:	2308      	movs	r3, #8
 800a50e:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a510:	f107 0316 	add.w	r3, r7, #22
 800a514:	f107 0217 	add.w	r2, r7, #23
 800a518:	68b9      	ldr	r1, [r7, #8]
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f7ff ff42 	bl	800a3a4 <MPU_REG_WRITE>
        break;
 800a520:	bf00      	nop
    }
	HAL_Delay(50);
 800a522:	2032      	movs	r0, #50	; 0x32
 800a524:	f000 fb92 	bl	800ac4c <HAL_Delay>
}
 800a528:	bf00      	nop
 800a52a:	3718      	adds	r7, #24
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <MPU_writeGyroFullScaleRange>:
/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t gScale)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	4613      	mov	r3, r2
 800a53c:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = GYRO_CONFIG;
 800a53e:	231b      	movs	r3, #27
 800a540:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (gScale)
 800a542:	79fb      	ldrb	r3, [r7, #7]
 800a544:	2b03      	cmp	r3, #3
 800a546:	d843      	bhi.n	800a5d0 <MPU_writeGyroFullScaleRange+0xa0>
 800a548:	a201      	add	r2, pc, #4	; (adr r2, 800a550 <MPU_writeGyroFullScaleRange+0x20>)
 800a54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a54e:	bf00      	nop
 800a550:	0800a561 	.word	0x0800a561
 800a554:	0800a57d 	.word	0x0800a57d
 800a558:	0800a599 	.word	0x0800a599
 800a55c:	0800a5b5 	.word	0x0800a5b5
    {
    case GFSR_250DPS:
        pMPU9250->sensorData.gScaleFactor = 131.0;
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	4a26      	ldr	r2, [pc, #152]	; (800a5fc <MPU_writeGyroFullScaleRange+0xcc>)
 800a564:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x00;
 800a566:	2300      	movs	r3, #0
 800a568:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a56a:	f107 0316 	add.w	r3, r7, #22
 800a56e:	f107 0217 	add.w	r2, r7, #23
 800a572:	68b9      	ldr	r1, [r7, #8]
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	f7ff ff15 	bl	800a3a4 <MPU_REG_WRITE>
        break;
 800a57a:	e037      	b.n	800a5ec <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_500DPS:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	4a20      	ldr	r2, [pc, #128]	; (800a600 <MPU_writeGyroFullScaleRange+0xd0>)
 800a580:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x08;
 800a582:	2308      	movs	r3, #8
 800a584:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a586:	f107 0316 	add.w	r3, r7, #22
 800a58a:	f107 0217 	add.w	r2, r7, #23
 800a58e:	68b9      	ldr	r1, [r7, #8]
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f7ff ff07 	bl	800a3a4 <MPU_REG_WRITE>
        break;
 800a596:	e029      	b.n	800a5ec <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_1000DPS:
        pMPU9250->sensorData.gScaleFactor = 32.8;
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	4a1a      	ldr	r2, [pc, #104]	; (800a604 <MPU_writeGyroFullScaleRange+0xd4>)
 800a59c:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x10;
 800a59e:	2310      	movs	r3, #16
 800a5a0:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a5a2:	f107 0316 	add.w	r3, r7, #22
 800a5a6:	f107 0217 	add.w	r2, r7, #23
 800a5aa:	68b9      	ldr	r1, [r7, #8]
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f7ff fef9 	bl	800a3a4 <MPU_REG_WRITE>
        break;
 800a5b2:	e01b      	b.n	800a5ec <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_2000DPS:
        pMPU9250->sensorData.gScaleFactor = 16.4;
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	4a14      	ldr	r2, [pc, #80]	; (800a608 <MPU_writeGyroFullScaleRange+0xd8>)
 800a5b8:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x18;
 800a5ba:	2318      	movs	r3, #24
 800a5bc:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a5be:	f107 0316 	add.w	r3, r7, #22
 800a5c2:	f107 0217 	add.w	r2, r7, #23
 800a5c6:	68b9      	ldr	r1, [r7, #8]
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f7ff feeb 	bl	800a3a4 <MPU_REG_WRITE>
        break;
 800a5ce:	e00d      	b.n	800a5ec <MPU_writeGyroFullScaleRange+0xbc>
    default:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	4a0b      	ldr	r2, [pc, #44]	; (800a600 <MPU_writeGyroFullScaleRange+0xd0>)
 800a5d4:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x08;
 800a5d6:	2308      	movs	r3, #8
 800a5d8:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a5da:	f107 0316 	add.w	r3, r7, #22
 800a5de:	f107 0217 	add.w	r2, r7, #23
 800a5e2:	68b9      	ldr	r1, [r7, #8]
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	f7ff fedd 	bl	800a3a4 <MPU_REG_WRITE>
        break;
 800a5ea:	bf00      	nop
    }
	HAL_Delay(50);
 800a5ec:	2032      	movs	r0, #50	; 0x32
 800a5ee:	f000 fb2d 	bl	800ac4c <HAL_Delay>
}
 800a5f2:	bf00      	nop
 800a5f4:	3718      	adds	r7, #24
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	43030000 	.word	0x43030000
 800a600:	42830000 	.word	0x42830000
 800a604:	42033333 	.word	0x42033333
 800a608:	41833333 	.word	0x41833333

0800a60c <MPU_readRawData>:

/// @brief Read raw data from IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readRawData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b08e      	sub	sp, #56	; 0x38
 800a610:	af02      	add	r7, sp, #8
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
    // Init buffer
    uint8_t buf[6+2+6+24];

    // Subroutine for reading the raw data
    MPU_REG_READ(SPIx, pMPU9250, ACCEL_XOUT_H, buf, 6+2+6+24);
 800a616:	f107 0308 	add.w	r3, r7, #8
 800a61a:	2226      	movs	r2, #38	; 0x26
 800a61c:	9200      	str	r2, [sp, #0]
 800a61e:	223b      	movs	r2, #59	; 0x3b
 800a620:	6839      	ldr	r1, [r7, #0]
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f7ff fedf 	bl	800a3e6 <MPU_REG_READ>

    // IMPORTANT Coordinate system conversion!
    // buf[0-1] -> IC X axis -> Y Drone axis
    // buf[2-3] -> IC Y axis -> X Drone axis
    // buf[4-5] -> IC Z axis -> Z Drone axis
    pMPU9250->rawData.ay = (buf[0] << 8 | buf[1]);
 800a628:	7a3b      	ldrb	r3, [r7, #8]
 800a62a:	021b      	lsls	r3, r3, #8
 800a62c:	b21a      	sxth	r2, r3
 800a62e:	7a7b      	ldrb	r3, [r7, #9]
 800a630:	b21b      	sxth	r3, r3
 800a632:	4313      	orrs	r3, r2
 800a634:	b21a      	sxth	r2, r3
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	805a      	strh	r2, [r3, #2]
    pMPU9250->rawData.ax = (buf[2] << 8 | buf[3]);
 800a63a:	7abb      	ldrb	r3, [r7, #10]
 800a63c:	021b      	lsls	r3, r3, #8
 800a63e:	b21a      	sxth	r2, r3
 800a640:	7afb      	ldrb	r3, [r7, #11]
 800a642:	b21b      	sxth	r3, r3
 800a644:	4313      	orrs	r3, r2
 800a646:	b21a      	sxth	r2, r3
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	801a      	strh	r2, [r3, #0]
    pMPU9250->rawData.az = (buf[4] << 8 | buf[5]);
 800a64c:	7b3b      	ldrb	r3, [r7, #12]
 800a64e:	021b      	lsls	r3, r3, #8
 800a650:	b21a      	sxth	r2, r3
 800a652:	7b7b      	ldrb	r3, [r7, #13]
 800a654:	b21b      	sxth	r3, r3
 800a656:	4313      	orrs	r3, r2
 800a658:	b21a      	sxth	r2, r3
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	809a      	strh	r2, [r3, #4]

    pMPU9250->rawData.temp = buf[6] << 8 | buf[7];
 800a65e:	7bbb      	ldrb	r3, [r7, #14]
 800a660:	021b      	lsls	r3, r3, #8
 800a662:	b21a      	sxth	r2, r3
 800a664:	7bfb      	ldrb	r3, [r7, #15]
 800a666:	b21b      	sxth	r3, r3
 800a668:	4313      	orrs	r3, r2
 800a66a:	b21a      	sxth	r2, r3
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	80da      	strh	r2, [r3, #6]

    // IMPORTANT Coordinate system conversion!
    // buf[ 8- 9] -> IC X axis -> -Y Drone axis
	// buf[10-11] -> IC Y axis -> -X Drone axis
	// buf[12-13] -> IC Z axis -> -Z Drone axis
    pMPU9250->rawData.gy = -(buf[8] << 8 | buf[9]);
 800a670:	7c3b      	ldrb	r3, [r7, #16]
 800a672:	021b      	lsls	r3, r3, #8
 800a674:	b21a      	sxth	r2, r3
 800a676:	7c7b      	ldrb	r3, [r7, #17]
 800a678:	b21b      	sxth	r3, r3
 800a67a:	4313      	orrs	r3, r2
 800a67c:	b21b      	sxth	r3, r3
 800a67e:	b29b      	uxth	r3, r3
 800a680:	425b      	negs	r3, r3
 800a682:	b29b      	uxth	r3, r3
 800a684:	b21a      	sxth	r2, r3
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	815a      	strh	r2, [r3, #10]
    pMPU9250->rawData.gx = -(buf[10] << 8 | buf[11]);
 800a68a:	7cbb      	ldrb	r3, [r7, #18]
 800a68c:	021b      	lsls	r3, r3, #8
 800a68e:	b21a      	sxth	r2, r3
 800a690:	7cfb      	ldrb	r3, [r7, #19]
 800a692:	b21b      	sxth	r3, r3
 800a694:	4313      	orrs	r3, r2
 800a696:	b21b      	sxth	r3, r3
 800a698:	b29b      	uxth	r3, r3
 800a69a:	425b      	negs	r3, r3
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	b21a      	sxth	r2, r3
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	811a      	strh	r2, [r3, #8]
    pMPU9250->rawData.gz = -(buf[12] << 8 | buf[13]);
 800a6a4:	7d3b      	ldrb	r3, [r7, #20]
 800a6a6:	021b      	lsls	r3, r3, #8
 800a6a8:	b21a      	sxth	r2, r3
 800a6aa:	7d7b      	ldrb	r3, [r7, #21]
 800a6ac:	b21b      	sxth	r3, r3
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	b21b      	sxth	r3, r3
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	425b      	negs	r3, r3
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	b21a      	sxth	r2, r3
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	819a      	strh	r2, [r3, #12]

    //pMPU9250->rawData.mx = buf[14+MAGN_X_OFFS_H] << 8 | buf[14+MAGN_X_OFFS_L];
	//pMPU9250->rawData.my = buf[14+MAGN_Y_OFFS_H] << 8 | buf[14+MAGN_Y_OFFS_L];
	//pMPU9250->rawData.mz = buf[14+MAGN_Z_OFFS_H] << 8 | buf[14+MAGN_Z_OFFS_L];
}
 800a6be:	bf00      	nop
 800a6c0:	3730      	adds	r7, #48	; 0x30
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
	...

0800a6c8 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readProcessedData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
    // Get raw values from the IMU
    MPU_readRawData(SPIx, pMPU9250);
 800a6d2:	6839      	ldr	r1, [r7, #0]
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f7ff ff99 	bl	800a60c <MPU_readRawData>

    // Convert accelerometer values to g's
    pMPU9250->sensorData.ax = pMPU9250->rawData.ax / pMPU9250->sensorData.aScaleFactor;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a6e0:	ee07 3a90 	vmov	s15, r3
 800a6e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	ed93 7a05 	vldr	s14, [r3, #20]
 800a6ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	edc3 7a06 	vstr	s15, [r3, #24]
    pMPU9250->sensorData.ay = pMPU9250->rawData.ay / pMPU9250->sensorData.aScaleFactor;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a6fe:	ee07 3a90 	vmov	s15, r3
 800a702:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	ed93 7a05 	vldr	s14, [r3, #20]
 800a70c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	edc3 7a07 	vstr	s15, [r3, #28]
    pMPU9250->sensorData.az = pMPU9250->rawData.az / pMPU9250->sensorData.aScaleFactor;
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a71c:	ee07 3a90 	vmov	s15, r3
 800a720:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	ed93 7a05 	vldr	s14, [r3, #20]
 800a72a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	edc3 7a08 	vstr	s15, [r3, #32]

    // Convert raw temperature data to Celsius
    pMPU9250->sensorData.temp = (pMPU9250->rawData.temp - 0) / TEMP_SENS + 21;
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7f5 ff1a 	bl	8000574 <__aeabi_i2d>
 800a740:	a336      	add	r3, pc, #216	; (adr r3, 800a81c <MPU_readProcessedData+0x154>)
 800a742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a746:	f7f6 f8a9 	bl	800089c <__aeabi_ddiv>
 800a74a:	4602      	mov	r2, r0
 800a74c:	460b      	mov	r3, r1
 800a74e:	4610      	mov	r0, r2
 800a750:	4619      	mov	r1, r3
 800a752:	f04f 0200 	mov.w	r2, #0
 800a756:	4b30      	ldr	r3, [pc, #192]	; (800a818 <MPU_readProcessedData+0x150>)
 800a758:	f7f5 fdc0 	bl	80002dc <__adddf3>
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	4610      	mov	r0, r2
 800a762:	4619      	mov	r1, r3
 800a764:	f7f6 fa68 	bl	8000c38 <__aeabi_d2f>
 800a768:	4602      	mov	r2, r0
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	625a      	str	r2, [r3, #36]	; 0x24

    // Compensate for gyro bias
    pMPU9250->sensorData.gx = pMPU9250->rawData.gx - pMPU9250->gyroBias.x;
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a774:	ee07 3a90 	vmov	s15, r3
 800a778:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800a782:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy = pMPU9250->rawData.gy - pMPU9250->gyroBias.y;
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a792:	ee07 3a90 	vmov	s15, r3
 800a796:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800a7a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz = pMPU9250->rawData.gz - pMPU9250->gyroBias.z;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a7b0:	ee07 3a90 	vmov	s15, r3
 800a7b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800a7be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // Convert gyro values to deg/s
    pMPU9250->sensorData.gx /= pMPU9250->sensorData.gScaleFactor;
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800a7d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy /= pMPU9250->sensorData.gScaleFactor;
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800a7ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz /= pMPU9250->sensorData.gScaleFactor;
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800a800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 800a80a:	bf00      	nop
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	f3af 8000 	nop.w
 800a818:	40350000 	.word	0x40350000
 800a81c:	851eb852 	.word	0x851eb852
 800a820:	4074ddeb 	.word	0x4074ddeb

0800a824 <HCSR04_Init>:
#include "HCSR04/HCSR04.h"

extern osSemaphoreId DistSemaphoreHandle;

uint8_t HCSR04_Init(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
	pHCSR04->TRIG_GPIO = DIS_TRIG_OUT_GPIO_Port;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a21      	ldr	r2, [pc, #132]	; (800a8b8 <HCSR04_Init+0x94>)
 800a832:	601a      	str	r2, [r3, #0]
	pHCSR04->TRIG_PIN = DIS_TRIG_OUT_Pin;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a83a:	809a      	strh	r2, [r3, #4]
	pHCSR04->TIM_Instance = TIM3;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a1f      	ldr	r2, [pc, #124]	; (800a8bc <HCSR04_Init+0x98>)
 800a840:	609a      	str	r2, [r3, #8]
	pHCSR04->IC_TIM_CH = TIM_CHANNEL_1;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	60da      	str	r2, [r3, #12]
	pHCSR04->TIM_CLK_MHz = 108;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	226c      	movs	r2, #108	; 0x6c
 800a84c:	611a      	str	r2, [r3, #16]
	pHCSR04->Triggered = false;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	751a      	strb	r2, [r3, #20]

	if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_1)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d104      	bne.n	800a866 <HCSR04_Init+0x42>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800a864:	e019      	b.n	800a89a <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_2)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	2b04      	cmp	r3, #4
 800a86c:	d104      	bne.n	800a878 <HCSR04_Init+0x54>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2202      	movs	r2, #2
 800a872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800a876:	e010      	b.n	800a89a <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_3)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	2b08      	cmp	r3, #8
 800a87e:	d104      	bne.n	800a88a <HCSR04_Init+0x66>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2204      	movs	r2, #4
 800a884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800a888:	e007      	b.n	800a89a <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_4)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	2b0c      	cmp	r3, #12
 800a890:	d103      	bne.n	800a89a <HCSR04_Init+0x76>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2208      	movs	r2, #8
 800a896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(htim);
 800a89a:	6838      	ldr	r0, [r7, #0]
 800a89c:	f003 fe9a 	bl	800e5d4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(htim, pHCSR04->IC_TIM_CH);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	6838      	ldr	r0, [r7, #0]
 800a8a8:	f004 f8c0 	bl	800ea2c <HAL_TIM_IC_Start_IT>

	return 0;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3708      	adds	r7, #8
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	40020c00 	.word	0x40020c00
 800a8bc:	40000400 	.word	0x40000400

0800a8c0 <HCSR04_TMR_IC_ISR>:
	}
}


void HCSR04_TMR_IC_ISR(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
	uint32_t PS = 0;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	60fb      	str	r3, [r7, #12]

	if((htim->Instance == pHCSR04->TIM_Instance) && (htim->Channel == pHCSR04->ACTIV_CH))
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	f040 812e 	bne.w	800ab38 <HCSR04_TMR_IC_ISR+0x278>
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	7f1a      	ldrb	r2, [r3, #28]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	f040 8126 	bne.w	800ab38 <HCSR04_TMR_IC_ISR+0x278>
	{
		if (pHCSR04->EDGE_STATE == 0)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	7d5b      	ldrb	r3, [r3, #21]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d16d      	bne.n	800a9d0 <HCSR04_TMR_IC_ISR+0x110>
		{
			// Capture T1 & Reverse The ICU Edge Polarity
			pHCSR04->T1 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	6838      	ldr	r0, [r7, #0]
 800a8fc:	f004 fd80 	bl	800f400 <HAL_TIM_ReadCapturedValue>
 800a900:	4602      	mov	r2, r0
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	621a      	str	r2, [r3, #32]
			pHCSR04->EDGE_STATE = 1;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2201      	movs	r2, #1
 800a90a:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d108      	bne.n	800a926 <HCSR04_TMR_IC_ISR+0x66>
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	6a1a      	ldr	r2, [r3, #32]
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f022 020a 	bic.w	r2, r2, #10
 800a922:	621a      	str	r2, [r3, #32]
 800a924:	e021      	b.n	800a96a <HCSR04_TMR_IC_ISR+0xaa>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	d108      	bne.n	800a940 <HCSR04_TMR_IC_ISR+0x80>
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	6a1b      	ldr	r3, [r3, #32]
 800a934:	683a      	ldr	r2, [r7, #0]
 800a936:	6812      	ldr	r2, [r2, #0]
 800a938:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a93c:	6213      	str	r3, [r2, #32]
 800a93e:	e014      	b.n	800a96a <HCSR04_TMR_IC_ISR+0xaa>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	2b08      	cmp	r3, #8
 800a946:	d108      	bne.n	800a95a <HCSR04_TMR_IC_ISR+0x9a>
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	6a1b      	ldr	r3, [r3, #32]
 800a94e:	683a      	ldr	r2, [r7, #0]
 800a950:	6812      	ldr	r2, [r2, #0]
 800a952:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a956:	6213      	str	r3, [r2, #32]
 800a958:	e007      	b.n	800a96a <HCSR04_TMR_IC_ISR+0xaa>
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	6a1b      	ldr	r3, [r3, #32]
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	6812      	ldr	r2, [r2, #0]
 800a964:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a968:	6213      	str	r3, [r2, #32]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d108      	bne.n	800a984 <HCSR04_TMR_IC_ISR+0xc4>
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	6a1a      	ldr	r2, [r3, #32]
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f042 0202 	orr.w	r2, r2, #2
 800a980:	621a      	str	r2, [r3, #32]
 800a982:	e021      	b.n	800a9c8 <HCSR04_TMR_IC_ISR+0x108>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	2b04      	cmp	r3, #4
 800a98a:	d108      	bne.n	800a99e <HCSR04_TMR_IC_ISR+0xde>
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6a1b      	ldr	r3, [r3, #32]
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	6812      	ldr	r2, [r2, #0]
 800a996:	f043 0320 	orr.w	r3, r3, #32
 800a99a:	6213      	str	r3, [r2, #32]
 800a99c:	e014      	b.n	800a9c8 <HCSR04_TMR_IC_ISR+0x108>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	2b08      	cmp	r3, #8
 800a9a4:	d108      	bne.n	800a9b8 <HCSR04_TMR_IC_ISR+0xf8>
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	6a1b      	ldr	r3, [r3, #32]
 800a9ac:	683a      	ldr	r2, [r7, #0]
 800a9ae:	6812      	ldr	r2, [r2, #0]
 800a9b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a9b4:	6213      	str	r3, [r2, #32]
 800a9b6:	e007      	b.n	800a9c8 <HCSR04_TMR_IC_ISR+0x108>
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	6a1b      	ldr	r3, [r3, #32]
 800a9be:	683a      	ldr	r2, [r7, #0]
 800a9c0:	6812      	ldr	r2, [r2, #0]
 800a9c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a9c6:	6213      	str	r3, [r2, #32]
			pHCSR04->TMR_OVC = 0;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	82da      	strh	r2, [r3, #22]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);

			osSemaphoreRelease(DistSemaphoreHandle);
		}
	}
}
 800a9ce:	e0b3      	b.n	800ab38 <HCSR04_TMR_IC_ISR+0x278>
		else if (pHCSR04->EDGE_STATE == 1)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	7d5b      	ldrb	r3, [r3, #21]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	f040 80af 	bne.w	800ab38 <HCSR04_TMR_IC_ISR+0x278>
			PS = pHCSR04->TIM_Instance->PSC;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e0:	60fb      	str	r3, [r7, #12]
			pHCSR04->TMR_ARR = pHCSR04->TIM_Instance->ARR;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	61da      	str	r2, [r3, #28]
			pHCSR04->T2 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	6838      	ldr	r0, [r7, #0]
 800a9f4:	f004 fd04 	bl	800f400 <HAL_TIM_ReadCapturedValue>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	625a      	str	r2, [r3, #36]	; 0x24
			if (pHCSR04->T1 < pHCSR04->T2)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6a1a      	ldr	r2, [r3, #32]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d207      	bcs.n	800aa1a <HCSR04_TMR_IC_ISR+0x15a>
				pHCSR04->DIFF = pHCSR04->T2 - pHCSR04->T1;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a1b      	ldr	r3, [r3, #32]
 800aa12:	1ad2      	subs	r2, r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	629a      	str	r2, [r3, #40]	; 0x28
 800aa18:	e00f      	b.n	800aa3a <HCSR04_TMR_IC_ISR+0x17a>
			else if (pHCSR04->T2 < pHCSR04->T1)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6a1b      	ldr	r3, [r3, #32]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d209      	bcs.n	800aa3a <HCSR04_TMR_IC_ISR+0x17a>
				pHCSR04->DIFF = (pHCSR04->T2 + 65535) - pHCSR04->T1;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a1b      	ldr	r3, [r3, #32]
 800aa2e:	1ad2      	subs	r2, r2, r3
 800aa30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa34:	4413      	add	r3, r2
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	6293      	str	r3, [r2, #40]	; 0x28
			pHCSR04->DISTANCE = ((pHCSR04->DIFF / 1000.0f) * 340.0f / 2.0f) / (pHCSR04->TIM_CLK_MHz/(PS+1));
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3e:	ee07 3a90 	vmov	s15, r3
 800aa42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aa46:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800ab40 <HCSR04_TMR_IC_ISR+0x280>
 800aa4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aa4e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800ab44 <HCSR04_TMR_IC_ISR+0x284>
 800aa52:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa56:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aa5a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	691a      	ldr	r2, [r3, #16]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	3301      	adds	r3, #1
 800aa66:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa6a:	ee07 3a90 	vmov	s15, r3
 800aa6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aa72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			pHCSR04->EDGE_STATE = 0;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d108      	bne.n	800aa9c <HCSR04_TMR_IC_ISR+0x1dc>
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	6a1a      	ldr	r2, [r3, #32]
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f022 020a 	bic.w	r2, r2, #10
 800aa98:	621a      	str	r2, [r3, #32]
 800aa9a:	e021      	b.n	800aae0 <HCSR04_TMR_IC_ISR+0x220>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	2b04      	cmp	r3, #4
 800aaa2:	d108      	bne.n	800aab6 <HCSR04_TMR_IC_ISR+0x1f6>
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	6a1b      	ldr	r3, [r3, #32]
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	6812      	ldr	r2, [r2, #0]
 800aaae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aab2:	6213      	str	r3, [r2, #32]
 800aab4:	e014      	b.n	800aae0 <HCSR04_TMR_IC_ISR+0x220>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	2b08      	cmp	r3, #8
 800aabc:	d108      	bne.n	800aad0 <HCSR04_TMR_IC_ISR+0x210>
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	6a1b      	ldr	r3, [r3, #32]
 800aac4:	683a      	ldr	r2, [r7, #0]
 800aac6:	6812      	ldr	r2, [r2, #0]
 800aac8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800aacc:	6213      	str	r3, [r2, #32]
 800aace:	e007      	b.n	800aae0 <HCSR04_TMR_IC_ISR+0x220>
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	683a      	ldr	r2, [r7, #0]
 800aad8:	6812      	ldr	r2, [r2, #0]
 800aada:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800aade:	6213      	str	r3, [r2, #32]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	68db      	ldr	r3, [r3, #12]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d106      	bne.n	800aaf6 <HCSR04_TMR_IC_ISR+0x236>
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	6a12      	ldr	r2, [r2, #32]
 800aaf2:	621a      	str	r2, [r3, #32]
 800aaf4:	e01b      	b.n	800ab2e <HCSR04_TMR_IC_ISR+0x26e>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	2b04      	cmp	r3, #4
 800aafc:	d106      	bne.n	800ab0c <HCSR04_TMR_IC_ISR+0x24c>
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	683a      	ldr	r2, [r7, #0]
 800ab04:	6812      	ldr	r2, [r2, #0]
 800ab06:	6a1b      	ldr	r3, [r3, #32]
 800ab08:	6213      	str	r3, [r2, #32]
 800ab0a:	e010      	b.n	800ab2e <HCSR04_TMR_IC_ISR+0x26e>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	2b08      	cmp	r3, #8
 800ab12:	d106      	bne.n	800ab22 <HCSR04_TMR_IC_ISR+0x262>
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	683a      	ldr	r2, [r7, #0]
 800ab1a:	6812      	ldr	r2, [r2, #0]
 800ab1c:	6a1b      	ldr	r3, [r3, #32]
 800ab1e:	6213      	str	r3, [r2, #32]
 800ab20:	e005      	b.n	800ab2e <HCSR04_TMR_IC_ISR+0x26e>
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	683a      	ldr	r2, [r7, #0]
 800ab28:	6812      	ldr	r2, [r2, #0]
 800ab2a:	6a1b      	ldr	r3, [r3, #32]
 800ab2c:	6213      	str	r3, [r2, #32]
			osSemaphoreRelease(DistSemaphoreHandle);
 800ab2e:	4b06      	ldr	r3, [pc, #24]	; (800ab48 <HCSR04_TMR_IC_ISR+0x288>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4618      	mov	r0, r3
 800ab34:	f007 f95e 	bl	8011df4 <osSemaphoreRelease>
}
 800ab38:	bf00      	nop
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	447a0000 	.word	0x447a0000
 800ab44:	43aa0000 	.word	0x43aa0000
 800ab48:	20000dec 	.word	0x20000dec

0800ab4c <HCSR04_Trigger>:

void HCSR04_Trigger(HCSR04_t* pHCSR04)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_SET);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6818      	ldr	r0, [r3, #0]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	889b      	ldrh	r3, [r3, #4]
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	4619      	mov	r1, r3
 800ab60:	f000 ff20 	bl	800b9a4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800ab64:	2001      	movs	r0, #1
 800ab66:	f000 f871 	bl	800ac4c <HAL_Delay>
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_RESET);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6818      	ldr	r0, [r3, #0]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	889b      	ldrh	r3, [r3, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	4619      	mov	r1, r3
 800ab76:	f000 ff15 	bl	800b9a4 <HAL_GPIO_WritePin>
}
 800ab7a:	bf00      	nop
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <HCSR04_Read>:

float HCSR04_Read(HCSR04_t* pHCSR04)
{
 800ab82:	b480      	push	{r7}
 800ab84:	b083      	sub	sp, #12
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
	return pHCSR04->DISTANCE;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8e:	ee07 3a90 	vmov	s15, r3
}
 800ab92:	eeb0 0a67 	vmov.f32	s0, s15
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 800aba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800abd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800aba4:	480d      	ldr	r0, [pc, #52]	; (800abdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800aba6:	490e      	ldr	r1, [pc, #56]	; (800abe0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800aba8:	4a0e      	ldr	r2, [pc, #56]	; (800abe4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800abaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800abac:	e002      	b.n	800abb4 <LoopCopyDataInit>

0800abae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800abae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800abb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800abb2:	3304      	adds	r3, #4

0800abb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800abb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800abb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800abb8:	d3f9      	bcc.n	800abae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800abba:	4a0b      	ldr	r2, [pc, #44]	; (800abe8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800abbc:	4c0b      	ldr	r4, [pc, #44]	; (800abec <LoopFillZerobss+0x26>)
  movs r3, #0
 800abbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 800abc0:	e001      	b.n	800abc6 <LoopFillZerobss>

0800abc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800abc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800abc4:	3204      	adds	r2, #4

0800abc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800abc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800abc8:	d3fb      	bcc.n	800abc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800abca:	f7fc f923 	bl	8006e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800abce:	f00a fda7 	bl	8015720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800abd2:	f7f9 fa6d 	bl	80040b0 <main>
  bx  lr    
 800abd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800abd8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800abdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800abe0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800abe4:	0801c910 	.word	0x0801c910
  ldr r2, =_sbss
 800abe8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800abec:	200090e4 	.word	0x200090e4

0800abf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800abf0:	e7fe      	b.n	800abf0 <ADC_IRQHandler>

0800abf2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800abf6:	2003      	movs	r0, #3
 800abf8:	f000 f8f9 	bl	800adee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800abfc:	200f      	movs	r0, #15
 800abfe:	f7fb ff81 	bl	8006b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ac02:	f7fb fcaf 	bl	8006564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ac10:	4b06      	ldr	r3, [pc, #24]	; (800ac2c <HAL_IncTick+0x20>)
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	461a      	mov	r2, r3
 800ac16:	4b06      	ldr	r3, [pc, #24]	; (800ac30 <HAL_IncTick+0x24>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	4a04      	ldr	r2, [pc, #16]	; (800ac30 <HAL_IncTick+0x24>)
 800ac1e:	6013      	str	r3, [r2, #0]
}
 800ac20:	bf00      	nop
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	20000010 	.word	0x20000010
 800ac30:	20000e48 	.word	0x20000e48

0800ac34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ac34:	b480      	push	{r7}
 800ac36:	af00      	add	r7, sp, #0
  return uwTick;
 800ac38:	4b03      	ldr	r3, [pc, #12]	; (800ac48 <HAL_GetTick+0x14>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	20000e48 	.word	0x20000e48

0800ac4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ac54:	f7ff ffee 	bl	800ac34 <HAL_GetTick>
 800ac58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac64:	d005      	beq.n	800ac72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ac66:	4b0a      	ldr	r3, [pc, #40]	; (800ac90 <HAL_Delay+0x44>)
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	4413      	add	r3, r2
 800ac70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800ac72:	bf00      	nop
 800ac74:	f7ff ffde 	bl	800ac34 <HAL_GetTick>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	1ad3      	subs	r3, r2, r3
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d8f7      	bhi.n	800ac74 <HAL_Delay+0x28>
  {
  }
}
 800ac84:	bf00      	nop
 800ac86:	bf00      	nop
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	20000010 	.word	0x20000010

0800ac94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f003 0307 	and.w	r3, r3, #7
 800aca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800aca4:	4b0b      	ldr	r3, [pc, #44]	; (800acd4 <__NVIC_SetPriorityGrouping+0x40>)
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800acaa:	68ba      	ldr	r2, [r7, #8]
 800acac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800acb0:	4013      	ands	r3, r2
 800acb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800acbc:	4b06      	ldr	r3, [pc, #24]	; (800acd8 <__NVIC_SetPriorityGrouping+0x44>)
 800acbe:	4313      	orrs	r3, r2
 800acc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800acc2:	4a04      	ldr	r2, [pc, #16]	; (800acd4 <__NVIC_SetPriorityGrouping+0x40>)
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	60d3      	str	r3, [r2, #12]
}
 800acc8:	bf00      	nop
 800acca:	3714      	adds	r7, #20
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr
 800acd4:	e000ed00 	.word	0xe000ed00
 800acd8:	05fa0000 	.word	0x05fa0000

0800acdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800acdc:	b480      	push	{r7}
 800acde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ace0:	4b04      	ldr	r3, [pc, #16]	; (800acf4 <__NVIC_GetPriorityGrouping+0x18>)
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	0a1b      	lsrs	r3, r3, #8
 800ace6:	f003 0307 	and.w	r3, r3, #7
}
 800acea:	4618      	mov	r0, r3
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr
 800acf4:	e000ed00 	.word	0xe000ed00

0800acf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	4603      	mov	r3, r0
 800ad00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	db0b      	blt.n	800ad22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ad0a:	79fb      	ldrb	r3, [r7, #7]
 800ad0c:	f003 021f 	and.w	r2, r3, #31
 800ad10:	4907      	ldr	r1, [pc, #28]	; (800ad30 <__NVIC_EnableIRQ+0x38>)
 800ad12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad16:	095b      	lsrs	r3, r3, #5
 800ad18:	2001      	movs	r0, #1
 800ad1a:	fa00 f202 	lsl.w	r2, r0, r2
 800ad1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ad22:	bf00      	nop
 800ad24:	370c      	adds	r7, #12
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	e000e100 	.word	0xe000e100

0800ad34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	6039      	str	r1, [r7, #0]
 800ad3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	db0a      	blt.n	800ad5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	b2da      	uxtb	r2, r3
 800ad4c:	490c      	ldr	r1, [pc, #48]	; (800ad80 <__NVIC_SetPriority+0x4c>)
 800ad4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad52:	0112      	lsls	r2, r2, #4
 800ad54:	b2d2      	uxtb	r2, r2
 800ad56:	440b      	add	r3, r1
 800ad58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ad5c:	e00a      	b.n	800ad74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	4908      	ldr	r1, [pc, #32]	; (800ad84 <__NVIC_SetPriority+0x50>)
 800ad64:	79fb      	ldrb	r3, [r7, #7]
 800ad66:	f003 030f 	and.w	r3, r3, #15
 800ad6a:	3b04      	subs	r3, #4
 800ad6c:	0112      	lsls	r2, r2, #4
 800ad6e:	b2d2      	uxtb	r2, r2
 800ad70:	440b      	add	r3, r1
 800ad72:	761a      	strb	r2, [r3, #24]
}
 800ad74:	bf00      	nop
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr
 800ad80:	e000e100 	.word	0xe000e100
 800ad84:	e000ed00 	.word	0xe000ed00

0800ad88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b089      	sub	sp, #36	; 0x24
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f003 0307 	and.w	r3, r3, #7
 800ad9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	f1c3 0307 	rsb	r3, r3, #7
 800ada2:	2b04      	cmp	r3, #4
 800ada4:	bf28      	it	cs
 800ada6:	2304      	movcs	r3, #4
 800ada8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	3304      	adds	r3, #4
 800adae:	2b06      	cmp	r3, #6
 800adb0:	d902      	bls.n	800adb8 <NVIC_EncodePriority+0x30>
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	3b03      	subs	r3, #3
 800adb6:	e000      	b.n	800adba <NVIC_EncodePriority+0x32>
 800adb8:	2300      	movs	r3, #0
 800adba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800adbc:	f04f 32ff 	mov.w	r2, #4294967295
 800adc0:	69bb      	ldr	r3, [r7, #24]
 800adc2:	fa02 f303 	lsl.w	r3, r2, r3
 800adc6:	43da      	mvns	r2, r3
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	401a      	ands	r2, r3
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800add0:	f04f 31ff 	mov.w	r1, #4294967295
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	fa01 f303 	lsl.w	r3, r1, r3
 800adda:	43d9      	mvns	r1, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ade0:	4313      	orrs	r3, r2
         );
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3724      	adds	r7, #36	; 0x24
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr

0800adee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b082      	sub	sp, #8
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f7ff ff4c 	bl	800ac94 <__NVIC_SetPriorityGrouping>
}
 800adfc:	bf00      	nop
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
 800ae10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800ae12:	2300      	movs	r3, #0
 800ae14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ae16:	f7ff ff61 	bl	800acdc <__NVIC_GetPriorityGrouping>
 800ae1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	68b9      	ldr	r1, [r7, #8]
 800ae20:	6978      	ldr	r0, [r7, #20]
 800ae22:	f7ff ffb1 	bl	800ad88 <NVIC_EncodePriority>
 800ae26:	4602      	mov	r2, r0
 800ae28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae2c:	4611      	mov	r1, r2
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7ff ff80 	bl	800ad34 <__NVIC_SetPriority>
}
 800ae34:	bf00      	nop
 800ae36:	3718      	adds	r7, #24
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	4603      	mov	r3, r0
 800ae44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ae46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7ff ff54 	bl	800acf8 <__NVIC_EnableIRQ>
}
 800ae50:	bf00      	nop
 800ae52:	3708      	adds	r7, #8
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b086      	sub	sp, #24
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800ae60:	2300      	movs	r3, #0
 800ae62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800ae64:	f7ff fee6 	bl	800ac34 <HAL_GetTick>
 800ae68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d101      	bne.n	800ae74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800ae70:	2301      	movs	r3, #1
 800ae72:	e099      	b.n	800afa8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2202      	movs	r2, #2
 800ae78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f022 0201 	bic.w	r2, r2, #1
 800ae92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ae94:	e00f      	b.n	800aeb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ae96:	f7ff fecd 	bl	800ac34 <HAL_GetTick>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	1ad3      	subs	r3, r2, r3
 800aea0:	2b05      	cmp	r3, #5
 800aea2:	d908      	bls.n	800aeb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2220      	movs	r2, #32
 800aea8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2203      	movs	r2, #3
 800aeae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800aeb2:	2303      	movs	r3, #3
 800aeb4:	e078      	b.n	800afa8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f003 0301 	and.w	r3, r3, #1
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d1e8      	bne.n	800ae96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800aecc:	697a      	ldr	r2, [r7, #20]
 800aece:	4b38      	ldr	r3, [pc, #224]	; (800afb0 <HAL_DMA_Init+0x158>)
 800aed0:	4013      	ands	r3, r2
 800aed2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	685a      	ldr	r2, [r3, #4]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aee2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aeee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	699b      	ldr	r3, [r3, #24]
 800aef4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aefa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6a1b      	ldr	r3, [r3, #32]
 800af00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800af02:	697a      	ldr	r2, [r7, #20]
 800af04:	4313      	orrs	r3, r2
 800af06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0c:	2b04      	cmp	r3, #4
 800af0e:	d107      	bne.n	800af20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af18:	4313      	orrs	r3, r2
 800af1a:	697a      	ldr	r2, [r7, #20]
 800af1c:	4313      	orrs	r3, r2
 800af1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	697a      	ldr	r2, [r7, #20]
 800af26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	695b      	ldr	r3, [r3, #20]
 800af2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	f023 0307 	bic.w	r3, r3, #7
 800af36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3c:	697a      	ldr	r2, [r7, #20]
 800af3e:	4313      	orrs	r3, r2
 800af40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af46:	2b04      	cmp	r3, #4
 800af48:	d117      	bne.n	800af7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af4e:	697a      	ldr	r2, [r7, #20]
 800af50:	4313      	orrs	r3, r2
 800af52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d00e      	beq.n	800af7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 fb09 	bl	800b574 <DMA_CheckFifoParam>
 800af62:	4603      	mov	r3, r0
 800af64:	2b00      	cmp	r3, #0
 800af66:	d008      	beq.n	800af7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2240      	movs	r2, #64	; 0x40
 800af6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2201      	movs	r2, #1
 800af72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800af76:	2301      	movs	r3, #1
 800af78:	e016      	b.n	800afa8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	697a      	ldr	r2, [r7, #20]
 800af80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 fac0 	bl	800b508 <DMA_CalcBaseAndBitshift>
 800af88:	4603      	mov	r3, r0
 800af8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af90:	223f      	movs	r2, #63	; 0x3f
 800af92:	409a      	lsls	r2, r3
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2201      	movs	r2, #1
 800afa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800afa6:	2300      	movs	r3, #0
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3718      	adds	r7, #24
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	e010803f 	.word	0xe010803f

0800afb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
 800afc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800afc2:	2300      	movs	r3, #0
 800afc4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d101      	bne.n	800afda <HAL_DMA_Start_IT+0x26>
 800afd6:	2302      	movs	r3, #2
 800afd8:	e048      	b.n	800b06c <HAL_DMA_Start_IT+0xb8>
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2201      	movs	r2, #1
 800afde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	2b01      	cmp	r3, #1
 800afec:	d137      	bne.n	800b05e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2202      	movs	r2, #2
 800aff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2200      	movs	r2, #0
 800affa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	68b9      	ldr	r1, [r7, #8]
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f000 fa52 	bl	800b4ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b00c:	223f      	movs	r2, #63	; 0x3f
 800b00e:	409a      	lsls	r2, r3
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f042 0216 	orr.w	r2, r2, #22
 800b022:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	695a      	ldr	r2, [r3, #20]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b032:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d007      	beq.n	800b04c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f042 0208 	orr.w	r2, r2, #8
 800b04a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f042 0201 	orr.w	r2, r2, #1
 800b05a:	601a      	str	r2, [r3, #0]
 800b05c:	e005      	b.n	800b06a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2200      	movs	r2, #0
 800b062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b066:	2302      	movs	r3, #2
 800b068:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b06a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3718      	adds	r7, #24
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b080:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800b082:	f7ff fdd7 	bl	800ac34 <HAL_GetTick>
 800b086:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	2b02      	cmp	r3, #2
 800b092:	d008      	beq.n	800b0a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2280      	movs	r2, #128	; 0x80
 800b098:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e052      	b.n	800b14c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f022 0216 	bic.w	r2, r2, #22
 800b0b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	695a      	ldr	r2, [r3, #20]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b0c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d103      	bne.n	800b0d6 <HAL_DMA_Abort+0x62>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d007      	beq.n	800b0e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f022 0208 	bic.w	r2, r2, #8
 800b0e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f022 0201 	bic.w	r2, r2, #1
 800b0f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b0f6:	e013      	b.n	800b120 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b0f8:	f7ff fd9c 	bl	800ac34 <HAL_GetTick>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	1ad3      	subs	r3, r2, r3
 800b102:	2b05      	cmp	r3, #5
 800b104:	d90c      	bls.n	800b120 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2220      	movs	r2, #32
 800b10a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2203      	movs	r2, #3
 800b110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800b11c:	2303      	movs	r3, #3
 800b11e:	e015      	b.n	800b14c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f003 0301 	and.w	r3, r3, #1
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1e4      	bne.n	800b0f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b132:	223f      	movs	r2, #63	; 0x3f
 800b134:	409a      	lsls	r2, r3
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2201      	movs	r2, #1
 800b13e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800b14a:	2300      	movs	r3, #0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3710      	adds	r7, #16
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b162:	b2db      	uxtb	r3, r3
 800b164:	2b02      	cmp	r3, #2
 800b166:	d004      	beq.n	800b172 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2280      	movs	r2, #128	; 0x80
 800b16c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
 800b170:	e00c      	b.n	800b18c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2205      	movs	r2, #5
 800b176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f022 0201 	bic.w	r2, r2, #1
 800b188:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b18a:	2300      	movs	r3, #0
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	370c      	adds	r7, #12
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b086      	sub	sp, #24
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800b1a4:	4b8e      	ldr	r3, [pc, #568]	; (800b3e0 <HAL_DMA_IRQHandler+0x248>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a8e      	ldr	r2, [pc, #568]	; (800b3e4 <HAL_DMA_IRQHandler+0x24c>)
 800b1aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ae:	0a9b      	lsrs	r3, r3, #10
 800b1b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1c2:	2208      	movs	r2, #8
 800b1c4:	409a      	lsls	r2, r3
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	4013      	ands	r3, r2
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d01a      	beq.n	800b204 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f003 0304 	and.w	r3, r3, #4
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d013      	beq.n	800b204 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f022 0204 	bic.w	r2, r2, #4
 800b1ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1f0:	2208      	movs	r2, #8
 800b1f2:	409a      	lsls	r2, r3
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1fc:	f043 0201 	orr.w	r2, r3, #1
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b208:	2201      	movs	r2, #1
 800b20a:	409a      	lsls	r2, r3
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	4013      	ands	r3, r2
 800b210:	2b00      	cmp	r3, #0
 800b212:	d012      	beq.n	800b23a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	695b      	ldr	r3, [r3, #20]
 800b21a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d00b      	beq.n	800b23a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b226:	2201      	movs	r2, #1
 800b228:	409a      	lsls	r2, r3
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b232:	f043 0202 	orr.w	r2, r3, #2
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b23e:	2204      	movs	r2, #4
 800b240:	409a      	lsls	r2, r3
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	4013      	ands	r3, r2
 800b246:	2b00      	cmp	r3, #0
 800b248:	d012      	beq.n	800b270 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f003 0302 	and.w	r3, r3, #2
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00b      	beq.n	800b270 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b25c:	2204      	movs	r2, #4
 800b25e:	409a      	lsls	r2, r3
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b268:	f043 0204 	orr.w	r2, r3, #4
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b274:	2210      	movs	r2, #16
 800b276:	409a      	lsls	r2, r3
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	4013      	ands	r3, r2
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d043      	beq.n	800b308 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f003 0308 	and.w	r3, r3, #8
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d03c      	beq.n	800b308 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b292:	2210      	movs	r2, #16
 800b294:	409a      	lsls	r2, r3
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d018      	beq.n	800b2da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d108      	bne.n	800b2c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d024      	beq.n	800b308 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	4798      	blx	r3
 800b2c6:	e01f      	b.n	800b308 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d01b      	beq.n	800b308 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	4798      	blx	r3
 800b2d8:	e016      	b.n	800b308 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d107      	bne.n	800b2f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f022 0208 	bic.w	r2, r2, #8
 800b2f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d003      	beq.n	800b308 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b30c:	2220      	movs	r2, #32
 800b30e:	409a      	lsls	r2, r3
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	4013      	ands	r3, r2
 800b314:	2b00      	cmp	r3, #0
 800b316:	f000 808f 	beq.w	800b438 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f003 0310 	and.w	r3, r3, #16
 800b324:	2b00      	cmp	r3, #0
 800b326:	f000 8087 	beq.w	800b438 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b32e:	2220      	movs	r2, #32
 800b330:	409a      	lsls	r2, r3
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	2b05      	cmp	r3, #5
 800b340:	d136      	bne.n	800b3b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f022 0216 	bic.w	r2, r2, #22
 800b350:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	695a      	ldr	r2, [r3, #20]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b360:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b366:	2b00      	cmp	r3, #0
 800b368:	d103      	bne.n	800b372 <HAL_DMA_IRQHandler+0x1da>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d007      	beq.n	800b382 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f022 0208 	bic.w	r2, r2, #8
 800b380:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b386:	223f      	movs	r2, #63	; 0x3f
 800b388:	409a      	lsls	r2, r3
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2201      	movs	r2, #1
 800b392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d07e      	beq.n	800b4a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	4798      	blx	r3
        }
        return;
 800b3ae:	e079      	b.n	800b4a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d01d      	beq.n	800b3fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10d      	bne.n	800b3e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d031      	beq.n	800b438 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	4798      	blx	r3
 800b3dc:	e02c      	b.n	800b438 <HAL_DMA_IRQHandler+0x2a0>
 800b3de:	bf00      	nop
 800b3e0:	20000008 	.word	0x20000008
 800b3e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d023      	beq.n	800b438 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	4798      	blx	r3
 800b3f8:	e01e      	b.n	800b438 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b404:	2b00      	cmp	r3, #0
 800b406:	d10f      	bne.n	800b428 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f022 0210 	bic.w	r2, r2, #16
 800b416:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d003      	beq.n	800b438 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d032      	beq.n	800b4a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b444:	f003 0301 	and.w	r3, r3, #1
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d022      	beq.n	800b492 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2205      	movs	r2, #5
 800b450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f022 0201 	bic.w	r2, r2, #1
 800b462:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	3301      	adds	r3, #1
 800b468:	60bb      	str	r3, [r7, #8]
 800b46a:	697a      	ldr	r2, [r7, #20]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d307      	bcc.n	800b480 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f003 0301 	and.w	r3, r3, #1
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d1f2      	bne.n	800b464 <HAL_DMA_IRQHandler+0x2cc>
 800b47e:	e000      	b.n	800b482 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800b480:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2201      	movs	r2, #1
 800b486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b496:	2b00      	cmp	r3, #0
 800b498:	d005      	beq.n	800b4a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	4798      	blx	r3
 800b4a2:	e000      	b.n	800b4a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 800b4a4:	bf00      	nop
    }
  }
}
 800b4a6:	3718      	adds	r7, #24
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	607a      	str	r2, [r7, #4]
 800b4b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b4c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	683a      	ldr	r2, [r7, #0]
 800b4d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	2b40      	cmp	r3, #64	; 0x40
 800b4d8:	d108      	bne.n	800b4ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	68ba      	ldr	r2, [r7, #8]
 800b4e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b4ea:	e007      	b.n	800b4fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	68ba      	ldr	r2, [r7, #8]
 800b4f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	60da      	str	r2, [r3, #12]
}
 800b4fc:	bf00      	nop
 800b4fe:	3714      	adds	r7, #20
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	b2db      	uxtb	r3, r3
 800b516:	3b10      	subs	r3, #16
 800b518:	4a13      	ldr	r2, [pc, #76]	; (800b568 <DMA_CalcBaseAndBitshift+0x60>)
 800b51a:	fba2 2303 	umull	r2, r3, r2, r3
 800b51e:	091b      	lsrs	r3, r3, #4
 800b520:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b522:	4a12      	ldr	r2, [pc, #72]	; (800b56c <DMA_CalcBaseAndBitshift+0x64>)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	4413      	add	r3, r2
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	461a      	mov	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2b03      	cmp	r3, #3
 800b534:	d908      	bls.n	800b548 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	461a      	mov	r2, r3
 800b53c:	4b0c      	ldr	r3, [pc, #48]	; (800b570 <DMA_CalcBaseAndBitshift+0x68>)
 800b53e:	4013      	ands	r3, r2
 800b540:	1d1a      	adds	r2, r3, #4
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	659a      	str	r2, [r3, #88]	; 0x58
 800b546:	e006      	b.n	800b556 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	461a      	mov	r2, r3
 800b54e:	4b08      	ldr	r3, [pc, #32]	; (800b570 <DMA_CalcBaseAndBitshift+0x68>)
 800b550:	4013      	ands	r3, r2
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3714      	adds	r7, #20
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr
 800b566:	bf00      	nop
 800b568:	aaaaaaab 	.word	0xaaaaaaab
 800b56c:	0801c060 	.word	0x0801c060
 800b570:	fffffc00 	.word	0xfffffc00

0800b574 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b574:	b480      	push	{r7}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b57c:	2300      	movs	r3, #0
 800b57e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b584:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	699b      	ldr	r3, [r3, #24]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d11f      	bne.n	800b5ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	2b03      	cmp	r3, #3
 800b592:	d856      	bhi.n	800b642 <DMA_CheckFifoParam+0xce>
 800b594:	a201      	add	r2, pc, #4	; (adr r2, 800b59c <DMA_CheckFifoParam+0x28>)
 800b596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b59a:	bf00      	nop
 800b59c:	0800b5ad 	.word	0x0800b5ad
 800b5a0:	0800b5bf 	.word	0x0800b5bf
 800b5a4:	0800b5ad 	.word	0x0800b5ad
 800b5a8:	0800b643 	.word	0x0800b643
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d046      	beq.n	800b646 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b5bc:	e043      	b.n	800b646 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b5c6:	d140      	bne.n	800b64a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b5cc:	e03d      	b.n	800b64a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	699b      	ldr	r3, [r3, #24]
 800b5d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5d6:	d121      	bne.n	800b61c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	2b03      	cmp	r3, #3
 800b5dc:	d837      	bhi.n	800b64e <DMA_CheckFifoParam+0xda>
 800b5de:	a201      	add	r2, pc, #4	; (adr r2, 800b5e4 <DMA_CheckFifoParam+0x70>)
 800b5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e4:	0800b5f5 	.word	0x0800b5f5
 800b5e8:	0800b5fb 	.word	0x0800b5fb
 800b5ec:	0800b5f5 	.word	0x0800b5f5
 800b5f0:	0800b60d 	.word	0x0800b60d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b5f8:	e030      	b.n	800b65c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b602:	2b00      	cmp	r3, #0
 800b604:	d025      	beq.n	800b652 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b606:	2301      	movs	r3, #1
 800b608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b60a:	e022      	b.n	800b652 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b610:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b614:	d11f      	bne.n	800b656 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b616:	2301      	movs	r3, #1
 800b618:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b61a:	e01c      	b.n	800b656 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	2b02      	cmp	r3, #2
 800b620:	d903      	bls.n	800b62a <DMA_CheckFifoParam+0xb6>
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	2b03      	cmp	r3, #3
 800b626:	d003      	beq.n	800b630 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b628:	e018      	b.n	800b65c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	73fb      	strb	r3, [r7, #15]
      break;
 800b62e:	e015      	b.n	800b65c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d00e      	beq.n	800b65a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b63c:	2301      	movs	r3, #1
 800b63e:	73fb      	strb	r3, [r7, #15]
      break;
 800b640:	e00b      	b.n	800b65a <DMA_CheckFifoParam+0xe6>
      break;
 800b642:	bf00      	nop
 800b644:	e00a      	b.n	800b65c <DMA_CheckFifoParam+0xe8>
      break;
 800b646:	bf00      	nop
 800b648:	e008      	b.n	800b65c <DMA_CheckFifoParam+0xe8>
      break;
 800b64a:	bf00      	nop
 800b64c:	e006      	b.n	800b65c <DMA_CheckFifoParam+0xe8>
      break;
 800b64e:	bf00      	nop
 800b650:	e004      	b.n	800b65c <DMA_CheckFifoParam+0xe8>
      break;
 800b652:	bf00      	nop
 800b654:	e002      	b.n	800b65c <DMA_CheckFifoParam+0xe8>
      break;   
 800b656:	bf00      	nop
 800b658:	e000      	b.n	800b65c <DMA_CheckFifoParam+0xe8>
      break;
 800b65a:	bf00      	nop
    }
  } 
  
  return status; 
 800b65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3714      	adds	r7, #20
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr
 800b66a:	bf00      	nop

0800b66c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b089      	sub	sp, #36	; 0x24
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800b676:	2300      	movs	r3, #0
 800b678:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800b67a:	2300      	movs	r3, #0
 800b67c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800b67e:	2300      	movs	r3, #0
 800b680:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800b682:	2300      	movs	r3, #0
 800b684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800b686:	2300      	movs	r3, #0
 800b688:	61fb      	str	r3, [r7, #28]
 800b68a:	e169      	b.n	800b960 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800b68c:	2201      	movs	r2, #1
 800b68e:	69fb      	ldr	r3, [r7, #28]
 800b690:	fa02 f303 	lsl.w	r3, r2, r3
 800b694:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	697a      	ldr	r2, [r7, #20]
 800b69c:	4013      	ands	r3, r2
 800b69e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	f040 8158 	bne.w	800b95a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	f003 0303 	and.w	r3, r3, #3
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d005      	beq.n	800b6c2 <HAL_GPIO_Init+0x56>
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	f003 0303 	and.w	r3, r3, #3
 800b6be:	2b02      	cmp	r3, #2
 800b6c0:	d130      	bne.n	800b724 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b6c8:	69fb      	ldr	r3, [r7, #28]
 800b6ca:	005b      	lsls	r3, r3, #1
 800b6cc:	2203      	movs	r2, #3
 800b6ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b6d2:	43db      	mvns	r3, r3
 800b6d4:	69ba      	ldr	r2, [r7, #24]
 800b6d6:	4013      	ands	r3, r2
 800b6d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	68da      	ldr	r2, [r3, #12]
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	005b      	lsls	r3, r3, #1
 800b6e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b6e6:	69ba      	ldr	r2, [r7, #24]
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	69ba      	ldr	r2, [r7, #24]
 800b6f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	69fb      	ldr	r3, [r7, #28]
 800b6fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b700:	43db      	mvns	r3, r3
 800b702:	69ba      	ldr	r2, [r7, #24]
 800b704:	4013      	ands	r3, r2
 800b706:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	091b      	lsrs	r3, r3, #4
 800b70e:	f003 0201 	and.w	r2, r3, #1
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	fa02 f303 	lsl.w	r3, r2, r3
 800b718:	69ba      	ldr	r2, [r7, #24]
 800b71a:	4313      	orrs	r3, r2
 800b71c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	69ba      	ldr	r2, [r7, #24]
 800b722:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	f003 0303 	and.w	r3, r3, #3
 800b72c:	2b03      	cmp	r3, #3
 800b72e:	d017      	beq.n	800b760 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	005b      	lsls	r3, r3, #1
 800b73a:	2203      	movs	r2, #3
 800b73c:	fa02 f303 	lsl.w	r3, r2, r3
 800b740:	43db      	mvns	r3, r3
 800b742:	69ba      	ldr	r2, [r7, #24]
 800b744:	4013      	ands	r3, r2
 800b746:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	689a      	ldr	r2, [r3, #8]
 800b74c:	69fb      	ldr	r3, [r7, #28]
 800b74e:	005b      	lsls	r3, r3, #1
 800b750:	fa02 f303 	lsl.w	r3, r2, r3
 800b754:	69ba      	ldr	r2, [r7, #24]
 800b756:	4313      	orrs	r3, r2
 800b758:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	69ba      	ldr	r2, [r7, #24]
 800b75e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	f003 0303 	and.w	r3, r3, #3
 800b768:	2b02      	cmp	r3, #2
 800b76a:	d123      	bne.n	800b7b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	08da      	lsrs	r2, r3, #3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	3208      	adds	r2, #8
 800b774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	f003 0307 	and.w	r3, r3, #7
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	220f      	movs	r2, #15
 800b784:	fa02 f303 	lsl.w	r3, r2, r3
 800b788:	43db      	mvns	r3, r3
 800b78a:	69ba      	ldr	r2, [r7, #24]
 800b78c:	4013      	ands	r3, r2
 800b78e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	691a      	ldr	r2, [r3, #16]
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	f003 0307 	and.w	r3, r3, #7
 800b79a:	009b      	lsls	r3, r3, #2
 800b79c:	fa02 f303 	lsl.w	r3, r2, r3
 800b7a0:	69ba      	ldr	r2, [r7, #24]
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800b7a6:	69fb      	ldr	r3, [r7, #28]
 800b7a8:	08da      	lsrs	r2, r3, #3
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	3208      	adds	r2, #8
 800b7ae:	69b9      	ldr	r1, [r7, #24]
 800b7b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	005b      	lsls	r3, r3, #1
 800b7be:	2203      	movs	r2, #3
 800b7c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b7c4:	43db      	mvns	r3, r3
 800b7c6:	69ba      	ldr	r2, [r7, #24]
 800b7c8:	4013      	ands	r3, r2
 800b7ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	f003 0203 	and.w	r2, r3, #3
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	005b      	lsls	r3, r3, #1
 800b7d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b7dc:	69ba      	ldr	r2, [r7, #24]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	69ba      	ldr	r2, [r7, #24]
 800b7e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f000 80b2 	beq.w	800b95a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b7f6:	4b60      	ldr	r3, [pc, #384]	; (800b978 <HAL_GPIO_Init+0x30c>)
 800b7f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7fa:	4a5f      	ldr	r2, [pc, #380]	; (800b978 <HAL_GPIO_Init+0x30c>)
 800b7fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b800:	6453      	str	r3, [r2, #68]	; 0x44
 800b802:	4b5d      	ldr	r3, [pc, #372]	; (800b978 <HAL_GPIO_Init+0x30c>)
 800b804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b80a:	60fb      	str	r3, [r7, #12]
 800b80c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800b80e:	4a5b      	ldr	r2, [pc, #364]	; (800b97c <HAL_GPIO_Init+0x310>)
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	089b      	lsrs	r3, r3, #2
 800b814:	3302      	adds	r3, #2
 800b816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b81a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b81c:	69fb      	ldr	r3, [r7, #28]
 800b81e:	f003 0303 	and.w	r3, r3, #3
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	220f      	movs	r2, #15
 800b826:	fa02 f303 	lsl.w	r3, r2, r3
 800b82a:	43db      	mvns	r3, r3
 800b82c:	69ba      	ldr	r2, [r7, #24]
 800b82e:	4013      	ands	r3, r2
 800b830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	4a52      	ldr	r2, [pc, #328]	; (800b980 <HAL_GPIO_Init+0x314>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d02b      	beq.n	800b892 <HAL_GPIO_Init+0x226>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	4a51      	ldr	r2, [pc, #324]	; (800b984 <HAL_GPIO_Init+0x318>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d025      	beq.n	800b88e <HAL_GPIO_Init+0x222>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	4a50      	ldr	r2, [pc, #320]	; (800b988 <HAL_GPIO_Init+0x31c>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d01f      	beq.n	800b88a <HAL_GPIO_Init+0x21e>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4a4f      	ldr	r2, [pc, #316]	; (800b98c <HAL_GPIO_Init+0x320>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d019      	beq.n	800b886 <HAL_GPIO_Init+0x21a>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4a4e      	ldr	r2, [pc, #312]	; (800b990 <HAL_GPIO_Init+0x324>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d013      	beq.n	800b882 <HAL_GPIO_Init+0x216>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4a4d      	ldr	r2, [pc, #308]	; (800b994 <HAL_GPIO_Init+0x328>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d00d      	beq.n	800b87e <HAL_GPIO_Init+0x212>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4a4c      	ldr	r2, [pc, #304]	; (800b998 <HAL_GPIO_Init+0x32c>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d007      	beq.n	800b87a <HAL_GPIO_Init+0x20e>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	4a4b      	ldr	r2, [pc, #300]	; (800b99c <HAL_GPIO_Init+0x330>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d101      	bne.n	800b876 <HAL_GPIO_Init+0x20a>
 800b872:	2307      	movs	r3, #7
 800b874:	e00e      	b.n	800b894 <HAL_GPIO_Init+0x228>
 800b876:	2308      	movs	r3, #8
 800b878:	e00c      	b.n	800b894 <HAL_GPIO_Init+0x228>
 800b87a:	2306      	movs	r3, #6
 800b87c:	e00a      	b.n	800b894 <HAL_GPIO_Init+0x228>
 800b87e:	2305      	movs	r3, #5
 800b880:	e008      	b.n	800b894 <HAL_GPIO_Init+0x228>
 800b882:	2304      	movs	r3, #4
 800b884:	e006      	b.n	800b894 <HAL_GPIO_Init+0x228>
 800b886:	2303      	movs	r3, #3
 800b888:	e004      	b.n	800b894 <HAL_GPIO_Init+0x228>
 800b88a:	2302      	movs	r3, #2
 800b88c:	e002      	b.n	800b894 <HAL_GPIO_Init+0x228>
 800b88e:	2301      	movs	r3, #1
 800b890:	e000      	b.n	800b894 <HAL_GPIO_Init+0x228>
 800b892:	2300      	movs	r3, #0
 800b894:	69fa      	ldr	r2, [r7, #28]
 800b896:	f002 0203 	and.w	r2, r2, #3
 800b89a:	0092      	lsls	r2, r2, #2
 800b89c:	4093      	lsls	r3, r2
 800b89e:	69ba      	ldr	r2, [r7, #24]
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800b8a4:	4935      	ldr	r1, [pc, #212]	; (800b97c <HAL_GPIO_Init+0x310>)
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	089b      	lsrs	r3, r3, #2
 800b8aa:	3302      	adds	r3, #2
 800b8ac:	69ba      	ldr	r2, [r7, #24]
 800b8ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b8b2:	4b3b      	ldr	r3, [pc, #236]	; (800b9a0 <HAL_GPIO_Init+0x334>)
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	43db      	mvns	r3, r3
 800b8bc:	69ba      	ldr	r2, [r7, #24]
 800b8be:	4013      	ands	r3, r2
 800b8c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d003      	beq.n	800b8d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b8ce:	69ba      	ldr	r2, [r7, #24]
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b8d6:	4a32      	ldr	r2, [pc, #200]	; (800b9a0 <HAL_GPIO_Init+0x334>)
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b8dc:	4b30      	ldr	r3, [pc, #192]	; (800b9a0 <HAL_GPIO_Init+0x334>)
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	43db      	mvns	r3, r3
 800b8e6:	69ba      	ldr	r2, [r7, #24]
 800b8e8:	4013      	ands	r3, r2
 800b8ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d003      	beq.n	800b900 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b8f8:	69ba      	ldr	r2, [r7, #24]
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b900:	4a27      	ldr	r2, [pc, #156]	; (800b9a0 <HAL_GPIO_Init+0x334>)
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b906:	4b26      	ldr	r3, [pc, #152]	; (800b9a0 <HAL_GPIO_Init+0x334>)
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	43db      	mvns	r3, r3
 800b910:	69ba      	ldr	r2, [r7, #24]
 800b912:	4013      	ands	r3, r2
 800b914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d003      	beq.n	800b92a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b922:	69ba      	ldr	r2, [r7, #24]
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	4313      	orrs	r3, r2
 800b928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b92a:	4a1d      	ldr	r2, [pc, #116]	; (800b9a0 <HAL_GPIO_Init+0x334>)
 800b92c:	69bb      	ldr	r3, [r7, #24]
 800b92e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b930:	4b1b      	ldr	r3, [pc, #108]	; (800b9a0 <HAL_GPIO_Init+0x334>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	43db      	mvns	r3, r3
 800b93a:	69ba      	ldr	r2, [r7, #24]
 800b93c:	4013      	ands	r3, r2
 800b93e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d003      	beq.n	800b954 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b94c:	69ba      	ldr	r2, [r7, #24]
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	4313      	orrs	r3, r2
 800b952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b954:	4a12      	ldr	r2, [pc, #72]	; (800b9a0 <HAL_GPIO_Init+0x334>)
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b95a:	69fb      	ldr	r3, [r7, #28]
 800b95c:	3301      	adds	r3, #1
 800b95e:	61fb      	str	r3, [r7, #28]
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	2b0f      	cmp	r3, #15
 800b964:	f67f ae92 	bls.w	800b68c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800b968:	bf00      	nop
 800b96a:	bf00      	nop
 800b96c:	3724      	adds	r7, #36	; 0x24
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	40023800 	.word	0x40023800
 800b97c:	40013800 	.word	0x40013800
 800b980:	40020000 	.word	0x40020000
 800b984:	40020400 	.word	0x40020400
 800b988:	40020800 	.word	0x40020800
 800b98c:	40020c00 	.word	0x40020c00
 800b990:	40021000 	.word	0x40021000
 800b994:	40021400 	.word	0x40021400
 800b998:	40021800 	.word	0x40021800
 800b99c:	40021c00 	.word	0x40021c00
 800b9a0:	40013c00 	.word	0x40013c00

0800b9a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	807b      	strh	r3, [r7, #2]
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b9b4:	787b      	ldrb	r3, [r7, #1]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d003      	beq.n	800b9c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b9ba:	887a      	ldrh	r2, [r7, #2]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800b9c0:	e003      	b.n	800b9ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b9c2:	887b      	ldrh	r3, [r7, #2]
 800b9c4:	041a      	lsls	r2, r3, #16
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	619a      	str	r2, [r3, #24]
}
 800b9ca:	bf00      	nop
 800b9cc:	370c      	adds	r7, #12
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr
	...

0800b9d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b082      	sub	sp, #8
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d101      	bne.n	800b9ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e07f      	b.n	800baea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d106      	bne.n	800ba04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f7fa fdd8 	bl	80065b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2224      	movs	r2, #36	; 0x24
 800ba08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f022 0201 	bic.w	r2, r2, #1
 800ba1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	685a      	ldr	r2, [r3, #4]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ba28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	689a      	ldr	r2, [r3, #8]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ba38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d107      	bne.n	800ba52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	689a      	ldr	r2, [r3, #8]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ba4e:	609a      	str	r2, [r3, #8]
 800ba50:	e006      	b.n	800ba60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	689a      	ldr	r2, [r3, #8]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ba5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	2b02      	cmp	r3, #2
 800ba66:	d104      	bne.n	800ba72 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	6859      	ldr	r1, [r3, #4]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	4b1d      	ldr	r3, [pc, #116]	; (800baf4 <HAL_I2C_Init+0x11c>)
 800ba7e:	430b      	orrs	r3, r1
 800ba80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	68da      	ldr	r2, [r3, #12]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ba90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	691a      	ldr	r2, [r3, #16]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	695b      	ldr	r3, [r3, #20]
 800ba9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	699b      	ldr	r3, [r3, #24]
 800baa2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	430a      	orrs	r2, r1
 800baaa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	69d9      	ldr	r1, [r3, #28]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6a1a      	ldr	r2, [r3, #32]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	430a      	orrs	r2, r1
 800baba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f042 0201 	orr.w	r2, r2, #1
 800baca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2220      	movs	r2, #32
 800bad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2200      	movs	r2, #0
 800bae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800bae8:	2300      	movs	r3, #0
}
 800baea:	4618      	mov	r0, r3
 800baec:	3708      	adds	r7, #8
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	02008000 	.word	0x02008000

0800baf8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b088      	sub	sp, #32
 800bafc:	af02      	add	r7, sp, #8
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	4608      	mov	r0, r1
 800bb02:	4611      	mov	r1, r2
 800bb04:	461a      	mov	r2, r3
 800bb06:	4603      	mov	r3, r0
 800bb08:	817b      	strh	r3, [r7, #10]
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	813b      	strh	r3, [r7, #8]
 800bb0e:	4613      	mov	r3, r2
 800bb10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	2b20      	cmp	r3, #32
 800bb1c:	f040 80f9 	bne.w	800bd12 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb20:	6a3b      	ldr	r3, [r7, #32]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d002      	beq.n	800bb2c <HAL_I2C_Mem_Write+0x34>
 800bb26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d105      	bne.n	800bb38 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb32:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bb34:	2301      	movs	r3, #1
 800bb36:	e0ed      	b.n	800bd14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d101      	bne.n	800bb46 <HAL_I2C_Mem_Write+0x4e>
 800bb42:	2302      	movs	r3, #2
 800bb44:	e0e6      	b.n	800bd14 <HAL_I2C_Mem_Write+0x21c>
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2201      	movs	r2, #1
 800bb4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bb4e:	f7ff f871 	bl	800ac34 <HAL_GetTick>
 800bb52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	9300      	str	r3, [sp, #0]
 800bb58:	2319      	movs	r3, #25
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bb60:	68f8      	ldr	r0, [r7, #12]
 800bb62:	f000 fac3 	bl	800c0ec <I2C_WaitOnFlagUntilTimeout>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d001      	beq.n	800bb70 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	e0d1      	b.n	800bd14 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2221      	movs	r2, #33	; 0x21
 800bb74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2240      	movs	r2, #64	; 0x40
 800bb7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2200      	movs	r2, #0
 800bb84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	6a3a      	ldr	r2, [r7, #32]
 800bb8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bb90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2200      	movs	r2, #0
 800bb96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bb98:	88f8      	ldrh	r0, [r7, #6]
 800bb9a:	893a      	ldrh	r2, [r7, #8]
 800bb9c:	8979      	ldrh	r1, [r7, #10]
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	9301      	str	r3, [sp, #4]
 800bba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba4:	9300      	str	r3, [sp, #0]
 800bba6:	4603      	mov	r3, r0
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f000 f9d3 	bl	800bf54 <I2C_RequestMemoryWrite>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d005      	beq.n	800bbc0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e0a9      	b.n	800bd14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	2bff      	cmp	r3, #255	; 0xff
 800bbc8:	d90e      	bls.n	800bbe8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	22ff      	movs	r2, #255	; 0xff
 800bbce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbd4:	b2da      	uxtb	r2, r3
 800bbd6:	8979      	ldrh	r1, [r7, #10]
 800bbd8:	2300      	movs	r3, #0
 800bbda:	9300      	str	r3, [sp, #0]
 800bbdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f000 fc1f 	bl	800c424 <I2C_TransferConfig>
 800bbe6:	e00f      	b.n	800bc08 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbf6:	b2da      	uxtb	r2, r3
 800bbf8:	8979      	ldrh	r1, [r7, #10]
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	9300      	str	r3, [sp, #0]
 800bbfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	f000 fc0e 	bl	800c424 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc08:	697a      	ldr	r2, [r7, #20]
 800bc0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	f000 faad 	bl	800c16c <I2C_WaitOnTXISFlagUntilTimeout>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d001      	beq.n	800bc1c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e07b      	b.n	800bd14 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc20:	781a      	ldrb	r2, [r3, #0]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2c:	1c5a      	adds	r2, r3, #1
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	b29a      	uxth	r2, r3
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc44:	3b01      	subs	r3, #1
 800bc46:	b29a      	uxth	r2, r3
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d034      	beq.n	800bcc0 <HAL_I2C_Mem_Write+0x1c8>
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d130      	bne.n	800bcc0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	9300      	str	r3, [sp, #0]
 800bc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc64:	2200      	movs	r2, #0
 800bc66:	2180      	movs	r1, #128	; 0x80
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f000 fa3f 	bl	800c0ec <I2C_WaitOnFlagUntilTimeout>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d001      	beq.n	800bc78 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	e04d      	b.n	800bd14 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	2bff      	cmp	r3, #255	; 0xff
 800bc80:	d90e      	bls.n	800bca0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	22ff      	movs	r2, #255	; 0xff
 800bc86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc8c:	b2da      	uxtb	r2, r3
 800bc8e:	8979      	ldrh	r1, [r7, #10]
 800bc90:	2300      	movs	r3, #0
 800bc92:	9300      	str	r3, [sp, #0]
 800bc94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bc98:	68f8      	ldr	r0, [r7, #12]
 800bc9a:	f000 fbc3 	bl	800c424 <I2C_TransferConfig>
 800bc9e:	e00f      	b.n	800bcc0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bca4:	b29a      	uxth	r2, r3
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcae:	b2da      	uxtb	r2, r3
 800bcb0:	8979      	ldrh	r1, [r7, #10]
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	9300      	str	r3, [sp, #0]
 800bcb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f000 fbb2 	bl	800c424 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d19e      	bne.n	800bc08 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bcca:	697a      	ldr	r2, [r7, #20]
 800bccc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcce:	68f8      	ldr	r0, [r7, #12]
 800bcd0:	f000 fa8c 	bl	800c1ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d001      	beq.n	800bcde <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e01a      	b.n	800bd14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	2220      	movs	r2, #32
 800bce4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	6859      	ldr	r1, [r3, #4]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	4b0a      	ldr	r3, [pc, #40]	; (800bd1c <HAL_I2C_Mem_Write+0x224>)
 800bcf2:	400b      	ands	r3, r1
 800bcf4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2220      	movs	r2, #32
 800bcfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2200      	movs	r2, #0
 800bd02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	e000      	b.n	800bd14 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800bd12:	2302      	movs	r3, #2
  }
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3718      	adds	r7, #24
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}
 800bd1c:	fe00e800 	.word	0xfe00e800

0800bd20 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b088      	sub	sp, #32
 800bd24:	af02      	add	r7, sp, #8
 800bd26:	60f8      	str	r0, [r7, #12]
 800bd28:	4608      	mov	r0, r1
 800bd2a:	4611      	mov	r1, r2
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	4603      	mov	r3, r0
 800bd30:	817b      	strh	r3, [r7, #10]
 800bd32:	460b      	mov	r3, r1
 800bd34:	813b      	strh	r3, [r7, #8]
 800bd36:	4613      	mov	r3, r2
 800bd38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	2b20      	cmp	r3, #32
 800bd44:	f040 80fd 	bne.w	800bf42 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd48:	6a3b      	ldr	r3, [r7, #32]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d002      	beq.n	800bd54 <HAL_I2C_Mem_Read+0x34>
 800bd4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d105      	bne.n	800bd60 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd5a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	e0f1      	b.n	800bf44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d101      	bne.n	800bd6e <HAL_I2C_Mem_Read+0x4e>
 800bd6a:	2302      	movs	r3, #2
 800bd6c:	e0ea      	b.n	800bf44 <HAL_I2C_Mem_Read+0x224>
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2201      	movs	r2, #1
 800bd72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bd76:	f7fe ff5d 	bl	800ac34 <HAL_GetTick>
 800bd7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	2319      	movs	r3, #25
 800bd82:	2201      	movs	r2, #1
 800bd84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bd88:	68f8      	ldr	r0, [r7, #12]
 800bd8a:	f000 f9af 	bl	800c0ec <I2C_WaitOnFlagUntilTimeout>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d001      	beq.n	800bd98 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	e0d5      	b.n	800bf44 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2222      	movs	r2, #34	; 0x22
 800bd9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2240      	movs	r2, #64	; 0x40
 800bda4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6a3a      	ldr	r2, [r7, #32]
 800bdb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bdb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bdc0:	88f8      	ldrh	r0, [r7, #6]
 800bdc2:	893a      	ldrh	r2, [r7, #8]
 800bdc4:	8979      	ldrh	r1, [r7, #10]
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	9301      	str	r3, [sp, #4]
 800bdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdcc:	9300      	str	r3, [sp, #0]
 800bdce:	4603      	mov	r3, r0
 800bdd0:	68f8      	ldr	r0, [r7, #12]
 800bdd2:	f000 f913 	bl	800bffc <I2C_RequestMemoryRead>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d005      	beq.n	800bde8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2200      	movs	r2, #0
 800bde0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bde4:	2301      	movs	r3, #1
 800bde6:	e0ad      	b.n	800bf44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	2bff      	cmp	r3, #255	; 0xff
 800bdf0:	d90e      	bls.n	800be10 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	22ff      	movs	r2, #255	; 0xff
 800bdf6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdfc:	b2da      	uxtb	r2, r3
 800bdfe:	8979      	ldrh	r1, [r7, #10]
 800be00:	4b52      	ldr	r3, [pc, #328]	; (800bf4c <HAL_I2C_Mem_Read+0x22c>)
 800be02:	9300      	str	r3, [sp, #0]
 800be04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	f000 fb0b 	bl	800c424 <I2C_TransferConfig>
 800be0e:	e00f      	b.n	800be30 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be14:	b29a      	uxth	r2, r3
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be1e:	b2da      	uxtb	r2, r3
 800be20:	8979      	ldrh	r1, [r7, #10]
 800be22:	4b4a      	ldr	r3, [pc, #296]	; (800bf4c <HAL_I2C_Mem_Read+0x22c>)
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	f000 fafa 	bl	800c424 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	9300      	str	r3, [sp, #0]
 800be34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be36:	2200      	movs	r2, #0
 800be38:	2104      	movs	r1, #4
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f000 f956 	bl	800c0ec <I2C_WaitOnFlagUntilTimeout>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d001      	beq.n	800be4a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800be46:	2301      	movs	r3, #1
 800be48:	e07c      	b.n	800bf44 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be54:	b2d2      	uxtb	r2, r2
 800be56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5c:	1c5a      	adds	r2, r3, #1
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be66:	3b01      	subs	r3, #1
 800be68:	b29a      	uxth	r2, r3
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be72:	b29b      	uxth	r3, r3
 800be74:	3b01      	subs	r3, #1
 800be76:	b29a      	uxth	r2, r3
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be80:	b29b      	uxth	r3, r3
 800be82:	2b00      	cmp	r3, #0
 800be84:	d034      	beq.n	800bef0 <HAL_I2C_Mem_Read+0x1d0>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d130      	bne.n	800bef0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	9300      	str	r3, [sp, #0]
 800be92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be94:	2200      	movs	r2, #0
 800be96:	2180      	movs	r1, #128	; 0x80
 800be98:	68f8      	ldr	r0, [r7, #12]
 800be9a:	f000 f927 	bl	800c0ec <I2C_WaitOnFlagUntilTimeout>
 800be9e:	4603      	mov	r3, r0
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d001      	beq.n	800bea8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800bea4:	2301      	movs	r3, #1
 800bea6:	e04d      	b.n	800bf44 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800beac:	b29b      	uxth	r3, r3
 800beae:	2bff      	cmp	r3, #255	; 0xff
 800beb0:	d90e      	bls.n	800bed0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	22ff      	movs	r2, #255	; 0xff
 800beb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bebc:	b2da      	uxtb	r2, r3
 800bebe:	8979      	ldrh	r1, [r7, #10]
 800bec0:	2300      	movs	r3, #0
 800bec2:	9300      	str	r3, [sp, #0]
 800bec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bec8:	68f8      	ldr	r0, [r7, #12]
 800beca:	f000 faab 	bl	800c424 <I2C_TransferConfig>
 800bece:	e00f      	b.n	800bef0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bed4:	b29a      	uxth	r2, r3
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bede:	b2da      	uxtb	r2, r3
 800bee0:	8979      	ldrh	r1, [r7, #10]
 800bee2:	2300      	movs	r3, #0
 800bee4:	9300      	str	r3, [sp, #0]
 800bee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800beea:	68f8      	ldr	r0, [r7, #12]
 800beec:	f000 fa9a 	bl	800c424 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d19a      	bne.n	800be30 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800befa:	697a      	ldr	r2, [r7, #20]
 800befc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	f000 f974 	bl	800c1ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d001      	beq.n	800bf0e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e01a      	b.n	800bf44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2220      	movs	r2, #32
 800bf14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	6859      	ldr	r1, [r3, #4]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	4b0b      	ldr	r3, [pc, #44]	; (800bf50 <HAL_I2C_Mem_Read+0x230>)
 800bf22:	400b      	ands	r3, r1
 800bf24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2220      	movs	r2, #32
 800bf2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2200      	movs	r2, #0
 800bf32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	e000      	b.n	800bf44 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800bf42:	2302      	movs	r3, #2
  }
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3718      	adds	r7, #24
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	80002400 	.word	0x80002400
 800bf50:	fe00e800 	.word	0xfe00e800

0800bf54 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b086      	sub	sp, #24
 800bf58:	af02      	add	r7, sp, #8
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	4608      	mov	r0, r1
 800bf5e:	4611      	mov	r1, r2
 800bf60:	461a      	mov	r2, r3
 800bf62:	4603      	mov	r3, r0
 800bf64:	817b      	strh	r3, [r7, #10]
 800bf66:	460b      	mov	r3, r1
 800bf68:	813b      	strh	r3, [r7, #8]
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bf6e:	88fb      	ldrh	r3, [r7, #6]
 800bf70:	b2da      	uxtb	r2, r3
 800bf72:	8979      	ldrh	r1, [r7, #10]
 800bf74:	4b20      	ldr	r3, [pc, #128]	; (800bff8 <I2C_RequestMemoryWrite+0xa4>)
 800bf76:	9300      	str	r3, [sp, #0]
 800bf78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f000 fa51 	bl	800c424 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf82:	69fa      	ldr	r2, [r7, #28]
 800bf84:	69b9      	ldr	r1, [r7, #24]
 800bf86:	68f8      	ldr	r0, [r7, #12]
 800bf88:	f000 f8f0 	bl	800c16c <I2C_WaitOnTXISFlagUntilTimeout>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d001      	beq.n	800bf96 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800bf92:	2301      	movs	r3, #1
 800bf94:	e02c      	b.n	800bff0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bf96:	88fb      	ldrh	r3, [r7, #6]
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d105      	bne.n	800bfa8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bf9c:	893b      	ldrh	r3, [r7, #8]
 800bf9e:	b2da      	uxtb	r2, r3
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	629a      	str	r2, [r3, #40]	; 0x28
 800bfa6:	e015      	b.n	800bfd4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bfa8:	893b      	ldrh	r3, [r7, #8]
 800bfaa:	0a1b      	lsrs	r3, r3, #8
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	b2da      	uxtb	r2, r3
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfb6:	69fa      	ldr	r2, [r7, #28]
 800bfb8:	69b9      	ldr	r1, [r7, #24]
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	f000 f8d6 	bl	800c16c <I2C_WaitOnTXISFlagUntilTimeout>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d001      	beq.n	800bfca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e012      	b.n	800bff0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bfca:	893b      	ldrh	r3, [r7, #8]
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	9300      	str	r3, [sp, #0]
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	2180      	movs	r1, #128	; 0x80
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	f000 f884 	bl	800c0ec <I2C_WaitOnFlagUntilTimeout>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d001      	beq.n	800bfee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800bfea:	2301      	movs	r3, #1
 800bfec:	e000      	b.n	800bff0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800bfee:	2300      	movs	r3, #0
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3710      	adds	r7, #16
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	80002000 	.word	0x80002000

0800bffc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b086      	sub	sp, #24
 800c000:	af02      	add	r7, sp, #8
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	4608      	mov	r0, r1
 800c006:	4611      	mov	r1, r2
 800c008:	461a      	mov	r2, r3
 800c00a:	4603      	mov	r3, r0
 800c00c:	817b      	strh	r3, [r7, #10]
 800c00e:	460b      	mov	r3, r1
 800c010:	813b      	strh	r3, [r7, #8]
 800c012:	4613      	mov	r3, r2
 800c014:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c016:	88fb      	ldrh	r3, [r7, #6]
 800c018:	b2da      	uxtb	r2, r3
 800c01a:	8979      	ldrh	r1, [r7, #10]
 800c01c:	4b20      	ldr	r3, [pc, #128]	; (800c0a0 <I2C_RequestMemoryRead+0xa4>)
 800c01e:	9300      	str	r3, [sp, #0]
 800c020:	2300      	movs	r3, #0
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	f000 f9fe 	bl	800c424 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c028:	69fa      	ldr	r2, [r7, #28]
 800c02a:	69b9      	ldr	r1, [r7, #24]
 800c02c:	68f8      	ldr	r0, [r7, #12]
 800c02e:	f000 f89d 	bl	800c16c <I2C_WaitOnTXISFlagUntilTimeout>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d001      	beq.n	800c03c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800c038:	2301      	movs	r3, #1
 800c03a:	e02c      	b.n	800c096 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c03c:	88fb      	ldrh	r3, [r7, #6]
 800c03e:	2b01      	cmp	r3, #1
 800c040:	d105      	bne.n	800c04e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c042:	893b      	ldrh	r3, [r7, #8]
 800c044:	b2da      	uxtb	r2, r3
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	629a      	str	r2, [r3, #40]	; 0x28
 800c04c:	e015      	b.n	800c07a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c04e:	893b      	ldrh	r3, [r7, #8]
 800c050:	0a1b      	lsrs	r3, r3, #8
 800c052:	b29b      	uxth	r3, r3
 800c054:	b2da      	uxtb	r2, r3
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c05c:	69fa      	ldr	r2, [r7, #28]
 800c05e:	69b9      	ldr	r1, [r7, #24]
 800c060:	68f8      	ldr	r0, [r7, #12]
 800c062:	f000 f883 	bl	800c16c <I2C_WaitOnTXISFlagUntilTimeout>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d001      	beq.n	800c070 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c06c:	2301      	movs	r3, #1
 800c06e:	e012      	b.n	800c096 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c070:	893b      	ldrh	r3, [r7, #8]
 800c072:	b2da      	uxtb	r2, r3
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c07a:	69fb      	ldr	r3, [r7, #28]
 800c07c:	9300      	str	r3, [sp, #0]
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	2200      	movs	r2, #0
 800c082:	2140      	movs	r1, #64	; 0x40
 800c084:	68f8      	ldr	r0, [r7, #12]
 800c086:	f000 f831 	bl	800c0ec <I2C_WaitOnFlagUntilTimeout>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d001      	beq.n	800c094 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c090:	2301      	movs	r3, #1
 800c092:	e000      	b.n	800c096 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	3710      	adds	r7, #16
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	80002000 	.word	0x80002000

0800c0a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	699b      	ldr	r3, [r3, #24]
 800c0b2:	f003 0302 	and.w	r3, r3, #2
 800c0b6:	2b02      	cmp	r3, #2
 800c0b8:	d103      	bne.n	800c0c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	699b      	ldr	r3, [r3, #24]
 800c0c8:	f003 0301 	and.w	r3, r3, #1
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d007      	beq.n	800c0e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	699a      	ldr	r2, [r3, #24]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f042 0201 	orr.w	r2, r2, #1
 800c0de:	619a      	str	r2, [r3, #24]
  }
}
 800c0e0:	bf00      	nop
 800c0e2:	370c      	adds	r7, #12
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr

0800c0ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	60f8      	str	r0, [r7, #12]
 800c0f4:	60b9      	str	r1, [r7, #8]
 800c0f6:	603b      	str	r3, [r7, #0]
 800c0f8:	4613      	mov	r3, r2
 800c0fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0fc:	e022      	b.n	800c144 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c104:	d01e      	beq.n	800c144 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c106:	f7fe fd95 	bl	800ac34 <HAL_GetTick>
 800c10a:	4602      	mov	r2, r0
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	1ad3      	subs	r3, r2, r3
 800c110:	683a      	ldr	r2, [r7, #0]
 800c112:	429a      	cmp	r2, r3
 800c114:	d302      	bcc.n	800c11c <I2C_WaitOnFlagUntilTimeout+0x30>
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d113      	bne.n	800c144 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c120:	f043 0220 	orr.w	r2, r3, #32
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2220      	movs	r2, #32
 800c12c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2200      	movs	r2, #0
 800c134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2200      	movs	r2, #0
 800c13c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800c140:	2301      	movs	r3, #1
 800c142:	e00f      	b.n	800c164 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	699a      	ldr	r2, [r3, #24]
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	4013      	ands	r3, r2
 800c14e:	68ba      	ldr	r2, [r7, #8]
 800c150:	429a      	cmp	r2, r3
 800c152:	bf0c      	ite	eq
 800c154:	2301      	moveq	r3, #1
 800c156:	2300      	movne	r3, #0
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	461a      	mov	r2, r3
 800c15c:	79fb      	ldrb	r3, [r7, #7]
 800c15e:	429a      	cmp	r2, r3
 800c160:	d0cd      	beq.n	800c0fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	3710      	adds	r7, #16
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c178:	e02c      	b.n	800c1d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	68b9      	ldr	r1, [r7, #8]
 800c17e:	68f8      	ldr	r0, [r7, #12]
 800c180:	f000 f870 	bl	800c264 <I2C_IsErrorOccurred>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d001      	beq.n	800c18e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c18a:	2301      	movs	r3, #1
 800c18c:	e02a      	b.n	800c1e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c194:	d01e      	beq.n	800c1d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c196:	f7fe fd4d 	bl	800ac34 <HAL_GetTick>
 800c19a:	4602      	mov	r2, r0
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	1ad3      	subs	r3, r2, r3
 800c1a0:	68ba      	ldr	r2, [r7, #8]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d302      	bcc.n	800c1ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d113      	bne.n	800c1d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1b0:	f043 0220 	orr.w	r2, r3, #32
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2220      	movs	r2, #32
 800c1bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	e007      	b.n	800c1e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	699b      	ldr	r3, [r3, #24]
 800c1da:	f003 0302 	and.w	r3, r3, #2
 800c1de:	2b02      	cmp	r3, #2
 800c1e0:	d1cb      	bne.n	800c17a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c1e2:	2300      	movs	r3, #0
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3710      	adds	r7, #16
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b084      	sub	sp, #16
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c1f8:	e028      	b.n	800c24c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	68b9      	ldr	r1, [r7, #8]
 800c1fe:	68f8      	ldr	r0, [r7, #12]
 800c200:	f000 f830 	bl	800c264 <I2C_IsErrorOccurred>
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d001      	beq.n	800c20e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c20a:	2301      	movs	r3, #1
 800c20c:	e026      	b.n	800c25c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c20e:	f7fe fd11 	bl	800ac34 <HAL_GetTick>
 800c212:	4602      	mov	r2, r0
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	1ad3      	subs	r3, r2, r3
 800c218:	68ba      	ldr	r2, [r7, #8]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d302      	bcc.n	800c224 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d113      	bne.n	800c24c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c228:	f043 0220 	orr.w	r2, r3, #32
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2220      	movs	r2, #32
 800c234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2200      	movs	r2, #0
 800c244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c248:	2301      	movs	r3, #1
 800c24a:	e007      	b.n	800c25c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	699b      	ldr	r3, [r3, #24]
 800c252:	f003 0320 	and.w	r3, r3, #32
 800c256:	2b20      	cmp	r3, #32
 800c258:	d1cf      	bne.n	800c1fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c25a:	2300      	movs	r3, #0
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b08a      	sub	sp, #40	; 0x28
 800c268:	af00      	add	r7, sp, #0
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c270:	2300      	movs	r3, #0
 800c272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	699b      	ldr	r3, [r3, #24]
 800c27c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c27e:	2300      	movs	r3, #0
 800c280:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	f003 0310 	and.w	r3, r3, #16
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d068      	beq.n	800c362 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	2210      	movs	r2, #16
 800c296:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c298:	e049      	b.n	800c32e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2a0:	d045      	beq.n	800c32e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c2a2:	f7fe fcc7 	bl	800ac34 <HAL_GetTick>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	1ad3      	subs	r3, r2, r3
 800c2ac:	68ba      	ldr	r2, [r7, #8]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d302      	bcc.n	800c2b8 <I2C_IsErrorOccurred+0x54>
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d13a      	bne.n	800c32e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c2ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	699b      	ldr	r3, [r3, #24]
 800c2d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c2d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2da:	d121      	bne.n	800c320 <I2C_IsErrorOccurred+0xbc>
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2e2:	d01d      	beq.n	800c320 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800c2e4:	7cfb      	ldrb	r3, [r7, #19]
 800c2e6:	2b20      	cmp	r3, #32
 800c2e8:	d01a      	beq.n	800c320 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	685a      	ldr	r2, [r3, #4]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c2f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c2fa:	f7fe fc9b 	bl	800ac34 <HAL_GetTick>
 800c2fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c300:	e00e      	b.n	800c320 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c302:	f7fe fc97 	bl	800ac34 <HAL_GetTick>
 800c306:	4602      	mov	r2, r0
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	1ad3      	subs	r3, r2, r3
 800c30c:	2b19      	cmp	r3, #25
 800c30e:	d907      	bls.n	800c320 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800c310:	6a3b      	ldr	r3, [r7, #32]
 800c312:	f043 0320 	orr.w	r3, r3, #32
 800c316:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800c318:	2301      	movs	r3, #1
 800c31a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800c31e:	e006      	b.n	800c32e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	699b      	ldr	r3, [r3, #24]
 800c326:	f003 0320 	and.w	r3, r3, #32
 800c32a:	2b20      	cmp	r3, #32
 800c32c:	d1e9      	bne.n	800c302 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	699b      	ldr	r3, [r3, #24]
 800c334:	f003 0320 	and.w	r3, r3, #32
 800c338:	2b20      	cmp	r3, #32
 800c33a:	d003      	beq.n	800c344 <I2C_IsErrorOccurred+0xe0>
 800c33c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c340:	2b00      	cmp	r3, #0
 800c342:	d0aa      	beq.n	800c29a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d103      	bne.n	800c354 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2220      	movs	r2, #32
 800c352:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c354:	6a3b      	ldr	r3, [r7, #32]
 800c356:	f043 0304 	orr.w	r3, r3, #4
 800c35a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c35c:	2301      	movs	r3, #1
 800c35e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	699b      	ldr	r3, [r3, #24]
 800c368:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c370:	2b00      	cmp	r3, #0
 800c372:	d00b      	beq.n	800c38c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c374:	6a3b      	ldr	r3, [r7, #32]
 800c376:	f043 0301 	orr.w	r3, r3, #1
 800c37a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c384:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c38c:	69bb      	ldr	r3, [r7, #24]
 800c38e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00b      	beq.n	800c3ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c396:	6a3b      	ldr	r3, [r7, #32]
 800c398:	f043 0308 	orr.w	r3, r3, #8
 800c39c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c3a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d00b      	beq.n	800c3d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c3b8:	6a3b      	ldr	r3, [r7, #32]
 800c3ba:	f043 0302 	orr.w	r3, r3, #2
 800c3be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800c3d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d01c      	beq.n	800c412 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c3d8:	68f8      	ldr	r0, [r7, #12]
 800c3da:	f7ff fe63 	bl	800c0a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	6859      	ldr	r1, [r3, #4]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	4b0d      	ldr	r3, [pc, #52]	; (800c420 <I2C_IsErrorOccurred+0x1bc>)
 800c3ea:	400b      	ands	r3, r1
 800c3ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3f2:	6a3b      	ldr	r3, [r7, #32]
 800c3f4:	431a      	orrs	r2, r3
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2220      	movs	r2, #32
 800c3fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2200      	movs	r2, #0
 800c406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2200      	movs	r2, #0
 800c40e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800c412:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c416:	4618      	mov	r0, r3
 800c418:	3728      	adds	r7, #40	; 0x28
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	fe00e800 	.word	0xfe00e800

0800c424 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c424:	b480      	push	{r7}
 800c426:	b087      	sub	sp, #28
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	607b      	str	r3, [r7, #4]
 800c42e:	460b      	mov	r3, r1
 800c430:	817b      	strh	r3, [r7, #10]
 800c432:	4613      	mov	r3, r2
 800c434:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c436:	897b      	ldrh	r3, [r7, #10]
 800c438:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c43c:	7a7b      	ldrb	r3, [r7, #9]
 800c43e:	041b      	lsls	r3, r3, #16
 800c440:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c444:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c44a:	6a3b      	ldr	r3, [r7, #32]
 800c44c:	4313      	orrs	r3, r2
 800c44e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c452:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	685a      	ldr	r2, [r3, #4]
 800c45a:	6a3b      	ldr	r3, [r7, #32]
 800c45c:	0d5b      	lsrs	r3, r3, #21
 800c45e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c462:	4b08      	ldr	r3, [pc, #32]	; (800c484 <I2C_TransferConfig+0x60>)
 800c464:	430b      	orrs	r3, r1
 800c466:	43db      	mvns	r3, r3
 800c468:	ea02 0103 	and.w	r1, r2, r3
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	697a      	ldr	r2, [r7, #20]
 800c472:	430a      	orrs	r2, r1
 800c474:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c476:	bf00      	nop
 800c478:	371c      	adds	r7, #28
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	03ff63ff 	.word	0x03ff63ff

0800c488 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	2b20      	cmp	r3, #32
 800c49c:	d138      	bne.n	800c510 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d101      	bne.n	800c4ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c4a8:	2302      	movs	r3, #2
 800c4aa:	e032      	b.n	800c512 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2224      	movs	r2, #36	; 0x24
 800c4b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	681a      	ldr	r2, [r3, #0]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f022 0201 	bic.w	r2, r2, #1
 800c4ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	681a      	ldr	r2, [r3, #0]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c4da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	6819      	ldr	r1, [r3, #0]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	683a      	ldr	r2, [r7, #0]
 800c4e8:	430a      	orrs	r2, r1
 800c4ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f042 0201 	orr.w	r2, r2, #1
 800c4fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2220      	movs	r2, #32
 800c500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c50c:	2300      	movs	r3, #0
 800c50e:	e000      	b.n	800c512 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c510:	2302      	movs	r3, #2
  }
}
 800c512:	4618      	mov	r0, r3
 800c514:	370c      	adds	r7, #12
 800c516:	46bd      	mov	sp, r7
 800c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51c:	4770      	bx	lr

0800c51e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c51e:	b480      	push	{r7}
 800c520:	b085      	sub	sp, #20
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
 800c526:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	2b20      	cmp	r3, #32
 800c532:	d139      	bne.n	800c5a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d101      	bne.n	800c542 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c53e:	2302      	movs	r3, #2
 800c540:	e033      	b.n	800c5aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2201      	movs	r2, #1
 800c546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2224      	movs	r2, #36	; 0x24
 800c54e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f022 0201 	bic.w	r2, r2, #1
 800c560:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c570:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	021b      	lsls	r3, r3, #8
 800c576:	68fa      	ldr	r2, [r7, #12]
 800c578:	4313      	orrs	r3, r2
 800c57a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	68fa      	ldr	r2, [r7, #12]
 800c582:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f042 0201 	orr.w	r2, r2, #1
 800c592:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2220      	movs	r2, #32
 800c598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	e000      	b.n	800c5aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c5a8:	2302      	movs	r3, #2
  }
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3714      	adds	r7, #20
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr
	...

0800c5b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c5c2:	4b23      	ldr	r3, [pc, #140]	; (800c650 <HAL_PWREx_EnableOverDrive+0x98>)
 800c5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5c6:	4a22      	ldr	r2, [pc, #136]	; (800c650 <HAL_PWREx_EnableOverDrive+0x98>)
 800c5c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5cc:	6413      	str	r3, [r2, #64]	; 0x40
 800c5ce:	4b20      	ldr	r3, [pc, #128]	; (800c650 <HAL_PWREx_EnableOverDrive+0x98>)
 800c5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5d6:	603b      	str	r3, [r7, #0]
 800c5d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c5da:	4b1e      	ldr	r3, [pc, #120]	; (800c654 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4a1d      	ldr	r2, [pc, #116]	; (800c654 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c5e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c5e6:	f7fe fb25 	bl	800ac34 <HAL_GetTick>
 800c5ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c5ec:	e009      	b.n	800c602 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c5ee:	f7fe fb21 	bl	800ac34 <HAL_GetTick>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	1ad3      	subs	r3, r2, r3
 800c5f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c5fc:	d901      	bls.n	800c602 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800c5fe:	2303      	movs	r3, #3
 800c600:	e022      	b.n	800c648 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c602:	4b14      	ldr	r3, [pc, #80]	; (800c654 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c604:	685b      	ldr	r3, [r3, #4]
 800c606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c60a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c60e:	d1ee      	bne.n	800c5ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c610:	4b10      	ldr	r3, [pc, #64]	; (800c654 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	4a0f      	ldr	r2, [pc, #60]	; (800c654 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c61a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c61c:	f7fe fb0a 	bl	800ac34 <HAL_GetTick>
 800c620:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c622:	e009      	b.n	800c638 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c624:	f7fe fb06 	bl	800ac34 <HAL_GetTick>
 800c628:	4602      	mov	r2, r0
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	1ad3      	subs	r3, r2, r3
 800c62e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c632:	d901      	bls.n	800c638 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800c634:	2303      	movs	r3, #3
 800c636:	e007      	b.n	800c648 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c638:	4b06      	ldr	r3, [pc, #24]	; (800c654 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c640:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c644:	d1ee      	bne.n	800c624 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800c646:	2300      	movs	r3, #0
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3708      	adds	r7, #8
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	40023800 	.word	0x40023800
 800c654:	40007000 	.word	0x40007000

0800c658 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b086      	sub	sp, #24
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c660:	2300      	movs	r3, #0
 800c662:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d101      	bne.n	800c66e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c66a:	2301      	movs	r3, #1
 800c66c:	e291      	b.n	800cb92 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f003 0301 	and.w	r3, r3, #1
 800c676:	2b00      	cmp	r3, #0
 800c678:	f000 8087 	beq.w	800c78a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c67c:	4b96      	ldr	r3, [pc, #600]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	f003 030c 	and.w	r3, r3, #12
 800c684:	2b04      	cmp	r3, #4
 800c686:	d00c      	beq.n	800c6a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c688:	4b93      	ldr	r3, [pc, #588]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c68a:	689b      	ldr	r3, [r3, #8]
 800c68c:	f003 030c 	and.w	r3, r3, #12
 800c690:	2b08      	cmp	r3, #8
 800c692:	d112      	bne.n	800c6ba <HAL_RCC_OscConfig+0x62>
 800c694:	4b90      	ldr	r3, [pc, #576]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c69c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6a0:	d10b      	bne.n	800c6ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c6a2:	4b8d      	ldr	r3, [pc, #564]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d06c      	beq.n	800c788 <HAL_RCC_OscConfig+0x130>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d168      	bne.n	800c788 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	e26b      	b.n	800cb92 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6c2:	d106      	bne.n	800c6d2 <HAL_RCC_OscConfig+0x7a>
 800c6c4:	4b84      	ldr	r3, [pc, #528]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a83      	ldr	r2, [pc, #524]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c6ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c6ce:	6013      	str	r3, [r2, #0]
 800c6d0:	e02e      	b.n	800c730 <HAL_RCC_OscConfig+0xd8>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d10c      	bne.n	800c6f4 <HAL_RCC_OscConfig+0x9c>
 800c6da:	4b7f      	ldr	r3, [pc, #508]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4a7e      	ldr	r2, [pc, #504]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c6e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c6e4:	6013      	str	r3, [r2, #0]
 800c6e6:	4b7c      	ldr	r3, [pc, #496]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a7b      	ldr	r2, [pc, #492]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c6ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c6f0:	6013      	str	r3, [r2, #0]
 800c6f2:	e01d      	b.n	800c730 <HAL_RCC_OscConfig+0xd8>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c6fc:	d10c      	bne.n	800c718 <HAL_RCC_OscConfig+0xc0>
 800c6fe:	4b76      	ldr	r3, [pc, #472]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a75      	ldr	r2, [pc, #468]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c708:	6013      	str	r3, [r2, #0]
 800c70a:	4b73      	ldr	r3, [pc, #460]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a72      	ldr	r2, [pc, #456]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c714:	6013      	str	r3, [r2, #0]
 800c716:	e00b      	b.n	800c730 <HAL_RCC_OscConfig+0xd8>
 800c718:	4b6f      	ldr	r3, [pc, #444]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a6e      	ldr	r2, [pc, #440]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c71e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c722:	6013      	str	r3, [r2, #0]
 800c724:	4b6c      	ldr	r3, [pc, #432]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a6b      	ldr	r2, [pc, #428]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c72a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c72e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d013      	beq.n	800c760 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c738:	f7fe fa7c 	bl	800ac34 <HAL_GetTick>
 800c73c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c73e:	e008      	b.n	800c752 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c740:	f7fe fa78 	bl	800ac34 <HAL_GetTick>
 800c744:	4602      	mov	r2, r0
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	1ad3      	subs	r3, r2, r3
 800c74a:	2b64      	cmp	r3, #100	; 0x64
 800c74c:	d901      	bls.n	800c752 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c74e:	2303      	movs	r3, #3
 800c750:	e21f      	b.n	800cb92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c752:	4b61      	ldr	r3, [pc, #388]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d0f0      	beq.n	800c740 <HAL_RCC_OscConfig+0xe8>
 800c75e:	e014      	b.n	800c78a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c760:	f7fe fa68 	bl	800ac34 <HAL_GetTick>
 800c764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c766:	e008      	b.n	800c77a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c768:	f7fe fa64 	bl	800ac34 <HAL_GetTick>
 800c76c:	4602      	mov	r2, r0
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	2b64      	cmp	r3, #100	; 0x64
 800c774:	d901      	bls.n	800c77a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c776:	2303      	movs	r3, #3
 800c778:	e20b      	b.n	800cb92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c77a:	4b57      	ldr	r3, [pc, #348]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c782:	2b00      	cmp	r3, #0
 800c784:	d1f0      	bne.n	800c768 <HAL_RCC_OscConfig+0x110>
 800c786:	e000      	b.n	800c78a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f003 0302 	and.w	r3, r3, #2
 800c792:	2b00      	cmp	r3, #0
 800c794:	d069      	beq.n	800c86a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c796:	4b50      	ldr	r3, [pc, #320]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	f003 030c 	and.w	r3, r3, #12
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00b      	beq.n	800c7ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c7a2:	4b4d      	ldr	r3, [pc, #308]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	f003 030c 	and.w	r3, r3, #12
 800c7aa:	2b08      	cmp	r3, #8
 800c7ac:	d11c      	bne.n	800c7e8 <HAL_RCC_OscConfig+0x190>
 800c7ae:	4b4a      	ldr	r3, [pc, #296]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d116      	bne.n	800c7e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c7ba:	4b47      	ldr	r3, [pc, #284]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f003 0302 	and.w	r3, r3, #2
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d005      	beq.n	800c7d2 <HAL_RCC_OscConfig+0x17a>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d001      	beq.n	800c7d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	e1df      	b.n	800cb92 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c7d2:	4b41      	ldr	r3, [pc, #260]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	691b      	ldr	r3, [r3, #16]
 800c7de:	00db      	lsls	r3, r3, #3
 800c7e0:	493d      	ldr	r1, [pc, #244]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c7e6:	e040      	b.n	800c86a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	68db      	ldr	r3, [r3, #12]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d023      	beq.n	800c838 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c7f0:	4b39      	ldr	r3, [pc, #228]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a38      	ldr	r2, [pc, #224]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c7f6:	f043 0301 	orr.w	r3, r3, #1
 800c7fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7fc:	f7fe fa1a 	bl	800ac34 <HAL_GetTick>
 800c800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c802:	e008      	b.n	800c816 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c804:	f7fe fa16 	bl	800ac34 <HAL_GetTick>
 800c808:	4602      	mov	r2, r0
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	1ad3      	subs	r3, r2, r3
 800c80e:	2b02      	cmp	r3, #2
 800c810:	d901      	bls.n	800c816 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c812:	2303      	movs	r3, #3
 800c814:	e1bd      	b.n	800cb92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c816:	4b30      	ldr	r3, [pc, #192]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f003 0302 	and.w	r3, r3, #2
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d0f0      	beq.n	800c804 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c822:	4b2d      	ldr	r3, [pc, #180]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	691b      	ldr	r3, [r3, #16]
 800c82e:	00db      	lsls	r3, r3, #3
 800c830:	4929      	ldr	r1, [pc, #164]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c832:	4313      	orrs	r3, r2
 800c834:	600b      	str	r3, [r1, #0]
 800c836:	e018      	b.n	800c86a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c838:	4b27      	ldr	r3, [pc, #156]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a26      	ldr	r2, [pc, #152]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c83e:	f023 0301 	bic.w	r3, r3, #1
 800c842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c844:	f7fe f9f6 	bl	800ac34 <HAL_GetTick>
 800c848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c84a:	e008      	b.n	800c85e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c84c:	f7fe f9f2 	bl	800ac34 <HAL_GetTick>
 800c850:	4602      	mov	r2, r0
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	1ad3      	subs	r3, r2, r3
 800c856:	2b02      	cmp	r3, #2
 800c858:	d901      	bls.n	800c85e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c85a:	2303      	movs	r3, #3
 800c85c:	e199      	b.n	800cb92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c85e:	4b1e      	ldr	r3, [pc, #120]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f003 0302 	and.w	r3, r3, #2
 800c866:	2b00      	cmp	r3, #0
 800c868:	d1f0      	bne.n	800c84c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f003 0308 	and.w	r3, r3, #8
 800c872:	2b00      	cmp	r3, #0
 800c874:	d038      	beq.n	800c8e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	695b      	ldr	r3, [r3, #20]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d019      	beq.n	800c8b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c87e:	4b16      	ldr	r3, [pc, #88]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c882:	4a15      	ldr	r2, [pc, #84]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c884:	f043 0301 	orr.w	r3, r3, #1
 800c888:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c88a:	f7fe f9d3 	bl	800ac34 <HAL_GetTick>
 800c88e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c890:	e008      	b.n	800c8a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c892:	f7fe f9cf 	bl	800ac34 <HAL_GetTick>
 800c896:	4602      	mov	r2, r0
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	1ad3      	subs	r3, r2, r3
 800c89c:	2b02      	cmp	r3, #2
 800c89e:	d901      	bls.n	800c8a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c8a0:	2303      	movs	r3, #3
 800c8a2:	e176      	b.n	800cb92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c8a4:	4b0c      	ldr	r3, [pc, #48]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c8a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8a8:	f003 0302 	and.w	r3, r3, #2
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d0f0      	beq.n	800c892 <HAL_RCC_OscConfig+0x23a>
 800c8b0:	e01a      	b.n	800c8e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c8b2:	4b09      	ldr	r3, [pc, #36]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c8b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8b6:	4a08      	ldr	r2, [pc, #32]	; (800c8d8 <HAL_RCC_OscConfig+0x280>)
 800c8b8:	f023 0301 	bic.w	r3, r3, #1
 800c8bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8be:	f7fe f9b9 	bl	800ac34 <HAL_GetTick>
 800c8c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c8c4:	e00a      	b.n	800c8dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c8c6:	f7fe f9b5 	bl	800ac34 <HAL_GetTick>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	d903      	bls.n	800c8dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c8d4:	2303      	movs	r3, #3
 800c8d6:	e15c      	b.n	800cb92 <HAL_RCC_OscConfig+0x53a>
 800c8d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c8dc:	4b91      	ldr	r3, [pc, #580]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800c8de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8e0:	f003 0302 	and.w	r3, r3, #2
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d1ee      	bne.n	800c8c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f003 0304 	and.w	r3, r3, #4
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	f000 80a4 	beq.w	800ca3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c8f6:	4b8b      	ldr	r3, [pc, #556]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800c8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d10d      	bne.n	800c91e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c902:	4b88      	ldr	r3, [pc, #544]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800c904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c906:	4a87      	ldr	r2, [pc, #540]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800c908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c90c:	6413      	str	r3, [r2, #64]	; 0x40
 800c90e:	4b85      	ldr	r3, [pc, #532]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800c910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c916:	60bb      	str	r3, [r7, #8]
 800c918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c91a:	2301      	movs	r3, #1
 800c91c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c91e:	4b82      	ldr	r3, [pc, #520]	; (800cb28 <HAL_RCC_OscConfig+0x4d0>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c926:	2b00      	cmp	r3, #0
 800c928:	d118      	bne.n	800c95c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c92a:	4b7f      	ldr	r3, [pc, #508]	; (800cb28 <HAL_RCC_OscConfig+0x4d0>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4a7e      	ldr	r2, [pc, #504]	; (800cb28 <HAL_RCC_OscConfig+0x4d0>)
 800c930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c936:	f7fe f97d 	bl	800ac34 <HAL_GetTick>
 800c93a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c93c:	e008      	b.n	800c950 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c93e:	f7fe f979 	bl	800ac34 <HAL_GetTick>
 800c942:	4602      	mov	r2, r0
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	1ad3      	subs	r3, r2, r3
 800c948:	2b64      	cmp	r3, #100	; 0x64
 800c94a:	d901      	bls.n	800c950 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c94c:	2303      	movs	r3, #3
 800c94e:	e120      	b.n	800cb92 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c950:	4b75      	ldr	r3, [pc, #468]	; (800cb28 <HAL_RCC_OscConfig+0x4d0>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d0f0      	beq.n	800c93e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	2b01      	cmp	r3, #1
 800c962:	d106      	bne.n	800c972 <HAL_RCC_OscConfig+0x31a>
 800c964:	4b6f      	ldr	r3, [pc, #444]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800c966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c968:	4a6e      	ldr	r2, [pc, #440]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800c96a:	f043 0301 	orr.w	r3, r3, #1
 800c96e:	6713      	str	r3, [r2, #112]	; 0x70
 800c970:	e02d      	b.n	800c9ce <HAL_RCC_OscConfig+0x376>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	689b      	ldr	r3, [r3, #8]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d10c      	bne.n	800c994 <HAL_RCC_OscConfig+0x33c>
 800c97a:	4b6a      	ldr	r3, [pc, #424]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800c97c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c97e:	4a69      	ldr	r2, [pc, #420]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800c980:	f023 0301 	bic.w	r3, r3, #1
 800c984:	6713      	str	r3, [r2, #112]	; 0x70
 800c986:	4b67      	ldr	r3, [pc, #412]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800c988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c98a:	4a66      	ldr	r2, [pc, #408]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800c98c:	f023 0304 	bic.w	r3, r3, #4
 800c990:	6713      	str	r3, [r2, #112]	; 0x70
 800c992:	e01c      	b.n	800c9ce <HAL_RCC_OscConfig+0x376>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	689b      	ldr	r3, [r3, #8]
 800c998:	2b05      	cmp	r3, #5
 800c99a:	d10c      	bne.n	800c9b6 <HAL_RCC_OscConfig+0x35e>
 800c99c:	4b61      	ldr	r3, [pc, #388]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800c99e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9a0:	4a60      	ldr	r2, [pc, #384]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800c9a2:	f043 0304 	orr.w	r3, r3, #4
 800c9a6:	6713      	str	r3, [r2, #112]	; 0x70
 800c9a8:	4b5e      	ldr	r3, [pc, #376]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800c9aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9ac:	4a5d      	ldr	r2, [pc, #372]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800c9ae:	f043 0301 	orr.w	r3, r3, #1
 800c9b2:	6713      	str	r3, [r2, #112]	; 0x70
 800c9b4:	e00b      	b.n	800c9ce <HAL_RCC_OscConfig+0x376>
 800c9b6:	4b5b      	ldr	r3, [pc, #364]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800c9b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9ba:	4a5a      	ldr	r2, [pc, #360]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800c9bc:	f023 0301 	bic.w	r3, r3, #1
 800c9c0:	6713      	str	r3, [r2, #112]	; 0x70
 800c9c2:	4b58      	ldr	r3, [pc, #352]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800c9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9c6:	4a57      	ldr	r2, [pc, #348]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800c9c8:	f023 0304 	bic.w	r3, r3, #4
 800c9cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	689b      	ldr	r3, [r3, #8]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d015      	beq.n	800ca02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9d6:	f7fe f92d 	bl	800ac34 <HAL_GetTick>
 800c9da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9dc:	e00a      	b.n	800c9f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c9de:	f7fe f929 	bl	800ac34 <HAL_GetTick>
 800c9e2:	4602      	mov	r2, r0
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	1ad3      	subs	r3, r2, r3
 800c9e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d901      	bls.n	800c9f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c9f0:	2303      	movs	r3, #3
 800c9f2:	e0ce      	b.n	800cb92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9f4:	4b4b      	ldr	r3, [pc, #300]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800c9f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9f8:	f003 0302 	and.w	r3, r3, #2
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d0ee      	beq.n	800c9de <HAL_RCC_OscConfig+0x386>
 800ca00:	e014      	b.n	800ca2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca02:	f7fe f917 	bl	800ac34 <HAL_GetTick>
 800ca06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ca08:	e00a      	b.n	800ca20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ca0a:	f7fe f913 	bl	800ac34 <HAL_GetTick>
 800ca0e:	4602      	mov	r2, r0
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	1ad3      	subs	r3, r2, r3
 800ca14:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d901      	bls.n	800ca20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800ca1c:	2303      	movs	r3, #3
 800ca1e:	e0b8      	b.n	800cb92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ca20:	4b40      	ldr	r3, [pc, #256]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800ca22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca24:	f003 0302 	and.w	r3, r3, #2
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d1ee      	bne.n	800ca0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ca2c:	7dfb      	ldrb	r3, [r7, #23]
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d105      	bne.n	800ca3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ca32:	4b3c      	ldr	r3, [pc, #240]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800ca34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca36:	4a3b      	ldr	r2, [pc, #236]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800ca38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	699b      	ldr	r3, [r3, #24]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	f000 80a4 	beq.w	800cb90 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ca48:	4b36      	ldr	r3, [pc, #216]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800ca4a:	689b      	ldr	r3, [r3, #8]
 800ca4c:	f003 030c 	and.w	r3, r3, #12
 800ca50:	2b08      	cmp	r3, #8
 800ca52:	d06b      	beq.n	800cb2c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	699b      	ldr	r3, [r3, #24]
 800ca58:	2b02      	cmp	r3, #2
 800ca5a:	d149      	bne.n	800caf0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca5c:	4b31      	ldr	r3, [pc, #196]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4a30      	ldr	r2, [pc, #192]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800ca62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ca66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca68:	f7fe f8e4 	bl	800ac34 <HAL_GetTick>
 800ca6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca6e:	e008      	b.n	800ca82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca70:	f7fe f8e0 	bl	800ac34 <HAL_GetTick>
 800ca74:	4602      	mov	r2, r0
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	1ad3      	subs	r3, r2, r3
 800ca7a:	2b02      	cmp	r3, #2
 800ca7c:	d901      	bls.n	800ca82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800ca7e:	2303      	movs	r3, #3
 800ca80:	e087      	b.n	800cb92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca82:	4b28      	ldr	r3, [pc, #160]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d1f0      	bne.n	800ca70 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	69da      	ldr	r2, [r3, #28]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6a1b      	ldr	r3, [r3, #32]
 800ca96:	431a      	orrs	r2, r3
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca9c:	019b      	lsls	r3, r3, #6
 800ca9e:	431a      	orrs	r2, r3
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caa4:	085b      	lsrs	r3, r3, #1
 800caa6:	3b01      	subs	r3, #1
 800caa8:	041b      	lsls	r3, r3, #16
 800caaa:	431a      	orrs	r2, r3
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab0:	061b      	lsls	r3, r3, #24
 800cab2:	4313      	orrs	r3, r2
 800cab4:	4a1b      	ldr	r2, [pc, #108]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800cab6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800caba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cabc:	4b19      	ldr	r3, [pc, #100]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a18      	ldr	r2, [pc, #96]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800cac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cac8:	f7fe f8b4 	bl	800ac34 <HAL_GetTick>
 800cacc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cace:	e008      	b.n	800cae2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cad0:	f7fe f8b0 	bl	800ac34 <HAL_GetTick>
 800cad4:	4602      	mov	r2, r0
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	1ad3      	subs	r3, r2, r3
 800cada:	2b02      	cmp	r3, #2
 800cadc:	d901      	bls.n	800cae2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800cade:	2303      	movs	r3, #3
 800cae0:	e057      	b.n	800cb92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cae2:	4b10      	ldr	r3, [pc, #64]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800caea:	2b00      	cmp	r3, #0
 800caec:	d0f0      	beq.n	800cad0 <HAL_RCC_OscConfig+0x478>
 800caee:	e04f      	b.n	800cb90 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800caf0:	4b0c      	ldr	r3, [pc, #48]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4a0b      	ldr	r2, [pc, #44]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800caf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cafa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cafc:	f7fe f89a 	bl	800ac34 <HAL_GetTick>
 800cb00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb02:	e008      	b.n	800cb16 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb04:	f7fe f896 	bl	800ac34 <HAL_GetTick>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	1ad3      	subs	r3, r2, r3
 800cb0e:	2b02      	cmp	r3, #2
 800cb10:	d901      	bls.n	800cb16 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800cb12:	2303      	movs	r3, #3
 800cb14:	e03d      	b.n	800cb92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb16:	4b03      	ldr	r3, [pc, #12]	; (800cb24 <HAL_RCC_OscConfig+0x4cc>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d1f0      	bne.n	800cb04 <HAL_RCC_OscConfig+0x4ac>
 800cb22:	e035      	b.n	800cb90 <HAL_RCC_OscConfig+0x538>
 800cb24:	40023800 	.word	0x40023800
 800cb28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800cb2c:	4b1b      	ldr	r3, [pc, #108]	; (800cb9c <HAL_RCC_OscConfig+0x544>)
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	699b      	ldr	r3, [r3, #24]
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d028      	beq.n	800cb8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d121      	bne.n	800cb8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d11a      	bne.n	800cb8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800cb56:	68fa      	ldr	r2, [r7, #12]
 800cb58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cb5c:	4013      	ands	r3, r2
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cb62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d111      	bne.n	800cb8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb72:	085b      	lsrs	r3, r3, #1
 800cb74:	3b01      	subs	r3, #1
 800cb76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d107      	bne.n	800cb8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d001      	beq.n	800cb90 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	e000      	b.n	800cb92 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800cb90:	2300      	movs	r3, #0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3718      	adds	r7, #24
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	40023800 	.word	0x40023800

0800cba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d101      	bne.n	800cbb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	e0d0      	b.n	800cd5a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cbb8:	4b6a      	ldr	r3, [pc, #424]	; (800cd64 <HAL_RCC_ClockConfig+0x1c4>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f003 030f 	and.w	r3, r3, #15
 800cbc0:	683a      	ldr	r2, [r7, #0]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d910      	bls.n	800cbe8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cbc6:	4b67      	ldr	r3, [pc, #412]	; (800cd64 <HAL_RCC_ClockConfig+0x1c4>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f023 020f 	bic.w	r2, r3, #15
 800cbce:	4965      	ldr	r1, [pc, #404]	; (800cd64 <HAL_RCC_ClockConfig+0x1c4>)
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cbd6:	4b63      	ldr	r3, [pc, #396]	; (800cd64 <HAL_RCC_ClockConfig+0x1c4>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f003 030f 	and.w	r3, r3, #15
 800cbde:	683a      	ldr	r2, [r7, #0]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d001      	beq.n	800cbe8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	e0b8      	b.n	800cd5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f003 0302 	and.w	r3, r3, #2
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d020      	beq.n	800cc36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f003 0304 	and.w	r3, r3, #4
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d005      	beq.n	800cc0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cc00:	4b59      	ldr	r3, [pc, #356]	; (800cd68 <HAL_RCC_ClockConfig+0x1c8>)
 800cc02:	689b      	ldr	r3, [r3, #8]
 800cc04:	4a58      	ldr	r2, [pc, #352]	; (800cd68 <HAL_RCC_ClockConfig+0x1c8>)
 800cc06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800cc0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f003 0308 	and.w	r3, r3, #8
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d005      	beq.n	800cc24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cc18:	4b53      	ldr	r3, [pc, #332]	; (800cd68 <HAL_RCC_ClockConfig+0x1c8>)
 800cc1a:	689b      	ldr	r3, [r3, #8]
 800cc1c:	4a52      	ldr	r2, [pc, #328]	; (800cd68 <HAL_RCC_ClockConfig+0x1c8>)
 800cc1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cc22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cc24:	4b50      	ldr	r3, [pc, #320]	; (800cd68 <HAL_RCC_ClockConfig+0x1c8>)
 800cc26:	689b      	ldr	r3, [r3, #8]
 800cc28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	689b      	ldr	r3, [r3, #8]
 800cc30:	494d      	ldr	r1, [pc, #308]	; (800cd68 <HAL_RCC_ClockConfig+0x1c8>)
 800cc32:	4313      	orrs	r3, r2
 800cc34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f003 0301 	and.w	r3, r3, #1
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d040      	beq.n	800ccc4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d107      	bne.n	800cc5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc4a:	4b47      	ldr	r3, [pc, #284]	; (800cd68 <HAL_RCC_ClockConfig+0x1c8>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d115      	bne.n	800cc82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cc56:	2301      	movs	r3, #1
 800cc58:	e07f      	b.n	800cd5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	2b02      	cmp	r3, #2
 800cc60:	d107      	bne.n	800cc72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cc62:	4b41      	ldr	r3, [pc, #260]	; (800cd68 <HAL_RCC_ClockConfig+0x1c8>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d109      	bne.n	800cc82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cc6e:	2301      	movs	r3, #1
 800cc70:	e073      	b.n	800cd5a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cc72:	4b3d      	ldr	r3, [pc, #244]	; (800cd68 <HAL_RCC_ClockConfig+0x1c8>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f003 0302 	and.w	r3, r3, #2
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d101      	bne.n	800cc82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	e06b      	b.n	800cd5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cc82:	4b39      	ldr	r3, [pc, #228]	; (800cd68 <HAL_RCC_ClockConfig+0x1c8>)
 800cc84:	689b      	ldr	r3, [r3, #8]
 800cc86:	f023 0203 	bic.w	r2, r3, #3
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	4936      	ldr	r1, [pc, #216]	; (800cd68 <HAL_RCC_ClockConfig+0x1c8>)
 800cc90:	4313      	orrs	r3, r2
 800cc92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc94:	f7fd ffce 	bl	800ac34 <HAL_GetTick>
 800cc98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc9a:	e00a      	b.n	800ccb2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc9c:	f7fd ffca 	bl	800ac34 <HAL_GetTick>
 800cca0:	4602      	mov	r2, r0
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	1ad3      	subs	r3, r2, r3
 800cca6:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d901      	bls.n	800ccb2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800ccae:	2303      	movs	r3, #3
 800ccb0:	e053      	b.n	800cd5a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ccb2:	4b2d      	ldr	r3, [pc, #180]	; (800cd68 <HAL_RCC_ClockConfig+0x1c8>)
 800ccb4:	689b      	ldr	r3, [r3, #8]
 800ccb6:	f003 020c 	and.w	r2, r3, #12
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d1eb      	bne.n	800cc9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ccc4:	4b27      	ldr	r3, [pc, #156]	; (800cd64 <HAL_RCC_ClockConfig+0x1c4>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f003 030f 	and.w	r3, r3, #15
 800cccc:	683a      	ldr	r2, [r7, #0]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d210      	bcs.n	800ccf4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ccd2:	4b24      	ldr	r3, [pc, #144]	; (800cd64 <HAL_RCC_ClockConfig+0x1c4>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f023 020f 	bic.w	r2, r3, #15
 800ccda:	4922      	ldr	r1, [pc, #136]	; (800cd64 <HAL_RCC_ClockConfig+0x1c4>)
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	4313      	orrs	r3, r2
 800cce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cce2:	4b20      	ldr	r3, [pc, #128]	; (800cd64 <HAL_RCC_ClockConfig+0x1c4>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f003 030f 	and.w	r3, r3, #15
 800ccea:	683a      	ldr	r2, [r7, #0]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d001      	beq.n	800ccf4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	e032      	b.n	800cd5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f003 0304 	and.w	r3, r3, #4
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d008      	beq.n	800cd12 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cd00:	4b19      	ldr	r3, [pc, #100]	; (800cd68 <HAL_RCC_ClockConfig+0x1c8>)
 800cd02:	689b      	ldr	r3, [r3, #8]
 800cd04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	4916      	ldr	r1, [pc, #88]	; (800cd68 <HAL_RCC_ClockConfig+0x1c8>)
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f003 0308 	and.w	r3, r3, #8
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d009      	beq.n	800cd32 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cd1e:	4b12      	ldr	r3, [pc, #72]	; (800cd68 <HAL_RCC_ClockConfig+0x1c8>)
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	691b      	ldr	r3, [r3, #16]
 800cd2a:	00db      	lsls	r3, r3, #3
 800cd2c:	490e      	ldr	r1, [pc, #56]	; (800cd68 <HAL_RCC_ClockConfig+0x1c8>)
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cd32:	f000 f821 	bl	800cd78 <HAL_RCC_GetSysClockFreq>
 800cd36:	4602      	mov	r2, r0
 800cd38:	4b0b      	ldr	r3, [pc, #44]	; (800cd68 <HAL_RCC_ClockConfig+0x1c8>)
 800cd3a:	689b      	ldr	r3, [r3, #8]
 800cd3c:	091b      	lsrs	r3, r3, #4
 800cd3e:	f003 030f 	and.w	r3, r3, #15
 800cd42:	490a      	ldr	r1, [pc, #40]	; (800cd6c <HAL_RCC_ClockConfig+0x1cc>)
 800cd44:	5ccb      	ldrb	r3, [r1, r3]
 800cd46:	fa22 f303 	lsr.w	r3, r2, r3
 800cd4a:	4a09      	ldr	r2, [pc, #36]	; (800cd70 <HAL_RCC_ClockConfig+0x1d0>)
 800cd4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800cd4e:	4b09      	ldr	r3, [pc, #36]	; (800cd74 <HAL_RCC_ClockConfig+0x1d4>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7f9 fed6 	bl	8006b04 <HAL_InitTick>

  return HAL_OK;
 800cd58:	2300      	movs	r3, #0
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3710      	adds	r7, #16
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	40023c00 	.word	0x40023c00
 800cd68:	40023800 	.word	0x40023800
 800cd6c:	0801c048 	.word	0x0801c048
 800cd70:	20000008 	.word	0x20000008
 800cd74:	2000000c 	.word	0x2000000c

0800cd78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cd78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd7c:	b090      	sub	sp, #64	; 0x40
 800cd7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800cd80:	2300      	movs	r3, #0
 800cd82:	637b      	str	r3, [r7, #52]	; 0x34
 800cd84:	2300      	movs	r3, #0
 800cd86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd88:	2300      	movs	r3, #0
 800cd8a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cd90:	4b59      	ldr	r3, [pc, #356]	; (800cef8 <HAL_RCC_GetSysClockFreq+0x180>)
 800cd92:	689b      	ldr	r3, [r3, #8]
 800cd94:	f003 030c 	and.w	r3, r3, #12
 800cd98:	2b08      	cmp	r3, #8
 800cd9a:	d00d      	beq.n	800cdb8 <HAL_RCC_GetSysClockFreq+0x40>
 800cd9c:	2b08      	cmp	r3, #8
 800cd9e:	f200 80a1 	bhi.w	800cee4 <HAL_RCC_GetSysClockFreq+0x16c>
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d002      	beq.n	800cdac <HAL_RCC_GetSysClockFreq+0x34>
 800cda6:	2b04      	cmp	r3, #4
 800cda8:	d003      	beq.n	800cdb2 <HAL_RCC_GetSysClockFreq+0x3a>
 800cdaa:	e09b      	b.n	800cee4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cdac:	4b53      	ldr	r3, [pc, #332]	; (800cefc <HAL_RCC_GetSysClockFreq+0x184>)
 800cdae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800cdb0:	e09b      	b.n	800ceea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cdb2:	4b53      	ldr	r3, [pc, #332]	; (800cf00 <HAL_RCC_GetSysClockFreq+0x188>)
 800cdb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800cdb6:	e098      	b.n	800ceea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cdb8:	4b4f      	ldr	r3, [pc, #316]	; (800cef8 <HAL_RCC_GetSysClockFreq+0x180>)
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cdc0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800cdc2:	4b4d      	ldr	r3, [pc, #308]	; (800cef8 <HAL_RCC_GetSysClockFreq+0x180>)
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d028      	beq.n	800ce20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cdce:	4b4a      	ldr	r3, [pc, #296]	; (800cef8 <HAL_RCC_GetSysClockFreq+0x180>)
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	099b      	lsrs	r3, r3, #6
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	623b      	str	r3, [r7, #32]
 800cdd8:	627a      	str	r2, [r7, #36]	; 0x24
 800cdda:	6a3b      	ldr	r3, [r7, #32]
 800cddc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800cde0:	2100      	movs	r1, #0
 800cde2:	4b47      	ldr	r3, [pc, #284]	; (800cf00 <HAL_RCC_GetSysClockFreq+0x188>)
 800cde4:	fb03 f201 	mul.w	r2, r3, r1
 800cde8:	2300      	movs	r3, #0
 800cdea:	fb00 f303 	mul.w	r3, r0, r3
 800cdee:	4413      	add	r3, r2
 800cdf0:	4a43      	ldr	r2, [pc, #268]	; (800cf00 <HAL_RCC_GetSysClockFreq+0x188>)
 800cdf2:	fba0 1202 	umull	r1, r2, r0, r2
 800cdf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cdf8:	460a      	mov	r2, r1
 800cdfa:	62ba      	str	r2, [r7, #40]	; 0x28
 800cdfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdfe:	4413      	add	r3, r2
 800ce00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce04:	2200      	movs	r2, #0
 800ce06:	61bb      	str	r3, [r7, #24]
 800ce08:	61fa      	str	r2, [r7, #28]
 800ce0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ce0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ce12:	f7f3 ffb1 	bl	8000d78 <__aeabi_uldivmod>
 800ce16:	4602      	mov	r2, r0
 800ce18:	460b      	mov	r3, r1
 800ce1a:	4613      	mov	r3, r2
 800ce1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce1e:	e053      	b.n	800cec8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ce20:	4b35      	ldr	r3, [pc, #212]	; (800cef8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	099b      	lsrs	r3, r3, #6
 800ce26:	2200      	movs	r2, #0
 800ce28:	613b      	str	r3, [r7, #16]
 800ce2a:	617a      	str	r2, [r7, #20]
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800ce32:	f04f 0b00 	mov.w	fp, #0
 800ce36:	4652      	mov	r2, sl
 800ce38:	465b      	mov	r3, fp
 800ce3a:	f04f 0000 	mov.w	r0, #0
 800ce3e:	f04f 0100 	mov.w	r1, #0
 800ce42:	0159      	lsls	r1, r3, #5
 800ce44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ce48:	0150      	lsls	r0, r2, #5
 800ce4a:	4602      	mov	r2, r0
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	ebb2 080a 	subs.w	r8, r2, sl
 800ce52:	eb63 090b 	sbc.w	r9, r3, fp
 800ce56:	f04f 0200 	mov.w	r2, #0
 800ce5a:	f04f 0300 	mov.w	r3, #0
 800ce5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ce62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ce66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ce6a:	ebb2 0408 	subs.w	r4, r2, r8
 800ce6e:	eb63 0509 	sbc.w	r5, r3, r9
 800ce72:	f04f 0200 	mov.w	r2, #0
 800ce76:	f04f 0300 	mov.w	r3, #0
 800ce7a:	00eb      	lsls	r3, r5, #3
 800ce7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ce80:	00e2      	lsls	r2, r4, #3
 800ce82:	4614      	mov	r4, r2
 800ce84:	461d      	mov	r5, r3
 800ce86:	eb14 030a 	adds.w	r3, r4, sl
 800ce8a:	603b      	str	r3, [r7, #0]
 800ce8c:	eb45 030b 	adc.w	r3, r5, fp
 800ce90:	607b      	str	r3, [r7, #4]
 800ce92:	f04f 0200 	mov.w	r2, #0
 800ce96:	f04f 0300 	mov.w	r3, #0
 800ce9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ce9e:	4629      	mov	r1, r5
 800cea0:	028b      	lsls	r3, r1, #10
 800cea2:	4621      	mov	r1, r4
 800cea4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800cea8:	4621      	mov	r1, r4
 800ceaa:	028a      	lsls	r2, r1, #10
 800ceac:	4610      	mov	r0, r2
 800ceae:	4619      	mov	r1, r3
 800ceb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	60bb      	str	r3, [r7, #8]
 800ceb6:	60fa      	str	r2, [r7, #12]
 800ceb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cebc:	f7f3 ff5c 	bl	8000d78 <__aeabi_uldivmod>
 800cec0:	4602      	mov	r2, r0
 800cec2:	460b      	mov	r3, r1
 800cec4:	4613      	mov	r3, r2
 800cec6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800cec8:	4b0b      	ldr	r3, [pc, #44]	; (800cef8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	0c1b      	lsrs	r3, r3, #16
 800cece:	f003 0303 	and.w	r3, r3, #3
 800ced2:	3301      	adds	r3, #1
 800ced4:	005b      	lsls	r3, r3, #1
 800ced6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800ced8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ceda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cedc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cee0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800cee2:	e002      	b.n	800ceea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cee4:	4b05      	ldr	r3, [pc, #20]	; (800cefc <HAL_RCC_GetSysClockFreq+0x184>)
 800cee6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800cee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ceea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3740      	adds	r7, #64	; 0x40
 800cef0:	46bd      	mov	sp, r7
 800cef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cef6:	bf00      	nop
 800cef8:	40023800 	.word	0x40023800
 800cefc:	00f42400 	.word	0x00f42400
 800cf00:	017d7840 	.word	0x017d7840

0800cf04 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cf04:	b480      	push	{r7}
 800cf06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cf08:	4b03      	ldr	r3, [pc, #12]	; (800cf18 <HAL_RCC_GetHCLKFreq+0x14>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop
 800cf18:	20000008 	.word	0x20000008

0800cf1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cf20:	f7ff fff0 	bl	800cf04 <HAL_RCC_GetHCLKFreq>
 800cf24:	4602      	mov	r2, r0
 800cf26:	4b05      	ldr	r3, [pc, #20]	; (800cf3c <HAL_RCC_GetPCLK1Freq+0x20>)
 800cf28:	689b      	ldr	r3, [r3, #8]
 800cf2a:	0a9b      	lsrs	r3, r3, #10
 800cf2c:	f003 0307 	and.w	r3, r3, #7
 800cf30:	4903      	ldr	r1, [pc, #12]	; (800cf40 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cf32:	5ccb      	ldrb	r3, [r1, r3]
 800cf34:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	40023800 	.word	0x40023800
 800cf40:	0801c058 	.word	0x0801c058

0800cf44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800cf48:	f7ff ffdc 	bl	800cf04 <HAL_RCC_GetHCLKFreq>
 800cf4c:	4602      	mov	r2, r0
 800cf4e:	4b05      	ldr	r3, [pc, #20]	; (800cf64 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	0b5b      	lsrs	r3, r3, #13
 800cf54:	f003 0307 	and.w	r3, r3, #7
 800cf58:	4903      	ldr	r1, [pc, #12]	; (800cf68 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cf5a:	5ccb      	ldrb	r3, [r1, r3]
 800cf5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	40023800 	.word	0x40023800
 800cf68:	0801c058 	.word	0x0801c058

0800cf6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	220f      	movs	r2, #15
 800cf7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cf7c:	4b12      	ldr	r3, [pc, #72]	; (800cfc8 <HAL_RCC_GetClockConfig+0x5c>)
 800cf7e:	689b      	ldr	r3, [r3, #8]
 800cf80:	f003 0203 	and.w	r2, r3, #3
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cf88:	4b0f      	ldr	r3, [pc, #60]	; (800cfc8 <HAL_RCC_GetClockConfig+0x5c>)
 800cf8a:	689b      	ldr	r3, [r3, #8]
 800cf8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cf94:	4b0c      	ldr	r3, [pc, #48]	; (800cfc8 <HAL_RCC_GetClockConfig+0x5c>)
 800cf96:	689b      	ldr	r3, [r3, #8]
 800cf98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800cfa0:	4b09      	ldr	r3, [pc, #36]	; (800cfc8 <HAL_RCC_GetClockConfig+0x5c>)
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	08db      	lsrs	r3, r3, #3
 800cfa6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cfae:	4b07      	ldr	r3, [pc, #28]	; (800cfcc <HAL_RCC_GetClockConfig+0x60>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f003 020f 	and.w	r2, r3, #15
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	601a      	str	r2, [r3, #0]
}
 800cfba:	bf00      	nop
 800cfbc:	370c      	adds	r7, #12
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr
 800cfc6:	bf00      	nop
 800cfc8:	40023800 	.word	0x40023800
 800cfcc:	40023c00 	.word	0x40023c00

0800cfd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b088      	sub	sp, #32
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f003 0301 	and.w	r3, r3, #1
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d012      	beq.n	800d01a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cff4:	4b65      	ldr	r3, [pc, #404]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	4a64      	ldr	r2, [pc, #400]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cffa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cffe:	6093      	str	r3, [r2, #8]
 800d000:	4b62      	ldr	r3, [pc, #392]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d002:	689a      	ldr	r2, [r3, #8]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d008:	4960      	ldr	r1, [pc, #384]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d00a:	4313      	orrs	r3, r2
 800d00c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d012:	2b00      	cmp	r3, #0
 800d014:	d101      	bne.n	800d01a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800d016:	2301      	movs	r3, #1
 800d018:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d022:	2b00      	cmp	r3, #0
 800d024:	d017      	beq.n	800d056 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d026:	4b59      	ldr	r3, [pc, #356]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d02c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d034:	4955      	ldr	r1, [pc, #340]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d036:	4313      	orrs	r3, r2
 800d038:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d040:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d044:	d101      	bne.n	800d04a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800d046:	2301      	movs	r3, #1
 800d048:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d101      	bne.n	800d056 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800d052:	2301      	movs	r3, #1
 800d054:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d017      	beq.n	800d092 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d062:	4b4a      	ldr	r3, [pc, #296]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d068:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d070:	4946      	ldr	r1, [pc, #280]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d072:	4313      	orrs	r3, r2
 800d074:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d07c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d080:	d101      	bne.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800d082:	2301      	movs	r3, #1
 800d084:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d101      	bne.n	800d092 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800d08e:	2301      	movs	r3, #1
 800d090:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f003 0320 	and.w	r3, r3, #32
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	f000 808b 	beq.w	800d1b6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800d0a0:	4b3a      	ldr	r3, [pc, #232]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a4:	4a39      	ldr	r2, [pc, #228]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d0a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0aa:	6413      	str	r3, [r2, #64]	; 0x40
 800d0ac:	4b37      	ldr	r3, [pc, #220]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0b4:	60fb      	str	r3, [r7, #12]
 800d0b6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d0b8:	4b35      	ldr	r3, [pc, #212]	; (800d190 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4a34      	ldr	r2, [pc, #208]	; (800d190 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800d0be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0c4:	f7fd fdb6 	bl	800ac34 <HAL_GetTick>
 800d0c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d0ca:	e008      	b.n	800d0de <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d0cc:	f7fd fdb2 	bl	800ac34 <HAL_GetTick>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	1ad3      	subs	r3, r2, r3
 800d0d6:	2b64      	cmp	r3, #100	; 0x64
 800d0d8:	d901      	bls.n	800d0de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d0da:	2303      	movs	r3, #3
 800d0dc:	e2bc      	b.n	800d658 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d0de:	4b2c      	ldr	r3, [pc, #176]	; (800d190 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d0f0      	beq.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d0ea:	4b28      	ldr	r3, [pc, #160]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d0f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d035      	beq.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d102:	693a      	ldr	r2, [r7, #16]
 800d104:	429a      	cmp	r2, r3
 800d106:	d02e      	beq.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d108:	4b20      	ldr	r3, [pc, #128]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d10a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d10c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d110:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d112:	4b1e      	ldr	r3, [pc, #120]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d116:	4a1d      	ldr	r2, [pc, #116]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d11c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d11e:	4b1b      	ldr	r3, [pc, #108]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d122:	4a1a      	ldr	r2, [pc, #104]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d128:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800d12a:	4a18      	ldr	r2, [pc, #96]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d130:	4b16      	ldr	r3, [pc, #88]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d134:	f003 0301 	and.w	r3, r3, #1
 800d138:	2b01      	cmp	r3, #1
 800d13a:	d114      	bne.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d13c:	f7fd fd7a 	bl	800ac34 <HAL_GetTick>
 800d140:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d142:	e00a      	b.n	800d15a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d144:	f7fd fd76 	bl	800ac34 <HAL_GetTick>
 800d148:	4602      	mov	r2, r0
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	1ad3      	subs	r3, r2, r3
 800d14e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d152:	4293      	cmp	r3, r2
 800d154:	d901      	bls.n	800d15a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800d156:	2303      	movs	r3, #3
 800d158:	e27e      	b.n	800d658 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d15a:	4b0c      	ldr	r3, [pc, #48]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d15c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d15e:	f003 0302 	and.w	r3, r3, #2
 800d162:	2b00      	cmp	r3, #0
 800d164:	d0ee      	beq.n	800d144 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d16a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d16e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d172:	d111      	bne.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800d174:	4b05      	ldr	r3, [pc, #20]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d176:	689b      	ldr	r3, [r3, #8]
 800d178:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800d180:	4b04      	ldr	r3, [pc, #16]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800d182:	400b      	ands	r3, r1
 800d184:	4901      	ldr	r1, [pc, #4]	; (800d18c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d186:	4313      	orrs	r3, r2
 800d188:	608b      	str	r3, [r1, #8]
 800d18a:	e00b      	b.n	800d1a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800d18c:	40023800 	.word	0x40023800
 800d190:	40007000 	.word	0x40007000
 800d194:	0ffffcff 	.word	0x0ffffcff
 800d198:	4ba4      	ldr	r3, [pc, #656]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	4aa3      	ldr	r2, [pc, #652]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d19e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d1a2:	6093      	str	r3, [r2, #8]
 800d1a4:	4ba1      	ldr	r3, [pc, #644]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d1b0:	499e      	ldr	r1, [pc, #632]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f003 0310 	and.w	r3, r3, #16
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d010      	beq.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d1c2:	4b9a      	ldr	r3, [pc, #616]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1c8:	4a98      	ldr	r2, [pc, #608]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d1ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800d1d2:	4b96      	ldr	r3, [pc, #600]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1dc:	4993      	ldr	r1, [pc, #588]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d00a      	beq.n	800d206 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d1f0:	4b8e      	ldr	r3, [pc, #568]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d1fe:	498b      	ldr	r1, [pc, #556]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d200:	4313      	orrs	r3, r2
 800d202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d00a      	beq.n	800d228 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d212:	4b86      	ldr	r3, [pc, #536]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d218:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d220:	4982      	ldr	r1, [pc, #520]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d222:	4313      	orrs	r3, r2
 800d224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d230:	2b00      	cmp	r3, #0
 800d232:	d00a      	beq.n	800d24a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d234:	4b7d      	ldr	r3, [pc, #500]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d23a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d242:	497a      	ldr	r1, [pc, #488]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d244:	4313      	orrs	r3, r2
 800d246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d252:	2b00      	cmp	r3, #0
 800d254:	d00a      	beq.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d256:	4b75      	ldr	r3, [pc, #468]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d25c:	f023 0203 	bic.w	r2, r3, #3
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d264:	4971      	ldr	r1, [pc, #452]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d266:	4313      	orrs	r3, r2
 800d268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d274:	2b00      	cmp	r3, #0
 800d276:	d00a      	beq.n	800d28e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d278:	4b6c      	ldr	r3, [pc, #432]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d27a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d27e:	f023 020c 	bic.w	r2, r3, #12
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d286:	4969      	ldr	r1, [pc, #420]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d288:	4313      	orrs	r3, r2
 800d28a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d296:	2b00      	cmp	r3, #0
 800d298:	d00a      	beq.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d29a:	4b64      	ldr	r3, [pc, #400]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d29c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2a8:	4960      	ldr	r1, [pc, #384]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d00a      	beq.n	800d2d2 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d2bc:	4b5b      	ldr	r3, [pc, #364]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d2be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2ca:	4958      	ldr	r1, [pc, #352]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d00a      	beq.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d2de:	4b53      	ldr	r3, [pc, #332]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d2e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2ec:	494f      	ldr	r1, [pc, #316]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d00a      	beq.n	800d316 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d300:	4b4a      	ldr	r3, [pc, #296]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d306:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d30e:	4947      	ldr	r1, [pc, #284]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d310:	4313      	orrs	r3, r2
 800d312:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d00a      	beq.n	800d338 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d322:	4b42      	ldr	r3, [pc, #264]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d328:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d330:	493e      	ldr	r1, [pc, #248]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d332:	4313      	orrs	r3, r2
 800d334:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d340:	2b00      	cmp	r3, #0
 800d342:	d00a      	beq.n	800d35a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d344:	4b39      	ldr	r3, [pc, #228]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d34a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d352:	4936      	ldr	r1, [pc, #216]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d354:	4313      	orrs	r3, r2
 800d356:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d362:	2b00      	cmp	r3, #0
 800d364:	d011      	beq.n	800d38a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d366:	4b31      	ldr	r3, [pc, #196]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d36c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d374:	492d      	ldr	r1, [pc, #180]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d376:	4313      	orrs	r3, r2
 800d378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d380:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d384:	d101      	bne.n	800d38a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800d386:	2301      	movs	r3, #1
 800d388:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d392:	2b00      	cmp	r3, #0
 800d394:	d00a      	beq.n	800d3ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d396:	4b25      	ldr	r3, [pc, #148]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d39c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3a4:	4921      	ldr	r1, [pc, #132]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d3a6:	4313      	orrs	r3, r2
 800d3a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d00a      	beq.n	800d3ce <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d3b8:	4b1c      	ldr	r3, [pc, #112]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d3ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3c6:	4919      	ldr	r1, [pc, #100]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d00a      	beq.n	800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800d3da:	4b14      	ldr	r3, [pc, #80]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d3dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3e0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3e8:	4910      	ldr	r1, [pc, #64]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d3ea:	4313      	orrs	r3, r2
 800d3ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800d3f0:	69fb      	ldr	r3, [r7, #28]
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	d006      	beq.n	800d404 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	f000 809d 	beq.w	800d53e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d404:	4b09      	ldr	r3, [pc, #36]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4a08      	ldr	r2, [pc, #32]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d40a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d40e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d410:	f7fd fc10 	bl	800ac34 <HAL_GetTick>
 800d414:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d416:	e00b      	b.n	800d430 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d418:	f7fd fc0c 	bl	800ac34 <HAL_GetTick>
 800d41c:	4602      	mov	r2, r0
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	1ad3      	subs	r3, r2, r3
 800d422:	2b64      	cmp	r3, #100	; 0x64
 800d424:	d904      	bls.n	800d430 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d426:	2303      	movs	r3, #3
 800d428:	e116      	b.n	800d658 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800d42a:	bf00      	nop
 800d42c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d430:	4b8b      	ldr	r3, [pc, #556]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d1ed      	bne.n	800d418 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f003 0301 	and.w	r3, r3, #1
 800d444:	2b00      	cmp	r3, #0
 800d446:	d017      	beq.n	800d478 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d113      	bne.n	800d478 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d450:	4b83      	ldr	r3, [pc, #524]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d456:	0e1b      	lsrs	r3, r3, #24
 800d458:	f003 030f 	and.w	r3, r3, #15
 800d45c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	019a      	lsls	r2, r3, #6
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	061b      	lsls	r3, r3, #24
 800d468:	431a      	orrs	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	689b      	ldr	r3, [r3, #8]
 800d46e:	071b      	lsls	r3, r3, #28
 800d470:	497b      	ldr	r1, [pc, #492]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d472:	4313      	orrs	r3, r2
 800d474:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d480:	2b00      	cmp	r3, #0
 800d482:	d004      	beq.n	800d48e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d488:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d48c:	d00a      	beq.n	800d4a4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d496:	2b00      	cmp	r3, #0
 800d498:	d024      	beq.n	800d4e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d49e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d4a2:	d11f      	bne.n	800d4e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d4a4:	4b6e      	ldr	r3, [pc, #440]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d4a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4aa:	0f1b      	lsrs	r3, r3, #28
 800d4ac:	f003 0307 	and.w	r3, r3, #7
 800d4b0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	019a      	lsls	r2, r3, #6
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	68db      	ldr	r3, [r3, #12]
 800d4bc:	061b      	lsls	r3, r3, #24
 800d4be:	431a      	orrs	r2, r3
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	071b      	lsls	r3, r3, #28
 800d4c4:	4966      	ldr	r1, [pc, #408]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d4c6:	4313      	orrs	r3, r2
 800d4c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d4cc:	4b64      	ldr	r3, [pc, #400]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d4ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4d2:	f023 021f 	bic.w	r2, r3, #31
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	69db      	ldr	r3, [r3, #28]
 800d4da:	3b01      	subs	r3, #1
 800d4dc:	4960      	ldr	r1, [pc, #384]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d4de:	4313      	orrs	r3, r2
 800d4e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d00d      	beq.n	800d50c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	019a      	lsls	r2, r3, #6
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	68db      	ldr	r3, [r3, #12]
 800d4fa:	061b      	lsls	r3, r3, #24
 800d4fc:	431a      	orrs	r2, r3
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	689b      	ldr	r3, [r3, #8]
 800d502:	071b      	lsls	r3, r3, #28
 800d504:	4956      	ldr	r1, [pc, #344]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d506:	4313      	orrs	r3, r2
 800d508:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d50c:	4b54      	ldr	r3, [pc, #336]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4a53      	ldr	r2, [pc, #332]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d512:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d516:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d518:	f7fd fb8c 	bl	800ac34 <HAL_GetTick>
 800d51c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d51e:	e008      	b.n	800d532 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d520:	f7fd fb88 	bl	800ac34 <HAL_GetTick>
 800d524:	4602      	mov	r2, r0
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	1ad3      	subs	r3, r2, r3
 800d52a:	2b64      	cmp	r3, #100	; 0x64
 800d52c:	d901      	bls.n	800d532 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d52e:	2303      	movs	r3, #3
 800d530:	e092      	b.n	800d658 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d532:	4b4b      	ldr	r3, [pc, #300]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d0f0      	beq.n	800d520 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d53e:	69bb      	ldr	r3, [r7, #24]
 800d540:	2b01      	cmp	r3, #1
 800d542:	f040 8088 	bne.w	800d656 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d546:	4b46      	ldr	r3, [pc, #280]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4a45      	ldr	r2, [pc, #276]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d54c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d550:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d552:	f7fd fb6f 	bl	800ac34 <HAL_GetTick>
 800d556:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d558:	e008      	b.n	800d56c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d55a:	f7fd fb6b 	bl	800ac34 <HAL_GetTick>
 800d55e:	4602      	mov	r2, r0
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	1ad3      	subs	r3, r2, r3
 800d564:	2b64      	cmp	r3, #100	; 0x64
 800d566:	d901      	bls.n	800d56c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d568:	2303      	movs	r3, #3
 800d56a:	e075      	b.n	800d658 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d56c:	4b3c      	ldr	r3, [pc, #240]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d578:	d0ef      	beq.n	800d55a <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d582:	2b00      	cmp	r3, #0
 800d584:	d003      	beq.n	800d58e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d009      	beq.n	800d5a2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d596:	2b00      	cmp	r3, #0
 800d598:	d024      	beq.n	800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d120      	bne.n	800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d5a2:	4b2f      	ldr	r3, [pc, #188]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d5a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5a8:	0c1b      	lsrs	r3, r3, #16
 800d5aa:	f003 0303 	and.w	r3, r3, #3
 800d5ae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	691b      	ldr	r3, [r3, #16]
 800d5b4:	019a      	lsls	r2, r3, #6
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	041b      	lsls	r3, r3, #16
 800d5ba:	431a      	orrs	r2, r3
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	695b      	ldr	r3, [r3, #20]
 800d5c0:	061b      	lsls	r3, r3, #24
 800d5c2:	4927      	ldr	r1, [pc, #156]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d5c4:	4313      	orrs	r3, r2
 800d5c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d5ca:	4b25      	ldr	r3, [pc, #148]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d5cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6a1b      	ldr	r3, [r3, #32]
 800d5d8:	3b01      	subs	r3, #1
 800d5da:	021b      	lsls	r3, r3, #8
 800d5dc:	4920      	ldr	r1, [pc, #128]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d018      	beq.n	800d622 <HAL_RCCEx_PeriphCLKConfig+0x652>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d5f8:	d113      	bne.n	800d622 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d5fa:	4b19      	ldr	r3, [pc, #100]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d5fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d600:	0e1b      	lsrs	r3, r3, #24
 800d602:	f003 030f 	and.w	r3, r3, #15
 800d606:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	691b      	ldr	r3, [r3, #16]
 800d60c:	019a      	lsls	r2, r3, #6
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	699b      	ldr	r3, [r3, #24]
 800d612:	041b      	lsls	r3, r3, #16
 800d614:	431a      	orrs	r2, r3
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	061b      	lsls	r3, r3, #24
 800d61a:	4911      	ldr	r1, [pc, #68]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d61c:	4313      	orrs	r3, r2
 800d61e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d622:	4b0f      	ldr	r3, [pc, #60]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a0e      	ldr	r2, [pc, #56]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d62c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d62e:	f7fd fb01 	bl	800ac34 <HAL_GetTick>
 800d632:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d634:	e008      	b.n	800d648 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d636:	f7fd fafd 	bl	800ac34 <HAL_GetTick>
 800d63a:	4602      	mov	r2, r0
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	1ad3      	subs	r3, r2, r3
 800d640:	2b64      	cmp	r3, #100	; 0x64
 800d642:	d901      	bls.n	800d648 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d644:	2303      	movs	r3, #3
 800d646:	e007      	b.n	800d658 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d648:	4b05      	ldr	r3, [pc, #20]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d654:	d1ef      	bne.n	800d636 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800d656:	2300      	movs	r3, #0
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3720      	adds	r7, #32
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	40023800 	.word	0x40023800

0800d664 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d101      	bne.n	800d676 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d672:	2301      	movs	r3, #1
 800d674:	e09d      	b.n	800d7b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d108      	bne.n	800d690 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	685b      	ldr	r3, [r3, #4]
 800d682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d686:	d009      	beq.n	800d69c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2200      	movs	r2, #0
 800d68c:	61da      	str	r2, [r3, #28]
 800d68e:	e005      	b.n	800d69c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2200      	movs	r2, #0
 800d694:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2200      	movs	r2, #0
 800d69a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d106      	bne.n	800d6bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f7f8 ffdc 	bl	8006674 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2202      	movs	r2, #2
 800d6c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	68db      	ldr	r3, [r3, #12]
 800d6d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d6dc:	d902      	bls.n	800d6e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	60fb      	str	r3, [r7, #12]
 800d6e2:	e002      	b.n	800d6ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d6e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	68db      	ldr	r3, [r3, #12]
 800d6ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d6f2:	d007      	beq.n	800d704 <HAL_SPI_Init+0xa0>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	68db      	ldr	r3, [r3, #12]
 800d6f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d6fc:	d002      	beq.n	800d704 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2200      	movs	r2, #0
 800d702:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	689b      	ldr	r3, [r3, #8]
 800d710:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d714:	431a      	orrs	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	691b      	ldr	r3, [r3, #16]
 800d71a:	f003 0302 	and.w	r3, r3, #2
 800d71e:	431a      	orrs	r2, r3
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	695b      	ldr	r3, [r3, #20]
 800d724:	f003 0301 	and.w	r3, r3, #1
 800d728:	431a      	orrs	r2, r3
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	699b      	ldr	r3, [r3, #24]
 800d72e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d732:	431a      	orrs	r2, r3
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	69db      	ldr	r3, [r3, #28]
 800d738:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d73c:	431a      	orrs	r2, r3
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6a1b      	ldr	r3, [r3, #32]
 800d742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d746:	ea42 0103 	orr.w	r1, r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d74e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	430a      	orrs	r2, r1
 800d758:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	699b      	ldr	r3, [r3, #24]
 800d75e:	0c1b      	lsrs	r3, r3, #16
 800d760:	f003 0204 	and.w	r2, r3, #4
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d768:	f003 0310 	and.w	r3, r3, #16
 800d76c:	431a      	orrs	r2, r3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d772:	f003 0308 	and.w	r3, r3, #8
 800d776:	431a      	orrs	r2, r3
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	68db      	ldr	r3, [r3, #12]
 800d77c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d780:	ea42 0103 	orr.w	r1, r2, r3
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	430a      	orrs	r2, r1
 800d790:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	69da      	ldr	r2, [r3, #28]
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d7a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d7b0:	2300      	movs	r3, #0
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3710      	adds	r7, #16
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b088      	sub	sp, #32
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	60f8      	str	r0, [r7, #12]
 800d7c2:	60b9      	str	r1, [r7, #8]
 800d7c4:	603b      	str	r3, [r7, #0]
 800d7c6:	4613      	mov	r3, r2
 800d7c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d101      	bne.n	800d7dc <HAL_SPI_Transmit+0x22>
 800d7d8:	2302      	movs	r3, #2
 800d7da:	e158      	b.n	800da8e <HAL_SPI_Transmit+0x2d4>
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2201      	movs	r2, #1
 800d7e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d7e4:	f7fd fa26 	bl	800ac34 <HAL_GetTick>
 800d7e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d7ea:	88fb      	ldrh	r3, [r7, #6]
 800d7ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d7f4:	b2db      	uxtb	r3, r3
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d002      	beq.n	800d800 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d7fa:	2302      	movs	r3, #2
 800d7fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d7fe:	e13d      	b.n	800da7c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d002      	beq.n	800d80c <HAL_SPI_Transmit+0x52>
 800d806:	88fb      	ldrh	r3, [r7, #6]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d102      	bne.n	800d812 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d80c:	2301      	movs	r3, #1
 800d80e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d810:	e134      	b.n	800da7c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2203      	movs	r2, #3
 800d816:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2200      	movs	r2, #0
 800d81e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	68ba      	ldr	r2, [r7, #8]
 800d824:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	88fa      	ldrh	r2, [r7, #6]
 800d82a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	88fa      	ldrh	r2, [r7, #6]
 800d830:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2200      	movs	r2, #0
 800d836:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	2200      	movs	r2, #0
 800d83c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2200      	movs	r2, #0
 800d844:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2200      	movs	r2, #0
 800d84c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2200      	movs	r2, #0
 800d852:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	689b      	ldr	r3, [r3, #8]
 800d858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d85c:	d10f      	bne.n	800d87e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d86c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	681a      	ldr	r2, [r3, #0]
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d87c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d888:	2b40      	cmp	r3, #64	; 0x40
 800d88a:	d007      	beq.n	800d89c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	681a      	ldr	r2, [r3, #0]
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d89a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	68db      	ldr	r3, [r3, #12]
 800d8a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d8a4:	d94b      	bls.n	800d93e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d002      	beq.n	800d8b4 <HAL_SPI_Transmit+0xfa>
 800d8ae:	8afb      	ldrh	r3, [r7, #22]
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	d13e      	bne.n	800d932 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b8:	881a      	ldrh	r2, [r3, #0]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c4:	1c9a      	adds	r2, r3, #2
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d8ce:	b29b      	uxth	r3, r3
 800d8d0:	3b01      	subs	r3, #1
 800d8d2:	b29a      	uxth	r2, r3
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d8d8:	e02b      	b.n	800d932 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	689b      	ldr	r3, [r3, #8]
 800d8e0:	f003 0302 	and.w	r3, r3, #2
 800d8e4:	2b02      	cmp	r3, #2
 800d8e6:	d112      	bne.n	800d90e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ec:	881a      	ldrh	r2, [r3, #0]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f8:	1c9a      	adds	r2, r3, #2
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d902:	b29b      	uxth	r3, r3
 800d904:	3b01      	subs	r3, #1
 800d906:	b29a      	uxth	r2, r3
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d90c:	e011      	b.n	800d932 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d90e:	f7fd f991 	bl	800ac34 <HAL_GetTick>
 800d912:	4602      	mov	r2, r0
 800d914:	69bb      	ldr	r3, [r7, #24]
 800d916:	1ad3      	subs	r3, r2, r3
 800d918:	683a      	ldr	r2, [r7, #0]
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d803      	bhi.n	800d926 <HAL_SPI_Transmit+0x16c>
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d924:	d102      	bne.n	800d92c <HAL_SPI_Transmit+0x172>
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d102      	bne.n	800d932 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800d92c:	2303      	movs	r3, #3
 800d92e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d930:	e0a4      	b.n	800da7c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d936:	b29b      	uxth	r3, r3
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d1ce      	bne.n	800d8da <HAL_SPI_Transmit+0x120>
 800d93c:	e07c      	b.n	800da38 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d002      	beq.n	800d94c <HAL_SPI_Transmit+0x192>
 800d946:	8afb      	ldrh	r3, [r7, #22]
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d170      	bne.n	800da2e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d950:	b29b      	uxth	r3, r3
 800d952:	2b01      	cmp	r3, #1
 800d954:	d912      	bls.n	800d97c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d95a:	881a      	ldrh	r2, [r3, #0]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d966:	1c9a      	adds	r2, r3, #2
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d970:	b29b      	uxth	r3, r3
 800d972:	3b02      	subs	r3, #2
 800d974:	b29a      	uxth	r2, r3
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d97a:	e058      	b.n	800da2e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	330c      	adds	r3, #12
 800d986:	7812      	ldrb	r2, [r2, #0]
 800d988:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d98e:	1c5a      	adds	r2, r3, #1
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d998:	b29b      	uxth	r3, r3
 800d99a:	3b01      	subs	r3, #1
 800d99c:	b29a      	uxth	r2, r3
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800d9a2:	e044      	b.n	800da2e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	689b      	ldr	r3, [r3, #8]
 800d9aa:	f003 0302 	and.w	r3, r3, #2
 800d9ae:	2b02      	cmp	r3, #2
 800d9b0:	d12b      	bne.n	800da0a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9b6:	b29b      	uxth	r3, r3
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d912      	bls.n	800d9e2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c0:	881a      	ldrh	r2, [r3, #0]
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9cc:	1c9a      	adds	r2, r3, #2
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	3b02      	subs	r3, #2
 800d9da:	b29a      	uxth	r2, r3
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d9e0:	e025      	b.n	800da2e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	330c      	adds	r3, #12
 800d9ec:	7812      	ldrb	r2, [r2, #0]
 800d9ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9f4:	1c5a      	adds	r2, r3, #1
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	3b01      	subs	r3, #1
 800da02:	b29a      	uxth	r2, r3
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	87da      	strh	r2, [r3, #62]	; 0x3e
 800da08:	e011      	b.n	800da2e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da0a:	f7fd f913 	bl	800ac34 <HAL_GetTick>
 800da0e:	4602      	mov	r2, r0
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	1ad3      	subs	r3, r2, r3
 800da14:	683a      	ldr	r2, [r7, #0]
 800da16:	429a      	cmp	r2, r3
 800da18:	d803      	bhi.n	800da22 <HAL_SPI_Transmit+0x268>
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da20:	d102      	bne.n	800da28 <HAL_SPI_Transmit+0x26e>
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d102      	bne.n	800da2e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800da28:	2303      	movs	r3, #3
 800da2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800da2c:	e026      	b.n	800da7c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da32:	b29b      	uxth	r3, r3
 800da34:	2b00      	cmp	r3, #0
 800da36:	d1b5      	bne.n	800d9a4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800da38:	69ba      	ldr	r2, [r7, #24]
 800da3a:	6839      	ldr	r1, [r7, #0]
 800da3c:	68f8      	ldr	r0, [r7, #12]
 800da3e:	f000 fd07 	bl	800e450 <SPI_EndRxTxTransaction>
 800da42:	4603      	mov	r3, r0
 800da44:	2b00      	cmp	r3, #0
 800da46:	d002      	beq.n	800da4e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2220      	movs	r2, #32
 800da4c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	689b      	ldr	r3, [r3, #8]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d10a      	bne.n	800da6c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800da56:	2300      	movs	r3, #0
 800da58:	613b      	str	r3, [r7, #16]
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	613b      	str	r3, [r7, #16]
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	689b      	ldr	r3, [r3, #8]
 800da68:	613b      	str	r3, [r7, #16]
 800da6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da70:	2b00      	cmp	r3, #0
 800da72:	d002      	beq.n	800da7a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800da74:	2301      	movs	r3, #1
 800da76:	77fb      	strb	r3, [r7, #31]
 800da78:	e000      	b.n	800da7c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800da7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	2201      	movs	r2, #1
 800da80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	2200      	movs	r2, #0
 800da88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800da8c:	7ffb      	ldrb	r3, [r7, #31]
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3720      	adds	r7, #32
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}

0800da96 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b088      	sub	sp, #32
 800da9a:	af02      	add	r7, sp, #8
 800da9c:	60f8      	str	r0, [r7, #12]
 800da9e:	60b9      	str	r1, [r7, #8]
 800daa0:	603b      	str	r3, [r7, #0]
 800daa2:	4613      	mov	r3, r2
 800daa4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800daa6:	2300      	movs	r3, #0
 800daa8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	685b      	ldr	r3, [r3, #4]
 800daae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dab2:	d112      	bne.n	800dada <HAL_SPI_Receive+0x44>
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d10e      	bne.n	800dada <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2204      	movs	r2, #4
 800dac0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800dac4:	88fa      	ldrh	r2, [r7, #6]
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	9300      	str	r3, [sp, #0]
 800daca:	4613      	mov	r3, r2
 800dacc:	68ba      	ldr	r2, [r7, #8]
 800dace:	68b9      	ldr	r1, [r7, #8]
 800dad0:	68f8      	ldr	r0, [r7, #12]
 800dad2:	f000 f910 	bl	800dcf6 <HAL_SPI_TransmitReceive>
 800dad6:	4603      	mov	r3, r0
 800dad8:	e109      	b.n	800dcee <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d101      	bne.n	800dae8 <HAL_SPI_Receive+0x52>
 800dae4:	2302      	movs	r3, #2
 800dae6:	e102      	b.n	800dcee <HAL_SPI_Receive+0x258>
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2201      	movs	r2, #1
 800daec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800daf0:	f7fd f8a0 	bl	800ac34 <HAL_GetTick>
 800daf4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dafc:	b2db      	uxtb	r3, r3
 800dafe:	2b01      	cmp	r3, #1
 800db00:	d002      	beq.n	800db08 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800db02:	2302      	movs	r3, #2
 800db04:	75fb      	strb	r3, [r7, #23]
    goto error;
 800db06:	e0e9      	b.n	800dcdc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d002      	beq.n	800db14 <HAL_SPI_Receive+0x7e>
 800db0e:	88fb      	ldrh	r3, [r7, #6]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d102      	bne.n	800db1a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800db14:	2301      	movs	r3, #1
 800db16:	75fb      	strb	r3, [r7, #23]
    goto error;
 800db18:	e0e0      	b.n	800dcdc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	2204      	movs	r2, #4
 800db1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2200      	movs	r2, #0
 800db26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	68ba      	ldr	r2, [r7, #8]
 800db2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	88fa      	ldrh	r2, [r7, #6]
 800db32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	88fa      	ldrh	r2, [r7, #6]
 800db3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2200      	movs	r2, #0
 800db42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2200      	movs	r2, #0
 800db48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2200      	movs	r2, #0
 800db4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	2200      	movs	r2, #0
 800db54:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2200      	movs	r2, #0
 800db5a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	68db      	ldr	r3, [r3, #12]
 800db60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800db64:	d908      	bls.n	800db78 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	685a      	ldr	r2, [r3, #4]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800db74:	605a      	str	r2, [r3, #4]
 800db76:	e007      	b.n	800db88 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	685a      	ldr	r2, [r3, #4]
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800db86:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	689b      	ldr	r3, [r3, #8]
 800db8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800db90:	d10f      	bne.n	800dbb2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	681a      	ldr	r2, [r3, #0]
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dba0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	681a      	ldr	r2, [r3, #0]
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800dbb0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbbc:	2b40      	cmp	r3, #64	; 0x40
 800dbbe:	d007      	beq.n	800dbd0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	681a      	ldr	r2, [r3, #0]
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dbce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dbd8:	d867      	bhi.n	800dcaa <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800dbda:	e030      	b.n	800dc3e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	689b      	ldr	r3, [r3, #8]
 800dbe2:	f003 0301 	and.w	r3, r3, #1
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d117      	bne.n	800dc1a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f103 020c 	add.w	r2, r3, #12
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbf6:	7812      	ldrb	r2, [r2, #0]
 800dbf8:	b2d2      	uxtb	r2, r2
 800dbfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc00:	1c5a      	adds	r2, r3, #1
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dc0c:	b29b      	uxth	r3, r3
 800dc0e:	3b01      	subs	r3, #1
 800dc10:	b29a      	uxth	r2, r3
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800dc18:	e011      	b.n	800dc3e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc1a:	f7fd f80b 	bl	800ac34 <HAL_GetTick>
 800dc1e:	4602      	mov	r2, r0
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	1ad3      	subs	r3, r2, r3
 800dc24:	683a      	ldr	r2, [r7, #0]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d803      	bhi.n	800dc32 <HAL_SPI_Receive+0x19c>
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc30:	d102      	bne.n	800dc38 <HAL_SPI_Receive+0x1a2>
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d102      	bne.n	800dc3e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800dc38:	2303      	movs	r3, #3
 800dc3a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800dc3c:	e04e      	b.n	800dcdc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d1c8      	bne.n	800dbdc <HAL_SPI_Receive+0x146>
 800dc4a:	e034      	b.n	800dcb6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	689b      	ldr	r3, [r3, #8]
 800dc52:	f003 0301 	and.w	r3, r3, #1
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	d115      	bne.n	800dc86 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	68da      	ldr	r2, [r3, #12]
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc64:	b292      	uxth	r2, r2
 800dc66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc6c:	1c9a      	adds	r2, r3, #2
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dc78:	b29b      	uxth	r3, r3
 800dc7a:	3b01      	subs	r3, #1
 800dc7c:	b29a      	uxth	r2, r3
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800dc84:	e011      	b.n	800dcaa <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc86:	f7fc ffd5 	bl	800ac34 <HAL_GetTick>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	1ad3      	subs	r3, r2, r3
 800dc90:	683a      	ldr	r2, [r7, #0]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d803      	bhi.n	800dc9e <HAL_SPI_Receive+0x208>
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc9c:	d102      	bne.n	800dca4 <HAL_SPI_Receive+0x20e>
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d102      	bne.n	800dcaa <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800dca4:	2303      	movs	r3, #3
 800dca6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800dca8:	e018      	b.n	800dcdc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d1ca      	bne.n	800dc4c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dcb6:	693a      	ldr	r2, [r7, #16]
 800dcb8:	6839      	ldr	r1, [r7, #0]
 800dcba:	68f8      	ldr	r0, [r7, #12]
 800dcbc:	f000 fb4c 	bl	800e358 <SPI_EndRxTransaction>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d002      	beq.n	800dccc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2220      	movs	r2, #32
 800dcca:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d002      	beq.n	800dcda <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	75fb      	strb	r3, [r7, #23]
 800dcd8:	e000      	b.n	800dcdc <HAL_SPI_Receive+0x246>
  }

error :
 800dcda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2201      	movs	r2, #1
 800dce0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2200      	movs	r2, #0
 800dce8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800dcec:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3718      	adds	r7, #24
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}

0800dcf6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800dcf6:	b580      	push	{r7, lr}
 800dcf8:	b08a      	sub	sp, #40	; 0x28
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	60f8      	str	r0, [r7, #12]
 800dcfe:	60b9      	str	r1, [r7, #8]
 800dd00:	607a      	str	r2, [r7, #4]
 800dd02:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800dd04:	2301      	movs	r3, #1
 800dd06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d101      	bne.n	800dd1c <HAL_SPI_TransmitReceive+0x26>
 800dd18:	2302      	movs	r3, #2
 800dd1a:	e1fb      	b.n	800e114 <HAL_SPI_TransmitReceive+0x41e>
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2201      	movs	r2, #1
 800dd20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dd24:	f7fc ff86 	bl	800ac34 <HAL_GetTick>
 800dd28:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dd30:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	685b      	ldr	r3, [r3, #4]
 800dd36:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800dd38:	887b      	ldrh	r3, [r7, #2]
 800dd3a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800dd3c:	887b      	ldrh	r3, [r7, #2]
 800dd3e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dd40:	7efb      	ldrb	r3, [r7, #27]
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d00e      	beq.n	800dd64 <HAL_SPI_TransmitReceive+0x6e>
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dd4c:	d106      	bne.n	800dd5c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	689b      	ldr	r3, [r3, #8]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d102      	bne.n	800dd5c <HAL_SPI_TransmitReceive+0x66>
 800dd56:	7efb      	ldrb	r3, [r7, #27]
 800dd58:	2b04      	cmp	r3, #4
 800dd5a:	d003      	beq.n	800dd64 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800dd5c:	2302      	movs	r3, #2
 800dd5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800dd62:	e1cd      	b.n	800e100 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d005      	beq.n	800dd76 <HAL_SPI_TransmitReceive+0x80>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d002      	beq.n	800dd76 <HAL_SPI_TransmitReceive+0x80>
 800dd70:	887b      	ldrh	r3, [r7, #2]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d103      	bne.n	800dd7e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800dd76:	2301      	movs	r3, #1
 800dd78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800dd7c:	e1c0      	b.n	800e100 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dd84:	b2db      	uxtb	r3, r3
 800dd86:	2b04      	cmp	r3, #4
 800dd88:	d003      	beq.n	800dd92 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	2205      	movs	r2, #5
 800dd8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2200      	movs	r2, #0
 800dd96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	687a      	ldr	r2, [r7, #4]
 800dd9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	887a      	ldrh	r2, [r7, #2]
 800dda2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	887a      	ldrh	r2, [r7, #2]
 800ddaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	68ba      	ldr	r2, [r7, #8]
 800ddb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	887a      	ldrh	r2, [r7, #2]
 800ddb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	887a      	ldrh	r2, [r7, #2]
 800ddbe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2200      	movs	r2, #0
 800ddca:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	68db      	ldr	r3, [r3, #12]
 800ddd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ddd4:	d802      	bhi.n	800dddc <HAL_SPI_TransmitReceive+0xe6>
 800ddd6:	8a3b      	ldrh	r3, [r7, #16]
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	d908      	bls.n	800ddee <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	685a      	ldr	r2, [r3, #4]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ddea:	605a      	str	r2, [r3, #4]
 800ddec:	e007      	b.n	800ddfe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	685a      	ldr	r2, [r3, #4]
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ddfc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de08:	2b40      	cmp	r3, #64	; 0x40
 800de0a:	d007      	beq.n	800de1c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	681a      	ldr	r2, [r3, #0]
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800de1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	68db      	ldr	r3, [r3, #12]
 800de20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800de24:	d97c      	bls.n	800df20 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	685b      	ldr	r3, [r3, #4]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d002      	beq.n	800de34 <HAL_SPI_TransmitReceive+0x13e>
 800de2e:	8a7b      	ldrh	r3, [r7, #18]
 800de30:	2b01      	cmp	r3, #1
 800de32:	d169      	bne.n	800df08 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de38:	881a      	ldrh	r2, [r3, #0]
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de44:	1c9a      	adds	r2, r3, #2
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de4e:	b29b      	uxth	r3, r3
 800de50:	3b01      	subs	r3, #1
 800de52:	b29a      	uxth	r2, r3
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800de58:	e056      	b.n	800df08 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	689b      	ldr	r3, [r3, #8]
 800de60:	f003 0302 	and.w	r3, r3, #2
 800de64:	2b02      	cmp	r3, #2
 800de66:	d11b      	bne.n	800dea0 <HAL_SPI_TransmitReceive+0x1aa>
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d016      	beq.n	800dea0 <HAL_SPI_TransmitReceive+0x1aa>
 800de72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de74:	2b01      	cmp	r3, #1
 800de76:	d113      	bne.n	800dea0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de7c:	881a      	ldrh	r2, [r3, #0]
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de88:	1c9a      	adds	r2, r3, #2
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de92:	b29b      	uxth	r3, r3
 800de94:	3b01      	subs	r3, #1
 800de96:	b29a      	uxth	r2, r3
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800de9c:	2300      	movs	r3, #0
 800de9e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	689b      	ldr	r3, [r3, #8]
 800dea6:	f003 0301 	and.w	r3, r3, #1
 800deaa:	2b01      	cmp	r3, #1
 800deac:	d11c      	bne.n	800dee8 <HAL_SPI_TransmitReceive+0x1f2>
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800deb4:	b29b      	uxth	r3, r3
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d016      	beq.n	800dee8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	68da      	ldr	r2, [r3, #12]
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dec4:	b292      	uxth	r2, r2
 800dec6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800decc:	1c9a      	adds	r2, r3, #2
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ded8:	b29b      	uxth	r3, r3
 800deda:	3b01      	subs	r3, #1
 800dedc:	b29a      	uxth	r2, r3
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dee4:	2301      	movs	r3, #1
 800dee6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dee8:	f7fc fea4 	bl	800ac34 <HAL_GetTick>
 800deec:	4602      	mov	r2, r0
 800deee:	69fb      	ldr	r3, [r7, #28]
 800def0:	1ad3      	subs	r3, r2, r3
 800def2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800def4:	429a      	cmp	r2, r3
 800def6:	d807      	bhi.n	800df08 <HAL_SPI_TransmitReceive+0x212>
 800def8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800defa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800defe:	d003      	beq.n	800df08 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800df00:	2303      	movs	r3, #3
 800df02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800df06:	e0fb      	b.n	800e100 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df0c:	b29b      	uxth	r3, r3
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1a3      	bne.n	800de5a <HAL_SPI_TransmitReceive+0x164>
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800df18:	b29b      	uxth	r3, r3
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d19d      	bne.n	800de5a <HAL_SPI_TransmitReceive+0x164>
 800df1e:	e0df      	b.n	800e0e0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d003      	beq.n	800df30 <HAL_SPI_TransmitReceive+0x23a>
 800df28:	8a7b      	ldrh	r3, [r7, #18]
 800df2a:	2b01      	cmp	r3, #1
 800df2c:	f040 80cb 	bne.w	800e0c6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df34:	b29b      	uxth	r3, r3
 800df36:	2b01      	cmp	r3, #1
 800df38:	d912      	bls.n	800df60 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df3e:	881a      	ldrh	r2, [r3, #0]
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df4a:	1c9a      	adds	r2, r3, #2
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df54:	b29b      	uxth	r3, r3
 800df56:	3b02      	subs	r3, #2
 800df58:	b29a      	uxth	r2, r3
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800df5e:	e0b2      	b.n	800e0c6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	330c      	adds	r3, #12
 800df6a:	7812      	ldrb	r2, [r2, #0]
 800df6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df72:	1c5a      	adds	r2, r3, #1
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	3b01      	subs	r3, #1
 800df80:	b29a      	uxth	r2, r3
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800df86:	e09e      	b.n	800e0c6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	689b      	ldr	r3, [r3, #8]
 800df8e:	f003 0302 	and.w	r3, r3, #2
 800df92:	2b02      	cmp	r3, #2
 800df94:	d134      	bne.n	800e000 <HAL_SPI_TransmitReceive+0x30a>
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df9a:	b29b      	uxth	r3, r3
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d02f      	beq.n	800e000 <HAL_SPI_TransmitReceive+0x30a>
 800dfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	d12c      	bne.n	800e000 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	2b01      	cmp	r3, #1
 800dfae:	d912      	bls.n	800dfd6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb4:	881a      	ldrh	r2, [r3, #0]
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfc0:	1c9a      	adds	r2, r3, #2
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	3b02      	subs	r3, #2
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dfd4:	e012      	b.n	800dffc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	330c      	adds	r3, #12
 800dfe0:	7812      	ldrb	r2, [r2, #0]
 800dfe2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfe8:	1c5a      	adds	r2, r3, #1
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	3b01      	subs	r3, #1
 800dff6:	b29a      	uxth	r2, r3
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dffc:	2300      	movs	r3, #0
 800dffe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	689b      	ldr	r3, [r3, #8]
 800e006:	f003 0301 	and.w	r3, r3, #1
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d148      	bne.n	800e0a0 <HAL_SPI_TransmitReceive+0x3aa>
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e014:	b29b      	uxth	r3, r3
 800e016:	2b00      	cmp	r3, #0
 800e018:	d042      	beq.n	800e0a0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e020:	b29b      	uxth	r3, r3
 800e022:	2b01      	cmp	r3, #1
 800e024:	d923      	bls.n	800e06e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	68da      	ldr	r2, [r3, #12]
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e030:	b292      	uxth	r2, r2
 800e032:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e038:	1c9a      	adds	r2, r3, #2
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e044:	b29b      	uxth	r3, r3
 800e046:	3b02      	subs	r3, #2
 800e048:	b29a      	uxth	r2, r3
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e056:	b29b      	uxth	r3, r3
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d81f      	bhi.n	800e09c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	685a      	ldr	r2, [r3, #4]
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e06a:	605a      	str	r2, [r3, #4]
 800e06c:	e016      	b.n	800e09c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f103 020c 	add.w	r2, r3, #12
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e07a:	7812      	ldrb	r2, [r2, #0]
 800e07c:	b2d2      	uxtb	r2, r2
 800e07e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e084:	1c5a      	adds	r2, r3, #1
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e090:	b29b      	uxth	r3, r3
 800e092:	3b01      	subs	r3, #1
 800e094:	b29a      	uxth	r2, r3
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e09c:	2301      	movs	r3, #1
 800e09e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e0a0:	f7fc fdc8 	bl	800ac34 <HAL_GetTick>
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	1ad3      	subs	r3, r2, r3
 800e0aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d803      	bhi.n	800e0b8 <HAL_SPI_TransmitReceive+0x3c2>
 800e0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0b6:	d102      	bne.n	800e0be <HAL_SPI_TransmitReceive+0x3c8>
 800e0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d103      	bne.n	800e0c6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800e0be:	2303      	movs	r3, #3
 800e0c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e0c4:	e01c      	b.n	800e100 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	f47f af5b 	bne.w	800df88 <HAL_SPI_TransmitReceive+0x292>
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	f47f af54 	bne.w	800df88 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e0e0:	69fa      	ldr	r2, [r7, #28]
 800e0e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f000 f9b3 	bl	800e450 <SPI_EndRxTxTransaction>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d006      	beq.n	800e0fe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	2220      	movs	r2, #32
 800e0fa:	661a      	str	r2, [r3, #96]	; 0x60
 800e0fc:	e000      	b.n	800e100 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800e0fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	2201      	movs	r2, #1
 800e104:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	2200      	movs	r2, #0
 800e10c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e110:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800e114:	4618      	mov	r0, r3
 800e116:	3728      	adds	r7, #40	; 0x28
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b088      	sub	sp, #32
 800e120:	af00      	add	r7, sp, #0
 800e122:	60f8      	str	r0, [r7, #12]
 800e124:	60b9      	str	r1, [r7, #8]
 800e126:	603b      	str	r3, [r7, #0]
 800e128:	4613      	mov	r3, r2
 800e12a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e12c:	f7fc fd82 	bl	800ac34 <HAL_GetTick>
 800e130:	4602      	mov	r2, r0
 800e132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e134:	1a9b      	subs	r3, r3, r2
 800e136:	683a      	ldr	r2, [r7, #0]
 800e138:	4413      	add	r3, r2
 800e13a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e13c:	f7fc fd7a 	bl	800ac34 <HAL_GetTick>
 800e140:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e142:	4b39      	ldr	r3, [pc, #228]	; (800e228 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	015b      	lsls	r3, r3, #5
 800e148:	0d1b      	lsrs	r3, r3, #20
 800e14a:	69fa      	ldr	r2, [r7, #28]
 800e14c:	fb02 f303 	mul.w	r3, r2, r3
 800e150:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e152:	e054      	b.n	800e1fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e15a:	d050      	beq.n	800e1fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e15c:	f7fc fd6a 	bl	800ac34 <HAL_GetTick>
 800e160:	4602      	mov	r2, r0
 800e162:	69bb      	ldr	r3, [r7, #24]
 800e164:	1ad3      	subs	r3, r2, r3
 800e166:	69fa      	ldr	r2, [r7, #28]
 800e168:	429a      	cmp	r2, r3
 800e16a:	d902      	bls.n	800e172 <SPI_WaitFlagStateUntilTimeout+0x56>
 800e16c:	69fb      	ldr	r3, [r7, #28]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d13d      	bne.n	800e1ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	685a      	ldr	r2, [r3, #4]
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e180:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	685b      	ldr	r3, [r3, #4]
 800e186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e18a:	d111      	bne.n	800e1b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	689b      	ldr	r3, [r3, #8]
 800e190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e194:	d004      	beq.n	800e1a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	689b      	ldr	r3, [r3, #8]
 800e19a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e19e:	d107      	bne.n	800e1b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	681a      	ldr	r2, [r3, #0]
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e1b8:	d10f      	bne.n	800e1da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e1c8:	601a      	str	r2, [r3, #0]
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e1d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	2201      	movs	r2, #1
 800e1de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e1ea:	2303      	movs	r3, #3
 800e1ec:	e017      	b.n	800e21e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d101      	bne.n	800e1f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	3b01      	subs	r3, #1
 800e1fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	689a      	ldr	r2, [r3, #8]
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	4013      	ands	r3, r2
 800e208:	68ba      	ldr	r2, [r7, #8]
 800e20a:	429a      	cmp	r2, r3
 800e20c:	bf0c      	ite	eq
 800e20e:	2301      	moveq	r3, #1
 800e210:	2300      	movne	r3, #0
 800e212:	b2db      	uxtb	r3, r3
 800e214:	461a      	mov	r2, r3
 800e216:	79fb      	ldrb	r3, [r7, #7]
 800e218:	429a      	cmp	r2, r3
 800e21a:	d19b      	bne.n	800e154 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e21c:	2300      	movs	r3, #0
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3720      	adds	r7, #32
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	20000008 	.word	0x20000008

0800e22c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b08a      	sub	sp, #40	; 0x28
 800e230:	af00      	add	r7, sp, #0
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	60b9      	str	r1, [r7, #8]
 800e236:	607a      	str	r2, [r7, #4]
 800e238:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e23a:	2300      	movs	r3, #0
 800e23c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e23e:	f7fc fcf9 	bl	800ac34 <HAL_GetTick>
 800e242:	4602      	mov	r2, r0
 800e244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e246:	1a9b      	subs	r3, r3, r2
 800e248:	683a      	ldr	r2, [r7, #0]
 800e24a:	4413      	add	r3, r2
 800e24c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800e24e:	f7fc fcf1 	bl	800ac34 <HAL_GetTick>
 800e252:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	330c      	adds	r3, #12
 800e25a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e25c:	4b3d      	ldr	r3, [pc, #244]	; (800e354 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800e25e:	681a      	ldr	r2, [r3, #0]
 800e260:	4613      	mov	r3, r2
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	4413      	add	r3, r2
 800e266:	00da      	lsls	r2, r3, #3
 800e268:	1ad3      	subs	r3, r2, r3
 800e26a:	0d1b      	lsrs	r3, r3, #20
 800e26c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e26e:	fb02 f303 	mul.w	r3, r2, r3
 800e272:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800e274:	e060      	b.n	800e338 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e27c:	d107      	bne.n	800e28e <SPI_WaitFifoStateUntilTimeout+0x62>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d104      	bne.n	800e28e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e284:	69fb      	ldr	r3, [r7, #28]
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	b2db      	uxtb	r3, r3
 800e28a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e28c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e294:	d050      	beq.n	800e338 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e296:	f7fc fccd 	bl	800ac34 <HAL_GetTick>
 800e29a:	4602      	mov	r2, r0
 800e29c:	6a3b      	ldr	r3, [r7, #32]
 800e29e:	1ad3      	subs	r3, r2, r3
 800e2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d902      	bls.n	800e2ac <SPI_WaitFifoStateUntilTimeout+0x80>
 800e2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d13d      	bne.n	800e328 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	685a      	ldr	r2, [r3, #4]
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e2ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	685b      	ldr	r3, [r3, #4]
 800e2c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e2c4:	d111      	bne.n	800e2ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	689b      	ldr	r3, [r3, #8]
 800e2ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2ce:	d004      	beq.n	800e2da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	689b      	ldr	r3, [r3, #8]
 800e2d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e2d8:	d107      	bne.n	800e2ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	681a      	ldr	r2, [r3, #0]
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e2e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e2f2:	d10f      	bne.n	800e314 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	681a      	ldr	r2, [r3, #0]
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e302:	601a      	str	r2, [r3, #0]
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	681a      	ldr	r2, [r3, #0]
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e312:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2201      	movs	r2, #1
 800e318:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	2200      	movs	r2, #0
 800e320:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e324:	2303      	movs	r3, #3
 800e326:	e010      	b.n	800e34a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e328:	69bb      	ldr	r3, [r7, #24]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d101      	bne.n	800e332 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800e32e:	2300      	movs	r3, #0
 800e330:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800e332:	69bb      	ldr	r3, [r7, #24]
 800e334:	3b01      	subs	r3, #1
 800e336:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	689a      	ldr	r2, [r3, #8]
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	4013      	ands	r3, r2
 800e342:	687a      	ldr	r2, [r7, #4]
 800e344:	429a      	cmp	r2, r3
 800e346:	d196      	bne.n	800e276 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800e348:	2300      	movs	r3, #0
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3728      	adds	r7, #40	; 0x28
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
 800e352:	bf00      	nop
 800e354:	20000008 	.word	0x20000008

0800e358 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b088      	sub	sp, #32
 800e35c:	af02      	add	r7, sp, #8
 800e35e:	60f8      	str	r0, [r7, #12]
 800e360:	60b9      	str	r1, [r7, #8]
 800e362:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e36c:	d111      	bne.n	800e392 <SPI_EndRxTransaction+0x3a>
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	689b      	ldr	r3, [r3, #8]
 800e372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e376:	d004      	beq.n	800e382 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	689b      	ldr	r3, [r3, #8]
 800e37c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e380:	d107      	bne.n	800e392 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	681a      	ldr	r2, [r3, #0]
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e390:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e39a:	d112      	bne.n	800e3c2 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	9300      	str	r3, [sp, #0]
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	2180      	movs	r1, #128	; 0x80
 800e3a6:	68f8      	ldr	r0, [r7, #12]
 800e3a8:	f7ff feb8 	bl	800e11c <SPI_WaitFlagStateUntilTimeout>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d021      	beq.n	800e3f6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3b6:	f043 0220 	orr.w	r2, r3, #32
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800e3be:	2303      	movs	r3, #3
 800e3c0:	e03d      	b.n	800e43e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e3c2:	4b21      	ldr	r3, [pc, #132]	; (800e448 <SPI_EndRxTransaction+0xf0>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	4a21      	ldr	r2, [pc, #132]	; (800e44c <SPI_EndRxTransaction+0xf4>)
 800e3c8:	fba2 2303 	umull	r2, r3, r2, r3
 800e3cc:	0d5b      	lsrs	r3, r3, #21
 800e3ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e3d2:	fb02 f303 	mul.w	r3, r2, r3
 800e3d6:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d00a      	beq.n	800e3f4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	3b01      	subs	r3, #1
 800e3e2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	689b      	ldr	r3, [r3, #8]
 800e3ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3ee:	2b80      	cmp	r3, #128	; 0x80
 800e3f0:	d0f2      	beq.n	800e3d8 <SPI_EndRxTransaction+0x80>
 800e3f2:	e000      	b.n	800e3f6 <SPI_EndRxTransaction+0x9e>
        break;
 800e3f4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e3fe:	d11d      	bne.n	800e43c <SPI_EndRxTransaction+0xe4>
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	689b      	ldr	r3, [r3, #8]
 800e404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e408:	d004      	beq.n	800e414 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	689b      	ldr	r3, [r3, #8]
 800e40e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e412:	d113      	bne.n	800e43c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	9300      	str	r3, [sp, #0]
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	2200      	movs	r2, #0
 800e41c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e420:	68f8      	ldr	r0, [r7, #12]
 800e422:	f7ff ff03 	bl	800e22c <SPI_WaitFifoStateUntilTimeout>
 800e426:	4603      	mov	r3, r0
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d007      	beq.n	800e43c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e430:	f043 0220 	orr.w	r2, r3, #32
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800e438:	2303      	movs	r3, #3
 800e43a:	e000      	b.n	800e43e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800e43c:	2300      	movs	r3, #0
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3718      	adds	r7, #24
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	20000008 	.word	0x20000008
 800e44c:	165e9f81 	.word	0x165e9f81

0800e450 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b088      	sub	sp, #32
 800e454:	af02      	add	r7, sp, #8
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	9300      	str	r3, [sp, #0]
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	2200      	movs	r2, #0
 800e464:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e468:	68f8      	ldr	r0, [r7, #12]
 800e46a:	f7ff fedf 	bl	800e22c <SPI_WaitFifoStateUntilTimeout>
 800e46e:	4603      	mov	r3, r0
 800e470:	2b00      	cmp	r3, #0
 800e472:	d007      	beq.n	800e484 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e478:	f043 0220 	orr.w	r2, r3, #32
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e480:	2303      	movs	r3, #3
 800e482:	e046      	b.n	800e512 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e484:	4b25      	ldr	r3, [pc, #148]	; (800e51c <SPI_EndRxTxTransaction+0xcc>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	4a25      	ldr	r2, [pc, #148]	; (800e520 <SPI_EndRxTxTransaction+0xd0>)
 800e48a:	fba2 2303 	umull	r2, r3, r2, r3
 800e48e:	0d5b      	lsrs	r3, r3, #21
 800e490:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e494:	fb02 f303 	mul.w	r3, r2, r3
 800e498:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e4a2:	d112      	bne.n	800e4ca <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	9300      	str	r3, [sp, #0]
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	2180      	movs	r1, #128	; 0x80
 800e4ae:	68f8      	ldr	r0, [r7, #12]
 800e4b0:	f7ff fe34 	bl	800e11c <SPI_WaitFlagStateUntilTimeout>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d016      	beq.n	800e4e8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e4be:	f043 0220 	orr.w	r2, r3, #32
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800e4c6:	2303      	movs	r3, #3
 800e4c8:	e023      	b.n	800e512 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d00a      	beq.n	800e4e6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	3b01      	subs	r3, #1
 800e4d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	689b      	ldr	r3, [r3, #8]
 800e4dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4e0:	2b80      	cmp	r3, #128	; 0x80
 800e4e2:	d0f2      	beq.n	800e4ca <SPI_EndRxTxTransaction+0x7a>
 800e4e4:	e000      	b.n	800e4e8 <SPI_EndRxTxTransaction+0x98>
        break;
 800e4e6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	9300      	str	r3, [sp, #0]
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e4f4:	68f8      	ldr	r0, [r7, #12]
 800e4f6:	f7ff fe99 	bl	800e22c <SPI_WaitFifoStateUntilTimeout>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d007      	beq.n	800e510 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e504:	f043 0220 	orr.w	r2, r3, #32
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e50c:	2303      	movs	r3, #3
 800e50e:	e000      	b.n	800e512 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800e510:	2300      	movs	r3, #0
}
 800e512:	4618      	mov	r0, r3
 800e514:	3718      	adds	r7, #24
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}
 800e51a:	bf00      	nop
 800e51c:	20000008 	.word	0x20000008
 800e520:	165e9f81 	.word	0x165e9f81

0800e524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d101      	bne.n	800e536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e532:	2301      	movs	r3, #1
 800e534:	e049      	b.n	800e5ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d106      	bne.n	800e550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2200      	movs	r2, #0
 800e546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f7f8 f908 	bl	8006760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2202      	movs	r2, #2
 800e554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	3304      	adds	r3, #4
 800e560:	4619      	mov	r1, r3
 800e562:	4610      	mov	r0, r2
 800e564:	f000 ffae 	bl	800f4c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2201      	movs	r2, #1
 800e56c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2201      	movs	r2, #1
 800e574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2201      	movs	r2, #1
 800e57c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2201      	movs	r2, #1
 800e584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2201      	movs	r2, #1
 800e58c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2201      	movs	r2, #1
 800e594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2201      	movs	r2, #1
 800e59c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e5c8:	2300      	movs	r3, #0
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3708      	adds	r7, #8
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}
	...

0800e5d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b085      	sub	sp, #20
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e5e2:	b2db      	uxtb	r3, r3
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	d001      	beq.n	800e5ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	e054      	b.n	800e696 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2202      	movs	r2, #2
 800e5f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	68da      	ldr	r2, [r3, #12]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f042 0201 	orr.w	r2, r2, #1
 800e602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4a26      	ldr	r2, [pc, #152]	; (800e6a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d022      	beq.n	800e654 <HAL_TIM_Base_Start_IT+0x80>
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e616:	d01d      	beq.n	800e654 <HAL_TIM_Base_Start_IT+0x80>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4a22      	ldr	r2, [pc, #136]	; (800e6a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d018      	beq.n	800e654 <HAL_TIM_Base_Start_IT+0x80>
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	4a21      	ldr	r2, [pc, #132]	; (800e6ac <HAL_TIM_Base_Start_IT+0xd8>)
 800e628:	4293      	cmp	r3, r2
 800e62a:	d013      	beq.n	800e654 <HAL_TIM_Base_Start_IT+0x80>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4a1f      	ldr	r2, [pc, #124]	; (800e6b0 <HAL_TIM_Base_Start_IT+0xdc>)
 800e632:	4293      	cmp	r3, r2
 800e634:	d00e      	beq.n	800e654 <HAL_TIM_Base_Start_IT+0x80>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	4a1e      	ldr	r2, [pc, #120]	; (800e6b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d009      	beq.n	800e654 <HAL_TIM_Base_Start_IT+0x80>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4a1c      	ldr	r2, [pc, #112]	; (800e6b8 <HAL_TIM_Base_Start_IT+0xe4>)
 800e646:	4293      	cmp	r3, r2
 800e648:	d004      	beq.n	800e654 <HAL_TIM_Base_Start_IT+0x80>
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	4a1b      	ldr	r2, [pc, #108]	; (800e6bc <HAL_TIM_Base_Start_IT+0xe8>)
 800e650:	4293      	cmp	r3, r2
 800e652:	d115      	bne.n	800e680 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	689a      	ldr	r2, [r3, #8]
 800e65a:	4b19      	ldr	r3, [pc, #100]	; (800e6c0 <HAL_TIM_Base_Start_IT+0xec>)
 800e65c:	4013      	ands	r3, r2
 800e65e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	2b06      	cmp	r3, #6
 800e664:	d015      	beq.n	800e692 <HAL_TIM_Base_Start_IT+0xbe>
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e66c:	d011      	beq.n	800e692 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	681a      	ldr	r2, [r3, #0]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f042 0201 	orr.w	r2, r2, #1
 800e67c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e67e:	e008      	b.n	800e692 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f042 0201 	orr.w	r2, r2, #1
 800e68e:	601a      	str	r2, [r3, #0]
 800e690:	e000      	b.n	800e694 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e692:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e694:	2300      	movs	r3, #0
}
 800e696:	4618      	mov	r0, r3
 800e698:	3714      	adds	r7, #20
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop
 800e6a4:	40010000 	.word	0x40010000
 800e6a8:	40000400 	.word	0x40000400
 800e6ac:	40000800 	.word	0x40000800
 800e6b0:	40000c00 	.word	0x40000c00
 800e6b4:	40010400 	.word	0x40010400
 800e6b8:	40014000 	.word	0x40014000
 800e6bc:	40001800 	.word	0x40001800
 800e6c0:	00010007 	.word	0x00010007

0800e6c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d101      	bne.n	800e6d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	e049      	b.n	800e76a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6dc:	b2db      	uxtb	r3, r3
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d106      	bne.n	800e6f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f000 f841 	bl	800e772 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2202      	movs	r2, #2
 800e6f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	3304      	adds	r3, #4
 800e700:	4619      	mov	r1, r3
 800e702:	4610      	mov	r0, r2
 800e704:	f000 fede 	bl	800f4c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2201      	movs	r2, #1
 800e70c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2201      	movs	r2, #1
 800e714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2201      	movs	r2, #1
 800e71c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2201      	movs	r2, #1
 800e724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2201      	movs	r2, #1
 800e72c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2201      	movs	r2, #1
 800e734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2201      	movs	r2, #1
 800e73c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2201      	movs	r2, #1
 800e744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2201      	movs	r2, #1
 800e74c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2201      	movs	r2, #1
 800e754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2201      	movs	r2, #1
 800e75c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2201      	movs	r2, #1
 800e764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e768:	2300      	movs	r3, #0
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	3708      	adds	r7, #8
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}

0800e772 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e772:	b480      	push	{r7}
 800e774:	b083      	sub	sp, #12
 800e776:	af00      	add	r7, sp, #0
 800e778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e77a:	bf00      	nop
 800e77c:	370c      	adds	r7, #12
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr
	...

0800e788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b084      	sub	sp, #16
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d109      	bne.n	800e7ac <HAL_TIM_PWM_Start+0x24>
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	bf14      	ite	ne
 800e7a4:	2301      	movne	r3, #1
 800e7a6:	2300      	moveq	r3, #0
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	e03c      	b.n	800e826 <HAL_TIM_PWM_Start+0x9e>
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	2b04      	cmp	r3, #4
 800e7b0:	d109      	bne.n	800e7c6 <HAL_TIM_PWM_Start+0x3e>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e7b8:	b2db      	uxtb	r3, r3
 800e7ba:	2b01      	cmp	r3, #1
 800e7bc:	bf14      	ite	ne
 800e7be:	2301      	movne	r3, #1
 800e7c0:	2300      	moveq	r3, #0
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	e02f      	b.n	800e826 <HAL_TIM_PWM_Start+0x9e>
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	2b08      	cmp	r3, #8
 800e7ca:	d109      	bne.n	800e7e0 <HAL_TIM_PWM_Start+0x58>
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	bf14      	ite	ne
 800e7d8:	2301      	movne	r3, #1
 800e7da:	2300      	moveq	r3, #0
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	e022      	b.n	800e826 <HAL_TIM_PWM_Start+0x9e>
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	2b0c      	cmp	r3, #12
 800e7e4:	d109      	bne.n	800e7fa <HAL_TIM_PWM_Start+0x72>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e7ec:	b2db      	uxtb	r3, r3
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	bf14      	ite	ne
 800e7f2:	2301      	movne	r3, #1
 800e7f4:	2300      	moveq	r3, #0
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	e015      	b.n	800e826 <HAL_TIM_PWM_Start+0x9e>
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	2b10      	cmp	r3, #16
 800e7fe:	d109      	bne.n	800e814 <HAL_TIM_PWM_Start+0x8c>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e806:	b2db      	uxtb	r3, r3
 800e808:	2b01      	cmp	r3, #1
 800e80a:	bf14      	ite	ne
 800e80c:	2301      	movne	r3, #1
 800e80e:	2300      	moveq	r3, #0
 800e810:	b2db      	uxtb	r3, r3
 800e812:	e008      	b.n	800e826 <HAL_TIM_PWM_Start+0x9e>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e81a:	b2db      	uxtb	r3, r3
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	bf14      	ite	ne
 800e820:	2301      	movne	r3, #1
 800e822:	2300      	moveq	r3, #0
 800e824:	b2db      	uxtb	r3, r3
 800e826:	2b00      	cmp	r3, #0
 800e828:	d001      	beq.n	800e82e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e82a:	2301      	movs	r3, #1
 800e82c:	e092      	b.n	800e954 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d104      	bne.n	800e83e <HAL_TIM_PWM_Start+0xb6>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2202      	movs	r2, #2
 800e838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e83c:	e023      	b.n	800e886 <HAL_TIM_PWM_Start+0xfe>
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	2b04      	cmp	r3, #4
 800e842:	d104      	bne.n	800e84e <HAL_TIM_PWM_Start+0xc6>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2202      	movs	r2, #2
 800e848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e84c:	e01b      	b.n	800e886 <HAL_TIM_PWM_Start+0xfe>
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	2b08      	cmp	r3, #8
 800e852:	d104      	bne.n	800e85e <HAL_TIM_PWM_Start+0xd6>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2202      	movs	r2, #2
 800e858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e85c:	e013      	b.n	800e886 <HAL_TIM_PWM_Start+0xfe>
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	2b0c      	cmp	r3, #12
 800e862:	d104      	bne.n	800e86e <HAL_TIM_PWM_Start+0xe6>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2202      	movs	r2, #2
 800e868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e86c:	e00b      	b.n	800e886 <HAL_TIM_PWM_Start+0xfe>
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	2b10      	cmp	r3, #16
 800e872:	d104      	bne.n	800e87e <HAL_TIM_PWM_Start+0xf6>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2202      	movs	r2, #2
 800e878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e87c:	e003      	b.n	800e886 <HAL_TIM_PWM_Start+0xfe>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2202      	movs	r2, #2
 800e882:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	2201      	movs	r2, #1
 800e88c:	6839      	ldr	r1, [r7, #0]
 800e88e:	4618      	mov	r0, r3
 800e890:	f001 fada 	bl	800fe48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4a30      	ldr	r2, [pc, #192]	; (800e95c <HAL_TIM_PWM_Start+0x1d4>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d004      	beq.n	800e8a8 <HAL_TIM_PWM_Start+0x120>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4a2f      	ldr	r2, [pc, #188]	; (800e960 <HAL_TIM_PWM_Start+0x1d8>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d101      	bne.n	800e8ac <HAL_TIM_PWM_Start+0x124>
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	e000      	b.n	800e8ae <HAL_TIM_PWM_Start+0x126>
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d007      	beq.n	800e8c2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e8c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4a25      	ldr	r2, [pc, #148]	; (800e95c <HAL_TIM_PWM_Start+0x1d4>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d022      	beq.n	800e912 <HAL_TIM_PWM_Start+0x18a>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8d4:	d01d      	beq.n	800e912 <HAL_TIM_PWM_Start+0x18a>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4a22      	ldr	r2, [pc, #136]	; (800e964 <HAL_TIM_PWM_Start+0x1dc>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d018      	beq.n	800e912 <HAL_TIM_PWM_Start+0x18a>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	4a20      	ldr	r2, [pc, #128]	; (800e968 <HAL_TIM_PWM_Start+0x1e0>)
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d013      	beq.n	800e912 <HAL_TIM_PWM_Start+0x18a>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	4a1f      	ldr	r2, [pc, #124]	; (800e96c <HAL_TIM_PWM_Start+0x1e4>)
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d00e      	beq.n	800e912 <HAL_TIM_PWM_Start+0x18a>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	4a19      	ldr	r2, [pc, #100]	; (800e960 <HAL_TIM_PWM_Start+0x1d8>)
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d009      	beq.n	800e912 <HAL_TIM_PWM_Start+0x18a>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	4a1b      	ldr	r2, [pc, #108]	; (800e970 <HAL_TIM_PWM_Start+0x1e8>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d004      	beq.n	800e912 <HAL_TIM_PWM_Start+0x18a>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	4a19      	ldr	r2, [pc, #100]	; (800e974 <HAL_TIM_PWM_Start+0x1ec>)
 800e90e:	4293      	cmp	r3, r2
 800e910:	d115      	bne.n	800e93e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	689a      	ldr	r2, [r3, #8]
 800e918:	4b17      	ldr	r3, [pc, #92]	; (800e978 <HAL_TIM_PWM_Start+0x1f0>)
 800e91a:	4013      	ands	r3, r2
 800e91c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	2b06      	cmp	r3, #6
 800e922:	d015      	beq.n	800e950 <HAL_TIM_PWM_Start+0x1c8>
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e92a:	d011      	beq.n	800e950 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	681a      	ldr	r2, [r3, #0]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f042 0201 	orr.w	r2, r2, #1
 800e93a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e93c:	e008      	b.n	800e950 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	681a      	ldr	r2, [r3, #0]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f042 0201 	orr.w	r2, r2, #1
 800e94c:	601a      	str	r2, [r3, #0]
 800e94e:	e000      	b.n	800e952 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e950:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e952:	2300      	movs	r3, #0
}
 800e954:	4618      	mov	r0, r3
 800e956:	3710      	adds	r7, #16
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}
 800e95c:	40010000 	.word	0x40010000
 800e960:	40010400 	.word	0x40010400
 800e964:	40000400 	.word	0x40000400
 800e968:	40000800 	.word	0x40000800
 800e96c:	40000c00 	.word	0x40000c00
 800e970:	40014000 	.word	0x40014000
 800e974:	40001800 	.word	0x40001800
 800e978:	00010007 	.word	0x00010007

0800e97c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d101      	bne.n	800e98e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e98a:	2301      	movs	r3, #1
 800e98c:	e049      	b.n	800ea22 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e994:	b2db      	uxtb	r3, r3
 800e996:	2b00      	cmp	r3, #0
 800e998:	d106      	bne.n	800e9a8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2200      	movs	r2, #0
 800e99e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f7f7 fefc 	bl	80067a0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2202      	movs	r2, #2
 800e9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	3304      	adds	r3, #4
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	4610      	mov	r0, r2
 800e9bc:	f000 fd82 	bl	800f4c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2201      	movs	r2, #1
 800e9dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2201      	movs	r2, #1
 800ea04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2201      	movs	r2, #1
 800ea14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ea20:	2300      	movs	r3, #0
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3708      	adds	r7, #8
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
	...

0800ea2c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b084      	sub	sp, #16
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ea36:	2300      	movs	r3, #0
 800ea38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d104      	bne.n	800ea4a <HAL_TIM_IC_Start_IT+0x1e>
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ea46:	b2db      	uxtb	r3, r3
 800ea48:	e023      	b.n	800ea92 <HAL_TIM_IC_Start_IT+0x66>
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	2b04      	cmp	r3, #4
 800ea4e:	d104      	bne.n	800ea5a <HAL_TIM_IC_Start_IT+0x2e>
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	e01b      	b.n	800ea92 <HAL_TIM_IC_Start_IT+0x66>
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	2b08      	cmp	r3, #8
 800ea5e:	d104      	bne.n	800ea6a <HAL_TIM_IC_Start_IT+0x3e>
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ea66:	b2db      	uxtb	r3, r3
 800ea68:	e013      	b.n	800ea92 <HAL_TIM_IC_Start_IT+0x66>
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	2b0c      	cmp	r3, #12
 800ea6e:	d104      	bne.n	800ea7a <HAL_TIM_IC_Start_IT+0x4e>
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ea76:	b2db      	uxtb	r3, r3
 800ea78:	e00b      	b.n	800ea92 <HAL_TIM_IC_Start_IT+0x66>
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	2b10      	cmp	r3, #16
 800ea7e:	d104      	bne.n	800ea8a <HAL_TIM_IC_Start_IT+0x5e>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ea86:	b2db      	uxtb	r3, r3
 800ea88:	e003      	b.n	800ea92 <HAL_TIM_IC_Start_IT+0x66>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ea90:	b2db      	uxtb	r3, r3
 800ea92:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d104      	bne.n	800eaa4 <HAL_TIM_IC_Start_IT+0x78>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eaa0:	b2db      	uxtb	r3, r3
 800eaa2:	e013      	b.n	800eacc <HAL_TIM_IC_Start_IT+0xa0>
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	2b04      	cmp	r3, #4
 800eaa8:	d104      	bne.n	800eab4 <HAL_TIM_IC_Start_IT+0x88>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eab0:	b2db      	uxtb	r3, r3
 800eab2:	e00b      	b.n	800eacc <HAL_TIM_IC_Start_IT+0xa0>
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	2b08      	cmp	r3, #8
 800eab8:	d104      	bne.n	800eac4 <HAL_TIM_IC_Start_IT+0x98>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800eac0:	b2db      	uxtb	r3, r3
 800eac2:	e003      	b.n	800eacc <HAL_TIM_IC_Start_IT+0xa0>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800eaca:	b2db      	uxtb	r3, r3
 800eacc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800eace:	7bbb      	ldrb	r3, [r7, #14]
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	d102      	bne.n	800eada <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800ead4:	7b7b      	ldrb	r3, [r7, #13]
 800ead6:	2b01      	cmp	r3, #1
 800ead8:	d001      	beq.n	800eade <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800eada:	2301      	movs	r3, #1
 800eadc:	e0e2      	b.n	800eca4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d104      	bne.n	800eaee <HAL_TIM_IC_Start_IT+0xc2>
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2202      	movs	r2, #2
 800eae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eaec:	e023      	b.n	800eb36 <HAL_TIM_IC_Start_IT+0x10a>
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	2b04      	cmp	r3, #4
 800eaf2:	d104      	bne.n	800eafe <HAL_TIM_IC_Start_IT+0xd2>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2202      	movs	r2, #2
 800eaf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eafc:	e01b      	b.n	800eb36 <HAL_TIM_IC_Start_IT+0x10a>
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	2b08      	cmp	r3, #8
 800eb02:	d104      	bne.n	800eb0e <HAL_TIM_IC_Start_IT+0xe2>
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2202      	movs	r2, #2
 800eb08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb0c:	e013      	b.n	800eb36 <HAL_TIM_IC_Start_IT+0x10a>
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	2b0c      	cmp	r3, #12
 800eb12:	d104      	bne.n	800eb1e <HAL_TIM_IC_Start_IT+0xf2>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2202      	movs	r2, #2
 800eb18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb1c:	e00b      	b.n	800eb36 <HAL_TIM_IC_Start_IT+0x10a>
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	2b10      	cmp	r3, #16
 800eb22:	d104      	bne.n	800eb2e <HAL_TIM_IC_Start_IT+0x102>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2202      	movs	r2, #2
 800eb28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eb2c:	e003      	b.n	800eb36 <HAL_TIM_IC_Start_IT+0x10a>
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2202      	movs	r2, #2
 800eb32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d104      	bne.n	800eb46 <HAL_TIM_IC_Start_IT+0x11a>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2202      	movs	r2, #2
 800eb40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb44:	e013      	b.n	800eb6e <HAL_TIM_IC_Start_IT+0x142>
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	2b04      	cmp	r3, #4
 800eb4a:	d104      	bne.n	800eb56 <HAL_TIM_IC_Start_IT+0x12a>
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2202      	movs	r2, #2
 800eb50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb54:	e00b      	b.n	800eb6e <HAL_TIM_IC_Start_IT+0x142>
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	2b08      	cmp	r3, #8
 800eb5a:	d104      	bne.n	800eb66 <HAL_TIM_IC_Start_IT+0x13a>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2202      	movs	r2, #2
 800eb60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eb64:	e003      	b.n	800eb6e <HAL_TIM_IC_Start_IT+0x142>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2202      	movs	r2, #2
 800eb6a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	2b0c      	cmp	r3, #12
 800eb72:	d841      	bhi.n	800ebf8 <HAL_TIM_IC_Start_IT+0x1cc>
 800eb74:	a201      	add	r2, pc, #4	; (adr r2, 800eb7c <HAL_TIM_IC_Start_IT+0x150>)
 800eb76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb7a:	bf00      	nop
 800eb7c:	0800ebb1 	.word	0x0800ebb1
 800eb80:	0800ebf9 	.word	0x0800ebf9
 800eb84:	0800ebf9 	.word	0x0800ebf9
 800eb88:	0800ebf9 	.word	0x0800ebf9
 800eb8c:	0800ebc3 	.word	0x0800ebc3
 800eb90:	0800ebf9 	.word	0x0800ebf9
 800eb94:	0800ebf9 	.word	0x0800ebf9
 800eb98:	0800ebf9 	.word	0x0800ebf9
 800eb9c:	0800ebd5 	.word	0x0800ebd5
 800eba0:	0800ebf9 	.word	0x0800ebf9
 800eba4:	0800ebf9 	.word	0x0800ebf9
 800eba8:	0800ebf9 	.word	0x0800ebf9
 800ebac:	0800ebe7 	.word	0x0800ebe7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	68da      	ldr	r2, [r3, #12]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f042 0202 	orr.w	r2, r2, #2
 800ebbe:	60da      	str	r2, [r3, #12]
      break;
 800ebc0:	e01d      	b.n	800ebfe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	68da      	ldr	r2, [r3, #12]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f042 0204 	orr.w	r2, r2, #4
 800ebd0:	60da      	str	r2, [r3, #12]
      break;
 800ebd2:	e014      	b.n	800ebfe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	68da      	ldr	r2, [r3, #12]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f042 0208 	orr.w	r2, r2, #8
 800ebe2:	60da      	str	r2, [r3, #12]
      break;
 800ebe4:	e00b      	b.n	800ebfe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	68da      	ldr	r2, [r3, #12]
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f042 0210 	orr.w	r2, r2, #16
 800ebf4:	60da      	str	r2, [r3, #12]
      break;
 800ebf6:	e002      	b.n	800ebfe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	73fb      	strb	r3, [r7, #15]
      break;
 800ebfc:	bf00      	nop
  }

  if (status == HAL_OK)
 800ebfe:	7bfb      	ldrb	r3, [r7, #15]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d14e      	bne.n	800eca2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	2201      	movs	r2, #1
 800ec0a:	6839      	ldr	r1, [r7, #0]
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f001 f91b 	bl	800fe48 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	4a25      	ldr	r2, [pc, #148]	; (800ecac <HAL_TIM_IC_Start_IT+0x280>)
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d022      	beq.n	800ec62 <HAL_TIM_IC_Start_IT+0x236>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec24:	d01d      	beq.n	800ec62 <HAL_TIM_IC_Start_IT+0x236>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	4a21      	ldr	r2, [pc, #132]	; (800ecb0 <HAL_TIM_IC_Start_IT+0x284>)
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	d018      	beq.n	800ec62 <HAL_TIM_IC_Start_IT+0x236>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	4a1f      	ldr	r2, [pc, #124]	; (800ecb4 <HAL_TIM_IC_Start_IT+0x288>)
 800ec36:	4293      	cmp	r3, r2
 800ec38:	d013      	beq.n	800ec62 <HAL_TIM_IC_Start_IT+0x236>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	4a1e      	ldr	r2, [pc, #120]	; (800ecb8 <HAL_TIM_IC_Start_IT+0x28c>)
 800ec40:	4293      	cmp	r3, r2
 800ec42:	d00e      	beq.n	800ec62 <HAL_TIM_IC_Start_IT+0x236>
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4a1c      	ldr	r2, [pc, #112]	; (800ecbc <HAL_TIM_IC_Start_IT+0x290>)
 800ec4a:	4293      	cmp	r3, r2
 800ec4c:	d009      	beq.n	800ec62 <HAL_TIM_IC_Start_IT+0x236>
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	4a1b      	ldr	r2, [pc, #108]	; (800ecc0 <HAL_TIM_IC_Start_IT+0x294>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d004      	beq.n	800ec62 <HAL_TIM_IC_Start_IT+0x236>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	4a19      	ldr	r2, [pc, #100]	; (800ecc4 <HAL_TIM_IC_Start_IT+0x298>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d115      	bne.n	800ec8e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	689a      	ldr	r2, [r3, #8]
 800ec68:	4b17      	ldr	r3, [pc, #92]	; (800ecc8 <HAL_TIM_IC_Start_IT+0x29c>)
 800ec6a:	4013      	ands	r3, r2
 800ec6c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	2b06      	cmp	r3, #6
 800ec72:	d015      	beq.n	800eca0 <HAL_TIM_IC_Start_IT+0x274>
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec7a:	d011      	beq.n	800eca0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	681a      	ldr	r2, [r3, #0]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	f042 0201 	orr.w	r2, r2, #1
 800ec8a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec8c:	e008      	b.n	800eca0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f042 0201 	orr.w	r2, r2, #1
 800ec9c:	601a      	str	r2, [r3, #0]
 800ec9e:	e000      	b.n	800eca2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eca0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800eca2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	3710      	adds	r7, #16
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}
 800ecac:	40010000 	.word	0x40010000
 800ecb0:	40000400 	.word	0x40000400
 800ecb4:	40000800 	.word	0x40000800
 800ecb8:	40000c00 	.word	0x40000c00
 800ecbc:	40010400 	.word	0x40010400
 800ecc0:	40014000 	.word	0x40014000
 800ecc4:	40001800 	.word	0x40001800
 800ecc8:	00010007 	.word	0x00010007

0800eccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b082      	sub	sp, #8
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	691b      	ldr	r3, [r3, #16]
 800ecda:	f003 0302 	and.w	r3, r3, #2
 800ecde:	2b02      	cmp	r3, #2
 800ece0:	d122      	bne.n	800ed28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	68db      	ldr	r3, [r3, #12]
 800ece8:	f003 0302 	and.w	r3, r3, #2
 800ecec:	2b02      	cmp	r3, #2
 800ecee:	d11b      	bne.n	800ed28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	f06f 0202 	mvn.w	r2, #2
 800ecf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	2201      	movs	r2, #1
 800ecfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	699b      	ldr	r3, [r3, #24]
 800ed06:	f003 0303 	and.w	r3, r3, #3
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d003      	beq.n	800ed16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f7f5 f9ba 	bl	8004088 <HAL_TIM_IC_CaptureCallback>
 800ed14:	e005      	b.n	800ed22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f000 fbb6 	bl	800f488 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f000 fbbd 	bl	800f49c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2200      	movs	r2, #0
 800ed26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	691b      	ldr	r3, [r3, #16]
 800ed2e:	f003 0304 	and.w	r3, r3, #4
 800ed32:	2b04      	cmp	r3, #4
 800ed34:	d122      	bne.n	800ed7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	68db      	ldr	r3, [r3, #12]
 800ed3c:	f003 0304 	and.w	r3, r3, #4
 800ed40:	2b04      	cmp	r3, #4
 800ed42:	d11b      	bne.n	800ed7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f06f 0204 	mvn.w	r2, #4
 800ed4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2202      	movs	r2, #2
 800ed52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	699b      	ldr	r3, [r3, #24]
 800ed5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d003      	beq.n	800ed6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f7f5 f990 	bl	8004088 <HAL_TIM_IC_CaptureCallback>
 800ed68:	e005      	b.n	800ed76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f000 fb8c 	bl	800f488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f000 fb93 	bl	800f49c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2200      	movs	r2, #0
 800ed7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	691b      	ldr	r3, [r3, #16]
 800ed82:	f003 0308 	and.w	r3, r3, #8
 800ed86:	2b08      	cmp	r3, #8
 800ed88:	d122      	bne.n	800edd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	68db      	ldr	r3, [r3, #12]
 800ed90:	f003 0308 	and.w	r3, r3, #8
 800ed94:	2b08      	cmp	r3, #8
 800ed96:	d11b      	bne.n	800edd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f06f 0208 	mvn.w	r2, #8
 800eda0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2204      	movs	r2, #4
 800eda6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	69db      	ldr	r3, [r3, #28]
 800edae:	f003 0303 	and.w	r3, r3, #3
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d003      	beq.n	800edbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f7f5 f966 	bl	8004088 <HAL_TIM_IC_CaptureCallback>
 800edbc:	e005      	b.n	800edca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 fb62 	bl	800f488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f000 fb69 	bl	800f49c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2200      	movs	r2, #0
 800edce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	691b      	ldr	r3, [r3, #16]
 800edd6:	f003 0310 	and.w	r3, r3, #16
 800edda:	2b10      	cmp	r3, #16
 800eddc:	d122      	bne.n	800ee24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	68db      	ldr	r3, [r3, #12]
 800ede4:	f003 0310 	and.w	r3, r3, #16
 800ede8:	2b10      	cmp	r3, #16
 800edea:	d11b      	bne.n	800ee24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f06f 0210 	mvn.w	r2, #16
 800edf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2208      	movs	r2, #8
 800edfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	69db      	ldr	r3, [r3, #28]
 800ee02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d003      	beq.n	800ee12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f7f5 f93c 	bl	8004088 <HAL_TIM_IC_CaptureCallback>
 800ee10:	e005      	b.n	800ee1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f000 fb38 	bl	800f488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f000 fb3f 	bl	800f49c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2200      	movs	r2, #0
 800ee22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	691b      	ldr	r3, [r3, #16]
 800ee2a:	f003 0301 	and.w	r3, r3, #1
 800ee2e:	2b01      	cmp	r3, #1
 800ee30:	d10e      	bne.n	800ee50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	f003 0301 	and.w	r3, r3, #1
 800ee3c:	2b01      	cmp	r3, #1
 800ee3e:	d107      	bne.n	800ee50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f06f 0201 	mvn.w	r2, #1
 800ee48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f7f5 ff05 	bl	8004c5a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	691b      	ldr	r3, [r3, #16]
 800ee56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee5a:	2b80      	cmp	r3, #128	; 0x80
 800ee5c:	d10e      	bne.n	800ee7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	68db      	ldr	r3, [r3, #12]
 800ee64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee68:	2b80      	cmp	r3, #128	; 0x80
 800ee6a:	d107      	bne.n	800ee7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ee74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f001 f922 	bl	80100c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	691b      	ldr	r3, [r3, #16]
 800ee82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee8a:	d10e      	bne.n	800eeaa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	68db      	ldr	r3, [r3, #12]
 800ee92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee96:	2b80      	cmp	r3, #128	; 0x80
 800ee98:	d107      	bne.n	800eeaa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800eea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f001 f915 	bl	80100d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	691b      	ldr	r3, [r3, #16]
 800eeb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eeb4:	2b40      	cmp	r3, #64	; 0x40
 800eeb6:	d10e      	bne.n	800eed6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	68db      	ldr	r3, [r3, #12]
 800eebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eec2:	2b40      	cmp	r3, #64	; 0x40
 800eec4:	d107      	bne.n	800eed6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800eece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f000 faed 	bl	800f4b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	691b      	ldr	r3, [r3, #16]
 800eedc:	f003 0320 	and.w	r3, r3, #32
 800eee0:	2b20      	cmp	r3, #32
 800eee2:	d10e      	bne.n	800ef02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	68db      	ldr	r3, [r3, #12]
 800eeea:	f003 0320 	and.w	r3, r3, #32
 800eeee:	2b20      	cmp	r3, #32
 800eef0:	d107      	bne.n	800ef02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	f06f 0220 	mvn.w	r2, #32
 800eefa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f001 f8d5 	bl	80100ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ef02:	bf00      	nop
 800ef04:	3708      	adds	r7, #8
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}

0800ef0a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800ef0a:	b580      	push	{r7, lr}
 800ef0c:	b086      	sub	sp, #24
 800ef0e:	af00      	add	r7, sp, #0
 800ef10:	60f8      	str	r0, [r7, #12]
 800ef12:	60b9      	str	r1, [r7, #8]
 800ef14:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ef16:	2300      	movs	r3, #0
 800ef18:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef20:	2b01      	cmp	r3, #1
 800ef22:	d101      	bne.n	800ef28 <HAL_TIM_IC_ConfigChannel+0x1e>
 800ef24:	2302      	movs	r3, #2
 800ef26:	e088      	b.n	800f03a <HAL_TIM_IC_ConfigChannel+0x130>
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d11b      	bne.n	800ef6e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800ef46:	f000 fdbb 	bl	800fac0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	699a      	ldr	r2, [r3, #24]
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f022 020c 	bic.w	r2, r2, #12
 800ef58:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	6999      	ldr	r1, [r3, #24]
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	689a      	ldr	r2, [r3, #8]
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	430a      	orrs	r2, r1
 800ef6a:	619a      	str	r2, [r3, #24]
 800ef6c:	e060      	b.n	800f030 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2b04      	cmp	r3, #4
 800ef72:	d11c      	bne.n	800efae <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800ef84:	f000 fe3f 	bl	800fc06 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	699a      	ldr	r2, [r3, #24]
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ef96:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	6999      	ldr	r1, [r3, #24]
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	689b      	ldr	r3, [r3, #8]
 800efa2:	021a      	lsls	r2, r3, #8
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	430a      	orrs	r2, r1
 800efaa:	619a      	str	r2, [r3, #24]
 800efac:	e040      	b.n	800f030 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2b08      	cmp	r3, #8
 800efb2:	d11b      	bne.n	800efec <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800efc4:	f000 fe8c 	bl	800fce0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	69da      	ldr	r2, [r3, #28]
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f022 020c 	bic.w	r2, r2, #12
 800efd6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	69d9      	ldr	r1, [r3, #28]
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	689a      	ldr	r2, [r3, #8]
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	430a      	orrs	r2, r1
 800efe8:	61da      	str	r2, [r3, #28]
 800efea:	e021      	b.n	800f030 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2b0c      	cmp	r3, #12
 800eff0:	d11c      	bne.n	800f02c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800f002:	f000 fea9 	bl	800fd58 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	69da      	ldr	r2, [r3, #28]
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f014:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	69d9      	ldr	r1, [r3, #28]
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	689b      	ldr	r3, [r3, #8]
 800f020:	021a      	lsls	r2, r3, #8
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	430a      	orrs	r2, r1
 800f028:	61da      	str	r2, [r3, #28]
 800f02a:	e001      	b.n	800f030 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800f02c:	2301      	movs	r3, #1
 800f02e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	2200      	movs	r2, #0
 800f034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f038:	7dfb      	ldrb	r3, [r7, #23]
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3718      	adds	r7, #24
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}
	...

0800f044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b086      	sub	sp, #24
 800f048:	af00      	add	r7, sp, #0
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	60b9      	str	r1, [r7, #8]
 800f04e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f050:	2300      	movs	r3, #0
 800f052:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f05a:	2b01      	cmp	r3, #1
 800f05c:	d101      	bne.n	800f062 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f05e:	2302      	movs	r3, #2
 800f060:	e0ff      	b.n	800f262 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2201      	movs	r2, #1
 800f066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2b14      	cmp	r3, #20
 800f06e:	f200 80f0 	bhi.w	800f252 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f072:	a201      	add	r2, pc, #4	; (adr r2, 800f078 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f078:	0800f0cd 	.word	0x0800f0cd
 800f07c:	0800f253 	.word	0x0800f253
 800f080:	0800f253 	.word	0x0800f253
 800f084:	0800f253 	.word	0x0800f253
 800f088:	0800f10d 	.word	0x0800f10d
 800f08c:	0800f253 	.word	0x0800f253
 800f090:	0800f253 	.word	0x0800f253
 800f094:	0800f253 	.word	0x0800f253
 800f098:	0800f14f 	.word	0x0800f14f
 800f09c:	0800f253 	.word	0x0800f253
 800f0a0:	0800f253 	.word	0x0800f253
 800f0a4:	0800f253 	.word	0x0800f253
 800f0a8:	0800f18f 	.word	0x0800f18f
 800f0ac:	0800f253 	.word	0x0800f253
 800f0b0:	0800f253 	.word	0x0800f253
 800f0b4:	0800f253 	.word	0x0800f253
 800f0b8:	0800f1d1 	.word	0x0800f1d1
 800f0bc:	0800f253 	.word	0x0800f253
 800f0c0:	0800f253 	.word	0x0800f253
 800f0c4:	0800f253 	.word	0x0800f253
 800f0c8:	0800f211 	.word	0x0800f211
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	68b9      	ldr	r1, [r7, #8]
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f000 fa96 	bl	800f604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	699a      	ldr	r2, [r3, #24]
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	f042 0208 	orr.w	r2, r2, #8
 800f0e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	699a      	ldr	r2, [r3, #24]
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f022 0204 	bic.w	r2, r2, #4
 800f0f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	6999      	ldr	r1, [r3, #24]
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	691a      	ldr	r2, [r3, #16]
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	430a      	orrs	r2, r1
 800f108:	619a      	str	r2, [r3, #24]
      break;
 800f10a:	e0a5      	b.n	800f258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	68b9      	ldr	r1, [r7, #8]
 800f112:	4618      	mov	r0, r3
 800f114:	f000 fae8 	bl	800f6e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	699a      	ldr	r2, [r3, #24]
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	699a      	ldr	r2, [r3, #24]
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	6999      	ldr	r1, [r3, #24]
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	691b      	ldr	r3, [r3, #16]
 800f142:	021a      	lsls	r2, r3, #8
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	430a      	orrs	r2, r1
 800f14a:	619a      	str	r2, [r3, #24]
      break;
 800f14c:	e084      	b.n	800f258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	68b9      	ldr	r1, [r7, #8]
 800f154:	4618      	mov	r0, r3
 800f156:	f000 fb3f 	bl	800f7d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	69da      	ldr	r2, [r3, #28]
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f042 0208 	orr.w	r2, r2, #8
 800f168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	69da      	ldr	r2, [r3, #28]
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	f022 0204 	bic.w	r2, r2, #4
 800f178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	69d9      	ldr	r1, [r3, #28]
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	691a      	ldr	r2, [r3, #16]
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	430a      	orrs	r2, r1
 800f18a:	61da      	str	r2, [r3, #28]
      break;
 800f18c:	e064      	b.n	800f258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	68b9      	ldr	r1, [r7, #8]
 800f194:	4618      	mov	r0, r3
 800f196:	f000 fb95 	bl	800f8c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	69da      	ldr	r2, [r3, #28]
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	69da      	ldr	r2, [r3, #28]
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	69d9      	ldr	r1, [r3, #28]
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	691b      	ldr	r3, [r3, #16]
 800f1c4:	021a      	lsls	r2, r3, #8
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	430a      	orrs	r2, r1
 800f1cc:	61da      	str	r2, [r3, #28]
      break;
 800f1ce:	e043      	b.n	800f258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	68b9      	ldr	r1, [r7, #8]
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f000 fbcc 	bl	800f974 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	f042 0208 	orr.w	r2, r2, #8
 800f1ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	f022 0204 	bic.w	r2, r2, #4
 800f1fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	691a      	ldr	r2, [r3, #16]
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	430a      	orrs	r2, r1
 800f20c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f20e:	e023      	b.n	800f258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	68b9      	ldr	r1, [r7, #8]
 800f216:	4618      	mov	r0, r3
 800f218:	f000 fbfe 	bl	800fa18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f22a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f23a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	691b      	ldr	r3, [r3, #16]
 800f246:	021a      	lsls	r2, r3, #8
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	430a      	orrs	r2, r1
 800f24e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f250:	e002      	b.n	800f258 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f252:	2301      	movs	r3, #1
 800f254:	75fb      	strb	r3, [r7, #23]
      break;
 800f256:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	2200      	movs	r2, #0
 800f25c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f260:	7dfb      	ldrb	r3, [r7, #23]
}
 800f262:	4618      	mov	r0, r3
 800f264:	3718      	adds	r7, #24
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop

0800f26c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b084      	sub	sp, #16
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f276:	2300      	movs	r3, #0
 800f278:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f280:	2b01      	cmp	r3, #1
 800f282:	d101      	bne.n	800f288 <HAL_TIM_ConfigClockSource+0x1c>
 800f284:	2302      	movs	r3, #2
 800f286:	e0b4      	b.n	800f3f2 <HAL_TIM_ConfigClockSource+0x186>
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2201      	movs	r2, #1
 800f28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2202      	movs	r2, #2
 800f294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	689b      	ldr	r3, [r3, #8]
 800f29e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f2a0:	68ba      	ldr	r2, [r7, #8]
 800f2a2:	4b56      	ldr	r3, [pc, #344]	; (800f3fc <HAL_TIM_ConfigClockSource+0x190>)
 800f2a4:	4013      	ands	r3, r2
 800f2a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f2ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	68ba      	ldr	r2, [r7, #8]
 800f2b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2c0:	d03e      	beq.n	800f340 <HAL_TIM_ConfigClockSource+0xd4>
 800f2c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2c6:	f200 8087 	bhi.w	800f3d8 <HAL_TIM_ConfigClockSource+0x16c>
 800f2ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2ce:	f000 8086 	beq.w	800f3de <HAL_TIM_ConfigClockSource+0x172>
 800f2d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2d6:	d87f      	bhi.n	800f3d8 <HAL_TIM_ConfigClockSource+0x16c>
 800f2d8:	2b70      	cmp	r3, #112	; 0x70
 800f2da:	d01a      	beq.n	800f312 <HAL_TIM_ConfigClockSource+0xa6>
 800f2dc:	2b70      	cmp	r3, #112	; 0x70
 800f2de:	d87b      	bhi.n	800f3d8 <HAL_TIM_ConfigClockSource+0x16c>
 800f2e0:	2b60      	cmp	r3, #96	; 0x60
 800f2e2:	d050      	beq.n	800f386 <HAL_TIM_ConfigClockSource+0x11a>
 800f2e4:	2b60      	cmp	r3, #96	; 0x60
 800f2e6:	d877      	bhi.n	800f3d8 <HAL_TIM_ConfigClockSource+0x16c>
 800f2e8:	2b50      	cmp	r3, #80	; 0x50
 800f2ea:	d03c      	beq.n	800f366 <HAL_TIM_ConfigClockSource+0xfa>
 800f2ec:	2b50      	cmp	r3, #80	; 0x50
 800f2ee:	d873      	bhi.n	800f3d8 <HAL_TIM_ConfigClockSource+0x16c>
 800f2f0:	2b40      	cmp	r3, #64	; 0x40
 800f2f2:	d058      	beq.n	800f3a6 <HAL_TIM_ConfigClockSource+0x13a>
 800f2f4:	2b40      	cmp	r3, #64	; 0x40
 800f2f6:	d86f      	bhi.n	800f3d8 <HAL_TIM_ConfigClockSource+0x16c>
 800f2f8:	2b30      	cmp	r3, #48	; 0x30
 800f2fa:	d064      	beq.n	800f3c6 <HAL_TIM_ConfigClockSource+0x15a>
 800f2fc:	2b30      	cmp	r3, #48	; 0x30
 800f2fe:	d86b      	bhi.n	800f3d8 <HAL_TIM_ConfigClockSource+0x16c>
 800f300:	2b20      	cmp	r3, #32
 800f302:	d060      	beq.n	800f3c6 <HAL_TIM_ConfigClockSource+0x15a>
 800f304:	2b20      	cmp	r3, #32
 800f306:	d867      	bhi.n	800f3d8 <HAL_TIM_ConfigClockSource+0x16c>
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d05c      	beq.n	800f3c6 <HAL_TIM_ConfigClockSource+0x15a>
 800f30c:	2b10      	cmp	r3, #16
 800f30e:	d05a      	beq.n	800f3c6 <HAL_TIM_ConfigClockSource+0x15a>
 800f310:	e062      	b.n	800f3d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f322:	f000 fd71 	bl	800fe08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	689b      	ldr	r3, [r3, #8]
 800f32c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f334:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	68ba      	ldr	r2, [r7, #8]
 800f33c:	609a      	str	r2, [r3, #8]
      break;
 800f33e:	e04f      	b.n	800f3e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f350:	f000 fd5a 	bl	800fe08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	689a      	ldr	r2, [r3, #8]
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f362:	609a      	str	r2, [r3, #8]
      break;
 800f364:	e03c      	b.n	800f3e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f372:	461a      	mov	r2, r3
 800f374:	f000 fc18 	bl	800fba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	2150      	movs	r1, #80	; 0x50
 800f37e:	4618      	mov	r0, r3
 800f380:	f000 fd27 	bl	800fdd2 <TIM_ITRx_SetConfig>
      break;
 800f384:	e02c      	b.n	800f3e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f392:	461a      	mov	r2, r3
 800f394:	f000 fc74 	bl	800fc80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	2160      	movs	r1, #96	; 0x60
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f000 fd17 	bl	800fdd2 <TIM_ITRx_SetConfig>
      break;
 800f3a4:	e01c      	b.n	800f3e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	f000 fbf8 	bl	800fba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	2140      	movs	r1, #64	; 0x40
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f000 fd07 	bl	800fdd2 <TIM_ITRx_SetConfig>
      break;
 800f3c4:	e00c      	b.n	800f3e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681a      	ldr	r2, [r3, #0]
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	4610      	mov	r0, r2
 800f3d2:	f000 fcfe 	bl	800fdd2 <TIM_ITRx_SetConfig>
      break;
 800f3d6:	e003      	b.n	800f3e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f3d8:	2301      	movs	r3, #1
 800f3da:	73fb      	strb	r3, [r7, #15]
      break;
 800f3dc:	e000      	b.n	800f3e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f3de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2201      	movs	r2, #1
 800f3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3710      	adds	r7, #16
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}
 800f3fa:	bf00      	nop
 800f3fc:	fffeff88 	.word	0xfffeff88

0800f400 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f400:	b480      	push	{r7}
 800f402:	b085      	sub	sp, #20
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
 800f408:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800f40a:	2300      	movs	r3, #0
 800f40c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	2b0c      	cmp	r3, #12
 800f412:	d831      	bhi.n	800f478 <HAL_TIM_ReadCapturedValue+0x78>
 800f414:	a201      	add	r2, pc, #4	; (adr r2, 800f41c <HAL_TIM_ReadCapturedValue+0x1c>)
 800f416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f41a:	bf00      	nop
 800f41c:	0800f451 	.word	0x0800f451
 800f420:	0800f479 	.word	0x0800f479
 800f424:	0800f479 	.word	0x0800f479
 800f428:	0800f479 	.word	0x0800f479
 800f42c:	0800f45b 	.word	0x0800f45b
 800f430:	0800f479 	.word	0x0800f479
 800f434:	0800f479 	.word	0x0800f479
 800f438:	0800f479 	.word	0x0800f479
 800f43c:	0800f465 	.word	0x0800f465
 800f440:	0800f479 	.word	0x0800f479
 800f444:	0800f479 	.word	0x0800f479
 800f448:	0800f479 	.word	0x0800f479
 800f44c:	0800f46f 	.word	0x0800f46f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f456:	60fb      	str	r3, [r7, #12]

      break;
 800f458:	e00f      	b.n	800f47a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f460:	60fb      	str	r3, [r7, #12]

      break;
 800f462:	e00a      	b.n	800f47a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f46a:	60fb      	str	r3, [r7, #12]

      break;
 800f46c:	e005      	b.n	800f47a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f474:	60fb      	str	r3, [r7, #12]

      break;
 800f476:	e000      	b.n	800f47a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800f478:	bf00      	nop
  }

  return tmpreg;
 800f47a:	68fb      	ldr	r3, [r7, #12]
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	3714      	adds	r7, #20
 800f480:	46bd      	mov	sp, r7
 800f482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f486:	4770      	bx	lr

0800f488 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f488:	b480      	push	{r7}
 800f48a:	b083      	sub	sp, #12
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f490:	bf00      	nop
 800f492:	370c      	adds	r7, #12
 800f494:	46bd      	mov	sp, r7
 800f496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49a:	4770      	bx	lr

0800f49c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f49c:	b480      	push	{r7}
 800f49e:	b083      	sub	sp, #12
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f4a4:	bf00      	nop
 800f4a6:	370c      	adds	r7, #12
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr

0800f4b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b083      	sub	sp, #12
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f4b8:	bf00      	nop
 800f4ba:	370c      	adds	r7, #12
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr

0800f4c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f4c4:	b480      	push	{r7}
 800f4c6:	b085      	sub	sp, #20
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	4a40      	ldr	r2, [pc, #256]	; (800f5d8 <TIM_Base_SetConfig+0x114>)
 800f4d8:	4293      	cmp	r3, r2
 800f4da:	d013      	beq.n	800f504 <TIM_Base_SetConfig+0x40>
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4e2:	d00f      	beq.n	800f504 <TIM_Base_SetConfig+0x40>
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	4a3d      	ldr	r2, [pc, #244]	; (800f5dc <TIM_Base_SetConfig+0x118>)
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d00b      	beq.n	800f504 <TIM_Base_SetConfig+0x40>
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	4a3c      	ldr	r2, [pc, #240]	; (800f5e0 <TIM_Base_SetConfig+0x11c>)
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	d007      	beq.n	800f504 <TIM_Base_SetConfig+0x40>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	4a3b      	ldr	r2, [pc, #236]	; (800f5e4 <TIM_Base_SetConfig+0x120>)
 800f4f8:	4293      	cmp	r3, r2
 800f4fa:	d003      	beq.n	800f504 <TIM_Base_SetConfig+0x40>
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	4a3a      	ldr	r2, [pc, #232]	; (800f5e8 <TIM_Base_SetConfig+0x124>)
 800f500:	4293      	cmp	r3, r2
 800f502:	d108      	bne.n	800f516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f50a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	68fa      	ldr	r2, [r7, #12]
 800f512:	4313      	orrs	r3, r2
 800f514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	4a2f      	ldr	r2, [pc, #188]	; (800f5d8 <TIM_Base_SetConfig+0x114>)
 800f51a:	4293      	cmp	r3, r2
 800f51c:	d02b      	beq.n	800f576 <TIM_Base_SetConfig+0xb2>
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f524:	d027      	beq.n	800f576 <TIM_Base_SetConfig+0xb2>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	4a2c      	ldr	r2, [pc, #176]	; (800f5dc <TIM_Base_SetConfig+0x118>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d023      	beq.n	800f576 <TIM_Base_SetConfig+0xb2>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	4a2b      	ldr	r2, [pc, #172]	; (800f5e0 <TIM_Base_SetConfig+0x11c>)
 800f532:	4293      	cmp	r3, r2
 800f534:	d01f      	beq.n	800f576 <TIM_Base_SetConfig+0xb2>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	4a2a      	ldr	r2, [pc, #168]	; (800f5e4 <TIM_Base_SetConfig+0x120>)
 800f53a:	4293      	cmp	r3, r2
 800f53c:	d01b      	beq.n	800f576 <TIM_Base_SetConfig+0xb2>
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	4a29      	ldr	r2, [pc, #164]	; (800f5e8 <TIM_Base_SetConfig+0x124>)
 800f542:	4293      	cmp	r3, r2
 800f544:	d017      	beq.n	800f576 <TIM_Base_SetConfig+0xb2>
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4a28      	ldr	r2, [pc, #160]	; (800f5ec <TIM_Base_SetConfig+0x128>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d013      	beq.n	800f576 <TIM_Base_SetConfig+0xb2>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	4a27      	ldr	r2, [pc, #156]	; (800f5f0 <TIM_Base_SetConfig+0x12c>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d00f      	beq.n	800f576 <TIM_Base_SetConfig+0xb2>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	4a26      	ldr	r2, [pc, #152]	; (800f5f4 <TIM_Base_SetConfig+0x130>)
 800f55a:	4293      	cmp	r3, r2
 800f55c:	d00b      	beq.n	800f576 <TIM_Base_SetConfig+0xb2>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	4a25      	ldr	r2, [pc, #148]	; (800f5f8 <TIM_Base_SetConfig+0x134>)
 800f562:	4293      	cmp	r3, r2
 800f564:	d007      	beq.n	800f576 <TIM_Base_SetConfig+0xb2>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	4a24      	ldr	r2, [pc, #144]	; (800f5fc <TIM_Base_SetConfig+0x138>)
 800f56a:	4293      	cmp	r3, r2
 800f56c:	d003      	beq.n	800f576 <TIM_Base_SetConfig+0xb2>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	4a23      	ldr	r2, [pc, #140]	; (800f600 <TIM_Base_SetConfig+0x13c>)
 800f572:	4293      	cmp	r3, r2
 800f574:	d108      	bne.n	800f588 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f57c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	68db      	ldr	r3, [r3, #12]
 800f582:	68fa      	ldr	r2, [r7, #12]
 800f584:	4313      	orrs	r3, r2
 800f586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	695b      	ldr	r3, [r3, #20]
 800f592:	4313      	orrs	r3, r2
 800f594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	68fa      	ldr	r2, [r7, #12]
 800f59a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	689a      	ldr	r2, [r3, #8]
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	681a      	ldr	r2, [r3, #0]
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	4a0a      	ldr	r2, [pc, #40]	; (800f5d8 <TIM_Base_SetConfig+0x114>)
 800f5b0:	4293      	cmp	r3, r2
 800f5b2:	d003      	beq.n	800f5bc <TIM_Base_SetConfig+0xf8>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	4a0c      	ldr	r2, [pc, #48]	; (800f5e8 <TIM_Base_SetConfig+0x124>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d103      	bne.n	800f5c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	691a      	ldr	r2, [r3, #16]
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2201      	movs	r2, #1
 800f5c8:	615a      	str	r2, [r3, #20]
}
 800f5ca:	bf00      	nop
 800f5cc:	3714      	adds	r7, #20
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d4:	4770      	bx	lr
 800f5d6:	bf00      	nop
 800f5d8:	40010000 	.word	0x40010000
 800f5dc:	40000400 	.word	0x40000400
 800f5e0:	40000800 	.word	0x40000800
 800f5e4:	40000c00 	.word	0x40000c00
 800f5e8:	40010400 	.word	0x40010400
 800f5ec:	40014000 	.word	0x40014000
 800f5f0:	40014400 	.word	0x40014400
 800f5f4:	40014800 	.word	0x40014800
 800f5f8:	40001800 	.word	0x40001800
 800f5fc:	40001c00 	.word	0x40001c00
 800f600:	40002000 	.word	0x40002000

0800f604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f604:	b480      	push	{r7}
 800f606:	b087      	sub	sp, #28
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
 800f60c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6a1b      	ldr	r3, [r3, #32]
 800f612:	f023 0201 	bic.w	r2, r3, #1
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6a1b      	ldr	r3, [r3, #32]
 800f61e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	685b      	ldr	r3, [r3, #4]
 800f624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	699b      	ldr	r3, [r3, #24]
 800f62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f62c:	68fa      	ldr	r2, [r7, #12]
 800f62e:	4b2b      	ldr	r3, [pc, #172]	; (800f6dc <TIM_OC1_SetConfig+0xd8>)
 800f630:	4013      	ands	r3, r2
 800f632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	f023 0303 	bic.w	r3, r3, #3
 800f63a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	68fa      	ldr	r2, [r7, #12]
 800f642:	4313      	orrs	r3, r2
 800f644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	f023 0302 	bic.w	r3, r3, #2
 800f64c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	689b      	ldr	r3, [r3, #8]
 800f652:	697a      	ldr	r2, [r7, #20]
 800f654:	4313      	orrs	r3, r2
 800f656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	4a21      	ldr	r2, [pc, #132]	; (800f6e0 <TIM_OC1_SetConfig+0xdc>)
 800f65c:	4293      	cmp	r3, r2
 800f65e:	d003      	beq.n	800f668 <TIM_OC1_SetConfig+0x64>
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	4a20      	ldr	r2, [pc, #128]	; (800f6e4 <TIM_OC1_SetConfig+0xe0>)
 800f664:	4293      	cmp	r3, r2
 800f666:	d10c      	bne.n	800f682 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	f023 0308 	bic.w	r3, r3, #8
 800f66e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	68db      	ldr	r3, [r3, #12]
 800f674:	697a      	ldr	r2, [r7, #20]
 800f676:	4313      	orrs	r3, r2
 800f678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	f023 0304 	bic.w	r3, r3, #4
 800f680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	4a16      	ldr	r2, [pc, #88]	; (800f6e0 <TIM_OC1_SetConfig+0xdc>)
 800f686:	4293      	cmp	r3, r2
 800f688:	d003      	beq.n	800f692 <TIM_OC1_SetConfig+0x8e>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	4a15      	ldr	r2, [pc, #84]	; (800f6e4 <TIM_OC1_SetConfig+0xe0>)
 800f68e:	4293      	cmp	r3, r2
 800f690:	d111      	bne.n	800f6b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f6a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	695b      	ldr	r3, [r3, #20]
 800f6a6:	693a      	ldr	r2, [r7, #16]
 800f6a8:	4313      	orrs	r3, r2
 800f6aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	699b      	ldr	r3, [r3, #24]
 800f6b0:	693a      	ldr	r2, [r7, #16]
 800f6b2:	4313      	orrs	r3, r2
 800f6b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	693a      	ldr	r2, [r7, #16]
 800f6ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	68fa      	ldr	r2, [r7, #12]
 800f6c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	685a      	ldr	r2, [r3, #4]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	697a      	ldr	r2, [r7, #20]
 800f6ce:	621a      	str	r2, [r3, #32]
}
 800f6d0:	bf00      	nop
 800f6d2:	371c      	adds	r7, #28
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6da:	4770      	bx	lr
 800f6dc:	fffeff8f 	.word	0xfffeff8f
 800f6e0:	40010000 	.word	0x40010000
 800f6e4:	40010400 	.word	0x40010400

0800f6e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b087      	sub	sp, #28
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
 800f6f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6a1b      	ldr	r3, [r3, #32]
 800f6f6:	f023 0210 	bic.w	r2, r3, #16
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6a1b      	ldr	r3, [r3, #32]
 800f702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	685b      	ldr	r3, [r3, #4]
 800f708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	699b      	ldr	r3, [r3, #24]
 800f70e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f710:	68fa      	ldr	r2, [r7, #12]
 800f712:	4b2e      	ldr	r3, [pc, #184]	; (800f7cc <TIM_OC2_SetConfig+0xe4>)
 800f714:	4013      	ands	r3, r2
 800f716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f71e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	021b      	lsls	r3, r3, #8
 800f726:	68fa      	ldr	r2, [r7, #12]
 800f728:	4313      	orrs	r3, r2
 800f72a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	f023 0320 	bic.w	r3, r3, #32
 800f732:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	689b      	ldr	r3, [r3, #8]
 800f738:	011b      	lsls	r3, r3, #4
 800f73a:	697a      	ldr	r2, [r7, #20]
 800f73c:	4313      	orrs	r3, r2
 800f73e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	4a23      	ldr	r2, [pc, #140]	; (800f7d0 <TIM_OC2_SetConfig+0xe8>)
 800f744:	4293      	cmp	r3, r2
 800f746:	d003      	beq.n	800f750 <TIM_OC2_SetConfig+0x68>
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	4a22      	ldr	r2, [pc, #136]	; (800f7d4 <TIM_OC2_SetConfig+0xec>)
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d10d      	bne.n	800f76c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	68db      	ldr	r3, [r3, #12]
 800f75c:	011b      	lsls	r3, r3, #4
 800f75e:	697a      	ldr	r2, [r7, #20]
 800f760:	4313      	orrs	r3, r2
 800f762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f764:	697b      	ldr	r3, [r7, #20]
 800f766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f76a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	4a18      	ldr	r2, [pc, #96]	; (800f7d0 <TIM_OC2_SetConfig+0xe8>)
 800f770:	4293      	cmp	r3, r2
 800f772:	d003      	beq.n	800f77c <TIM_OC2_SetConfig+0x94>
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	4a17      	ldr	r2, [pc, #92]	; (800f7d4 <TIM_OC2_SetConfig+0xec>)
 800f778:	4293      	cmp	r3, r2
 800f77a:	d113      	bne.n	800f7a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f782:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f78a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	695b      	ldr	r3, [r3, #20]
 800f790:	009b      	lsls	r3, r3, #2
 800f792:	693a      	ldr	r2, [r7, #16]
 800f794:	4313      	orrs	r3, r2
 800f796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	699b      	ldr	r3, [r3, #24]
 800f79c:	009b      	lsls	r3, r3, #2
 800f79e:	693a      	ldr	r2, [r7, #16]
 800f7a0:	4313      	orrs	r3, r2
 800f7a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	693a      	ldr	r2, [r7, #16]
 800f7a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	68fa      	ldr	r2, [r7, #12]
 800f7ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	685a      	ldr	r2, [r3, #4]
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	697a      	ldr	r2, [r7, #20]
 800f7bc:	621a      	str	r2, [r3, #32]
}
 800f7be:	bf00      	nop
 800f7c0:	371c      	adds	r7, #28
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c8:	4770      	bx	lr
 800f7ca:	bf00      	nop
 800f7cc:	feff8fff 	.word	0xfeff8fff
 800f7d0:	40010000 	.word	0x40010000
 800f7d4:	40010400 	.word	0x40010400

0800f7d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f7d8:	b480      	push	{r7}
 800f7da:	b087      	sub	sp, #28
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6a1b      	ldr	r3, [r3, #32]
 800f7e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6a1b      	ldr	r3, [r3, #32]
 800f7f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	69db      	ldr	r3, [r3, #28]
 800f7fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f800:	68fa      	ldr	r2, [r7, #12]
 800f802:	4b2d      	ldr	r3, [pc, #180]	; (800f8b8 <TIM_OC3_SetConfig+0xe0>)
 800f804:	4013      	ands	r3, r2
 800f806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	f023 0303 	bic.w	r3, r3, #3
 800f80e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	68fa      	ldr	r2, [r7, #12]
 800f816:	4313      	orrs	r3, r2
 800f818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	689b      	ldr	r3, [r3, #8]
 800f826:	021b      	lsls	r3, r3, #8
 800f828:	697a      	ldr	r2, [r7, #20]
 800f82a:	4313      	orrs	r3, r2
 800f82c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4a22      	ldr	r2, [pc, #136]	; (800f8bc <TIM_OC3_SetConfig+0xe4>)
 800f832:	4293      	cmp	r3, r2
 800f834:	d003      	beq.n	800f83e <TIM_OC3_SetConfig+0x66>
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	4a21      	ldr	r2, [pc, #132]	; (800f8c0 <TIM_OC3_SetConfig+0xe8>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d10d      	bne.n	800f85a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	68db      	ldr	r3, [r3, #12]
 800f84a:	021b      	lsls	r3, r3, #8
 800f84c:	697a      	ldr	r2, [r7, #20]
 800f84e:	4313      	orrs	r3, r2
 800f850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	4a17      	ldr	r2, [pc, #92]	; (800f8bc <TIM_OC3_SetConfig+0xe4>)
 800f85e:	4293      	cmp	r3, r2
 800f860:	d003      	beq.n	800f86a <TIM_OC3_SetConfig+0x92>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	4a16      	ldr	r2, [pc, #88]	; (800f8c0 <TIM_OC3_SetConfig+0xe8>)
 800f866:	4293      	cmp	r3, r2
 800f868:	d113      	bne.n	800f892 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	695b      	ldr	r3, [r3, #20]
 800f87e:	011b      	lsls	r3, r3, #4
 800f880:	693a      	ldr	r2, [r7, #16]
 800f882:	4313      	orrs	r3, r2
 800f884:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	699b      	ldr	r3, [r3, #24]
 800f88a:	011b      	lsls	r3, r3, #4
 800f88c:	693a      	ldr	r2, [r7, #16]
 800f88e:	4313      	orrs	r3, r2
 800f890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	693a      	ldr	r2, [r7, #16]
 800f896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	68fa      	ldr	r2, [r7, #12]
 800f89c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	685a      	ldr	r2, [r3, #4]
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	697a      	ldr	r2, [r7, #20]
 800f8aa:	621a      	str	r2, [r3, #32]
}
 800f8ac:	bf00      	nop
 800f8ae:	371c      	adds	r7, #28
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b6:	4770      	bx	lr
 800f8b8:	fffeff8f 	.word	0xfffeff8f
 800f8bc:	40010000 	.word	0x40010000
 800f8c0:	40010400 	.word	0x40010400

0800f8c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f8c4:	b480      	push	{r7}
 800f8c6:	b087      	sub	sp, #28
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
 800f8cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6a1b      	ldr	r3, [r3, #32]
 800f8d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	6a1b      	ldr	r3, [r3, #32]
 800f8de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	685b      	ldr	r3, [r3, #4]
 800f8e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	69db      	ldr	r3, [r3, #28]
 800f8ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f8ec:	68fa      	ldr	r2, [r7, #12]
 800f8ee:	4b1e      	ldr	r3, [pc, #120]	; (800f968 <TIM_OC4_SetConfig+0xa4>)
 800f8f0:	4013      	ands	r3, r2
 800f8f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	021b      	lsls	r3, r3, #8
 800f902:	68fa      	ldr	r2, [r7, #12]
 800f904:	4313      	orrs	r3, r2
 800f906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f90e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	689b      	ldr	r3, [r3, #8]
 800f914:	031b      	lsls	r3, r3, #12
 800f916:	693a      	ldr	r2, [r7, #16]
 800f918:	4313      	orrs	r3, r2
 800f91a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	4a13      	ldr	r2, [pc, #76]	; (800f96c <TIM_OC4_SetConfig+0xa8>)
 800f920:	4293      	cmp	r3, r2
 800f922:	d003      	beq.n	800f92c <TIM_OC4_SetConfig+0x68>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	4a12      	ldr	r2, [pc, #72]	; (800f970 <TIM_OC4_SetConfig+0xac>)
 800f928:	4293      	cmp	r3, r2
 800f92a:	d109      	bne.n	800f940 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f932:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	695b      	ldr	r3, [r3, #20]
 800f938:	019b      	lsls	r3, r3, #6
 800f93a:	697a      	ldr	r2, [r7, #20]
 800f93c:	4313      	orrs	r3, r2
 800f93e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	697a      	ldr	r2, [r7, #20]
 800f944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	68fa      	ldr	r2, [r7, #12]
 800f94a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	685a      	ldr	r2, [r3, #4]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	693a      	ldr	r2, [r7, #16]
 800f958:	621a      	str	r2, [r3, #32]
}
 800f95a:	bf00      	nop
 800f95c:	371c      	adds	r7, #28
 800f95e:	46bd      	mov	sp, r7
 800f960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f964:	4770      	bx	lr
 800f966:	bf00      	nop
 800f968:	feff8fff 	.word	0xfeff8fff
 800f96c:	40010000 	.word	0x40010000
 800f970:	40010400 	.word	0x40010400

0800f974 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f974:	b480      	push	{r7}
 800f976:	b087      	sub	sp, #28
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
 800f97c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6a1b      	ldr	r3, [r3, #32]
 800f982:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6a1b      	ldr	r3, [r3, #32]
 800f98e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	685b      	ldr	r3, [r3, #4]
 800f994:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f99a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f99c:	68fa      	ldr	r2, [r7, #12]
 800f99e:	4b1b      	ldr	r3, [pc, #108]	; (800fa0c <TIM_OC5_SetConfig+0x98>)
 800f9a0:	4013      	ands	r3, r2
 800f9a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	68fa      	ldr	r2, [r7, #12]
 800f9aa:	4313      	orrs	r3, r2
 800f9ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f9b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	689b      	ldr	r3, [r3, #8]
 800f9ba:	041b      	lsls	r3, r3, #16
 800f9bc:	693a      	ldr	r2, [r7, #16]
 800f9be:	4313      	orrs	r3, r2
 800f9c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	4a12      	ldr	r2, [pc, #72]	; (800fa10 <TIM_OC5_SetConfig+0x9c>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d003      	beq.n	800f9d2 <TIM_OC5_SetConfig+0x5e>
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	4a11      	ldr	r2, [pc, #68]	; (800fa14 <TIM_OC5_SetConfig+0xa0>)
 800f9ce:	4293      	cmp	r3, r2
 800f9d0:	d109      	bne.n	800f9e6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f9d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	695b      	ldr	r3, [r3, #20]
 800f9de:	021b      	lsls	r3, r3, #8
 800f9e0:	697a      	ldr	r2, [r7, #20]
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	697a      	ldr	r2, [r7, #20]
 800f9ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	68fa      	ldr	r2, [r7, #12]
 800f9f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	685a      	ldr	r2, [r3, #4]
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	693a      	ldr	r2, [r7, #16]
 800f9fe:	621a      	str	r2, [r3, #32]
}
 800fa00:	bf00      	nop
 800fa02:	371c      	adds	r7, #28
 800fa04:	46bd      	mov	sp, r7
 800fa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0a:	4770      	bx	lr
 800fa0c:	fffeff8f 	.word	0xfffeff8f
 800fa10:	40010000 	.word	0x40010000
 800fa14:	40010400 	.word	0x40010400

0800fa18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fa18:	b480      	push	{r7}
 800fa1a:	b087      	sub	sp, #28
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
 800fa20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	6a1b      	ldr	r3, [r3, #32]
 800fa26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	6a1b      	ldr	r3, [r3, #32]
 800fa32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	685b      	ldr	r3, [r3, #4]
 800fa38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fa40:	68fa      	ldr	r2, [r7, #12]
 800fa42:	4b1c      	ldr	r3, [pc, #112]	; (800fab4 <TIM_OC6_SetConfig+0x9c>)
 800fa44:	4013      	ands	r3, r2
 800fa46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	021b      	lsls	r3, r3, #8
 800fa4e:	68fa      	ldr	r2, [r7, #12]
 800fa50:	4313      	orrs	r3, r2
 800fa52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fa5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	689b      	ldr	r3, [r3, #8]
 800fa60:	051b      	lsls	r3, r3, #20
 800fa62:	693a      	ldr	r2, [r7, #16]
 800fa64:	4313      	orrs	r3, r2
 800fa66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	4a13      	ldr	r2, [pc, #76]	; (800fab8 <TIM_OC6_SetConfig+0xa0>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d003      	beq.n	800fa78 <TIM_OC6_SetConfig+0x60>
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	4a12      	ldr	r2, [pc, #72]	; (800fabc <TIM_OC6_SetConfig+0xa4>)
 800fa74:	4293      	cmp	r3, r2
 800fa76:	d109      	bne.n	800fa8c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fa7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	695b      	ldr	r3, [r3, #20]
 800fa84:	029b      	lsls	r3, r3, #10
 800fa86:	697a      	ldr	r2, [r7, #20]
 800fa88:	4313      	orrs	r3, r2
 800fa8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	697a      	ldr	r2, [r7, #20]
 800fa90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	68fa      	ldr	r2, [r7, #12]
 800fa96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	685a      	ldr	r2, [r3, #4]
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	693a      	ldr	r2, [r7, #16]
 800faa4:	621a      	str	r2, [r3, #32]
}
 800faa6:	bf00      	nop
 800faa8:	371c      	adds	r7, #28
 800faaa:	46bd      	mov	sp, r7
 800faac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab0:	4770      	bx	lr
 800fab2:	bf00      	nop
 800fab4:	feff8fff 	.word	0xfeff8fff
 800fab8:	40010000 	.word	0x40010000
 800fabc:	40010400 	.word	0x40010400

0800fac0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b087      	sub	sp, #28
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	60f8      	str	r0, [r7, #12]
 800fac8:	60b9      	str	r1, [r7, #8]
 800faca:	607a      	str	r2, [r7, #4]
 800facc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	6a1b      	ldr	r3, [r3, #32]
 800fad2:	f023 0201 	bic.w	r2, r3, #1
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	699b      	ldr	r3, [r3, #24]
 800fade:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	6a1b      	ldr	r3, [r3, #32]
 800fae4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	4a28      	ldr	r2, [pc, #160]	; (800fb8c <TIM_TI1_SetConfig+0xcc>)
 800faea:	4293      	cmp	r3, r2
 800faec:	d01b      	beq.n	800fb26 <TIM_TI1_SetConfig+0x66>
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800faf4:	d017      	beq.n	800fb26 <TIM_TI1_SetConfig+0x66>
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	4a25      	ldr	r2, [pc, #148]	; (800fb90 <TIM_TI1_SetConfig+0xd0>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	d013      	beq.n	800fb26 <TIM_TI1_SetConfig+0x66>
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	4a24      	ldr	r2, [pc, #144]	; (800fb94 <TIM_TI1_SetConfig+0xd4>)
 800fb02:	4293      	cmp	r3, r2
 800fb04:	d00f      	beq.n	800fb26 <TIM_TI1_SetConfig+0x66>
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	4a23      	ldr	r2, [pc, #140]	; (800fb98 <TIM_TI1_SetConfig+0xd8>)
 800fb0a:	4293      	cmp	r3, r2
 800fb0c:	d00b      	beq.n	800fb26 <TIM_TI1_SetConfig+0x66>
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	4a22      	ldr	r2, [pc, #136]	; (800fb9c <TIM_TI1_SetConfig+0xdc>)
 800fb12:	4293      	cmp	r3, r2
 800fb14:	d007      	beq.n	800fb26 <TIM_TI1_SetConfig+0x66>
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	4a21      	ldr	r2, [pc, #132]	; (800fba0 <TIM_TI1_SetConfig+0xe0>)
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d003      	beq.n	800fb26 <TIM_TI1_SetConfig+0x66>
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	4a20      	ldr	r2, [pc, #128]	; (800fba4 <TIM_TI1_SetConfig+0xe4>)
 800fb22:	4293      	cmp	r3, r2
 800fb24:	d101      	bne.n	800fb2a <TIM_TI1_SetConfig+0x6a>
 800fb26:	2301      	movs	r3, #1
 800fb28:	e000      	b.n	800fb2c <TIM_TI1_SetConfig+0x6c>
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d008      	beq.n	800fb42 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	f023 0303 	bic.w	r3, r3, #3
 800fb36:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800fb38:	697a      	ldr	r2, [r7, #20]
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	4313      	orrs	r3, r2
 800fb3e:	617b      	str	r3, [r7, #20]
 800fb40:	e003      	b.n	800fb4a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	f043 0301 	orr.w	r3, r3, #1
 800fb48:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fb50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	011b      	lsls	r3, r3, #4
 800fb56:	b2db      	uxtb	r3, r3
 800fb58:	697a      	ldr	r2, [r7, #20]
 800fb5a:	4313      	orrs	r3, r2
 800fb5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	f023 030a 	bic.w	r3, r3, #10
 800fb64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800fb66:	68bb      	ldr	r3, [r7, #8]
 800fb68:	f003 030a 	and.w	r3, r3, #10
 800fb6c:	693a      	ldr	r2, [r7, #16]
 800fb6e:	4313      	orrs	r3, r2
 800fb70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	697a      	ldr	r2, [r7, #20]
 800fb76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	693a      	ldr	r2, [r7, #16]
 800fb7c:	621a      	str	r2, [r3, #32]
}
 800fb7e:	bf00      	nop
 800fb80:	371c      	adds	r7, #28
 800fb82:	46bd      	mov	sp, r7
 800fb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb88:	4770      	bx	lr
 800fb8a:	bf00      	nop
 800fb8c:	40010000 	.word	0x40010000
 800fb90:	40000400 	.word	0x40000400
 800fb94:	40000800 	.word	0x40000800
 800fb98:	40000c00 	.word	0x40000c00
 800fb9c:	40010400 	.word	0x40010400
 800fba0:	40014000 	.word	0x40014000
 800fba4:	40001800 	.word	0x40001800

0800fba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b087      	sub	sp, #28
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	60f8      	str	r0, [r7, #12]
 800fbb0:	60b9      	str	r1, [r7, #8]
 800fbb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	6a1b      	ldr	r3, [r3, #32]
 800fbb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	6a1b      	ldr	r3, [r3, #32]
 800fbbe:	f023 0201 	bic.w	r2, r3, #1
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	699b      	ldr	r3, [r3, #24]
 800fbca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fbd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	011b      	lsls	r3, r3, #4
 800fbd8:	693a      	ldr	r2, [r7, #16]
 800fbda:	4313      	orrs	r3, r2
 800fbdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	f023 030a 	bic.w	r3, r3, #10
 800fbe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fbe6:	697a      	ldr	r2, [r7, #20]
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	4313      	orrs	r3, r2
 800fbec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	693a      	ldr	r2, [r7, #16]
 800fbf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	697a      	ldr	r2, [r7, #20]
 800fbf8:	621a      	str	r2, [r3, #32]
}
 800fbfa:	bf00      	nop
 800fbfc:	371c      	adds	r7, #28
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc04:	4770      	bx	lr

0800fc06 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fc06:	b480      	push	{r7}
 800fc08:	b087      	sub	sp, #28
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	60f8      	str	r0, [r7, #12]
 800fc0e:	60b9      	str	r1, [r7, #8]
 800fc10:	607a      	str	r2, [r7, #4]
 800fc12:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	6a1b      	ldr	r3, [r3, #32]
 800fc18:	f023 0210 	bic.w	r2, r3, #16
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	699b      	ldr	r3, [r3, #24]
 800fc24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	6a1b      	ldr	r3, [r3, #32]
 800fc2a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	021b      	lsls	r3, r3, #8
 800fc38:	697a      	ldr	r2, [r7, #20]
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fc44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	031b      	lsls	r3, r3, #12
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	697a      	ldr	r2, [r7, #20]
 800fc4e:	4313      	orrs	r3, r2
 800fc50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fc58:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	011b      	lsls	r3, r3, #4
 800fc5e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800fc62:	693a      	ldr	r2, [r7, #16]
 800fc64:	4313      	orrs	r3, r2
 800fc66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	697a      	ldr	r2, [r7, #20]
 800fc6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	693a      	ldr	r2, [r7, #16]
 800fc72:	621a      	str	r2, [r3, #32]
}
 800fc74:	bf00      	nop
 800fc76:	371c      	adds	r7, #28
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7e:	4770      	bx	lr

0800fc80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc80:	b480      	push	{r7}
 800fc82:	b087      	sub	sp, #28
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	60f8      	str	r0, [r7, #12]
 800fc88:	60b9      	str	r1, [r7, #8]
 800fc8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	6a1b      	ldr	r3, [r3, #32]
 800fc90:	f023 0210 	bic.w	r2, r3, #16
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	699b      	ldr	r3, [r3, #24]
 800fc9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	6a1b      	ldr	r3, [r3, #32]
 800fca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fcaa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	031b      	lsls	r3, r3, #12
 800fcb0:	697a      	ldr	r2, [r7, #20]
 800fcb2:	4313      	orrs	r3, r2
 800fcb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fcbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	011b      	lsls	r3, r3, #4
 800fcc2:	693a      	ldr	r2, [r7, #16]
 800fcc4:	4313      	orrs	r3, r2
 800fcc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	697a      	ldr	r2, [r7, #20]
 800fccc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	693a      	ldr	r2, [r7, #16]
 800fcd2:	621a      	str	r2, [r3, #32]
}
 800fcd4:	bf00      	nop
 800fcd6:	371c      	adds	r7, #28
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr

0800fce0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b087      	sub	sp, #28
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	607a      	str	r2, [r7, #4]
 800fcec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	6a1b      	ldr	r3, [r3, #32]
 800fcf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	69db      	ldr	r3, [r3, #28]
 800fcfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	6a1b      	ldr	r3, [r3, #32]
 800fd04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800fd06:	697b      	ldr	r3, [r7, #20]
 800fd08:	f023 0303 	bic.w	r3, r3, #3
 800fd0c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800fd0e:	697a      	ldr	r2, [r7, #20]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	4313      	orrs	r3, r2
 800fd14:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800fd16:	697b      	ldr	r3, [r7, #20]
 800fd18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fd1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	011b      	lsls	r3, r3, #4
 800fd22:	b2db      	uxtb	r3, r3
 800fd24:	697a      	ldr	r2, [r7, #20]
 800fd26:	4313      	orrs	r3, r2
 800fd28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800fd2a:	693b      	ldr	r3, [r7, #16]
 800fd2c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800fd30:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	021b      	lsls	r3, r3, #8
 800fd36:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800fd3a:	693a      	ldr	r2, [r7, #16]
 800fd3c:	4313      	orrs	r3, r2
 800fd3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	697a      	ldr	r2, [r7, #20]
 800fd44:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	693a      	ldr	r2, [r7, #16]
 800fd4a:	621a      	str	r2, [r3, #32]
}
 800fd4c:	bf00      	nop
 800fd4e:	371c      	adds	r7, #28
 800fd50:	46bd      	mov	sp, r7
 800fd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd56:	4770      	bx	lr

0800fd58 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b087      	sub	sp, #28
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	60f8      	str	r0, [r7, #12]
 800fd60:	60b9      	str	r1, [r7, #8]
 800fd62:	607a      	str	r2, [r7, #4]
 800fd64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	6a1b      	ldr	r3, [r3, #32]
 800fd6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	69db      	ldr	r3, [r3, #28]
 800fd76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	6a1b      	ldr	r3, [r3, #32]
 800fd7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	021b      	lsls	r3, r3, #8
 800fd8a:	697a      	ldr	r2, [r7, #20]
 800fd8c:	4313      	orrs	r3, r2
 800fd8e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fd96:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	031b      	lsls	r3, r3, #12
 800fd9c:	b29b      	uxth	r3, r3
 800fd9e:	697a      	ldr	r2, [r7, #20]
 800fda0:	4313      	orrs	r3, r2
 800fda2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800fda4:	693b      	ldr	r3, [r7, #16]
 800fda6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800fdaa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	031b      	lsls	r3, r3, #12
 800fdb0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800fdb4:	693a      	ldr	r2, [r7, #16]
 800fdb6:	4313      	orrs	r3, r2
 800fdb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	697a      	ldr	r2, [r7, #20]
 800fdbe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	693a      	ldr	r2, [r7, #16]
 800fdc4:	621a      	str	r2, [r3, #32]
}
 800fdc6:	bf00      	nop
 800fdc8:	371c      	adds	r7, #28
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd0:	4770      	bx	lr

0800fdd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fdd2:	b480      	push	{r7}
 800fdd4:	b085      	sub	sp, #20
 800fdd6:	af00      	add	r7, sp, #0
 800fdd8:	6078      	str	r0, [r7, #4]
 800fdda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	689b      	ldr	r3, [r3, #8]
 800fde0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fde8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fdea:	683a      	ldr	r2, [r7, #0]
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	4313      	orrs	r3, r2
 800fdf0:	f043 0307 	orr.w	r3, r3, #7
 800fdf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	68fa      	ldr	r2, [r7, #12]
 800fdfa:	609a      	str	r2, [r3, #8]
}
 800fdfc:	bf00      	nop
 800fdfe:	3714      	adds	r7, #20
 800fe00:	46bd      	mov	sp, r7
 800fe02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe06:	4770      	bx	lr

0800fe08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fe08:	b480      	push	{r7}
 800fe0a:	b087      	sub	sp, #28
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	60f8      	str	r0, [r7, #12]
 800fe10:	60b9      	str	r1, [r7, #8]
 800fe12:	607a      	str	r2, [r7, #4]
 800fe14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	689b      	ldr	r3, [r3, #8]
 800fe1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fe22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	021a      	lsls	r2, r3, #8
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	431a      	orrs	r2, r3
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	4313      	orrs	r3, r2
 800fe30:	697a      	ldr	r2, [r7, #20]
 800fe32:	4313      	orrs	r3, r2
 800fe34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	697a      	ldr	r2, [r7, #20]
 800fe3a:	609a      	str	r2, [r3, #8]
}
 800fe3c:	bf00      	nop
 800fe3e:	371c      	adds	r7, #28
 800fe40:	46bd      	mov	sp, r7
 800fe42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe46:	4770      	bx	lr

0800fe48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b087      	sub	sp, #28
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	60f8      	str	r0, [r7, #12]
 800fe50:	60b9      	str	r1, [r7, #8]
 800fe52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	f003 031f 	and.w	r3, r3, #31
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	fa02 f303 	lsl.w	r3, r2, r3
 800fe60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	6a1a      	ldr	r2, [r3, #32]
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	43db      	mvns	r3, r3
 800fe6a:	401a      	ands	r2, r3
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	6a1a      	ldr	r2, [r3, #32]
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	f003 031f 	and.w	r3, r3, #31
 800fe7a:	6879      	ldr	r1, [r7, #4]
 800fe7c:	fa01 f303 	lsl.w	r3, r1, r3
 800fe80:	431a      	orrs	r2, r3
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	621a      	str	r2, [r3, #32]
}
 800fe86:	bf00      	nop
 800fe88:	371c      	adds	r7, #28
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe90:	4770      	bx	lr
	...

0800fe94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b085      	sub	sp, #20
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d101      	bne.n	800feac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fea8:	2302      	movs	r3, #2
 800feaa:	e06d      	b.n	800ff88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2201      	movs	r2, #1
 800feb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2202      	movs	r2, #2
 800feb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	685b      	ldr	r3, [r3, #4]
 800fec2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	689b      	ldr	r3, [r3, #8]
 800feca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	4a30      	ldr	r2, [pc, #192]	; (800ff94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fed2:	4293      	cmp	r3, r2
 800fed4:	d004      	beq.n	800fee0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	4a2f      	ldr	r2, [pc, #188]	; (800ff98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fedc:	4293      	cmp	r3, r2
 800fede:	d108      	bne.n	800fef2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fee6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	685b      	ldr	r3, [r3, #4]
 800feec:	68fa      	ldr	r2, [r7, #12]
 800feee:	4313      	orrs	r3, r2
 800fef0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fef8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	68fa      	ldr	r2, [r7, #12]
 800ff00:	4313      	orrs	r3, r2
 800ff02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	68fa      	ldr	r2, [r7, #12]
 800ff0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	4a20      	ldr	r2, [pc, #128]	; (800ff94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ff12:	4293      	cmp	r3, r2
 800ff14:	d022      	beq.n	800ff5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff1e:	d01d      	beq.n	800ff5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	4a1d      	ldr	r2, [pc, #116]	; (800ff9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ff26:	4293      	cmp	r3, r2
 800ff28:	d018      	beq.n	800ff5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	4a1c      	ldr	r2, [pc, #112]	; (800ffa0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ff30:	4293      	cmp	r3, r2
 800ff32:	d013      	beq.n	800ff5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	4a1a      	ldr	r2, [pc, #104]	; (800ffa4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	d00e      	beq.n	800ff5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	4a15      	ldr	r2, [pc, #84]	; (800ff98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ff44:	4293      	cmp	r3, r2
 800ff46:	d009      	beq.n	800ff5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	4a16      	ldr	r2, [pc, #88]	; (800ffa8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ff4e:	4293      	cmp	r3, r2
 800ff50:	d004      	beq.n	800ff5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	4a15      	ldr	r2, [pc, #84]	; (800ffac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d10c      	bne.n	800ff76 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	689b      	ldr	r3, [r3, #8]
 800ff68:	68ba      	ldr	r2, [r7, #8]
 800ff6a:	4313      	orrs	r3, r2
 800ff6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	68ba      	ldr	r2, [r7, #8]
 800ff74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2201      	movs	r2, #1
 800ff7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2200      	movs	r2, #0
 800ff82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ff86:	2300      	movs	r3, #0
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	3714      	adds	r7, #20
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff92:	4770      	bx	lr
 800ff94:	40010000 	.word	0x40010000
 800ff98:	40010400 	.word	0x40010400
 800ff9c:	40000400 	.word	0x40000400
 800ffa0:	40000800 	.word	0x40000800
 800ffa4:	40000c00 	.word	0x40000c00
 800ffa8:	40014000 	.word	0x40014000
 800ffac:	40001800 	.word	0x40001800

0800ffb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b085      	sub	sp, #20
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ffc4:	2b01      	cmp	r3, #1
 800ffc6:	d101      	bne.n	800ffcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ffc8:	2302      	movs	r3, #2
 800ffca:	e065      	b.n	8010098 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2201      	movs	r2, #1
 800ffd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	68db      	ldr	r3, [r3, #12]
 800ffde:	4313      	orrs	r3, r2
 800ffe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	689b      	ldr	r3, [r3, #8]
 800ffec:	4313      	orrs	r3, r2
 800ffee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	685b      	ldr	r3, [r3, #4]
 800fffa:	4313      	orrs	r3, r2
 800fffc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	4313      	orrs	r3, r2
 801000a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	691b      	ldr	r3, [r3, #16]
 8010016:	4313      	orrs	r3, r2
 8010018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	695b      	ldr	r3, [r3, #20]
 8010024:	4313      	orrs	r3, r2
 8010026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010032:	4313      	orrs	r3, r2
 8010034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	699b      	ldr	r3, [r3, #24]
 8010040:	041b      	lsls	r3, r3, #16
 8010042:	4313      	orrs	r3, r2
 8010044:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	4a16      	ldr	r2, [pc, #88]	; (80100a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 801004c:	4293      	cmp	r3, r2
 801004e:	d004      	beq.n	801005a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	4a14      	ldr	r2, [pc, #80]	; (80100a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8010056:	4293      	cmp	r3, r2
 8010058:	d115      	bne.n	8010086 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010064:	051b      	lsls	r3, r3, #20
 8010066:	4313      	orrs	r3, r2
 8010068:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	69db      	ldr	r3, [r3, #28]
 8010074:	4313      	orrs	r3, r2
 8010076:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	6a1b      	ldr	r3, [r3, #32]
 8010082:	4313      	orrs	r3, r2
 8010084:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	68fa      	ldr	r2, [r7, #12]
 801008c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2200      	movs	r2, #0
 8010092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010096:	2300      	movs	r3, #0
}
 8010098:	4618      	mov	r0, r3
 801009a:	3714      	adds	r7, #20
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr
 80100a4:	40010000 	.word	0x40010000
 80100a8:	40010400 	.word	0x40010400

080100ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80100ac:	b480      	push	{r7}
 80100ae:	b083      	sub	sp, #12
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80100b4:	bf00      	nop
 80100b6:	370c      	adds	r7, #12
 80100b8:	46bd      	mov	sp, r7
 80100ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100be:	4770      	bx	lr

080100c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b083      	sub	sp, #12
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80100c8:	bf00      	nop
 80100ca:	370c      	adds	r7, #12
 80100cc:	46bd      	mov	sp, r7
 80100ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d2:	4770      	bx	lr

080100d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80100d4:	b480      	push	{r7}
 80100d6:	b083      	sub	sp, #12
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80100dc:	bf00      	nop
 80100de:	370c      	adds	r7, #12
 80100e0:	46bd      	mov	sp, r7
 80100e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e6:	4770      	bx	lr

080100e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b082      	sub	sp, #8
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d101      	bne.n	80100fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80100f6:	2301      	movs	r3, #1
 80100f8:	e040      	b.n	801017c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d106      	bne.n	8010110 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2200      	movs	r2, #0
 8010106:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	f7f6 fbcc 	bl	80068a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2224      	movs	r2, #36	; 0x24
 8010114:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	681a      	ldr	r2, [r3, #0]
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	f022 0201 	bic.w	r2, r2, #1
 8010124:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f000 fc2a 	bl	8010980 <UART_SetConfig>
 801012c:	4603      	mov	r3, r0
 801012e:	2b01      	cmp	r3, #1
 8010130:	d101      	bne.n	8010136 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8010132:	2301      	movs	r3, #1
 8010134:	e022      	b.n	801017c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801013a:	2b00      	cmp	r3, #0
 801013c:	d002      	beq.n	8010144 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f000 fe82 	bl	8010e48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	685a      	ldr	r2, [r3, #4]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010152:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	689a      	ldr	r2, [r3, #8]
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010162:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	681a      	ldr	r2, [r3, #0]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	f042 0201 	orr.w	r2, r2, #1
 8010172:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f000 ff09 	bl	8010f8c <UART_CheckIdleState>
 801017a:	4603      	mov	r3, r0
}
 801017c:	4618      	mov	r0, r3
 801017e:	3708      	adds	r7, #8
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}

08010184 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b08a      	sub	sp, #40	; 0x28
 8010188:	af02      	add	r7, sp, #8
 801018a:	60f8      	str	r0, [r7, #12]
 801018c:	60b9      	str	r1, [r7, #8]
 801018e:	603b      	str	r3, [r7, #0]
 8010190:	4613      	mov	r3, r2
 8010192:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010198:	2b20      	cmp	r3, #32
 801019a:	d171      	bne.n	8010280 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d002      	beq.n	80101a8 <HAL_UART_Transmit+0x24>
 80101a2:	88fb      	ldrh	r3, [r7, #6]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d101      	bne.n	80101ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80101a8:	2301      	movs	r3, #1
 80101aa:	e06a      	b.n	8010282 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2200      	movs	r2, #0
 80101b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2221      	movs	r2, #33	; 0x21
 80101b8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80101ba:	f7fa fd3b 	bl	800ac34 <HAL_GetTick>
 80101be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	88fa      	ldrh	r2, [r7, #6]
 80101c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	88fa      	ldrh	r2, [r7, #6]
 80101cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	689b      	ldr	r3, [r3, #8]
 80101d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101d8:	d108      	bne.n	80101ec <HAL_UART_Transmit+0x68>
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	691b      	ldr	r3, [r3, #16]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d104      	bne.n	80101ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80101e2:	2300      	movs	r3, #0
 80101e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	61bb      	str	r3, [r7, #24]
 80101ea:	e003      	b.n	80101f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80101f0:	2300      	movs	r3, #0
 80101f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80101f4:	e02c      	b.n	8010250 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	9300      	str	r3, [sp, #0]
 80101fa:	697b      	ldr	r3, [r7, #20]
 80101fc:	2200      	movs	r2, #0
 80101fe:	2180      	movs	r1, #128	; 0x80
 8010200:	68f8      	ldr	r0, [r7, #12]
 8010202:	f000 fefa 	bl	8010ffa <UART_WaitOnFlagUntilTimeout>
 8010206:	4603      	mov	r3, r0
 8010208:	2b00      	cmp	r3, #0
 801020a:	d001      	beq.n	8010210 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 801020c:	2303      	movs	r3, #3
 801020e:	e038      	b.n	8010282 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8010210:	69fb      	ldr	r3, [r7, #28]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d10b      	bne.n	801022e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010216:	69bb      	ldr	r3, [r7, #24]
 8010218:	881b      	ldrh	r3, [r3, #0]
 801021a:	461a      	mov	r2, r3
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010224:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010226:	69bb      	ldr	r3, [r7, #24]
 8010228:	3302      	adds	r3, #2
 801022a:	61bb      	str	r3, [r7, #24]
 801022c:	e007      	b.n	801023e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801022e:	69fb      	ldr	r3, [r7, #28]
 8010230:	781a      	ldrb	r2, [r3, #0]
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010238:	69fb      	ldr	r3, [r7, #28]
 801023a:	3301      	adds	r3, #1
 801023c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010244:	b29b      	uxth	r3, r3
 8010246:	3b01      	subs	r3, #1
 8010248:	b29a      	uxth	r2, r3
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010256:	b29b      	uxth	r3, r3
 8010258:	2b00      	cmp	r3, #0
 801025a:	d1cc      	bne.n	80101f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	9300      	str	r3, [sp, #0]
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	2200      	movs	r2, #0
 8010264:	2140      	movs	r1, #64	; 0x40
 8010266:	68f8      	ldr	r0, [r7, #12]
 8010268:	f000 fec7 	bl	8010ffa <UART_WaitOnFlagUntilTimeout>
 801026c:	4603      	mov	r3, r0
 801026e:	2b00      	cmp	r3, #0
 8010270:	d001      	beq.n	8010276 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8010272:	2303      	movs	r3, #3
 8010274:	e005      	b.n	8010282 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2220      	movs	r2, #32
 801027a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801027c:	2300      	movs	r3, #0
 801027e:	e000      	b.n	8010282 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8010280:	2302      	movs	r3, #2
  }
}
 8010282:	4618      	mov	r0, r3
 8010284:	3720      	adds	r7, #32
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}

0801028a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801028a:	b580      	push	{r7, lr}
 801028c:	b08a      	sub	sp, #40	; 0x28
 801028e:	af00      	add	r7, sp, #0
 8010290:	60f8      	str	r0, [r7, #12]
 8010292:	60b9      	str	r1, [r7, #8]
 8010294:	4613      	mov	r3, r2
 8010296:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801029e:	2b20      	cmp	r3, #32
 80102a0:	d132      	bne.n	8010308 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d002      	beq.n	80102ae <HAL_UART_Receive_IT+0x24>
 80102a8:	88fb      	ldrh	r3, [r7, #6]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d101      	bne.n	80102b2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80102ae:	2301      	movs	r3, #1
 80102b0:	e02b      	b.n	801030a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	2200      	movs	r2, #0
 80102b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	685b      	ldr	r3, [r3, #4]
 80102be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d018      	beq.n	80102f8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	e853 3f00 	ldrex	r3, [r3]
 80102d2:	613b      	str	r3, [r7, #16]
   return(result);
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80102da:	627b      	str	r3, [r7, #36]	; 0x24
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	461a      	mov	r2, r3
 80102e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e4:	623b      	str	r3, [r7, #32]
 80102e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102e8:	69f9      	ldr	r1, [r7, #28]
 80102ea:	6a3a      	ldr	r2, [r7, #32]
 80102ec:	e841 2300 	strex	r3, r2, [r1]
 80102f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80102f2:	69bb      	ldr	r3, [r7, #24]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d1e6      	bne.n	80102c6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80102f8:	88fb      	ldrh	r3, [r7, #6]
 80102fa:	461a      	mov	r2, r3
 80102fc:	68b9      	ldr	r1, [r7, #8]
 80102fe:	68f8      	ldr	r0, [r7, #12]
 8010300:	f000 ff42 	bl	8011188 <UART_Start_Receive_IT>
 8010304:	4603      	mov	r3, r0
 8010306:	e000      	b.n	801030a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8010308:	2302      	movs	r3, #2
  }
}
 801030a:	4618      	mov	r0, r3
 801030c:	3728      	adds	r7, #40	; 0x28
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}

08010312 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010312:	b580      	push	{r7, lr}
 8010314:	b08a      	sub	sp, #40	; 0x28
 8010316:	af00      	add	r7, sp, #0
 8010318:	60f8      	str	r0, [r7, #12]
 801031a:	60b9      	str	r1, [r7, #8]
 801031c:	4613      	mov	r3, r2
 801031e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010326:	2b20      	cmp	r3, #32
 8010328:	d132      	bne.n	8010390 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d002      	beq.n	8010336 <HAL_UART_Receive_DMA+0x24>
 8010330:	88fb      	ldrh	r3, [r7, #6]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d101      	bne.n	801033a <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8010336:	2301      	movs	r3, #1
 8010338:	e02b      	b.n	8010392 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	2200      	movs	r2, #0
 801033e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	685b      	ldr	r3, [r3, #4]
 8010346:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801034a:	2b00      	cmp	r3, #0
 801034c:	d018      	beq.n	8010380 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010354:	697b      	ldr	r3, [r7, #20]
 8010356:	e853 3f00 	ldrex	r3, [r3]
 801035a:	613b      	str	r3, [r7, #16]
   return(result);
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010362:	627b      	str	r3, [r7, #36]	; 0x24
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	461a      	mov	r2, r3
 801036a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036c:	623b      	str	r3, [r7, #32]
 801036e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010370:	69f9      	ldr	r1, [r7, #28]
 8010372:	6a3a      	ldr	r2, [r7, #32]
 8010374:	e841 2300 	strex	r3, r2, [r1]
 8010378:	61bb      	str	r3, [r7, #24]
   return(result);
 801037a:	69bb      	ldr	r3, [r7, #24]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d1e6      	bne.n	801034e <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010380:	88fb      	ldrh	r3, [r7, #6]
 8010382:	461a      	mov	r2, r3
 8010384:	68b9      	ldr	r1, [r7, #8]
 8010386:	68f8      	ldr	r0, [r7, #12]
 8010388:	f000 ffc4 	bl	8011314 <UART_Start_Receive_DMA>
 801038c:	4603      	mov	r3, r0
 801038e:	e000      	b.n	8010392 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8010390:	2302      	movs	r3, #2
  }
}
 8010392:	4618      	mov	r0, r3
 8010394:	3728      	adds	r7, #40	; 0x28
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
	...

0801039c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b0ba      	sub	sp, #232	; 0xe8
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	69db      	ldr	r3, [r3, #28]
 80103aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	689b      	ldr	r3, [r3, #8]
 80103be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80103c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80103c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80103ca:	4013      	ands	r3, r2
 80103cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80103d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d115      	bne.n	8010404 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80103d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103dc:	f003 0320 	and.w	r3, r3, #32
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d00f      	beq.n	8010404 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80103e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80103e8:	f003 0320 	and.w	r3, r3, #32
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d009      	beq.n	8010404 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	f000 8297 	beq.w	8010928 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	4798      	blx	r3
      }
      return;
 8010402:	e291      	b.n	8010928 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010404:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010408:	2b00      	cmp	r3, #0
 801040a:	f000 8117 	beq.w	801063c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801040e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010412:	f003 0301 	and.w	r3, r3, #1
 8010416:	2b00      	cmp	r3, #0
 8010418:	d106      	bne.n	8010428 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801041a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801041e:	4b85      	ldr	r3, [pc, #532]	; (8010634 <HAL_UART_IRQHandler+0x298>)
 8010420:	4013      	ands	r3, r2
 8010422:	2b00      	cmp	r3, #0
 8010424:	f000 810a 	beq.w	801063c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801042c:	f003 0301 	and.w	r3, r3, #1
 8010430:	2b00      	cmp	r3, #0
 8010432:	d011      	beq.n	8010458 <HAL_UART_IRQHandler+0xbc>
 8010434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801043c:	2b00      	cmp	r3, #0
 801043e:	d00b      	beq.n	8010458 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	2201      	movs	r2, #1
 8010446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801044e:	f043 0201 	orr.w	r2, r3, #1
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801045c:	f003 0302 	and.w	r3, r3, #2
 8010460:	2b00      	cmp	r3, #0
 8010462:	d011      	beq.n	8010488 <HAL_UART_IRQHandler+0xec>
 8010464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010468:	f003 0301 	and.w	r3, r3, #1
 801046c:	2b00      	cmp	r3, #0
 801046e:	d00b      	beq.n	8010488 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	2202      	movs	r2, #2
 8010476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801047e:	f043 0204 	orr.w	r2, r3, #4
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801048c:	f003 0304 	and.w	r3, r3, #4
 8010490:	2b00      	cmp	r3, #0
 8010492:	d011      	beq.n	80104b8 <HAL_UART_IRQHandler+0x11c>
 8010494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010498:	f003 0301 	and.w	r3, r3, #1
 801049c:	2b00      	cmp	r3, #0
 801049e:	d00b      	beq.n	80104b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	2204      	movs	r2, #4
 80104a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80104ae:	f043 0202 	orr.w	r2, r3, #2
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80104b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80104bc:	f003 0308 	and.w	r3, r3, #8
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d017      	beq.n	80104f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80104c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80104c8:	f003 0320 	and.w	r3, r3, #32
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d105      	bne.n	80104dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80104d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80104d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d00b      	beq.n	80104f4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	2208      	movs	r2, #8
 80104e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80104ea:	f043 0208 	orr.w	r2, r3, #8
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80104f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80104f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d012      	beq.n	8010526 <HAL_UART_IRQHandler+0x18a>
 8010500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010504:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010508:	2b00      	cmp	r3, #0
 801050a:	d00c      	beq.n	8010526 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010514:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801051c:	f043 0220 	orr.w	r2, r3, #32
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801052c:	2b00      	cmp	r3, #0
 801052e:	f000 81fd 	beq.w	801092c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8010532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010536:	f003 0320 	and.w	r3, r3, #32
 801053a:	2b00      	cmp	r3, #0
 801053c:	d00d      	beq.n	801055a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801053e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010542:	f003 0320 	and.w	r3, r3, #32
 8010546:	2b00      	cmp	r3, #0
 8010548:	d007      	beq.n	801055a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801054e:	2b00      	cmp	r3, #0
 8010550:	d003      	beq.n	801055a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010560:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	689b      	ldr	r3, [r3, #8]
 801056a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801056e:	2b40      	cmp	r3, #64	; 0x40
 8010570:	d005      	beq.n	801057e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010576:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801057a:	2b00      	cmp	r3, #0
 801057c:	d04f      	beq.n	801061e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f000 ff8e 	bl	80114a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	689b      	ldr	r3, [r3, #8]
 801058a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801058e:	2b40      	cmp	r3, #64	; 0x40
 8010590:	d141      	bne.n	8010616 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	3308      	adds	r3, #8
 8010598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801059c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80105a0:	e853 3f00 	ldrex	r3, [r3]
 80105a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80105a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80105ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	3308      	adds	r3, #8
 80105ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80105be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80105c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80105ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80105ce:	e841 2300 	strex	r3, r2, [r1]
 80105d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80105d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d1d9      	bne.n	8010592 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d013      	beq.n	801060e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105ea:	4a13      	ldr	r2, [pc, #76]	; (8010638 <HAL_UART_IRQHandler+0x29c>)
 80105ec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7fa fdae 	bl	800b154 <HAL_DMA_Abort_IT>
 80105f8:	4603      	mov	r3, r0
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d017      	beq.n	801062e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010604:	687a      	ldr	r2, [r7, #4]
 8010606:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8010608:	4610      	mov	r0, r2
 801060a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801060c:	e00f      	b.n	801062e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f7f3 fce2 	bl	8003fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010614:	e00b      	b.n	801062e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f7f3 fcde 	bl	8003fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801061c:	e007      	b.n	801062e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801061e:	6878      	ldr	r0, [r7, #4]
 8010620:	f7f3 fcda 	bl	8003fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2200      	movs	r2, #0
 8010628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 801062c:	e17e      	b.n	801092c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801062e:	bf00      	nop
    return;
 8010630:	e17c      	b.n	801092c <HAL_UART_IRQHandler+0x590>
 8010632:	bf00      	nop
 8010634:	04000120 	.word	0x04000120
 8010638:	0801174d 	.word	0x0801174d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010640:	2b01      	cmp	r3, #1
 8010642:	f040 814c 	bne.w	80108de <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801064a:	f003 0310 	and.w	r3, r3, #16
 801064e:	2b00      	cmp	r3, #0
 8010650:	f000 8145 	beq.w	80108de <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010658:	f003 0310 	and.w	r3, r3, #16
 801065c:	2b00      	cmp	r3, #0
 801065e:	f000 813e 	beq.w	80108de <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	2210      	movs	r2, #16
 8010668:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	689b      	ldr	r3, [r3, #8]
 8010670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010674:	2b40      	cmp	r3, #64	; 0x40
 8010676:	f040 80b6 	bne.w	80107e6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	685b      	ldr	r3, [r3, #4]
 8010682:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010686:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801068a:	2b00      	cmp	r3, #0
 801068c:	f000 8150 	beq.w	8010930 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010696:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801069a:	429a      	cmp	r2, r3
 801069c:	f080 8148 	bcs.w	8010930 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80106a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106ae:	69db      	ldr	r3, [r3, #28]
 80106b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80106b4:	f000 8086 	beq.w	80107c4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80106c4:	e853 3f00 	ldrex	r3, [r3]
 80106c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80106cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80106d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80106d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	461a      	mov	r2, r3
 80106de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80106e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80106e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80106ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80106f2:	e841 2300 	strex	r3, r2, [r1]
 80106f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80106fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d1da      	bne.n	80106b8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	3308      	adds	r3, #8
 8010708:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801070a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801070c:	e853 3f00 	ldrex	r3, [r3]
 8010710:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010712:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010714:	f023 0301 	bic.w	r3, r3, #1
 8010718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	3308      	adds	r3, #8
 8010722:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010726:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801072a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801072c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801072e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010732:	e841 2300 	strex	r3, r2, [r1]
 8010736:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010738:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801073a:	2b00      	cmp	r3, #0
 801073c:	d1e1      	bne.n	8010702 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	3308      	adds	r3, #8
 8010744:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010748:	e853 3f00 	ldrex	r3, [r3]
 801074c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801074e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010754:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	3308      	adds	r3, #8
 801075e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010762:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010764:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010766:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010768:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801076a:	e841 2300 	strex	r3, r2, [r1]
 801076e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010772:	2b00      	cmp	r3, #0
 8010774:	d1e3      	bne.n	801073e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2220      	movs	r2, #32
 801077a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2200      	movs	r2, #0
 8010782:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801078a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801078c:	e853 3f00 	ldrex	r3, [r3]
 8010790:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010794:	f023 0310 	bic.w	r3, r3, #16
 8010798:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	461a      	mov	r2, r3
 80107a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80107a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80107a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80107ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80107ae:	e841 2300 	strex	r3, r2, [r1]
 80107b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80107b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d1e4      	bne.n	8010784 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107be:	4618      	mov	r0, r3
 80107c0:	f7fa fc58 	bl	800b074 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2202      	movs	r2, #2
 80107c8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80107d6:	b29b      	uxth	r3, r3
 80107d8:	1ad3      	subs	r3, r2, r3
 80107da:	b29b      	uxth	r3, r3
 80107dc:	4619      	mov	r1, r3
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f000 f8c2 	bl	8010968 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80107e4:	e0a4      	b.n	8010930 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80107f2:	b29b      	uxth	r3, r3
 80107f4:	1ad3      	subs	r3, r2, r3
 80107f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010800:	b29b      	uxth	r3, r3
 8010802:	2b00      	cmp	r3, #0
 8010804:	f000 8096 	beq.w	8010934 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8010808:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801080c:	2b00      	cmp	r3, #0
 801080e:	f000 8091 	beq.w	8010934 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801081a:	e853 3f00 	ldrex	r3, [r3]
 801081e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010822:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010826:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	461a      	mov	r2, r3
 8010830:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010834:	647b      	str	r3, [r7, #68]	; 0x44
 8010836:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010838:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801083a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801083c:	e841 2300 	strex	r3, r2, [r1]
 8010840:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010844:	2b00      	cmp	r3, #0
 8010846:	d1e4      	bne.n	8010812 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	3308      	adds	r3, #8
 801084e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010852:	e853 3f00 	ldrex	r3, [r3]
 8010856:	623b      	str	r3, [r7, #32]
   return(result);
 8010858:	6a3b      	ldr	r3, [r7, #32]
 801085a:	f023 0301 	bic.w	r3, r3, #1
 801085e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	3308      	adds	r3, #8
 8010868:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801086c:	633a      	str	r2, [r7, #48]	; 0x30
 801086e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010870:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010874:	e841 2300 	strex	r3, r2, [r1]
 8010878:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801087a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801087c:	2b00      	cmp	r3, #0
 801087e:	d1e3      	bne.n	8010848 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2220      	movs	r2, #32
 8010884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2200      	movs	r2, #0
 801088c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	2200      	movs	r2, #0
 8010892:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	e853 3f00 	ldrex	r3, [r3]
 80108a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	f023 0310 	bic.w	r3, r3, #16
 80108a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	461a      	mov	r2, r3
 80108b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80108b6:	61fb      	str	r3, [r7, #28]
 80108b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ba:	69b9      	ldr	r1, [r7, #24]
 80108bc:	69fa      	ldr	r2, [r7, #28]
 80108be:	e841 2300 	strex	r3, r2, [r1]
 80108c2:	617b      	str	r3, [r7, #20]
   return(result);
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d1e4      	bne.n	8010894 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2202      	movs	r2, #2
 80108ce:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80108d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80108d4:	4619      	mov	r1, r3
 80108d6:	6878      	ldr	r0, [r7, #4]
 80108d8:	f000 f846 	bl	8010968 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80108dc:	e02a      	b.n	8010934 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80108de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d00e      	beq.n	8010908 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80108ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d008      	beq.n	8010908 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d01c      	beq.n	8010938 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	4798      	blx	r3
    }
    return;
 8010906:	e017      	b.n	8010938 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801090c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010910:	2b00      	cmp	r3, #0
 8010912:	d012      	beq.n	801093a <HAL_UART_IRQHandler+0x59e>
 8010914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801091c:	2b00      	cmp	r3, #0
 801091e:	d00c      	beq.n	801093a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f000 ff29 	bl	8011778 <UART_EndTransmit_IT>
    return;
 8010926:	e008      	b.n	801093a <HAL_UART_IRQHandler+0x59e>
      return;
 8010928:	bf00      	nop
 801092a:	e006      	b.n	801093a <HAL_UART_IRQHandler+0x59e>
    return;
 801092c:	bf00      	nop
 801092e:	e004      	b.n	801093a <HAL_UART_IRQHandler+0x59e>
      return;
 8010930:	bf00      	nop
 8010932:	e002      	b.n	801093a <HAL_UART_IRQHandler+0x59e>
      return;
 8010934:	bf00      	nop
 8010936:	e000      	b.n	801093a <HAL_UART_IRQHandler+0x59e>
    return;
 8010938:	bf00      	nop
  }

}
 801093a:	37e8      	adds	r7, #232	; 0xe8
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}

08010940 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010940:	b480      	push	{r7}
 8010942:	b083      	sub	sp, #12
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010948:	bf00      	nop
 801094a:	370c      	adds	r7, #12
 801094c:	46bd      	mov	sp, r7
 801094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010952:	4770      	bx	lr

08010954 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010954:	b480      	push	{r7}
 8010956:	b083      	sub	sp, #12
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801095c:	bf00      	nop
 801095e:	370c      	adds	r7, #12
 8010960:	46bd      	mov	sp, r7
 8010962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010966:	4770      	bx	lr

08010968 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010968:	b480      	push	{r7}
 801096a:	b083      	sub	sp, #12
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
 8010970:	460b      	mov	r3, r1
 8010972:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010974:	bf00      	nop
 8010976:	370c      	adds	r7, #12
 8010978:	46bd      	mov	sp, r7
 801097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097e:	4770      	bx	lr

08010980 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b088      	sub	sp, #32
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010988:	2300      	movs	r3, #0
 801098a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	689a      	ldr	r2, [r3, #8]
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	691b      	ldr	r3, [r3, #16]
 8010994:	431a      	orrs	r2, r3
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	695b      	ldr	r3, [r3, #20]
 801099a:	431a      	orrs	r2, r3
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	69db      	ldr	r3, [r3, #28]
 80109a0:	4313      	orrs	r3, r2
 80109a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	681a      	ldr	r2, [r3, #0]
 80109aa:	4ba6      	ldr	r3, [pc, #664]	; (8010c44 <UART_SetConfig+0x2c4>)
 80109ac:	4013      	ands	r3, r2
 80109ae:	687a      	ldr	r2, [r7, #4]
 80109b0:	6812      	ldr	r2, [r2, #0]
 80109b2:	6979      	ldr	r1, [r7, #20]
 80109b4:	430b      	orrs	r3, r1
 80109b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	685b      	ldr	r3, [r3, #4]
 80109be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	68da      	ldr	r2, [r3, #12]
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	430a      	orrs	r2, r1
 80109cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	699b      	ldr	r3, [r3, #24]
 80109d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	6a1b      	ldr	r3, [r3, #32]
 80109d8:	697a      	ldr	r2, [r7, #20]
 80109da:	4313      	orrs	r3, r2
 80109dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	689b      	ldr	r3, [r3, #8]
 80109e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	697a      	ldr	r2, [r7, #20]
 80109ee:	430a      	orrs	r2, r1
 80109f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	4a94      	ldr	r2, [pc, #592]	; (8010c48 <UART_SetConfig+0x2c8>)
 80109f8:	4293      	cmp	r3, r2
 80109fa:	d120      	bne.n	8010a3e <UART_SetConfig+0xbe>
 80109fc:	4b93      	ldr	r3, [pc, #588]	; (8010c4c <UART_SetConfig+0x2cc>)
 80109fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a02:	f003 0303 	and.w	r3, r3, #3
 8010a06:	2b03      	cmp	r3, #3
 8010a08:	d816      	bhi.n	8010a38 <UART_SetConfig+0xb8>
 8010a0a:	a201      	add	r2, pc, #4	; (adr r2, 8010a10 <UART_SetConfig+0x90>)
 8010a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a10:	08010a21 	.word	0x08010a21
 8010a14:	08010a2d 	.word	0x08010a2d
 8010a18:	08010a27 	.word	0x08010a27
 8010a1c:	08010a33 	.word	0x08010a33
 8010a20:	2301      	movs	r3, #1
 8010a22:	77fb      	strb	r3, [r7, #31]
 8010a24:	e150      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010a26:	2302      	movs	r3, #2
 8010a28:	77fb      	strb	r3, [r7, #31]
 8010a2a:	e14d      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010a2c:	2304      	movs	r3, #4
 8010a2e:	77fb      	strb	r3, [r7, #31]
 8010a30:	e14a      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010a32:	2308      	movs	r3, #8
 8010a34:	77fb      	strb	r3, [r7, #31]
 8010a36:	e147      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010a38:	2310      	movs	r3, #16
 8010a3a:	77fb      	strb	r3, [r7, #31]
 8010a3c:	e144      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	4a83      	ldr	r2, [pc, #524]	; (8010c50 <UART_SetConfig+0x2d0>)
 8010a44:	4293      	cmp	r3, r2
 8010a46:	d132      	bne.n	8010aae <UART_SetConfig+0x12e>
 8010a48:	4b80      	ldr	r3, [pc, #512]	; (8010c4c <UART_SetConfig+0x2cc>)
 8010a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a4e:	f003 030c 	and.w	r3, r3, #12
 8010a52:	2b0c      	cmp	r3, #12
 8010a54:	d828      	bhi.n	8010aa8 <UART_SetConfig+0x128>
 8010a56:	a201      	add	r2, pc, #4	; (adr r2, 8010a5c <UART_SetConfig+0xdc>)
 8010a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a5c:	08010a91 	.word	0x08010a91
 8010a60:	08010aa9 	.word	0x08010aa9
 8010a64:	08010aa9 	.word	0x08010aa9
 8010a68:	08010aa9 	.word	0x08010aa9
 8010a6c:	08010a9d 	.word	0x08010a9d
 8010a70:	08010aa9 	.word	0x08010aa9
 8010a74:	08010aa9 	.word	0x08010aa9
 8010a78:	08010aa9 	.word	0x08010aa9
 8010a7c:	08010a97 	.word	0x08010a97
 8010a80:	08010aa9 	.word	0x08010aa9
 8010a84:	08010aa9 	.word	0x08010aa9
 8010a88:	08010aa9 	.word	0x08010aa9
 8010a8c:	08010aa3 	.word	0x08010aa3
 8010a90:	2300      	movs	r3, #0
 8010a92:	77fb      	strb	r3, [r7, #31]
 8010a94:	e118      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010a96:	2302      	movs	r3, #2
 8010a98:	77fb      	strb	r3, [r7, #31]
 8010a9a:	e115      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010a9c:	2304      	movs	r3, #4
 8010a9e:	77fb      	strb	r3, [r7, #31]
 8010aa0:	e112      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010aa2:	2308      	movs	r3, #8
 8010aa4:	77fb      	strb	r3, [r7, #31]
 8010aa6:	e10f      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010aa8:	2310      	movs	r3, #16
 8010aaa:	77fb      	strb	r3, [r7, #31]
 8010aac:	e10c      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	4a68      	ldr	r2, [pc, #416]	; (8010c54 <UART_SetConfig+0x2d4>)
 8010ab4:	4293      	cmp	r3, r2
 8010ab6:	d120      	bne.n	8010afa <UART_SetConfig+0x17a>
 8010ab8:	4b64      	ldr	r3, [pc, #400]	; (8010c4c <UART_SetConfig+0x2cc>)
 8010aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010abe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010ac2:	2b30      	cmp	r3, #48	; 0x30
 8010ac4:	d013      	beq.n	8010aee <UART_SetConfig+0x16e>
 8010ac6:	2b30      	cmp	r3, #48	; 0x30
 8010ac8:	d814      	bhi.n	8010af4 <UART_SetConfig+0x174>
 8010aca:	2b20      	cmp	r3, #32
 8010acc:	d009      	beq.n	8010ae2 <UART_SetConfig+0x162>
 8010ace:	2b20      	cmp	r3, #32
 8010ad0:	d810      	bhi.n	8010af4 <UART_SetConfig+0x174>
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d002      	beq.n	8010adc <UART_SetConfig+0x15c>
 8010ad6:	2b10      	cmp	r3, #16
 8010ad8:	d006      	beq.n	8010ae8 <UART_SetConfig+0x168>
 8010ada:	e00b      	b.n	8010af4 <UART_SetConfig+0x174>
 8010adc:	2300      	movs	r3, #0
 8010ade:	77fb      	strb	r3, [r7, #31]
 8010ae0:	e0f2      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010ae2:	2302      	movs	r3, #2
 8010ae4:	77fb      	strb	r3, [r7, #31]
 8010ae6:	e0ef      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010ae8:	2304      	movs	r3, #4
 8010aea:	77fb      	strb	r3, [r7, #31]
 8010aec:	e0ec      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010aee:	2308      	movs	r3, #8
 8010af0:	77fb      	strb	r3, [r7, #31]
 8010af2:	e0e9      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010af4:	2310      	movs	r3, #16
 8010af6:	77fb      	strb	r3, [r7, #31]
 8010af8:	e0e6      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	4a56      	ldr	r2, [pc, #344]	; (8010c58 <UART_SetConfig+0x2d8>)
 8010b00:	4293      	cmp	r3, r2
 8010b02:	d120      	bne.n	8010b46 <UART_SetConfig+0x1c6>
 8010b04:	4b51      	ldr	r3, [pc, #324]	; (8010c4c <UART_SetConfig+0x2cc>)
 8010b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010b0e:	2bc0      	cmp	r3, #192	; 0xc0
 8010b10:	d013      	beq.n	8010b3a <UART_SetConfig+0x1ba>
 8010b12:	2bc0      	cmp	r3, #192	; 0xc0
 8010b14:	d814      	bhi.n	8010b40 <UART_SetConfig+0x1c0>
 8010b16:	2b80      	cmp	r3, #128	; 0x80
 8010b18:	d009      	beq.n	8010b2e <UART_SetConfig+0x1ae>
 8010b1a:	2b80      	cmp	r3, #128	; 0x80
 8010b1c:	d810      	bhi.n	8010b40 <UART_SetConfig+0x1c0>
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d002      	beq.n	8010b28 <UART_SetConfig+0x1a8>
 8010b22:	2b40      	cmp	r3, #64	; 0x40
 8010b24:	d006      	beq.n	8010b34 <UART_SetConfig+0x1b4>
 8010b26:	e00b      	b.n	8010b40 <UART_SetConfig+0x1c0>
 8010b28:	2300      	movs	r3, #0
 8010b2a:	77fb      	strb	r3, [r7, #31]
 8010b2c:	e0cc      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010b2e:	2302      	movs	r3, #2
 8010b30:	77fb      	strb	r3, [r7, #31]
 8010b32:	e0c9      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010b34:	2304      	movs	r3, #4
 8010b36:	77fb      	strb	r3, [r7, #31]
 8010b38:	e0c6      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010b3a:	2308      	movs	r3, #8
 8010b3c:	77fb      	strb	r3, [r7, #31]
 8010b3e:	e0c3      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010b40:	2310      	movs	r3, #16
 8010b42:	77fb      	strb	r3, [r7, #31]
 8010b44:	e0c0      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	4a44      	ldr	r2, [pc, #272]	; (8010c5c <UART_SetConfig+0x2dc>)
 8010b4c:	4293      	cmp	r3, r2
 8010b4e:	d125      	bne.n	8010b9c <UART_SetConfig+0x21c>
 8010b50:	4b3e      	ldr	r3, [pc, #248]	; (8010c4c <UART_SetConfig+0x2cc>)
 8010b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010b5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010b5e:	d017      	beq.n	8010b90 <UART_SetConfig+0x210>
 8010b60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010b64:	d817      	bhi.n	8010b96 <UART_SetConfig+0x216>
 8010b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b6a:	d00b      	beq.n	8010b84 <UART_SetConfig+0x204>
 8010b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b70:	d811      	bhi.n	8010b96 <UART_SetConfig+0x216>
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d003      	beq.n	8010b7e <UART_SetConfig+0x1fe>
 8010b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b7a:	d006      	beq.n	8010b8a <UART_SetConfig+0x20a>
 8010b7c:	e00b      	b.n	8010b96 <UART_SetConfig+0x216>
 8010b7e:	2300      	movs	r3, #0
 8010b80:	77fb      	strb	r3, [r7, #31]
 8010b82:	e0a1      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010b84:	2302      	movs	r3, #2
 8010b86:	77fb      	strb	r3, [r7, #31]
 8010b88:	e09e      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010b8a:	2304      	movs	r3, #4
 8010b8c:	77fb      	strb	r3, [r7, #31]
 8010b8e:	e09b      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010b90:	2308      	movs	r3, #8
 8010b92:	77fb      	strb	r3, [r7, #31]
 8010b94:	e098      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010b96:	2310      	movs	r3, #16
 8010b98:	77fb      	strb	r3, [r7, #31]
 8010b9a:	e095      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	4a2f      	ldr	r2, [pc, #188]	; (8010c60 <UART_SetConfig+0x2e0>)
 8010ba2:	4293      	cmp	r3, r2
 8010ba4:	d125      	bne.n	8010bf2 <UART_SetConfig+0x272>
 8010ba6:	4b29      	ldr	r3, [pc, #164]	; (8010c4c <UART_SetConfig+0x2cc>)
 8010ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010bac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010bb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010bb4:	d017      	beq.n	8010be6 <UART_SetConfig+0x266>
 8010bb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010bba:	d817      	bhi.n	8010bec <UART_SetConfig+0x26c>
 8010bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010bc0:	d00b      	beq.n	8010bda <UART_SetConfig+0x25a>
 8010bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010bc6:	d811      	bhi.n	8010bec <UART_SetConfig+0x26c>
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d003      	beq.n	8010bd4 <UART_SetConfig+0x254>
 8010bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010bd0:	d006      	beq.n	8010be0 <UART_SetConfig+0x260>
 8010bd2:	e00b      	b.n	8010bec <UART_SetConfig+0x26c>
 8010bd4:	2301      	movs	r3, #1
 8010bd6:	77fb      	strb	r3, [r7, #31]
 8010bd8:	e076      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010bda:	2302      	movs	r3, #2
 8010bdc:	77fb      	strb	r3, [r7, #31]
 8010bde:	e073      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010be0:	2304      	movs	r3, #4
 8010be2:	77fb      	strb	r3, [r7, #31]
 8010be4:	e070      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010be6:	2308      	movs	r3, #8
 8010be8:	77fb      	strb	r3, [r7, #31]
 8010bea:	e06d      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010bec:	2310      	movs	r3, #16
 8010bee:	77fb      	strb	r3, [r7, #31]
 8010bf0:	e06a      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	4a1b      	ldr	r2, [pc, #108]	; (8010c64 <UART_SetConfig+0x2e4>)
 8010bf8:	4293      	cmp	r3, r2
 8010bfa:	d138      	bne.n	8010c6e <UART_SetConfig+0x2ee>
 8010bfc:	4b13      	ldr	r3, [pc, #76]	; (8010c4c <UART_SetConfig+0x2cc>)
 8010bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c02:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8010c06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010c0a:	d017      	beq.n	8010c3c <UART_SetConfig+0x2bc>
 8010c0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010c10:	d82a      	bhi.n	8010c68 <UART_SetConfig+0x2e8>
 8010c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010c16:	d00b      	beq.n	8010c30 <UART_SetConfig+0x2b0>
 8010c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010c1c:	d824      	bhi.n	8010c68 <UART_SetConfig+0x2e8>
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d003      	beq.n	8010c2a <UART_SetConfig+0x2aa>
 8010c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c26:	d006      	beq.n	8010c36 <UART_SetConfig+0x2b6>
 8010c28:	e01e      	b.n	8010c68 <UART_SetConfig+0x2e8>
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	77fb      	strb	r3, [r7, #31]
 8010c2e:	e04b      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010c30:	2302      	movs	r3, #2
 8010c32:	77fb      	strb	r3, [r7, #31]
 8010c34:	e048      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010c36:	2304      	movs	r3, #4
 8010c38:	77fb      	strb	r3, [r7, #31]
 8010c3a:	e045      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010c3c:	2308      	movs	r3, #8
 8010c3e:	77fb      	strb	r3, [r7, #31]
 8010c40:	e042      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010c42:	bf00      	nop
 8010c44:	efff69f3 	.word	0xefff69f3
 8010c48:	40011000 	.word	0x40011000
 8010c4c:	40023800 	.word	0x40023800
 8010c50:	40004400 	.word	0x40004400
 8010c54:	40004800 	.word	0x40004800
 8010c58:	40004c00 	.word	0x40004c00
 8010c5c:	40005000 	.word	0x40005000
 8010c60:	40011400 	.word	0x40011400
 8010c64:	40007800 	.word	0x40007800
 8010c68:	2310      	movs	r3, #16
 8010c6a:	77fb      	strb	r3, [r7, #31]
 8010c6c:	e02c      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	4a72      	ldr	r2, [pc, #456]	; (8010e3c <UART_SetConfig+0x4bc>)
 8010c74:	4293      	cmp	r3, r2
 8010c76:	d125      	bne.n	8010cc4 <UART_SetConfig+0x344>
 8010c78:	4b71      	ldr	r3, [pc, #452]	; (8010e40 <UART_SetConfig+0x4c0>)
 8010c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010c82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010c86:	d017      	beq.n	8010cb8 <UART_SetConfig+0x338>
 8010c88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010c8c:	d817      	bhi.n	8010cbe <UART_SetConfig+0x33e>
 8010c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c92:	d00b      	beq.n	8010cac <UART_SetConfig+0x32c>
 8010c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c98:	d811      	bhi.n	8010cbe <UART_SetConfig+0x33e>
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d003      	beq.n	8010ca6 <UART_SetConfig+0x326>
 8010c9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010ca2:	d006      	beq.n	8010cb2 <UART_SetConfig+0x332>
 8010ca4:	e00b      	b.n	8010cbe <UART_SetConfig+0x33e>
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	77fb      	strb	r3, [r7, #31]
 8010caa:	e00d      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010cac:	2302      	movs	r3, #2
 8010cae:	77fb      	strb	r3, [r7, #31]
 8010cb0:	e00a      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010cb2:	2304      	movs	r3, #4
 8010cb4:	77fb      	strb	r3, [r7, #31]
 8010cb6:	e007      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010cb8:	2308      	movs	r3, #8
 8010cba:	77fb      	strb	r3, [r7, #31]
 8010cbc:	e004      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010cbe:	2310      	movs	r3, #16
 8010cc0:	77fb      	strb	r3, [r7, #31]
 8010cc2:	e001      	b.n	8010cc8 <UART_SetConfig+0x348>
 8010cc4:	2310      	movs	r3, #16
 8010cc6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	69db      	ldr	r3, [r3, #28]
 8010ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010cd0:	d15b      	bne.n	8010d8a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8010cd2:	7ffb      	ldrb	r3, [r7, #31]
 8010cd4:	2b08      	cmp	r3, #8
 8010cd6:	d828      	bhi.n	8010d2a <UART_SetConfig+0x3aa>
 8010cd8:	a201      	add	r2, pc, #4	; (adr r2, 8010ce0 <UART_SetConfig+0x360>)
 8010cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cde:	bf00      	nop
 8010ce0:	08010d05 	.word	0x08010d05
 8010ce4:	08010d0d 	.word	0x08010d0d
 8010ce8:	08010d15 	.word	0x08010d15
 8010cec:	08010d2b 	.word	0x08010d2b
 8010cf0:	08010d1b 	.word	0x08010d1b
 8010cf4:	08010d2b 	.word	0x08010d2b
 8010cf8:	08010d2b 	.word	0x08010d2b
 8010cfc:	08010d2b 	.word	0x08010d2b
 8010d00:	08010d23 	.word	0x08010d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d04:	f7fc f90a 	bl	800cf1c <HAL_RCC_GetPCLK1Freq>
 8010d08:	61b8      	str	r0, [r7, #24]
        break;
 8010d0a:	e013      	b.n	8010d34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d0c:	f7fc f91a 	bl	800cf44 <HAL_RCC_GetPCLK2Freq>
 8010d10:	61b8      	str	r0, [r7, #24]
        break;
 8010d12:	e00f      	b.n	8010d34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010d14:	4b4b      	ldr	r3, [pc, #300]	; (8010e44 <UART_SetConfig+0x4c4>)
 8010d16:	61bb      	str	r3, [r7, #24]
        break;
 8010d18:	e00c      	b.n	8010d34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010d1a:	f7fc f82d 	bl	800cd78 <HAL_RCC_GetSysClockFreq>
 8010d1e:	61b8      	str	r0, [r7, #24]
        break;
 8010d20:	e008      	b.n	8010d34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010d26:	61bb      	str	r3, [r7, #24]
        break;
 8010d28:	e004      	b.n	8010d34 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010d2e:	2301      	movs	r3, #1
 8010d30:	77bb      	strb	r3, [r7, #30]
        break;
 8010d32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010d34:	69bb      	ldr	r3, [r7, #24]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d074      	beq.n	8010e24 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010d3a:	69bb      	ldr	r3, [r7, #24]
 8010d3c:	005a      	lsls	r2, r3, #1
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	685b      	ldr	r3, [r3, #4]
 8010d42:	085b      	lsrs	r3, r3, #1
 8010d44:	441a      	add	r2, r3
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	685b      	ldr	r3, [r3, #4]
 8010d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010d50:	693b      	ldr	r3, [r7, #16]
 8010d52:	2b0f      	cmp	r3, #15
 8010d54:	d916      	bls.n	8010d84 <UART_SetConfig+0x404>
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d5c:	d212      	bcs.n	8010d84 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010d5e:	693b      	ldr	r3, [r7, #16]
 8010d60:	b29b      	uxth	r3, r3
 8010d62:	f023 030f 	bic.w	r3, r3, #15
 8010d66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010d68:	693b      	ldr	r3, [r7, #16]
 8010d6a:	085b      	lsrs	r3, r3, #1
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	f003 0307 	and.w	r3, r3, #7
 8010d72:	b29a      	uxth	r2, r3
 8010d74:	89fb      	ldrh	r3, [r7, #14]
 8010d76:	4313      	orrs	r3, r2
 8010d78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	89fa      	ldrh	r2, [r7, #14]
 8010d80:	60da      	str	r2, [r3, #12]
 8010d82:	e04f      	b.n	8010e24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8010d84:	2301      	movs	r3, #1
 8010d86:	77bb      	strb	r3, [r7, #30]
 8010d88:	e04c      	b.n	8010e24 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010d8a:	7ffb      	ldrb	r3, [r7, #31]
 8010d8c:	2b08      	cmp	r3, #8
 8010d8e:	d828      	bhi.n	8010de2 <UART_SetConfig+0x462>
 8010d90:	a201      	add	r2, pc, #4	; (adr r2, 8010d98 <UART_SetConfig+0x418>)
 8010d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d96:	bf00      	nop
 8010d98:	08010dbd 	.word	0x08010dbd
 8010d9c:	08010dc5 	.word	0x08010dc5
 8010da0:	08010dcd 	.word	0x08010dcd
 8010da4:	08010de3 	.word	0x08010de3
 8010da8:	08010dd3 	.word	0x08010dd3
 8010dac:	08010de3 	.word	0x08010de3
 8010db0:	08010de3 	.word	0x08010de3
 8010db4:	08010de3 	.word	0x08010de3
 8010db8:	08010ddb 	.word	0x08010ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010dbc:	f7fc f8ae 	bl	800cf1c <HAL_RCC_GetPCLK1Freq>
 8010dc0:	61b8      	str	r0, [r7, #24]
        break;
 8010dc2:	e013      	b.n	8010dec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010dc4:	f7fc f8be 	bl	800cf44 <HAL_RCC_GetPCLK2Freq>
 8010dc8:	61b8      	str	r0, [r7, #24]
        break;
 8010dca:	e00f      	b.n	8010dec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010dcc:	4b1d      	ldr	r3, [pc, #116]	; (8010e44 <UART_SetConfig+0x4c4>)
 8010dce:	61bb      	str	r3, [r7, #24]
        break;
 8010dd0:	e00c      	b.n	8010dec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010dd2:	f7fb ffd1 	bl	800cd78 <HAL_RCC_GetSysClockFreq>
 8010dd6:	61b8      	str	r0, [r7, #24]
        break;
 8010dd8:	e008      	b.n	8010dec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010dde:	61bb      	str	r3, [r7, #24]
        break;
 8010de0:	e004      	b.n	8010dec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8010de2:	2300      	movs	r3, #0
 8010de4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010de6:	2301      	movs	r3, #1
 8010de8:	77bb      	strb	r3, [r7, #30]
        break;
 8010dea:	bf00      	nop
    }

    if (pclk != 0U)
 8010dec:	69bb      	ldr	r3, [r7, #24]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d018      	beq.n	8010e24 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	085a      	lsrs	r2, r3, #1
 8010df8:	69bb      	ldr	r3, [r7, #24]
 8010dfa:	441a      	add	r2, r3
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010e06:	693b      	ldr	r3, [r7, #16]
 8010e08:	2b0f      	cmp	r3, #15
 8010e0a:	d909      	bls.n	8010e20 <UART_SetConfig+0x4a0>
 8010e0c:	693b      	ldr	r3, [r7, #16]
 8010e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e12:	d205      	bcs.n	8010e20 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010e14:	693b      	ldr	r3, [r7, #16]
 8010e16:	b29a      	uxth	r2, r3
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	60da      	str	r2, [r3, #12]
 8010e1e:	e001      	b.n	8010e24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8010e20:	2301      	movs	r3, #1
 8010e22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2200      	movs	r2, #0
 8010e28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8010e30:	7fbb      	ldrb	r3, [r7, #30]
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3720      	adds	r7, #32
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}
 8010e3a:	bf00      	nop
 8010e3c:	40007c00 	.word	0x40007c00
 8010e40:	40023800 	.word	0x40023800
 8010e44:	00f42400 	.word	0x00f42400

08010e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010e48:	b480      	push	{r7}
 8010e4a:	b083      	sub	sp, #12
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e54:	f003 0301 	and.w	r3, r3, #1
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d00a      	beq.n	8010e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	685b      	ldr	r3, [r3, #4]
 8010e62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	430a      	orrs	r2, r1
 8010e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e76:	f003 0302 	and.w	r3, r3, #2
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d00a      	beq.n	8010e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	685b      	ldr	r3, [r3, #4]
 8010e84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	430a      	orrs	r2, r1
 8010e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e98:	f003 0304 	and.w	r3, r3, #4
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d00a      	beq.n	8010eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	685b      	ldr	r3, [r3, #4]
 8010ea6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	430a      	orrs	r2, r1
 8010eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eba:	f003 0308 	and.w	r3, r3, #8
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d00a      	beq.n	8010ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	430a      	orrs	r2, r1
 8010ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010edc:	f003 0310 	and.w	r3, r3, #16
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d00a      	beq.n	8010efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	689b      	ldr	r3, [r3, #8]
 8010eea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	430a      	orrs	r2, r1
 8010ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010efe:	f003 0320 	and.w	r3, r3, #32
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d00a      	beq.n	8010f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	689b      	ldr	r3, [r3, #8]
 8010f0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	430a      	orrs	r2, r1
 8010f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d01a      	beq.n	8010f5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	685b      	ldr	r3, [r3, #4]
 8010f2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	430a      	orrs	r2, r1
 8010f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010f46:	d10a      	bne.n	8010f5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	685b      	ldr	r3, [r3, #4]
 8010f4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	430a      	orrs	r2, r1
 8010f5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d00a      	beq.n	8010f80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	685b      	ldr	r3, [r3, #4]
 8010f70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	430a      	orrs	r2, r1
 8010f7e:	605a      	str	r2, [r3, #4]
  }
}
 8010f80:	bf00      	nop
 8010f82:	370c      	adds	r7, #12
 8010f84:	46bd      	mov	sp, r7
 8010f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8a:	4770      	bx	lr

08010f8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b086      	sub	sp, #24
 8010f90:	af02      	add	r7, sp, #8
 8010f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2200      	movs	r2, #0
 8010f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010f9c:	f7f9 fe4a 	bl	800ac34 <HAL_GetTick>
 8010fa0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	f003 0308 	and.w	r3, r3, #8
 8010fac:	2b08      	cmp	r3, #8
 8010fae:	d10e      	bne.n	8010fce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010fb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010fb4:	9300      	str	r3, [sp, #0]
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	2200      	movs	r2, #0
 8010fba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	f000 f81b 	bl	8010ffa <UART_WaitOnFlagUntilTimeout>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d001      	beq.n	8010fce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010fca:	2303      	movs	r3, #3
 8010fcc:	e011      	b.n	8010ff2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2220      	movs	r2, #32
 8010fd2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2220      	movs	r2, #32
 8010fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	2200      	movs	r2, #0
 8010fe0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2200      	movs	r2, #0
 8010fec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8010ff0:	2300      	movs	r3, #0
}
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	3710      	adds	r7, #16
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	bd80      	pop	{r7, pc}

08010ffa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010ffa:	b580      	push	{r7, lr}
 8010ffc:	b09c      	sub	sp, #112	; 0x70
 8010ffe:	af00      	add	r7, sp, #0
 8011000:	60f8      	str	r0, [r7, #12]
 8011002:	60b9      	str	r1, [r7, #8]
 8011004:	603b      	str	r3, [r7, #0]
 8011006:	4613      	mov	r3, r2
 8011008:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801100a:	e0a7      	b.n	801115c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801100c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801100e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011012:	f000 80a3 	beq.w	801115c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011016:	f7f9 fe0d 	bl	800ac34 <HAL_GetTick>
 801101a:	4602      	mov	r2, r0
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	1ad3      	subs	r3, r2, r3
 8011020:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011022:	429a      	cmp	r2, r3
 8011024:	d302      	bcc.n	801102c <UART_WaitOnFlagUntilTimeout+0x32>
 8011026:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011028:	2b00      	cmp	r3, #0
 801102a:	d13f      	bne.n	80110ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011034:	e853 3f00 	ldrex	r3, [r3]
 8011038:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801103a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801103c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011040:	667b      	str	r3, [r7, #100]	; 0x64
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	461a      	mov	r2, r3
 8011048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801104a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801104c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801104e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011050:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011052:	e841 2300 	strex	r3, r2, [r1]
 8011056:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801105a:	2b00      	cmp	r3, #0
 801105c:	d1e6      	bne.n	801102c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	3308      	adds	r3, #8
 8011064:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011068:	e853 3f00 	ldrex	r3, [r3]
 801106c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801106e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011070:	f023 0301 	bic.w	r3, r3, #1
 8011074:	663b      	str	r3, [r7, #96]	; 0x60
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	3308      	adds	r3, #8
 801107c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801107e:	64ba      	str	r2, [r7, #72]	; 0x48
 8011080:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011082:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011086:	e841 2300 	strex	r3, r2, [r1]
 801108a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801108c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801108e:	2b00      	cmp	r3, #0
 8011090:	d1e5      	bne.n	801105e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	2220      	movs	r2, #32
 8011096:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	2220      	movs	r2, #32
 801109c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	2200      	movs	r2, #0
 80110a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80110a8:	2303      	movs	r3, #3
 80110aa:	e068      	b.n	801117e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	f003 0304 	and.w	r3, r3, #4
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d050      	beq.n	801115c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	69db      	ldr	r3, [r3, #28]
 80110c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80110c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80110c8:	d148      	bne.n	801115c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80110d2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110dc:	e853 3f00 	ldrex	r3, [r3]
 80110e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80110e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80110e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	461a      	mov	r2, r3
 80110f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80110f2:	637b      	str	r3, [r7, #52]	; 0x34
 80110f4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80110f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110fa:	e841 2300 	strex	r3, r2, [r1]
 80110fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011102:	2b00      	cmp	r3, #0
 8011104:	d1e6      	bne.n	80110d4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	3308      	adds	r3, #8
 801110c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801110e:	697b      	ldr	r3, [r7, #20]
 8011110:	e853 3f00 	ldrex	r3, [r3]
 8011114:	613b      	str	r3, [r7, #16]
   return(result);
 8011116:	693b      	ldr	r3, [r7, #16]
 8011118:	f023 0301 	bic.w	r3, r3, #1
 801111c:	66bb      	str	r3, [r7, #104]	; 0x68
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	3308      	adds	r3, #8
 8011124:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011126:	623a      	str	r2, [r7, #32]
 8011128:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801112a:	69f9      	ldr	r1, [r7, #28]
 801112c:	6a3a      	ldr	r2, [r7, #32]
 801112e:	e841 2300 	strex	r3, r2, [r1]
 8011132:	61bb      	str	r3, [r7, #24]
   return(result);
 8011134:	69bb      	ldr	r3, [r7, #24]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d1e5      	bne.n	8011106 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	2220      	movs	r2, #32
 801113e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	2220      	movs	r2, #32
 8011144:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	2220      	movs	r2, #32
 801114c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	2200      	movs	r2, #0
 8011154:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8011158:	2303      	movs	r3, #3
 801115a:	e010      	b.n	801117e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	69da      	ldr	r2, [r3, #28]
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	4013      	ands	r3, r2
 8011166:	68ba      	ldr	r2, [r7, #8]
 8011168:	429a      	cmp	r2, r3
 801116a:	bf0c      	ite	eq
 801116c:	2301      	moveq	r3, #1
 801116e:	2300      	movne	r3, #0
 8011170:	b2db      	uxtb	r3, r3
 8011172:	461a      	mov	r2, r3
 8011174:	79fb      	ldrb	r3, [r7, #7]
 8011176:	429a      	cmp	r2, r3
 8011178:	f43f af48 	beq.w	801100c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801117c:	2300      	movs	r3, #0
}
 801117e:	4618      	mov	r0, r3
 8011180:	3770      	adds	r7, #112	; 0x70
 8011182:	46bd      	mov	sp, r7
 8011184:	bd80      	pop	{r7, pc}
	...

08011188 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011188:	b480      	push	{r7}
 801118a:	b097      	sub	sp, #92	; 0x5c
 801118c:	af00      	add	r7, sp, #0
 801118e:	60f8      	str	r0, [r7, #12]
 8011190:	60b9      	str	r1, [r7, #8]
 8011192:	4613      	mov	r3, r2
 8011194:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	68ba      	ldr	r2, [r7, #8]
 801119a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	88fa      	ldrh	r2, [r7, #6]
 80111a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	88fa      	ldrh	r2, [r7, #6]
 80111a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	2200      	movs	r2, #0
 80111b0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	689b      	ldr	r3, [r3, #8]
 80111b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80111ba:	d10e      	bne.n	80111da <UART_Start_Receive_IT+0x52>
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	691b      	ldr	r3, [r3, #16]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d105      	bne.n	80111d0 <UART_Start_Receive_IT+0x48>
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80111ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80111ce:	e02d      	b.n	801122c <UART_Start_Receive_IT+0xa4>
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	22ff      	movs	r2, #255	; 0xff
 80111d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80111d8:	e028      	b.n	801122c <UART_Start_Receive_IT+0xa4>
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	689b      	ldr	r3, [r3, #8]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d10d      	bne.n	80111fe <UART_Start_Receive_IT+0x76>
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	691b      	ldr	r3, [r3, #16]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d104      	bne.n	80111f4 <UART_Start_Receive_IT+0x6c>
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	22ff      	movs	r2, #255	; 0xff
 80111ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80111f2:	e01b      	b.n	801122c <UART_Start_Receive_IT+0xa4>
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	227f      	movs	r2, #127	; 0x7f
 80111f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80111fc:	e016      	b.n	801122c <UART_Start_Receive_IT+0xa4>
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	689b      	ldr	r3, [r3, #8]
 8011202:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011206:	d10d      	bne.n	8011224 <UART_Start_Receive_IT+0x9c>
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	691b      	ldr	r3, [r3, #16]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d104      	bne.n	801121a <UART_Start_Receive_IT+0x92>
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	227f      	movs	r2, #127	; 0x7f
 8011214:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8011218:	e008      	b.n	801122c <UART_Start_Receive_IT+0xa4>
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	223f      	movs	r2, #63	; 0x3f
 801121e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8011222:	e003      	b.n	801122c <UART_Start_Receive_IT+0xa4>
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	2200      	movs	r2, #0
 8011228:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	2200      	movs	r2, #0
 8011230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	2222      	movs	r2, #34	; 0x22
 8011238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	3308      	adds	r3, #8
 8011242:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011246:	e853 3f00 	ldrex	r3, [r3]
 801124a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801124c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801124e:	f043 0301 	orr.w	r3, r3, #1
 8011252:	657b      	str	r3, [r7, #84]	; 0x54
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	3308      	adds	r3, #8
 801125a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801125c:	64ba      	str	r2, [r7, #72]	; 0x48
 801125e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011260:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011264:	e841 2300 	strex	r3, r2, [r1]
 8011268:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801126a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801126c:	2b00      	cmp	r3, #0
 801126e:	d1e5      	bne.n	801123c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	689b      	ldr	r3, [r3, #8]
 8011274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011278:	d107      	bne.n	801128a <UART_Start_Receive_IT+0x102>
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	691b      	ldr	r3, [r3, #16]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d103      	bne.n	801128a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	4a21      	ldr	r2, [pc, #132]	; (801130c <UART_Start_Receive_IT+0x184>)
 8011286:	669a      	str	r2, [r3, #104]	; 0x68
 8011288:	e002      	b.n	8011290 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	4a20      	ldr	r2, [pc, #128]	; (8011310 <UART_Start_Receive_IT+0x188>)
 801128e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	691b      	ldr	r3, [r3, #16]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d019      	beq.n	80112cc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801129e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112a0:	e853 3f00 	ldrex	r3, [r3]
 80112a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80112a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80112ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	461a      	mov	r2, r3
 80112b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112b6:	637b      	str	r3, [r7, #52]	; 0x34
 80112b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80112bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80112be:	e841 2300 	strex	r3, r2, [r1]
 80112c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80112c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d1e6      	bne.n	8011298 <UART_Start_Receive_IT+0x110>
 80112ca:	e018      	b.n	80112fe <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112d2:	697b      	ldr	r3, [r7, #20]
 80112d4:	e853 3f00 	ldrex	r3, [r3]
 80112d8:	613b      	str	r3, [r7, #16]
   return(result);
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	f043 0320 	orr.w	r3, r3, #32
 80112e0:	653b      	str	r3, [r7, #80]	; 0x50
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	461a      	mov	r2, r3
 80112e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112ea:	623b      	str	r3, [r7, #32]
 80112ec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112ee:	69f9      	ldr	r1, [r7, #28]
 80112f0:	6a3a      	ldr	r2, [r7, #32]
 80112f2:	e841 2300 	strex	r3, r2, [r1]
 80112f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80112f8:	69bb      	ldr	r3, [r7, #24]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d1e6      	bne.n	80112cc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80112fe:	2300      	movs	r3, #0
}
 8011300:	4618      	mov	r0, r3
 8011302:	375c      	adds	r7, #92	; 0x5c
 8011304:	46bd      	mov	sp, r7
 8011306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130a:	4770      	bx	lr
 801130c:	08011933 	.word	0x08011933
 8011310:	080117cd 	.word	0x080117cd

08011314 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b096      	sub	sp, #88	; 0x58
 8011318:	af00      	add	r7, sp, #0
 801131a:	60f8      	str	r0, [r7, #12]
 801131c:	60b9      	str	r1, [r7, #8]
 801131e:	4613      	mov	r3, r2
 8011320:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	68ba      	ldr	r2, [r7, #8]
 8011326:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	88fa      	ldrh	r2, [r7, #6]
 801132c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	2200      	movs	r2, #0
 8011334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	2222      	movs	r2, #34	; 0x22
 801133c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011344:	2b00      	cmp	r3, #0
 8011346:	d028      	beq.n	801139a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801134c:	4a3e      	ldr	r2, [pc, #248]	; (8011448 <UART_Start_Receive_DMA+0x134>)
 801134e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011354:	4a3d      	ldr	r2, [pc, #244]	; (801144c <UART_Start_Receive_DMA+0x138>)
 8011356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801135c:	4a3c      	ldr	r2, [pc, #240]	; (8011450 <UART_Start_Receive_DMA+0x13c>)
 801135e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011364:	2200      	movs	r2, #0
 8011366:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	3324      	adds	r3, #36	; 0x24
 8011372:	4619      	mov	r1, r3
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011378:	461a      	mov	r2, r3
 801137a:	88fb      	ldrh	r3, [r7, #6]
 801137c:	f7f9 fe1a 	bl	800afb4 <HAL_DMA_Start_IT>
 8011380:	4603      	mov	r3, r0
 8011382:	2b00      	cmp	r3, #0
 8011384:	d009      	beq.n	801139a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	2210      	movs	r2, #16
 801138a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	2220      	movs	r2, #32
 8011392:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8011396:	2301      	movs	r3, #1
 8011398:	e051      	b.n	801143e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	691b      	ldr	r3, [r3, #16]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d018      	beq.n	80113d4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113aa:	e853 3f00 	ldrex	r3, [r3]
 80113ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80113b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80113b6:	657b      	str	r3, [r7, #84]	; 0x54
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	461a      	mov	r2, r3
 80113be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80113c2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80113c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113c8:	e841 2300 	strex	r3, r2, [r1]
 80113cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80113ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d1e6      	bne.n	80113a2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	3308      	adds	r3, #8
 80113da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113de:	e853 3f00 	ldrex	r3, [r3]
 80113e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80113e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e6:	f043 0301 	orr.w	r3, r3, #1
 80113ea:	653b      	str	r3, [r7, #80]	; 0x50
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	3308      	adds	r3, #8
 80113f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80113f4:	637a      	str	r2, [r7, #52]	; 0x34
 80113f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80113fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113fc:	e841 2300 	strex	r3, r2, [r1]
 8011400:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011404:	2b00      	cmp	r3, #0
 8011406:	d1e5      	bne.n	80113d4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	3308      	adds	r3, #8
 801140e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	e853 3f00 	ldrex	r3, [r3]
 8011416:	613b      	str	r3, [r7, #16]
   return(result);
 8011418:	693b      	ldr	r3, [r7, #16]
 801141a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801141e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	3308      	adds	r3, #8
 8011426:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011428:	623a      	str	r2, [r7, #32]
 801142a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801142c:	69f9      	ldr	r1, [r7, #28]
 801142e:	6a3a      	ldr	r2, [r7, #32]
 8011430:	e841 2300 	strex	r3, r2, [r1]
 8011434:	61bb      	str	r3, [r7, #24]
   return(result);
 8011436:	69bb      	ldr	r3, [r7, #24]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d1e5      	bne.n	8011408 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 801143c:	2300      	movs	r3, #0
}
 801143e:	4618      	mov	r0, r3
 8011440:	3758      	adds	r7, #88	; 0x58
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}
 8011446:	bf00      	nop
 8011448:	08011569 	.word	0x08011569
 801144c:	08011691 	.word	0x08011691
 8011450:	080116cf 	.word	0x080116cf

08011454 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011454:	b480      	push	{r7}
 8011456:	b089      	sub	sp, #36	; 0x24
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	e853 3f00 	ldrex	r3, [r3]
 8011468:	60bb      	str	r3, [r7, #8]
   return(result);
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011470:	61fb      	str	r3, [r7, #28]
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	461a      	mov	r2, r3
 8011478:	69fb      	ldr	r3, [r7, #28]
 801147a:	61bb      	str	r3, [r7, #24]
 801147c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801147e:	6979      	ldr	r1, [r7, #20]
 8011480:	69ba      	ldr	r2, [r7, #24]
 8011482:	e841 2300 	strex	r3, r2, [r1]
 8011486:	613b      	str	r3, [r7, #16]
   return(result);
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d1e6      	bne.n	801145c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	2220      	movs	r2, #32
 8011492:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8011494:	bf00      	nop
 8011496:	3724      	adds	r7, #36	; 0x24
 8011498:	46bd      	mov	sp, r7
 801149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149e:	4770      	bx	lr

080114a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80114a0:	b480      	push	{r7}
 80114a2:	b095      	sub	sp, #84	; 0x54
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114b0:	e853 3f00 	ldrex	r3, [r3]
 80114b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80114b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80114bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	461a      	mov	r2, r3
 80114c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114c6:	643b      	str	r3, [r7, #64]	; 0x40
 80114c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80114cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80114ce:	e841 2300 	strex	r3, r2, [r1]
 80114d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80114d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d1e6      	bne.n	80114a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	3308      	adds	r3, #8
 80114e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114e2:	6a3b      	ldr	r3, [r7, #32]
 80114e4:	e853 3f00 	ldrex	r3, [r3]
 80114e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80114ea:	69fb      	ldr	r3, [r7, #28]
 80114ec:	f023 0301 	bic.w	r3, r3, #1
 80114f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	3308      	adds	r3, #8
 80114f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80114fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80114fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011502:	e841 2300 	strex	r3, r2, [r1]
 8011506:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801150a:	2b00      	cmp	r3, #0
 801150c:	d1e5      	bne.n	80114da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011512:	2b01      	cmp	r3, #1
 8011514:	d118      	bne.n	8011548 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	e853 3f00 	ldrex	r3, [r3]
 8011522:	60bb      	str	r3, [r7, #8]
   return(result);
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	f023 0310 	bic.w	r3, r3, #16
 801152a:	647b      	str	r3, [r7, #68]	; 0x44
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	461a      	mov	r2, r3
 8011532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011534:	61bb      	str	r3, [r7, #24]
 8011536:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011538:	6979      	ldr	r1, [r7, #20]
 801153a:	69ba      	ldr	r2, [r7, #24]
 801153c:	e841 2300 	strex	r3, r2, [r1]
 8011540:	613b      	str	r3, [r7, #16]
   return(result);
 8011542:	693b      	ldr	r3, [r7, #16]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d1e6      	bne.n	8011516 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	2220      	movs	r2, #32
 801154c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	2200      	movs	r2, #0
 8011554:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	2200      	movs	r2, #0
 801155a:	669a      	str	r2, [r3, #104]	; 0x68
}
 801155c:	bf00      	nop
 801155e:	3754      	adds	r7, #84	; 0x54
 8011560:	46bd      	mov	sp, r7
 8011562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011566:	4770      	bx	lr

08011568 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b09c      	sub	sp, #112	; 0x70
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011574:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	69db      	ldr	r3, [r3, #28]
 801157a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801157e:	d071      	beq.n	8011664 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8011580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011582:	2200      	movs	r2, #0
 8011584:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801158e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011590:	e853 3f00 	ldrex	r3, [r3]
 8011594:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801159c:	66bb      	str	r3, [r7, #104]	; 0x68
 801159e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	461a      	mov	r2, r3
 80115a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80115a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80115a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80115ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80115ae:	e841 2300 	strex	r3, r2, [r1]
 80115b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80115b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d1e6      	bne.n	8011588 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80115ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	3308      	adds	r3, #8
 80115c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115c4:	e853 3f00 	ldrex	r3, [r3]
 80115c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80115ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115cc:	f023 0301 	bic.w	r3, r3, #1
 80115d0:	667b      	str	r3, [r7, #100]	; 0x64
 80115d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	3308      	adds	r3, #8
 80115d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80115da:	647a      	str	r2, [r7, #68]	; 0x44
 80115dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80115e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80115e2:	e841 2300 	strex	r3, r2, [r1]
 80115e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80115e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d1e5      	bne.n	80115ba <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80115ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	3308      	adds	r3, #8
 80115f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f8:	e853 3f00 	ldrex	r3, [r3]
 80115fc:	623b      	str	r3, [r7, #32]
   return(result);
 80115fe:	6a3b      	ldr	r3, [r7, #32]
 8011600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011604:	663b      	str	r3, [r7, #96]	; 0x60
 8011606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	3308      	adds	r3, #8
 801160c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801160e:	633a      	str	r2, [r7, #48]	; 0x30
 8011610:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011612:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011616:	e841 2300 	strex	r3, r2, [r1]
 801161a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801161c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801161e:	2b00      	cmp	r3, #0
 8011620:	d1e5      	bne.n	80115ee <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011624:	2220      	movs	r2, #32
 8011626:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801162a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801162c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801162e:	2b01      	cmp	r3, #1
 8011630:	d118      	bne.n	8011664 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011638:	693b      	ldr	r3, [r7, #16]
 801163a:	e853 3f00 	ldrex	r3, [r3]
 801163e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	f023 0310 	bic.w	r3, r3, #16
 8011646:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	461a      	mov	r2, r3
 801164e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011650:	61fb      	str	r3, [r7, #28]
 8011652:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011654:	69b9      	ldr	r1, [r7, #24]
 8011656:	69fa      	ldr	r2, [r7, #28]
 8011658:	e841 2300 	strex	r3, r2, [r1]
 801165c:	617b      	str	r3, [r7, #20]
   return(result);
 801165e:	697b      	ldr	r3, [r7, #20]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d1e6      	bne.n	8011632 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011666:	2200      	movs	r2, #0
 8011668:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801166a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801166c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801166e:	2b01      	cmp	r3, #1
 8011670:	d107      	bne.n	8011682 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011674:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011678:	4619      	mov	r1, r3
 801167a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801167c:	f7ff f974 	bl	8010968 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011680:	e002      	b.n	8011688 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8011682:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011684:	f7f2 fc06 	bl	8003e94 <HAL_UART_RxCpltCallback>
}
 8011688:	bf00      	nop
 801168a:	3770      	adds	r7, #112	; 0x70
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}

08011690 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b084      	sub	sp, #16
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801169c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	2201      	movs	r2, #1
 80116a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80116a8:	2b01      	cmp	r3, #1
 80116aa:	d109      	bne.n	80116c0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80116b2:	085b      	lsrs	r3, r3, #1
 80116b4:	b29b      	uxth	r3, r3
 80116b6:	4619      	mov	r1, r3
 80116b8:	68f8      	ldr	r0, [r7, #12]
 80116ba:	f7ff f955 	bl	8010968 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80116be:	e002      	b.n	80116c6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80116c0:	68f8      	ldr	r0, [r7, #12]
 80116c2:	f7ff f947 	bl	8010954 <HAL_UART_RxHalfCpltCallback>
}
 80116c6:	bf00      	nop
 80116c8:	3710      	adds	r7, #16
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bd80      	pop	{r7, pc}

080116ce <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80116ce:	b580      	push	{r7, lr}
 80116d0:	b086      	sub	sp, #24
 80116d2:	af00      	add	r7, sp, #0
 80116d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116da:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80116e0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80116e2:	697b      	ldr	r3, [r7, #20]
 80116e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80116e8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80116ea:	697b      	ldr	r3, [r7, #20]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	689b      	ldr	r3, [r3, #8]
 80116f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116f4:	2b80      	cmp	r3, #128	; 0x80
 80116f6:	d109      	bne.n	801170c <UART_DMAError+0x3e>
 80116f8:	693b      	ldr	r3, [r7, #16]
 80116fa:	2b21      	cmp	r3, #33	; 0x21
 80116fc:	d106      	bne.n	801170c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80116fe:	697b      	ldr	r3, [r7, #20]
 8011700:	2200      	movs	r2, #0
 8011702:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8011706:	6978      	ldr	r0, [r7, #20]
 8011708:	f7ff fea4 	bl	8011454 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801170c:	697b      	ldr	r3, [r7, #20]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	689b      	ldr	r3, [r3, #8]
 8011712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011716:	2b40      	cmp	r3, #64	; 0x40
 8011718:	d109      	bne.n	801172e <UART_DMAError+0x60>
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	2b22      	cmp	r3, #34	; 0x22
 801171e:	d106      	bne.n	801172e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011720:	697b      	ldr	r3, [r7, #20]
 8011722:	2200      	movs	r2, #0
 8011724:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8011728:	6978      	ldr	r0, [r7, #20]
 801172a:	f7ff feb9 	bl	80114a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801172e:	697b      	ldr	r3, [r7, #20]
 8011730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011734:	f043 0210 	orr.w	r2, r3, #16
 8011738:	697b      	ldr	r3, [r7, #20]
 801173a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801173e:	6978      	ldr	r0, [r7, #20]
 8011740:	f7f2 fc4a 	bl	8003fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011744:	bf00      	nop
 8011746:	3718      	adds	r7, #24
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}

0801174c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b084      	sub	sp, #16
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011758:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	2200      	movs	r2, #0
 801175e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	2200      	movs	r2, #0
 8011766:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801176a:	68f8      	ldr	r0, [r7, #12]
 801176c:	f7f2 fc34 	bl	8003fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011770:	bf00      	nop
 8011772:	3710      	adds	r7, #16
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}

08011778 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b088      	sub	sp, #32
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	e853 3f00 	ldrex	r3, [r3]
 801178c:	60bb      	str	r3, [r7, #8]
   return(result);
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011794:	61fb      	str	r3, [r7, #28]
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	461a      	mov	r2, r3
 801179c:	69fb      	ldr	r3, [r7, #28]
 801179e:	61bb      	str	r3, [r7, #24]
 80117a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117a2:	6979      	ldr	r1, [r7, #20]
 80117a4:	69ba      	ldr	r2, [r7, #24]
 80117a6:	e841 2300 	strex	r3, r2, [r1]
 80117aa:	613b      	str	r3, [r7, #16]
   return(result);
 80117ac:	693b      	ldr	r3, [r7, #16]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d1e6      	bne.n	8011780 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	2220      	movs	r2, #32
 80117b6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	2200      	movs	r2, #0
 80117bc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f7ff f8be 	bl	8010940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80117c4:	bf00      	nop
 80117c6:	3720      	adds	r7, #32
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd80      	pop	{r7, pc}

080117cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b096      	sub	sp, #88	; 0x58
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80117da:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80117e4:	2b22      	cmp	r3, #34	; 0x22
 80117e6:	f040 8098 	bne.w	801191a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80117f4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80117f8:	b2d9      	uxtb	r1, r3
 80117fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80117fe:	b2da      	uxtb	r2, r3
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011804:	400a      	ands	r2, r1
 8011806:	b2d2      	uxtb	r2, r2
 8011808:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801180e:	1c5a      	adds	r2, r3, #1
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801181a:	b29b      	uxth	r3, r3
 801181c:	3b01      	subs	r3, #1
 801181e:	b29a      	uxth	r2, r3
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801182c:	b29b      	uxth	r3, r3
 801182e:	2b00      	cmp	r3, #0
 8011830:	d17b      	bne.n	801192a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801183a:	e853 3f00 	ldrex	r3, [r3]
 801183e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011842:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011846:	653b      	str	r3, [r7, #80]	; 0x50
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	461a      	mov	r2, r3
 801184e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011850:	647b      	str	r3, [r7, #68]	; 0x44
 8011852:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011854:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011858:	e841 2300 	strex	r3, r2, [r1]
 801185c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801185e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011860:	2b00      	cmp	r3, #0
 8011862:	d1e6      	bne.n	8011832 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	3308      	adds	r3, #8
 801186a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186e:	e853 3f00 	ldrex	r3, [r3]
 8011872:	623b      	str	r3, [r7, #32]
   return(result);
 8011874:	6a3b      	ldr	r3, [r7, #32]
 8011876:	f023 0301 	bic.w	r3, r3, #1
 801187a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	3308      	adds	r3, #8
 8011882:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011884:	633a      	str	r2, [r7, #48]	; 0x30
 8011886:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011888:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801188a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801188c:	e841 2300 	strex	r3, r2, [r1]
 8011890:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011894:	2b00      	cmp	r3, #0
 8011896:	d1e5      	bne.n	8011864 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2220      	movs	r2, #32
 801189c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2200      	movs	r2, #0
 80118a4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	2200      	movs	r2, #0
 80118aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80118b0:	2b01      	cmp	r3, #1
 80118b2:	d12e      	bne.n	8011912 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2200      	movs	r2, #0
 80118b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118c0:	693b      	ldr	r3, [r7, #16]
 80118c2:	e853 3f00 	ldrex	r3, [r3]
 80118c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	f023 0310 	bic.w	r3, r3, #16
 80118ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	461a      	mov	r2, r3
 80118d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118d8:	61fb      	str	r3, [r7, #28]
 80118da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118dc:	69b9      	ldr	r1, [r7, #24]
 80118de:	69fa      	ldr	r2, [r7, #28]
 80118e0:	e841 2300 	strex	r3, r2, [r1]
 80118e4:	617b      	str	r3, [r7, #20]
   return(result);
 80118e6:	697b      	ldr	r3, [r7, #20]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d1e6      	bne.n	80118ba <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	69db      	ldr	r3, [r3, #28]
 80118f2:	f003 0310 	and.w	r3, r3, #16
 80118f6:	2b10      	cmp	r3, #16
 80118f8:	d103      	bne.n	8011902 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	2210      	movs	r2, #16
 8011900:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011908:	4619      	mov	r1, r3
 801190a:	6878      	ldr	r0, [r7, #4]
 801190c:	f7ff f82c 	bl	8010968 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011910:	e00b      	b.n	801192a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f7f2 fabe 	bl	8003e94 <HAL_UART_RxCpltCallback>
}
 8011918:	e007      	b.n	801192a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	699a      	ldr	r2, [r3, #24]
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	f042 0208 	orr.w	r2, r2, #8
 8011928:	619a      	str	r2, [r3, #24]
}
 801192a:	bf00      	nop
 801192c:	3758      	adds	r7, #88	; 0x58
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}

08011932 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011932:	b580      	push	{r7, lr}
 8011934:	b096      	sub	sp, #88	; 0x58
 8011936:	af00      	add	r7, sp, #0
 8011938:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011940:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801194a:	2b22      	cmp	r3, #34	; 0x22
 801194c:	f040 8098 	bne.w	8011a80 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011956:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801195e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8011960:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8011964:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8011968:	4013      	ands	r3, r2
 801196a:	b29a      	uxth	r2, r3
 801196c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801196e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011974:	1c9a      	adds	r2, r3, #2
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011980:	b29b      	uxth	r3, r3
 8011982:	3b01      	subs	r3, #1
 8011984:	b29a      	uxth	r2, r3
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011992:	b29b      	uxth	r3, r3
 8011994:	2b00      	cmp	r3, #0
 8011996:	d17b      	bne.n	8011a90 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801199e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119a0:	e853 3f00 	ldrex	r3, [r3]
 80119a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80119a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80119ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	461a      	mov	r2, r3
 80119b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119b6:	643b      	str	r3, [r7, #64]	; 0x40
 80119b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80119bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80119be:	e841 2300 	strex	r3, r2, [r1]
 80119c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80119c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d1e6      	bne.n	8011998 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	3308      	adds	r3, #8
 80119d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119d2:	6a3b      	ldr	r3, [r7, #32]
 80119d4:	e853 3f00 	ldrex	r3, [r3]
 80119d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80119da:	69fb      	ldr	r3, [r7, #28]
 80119dc:	f023 0301 	bic.w	r3, r3, #1
 80119e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	3308      	adds	r3, #8
 80119e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80119ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80119ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80119f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119f2:	e841 2300 	strex	r3, r2, [r1]
 80119f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80119f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d1e5      	bne.n	80119ca <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	2220      	movs	r2, #32
 8011a02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2200      	movs	r2, #0
 8011a10:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011a16:	2b01      	cmp	r3, #1
 8011a18:	d12e      	bne.n	8011a78 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	e853 3f00 	ldrex	r3, [r3]
 8011a2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	f023 0310 	bic.w	r3, r3, #16
 8011a34:	647b      	str	r3, [r7, #68]	; 0x44
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	461a      	mov	r2, r3
 8011a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a3e:	61bb      	str	r3, [r7, #24]
 8011a40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a42:	6979      	ldr	r1, [r7, #20]
 8011a44:	69ba      	ldr	r2, [r7, #24]
 8011a46:	e841 2300 	strex	r3, r2, [r1]
 8011a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d1e6      	bne.n	8011a20 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	69db      	ldr	r3, [r3, #28]
 8011a58:	f003 0310 	and.w	r3, r3, #16
 8011a5c:	2b10      	cmp	r3, #16
 8011a5e:	d103      	bne.n	8011a68 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	2210      	movs	r2, #16
 8011a66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011a6e:	4619      	mov	r1, r3
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f7fe ff79 	bl	8010968 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011a76:	e00b      	b.n	8011a90 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8011a78:	6878      	ldr	r0, [r7, #4]
 8011a7a:	f7f2 fa0b 	bl	8003e94 <HAL_UART_RxCpltCallback>
}
 8011a7e:	e007      	b.n	8011a90 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	699a      	ldr	r2, [r3, #24]
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	f042 0208 	orr.w	r2, r2, #8
 8011a8e:	619a      	str	r2, [r3, #24]
}
 8011a90:	bf00      	nop
 8011a92:	3758      	adds	r7, #88	; 0x58
 8011a94:	46bd      	mov	sp, r7
 8011a96:	bd80      	pop	{r7, pc}

08011a98 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011a98:	b480      	push	{r7}
 8011a9a:	b085      	sub	sp, #20
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011aaa:	2b84      	cmp	r3, #132	; 0x84
 8011aac:	d005      	beq.n	8011aba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011aae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	4413      	add	r3, r2
 8011ab6:	3303      	adds	r3, #3
 8011ab8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011aba:	68fb      	ldr	r3, [r7, #12]
}
 8011abc:	4618      	mov	r0, r3
 8011abe:	3714      	adds	r7, #20
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac6:	4770      	bx	lr

08011ac8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011ac8:	b480      	push	{r7}
 8011aca:	b083      	sub	sp, #12
 8011acc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ace:	f3ef 8305 	mrs	r3, IPSR
 8011ad2:	607b      	str	r3, [r7, #4]
  return(result);
 8011ad4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	bf14      	ite	ne
 8011ada:	2301      	movne	r3, #1
 8011adc:	2300      	moveq	r3, #0
 8011ade:	b2db      	uxtb	r3, r3
}
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	370c      	adds	r7, #12
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aea:	4770      	bx	lr

08011aec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011af0:	f001 fafa 	bl	80130e8 <vTaskStartScheduler>
  
  return osOK;
 8011af4:	2300      	movs	r3, #0
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	bd80      	pop	{r7, pc}

08011afa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011afa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011afc:	b089      	sub	sp, #36	; 0x24
 8011afe:	af04      	add	r7, sp, #16
 8011b00:	6078      	str	r0, [r7, #4]
 8011b02:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	695b      	ldr	r3, [r3, #20]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d020      	beq.n	8011b4e <osThreadCreate+0x54>
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	699b      	ldr	r3, [r3, #24]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d01c      	beq.n	8011b4e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	685c      	ldr	r4, [r3, #4]
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	691e      	ldr	r6, [r3, #16]
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7ff ffb6 	bl	8011a98 <makeFreeRtosPriority>
 8011b2c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	695b      	ldr	r3, [r3, #20]
 8011b32:	687a      	ldr	r2, [r7, #4]
 8011b34:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011b36:	9202      	str	r2, [sp, #8]
 8011b38:	9301      	str	r3, [sp, #4]
 8011b3a:	9100      	str	r1, [sp, #0]
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	4632      	mov	r2, r6
 8011b40:	4629      	mov	r1, r5
 8011b42:	4620      	mov	r0, r4
 8011b44:	f001 f864 	bl	8012c10 <xTaskCreateStatic>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	60fb      	str	r3, [r7, #12]
 8011b4c:	e01c      	b.n	8011b88 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	685c      	ldr	r4, [r3, #4]
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011b5a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011b62:	4618      	mov	r0, r3
 8011b64:	f7ff ff98 	bl	8011a98 <makeFreeRtosPriority>
 8011b68:	4602      	mov	r2, r0
 8011b6a:	f107 030c 	add.w	r3, r7, #12
 8011b6e:	9301      	str	r3, [sp, #4]
 8011b70:	9200      	str	r2, [sp, #0]
 8011b72:	683b      	ldr	r3, [r7, #0]
 8011b74:	4632      	mov	r2, r6
 8011b76:	4629      	mov	r1, r5
 8011b78:	4620      	mov	r0, r4
 8011b7a:	f001 f8ac 	bl	8012cd6 <xTaskCreate>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	2b01      	cmp	r3, #1
 8011b82:	d001      	beq.n	8011b88 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011b84:	2300      	movs	r3, #0
 8011b86:	e000      	b.n	8011b8a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011b88:	68fb      	ldr	r3, [r7, #12]
}
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	3714      	adds	r7, #20
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b92 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011b92:	b580      	push	{r7, lr}
 8011b94:	b084      	sub	sp, #16
 8011b96:	af00      	add	r7, sp, #0
 8011b98:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d001      	beq.n	8011ba8 <osDelay+0x16>
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	e000      	b.n	8011baa <osDelay+0x18>
 8011ba8:	2301      	movs	r3, #1
 8011baa:	4618      	mov	r0, r3
 8011bac:	f001 fa66 	bl	801307c <vTaskDelay>
  
  return osOK;
 8011bb0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	3710      	adds	r7, #16
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	bd80      	pop	{r7, pc}

08011bba <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8011bba:	b580      	push	{r7, lr}
 8011bbc:	b082      	sub	sp, #8
 8011bbe:	af00      	add	r7, sp, #0
 8011bc0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	685b      	ldr	r3, [r3, #4]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d007      	beq.n	8011bda <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	685b      	ldr	r3, [r3, #4]
 8011bce:	4619      	mov	r1, r3
 8011bd0:	2001      	movs	r0, #1
 8011bd2:	f000 fb84 	bl	80122de <xQueueCreateMutexStatic>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	e003      	b.n	8011be2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8011bda:	2001      	movs	r0, #1
 8011bdc:	f000 fb67 	bl	80122ae <xQueueCreateMutex>
 8011be0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3708      	adds	r7, #8
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}
	...

08011bec <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b084      	sub	sp, #16
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
 8011bf4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d101      	bne.n	8011c04 <osMutexWait+0x18>
    return osErrorParameter;
 8011c00:	2380      	movs	r3, #128	; 0x80
 8011c02:	e03a      	b.n	8011c7a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8011c04:	2300      	movs	r3, #0
 8011c06:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c0e:	d103      	bne.n	8011c18 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8011c10:	f04f 33ff 	mov.w	r3, #4294967295
 8011c14:	60fb      	str	r3, [r7, #12]
 8011c16:	e009      	b.n	8011c2c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d006      	beq.n	8011c2c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d101      	bne.n	8011c2c <osMutexWait+0x40>
      ticks = 1;
 8011c28:	2301      	movs	r3, #1
 8011c2a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011c2c:	f7ff ff4c 	bl	8011ac8 <inHandlerMode>
 8011c30:	4603      	mov	r3, r0
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d017      	beq.n	8011c66 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011c36:	f107 0308 	add.w	r3, r7, #8
 8011c3a:	461a      	mov	r2, r3
 8011c3c:	2100      	movs	r1, #0
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f000 fe18 	bl	8012874 <xQueueReceiveFromISR>
 8011c44:	4603      	mov	r3, r0
 8011c46:	2b01      	cmp	r3, #1
 8011c48:	d001      	beq.n	8011c4e <osMutexWait+0x62>
      return osErrorOS;
 8011c4a:	23ff      	movs	r3, #255	; 0xff
 8011c4c:	e015      	b.n	8011c7a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d011      	beq.n	8011c78 <osMutexWait+0x8c>
 8011c54:	4b0b      	ldr	r3, [pc, #44]	; (8011c84 <osMutexWait+0x98>)
 8011c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c5a:	601a      	str	r2, [r3, #0]
 8011c5c:	f3bf 8f4f 	dsb	sy
 8011c60:	f3bf 8f6f 	isb	sy
 8011c64:	e008      	b.n	8011c78 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8011c66:	68f9      	ldr	r1, [r7, #12]
 8011c68:	6878      	ldr	r0, [r7, #4]
 8011c6a:	f000 fcef 	bl	801264c <xQueueSemaphoreTake>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	d001      	beq.n	8011c78 <osMutexWait+0x8c>
    return osErrorOS;
 8011c74:	23ff      	movs	r3, #255	; 0xff
 8011c76:	e000      	b.n	8011c7a <osMutexWait+0x8e>
  }
  
  return osOK;
 8011c78:	2300      	movs	r3, #0
}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	3710      	adds	r7, #16
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd80      	pop	{r7, pc}
 8011c82:	bf00      	nop
 8011c84:	e000ed04 	.word	0xe000ed04

08011c88 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b084      	sub	sp, #16
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011c90:	2300      	movs	r3, #0
 8011c92:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011c94:	2300      	movs	r3, #0
 8011c96:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8011c98:	f7ff ff16 	bl	8011ac8 <inHandlerMode>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d016      	beq.n	8011cd0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011ca2:	f107 0308 	add.w	r3, r7, #8
 8011ca6:	4619      	mov	r1, r3
 8011ca8:	6878      	ldr	r0, [r7, #4]
 8011caa:	f000 fc39 	bl	8012520 <xQueueGiveFromISR>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	2b01      	cmp	r3, #1
 8011cb2:	d001      	beq.n	8011cb8 <osMutexRelease+0x30>
      return osErrorOS;
 8011cb4:	23ff      	movs	r3, #255	; 0xff
 8011cb6:	e017      	b.n	8011ce8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d013      	beq.n	8011ce6 <osMutexRelease+0x5e>
 8011cbe:	4b0c      	ldr	r3, [pc, #48]	; (8011cf0 <osMutexRelease+0x68>)
 8011cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cc4:	601a      	str	r2, [r3, #0]
 8011cc6:	f3bf 8f4f 	dsb	sy
 8011cca:	f3bf 8f6f 	isb	sy
 8011cce:	e00a      	b.n	8011ce6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	2100      	movs	r1, #0
 8011cd6:	6878      	ldr	r0, [r7, #4]
 8011cd8:	f000 fb1c 	bl	8012314 <xQueueGenericSend>
 8011cdc:	4603      	mov	r3, r0
 8011cde:	2b01      	cmp	r3, #1
 8011ce0:	d001      	beq.n	8011ce6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8011ce2:	23ff      	movs	r3, #255	; 0xff
 8011ce4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8011ce6:	68fb      	ldr	r3, [r7, #12]
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3710      	adds	r7, #16
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}
 8011cf0:	e000ed04 	.word	0xe000ed04

08011cf4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b086      	sub	sp, #24
 8011cf8:	af02      	add	r7, sp, #8
 8011cfa:	6078      	str	r0, [r7, #4]
 8011cfc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	685b      	ldr	r3, [r3, #4]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d00f      	beq.n	8011d26 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	2b01      	cmp	r3, #1
 8011d0a:	d10a      	bne.n	8011d22 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	685b      	ldr	r3, [r3, #4]
 8011d10:	2203      	movs	r2, #3
 8011d12:	9200      	str	r2, [sp, #0]
 8011d14:	2200      	movs	r2, #0
 8011d16:	2100      	movs	r1, #0
 8011d18:	2001      	movs	r0, #1
 8011d1a:	f000 f9cb 	bl	80120b4 <xQueueGenericCreateStatic>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	e016      	b.n	8011d50 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8011d22:	2300      	movs	r3, #0
 8011d24:	e014      	b.n	8011d50 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	2b01      	cmp	r3, #1
 8011d2a:	d110      	bne.n	8011d4e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8011d2c:	2203      	movs	r2, #3
 8011d2e:	2100      	movs	r1, #0
 8011d30:	2001      	movs	r0, #1
 8011d32:	f000 fa41 	bl	80121b8 <xQueueGenericCreate>
 8011d36:	60f8      	str	r0, [r7, #12]
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d005      	beq.n	8011d4a <osSemaphoreCreate+0x56>
 8011d3e:	2300      	movs	r3, #0
 8011d40:	2200      	movs	r2, #0
 8011d42:	2100      	movs	r1, #0
 8011d44:	68f8      	ldr	r0, [r7, #12]
 8011d46:	f000 fae5 	bl	8012314 <xQueueGenericSend>
      return sema;
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	e000      	b.n	8011d50 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8011d4e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	3710      	adds	r7, #16
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b084      	sub	sp, #16
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
 8011d60:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011d62:	2300      	movs	r3, #0
 8011d64:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d101      	bne.n	8011d70 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8011d6c:	2380      	movs	r3, #128	; 0x80
 8011d6e:	e03a      	b.n	8011de6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011d70:	2300      	movs	r3, #0
 8011d72:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011d74:	683b      	ldr	r3, [r7, #0]
 8011d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d7a:	d103      	bne.n	8011d84 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8011d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8011d80:	60fb      	str	r3, [r7, #12]
 8011d82:	e009      	b.n	8011d98 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d006      	beq.n	8011d98 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d101      	bne.n	8011d98 <osSemaphoreWait+0x40>
      ticks = 1;
 8011d94:	2301      	movs	r3, #1
 8011d96:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011d98:	f7ff fe96 	bl	8011ac8 <inHandlerMode>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d017      	beq.n	8011dd2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011da2:	f107 0308 	add.w	r3, r7, #8
 8011da6:	461a      	mov	r2, r3
 8011da8:	2100      	movs	r1, #0
 8011daa:	6878      	ldr	r0, [r7, #4]
 8011dac:	f000 fd62 	bl	8012874 <xQueueReceiveFromISR>
 8011db0:	4603      	mov	r3, r0
 8011db2:	2b01      	cmp	r3, #1
 8011db4:	d001      	beq.n	8011dba <osSemaphoreWait+0x62>
      return osErrorOS;
 8011db6:	23ff      	movs	r3, #255	; 0xff
 8011db8:	e015      	b.n	8011de6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d011      	beq.n	8011de4 <osSemaphoreWait+0x8c>
 8011dc0:	4b0b      	ldr	r3, [pc, #44]	; (8011df0 <osSemaphoreWait+0x98>)
 8011dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dc6:	601a      	str	r2, [r3, #0]
 8011dc8:	f3bf 8f4f 	dsb	sy
 8011dcc:	f3bf 8f6f 	isb	sy
 8011dd0:	e008      	b.n	8011de4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011dd2:	68f9      	ldr	r1, [r7, #12]
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f000 fc39 	bl	801264c <xQueueSemaphoreTake>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	2b01      	cmp	r3, #1
 8011dde:	d001      	beq.n	8011de4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8011de0:	23ff      	movs	r3, #255	; 0xff
 8011de2:	e000      	b.n	8011de6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011de4:	2300      	movs	r3, #0
}
 8011de6:	4618      	mov	r0, r3
 8011de8:	3710      	adds	r7, #16
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}
 8011dee:	bf00      	nop
 8011df0:	e000ed04 	.word	0xe000ed04

08011df4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b084      	sub	sp, #16
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011e00:	2300      	movs	r3, #0
 8011e02:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8011e04:	f7ff fe60 	bl	8011ac8 <inHandlerMode>
 8011e08:	4603      	mov	r3, r0
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d016      	beq.n	8011e3c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011e0e:	f107 0308 	add.w	r3, r7, #8
 8011e12:	4619      	mov	r1, r3
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	f000 fb83 	bl	8012520 <xQueueGiveFromISR>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	2b01      	cmp	r3, #1
 8011e1e:	d001      	beq.n	8011e24 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8011e20:	23ff      	movs	r3, #255	; 0xff
 8011e22:	e017      	b.n	8011e54 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011e24:	68bb      	ldr	r3, [r7, #8]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d013      	beq.n	8011e52 <osSemaphoreRelease+0x5e>
 8011e2a:	4b0c      	ldr	r3, [pc, #48]	; (8011e5c <osSemaphoreRelease+0x68>)
 8011e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e30:	601a      	str	r2, [r3, #0]
 8011e32:	f3bf 8f4f 	dsb	sy
 8011e36:	f3bf 8f6f 	isb	sy
 8011e3a:	e00a      	b.n	8011e52 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	2200      	movs	r2, #0
 8011e40:	2100      	movs	r1, #0
 8011e42:	6878      	ldr	r0, [r7, #4]
 8011e44:	f000 fa66 	bl	8012314 <xQueueGenericSend>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	2b01      	cmp	r3, #1
 8011e4c:	d001      	beq.n	8011e52 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8011e4e:	23ff      	movs	r3, #255	; 0xff
 8011e50:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8011e52:	68fb      	ldr	r3, [r7, #12]
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	3710      	adds	r7, #16
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	bd80      	pop	{r7, pc}
 8011e5c:	e000ed04 	.word	0xe000ed04

08011e60 <osSemaphoreGetCount>:
* @brief  Returns the current count value of a counting semaphore
* @param  semaphore_id  semaphore_id ID obtained by \ref osSemaphoreCreate.
* @retval  count value
*/
uint32_t osSemaphoreGetCount(osSemaphoreId semaphore_id)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b082      	sub	sp, #8
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
  return uxSemaphoreGetCount(semaphore_id);
 8011e68:	6878      	ldr	r0, [r7, #4]
 8011e6a:	f000 fd89 	bl	8012980 <uxQueueMessagesWaiting>
 8011e6e:	4603      	mov	r3, r0
}
 8011e70:	4618      	mov	r0, r3
 8011e72:	3708      	adds	r7, #8
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}

08011e78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011e78:	b480      	push	{r7}
 8011e7a:	b083      	sub	sp, #12
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	f103 0208 	add.w	r2, r3, #8
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8011e90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f103 0208 	add.w	r2, r3, #8
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f103 0208 	add.w	r2, r3, #8
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011eac:	bf00      	nop
 8011eae:	370c      	adds	r7, #12
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb6:	4770      	bx	lr

08011eb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011eb8:	b480      	push	{r7}
 8011eba:	b083      	sub	sp, #12
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011ec6:	bf00      	nop
 8011ec8:	370c      	adds	r7, #12
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed0:	4770      	bx	lr

08011ed2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011ed2:	b480      	push	{r7}
 8011ed4:	b085      	sub	sp, #20
 8011ed6:	af00      	add	r7, sp, #0
 8011ed8:	6078      	str	r0, [r7, #4]
 8011eda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	685b      	ldr	r3, [r3, #4]
 8011ee0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011ee2:	683b      	ldr	r3, [r7, #0]
 8011ee4:	68fa      	ldr	r2, [r7, #12]
 8011ee6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	689a      	ldr	r2, [r3, #8]
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	689b      	ldr	r3, [r3, #8]
 8011ef4:	683a      	ldr	r2, [r7, #0]
 8011ef6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	683a      	ldr	r2, [r7, #0]
 8011efc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	687a      	ldr	r2, [r7, #4]
 8011f02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	1c5a      	adds	r2, r3, #1
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	601a      	str	r2, [r3, #0]
}
 8011f0e:	bf00      	nop
 8011f10:	3714      	adds	r7, #20
 8011f12:	46bd      	mov	sp, r7
 8011f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f18:	4770      	bx	lr

08011f1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011f1a:	b480      	push	{r7}
 8011f1c:	b085      	sub	sp, #20
 8011f1e:	af00      	add	r7, sp, #0
 8011f20:	6078      	str	r0, [r7, #4]
 8011f22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011f2a:	68bb      	ldr	r3, [r7, #8]
 8011f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f30:	d103      	bne.n	8011f3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	691b      	ldr	r3, [r3, #16]
 8011f36:	60fb      	str	r3, [r7, #12]
 8011f38:	e00c      	b.n	8011f54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	3308      	adds	r3, #8
 8011f3e:	60fb      	str	r3, [r7, #12]
 8011f40:	e002      	b.n	8011f48 <vListInsert+0x2e>
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	685b      	ldr	r3, [r3, #4]
 8011f46:	60fb      	str	r3, [r7, #12]
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	685b      	ldr	r3, [r3, #4]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	68ba      	ldr	r2, [r7, #8]
 8011f50:	429a      	cmp	r2, r3
 8011f52:	d2f6      	bcs.n	8011f42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	685a      	ldr	r2, [r3, #4]
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011f5c:	683b      	ldr	r3, [r7, #0]
 8011f5e:	685b      	ldr	r3, [r3, #4]
 8011f60:	683a      	ldr	r2, [r7, #0]
 8011f62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011f64:	683b      	ldr	r3, [r7, #0]
 8011f66:	68fa      	ldr	r2, [r7, #12]
 8011f68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	683a      	ldr	r2, [r7, #0]
 8011f6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011f70:	683b      	ldr	r3, [r7, #0]
 8011f72:	687a      	ldr	r2, [r7, #4]
 8011f74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	1c5a      	adds	r2, r3, #1
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	601a      	str	r2, [r3, #0]
}
 8011f80:	bf00      	nop
 8011f82:	3714      	adds	r7, #20
 8011f84:	46bd      	mov	sp, r7
 8011f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8a:	4770      	bx	lr

08011f8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011f8c:	b480      	push	{r7}
 8011f8e:	b085      	sub	sp, #20
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	691b      	ldr	r3, [r3, #16]
 8011f98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	685b      	ldr	r3, [r3, #4]
 8011f9e:	687a      	ldr	r2, [r7, #4]
 8011fa0:	6892      	ldr	r2, [r2, #8]
 8011fa2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	689b      	ldr	r3, [r3, #8]
 8011fa8:	687a      	ldr	r2, [r7, #4]
 8011faa:	6852      	ldr	r2, [r2, #4]
 8011fac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	685b      	ldr	r3, [r3, #4]
 8011fb2:	687a      	ldr	r2, [r7, #4]
 8011fb4:	429a      	cmp	r2, r3
 8011fb6:	d103      	bne.n	8011fc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	689a      	ldr	r2, [r3, #8]
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	1e5a      	subs	r2, r3, #1
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	681b      	ldr	r3, [r3, #0]
}
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	3714      	adds	r7, #20
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fde:	4770      	bx	lr

08011fe0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b084      	sub	sp, #16
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
 8011fe8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d10c      	bne.n	801200e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ff8:	b672      	cpsid	i
 8011ffa:	f383 8811 	msr	BASEPRI, r3
 8011ffe:	f3bf 8f6f 	isb	sy
 8012002:	f3bf 8f4f 	dsb	sy
 8012006:	b662      	cpsie	i
 8012008:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801200a:	bf00      	nop
 801200c:	e7fe      	b.n	801200c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 801200e:	f001 ffed 	bl	8013fec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	681a      	ldr	r2, [r3, #0]
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801201a:	68f9      	ldr	r1, [r7, #12]
 801201c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801201e:	fb01 f303 	mul.w	r3, r1, r3
 8012022:	441a      	add	r2, r3
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	2200      	movs	r2, #0
 801202c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	681a      	ldr	r2, [r3, #0]
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	681a      	ldr	r2, [r3, #0]
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801203e:	3b01      	subs	r3, #1
 8012040:	68f9      	ldr	r1, [r7, #12]
 8012042:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012044:	fb01 f303 	mul.w	r3, r1, r3
 8012048:	441a      	add	r2, r3
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	22ff      	movs	r2, #255	; 0xff
 8012052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	22ff      	movs	r2, #255	; 0xff
 801205a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d114      	bne.n	801208e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	691b      	ldr	r3, [r3, #16]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d01a      	beq.n	80120a2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	3310      	adds	r3, #16
 8012070:	4618      	mov	r0, r3
 8012072:	f001 faa7 	bl	80135c4 <xTaskRemoveFromEventList>
 8012076:	4603      	mov	r3, r0
 8012078:	2b00      	cmp	r3, #0
 801207a:	d012      	beq.n	80120a2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801207c:	4b0c      	ldr	r3, [pc, #48]	; (80120b0 <xQueueGenericReset+0xd0>)
 801207e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012082:	601a      	str	r2, [r3, #0]
 8012084:	f3bf 8f4f 	dsb	sy
 8012088:	f3bf 8f6f 	isb	sy
 801208c:	e009      	b.n	80120a2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	3310      	adds	r3, #16
 8012092:	4618      	mov	r0, r3
 8012094:	f7ff fef0 	bl	8011e78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	3324      	adds	r3, #36	; 0x24
 801209c:	4618      	mov	r0, r3
 801209e:	f7ff feeb 	bl	8011e78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80120a2:	f001 ffd7 	bl	8014054 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80120a6:	2301      	movs	r3, #1
}
 80120a8:	4618      	mov	r0, r3
 80120aa:	3710      	adds	r7, #16
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}
 80120b0:	e000ed04 	.word	0xe000ed04

080120b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b08e      	sub	sp, #56	; 0x38
 80120b8:	af02      	add	r7, sp, #8
 80120ba:	60f8      	str	r0, [r7, #12]
 80120bc:	60b9      	str	r1, [r7, #8]
 80120be:	607a      	str	r2, [r7, #4]
 80120c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d10c      	bne.n	80120e2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80120c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120cc:	b672      	cpsid	i
 80120ce:	f383 8811 	msr	BASEPRI, r3
 80120d2:	f3bf 8f6f 	isb	sy
 80120d6:	f3bf 8f4f 	dsb	sy
 80120da:	b662      	cpsie	i
 80120dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80120de:	bf00      	nop
 80120e0:	e7fe      	b.n	80120e0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d10c      	bne.n	8012102 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80120e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120ec:	b672      	cpsid	i
 80120ee:	f383 8811 	msr	BASEPRI, r3
 80120f2:	f3bf 8f6f 	isb	sy
 80120f6:	f3bf 8f4f 	dsb	sy
 80120fa:	b662      	cpsie	i
 80120fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80120fe:	bf00      	nop
 8012100:	e7fe      	b.n	8012100 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d002      	beq.n	801210e <xQueueGenericCreateStatic+0x5a>
 8012108:	68bb      	ldr	r3, [r7, #8]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d001      	beq.n	8012112 <xQueueGenericCreateStatic+0x5e>
 801210e:	2301      	movs	r3, #1
 8012110:	e000      	b.n	8012114 <xQueueGenericCreateStatic+0x60>
 8012112:	2300      	movs	r3, #0
 8012114:	2b00      	cmp	r3, #0
 8012116:	d10c      	bne.n	8012132 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8012118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801211c:	b672      	cpsid	i
 801211e:	f383 8811 	msr	BASEPRI, r3
 8012122:	f3bf 8f6f 	isb	sy
 8012126:	f3bf 8f4f 	dsb	sy
 801212a:	b662      	cpsie	i
 801212c:	623b      	str	r3, [r7, #32]
}
 801212e:	bf00      	nop
 8012130:	e7fe      	b.n	8012130 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d102      	bne.n	801213e <xQueueGenericCreateStatic+0x8a>
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d101      	bne.n	8012142 <xQueueGenericCreateStatic+0x8e>
 801213e:	2301      	movs	r3, #1
 8012140:	e000      	b.n	8012144 <xQueueGenericCreateStatic+0x90>
 8012142:	2300      	movs	r3, #0
 8012144:	2b00      	cmp	r3, #0
 8012146:	d10c      	bne.n	8012162 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8012148:	f04f 0350 	mov.w	r3, #80	; 0x50
 801214c:	b672      	cpsid	i
 801214e:	f383 8811 	msr	BASEPRI, r3
 8012152:	f3bf 8f6f 	isb	sy
 8012156:	f3bf 8f4f 	dsb	sy
 801215a:	b662      	cpsie	i
 801215c:	61fb      	str	r3, [r7, #28]
}
 801215e:	bf00      	nop
 8012160:	e7fe      	b.n	8012160 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012162:	2348      	movs	r3, #72	; 0x48
 8012164:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012166:	697b      	ldr	r3, [r7, #20]
 8012168:	2b48      	cmp	r3, #72	; 0x48
 801216a:	d00c      	beq.n	8012186 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 801216c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012170:	b672      	cpsid	i
 8012172:	f383 8811 	msr	BASEPRI, r3
 8012176:	f3bf 8f6f 	isb	sy
 801217a:	f3bf 8f4f 	dsb	sy
 801217e:	b662      	cpsie	i
 8012180:	61bb      	str	r3, [r7, #24]
}
 8012182:	bf00      	nop
 8012184:	e7fe      	b.n	8012184 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012186:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801218c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801218e:	2b00      	cmp	r3, #0
 8012190:	d00d      	beq.n	80121ae <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012194:	2201      	movs	r2, #1
 8012196:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801219a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801219e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a0:	9300      	str	r3, [sp, #0]
 80121a2:	4613      	mov	r3, r2
 80121a4:	687a      	ldr	r2, [r7, #4]
 80121a6:	68b9      	ldr	r1, [r7, #8]
 80121a8:	68f8      	ldr	r0, [r7, #12]
 80121aa:	f000 f847 	bl	801223c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80121ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80121b0:	4618      	mov	r0, r3
 80121b2:	3730      	adds	r7, #48	; 0x30
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}

080121b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b08a      	sub	sp, #40	; 0x28
 80121bc:	af02      	add	r7, sp, #8
 80121be:	60f8      	str	r0, [r7, #12]
 80121c0:	60b9      	str	r1, [r7, #8]
 80121c2:	4613      	mov	r3, r2
 80121c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d10c      	bne.n	80121e6 <xQueueGenericCreate+0x2e>
	__asm volatile
 80121cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d0:	b672      	cpsid	i
 80121d2:	f383 8811 	msr	BASEPRI, r3
 80121d6:	f3bf 8f6f 	isb	sy
 80121da:	f3bf 8f4f 	dsb	sy
 80121de:	b662      	cpsie	i
 80121e0:	613b      	str	r3, [r7, #16]
}
 80121e2:	bf00      	nop
 80121e4:	e7fe      	b.n	80121e4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d102      	bne.n	80121f2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80121ec:	2300      	movs	r3, #0
 80121ee:	61fb      	str	r3, [r7, #28]
 80121f0:	e004      	b.n	80121fc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	68ba      	ldr	r2, [r7, #8]
 80121f6:	fb02 f303 	mul.w	r3, r2, r3
 80121fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80121fc:	69fb      	ldr	r3, [r7, #28]
 80121fe:	3348      	adds	r3, #72	; 0x48
 8012200:	4618      	mov	r0, r3
 8012202:	f002 f81f 	bl	8014244 <pvPortMalloc>
 8012206:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012208:	69bb      	ldr	r3, [r7, #24]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d011      	beq.n	8012232 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801220e:	69bb      	ldr	r3, [r7, #24]
 8012210:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012212:	697b      	ldr	r3, [r7, #20]
 8012214:	3348      	adds	r3, #72	; 0x48
 8012216:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012218:	69bb      	ldr	r3, [r7, #24]
 801221a:	2200      	movs	r2, #0
 801221c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012220:	79fa      	ldrb	r2, [r7, #7]
 8012222:	69bb      	ldr	r3, [r7, #24]
 8012224:	9300      	str	r3, [sp, #0]
 8012226:	4613      	mov	r3, r2
 8012228:	697a      	ldr	r2, [r7, #20]
 801222a:	68b9      	ldr	r1, [r7, #8]
 801222c:	68f8      	ldr	r0, [r7, #12]
 801222e:	f000 f805 	bl	801223c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012232:	69bb      	ldr	r3, [r7, #24]
	}
 8012234:	4618      	mov	r0, r3
 8012236:	3720      	adds	r7, #32
 8012238:	46bd      	mov	sp, r7
 801223a:	bd80      	pop	{r7, pc}

0801223c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b084      	sub	sp, #16
 8012240:	af00      	add	r7, sp, #0
 8012242:	60f8      	str	r0, [r7, #12]
 8012244:	60b9      	str	r1, [r7, #8]
 8012246:	607a      	str	r2, [r7, #4]
 8012248:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801224a:	68bb      	ldr	r3, [r7, #8]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d103      	bne.n	8012258 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012250:	69bb      	ldr	r3, [r7, #24]
 8012252:	69ba      	ldr	r2, [r7, #24]
 8012254:	601a      	str	r2, [r3, #0]
 8012256:	e002      	b.n	801225e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012258:	69bb      	ldr	r3, [r7, #24]
 801225a:	687a      	ldr	r2, [r7, #4]
 801225c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801225e:	69bb      	ldr	r3, [r7, #24]
 8012260:	68fa      	ldr	r2, [r7, #12]
 8012262:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012264:	69bb      	ldr	r3, [r7, #24]
 8012266:	68ba      	ldr	r2, [r7, #8]
 8012268:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801226a:	2101      	movs	r1, #1
 801226c:	69b8      	ldr	r0, [r7, #24]
 801226e:	f7ff feb7 	bl	8011fe0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012272:	bf00      	nop
 8012274:	3710      	adds	r7, #16
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}

0801227a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801227a:	b580      	push	{r7, lr}
 801227c:	b082      	sub	sp, #8
 801227e:	af00      	add	r7, sp, #0
 8012280:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d00e      	beq.n	80122a6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2200      	movs	r2, #0
 801228c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	2200      	movs	r2, #0
 8012292:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	2200      	movs	r2, #0
 8012298:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801229a:	2300      	movs	r3, #0
 801229c:	2200      	movs	r2, #0
 801229e:	2100      	movs	r1, #0
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f000 f837 	bl	8012314 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80122a6:	bf00      	nop
 80122a8:	3708      	adds	r7, #8
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}

080122ae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80122ae:	b580      	push	{r7, lr}
 80122b0:	b086      	sub	sp, #24
 80122b2:	af00      	add	r7, sp, #0
 80122b4:	4603      	mov	r3, r0
 80122b6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80122b8:	2301      	movs	r3, #1
 80122ba:	617b      	str	r3, [r7, #20]
 80122bc:	2300      	movs	r3, #0
 80122be:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80122c0:	79fb      	ldrb	r3, [r7, #7]
 80122c2:	461a      	mov	r2, r3
 80122c4:	6939      	ldr	r1, [r7, #16]
 80122c6:	6978      	ldr	r0, [r7, #20]
 80122c8:	f7ff ff76 	bl	80121b8 <xQueueGenericCreate>
 80122cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80122ce:	68f8      	ldr	r0, [r7, #12]
 80122d0:	f7ff ffd3 	bl	801227a <prvInitialiseMutex>

		return xNewQueue;
 80122d4:	68fb      	ldr	r3, [r7, #12]
	}
 80122d6:	4618      	mov	r0, r3
 80122d8:	3718      	adds	r7, #24
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}

080122de <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80122de:	b580      	push	{r7, lr}
 80122e0:	b088      	sub	sp, #32
 80122e2:	af02      	add	r7, sp, #8
 80122e4:	4603      	mov	r3, r0
 80122e6:	6039      	str	r1, [r7, #0]
 80122e8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80122ea:	2301      	movs	r3, #1
 80122ec:	617b      	str	r3, [r7, #20]
 80122ee:	2300      	movs	r3, #0
 80122f0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80122f2:	79fb      	ldrb	r3, [r7, #7]
 80122f4:	9300      	str	r3, [sp, #0]
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	2200      	movs	r2, #0
 80122fa:	6939      	ldr	r1, [r7, #16]
 80122fc:	6978      	ldr	r0, [r7, #20]
 80122fe:	f7ff fed9 	bl	80120b4 <xQueueGenericCreateStatic>
 8012302:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012304:	68f8      	ldr	r0, [r7, #12]
 8012306:	f7ff ffb8 	bl	801227a <prvInitialiseMutex>

		return xNewQueue;
 801230a:	68fb      	ldr	r3, [r7, #12]
	}
 801230c:	4618      	mov	r0, r3
 801230e:	3718      	adds	r7, #24
 8012310:	46bd      	mov	sp, r7
 8012312:	bd80      	pop	{r7, pc}

08012314 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b08e      	sub	sp, #56	; 0x38
 8012318:	af00      	add	r7, sp, #0
 801231a:	60f8      	str	r0, [r7, #12]
 801231c:	60b9      	str	r1, [r7, #8]
 801231e:	607a      	str	r2, [r7, #4]
 8012320:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012322:	2300      	movs	r3, #0
 8012324:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801232a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801232c:	2b00      	cmp	r3, #0
 801232e:	d10c      	bne.n	801234a <xQueueGenericSend+0x36>
	__asm volatile
 8012330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012334:	b672      	cpsid	i
 8012336:	f383 8811 	msr	BASEPRI, r3
 801233a:	f3bf 8f6f 	isb	sy
 801233e:	f3bf 8f4f 	dsb	sy
 8012342:	b662      	cpsie	i
 8012344:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012346:	bf00      	nop
 8012348:	e7fe      	b.n	8012348 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801234a:	68bb      	ldr	r3, [r7, #8]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d103      	bne.n	8012358 <xQueueGenericSend+0x44>
 8012350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012354:	2b00      	cmp	r3, #0
 8012356:	d101      	bne.n	801235c <xQueueGenericSend+0x48>
 8012358:	2301      	movs	r3, #1
 801235a:	e000      	b.n	801235e <xQueueGenericSend+0x4a>
 801235c:	2300      	movs	r3, #0
 801235e:	2b00      	cmp	r3, #0
 8012360:	d10c      	bne.n	801237c <xQueueGenericSend+0x68>
	__asm volatile
 8012362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012366:	b672      	cpsid	i
 8012368:	f383 8811 	msr	BASEPRI, r3
 801236c:	f3bf 8f6f 	isb	sy
 8012370:	f3bf 8f4f 	dsb	sy
 8012374:	b662      	cpsie	i
 8012376:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012378:	bf00      	nop
 801237a:	e7fe      	b.n	801237a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	2b02      	cmp	r3, #2
 8012380:	d103      	bne.n	801238a <xQueueGenericSend+0x76>
 8012382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012386:	2b01      	cmp	r3, #1
 8012388:	d101      	bne.n	801238e <xQueueGenericSend+0x7a>
 801238a:	2301      	movs	r3, #1
 801238c:	e000      	b.n	8012390 <xQueueGenericSend+0x7c>
 801238e:	2300      	movs	r3, #0
 8012390:	2b00      	cmp	r3, #0
 8012392:	d10c      	bne.n	80123ae <xQueueGenericSend+0x9a>
	__asm volatile
 8012394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012398:	b672      	cpsid	i
 801239a:	f383 8811 	msr	BASEPRI, r3
 801239e:	f3bf 8f6f 	isb	sy
 80123a2:	f3bf 8f4f 	dsb	sy
 80123a6:	b662      	cpsie	i
 80123a8:	623b      	str	r3, [r7, #32]
}
 80123aa:	bf00      	nop
 80123ac:	e7fe      	b.n	80123ac <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80123ae:	f001 fad1 	bl	8013954 <xTaskGetSchedulerState>
 80123b2:	4603      	mov	r3, r0
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d102      	bne.n	80123be <xQueueGenericSend+0xaa>
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d101      	bne.n	80123c2 <xQueueGenericSend+0xae>
 80123be:	2301      	movs	r3, #1
 80123c0:	e000      	b.n	80123c4 <xQueueGenericSend+0xb0>
 80123c2:	2300      	movs	r3, #0
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d10c      	bne.n	80123e2 <xQueueGenericSend+0xce>
	__asm volatile
 80123c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123cc:	b672      	cpsid	i
 80123ce:	f383 8811 	msr	BASEPRI, r3
 80123d2:	f3bf 8f6f 	isb	sy
 80123d6:	f3bf 8f4f 	dsb	sy
 80123da:	b662      	cpsie	i
 80123dc:	61fb      	str	r3, [r7, #28]
}
 80123de:	bf00      	nop
 80123e0:	e7fe      	b.n	80123e0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80123e2:	f001 fe03 	bl	8013fec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80123e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80123ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123ee:	429a      	cmp	r2, r3
 80123f0:	d302      	bcc.n	80123f8 <xQueueGenericSend+0xe4>
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	2b02      	cmp	r3, #2
 80123f6:	d129      	bne.n	801244c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80123f8:	683a      	ldr	r2, [r7, #0]
 80123fa:	68b9      	ldr	r1, [r7, #8]
 80123fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123fe:	f000 faf7 	bl	80129f0 <prvCopyDataToQueue>
 8012402:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012408:	2b00      	cmp	r3, #0
 801240a:	d010      	beq.n	801242e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801240e:	3324      	adds	r3, #36	; 0x24
 8012410:	4618      	mov	r0, r3
 8012412:	f001 f8d7 	bl	80135c4 <xTaskRemoveFromEventList>
 8012416:	4603      	mov	r3, r0
 8012418:	2b00      	cmp	r3, #0
 801241a:	d013      	beq.n	8012444 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801241c:	4b3f      	ldr	r3, [pc, #252]	; (801251c <xQueueGenericSend+0x208>)
 801241e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012422:	601a      	str	r2, [r3, #0]
 8012424:	f3bf 8f4f 	dsb	sy
 8012428:	f3bf 8f6f 	isb	sy
 801242c:	e00a      	b.n	8012444 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012430:	2b00      	cmp	r3, #0
 8012432:	d007      	beq.n	8012444 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012434:	4b39      	ldr	r3, [pc, #228]	; (801251c <xQueueGenericSend+0x208>)
 8012436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801243a:	601a      	str	r2, [r3, #0]
 801243c:	f3bf 8f4f 	dsb	sy
 8012440:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012444:	f001 fe06 	bl	8014054 <vPortExitCritical>
				return pdPASS;
 8012448:	2301      	movs	r3, #1
 801244a:	e063      	b.n	8012514 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d103      	bne.n	801245a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012452:	f001 fdff 	bl	8014054 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012456:	2300      	movs	r3, #0
 8012458:	e05c      	b.n	8012514 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 801245a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801245c:	2b00      	cmp	r3, #0
 801245e:	d106      	bne.n	801246e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012460:	f107 0314 	add.w	r3, r7, #20
 8012464:	4618      	mov	r0, r3
 8012466:	f001 f911 	bl	801368c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801246a:	2301      	movs	r3, #1
 801246c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801246e:	f001 fdf1 	bl	8014054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012472:	f000 fea7 	bl	80131c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012476:	f001 fdb9 	bl	8013fec <vPortEnterCritical>
 801247a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801247c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012480:	b25b      	sxtb	r3, r3
 8012482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012486:	d103      	bne.n	8012490 <xQueueGenericSend+0x17c>
 8012488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801248a:	2200      	movs	r2, #0
 801248c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012492:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012496:	b25b      	sxtb	r3, r3
 8012498:	f1b3 3fff 	cmp.w	r3, #4294967295
 801249c:	d103      	bne.n	80124a6 <xQueueGenericSend+0x192>
 801249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a0:	2200      	movs	r2, #0
 80124a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80124a6:	f001 fdd5 	bl	8014054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80124aa:	1d3a      	adds	r2, r7, #4
 80124ac:	f107 0314 	add.w	r3, r7, #20
 80124b0:	4611      	mov	r1, r2
 80124b2:	4618      	mov	r0, r3
 80124b4:	f001 f900 	bl	80136b8 <xTaskCheckForTimeOut>
 80124b8:	4603      	mov	r3, r0
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d124      	bne.n	8012508 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80124be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124c0:	f000 fb8e 	bl	8012be0 <prvIsQueueFull>
 80124c4:	4603      	mov	r3, r0
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d018      	beq.n	80124fc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80124ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124cc:	3310      	adds	r3, #16
 80124ce:	687a      	ldr	r2, [r7, #4]
 80124d0:	4611      	mov	r1, r2
 80124d2:	4618      	mov	r0, r3
 80124d4:	f001 f850 	bl	8013578 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80124d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124da:	f000 fb19 	bl	8012b10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80124de:	f000 fe7f 	bl	80131e0 <xTaskResumeAll>
 80124e2:	4603      	mov	r3, r0
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	f47f af7c 	bne.w	80123e2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80124ea:	4b0c      	ldr	r3, [pc, #48]	; (801251c <xQueueGenericSend+0x208>)
 80124ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124f0:	601a      	str	r2, [r3, #0]
 80124f2:	f3bf 8f4f 	dsb	sy
 80124f6:	f3bf 8f6f 	isb	sy
 80124fa:	e772      	b.n	80123e2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80124fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124fe:	f000 fb07 	bl	8012b10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012502:	f000 fe6d 	bl	80131e0 <xTaskResumeAll>
 8012506:	e76c      	b.n	80123e2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801250a:	f000 fb01 	bl	8012b10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801250e:	f000 fe67 	bl	80131e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012512:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012514:	4618      	mov	r0, r3
 8012516:	3738      	adds	r7, #56	; 0x38
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}
 801251c:	e000ed04 	.word	0xe000ed04

08012520 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b08e      	sub	sp, #56	; 0x38
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
 8012528:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012530:	2b00      	cmp	r3, #0
 8012532:	d10c      	bne.n	801254e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8012534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012538:	b672      	cpsid	i
 801253a:	f383 8811 	msr	BASEPRI, r3
 801253e:	f3bf 8f6f 	isb	sy
 8012542:	f3bf 8f4f 	dsb	sy
 8012546:	b662      	cpsie	i
 8012548:	623b      	str	r3, [r7, #32]
}
 801254a:	bf00      	nop
 801254c:	e7fe      	b.n	801254c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012552:	2b00      	cmp	r3, #0
 8012554:	d00c      	beq.n	8012570 <xQueueGiveFromISR+0x50>
	__asm volatile
 8012556:	f04f 0350 	mov.w	r3, #80	; 0x50
 801255a:	b672      	cpsid	i
 801255c:	f383 8811 	msr	BASEPRI, r3
 8012560:	f3bf 8f6f 	isb	sy
 8012564:	f3bf 8f4f 	dsb	sy
 8012568:	b662      	cpsie	i
 801256a:	61fb      	str	r3, [r7, #28]
}
 801256c:	bf00      	nop
 801256e:	e7fe      	b.n	801256e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d103      	bne.n	8012580 <xQueueGiveFromISR+0x60>
 8012578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801257a:	689b      	ldr	r3, [r3, #8]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d101      	bne.n	8012584 <xQueueGiveFromISR+0x64>
 8012580:	2301      	movs	r3, #1
 8012582:	e000      	b.n	8012586 <xQueueGiveFromISR+0x66>
 8012584:	2300      	movs	r3, #0
 8012586:	2b00      	cmp	r3, #0
 8012588:	d10c      	bne.n	80125a4 <xQueueGiveFromISR+0x84>
	__asm volatile
 801258a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801258e:	b672      	cpsid	i
 8012590:	f383 8811 	msr	BASEPRI, r3
 8012594:	f3bf 8f6f 	isb	sy
 8012598:	f3bf 8f4f 	dsb	sy
 801259c:	b662      	cpsie	i
 801259e:	61bb      	str	r3, [r7, #24]
}
 80125a0:	bf00      	nop
 80125a2:	e7fe      	b.n	80125a2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80125a4:	f001 fe0a 	bl	80141bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80125a8:	f3ef 8211 	mrs	r2, BASEPRI
 80125ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125b0:	b672      	cpsid	i
 80125b2:	f383 8811 	msr	BASEPRI, r3
 80125b6:	f3bf 8f6f 	isb	sy
 80125ba:	f3bf 8f4f 	dsb	sy
 80125be:	b662      	cpsie	i
 80125c0:	617a      	str	r2, [r7, #20]
 80125c2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80125c4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80125c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80125c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125cc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80125ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80125d4:	429a      	cmp	r2, r3
 80125d6:	d22b      	bcs.n	8012630 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80125d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80125de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80125e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125e4:	1c5a      	adds	r2, r3, #1
 80125e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125e8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80125ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80125ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125f2:	d112      	bne.n	801261a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80125f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d016      	beq.n	801262a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80125fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125fe:	3324      	adds	r3, #36	; 0x24
 8012600:	4618      	mov	r0, r3
 8012602:	f000 ffdf 	bl	80135c4 <xTaskRemoveFromEventList>
 8012606:	4603      	mov	r3, r0
 8012608:	2b00      	cmp	r3, #0
 801260a:	d00e      	beq.n	801262a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d00b      	beq.n	801262a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012612:	683b      	ldr	r3, [r7, #0]
 8012614:	2201      	movs	r2, #1
 8012616:	601a      	str	r2, [r3, #0]
 8012618:	e007      	b.n	801262a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801261a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801261e:	3301      	adds	r3, #1
 8012620:	b2db      	uxtb	r3, r3
 8012622:	b25a      	sxtb	r2, r3
 8012624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801262a:	2301      	movs	r3, #1
 801262c:	637b      	str	r3, [r7, #52]	; 0x34
 801262e:	e001      	b.n	8012634 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012630:	2300      	movs	r3, #0
 8012632:	637b      	str	r3, [r7, #52]	; 0x34
 8012634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012636:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801263e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012642:	4618      	mov	r0, r3
 8012644:	3738      	adds	r7, #56	; 0x38
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}
	...

0801264c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b08e      	sub	sp, #56	; 0x38
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
 8012654:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012656:	2300      	movs	r3, #0
 8012658:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801265e:	2300      	movs	r3, #0
 8012660:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012664:	2b00      	cmp	r3, #0
 8012666:	d10c      	bne.n	8012682 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8012668:	f04f 0350 	mov.w	r3, #80	; 0x50
 801266c:	b672      	cpsid	i
 801266e:	f383 8811 	msr	BASEPRI, r3
 8012672:	f3bf 8f6f 	isb	sy
 8012676:	f3bf 8f4f 	dsb	sy
 801267a:	b662      	cpsie	i
 801267c:	623b      	str	r3, [r7, #32]
}
 801267e:	bf00      	nop
 8012680:	e7fe      	b.n	8012680 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012686:	2b00      	cmp	r3, #0
 8012688:	d00c      	beq.n	80126a4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 801268a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801268e:	b672      	cpsid	i
 8012690:	f383 8811 	msr	BASEPRI, r3
 8012694:	f3bf 8f6f 	isb	sy
 8012698:	f3bf 8f4f 	dsb	sy
 801269c:	b662      	cpsie	i
 801269e:	61fb      	str	r3, [r7, #28]
}
 80126a0:	bf00      	nop
 80126a2:	e7fe      	b.n	80126a2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80126a4:	f001 f956 	bl	8013954 <xTaskGetSchedulerState>
 80126a8:	4603      	mov	r3, r0
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d102      	bne.n	80126b4 <xQueueSemaphoreTake+0x68>
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d101      	bne.n	80126b8 <xQueueSemaphoreTake+0x6c>
 80126b4:	2301      	movs	r3, #1
 80126b6:	e000      	b.n	80126ba <xQueueSemaphoreTake+0x6e>
 80126b8:	2300      	movs	r3, #0
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d10c      	bne.n	80126d8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80126be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126c2:	b672      	cpsid	i
 80126c4:	f383 8811 	msr	BASEPRI, r3
 80126c8:	f3bf 8f6f 	isb	sy
 80126cc:	f3bf 8f4f 	dsb	sy
 80126d0:	b662      	cpsie	i
 80126d2:	61bb      	str	r3, [r7, #24]
}
 80126d4:	bf00      	nop
 80126d6:	e7fe      	b.n	80126d6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80126d8:	f001 fc88 	bl	8013fec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80126dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80126e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d024      	beq.n	8012732 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80126e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ea:	1e5a      	subs	r2, r3, #1
 80126ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80126f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d104      	bne.n	8012702 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80126f8:	f001 faf2 	bl	8013ce0 <pvTaskIncrementMutexHeldCount>
 80126fc:	4602      	mov	r2, r0
 80126fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012700:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012704:	691b      	ldr	r3, [r3, #16]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d00f      	beq.n	801272a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801270c:	3310      	adds	r3, #16
 801270e:	4618      	mov	r0, r3
 8012710:	f000 ff58 	bl	80135c4 <xTaskRemoveFromEventList>
 8012714:	4603      	mov	r3, r0
 8012716:	2b00      	cmp	r3, #0
 8012718:	d007      	beq.n	801272a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801271a:	4b55      	ldr	r3, [pc, #340]	; (8012870 <xQueueSemaphoreTake+0x224>)
 801271c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012720:	601a      	str	r2, [r3, #0]
 8012722:	f3bf 8f4f 	dsb	sy
 8012726:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801272a:	f001 fc93 	bl	8014054 <vPortExitCritical>
				return pdPASS;
 801272e:	2301      	movs	r3, #1
 8012730:	e099      	b.n	8012866 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d113      	bne.n	8012760 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801273a:	2b00      	cmp	r3, #0
 801273c:	d00c      	beq.n	8012758 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 801273e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012742:	b672      	cpsid	i
 8012744:	f383 8811 	msr	BASEPRI, r3
 8012748:	f3bf 8f6f 	isb	sy
 801274c:	f3bf 8f4f 	dsb	sy
 8012750:	b662      	cpsie	i
 8012752:	617b      	str	r3, [r7, #20]
}
 8012754:	bf00      	nop
 8012756:	e7fe      	b.n	8012756 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012758:	f001 fc7c 	bl	8014054 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801275c:	2300      	movs	r3, #0
 801275e:	e082      	b.n	8012866 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012762:	2b00      	cmp	r3, #0
 8012764:	d106      	bne.n	8012774 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012766:	f107 030c 	add.w	r3, r7, #12
 801276a:	4618      	mov	r0, r3
 801276c:	f000 ff8e 	bl	801368c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012770:	2301      	movs	r3, #1
 8012772:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012774:	f001 fc6e 	bl	8014054 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012778:	f000 fd24 	bl	80131c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801277c:	f001 fc36 	bl	8013fec <vPortEnterCritical>
 8012780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012782:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012786:	b25b      	sxtb	r3, r3
 8012788:	f1b3 3fff 	cmp.w	r3, #4294967295
 801278c:	d103      	bne.n	8012796 <xQueueSemaphoreTake+0x14a>
 801278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012790:	2200      	movs	r2, #0
 8012792:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012798:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801279c:	b25b      	sxtb	r3, r3
 801279e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127a2:	d103      	bne.n	80127ac <xQueueSemaphoreTake+0x160>
 80127a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a6:	2200      	movs	r2, #0
 80127a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80127ac:	f001 fc52 	bl	8014054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80127b0:	463a      	mov	r2, r7
 80127b2:	f107 030c 	add.w	r3, r7, #12
 80127b6:	4611      	mov	r1, r2
 80127b8:	4618      	mov	r0, r3
 80127ba:	f000 ff7d 	bl	80136b8 <xTaskCheckForTimeOut>
 80127be:	4603      	mov	r3, r0
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d132      	bne.n	801282a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80127c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80127c6:	f000 f9f5 	bl	8012bb4 <prvIsQueueEmpty>
 80127ca:	4603      	mov	r3, r0
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d026      	beq.n	801281e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80127d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d109      	bne.n	80127ec <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80127d8:	f001 fc08 	bl	8013fec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80127dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127de:	689b      	ldr	r3, [r3, #8]
 80127e0:	4618      	mov	r0, r3
 80127e2:	f001 f8d5 	bl	8013990 <xTaskPriorityInherit>
 80127e6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80127e8:	f001 fc34 	bl	8014054 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80127ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ee:	3324      	adds	r3, #36	; 0x24
 80127f0:	683a      	ldr	r2, [r7, #0]
 80127f2:	4611      	mov	r1, r2
 80127f4:	4618      	mov	r0, r3
 80127f6:	f000 febf 	bl	8013578 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80127fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80127fc:	f000 f988 	bl	8012b10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012800:	f000 fcee 	bl	80131e0 <xTaskResumeAll>
 8012804:	4603      	mov	r3, r0
 8012806:	2b00      	cmp	r3, #0
 8012808:	f47f af66 	bne.w	80126d8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 801280c:	4b18      	ldr	r3, [pc, #96]	; (8012870 <xQueueSemaphoreTake+0x224>)
 801280e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012812:	601a      	str	r2, [r3, #0]
 8012814:	f3bf 8f4f 	dsb	sy
 8012818:	f3bf 8f6f 	isb	sy
 801281c:	e75c      	b.n	80126d8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801281e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012820:	f000 f976 	bl	8012b10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012824:	f000 fcdc 	bl	80131e0 <xTaskResumeAll>
 8012828:	e756      	b.n	80126d8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801282a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801282c:	f000 f970 	bl	8012b10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012830:	f000 fcd6 	bl	80131e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012834:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012836:	f000 f9bd 	bl	8012bb4 <prvIsQueueEmpty>
 801283a:	4603      	mov	r3, r0
 801283c:	2b00      	cmp	r3, #0
 801283e:	f43f af4b 	beq.w	80126d8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012844:	2b00      	cmp	r3, #0
 8012846:	d00d      	beq.n	8012864 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8012848:	f001 fbd0 	bl	8013fec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801284c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801284e:	f000 f8b7 	bl	80129c0 <prvGetDisinheritPriorityAfterTimeout>
 8012852:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012856:	689b      	ldr	r3, [r3, #8]
 8012858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801285a:	4618      	mov	r0, r3
 801285c:	f001 f9a2 	bl	8013ba4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012860:	f001 fbf8 	bl	8014054 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012864:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012866:	4618      	mov	r0, r3
 8012868:	3738      	adds	r7, #56	; 0x38
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}
 801286e:	bf00      	nop
 8012870:	e000ed04 	.word	0xe000ed04

08012874 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b08e      	sub	sp, #56	; 0x38
 8012878:	af00      	add	r7, sp, #0
 801287a:	60f8      	str	r0, [r7, #12]
 801287c:	60b9      	str	r1, [r7, #8]
 801287e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012886:	2b00      	cmp	r3, #0
 8012888:	d10c      	bne.n	80128a4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 801288a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801288e:	b672      	cpsid	i
 8012890:	f383 8811 	msr	BASEPRI, r3
 8012894:	f3bf 8f6f 	isb	sy
 8012898:	f3bf 8f4f 	dsb	sy
 801289c:	b662      	cpsie	i
 801289e:	623b      	str	r3, [r7, #32]
}
 80128a0:	bf00      	nop
 80128a2:	e7fe      	b.n	80128a2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80128a4:	68bb      	ldr	r3, [r7, #8]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d103      	bne.n	80128b2 <xQueueReceiveFromISR+0x3e>
 80128aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d101      	bne.n	80128b6 <xQueueReceiveFromISR+0x42>
 80128b2:	2301      	movs	r3, #1
 80128b4:	e000      	b.n	80128b8 <xQueueReceiveFromISR+0x44>
 80128b6:	2300      	movs	r3, #0
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d10c      	bne.n	80128d6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80128bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128c0:	b672      	cpsid	i
 80128c2:	f383 8811 	msr	BASEPRI, r3
 80128c6:	f3bf 8f6f 	isb	sy
 80128ca:	f3bf 8f4f 	dsb	sy
 80128ce:	b662      	cpsie	i
 80128d0:	61fb      	str	r3, [r7, #28]
}
 80128d2:	bf00      	nop
 80128d4:	e7fe      	b.n	80128d4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80128d6:	f001 fc71 	bl	80141bc <vPortValidateInterruptPriority>
	__asm volatile
 80128da:	f3ef 8211 	mrs	r2, BASEPRI
 80128de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128e2:	b672      	cpsid	i
 80128e4:	f383 8811 	msr	BASEPRI, r3
 80128e8:	f3bf 8f6f 	isb	sy
 80128ec:	f3bf 8f4f 	dsb	sy
 80128f0:	b662      	cpsie	i
 80128f2:	61ba      	str	r2, [r7, #24]
 80128f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80128f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80128f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80128fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012902:	2b00      	cmp	r3, #0
 8012904:	d02f      	beq.n	8012966 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012908:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801290c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012910:	68b9      	ldr	r1, [r7, #8]
 8012912:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012914:	f000 f8d6 	bl	8012ac4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801291a:	1e5a      	subs	r2, r3, #1
 801291c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801291e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012920:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012928:	d112      	bne.n	8012950 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801292c:	691b      	ldr	r3, [r3, #16]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d016      	beq.n	8012960 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012934:	3310      	adds	r3, #16
 8012936:	4618      	mov	r0, r3
 8012938:	f000 fe44 	bl	80135c4 <xTaskRemoveFromEventList>
 801293c:	4603      	mov	r3, r0
 801293e:	2b00      	cmp	r3, #0
 8012940:	d00e      	beq.n	8012960 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d00b      	beq.n	8012960 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2201      	movs	r2, #1
 801294c:	601a      	str	r2, [r3, #0]
 801294e:	e007      	b.n	8012960 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012954:	3301      	adds	r3, #1
 8012956:	b2db      	uxtb	r3, r3
 8012958:	b25a      	sxtb	r2, r3
 801295a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801295c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012960:	2301      	movs	r3, #1
 8012962:	637b      	str	r3, [r7, #52]	; 0x34
 8012964:	e001      	b.n	801296a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8012966:	2300      	movs	r3, #0
 8012968:	637b      	str	r3, [r7, #52]	; 0x34
 801296a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801296c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801296e:	693b      	ldr	r3, [r7, #16]
 8012970:	f383 8811 	msr	BASEPRI, r3
}
 8012974:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012978:	4618      	mov	r0, r3
 801297a:	3738      	adds	r7, #56	; 0x38
 801297c:	46bd      	mov	sp, r7
 801297e:	bd80      	pop	{r7, pc}

08012980 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b084      	sub	sp, #16
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d10c      	bne.n	80129a8 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 801298e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012992:	b672      	cpsid	i
 8012994:	f383 8811 	msr	BASEPRI, r3
 8012998:	f3bf 8f6f 	isb	sy
 801299c:	f3bf 8f4f 	dsb	sy
 80129a0:	b662      	cpsie	i
 80129a2:	60bb      	str	r3, [r7, #8]
}
 80129a4:	bf00      	nop
 80129a6:	e7fe      	b.n	80129a6 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80129a8:	f001 fb20 	bl	8013fec <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129b0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80129b2:	f001 fb4f 	bl	8014054 <vPortExitCritical>

	return uxReturn;
 80129b6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80129b8:	4618      	mov	r0, r3
 80129ba:	3710      	adds	r7, #16
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd80      	pop	{r7, pc}

080129c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80129c0:	b480      	push	{r7}
 80129c2:	b085      	sub	sp, #20
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d006      	beq.n	80129de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	f1c3 0307 	rsb	r3, r3, #7
 80129da:	60fb      	str	r3, [r7, #12]
 80129dc:	e001      	b.n	80129e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80129de:	2300      	movs	r3, #0
 80129e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80129e2:	68fb      	ldr	r3, [r7, #12]
	}
 80129e4:	4618      	mov	r0, r3
 80129e6:	3714      	adds	r7, #20
 80129e8:	46bd      	mov	sp, r7
 80129ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ee:	4770      	bx	lr

080129f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b086      	sub	sp, #24
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	60f8      	str	r0, [r7, #12]
 80129f8:	60b9      	str	r1, [r7, #8]
 80129fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80129fc:	2300      	movs	r3, #0
 80129fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d10d      	bne.n	8012a2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d14d      	bne.n	8012ab2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	689b      	ldr	r3, [r3, #8]
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	f001 f838 	bl	8013a90 <xTaskPriorityDisinherit>
 8012a20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	2200      	movs	r2, #0
 8012a26:	609a      	str	r2, [r3, #8]
 8012a28:	e043      	b.n	8012ab2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d119      	bne.n	8012a64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	6858      	ldr	r0, [r3, #4]
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a38:	461a      	mov	r2, r3
 8012a3a:	68b9      	ldr	r1, [r7, #8]
 8012a3c:	f002 fe97 	bl	801576e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	685a      	ldr	r2, [r3, #4]
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a48:	441a      	add	r2, r3
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	685a      	ldr	r2, [r3, #4]
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	689b      	ldr	r3, [r3, #8]
 8012a56:	429a      	cmp	r2, r3
 8012a58:	d32b      	bcc.n	8012ab2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	681a      	ldr	r2, [r3, #0]
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	605a      	str	r2, [r3, #4]
 8012a62:	e026      	b.n	8012ab2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	68d8      	ldr	r0, [r3, #12]
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a6c:	461a      	mov	r2, r3
 8012a6e:	68b9      	ldr	r1, [r7, #8]
 8012a70:	f002 fe7d 	bl	801576e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	68da      	ldr	r2, [r3, #12]
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a7c:	425b      	negs	r3, r3
 8012a7e:	441a      	add	r2, r3
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	68da      	ldr	r2, [r3, #12]
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	429a      	cmp	r2, r3
 8012a8e:	d207      	bcs.n	8012aa0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	689a      	ldr	r2, [r3, #8]
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a98:	425b      	negs	r3, r3
 8012a9a:	441a      	add	r2, r3
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	2b02      	cmp	r3, #2
 8012aa4:	d105      	bne.n	8012ab2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012aa6:	693b      	ldr	r3, [r7, #16]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d002      	beq.n	8012ab2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012aac:	693b      	ldr	r3, [r7, #16]
 8012aae:	3b01      	subs	r3, #1
 8012ab0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012ab2:	693b      	ldr	r3, [r7, #16]
 8012ab4:	1c5a      	adds	r2, r3, #1
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012aba:	697b      	ldr	r3, [r7, #20]
}
 8012abc:	4618      	mov	r0, r3
 8012abe:	3718      	adds	r7, #24
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd80      	pop	{r7, pc}

08012ac4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b082      	sub	sp, #8
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
 8012acc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d018      	beq.n	8012b08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	68da      	ldr	r2, [r3, #12]
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ade:	441a      	add	r2, r3
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	68da      	ldr	r2, [r3, #12]
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	689b      	ldr	r3, [r3, #8]
 8012aec:	429a      	cmp	r2, r3
 8012aee:	d303      	bcc.n	8012af8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681a      	ldr	r2, [r3, #0]
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	68d9      	ldr	r1, [r3, #12]
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b00:	461a      	mov	r2, r3
 8012b02:	6838      	ldr	r0, [r7, #0]
 8012b04:	f002 fe33 	bl	801576e <memcpy>
	}
}
 8012b08:	bf00      	nop
 8012b0a:	3708      	adds	r7, #8
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}

08012b10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b084      	sub	sp, #16
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012b18:	f001 fa68 	bl	8013fec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012b24:	e011      	b.n	8012b4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d012      	beq.n	8012b54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	3324      	adds	r3, #36	; 0x24
 8012b32:	4618      	mov	r0, r3
 8012b34:	f000 fd46 	bl	80135c4 <xTaskRemoveFromEventList>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d001      	beq.n	8012b42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012b3e:	f000 fe21 	bl	8013784 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012b42:	7bfb      	ldrb	r3, [r7, #15]
 8012b44:	3b01      	subs	r3, #1
 8012b46:	b2db      	uxtb	r3, r3
 8012b48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	dce9      	bgt.n	8012b26 <prvUnlockQueue+0x16>
 8012b52:	e000      	b.n	8012b56 <prvUnlockQueue+0x46>
					break;
 8012b54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	22ff      	movs	r2, #255	; 0xff
 8012b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012b5e:	f001 fa79 	bl	8014054 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012b62:	f001 fa43 	bl	8013fec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012b6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012b6e:	e011      	b.n	8012b94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	691b      	ldr	r3, [r3, #16]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d012      	beq.n	8012b9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	3310      	adds	r3, #16
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f000 fd21 	bl	80135c4 <xTaskRemoveFromEventList>
 8012b82:	4603      	mov	r3, r0
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d001      	beq.n	8012b8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012b88:	f000 fdfc 	bl	8013784 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012b8c:	7bbb      	ldrb	r3, [r7, #14]
 8012b8e:	3b01      	subs	r3, #1
 8012b90:	b2db      	uxtb	r3, r3
 8012b92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012b94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	dce9      	bgt.n	8012b70 <prvUnlockQueue+0x60>
 8012b9c:	e000      	b.n	8012ba0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012b9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	22ff      	movs	r2, #255	; 0xff
 8012ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012ba8:	f001 fa54 	bl	8014054 <vPortExitCritical>
}
 8012bac:	bf00      	nop
 8012bae:	3710      	adds	r7, #16
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	bd80      	pop	{r7, pc}

08012bb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b084      	sub	sp, #16
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012bbc:	f001 fa16 	bl	8013fec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d102      	bne.n	8012bce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012bc8:	2301      	movs	r3, #1
 8012bca:	60fb      	str	r3, [r7, #12]
 8012bcc:	e001      	b.n	8012bd2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012bd2:	f001 fa3f 	bl	8014054 <vPortExitCritical>

	return xReturn;
 8012bd6:	68fb      	ldr	r3, [r7, #12]
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3710      	adds	r7, #16
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}

08012be0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b084      	sub	sp, #16
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012be8:	f001 fa00 	bl	8013fec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012bf4:	429a      	cmp	r2, r3
 8012bf6:	d102      	bne.n	8012bfe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012bf8:	2301      	movs	r3, #1
 8012bfa:	60fb      	str	r3, [r7, #12]
 8012bfc:	e001      	b.n	8012c02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012bfe:	2300      	movs	r3, #0
 8012c00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012c02:	f001 fa27 	bl	8014054 <vPortExitCritical>

	return xReturn;
 8012c06:	68fb      	ldr	r3, [r7, #12]
}
 8012c08:	4618      	mov	r0, r3
 8012c0a:	3710      	adds	r7, #16
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	bd80      	pop	{r7, pc}

08012c10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b08e      	sub	sp, #56	; 0x38
 8012c14:	af04      	add	r7, sp, #16
 8012c16:	60f8      	str	r0, [r7, #12]
 8012c18:	60b9      	str	r1, [r7, #8]
 8012c1a:	607a      	str	r2, [r7, #4]
 8012c1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d10c      	bne.n	8012c3e <xTaskCreateStatic+0x2e>
	__asm volatile
 8012c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c28:	b672      	cpsid	i
 8012c2a:	f383 8811 	msr	BASEPRI, r3
 8012c2e:	f3bf 8f6f 	isb	sy
 8012c32:	f3bf 8f4f 	dsb	sy
 8012c36:	b662      	cpsie	i
 8012c38:	623b      	str	r3, [r7, #32]
}
 8012c3a:	bf00      	nop
 8012c3c:	e7fe      	b.n	8012c3c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8012c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d10c      	bne.n	8012c5e <xTaskCreateStatic+0x4e>
	__asm volatile
 8012c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c48:	b672      	cpsid	i
 8012c4a:	f383 8811 	msr	BASEPRI, r3
 8012c4e:	f3bf 8f6f 	isb	sy
 8012c52:	f3bf 8f4f 	dsb	sy
 8012c56:	b662      	cpsie	i
 8012c58:	61fb      	str	r3, [r7, #28]
}
 8012c5a:	bf00      	nop
 8012c5c:	e7fe      	b.n	8012c5c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012c5e:	23a0      	movs	r3, #160	; 0xa0
 8012c60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012c62:	693b      	ldr	r3, [r7, #16]
 8012c64:	2ba0      	cmp	r3, #160	; 0xa0
 8012c66:	d00c      	beq.n	8012c82 <xTaskCreateStatic+0x72>
	__asm volatile
 8012c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c6c:	b672      	cpsid	i
 8012c6e:	f383 8811 	msr	BASEPRI, r3
 8012c72:	f3bf 8f6f 	isb	sy
 8012c76:	f3bf 8f4f 	dsb	sy
 8012c7a:	b662      	cpsie	i
 8012c7c:	61bb      	str	r3, [r7, #24]
}
 8012c7e:	bf00      	nop
 8012c80:	e7fe      	b.n	8012c80 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012c82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d01e      	beq.n	8012cc8 <xTaskCreateStatic+0xb8>
 8012c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d01b      	beq.n	8012cc8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9c:	2202      	movs	r2, #2
 8012c9e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	9303      	str	r3, [sp, #12]
 8012ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca8:	9302      	str	r3, [sp, #8]
 8012caa:	f107 0314 	add.w	r3, r7, #20
 8012cae:	9301      	str	r3, [sp, #4]
 8012cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cb2:	9300      	str	r3, [sp, #0]
 8012cb4:	683b      	ldr	r3, [r7, #0]
 8012cb6:	687a      	ldr	r2, [r7, #4]
 8012cb8:	68b9      	ldr	r1, [r7, #8]
 8012cba:	68f8      	ldr	r0, [r7, #12]
 8012cbc:	f000 f850 	bl	8012d60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012cc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cc2:	f000 f8ed 	bl	8012ea0 <prvAddNewTaskToReadyList>
 8012cc6:	e001      	b.n	8012ccc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8012cc8:	2300      	movs	r3, #0
 8012cca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012ccc:	697b      	ldr	r3, [r7, #20]
	}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	3728      	adds	r7, #40	; 0x28
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}

08012cd6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012cd6:	b580      	push	{r7, lr}
 8012cd8:	b08c      	sub	sp, #48	; 0x30
 8012cda:	af04      	add	r7, sp, #16
 8012cdc:	60f8      	str	r0, [r7, #12]
 8012cde:	60b9      	str	r1, [r7, #8]
 8012ce0:	603b      	str	r3, [r7, #0]
 8012ce2:	4613      	mov	r3, r2
 8012ce4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012ce6:	88fb      	ldrh	r3, [r7, #6]
 8012ce8:	009b      	lsls	r3, r3, #2
 8012cea:	4618      	mov	r0, r3
 8012cec:	f001 faaa 	bl	8014244 <pvPortMalloc>
 8012cf0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d00e      	beq.n	8012d16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012cf8:	20a0      	movs	r0, #160	; 0xa0
 8012cfa:	f001 faa3 	bl	8014244 <pvPortMalloc>
 8012cfe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012d00:	69fb      	ldr	r3, [r7, #28]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d003      	beq.n	8012d0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012d06:	69fb      	ldr	r3, [r7, #28]
 8012d08:	697a      	ldr	r2, [r7, #20]
 8012d0a:	631a      	str	r2, [r3, #48]	; 0x30
 8012d0c:	e005      	b.n	8012d1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012d0e:	6978      	ldr	r0, [r7, #20]
 8012d10:	f001 fb62 	bl	80143d8 <vPortFree>
 8012d14:	e001      	b.n	8012d1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012d16:	2300      	movs	r3, #0
 8012d18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012d1a:	69fb      	ldr	r3, [r7, #28]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d017      	beq.n	8012d50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012d20:	69fb      	ldr	r3, [r7, #28]
 8012d22:	2200      	movs	r2, #0
 8012d24:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012d28:	88fa      	ldrh	r2, [r7, #6]
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	9303      	str	r3, [sp, #12]
 8012d2e:	69fb      	ldr	r3, [r7, #28]
 8012d30:	9302      	str	r3, [sp, #8]
 8012d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d34:	9301      	str	r3, [sp, #4]
 8012d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d38:	9300      	str	r3, [sp, #0]
 8012d3a:	683b      	ldr	r3, [r7, #0]
 8012d3c:	68b9      	ldr	r1, [r7, #8]
 8012d3e:	68f8      	ldr	r0, [r7, #12]
 8012d40:	f000 f80e 	bl	8012d60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012d44:	69f8      	ldr	r0, [r7, #28]
 8012d46:	f000 f8ab 	bl	8012ea0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	61bb      	str	r3, [r7, #24]
 8012d4e:	e002      	b.n	8012d56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012d50:	f04f 33ff 	mov.w	r3, #4294967295
 8012d54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012d56:	69bb      	ldr	r3, [r7, #24]
	}
 8012d58:	4618      	mov	r0, r3
 8012d5a:	3720      	adds	r7, #32
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}

08012d60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b088      	sub	sp, #32
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	60f8      	str	r0, [r7, #12]
 8012d68:	60b9      	str	r1, [r7, #8]
 8012d6a:	607a      	str	r2, [r7, #4]
 8012d6c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012d72:	6879      	ldr	r1, [r7, #4]
 8012d74:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012d78:	440b      	add	r3, r1
 8012d7a:	009b      	lsls	r3, r3, #2
 8012d7c:	4413      	add	r3, r2
 8012d7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012d80:	69bb      	ldr	r3, [r7, #24]
 8012d82:	f023 0307 	bic.w	r3, r3, #7
 8012d86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012d88:	69bb      	ldr	r3, [r7, #24]
 8012d8a:	f003 0307 	and.w	r3, r3, #7
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d00c      	beq.n	8012dac <prvInitialiseNewTask+0x4c>
	__asm volatile
 8012d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d96:	b672      	cpsid	i
 8012d98:	f383 8811 	msr	BASEPRI, r3
 8012d9c:	f3bf 8f6f 	isb	sy
 8012da0:	f3bf 8f4f 	dsb	sy
 8012da4:	b662      	cpsie	i
 8012da6:	617b      	str	r3, [r7, #20]
}
 8012da8:	bf00      	nop
 8012daa:	e7fe      	b.n	8012daa <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012dac:	68bb      	ldr	r3, [r7, #8]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d01f      	beq.n	8012df2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012db2:	2300      	movs	r3, #0
 8012db4:	61fb      	str	r3, [r7, #28]
 8012db6:	e012      	b.n	8012dde <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012db8:	68ba      	ldr	r2, [r7, #8]
 8012dba:	69fb      	ldr	r3, [r7, #28]
 8012dbc:	4413      	add	r3, r2
 8012dbe:	7819      	ldrb	r1, [r3, #0]
 8012dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012dc2:	69fb      	ldr	r3, [r7, #28]
 8012dc4:	4413      	add	r3, r2
 8012dc6:	3334      	adds	r3, #52	; 0x34
 8012dc8:	460a      	mov	r2, r1
 8012dca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012dcc:	68ba      	ldr	r2, [r7, #8]
 8012dce:	69fb      	ldr	r3, [r7, #28]
 8012dd0:	4413      	add	r3, r2
 8012dd2:	781b      	ldrb	r3, [r3, #0]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d006      	beq.n	8012de6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012dd8:	69fb      	ldr	r3, [r7, #28]
 8012dda:	3301      	adds	r3, #1
 8012ddc:	61fb      	str	r3, [r7, #28]
 8012dde:	69fb      	ldr	r3, [r7, #28]
 8012de0:	2b0f      	cmp	r3, #15
 8012de2:	d9e9      	bls.n	8012db8 <prvInitialiseNewTask+0x58>
 8012de4:	e000      	b.n	8012de8 <prvInitialiseNewTask+0x88>
			{
				break;
 8012de6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dea:	2200      	movs	r2, #0
 8012dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012df0:	e003      	b.n	8012dfa <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df4:	2200      	movs	r2, #0
 8012df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dfc:	2b06      	cmp	r3, #6
 8012dfe:	d901      	bls.n	8012e04 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012e00:	2306      	movs	r3, #6
 8012e02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e0e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e12:	2200      	movs	r2, #0
 8012e14:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e18:	3304      	adds	r3, #4
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7ff f84c 	bl	8011eb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e22:	3318      	adds	r3, #24
 8012e24:	4618      	mov	r0, r3
 8012e26:	f7ff f847 	bl	8011eb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e32:	f1c3 0207 	rsb	r2, r3, #7
 8012e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e42:	2200      	movs	r2, #0
 8012e44:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e52:	334c      	adds	r3, #76	; 0x4c
 8012e54:	224c      	movs	r2, #76	; 0x4c
 8012e56:	2100      	movs	r1, #0
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f002 fba0 	bl	801559e <memset>
 8012e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e60:	4a0c      	ldr	r2, [pc, #48]	; (8012e94 <prvInitialiseNewTask+0x134>)
 8012e62:	651a      	str	r2, [r3, #80]	; 0x50
 8012e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e66:	4a0c      	ldr	r2, [pc, #48]	; (8012e98 <prvInitialiseNewTask+0x138>)
 8012e68:	655a      	str	r2, [r3, #84]	; 0x54
 8012e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e6c:	4a0b      	ldr	r2, [pc, #44]	; (8012e9c <prvInitialiseNewTask+0x13c>)
 8012e6e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012e70:	683a      	ldr	r2, [r7, #0]
 8012e72:	68f9      	ldr	r1, [r7, #12]
 8012e74:	69b8      	ldr	r0, [r7, #24]
 8012e76:	f000 ffad 	bl	8013dd4 <pxPortInitialiseStack>
 8012e7a:	4602      	mov	r2, r0
 8012e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e7e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d002      	beq.n	8012e8c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012e8c:	bf00      	nop
 8012e8e:	3720      	adds	r7, #32
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bd80      	pop	{r7, pc}
 8012e94:	20008f98 	.word	0x20008f98
 8012e98:	20009000 	.word	0x20009000
 8012e9c:	20009068 	.word	0x20009068

08012ea0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b082      	sub	sp, #8
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012ea8:	f001 f8a0 	bl	8013fec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012eac:	4b2a      	ldr	r3, [pc, #168]	; (8012f58 <prvAddNewTaskToReadyList+0xb8>)
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	3301      	adds	r3, #1
 8012eb2:	4a29      	ldr	r2, [pc, #164]	; (8012f58 <prvAddNewTaskToReadyList+0xb8>)
 8012eb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012eb6:	4b29      	ldr	r3, [pc, #164]	; (8012f5c <prvAddNewTaskToReadyList+0xbc>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d109      	bne.n	8012ed2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012ebe:	4a27      	ldr	r2, [pc, #156]	; (8012f5c <prvAddNewTaskToReadyList+0xbc>)
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012ec4:	4b24      	ldr	r3, [pc, #144]	; (8012f58 <prvAddNewTaskToReadyList+0xb8>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	2b01      	cmp	r3, #1
 8012eca:	d110      	bne.n	8012eee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012ecc:	f000 fc7e 	bl	80137cc <prvInitialiseTaskLists>
 8012ed0:	e00d      	b.n	8012eee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012ed2:	4b23      	ldr	r3, [pc, #140]	; (8012f60 <prvAddNewTaskToReadyList+0xc0>)
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d109      	bne.n	8012eee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012eda:	4b20      	ldr	r3, [pc, #128]	; (8012f5c <prvAddNewTaskToReadyList+0xbc>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ee4:	429a      	cmp	r2, r3
 8012ee6:	d802      	bhi.n	8012eee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012ee8:	4a1c      	ldr	r2, [pc, #112]	; (8012f5c <prvAddNewTaskToReadyList+0xbc>)
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012eee:	4b1d      	ldr	r3, [pc, #116]	; (8012f64 <prvAddNewTaskToReadyList+0xc4>)
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	3301      	adds	r3, #1
 8012ef4:	4a1b      	ldr	r2, [pc, #108]	; (8012f64 <prvAddNewTaskToReadyList+0xc4>)
 8012ef6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012efc:	2201      	movs	r2, #1
 8012efe:	409a      	lsls	r2, r3
 8012f00:	4b19      	ldr	r3, [pc, #100]	; (8012f68 <prvAddNewTaskToReadyList+0xc8>)
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	4313      	orrs	r3, r2
 8012f06:	4a18      	ldr	r2, [pc, #96]	; (8012f68 <prvAddNewTaskToReadyList+0xc8>)
 8012f08:	6013      	str	r3, [r2, #0]
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f0e:	4613      	mov	r3, r2
 8012f10:	009b      	lsls	r3, r3, #2
 8012f12:	4413      	add	r3, r2
 8012f14:	009b      	lsls	r3, r3, #2
 8012f16:	4a15      	ldr	r2, [pc, #84]	; (8012f6c <prvAddNewTaskToReadyList+0xcc>)
 8012f18:	441a      	add	r2, r3
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	3304      	adds	r3, #4
 8012f1e:	4619      	mov	r1, r3
 8012f20:	4610      	mov	r0, r2
 8012f22:	f7fe ffd6 	bl	8011ed2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012f26:	f001 f895 	bl	8014054 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012f2a:	4b0d      	ldr	r3, [pc, #52]	; (8012f60 <prvAddNewTaskToReadyList+0xc0>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d00e      	beq.n	8012f50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012f32:	4b0a      	ldr	r3, [pc, #40]	; (8012f5c <prvAddNewTaskToReadyList+0xbc>)
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d207      	bcs.n	8012f50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012f40:	4b0b      	ldr	r3, [pc, #44]	; (8012f70 <prvAddNewTaskToReadyList+0xd0>)
 8012f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f46:	601a      	str	r2, [r3, #0]
 8012f48:	f3bf 8f4f 	dsb	sy
 8012f4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012f50:	bf00      	nop
 8012f52:	3708      	adds	r7, #8
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd80      	pop	{r7, pc}
 8012f58:	20000f4c 	.word	0x20000f4c
 8012f5c:	20000e4c 	.word	0x20000e4c
 8012f60:	20000f58 	.word	0x20000f58
 8012f64:	20000f68 	.word	0x20000f68
 8012f68:	20000f54 	.word	0x20000f54
 8012f6c:	20000e50 	.word	0x20000e50
 8012f70:	e000ed04 	.word	0xe000ed04

08012f74 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b08a      	sub	sp, #40	; 0x28
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
 8012f7c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8012f7e:	2300      	movs	r3, #0
 8012f80:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d10c      	bne.n	8012fa2 <vTaskDelayUntil+0x2e>
	__asm volatile
 8012f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f8c:	b672      	cpsid	i
 8012f8e:	f383 8811 	msr	BASEPRI, r3
 8012f92:	f3bf 8f6f 	isb	sy
 8012f96:	f3bf 8f4f 	dsb	sy
 8012f9a:	b662      	cpsie	i
 8012f9c:	617b      	str	r3, [r7, #20]
}
 8012f9e:	bf00      	nop
 8012fa0:	e7fe      	b.n	8012fa0 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8012fa2:	683b      	ldr	r3, [r7, #0]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d10c      	bne.n	8012fc2 <vTaskDelayUntil+0x4e>
	__asm volatile
 8012fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fac:	b672      	cpsid	i
 8012fae:	f383 8811 	msr	BASEPRI, r3
 8012fb2:	f3bf 8f6f 	isb	sy
 8012fb6:	f3bf 8f4f 	dsb	sy
 8012fba:	b662      	cpsie	i
 8012fbc:	613b      	str	r3, [r7, #16]
}
 8012fbe:	bf00      	nop
 8012fc0:	e7fe      	b.n	8012fc0 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 8012fc2:	4b2b      	ldr	r3, [pc, #172]	; (8013070 <vTaskDelayUntil+0xfc>)
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d00c      	beq.n	8012fe4 <vTaskDelayUntil+0x70>
	__asm volatile
 8012fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fce:	b672      	cpsid	i
 8012fd0:	f383 8811 	msr	BASEPRI, r3
 8012fd4:	f3bf 8f6f 	isb	sy
 8012fd8:	f3bf 8f4f 	dsb	sy
 8012fdc:	b662      	cpsie	i
 8012fde:	60fb      	str	r3, [r7, #12]
}
 8012fe0:	bf00      	nop
 8012fe2:	e7fe      	b.n	8012fe2 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 8012fe4:	f000 f8ee 	bl	80131c4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8012fe8:	4b22      	ldr	r3, [pc, #136]	; (8013074 <vTaskDelayUntil+0x100>)
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	683a      	ldr	r2, [r7, #0]
 8012ff4:	4413      	add	r3, r2
 8012ff6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	6a3a      	ldr	r2, [r7, #32]
 8012ffe:	429a      	cmp	r2, r3
 8013000:	d20b      	bcs.n	801301a <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	69fa      	ldr	r2, [r7, #28]
 8013008:	429a      	cmp	r2, r3
 801300a:	d211      	bcs.n	8013030 <vTaskDelayUntil+0xbc>
 801300c:	69fa      	ldr	r2, [r7, #28]
 801300e:	6a3b      	ldr	r3, [r7, #32]
 8013010:	429a      	cmp	r2, r3
 8013012:	d90d      	bls.n	8013030 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8013014:	2301      	movs	r3, #1
 8013016:	627b      	str	r3, [r7, #36]	; 0x24
 8013018:	e00a      	b.n	8013030 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	69fa      	ldr	r2, [r7, #28]
 8013020:	429a      	cmp	r2, r3
 8013022:	d303      	bcc.n	801302c <vTaskDelayUntil+0xb8>
 8013024:	69fa      	ldr	r2, [r7, #28]
 8013026:	6a3b      	ldr	r3, [r7, #32]
 8013028:	429a      	cmp	r2, r3
 801302a:	d901      	bls.n	8013030 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 801302c:	2301      	movs	r3, #1
 801302e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	69fa      	ldr	r2, [r7, #28]
 8013034:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8013036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013038:	2b00      	cmp	r3, #0
 801303a:	d006      	beq.n	801304a <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801303c:	69fa      	ldr	r2, [r7, #28]
 801303e:	6a3b      	ldr	r3, [r7, #32]
 8013040:	1ad3      	subs	r3, r2, r3
 8013042:	2100      	movs	r1, #0
 8013044:	4618      	mov	r0, r3
 8013046:	f000 fe5f 	bl	8013d08 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801304a:	f000 f8c9 	bl	80131e0 <xTaskResumeAll>
 801304e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013050:	69bb      	ldr	r3, [r7, #24]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d107      	bne.n	8013066 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 8013056:	4b08      	ldr	r3, [pc, #32]	; (8013078 <vTaskDelayUntil+0x104>)
 8013058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801305c:	601a      	str	r2, [r3, #0]
 801305e:	f3bf 8f4f 	dsb	sy
 8013062:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013066:	bf00      	nop
 8013068:	3728      	adds	r7, #40	; 0x28
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}
 801306e:	bf00      	nop
 8013070:	20000f74 	.word	0x20000f74
 8013074:	20000f50 	.word	0x20000f50
 8013078:	e000ed04 	.word	0xe000ed04

0801307c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801307c:	b580      	push	{r7, lr}
 801307e:	b084      	sub	sp, #16
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013084:	2300      	movs	r3, #0
 8013086:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d019      	beq.n	80130c2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801308e:	4b14      	ldr	r3, [pc, #80]	; (80130e0 <vTaskDelay+0x64>)
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d00c      	beq.n	80130b0 <vTaskDelay+0x34>
	__asm volatile
 8013096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801309a:	b672      	cpsid	i
 801309c:	f383 8811 	msr	BASEPRI, r3
 80130a0:	f3bf 8f6f 	isb	sy
 80130a4:	f3bf 8f4f 	dsb	sy
 80130a8:	b662      	cpsie	i
 80130aa:	60bb      	str	r3, [r7, #8]
}
 80130ac:	bf00      	nop
 80130ae:	e7fe      	b.n	80130ae <vTaskDelay+0x32>
			vTaskSuspendAll();
 80130b0:	f000 f888 	bl	80131c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80130b4:	2100      	movs	r1, #0
 80130b6:	6878      	ldr	r0, [r7, #4]
 80130b8:	f000 fe26 	bl	8013d08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80130bc:	f000 f890 	bl	80131e0 <xTaskResumeAll>
 80130c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d107      	bne.n	80130d8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80130c8:	4b06      	ldr	r3, [pc, #24]	; (80130e4 <vTaskDelay+0x68>)
 80130ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130ce:	601a      	str	r2, [r3, #0]
 80130d0:	f3bf 8f4f 	dsb	sy
 80130d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80130d8:	bf00      	nop
 80130da:	3710      	adds	r7, #16
 80130dc:	46bd      	mov	sp, r7
 80130de:	bd80      	pop	{r7, pc}
 80130e0:	20000f74 	.word	0x20000f74
 80130e4:	e000ed04 	.word	0xe000ed04

080130e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b08a      	sub	sp, #40	; 0x28
 80130ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80130ee:	2300      	movs	r3, #0
 80130f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80130f2:	2300      	movs	r3, #0
 80130f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80130f6:	463a      	mov	r2, r7
 80130f8:	1d39      	adds	r1, r7, #4
 80130fa:	f107 0308 	add.w	r3, r7, #8
 80130fe:	4618      	mov	r0, r3
 8013100:	f7f0 feae 	bl	8003e60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013104:	6839      	ldr	r1, [r7, #0]
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	68ba      	ldr	r2, [r7, #8]
 801310a:	9202      	str	r2, [sp, #8]
 801310c:	9301      	str	r3, [sp, #4]
 801310e:	2300      	movs	r3, #0
 8013110:	9300      	str	r3, [sp, #0]
 8013112:	2300      	movs	r3, #0
 8013114:	460a      	mov	r2, r1
 8013116:	4923      	ldr	r1, [pc, #140]	; (80131a4 <vTaskStartScheduler+0xbc>)
 8013118:	4823      	ldr	r0, [pc, #140]	; (80131a8 <vTaskStartScheduler+0xc0>)
 801311a:	f7ff fd79 	bl	8012c10 <xTaskCreateStatic>
 801311e:	4603      	mov	r3, r0
 8013120:	4a22      	ldr	r2, [pc, #136]	; (80131ac <vTaskStartScheduler+0xc4>)
 8013122:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013124:	4b21      	ldr	r3, [pc, #132]	; (80131ac <vTaskStartScheduler+0xc4>)
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d002      	beq.n	8013132 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801312c:	2301      	movs	r3, #1
 801312e:	617b      	str	r3, [r7, #20]
 8013130:	e001      	b.n	8013136 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013132:	2300      	movs	r3, #0
 8013134:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013136:	697b      	ldr	r3, [r7, #20]
 8013138:	2b01      	cmp	r3, #1
 801313a:	d11d      	bne.n	8013178 <vTaskStartScheduler+0x90>
	__asm volatile
 801313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013140:	b672      	cpsid	i
 8013142:	f383 8811 	msr	BASEPRI, r3
 8013146:	f3bf 8f6f 	isb	sy
 801314a:	f3bf 8f4f 	dsb	sy
 801314e:	b662      	cpsie	i
 8013150:	613b      	str	r3, [r7, #16]
}
 8013152:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013154:	4b16      	ldr	r3, [pc, #88]	; (80131b0 <vTaskStartScheduler+0xc8>)
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	334c      	adds	r3, #76	; 0x4c
 801315a:	4a16      	ldr	r2, [pc, #88]	; (80131b4 <vTaskStartScheduler+0xcc>)
 801315c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801315e:	4b16      	ldr	r3, [pc, #88]	; (80131b8 <vTaskStartScheduler+0xd0>)
 8013160:	f04f 32ff 	mov.w	r2, #4294967295
 8013164:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013166:	4b15      	ldr	r3, [pc, #84]	; (80131bc <vTaskStartScheduler+0xd4>)
 8013168:	2201      	movs	r2, #1
 801316a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801316c:	4b14      	ldr	r3, [pc, #80]	; (80131c0 <vTaskStartScheduler+0xd8>)
 801316e:	2200      	movs	r2, #0
 8013170:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013172:	f000 febd 	bl	8013ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013176:	e010      	b.n	801319a <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013178:	697b      	ldr	r3, [r7, #20]
 801317a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801317e:	d10c      	bne.n	801319a <vTaskStartScheduler+0xb2>
	__asm volatile
 8013180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013184:	b672      	cpsid	i
 8013186:	f383 8811 	msr	BASEPRI, r3
 801318a:	f3bf 8f6f 	isb	sy
 801318e:	f3bf 8f4f 	dsb	sy
 8013192:	b662      	cpsie	i
 8013194:	60fb      	str	r3, [r7, #12]
}
 8013196:	bf00      	nop
 8013198:	e7fe      	b.n	8013198 <vTaskStartScheduler+0xb0>
}
 801319a:	bf00      	nop
 801319c:	3718      	adds	r7, #24
 801319e:	46bd      	mov	sp, r7
 80131a0:	bd80      	pop	{r7, pc}
 80131a2:	bf00      	nop
 80131a4:	0801bfe4 	.word	0x0801bfe4
 80131a8:	0801379d 	.word	0x0801379d
 80131ac:	20000f70 	.word	0x20000f70
 80131b0:	20000e4c 	.word	0x20000e4c
 80131b4:	20000070 	.word	0x20000070
 80131b8:	20000f6c 	.word	0x20000f6c
 80131bc:	20000f58 	.word	0x20000f58
 80131c0:	20000f50 	.word	0x20000f50

080131c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80131c4:	b480      	push	{r7}
 80131c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80131c8:	4b04      	ldr	r3, [pc, #16]	; (80131dc <vTaskSuspendAll+0x18>)
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	3301      	adds	r3, #1
 80131ce:	4a03      	ldr	r2, [pc, #12]	; (80131dc <vTaskSuspendAll+0x18>)
 80131d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80131d2:	bf00      	nop
 80131d4:	46bd      	mov	sp, r7
 80131d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131da:	4770      	bx	lr
 80131dc:	20000f74 	.word	0x20000f74

080131e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b084      	sub	sp, #16
 80131e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80131e6:	2300      	movs	r3, #0
 80131e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80131ea:	2300      	movs	r3, #0
 80131ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80131ee:	4b42      	ldr	r3, [pc, #264]	; (80132f8 <xTaskResumeAll+0x118>)
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d10c      	bne.n	8013210 <xTaskResumeAll+0x30>
	__asm volatile
 80131f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131fa:	b672      	cpsid	i
 80131fc:	f383 8811 	msr	BASEPRI, r3
 8013200:	f3bf 8f6f 	isb	sy
 8013204:	f3bf 8f4f 	dsb	sy
 8013208:	b662      	cpsie	i
 801320a:	603b      	str	r3, [r7, #0]
}
 801320c:	bf00      	nop
 801320e:	e7fe      	b.n	801320e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013210:	f000 feec 	bl	8013fec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013214:	4b38      	ldr	r3, [pc, #224]	; (80132f8 <xTaskResumeAll+0x118>)
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	3b01      	subs	r3, #1
 801321a:	4a37      	ldr	r2, [pc, #220]	; (80132f8 <xTaskResumeAll+0x118>)
 801321c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801321e:	4b36      	ldr	r3, [pc, #216]	; (80132f8 <xTaskResumeAll+0x118>)
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d161      	bne.n	80132ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013226:	4b35      	ldr	r3, [pc, #212]	; (80132fc <xTaskResumeAll+0x11c>)
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d05d      	beq.n	80132ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801322e:	e02e      	b.n	801328e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013230:	4b33      	ldr	r3, [pc, #204]	; (8013300 <xTaskResumeAll+0x120>)
 8013232:	68db      	ldr	r3, [r3, #12]
 8013234:	68db      	ldr	r3, [r3, #12]
 8013236:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	3318      	adds	r3, #24
 801323c:	4618      	mov	r0, r3
 801323e:	f7fe fea5 	bl	8011f8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	3304      	adds	r3, #4
 8013246:	4618      	mov	r0, r3
 8013248:	f7fe fea0 	bl	8011f8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013250:	2201      	movs	r2, #1
 8013252:	409a      	lsls	r2, r3
 8013254:	4b2b      	ldr	r3, [pc, #172]	; (8013304 <xTaskResumeAll+0x124>)
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	4313      	orrs	r3, r2
 801325a:	4a2a      	ldr	r2, [pc, #168]	; (8013304 <xTaskResumeAll+0x124>)
 801325c:	6013      	str	r3, [r2, #0]
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013262:	4613      	mov	r3, r2
 8013264:	009b      	lsls	r3, r3, #2
 8013266:	4413      	add	r3, r2
 8013268:	009b      	lsls	r3, r3, #2
 801326a:	4a27      	ldr	r2, [pc, #156]	; (8013308 <xTaskResumeAll+0x128>)
 801326c:	441a      	add	r2, r3
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	3304      	adds	r3, #4
 8013272:	4619      	mov	r1, r3
 8013274:	4610      	mov	r0, r2
 8013276:	f7fe fe2c 	bl	8011ed2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801327e:	4b23      	ldr	r3, [pc, #140]	; (801330c <xTaskResumeAll+0x12c>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013284:	429a      	cmp	r2, r3
 8013286:	d302      	bcc.n	801328e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8013288:	4b21      	ldr	r3, [pc, #132]	; (8013310 <xTaskResumeAll+0x130>)
 801328a:	2201      	movs	r2, #1
 801328c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801328e:	4b1c      	ldr	r3, [pc, #112]	; (8013300 <xTaskResumeAll+0x120>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d1cc      	bne.n	8013230 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d001      	beq.n	80132a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801329c:	f000 fb3a 	bl	8013914 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80132a0:	4b1c      	ldr	r3, [pc, #112]	; (8013314 <xTaskResumeAll+0x134>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d010      	beq.n	80132ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80132ac:	f000 f846 	bl	801333c <xTaskIncrementTick>
 80132b0:	4603      	mov	r3, r0
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d002      	beq.n	80132bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80132b6:	4b16      	ldr	r3, [pc, #88]	; (8013310 <xTaskResumeAll+0x130>)
 80132b8:	2201      	movs	r2, #1
 80132ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	3b01      	subs	r3, #1
 80132c0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d1f1      	bne.n	80132ac <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80132c8:	4b12      	ldr	r3, [pc, #72]	; (8013314 <xTaskResumeAll+0x134>)
 80132ca:	2200      	movs	r2, #0
 80132cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80132ce:	4b10      	ldr	r3, [pc, #64]	; (8013310 <xTaskResumeAll+0x130>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d009      	beq.n	80132ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80132d6:	2301      	movs	r3, #1
 80132d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80132da:	4b0f      	ldr	r3, [pc, #60]	; (8013318 <xTaskResumeAll+0x138>)
 80132dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132e0:	601a      	str	r2, [r3, #0]
 80132e2:	f3bf 8f4f 	dsb	sy
 80132e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80132ea:	f000 feb3 	bl	8014054 <vPortExitCritical>

	return xAlreadyYielded;
 80132ee:	68bb      	ldr	r3, [r7, #8]
}
 80132f0:	4618      	mov	r0, r3
 80132f2:	3710      	adds	r7, #16
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}
 80132f8:	20000f74 	.word	0x20000f74
 80132fc:	20000f4c 	.word	0x20000f4c
 8013300:	20000f0c 	.word	0x20000f0c
 8013304:	20000f54 	.word	0x20000f54
 8013308:	20000e50 	.word	0x20000e50
 801330c:	20000e4c 	.word	0x20000e4c
 8013310:	20000f60 	.word	0x20000f60
 8013314:	20000f5c 	.word	0x20000f5c
 8013318:	e000ed04 	.word	0xe000ed04

0801331c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801331c:	b480      	push	{r7}
 801331e:	b083      	sub	sp, #12
 8013320:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013322:	4b05      	ldr	r3, [pc, #20]	; (8013338 <xTaskGetTickCount+0x1c>)
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013328:	687b      	ldr	r3, [r7, #4]
}
 801332a:	4618      	mov	r0, r3
 801332c:	370c      	adds	r7, #12
 801332e:	46bd      	mov	sp, r7
 8013330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013334:	4770      	bx	lr
 8013336:	bf00      	nop
 8013338:	20000f50 	.word	0x20000f50

0801333c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b086      	sub	sp, #24
 8013340:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013342:	2300      	movs	r3, #0
 8013344:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013346:	4b4f      	ldr	r3, [pc, #316]	; (8013484 <xTaskIncrementTick+0x148>)
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	2b00      	cmp	r3, #0
 801334c:	f040 808a 	bne.w	8013464 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013350:	4b4d      	ldr	r3, [pc, #308]	; (8013488 <xTaskIncrementTick+0x14c>)
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	3301      	adds	r3, #1
 8013356:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013358:	4a4b      	ldr	r2, [pc, #300]	; (8013488 <xTaskIncrementTick+0x14c>)
 801335a:	693b      	ldr	r3, [r7, #16]
 801335c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801335e:	693b      	ldr	r3, [r7, #16]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d122      	bne.n	80133aa <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8013364:	4b49      	ldr	r3, [pc, #292]	; (801348c <xTaskIncrementTick+0x150>)
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d00c      	beq.n	8013388 <xTaskIncrementTick+0x4c>
	__asm volatile
 801336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013372:	b672      	cpsid	i
 8013374:	f383 8811 	msr	BASEPRI, r3
 8013378:	f3bf 8f6f 	isb	sy
 801337c:	f3bf 8f4f 	dsb	sy
 8013380:	b662      	cpsie	i
 8013382:	603b      	str	r3, [r7, #0]
}
 8013384:	bf00      	nop
 8013386:	e7fe      	b.n	8013386 <xTaskIncrementTick+0x4a>
 8013388:	4b40      	ldr	r3, [pc, #256]	; (801348c <xTaskIncrementTick+0x150>)
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	60fb      	str	r3, [r7, #12]
 801338e:	4b40      	ldr	r3, [pc, #256]	; (8013490 <xTaskIncrementTick+0x154>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	4a3e      	ldr	r2, [pc, #248]	; (801348c <xTaskIncrementTick+0x150>)
 8013394:	6013      	str	r3, [r2, #0]
 8013396:	4a3e      	ldr	r2, [pc, #248]	; (8013490 <xTaskIncrementTick+0x154>)
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	6013      	str	r3, [r2, #0]
 801339c:	4b3d      	ldr	r3, [pc, #244]	; (8013494 <xTaskIncrementTick+0x158>)
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	3301      	adds	r3, #1
 80133a2:	4a3c      	ldr	r2, [pc, #240]	; (8013494 <xTaskIncrementTick+0x158>)
 80133a4:	6013      	str	r3, [r2, #0]
 80133a6:	f000 fab5 	bl	8013914 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80133aa:	4b3b      	ldr	r3, [pc, #236]	; (8013498 <xTaskIncrementTick+0x15c>)
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	693a      	ldr	r2, [r7, #16]
 80133b0:	429a      	cmp	r2, r3
 80133b2:	d348      	bcc.n	8013446 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80133b4:	4b35      	ldr	r3, [pc, #212]	; (801348c <xTaskIncrementTick+0x150>)
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d104      	bne.n	80133c8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80133be:	4b36      	ldr	r3, [pc, #216]	; (8013498 <xTaskIncrementTick+0x15c>)
 80133c0:	f04f 32ff 	mov.w	r2, #4294967295
 80133c4:	601a      	str	r2, [r3, #0]
					break;
 80133c6:	e03e      	b.n	8013446 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80133c8:	4b30      	ldr	r3, [pc, #192]	; (801348c <xTaskIncrementTick+0x150>)
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	68db      	ldr	r3, [r3, #12]
 80133ce:	68db      	ldr	r3, [r3, #12]
 80133d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80133d2:	68bb      	ldr	r3, [r7, #8]
 80133d4:	685b      	ldr	r3, [r3, #4]
 80133d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80133d8:	693a      	ldr	r2, [r7, #16]
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	429a      	cmp	r2, r3
 80133de:	d203      	bcs.n	80133e8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80133e0:	4a2d      	ldr	r2, [pc, #180]	; (8013498 <xTaskIncrementTick+0x15c>)
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80133e6:	e02e      	b.n	8013446 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80133e8:	68bb      	ldr	r3, [r7, #8]
 80133ea:	3304      	adds	r3, #4
 80133ec:	4618      	mov	r0, r3
 80133ee:	f7fe fdcd 	bl	8011f8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80133f2:	68bb      	ldr	r3, [r7, #8]
 80133f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d004      	beq.n	8013404 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	3318      	adds	r3, #24
 80133fe:	4618      	mov	r0, r3
 8013400:	f7fe fdc4 	bl	8011f8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013404:	68bb      	ldr	r3, [r7, #8]
 8013406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013408:	2201      	movs	r2, #1
 801340a:	409a      	lsls	r2, r3
 801340c:	4b23      	ldr	r3, [pc, #140]	; (801349c <xTaskIncrementTick+0x160>)
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	4313      	orrs	r3, r2
 8013412:	4a22      	ldr	r2, [pc, #136]	; (801349c <xTaskIncrementTick+0x160>)
 8013414:	6013      	str	r3, [r2, #0]
 8013416:	68bb      	ldr	r3, [r7, #8]
 8013418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801341a:	4613      	mov	r3, r2
 801341c:	009b      	lsls	r3, r3, #2
 801341e:	4413      	add	r3, r2
 8013420:	009b      	lsls	r3, r3, #2
 8013422:	4a1f      	ldr	r2, [pc, #124]	; (80134a0 <xTaskIncrementTick+0x164>)
 8013424:	441a      	add	r2, r3
 8013426:	68bb      	ldr	r3, [r7, #8]
 8013428:	3304      	adds	r3, #4
 801342a:	4619      	mov	r1, r3
 801342c:	4610      	mov	r0, r2
 801342e:	f7fe fd50 	bl	8011ed2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013436:	4b1b      	ldr	r3, [pc, #108]	; (80134a4 <xTaskIncrementTick+0x168>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801343c:	429a      	cmp	r2, r3
 801343e:	d3b9      	bcc.n	80133b4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8013440:	2301      	movs	r3, #1
 8013442:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013444:	e7b6      	b.n	80133b4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013446:	4b17      	ldr	r3, [pc, #92]	; (80134a4 <xTaskIncrementTick+0x168>)
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801344c:	4914      	ldr	r1, [pc, #80]	; (80134a0 <xTaskIncrementTick+0x164>)
 801344e:	4613      	mov	r3, r2
 8013450:	009b      	lsls	r3, r3, #2
 8013452:	4413      	add	r3, r2
 8013454:	009b      	lsls	r3, r3, #2
 8013456:	440b      	add	r3, r1
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	2b01      	cmp	r3, #1
 801345c:	d907      	bls.n	801346e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 801345e:	2301      	movs	r3, #1
 8013460:	617b      	str	r3, [r7, #20]
 8013462:	e004      	b.n	801346e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013464:	4b10      	ldr	r3, [pc, #64]	; (80134a8 <xTaskIncrementTick+0x16c>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	3301      	adds	r3, #1
 801346a:	4a0f      	ldr	r2, [pc, #60]	; (80134a8 <xTaskIncrementTick+0x16c>)
 801346c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801346e:	4b0f      	ldr	r3, [pc, #60]	; (80134ac <xTaskIncrementTick+0x170>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d001      	beq.n	801347a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8013476:	2301      	movs	r3, #1
 8013478:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801347a:	697b      	ldr	r3, [r7, #20]
}
 801347c:	4618      	mov	r0, r3
 801347e:	3718      	adds	r7, #24
 8013480:	46bd      	mov	sp, r7
 8013482:	bd80      	pop	{r7, pc}
 8013484:	20000f74 	.word	0x20000f74
 8013488:	20000f50 	.word	0x20000f50
 801348c:	20000f04 	.word	0x20000f04
 8013490:	20000f08 	.word	0x20000f08
 8013494:	20000f64 	.word	0x20000f64
 8013498:	20000f6c 	.word	0x20000f6c
 801349c:	20000f54 	.word	0x20000f54
 80134a0:	20000e50 	.word	0x20000e50
 80134a4:	20000e4c 	.word	0x20000e4c
 80134a8:	20000f5c 	.word	0x20000f5c
 80134ac:	20000f60 	.word	0x20000f60

080134b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80134b0:	b480      	push	{r7}
 80134b2:	b087      	sub	sp, #28
 80134b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80134b6:	4b2a      	ldr	r3, [pc, #168]	; (8013560 <vTaskSwitchContext+0xb0>)
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d003      	beq.n	80134c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80134be:	4b29      	ldr	r3, [pc, #164]	; (8013564 <vTaskSwitchContext+0xb4>)
 80134c0:	2201      	movs	r2, #1
 80134c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80134c4:	e046      	b.n	8013554 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80134c6:	4b27      	ldr	r3, [pc, #156]	; (8013564 <vTaskSwitchContext+0xb4>)
 80134c8:	2200      	movs	r2, #0
 80134ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80134cc:	4b26      	ldr	r3, [pc, #152]	; (8013568 <vTaskSwitchContext+0xb8>)
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	fab3 f383 	clz	r3, r3
 80134d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80134da:	7afb      	ldrb	r3, [r7, #11]
 80134dc:	f1c3 031f 	rsb	r3, r3, #31
 80134e0:	617b      	str	r3, [r7, #20]
 80134e2:	4922      	ldr	r1, [pc, #136]	; (801356c <vTaskSwitchContext+0xbc>)
 80134e4:	697a      	ldr	r2, [r7, #20]
 80134e6:	4613      	mov	r3, r2
 80134e8:	009b      	lsls	r3, r3, #2
 80134ea:	4413      	add	r3, r2
 80134ec:	009b      	lsls	r3, r3, #2
 80134ee:	440b      	add	r3, r1
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d10c      	bne.n	8013510 <vTaskSwitchContext+0x60>
	__asm volatile
 80134f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134fa:	b672      	cpsid	i
 80134fc:	f383 8811 	msr	BASEPRI, r3
 8013500:	f3bf 8f6f 	isb	sy
 8013504:	f3bf 8f4f 	dsb	sy
 8013508:	b662      	cpsie	i
 801350a:	607b      	str	r3, [r7, #4]
}
 801350c:	bf00      	nop
 801350e:	e7fe      	b.n	801350e <vTaskSwitchContext+0x5e>
 8013510:	697a      	ldr	r2, [r7, #20]
 8013512:	4613      	mov	r3, r2
 8013514:	009b      	lsls	r3, r3, #2
 8013516:	4413      	add	r3, r2
 8013518:	009b      	lsls	r3, r3, #2
 801351a:	4a14      	ldr	r2, [pc, #80]	; (801356c <vTaskSwitchContext+0xbc>)
 801351c:	4413      	add	r3, r2
 801351e:	613b      	str	r3, [r7, #16]
 8013520:	693b      	ldr	r3, [r7, #16]
 8013522:	685b      	ldr	r3, [r3, #4]
 8013524:	685a      	ldr	r2, [r3, #4]
 8013526:	693b      	ldr	r3, [r7, #16]
 8013528:	605a      	str	r2, [r3, #4]
 801352a:	693b      	ldr	r3, [r7, #16]
 801352c:	685a      	ldr	r2, [r3, #4]
 801352e:	693b      	ldr	r3, [r7, #16]
 8013530:	3308      	adds	r3, #8
 8013532:	429a      	cmp	r2, r3
 8013534:	d104      	bne.n	8013540 <vTaskSwitchContext+0x90>
 8013536:	693b      	ldr	r3, [r7, #16]
 8013538:	685b      	ldr	r3, [r3, #4]
 801353a:	685a      	ldr	r2, [r3, #4]
 801353c:	693b      	ldr	r3, [r7, #16]
 801353e:	605a      	str	r2, [r3, #4]
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	685b      	ldr	r3, [r3, #4]
 8013544:	68db      	ldr	r3, [r3, #12]
 8013546:	4a0a      	ldr	r2, [pc, #40]	; (8013570 <vTaskSwitchContext+0xc0>)
 8013548:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801354a:	4b09      	ldr	r3, [pc, #36]	; (8013570 <vTaskSwitchContext+0xc0>)
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	334c      	adds	r3, #76	; 0x4c
 8013550:	4a08      	ldr	r2, [pc, #32]	; (8013574 <vTaskSwitchContext+0xc4>)
 8013552:	6013      	str	r3, [r2, #0]
}
 8013554:	bf00      	nop
 8013556:	371c      	adds	r7, #28
 8013558:	46bd      	mov	sp, r7
 801355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355e:	4770      	bx	lr
 8013560:	20000f74 	.word	0x20000f74
 8013564:	20000f60 	.word	0x20000f60
 8013568:	20000f54 	.word	0x20000f54
 801356c:	20000e50 	.word	0x20000e50
 8013570:	20000e4c 	.word	0x20000e4c
 8013574:	20000070 	.word	0x20000070

08013578 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b084      	sub	sp, #16
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
 8013580:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d10c      	bne.n	80135a2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8013588:	f04f 0350 	mov.w	r3, #80	; 0x50
 801358c:	b672      	cpsid	i
 801358e:	f383 8811 	msr	BASEPRI, r3
 8013592:	f3bf 8f6f 	isb	sy
 8013596:	f3bf 8f4f 	dsb	sy
 801359a:	b662      	cpsie	i
 801359c:	60fb      	str	r3, [r7, #12]
}
 801359e:	bf00      	nop
 80135a0:	e7fe      	b.n	80135a0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80135a2:	4b07      	ldr	r3, [pc, #28]	; (80135c0 <vTaskPlaceOnEventList+0x48>)
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	3318      	adds	r3, #24
 80135a8:	4619      	mov	r1, r3
 80135aa:	6878      	ldr	r0, [r7, #4]
 80135ac:	f7fe fcb5 	bl	8011f1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80135b0:	2101      	movs	r1, #1
 80135b2:	6838      	ldr	r0, [r7, #0]
 80135b4:	f000 fba8 	bl	8013d08 <prvAddCurrentTaskToDelayedList>
}
 80135b8:	bf00      	nop
 80135ba:	3710      	adds	r7, #16
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}
 80135c0:	20000e4c 	.word	0x20000e4c

080135c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b086      	sub	sp, #24
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	68db      	ldr	r3, [r3, #12]
 80135d0:	68db      	ldr	r3, [r3, #12]
 80135d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80135d4:	693b      	ldr	r3, [r7, #16]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d10c      	bne.n	80135f4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80135da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135de:	b672      	cpsid	i
 80135e0:	f383 8811 	msr	BASEPRI, r3
 80135e4:	f3bf 8f6f 	isb	sy
 80135e8:	f3bf 8f4f 	dsb	sy
 80135ec:	b662      	cpsie	i
 80135ee:	60fb      	str	r3, [r7, #12]
}
 80135f0:	bf00      	nop
 80135f2:	e7fe      	b.n	80135f2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80135f4:	693b      	ldr	r3, [r7, #16]
 80135f6:	3318      	adds	r3, #24
 80135f8:	4618      	mov	r0, r3
 80135fa:	f7fe fcc7 	bl	8011f8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80135fe:	4b1d      	ldr	r3, [pc, #116]	; (8013674 <xTaskRemoveFromEventList+0xb0>)
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d11c      	bne.n	8013640 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013606:	693b      	ldr	r3, [r7, #16]
 8013608:	3304      	adds	r3, #4
 801360a:	4618      	mov	r0, r3
 801360c:	f7fe fcbe 	bl	8011f8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013610:	693b      	ldr	r3, [r7, #16]
 8013612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013614:	2201      	movs	r2, #1
 8013616:	409a      	lsls	r2, r3
 8013618:	4b17      	ldr	r3, [pc, #92]	; (8013678 <xTaskRemoveFromEventList+0xb4>)
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	4313      	orrs	r3, r2
 801361e:	4a16      	ldr	r2, [pc, #88]	; (8013678 <xTaskRemoveFromEventList+0xb4>)
 8013620:	6013      	str	r3, [r2, #0]
 8013622:	693b      	ldr	r3, [r7, #16]
 8013624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013626:	4613      	mov	r3, r2
 8013628:	009b      	lsls	r3, r3, #2
 801362a:	4413      	add	r3, r2
 801362c:	009b      	lsls	r3, r3, #2
 801362e:	4a13      	ldr	r2, [pc, #76]	; (801367c <xTaskRemoveFromEventList+0xb8>)
 8013630:	441a      	add	r2, r3
 8013632:	693b      	ldr	r3, [r7, #16]
 8013634:	3304      	adds	r3, #4
 8013636:	4619      	mov	r1, r3
 8013638:	4610      	mov	r0, r2
 801363a:	f7fe fc4a 	bl	8011ed2 <vListInsertEnd>
 801363e:	e005      	b.n	801364c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013640:	693b      	ldr	r3, [r7, #16]
 8013642:	3318      	adds	r3, #24
 8013644:	4619      	mov	r1, r3
 8013646:	480e      	ldr	r0, [pc, #56]	; (8013680 <xTaskRemoveFromEventList+0xbc>)
 8013648:	f7fe fc43 	bl	8011ed2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801364c:	693b      	ldr	r3, [r7, #16]
 801364e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013650:	4b0c      	ldr	r3, [pc, #48]	; (8013684 <xTaskRemoveFromEventList+0xc0>)
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013656:	429a      	cmp	r2, r3
 8013658:	d905      	bls.n	8013666 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801365a:	2301      	movs	r3, #1
 801365c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801365e:	4b0a      	ldr	r3, [pc, #40]	; (8013688 <xTaskRemoveFromEventList+0xc4>)
 8013660:	2201      	movs	r2, #1
 8013662:	601a      	str	r2, [r3, #0]
 8013664:	e001      	b.n	801366a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8013666:	2300      	movs	r3, #0
 8013668:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801366a:	697b      	ldr	r3, [r7, #20]
}
 801366c:	4618      	mov	r0, r3
 801366e:	3718      	adds	r7, #24
 8013670:	46bd      	mov	sp, r7
 8013672:	bd80      	pop	{r7, pc}
 8013674:	20000f74 	.word	0x20000f74
 8013678:	20000f54 	.word	0x20000f54
 801367c:	20000e50 	.word	0x20000e50
 8013680:	20000f0c 	.word	0x20000f0c
 8013684:	20000e4c 	.word	0x20000e4c
 8013688:	20000f60 	.word	0x20000f60

0801368c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801368c:	b480      	push	{r7}
 801368e:	b083      	sub	sp, #12
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013694:	4b06      	ldr	r3, [pc, #24]	; (80136b0 <vTaskInternalSetTimeOutState+0x24>)
 8013696:	681a      	ldr	r2, [r3, #0]
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801369c:	4b05      	ldr	r3, [pc, #20]	; (80136b4 <vTaskInternalSetTimeOutState+0x28>)
 801369e:	681a      	ldr	r2, [r3, #0]
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	605a      	str	r2, [r3, #4]
}
 80136a4:	bf00      	nop
 80136a6:	370c      	adds	r7, #12
 80136a8:	46bd      	mov	sp, r7
 80136aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ae:	4770      	bx	lr
 80136b0:	20000f64 	.word	0x20000f64
 80136b4:	20000f50 	.word	0x20000f50

080136b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b088      	sub	sp, #32
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
 80136c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d10c      	bne.n	80136e2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80136c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136cc:	b672      	cpsid	i
 80136ce:	f383 8811 	msr	BASEPRI, r3
 80136d2:	f3bf 8f6f 	isb	sy
 80136d6:	f3bf 8f4f 	dsb	sy
 80136da:	b662      	cpsie	i
 80136dc:	613b      	str	r3, [r7, #16]
}
 80136de:	bf00      	nop
 80136e0:	e7fe      	b.n	80136e0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80136e2:	683b      	ldr	r3, [r7, #0]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d10c      	bne.n	8013702 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80136e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136ec:	b672      	cpsid	i
 80136ee:	f383 8811 	msr	BASEPRI, r3
 80136f2:	f3bf 8f6f 	isb	sy
 80136f6:	f3bf 8f4f 	dsb	sy
 80136fa:	b662      	cpsie	i
 80136fc:	60fb      	str	r3, [r7, #12]
}
 80136fe:	bf00      	nop
 8013700:	e7fe      	b.n	8013700 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8013702:	f000 fc73 	bl	8013fec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013706:	4b1d      	ldr	r3, [pc, #116]	; (801377c <xTaskCheckForTimeOut+0xc4>)
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	69ba      	ldr	r2, [r7, #24]
 8013712:	1ad3      	subs	r3, r2, r3
 8013714:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801371e:	d102      	bne.n	8013726 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013720:	2300      	movs	r3, #0
 8013722:	61fb      	str	r3, [r7, #28]
 8013724:	e023      	b.n	801376e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	681a      	ldr	r2, [r3, #0]
 801372a:	4b15      	ldr	r3, [pc, #84]	; (8013780 <xTaskCheckForTimeOut+0xc8>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	429a      	cmp	r2, r3
 8013730:	d007      	beq.n	8013742 <xTaskCheckForTimeOut+0x8a>
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	685b      	ldr	r3, [r3, #4]
 8013736:	69ba      	ldr	r2, [r7, #24]
 8013738:	429a      	cmp	r2, r3
 801373a:	d302      	bcc.n	8013742 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801373c:	2301      	movs	r3, #1
 801373e:	61fb      	str	r3, [r7, #28]
 8013740:	e015      	b.n	801376e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	697a      	ldr	r2, [r7, #20]
 8013748:	429a      	cmp	r2, r3
 801374a:	d20b      	bcs.n	8013764 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	681a      	ldr	r2, [r3, #0]
 8013750:	697b      	ldr	r3, [r7, #20]
 8013752:	1ad2      	subs	r2, r2, r3
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013758:	6878      	ldr	r0, [r7, #4]
 801375a:	f7ff ff97 	bl	801368c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801375e:	2300      	movs	r3, #0
 8013760:	61fb      	str	r3, [r7, #28]
 8013762:	e004      	b.n	801376e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8013764:	683b      	ldr	r3, [r7, #0]
 8013766:	2200      	movs	r2, #0
 8013768:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801376a:	2301      	movs	r3, #1
 801376c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801376e:	f000 fc71 	bl	8014054 <vPortExitCritical>

	return xReturn;
 8013772:	69fb      	ldr	r3, [r7, #28]
}
 8013774:	4618      	mov	r0, r3
 8013776:	3720      	adds	r7, #32
 8013778:	46bd      	mov	sp, r7
 801377a:	bd80      	pop	{r7, pc}
 801377c:	20000f50 	.word	0x20000f50
 8013780:	20000f64 	.word	0x20000f64

08013784 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013784:	b480      	push	{r7}
 8013786:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013788:	4b03      	ldr	r3, [pc, #12]	; (8013798 <vTaskMissedYield+0x14>)
 801378a:	2201      	movs	r2, #1
 801378c:	601a      	str	r2, [r3, #0]
}
 801378e:	bf00      	nop
 8013790:	46bd      	mov	sp, r7
 8013792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013796:	4770      	bx	lr
 8013798:	20000f60 	.word	0x20000f60

0801379c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b082      	sub	sp, #8
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80137a4:	f000 f852 	bl	801384c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80137a8:	4b06      	ldr	r3, [pc, #24]	; (80137c4 <prvIdleTask+0x28>)
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	2b01      	cmp	r3, #1
 80137ae:	d9f9      	bls.n	80137a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80137b0:	4b05      	ldr	r3, [pc, #20]	; (80137c8 <prvIdleTask+0x2c>)
 80137b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137b6:	601a      	str	r2, [r3, #0]
 80137b8:	f3bf 8f4f 	dsb	sy
 80137bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80137c0:	e7f0      	b.n	80137a4 <prvIdleTask+0x8>
 80137c2:	bf00      	nop
 80137c4:	20000e50 	.word	0x20000e50
 80137c8:	e000ed04 	.word	0xe000ed04

080137cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b082      	sub	sp, #8
 80137d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80137d2:	2300      	movs	r3, #0
 80137d4:	607b      	str	r3, [r7, #4]
 80137d6:	e00c      	b.n	80137f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80137d8:	687a      	ldr	r2, [r7, #4]
 80137da:	4613      	mov	r3, r2
 80137dc:	009b      	lsls	r3, r3, #2
 80137de:	4413      	add	r3, r2
 80137e0:	009b      	lsls	r3, r3, #2
 80137e2:	4a12      	ldr	r2, [pc, #72]	; (801382c <prvInitialiseTaskLists+0x60>)
 80137e4:	4413      	add	r3, r2
 80137e6:	4618      	mov	r0, r3
 80137e8:	f7fe fb46 	bl	8011e78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	3301      	adds	r3, #1
 80137f0:	607b      	str	r3, [r7, #4]
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	2b06      	cmp	r3, #6
 80137f6:	d9ef      	bls.n	80137d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80137f8:	480d      	ldr	r0, [pc, #52]	; (8013830 <prvInitialiseTaskLists+0x64>)
 80137fa:	f7fe fb3d 	bl	8011e78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80137fe:	480d      	ldr	r0, [pc, #52]	; (8013834 <prvInitialiseTaskLists+0x68>)
 8013800:	f7fe fb3a 	bl	8011e78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013804:	480c      	ldr	r0, [pc, #48]	; (8013838 <prvInitialiseTaskLists+0x6c>)
 8013806:	f7fe fb37 	bl	8011e78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801380a:	480c      	ldr	r0, [pc, #48]	; (801383c <prvInitialiseTaskLists+0x70>)
 801380c:	f7fe fb34 	bl	8011e78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013810:	480b      	ldr	r0, [pc, #44]	; (8013840 <prvInitialiseTaskLists+0x74>)
 8013812:	f7fe fb31 	bl	8011e78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013816:	4b0b      	ldr	r3, [pc, #44]	; (8013844 <prvInitialiseTaskLists+0x78>)
 8013818:	4a05      	ldr	r2, [pc, #20]	; (8013830 <prvInitialiseTaskLists+0x64>)
 801381a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801381c:	4b0a      	ldr	r3, [pc, #40]	; (8013848 <prvInitialiseTaskLists+0x7c>)
 801381e:	4a05      	ldr	r2, [pc, #20]	; (8013834 <prvInitialiseTaskLists+0x68>)
 8013820:	601a      	str	r2, [r3, #0]
}
 8013822:	bf00      	nop
 8013824:	3708      	adds	r7, #8
 8013826:	46bd      	mov	sp, r7
 8013828:	bd80      	pop	{r7, pc}
 801382a:	bf00      	nop
 801382c:	20000e50 	.word	0x20000e50
 8013830:	20000edc 	.word	0x20000edc
 8013834:	20000ef0 	.word	0x20000ef0
 8013838:	20000f0c 	.word	0x20000f0c
 801383c:	20000f20 	.word	0x20000f20
 8013840:	20000f38 	.word	0x20000f38
 8013844:	20000f04 	.word	0x20000f04
 8013848:	20000f08 	.word	0x20000f08

0801384c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b082      	sub	sp, #8
 8013850:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013852:	e019      	b.n	8013888 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013854:	f000 fbca 	bl	8013fec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013858:	4b10      	ldr	r3, [pc, #64]	; (801389c <prvCheckTasksWaitingTermination+0x50>)
 801385a:	68db      	ldr	r3, [r3, #12]
 801385c:	68db      	ldr	r3, [r3, #12]
 801385e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	3304      	adds	r3, #4
 8013864:	4618      	mov	r0, r3
 8013866:	f7fe fb91 	bl	8011f8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801386a:	4b0d      	ldr	r3, [pc, #52]	; (80138a0 <prvCheckTasksWaitingTermination+0x54>)
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	3b01      	subs	r3, #1
 8013870:	4a0b      	ldr	r2, [pc, #44]	; (80138a0 <prvCheckTasksWaitingTermination+0x54>)
 8013872:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013874:	4b0b      	ldr	r3, [pc, #44]	; (80138a4 <prvCheckTasksWaitingTermination+0x58>)
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	3b01      	subs	r3, #1
 801387a:	4a0a      	ldr	r2, [pc, #40]	; (80138a4 <prvCheckTasksWaitingTermination+0x58>)
 801387c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801387e:	f000 fbe9 	bl	8014054 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013882:	6878      	ldr	r0, [r7, #4]
 8013884:	f000 f810 	bl	80138a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013888:	4b06      	ldr	r3, [pc, #24]	; (80138a4 <prvCheckTasksWaitingTermination+0x58>)
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d1e1      	bne.n	8013854 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013890:	bf00      	nop
 8013892:	bf00      	nop
 8013894:	3708      	adds	r7, #8
 8013896:	46bd      	mov	sp, r7
 8013898:	bd80      	pop	{r7, pc}
 801389a:	bf00      	nop
 801389c:	20000f20 	.word	0x20000f20
 80138a0:	20000f4c 	.word	0x20000f4c
 80138a4:	20000f34 	.word	0x20000f34

080138a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b084      	sub	sp, #16
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	334c      	adds	r3, #76	; 0x4c
 80138b4:	4618      	mov	r0, r3
 80138b6:	f001 fea1 	bl	80155fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d108      	bne.n	80138d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138c8:	4618      	mov	r0, r3
 80138ca:	f000 fd85 	bl	80143d8 <vPortFree>
				vPortFree( pxTCB );
 80138ce:	6878      	ldr	r0, [r7, #4]
 80138d0:	f000 fd82 	bl	80143d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80138d4:	e01a      	b.n	801390c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80138dc:	2b01      	cmp	r3, #1
 80138de:	d103      	bne.n	80138e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f000 fd79 	bl	80143d8 <vPortFree>
	}
 80138e6:	e011      	b.n	801390c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80138ee:	2b02      	cmp	r3, #2
 80138f0:	d00c      	beq.n	801390c <prvDeleteTCB+0x64>
	__asm volatile
 80138f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138f6:	b672      	cpsid	i
 80138f8:	f383 8811 	msr	BASEPRI, r3
 80138fc:	f3bf 8f6f 	isb	sy
 8013900:	f3bf 8f4f 	dsb	sy
 8013904:	b662      	cpsie	i
 8013906:	60fb      	str	r3, [r7, #12]
}
 8013908:	bf00      	nop
 801390a:	e7fe      	b.n	801390a <prvDeleteTCB+0x62>
	}
 801390c:	bf00      	nop
 801390e:	3710      	adds	r7, #16
 8013910:	46bd      	mov	sp, r7
 8013912:	bd80      	pop	{r7, pc}

08013914 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013914:	b480      	push	{r7}
 8013916:	b083      	sub	sp, #12
 8013918:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801391a:	4b0c      	ldr	r3, [pc, #48]	; (801394c <prvResetNextTaskUnblockTime+0x38>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d104      	bne.n	801392e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013924:	4b0a      	ldr	r3, [pc, #40]	; (8013950 <prvResetNextTaskUnblockTime+0x3c>)
 8013926:	f04f 32ff 	mov.w	r2, #4294967295
 801392a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801392c:	e008      	b.n	8013940 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801392e:	4b07      	ldr	r3, [pc, #28]	; (801394c <prvResetNextTaskUnblockTime+0x38>)
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	68db      	ldr	r3, [r3, #12]
 8013934:	68db      	ldr	r3, [r3, #12]
 8013936:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	685b      	ldr	r3, [r3, #4]
 801393c:	4a04      	ldr	r2, [pc, #16]	; (8013950 <prvResetNextTaskUnblockTime+0x3c>)
 801393e:	6013      	str	r3, [r2, #0]
}
 8013940:	bf00      	nop
 8013942:	370c      	adds	r7, #12
 8013944:	46bd      	mov	sp, r7
 8013946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394a:	4770      	bx	lr
 801394c:	20000f04 	.word	0x20000f04
 8013950:	20000f6c 	.word	0x20000f6c

08013954 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013954:	b480      	push	{r7}
 8013956:	b083      	sub	sp, #12
 8013958:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801395a:	4b0b      	ldr	r3, [pc, #44]	; (8013988 <xTaskGetSchedulerState+0x34>)
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d102      	bne.n	8013968 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013962:	2301      	movs	r3, #1
 8013964:	607b      	str	r3, [r7, #4]
 8013966:	e008      	b.n	801397a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013968:	4b08      	ldr	r3, [pc, #32]	; (801398c <xTaskGetSchedulerState+0x38>)
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d102      	bne.n	8013976 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013970:	2302      	movs	r3, #2
 8013972:	607b      	str	r3, [r7, #4]
 8013974:	e001      	b.n	801397a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013976:	2300      	movs	r3, #0
 8013978:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801397a:	687b      	ldr	r3, [r7, #4]
	}
 801397c:	4618      	mov	r0, r3
 801397e:	370c      	adds	r7, #12
 8013980:	46bd      	mov	sp, r7
 8013982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013986:	4770      	bx	lr
 8013988:	20000f58 	.word	0x20000f58
 801398c:	20000f74 	.word	0x20000f74

08013990 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013990:	b580      	push	{r7, lr}
 8013992:	b084      	sub	sp, #16
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801399c:	2300      	movs	r3, #0
 801399e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d069      	beq.n	8013a7a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80139a6:	68bb      	ldr	r3, [r7, #8]
 80139a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139aa:	4b36      	ldr	r3, [pc, #216]	; (8013a84 <xTaskPriorityInherit+0xf4>)
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139b0:	429a      	cmp	r2, r3
 80139b2:	d259      	bcs.n	8013a68 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80139b4:	68bb      	ldr	r3, [r7, #8]
 80139b6:	699b      	ldr	r3, [r3, #24]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	db06      	blt.n	80139ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139bc:	4b31      	ldr	r3, [pc, #196]	; (8013a84 <xTaskPriorityInherit+0xf4>)
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139c2:	f1c3 0207 	rsb	r2, r3, #7
 80139c6:	68bb      	ldr	r3, [r7, #8]
 80139c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80139ca:	68bb      	ldr	r3, [r7, #8]
 80139cc:	6959      	ldr	r1, [r3, #20]
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139d2:	4613      	mov	r3, r2
 80139d4:	009b      	lsls	r3, r3, #2
 80139d6:	4413      	add	r3, r2
 80139d8:	009b      	lsls	r3, r3, #2
 80139da:	4a2b      	ldr	r2, [pc, #172]	; (8013a88 <xTaskPriorityInherit+0xf8>)
 80139dc:	4413      	add	r3, r2
 80139de:	4299      	cmp	r1, r3
 80139e0:	d13a      	bne.n	8013a58 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80139e2:	68bb      	ldr	r3, [r7, #8]
 80139e4:	3304      	adds	r3, #4
 80139e6:	4618      	mov	r0, r3
 80139e8:	f7fe fad0 	bl	8011f8c <uxListRemove>
 80139ec:	4603      	mov	r3, r0
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d115      	bne.n	8013a1e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139f6:	4924      	ldr	r1, [pc, #144]	; (8013a88 <xTaskPriorityInherit+0xf8>)
 80139f8:	4613      	mov	r3, r2
 80139fa:	009b      	lsls	r3, r3, #2
 80139fc:	4413      	add	r3, r2
 80139fe:	009b      	lsls	r3, r3, #2
 8013a00:	440b      	add	r3, r1
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d10a      	bne.n	8013a1e <xTaskPriorityInherit+0x8e>
 8013a08:	68bb      	ldr	r3, [r7, #8]
 8013a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a0c:	2201      	movs	r2, #1
 8013a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8013a12:	43da      	mvns	r2, r3
 8013a14:	4b1d      	ldr	r3, [pc, #116]	; (8013a8c <xTaskPriorityInherit+0xfc>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	4013      	ands	r3, r2
 8013a1a:	4a1c      	ldr	r2, [pc, #112]	; (8013a8c <xTaskPriorityInherit+0xfc>)
 8013a1c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013a1e:	4b19      	ldr	r3, [pc, #100]	; (8013a84 <xTaskPriorityInherit+0xf4>)
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a24:	68bb      	ldr	r3, [r7, #8]
 8013a26:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013a28:	68bb      	ldr	r3, [r7, #8]
 8013a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a2c:	2201      	movs	r2, #1
 8013a2e:	409a      	lsls	r2, r3
 8013a30:	4b16      	ldr	r3, [pc, #88]	; (8013a8c <xTaskPriorityInherit+0xfc>)
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	4313      	orrs	r3, r2
 8013a36:	4a15      	ldr	r2, [pc, #84]	; (8013a8c <xTaskPriorityInherit+0xfc>)
 8013a38:	6013      	str	r3, [r2, #0]
 8013a3a:	68bb      	ldr	r3, [r7, #8]
 8013a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a3e:	4613      	mov	r3, r2
 8013a40:	009b      	lsls	r3, r3, #2
 8013a42:	4413      	add	r3, r2
 8013a44:	009b      	lsls	r3, r3, #2
 8013a46:	4a10      	ldr	r2, [pc, #64]	; (8013a88 <xTaskPriorityInherit+0xf8>)
 8013a48:	441a      	add	r2, r3
 8013a4a:	68bb      	ldr	r3, [r7, #8]
 8013a4c:	3304      	adds	r3, #4
 8013a4e:	4619      	mov	r1, r3
 8013a50:	4610      	mov	r0, r2
 8013a52:	f7fe fa3e 	bl	8011ed2 <vListInsertEnd>
 8013a56:	e004      	b.n	8013a62 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013a58:	4b0a      	ldr	r3, [pc, #40]	; (8013a84 <xTaskPriorityInherit+0xf4>)
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a5e:	68bb      	ldr	r3, [r7, #8]
 8013a60:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013a62:	2301      	movs	r3, #1
 8013a64:	60fb      	str	r3, [r7, #12]
 8013a66:	e008      	b.n	8013a7a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013a68:	68bb      	ldr	r3, [r7, #8]
 8013a6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013a6c:	4b05      	ldr	r3, [pc, #20]	; (8013a84 <xTaskPriorityInherit+0xf4>)
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a72:	429a      	cmp	r2, r3
 8013a74:	d201      	bcs.n	8013a7a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013a76:	2301      	movs	r3, #1
 8013a78:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013a7a:	68fb      	ldr	r3, [r7, #12]
	}
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	3710      	adds	r7, #16
 8013a80:	46bd      	mov	sp, r7
 8013a82:	bd80      	pop	{r7, pc}
 8013a84:	20000e4c 	.word	0x20000e4c
 8013a88:	20000e50 	.word	0x20000e50
 8013a8c:	20000f54 	.word	0x20000f54

08013a90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b086      	sub	sp, #24
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d072      	beq.n	8013b8c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013aa6:	4b3c      	ldr	r3, [pc, #240]	; (8013b98 <xTaskPriorityDisinherit+0x108>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	693a      	ldr	r2, [r7, #16]
 8013aac:	429a      	cmp	r2, r3
 8013aae:	d00c      	beq.n	8013aca <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8013ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ab4:	b672      	cpsid	i
 8013ab6:	f383 8811 	msr	BASEPRI, r3
 8013aba:	f3bf 8f6f 	isb	sy
 8013abe:	f3bf 8f4f 	dsb	sy
 8013ac2:	b662      	cpsie	i
 8013ac4:	60fb      	str	r3, [r7, #12]
}
 8013ac6:	bf00      	nop
 8013ac8:	e7fe      	b.n	8013ac8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8013aca:	693b      	ldr	r3, [r7, #16]
 8013acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d10c      	bne.n	8013aec <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8013ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ad6:	b672      	cpsid	i
 8013ad8:	f383 8811 	msr	BASEPRI, r3
 8013adc:	f3bf 8f6f 	isb	sy
 8013ae0:	f3bf 8f4f 	dsb	sy
 8013ae4:	b662      	cpsie	i
 8013ae6:	60bb      	str	r3, [r7, #8]
}
 8013ae8:	bf00      	nop
 8013aea:	e7fe      	b.n	8013aea <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8013aec:	693b      	ldr	r3, [r7, #16]
 8013aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013af0:	1e5a      	subs	r2, r3, #1
 8013af2:	693b      	ldr	r3, [r7, #16]
 8013af4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013af6:	693b      	ldr	r3, [r7, #16]
 8013af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013afa:	693b      	ldr	r3, [r7, #16]
 8013afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013afe:	429a      	cmp	r2, r3
 8013b00:	d044      	beq.n	8013b8c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013b02:	693b      	ldr	r3, [r7, #16]
 8013b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d140      	bne.n	8013b8c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013b0a:	693b      	ldr	r3, [r7, #16]
 8013b0c:	3304      	adds	r3, #4
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f7fe fa3c 	bl	8011f8c <uxListRemove>
 8013b14:	4603      	mov	r3, r0
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d115      	bne.n	8013b46 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013b1a:	693b      	ldr	r3, [r7, #16]
 8013b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b1e:	491f      	ldr	r1, [pc, #124]	; (8013b9c <xTaskPriorityDisinherit+0x10c>)
 8013b20:	4613      	mov	r3, r2
 8013b22:	009b      	lsls	r3, r3, #2
 8013b24:	4413      	add	r3, r2
 8013b26:	009b      	lsls	r3, r3, #2
 8013b28:	440b      	add	r3, r1
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d10a      	bne.n	8013b46 <xTaskPriorityDisinherit+0xb6>
 8013b30:	693b      	ldr	r3, [r7, #16]
 8013b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b34:	2201      	movs	r2, #1
 8013b36:	fa02 f303 	lsl.w	r3, r2, r3
 8013b3a:	43da      	mvns	r2, r3
 8013b3c:	4b18      	ldr	r3, [pc, #96]	; (8013ba0 <xTaskPriorityDisinherit+0x110>)
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	4013      	ands	r3, r2
 8013b42:	4a17      	ldr	r2, [pc, #92]	; (8013ba0 <xTaskPriorityDisinherit+0x110>)
 8013b44:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b4e:	693b      	ldr	r3, [r7, #16]
 8013b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b52:	f1c3 0207 	rsb	r2, r3, #7
 8013b56:	693b      	ldr	r3, [r7, #16]
 8013b58:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013b5a:	693b      	ldr	r3, [r7, #16]
 8013b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b5e:	2201      	movs	r2, #1
 8013b60:	409a      	lsls	r2, r3
 8013b62:	4b0f      	ldr	r3, [pc, #60]	; (8013ba0 <xTaskPriorityDisinherit+0x110>)
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	4313      	orrs	r3, r2
 8013b68:	4a0d      	ldr	r2, [pc, #52]	; (8013ba0 <xTaskPriorityDisinherit+0x110>)
 8013b6a:	6013      	str	r3, [r2, #0]
 8013b6c:	693b      	ldr	r3, [r7, #16]
 8013b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b70:	4613      	mov	r3, r2
 8013b72:	009b      	lsls	r3, r3, #2
 8013b74:	4413      	add	r3, r2
 8013b76:	009b      	lsls	r3, r3, #2
 8013b78:	4a08      	ldr	r2, [pc, #32]	; (8013b9c <xTaskPriorityDisinherit+0x10c>)
 8013b7a:	441a      	add	r2, r3
 8013b7c:	693b      	ldr	r3, [r7, #16]
 8013b7e:	3304      	adds	r3, #4
 8013b80:	4619      	mov	r1, r3
 8013b82:	4610      	mov	r0, r2
 8013b84:	f7fe f9a5 	bl	8011ed2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013b88:	2301      	movs	r3, #1
 8013b8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013b8c:	697b      	ldr	r3, [r7, #20]
	}
 8013b8e:	4618      	mov	r0, r3
 8013b90:	3718      	adds	r7, #24
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}
 8013b96:	bf00      	nop
 8013b98:	20000e4c 	.word	0x20000e4c
 8013b9c:	20000e50 	.word	0x20000e50
 8013ba0:	20000f54 	.word	0x20000f54

08013ba4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b088      	sub	sp, #32
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
 8013bac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013bb2:	2301      	movs	r3, #1
 8013bb4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	f000 8087 	beq.w	8013ccc <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013bbe:	69bb      	ldr	r3, [r7, #24]
 8013bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d10c      	bne.n	8013be0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8013bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bca:	b672      	cpsid	i
 8013bcc:	f383 8811 	msr	BASEPRI, r3
 8013bd0:	f3bf 8f6f 	isb	sy
 8013bd4:	f3bf 8f4f 	dsb	sy
 8013bd8:	b662      	cpsie	i
 8013bda:	60fb      	str	r3, [r7, #12]
}
 8013bdc:	bf00      	nop
 8013bde:	e7fe      	b.n	8013bde <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013be0:	69bb      	ldr	r3, [r7, #24]
 8013be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013be4:	683a      	ldr	r2, [r7, #0]
 8013be6:	429a      	cmp	r2, r3
 8013be8:	d902      	bls.n	8013bf0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013bea:	683b      	ldr	r3, [r7, #0]
 8013bec:	61fb      	str	r3, [r7, #28]
 8013bee:	e002      	b.n	8013bf6 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013bf0:	69bb      	ldr	r3, [r7, #24]
 8013bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bf4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013bf6:	69bb      	ldr	r3, [r7, #24]
 8013bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bfa:	69fa      	ldr	r2, [r7, #28]
 8013bfc:	429a      	cmp	r2, r3
 8013bfe:	d065      	beq.n	8013ccc <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013c00:	69bb      	ldr	r3, [r7, #24]
 8013c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c04:	697a      	ldr	r2, [r7, #20]
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d160      	bne.n	8013ccc <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013c0a:	4b32      	ldr	r3, [pc, #200]	; (8013cd4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	69ba      	ldr	r2, [r7, #24]
 8013c10:	429a      	cmp	r2, r3
 8013c12:	d10c      	bne.n	8013c2e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8013c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c18:	b672      	cpsid	i
 8013c1a:	f383 8811 	msr	BASEPRI, r3
 8013c1e:	f3bf 8f6f 	isb	sy
 8013c22:	f3bf 8f4f 	dsb	sy
 8013c26:	b662      	cpsie	i
 8013c28:	60bb      	str	r3, [r7, #8]
}
 8013c2a:	bf00      	nop
 8013c2c:	e7fe      	b.n	8013c2c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013c2e:	69bb      	ldr	r3, [r7, #24]
 8013c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c32:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013c34:	69bb      	ldr	r3, [r7, #24]
 8013c36:	69fa      	ldr	r2, [r7, #28]
 8013c38:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013c3a:	69bb      	ldr	r3, [r7, #24]
 8013c3c:	699b      	ldr	r3, [r3, #24]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	db04      	blt.n	8013c4c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c42:	69fb      	ldr	r3, [r7, #28]
 8013c44:	f1c3 0207 	rsb	r2, r3, #7
 8013c48:	69bb      	ldr	r3, [r7, #24]
 8013c4a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013c4c:	69bb      	ldr	r3, [r7, #24]
 8013c4e:	6959      	ldr	r1, [r3, #20]
 8013c50:	693a      	ldr	r2, [r7, #16]
 8013c52:	4613      	mov	r3, r2
 8013c54:	009b      	lsls	r3, r3, #2
 8013c56:	4413      	add	r3, r2
 8013c58:	009b      	lsls	r3, r3, #2
 8013c5a:	4a1f      	ldr	r2, [pc, #124]	; (8013cd8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013c5c:	4413      	add	r3, r2
 8013c5e:	4299      	cmp	r1, r3
 8013c60:	d134      	bne.n	8013ccc <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013c62:	69bb      	ldr	r3, [r7, #24]
 8013c64:	3304      	adds	r3, #4
 8013c66:	4618      	mov	r0, r3
 8013c68:	f7fe f990 	bl	8011f8c <uxListRemove>
 8013c6c:	4603      	mov	r3, r0
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d115      	bne.n	8013c9e <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013c72:	69bb      	ldr	r3, [r7, #24]
 8013c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c76:	4918      	ldr	r1, [pc, #96]	; (8013cd8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013c78:	4613      	mov	r3, r2
 8013c7a:	009b      	lsls	r3, r3, #2
 8013c7c:	4413      	add	r3, r2
 8013c7e:	009b      	lsls	r3, r3, #2
 8013c80:	440b      	add	r3, r1
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d10a      	bne.n	8013c9e <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8013c88:	69bb      	ldr	r3, [r7, #24]
 8013c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c8c:	2201      	movs	r2, #1
 8013c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8013c92:	43da      	mvns	r2, r3
 8013c94:	4b11      	ldr	r3, [pc, #68]	; (8013cdc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	4013      	ands	r3, r2
 8013c9a:	4a10      	ldr	r2, [pc, #64]	; (8013cdc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013c9c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013c9e:	69bb      	ldr	r3, [r7, #24]
 8013ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ca2:	2201      	movs	r2, #1
 8013ca4:	409a      	lsls	r2, r3
 8013ca6:	4b0d      	ldr	r3, [pc, #52]	; (8013cdc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	4313      	orrs	r3, r2
 8013cac:	4a0b      	ldr	r2, [pc, #44]	; (8013cdc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013cae:	6013      	str	r3, [r2, #0]
 8013cb0:	69bb      	ldr	r3, [r7, #24]
 8013cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cb4:	4613      	mov	r3, r2
 8013cb6:	009b      	lsls	r3, r3, #2
 8013cb8:	4413      	add	r3, r2
 8013cba:	009b      	lsls	r3, r3, #2
 8013cbc:	4a06      	ldr	r2, [pc, #24]	; (8013cd8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013cbe:	441a      	add	r2, r3
 8013cc0:	69bb      	ldr	r3, [r7, #24]
 8013cc2:	3304      	adds	r3, #4
 8013cc4:	4619      	mov	r1, r3
 8013cc6:	4610      	mov	r0, r2
 8013cc8:	f7fe f903 	bl	8011ed2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013ccc:	bf00      	nop
 8013cce:	3720      	adds	r7, #32
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	bd80      	pop	{r7, pc}
 8013cd4:	20000e4c 	.word	0x20000e4c
 8013cd8:	20000e50 	.word	0x20000e50
 8013cdc:	20000f54 	.word	0x20000f54

08013ce0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013ce0:	b480      	push	{r7}
 8013ce2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013ce4:	4b07      	ldr	r3, [pc, #28]	; (8013d04 <pvTaskIncrementMutexHeldCount+0x24>)
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d004      	beq.n	8013cf6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013cec:	4b05      	ldr	r3, [pc, #20]	; (8013d04 <pvTaskIncrementMutexHeldCount+0x24>)
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013cf2:	3201      	adds	r2, #1
 8013cf4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8013cf6:	4b03      	ldr	r3, [pc, #12]	; (8013d04 <pvTaskIncrementMutexHeldCount+0x24>)
 8013cf8:	681b      	ldr	r3, [r3, #0]
	}
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d02:	4770      	bx	lr
 8013d04:	20000e4c 	.word	0x20000e4c

08013d08 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b084      	sub	sp, #16
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]
 8013d10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013d12:	4b29      	ldr	r3, [pc, #164]	; (8013db8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013d18:	4b28      	ldr	r3, [pc, #160]	; (8013dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	3304      	adds	r3, #4
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f7fe f934 	bl	8011f8c <uxListRemove>
 8013d24:	4603      	mov	r3, r0
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d10b      	bne.n	8013d42 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013d2a:	4b24      	ldr	r3, [pc, #144]	; (8013dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d30:	2201      	movs	r2, #1
 8013d32:	fa02 f303 	lsl.w	r3, r2, r3
 8013d36:	43da      	mvns	r2, r3
 8013d38:	4b21      	ldr	r3, [pc, #132]	; (8013dc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	4013      	ands	r3, r2
 8013d3e:	4a20      	ldr	r2, [pc, #128]	; (8013dc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013d40:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d48:	d10a      	bne.n	8013d60 <prvAddCurrentTaskToDelayedList+0x58>
 8013d4a:	683b      	ldr	r3, [r7, #0]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d007      	beq.n	8013d60 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013d50:	4b1a      	ldr	r3, [pc, #104]	; (8013dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	3304      	adds	r3, #4
 8013d56:	4619      	mov	r1, r3
 8013d58:	481a      	ldr	r0, [pc, #104]	; (8013dc4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8013d5a:	f7fe f8ba 	bl	8011ed2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013d5e:	e026      	b.n	8013dae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013d60:	68fa      	ldr	r2, [r7, #12]
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	4413      	add	r3, r2
 8013d66:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013d68:	4b14      	ldr	r3, [pc, #80]	; (8013dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	68ba      	ldr	r2, [r7, #8]
 8013d6e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013d70:	68ba      	ldr	r2, [r7, #8]
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	429a      	cmp	r2, r3
 8013d76:	d209      	bcs.n	8013d8c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013d78:	4b13      	ldr	r3, [pc, #76]	; (8013dc8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013d7a:	681a      	ldr	r2, [r3, #0]
 8013d7c:	4b0f      	ldr	r3, [pc, #60]	; (8013dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	3304      	adds	r3, #4
 8013d82:	4619      	mov	r1, r3
 8013d84:	4610      	mov	r0, r2
 8013d86:	f7fe f8c8 	bl	8011f1a <vListInsert>
}
 8013d8a:	e010      	b.n	8013dae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013d8c:	4b0f      	ldr	r3, [pc, #60]	; (8013dcc <prvAddCurrentTaskToDelayedList+0xc4>)
 8013d8e:	681a      	ldr	r2, [r3, #0]
 8013d90:	4b0a      	ldr	r3, [pc, #40]	; (8013dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	3304      	adds	r3, #4
 8013d96:	4619      	mov	r1, r3
 8013d98:	4610      	mov	r0, r2
 8013d9a:	f7fe f8be 	bl	8011f1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013d9e:	4b0c      	ldr	r3, [pc, #48]	; (8013dd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	68ba      	ldr	r2, [r7, #8]
 8013da4:	429a      	cmp	r2, r3
 8013da6:	d202      	bcs.n	8013dae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013da8:	4a09      	ldr	r2, [pc, #36]	; (8013dd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013daa:	68bb      	ldr	r3, [r7, #8]
 8013dac:	6013      	str	r3, [r2, #0]
}
 8013dae:	bf00      	nop
 8013db0:	3710      	adds	r7, #16
 8013db2:	46bd      	mov	sp, r7
 8013db4:	bd80      	pop	{r7, pc}
 8013db6:	bf00      	nop
 8013db8:	20000f50 	.word	0x20000f50
 8013dbc:	20000e4c 	.word	0x20000e4c
 8013dc0:	20000f54 	.word	0x20000f54
 8013dc4:	20000f38 	.word	0x20000f38
 8013dc8:	20000f08 	.word	0x20000f08
 8013dcc:	20000f04 	.word	0x20000f04
 8013dd0:	20000f6c 	.word	0x20000f6c

08013dd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013dd4:	b480      	push	{r7}
 8013dd6:	b085      	sub	sp, #20
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	60f8      	str	r0, [r7, #12]
 8013ddc:	60b9      	str	r1, [r7, #8]
 8013dde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	3b04      	subs	r3, #4
 8013de4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013dec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	3b04      	subs	r3, #4
 8013df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013df4:	68bb      	ldr	r3, [r7, #8]
 8013df6:	f023 0201 	bic.w	r2, r3, #1
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	3b04      	subs	r3, #4
 8013e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013e04:	4a0c      	ldr	r2, [pc, #48]	; (8013e38 <pxPortInitialiseStack+0x64>)
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	3b14      	subs	r3, #20
 8013e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013e10:	687a      	ldr	r2, [r7, #4]
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	3b04      	subs	r3, #4
 8013e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	f06f 0202 	mvn.w	r2, #2
 8013e22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	3b20      	subs	r3, #32
 8013e28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013e2a:	68fb      	ldr	r3, [r7, #12]
}
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	3714      	adds	r7, #20
 8013e30:	46bd      	mov	sp, r7
 8013e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e36:	4770      	bx	lr
 8013e38:	08013e3d 	.word	0x08013e3d

08013e3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013e3c:	b480      	push	{r7}
 8013e3e:	b085      	sub	sp, #20
 8013e40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013e42:	2300      	movs	r3, #0
 8013e44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013e46:	4b14      	ldr	r3, [pc, #80]	; (8013e98 <prvTaskExitError+0x5c>)
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e4e:	d00c      	beq.n	8013e6a <prvTaskExitError+0x2e>
	__asm volatile
 8013e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e54:	b672      	cpsid	i
 8013e56:	f383 8811 	msr	BASEPRI, r3
 8013e5a:	f3bf 8f6f 	isb	sy
 8013e5e:	f3bf 8f4f 	dsb	sy
 8013e62:	b662      	cpsie	i
 8013e64:	60fb      	str	r3, [r7, #12]
}
 8013e66:	bf00      	nop
 8013e68:	e7fe      	b.n	8013e68 <prvTaskExitError+0x2c>
	__asm volatile
 8013e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e6e:	b672      	cpsid	i
 8013e70:	f383 8811 	msr	BASEPRI, r3
 8013e74:	f3bf 8f6f 	isb	sy
 8013e78:	f3bf 8f4f 	dsb	sy
 8013e7c:	b662      	cpsie	i
 8013e7e:	60bb      	str	r3, [r7, #8]
}
 8013e80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013e82:	bf00      	nop
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d0fc      	beq.n	8013e84 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013e8a:	bf00      	nop
 8013e8c:	bf00      	nop
 8013e8e:	3714      	adds	r7, #20
 8013e90:	46bd      	mov	sp, r7
 8013e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e96:	4770      	bx	lr
 8013e98:	20000014 	.word	0x20000014
 8013e9c:	00000000 	.word	0x00000000

08013ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013ea0:	4b07      	ldr	r3, [pc, #28]	; (8013ec0 <pxCurrentTCBConst2>)
 8013ea2:	6819      	ldr	r1, [r3, #0]
 8013ea4:	6808      	ldr	r0, [r1, #0]
 8013ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013eaa:	f380 8809 	msr	PSP, r0
 8013eae:	f3bf 8f6f 	isb	sy
 8013eb2:	f04f 0000 	mov.w	r0, #0
 8013eb6:	f380 8811 	msr	BASEPRI, r0
 8013eba:	4770      	bx	lr
 8013ebc:	f3af 8000 	nop.w

08013ec0 <pxCurrentTCBConst2>:
 8013ec0:	20000e4c 	.word	0x20000e4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013ec4:	bf00      	nop
 8013ec6:	bf00      	nop

08013ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013ec8:	4808      	ldr	r0, [pc, #32]	; (8013eec <prvPortStartFirstTask+0x24>)
 8013eca:	6800      	ldr	r0, [r0, #0]
 8013ecc:	6800      	ldr	r0, [r0, #0]
 8013ece:	f380 8808 	msr	MSP, r0
 8013ed2:	f04f 0000 	mov.w	r0, #0
 8013ed6:	f380 8814 	msr	CONTROL, r0
 8013eda:	b662      	cpsie	i
 8013edc:	b661      	cpsie	f
 8013ede:	f3bf 8f4f 	dsb	sy
 8013ee2:	f3bf 8f6f 	isb	sy
 8013ee6:	df00      	svc	0
 8013ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013eea:	bf00      	nop
 8013eec:	e000ed08 	.word	0xe000ed08

08013ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b084      	sub	sp, #16
 8013ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013ef6:	4b37      	ldr	r3, [pc, #220]	; (8013fd4 <xPortStartScheduler+0xe4>)
 8013ef8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	781b      	ldrb	r3, [r3, #0]
 8013efe:	b2db      	uxtb	r3, r3
 8013f00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	22ff      	movs	r2, #255	; 0xff
 8013f06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	781b      	ldrb	r3, [r3, #0]
 8013f0c:	b2db      	uxtb	r3, r3
 8013f0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013f10:	78fb      	ldrb	r3, [r7, #3]
 8013f12:	b2db      	uxtb	r3, r3
 8013f14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013f18:	b2da      	uxtb	r2, r3
 8013f1a:	4b2f      	ldr	r3, [pc, #188]	; (8013fd8 <xPortStartScheduler+0xe8>)
 8013f1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013f1e:	4b2f      	ldr	r3, [pc, #188]	; (8013fdc <xPortStartScheduler+0xec>)
 8013f20:	2207      	movs	r2, #7
 8013f22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013f24:	e009      	b.n	8013f3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013f26:	4b2d      	ldr	r3, [pc, #180]	; (8013fdc <xPortStartScheduler+0xec>)
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	3b01      	subs	r3, #1
 8013f2c:	4a2b      	ldr	r2, [pc, #172]	; (8013fdc <xPortStartScheduler+0xec>)
 8013f2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013f30:	78fb      	ldrb	r3, [r7, #3]
 8013f32:	b2db      	uxtb	r3, r3
 8013f34:	005b      	lsls	r3, r3, #1
 8013f36:	b2db      	uxtb	r3, r3
 8013f38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013f3a:	78fb      	ldrb	r3, [r7, #3]
 8013f3c:	b2db      	uxtb	r3, r3
 8013f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f42:	2b80      	cmp	r3, #128	; 0x80
 8013f44:	d0ef      	beq.n	8013f26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013f46:	4b25      	ldr	r3, [pc, #148]	; (8013fdc <xPortStartScheduler+0xec>)
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	f1c3 0307 	rsb	r3, r3, #7
 8013f4e:	2b04      	cmp	r3, #4
 8013f50:	d00c      	beq.n	8013f6c <xPortStartScheduler+0x7c>
	__asm volatile
 8013f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f56:	b672      	cpsid	i
 8013f58:	f383 8811 	msr	BASEPRI, r3
 8013f5c:	f3bf 8f6f 	isb	sy
 8013f60:	f3bf 8f4f 	dsb	sy
 8013f64:	b662      	cpsie	i
 8013f66:	60bb      	str	r3, [r7, #8]
}
 8013f68:	bf00      	nop
 8013f6a:	e7fe      	b.n	8013f6a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013f6c:	4b1b      	ldr	r3, [pc, #108]	; (8013fdc <xPortStartScheduler+0xec>)
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	021b      	lsls	r3, r3, #8
 8013f72:	4a1a      	ldr	r2, [pc, #104]	; (8013fdc <xPortStartScheduler+0xec>)
 8013f74:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013f76:	4b19      	ldr	r3, [pc, #100]	; (8013fdc <xPortStartScheduler+0xec>)
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013f7e:	4a17      	ldr	r2, [pc, #92]	; (8013fdc <xPortStartScheduler+0xec>)
 8013f80:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	b2da      	uxtb	r2, r3
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013f8a:	4b15      	ldr	r3, [pc, #84]	; (8013fe0 <xPortStartScheduler+0xf0>)
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	4a14      	ldr	r2, [pc, #80]	; (8013fe0 <xPortStartScheduler+0xf0>)
 8013f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013f94:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013f96:	4b12      	ldr	r3, [pc, #72]	; (8013fe0 <xPortStartScheduler+0xf0>)
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	4a11      	ldr	r2, [pc, #68]	; (8013fe0 <xPortStartScheduler+0xf0>)
 8013f9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013fa0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013fa2:	f000 f8dd 	bl	8014160 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013fa6:	4b0f      	ldr	r3, [pc, #60]	; (8013fe4 <xPortStartScheduler+0xf4>)
 8013fa8:	2200      	movs	r2, #0
 8013faa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013fac:	f000 f8fc 	bl	80141a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013fb0:	4b0d      	ldr	r3, [pc, #52]	; (8013fe8 <xPortStartScheduler+0xf8>)
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	4a0c      	ldr	r2, [pc, #48]	; (8013fe8 <xPortStartScheduler+0xf8>)
 8013fb6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013fba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013fbc:	f7ff ff84 	bl	8013ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013fc0:	f7ff fa76 	bl	80134b0 <vTaskSwitchContext>
	prvTaskExitError();
 8013fc4:	f7ff ff3a 	bl	8013e3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013fc8:	2300      	movs	r3, #0
}
 8013fca:	4618      	mov	r0, r3
 8013fcc:	3710      	adds	r7, #16
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	bd80      	pop	{r7, pc}
 8013fd2:	bf00      	nop
 8013fd4:	e000e400 	.word	0xe000e400
 8013fd8:	20000f78 	.word	0x20000f78
 8013fdc:	20000f7c 	.word	0x20000f7c
 8013fe0:	e000ed20 	.word	0xe000ed20
 8013fe4:	20000014 	.word	0x20000014
 8013fe8:	e000ef34 	.word	0xe000ef34

08013fec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013fec:	b480      	push	{r7}
 8013fee:	b083      	sub	sp, #12
 8013ff0:	af00      	add	r7, sp, #0
	__asm volatile
 8013ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ff6:	b672      	cpsid	i
 8013ff8:	f383 8811 	msr	BASEPRI, r3
 8013ffc:	f3bf 8f6f 	isb	sy
 8014000:	f3bf 8f4f 	dsb	sy
 8014004:	b662      	cpsie	i
 8014006:	607b      	str	r3, [r7, #4]
}
 8014008:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801400a:	4b10      	ldr	r3, [pc, #64]	; (801404c <vPortEnterCritical+0x60>)
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	3301      	adds	r3, #1
 8014010:	4a0e      	ldr	r2, [pc, #56]	; (801404c <vPortEnterCritical+0x60>)
 8014012:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014014:	4b0d      	ldr	r3, [pc, #52]	; (801404c <vPortEnterCritical+0x60>)
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	2b01      	cmp	r3, #1
 801401a:	d111      	bne.n	8014040 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801401c:	4b0c      	ldr	r3, [pc, #48]	; (8014050 <vPortEnterCritical+0x64>)
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	b2db      	uxtb	r3, r3
 8014022:	2b00      	cmp	r3, #0
 8014024:	d00c      	beq.n	8014040 <vPortEnterCritical+0x54>
	__asm volatile
 8014026:	f04f 0350 	mov.w	r3, #80	; 0x50
 801402a:	b672      	cpsid	i
 801402c:	f383 8811 	msr	BASEPRI, r3
 8014030:	f3bf 8f6f 	isb	sy
 8014034:	f3bf 8f4f 	dsb	sy
 8014038:	b662      	cpsie	i
 801403a:	603b      	str	r3, [r7, #0]
}
 801403c:	bf00      	nop
 801403e:	e7fe      	b.n	801403e <vPortEnterCritical+0x52>
	}
}
 8014040:	bf00      	nop
 8014042:	370c      	adds	r7, #12
 8014044:	46bd      	mov	sp, r7
 8014046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404a:	4770      	bx	lr
 801404c:	20000014 	.word	0x20000014
 8014050:	e000ed04 	.word	0xe000ed04

08014054 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014054:	b480      	push	{r7}
 8014056:	b083      	sub	sp, #12
 8014058:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801405a:	4b13      	ldr	r3, [pc, #76]	; (80140a8 <vPortExitCritical+0x54>)
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d10c      	bne.n	801407c <vPortExitCritical+0x28>
	__asm volatile
 8014062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014066:	b672      	cpsid	i
 8014068:	f383 8811 	msr	BASEPRI, r3
 801406c:	f3bf 8f6f 	isb	sy
 8014070:	f3bf 8f4f 	dsb	sy
 8014074:	b662      	cpsie	i
 8014076:	607b      	str	r3, [r7, #4]
}
 8014078:	bf00      	nop
 801407a:	e7fe      	b.n	801407a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801407c:	4b0a      	ldr	r3, [pc, #40]	; (80140a8 <vPortExitCritical+0x54>)
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	3b01      	subs	r3, #1
 8014082:	4a09      	ldr	r2, [pc, #36]	; (80140a8 <vPortExitCritical+0x54>)
 8014084:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014086:	4b08      	ldr	r3, [pc, #32]	; (80140a8 <vPortExitCritical+0x54>)
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d105      	bne.n	801409a <vPortExitCritical+0x46>
 801408e:	2300      	movs	r3, #0
 8014090:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014092:	683b      	ldr	r3, [r7, #0]
 8014094:	f383 8811 	msr	BASEPRI, r3
}
 8014098:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801409a:	bf00      	nop
 801409c:	370c      	adds	r7, #12
 801409e:	46bd      	mov	sp, r7
 80140a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a4:	4770      	bx	lr
 80140a6:	bf00      	nop
 80140a8:	20000014 	.word	0x20000014
 80140ac:	00000000 	.word	0x00000000

080140b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80140b0:	f3ef 8009 	mrs	r0, PSP
 80140b4:	f3bf 8f6f 	isb	sy
 80140b8:	4b15      	ldr	r3, [pc, #84]	; (8014110 <pxCurrentTCBConst>)
 80140ba:	681a      	ldr	r2, [r3, #0]
 80140bc:	f01e 0f10 	tst.w	lr, #16
 80140c0:	bf08      	it	eq
 80140c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80140c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140ca:	6010      	str	r0, [r2, #0]
 80140cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80140d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80140d4:	b672      	cpsid	i
 80140d6:	f380 8811 	msr	BASEPRI, r0
 80140da:	f3bf 8f4f 	dsb	sy
 80140de:	f3bf 8f6f 	isb	sy
 80140e2:	b662      	cpsie	i
 80140e4:	f7ff f9e4 	bl	80134b0 <vTaskSwitchContext>
 80140e8:	f04f 0000 	mov.w	r0, #0
 80140ec:	f380 8811 	msr	BASEPRI, r0
 80140f0:	bc09      	pop	{r0, r3}
 80140f2:	6819      	ldr	r1, [r3, #0]
 80140f4:	6808      	ldr	r0, [r1, #0]
 80140f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140fa:	f01e 0f10 	tst.w	lr, #16
 80140fe:	bf08      	it	eq
 8014100:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014104:	f380 8809 	msr	PSP, r0
 8014108:	f3bf 8f6f 	isb	sy
 801410c:	4770      	bx	lr
 801410e:	bf00      	nop

08014110 <pxCurrentTCBConst>:
 8014110:	20000e4c 	.word	0x20000e4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014114:	bf00      	nop
 8014116:	bf00      	nop

08014118 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b082      	sub	sp, #8
 801411c:	af00      	add	r7, sp, #0
	__asm volatile
 801411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014122:	b672      	cpsid	i
 8014124:	f383 8811 	msr	BASEPRI, r3
 8014128:	f3bf 8f6f 	isb	sy
 801412c:	f3bf 8f4f 	dsb	sy
 8014130:	b662      	cpsie	i
 8014132:	607b      	str	r3, [r7, #4]
}
 8014134:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014136:	f7ff f901 	bl	801333c <xTaskIncrementTick>
 801413a:	4603      	mov	r3, r0
 801413c:	2b00      	cmp	r3, #0
 801413e:	d003      	beq.n	8014148 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014140:	4b06      	ldr	r3, [pc, #24]	; (801415c <SysTick_Handler+0x44>)
 8014142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014146:	601a      	str	r2, [r3, #0]
 8014148:	2300      	movs	r3, #0
 801414a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801414c:	683b      	ldr	r3, [r7, #0]
 801414e:	f383 8811 	msr	BASEPRI, r3
}
 8014152:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014154:	bf00      	nop
 8014156:	3708      	adds	r7, #8
 8014158:	46bd      	mov	sp, r7
 801415a:	bd80      	pop	{r7, pc}
 801415c:	e000ed04 	.word	0xe000ed04

08014160 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014160:	b480      	push	{r7}
 8014162:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014164:	4b0b      	ldr	r3, [pc, #44]	; (8014194 <vPortSetupTimerInterrupt+0x34>)
 8014166:	2200      	movs	r2, #0
 8014168:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801416a:	4b0b      	ldr	r3, [pc, #44]	; (8014198 <vPortSetupTimerInterrupt+0x38>)
 801416c:	2200      	movs	r2, #0
 801416e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014170:	4b0a      	ldr	r3, [pc, #40]	; (801419c <vPortSetupTimerInterrupt+0x3c>)
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	4a0a      	ldr	r2, [pc, #40]	; (80141a0 <vPortSetupTimerInterrupt+0x40>)
 8014176:	fba2 2303 	umull	r2, r3, r2, r3
 801417a:	099b      	lsrs	r3, r3, #6
 801417c:	4a09      	ldr	r2, [pc, #36]	; (80141a4 <vPortSetupTimerInterrupt+0x44>)
 801417e:	3b01      	subs	r3, #1
 8014180:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014182:	4b04      	ldr	r3, [pc, #16]	; (8014194 <vPortSetupTimerInterrupt+0x34>)
 8014184:	2207      	movs	r2, #7
 8014186:	601a      	str	r2, [r3, #0]
}
 8014188:	bf00      	nop
 801418a:	46bd      	mov	sp, r7
 801418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014190:	4770      	bx	lr
 8014192:	bf00      	nop
 8014194:	e000e010 	.word	0xe000e010
 8014198:	e000e018 	.word	0xe000e018
 801419c:	20000008 	.word	0x20000008
 80141a0:	10624dd3 	.word	0x10624dd3
 80141a4:	e000e014 	.word	0xe000e014

080141a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80141a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80141b8 <vPortEnableVFP+0x10>
 80141ac:	6801      	ldr	r1, [r0, #0]
 80141ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80141b2:	6001      	str	r1, [r0, #0]
 80141b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80141b6:	bf00      	nop
 80141b8:	e000ed88 	.word	0xe000ed88

080141bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80141bc:	b480      	push	{r7}
 80141be:	b085      	sub	sp, #20
 80141c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80141c2:	f3ef 8305 	mrs	r3, IPSR
 80141c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	2b0f      	cmp	r3, #15
 80141cc:	d916      	bls.n	80141fc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80141ce:	4a19      	ldr	r2, [pc, #100]	; (8014234 <vPortValidateInterruptPriority+0x78>)
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	4413      	add	r3, r2
 80141d4:	781b      	ldrb	r3, [r3, #0]
 80141d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80141d8:	4b17      	ldr	r3, [pc, #92]	; (8014238 <vPortValidateInterruptPriority+0x7c>)
 80141da:	781b      	ldrb	r3, [r3, #0]
 80141dc:	7afa      	ldrb	r2, [r7, #11]
 80141de:	429a      	cmp	r2, r3
 80141e0:	d20c      	bcs.n	80141fc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80141e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e6:	b672      	cpsid	i
 80141e8:	f383 8811 	msr	BASEPRI, r3
 80141ec:	f3bf 8f6f 	isb	sy
 80141f0:	f3bf 8f4f 	dsb	sy
 80141f4:	b662      	cpsie	i
 80141f6:	607b      	str	r3, [r7, #4]
}
 80141f8:	bf00      	nop
 80141fa:	e7fe      	b.n	80141fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80141fc:	4b0f      	ldr	r3, [pc, #60]	; (801423c <vPortValidateInterruptPriority+0x80>)
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014204:	4b0e      	ldr	r3, [pc, #56]	; (8014240 <vPortValidateInterruptPriority+0x84>)
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	429a      	cmp	r2, r3
 801420a:	d90c      	bls.n	8014226 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014210:	b672      	cpsid	i
 8014212:	f383 8811 	msr	BASEPRI, r3
 8014216:	f3bf 8f6f 	isb	sy
 801421a:	f3bf 8f4f 	dsb	sy
 801421e:	b662      	cpsie	i
 8014220:	603b      	str	r3, [r7, #0]
}
 8014222:	bf00      	nop
 8014224:	e7fe      	b.n	8014224 <vPortValidateInterruptPriority+0x68>
	}
 8014226:	bf00      	nop
 8014228:	3714      	adds	r7, #20
 801422a:	46bd      	mov	sp, r7
 801422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014230:	4770      	bx	lr
 8014232:	bf00      	nop
 8014234:	e000e3f0 	.word	0xe000e3f0
 8014238:	20000f78 	.word	0x20000f78
 801423c:	e000ed0c 	.word	0xe000ed0c
 8014240:	20000f7c 	.word	0x20000f7c

08014244 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b08a      	sub	sp, #40	; 0x28
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801424c:	2300      	movs	r3, #0
 801424e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014250:	f7fe ffb8 	bl	80131c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014254:	4b5b      	ldr	r3, [pc, #364]	; (80143c4 <pvPortMalloc+0x180>)
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d101      	bne.n	8014260 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801425c:	f000 f91a 	bl	8014494 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014260:	4b59      	ldr	r3, [pc, #356]	; (80143c8 <pvPortMalloc+0x184>)
 8014262:	681a      	ldr	r2, [r3, #0]
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	4013      	ands	r3, r2
 8014268:	2b00      	cmp	r3, #0
 801426a:	f040 8092 	bne.w	8014392 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d01f      	beq.n	80142b4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8014274:	2208      	movs	r2, #8
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	4413      	add	r3, r2
 801427a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	f003 0307 	and.w	r3, r3, #7
 8014282:	2b00      	cmp	r3, #0
 8014284:	d016      	beq.n	80142b4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	f023 0307 	bic.w	r3, r3, #7
 801428c:	3308      	adds	r3, #8
 801428e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	f003 0307 	and.w	r3, r3, #7
 8014296:	2b00      	cmp	r3, #0
 8014298:	d00c      	beq.n	80142b4 <pvPortMalloc+0x70>
	__asm volatile
 801429a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801429e:	b672      	cpsid	i
 80142a0:	f383 8811 	msr	BASEPRI, r3
 80142a4:	f3bf 8f6f 	isb	sy
 80142a8:	f3bf 8f4f 	dsb	sy
 80142ac:	b662      	cpsie	i
 80142ae:	617b      	str	r3, [r7, #20]
}
 80142b0:	bf00      	nop
 80142b2:	e7fe      	b.n	80142b2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d06b      	beq.n	8014392 <pvPortMalloc+0x14e>
 80142ba:	4b44      	ldr	r3, [pc, #272]	; (80143cc <pvPortMalloc+0x188>)
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	687a      	ldr	r2, [r7, #4]
 80142c0:	429a      	cmp	r2, r3
 80142c2:	d866      	bhi.n	8014392 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80142c4:	4b42      	ldr	r3, [pc, #264]	; (80143d0 <pvPortMalloc+0x18c>)
 80142c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80142c8:	4b41      	ldr	r3, [pc, #260]	; (80143d0 <pvPortMalloc+0x18c>)
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80142ce:	e004      	b.n	80142da <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80142d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80142d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80142da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142dc:	685b      	ldr	r3, [r3, #4]
 80142de:	687a      	ldr	r2, [r7, #4]
 80142e0:	429a      	cmp	r2, r3
 80142e2:	d903      	bls.n	80142ec <pvPortMalloc+0xa8>
 80142e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d1f1      	bne.n	80142d0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80142ec:	4b35      	ldr	r3, [pc, #212]	; (80143c4 <pvPortMalloc+0x180>)
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142f2:	429a      	cmp	r2, r3
 80142f4:	d04d      	beq.n	8014392 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80142f6:	6a3b      	ldr	r3, [r7, #32]
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	2208      	movs	r2, #8
 80142fc:	4413      	add	r3, r2
 80142fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014302:	681a      	ldr	r2, [r3, #0]
 8014304:	6a3b      	ldr	r3, [r7, #32]
 8014306:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801430a:	685a      	ldr	r2, [r3, #4]
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	1ad2      	subs	r2, r2, r3
 8014310:	2308      	movs	r3, #8
 8014312:	005b      	lsls	r3, r3, #1
 8014314:	429a      	cmp	r2, r3
 8014316:	d921      	bls.n	801435c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	4413      	add	r3, r2
 801431e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014320:	69bb      	ldr	r3, [r7, #24]
 8014322:	f003 0307 	and.w	r3, r3, #7
 8014326:	2b00      	cmp	r3, #0
 8014328:	d00c      	beq.n	8014344 <pvPortMalloc+0x100>
	__asm volatile
 801432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801432e:	b672      	cpsid	i
 8014330:	f383 8811 	msr	BASEPRI, r3
 8014334:	f3bf 8f6f 	isb	sy
 8014338:	f3bf 8f4f 	dsb	sy
 801433c:	b662      	cpsie	i
 801433e:	613b      	str	r3, [r7, #16]
}
 8014340:	bf00      	nop
 8014342:	e7fe      	b.n	8014342 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014346:	685a      	ldr	r2, [r3, #4]
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	1ad2      	subs	r2, r2, r3
 801434c:	69bb      	ldr	r3, [r7, #24]
 801434e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014352:	687a      	ldr	r2, [r7, #4]
 8014354:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014356:	69b8      	ldr	r0, [r7, #24]
 8014358:	f000 f8fe 	bl	8014558 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801435c:	4b1b      	ldr	r3, [pc, #108]	; (80143cc <pvPortMalloc+0x188>)
 801435e:	681a      	ldr	r2, [r3, #0]
 8014360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014362:	685b      	ldr	r3, [r3, #4]
 8014364:	1ad3      	subs	r3, r2, r3
 8014366:	4a19      	ldr	r2, [pc, #100]	; (80143cc <pvPortMalloc+0x188>)
 8014368:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801436a:	4b18      	ldr	r3, [pc, #96]	; (80143cc <pvPortMalloc+0x188>)
 801436c:	681a      	ldr	r2, [r3, #0]
 801436e:	4b19      	ldr	r3, [pc, #100]	; (80143d4 <pvPortMalloc+0x190>)
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	429a      	cmp	r2, r3
 8014374:	d203      	bcs.n	801437e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014376:	4b15      	ldr	r3, [pc, #84]	; (80143cc <pvPortMalloc+0x188>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	4a16      	ldr	r2, [pc, #88]	; (80143d4 <pvPortMalloc+0x190>)
 801437c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014380:	685a      	ldr	r2, [r3, #4]
 8014382:	4b11      	ldr	r3, [pc, #68]	; (80143c8 <pvPortMalloc+0x184>)
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	431a      	orrs	r2, r3
 8014388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801438a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801438e:	2200      	movs	r2, #0
 8014390:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014392:	f7fe ff25 	bl	80131e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014396:	69fb      	ldr	r3, [r7, #28]
 8014398:	f003 0307 	and.w	r3, r3, #7
 801439c:	2b00      	cmp	r3, #0
 801439e:	d00c      	beq.n	80143ba <pvPortMalloc+0x176>
	__asm volatile
 80143a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143a4:	b672      	cpsid	i
 80143a6:	f383 8811 	msr	BASEPRI, r3
 80143aa:	f3bf 8f6f 	isb	sy
 80143ae:	f3bf 8f4f 	dsb	sy
 80143b2:	b662      	cpsie	i
 80143b4:	60fb      	str	r3, [r7, #12]
}
 80143b6:	bf00      	nop
 80143b8:	e7fe      	b.n	80143b8 <pvPortMalloc+0x174>
	return pvReturn;
 80143ba:	69fb      	ldr	r3, [r7, #28]
}
 80143bc:	4618      	mov	r0, r3
 80143be:	3728      	adds	r7, #40	; 0x28
 80143c0:	46bd      	mov	sp, r7
 80143c2:	bd80      	pop	{r7, pc}
 80143c4:	20008f88 	.word	0x20008f88
 80143c8:	20008f94 	.word	0x20008f94
 80143cc:	20008f8c 	.word	0x20008f8c
 80143d0:	20008f80 	.word	0x20008f80
 80143d4:	20008f90 	.word	0x20008f90

080143d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b086      	sub	sp, #24
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d04c      	beq.n	8014484 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80143ea:	2308      	movs	r3, #8
 80143ec:	425b      	negs	r3, r3
 80143ee:	697a      	ldr	r2, [r7, #20]
 80143f0:	4413      	add	r3, r2
 80143f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80143f4:	697b      	ldr	r3, [r7, #20]
 80143f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80143f8:	693b      	ldr	r3, [r7, #16]
 80143fa:	685a      	ldr	r2, [r3, #4]
 80143fc:	4b23      	ldr	r3, [pc, #140]	; (801448c <vPortFree+0xb4>)
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	4013      	ands	r3, r2
 8014402:	2b00      	cmp	r3, #0
 8014404:	d10c      	bne.n	8014420 <vPortFree+0x48>
	__asm volatile
 8014406:	f04f 0350 	mov.w	r3, #80	; 0x50
 801440a:	b672      	cpsid	i
 801440c:	f383 8811 	msr	BASEPRI, r3
 8014410:	f3bf 8f6f 	isb	sy
 8014414:	f3bf 8f4f 	dsb	sy
 8014418:	b662      	cpsie	i
 801441a:	60fb      	str	r3, [r7, #12]
}
 801441c:	bf00      	nop
 801441e:	e7fe      	b.n	801441e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014420:	693b      	ldr	r3, [r7, #16]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d00c      	beq.n	8014442 <vPortFree+0x6a>
	__asm volatile
 8014428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801442c:	b672      	cpsid	i
 801442e:	f383 8811 	msr	BASEPRI, r3
 8014432:	f3bf 8f6f 	isb	sy
 8014436:	f3bf 8f4f 	dsb	sy
 801443a:	b662      	cpsie	i
 801443c:	60bb      	str	r3, [r7, #8]
}
 801443e:	bf00      	nop
 8014440:	e7fe      	b.n	8014440 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014442:	693b      	ldr	r3, [r7, #16]
 8014444:	685a      	ldr	r2, [r3, #4]
 8014446:	4b11      	ldr	r3, [pc, #68]	; (801448c <vPortFree+0xb4>)
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	4013      	ands	r3, r2
 801444c:	2b00      	cmp	r3, #0
 801444e:	d019      	beq.n	8014484 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014450:	693b      	ldr	r3, [r7, #16]
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d115      	bne.n	8014484 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014458:	693b      	ldr	r3, [r7, #16]
 801445a:	685a      	ldr	r2, [r3, #4]
 801445c:	4b0b      	ldr	r3, [pc, #44]	; (801448c <vPortFree+0xb4>)
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	43db      	mvns	r3, r3
 8014462:	401a      	ands	r2, r3
 8014464:	693b      	ldr	r3, [r7, #16]
 8014466:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014468:	f7fe feac 	bl	80131c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801446c:	693b      	ldr	r3, [r7, #16]
 801446e:	685a      	ldr	r2, [r3, #4]
 8014470:	4b07      	ldr	r3, [pc, #28]	; (8014490 <vPortFree+0xb8>)
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	4413      	add	r3, r2
 8014476:	4a06      	ldr	r2, [pc, #24]	; (8014490 <vPortFree+0xb8>)
 8014478:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801447a:	6938      	ldr	r0, [r7, #16]
 801447c:	f000 f86c 	bl	8014558 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014480:	f7fe feae 	bl	80131e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014484:	bf00      	nop
 8014486:	3718      	adds	r7, #24
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}
 801448c:	20008f94 	.word	0x20008f94
 8014490:	20008f8c 	.word	0x20008f8c

08014494 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014494:	b480      	push	{r7}
 8014496:	b085      	sub	sp, #20
 8014498:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801449a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801449e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80144a0:	4b27      	ldr	r3, [pc, #156]	; (8014540 <prvHeapInit+0xac>)
 80144a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	f003 0307 	and.w	r3, r3, #7
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d00c      	beq.n	80144c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	3307      	adds	r3, #7
 80144b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	f023 0307 	bic.w	r3, r3, #7
 80144ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80144bc:	68ba      	ldr	r2, [r7, #8]
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	1ad3      	subs	r3, r2, r3
 80144c2:	4a1f      	ldr	r2, [pc, #124]	; (8014540 <prvHeapInit+0xac>)
 80144c4:	4413      	add	r3, r2
 80144c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80144cc:	4a1d      	ldr	r2, [pc, #116]	; (8014544 <prvHeapInit+0xb0>)
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80144d2:	4b1c      	ldr	r3, [pc, #112]	; (8014544 <prvHeapInit+0xb0>)
 80144d4:	2200      	movs	r2, #0
 80144d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	68ba      	ldr	r2, [r7, #8]
 80144dc:	4413      	add	r3, r2
 80144de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80144e0:	2208      	movs	r2, #8
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	1a9b      	subs	r3, r3, r2
 80144e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	f023 0307 	bic.w	r3, r3, #7
 80144ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	4a15      	ldr	r2, [pc, #84]	; (8014548 <prvHeapInit+0xb4>)
 80144f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80144f6:	4b14      	ldr	r3, [pc, #80]	; (8014548 <prvHeapInit+0xb4>)
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	2200      	movs	r2, #0
 80144fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80144fe:	4b12      	ldr	r3, [pc, #72]	; (8014548 <prvHeapInit+0xb4>)
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	2200      	movs	r2, #0
 8014504:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	68fa      	ldr	r2, [r7, #12]
 801450e:	1ad2      	subs	r2, r2, r3
 8014510:	683b      	ldr	r3, [r7, #0]
 8014512:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014514:	4b0c      	ldr	r3, [pc, #48]	; (8014548 <prvHeapInit+0xb4>)
 8014516:	681a      	ldr	r2, [r3, #0]
 8014518:	683b      	ldr	r3, [r7, #0]
 801451a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801451c:	683b      	ldr	r3, [r7, #0]
 801451e:	685b      	ldr	r3, [r3, #4]
 8014520:	4a0a      	ldr	r2, [pc, #40]	; (801454c <prvHeapInit+0xb8>)
 8014522:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014524:	683b      	ldr	r3, [r7, #0]
 8014526:	685b      	ldr	r3, [r3, #4]
 8014528:	4a09      	ldr	r2, [pc, #36]	; (8014550 <prvHeapInit+0xbc>)
 801452a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801452c:	4b09      	ldr	r3, [pc, #36]	; (8014554 <prvHeapInit+0xc0>)
 801452e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014532:	601a      	str	r2, [r3, #0]
}
 8014534:	bf00      	nop
 8014536:	3714      	adds	r7, #20
 8014538:	46bd      	mov	sp, r7
 801453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801453e:	4770      	bx	lr
 8014540:	20000f80 	.word	0x20000f80
 8014544:	20008f80 	.word	0x20008f80
 8014548:	20008f88 	.word	0x20008f88
 801454c:	20008f90 	.word	0x20008f90
 8014550:	20008f8c 	.word	0x20008f8c
 8014554:	20008f94 	.word	0x20008f94

08014558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014558:	b480      	push	{r7}
 801455a:	b085      	sub	sp, #20
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014560:	4b28      	ldr	r3, [pc, #160]	; (8014604 <prvInsertBlockIntoFreeList+0xac>)
 8014562:	60fb      	str	r3, [r7, #12]
 8014564:	e002      	b.n	801456c <prvInsertBlockIntoFreeList+0x14>
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	60fb      	str	r3, [r7, #12]
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	687a      	ldr	r2, [r7, #4]
 8014572:	429a      	cmp	r2, r3
 8014574:	d8f7      	bhi.n	8014566 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	685b      	ldr	r3, [r3, #4]
 801457e:	68ba      	ldr	r2, [r7, #8]
 8014580:	4413      	add	r3, r2
 8014582:	687a      	ldr	r2, [r7, #4]
 8014584:	429a      	cmp	r2, r3
 8014586:	d108      	bne.n	801459a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	685a      	ldr	r2, [r3, #4]
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	685b      	ldr	r3, [r3, #4]
 8014590:	441a      	add	r2, r3
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	685b      	ldr	r3, [r3, #4]
 80145a2:	68ba      	ldr	r2, [r7, #8]
 80145a4:	441a      	add	r2, r3
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	429a      	cmp	r2, r3
 80145ac:	d118      	bne.n	80145e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	681a      	ldr	r2, [r3, #0]
 80145b2:	4b15      	ldr	r3, [pc, #84]	; (8014608 <prvInsertBlockIntoFreeList+0xb0>)
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	429a      	cmp	r2, r3
 80145b8:	d00d      	beq.n	80145d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	685a      	ldr	r2, [r3, #4]
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	685b      	ldr	r3, [r3, #4]
 80145c4:	441a      	add	r2, r3
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	681a      	ldr	r2, [r3, #0]
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	601a      	str	r2, [r3, #0]
 80145d4:	e008      	b.n	80145e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80145d6:	4b0c      	ldr	r3, [pc, #48]	; (8014608 <prvInsertBlockIntoFreeList+0xb0>)
 80145d8:	681a      	ldr	r2, [r3, #0]
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	601a      	str	r2, [r3, #0]
 80145de:	e003      	b.n	80145e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	681a      	ldr	r2, [r3, #0]
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80145e8:	68fa      	ldr	r2, [r7, #12]
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	429a      	cmp	r2, r3
 80145ee:	d002      	beq.n	80145f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	687a      	ldr	r2, [r7, #4]
 80145f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80145f6:	bf00      	nop
 80145f8:	3714      	adds	r7, #20
 80145fa:	46bd      	mov	sp, r7
 80145fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014600:	4770      	bx	lr
 8014602:	bf00      	nop
 8014604:	20008f80 	.word	0x20008f80
 8014608:	20008f88 	.word	0x20008f88

0801460c <__cvt>:
 801460c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014610:	ec55 4b10 	vmov	r4, r5, d0
 8014614:	2d00      	cmp	r5, #0
 8014616:	460e      	mov	r6, r1
 8014618:	4619      	mov	r1, r3
 801461a:	462b      	mov	r3, r5
 801461c:	bfbb      	ittet	lt
 801461e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014622:	461d      	movlt	r5, r3
 8014624:	2300      	movge	r3, #0
 8014626:	232d      	movlt	r3, #45	; 0x2d
 8014628:	700b      	strb	r3, [r1, #0]
 801462a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801462c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014630:	4691      	mov	r9, r2
 8014632:	f023 0820 	bic.w	r8, r3, #32
 8014636:	bfbc      	itt	lt
 8014638:	4622      	movlt	r2, r4
 801463a:	4614      	movlt	r4, r2
 801463c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014640:	d005      	beq.n	801464e <__cvt+0x42>
 8014642:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014646:	d100      	bne.n	801464a <__cvt+0x3e>
 8014648:	3601      	adds	r6, #1
 801464a:	2102      	movs	r1, #2
 801464c:	e000      	b.n	8014650 <__cvt+0x44>
 801464e:	2103      	movs	r1, #3
 8014650:	ab03      	add	r3, sp, #12
 8014652:	9301      	str	r3, [sp, #4]
 8014654:	ab02      	add	r3, sp, #8
 8014656:	9300      	str	r3, [sp, #0]
 8014658:	ec45 4b10 	vmov	d0, r4, r5
 801465c:	4653      	mov	r3, sl
 801465e:	4632      	mov	r2, r6
 8014660:	f001 f922 	bl	80158a8 <_dtoa_r>
 8014664:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014668:	4607      	mov	r7, r0
 801466a:	d102      	bne.n	8014672 <__cvt+0x66>
 801466c:	f019 0f01 	tst.w	r9, #1
 8014670:	d022      	beq.n	80146b8 <__cvt+0xac>
 8014672:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014676:	eb07 0906 	add.w	r9, r7, r6
 801467a:	d110      	bne.n	801469e <__cvt+0x92>
 801467c:	783b      	ldrb	r3, [r7, #0]
 801467e:	2b30      	cmp	r3, #48	; 0x30
 8014680:	d10a      	bne.n	8014698 <__cvt+0x8c>
 8014682:	2200      	movs	r2, #0
 8014684:	2300      	movs	r3, #0
 8014686:	4620      	mov	r0, r4
 8014688:	4629      	mov	r1, r5
 801468a:	f7ec fa45 	bl	8000b18 <__aeabi_dcmpeq>
 801468e:	b918      	cbnz	r0, 8014698 <__cvt+0x8c>
 8014690:	f1c6 0601 	rsb	r6, r6, #1
 8014694:	f8ca 6000 	str.w	r6, [sl]
 8014698:	f8da 3000 	ldr.w	r3, [sl]
 801469c:	4499      	add	r9, r3
 801469e:	2200      	movs	r2, #0
 80146a0:	2300      	movs	r3, #0
 80146a2:	4620      	mov	r0, r4
 80146a4:	4629      	mov	r1, r5
 80146a6:	f7ec fa37 	bl	8000b18 <__aeabi_dcmpeq>
 80146aa:	b108      	cbz	r0, 80146b0 <__cvt+0xa4>
 80146ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80146b0:	2230      	movs	r2, #48	; 0x30
 80146b2:	9b03      	ldr	r3, [sp, #12]
 80146b4:	454b      	cmp	r3, r9
 80146b6:	d307      	bcc.n	80146c8 <__cvt+0xbc>
 80146b8:	9b03      	ldr	r3, [sp, #12]
 80146ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80146bc:	1bdb      	subs	r3, r3, r7
 80146be:	4638      	mov	r0, r7
 80146c0:	6013      	str	r3, [r2, #0]
 80146c2:	b004      	add	sp, #16
 80146c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146c8:	1c59      	adds	r1, r3, #1
 80146ca:	9103      	str	r1, [sp, #12]
 80146cc:	701a      	strb	r2, [r3, #0]
 80146ce:	e7f0      	b.n	80146b2 <__cvt+0xa6>

080146d0 <__exponent>:
 80146d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80146d2:	4603      	mov	r3, r0
 80146d4:	2900      	cmp	r1, #0
 80146d6:	bfb8      	it	lt
 80146d8:	4249      	neglt	r1, r1
 80146da:	f803 2b02 	strb.w	r2, [r3], #2
 80146de:	bfb4      	ite	lt
 80146e0:	222d      	movlt	r2, #45	; 0x2d
 80146e2:	222b      	movge	r2, #43	; 0x2b
 80146e4:	2909      	cmp	r1, #9
 80146e6:	7042      	strb	r2, [r0, #1]
 80146e8:	dd2a      	ble.n	8014740 <__exponent+0x70>
 80146ea:	f10d 0207 	add.w	r2, sp, #7
 80146ee:	4617      	mov	r7, r2
 80146f0:	260a      	movs	r6, #10
 80146f2:	4694      	mov	ip, r2
 80146f4:	fb91 f5f6 	sdiv	r5, r1, r6
 80146f8:	fb06 1415 	mls	r4, r6, r5, r1
 80146fc:	3430      	adds	r4, #48	; 0x30
 80146fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8014702:	460c      	mov	r4, r1
 8014704:	2c63      	cmp	r4, #99	; 0x63
 8014706:	f102 32ff 	add.w	r2, r2, #4294967295
 801470a:	4629      	mov	r1, r5
 801470c:	dcf1      	bgt.n	80146f2 <__exponent+0x22>
 801470e:	3130      	adds	r1, #48	; 0x30
 8014710:	f1ac 0402 	sub.w	r4, ip, #2
 8014714:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014718:	1c41      	adds	r1, r0, #1
 801471a:	4622      	mov	r2, r4
 801471c:	42ba      	cmp	r2, r7
 801471e:	d30a      	bcc.n	8014736 <__exponent+0x66>
 8014720:	f10d 0209 	add.w	r2, sp, #9
 8014724:	eba2 020c 	sub.w	r2, r2, ip
 8014728:	42bc      	cmp	r4, r7
 801472a:	bf88      	it	hi
 801472c:	2200      	movhi	r2, #0
 801472e:	4413      	add	r3, r2
 8014730:	1a18      	subs	r0, r3, r0
 8014732:	b003      	add	sp, #12
 8014734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014736:	f812 5b01 	ldrb.w	r5, [r2], #1
 801473a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801473e:	e7ed      	b.n	801471c <__exponent+0x4c>
 8014740:	2330      	movs	r3, #48	; 0x30
 8014742:	3130      	adds	r1, #48	; 0x30
 8014744:	7083      	strb	r3, [r0, #2]
 8014746:	70c1      	strb	r1, [r0, #3]
 8014748:	1d03      	adds	r3, r0, #4
 801474a:	e7f1      	b.n	8014730 <__exponent+0x60>

0801474c <_printf_float>:
 801474c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014750:	ed2d 8b02 	vpush	{d8}
 8014754:	b08d      	sub	sp, #52	; 0x34
 8014756:	460c      	mov	r4, r1
 8014758:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801475c:	4616      	mov	r6, r2
 801475e:	461f      	mov	r7, r3
 8014760:	4605      	mov	r5, r0
 8014762:	f000 ff37 	bl	80155d4 <_localeconv_r>
 8014766:	f8d0 a000 	ldr.w	sl, [r0]
 801476a:	4650      	mov	r0, sl
 801476c:	f7eb fda8 	bl	80002c0 <strlen>
 8014770:	2300      	movs	r3, #0
 8014772:	930a      	str	r3, [sp, #40]	; 0x28
 8014774:	6823      	ldr	r3, [r4, #0]
 8014776:	9305      	str	r3, [sp, #20]
 8014778:	f8d8 3000 	ldr.w	r3, [r8]
 801477c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014780:	3307      	adds	r3, #7
 8014782:	f023 0307 	bic.w	r3, r3, #7
 8014786:	f103 0208 	add.w	r2, r3, #8
 801478a:	f8c8 2000 	str.w	r2, [r8]
 801478e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014792:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014796:	9307      	str	r3, [sp, #28]
 8014798:	f8cd 8018 	str.w	r8, [sp, #24]
 801479c:	ee08 0a10 	vmov	s16, r0
 80147a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80147a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80147a8:	4b9e      	ldr	r3, [pc, #632]	; (8014a24 <_printf_float+0x2d8>)
 80147aa:	f04f 32ff 	mov.w	r2, #4294967295
 80147ae:	f7ec f9e5 	bl	8000b7c <__aeabi_dcmpun>
 80147b2:	bb88      	cbnz	r0, 8014818 <_printf_float+0xcc>
 80147b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80147b8:	4b9a      	ldr	r3, [pc, #616]	; (8014a24 <_printf_float+0x2d8>)
 80147ba:	f04f 32ff 	mov.w	r2, #4294967295
 80147be:	f7ec f9bf 	bl	8000b40 <__aeabi_dcmple>
 80147c2:	bb48      	cbnz	r0, 8014818 <_printf_float+0xcc>
 80147c4:	2200      	movs	r2, #0
 80147c6:	2300      	movs	r3, #0
 80147c8:	4640      	mov	r0, r8
 80147ca:	4649      	mov	r1, r9
 80147cc:	f7ec f9ae 	bl	8000b2c <__aeabi_dcmplt>
 80147d0:	b110      	cbz	r0, 80147d8 <_printf_float+0x8c>
 80147d2:	232d      	movs	r3, #45	; 0x2d
 80147d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80147d8:	4a93      	ldr	r2, [pc, #588]	; (8014a28 <_printf_float+0x2dc>)
 80147da:	4b94      	ldr	r3, [pc, #592]	; (8014a2c <_printf_float+0x2e0>)
 80147dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80147e0:	bf94      	ite	ls
 80147e2:	4690      	movls	r8, r2
 80147e4:	4698      	movhi	r8, r3
 80147e6:	2303      	movs	r3, #3
 80147e8:	6123      	str	r3, [r4, #16]
 80147ea:	9b05      	ldr	r3, [sp, #20]
 80147ec:	f023 0304 	bic.w	r3, r3, #4
 80147f0:	6023      	str	r3, [r4, #0]
 80147f2:	f04f 0900 	mov.w	r9, #0
 80147f6:	9700      	str	r7, [sp, #0]
 80147f8:	4633      	mov	r3, r6
 80147fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80147fc:	4621      	mov	r1, r4
 80147fe:	4628      	mov	r0, r5
 8014800:	f000 f9da 	bl	8014bb8 <_printf_common>
 8014804:	3001      	adds	r0, #1
 8014806:	f040 8090 	bne.w	801492a <_printf_float+0x1de>
 801480a:	f04f 30ff 	mov.w	r0, #4294967295
 801480e:	b00d      	add	sp, #52	; 0x34
 8014810:	ecbd 8b02 	vpop	{d8}
 8014814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014818:	4642      	mov	r2, r8
 801481a:	464b      	mov	r3, r9
 801481c:	4640      	mov	r0, r8
 801481e:	4649      	mov	r1, r9
 8014820:	f7ec f9ac 	bl	8000b7c <__aeabi_dcmpun>
 8014824:	b140      	cbz	r0, 8014838 <_printf_float+0xec>
 8014826:	464b      	mov	r3, r9
 8014828:	2b00      	cmp	r3, #0
 801482a:	bfbc      	itt	lt
 801482c:	232d      	movlt	r3, #45	; 0x2d
 801482e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014832:	4a7f      	ldr	r2, [pc, #508]	; (8014a30 <_printf_float+0x2e4>)
 8014834:	4b7f      	ldr	r3, [pc, #508]	; (8014a34 <_printf_float+0x2e8>)
 8014836:	e7d1      	b.n	80147dc <_printf_float+0x90>
 8014838:	6863      	ldr	r3, [r4, #4]
 801483a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801483e:	9206      	str	r2, [sp, #24]
 8014840:	1c5a      	adds	r2, r3, #1
 8014842:	d13f      	bne.n	80148c4 <_printf_float+0x178>
 8014844:	2306      	movs	r3, #6
 8014846:	6063      	str	r3, [r4, #4]
 8014848:	9b05      	ldr	r3, [sp, #20]
 801484a:	6861      	ldr	r1, [r4, #4]
 801484c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014850:	2300      	movs	r3, #0
 8014852:	9303      	str	r3, [sp, #12]
 8014854:	ab0a      	add	r3, sp, #40	; 0x28
 8014856:	e9cd b301 	strd	fp, r3, [sp, #4]
 801485a:	ab09      	add	r3, sp, #36	; 0x24
 801485c:	ec49 8b10 	vmov	d0, r8, r9
 8014860:	9300      	str	r3, [sp, #0]
 8014862:	6022      	str	r2, [r4, #0]
 8014864:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014868:	4628      	mov	r0, r5
 801486a:	f7ff fecf 	bl	801460c <__cvt>
 801486e:	9b06      	ldr	r3, [sp, #24]
 8014870:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014872:	2b47      	cmp	r3, #71	; 0x47
 8014874:	4680      	mov	r8, r0
 8014876:	d108      	bne.n	801488a <_printf_float+0x13e>
 8014878:	1cc8      	adds	r0, r1, #3
 801487a:	db02      	blt.n	8014882 <_printf_float+0x136>
 801487c:	6863      	ldr	r3, [r4, #4]
 801487e:	4299      	cmp	r1, r3
 8014880:	dd41      	ble.n	8014906 <_printf_float+0x1ba>
 8014882:	f1ab 0302 	sub.w	r3, fp, #2
 8014886:	fa5f fb83 	uxtb.w	fp, r3
 801488a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801488e:	d820      	bhi.n	80148d2 <_printf_float+0x186>
 8014890:	3901      	subs	r1, #1
 8014892:	465a      	mov	r2, fp
 8014894:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014898:	9109      	str	r1, [sp, #36]	; 0x24
 801489a:	f7ff ff19 	bl	80146d0 <__exponent>
 801489e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80148a0:	1813      	adds	r3, r2, r0
 80148a2:	2a01      	cmp	r2, #1
 80148a4:	4681      	mov	r9, r0
 80148a6:	6123      	str	r3, [r4, #16]
 80148a8:	dc02      	bgt.n	80148b0 <_printf_float+0x164>
 80148aa:	6822      	ldr	r2, [r4, #0]
 80148ac:	07d2      	lsls	r2, r2, #31
 80148ae:	d501      	bpl.n	80148b4 <_printf_float+0x168>
 80148b0:	3301      	adds	r3, #1
 80148b2:	6123      	str	r3, [r4, #16]
 80148b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d09c      	beq.n	80147f6 <_printf_float+0xaa>
 80148bc:	232d      	movs	r3, #45	; 0x2d
 80148be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80148c2:	e798      	b.n	80147f6 <_printf_float+0xaa>
 80148c4:	9a06      	ldr	r2, [sp, #24]
 80148c6:	2a47      	cmp	r2, #71	; 0x47
 80148c8:	d1be      	bne.n	8014848 <_printf_float+0xfc>
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d1bc      	bne.n	8014848 <_printf_float+0xfc>
 80148ce:	2301      	movs	r3, #1
 80148d0:	e7b9      	b.n	8014846 <_printf_float+0xfa>
 80148d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80148d6:	d118      	bne.n	801490a <_printf_float+0x1be>
 80148d8:	2900      	cmp	r1, #0
 80148da:	6863      	ldr	r3, [r4, #4]
 80148dc:	dd0b      	ble.n	80148f6 <_printf_float+0x1aa>
 80148de:	6121      	str	r1, [r4, #16]
 80148e0:	b913      	cbnz	r3, 80148e8 <_printf_float+0x19c>
 80148e2:	6822      	ldr	r2, [r4, #0]
 80148e4:	07d0      	lsls	r0, r2, #31
 80148e6:	d502      	bpl.n	80148ee <_printf_float+0x1a2>
 80148e8:	3301      	adds	r3, #1
 80148ea:	440b      	add	r3, r1
 80148ec:	6123      	str	r3, [r4, #16]
 80148ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80148f0:	f04f 0900 	mov.w	r9, #0
 80148f4:	e7de      	b.n	80148b4 <_printf_float+0x168>
 80148f6:	b913      	cbnz	r3, 80148fe <_printf_float+0x1b2>
 80148f8:	6822      	ldr	r2, [r4, #0]
 80148fa:	07d2      	lsls	r2, r2, #31
 80148fc:	d501      	bpl.n	8014902 <_printf_float+0x1b6>
 80148fe:	3302      	adds	r3, #2
 8014900:	e7f4      	b.n	80148ec <_printf_float+0x1a0>
 8014902:	2301      	movs	r3, #1
 8014904:	e7f2      	b.n	80148ec <_printf_float+0x1a0>
 8014906:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801490a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801490c:	4299      	cmp	r1, r3
 801490e:	db05      	blt.n	801491c <_printf_float+0x1d0>
 8014910:	6823      	ldr	r3, [r4, #0]
 8014912:	6121      	str	r1, [r4, #16]
 8014914:	07d8      	lsls	r0, r3, #31
 8014916:	d5ea      	bpl.n	80148ee <_printf_float+0x1a2>
 8014918:	1c4b      	adds	r3, r1, #1
 801491a:	e7e7      	b.n	80148ec <_printf_float+0x1a0>
 801491c:	2900      	cmp	r1, #0
 801491e:	bfd4      	ite	le
 8014920:	f1c1 0202 	rsble	r2, r1, #2
 8014924:	2201      	movgt	r2, #1
 8014926:	4413      	add	r3, r2
 8014928:	e7e0      	b.n	80148ec <_printf_float+0x1a0>
 801492a:	6823      	ldr	r3, [r4, #0]
 801492c:	055a      	lsls	r2, r3, #21
 801492e:	d407      	bmi.n	8014940 <_printf_float+0x1f4>
 8014930:	6923      	ldr	r3, [r4, #16]
 8014932:	4642      	mov	r2, r8
 8014934:	4631      	mov	r1, r6
 8014936:	4628      	mov	r0, r5
 8014938:	47b8      	blx	r7
 801493a:	3001      	adds	r0, #1
 801493c:	d12c      	bne.n	8014998 <_printf_float+0x24c>
 801493e:	e764      	b.n	801480a <_printf_float+0xbe>
 8014940:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014944:	f240 80e0 	bls.w	8014b08 <_printf_float+0x3bc>
 8014948:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801494c:	2200      	movs	r2, #0
 801494e:	2300      	movs	r3, #0
 8014950:	f7ec f8e2 	bl	8000b18 <__aeabi_dcmpeq>
 8014954:	2800      	cmp	r0, #0
 8014956:	d034      	beq.n	80149c2 <_printf_float+0x276>
 8014958:	4a37      	ldr	r2, [pc, #220]	; (8014a38 <_printf_float+0x2ec>)
 801495a:	2301      	movs	r3, #1
 801495c:	4631      	mov	r1, r6
 801495e:	4628      	mov	r0, r5
 8014960:	47b8      	blx	r7
 8014962:	3001      	adds	r0, #1
 8014964:	f43f af51 	beq.w	801480a <_printf_float+0xbe>
 8014968:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801496c:	429a      	cmp	r2, r3
 801496e:	db02      	blt.n	8014976 <_printf_float+0x22a>
 8014970:	6823      	ldr	r3, [r4, #0]
 8014972:	07d8      	lsls	r0, r3, #31
 8014974:	d510      	bpl.n	8014998 <_printf_float+0x24c>
 8014976:	ee18 3a10 	vmov	r3, s16
 801497a:	4652      	mov	r2, sl
 801497c:	4631      	mov	r1, r6
 801497e:	4628      	mov	r0, r5
 8014980:	47b8      	blx	r7
 8014982:	3001      	adds	r0, #1
 8014984:	f43f af41 	beq.w	801480a <_printf_float+0xbe>
 8014988:	f04f 0800 	mov.w	r8, #0
 801498c:	f104 091a 	add.w	r9, r4, #26
 8014990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014992:	3b01      	subs	r3, #1
 8014994:	4543      	cmp	r3, r8
 8014996:	dc09      	bgt.n	80149ac <_printf_float+0x260>
 8014998:	6823      	ldr	r3, [r4, #0]
 801499a:	079b      	lsls	r3, r3, #30
 801499c:	f100 8107 	bmi.w	8014bae <_printf_float+0x462>
 80149a0:	68e0      	ldr	r0, [r4, #12]
 80149a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149a4:	4298      	cmp	r0, r3
 80149a6:	bfb8      	it	lt
 80149a8:	4618      	movlt	r0, r3
 80149aa:	e730      	b.n	801480e <_printf_float+0xc2>
 80149ac:	2301      	movs	r3, #1
 80149ae:	464a      	mov	r2, r9
 80149b0:	4631      	mov	r1, r6
 80149b2:	4628      	mov	r0, r5
 80149b4:	47b8      	blx	r7
 80149b6:	3001      	adds	r0, #1
 80149b8:	f43f af27 	beq.w	801480a <_printf_float+0xbe>
 80149bc:	f108 0801 	add.w	r8, r8, #1
 80149c0:	e7e6      	b.n	8014990 <_printf_float+0x244>
 80149c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	dc39      	bgt.n	8014a3c <_printf_float+0x2f0>
 80149c8:	4a1b      	ldr	r2, [pc, #108]	; (8014a38 <_printf_float+0x2ec>)
 80149ca:	2301      	movs	r3, #1
 80149cc:	4631      	mov	r1, r6
 80149ce:	4628      	mov	r0, r5
 80149d0:	47b8      	blx	r7
 80149d2:	3001      	adds	r0, #1
 80149d4:	f43f af19 	beq.w	801480a <_printf_float+0xbe>
 80149d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80149dc:	4313      	orrs	r3, r2
 80149de:	d102      	bne.n	80149e6 <_printf_float+0x29a>
 80149e0:	6823      	ldr	r3, [r4, #0]
 80149e2:	07d9      	lsls	r1, r3, #31
 80149e4:	d5d8      	bpl.n	8014998 <_printf_float+0x24c>
 80149e6:	ee18 3a10 	vmov	r3, s16
 80149ea:	4652      	mov	r2, sl
 80149ec:	4631      	mov	r1, r6
 80149ee:	4628      	mov	r0, r5
 80149f0:	47b8      	blx	r7
 80149f2:	3001      	adds	r0, #1
 80149f4:	f43f af09 	beq.w	801480a <_printf_float+0xbe>
 80149f8:	f04f 0900 	mov.w	r9, #0
 80149fc:	f104 0a1a 	add.w	sl, r4, #26
 8014a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a02:	425b      	negs	r3, r3
 8014a04:	454b      	cmp	r3, r9
 8014a06:	dc01      	bgt.n	8014a0c <_printf_float+0x2c0>
 8014a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a0a:	e792      	b.n	8014932 <_printf_float+0x1e6>
 8014a0c:	2301      	movs	r3, #1
 8014a0e:	4652      	mov	r2, sl
 8014a10:	4631      	mov	r1, r6
 8014a12:	4628      	mov	r0, r5
 8014a14:	47b8      	blx	r7
 8014a16:	3001      	adds	r0, #1
 8014a18:	f43f aef7 	beq.w	801480a <_printf_float+0xbe>
 8014a1c:	f109 0901 	add.w	r9, r9, #1
 8014a20:	e7ee      	b.n	8014a00 <_printf_float+0x2b4>
 8014a22:	bf00      	nop
 8014a24:	7fefffff 	.word	0x7fefffff
 8014a28:	0801c068 	.word	0x0801c068
 8014a2c:	0801c06c 	.word	0x0801c06c
 8014a30:	0801c070 	.word	0x0801c070
 8014a34:	0801c074 	.word	0x0801c074
 8014a38:	0801c400 	.word	0x0801c400
 8014a3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014a40:	429a      	cmp	r2, r3
 8014a42:	bfa8      	it	ge
 8014a44:	461a      	movge	r2, r3
 8014a46:	2a00      	cmp	r2, #0
 8014a48:	4691      	mov	r9, r2
 8014a4a:	dc37      	bgt.n	8014abc <_printf_float+0x370>
 8014a4c:	f04f 0b00 	mov.w	fp, #0
 8014a50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014a54:	f104 021a 	add.w	r2, r4, #26
 8014a58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014a5a:	9305      	str	r3, [sp, #20]
 8014a5c:	eba3 0309 	sub.w	r3, r3, r9
 8014a60:	455b      	cmp	r3, fp
 8014a62:	dc33      	bgt.n	8014acc <_printf_float+0x380>
 8014a64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014a68:	429a      	cmp	r2, r3
 8014a6a:	db3b      	blt.n	8014ae4 <_printf_float+0x398>
 8014a6c:	6823      	ldr	r3, [r4, #0]
 8014a6e:	07da      	lsls	r2, r3, #31
 8014a70:	d438      	bmi.n	8014ae4 <_printf_float+0x398>
 8014a72:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014a76:	eba2 0903 	sub.w	r9, r2, r3
 8014a7a:	9b05      	ldr	r3, [sp, #20]
 8014a7c:	1ad2      	subs	r2, r2, r3
 8014a7e:	4591      	cmp	r9, r2
 8014a80:	bfa8      	it	ge
 8014a82:	4691      	movge	r9, r2
 8014a84:	f1b9 0f00 	cmp.w	r9, #0
 8014a88:	dc35      	bgt.n	8014af6 <_printf_float+0x3aa>
 8014a8a:	f04f 0800 	mov.w	r8, #0
 8014a8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014a92:	f104 0a1a 	add.w	sl, r4, #26
 8014a96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014a9a:	1a9b      	subs	r3, r3, r2
 8014a9c:	eba3 0309 	sub.w	r3, r3, r9
 8014aa0:	4543      	cmp	r3, r8
 8014aa2:	f77f af79 	ble.w	8014998 <_printf_float+0x24c>
 8014aa6:	2301      	movs	r3, #1
 8014aa8:	4652      	mov	r2, sl
 8014aaa:	4631      	mov	r1, r6
 8014aac:	4628      	mov	r0, r5
 8014aae:	47b8      	blx	r7
 8014ab0:	3001      	adds	r0, #1
 8014ab2:	f43f aeaa 	beq.w	801480a <_printf_float+0xbe>
 8014ab6:	f108 0801 	add.w	r8, r8, #1
 8014aba:	e7ec      	b.n	8014a96 <_printf_float+0x34a>
 8014abc:	4613      	mov	r3, r2
 8014abe:	4631      	mov	r1, r6
 8014ac0:	4642      	mov	r2, r8
 8014ac2:	4628      	mov	r0, r5
 8014ac4:	47b8      	blx	r7
 8014ac6:	3001      	adds	r0, #1
 8014ac8:	d1c0      	bne.n	8014a4c <_printf_float+0x300>
 8014aca:	e69e      	b.n	801480a <_printf_float+0xbe>
 8014acc:	2301      	movs	r3, #1
 8014ace:	4631      	mov	r1, r6
 8014ad0:	4628      	mov	r0, r5
 8014ad2:	9205      	str	r2, [sp, #20]
 8014ad4:	47b8      	blx	r7
 8014ad6:	3001      	adds	r0, #1
 8014ad8:	f43f ae97 	beq.w	801480a <_printf_float+0xbe>
 8014adc:	9a05      	ldr	r2, [sp, #20]
 8014ade:	f10b 0b01 	add.w	fp, fp, #1
 8014ae2:	e7b9      	b.n	8014a58 <_printf_float+0x30c>
 8014ae4:	ee18 3a10 	vmov	r3, s16
 8014ae8:	4652      	mov	r2, sl
 8014aea:	4631      	mov	r1, r6
 8014aec:	4628      	mov	r0, r5
 8014aee:	47b8      	blx	r7
 8014af0:	3001      	adds	r0, #1
 8014af2:	d1be      	bne.n	8014a72 <_printf_float+0x326>
 8014af4:	e689      	b.n	801480a <_printf_float+0xbe>
 8014af6:	9a05      	ldr	r2, [sp, #20]
 8014af8:	464b      	mov	r3, r9
 8014afa:	4442      	add	r2, r8
 8014afc:	4631      	mov	r1, r6
 8014afe:	4628      	mov	r0, r5
 8014b00:	47b8      	blx	r7
 8014b02:	3001      	adds	r0, #1
 8014b04:	d1c1      	bne.n	8014a8a <_printf_float+0x33e>
 8014b06:	e680      	b.n	801480a <_printf_float+0xbe>
 8014b08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b0a:	2a01      	cmp	r2, #1
 8014b0c:	dc01      	bgt.n	8014b12 <_printf_float+0x3c6>
 8014b0e:	07db      	lsls	r3, r3, #31
 8014b10:	d53a      	bpl.n	8014b88 <_printf_float+0x43c>
 8014b12:	2301      	movs	r3, #1
 8014b14:	4642      	mov	r2, r8
 8014b16:	4631      	mov	r1, r6
 8014b18:	4628      	mov	r0, r5
 8014b1a:	47b8      	blx	r7
 8014b1c:	3001      	adds	r0, #1
 8014b1e:	f43f ae74 	beq.w	801480a <_printf_float+0xbe>
 8014b22:	ee18 3a10 	vmov	r3, s16
 8014b26:	4652      	mov	r2, sl
 8014b28:	4631      	mov	r1, r6
 8014b2a:	4628      	mov	r0, r5
 8014b2c:	47b8      	blx	r7
 8014b2e:	3001      	adds	r0, #1
 8014b30:	f43f ae6b 	beq.w	801480a <_printf_float+0xbe>
 8014b34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014b38:	2200      	movs	r2, #0
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8014b40:	f7eb ffea 	bl	8000b18 <__aeabi_dcmpeq>
 8014b44:	b9d8      	cbnz	r0, 8014b7e <_printf_float+0x432>
 8014b46:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014b4a:	f108 0201 	add.w	r2, r8, #1
 8014b4e:	4631      	mov	r1, r6
 8014b50:	4628      	mov	r0, r5
 8014b52:	47b8      	blx	r7
 8014b54:	3001      	adds	r0, #1
 8014b56:	d10e      	bne.n	8014b76 <_printf_float+0x42a>
 8014b58:	e657      	b.n	801480a <_printf_float+0xbe>
 8014b5a:	2301      	movs	r3, #1
 8014b5c:	4652      	mov	r2, sl
 8014b5e:	4631      	mov	r1, r6
 8014b60:	4628      	mov	r0, r5
 8014b62:	47b8      	blx	r7
 8014b64:	3001      	adds	r0, #1
 8014b66:	f43f ae50 	beq.w	801480a <_printf_float+0xbe>
 8014b6a:	f108 0801 	add.w	r8, r8, #1
 8014b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b70:	3b01      	subs	r3, #1
 8014b72:	4543      	cmp	r3, r8
 8014b74:	dcf1      	bgt.n	8014b5a <_printf_float+0x40e>
 8014b76:	464b      	mov	r3, r9
 8014b78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014b7c:	e6da      	b.n	8014934 <_printf_float+0x1e8>
 8014b7e:	f04f 0800 	mov.w	r8, #0
 8014b82:	f104 0a1a 	add.w	sl, r4, #26
 8014b86:	e7f2      	b.n	8014b6e <_printf_float+0x422>
 8014b88:	2301      	movs	r3, #1
 8014b8a:	4642      	mov	r2, r8
 8014b8c:	e7df      	b.n	8014b4e <_printf_float+0x402>
 8014b8e:	2301      	movs	r3, #1
 8014b90:	464a      	mov	r2, r9
 8014b92:	4631      	mov	r1, r6
 8014b94:	4628      	mov	r0, r5
 8014b96:	47b8      	blx	r7
 8014b98:	3001      	adds	r0, #1
 8014b9a:	f43f ae36 	beq.w	801480a <_printf_float+0xbe>
 8014b9e:	f108 0801 	add.w	r8, r8, #1
 8014ba2:	68e3      	ldr	r3, [r4, #12]
 8014ba4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014ba6:	1a5b      	subs	r3, r3, r1
 8014ba8:	4543      	cmp	r3, r8
 8014baa:	dcf0      	bgt.n	8014b8e <_printf_float+0x442>
 8014bac:	e6f8      	b.n	80149a0 <_printf_float+0x254>
 8014bae:	f04f 0800 	mov.w	r8, #0
 8014bb2:	f104 0919 	add.w	r9, r4, #25
 8014bb6:	e7f4      	b.n	8014ba2 <_printf_float+0x456>

08014bb8 <_printf_common>:
 8014bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bbc:	4616      	mov	r6, r2
 8014bbe:	4699      	mov	r9, r3
 8014bc0:	688a      	ldr	r2, [r1, #8]
 8014bc2:	690b      	ldr	r3, [r1, #16]
 8014bc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014bc8:	4293      	cmp	r3, r2
 8014bca:	bfb8      	it	lt
 8014bcc:	4613      	movlt	r3, r2
 8014bce:	6033      	str	r3, [r6, #0]
 8014bd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014bd4:	4607      	mov	r7, r0
 8014bd6:	460c      	mov	r4, r1
 8014bd8:	b10a      	cbz	r2, 8014bde <_printf_common+0x26>
 8014bda:	3301      	adds	r3, #1
 8014bdc:	6033      	str	r3, [r6, #0]
 8014bde:	6823      	ldr	r3, [r4, #0]
 8014be0:	0699      	lsls	r1, r3, #26
 8014be2:	bf42      	ittt	mi
 8014be4:	6833      	ldrmi	r3, [r6, #0]
 8014be6:	3302      	addmi	r3, #2
 8014be8:	6033      	strmi	r3, [r6, #0]
 8014bea:	6825      	ldr	r5, [r4, #0]
 8014bec:	f015 0506 	ands.w	r5, r5, #6
 8014bf0:	d106      	bne.n	8014c00 <_printf_common+0x48>
 8014bf2:	f104 0a19 	add.w	sl, r4, #25
 8014bf6:	68e3      	ldr	r3, [r4, #12]
 8014bf8:	6832      	ldr	r2, [r6, #0]
 8014bfa:	1a9b      	subs	r3, r3, r2
 8014bfc:	42ab      	cmp	r3, r5
 8014bfe:	dc26      	bgt.n	8014c4e <_printf_common+0x96>
 8014c00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014c04:	1e13      	subs	r3, r2, #0
 8014c06:	6822      	ldr	r2, [r4, #0]
 8014c08:	bf18      	it	ne
 8014c0a:	2301      	movne	r3, #1
 8014c0c:	0692      	lsls	r2, r2, #26
 8014c0e:	d42b      	bmi.n	8014c68 <_printf_common+0xb0>
 8014c10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014c14:	4649      	mov	r1, r9
 8014c16:	4638      	mov	r0, r7
 8014c18:	47c0      	blx	r8
 8014c1a:	3001      	adds	r0, #1
 8014c1c:	d01e      	beq.n	8014c5c <_printf_common+0xa4>
 8014c1e:	6823      	ldr	r3, [r4, #0]
 8014c20:	6922      	ldr	r2, [r4, #16]
 8014c22:	f003 0306 	and.w	r3, r3, #6
 8014c26:	2b04      	cmp	r3, #4
 8014c28:	bf02      	ittt	eq
 8014c2a:	68e5      	ldreq	r5, [r4, #12]
 8014c2c:	6833      	ldreq	r3, [r6, #0]
 8014c2e:	1aed      	subeq	r5, r5, r3
 8014c30:	68a3      	ldr	r3, [r4, #8]
 8014c32:	bf0c      	ite	eq
 8014c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014c38:	2500      	movne	r5, #0
 8014c3a:	4293      	cmp	r3, r2
 8014c3c:	bfc4      	itt	gt
 8014c3e:	1a9b      	subgt	r3, r3, r2
 8014c40:	18ed      	addgt	r5, r5, r3
 8014c42:	2600      	movs	r6, #0
 8014c44:	341a      	adds	r4, #26
 8014c46:	42b5      	cmp	r5, r6
 8014c48:	d11a      	bne.n	8014c80 <_printf_common+0xc8>
 8014c4a:	2000      	movs	r0, #0
 8014c4c:	e008      	b.n	8014c60 <_printf_common+0xa8>
 8014c4e:	2301      	movs	r3, #1
 8014c50:	4652      	mov	r2, sl
 8014c52:	4649      	mov	r1, r9
 8014c54:	4638      	mov	r0, r7
 8014c56:	47c0      	blx	r8
 8014c58:	3001      	adds	r0, #1
 8014c5a:	d103      	bne.n	8014c64 <_printf_common+0xac>
 8014c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8014c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c64:	3501      	adds	r5, #1
 8014c66:	e7c6      	b.n	8014bf6 <_printf_common+0x3e>
 8014c68:	18e1      	adds	r1, r4, r3
 8014c6a:	1c5a      	adds	r2, r3, #1
 8014c6c:	2030      	movs	r0, #48	; 0x30
 8014c6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014c72:	4422      	add	r2, r4
 8014c74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014c78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014c7c:	3302      	adds	r3, #2
 8014c7e:	e7c7      	b.n	8014c10 <_printf_common+0x58>
 8014c80:	2301      	movs	r3, #1
 8014c82:	4622      	mov	r2, r4
 8014c84:	4649      	mov	r1, r9
 8014c86:	4638      	mov	r0, r7
 8014c88:	47c0      	blx	r8
 8014c8a:	3001      	adds	r0, #1
 8014c8c:	d0e6      	beq.n	8014c5c <_printf_common+0xa4>
 8014c8e:	3601      	adds	r6, #1
 8014c90:	e7d9      	b.n	8014c46 <_printf_common+0x8e>
	...

08014c94 <_printf_i>:
 8014c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014c98:	7e0f      	ldrb	r7, [r1, #24]
 8014c9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014c9c:	2f78      	cmp	r7, #120	; 0x78
 8014c9e:	4691      	mov	r9, r2
 8014ca0:	4680      	mov	r8, r0
 8014ca2:	460c      	mov	r4, r1
 8014ca4:	469a      	mov	sl, r3
 8014ca6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014caa:	d807      	bhi.n	8014cbc <_printf_i+0x28>
 8014cac:	2f62      	cmp	r7, #98	; 0x62
 8014cae:	d80a      	bhi.n	8014cc6 <_printf_i+0x32>
 8014cb0:	2f00      	cmp	r7, #0
 8014cb2:	f000 80d4 	beq.w	8014e5e <_printf_i+0x1ca>
 8014cb6:	2f58      	cmp	r7, #88	; 0x58
 8014cb8:	f000 80c0 	beq.w	8014e3c <_printf_i+0x1a8>
 8014cbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014cc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014cc4:	e03a      	b.n	8014d3c <_printf_i+0xa8>
 8014cc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014cca:	2b15      	cmp	r3, #21
 8014ccc:	d8f6      	bhi.n	8014cbc <_printf_i+0x28>
 8014cce:	a101      	add	r1, pc, #4	; (adr r1, 8014cd4 <_printf_i+0x40>)
 8014cd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014cd4:	08014d2d 	.word	0x08014d2d
 8014cd8:	08014d41 	.word	0x08014d41
 8014cdc:	08014cbd 	.word	0x08014cbd
 8014ce0:	08014cbd 	.word	0x08014cbd
 8014ce4:	08014cbd 	.word	0x08014cbd
 8014ce8:	08014cbd 	.word	0x08014cbd
 8014cec:	08014d41 	.word	0x08014d41
 8014cf0:	08014cbd 	.word	0x08014cbd
 8014cf4:	08014cbd 	.word	0x08014cbd
 8014cf8:	08014cbd 	.word	0x08014cbd
 8014cfc:	08014cbd 	.word	0x08014cbd
 8014d00:	08014e45 	.word	0x08014e45
 8014d04:	08014d6d 	.word	0x08014d6d
 8014d08:	08014dff 	.word	0x08014dff
 8014d0c:	08014cbd 	.word	0x08014cbd
 8014d10:	08014cbd 	.word	0x08014cbd
 8014d14:	08014e67 	.word	0x08014e67
 8014d18:	08014cbd 	.word	0x08014cbd
 8014d1c:	08014d6d 	.word	0x08014d6d
 8014d20:	08014cbd 	.word	0x08014cbd
 8014d24:	08014cbd 	.word	0x08014cbd
 8014d28:	08014e07 	.word	0x08014e07
 8014d2c:	682b      	ldr	r3, [r5, #0]
 8014d2e:	1d1a      	adds	r2, r3, #4
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	602a      	str	r2, [r5, #0]
 8014d34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014d3c:	2301      	movs	r3, #1
 8014d3e:	e09f      	b.n	8014e80 <_printf_i+0x1ec>
 8014d40:	6820      	ldr	r0, [r4, #0]
 8014d42:	682b      	ldr	r3, [r5, #0]
 8014d44:	0607      	lsls	r7, r0, #24
 8014d46:	f103 0104 	add.w	r1, r3, #4
 8014d4a:	6029      	str	r1, [r5, #0]
 8014d4c:	d501      	bpl.n	8014d52 <_printf_i+0xbe>
 8014d4e:	681e      	ldr	r6, [r3, #0]
 8014d50:	e003      	b.n	8014d5a <_printf_i+0xc6>
 8014d52:	0646      	lsls	r6, r0, #25
 8014d54:	d5fb      	bpl.n	8014d4e <_printf_i+0xba>
 8014d56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014d5a:	2e00      	cmp	r6, #0
 8014d5c:	da03      	bge.n	8014d66 <_printf_i+0xd2>
 8014d5e:	232d      	movs	r3, #45	; 0x2d
 8014d60:	4276      	negs	r6, r6
 8014d62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014d66:	485a      	ldr	r0, [pc, #360]	; (8014ed0 <_printf_i+0x23c>)
 8014d68:	230a      	movs	r3, #10
 8014d6a:	e012      	b.n	8014d92 <_printf_i+0xfe>
 8014d6c:	682b      	ldr	r3, [r5, #0]
 8014d6e:	6820      	ldr	r0, [r4, #0]
 8014d70:	1d19      	adds	r1, r3, #4
 8014d72:	6029      	str	r1, [r5, #0]
 8014d74:	0605      	lsls	r5, r0, #24
 8014d76:	d501      	bpl.n	8014d7c <_printf_i+0xe8>
 8014d78:	681e      	ldr	r6, [r3, #0]
 8014d7a:	e002      	b.n	8014d82 <_printf_i+0xee>
 8014d7c:	0641      	lsls	r1, r0, #25
 8014d7e:	d5fb      	bpl.n	8014d78 <_printf_i+0xe4>
 8014d80:	881e      	ldrh	r6, [r3, #0]
 8014d82:	4853      	ldr	r0, [pc, #332]	; (8014ed0 <_printf_i+0x23c>)
 8014d84:	2f6f      	cmp	r7, #111	; 0x6f
 8014d86:	bf0c      	ite	eq
 8014d88:	2308      	moveq	r3, #8
 8014d8a:	230a      	movne	r3, #10
 8014d8c:	2100      	movs	r1, #0
 8014d8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014d92:	6865      	ldr	r5, [r4, #4]
 8014d94:	60a5      	str	r5, [r4, #8]
 8014d96:	2d00      	cmp	r5, #0
 8014d98:	bfa2      	ittt	ge
 8014d9a:	6821      	ldrge	r1, [r4, #0]
 8014d9c:	f021 0104 	bicge.w	r1, r1, #4
 8014da0:	6021      	strge	r1, [r4, #0]
 8014da2:	b90e      	cbnz	r6, 8014da8 <_printf_i+0x114>
 8014da4:	2d00      	cmp	r5, #0
 8014da6:	d04b      	beq.n	8014e40 <_printf_i+0x1ac>
 8014da8:	4615      	mov	r5, r2
 8014daa:	fbb6 f1f3 	udiv	r1, r6, r3
 8014dae:	fb03 6711 	mls	r7, r3, r1, r6
 8014db2:	5dc7      	ldrb	r7, [r0, r7]
 8014db4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014db8:	4637      	mov	r7, r6
 8014dba:	42bb      	cmp	r3, r7
 8014dbc:	460e      	mov	r6, r1
 8014dbe:	d9f4      	bls.n	8014daa <_printf_i+0x116>
 8014dc0:	2b08      	cmp	r3, #8
 8014dc2:	d10b      	bne.n	8014ddc <_printf_i+0x148>
 8014dc4:	6823      	ldr	r3, [r4, #0]
 8014dc6:	07de      	lsls	r6, r3, #31
 8014dc8:	d508      	bpl.n	8014ddc <_printf_i+0x148>
 8014dca:	6923      	ldr	r3, [r4, #16]
 8014dcc:	6861      	ldr	r1, [r4, #4]
 8014dce:	4299      	cmp	r1, r3
 8014dd0:	bfde      	ittt	le
 8014dd2:	2330      	movle	r3, #48	; 0x30
 8014dd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014dd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014ddc:	1b52      	subs	r2, r2, r5
 8014dde:	6122      	str	r2, [r4, #16]
 8014de0:	f8cd a000 	str.w	sl, [sp]
 8014de4:	464b      	mov	r3, r9
 8014de6:	aa03      	add	r2, sp, #12
 8014de8:	4621      	mov	r1, r4
 8014dea:	4640      	mov	r0, r8
 8014dec:	f7ff fee4 	bl	8014bb8 <_printf_common>
 8014df0:	3001      	adds	r0, #1
 8014df2:	d14a      	bne.n	8014e8a <_printf_i+0x1f6>
 8014df4:	f04f 30ff 	mov.w	r0, #4294967295
 8014df8:	b004      	add	sp, #16
 8014dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dfe:	6823      	ldr	r3, [r4, #0]
 8014e00:	f043 0320 	orr.w	r3, r3, #32
 8014e04:	6023      	str	r3, [r4, #0]
 8014e06:	4833      	ldr	r0, [pc, #204]	; (8014ed4 <_printf_i+0x240>)
 8014e08:	2778      	movs	r7, #120	; 0x78
 8014e0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014e0e:	6823      	ldr	r3, [r4, #0]
 8014e10:	6829      	ldr	r1, [r5, #0]
 8014e12:	061f      	lsls	r7, r3, #24
 8014e14:	f851 6b04 	ldr.w	r6, [r1], #4
 8014e18:	d402      	bmi.n	8014e20 <_printf_i+0x18c>
 8014e1a:	065f      	lsls	r7, r3, #25
 8014e1c:	bf48      	it	mi
 8014e1e:	b2b6      	uxthmi	r6, r6
 8014e20:	07df      	lsls	r7, r3, #31
 8014e22:	bf48      	it	mi
 8014e24:	f043 0320 	orrmi.w	r3, r3, #32
 8014e28:	6029      	str	r1, [r5, #0]
 8014e2a:	bf48      	it	mi
 8014e2c:	6023      	strmi	r3, [r4, #0]
 8014e2e:	b91e      	cbnz	r6, 8014e38 <_printf_i+0x1a4>
 8014e30:	6823      	ldr	r3, [r4, #0]
 8014e32:	f023 0320 	bic.w	r3, r3, #32
 8014e36:	6023      	str	r3, [r4, #0]
 8014e38:	2310      	movs	r3, #16
 8014e3a:	e7a7      	b.n	8014d8c <_printf_i+0xf8>
 8014e3c:	4824      	ldr	r0, [pc, #144]	; (8014ed0 <_printf_i+0x23c>)
 8014e3e:	e7e4      	b.n	8014e0a <_printf_i+0x176>
 8014e40:	4615      	mov	r5, r2
 8014e42:	e7bd      	b.n	8014dc0 <_printf_i+0x12c>
 8014e44:	682b      	ldr	r3, [r5, #0]
 8014e46:	6826      	ldr	r6, [r4, #0]
 8014e48:	6961      	ldr	r1, [r4, #20]
 8014e4a:	1d18      	adds	r0, r3, #4
 8014e4c:	6028      	str	r0, [r5, #0]
 8014e4e:	0635      	lsls	r5, r6, #24
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	d501      	bpl.n	8014e58 <_printf_i+0x1c4>
 8014e54:	6019      	str	r1, [r3, #0]
 8014e56:	e002      	b.n	8014e5e <_printf_i+0x1ca>
 8014e58:	0670      	lsls	r0, r6, #25
 8014e5a:	d5fb      	bpl.n	8014e54 <_printf_i+0x1c0>
 8014e5c:	8019      	strh	r1, [r3, #0]
 8014e5e:	2300      	movs	r3, #0
 8014e60:	6123      	str	r3, [r4, #16]
 8014e62:	4615      	mov	r5, r2
 8014e64:	e7bc      	b.n	8014de0 <_printf_i+0x14c>
 8014e66:	682b      	ldr	r3, [r5, #0]
 8014e68:	1d1a      	adds	r2, r3, #4
 8014e6a:	602a      	str	r2, [r5, #0]
 8014e6c:	681d      	ldr	r5, [r3, #0]
 8014e6e:	6862      	ldr	r2, [r4, #4]
 8014e70:	2100      	movs	r1, #0
 8014e72:	4628      	mov	r0, r5
 8014e74:	f7eb f9d4 	bl	8000220 <memchr>
 8014e78:	b108      	cbz	r0, 8014e7e <_printf_i+0x1ea>
 8014e7a:	1b40      	subs	r0, r0, r5
 8014e7c:	6060      	str	r0, [r4, #4]
 8014e7e:	6863      	ldr	r3, [r4, #4]
 8014e80:	6123      	str	r3, [r4, #16]
 8014e82:	2300      	movs	r3, #0
 8014e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014e88:	e7aa      	b.n	8014de0 <_printf_i+0x14c>
 8014e8a:	6923      	ldr	r3, [r4, #16]
 8014e8c:	462a      	mov	r2, r5
 8014e8e:	4649      	mov	r1, r9
 8014e90:	4640      	mov	r0, r8
 8014e92:	47d0      	blx	sl
 8014e94:	3001      	adds	r0, #1
 8014e96:	d0ad      	beq.n	8014df4 <_printf_i+0x160>
 8014e98:	6823      	ldr	r3, [r4, #0]
 8014e9a:	079b      	lsls	r3, r3, #30
 8014e9c:	d413      	bmi.n	8014ec6 <_printf_i+0x232>
 8014e9e:	68e0      	ldr	r0, [r4, #12]
 8014ea0:	9b03      	ldr	r3, [sp, #12]
 8014ea2:	4298      	cmp	r0, r3
 8014ea4:	bfb8      	it	lt
 8014ea6:	4618      	movlt	r0, r3
 8014ea8:	e7a6      	b.n	8014df8 <_printf_i+0x164>
 8014eaa:	2301      	movs	r3, #1
 8014eac:	4632      	mov	r2, r6
 8014eae:	4649      	mov	r1, r9
 8014eb0:	4640      	mov	r0, r8
 8014eb2:	47d0      	blx	sl
 8014eb4:	3001      	adds	r0, #1
 8014eb6:	d09d      	beq.n	8014df4 <_printf_i+0x160>
 8014eb8:	3501      	adds	r5, #1
 8014eba:	68e3      	ldr	r3, [r4, #12]
 8014ebc:	9903      	ldr	r1, [sp, #12]
 8014ebe:	1a5b      	subs	r3, r3, r1
 8014ec0:	42ab      	cmp	r3, r5
 8014ec2:	dcf2      	bgt.n	8014eaa <_printf_i+0x216>
 8014ec4:	e7eb      	b.n	8014e9e <_printf_i+0x20a>
 8014ec6:	2500      	movs	r5, #0
 8014ec8:	f104 0619 	add.w	r6, r4, #25
 8014ecc:	e7f5      	b.n	8014eba <_printf_i+0x226>
 8014ece:	bf00      	nop
 8014ed0:	0801c078 	.word	0x0801c078
 8014ed4:	0801c089 	.word	0x0801c089

08014ed8 <_scanf_float>:
 8014ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014edc:	b087      	sub	sp, #28
 8014ede:	4617      	mov	r7, r2
 8014ee0:	9303      	str	r3, [sp, #12]
 8014ee2:	688b      	ldr	r3, [r1, #8]
 8014ee4:	1e5a      	subs	r2, r3, #1
 8014ee6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014eea:	bf83      	ittte	hi
 8014eec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014ef0:	195b      	addhi	r3, r3, r5
 8014ef2:	9302      	strhi	r3, [sp, #8]
 8014ef4:	2300      	movls	r3, #0
 8014ef6:	bf86      	itte	hi
 8014ef8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014efc:	608b      	strhi	r3, [r1, #8]
 8014efe:	9302      	strls	r3, [sp, #8]
 8014f00:	680b      	ldr	r3, [r1, #0]
 8014f02:	468b      	mov	fp, r1
 8014f04:	2500      	movs	r5, #0
 8014f06:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8014f0a:	f84b 3b1c 	str.w	r3, [fp], #28
 8014f0e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014f12:	4680      	mov	r8, r0
 8014f14:	460c      	mov	r4, r1
 8014f16:	465e      	mov	r6, fp
 8014f18:	46aa      	mov	sl, r5
 8014f1a:	46a9      	mov	r9, r5
 8014f1c:	9501      	str	r5, [sp, #4]
 8014f1e:	68a2      	ldr	r2, [r4, #8]
 8014f20:	b152      	cbz	r2, 8014f38 <_scanf_float+0x60>
 8014f22:	683b      	ldr	r3, [r7, #0]
 8014f24:	781b      	ldrb	r3, [r3, #0]
 8014f26:	2b4e      	cmp	r3, #78	; 0x4e
 8014f28:	d864      	bhi.n	8014ff4 <_scanf_float+0x11c>
 8014f2a:	2b40      	cmp	r3, #64	; 0x40
 8014f2c:	d83c      	bhi.n	8014fa8 <_scanf_float+0xd0>
 8014f2e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8014f32:	b2c8      	uxtb	r0, r1
 8014f34:	280e      	cmp	r0, #14
 8014f36:	d93a      	bls.n	8014fae <_scanf_float+0xd6>
 8014f38:	f1b9 0f00 	cmp.w	r9, #0
 8014f3c:	d003      	beq.n	8014f46 <_scanf_float+0x6e>
 8014f3e:	6823      	ldr	r3, [r4, #0]
 8014f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014f44:	6023      	str	r3, [r4, #0]
 8014f46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014f4a:	f1ba 0f01 	cmp.w	sl, #1
 8014f4e:	f200 8113 	bhi.w	8015178 <_scanf_float+0x2a0>
 8014f52:	455e      	cmp	r6, fp
 8014f54:	f200 8105 	bhi.w	8015162 <_scanf_float+0x28a>
 8014f58:	2501      	movs	r5, #1
 8014f5a:	4628      	mov	r0, r5
 8014f5c:	b007      	add	sp, #28
 8014f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f62:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8014f66:	2a0d      	cmp	r2, #13
 8014f68:	d8e6      	bhi.n	8014f38 <_scanf_float+0x60>
 8014f6a:	a101      	add	r1, pc, #4	; (adr r1, 8014f70 <_scanf_float+0x98>)
 8014f6c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014f70:	080150af 	.word	0x080150af
 8014f74:	08014f39 	.word	0x08014f39
 8014f78:	08014f39 	.word	0x08014f39
 8014f7c:	08014f39 	.word	0x08014f39
 8014f80:	0801510f 	.word	0x0801510f
 8014f84:	080150e7 	.word	0x080150e7
 8014f88:	08014f39 	.word	0x08014f39
 8014f8c:	08014f39 	.word	0x08014f39
 8014f90:	080150bd 	.word	0x080150bd
 8014f94:	08014f39 	.word	0x08014f39
 8014f98:	08014f39 	.word	0x08014f39
 8014f9c:	08014f39 	.word	0x08014f39
 8014fa0:	08014f39 	.word	0x08014f39
 8014fa4:	08015075 	.word	0x08015075
 8014fa8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8014fac:	e7db      	b.n	8014f66 <_scanf_float+0x8e>
 8014fae:	290e      	cmp	r1, #14
 8014fb0:	d8c2      	bhi.n	8014f38 <_scanf_float+0x60>
 8014fb2:	a001      	add	r0, pc, #4	; (adr r0, 8014fb8 <_scanf_float+0xe0>)
 8014fb4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014fb8:	08015067 	.word	0x08015067
 8014fbc:	08014f39 	.word	0x08014f39
 8014fc0:	08015067 	.word	0x08015067
 8014fc4:	080150fb 	.word	0x080150fb
 8014fc8:	08014f39 	.word	0x08014f39
 8014fcc:	08015015 	.word	0x08015015
 8014fd0:	08015051 	.word	0x08015051
 8014fd4:	08015051 	.word	0x08015051
 8014fd8:	08015051 	.word	0x08015051
 8014fdc:	08015051 	.word	0x08015051
 8014fe0:	08015051 	.word	0x08015051
 8014fe4:	08015051 	.word	0x08015051
 8014fe8:	08015051 	.word	0x08015051
 8014fec:	08015051 	.word	0x08015051
 8014ff0:	08015051 	.word	0x08015051
 8014ff4:	2b6e      	cmp	r3, #110	; 0x6e
 8014ff6:	d809      	bhi.n	801500c <_scanf_float+0x134>
 8014ff8:	2b60      	cmp	r3, #96	; 0x60
 8014ffa:	d8b2      	bhi.n	8014f62 <_scanf_float+0x8a>
 8014ffc:	2b54      	cmp	r3, #84	; 0x54
 8014ffe:	d077      	beq.n	80150f0 <_scanf_float+0x218>
 8015000:	2b59      	cmp	r3, #89	; 0x59
 8015002:	d199      	bne.n	8014f38 <_scanf_float+0x60>
 8015004:	2d07      	cmp	r5, #7
 8015006:	d197      	bne.n	8014f38 <_scanf_float+0x60>
 8015008:	2508      	movs	r5, #8
 801500a:	e029      	b.n	8015060 <_scanf_float+0x188>
 801500c:	2b74      	cmp	r3, #116	; 0x74
 801500e:	d06f      	beq.n	80150f0 <_scanf_float+0x218>
 8015010:	2b79      	cmp	r3, #121	; 0x79
 8015012:	e7f6      	b.n	8015002 <_scanf_float+0x12a>
 8015014:	6821      	ldr	r1, [r4, #0]
 8015016:	05c8      	lsls	r0, r1, #23
 8015018:	d51a      	bpl.n	8015050 <_scanf_float+0x178>
 801501a:	9b02      	ldr	r3, [sp, #8]
 801501c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015020:	6021      	str	r1, [r4, #0]
 8015022:	f109 0901 	add.w	r9, r9, #1
 8015026:	b11b      	cbz	r3, 8015030 <_scanf_float+0x158>
 8015028:	3b01      	subs	r3, #1
 801502a:	3201      	adds	r2, #1
 801502c:	9302      	str	r3, [sp, #8]
 801502e:	60a2      	str	r2, [r4, #8]
 8015030:	68a3      	ldr	r3, [r4, #8]
 8015032:	3b01      	subs	r3, #1
 8015034:	60a3      	str	r3, [r4, #8]
 8015036:	6923      	ldr	r3, [r4, #16]
 8015038:	3301      	adds	r3, #1
 801503a:	6123      	str	r3, [r4, #16]
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	3b01      	subs	r3, #1
 8015040:	2b00      	cmp	r3, #0
 8015042:	607b      	str	r3, [r7, #4]
 8015044:	f340 8084 	ble.w	8015150 <_scanf_float+0x278>
 8015048:	683b      	ldr	r3, [r7, #0]
 801504a:	3301      	adds	r3, #1
 801504c:	603b      	str	r3, [r7, #0]
 801504e:	e766      	b.n	8014f1e <_scanf_float+0x46>
 8015050:	eb1a 0f05 	cmn.w	sl, r5
 8015054:	f47f af70 	bne.w	8014f38 <_scanf_float+0x60>
 8015058:	6822      	ldr	r2, [r4, #0]
 801505a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801505e:	6022      	str	r2, [r4, #0]
 8015060:	f806 3b01 	strb.w	r3, [r6], #1
 8015064:	e7e4      	b.n	8015030 <_scanf_float+0x158>
 8015066:	6822      	ldr	r2, [r4, #0]
 8015068:	0610      	lsls	r0, r2, #24
 801506a:	f57f af65 	bpl.w	8014f38 <_scanf_float+0x60>
 801506e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015072:	e7f4      	b.n	801505e <_scanf_float+0x186>
 8015074:	f1ba 0f00 	cmp.w	sl, #0
 8015078:	d10e      	bne.n	8015098 <_scanf_float+0x1c0>
 801507a:	f1b9 0f00 	cmp.w	r9, #0
 801507e:	d10e      	bne.n	801509e <_scanf_float+0x1c6>
 8015080:	6822      	ldr	r2, [r4, #0]
 8015082:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015086:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801508a:	d108      	bne.n	801509e <_scanf_float+0x1c6>
 801508c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015090:	6022      	str	r2, [r4, #0]
 8015092:	f04f 0a01 	mov.w	sl, #1
 8015096:	e7e3      	b.n	8015060 <_scanf_float+0x188>
 8015098:	f1ba 0f02 	cmp.w	sl, #2
 801509c:	d055      	beq.n	801514a <_scanf_float+0x272>
 801509e:	2d01      	cmp	r5, #1
 80150a0:	d002      	beq.n	80150a8 <_scanf_float+0x1d0>
 80150a2:	2d04      	cmp	r5, #4
 80150a4:	f47f af48 	bne.w	8014f38 <_scanf_float+0x60>
 80150a8:	3501      	adds	r5, #1
 80150aa:	b2ed      	uxtb	r5, r5
 80150ac:	e7d8      	b.n	8015060 <_scanf_float+0x188>
 80150ae:	f1ba 0f01 	cmp.w	sl, #1
 80150b2:	f47f af41 	bne.w	8014f38 <_scanf_float+0x60>
 80150b6:	f04f 0a02 	mov.w	sl, #2
 80150ba:	e7d1      	b.n	8015060 <_scanf_float+0x188>
 80150bc:	b97d      	cbnz	r5, 80150de <_scanf_float+0x206>
 80150be:	f1b9 0f00 	cmp.w	r9, #0
 80150c2:	f47f af3c 	bne.w	8014f3e <_scanf_float+0x66>
 80150c6:	6822      	ldr	r2, [r4, #0]
 80150c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80150cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80150d0:	f47f af39 	bne.w	8014f46 <_scanf_float+0x6e>
 80150d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80150d8:	6022      	str	r2, [r4, #0]
 80150da:	2501      	movs	r5, #1
 80150dc:	e7c0      	b.n	8015060 <_scanf_float+0x188>
 80150de:	2d03      	cmp	r5, #3
 80150e0:	d0e2      	beq.n	80150a8 <_scanf_float+0x1d0>
 80150e2:	2d05      	cmp	r5, #5
 80150e4:	e7de      	b.n	80150a4 <_scanf_float+0x1cc>
 80150e6:	2d02      	cmp	r5, #2
 80150e8:	f47f af26 	bne.w	8014f38 <_scanf_float+0x60>
 80150ec:	2503      	movs	r5, #3
 80150ee:	e7b7      	b.n	8015060 <_scanf_float+0x188>
 80150f0:	2d06      	cmp	r5, #6
 80150f2:	f47f af21 	bne.w	8014f38 <_scanf_float+0x60>
 80150f6:	2507      	movs	r5, #7
 80150f8:	e7b2      	b.n	8015060 <_scanf_float+0x188>
 80150fa:	6822      	ldr	r2, [r4, #0]
 80150fc:	0591      	lsls	r1, r2, #22
 80150fe:	f57f af1b 	bpl.w	8014f38 <_scanf_float+0x60>
 8015102:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8015106:	6022      	str	r2, [r4, #0]
 8015108:	f8cd 9004 	str.w	r9, [sp, #4]
 801510c:	e7a8      	b.n	8015060 <_scanf_float+0x188>
 801510e:	6822      	ldr	r2, [r4, #0]
 8015110:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8015114:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8015118:	d006      	beq.n	8015128 <_scanf_float+0x250>
 801511a:	0550      	lsls	r0, r2, #21
 801511c:	f57f af0c 	bpl.w	8014f38 <_scanf_float+0x60>
 8015120:	f1b9 0f00 	cmp.w	r9, #0
 8015124:	f43f af0f 	beq.w	8014f46 <_scanf_float+0x6e>
 8015128:	0591      	lsls	r1, r2, #22
 801512a:	bf58      	it	pl
 801512c:	9901      	ldrpl	r1, [sp, #4]
 801512e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015132:	bf58      	it	pl
 8015134:	eba9 0101 	subpl.w	r1, r9, r1
 8015138:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801513c:	bf58      	it	pl
 801513e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8015142:	6022      	str	r2, [r4, #0]
 8015144:	f04f 0900 	mov.w	r9, #0
 8015148:	e78a      	b.n	8015060 <_scanf_float+0x188>
 801514a:	f04f 0a03 	mov.w	sl, #3
 801514e:	e787      	b.n	8015060 <_scanf_float+0x188>
 8015150:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015154:	4639      	mov	r1, r7
 8015156:	4640      	mov	r0, r8
 8015158:	4798      	blx	r3
 801515a:	2800      	cmp	r0, #0
 801515c:	f43f aedf 	beq.w	8014f1e <_scanf_float+0x46>
 8015160:	e6ea      	b.n	8014f38 <_scanf_float+0x60>
 8015162:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015166:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801516a:	463a      	mov	r2, r7
 801516c:	4640      	mov	r0, r8
 801516e:	4798      	blx	r3
 8015170:	6923      	ldr	r3, [r4, #16]
 8015172:	3b01      	subs	r3, #1
 8015174:	6123      	str	r3, [r4, #16]
 8015176:	e6ec      	b.n	8014f52 <_scanf_float+0x7a>
 8015178:	1e6b      	subs	r3, r5, #1
 801517a:	2b06      	cmp	r3, #6
 801517c:	d825      	bhi.n	80151ca <_scanf_float+0x2f2>
 801517e:	2d02      	cmp	r5, #2
 8015180:	d836      	bhi.n	80151f0 <_scanf_float+0x318>
 8015182:	455e      	cmp	r6, fp
 8015184:	f67f aee8 	bls.w	8014f58 <_scanf_float+0x80>
 8015188:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801518c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015190:	463a      	mov	r2, r7
 8015192:	4640      	mov	r0, r8
 8015194:	4798      	blx	r3
 8015196:	6923      	ldr	r3, [r4, #16]
 8015198:	3b01      	subs	r3, #1
 801519a:	6123      	str	r3, [r4, #16]
 801519c:	e7f1      	b.n	8015182 <_scanf_float+0x2aa>
 801519e:	9802      	ldr	r0, [sp, #8]
 80151a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80151a4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80151a8:	9002      	str	r0, [sp, #8]
 80151aa:	463a      	mov	r2, r7
 80151ac:	4640      	mov	r0, r8
 80151ae:	4798      	blx	r3
 80151b0:	6923      	ldr	r3, [r4, #16]
 80151b2:	3b01      	subs	r3, #1
 80151b4:	6123      	str	r3, [r4, #16]
 80151b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80151ba:	fa5f fa8a 	uxtb.w	sl, sl
 80151be:	f1ba 0f02 	cmp.w	sl, #2
 80151c2:	d1ec      	bne.n	801519e <_scanf_float+0x2c6>
 80151c4:	3d03      	subs	r5, #3
 80151c6:	b2ed      	uxtb	r5, r5
 80151c8:	1b76      	subs	r6, r6, r5
 80151ca:	6823      	ldr	r3, [r4, #0]
 80151cc:	05da      	lsls	r2, r3, #23
 80151ce:	d52f      	bpl.n	8015230 <_scanf_float+0x358>
 80151d0:	055b      	lsls	r3, r3, #21
 80151d2:	d510      	bpl.n	80151f6 <_scanf_float+0x31e>
 80151d4:	455e      	cmp	r6, fp
 80151d6:	f67f aebf 	bls.w	8014f58 <_scanf_float+0x80>
 80151da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80151de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80151e2:	463a      	mov	r2, r7
 80151e4:	4640      	mov	r0, r8
 80151e6:	4798      	blx	r3
 80151e8:	6923      	ldr	r3, [r4, #16]
 80151ea:	3b01      	subs	r3, #1
 80151ec:	6123      	str	r3, [r4, #16]
 80151ee:	e7f1      	b.n	80151d4 <_scanf_float+0x2fc>
 80151f0:	46aa      	mov	sl, r5
 80151f2:	9602      	str	r6, [sp, #8]
 80151f4:	e7df      	b.n	80151b6 <_scanf_float+0x2de>
 80151f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80151fa:	6923      	ldr	r3, [r4, #16]
 80151fc:	2965      	cmp	r1, #101	; 0x65
 80151fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8015202:	f106 35ff 	add.w	r5, r6, #4294967295
 8015206:	6123      	str	r3, [r4, #16]
 8015208:	d00c      	beq.n	8015224 <_scanf_float+0x34c>
 801520a:	2945      	cmp	r1, #69	; 0x45
 801520c:	d00a      	beq.n	8015224 <_scanf_float+0x34c>
 801520e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015212:	463a      	mov	r2, r7
 8015214:	4640      	mov	r0, r8
 8015216:	4798      	blx	r3
 8015218:	6923      	ldr	r3, [r4, #16]
 801521a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801521e:	3b01      	subs	r3, #1
 8015220:	1eb5      	subs	r5, r6, #2
 8015222:	6123      	str	r3, [r4, #16]
 8015224:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015228:	463a      	mov	r2, r7
 801522a:	4640      	mov	r0, r8
 801522c:	4798      	blx	r3
 801522e:	462e      	mov	r6, r5
 8015230:	6825      	ldr	r5, [r4, #0]
 8015232:	f015 0510 	ands.w	r5, r5, #16
 8015236:	d158      	bne.n	80152ea <_scanf_float+0x412>
 8015238:	7035      	strb	r5, [r6, #0]
 801523a:	6823      	ldr	r3, [r4, #0]
 801523c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015244:	d11c      	bne.n	8015280 <_scanf_float+0x3a8>
 8015246:	9b01      	ldr	r3, [sp, #4]
 8015248:	454b      	cmp	r3, r9
 801524a:	eba3 0209 	sub.w	r2, r3, r9
 801524e:	d124      	bne.n	801529a <_scanf_float+0x3c2>
 8015250:	2200      	movs	r2, #0
 8015252:	4659      	mov	r1, fp
 8015254:	4640      	mov	r0, r8
 8015256:	f002 fcd3 	bl	8017c00 <_strtod_r>
 801525a:	9b03      	ldr	r3, [sp, #12]
 801525c:	6821      	ldr	r1, [r4, #0]
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	f011 0f02 	tst.w	r1, #2
 8015264:	ec57 6b10 	vmov	r6, r7, d0
 8015268:	f103 0204 	add.w	r2, r3, #4
 801526c:	d020      	beq.n	80152b0 <_scanf_float+0x3d8>
 801526e:	9903      	ldr	r1, [sp, #12]
 8015270:	600a      	str	r2, [r1, #0]
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	e9c3 6700 	strd	r6, r7, [r3]
 8015278:	68e3      	ldr	r3, [r4, #12]
 801527a:	3301      	adds	r3, #1
 801527c:	60e3      	str	r3, [r4, #12]
 801527e:	e66c      	b.n	8014f5a <_scanf_float+0x82>
 8015280:	9b04      	ldr	r3, [sp, #16]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d0e4      	beq.n	8015250 <_scanf_float+0x378>
 8015286:	9905      	ldr	r1, [sp, #20]
 8015288:	230a      	movs	r3, #10
 801528a:	462a      	mov	r2, r5
 801528c:	3101      	adds	r1, #1
 801528e:	4640      	mov	r0, r8
 8015290:	f002 fd3e 	bl	8017d10 <_strtol_r>
 8015294:	9b04      	ldr	r3, [sp, #16]
 8015296:	9e05      	ldr	r6, [sp, #20]
 8015298:	1ac2      	subs	r2, r0, r3
 801529a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801529e:	429e      	cmp	r6, r3
 80152a0:	bf28      	it	cs
 80152a2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80152a6:	4912      	ldr	r1, [pc, #72]	; (80152f0 <_scanf_float+0x418>)
 80152a8:	4630      	mov	r0, r6
 80152aa:	f000 f8e7 	bl	801547c <siprintf>
 80152ae:	e7cf      	b.n	8015250 <_scanf_float+0x378>
 80152b0:	f011 0f04 	tst.w	r1, #4
 80152b4:	9903      	ldr	r1, [sp, #12]
 80152b6:	600a      	str	r2, [r1, #0]
 80152b8:	d1db      	bne.n	8015272 <_scanf_float+0x39a>
 80152ba:	f8d3 8000 	ldr.w	r8, [r3]
 80152be:	ee10 2a10 	vmov	r2, s0
 80152c2:	ee10 0a10 	vmov	r0, s0
 80152c6:	463b      	mov	r3, r7
 80152c8:	4639      	mov	r1, r7
 80152ca:	f7eb fc57 	bl	8000b7c <__aeabi_dcmpun>
 80152ce:	b128      	cbz	r0, 80152dc <_scanf_float+0x404>
 80152d0:	4808      	ldr	r0, [pc, #32]	; (80152f4 <_scanf_float+0x41c>)
 80152d2:	f000 fa5b 	bl	801578c <nanf>
 80152d6:	ed88 0a00 	vstr	s0, [r8]
 80152da:	e7cd      	b.n	8015278 <_scanf_float+0x3a0>
 80152dc:	4630      	mov	r0, r6
 80152de:	4639      	mov	r1, r7
 80152e0:	f7eb fcaa 	bl	8000c38 <__aeabi_d2f>
 80152e4:	f8c8 0000 	str.w	r0, [r8]
 80152e8:	e7c6      	b.n	8015278 <_scanf_float+0x3a0>
 80152ea:	2500      	movs	r5, #0
 80152ec:	e635      	b.n	8014f5a <_scanf_float+0x82>
 80152ee:	bf00      	nop
 80152f0:	0801c09a 	.word	0x0801c09a
 80152f4:	0801c448 	.word	0x0801c448

080152f8 <std>:
 80152f8:	2300      	movs	r3, #0
 80152fa:	b510      	push	{r4, lr}
 80152fc:	4604      	mov	r4, r0
 80152fe:	e9c0 3300 	strd	r3, r3, [r0]
 8015302:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015306:	6083      	str	r3, [r0, #8]
 8015308:	8181      	strh	r1, [r0, #12]
 801530a:	6643      	str	r3, [r0, #100]	; 0x64
 801530c:	81c2      	strh	r2, [r0, #14]
 801530e:	6183      	str	r3, [r0, #24]
 8015310:	4619      	mov	r1, r3
 8015312:	2208      	movs	r2, #8
 8015314:	305c      	adds	r0, #92	; 0x5c
 8015316:	f000 f942 	bl	801559e <memset>
 801531a:	4b0d      	ldr	r3, [pc, #52]	; (8015350 <std+0x58>)
 801531c:	6263      	str	r3, [r4, #36]	; 0x24
 801531e:	4b0d      	ldr	r3, [pc, #52]	; (8015354 <std+0x5c>)
 8015320:	62a3      	str	r3, [r4, #40]	; 0x28
 8015322:	4b0d      	ldr	r3, [pc, #52]	; (8015358 <std+0x60>)
 8015324:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015326:	4b0d      	ldr	r3, [pc, #52]	; (801535c <std+0x64>)
 8015328:	6323      	str	r3, [r4, #48]	; 0x30
 801532a:	4b0d      	ldr	r3, [pc, #52]	; (8015360 <std+0x68>)
 801532c:	6224      	str	r4, [r4, #32]
 801532e:	429c      	cmp	r4, r3
 8015330:	d006      	beq.n	8015340 <std+0x48>
 8015332:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8015336:	4294      	cmp	r4, r2
 8015338:	d002      	beq.n	8015340 <std+0x48>
 801533a:	33d0      	adds	r3, #208	; 0xd0
 801533c:	429c      	cmp	r4, r3
 801533e:	d105      	bne.n	801534c <std+0x54>
 8015340:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015348:	f000 ba0e 	b.w	8015768 <__retarget_lock_init_recursive>
 801534c:	bd10      	pop	{r4, pc}
 801534e:	bf00      	nop
 8015350:	08015515 	.word	0x08015515
 8015354:	0801553b 	.word	0x0801553b
 8015358:	08015573 	.word	0x08015573
 801535c:	08015597 	.word	0x08015597
 8015360:	20008f98 	.word	0x20008f98

08015364 <stdio_exit_handler>:
 8015364:	4a02      	ldr	r2, [pc, #8]	; (8015370 <stdio_exit_handler+0xc>)
 8015366:	4903      	ldr	r1, [pc, #12]	; (8015374 <stdio_exit_handler+0x10>)
 8015368:	4803      	ldr	r0, [pc, #12]	; (8015378 <stdio_exit_handler+0x14>)
 801536a:	f000 b869 	b.w	8015440 <_fwalk_sglue>
 801536e:	bf00      	nop
 8015370:	20000018 	.word	0x20000018
 8015374:	08018711 	.word	0x08018711
 8015378:	20000024 	.word	0x20000024

0801537c <cleanup_stdio>:
 801537c:	6841      	ldr	r1, [r0, #4]
 801537e:	4b0c      	ldr	r3, [pc, #48]	; (80153b0 <cleanup_stdio+0x34>)
 8015380:	4299      	cmp	r1, r3
 8015382:	b510      	push	{r4, lr}
 8015384:	4604      	mov	r4, r0
 8015386:	d001      	beq.n	801538c <cleanup_stdio+0x10>
 8015388:	f003 f9c2 	bl	8018710 <_fflush_r>
 801538c:	68a1      	ldr	r1, [r4, #8]
 801538e:	4b09      	ldr	r3, [pc, #36]	; (80153b4 <cleanup_stdio+0x38>)
 8015390:	4299      	cmp	r1, r3
 8015392:	d002      	beq.n	801539a <cleanup_stdio+0x1e>
 8015394:	4620      	mov	r0, r4
 8015396:	f003 f9bb 	bl	8018710 <_fflush_r>
 801539a:	68e1      	ldr	r1, [r4, #12]
 801539c:	4b06      	ldr	r3, [pc, #24]	; (80153b8 <cleanup_stdio+0x3c>)
 801539e:	4299      	cmp	r1, r3
 80153a0:	d004      	beq.n	80153ac <cleanup_stdio+0x30>
 80153a2:	4620      	mov	r0, r4
 80153a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80153a8:	f003 b9b2 	b.w	8018710 <_fflush_r>
 80153ac:	bd10      	pop	{r4, pc}
 80153ae:	bf00      	nop
 80153b0:	20008f98 	.word	0x20008f98
 80153b4:	20009000 	.word	0x20009000
 80153b8:	20009068 	.word	0x20009068

080153bc <global_stdio_init.part.0>:
 80153bc:	b510      	push	{r4, lr}
 80153be:	4b0b      	ldr	r3, [pc, #44]	; (80153ec <global_stdio_init.part.0+0x30>)
 80153c0:	4c0b      	ldr	r4, [pc, #44]	; (80153f0 <global_stdio_init.part.0+0x34>)
 80153c2:	4a0c      	ldr	r2, [pc, #48]	; (80153f4 <global_stdio_init.part.0+0x38>)
 80153c4:	601a      	str	r2, [r3, #0]
 80153c6:	4620      	mov	r0, r4
 80153c8:	2200      	movs	r2, #0
 80153ca:	2104      	movs	r1, #4
 80153cc:	f7ff ff94 	bl	80152f8 <std>
 80153d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80153d4:	2201      	movs	r2, #1
 80153d6:	2109      	movs	r1, #9
 80153d8:	f7ff ff8e 	bl	80152f8 <std>
 80153dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80153e0:	2202      	movs	r2, #2
 80153e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80153e6:	2112      	movs	r1, #18
 80153e8:	f7ff bf86 	b.w	80152f8 <std>
 80153ec:	200090d0 	.word	0x200090d0
 80153f0:	20008f98 	.word	0x20008f98
 80153f4:	08015365 	.word	0x08015365

080153f8 <__sfp_lock_acquire>:
 80153f8:	4801      	ldr	r0, [pc, #4]	; (8015400 <__sfp_lock_acquire+0x8>)
 80153fa:	f000 b9b6 	b.w	801576a <__retarget_lock_acquire_recursive>
 80153fe:	bf00      	nop
 8015400:	200090d9 	.word	0x200090d9

08015404 <__sfp_lock_release>:
 8015404:	4801      	ldr	r0, [pc, #4]	; (801540c <__sfp_lock_release+0x8>)
 8015406:	f000 b9b1 	b.w	801576c <__retarget_lock_release_recursive>
 801540a:	bf00      	nop
 801540c:	200090d9 	.word	0x200090d9

08015410 <__sinit>:
 8015410:	b510      	push	{r4, lr}
 8015412:	4604      	mov	r4, r0
 8015414:	f7ff fff0 	bl	80153f8 <__sfp_lock_acquire>
 8015418:	6a23      	ldr	r3, [r4, #32]
 801541a:	b11b      	cbz	r3, 8015424 <__sinit+0x14>
 801541c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015420:	f7ff bff0 	b.w	8015404 <__sfp_lock_release>
 8015424:	4b04      	ldr	r3, [pc, #16]	; (8015438 <__sinit+0x28>)
 8015426:	6223      	str	r3, [r4, #32]
 8015428:	4b04      	ldr	r3, [pc, #16]	; (801543c <__sinit+0x2c>)
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d1f5      	bne.n	801541c <__sinit+0xc>
 8015430:	f7ff ffc4 	bl	80153bc <global_stdio_init.part.0>
 8015434:	e7f2      	b.n	801541c <__sinit+0xc>
 8015436:	bf00      	nop
 8015438:	0801537d 	.word	0x0801537d
 801543c:	200090d0 	.word	0x200090d0

08015440 <_fwalk_sglue>:
 8015440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015444:	4607      	mov	r7, r0
 8015446:	4688      	mov	r8, r1
 8015448:	4614      	mov	r4, r2
 801544a:	2600      	movs	r6, #0
 801544c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015450:	f1b9 0901 	subs.w	r9, r9, #1
 8015454:	d505      	bpl.n	8015462 <_fwalk_sglue+0x22>
 8015456:	6824      	ldr	r4, [r4, #0]
 8015458:	2c00      	cmp	r4, #0
 801545a:	d1f7      	bne.n	801544c <_fwalk_sglue+0xc>
 801545c:	4630      	mov	r0, r6
 801545e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015462:	89ab      	ldrh	r3, [r5, #12]
 8015464:	2b01      	cmp	r3, #1
 8015466:	d907      	bls.n	8015478 <_fwalk_sglue+0x38>
 8015468:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801546c:	3301      	adds	r3, #1
 801546e:	d003      	beq.n	8015478 <_fwalk_sglue+0x38>
 8015470:	4629      	mov	r1, r5
 8015472:	4638      	mov	r0, r7
 8015474:	47c0      	blx	r8
 8015476:	4306      	orrs	r6, r0
 8015478:	3568      	adds	r5, #104	; 0x68
 801547a:	e7e9      	b.n	8015450 <_fwalk_sglue+0x10>

0801547c <siprintf>:
 801547c:	b40e      	push	{r1, r2, r3}
 801547e:	b500      	push	{lr}
 8015480:	b09c      	sub	sp, #112	; 0x70
 8015482:	ab1d      	add	r3, sp, #116	; 0x74
 8015484:	9002      	str	r0, [sp, #8]
 8015486:	9006      	str	r0, [sp, #24]
 8015488:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801548c:	4809      	ldr	r0, [pc, #36]	; (80154b4 <siprintf+0x38>)
 801548e:	9107      	str	r1, [sp, #28]
 8015490:	9104      	str	r1, [sp, #16]
 8015492:	4909      	ldr	r1, [pc, #36]	; (80154b8 <siprintf+0x3c>)
 8015494:	f853 2b04 	ldr.w	r2, [r3], #4
 8015498:	9105      	str	r1, [sp, #20]
 801549a:	6800      	ldr	r0, [r0, #0]
 801549c:	9301      	str	r3, [sp, #4]
 801549e:	a902      	add	r1, sp, #8
 80154a0:	f002 fc92 	bl	8017dc8 <_svfiprintf_r>
 80154a4:	9b02      	ldr	r3, [sp, #8]
 80154a6:	2200      	movs	r2, #0
 80154a8:	701a      	strb	r2, [r3, #0]
 80154aa:	b01c      	add	sp, #112	; 0x70
 80154ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80154b0:	b003      	add	sp, #12
 80154b2:	4770      	bx	lr
 80154b4:	20000070 	.word	0x20000070
 80154b8:	ffff0208 	.word	0xffff0208

080154bc <siscanf>:
 80154bc:	b40e      	push	{r1, r2, r3}
 80154be:	b510      	push	{r4, lr}
 80154c0:	b09f      	sub	sp, #124	; 0x7c
 80154c2:	ac21      	add	r4, sp, #132	; 0x84
 80154c4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80154c8:	f854 2b04 	ldr.w	r2, [r4], #4
 80154cc:	9201      	str	r2, [sp, #4]
 80154ce:	f8ad 101c 	strh.w	r1, [sp, #28]
 80154d2:	9004      	str	r0, [sp, #16]
 80154d4:	9008      	str	r0, [sp, #32]
 80154d6:	f7ea fef3 	bl	80002c0 <strlen>
 80154da:	4b0c      	ldr	r3, [pc, #48]	; (801550c <siscanf+0x50>)
 80154dc:	9005      	str	r0, [sp, #20]
 80154de:	9009      	str	r0, [sp, #36]	; 0x24
 80154e0:	930d      	str	r3, [sp, #52]	; 0x34
 80154e2:	480b      	ldr	r0, [pc, #44]	; (8015510 <siscanf+0x54>)
 80154e4:	9a01      	ldr	r2, [sp, #4]
 80154e6:	6800      	ldr	r0, [r0, #0]
 80154e8:	9403      	str	r4, [sp, #12]
 80154ea:	2300      	movs	r3, #0
 80154ec:	9311      	str	r3, [sp, #68]	; 0x44
 80154ee:	9316      	str	r3, [sp, #88]	; 0x58
 80154f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80154f4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80154f8:	a904      	add	r1, sp, #16
 80154fa:	4623      	mov	r3, r4
 80154fc:	f002 fdbc 	bl	8018078 <__ssvfiscanf_r>
 8015500:	b01f      	add	sp, #124	; 0x7c
 8015502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015506:	b003      	add	sp, #12
 8015508:	4770      	bx	lr
 801550a:	bf00      	nop
 801550c:	08015537 	.word	0x08015537
 8015510:	20000070 	.word	0x20000070

08015514 <__sread>:
 8015514:	b510      	push	{r4, lr}
 8015516:	460c      	mov	r4, r1
 8015518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801551c:	f000 f8d6 	bl	80156cc <_read_r>
 8015520:	2800      	cmp	r0, #0
 8015522:	bfab      	itete	ge
 8015524:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015526:	89a3      	ldrhlt	r3, [r4, #12]
 8015528:	181b      	addge	r3, r3, r0
 801552a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801552e:	bfac      	ite	ge
 8015530:	6563      	strge	r3, [r4, #84]	; 0x54
 8015532:	81a3      	strhlt	r3, [r4, #12]
 8015534:	bd10      	pop	{r4, pc}

08015536 <__seofread>:
 8015536:	2000      	movs	r0, #0
 8015538:	4770      	bx	lr

0801553a <__swrite>:
 801553a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801553e:	461f      	mov	r7, r3
 8015540:	898b      	ldrh	r3, [r1, #12]
 8015542:	05db      	lsls	r3, r3, #23
 8015544:	4605      	mov	r5, r0
 8015546:	460c      	mov	r4, r1
 8015548:	4616      	mov	r6, r2
 801554a:	d505      	bpl.n	8015558 <__swrite+0x1e>
 801554c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015550:	2302      	movs	r3, #2
 8015552:	2200      	movs	r2, #0
 8015554:	f000 f8a8 	bl	80156a8 <_lseek_r>
 8015558:	89a3      	ldrh	r3, [r4, #12]
 801555a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801555e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015562:	81a3      	strh	r3, [r4, #12]
 8015564:	4632      	mov	r2, r6
 8015566:	463b      	mov	r3, r7
 8015568:	4628      	mov	r0, r5
 801556a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801556e:	f000 b8bf 	b.w	80156f0 <_write_r>

08015572 <__sseek>:
 8015572:	b510      	push	{r4, lr}
 8015574:	460c      	mov	r4, r1
 8015576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801557a:	f000 f895 	bl	80156a8 <_lseek_r>
 801557e:	1c43      	adds	r3, r0, #1
 8015580:	89a3      	ldrh	r3, [r4, #12]
 8015582:	bf15      	itete	ne
 8015584:	6560      	strne	r0, [r4, #84]	; 0x54
 8015586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801558a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801558e:	81a3      	strheq	r3, [r4, #12]
 8015590:	bf18      	it	ne
 8015592:	81a3      	strhne	r3, [r4, #12]
 8015594:	bd10      	pop	{r4, pc}

08015596 <__sclose>:
 8015596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801559a:	f000 b81f 	b.w	80155dc <_close_r>

0801559e <memset>:
 801559e:	4402      	add	r2, r0
 80155a0:	4603      	mov	r3, r0
 80155a2:	4293      	cmp	r3, r2
 80155a4:	d100      	bne.n	80155a8 <memset+0xa>
 80155a6:	4770      	bx	lr
 80155a8:	f803 1b01 	strb.w	r1, [r3], #1
 80155ac:	e7f9      	b.n	80155a2 <memset+0x4>

080155ae <strncmp>:
 80155ae:	b510      	push	{r4, lr}
 80155b0:	b16a      	cbz	r2, 80155ce <strncmp+0x20>
 80155b2:	3901      	subs	r1, #1
 80155b4:	1884      	adds	r4, r0, r2
 80155b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80155ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80155be:	429a      	cmp	r2, r3
 80155c0:	d103      	bne.n	80155ca <strncmp+0x1c>
 80155c2:	42a0      	cmp	r0, r4
 80155c4:	d001      	beq.n	80155ca <strncmp+0x1c>
 80155c6:	2a00      	cmp	r2, #0
 80155c8:	d1f5      	bne.n	80155b6 <strncmp+0x8>
 80155ca:	1ad0      	subs	r0, r2, r3
 80155cc:	bd10      	pop	{r4, pc}
 80155ce:	4610      	mov	r0, r2
 80155d0:	e7fc      	b.n	80155cc <strncmp+0x1e>
	...

080155d4 <_localeconv_r>:
 80155d4:	4800      	ldr	r0, [pc, #0]	; (80155d8 <_localeconv_r+0x4>)
 80155d6:	4770      	bx	lr
 80155d8:	20000164 	.word	0x20000164

080155dc <_close_r>:
 80155dc:	b538      	push	{r3, r4, r5, lr}
 80155de:	4d06      	ldr	r5, [pc, #24]	; (80155f8 <_close_r+0x1c>)
 80155e0:	2300      	movs	r3, #0
 80155e2:	4604      	mov	r4, r0
 80155e4:	4608      	mov	r0, r1
 80155e6:	602b      	str	r3, [r5, #0]
 80155e8:	f7f1 fba9 	bl	8006d3e <_close>
 80155ec:	1c43      	adds	r3, r0, #1
 80155ee:	d102      	bne.n	80155f6 <_close_r+0x1a>
 80155f0:	682b      	ldr	r3, [r5, #0]
 80155f2:	b103      	cbz	r3, 80155f6 <_close_r+0x1a>
 80155f4:	6023      	str	r3, [r4, #0]
 80155f6:	bd38      	pop	{r3, r4, r5, pc}
 80155f8:	200090d4 	.word	0x200090d4

080155fc <_reclaim_reent>:
 80155fc:	4b29      	ldr	r3, [pc, #164]	; (80156a4 <_reclaim_reent+0xa8>)
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	4283      	cmp	r3, r0
 8015602:	b570      	push	{r4, r5, r6, lr}
 8015604:	4604      	mov	r4, r0
 8015606:	d04b      	beq.n	80156a0 <_reclaim_reent+0xa4>
 8015608:	69c3      	ldr	r3, [r0, #28]
 801560a:	b143      	cbz	r3, 801561e <_reclaim_reent+0x22>
 801560c:	68db      	ldr	r3, [r3, #12]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d144      	bne.n	801569c <_reclaim_reent+0xa0>
 8015612:	69e3      	ldr	r3, [r4, #28]
 8015614:	6819      	ldr	r1, [r3, #0]
 8015616:	b111      	cbz	r1, 801561e <_reclaim_reent+0x22>
 8015618:	4620      	mov	r0, r4
 801561a:	f000 ff37 	bl	801648c <_free_r>
 801561e:	6961      	ldr	r1, [r4, #20]
 8015620:	b111      	cbz	r1, 8015628 <_reclaim_reent+0x2c>
 8015622:	4620      	mov	r0, r4
 8015624:	f000 ff32 	bl	801648c <_free_r>
 8015628:	69e1      	ldr	r1, [r4, #28]
 801562a:	b111      	cbz	r1, 8015632 <_reclaim_reent+0x36>
 801562c:	4620      	mov	r0, r4
 801562e:	f000 ff2d 	bl	801648c <_free_r>
 8015632:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015634:	b111      	cbz	r1, 801563c <_reclaim_reent+0x40>
 8015636:	4620      	mov	r0, r4
 8015638:	f000 ff28 	bl	801648c <_free_r>
 801563c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801563e:	b111      	cbz	r1, 8015646 <_reclaim_reent+0x4a>
 8015640:	4620      	mov	r0, r4
 8015642:	f000 ff23 	bl	801648c <_free_r>
 8015646:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015648:	b111      	cbz	r1, 8015650 <_reclaim_reent+0x54>
 801564a:	4620      	mov	r0, r4
 801564c:	f000 ff1e 	bl	801648c <_free_r>
 8015650:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015652:	b111      	cbz	r1, 801565a <_reclaim_reent+0x5e>
 8015654:	4620      	mov	r0, r4
 8015656:	f000 ff19 	bl	801648c <_free_r>
 801565a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801565c:	b111      	cbz	r1, 8015664 <_reclaim_reent+0x68>
 801565e:	4620      	mov	r0, r4
 8015660:	f000 ff14 	bl	801648c <_free_r>
 8015664:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8015666:	b111      	cbz	r1, 801566e <_reclaim_reent+0x72>
 8015668:	4620      	mov	r0, r4
 801566a:	f000 ff0f 	bl	801648c <_free_r>
 801566e:	6a23      	ldr	r3, [r4, #32]
 8015670:	b1b3      	cbz	r3, 80156a0 <_reclaim_reent+0xa4>
 8015672:	4620      	mov	r0, r4
 8015674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015678:	4718      	bx	r3
 801567a:	5949      	ldr	r1, [r1, r5]
 801567c:	b941      	cbnz	r1, 8015690 <_reclaim_reent+0x94>
 801567e:	3504      	adds	r5, #4
 8015680:	69e3      	ldr	r3, [r4, #28]
 8015682:	2d80      	cmp	r5, #128	; 0x80
 8015684:	68d9      	ldr	r1, [r3, #12]
 8015686:	d1f8      	bne.n	801567a <_reclaim_reent+0x7e>
 8015688:	4620      	mov	r0, r4
 801568a:	f000 feff 	bl	801648c <_free_r>
 801568e:	e7c0      	b.n	8015612 <_reclaim_reent+0x16>
 8015690:	680e      	ldr	r6, [r1, #0]
 8015692:	4620      	mov	r0, r4
 8015694:	f000 fefa 	bl	801648c <_free_r>
 8015698:	4631      	mov	r1, r6
 801569a:	e7ef      	b.n	801567c <_reclaim_reent+0x80>
 801569c:	2500      	movs	r5, #0
 801569e:	e7ef      	b.n	8015680 <_reclaim_reent+0x84>
 80156a0:	bd70      	pop	{r4, r5, r6, pc}
 80156a2:	bf00      	nop
 80156a4:	20000070 	.word	0x20000070

080156a8 <_lseek_r>:
 80156a8:	b538      	push	{r3, r4, r5, lr}
 80156aa:	4d07      	ldr	r5, [pc, #28]	; (80156c8 <_lseek_r+0x20>)
 80156ac:	4604      	mov	r4, r0
 80156ae:	4608      	mov	r0, r1
 80156b0:	4611      	mov	r1, r2
 80156b2:	2200      	movs	r2, #0
 80156b4:	602a      	str	r2, [r5, #0]
 80156b6:	461a      	mov	r2, r3
 80156b8:	f7f1 fb68 	bl	8006d8c <_lseek>
 80156bc:	1c43      	adds	r3, r0, #1
 80156be:	d102      	bne.n	80156c6 <_lseek_r+0x1e>
 80156c0:	682b      	ldr	r3, [r5, #0]
 80156c2:	b103      	cbz	r3, 80156c6 <_lseek_r+0x1e>
 80156c4:	6023      	str	r3, [r4, #0]
 80156c6:	bd38      	pop	{r3, r4, r5, pc}
 80156c8:	200090d4 	.word	0x200090d4

080156cc <_read_r>:
 80156cc:	b538      	push	{r3, r4, r5, lr}
 80156ce:	4d07      	ldr	r5, [pc, #28]	; (80156ec <_read_r+0x20>)
 80156d0:	4604      	mov	r4, r0
 80156d2:	4608      	mov	r0, r1
 80156d4:	4611      	mov	r1, r2
 80156d6:	2200      	movs	r2, #0
 80156d8:	602a      	str	r2, [r5, #0]
 80156da:	461a      	mov	r2, r3
 80156dc:	f7f1 faf6 	bl	8006ccc <_read>
 80156e0:	1c43      	adds	r3, r0, #1
 80156e2:	d102      	bne.n	80156ea <_read_r+0x1e>
 80156e4:	682b      	ldr	r3, [r5, #0]
 80156e6:	b103      	cbz	r3, 80156ea <_read_r+0x1e>
 80156e8:	6023      	str	r3, [r4, #0]
 80156ea:	bd38      	pop	{r3, r4, r5, pc}
 80156ec:	200090d4 	.word	0x200090d4

080156f0 <_write_r>:
 80156f0:	b538      	push	{r3, r4, r5, lr}
 80156f2:	4d07      	ldr	r5, [pc, #28]	; (8015710 <_write_r+0x20>)
 80156f4:	4604      	mov	r4, r0
 80156f6:	4608      	mov	r0, r1
 80156f8:	4611      	mov	r1, r2
 80156fa:	2200      	movs	r2, #0
 80156fc:	602a      	str	r2, [r5, #0]
 80156fe:	461a      	mov	r2, r3
 8015700:	f7f1 fb01 	bl	8006d06 <_write>
 8015704:	1c43      	adds	r3, r0, #1
 8015706:	d102      	bne.n	801570e <_write_r+0x1e>
 8015708:	682b      	ldr	r3, [r5, #0]
 801570a:	b103      	cbz	r3, 801570e <_write_r+0x1e>
 801570c:	6023      	str	r3, [r4, #0]
 801570e:	bd38      	pop	{r3, r4, r5, pc}
 8015710:	200090d4 	.word	0x200090d4

08015714 <__errno>:
 8015714:	4b01      	ldr	r3, [pc, #4]	; (801571c <__errno+0x8>)
 8015716:	6818      	ldr	r0, [r3, #0]
 8015718:	4770      	bx	lr
 801571a:	bf00      	nop
 801571c:	20000070 	.word	0x20000070

08015720 <__libc_init_array>:
 8015720:	b570      	push	{r4, r5, r6, lr}
 8015722:	4d0d      	ldr	r5, [pc, #52]	; (8015758 <__libc_init_array+0x38>)
 8015724:	4c0d      	ldr	r4, [pc, #52]	; (801575c <__libc_init_array+0x3c>)
 8015726:	1b64      	subs	r4, r4, r5
 8015728:	10a4      	asrs	r4, r4, #2
 801572a:	2600      	movs	r6, #0
 801572c:	42a6      	cmp	r6, r4
 801572e:	d109      	bne.n	8015744 <__libc_init_array+0x24>
 8015730:	4d0b      	ldr	r5, [pc, #44]	; (8015760 <__libc_init_array+0x40>)
 8015732:	4c0c      	ldr	r4, [pc, #48]	; (8015764 <__libc_init_array+0x44>)
 8015734:	f006 fa1a 	bl	801bb6c <_init>
 8015738:	1b64      	subs	r4, r4, r5
 801573a:	10a4      	asrs	r4, r4, #2
 801573c:	2600      	movs	r6, #0
 801573e:	42a6      	cmp	r6, r4
 8015740:	d105      	bne.n	801574e <__libc_init_array+0x2e>
 8015742:	bd70      	pop	{r4, r5, r6, pc}
 8015744:	f855 3b04 	ldr.w	r3, [r5], #4
 8015748:	4798      	blx	r3
 801574a:	3601      	adds	r6, #1
 801574c:	e7ee      	b.n	801572c <__libc_init_array+0xc>
 801574e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015752:	4798      	blx	r3
 8015754:	3601      	adds	r6, #1
 8015756:	e7f2      	b.n	801573e <__libc_init_array+0x1e>
 8015758:	0801c908 	.word	0x0801c908
 801575c:	0801c908 	.word	0x0801c908
 8015760:	0801c908 	.word	0x0801c908
 8015764:	0801c90c 	.word	0x0801c90c

08015768 <__retarget_lock_init_recursive>:
 8015768:	4770      	bx	lr

0801576a <__retarget_lock_acquire_recursive>:
 801576a:	4770      	bx	lr

0801576c <__retarget_lock_release_recursive>:
 801576c:	4770      	bx	lr

0801576e <memcpy>:
 801576e:	440a      	add	r2, r1
 8015770:	4291      	cmp	r1, r2
 8015772:	f100 33ff 	add.w	r3, r0, #4294967295
 8015776:	d100      	bne.n	801577a <memcpy+0xc>
 8015778:	4770      	bx	lr
 801577a:	b510      	push	{r4, lr}
 801577c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015780:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015784:	4291      	cmp	r1, r2
 8015786:	d1f9      	bne.n	801577c <memcpy+0xe>
 8015788:	bd10      	pop	{r4, pc}
	...

0801578c <nanf>:
 801578c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015794 <nanf+0x8>
 8015790:	4770      	bx	lr
 8015792:	bf00      	nop
 8015794:	7fc00000 	.word	0x7fc00000

08015798 <quorem>:
 8015798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801579c:	6903      	ldr	r3, [r0, #16]
 801579e:	690c      	ldr	r4, [r1, #16]
 80157a0:	42a3      	cmp	r3, r4
 80157a2:	4607      	mov	r7, r0
 80157a4:	db7e      	blt.n	80158a4 <quorem+0x10c>
 80157a6:	3c01      	subs	r4, #1
 80157a8:	f101 0814 	add.w	r8, r1, #20
 80157ac:	f100 0514 	add.w	r5, r0, #20
 80157b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80157b4:	9301      	str	r3, [sp, #4]
 80157b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80157ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80157be:	3301      	adds	r3, #1
 80157c0:	429a      	cmp	r2, r3
 80157c2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80157c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80157ca:	fbb2 f6f3 	udiv	r6, r2, r3
 80157ce:	d331      	bcc.n	8015834 <quorem+0x9c>
 80157d0:	f04f 0e00 	mov.w	lr, #0
 80157d4:	4640      	mov	r0, r8
 80157d6:	46ac      	mov	ip, r5
 80157d8:	46f2      	mov	sl, lr
 80157da:	f850 2b04 	ldr.w	r2, [r0], #4
 80157de:	b293      	uxth	r3, r2
 80157e0:	fb06 e303 	mla	r3, r6, r3, lr
 80157e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80157e8:	0c1a      	lsrs	r2, r3, #16
 80157ea:	b29b      	uxth	r3, r3
 80157ec:	ebaa 0303 	sub.w	r3, sl, r3
 80157f0:	f8dc a000 	ldr.w	sl, [ip]
 80157f4:	fa13 f38a 	uxtah	r3, r3, sl
 80157f8:	fb06 220e 	mla	r2, r6, lr, r2
 80157fc:	9300      	str	r3, [sp, #0]
 80157fe:	9b00      	ldr	r3, [sp, #0]
 8015800:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015804:	b292      	uxth	r2, r2
 8015806:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801580a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801580e:	f8bd 3000 	ldrh.w	r3, [sp]
 8015812:	4581      	cmp	r9, r0
 8015814:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015818:	f84c 3b04 	str.w	r3, [ip], #4
 801581c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015820:	d2db      	bcs.n	80157da <quorem+0x42>
 8015822:	f855 300b 	ldr.w	r3, [r5, fp]
 8015826:	b92b      	cbnz	r3, 8015834 <quorem+0x9c>
 8015828:	9b01      	ldr	r3, [sp, #4]
 801582a:	3b04      	subs	r3, #4
 801582c:	429d      	cmp	r5, r3
 801582e:	461a      	mov	r2, r3
 8015830:	d32c      	bcc.n	801588c <quorem+0xf4>
 8015832:	613c      	str	r4, [r7, #16]
 8015834:	4638      	mov	r0, r7
 8015836:	f001 f9ef 	bl	8016c18 <__mcmp>
 801583a:	2800      	cmp	r0, #0
 801583c:	db22      	blt.n	8015884 <quorem+0xec>
 801583e:	3601      	adds	r6, #1
 8015840:	4629      	mov	r1, r5
 8015842:	2000      	movs	r0, #0
 8015844:	f858 2b04 	ldr.w	r2, [r8], #4
 8015848:	f8d1 c000 	ldr.w	ip, [r1]
 801584c:	b293      	uxth	r3, r2
 801584e:	1ac3      	subs	r3, r0, r3
 8015850:	0c12      	lsrs	r2, r2, #16
 8015852:	fa13 f38c 	uxtah	r3, r3, ip
 8015856:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801585a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801585e:	b29b      	uxth	r3, r3
 8015860:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015864:	45c1      	cmp	r9, r8
 8015866:	f841 3b04 	str.w	r3, [r1], #4
 801586a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801586e:	d2e9      	bcs.n	8015844 <quorem+0xac>
 8015870:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015874:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015878:	b922      	cbnz	r2, 8015884 <quorem+0xec>
 801587a:	3b04      	subs	r3, #4
 801587c:	429d      	cmp	r5, r3
 801587e:	461a      	mov	r2, r3
 8015880:	d30a      	bcc.n	8015898 <quorem+0x100>
 8015882:	613c      	str	r4, [r7, #16]
 8015884:	4630      	mov	r0, r6
 8015886:	b003      	add	sp, #12
 8015888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801588c:	6812      	ldr	r2, [r2, #0]
 801588e:	3b04      	subs	r3, #4
 8015890:	2a00      	cmp	r2, #0
 8015892:	d1ce      	bne.n	8015832 <quorem+0x9a>
 8015894:	3c01      	subs	r4, #1
 8015896:	e7c9      	b.n	801582c <quorem+0x94>
 8015898:	6812      	ldr	r2, [r2, #0]
 801589a:	3b04      	subs	r3, #4
 801589c:	2a00      	cmp	r2, #0
 801589e:	d1f0      	bne.n	8015882 <quorem+0xea>
 80158a0:	3c01      	subs	r4, #1
 80158a2:	e7eb      	b.n	801587c <quorem+0xe4>
 80158a4:	2000      	movs	r0, #0
 80158a6:	e7ee      	b.n	8015886 <quorem+0xee>

080158a8 <_dtoa_r>:
 80158a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158ac:	ed2d 8b04 	vpush	{d8-d9}
 80158b0:	69c5      	ldr	r5, [r0, #28]
 80158b2:	b093      	sub	sp, #76	; 0x4c
 80158b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80158b8:	ec57 6b10 	vmov	r6, r7, d0
 80158bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80158c0:	9107      	str	r1, [sp, #28]
 80158c2:	4604      	mov	r4, r0
 80158c4:	920a      	str	r2, [sp, #40]	; 0x28
 80158c6:	930d      	str	r3, [sp, #52]	; 0x34
 80158c8:	b975      	cbnz	r5, 80158e8 <_dtoa_r+0x40>
 80158ca:	2010      	movs	r0, #16
 80158cc:	f000 fe2a 	bl	8016524 <malloc>
 80158d0:	4602      	mov	r2, r0
 80158d2:	61e0      	str	r0, [r4, #28]
 80158d4:	b920      	cbnz	r0, 80158e0 <_dtoa_r+0x38>
 80158d6:	4bae      	ldr	r3, [pc, #696]	; (8015b90 <_dtoa_r+0x2e8>)
 80158d8:	21ef      	movs	r1, #239	; 0xef
 80158da:	48ae      	ldr	r0, [pc, #696]	; (8015b94 <_dtoa_r+0x2ec>)
 80158dc:	f002 ffe8 	bl	80188b0 <__assert_func>
 80158e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80158e4:	6005      	str	r5, [r0, #0]
 80158e6:	60c5      	str	r5, [r0, #12]
 80158e8:	69e3      	ldr	r3, [r4, #28]
 80158ea:	6819      	ldr	r1, [r3, #0]
 80158ec:	b151      	cbz	r1, 8015904 <_dtoa_r+0x5c>
 80158ee:	685a      	ldr	r2, [r3, #4]
 80158f0:	604a      	str	r2, [r1, #4]
 80158f2:	2301      	movs	r3, #1
 80158f4:	4093      	lsls	r3, r2
 80158f6:	608b      	str	r3, [r1, #8]
 80158f8:	4620      	mov	r0, r4
 80158fa:	f000 ff07 	bl	801670c <_Bfree>
 80158fe:	69e3      	ldr	r3, [r4, #28]
 8015900:	2200      	movs	r2, #0
 8015902:	601a      	str	r2, [r3, #0]
 8015904:	1e3b      	subs	r3, r7, #0
 8015906:	bfbb      	ittet	lt
 8015908:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801590c:	9303      	strlt	r3, [sp, #12]
 801590e:	2300      	movge	r3, #0
 8015910:	2201      	movlt	r2, #1
 8015912:	bfac      	ite	ge
 8015914:	f8c8 3000 	strge.w	r3, [r8]
 8015918:	f8c8 2000 	strlt.w	r2, [r8]
 801591c:	4b9e      	ldr	r3, [pc, #632]	; (8015b98 <_dtoa_r+0x2f0>)
 801591e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8015922:	ea33 0308 	bics.w	r3, r3, r8
 8015926:	d11b      	bne.n	8015960 <_dtoa_r+0xb8>
 8015928:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801592a:	f242 730f 	movw	r3, #9999	; 0x270f
 801592e:	6013      	str	r3, [r2, #0]
 8015930:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8015934:	4333      	orrs	r3, r6
 8015936:	f000 8593 	beq.w	8016460 <_dtoa_r+0xbb8>
 801593a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801593c:	b963      	cbnz	r3, 8015958 <_dtoa_r+0xb0>
 801593e:	4b97      	ldr	r3, [pc, #604]	; (8015b9c <_dtoa_r+0x2f4>)
 8015940:	e027      	b.n	8015992 <_dtoa_r+0xea>
 8015942:	4b97      	ldr	r3, [pc, #604]	; (8015ba0 <_dtoa_r+0x2f8>)
 8015944:	9300      	str	r3, [sp, #0]
 8015946:	3308      	adds	r3, #8
 8015948:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801594a:	6013      	str	r3, [r2, #0]
 801594c:	9800      	ldr	r0, [sp, #0]
 801594e:	b013      	add	sp, #76	; 0x4c
 8015950:	ecbd 8b04 	vpop	{d8-d9}
 8015954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015958:	4b90      	ldr	r3, [pc, #576]	; (8015b9c <_dtoa_r+0x2f4>)
 801595a:	9300      	str	r3, [sp, #0]
 801595c:	3303      	adds	r3, #3
 801595e:	e7f3      	b.n	8015948 <_dtoa_r+0xa0>
 8015960:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015964:	2200      	movs	r2, #0
 8015966:	ec51 0b17 	vmov	r0, r1, d7
 801596a:	eeb0 8a47 	vmov.f32	s16, s14
 801596e:	eef0 8a67 	vmov.f32	s17, s15
 8015972:	2300      	movs	r3, #0
 8015974:	f7eb f8d0 	bl	8000b18 <__aeabi_dcmpeq>
 8015978:	4681      	mov	r9, r0
 801597a:	b160      	cbz	r0, 8015996 <_dtoa_r+0xee>
 801597c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801597e:	2301      	movs	r3, #1
 8015980:	6013      	str	r3, [r2, #0]
 8015982:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015984:	2b00      	cmp	r3, #0
 8015986:	f000 8568 	beq.w	801645a <_dtoa_r+0xbb2>
 801598a:	4b86      	ldr	r3, [pc, #536]	; (8015ba4 <_dtoa_r+0x2fc>)
 801598c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801598e:	6013      	str	r3, [r2, #0]
 8015990:	3b01      	subs	r3, #1
 8015992:	9300      	str	r3, [sp, #0]
 8015994:	e7da      	b.n	801594c <_dtoa_r+0xa4>
 8015996:	aa10      	add	r2, sp, #64	; 0x40
 8015998:	a911      	add	r1, sp, #68	; 0x44
 801599a:	4620      	mov	r0, r4
 801599c:	eeb0 0a48 	vmov.f32	s0, s16
 80159a0:	eef0 0a68 	vmov.f32	s1, s17
 80159a4:	f001 fa4e 	bl	8016e44 <__d2b>
 80159a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80159ac:	4682      	mov	sl, r0
 80159ae:	2d00      	cmp	r5, #0
 80159b0:	d07f      	beq.n	8015ab2 <_dtoa_r+0x20a>
 80159b2:	ee18 3a90 	vmov	r3, s17
 80159b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80159ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80159be:	ec51 0b18 	vmov	r0, r1, d8
 80159c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80159c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80159ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80159ce:	4619      	mov	r1, r3
 80159d0:	2200      	movs	r2, #0
 80159d2:	4b75      	ldr	r3, [pc, #468]	; (8015ba8 <_dtoa_r+0x300>)
 80159d4:	f7ea fc80 	bl	80002d8 <__aeabi_dsub>
 80159d8:	a367      	add	r3, pc, #412	; (adr r3, 8015b78 <_dtoa_r+0x2d0>)
 80159da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159de:	f7ea fe33 	bl	8000648 <__aeabi_dmul>
 80159e2:	a367      	add	r3, pc, #412	; (adr r3, 8015b80 <_dtoa_r+0x2d8>)
 80159e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159e8:	f7ea fc78 	bl	80002dc <__adddf3>
 80159ec:	4606      	mov	r6, r0
 80159ee:	4628      	mov	r0, r5
 80159f0:	460f      	mov	r7, r1
 80159f2:	f7ea fdbf 	bl	8000574 <__aeabi_i2d>
 80159f6:	a364      	add	r3, pc, #400	; (adr r3, 8015b88 <_dtoa_r+0x2e0>)
 80159f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159fc:	f7ea fe24 	bl	8000648 <__aeabi_dmul>
 8015a00:	4602      	mov	r2, r0
 8015a02:	460b      	mov	r3, r1
 8015a04:	4630      	mov	r0, r6
 8015a06:	4639      	mov	r1, r7
 8015a08:	f7ea fc68 	bl	80002dc <__adddf3>
 8015a0c:	4606      	mov	r6, r0
 8015a0e:	460f      	mov	r7, r1
 8015a10:	f7eb f8ca 	bl	8000ba8 <__aeabi_d2iz>
 8015a14:	2200      	movs	r2, #0
 8015a16:	4683      	mov	fp, r0
 8015a18:	2300      	movs	r3, #0
 8015a1a:	4630      	mov	r0, r6
 8015a1c:	4639      	mov	r1, r7
 8015a1e:	f7eb f885 	bl	8000b2c <__aeabi_dcmplt>
 8015a22:	b148      	cbz	r0, 8015a38 <_dtoa_r+0x190>
 8015a24:	4658      	mov	r0, fp
 8015a26:	f7ea fda5 	bl	8000574 <__aeabi_i2d>
 8015a2a:	4632      	mov	r2, r6
 8015a2c:	463b      	mov	r3, r7
 8015a2e:	f7eb f873 	bl	8000b18 <__aeabi_dcmpeq>
 8015a32:	b908      	cbnz	r0, 8015a38 <_dtoa_r+0x190>
 8015a34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015a38:	f1bb 0f16 	cmp.w	fp, #22
 8015a3c:	d857      	bhi.n	8015aee <_dtoa_r+0x246>
 8015a3e:	4b5b      	ldr	r3, [pc, #364]	; (8015bac <_dtoa_r+0x304>)
 8015a40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a48:	ec51 0b18 	vmov	r0, r1, d8
 8015a4c:	f7eb f86e 	bl	8000b2c <__aeabi_dcmplt>
 8015a50:	2800      	cmp	r0, #0
 8015a52:	d04e      	beq.n	8015af2 <_dtoa_r+0x24a>
 8015a54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015a58:	2300      	movs	r3, #0
 8015a5a:	930c      	str	r3, [sp, #48]	; 0x30
 8015a5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a5e:	1b5b      	subs	r3, r3, r5
 8015a60:	1e5a      	subs	r2, r3, #1
 8015a62:	bf45      	ittet	mi
 8015a64:	f1c3 0301 	rsbmi	r3, r3, #1
 8015a68:	9305      	strmi	r3, [sp, #20]
 8015a6a:	2300      	movpl	r3, #0
 8015a6c:	2300      	movmi	r3, #0
 8015a6e:	9206      	str	r2, [sp, #24]
 8015a70:	bf54      	ite	pl
 8015a72:	9305      	strpl	r3, [sp, #20]
 8015a74:	9306      	strmi	r3, [sp, #24]
 8015a76:	f1bb 0f00 	cmp.w	fp, #0
 8015a7a:	db3c      	blt.n	8015af6 <_dtoa_r+0x24e>
 8015a7c:	9b06      	ldr	r3, [sp, #24]
 8015a7e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8015a82:	445b      	add	r3, fp
 8015a84:	9306      	str	r3, [sp, #24]
 8015a86:	2300      	movs	r3, #0
 8015a88:	9308      	str	r3, [sp, #32]
 8015a8a:	9b07      	ldr	r3, [sp, #28]
 8015a8c:	2b09      	cmp	r3, #9
 8015a8e:	d868      	bhi.n	8015b62 <_dtoa_r+0x2ba>
 8015a90:	2b05      	cmp	r3, #5
 8015a92:	bfc4      	itt	gt
 8015a94:	3b04      	subgt	r3, #4
 8015a96:	9307      	strgt	r3, [sp, #28]
 8015a98:	9b07      	ldr	r3, [sp, #28]
 8015a9a:	f1a3 0302 	sub.w	r3, r3, #2
 8015a9e:	bfcc      	ite	gt
 8015aa0:	2500      	movgt	r5, #0
 8015aa2:	2501      	movle	r5, #1
 8015aa4:	2b03      	cmp	r3, #3
 8015aa6:	f200 8085 	bhi.w	8015bb4 <_dtoa_r+0x30c>
 8015aaa:	e8df f003 	tbb	[pc, r3]
 8015aae:	3b2e      	.short	0x3b2e
 8015ab0:	5839      	.short	0x5839
 8015ab2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015ab6:	441d      	add	r5, r3
 8015ab8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015abc:	2b20      	cmp	r3, #32
 8015abe:	bfc1      	itttt	gt
 8015ac0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015ac4:	fa08 f803 	lslgt.w	r8, r8, r3
 8015ac8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8015acc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8015ad0:	bfd6      	itet	le
 8015ad2:	f1c3 0320 	rsble	r3, r3, #32
 8015ad6:	ea48 0003 	orrgt.w	r0, r8, r3
 8015ada:	fa06 f003 	lslle.w	r0, r6, r3
 8015ade:	f7ea fd39 	bl	8000554 <__aeabi_ui2d>
 8015ae2:	2201      	movs	r2, #1
 8015ae4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8015ae8:	3d01      	subs	r5, #1
 8015aea:	920e      	str	r2, [sp, #56]	; 0x38
 8015aec:	e76f      	b.n	80159ce <_dtoa_r+0x126>
 8015aee:	2301      	movs	r3, #1
 8015af0:	e7b3      	b.n	8015a5a <_dtoa_r+0x1b2>
 8015af2:	900c      	str	r0, [sp, #48]	; 0x30
 8015af4:	e7b2      	b.n	8015a5c <_dtoa_r+0x1b4>
 8015af6:	9b05      	ldr	r3, [sp, #20]
 8015af8:	eba3 030b 	sub.w	r3, r3, fp
 8015afc:	9305      	str	r3, [sp, #20]
 8015afe:	f1cb 0300 	rsb	r3, fp, #0
 8015b02:	9308      	str	r3, [sp, #32]
 8015b04:	2300      	movs	r3, #0
 8015b06:	930b      	str	r3, [sp, #44]	; 0x2c
 8015b08:	e7bf      	b.n	8015a8a <_dtoa_r+0x1e2>
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8015b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	dc52      	bgt.n	8015bba <_dtoa_r+0x312>
 8015b14:	2301      	movs	r3, #1
 8015b16:	9301      	str	r3, [sp, #4]
 8015b18:	9304      	str	r3, [sp, #16]
 8015b1a:	461a      	mov	r2, r3
 8015b1c:	920a      	str	r2, [sp, #40]	; 0x28
 8015b1e:	e00b      	b.n	8015b38 <_dtoa_r+0x290>
 8015b20:	2301      	movs	r3, #1
 8015b22:	e7f3      	b.n	8015b0c <_dtoa_r+0x264>
 8015b24:	2300      	movs	r3, #0
 8015b26:	9309      	str	r3, [sp, #36]	; 0x24
 8015b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b2a:	445b      	add	r3, fp
 8015b2c:	9301      	str	r3, [sp, #4]
 8015b2e:	3301      	adds	r3, #1
 8015b30:	2b01      	cmp	r3, #1
 8015b32:	9304      	str	r3, [sp, #16]
 8015b34:	bfb8      	it	lt
 8015b36:	2301      	movlt	r3, #1
 8015b38:	69e0      	ldr	r0, [r4, #28]
 8015b3a:	2100      	movs	r1, #0
 8015b3c:	2204      	movs	r2, #4
 8015b3e:	f102 0614 	add.w	r6, r2, #20
 8015b42:	429e      	cmp	r6, r3
 8015b44:	d93d      	bls.n	8015bc2 <_dtoa_r+0x31a>
 8015b46:	6041      	str	r1, [r0, #4]
 8015b48:	4620      	mov	r0, r4
 8015b4a:	f000 fd9f 	bl	801668c <_Balloc>
 8015b4e:	9000      	str	r0, [sp, #0]
 8015b50:	2800      	cmp	r0, #0
 8015b52:	d139      	bne.n	8015bc8 <_dtoa_r+0x320>
 8015b54:	4b16      	ldr	r3, [pc, #88]	; (8015bb0 <_dtoa_r+0x308>)
 8015b56:	4602      	mov	r2, r0
 8015b58:	f240 11af 	movw	r1, #431	; 0x1af
 8015b5c:	e6bd      	b.n	80158da <_dtoa_r+0x32>
 8015b5e:	2301      	movs	r3, #1
 8015b60:	e7e1      	b.n	8015b26 <_dtoa_r+0x27e>
 8015b62:	2501      	movs	r5, #1
 8015b64:	2300      	movs	r3, #0
 8015b66:	9307      	str	r3, [sp, #28]
 8015b68:	9509      	str	r5, [sp, #36]	; 0x24
 8015b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8015b6e:	9301      	str	r3, [sp, #4]
 8015b70:	9304      	str	r3, [sp, #16]
 8015b72:	2200      	movs	r2, #0
 8015b74:	2312      	movs	r3, #18
 8015b76:	e7d1      	b.n	8015b1c <_dtoa_r+0x274>
 8015b78:	636f4361 	.word	0x636f4361
 8015b7c:	3fd287a7 	.word	0x3fd287a7
 8015b80:	8b60c8b3 	.word	0x8b60c8b3
 8015b84:	3fc68a28 	.word	0x3fc68a28
 8015b88:	509f79fb 	.word	0x509f79fb
 8015b8c:	3fd34413 	.word	0x3fd34413
 8015b90:	0801c0ac 	.word	0x0801c0ac
 8015b94:	0801c0c3 	.word	0x0801c0c3
 8015b98:	7ff00000 	.word	0x7ff00000
 8015b9c:	0801c0a8 	.word	0x0801c0a8
 8015ba0:	0801c09f 	.word	0x0801c09f
 8015ba4:	0801c401 	.word	0x0801c401
 8015ba8:	3ff80000 	.word	0x3ff80000
 8015bac:	0801c1b0 	.word	0x0801c1b0
 8015bb0:	0801c11b 	.word	0x0801c11b
 8015bb4:	2301      	movs	r3, #1
 8015bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8015bb8:	e7d7      	b.n	8015b6a <_dtoa_r+0x2c2>
 8015bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bbc:	9301      	str	r3, [sp, #4]
 8015bbe:	9304      	str	r3, [sp, #16]
 8015bc0:	e7ba      	b.n	8015b38 <_dtoa_r+0x290>
 8015bc2:	3101      	adds	r1, #1
 8015bc4:	0052      	lsls	r2, r2, #1
 8015bc6:	e7ba      	b.n	8015b3e <_dtoa_r+0x296>
 8015bc8:	69e3      	ldr	r3, [r4, #28]
 8015bca:	9a00      	ldr	r2, [sp, #0]
 8015bcc:	601a      	str	r2, [r3, #0]
 8015bce:	9b04      	ldr	r3, [sp, #16]
 8015bd0:	2b0e      	cmp	r3, #14
 8015bd2:	f200 80a8 	bhi.w	8015d26 <_dtoa_r+0x47e>
 8015bd6:	2d00      	cmp	r5, #0
 8015bd8:	f000 80a5 	beq.w	8015d26 <_dtoa_r+0x47e>
 8015bdc:	f1bb 0f00 	cmp.w	fp, #0
 8015be0:	dd38      	ble.n	8015c54 <_dtoa_r+0x3ac>
 8015be2:	4bc0      	ldr	r3, [pc, #768]	; (8015ee4 <_dtoa_r+0x63c>)
 8015be4:	f00b 020f 	and.w	r2, fp, #15
 8015be8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015bec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015bf0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8015bf4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8015bf8:	d019      	beq.n	8015c2e <_dtoa_r+0x386>
 8015bfa:	4bbb      	ldr	r3, [pc, #748]	; (8015ee8 <_dtoa_r+0x640>)
 8015bfc:	ec51 0b18 	vmov	r0, r1, d8
 8015c00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015c04:	f7ea fe4a 	bl	800089c <__aeabi_ddiv>
 8015c08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015c0c:	f008 080f 	and.w	r8, r8, #15
 8015c10:	2503      	movs	r5, #3
 8015c12:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8015ee8 <_dtoa_r+0x640>
 8015c16:	f1b8 0f00 	cmp.w	r8, #0
 8015c1a:	d10a      	bne.n	8015c32 <_dtoa_r+0x38a>
 8015c1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015c20:	4632      	mov	r2, r6
 8015c22:	463b      	mov	r3, r7
 8015c24:	f7ea fe3a 	bl	800089c <__aeabi_ddiv>
 8015c28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015c2c:	e02b      	b.n	8015c86 <_dtoa_r+0x3de>
 8015c2e:	2502      	movs	r5, #2
 8015c30:	e7ef      	b.n	8015c12 <_dtoa_r+0x36a>
 8015c32:	f018 0f01 	tst.w	r8, #1
 8015c36:	d008      	beq.n	8015c4a <_dtoa_r+0x3a2>
 8015c38:	4630      	mov	r0, r6
 8015c3a:	4639      	mov	r1, r7
 8015c3c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015c40:	f7ea fd02 	bl	8000648 <__aeabi_dmul>
 8015c44:	3501      	adds	r5, #1
 8015c46:	4606      	mov	r6, r0
 8015c48:	460f      	mov	r7, r1
 8015c4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015c4e:	f109 0908 	add.w	r9, r9, #8
 8015c52:	e7e0      	b.n	8015c16 <_dtoa_r+0x36e>
 8015c54:	f000 809f 	beq.w	8015d96 <_dtoa_r+0x4ee>
 8015c58:	f1cb 0600 	rsb	r6, fp, #0
 8015c5c:	4ba1      	ldr	r3, [pc, #644]	; (8015ee4 <_dtoa_r+0x63c>)
 8015c5e:	4fa2      	ldr	r7, [pc, #648]	; (8015ee8 <_dtoa_r+0x640>)
 8015c60:	f006 020f 	and.w	r2, r6, #15
 8015c64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c6c:	ec51 0b18 	vmov	r0, r1, d8
 8015c70:	f7ea fcea 	bl	8000648 <__aeabi_dmul>
 8015c74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015c78:	1136      	asrs	r6, r6, #4
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	2502      	movs	r5, #2
 8015c7e:	2e00      	cmp	r6, #0
 8015c80:	d17e      	bne.n	8015d80 <_dtoa_r+0x4d8>
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d1d0      	bne.n	8015c28 <_dtoa_r+0x380>
 8015c86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c88:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	f000 8084 	beq.w	8015d9a <_dtoa_r+0x4f2>
 8015c92:	4b96      	ldr	r3, [pc, #600]	; (8015eec <_dtoa_r+0x644>)
 8015c94:	2200      	movs	r2, #0
 8015c96:	4640      	mov	r0, r8
 8015c98:	4649      	mov	r1, r9
 8015c9a:	f7ea ff47 	bl	8000b2c <__aeabi_dcmplt>
 8015c9e:	2800      	cmp	r0, #0
 8015ca0:	d07b      	beq.n	8015d9a <_dtoa_r+0x4f2>
 8015ca2:	9b04      	ldr	r3, [sp, #16]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d078      	beq.n	8015d9a <_dtoa_r+0x4f2>
 8015ca8:	9b01      	ldr	r3, [sp, #4]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	dd39      	ble.n	8015d22 <_dtoa_r+0x47a>
 8015cae:	4b90      	ldr	r3, [pc, #576]	; (8015ef0 <_dtoa_r+0x648>)
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	4640      	mov	r0, r8
 8015cb4:	4649      	mov	r1, r9
 8015cb6:	f7ea fcc7 	bl	8000648 <__aeabi_dmul>
 8015cba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015cbe:	9e01      	ldr	r6, [sp, #4]
 8015cc0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8015cc4:	3501      	adds	r5, #1
 8015cc6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015cca:	4628      	mov	r0, r5
 8015ccc:	f7ea fc52 	bl	8000574 <__aeabi_i2d>
 8015cd0:	4642      	mov	r2, r8
 8015cd2:	464b      	mov	r3, r9
 8015cd4:	f7ea fcb8 	bl	8000648 <__aeabi_dmul>
 8015cd8:	4b86      	ldr	r3, [pc, #536]	; (8015ef4 <_dtoa_r+0x64c>)
 8015cda:	2200      	movs	r2, #0
 8015cdc:	f7ea fafe 	bl	80002dc <__adddf3>
 8015ce0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8015ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015ce8:	9303      	str	r3, [sp, #12]
 8015cea:	2e00      	cmp	r6, #0
 8015cec:	d158      	bne.n	8015da0 <_dtoa_r+0x4f8>
 8015cee:	4b82      	ldr	r3, [pc, #520]	; (8015ef8 <_dtoa_r+0x650>)
 8015cf0:	2200      	movs	r2, #0
 8015cf2:	4640      	mov	r0, r8
 8015cf4:	4649      	mov	r1, r9
 8015cf6:	f7ea faef 	bl	80002d8 <__aeabi_dsub>
 8015cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015cfe:	4680      	mov	r8, r0
 8015d00:	4689      	mov	r9, r1
 8015d02:	f7ea ff31 	bl	8000b68 <__aeabi_dcmpgt>
 8015d06:	2800      	cmp	r0, #0
 8015d08:	f040 8296 	bne.w	8016238 <_dtoa_r+0x990>
 8015d0c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015d10:	4640      	mov	r0, r8
 8015d12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015d16:	4649      	mov	r1, r9
 8015d18:	f7ea ff08 	bl	8000b2c <__aeabi_dcmplt>
 8015d1c:	2800      	cmp	r0, #0
 8015d1e:	f040 8289 	bne.w	8016234 <_dtoa_r+0x98c>
 8015d22:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015d26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	f2c0 814e 	blt.w	8015fca <_dtoa_r+0x722>
 8015d2e:	f1bb 0f0e 	cmp.w	fp, #14
 8015d32:	f300 814a 	bgt.w	8015fca <_dtoa_r+0x722>
 8015d36:	4b6b      	ldr	r3, [pc, #428]	; (8015ee4 <_dtoa_r+0x63c>)
 8015d38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015d3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	f280 80dc 	bge.w	8015f00 <_dtoa_r+0x658>
 8015d48:	9b04      	ldr	r3, [sp, #16]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	f300 80d8 	bgt.w	8015f00 <_dtoa_r+0x658>
 8015d50:	f040 826f 	bne.w	8016232 <_dtoa_r+0x98a>
 8015d54:	4b68      	ldr	r3, [pc, #416]	; (8015ef8 <_dtoa_r+0x650>)
 8015d56:	2200      	movs	r2, #0
 8015d58:	4640      	mov	r0, r8
 8015d5a:	4649      	mov	r1, r9
 8015d5c:	f7ea fc74 	bl	8000648 <__aeabi_dmul>
 8015d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015d64:	f7ea fef6 	bl	8000b54 <__aeabi_dcmpge>
 8015d68:	9e04      	ldr	r6, [sp, #16]
 8015d6a:	4637      	mov	r7, r6
 8015d6c:	2800      	cmp	r0, #0
 8015d6e:	f040 8245 	bne.w	80161fc <_dtoa_r+0x954>
 8015d72:	9d00      	ldr	r5, [sp, #0]
 8015d74:	2331      	movs	r3, #49	; 0x31
 8015d76:	f805 3b01 	strb.w	r3, [r5], #1
 8015d7a:	f10b 0b01 	add.w	fp, fp, #1
 8015d7e:	e241      	b.n	8016204 <_dtoa_r+0x95c>
 8015d80:	07f2      	lsls	r2, r6, #31
 8015d82:	d505      	bpl.n	8015d90 <_dtoa_r+0x4e8>
 8015d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015d88:	f7ea fc5e 	bl	8000648 <__aeabi_dmul>
 8015d8c:	3501      	adds	r5, #1
 8015d8e:	2301      	movs	r3, #1
 8015d90:	1076      	asrs	r6, r6, #1
 8015d92:	3708      	adds	r7, #8
 8015d94:	e773      	b.n	8015c7e <_dtoa_r+0x3d6>
 8015d96:	2502      	movs	r5, #2
 8015d98:	e775      	b.n	8015c86 <_dtoa_r+0x3de>
 8015d9a:	9e04      	ldr	r6, [sp, #16]
 8015d9c:	465f      	mov	r7, fp
 8015d9e:	e792      	b.n	8015cc6 <_dtoa_r+0x41e>
 8015da0:	9900      	ldr	r1, [sp, #0]
 8015da2:	4b50      	ldr	r3, [pc, #320]	; (8015ee4 <_dtoa_r+0x63c>)
 8015da4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015da8:	4431      	add	r1, r6
 8015daa:	9102      	str	r1, [sp, #8]
 8015dac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015dae:	eeb0 9a47 	vmov.f32	s18, s14
 8015db2:	eef0 9a67 	vmov.f32	s19, s15
 8015db6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015dba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015dbe:	2900      	cmp	r1, #0
 8015dc0:	d044      	beq.n	8015e4c <_dtoa_r+0x5a4>
 8015dc2:	494e      	ldr	r1, [pc, #312]	; (8015efc <_dtoa_r+0x654>)
 8015dc4:	2000      	movs	r0, #0
 8015dc6:	f7ea fd69 	bl	800089c <__aeabi_ddiv>
 8015dca:	ec53 2b19 	vmov	r2, r3, d9
 8015dce:	f7ea fa83 	bl	80002d8 <__aeabi_dsub>
 8015dd2:	9d00      	ldr	r5, [sp, #0]
 8015dd4:	ec41 0b19 	vmov	d9, r0, r1
 8015dd8:	4649      	mov	r1, r9
 8015dda:	4640      	mov	r0, r8
 8015ddc:	f7ea fee4 	bl	8000ba8 <__aeabi_d2iz>
 8015de0:	4606      	mov	r6, r0
 8015de2:	f7ea fbc7 	bl	8000574 <__aeabi_i2d>
 8015de6:	4602      	mov	r2, r0
 8015de8:	460b      	mov	r3, r1
 8015dea:	4640      	mov	r0, r8
 8015dec:	4649      	mov	r1, r9
 8015dee:	f7ea fa73 	bl	80002d8 <__aeabi_dsub>
 8015df2:	3630      	adds	r6, #48	; 0x30
 8015df4:	f805 6b01 	strb.w	r6, [r5], #1
 8015df8:	ec53 2b19 	vmov	r2, r3, d9
 8015dfc:	4680      	mov	r8, r0
 8015dfe:	4689      	mov	r9, r1
 8015e00:	f7ea fe94 	bl	8000b2c <__aeabi_dcmplt>
 8015e04:	2800      	cmp	r0, #0
 8015e06:	d164      	bne.n	8015ed2 <_dtoa_r+0x62a>
 8015e08:	4642      	mov	r2, r8
 8015e0a:	464b      	mov	r3, r9
 8015e0c:	4937      	ldr	r1, [pc, #220]	; (8015eec <_dtoa_r+0x644>)
 8015e0e:	2000      	movs	r0, #0
 8015e10:	f7ea fa62 	bl	80002d8 <__aeabi_dsub>
 8015e14:	ec53 2b19 	vmov	r2, r3, d9
 8015e18:	f7ea fe88 	bl	8000b2c <__aeabi_dcmplt>
 8015e1c:	2800      	cmp	r0, #0
 8015e1e:	f040 80b6 	bne.w	8015f8e <_dtoa_r+0x6e6>
 8015e22:	9b02      	ldr	r3, [sp, #8]
 8015e24:	429d      	cmp	r5, r3
 8015e26:	f43f af7c 	beq.w	8015d22 <_dtoa_r+0x47a>
 8015e2a:	4b31      	ldr	r3, [pc, #196]	; (8015ef0 <_dtoa_r+0x648>)
 8015e2c:	ec51 0b19 	vmov	r0, r1, d9
 8015e30:	2200      	movs	r2, #0
 8015e32:	f7ea fc09 	bl	8000648 <__aeabi_dmul>
 8015e36:	4b2e      	ldr	r3, [pc, #184]	; (8015ef0 <_dtoa_r+0x648>)
 8015e38:	ec41 0b19 	vmov	d9, r0, r1
 8015e3c:	2200      	movs	r2, #0
 8015e3e:	4640      	mov	r0, r8
 8015e40:	4649      	mov	r1, r9
 8015e42:	f7ea fc01 	bl	8000648 <__aeabi_dmul>
 8015e46:	4680      	mov	r8, r0
 8015e48:	4689      	mov	r9, r1
 8015e4a:	e7c5      	b.n	8015dd8 <_dtoa_r+0x530>
 8015e4c:	ec51 0b17 	vmov	r0, r1, d7
 8015e50:	f7ea fbfa 	bl	8000648 <__aeabi_dmul>
 8015e54:	9b02      	ldr	r3, [sp, #8]
 8015e56:	9d00      	ldr	r5, [sp, #0]
 8015e58:	930f      	str	r3, [sp, #60]	; 0x3c
 8015e5a:	ec41 0b19 	vmov	d9, r0, r1
 8015e5e:	4649      	mov	r1, r9
 8015e60:	4640      	mov	r0, r8
 8015e62:	f7ea fea1 	bl	8000ba8 <__aeabi_d2iz>
 8015e66:	4606      	mov	r6, r0
 8015e68:	f7ea fb84 	bl	8000574 <__aeabi_i2d>
 8015e6c:	3630      	adds	r6, #48	; 0x30
 8015e6e:	4602      	mov	r2, r0
 8015e70:	460b      	mov	r3, r1
 8015e72:	4640      	mov	r0, r8
 8015e74:	4649      	mov	r1, r9
 8015e76:	f7ea fa2f 	bl	80002d8 <__aeabi_dsub>
 8015e7a:	f805 6b01 	strb.w	r6, [r5], #1
 8015e7e:	9b02      	ldr	r3, [sp, #8]
 8015e80:	429d      	cmp	r5, r3
 8015e82:	4680      	mov	r8, r0
 8015e84:	4689      	mov	r9, r1
 8015e86:	f04f 0200 	mov.w	r2, #0
 8015e8a:	d124      	bne.n	8015ed6 <_dtoa_r+0x62e>
 8015e8c:	4b1b      	ldr	r3, [pc, #108]	; (8015efc <_dtoa_r+0x654>)
 8015e8e:	ec51 0b19 	vmov	r0, r1, d9
 8015e92:	f7ea fa23 	bl	80002dc <__adddf3>
 8015e96:	4602      	mov	r2, r0
 8015e98:	460b      	mov	r3, r1
 8015e9a:	4640      	mov	r0, r8
 8015e9c:	4649      	mov	r1, r9
 8015e9e:	f7ea fe63 	bl	8000b68 <__aeabi_dcmpgt>
 8015ea2:	2800      	cmp	r0, #0
 8015ea4:	d173      	bne.n	8015f8e <_dtoa_r+0x6e6>
 8015ea6:	ec53 2b19 	vmov	r2, r3, d9
 8015eaa:	4914      	ldr	r1, [pc, #80]	; (8015efc <_dtoa_r+0x654>)
 8015eac:	2000      	movs	r0, #0
 8015eae:	f7ea fa13 	bl	80002d8 <__aeabi_dsub>
 8015eb2:	4602      	mov	r2, r0
 8015eb4:	460b      	mov	r3, r1
 8015eb6:	4640      	mov	r0, r8
 8015eb8:	4649      	mov	r1, r9
 8015eba:	f7ea fe37 	bl	8000b2c <__aeabi_dcmplt>
 8015ebe:	2800      	cmp	r0, #0
 8015ec0:	f43f af2f 	beq.w	8015d22 <_dtoa_r+0x47a>
 8015ec4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015ec6:	1e6b      	subs	r3, r5, #1
 8015ec8:	930f      	str	r3, [sp, #60]	; 0x3c
 8015eca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015ece:	2b30      	cmp	r3, #48	; 0x30
 8015ed0:	d0f8      	beq.n	8015ec4 <_dtoa_r+0x61c>
 8015ed2:	46bb      	mov	fp, r7
 8015ed4:	e04a      	b.n	8015f6c <_dtoa_r+0x6c4>
 8015ed6:	4b06      	ldr	r3, [pc, #24]	; (8015ef0 <_dtoa_r+0x648>)
 8015ed8:	f7ea fbb6 	bl	8000648 <__aeabi_dmul>
 8015edc:	4680      	mov	r8, r0
 8015ede:	4689      	mov	r9, r1
 8015ee0:	e7bd      	b.n	8015e5e <_dtoa_r+0x5b6>
 8015ee2:	bf00      	nop
 8015ee4:	0801c1b0 	.word	0x0801c1b0
 8015ee8:	0801c188 	.word	0x0801c188
 8015eec:	3ff00000 	.word	0x3ff00000
 8015ef0:	40240000 	.word	0x40240000
 8015ef4:	401c0000 	.word	0x401c0000
 8015ef8:	40140000 	.word	0x40140000
 8015efc:	3fe00000 	.word	0x3fe00000
 8015f00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015f04:	9d00      	ldr	r5, [sp, #0]
 8015f06:	4642      	mov	r2, r8
 8015f08:	464b      	mov	r3, r9
 8015f0a:	4630      	mov	r0, r6
 8015f0c:	4639      	mov	r1, r7
 8015f0e:	f7ea fcc5 	bl	800089c <__aeabi_ddiv>
 8015f12:	f7ea fe49 	bl	8000ba8 <__aeabi_d2iz>
 8015f16:	9001      	str	r0, [sp, #4]
 8015f18:	f7ea fb2c 	bl	8000574 <__aeabi_i2d>
 8015f1c:	4642      	mov	r2, r8
 8015f1e:	464b      	mov	r3, r9
 8015f20:	f7ea fb92 	bl	8000648 <__aeabi_dmul>
 8015f24:	4602      	mov	r2, r0
 8015f26:	460b      	mov	r3, r1
 8015f28:	4630      	mov	r0, r6
 8015f2a:	4639      	mov	r1, r7
 8015f2c:	f7ea f9d4 	bl	80002d8 <__aeabi_dsub>
 8015f30:	9e01      	ldr	r6, [sp, #4]
 8015f32:	9f04      	ldr	r7, [sp, #16]
 8015f34:	3630      	adds	r6, #48	; 0x30
 8015f36:	f805 6b01 	strb.w	r6, [r5], #1
 8015f3a:	9e00      	ldr	r6, [sp, #0]
 8015f3c:	1bae      	subs	r6, r5, r6
 8015f3e:	42b7      	cmp	r7, r6
 8015f40:	4602      	mov	r2, r0
 8015f42:	460b      	mov	r3, r1
 8015f44:	d134      	bne.n	8015fb0 <_dtoa_r+0x708>
 8015f46:	f7ea f9c9 	bl	80002dc <__adddf3>
 8015f4a:	4642      	mov	r2, r8
 8015f4c:	464b      	mov	r3, r9
 8015f4e:	4606      	mov	r6, r0
 8015f50:	460f      	mov	r7, r1
 8015f52:	f7ea fe09 	bl	8000b68 <__aeabi_dcmpgt>
 8015f56:	b9c8      	cbnz	r0, 8015f8c <_dtoa_r+0x6e4>
 8015f58:	4642      	mov	r2, r8
 8015f5a:	464b      	mov	r3, r9
 8015f5c:	4630      	mov	r0, r6
 8015f5e:	4639      	mov	r1, r7
 8015f60:	f7ea fdda 	bl	8000b18 <__aeabi_dcmpeq>
 8015f64:	b110      	cbz	r0, 8015f6c <_dtoa_r+0x6c4>
 8015f66:	9b01      	ldr	r3, [sp, #4]
 8015f68:	07db      	lsls	r3, r3, #31
 8015f6a:	d40f      	bmi.n	8015f8c <_dtoa_r+0x6e4>
 8015f6c:	4651      	mov	r1, sl
 8015f6e:	4620      	mov	r0, r4
 8015f70:	f000 fbcc 	bl	801670c <_Bfree>
 8015f74:	2300      	movs	r3, #0
 8015f76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015f78:	702b      	strb	r3, [r5, #0]
 8015f7a:	f10b 0301 	add.w	r3, fp, #1
 8015f7e:	6013      	str	r3, [r2, #0]
 8015f80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	f43f ace2 	beq.w	801594c <_dtoa_r+0xa4>
 8015f88:	601d      	str	r5, [r3, #0]
 8015f8a:	e4df      	b.n	801594c <_dtoa_r+0xa4>
 8015f8c:	465f      	mov	r7, fp
 8015f8e:	462b      	mov	r3, r5
 8015f90:	461d      	mov	r5, r3
 8015f92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015f96:	2a39      	cmp	r2, #57	; 0x39
 8015f98:	d106      	bne.n	8015fa8 <_dtoa_r+0x700>
 8015f9a:	9a00      	ldr	r2, [sp, #0]
 8015f9c:	429a      	cmp	r2, r3
 8015f9e:	d1f7      	bne.n	8015f90 <_dtoa_r+0x6e8>
 8015fa0:	9900      	ldr	r1, [sp, #0]
 8015fa2:	2230      	movs	r2, #48	; 0x30
 8015fa4:	3701      	adds	r7, #1
 8015fa6:	700a      	strb	r2, [r1, #0]
 8015fa8:	781a      	ldrb	r2, [r3, #0]
 8015faa:	3201      	adds	r2, #1
 8015fac:	701a      	strb	r2, [r3, #0]
 8015fae:	e790      	b.n	8015ed2 <_dtoa_r+0x62a>
 8015fb0:	4ba3      	ldr	r3, [pc, #652]	; (8016240 <_dtoa_r+0x998>)
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	f7ea fb48 	bl	8000648 <__aeabi_dmul>
 8015fb8:	2200      	movs	r2, #0
 8015fba:	2300      	movs	r3, #0
 8015fbc:	4606      	mov	r6, r0
 8015fbe:	460f      	mov	r7, r1
 8015fc0:	f7ea fdaa 	bl	8000b18 <__aeabi_dcmpeq>
 8015fc4:	2800      	cmp	r0, #0
 8015fc6:	d09e      	beq.n	8015f06 <_dtoa_r+0x65e>
 8015fc8:	e7d0      	b.n	8015f6c <_dtoa_r+0x6c4>
 8015fca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015fcc:	2a00      	cmp	r2, #0
 8015fce:	f000 80ca 	beq.w	8016166 <_dtoa_r+0x8be>
 8015fd2:	9a07      	ldr	r2, [sp, #28]
 8015fd4:	2a01      	cmp	r2, #1
 8015fd6:	f300 80ad 	bgt.w	8016134 <_dtoa_r+0x88c>
 8015fda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015fdc:	2a00      	cmp	r2, #0
 8015fde:	f000 80a5 	beq.w	801612c <_dtoa_r+0x884>
 8015fe2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015fe6:	9e08      	ldr	r6, [sp, #32]
 8015fe8:	9d05      	ldr	r5, [sp, #20]
 8015fea:	9a05      	ldr	r2, [sp, #20]
 8015fec:	441a      	add	r2, r3
 8015fee:	9205      	str	r2, [sp, #20]
 8015ff0:	9a06      	ldr	r2, [sp, #24]
 8015ff2:	2101      	movs	r1, #1
 8015ff4:	441a      	add	r2, r3
 8015ff6:	4620      	mov	r0, r4
 8015ff8:	9206      	str	r2, [sp, #24]
 8015ffa:	f000 fc87 	bl	801690c <__i2b>
 8015ffe:	4607      	mov	r7, r0
 8016000:	b165      	cbz	r5, 801601c <_dtoa_r+0x774>
 8016002:	9b06      	ldr	r3, [sp, #24]
 8016004:	2b00      	cmp	r3, #0
 8016006:	dd09      	ble.n	801601c <_dtoa_r+0x774>
 8016008:	42ab      	cmp	r3, r5
 801600a:	9a05      	ldr	r2, [sp, #20]
 801600c:	bfa8      	it	ge
 801600e:	462b      	movge	r3, r5
 8016010:	1ad2      	subs	r2, r2, r3
 8016012:	9205      	str	r2, [sp, #20]
 8016014:	9a06      	ldr	r2, [sp, #24]
 8016016:	1aed      	subs	r5, r5, r3
 8016018:	1ad3      	subs	r3, r2, r3
 801601a:	9306      	str	r3, [sp, #24]
 801601c:	9b08      	ldr	r3, [sp, #32]
 801601e:	b1f3      	cbz	r3, 801605e <_dtoa_r+0x7b6>
 8016020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016022:	2b00      	cmp	r3, #0
 8016024:	f000 80a3 	beq.w	801616e <_dtoa_r+0x8c6>
 8016028:	2e00      	cmp	r6, #0
 801602a:	dd10      	ble.n	801604e <_dtoa_r+0x7a6>
 801602c:	4639      	mov	r1, r7
 801602e:	4632      	mov	r2, r6
 8016030:	4620      	mov	r0, r4
 8016032:	f000 fd2b 	bl	8016a8c <__pow5mult>
 8016036:	4652      	mov	r2, sl
 8016038:	4601      	mov	r1, r0
 801603a:	4607      	mov	r7, r0
 801603c:	4620      	mov	r0, r4
 801603e:	f000 fc7b 	bl	8016938 <__multiply>
 8016042:	4651      	mov	r1, sl
 8016044:	4680      	mov	r8, r0
 8016046:	4620      	mov	r0, r4
 8016048:	f000 fb60 	bl	801670c <_Bfree>
 801604c:	46c2      	mov	sl, r8
 801604e:	9b08      	ldr	r3, [sp, #32]
 8016050:	1b9a      	subs	r2, r3, r6
 8016052:	d004      	beq.n	801605e <_dtoa_r+0x7b6>
 8016054:	4651      	mov	r1, sl
 8016056:	4620      	mov	r0, r4
 8016058:	f000 fd18 	bl	8016a8c <__pow5mult>
 801605c:	4682      	mov	sl, r0
 801605e:	2101      	movs	r1, #1
 8016060:	4620      	mov	r0, r4
 8016062:	f000 fc53 	bl	801690c <__i2b>
 8016066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016068:	2b00      	cmp	r3, #0
 801606a:	4606      	mov	r6, r0
 801606c:	f340 8081 	ble.w	8016172 <_dtoa_r+0x8ca>
 8016070:	461a      	mov	r2, r3
 8016072:	4601      	mov	r1, r0
 8016074:	4620      	mov	r0, r4
 8016076:	f000 fd09 	bl	8016a8c <__pow5mult>
 801607a:	9b07      	ldr	r3, [sp, #28]
 801607c:	2b01      	cmp	r3, #1
 801607e:	4606      	mov	r6, r0
 8016080:	dd7a      	ble.n	8016178 <_dtoa_r+0x8d0>
 8016082:	f04f 0800 	mov.w	r8, #0
 8016086:	6933      	ldr	r3, [r6, #16]
 8016088:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801608c:	6918      	ldr	r0, [r3, #16]
 801608e:	f000 fbef 	bl	8016870 <__hi0bits>
 8016092:	f1c0 0020 	rsb	r0, r0, #32
 8016096:	9b06      	ldr	r3, [sp, #24]
 8016098:	4418      	add	r0, r3
 801609a:	f010 001f 	ands.w	r0, r0, #31
 801609e:	f000 8094 	beq.w	80161ca <_dtoa_r+0x922>
 80160a2:	f1c0 0320 	rsb	r3, r0, #32
 80160a6:	2b04      	cmp	r3, #4
 80160a8:	f340 8085 	ble.w	80161b6 <_dtoa_r+0x90e>
 80160ac:	9b05      	ldr	r3, [sp, #20]
 80160ae:	f1c0 001c 	rsb	r0, r0, #28
 80160b2:	4403      	add	r3, r0
 80160b4:	9305      	str	r3, [sp, #20]
 80160b6:	9b06      	ldr	r3, [sp, #24]
 80160b8:	4403      	add	r3, r0
 80160ba:	4405      	add	r5, r0
 80160bc:	9306      	str	r3, [sp, #24]
 80160be:	9b05      	ldr	r3, [sp, #20]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	dd05      	ble.n	80160d0 <_dtoa_r+0x828>
 80160c4:	4651      	mov	r1, sl
 80160c6:	461a      	mov	r2, r3
 80160c8:	4620      	mov	r0, r4
 80160ca:	f000 fd39 	bl	8016b40 <__lshift>
 80160ce:	4682      	mov	sl, r0
 80160d0:	9b06      	ldr	r3, [sp, #24]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	dd05      	ble.n	80160e2 <_dtoa_r+0x83a>
 80160d6:	4631      	mov	r1, r6
 80160d8:	461a      	mov	r2, r3
 80160da:	4620      	mov	r0, r4
 80160dc:	f000 fd30 	bl	8016b40 <__lshift>
 80160e0:	4606      	mov	r6, r0
 80160e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d072      	beq.n	80161ce <_dtoa_r+0x926>
 80160e8:	4631      	mov	r1, r6
 80160ea:	4650      	mov	r0, sl
 80160ec:	f000 fd94 	bl	8016c18 <__mcmp>
 80160f0:	2800      	cmp	r0, #0
 80160f2:	da6c      	bge.n	80161ce <_dtoa_r+0x926>
 80160f4:	2300      	movs	r3, #0
 80160f6:	4651      	mov	r1, sl
 80160f8:	220a      	movs	r2, #10
 80160fa:	4620      	mov	r0, r4
 80160fc:	f000 fb28 	bl	8016750 <__multadd>
 8016100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016102:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016106:	4682      	mov	sl, r0
 8016108:	2b00      	cmp	r3, #0
 801610a:	f000 81b0 	beq.w	801646e <_dtoa_r+0xbc6>
 801610e:	2300      	movs	r3, #0
 8016110:	4639      	mov	r1, r7
 8016112:	220a      	movs	r2, #10
 8016114:	4620      	mov	r0, r4
 8016116:	f000 fb1b 	bl	8016750 <__multadd>
 801611a:	9b01      	ldr	r3, [sp, #4]
 801611c:	2b00      	cmp	r3, #0
 801611e:	4607      	mov	r7, r0
 8016120:	f300 8096 	bgt.w	8016250 <_dtoa_r+0x9a8>
 8016124:	9b07      	ldr	r3, [sp, #28]
 8016126:	2b02      	cmp	r3, #2
 8016128:	dc59      	bgt.n	80161de <_dtoa_r+0x936>
 801612a:	e091      	b.n	8016250 <_dtoa_r+0x9a8>
 801612c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801612e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016132:	e758      	b.n	8015fe6 <_dtoa_r+0x73e>
 8016134:	9b04      	ldr	r3, [sp, #16]
 8016136:	1e5e      	subs	r6, r3, #1
 8016138:	9b08      	ldr	r3, [sp, #32]
 801613a:	42b3      	cmp	r3, r6
 801613c:	bfbf      	itttt	lt
 801613e:	9b08      	ldrlt	r3, [sp, #32]
 8016140:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8016142:	9608      	strlt	r6, [sp, #32]
 8016144:	1af3      	sublt	r3, r6, r3
 8016146:	bfb4      	ite	lt
 8016148:	18d2      	addlt	r2, r2, r3
 801614a:	1b9e      	subge	r6, r3, r6
 801614c:	9b04      	ldr	r3, [sp, #16]
 801614e:	bfbc      	itt	lt
 8016150:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8016152:	2600      	movlt	r6, #0
 8016154:	2b00      	cmp	r3, #0
 8016156:	bfb7      	itett	lt
 8016158:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801615c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8016160:	1a9d      	sublt	r5, r3, r2
 8016162:	2300      	movlt	r3, #0
 8016164:	e741      	b.n	8015fea <_dtoa_r+0x742>
 8016166:	9e08      	ldr	r6, [sp, #32]
 8016168:	9d05      	ldr	r5, [sp, #20]
 801616a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801616c:	e748      	b.n	8016000 <_dtoa_r+0x758>
 801616e:	9a08      	ldr	r2, [sp, #32]
 8016170:	e770      	b.n	8016054 <_dtoa_r+0x7ac>
 8016172:	9b07      	ldr	r3, [sp, #28]
 8016174:	2b01      	cmp	r3, #1
 8016176:	dc19      	bgt.n	80161ac <_dtoa_r+0x904>
 8016178:	9b02      	ldr	r3, [sp, #8]
 801617a:	b9bb      	cbnz	r3, 80161ac <_dtoa_r+0x904>
 801617c:	9b03      	ldr	r3, [sp, #12]
 801617e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016182:	b99b      	cbnz	r3, 80161ac <_dtoa_r+0x904>
 8016184:	9b03      	ldr	r3, [sp, #12]
 8016186:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801618a:	0d1b      	lsrs	r3, r3, #20
 801618c:	051b      	lsls	r3, r3, #20
 801618e:	b183      	cbz	r3, 80161b2 <_dtoa_r+0x90a>
 8016190:	9b05      	ldr	r3, [sp, #20]
 8016192:	3301      	adds	r3, #1
 8016194:	9305      	str	r3, [sp, #20]
 8016196:	9b06      	ldr	r3, [sp, #24]
 8016198:	3301      	adds	r3, #1
 801619a:	9306      	str	r3, [sp, #24]
 801619c:	f04f 0801 	mov.w	r8, #1
 80161a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	f47f af6f 	bne.w	8016086 <_dtoa_r+0x7de>
 80161a8:	2001      	movs	r0, #1
 80161aa:	e774      	b.n	8016096 <_dtoa_r+0x7ee>
 80161ac:	f04f 0800 	mov.w	r8, #0
 80161b0:	e7f6      	b.n	80161a0 <_dtoa_r+0x8f8>
 80161b2:	4698      	mov	r8, r3
 80161b4:	e7f4      	b.n	80161a0 <_dtoa_r+0x8f8>
 80161b6:	d082      	beq.n	80160be <_dtoa_r+0x816>
 80161b8:	9a05      	ldr	r2, [sp, #20]
 80161ba:	331c      	adds	r3, #28
 80161bc:	441a      	add	r2, r3
 80161be:	9205      	str	r2, [sp, #20]
 80161c0:	9a06      	ldr	r2, [sp, #24]
 80161c2:	441a      	add	r2, r3
 80161c4:	441d      	add	r5, r3
 80161c6:	9206      	str	r2, [sp, #24]
 80161c8:	e779      	b.n	80160be <_dtoa_r+0x816>
 80161ca:	4603      	mov	r3, r0
 80161cc:	e7f4      	b.n	80161b8 <_dtoa_r+0x910>
 80161ce:	9b04      	ldr	r3, [sp, #16]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	dc37      	bgt.n	8016244 <_dtoa_r+0x99c>
 80161d4:	9b07      	ldr	r3, [sp, #28]
 80161d6:	2b02      	cmp	r3, #2
 80161d8:	dd34      	ble.n	8016244 <_dtoa_r+0x99c>
 80161da:	9b04      	ldr	r3, [sp, #16]
 80161dc:	9301      	str	r3, [sp, #4]
 80161de:	9b01      	ldr	r3, [sp, #4]
 80161e0:	b963      	cbnz	r3, 80161fc <_dtoa_r+0x954>
 80161e2:	4631      	mov	r1, r6
 80161e4:	2205      	movs	r2, #5
 80161e6:	4620      	mov	r0, r4
 80161e8:	f000 fab2 	bl	8016750 <__multadd>
 80161ec:	4601      	mov	r1, r0
 80161ee:	4606      	mov	r6, r0
 80161f0:	4650      	mov	r0, sl
 80161f2:	f000 fd11 	bl	8016c18 <__mcmp>
 80161f6:	2800      	cmp	r0, #0
 80161f8:	f73f adbb 	bgt.w	8015d72 <_dtoa_r+0x4ca>
 80161fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161fe:	9d00      	ldr	r5, [sp, #0]
 8016200:	ea6f 0b03 	mvn.w	fp, r3
 8016204:	f04f 0800 	mov.w	r8, #0
 8016208:	4631      	mov	r1, r6
 801620a:	4620      	mov	r0, r4
 801620c:	f000 fa7e 	bl	801670c <_Bfree>
 8016210:	2f00      	cmp	r7, #0
 8016212:	f43f aeab 	beq.w	8015f6c <_dtoa_r+0x6c4>
 8016216:	f1b8 0f00 	cmp.w	r8, #0
 801621a:	d005      	beq.n	8016228 <_dtoa_r+0x980>
 801621c:	45b8      	cmp	r8, r7
 801621e:	d003      	beq.n	8016228 <_dtoa_r+0x980>
 8016220:	4641      	mov	r1, r8
 8016222:	4620      	mov	r0, r4
 8016224:	f000 fa72 	bl	801670c <_Bfree>
 8016228:	4639      	mov	r1, r7
 801622a:	4620      	mov	r0, r4
 801622c:	f000 fa6e 	bl	801670c <_Bfree>
 8016230:	e69c      	b.n	8015f6c <_dtoa_r+0x6c4>
 8016232:	2600      	movs	r6, #0
 8016234:	4637      	mov	r7, r6
 8016236:	e7e1      	b.n	80161fc <_dtoa_r+0x954>
 8016238:	46bb      	mov	fp, r7
 801623a:	4637      	mov	r7, r6
 801623c:	e599      	b.n	8015d72 <_dtoa_r+0x4ca>
 801623e:	bf00      	nop
 8016240:	40240000 	.word	0x40240000
 8016244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016246:	2b00      	cmp	r3, #0
 8016248:	f000 80c8 	beq.w	80163dc <_dtoa_r+0xb34>
 801624c:	9b04      	ldr	r3, [sp, #16]
 801624e:	9301      	str	r3, [sp, #4]
 8016250:	2d00      	cmp	r5, #0
 8016252:	dd05      	ble.n	8016260 <_dtoa_r+0x9b8>
 8016254:	4639      	mov	r1, r7
 8016256:	462a      	mov	r2, r5
 8016258:	4620      	mov	r0, r4
 801625a:	f000 fc71 	bl	8016b40 <__lshift>
 801625e:	4607      	mov	r7, r0
 8016260:	f1b8 0f00 	cmp.w	r8, #0
 8016264:	d05b      	beq.n	801631e <_dtoa_r+0xa76>
 8016266:	6879      	ldr	r1, [r7, #4]
 8016268:	4620      	mov	r0, r4
 801626a:	f000 fa0f 	bl	801668c <_Balloc>
 801626e:	4605      	mov	r5, r0
 8016270:	b928      	cbnz	r0, 801627e <_dtoa_r+0x9d6>
 8016272:	4b83      	ldr	r3, [pc, #524]	; (8016480 <_dtoa_r+0xbd8>)
 8016274:	4602      	mov	r2, r0
 8016276:	f240 21ef 	movw	r1, #751	; 0x2ef
 801627a:	f7ff bb2e 	b.w	80158da <_dtoa_r+0x32>
 801627e:	693a      	ldr	r2, [r7, #16]
 8016280:	3202      	adds	r2, #2
 8016282:	0092      	lsls	r2, r2, #2
 8016284:	f107 010c 	add.w	r1, r7, #12
 8016288:	300c      	adds	r0, #12
 801628a:	f7ff fa70 	bl	801576e <memcpy>
 801628e:	2201      	movs	r2, #1
 8016290:	4629      	mov	r1, r5
 8016292:	4620      	mov	r0, r4
 8016294:	f000 fc54 	bl	8016b40 <__lshift>
 8016298:	9b00      	ldr	r3, [sp, #0]
 801629a:	3301      	adds	r3, #1
 801629c:	9304      	str	r3, [sp, #16]
 801629e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80162a2:	4413      	add	r3, r2
 80162a4:	9308      	str	r3, [sp, #32]
 80162a6:	9b02      	ldr	r3, [sp, #8]
 80162a8:	f003 0301 	and.w	r3, r3, #1
 80162ac:	46b8      	mov	r8, r7
 80162ae:	9306      	str	r3, [sp, #24]
 80162b0:	4607      	mov	r7, r0
 80162b2:	9b04      	ldr	r3, [sp, #16]
 80162b4:	4631      	mov	r1, r6
 80162b6:	3b01      	subs	r3, #1
 80162b8:	4650      	mov	r0, sl
 80162ba:	9301      	str	r3, [sp, #4]
 80162bc:	f7ff fa6c 	bl	8015798 <quorem>
 80162c0:	4641      	mov	r1, r8
 80162c2:	9002      	str	r0, [sp, #8]
 80162c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80162c8:	4650      	mov	r0, sl
 80162ca:	f000 fca5 	bl	8016c18 <__mcmp>
 80162ce:	463a      	mov	r2, r7
 80162d0:	9005      	str	r0, [sp, #20]
 80162d2:	4631      	mov	r1, r6
 80162d4:	4620      	mov	r0, r4
 80162d6:	f000 fcbb 	bl	8016c50 <__mdiff>
 80162da:	68c2      	ldr	r2, [r0, #12]
 80162dc:	4605      	mov	r5, r0
 80162de:	bb02      	cbnz	r2, 8016322 <_dtoa_r+0xa7a>
 80162e0:	4601      	mov	r1, r0
 80162e2:	4650      	mov	r0, sl
 80162e4:	f000 fc98 	bl	8016c18 <__mcmp>
 80162e8:	4602      	mov	r2, r0
 80162ea:	4629      	mov	r1, r5
 80162ec:	4620      	mov	r0, r4
 80162ee:	9209      	str	r2, [sp, #36]	; 0x24
 80162f0:	f000 fa0c 	bl	801670c <_Bfree>
 80162f4:	9b07      	ldr	r3, [sp, #28]
 80162f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80162f8:	9d04      	ldr	r5, [sp, #16]
 80162fa:	ea43 0102 	orr.w	r1, r3, r2
 80162fe:	9b06      	ldr	r3, [sp, #24]
 8016300:	4319      	orrs	r1, r3
 8016302:	d110      	bne.n	8016326 <_dtoa_r+0xa7e>
 8016304:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016308:	d029      	beq.n	801635e <_dtoa_r+0xab6>
 801630a:	9b05      	ldr	r3, [sp, #20]
 801630c:	2b00      	cmp	r3, #0
 801630e:	dd02      	ble.n	8016316 <_dtoa_r+0xa6e>
 8016310:	9b02      	ldr	r3, [sp, #8]
 8016312:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8016316:	9b01      	ldr	r3, [sp, #4]
 8016318:	f883 9000 	strb.w	r9, [r3]
 801631c:	e774      	b.n	8016208 <_dtoa_r+0x960>
 801631e:	4638      	mov	r0, r7
 8016320:	e7ba      	b.n	8016298 <_dtoa_r+0x9f0>
 8016322:	2201      	movs	r2, #1
 8016324:	e7e1      	b.n	80162ea <_dtoa_r+0xa42>
 8016326:	9b05      	ldr	r3, [sp, #20]
 8016328:	2b00      	cmp	r3, #0
 801632a:	db04      	blt.n	8016336 <_dtoa_r+0xa8e>
 801632c:	9907      	ldr	r1, [sp, #28]
 801632e:	430b      	orrs	r3, r1
 8016330:	9906      	ldr	r1, [sp, #24]
 8016332:	430b      	orrs	r3, r1
 8016334:	d120      	bne.n	8016378 <_dtoa_r+0xad0>
 8016336:	2a00      	cmp	r2, #0
 8016338:	dded      	ble.n	8016316 <_dtoa_r+0xa6e>
 801633a:	4651      	mov	r1, sl
 801633c:	2201      	movs	r2, #1
 801633e:	4620      	mov	r0, r4
 8016340:	f000 fbfe 	bl	8016b40 <__lshift>
 8016344:	4631      	mov	r1, r6
 8016346:	4682      	mov	sl, r0
 8016348:	f000 fc66 	bl	8016c18 <__mcmp>
 801634c:	2800      	cmp	r0, #0
 801634e:	dc03      	bgt.n	8016358 <_dtoa_r+0xab0>
 8016350:	d1e1      	bne.n	8016316 <_dtoa_r+0xa6e>
 8016352:	f019 0f01 	tst.w	r9, #1
 8016356:	d0de      	beq.n	8016316 <_dtoa_r+0xa6e>
 8016358:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801635c:	d1d8      	bne.n	8016310 <_dtoa_r+0xa68>
 801635e:	9a01      	ldr	r2, [sp, #4]
 8016360:	2339      	movs	r3, #57	; 0x39
 8016362:	7013      	strb	r3, [r2, #0]
 8016364:	462b      	mov	r3, r5
 8016366:	461d      	mov	r5, r3
 8016368:	3b01      	subs	r3, #1
 801636a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801636e:	2a39      	cmp	r2, #57	; 0x39
 8016370:	d06c      	beq.n	801644c <_dtoa_r+0xba4>
 8016372:	3201      	adds	r2, #1
 8016374:	701a      	strb	r2, [r3, #0]
 8016376:	e747      	b.n	8016208 <_dtoa_r+0x960>
 8016378:	2a00      	cmp	r2, #0
 801637a:	dd07      	ble.n	801638c <_dtoa_r+0xae4>
 801637c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016380:	d0ed      	beq.n	801635e <_dtoa_r+0xab6>
 8016382:	9a01      	ldr	r2, [sp, #4]
 8016384:	f109 0301 	add.w	r3, r9, #1
 8016388:	7013      	strb	r3, [r2, #0]
 801638a:	e73d      	b.n	8016208 <_dtoa_r+0x960>
 801638c:	9b04      	ldr	r3, [sp, #16]
 801638e:	9a08      	ldr	r2, [sp, #32]
 8016390:	f803 9c01 	strb.w	r9, [r3, #-1]
 8016394:	4293      	cmp	r3, r2
 8016396:	d043      	beq.n	8016420 <_dtoa_r+0xb78>
 8016398:	4651      	mov	r1, sl
 801639a:	2300      	movs	r3, #0
 801639c:	220a      	movs	r2, #10
 801639e:	4620      	mov	r0, r4
 80163a0:	f000 f9d6 	bl	8016750 <__multadd>
 80163a4:	45b8      	cmp	r8, r7
 80163a6:	4682      	mov	sl, r0
 80163a8:	f04f 0300 	mov.w	r3, #0
 80163ac:	f04f 020a 	mov.w	r2, #10
 80163b0:	4641      	mov	r1, r8
 80163b2:	4620      	mov	r0, r4
 80163b4:	d107      	bne.n	80163c6 <_dtoa_r+0xb1e>
 80163b6:	f000 f9cb 	bl	8016750 <__multadd>
 80163ba:	4680      	mov	r8, r0
 80163bc:	4607      	mov	r7, r0
 80163be:	9b04      	ldr	r3, [sp, #16]
 80163c0:	3301      	adds	r3, #1
 80163c2:	9304      	str	r3, [sp, #16]
 80163c4:	e775      	b.n	80162b2 <_dtoa_r+0xa0a>
 80163c6:	f000 f9c3 	bl	8016750 <__multadd>
 80163ca:	4639      	mov	r1, r7
 80163cc:	4680      	mov	r8, r0
 80163ce:	2300      	movs	r3, #0
 80163d0:	220a      	movs	r2, #10
 80163d2:	4620      	mov	r0, r4
 80163d4:	f000 f9bc 	bl	8016750 <__multadd>
 80163d8:	4607      	mov	r7, r0
 80163da:	e7f0      	b.n	80163be <_dtoa_r+0xb16>
 80163dc:	9b04      	ldr	r3, [sp, #16]
 80163de:	9301      	str	r3, [sp, #4]
 80163e0:	9d00      	ldr	r5, [sp, #0]
 80163e2:	4631      	mov	r1, r6
 80163e4:	4650      	mov	r0, sl
 80163e6:	f7ff f9d7 	bl	8015798 <quorem>
 80163ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80163ee:	9b00      	ldr	r3, [sp, #0]
 80163f0:	f805 9b01 	strb.w	r9, [r5], #1
 80163f4:	1aea      	subs	r2, r5, r3
 80163f6:	9b01      	ldr	r3, [sp, #4]
 80163f8:	4293      	cmp	r3, r2
 80163fa:	dd07      	ble.n	801640c <_dtoa_r+0xb64>
 80163fc:	4651      	mov	r1, sl
 80163fe:	2300      	movs	r3, #0
 8016400:	220a      	movs	r2, #10
 8016402:	4620      	mov	r0, r4
 8016404:	f000 f9a4 	bl	8016750 <__multadd>
 8016408:	4682      	mov	sl, r0
 801640a:	e7ea      	b.n	80163e2 <_dtoa_r+0xb3a>
 801640c:	9b01      	ldr	r3, [sp, #4]
 801640e:	2b00      	cmp	r3, #0
 8016410:	bfc8      	it	gt
 8016412:	461d      	movgt	r5, r3
 8016414:	9b00      	ldr	r3, [sp, #0]
 8016416:	bfd8      	it	le
 8016418:	2501      	movle	r5, #1
 801641a:	441d      	add	r5, r3
 801641c:	f04f 0800 	mov.w	r8, #0
 8016420:	4651      	mov	r1, sl
 8016422:	2201      	movs	r2, #1
 8016424:	4620      	mov	r0, r4
 8016426:	f000 fb8b 	bl	8016b40 <__lshift>
 801642a:	4631      	mov	r1, r6
 801642c:	4682      	mov	sl, r0
 801642e:	f000 fbf3 	bl	8016c18 <__mcmp>
 8016432:	2800      	cmp	r0, #0
 8016434:	dc96      	bgt.n	8016364 <_dtoa_r+0xabc>
 8016436:	d102      	bne.n	801643e <_dtoa_r+0xb96>
 8016438:	f019 0f01 	tst.w	r9, #1
 801643c:	d192      	bne.n	8016364 <_dtoa_r+0xabc>
 801643e:	462b      	mov	r3, r5
 8016440:	461d      	mov	r5, r3
 8016442:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016446:	2a30      	cmp	r2, #48	; 0x30
 8016448:	d0fa      	beq.n	8016440 <_dtoa_r+0xb98>
 801644a:	e6dd      	b.n	8016208 <_dtoa_r+0x960>
 801644c:	9a00      	ldr	r2, [sp, #0]
 801644e:	429a      	cmp	r2, r3
 8016450:	d189      	bne.n	8016366 <_dtoa_r+0xabe>
 8016452:	f10b 0b01 	add.w	fp, fp, #1
 8016456:	2331      	movs	r3, #49	; 0x31
 8016458:	e796      	b.n	8016388 <_dtoa_r+0xae0>
 801645a:	4b0a      	ldr	r3, [pc, #40]	; (8016484 <_dtoa_r+0xbdc>)
 801645c:	f7ff ba99 	b.w	8015992 <_dtoa_r+0xea>
 8016460:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016462:	2b00      	cmp	r3, #0
 8016464:	f47f aa6d 	bne.w	8015942 <_dtoa_r+0x9a>
 8016468:	4b07      	ldr	r3, [pc, #28]	; (8016488 <_dtoa_r+0xbe0>)
 801646a:	f7ff ba92 	b.w	8015992 <_dtoa_r+0xea>
 801646e:	9b01      	ldr	r3, [sp, #4]
 8016470:	2b00      	cmp	r3, #0
 8016472:	dcb5      	bgt.n	80163e0 <_dtoa_r+0xb38>
 8016474:	9b07      	ldr	r3, [sp, #28]
 8016476:	2b02      	cmp	r3, #2
 8016478:	f73f aeb1 	bgt.w	80161de <_dtoa_r+0x936>
 801647c:	e7b0      	b.n	80163e0 <_dtoa_r+0xb38>
 801647e:	bf00      	nop
 8016480:	0801c11b 	.word	0x0801c11b
 8016484:	0801c400 	.word	0x0801c400
 8016488:	0801c09f 	.word	0x0801c09f

0801648c <_free_r>:
 801648c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801648e:	2900      	cmp	r1, #0
 8016490:	d044      	beq.n	801651c <_free_r+0x90>
 8016492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016496:	9001      	str	r0, [sp, #4]
 8016498:	2b00      	cmp	r3, #0
 801649a:	f1a1 0404 	sub.w	r4, r1, #4
 801649e:	bfb8      	it	lt
 80164a0:	18e4      	addlt	r4, r4, r3
 80164a2:	f000 f8e7 	bl	8016674 <__malloc_lock>
 80164a6:	4a1e      	ldr	r2, [pc, #120]	; (8016520 <_free_r+0x94>)
 80164a8:	9801      	ldr	r0, [sp, #4]
 80164aa:	6813      	ldr	r3, [r2, #0]
 80164ac:	b933      	cbnz	r3, 80164bc <_free_r+0x30>
 80164ae:	6063      	str	r3, [r4, #4]
 80164b0:	6014      	str	r4, [r2, #0]
 80164b2:	b003      	add	sp, #12
 80164b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80164b8:	f000 b8e2 	b.w	8016680 <__malloc_unlock>
 80164bc:	42a3      	cmp	r3, r4
 80164be:	d908      	bls.n	80164d2 <_free_r+0x46>
 80164c0:	6825      	ldr	r5, [r4, #0]
 80164c2:	1961      	adds	r1, r4, r5
 80164c4:	428b      	cmp	r3, r1
 80164c6:	bf01      	itttt	eq
 80164c8:	6819      	ldreq	r1, [r3, #0]
 80164ca:	685b      	ldreq	r3, [r3, #4]
 80164cc:	1949      	addeq	r1, r1, r5
 80164ce:	6021      	streq	r1, [r4, #0]
 80164d0:	e7ed      	b.n	80164ae <_free_r+0x22>
 80164d2:	461a      	mov	r2, r3
 80164d4:	685b      	ldr	r3, [r3, #4]
 80164d6:	b10b      	cbz	r3, 80164dc <_free_r+0x50>
 80164d8:	42a3      	cmp	r3, r4
 80164da:	d9fa      	bls.n	80164d2 <_free_r+0x46>
 80164dc:	6811      	ldr	r1, [r2, #0]
 80164de:	1855      	adds	r5, r2, r1
 80164e0:	42a5      	cmp	r5, r4
 80164e2:	d10b      	bne.n	80164fc <_free_r+0x70>
 80164e4:	6824      	ldr	r4, [r4, #0]
 80164e6:	4421      	add	r1, r4
 80164e8:	1854      	adds	r4, r2, r1
 80164ea:	42a3      	cmp	r3, r4
 80164ec:	6011      	str	r1, [r2, #0]
 80164ee:	d1e0      	bne.n	80164b2 <_free_r+0x26>
 80164f0:	681c      	ldr	r4, [r3, #0]
 80164f2:	685b      	ldr	r3, [r3, #4]
 80164f4:	6053      	str	r3, [r2, #4]
 80164f6:	440c      	add	r4, r1
 80164f8:	6014      	str	r4, [r2, #0]
 80164fa:	e7da      	b.n	80164b2 <_free_r+0x26>
 80164fc:	d902      	bls.n	8016504 <_free_r+0x78>
 80164fe:	230c      	movs	r3, #12
 8016500:	6003      	str	r3, [r0, #0]
 8016502:	e7d6      	b.n	80164b2 <_free_r+0x26>
 8016504:	6825      	ldr	r5, [r4, #0]
 8016506:	1961      	adds	r1, r4, r5
 8016508:	428b      	cmp	r3, r1
 801650a:	bf04      	itt	eq
 801650c:	6819      	ldreq	r1, [r3, #0]
 801650e:	685b      	ldreq	r3, [r3, #4]
 8016510:	6063      	str	r3, [r4, #4]
 8016512:	bf04      	itt	eq
 8016514:	1949      	addeq	r1, r1, r5
 8016516:	6021      	streq	r1, [r4, #0]
 8016518:	6054      	str	r4, [r2, #4]
 801651a:	e7ca      	b.n	80164b2 <_free_r+0x26>
 801651c:	b003      	add	sp, #12
 801651e:	bd30      	pop	{r4, r5, pc}
 8016520:	200090dc 	.word	0x200090dc

08016524 <malloc>:
 8016524:	4b02      	ldr	r3, [pc, #8]	; (8016530 <malloc+0xc>)
 8016526:	4601      	mov	r1, r0
 8016528:	6818      	ldr	r0, [r3, #0]
 801652a:	f000 b823 	b.w	8016574 <_malloc_r>
 801652e:	bf00      	nop
 8016530:	20000070 	.word	0x20000070

08016534 <sbrk_aligned>:
 8016534:	b570      	push	{r4, r5, r6, lr}
 8016536:	4e0e      	ldr	r6, [pc, #56]	; (8016570 <sbrk_aligned+0x3c>)
 8016538:	460c      	mov	r4, r1
 801653a:	6831      	ldr	r1, [r6, #0]
 801653c:	4605      	mov	r5, r0
 801653e:	b911      	cbnz	r1, 8016546 <sbrk_aligned+0x12>
 8016540:	f002 f99c 	bl	801887c <_sbrk_r>
 8016544:	6030      	str	r0, [r6, #0]
 8016546:	4621      	mov	r1, r4
 8016548:	4628      	mov	r0, r5
 801654a:	f002 f997 	bl	801887c <_sbrk_r>
 801654e:	1c43      	adds	r3, r0, #1
 8016550:	d00a      	beq.n	8016568 <sbrk_aligned+0x34>
 8016552:	1cc4      	adds	r4, r0, #3
 8016554:	f024 0403 	bic.w	r4, r4, #3
 8016558:	42a0      	cmp	r0, r4
 801655a:	d007      	beq.n	801656c <sbrk_aligned+0x38>
 801655c:	1a21      	subs	r1, r4, r0
 801655e:	4628      	mov	r0, r5
 8016560:	f002 f98c 	bl	801887c <_sbrk_r>
 8016564:	3001      	adds	r0, #1
 8016566:	d101      	bne.n	801656c <sbrk_aligned+0x38>
 8016568:	f04f 34ff 	mov.w	r4, #4294967295
 801656c:	4620      	mov	r0, r4
 801656e:	bd70      	pop	{r4, r5, r6, pc}
 8016570:	200090e0 	.word	0x200090e0

08016574 <_malloc_r>:
 8016574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016578:	1ccd      	adds	r5, r1, #3
 801657a:	f025 0503 	bic.w	r5, r5, #3
 801657e:	3508      	adds	r5, #8
 8016580:	2d0c      	cmp	r5, #12
 8016582:	bf38      	it	cc
 8016584:	250c      	movcc	r5, #12
 8016586:	2d00      	cmp	r5, #0
 8016588:	4607      	mov	r7, r0
 801658a:	db01      	blt.n	8016590 <_malloc_r+0x1c>
 801658c:	42a9      	cmp	r1, r5
 801658e:	d905      	bls.n	801659c <_malloc_r+0x28>
 8016590:	230c      	movs	r3, #12
 8016592:	603b      	str	r3, [r7, #0]
 8016594:	2600      	movs	r6, #0
 8016596:	4630      	mov	r0, r6
 8016598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801659c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8016670 <_malloc_r+0xfc>
 80165a0:	f000 f868 	bl	8016674 <__malloc_lock>
 80165a4:	f8d8 3000 	ldr.w	r3, [r8]
 80165a8:	461c      	mov	r4, r3
 80165aa:	bb5c      	cbnz	r4, 8016604 <_malloc_r+0x90>
 80165ac:	4629      	mov	r1, r5
 80165ae:	4638      	mov	r0, r7
 80165b0:	f7ff ffc0 	bl	8016534 <sbrk_aligned>
 80165b4:	1c43      	adds	r3, r0, #1
 80165b6:	4604      	mov	r4, r0
 80165b8:	d155      	bne.n	8016666 <_malloc_r+0xf2>
 80165ba:	f8d8 4000 	ldr.w	r4, [r8]
 80165be:	4626      	mov	r6, r4
 80165c0:	2e00      	cmp	r6, #0
 80165c2:	d145      	bne.n	8016650 <_malloc_r+0xdc>
 80165c4:	2c00      	cmp	r4, #0
 80165c6:	d048      	beq.n	801665a <_malloc_r+0xe6>
 80165c8:	6823      	ldr	r3, [r4, #0]
 80165ca:	4631      	mov	r1, r6
 80165cc:	4638      	mov	r0, r7
 80165ce:	eb04 0903 	add.w	r9, r4, r3
 80165d2:	f002 f953 	bl	801887c <_sbrk_r>
 80165d6:	4581      	cmp	r9, r0
 80165d8:	d13f      	bne.n	801665a <_malloc_r+0xe6>
 80165da:	6821      	ldr	r1, [r4, #0]
 80165dc:	1a6d      	subs	r5, r5, r1
 80165de:	4629      	mov	r1, r5
 80165e0:	4638      	mov	r0, r7
 80165e2:	f7ff ffa7 	bl	8016534 <sbrk_aligned>
 80165e6:	3001      	adds	r0, #1
 80165e8:	d037      	beq.n	801665a <_malloc_r+0xe6>
 80165ea:	6823      	ldr	r3, [r4, #0]
 80165ec:	442b      	add	r3, r5
 80165ee:	6023      	str	r3, [r4, #0]
 80165f0:	f8d8 3000 	ldr.w	r3, [r8]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d038      	beq.n	801666a <_malloc_r+0xf6>
 80165f8:	685a      	ldr	r2, [r3, #4]
 80165fa:	42a2      	cmp	r2, r4
 80165fc:	d12b      	bne.n	8016656 <_malloc_r+0xe2>
 80165fe:	2200      	movs	r2, #0
 8016600:	605a      	str	r2, [r3, #4]
 8016602:	e00f      	b.n	8016624 <_malloc_r+0xb0>
 8016604:	6822      	ldr	r2, [r4, #0]
 8016606:	1b52      	subs	r2, r2, r5
 8016608:	d41f      	bmi.n	801664a <_malloc_r+0xd6>
 801660a:	2a0b      	cmp	r2, #11
 801660c:	d917      	bls.n	801663e <_malloc_r+0xca>
 801660e:	1961      	adds	r1, r4, r5
 8016610:	42a3      	cmp	r3, r4
 8016612:	6025      	str	r5, [r4, #0]
 8016614:	bf18      	it	ne
 8016616:	6059      	strne	r1, [r3, #4]
 8016618:	6863      	ldr	r3, [r4, #4]
 801661a:	bf08      	it	eq
 801661c:	f8c8 1000 	streq.w	r1, [r8]
 8016620:	5162      	str	r2, [r4, r5]
 8016622:	604b      	str	r3, [r1, #4]
 8016624:	4638      	mov	r0, r7
 8016626:	f104 060b 	add.w	r6, r4, #11
 801662a:	f000 f829 	bl	8016680 <__malloc_unlock>
 801662e:	f026 0607 	bic.w	r6, r6, #7
 8016632:	1d23      	adds	r3, r4, #4
 8016634:	1af2      	subs	r2, r6, r3
 8016636:	d0ae      	beq.n	8016596 <_malloc_r+0x22>
 8016638:	1b9b      	subs	r3, r3, r6
 801663a:	50a3      	str	r3, [r4, r2]
 801663c:	e7ab      	b.n	8016596 <_malloc_r+0x22>
 801663e:	42a3      	cmp	r3, r4
 8016640:	6862      	ldr	r2, [r4, #4]
 8016642:	d1dd      	bne.n	8016600 <_malloc_r+0x8c>
 8016644:	f8c8 2000 	str.w	r2, [r8]
 8016648:	e7ec      	b.n	8016624 <_malloc_r+0xb0>
 801664a:	4623      	mov	r3, r4
 801664c:	6864      	ldr	r4, [r4, #4]
 801664e:	e7ac      	b.n	80165aa <_malloc_r+0x36>
 8016650:	4634      	mov	r4, r6
 8016652:	6876      	ldr	r6, [r6, #4]
 8016654:	e7b4      	b.n	80165c0 <_malloc_r+0x4c>
 8016656:	4613      	mov	r3, r2
 8016658:	e7cc      	b.n	80165f4 <_malloc_r+0x80>
 801665a:	230c      	movs	r3, #12
 801665c:	603b      	str	r3, [r7, #0]
 801665e:	4638      	mov	r0, r7
 8016660:	f000 f80e 	bl	8016680 <__malloc_unlock>
 8016664:	e797      	b.n	8016596 <_malloc_r+0x22>
 8016666:	6025      	str	r5, [r4, #0]
 8016668:	e7dc      	b.n	8016624 <_malloc_r+0xb0>
 801666a:	605b      	str	r3, [r3, #4]
 801666c:	deff      	udf	#255	; 0xff
 801666e:	bf00      	nop
 8016670:	200090dc 	.word	0x200090dc

08016674 <__malloc_lock>:
 8016674:	4801      	ldr	r0, [pc, #4]	; (801667c <__malloc_lock+0x8>)
 8016676:	f7ff b878 	b.w	801576a <__retarget_lock_acquire_recursive>
 801667a:	bf00      	nop
 801667c:	200090d8 	.word	0x200090d8

08016680 <__malloc_unlock>:
 8016680:	4801      	ldr	r0, [pc, #4]	; (8016688 <__malloc_unlock+0x8>)
 8016682:	f7ff b873 	b.w	801576c <__retarget_lock_release_recursive>
 8016686:	bf00      	nop
 8016688:	200090d8 	.word	0x200090d8

0801668c <_Balloc>:
 801668c:	b570      	push	{r4, r5, r6, lr}
 801668e:	69c6      	ldr	r6, [r0, #28]
 8016690:	4604      	mov	r4, r0
 8016692:	460d      	mov	r5, r1
 8016694:	b976      	cbnz	r6, 80166b4 <_Balloc+0x28>
 8016696:	2010      	movs	r0, #16
 8016698:	f7ff ff44 	bl	8016524 <malloc>
 801669c:	4602      	mov	r2, r0
 801669e:	61e0      	str	r0, [r4, #28]
 80166a0:	b920      	cbnz	r0, 80166ac <_Balloc+0x20>
 80166a2:	4b18      	ldr	r3, [pc, #96]	; (8016704 <_Balloc+0x78>)
 80166a4:	4818      	ldr	r0, [pc, #96]	; (8016708 <_Balloc+0x7c>)
 80166a6:	216b      	movs	r1, #107	; 0x6b
 80166a8:	f002 f902 	bl	80188b0 <__assert_func>
 80166ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80166b0:	6006      	str	r6, [r0, #0]
 80166b2:	60c6      	str	r6, [r0, #12]
 80166b4:	69e6      	ldr	r6, [r4, #28]
 80166b6:	68f3      	ldr	r3, [r6, #12]
 80166b8:	b183      	cbz	r3, 80166dc <_Balloc+0x50>
 80166ba:	69e3      	ldr	r3, [r4, #28]
 80166bc:	68db      	ldr	r3, [r3, #12]
 80166be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80166c2:	b9b8      	cbnz	r0, 80166f4 <_Balloc+0x68>
 80166c4:	2101      	movs	r1, #1
 80166c6:	fa01 f605 	lsl.w	r6, r1, r5
 80166ca:	1d72      	adds	r2, r6, #5
 80166cc:	0092      	lsls	r2, r2, #2
 80166ce:	4620      	mov	r0, r4
 80166d0:	f002 f90c 	bl	80188ec <_calloc_r>
 80166d4:	b160      	cbz	r0, 80166f0 <_Balloc+0x64>
 80166d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80166da:	e00e      	b.n	80166fa <_Balloc+0x6e>
 80166dc:	2221      	movs	r2, #33	; 0x21
 80166de:	2104      	movs	r1, #4
 80166e0:	4620      	mov	r0, r4
 80166e2:	f002 f903 	bl	80188ec <_calloc_r>
 80166e6:	69e3      	ldr	r3, [r4, #28]
 80166e8:	60f0      	str	r0, [r6, #12]
 80166ea:	68db      	ldr	r3, [r3, #12]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d1e4      	bne.n	80166ba <_Balloc+0x2e>
 80166f0:	2000      	movs	r0, #0
 80166f2:	bd70      	pop	{r4, r5, r6, pc}
 80166f4:	6802      	ldr	r2, [r0, #0]
 80166f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80166fa:	2300      	movs	r3, #0
 80166fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016700:	e7f7      	b.n	80166f2 <_Balloc+0x66>
 8016702:	bf00      	nop
 8016704:	0801c0ac 	.word	0x0801c0ac
 8016708:	0801c12c 	.word	0x0801c12c

0801670c <_Bfree>:
 801670c:	b570      	push	{r4, r5, r6, lr}
 801670e:	69c6      	ldr	r6, [r0, #28]
 8016710:	4605      	mov	r5, r0
 8016712:	460c      	mov	r4, r1
 8016714:	b976      	cbnz	r6, 8016734 <_Bfree+0x28>
 8016716:	2010      	movs	r0, #16
 8016718:	f7ff ff04 	bl	8016524 <malloc>
 801671c:	4602      	mov	r2, r0
 801671e:	61e8      	str	r0, [r5, #28]
 8016720:	b920      	cbnz	r0, 801672c <_Bfree+0x20>
 8016722:	4b09      	ldr	r3, [pc, #36]	; (8016748 <_Bfree+0x3c>)
 8016724:	4809      	ldr	r0, [pc, #36]	; (801674c <_Bfree+0x40>)
 8016726:	218f      	movs	r1, #143	; 0x8f
 8016728:	f002 f8c2 	bl	80188b0 <__assert_func>
 801672c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016730:	6006      	str	r6, [r0, #0]
 8016732:	60c6      	str	r6, [r0, #12]
 8016734:	b13c      	cbz	r4, 8016746 <_Bfree+0x3a>
 8016736:	69eb      	ldr	r3, [r5, #28]
 8016738:	6862      	ldr	r2, [r4, #4]
 801673a:	68db      	ldr	r3, [r3, #12]
 801673c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016740:	6021      	str	r1, [r4, #0]
 8016742:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016746:	bd70      	pop	{r4, r5, r6, pc}
 8016748:	0801c0ac 	.word	0x0801c0ac
 801674c:	0801c12c 	.word	0x0801c12c

08016750 <__multadd>:
 8016750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016754:	690d      	ldr	r5, [r1, #16]
 8016756:	4607      	mov	r7, r0
 8016758:	460c      	mov	r4, r1
 801675a:	461e      	mov	r6, r3
 801675c:	f101 0c14 	add.w	ip, r1, #20
 8016760:	2000      	movs	r0, #0
 8016762:	f8dc 3000 	ldr.w	r3, [ip]
 8016766:	b299      	uxth	r1, r3
 8016768:	fb02 6101 	mla	r1, r2, r1, r6
 801676c:	0c1e      	lsrs	r6, r3, #16
 801676e:	0c0b      	lsrs	r3, r1, #16
 8016770:	fb02 3306 	mla	r3, r2, r6, r3
 8016774:	b289      	uxth	r1, r1
 8016776:	3001      	adds	r0, #1
 8016778:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801677c:	4285      	cmp	r5, r0
 801677e:	f84c 1b04 	str.w	r1, [ip], #4
 8016782:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016786:	dcec      	bgt.n	8016762 <__multadd+0x12>
 8016788:	b30e      	cbz	r6, 80167ce <__multadd+0x7e>
 801678a:	68a3      	ldr	r3, [r4, #8]
 801678c:	42ab      	cmp	r3, r5
 801678e:	dc19      	bgt.n	80167c4 <__multadd+0x74>
 8016790:	6861      	ldr	r1, [r4, #4]
 8016792:	4638      	mov	r0, r7
 8016794:	3101      	adds	r1, #1
 8016796:	f7ff ff79 	bl	801668c <_Balloc>
 801679a:	4680      	mov	r8, r0
 801679c:	b928      	cbnz	r0, 80167aa <__multadd+0x5a>
 801679e:	4602      	mov	r2, r0
 80167a0:	4b0c      	ldr	r3, [pc, #48]	; (80167d4 <__multadd+0x84>)
 80167a2:	480d      	ldr	r0, [pc, #52]	; (80167d8 <__multadd+0x88>)
 80167a4:	21ba      	movs	r1, #186	; 0xba
 80167a6:	f002 f883 	bl	80188b0 <__assert_func>
 80167aa:	6922      	ldr	r2, [r4, #16]
 80167ac:	3202      	adds	r2, #2
 80167ae:	f104 010c 	add.w	r1, r4, #12
 80167b2:	0092      	lsls	r2, r2, #2
 80167b4:	300c      	adds	r0, #12
 80167b6:	f7fe ffda 	bl	801576e <memcpy>
 80167ba:	4621      	mov	r1, r4
 80167bc:	4638      	mov	r0, r7
 80167be:	f7ff ffa5 	bl	801670c <_Bfree>
 80167c2:	4644      	mov	r4, r8
 80167c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80167c8:	3501      	adds	r5, #1
 80167ca:	615e      	str	r6, [r3, #20]
 80167cc:	6125      	str	r5, [r4, #16]
 80167ce:	4620      	mov	r0, r4
 80167d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167d4:	0801c11b 	.word	0x0801c11b
 80167d8:	0801c12c 	.word	0x0801c12c

080167dc <__s2b>:
 80167dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167e0:	460c      	mov	r4, r1
 80167e2:	4615      	mov	r5, r2
 80167e4:	461f      	mov	r7, r3
 80167e6:	2209      	movs	r2, #9
 80167e8:	3308      	adds	r3, #8
 80167ea:	4606      	mov	r6, r0
 80167ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80167f0:	2100      	movs	r1, #0
 80167f2:	2201      	movs	r2, #1
 80167f4:	429a      	cmp	r2, r3
 80167f6:	db09      	blt.n	801680c <__s2b+0x30>
 80167f8:	4630      	mov	r0, r6
 80167fa:	f7ff ff47 	bl	801668c <_Balloc>
 80167fe:	b940      	cbnz	r0, 8016812 <__s2b+0x36>
 8016800:	4602      	mov	r2, r0
 8016802:	4b19      	ldr	r3, [pc, #100]	; (8016868 <__s2b+0x8c>)
 8016804:	4819      	ldr	r0, [pc, #100]	; (801686c <__s2b+0x90>)
 8016806:	21d3      	movs	r1, #211	; 0xd3
 8016808:	f002 f852 	bl	80188b0 <__assert_func>
 801680c:	0052      	lsls	r2, r2, #1
 801680e:	3101      	adds	r1, #1
 8016810:	e7f0      	b.n	80167f4 <__s2b+0x18>
 8016812:	9b08      	ldr	r3, [sp, #32]
 8016814:	6143      	str	r3, [r0, #20]
 8016816:	2d09      	cmp	r5, #9
 8016818:	f04f 0301 	mov.w	r3, #1
 801681c:	6103      	str	r3, [r0, #16]
 801681e:	dd16      	ble.n	801684e <__s2b+0x72>
 8016820:	f104 0909 	add.w	r9, r4, #9
 8016824:	46c8      	mov	r8, r9
 8016826:	442c      	add	r4, r5
 8016828:	f818 3b01 	ldrb.w	r3, [r8], #1
 801682c:	4601      	mov	r1, r0
 801682e:	3b30      	subs	r3, #48	; 0x30
 8016830:	220a      	movs	r2, #10
 8016832:	4630      	mov	r0, r6
 8016834:	f7ff ff8c 	bl	8016750 <__multadd>
 8016838:	45a0      	cmp	r8, r4
 801683a:	d1f5      	bne.n	8016828 <__s2b+0x4c>
 801683c:	f1a5 0408 	sub.w	r4, r5, #8
 8016840:	444c      	add	r4, r9
 8016842:	1b2d      	subs	r5, r5, r4
 8016844:	1963      	adds	r3, r4, r5
 8016846:	42bb      	cmp	r3, r7
 8016848:	db04      	blt.n	8016854 <__s2b+0x78>
 801684a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801684e:	340a      	adds	r4, #10
 8016850:	2509      	movs	r5, #9
 8016852:	e7f6      	b.n	8016842 <__s2b+0x66>
 8016854:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016858:	4601      	mov	r1, r0
 801685a:	3b30      	subs	r3, #48	; 0x30
 801685c:	220a      	movs	r2, #10
 801685e:	4630      	mov	r0, r6
 8016860:	f7ff ff76 	bl	8016750 <__multadd>
 8016864:	e7ee      	b.n	8016844 <__s2b+0x68>
 8016866:	bf00      	nop
 8016868:	0801c11b 	.word	0x0801c11b
 801686c:	0801c12c 	.word	0x0801c12c

08016870 <__hi0bits>:
 8016870:	0c03      	lsrs	r3, r0, #16
 8016872:	041b      	lsls	r3, r3, #16
 8016874:	b9d3      	cbnz	r3, 80168ac <__hi0bits+0x3c>
 8016876:	0400      	lsls	r0, r0, #16
 8016878:	2310      	movs	r3, #16
 801687a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801687e:	bf04      	itt	eq
 8016880:	0200      	lsleq	r0, r0, #8
 8016882:	3308      	addeq	r3, #8
 8016884:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016888:	bf04      	itt	eq
 801688a:	0100      	lsleq	r0, r0, #4
 801688c:	3304      	addeq	r3, #4
 801688e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016892:	bf04      	itt	eq
 8016894:	0080      	lsleq	r0, r0, #2
 8016896:	3302      	addeq	r3, #2
 8016898:	2800      	cmp	r0, #0
 801689a:	db05      	blt.n	80168a8 <__hi0bits+0x38>
 801689c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80168a0:	f103 0301 	add.w	r3, r3, #1
 80168a4:	bf08      	it	eq
 80168a6:	2320      	moveq	r3, #32
 80168a8:	4618      	mov	r0, r3
 80168aa:	4770      	bx	lr
 80168ac:	2300      	movs	r3, #0
 80168ae:	e7e4      	b.n	801687a <__hi0bits+0xa>

080168b0 <__lo0bits>:
 80168b0:	6803      	ldr	r3, [r0, #0]
 80168b2:	f013 0207 	ands.w	r2, r3, #7
 80168b6:	d00c      	beq.n	80168d2 <__lo0bits+0x22>
 80168b8:	07d9      	lsls	r1, r3, #31
 80168ba:	d422      	bmi.n	8016902 <__lo0bits+0x52>
 80168bc:	079a      	lsls	r2, r3, #30
 80168be:	bf49      	itett	mi
 80168c0:	085b      	lsrmi	r3, r3, #1
 80168c2:	089b      	lsrpl	r3, r3, #2
 80168c4:	6003      	strmi	r3, [r0, #0]
 80168c6:	2201      	movmi	r2, #1
 80168c8:	bf5c      	itt	pl
 80168ca:	6003      	strpl	r3, [r0, #0]
 80168cc:	2202      	movpl	r2, #2
 80168ce:	4610      	mov	r0, r2
 80168d0:	4770      	bx	lr
 80168d2:	b299      	uxth	r1, r3
 80168d4:	b909      	cbnz	r1, 80168da <__lo0bits+0x2a>
 80168d6:	0c1b      	lsrs	r3, r3, #16
 80168d8:	2210      	movs	r2, #16
 80168da:	b2d9      	uxtb	r1, r3
 80168dc:	b909      	cbnz	r1, 80168e2 <__lo0bits+0x32>
 80168de:	3208      	adds	r2, #8
 80168e0:	0a1b      	lsrs	r3, r3, #8
 80168e2:	0719      	lsls	r1, r3, #28
 80168e4:	bf04      	itt	eq
 80168e6:	091b      	lsreq	r3, r3, #4
 80168e8:	3204      	addeq	r2, #4
 80168ea:	0799      	lsls	r1, r3, #30
 80168ec:	bf04      	itt	eq
 80168ee:	089b      	lsreq	r3, r3, #2
 80168f0:	3202      	addeq	r2, #2
 80168f2:	07d9      	lsls	r1, r3, #31
 80168f4:	d403      	bmi.n	80168fe <__lo0bits+0x4e>
 80168f6:	085b      	lsrs	r3, r3, #1
 80168f8:	f102 0201 	add.w	r2, r2, #1
 80168fc:	d003      	beq.n	8016906 <__lo0bits+0x56>
 80168fe:	6003      	str	r3, [r0, #0]
 8016900:	e7e5      	b.n	80168ce <__lo0bits+0x1e>
 8016902:	2200      	movs	r2, #0
 8016904:	e7e3      	b.n	80168ce <__lo0bits+0x1e>
 8016906:	2220      	movs	r2, #32
 8016908:	e7e1      	b.n	80168ce <__lo0bits+0x1e>
	...

0801690c <__i2b>:
 801690c:	b510      	push	{r4, lr}
 801690e:	460c      	mov	r4, r1
 8016910:	2101      	movs	r1, #1
 8016912:	f7ff febb 	bl	801668c <_Balloc>
 8016916:	4602      	mov	r2, r0
 8016918:	b928      	cbnz	r0, 8016926 <__i2b+0x1a>
 801691a:	4b05      	ldr	r3, [pc, #20]	; (8016930 <__i2b+0x24>)
 801691c:	4805      	ldr	r0, [pc, #20]	; (8016934 <__i2b+0x28>)
 801691e:	f240 1145 	movw	r1, #325	; 0x145
 8016922:	f001 ffc5 	bl	80188b0 <__assert_func>
 8016926:	2301      	movs	r3, #1
 8016928:	6144      	str	r4, [r0, #20]
 801692a:	6103      	str	r3, [r0, #16]
 801692c:	bd10      	pop	{r4, pc}
 801692e:	bf00      	nop
 8016930:	0801c11b 	.word	0x0801c11b
 8016934:	0801c12c 	.word	0x0801c12c

08016938 <__multiply>:
 8016938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801693c:	4691      	mov	r9, r2
 801693e:	690a      	ldr	r2, [r1, #16]
 8016940:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016944:	429a      	cmp	r2, r3
 8016946:	bfb8      	it	lt
 8016948:	460b      	movlt	r3, r1
 801694a:	460c      	mov	r4, r1
 801694c:	bfbc      	itt	lt
 801694e:	464c      	movlt	r4, r9
 8016950:	4699      	movlt	r9, r3
 8016952:	6927      	ldr	r7, [r4, #16]
 8016954:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016958:	68a3      	ldr	r3, [r4, #8]
 801695a:	6861      	ldr	r1, [r4, #4]
 801695c:	eb07 060a 	add.w	r6, r7, sl
 8016960:	42b3      	cmp	r3, r6
 8016962:	b085      	sub	sp, #20
 8016964:	bfb8      	it	lt
 8016966:	3101      	addlt	r1, #1
 8016968:	f7ff fe90 	bl	801668c <_Balloc>
 801696c:	b930      	cbnz	r0, 801697c <__multiply+0x44>
 801696e:	4602      	mov	r2, r0
 8016970:	4b44      	ldr	r3, [pc, #272]	; (8016a84 <__multiply+0x14c>)
 8016972:	4845      	ldr	r0, [pc, #276]	; (8016a88 <__multiply+0x150>)
 8016974:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8016978:	f001 ff9a 	bl	80188b0 <__assert_func>
 801697c:	f100 0514 	add.w	r5, r0, #20
 8016980:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016984:	462b      	mov	r3, r5
 8016986:	2200      	movs	r2, #0
 8016988:	4543      	cmp	r3, r8
 801698a:	d321      	bcc.n	80169d0 <__multiply+0x98>
 801698c:	f104 0314 	add.w	r3, r4, #20
 8016990:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016994:	f109 0314 	add.w	r3, r9, #20
 8016998:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801699c:	9202      	str	r2, [sp, #8]
 801699e:	1b3a      	subs	r2, r7, r4
 80169a0:	3a15      	subs	r2, #21
 80169a2:	f022 0203 	bic.w	r2, r2, #3
 80169a6:	3204      	adds	r2, #4
 80169a8:	f104 0115 	add.w	r1, r4, #21
 80169ac:	428f      	cmp	r7, r1
 80169ae:	bf38      	it	cc
 80169b0:	2204      	movcc	r2, #4
 80169b2:	9201      	str	r2, [sp, #4]
 80169b4:	9a02      	ldr	r2, [sp, #8]
 80169b6:	9303      	str	r3, [sp, #12]
 80169b8:	429a      	cmp	r2, r3
 80169ba:	d80c      	bhi.n	80169d6 <__multiply+0x9e>
 80169bc:	2e00      	cmp	r6, #0
 80169be:	dd03      	ble.n	80169c8 <__multiply+0x90>
 80169c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d05b      	beq.n	8016a80 <__multiply+0x148>
 80169c8:	6106      	str	r6, [r0, #16]
 80169ca:	b005      	add	sp, #20
 80169cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169d0:	f843 2b04 	str.w	r2, [r3], #4
 80169d4:	e7d8      	b.n	8016988 <__multiply+0x50>
 80169d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80169da:	f1ba 0f00 	cmp.w	sl, #0
 80169de:	d024      	beq.n	8016a2a <__multiply+0xf2>
 80169e0:	f104 0e14 	add.w	lr, r4, #20
 80169e4:	46a9      	mov	r9, r5
 80169e6:	f04f 0c00 	mov.w	ip, #0
 80169ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80169ee:	f8d9 1000 	ldr.w	r1, [r9]
 80169f2:	fa1f fb82 	uxth.w	fp, r2
 80169f6:	b289      	uxth	r1, r1
 80169f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80169fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016a00:	f8d9 2000 	ldr.w	r2, [r9]
 8016a04:	4461      	add	r1, ip
 8016a06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016a0a:	fb0a c20b 	mla	r2, sl, fp, ip
 8016a0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016a12:	b289      	uxth	r1, r1
 8016a14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016a18:	4577      	cmp	r7, lr
 8016a1a:	f849 1b04 	str.w	r1, [r9], #4
 8016a1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016a22:	d8e2      	bhi.n	80169ea <__multiply+0xb2>
 8016a24:	9a01      	ldr	r2, [sp, #4]
 8016a26:	f845 c002 	str.w	ip, [r5, r2]
 8016a2a:	9a03      	ldr	r2, [sp, #12]
 8016a2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016a30:	3304      	adds	r3, #4
 8016a32:	f1b9 0f00 	cmp.w	r9, #0
 8016a36:	d021      	beq.n	8016a7c <__multiply+0x144>
 8016a38:	6829      	ldr	r1, [r5, #0]
 8016a3a:	f104 0c14 	add.w	ip, r4, #20
 8016a3e:	46ae      	mov	lr, r5
 8016a40:	f04f 0a00 	mov.w	sl, #0
 8016a44:	f8bc b000 	ldrh.w	fp, [ip]
 8016a48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016a4c:	fb09 220b 	mla	r2, r9, fp, r2
 8016a50:	4452      	add	r2, sl
 8016a52:	b289      	uxth	r1, r1
 8016a54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016a58:	f84e 1b04 	str.w	r1, [lr], #4
 8016a5c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016a60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016a64:	f8be 1000 	ldrh.w	r1, [lr]
 8016a68:	fb09 110a 	mla	r1, r9, sl, r1
 8016a6c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8016a70:	4567      	cmp	r7, ip
 8016a72:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016a76:	d8e5      	bhi.n	8016a44 <__multiply+0x10c>
 8016a78:	9a01      	ldr	r2, [sp, #4]
 8016a7a:	50a9      	str	r1, [r5, r2]
 8016a7c:	3504      	adds	r5, #4
 8016a7e:	e799      	b.n	80169b4 <__multiply+0x7c>
 8016a80:	3e01      	subs	r6, #1
 8016a82:	e79b      	b.n	80169bc <__multiply+0x84>
 8016a84:	0801c11b 	.word	0x0801c11b
 8016a88:	0801c12c 	.word	0x0801c12c

08016a8c <__pow5mult>:
 8016a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a90:	4615      	mov	r5, r2
 8016a92:	f012 0203 	ands.w	r2, r2, #3
 8016a96:	4606      	mov	r6, r0
 8016a98:	460f      	mov	r7, r1
 8016a9a:	d007      	beq.n	8016aac <__pow5mult+0x20>
 8016a9c:	4c25      	ldr	r4, [pc, #148]	; (8016b34 <__pow5mult+0xa8>)
 8016a9e:	3a01      	subs	r2, #1
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016aa6:	f7ff fe53 	bl	8016750 <__multadd>
 8016aaa:	4607      	mov	r7, r0
 8016aac:	10ad      	asrs	r5, r5, #2
 8016aae:	d03d      	beq.n	8016b2c <__pow5mult+0xa0>
 8016ab0:	69f4      	ldr	r4, [r6, #28]
 8016ab2:	b97c      	cbnz	r4, 8016ad4 <__pow5mult+0x48>
 8016ab4:	2010      	movs	r0, #16
 8016ab6:	f7ff fd35 	bl	8016524 <malloc>
 8016aba:	4602      	mov	r2, r0
 8016abc:	61f0      	str	r0, [r6, #28]
 8016abe:	b928      	cbnz	r0, 8016acc <__pow5mult+0x40>
 8016ac0:	4b1d      	ldr	r3, [pc, #116]	; (8016b38 <__pow5mult+0xac>)
 8016ac2:	481e      	ldr	r0, [pc, #120]	; (8016b3c <__pow5mult+0xb0>)
 8016ac4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8016ac8:	f001 fef2 	bl	80188b0 <__assert_func>
 8016acc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016ad0:	6004      	str	r4, [r0, #0]
 8016ad2:	60c4      	str	r4, [r0, #12]
 8016ad4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8016ad8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016adc:	b94c      	cbnz	r4, 8016af2 <__pow5mult+0x66>
 8016ade:	f240 2171 	movw	r1, #625	; 0x271
 8016ae2:	4630      	mov	r0, r6
 8016ae4:	f7ff ff12 	bl	801690c <__i2b>
 8016ae8:	2300      	movs	r3, #0
 8016aea:	f8c8 0008 	str.w	r0, [r8, #8]
 8016aee:	4604      	mov	r4, r0
 8016af0:	6003      	str	r3, [r0, #0]
 8016af2:	f04f 0900 	mov.w	r9, #0
 8016af6:	07eb      	lsls	r3, r5, #31
 8016af8:	d50a      	bpl.n	8016b10 <__pow5mult+0x84>
 8016afa:	4639      	mov	r1, r7
 8016afc:	4622      	mov	r2, r4
 8016afe:	4630      	mov	r0, r6
 8016b00:	f7ff ff1a 	bl	8016938 <__multiply>
 8016b04:	4639      	mov	r1, r7
 8016b06:	4680      	mov	r8, r0
 8016b08:	4630      	mov	r0, r6
 8016b0a:	f7ff fdff 	bl	801670c <_Bfree>
 8016b0e:	4647      	mov	r7, r8
 8016b10:	106d      	asrs	r5, r5, #1
 8016b12:	d00b      	beq.n	8016b2c <__pow5mult+0xa0>
 8016b14:	6820      	ldr	r0, [r4, #0]
 8016b16:	b938      	cbnz	r0, 8016b28 <__pow5mult+0x9c>
 8016b18:	4622      	mov	r2, r4
 8016b1a:	4621      	mov	r1, r4
 8016b1c:	4630      	mov	r0, r6
 8016b1e:	f7ff ff0b 	bl	8016938 <__multiply>
 8016b22:	6020      	str	r0, [r4, #0]
 8016b24:	f8c0 9000 	str.w	r9, [r0]
 8016b28:	4604      	mov	r4, r0
 8016b2a:	e7e4      	b.n	8016af6 <__pow5mult+0x6a>
 8016b2c:	4638      	mov	r0, r7
 8016b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b32:	bf00      	nop
 8016b34:	0801c278 	.word	0x0801c278
 8016b38:	0801c0ac 	.word	0x0801c0ac
 8016b3c:	0801c12c 	.word	0x0801c12c

08016b40 <__lshift>:
 8016b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b44:	460c      	mov	r4, r1
 8016b46:	6849      	ldr	r1, [r1, #4]
 8016b48:	6923      	ldr	r3, [r4, #16]
 8016b4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016b4e:	68a3      	ldr	r3, [r4, #8]
 8016b50:	4607      	mov	r7, r0
 8016b52:	4691      	mov	r9, r2
 8016b54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016b58:	f108 0601 	add.w	r6, r8, #1
 8016b5c:	42b3      	cmp	r3, r6
 8016b5e:	db0b      	blt.n	8016b78 <__lshift+0x38>
 8016b60:	4638      	mov	r0, r7
 8016b62:	f7ff fd93 	bl	801668c <_Balloc>
 8016b66:	4605      	mov	r5, r0
 8016b68:	b948      	cbnz	r0, 8016b7e <__lshift+0x3e>
 8016b6a:	4602      	mov	r2, r0
 8016b6c:	4b28      	ldr	r3, [pc, #160]	; (8016c10 <__lshift+0xd0>)
 8016b6e:	4829      	ldr	r0, [pc, #164]	; (8016c14 <__lshift+0xd4>)
 8016b70:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8016b74:	f001 fe9c 	bl	80188b0 <__assert_func>
 8016b78:	3101      	adds	r1, #1
 8016b7a:	005b      	lsls	r3, r3, #1
 8016b7c:	e7ee      	b.n	8016b5c <__lshift+0x1c>
 8016b7e:	2300      	movs	r3, #0
 8016b80:	f100 0114 	add.w	r1, r0, #20
 8016b84:	f100 0210 	add.w	r2, r0, #16
 8016b88:	4618      	mov	r0, r3
 8016b8a:	4553      	cmp	r3, sl
 8016b8c:	db33      	blt.n	8016bf6 <__lshift+0xb6>
 8016b8e:	6920      	ldr	r0, [r4, #16]
 8016b90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016b94:	f104 0314 	add.w	r3, r4, #20
 8016b98:	f019 091f 	ands.w	r9, r9, #31
 8016b9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016ba0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016ba4:	d02b      	beq.n	8016bfe <__lshift+0xbe>
 8016ba6:	f1c9 0e20 	rsb	lr, r9, #32
 8016baa:	468a      	mov	sl, r1
 8016bac:	2200      	movs	r2, #0
 8016bae:	6818      	ldr	r0, [r3, #0]
 8016bb0:	fa00 f009 	lsl.w	r0, r0, r9
 8016bb4:	4310      	orrs	r0, r2
 8016bb6:	f84a 0b04 	str.w	r0, [sl], #4
 8016bba:	f853 2b04 	ldr.w	r2, [r3], #4
 8016bbe:	459c      	cmp	ip, r3
 8016bc0:	fa22 f20e 	lsr.w	r2, r2, lr
 8016bc4:	d8f3      	bhi.n	8016bae <__lshift+0x6e>
 8016bc6:	ebac 0304 	sub.w	r3, ip, r4
 8016bca:	3b15      	subs	r3, #21
 8016bcc:	f023 0303 	bic.w	r3, r3, #3
 8016bd0:	3304      	adds	r3, #4
 8016bd2:	f104 0015 	add.w	r0, r4, #21
 8016bd6:	4584      	cmp	ip, r0
 8016bd8:	bf38      	it	cc
 8016bda:	2304      	movcc	r3, #4
 8016bdc:	50ca      	str	r2, [r1, r3]
 8016bde:	b10a      	cbz	r2, 8016be4 <__lshift+0xa4>
 8016be0:	f108 0602 	add.w	r6, r8, #2
 8016be4:	3e01      	subs	r6, #1
 8016be6:	4638      	mov	r0, r7
 8016be8:	612e      	str	r6, [r5, #16]
 8016bea:	4621      	mov	r1, r4
 8016bec:	f7ff fd8e 	bl	801670c <_Bfree>
 8016bf0:	4628      	mov	r0, r5
 8016bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bf6:	f842 0f04 	str.w	r0, [r2, #4]!
 8016bfa:	3301      	adds	r3, #1
 8016bfc:	e7c5      	b.n	8016b8a <__lshift+0x4a>
 8016bfe:	3904      	subs	r1, #4
 8016c00:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c04:	f841 2f04 	str.w	r2, [r1, #4]!
 8016c08:	459c      	cmp	ip, r3
 8016c0a:	d8f9      	bhi.n	8016c00 <__lshift+0xc0>
 8016c0c:	e7ea      	b.n	8016be4 <__lshift+0xa4>
 8016c0e:	bf00      	nop
 8016c10:	0801c11b 	.word	0x0801c11b
 8016c14:	0801c12c 	.word	0x0801c12c

08016c18 <__mcmp>:
 8016c18:	b530      	push	{r4, r5, lr}
 8016c1a:	6902      	ldr	r2, [r0, #16]
 8016c1c:	690c      	ldr	r4, [r1, #16]
 8016c1e:	1b12      	subs	r2, r2, r4
 8016c20:	d10e      	bne.n	8016c40 <__mcmp+0x28>
 8016c22:	f100 0314 	add.w	r3, r0, #20
 8016c26:	3114      	adds	r1, #20
 8016c28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016c2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016c30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016c34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016c38:	42a5      	cmp	r5, r4
 8016c3a:	d003      	beq.n	8016c44 <__mcmp+0x2c>
 8016c3c:	d305      	bcc.n	8016c4a <__mcmp+0x32>
 8016c3e:	2201      	movs	r2, #1
 8016c40:	4610      	mov	r0, r2
 8016c42:	bd30      	pop	{r4, r5, pc}
 8016c44:	4283      	cmp	r3, r0
 8016c46:	d3f3      	bcc.n	8016c30 <__mcmp+0x18>
 8016c48:	e7fa      	b.n	8016c40 <__mcmp+0x28>
 8016c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8016c4e:	e7f7      	b.n	8016c40 <__mcmp+0x28>

08016c50 <__mdiff>:
 8016c50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c54:	460c      	mov	r4, r1
 8016c56:	4606      	mov	r6, r0
 8016c58:	4611      	mov	r1, r2
 8016c5a:	4620      	mov	r0, r4
 8016c5c:	4690      	mov	r8, r2
 8016c5e:	f7ff ffdb 	bl	8016c18 <__mcmp>
 8016c62:	1e05      	subs	r5, r0, #0
 8016c64:	d110      	bne.n	8016c88 <__mdiff+0x38>
 8016c66:	4629      	mov	r1, r5
 8016c68:	4630      	mov	r0, r6
 8016c6a:	f7ff fd0f 	bl	801668c <_Balloc>
 8016c6e:	b930      	cbnz	r0, 8016c7e <__mdiff+0x2e>
 8016c70:	4b3a      	ldr	r3, [pc, #232]	; (8016d5c <__mdiff+0x10c>)
 8016c72:	4602      	mov	r2, r0
 8016c74:	f240 2137 	movw	r1, #567	; 0x237
 8016c78:	4839      	ldr	r0, [pc, #228]	; (8016d60 <__mdiff+0x110>)
 8016c7a:	f001 fe19 	bl	80188b0 <__assert_func>
 8016c7e:	2301      	movs	r3, #1
 8016c80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016c84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c88:	bfa4      	itt	ge
 8016c8a:	4643      	movge	r3, r8
 8016c8c:	46a0      	movge	r8, r4
 8016c8e:	4630      	mov	r0, r6
 8016c90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016c94:	bfa6      	itte	ge
 8016c96:	461c      	movge	r4, r3
 8016c98:	2500      	movge	r5, #0
 8016c9a:	2501      	movlt	r5, #1
 8016c9c:	f7ff fcf6 	bl	801668c <_Balloc>
 8016ca0:	b920      	cbnz	r0, 8016cac <__mdiff+0x5c>
 8016ca2:	4b2e      	ldr	r3, [pc, #184]	; (8016d5c <__mdiff+0x10c>)
 8016ca4:	4602      	mov	r2, r0
 8016ca6:	f240 2145 	movw	r1, #581	; 0x245
 8016caa:	e7e5      	b.n	8016c78 <__mdiff+0x28>
 8016cac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016cb0:	6926      	ldr	r6, [r4, #16]
 8016cb2:	60c5      	str	r5, [r0, #12]
 8016cb4:	f104 0914 	add.w	r9, r4, #20
 8016cb8:	f108 0514 	add.w	r5, r8, #20
 8016cbc:	f100 0e14 	add.w	lr, r0, #20
 8016cc0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016cc4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016cc8:	f108 0210 	add.w	r2, r8, #16
 8016ccc:	46f2      	mov	sl, lr
 8016cce:	2100      	movs	r1, #0
 8016cd0:	f859 3b04 	ldr.w	r3, [r9], #4
 8016cd4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016cd8:	fa11 f88b 	uxtah	r8, r1, fp
 8016cdc:	b299      	uxth	r1, r3
 8016cde:	0c1b      	lsrs	r3, r3, #16
 8016ce0:	eba8 0801 	sub.w	r8, r8, r1
 8016ce4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016ce8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016cec:	fa1f f888 	uxth.w	r8, r8
 8016cf0:	1419      	asrs	r1, r3, #16
 8016cf2:	454e      	cmp	r6, r9
 8016cf4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016cf8:	f84a 3b04 	str.w	r3, [sl], #4
 8016cfc:	d8e8      	bhi.n	8016cd0 <__mdiff+0x80>
 8016cfe:	1b33      	subs	r3, r6, r4
 8016d00:	3b15      	subs	r3, #21
 8016d02:	f023 0303 	bic.w	r3, r3, #3
 8016d06:	3304      	adds	r3, #4
 8016d08:	3415      	adds	r4, #21
 8016d0a:	42a6      	cmp	r6, r4
 8016d0c:	bf38      	it	cc
 8016d0e:	2304      	movcc	r3, #4
 8016d10:	441d      	add	r5, r3
 8016d12:	4473      	add	r3, lr
 8016d14:	469e      	mov	lr, r3
 8016d16:	462e      	mov	r6, r5
 8016d18:	4566      	cmp	r6, ip
 8016d1a:	d30e      	bcc.n	8016d3a <__mdiff+0xea>
 8016d1c:	f10c 0203 	add.w	r2, ip, #3
 8016d20:	1b52      	subs	r2, r2, r5
 8016d22:	f022 0203 	bic.w	r2, r2, #3
 8016d26:	3d03      	subs	r5, #3
 8016d28:	45ac      	cmp	ip, r5
 8016d2a:	bf38      	it	cc
 8016d2c:	2200      	movcc	r2, #0
 8016d2e:	4413      	add	r3, r2
 8016d30:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016d34:	b17a      	cbz	r2, 8016d56 <__mdiff+0x106>
 8016d36:	6107      	str	r7, [r0, #16]
 8016d38:	e7a4      	b.n	8016c84 <__mdiff+0x34>
 8016d3a:	f856 8b04 	ldr.w	r8, [r6], #4
 8016d3e:	fa11 f288 	uxtah	r2, r1, r8
 8016d42:	1414      	asrs	r4, r2, #16
 8016d44:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016d48:	b292      	uxth	r2, r2
 8016d4a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016d4e:	f84e 2b04 	str.w	r2, [lr], #4
 8016d52:	1421      	asrs	r1, r4, #16
 8016d54:	e7e0      	b.n	8016d18 <__mdiff+0xc8>
 8016d56:	3f01      	subs	r7, #1
 8016d58:	e7ea      	b.n	8016d30 <__mdiff+0xe0>
 8016d5a:	bf00      	nop
 8016d5c:	0801c11b 	.word	0x0801c11b
 8016d60:	0801c12c 	.word	0x0801c12c

08016d64 <__ulp>:
 8016d64:	b082      	sub	sp, #8
 8016d66:	ed8d 0b00 	vstr	d0, [sp]
 8016d6a:	9a01      	ldr	r2, [sp, #4]
 8016d6c:	4b0f      	ldr	r3, [pc, #60]	; (8016dac <__ulp+0x48>)
 8016d6e:	4013      	ands	r3, r2
 8016d70:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	dc08      	bgt.n	8016d8a <__ulp+0x26>
 8016d78:	425b      	negs	r3, r3
 8016d7a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8016d7e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016d82:	da04      	bge.n	8016d8e <__ulp+0x2a>
 8016d84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016d88:	4113      	asrs	r3, r2
 8016d8a:	2200      	movs	r2, #0
 8016d8c:	e008      	b.n	8016da0 <__ulp+0x3c>
 8016d8e:	f1a2 0314 	sub.w	r3, r2, #20
 8016d92:	2b1e      	cmp	r3, #30
 8016d94:	bfda      	itte	le
 8016d96:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8016d9a:	40da      	lsrle	r2, r3
 8016d9c:	2201      	movgt	r2, #1
 8016d9e:	2300      	movs	r3, #0
 8016da0:	4619      	mov	r1, r3
 8016da2:	4610      	mov	r0, r2
 8016da4:	ec41 0b10 	vmov	d0, r0, r1
 8016da8:	b002      	add	sp, #8
 8016daa:	4770      	bx	lr
 8016dac:	7ff00000 	.word	0x7ff00000

08016db0 <__b2d>:
 8016db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016db4:	6906      	ldr	r6, [r0, #16]
 8016db6:	f100 0814 	add.w	r8, r0, #20
 8016dba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016dbe:	1f37      	subs	r7, r6, #4
 8016dc0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016dc4:	4610      	mov	r0, r2
 8016dc6:	f7ff fd53 	bl	8016870 <__hi0bits>
 8016dca:	f1c0 0320 	rsb	r3, r0, #32
 8016dce:	280a      	cmp	r0, #10
 8016dd0:	600b      	str	r3, [r1, #0]
 8016dd2:	491b      	ldr	r1, [pc, #108]	; (8016e40 <__b2d+0x90>)
 8016dd4:	dc15      	bgt.n	8016e02 <__b2d+0x52>
 8016dd6:	f1c0 0c0b 	rsb	ip, r0, #11
 8016dda:	fa22 f30c 	lsr.w	r3, r2, ip
 8016dde:	45b8      	cmp	r8, r7
 8016de0:	ea43 0501 	orr.w	r5, r3, r1
 8016de4:	bf34      	ite	cc
 8016de6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016dea:	2300      	movcs	r3, #0
 8016dec:	3015      	adds	r0, #21
 8016dee:	fa02 f000 	lsl.w	r0, r2, r0
 8016df2:	fa23 f30c 	lsr.w	r3, r3, ip
 8016df6:	4303      	orrs	r3, r0
 8016df8:	461c      	mov	r4, r3
 8016dfa:	ec45 4b10 	vmov	d0, r4, r5
 8016dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e02:	45b8      	cmp	r8, r7
 8016e04:	bf3a      	itte	cc
 8016e06:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016e0a:	f1a6 0708 	subcc.w	r7, r6, #8
 8016e0e:	2300      	movcs	r3, #0
 8016e10:	380b      	subs	r0, #11
 8016e12:	d012      	beq.n	8016e3a <__b2d+0x8a>
 8016e14:	f1c0 0120 	rsb	r1, r0, #32
 8016e18:	fa23 f401 	lsr.w	r4, r3, r1
 8016e1c:	4082      	lsls	r2, r0
 8016e1e:	4322      	orrs	r2, r4
 8016e20:	4547      	cmp	r7, r8
 8016e22:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8016e26:	bf8c      	ite	hi
 8016e28:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016e2c:	2200      	movls	r2, #0
 8016e2e:	4083      	lsls	r3, r0
 8016e30:	40ca      	lsrs	r2, r1
 8016e32:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016e36:	4313      	orrs	r3, r2
 8016e38:	e7de      	b.n	8016df8 <__b2d+0x48>
 8016e3a:	ea42 0501 	orr.w	r5, r2, r1
 8016e3e:	e7db      	b.n	8016df8 <__b2d+0x48>
 8016e40:	3ff00000 	.word	0x3ff00000

08016e44 <__d2b>:
 8016e44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016e48:	460f      	mov	r7, r1
 8016e4a:	2101      	movs	r1, #1
 8016e4c:	ec59 8b10 	vmov	r8, r9, d0
 8016e50:	4616      	mov	r6, r2
 8016e52:	f7ff fc1b 	bl	801668c <_Balloc>
 8016e56:	4604      	mov	r4, r0
 8016e58:	b930      	cbnz	r0, 8016e68 <__d2b+0x24>
 8016e5a:	4602      	mov	r2, r0
 8016e5c:	4b24      	ldr	r3, [pc, #144]	; (8016ef0 <__d2b+0xac>)
 8016e5e:	4825      	ldr	r0, [pc, #148]	; (8016ef4 <__d2b+0xb0>)
 8016e60:	f240 310f 	movw	r1, #783	; 0x30f
 8016e64:	f001 fd24 	bl	80188b0 <__assert_func>
 8016e68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016e6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016e70:	bb2d      	cbnz	r5, 8016ebe <__d2b+0x7a>
 8016e72:	9301      	str	r3, [sp, #4]
 8016e74:	f1b8 0300 	subs.w	r3, r8, #0
 8016e78:	d026      	beq.n	8016ec8 <__d2b+0x84>
 8016e7a:	4668      	mov	r0, sp
 8016e7c:	9300      	str	r3, [sp, #0]
 8016e7e:	f7ff fd17 	bl	80168b0 <__lo0bits>
 8016e82:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016e86:	b1e8      	cbz	r0, 8016ec4 <__d2b+0x80>
 8016e88:	f1c0 0320 	rsb	r3, r0, #32
 8016e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8016e90:	430b      	orrs	r3, r1
 8016e92:	40c2      	lsrs	r2, r0
 8016e94:	6163      	str	r3, [r4, #20]
 8016e96:	9201      	str	r2, [sp, #4]
 8016e98:	9b01      	ldr	r3, [sp, #4]
 8016e9a:	61a3      	str	r3, [r4, #24]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	bf14      	ite	ne
 8016ea0:	2202      	movne	r2, #2
 8016ea2:	2201      	moveq	r2, #1
 8016ea4:	6122      	str	r2, [r4, #16]
 8016ea6:	b1bd      	cbz	r5, 8016ed8 <__d2b+0x94>
 8016ea8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016eac:	4405      	add	r5, r0
 8016eae:	603d      	str	r5, [r7, #0]
 8016eb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016eb4:	6030      	str	r0, [r6, #0]
 8016eb6:	4620      	mov	r0, r4
 8016eb8:	b003      	add	sp, #12
 8016eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016ec2:	e7d6      	b.n	8016e72 <__d2b+0x2e>
 8016ec4:	6161      	str	r1, [r4, #20]
 8016ec6:	e7e7      	b.n	8016e98 <__d2b+0x54>
 8016ec8:	a801      	add	r0, sp, #4
 8016eca:	f7ff fcf1 	bl	80168b0 <__lo0bits>
 8016ece:	9b01      	ldr	r3, [sp, #4]
 8016ed0:	6163      	str	r3, [r4, #20]
 8016ed2:	3020      	adds	r0, #32
 8016ed4:	2201      	movs	r2, #1
 8016ed6:	e7e5      	b.n	8016ea4 <__d2b+0x60>
 8016ed8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016edc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016ee0:	6038      	str	r0, [r7, #0]
 8016ee2:	6918      	ldr	r0, [r3, #16]
 8016ee4:	f7ff fcc4 	bl	8016870 <__hi0bits>
 8016ee8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016eec:	e7e2      	b.n	8016eb4 <__d2b+0x70>
 8016eee:	bf00      	nop
 8016ef0:	0801c11b 	.word	0x0801c11b
 8016ef4:	0801c12c 	.word	0x0801c12c

08016ef8 <__ratio>:
 8016ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016efc:	4688      	mov	r8, r1
 8016efe:	4669      	mov	r1, sp
 8016f00:	4681      	mov	r9, r0
 8016f02:	f7ff ff55 	bl	8016db0 <__b2d>
 8016f06:	a901      	add	r1, sp, #4
 8016f08:	4640      	mov	r0, r8
 8016f0a:	ec55 4b10 	vmov	r4, r5, d0
 8016f0e:	f7ff ff4f 	bl	8016db0 <__b2d>
 8016f12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016f16:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016f1a:	eba3 0c02 	sub.w	ip, r3, r2
 8016f1e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016f22:	1a9b      	subs	r3, r3, r2
 8016f24:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016f28:	ec51 0b10 	vmov	r0, r1, d0
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	bfd6      	itet	le
 8016f30:	460a      	movle	r2, r1
 8016f32:	462a      	movgt	r2, r5
 8016f34:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016f38:	468b      	mov	fp, r1
 8016f3a:	462f      	mov	r7, r5
 8016f3c:	bfd4      	ite	le
 8016f3e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016f42:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016f46:	4620      	mov	r0, r4
 8016f48:	ee10 2a10 	vmov	r2, s0
 8016f4c:	465b      	mov	r3, fp
 8016f4e:	4639      	mov	r1, r7
 8016f50:	f7e9 fca4 	bl	800089c <__aeabi_ddiv>
 8016f54:	ec41 0b10 	vmov	d0, r0, r1
 8016f58:	b003      	add	sp, #12
 8016f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016f5e <__copybits>:
 8016f5e:	3901      	subs	r1, #1
 8016f60:	b570      	push	{r4, r5, r6, lr}
 8016f62:	1149      	asrs	r1, r1, #5
 8016f64:	6914      	ldr	r4, [r2, #16]
 8016f66:	3101      	adds	r1, #1
 8016f68:	f102 0314 	add.w	r3, r2, #20
 8016f6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016f70:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016f74:	1f05      	subs	r5, r0, #4
 8016f76:	42a3      	cmp	r3, r4
 8016f78:	d30c      	bcc.n	8016f94 <__copybits+0x36>
 8016f7a:	1aa3      	subs	r3, r4, r2
 8016f7c:	3b11      	subs	r3, #17
 8016f7e:	f023 0303 	bic.w	r3, r3, #3
 8016f82:	3211      	adds	r2, #17
 8016f84:	42a2      	cmp	r2, r4
 8016f86:	bf88      	it	hi
 8016f88:	2300      	movhi	r3, #0
 8016f8a:	4418      	add	r0, r3
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	4288      	cmp	r0, r1
 8016f90:	d305      	bcc.n	8016f9e <__copybits+0x40>
 8016f92:	bd70      	pop	{r4, r5, r6, pc}
 8016f94:	f853 6b04 	ldr.w	r6, [r3], #4
 8016f98:	f845 6f04 	str.w	r6, [r5, #4]!
 8016f9c:	e7eb      	b.n	8016f76 <__copybits+0x18>
 8016f9e:	f840 3b04 	str.w	r3, [r0], #4
 8016fa2:	e7f4      	b.n	8016f8e <__copybits+0x30>

08016fa4 <__any_on>:
 8016fa4:	f100 0214 	add.w	r2, r0, #20
 8016fa8:	6900      	ldr	r0, [r0, #16]
 8016faa:	114b      	asrs	r3, r1, #5
 8016fac:	4298      	cmp	r0, r3
 8016fae:	b510      	push	{r4, lr}
 8016fb0:	db11      	blt.n	8016fd6 <__any_on+0x32>
 8016fb2:	dd0a      	ble.n	8016fca <__any_on+0x26>
 8016fb4:	f011 011f 	ands.w	r1, r1, #31
 8016fb8:	d007      	beq.n	8016fca <__any_on+0x26>
 8016fba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016fbe:	fa24 f001 	lsr.w	r0, r4, r1
 8016fc2:	fa00 f101 	lsl.w	r1, r0, r1
 8016fc6:	428c      	cmp	r4, r1
 8016fc8:	d10b      	bne.n	8016fe2 <__any_on+0x3e>
 8016fca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016fce:	4293      	cmp	r3, r2
 8016fd0:	d803      	bhi.n	8016fda <__any_on+0x36>
 8016fd2:	2000      	movs	r0, #0
 8016fd4:	bd10      	pop	{r4, pc}
 8016fd6:	4603      	mov	r3, r0
 8016fd8:	e7f7      	b.n	8016fca <__any_on+0x26>
 8016fda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016fde:	2900      	cmp	r1, #0
 8016fe0:	d0f5      	beq.n	8016fce <__any_on+0x2a>
 8016fe2:	2001      	movs	r0, #1
 8016fe4:	e7f6      	b.n	8016fd4 <__any_on+0x30>

08016fe6 <sulp>:
 8016fe6:	b570      	push	{r4, r5, r6, lr}
 8016fe8:	4604      	mov	r4, r0
 8016fea:	460d      	mov	r5, r1
 8016fec:	ec45 4b10 	vmov	d0, r4, r5
 8016ff0:	4616      	mov	r6, r2
 8016ff2:	f7ff feb7 	bl	8016d64 <__ulp>
 8016ff6:	ec51 0b10 	vmov	r0, r1, d0
 8016ffa:	b17e      	cbz	r6, 801701c <sulp+0x36>
 8016ffc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017000:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017004:	2b00      	cmp	r3, #0
 8017006:	dd09      	ble.n	801701c <sulp+0x36>
 8017008:	051b      	lsls	r3, r3, #20
 801700a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801700e:	2400      	movs	r4, #0
 8017010:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8017014:	4622      	mov	r2, r4
 8017016:	462b      	mov	r3, r5
 8017018:	f7e9 fb16 	bl	8000648 <__aeabi_dmul>
 801701c:	bd70      	pop	{r4, r5, r6, pc}
	...

08017020 <_strtod_l>:
 8017020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017024:	ed2d 8b02 	vpush	{d8}
 8017028:	b09b      	sub	sp, #108	; 0x6c
 801702a:	4604      	mov	r4, r0
 801702c:	9213      	str	r2, [sp, #76]	; 0x4c
 801702e:	2200      	movs	r2, #0
 8017030:	9216      	str	r2, [sp, #88]	; 0x58
 8017032:	460d      	mov	r5, r1
 8017034:	f04f 0800 	mov.w	r8, #0
 8017038:	f04f 0900 	mov.w	r9, #0
 801703c:	460a      	mov	r2, r1
 801703e:	9215      	str	r2, [sp, #84]	; 0x54
 8017040:	7811      	ldrb	r1, [r2, #0]
 8017042:	292b      	cmp	r1, #43	; 0x2b
 8017044:	d04c      	beq.n	80170e0 <_strtod_l+0xc0>
 8017046:	d83a      	bhi.n	80170be <_strtod_l+0x9e>
 8017048:	290d      	cmp	r1, #13
 801704a:	d834      	bhi.n	80170b6 <_strtod_l+0x96>
 801704c:	2908      	cmp	r1, #8
 801704e:	d834      	bhi.n	80170ba <_strtod_l+0x9a>
 8017050:	2900      	cmp	r1, #0
 8017052:	d03d      	beq.n	80170d0 <_strtod_l+0xb0>
 8017054:	2200      	movs	r2, #0
 8017056:	920a      	str	r2, [sp, #40]	; 0x28
 8017058:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801705a:	7832      	ldrb	r2, [r6, #0]
 801705c:	2a30      	cmp	r2, #48	; 0x30
 801705e:	f040 80b4 	bne.w	80171ca <_strtod_l+0x1aa>
 8017062:	7872      	ldrb	r2, [r6, #1]
 8017064:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8017068:	2a58      	cmp	r2, #88	; 0x58
 801706a:	d170      	bne.n	801714e <_strtod_l+0x12e>
 801706c:	9302      	str	r3, [sp, #8]
 801706e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017070:	9301      	str	r3, [sp, #4]
 8017072:	ab16      	add	r3, sp, #88	; 0x58
 8017074:	9300      	str	r3, [sp, #0]
 8017076:	4a8e      	ldr	r2, [pc, #568]	; (80172b0 <_strtod_l+0x290>)
 8017078:	ab17      	add	r3, sp, #92	; 0x5c
 801707a:	a915      	add	r1, sp, #84	; 0x54
 801707c:	4620      	mov	r0, r4
 801707e:	f001 fcb3 	bl	80189e8 <__gethex>
 8017082:	f010 070f 	ands.w	r7, r0, #15
 8017086:	4605      	mov	r5, r0
 8017088:	d005      	beq.n	8017096 <_strtod_l+0x76>
 801708a:	2f06      	cmp	r7, #6
 801708c:	d12a      	bne.n	80170e4 <_strtod_l+0xc4>
 801708e:	3601      	adds	r6, #1
 8017090:	2300      	movs	r3, #0
 8017092:	9615      	str	r6, [sp, #84]	; 0x54
 8017094:	930a      	str	r3, [sp, #40]	; 0x28
 8017096:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017098:	2b00      	cmp	r3, #0
 801709a:	f040 857f 	bne.w	8017b9c <_strtod_l+0xb7c>
 801709e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170a0:	b1db      	cbz	r3, 80170da <_strtod_l+0xba>
 80170a2:	4642      	mov	r2, r8
 80170a4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80170a8:	ec43 2b10 	vmov	d0, r2, r3
 80170ac:	b01b      	add	sp, #108	; 0x6c
 80170ae:	ecbd 8b02 	vpop	{d8}
 80170b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170b6:	2920      	cmp	r1, #32
 80170b8:	d1cc      	bne.n	8017054 <_strtod_l+0x34>
 80170ba:	3201      	adds	r2, #1
 80170bc:	e7bf      	b.n	801703e <_strtod_l+0x1e>
 80170be:	292d      	cmp	r1, #45	; 0x2d
 80170c0:	d1c8      	bne.n	8017054 <_strtod_l+0x34>
 80170c2:	2101      	movs	r1, #1
 80170c4:	910a      	str	r1, [sp, #40]	; 0x28
 80170c6:	1c51      	adds	r1, r2, #1
 80170c8:	9115      	str	r1, [sp, #84]	; 0x54
 80170ca:	7852      	ldrb	r2, [r2, #1]
 80170cc:	2a00      	cmp	r2, #0
 80170ce:	d1c3      	bne.n	8017058 <_strtod_l+0x38>
 80170d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80170d2:	9515      	str	r5, [sp, #84]	; 0x54
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	f040 855f 	bne.w	8017b98 <_strtod_l+0xb78>
 80170da:	4642      	mov	r2, r8
 80170dc:	464b      	mov	r3, r9
 80170de:	e7e3      	b.n	80170a8 <_strtod_l+0x88>
 80170e0:	2100      	movs	r1, #0
 80170e2:	e7ef      	b.n	80170c4 <_strtod_l+0xa4>
 80170e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80170e6:	b13a      	cbz	r2, 80170f8 <_strtod_l+0xd8>
 80170e8:	2135      	movs	r1, #53	; 0x35
 80170ea:	a818      	add	r0, sp, #96	; 0x60
 80170ec:	f7ff ff37 	bl	8016f5e <__copybits>
 80170f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80170f2:	4620      	mov	r0, r4
 80170f4:	f7ff fb0a 	bl	801670c <_Bfree>
 80170f8:	3f01      	subs	r7, #1
 80170fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80170fc:	2f04      	cmp	r7, #4
 80170fe:	d806      	bhi.n	801710e <_strtod_l+0xee>
 8017100:	e8df f007 	tbb	[pc, r7]
 8017104:	201d0314 	.word	0x201d0314
 8017108:	14          	.byte	0x14
 8017109:	00          	.byte	0x00
 801710a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801710e:	05e9      	lsls	r1, r5, #23
 8017110:	bf48      	it	mi
 8017112:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8017116:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801711a:	0d1b      	lsrs	r3, r3, #20
 801711c:	051b      	lsls	r3, r3, #20
 801711e:	2b00      	cmp	r3, #0
 8017120:	d1b9      	bne.n	8017096 <_strtod_l+0x76>
 8017122:	f7fe faf7 	bl	8015714 <__errno>
 8017126:	2322      	movs	r3, #34	; 0x22
 8017128:	6003      	str	r3, [r0, #0]
 801712a:	e7b4      	b.n	8017096 <_strtod_l+0x76>
 801712c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8017130:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017134:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017138:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801713c:	e7e7      	b.n	801710e <_strtod_l+0xee>
 801713e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80172b8 <_strtod_l+0x298>
 8017142:	e7e4      	b.n	801710e <_strtod_l+0xee>
 8017144:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8017148:	f04f 38ff 	mov.w	r8, #4294967295
 801714c:	e7df      	b.n	801710e <_strtod_l+0xee>
 801714e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017150:	1c5a      	adds	r2, r3, #1
 8017152:	9215      	str	r2, [sp, #84]	; 0x54
 8017154:	785b      	ldrb	r3, [r3, #1]
 8017156:	2b30      	cmp	r3, #48	; 0x30
 8017158:	d0f9      	beq.n	801714e <_strtod_l+0x12e>
 801715a:	2b00      	cmp	r3, #0
 801715c:	d09b      	beq.n	8017096 <_strtod_l+0x76>
 801715e:	2301      	movs	r3, #1
 8017160:	f04f 0a00 	mov.w	sl, #0
 8017164:	9304      	str	r3, [sp, #16]
 8017166:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017168:	930b      	str	r3, [sp, #44]	; 0x2c
 801716a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801716e:	46d3      	mov	fp, sl
 8017170:	220a      	movs	r2, #10
 8017172:	9815      	ldr	r0, [sp, #84]	; 0x54
 8017174:	7806      	ldrb	r6, [r0, #0]
 8017176:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801717a:	b2d9      	uxtb	r1, r3
 801717c:	2909      	cmp	r1, #9
 801717e:	d926      	bls.n	80171ce <_strtod_l+0x1ae>
 8017180:	494c      	ldr	r1, [pc, #304]	; (80172b4 <_strtod_l+0x294>)
 8017182:	2201      	movs	r2, #1
 8017184:	f7fe fa13 	bl	80155ae <strncmp>
 8017188:	2800      	cmp	r0, #0
 801718a:	d030      	beq.n	80171ee <_strtod_l+0x1ce>
 801718c:	2000      	movs	r0, #0
 801718e:	4632      	mov	r2, r6
 8017190:	9005      	str	r0, [sp, #20]
 8017192:	465e      	mov	r6, fp
 8017194:	4603      	mov	r3, r0
 8017196:	2a65      	cmp	r2, #101	; 0x65
 8017198:	d001      	beq.n	801719e <_strtod_l+0x17e>
 801719a:	2a45      	cmp	r2, #69	; 0x45
 801719c:	d113      	bne.n	80171c6 <_strtod_l+0x1a6>
 801719e:	b91e      	cbnz	r6, 80171a8 <_strtod_l+0x188>
 80171a0:	9a04      	ldr	r2, [sp, #16]
 80171a2:	4302      	orrs	r2, r0
 80171a4:	d094      	beq.n	80170d0 <_strtod_l+0xb0>
 80171a6:	2600      	movs	r6, #0
 80171a8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80171aa:	1c6a      	adds	r2, r5, #1
 80171ac:	9215      	str	r2, [sp, #84]	; 0x54
 80171ae:	786a      	ldrb	r2, [r5, #1]
 80171b0:	2a2b      	cmp	r2, #43	; 0x2b
 80171b2:	d074      	beq.n	801729e <_strtod_l+0x27e>
 80171b4:	2a2d      	cmp	r2, #45	; 0x2d
 80171b6:	d078      	beq.n	80172aa <_strtod_l+0x28a>
 80171b8:	f04f 0c00 	mov.w	ip, #0
 80171bc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80171c0:	2909      	cmp	r1, #9
 80171c2:	d97f      	bls.n	80172c4 <_strtod_l+0x2a4>
 80171c4:	9515      	str	r5, [sp, #84]	; 0x54
 80171c6:	2700      	movs	r7, #0
 80171c8:	e09e      	b.n	8017308 <_strtod_l+0x2e8>
 80171ca:	2300      	movs	r3, #0
 80171cc:	e7c8      	b.n	8017160 <_strtod_l+0x140>
 80171ce:	f1bb 0f08 	cmp.w	fp, #8
 80171d2:	bfd8      	it	le
 80171d4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80171d6:	f100 0001 	add.w	r0, r0, #1
 80171da:	bfda      	itte	le
 80171dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80171e0:	9309      	strle	r3, [sp, #36]	; 0x24
 80171e2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80171e6:	f10b 0b01 	add.w	fp, fp, #1
 80171ea:	9015      	str	r0, [sp, #84]	; 0x54
 80171ec:	e7c1      	b.n	8017172 <_strtod_l+0x152>
 80171ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80171f0:	1c5a      	adds	r2, r3, #1
 80171f2:	9215      	str	r2, [sp, #84]	; 0x54
 80171f4:	785a      	ldrb	r2, [r3, #1]
 80171f6:	f1bb 0f00 	cmp.w	fp, #0
 80171fa:	d037      	beq.n	801726c <_strtod_l+0x24c>
 80171fc:	9005      	str	r0, [sp, #20]
 80171fe:	465e      	mov	r6, fp
 8017200:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8017204:	2b09      	cmp	r3, #9
 8017206:	d912      	bls.n	801722e <_strtod_l+0x20e>
 8017208:	2301      	movs	r3, #1
 801720a:	e7c4      	b.n	8017196 <_strtod_l+0x176>
 801720c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801720e:	1c5a      	adds	r2, r3, #1
 8017210:	9215      	str	r2, [sp, #84]	; 0x54
 8017212:	785a      	ldrb	r2, [r3, #1]
 8017214:	3001      	adds	r0, #1
 8017216:	2a30      	cmp	r2, #48	; 0x30
 8017218:	d0f8      	beq.n	801720c <_strtod_l+0x1ec>
 801721a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801721e:	2b08      	cmp	r3, #8
 8017220:	f200 84c1 	bhi.w	8017ba6 <_strtod_l+0xb86>
 8017224:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017226:	9005      	str	r0, [sp, #20]
 8017228:	2000      	movs	r0, #0
 801722a:	930b      	str	r3, [sp, #44]	; 0x2c
 801722c:	4606      	mov	r6, r0
 801722e:	3a30      	subs	r2, #48	; 0x30
 8017230:	f100 0301 	add.w	r3, r0, #1
 8017234:	d014      	beq.n	8017260 <_strtod_l+0x240>
 8017236:	9905      	ldr	r1, [sp, #20]
 8017238:	4419      	add	r1, r3
 801723a:	9105      	str	r1, [sp, #20]
 801723c:	4633      	mov	r3, r6
 801723e:	eb00 0c06 	add.w	ip, r0, r6
 8017242:	210a      	movs	r1, #10
 8017244:	4563      	cmp	r3, ip
 8017246:	d113      	bne.n	8017270 <_strtod_l+0x250>
 8017248:	1833      	adds	r3, r6, r0
 801724a:	2b08      	cmp	r3, #8
 801724c:	f106 0601 	add.w	r6, r6, #1
 8017250:	4406      	add	r6, r0
 8017252:	dc1a      	bgt.n	801728a <_strtod_l+0x26a>
 8017254:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017256:	230a      	movs	r3, #10
 8017258:	fb03 2301 	mla	r3, r3, r1, r2
 801725c:	9309      	str	r3, [sp, #36]	; 0x24
 801725e:	2300      	movs	r3, #0
 8017260:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017262:	1c51      	adds	r1, r2, #1
 8017264:	9115      	str	r1, [sp, #84]	; 0x54
 8017266:	7852      	ldrb	r2, [r2, #1]
 8017268:	4618      	mov	r0, r3
 801726a:	e7c9      	b.n	8017200 <_strtod_l+0x1e0>
 801726c:	4658      	mov	r0, fp
 801726e:	e7d2      	b.n	8017216 <_strtod_l+0x1f6>
 8017270:	2b08      	cmp	r3, #8
 8017272:	f103 0301 	add.w	r3, r3, #1
 8017276:	dc03      	bgt.n	8017280 <_strtod_l+0x260>
 8017278:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801727a:	434f      	muls	r7, r1
 801727c:	9709      	str	r7, [sp, #36]	; 0x24
 801727e:	e7e1      	b.n	8017244 <_strtod_l+0x224>
 8017280:	2b10      	cmp	r3, #16
 8017282:	bfd8      	it	le
 8017284:	fb01 fa0a 	mulle.w	sl, r1, sl
 8017288:	e7dc      	b.n	8017244 <_strtod_l+0x224>
 801728a:	2e10      	cmp	r6, #16
 801728c:	bfdc      	itt	le
 801728e:	230a      	movle	r3, #10
 8017290:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8017294:	e7e3      	b.n	801725e <_strtod_l+0x23e>
 8017296:	2300      	movs	r3, #0
 8017298:	9305      	str	r3, [sp, #20]
 801729a:	2301      	movs	r3, #1
 801729c:	e780      	b.n	80171a0 <_strtod_l+0x180>
 801729e:	f04f 0c00 	mov.w	ip, #0
 80172a2:	1caa      	adds	r2, r5, #2
 80172a4:	9215      	str	r2, [sp, #84]	; 0x54
 80172a6:	78aa      	ldrb	r2, [r5, #2]
 80172a8:	e788      	b.n	80171bc <_strtod_l+0x19c>
 80172aa:	f04f 0c01 	mov.w	ip, #1
 80172ae:	e7f8      	b.n	80172a2 <_strtod_l+0x282>
 80172b0:	0801c288 	.word	0x0801c288
 80172b4:	0801c284 	.word	0x0801c284
 80172b8:	7ff00000 	.word	0x7ff00000
 80172bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80172be:	1c51      	adds	r1, r2, #1
 80172c0:	9115      	str	r1, [sp, #84]	; 0x54
 80172c2:	7852      	ldrb	r2, [r2, #1]
 80172c4:	2a30      	cmp	r2, #48	; 0x30
 80172c6:	d0f9      	beq.n	80172bc <_strtod_l+0x29c>
 80172c8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80172cc:	2908      	cmp	r1, #8
 80172ce:	f63f af7a 	bhi.w	80171c6 <_strtod_l+0x1a6>
 80172d2:	3a30      	subs	r2, #48	; 0x30
 80172d4:	9208      	str	r2, [sp, #32]
 80172d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80172d8:	920c      	str	r2, [sp, #48]	; 0x30
 80172da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80172dc:	1c57      	adds	r7, r2, #1
 80172de:	9715      	str	r7, [sp, #84]	; 0x54
 80172e0:	7852      	ldrb	r2, [r2, #1]
 80172e2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80172e6:	f1be 0f09 	cmp.w	lr, #9
 80172ea:	d938      	bls.n	801735e <_strtod_l+0x33e>
 80172ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80172ee:	1a7f      	subs	r7, r7, r1
 80172f0:	2f08      	cmp	r7, #8
 80172f2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80172f6:	dc03      	bgt.n	8017300 <_strtod_l+0x2e0>
 80172f8:	9908      	ldr	r1, [sp, #32]
 80172fa:	428f      	cmp	r7, r1
 80172fc:	bfa8      	it	ge
 80172fe:	460f      	movge	r7, r1
 8017300:	f1bc 0f00 	cmp.w	ip, #0
 8017304:	d000      	beq.n	8017308 <_strtod_l+0x2e8>
 8017306:	427f      	negs	r7, r7
 8017308:	2e00      	cmp	r6, #0
 801730a:	d14f      	bne.n	80173ac <_strtod_l+0x38c>
 801730c:	9904      	ldr	r1, [sp, #16]
 801730e:	4301      	orrs	r1, r0
 8017310:	f47f aec1 	bne.w	8017096 <_strtod_l+0x76>
 8017314:	2b00      	cmp	r3, #0
 8017316:	f47f aedb 	bne.w	80170d0 <_strtod_l+0xb0>
 801731a:	2a69      	cmp	r2, #105	; 0x69
 801731c:	d029      	beq.n	8017372 <_strtod_l+0x352>
 801731e:	dc26      	bgt.n	801736e <_strtod_l+0x34e>
 8017320:	2a49      	cmp	r2, #73	; 0x49
 8017322:	d026      	beq.n	8017372 <_strtod_l+0x352>
 8017324:	2a4e      	cmp	r2, #78	; 0x4e
 8017326:	f47f aed3 	bne.w	80170d0 <_strtod_l+0xb0>
 801732a:	499b      	ldr	r1, [pc, #620]	; (8017598 <_strtod_l+0x578>)
 801732c:	a815      	add	r0, sp, #84	; 0x54
 801732e:	f001 fd9b 	bl	8018e68 <__match>
 8017332:	2800      	cmp	r0, #0
 8017334:	f43f aecc 	beq.w	80170d0 <_strtod_l+0xb0>
 8017338:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801733a:	781b      	ldrb	r3, [r3, #0]
 801733c:	2b28      	cmp	r3, #40	; 0x28
 801733e:	d12f      	bne.n	80173a0 <_strtod_l+0x380>
 8017340:	4996      	ldr	r1, [pc, #600]	; (801759c <_strtod_l+0x57c>)
 8017342:	aa18      	add	r2, sp, #96	; 0x60
 8017344:	a815      	add	r0, sp, #84	; 0x54
 8017346:	f001 fda3 	bl	8018e90 <__hexnan>
 801734a:	2805      	cmp	r0, #5
 801734c:	d128      	bne.n	80173a0 <_strtod_l+0x380>
 801734e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017350:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017354:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8017358:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801735c:	e69b      	b.n	8017096 <_strtod_l+0x76>
 801735e:	9f08      	ldr	r7, [sp, #32]
 8017360:	210a      	movs	r1, #10
 8017362:	fb01 2107 	mla	r1, r1, r7, r2
 8017366:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801736a:	9208      	str	r2, [sp, #32]
 801736c:	e7b5      	b.n	80172da <_strtod_l+0x2ba>
 801736e:	2a6e      	cmp	r2, #110	; 0x6e
 8017370:	e7d9      	b.n	8017326 <_strtod_l+0x306>
 8017372:	498b      	ldr	r1, [pc, #556]	; (80175a0 <_strtod_l+0x580>)
 8017374:	a815      	add	r0, sp, #84	; 0x54
 8017376:	f001 fd77 	bl	8018e68 <__match>
 801737a:	2800      	cmp	r0, #0
 801737c:	f43f aea8 	beq.w	80170d0 <_strtod_l+0xb0>
 8017380:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017382:	4988      	ldr	r1, [pc, #544]	; (80175a4 <_strtod_l+0x584>)
 8017384:	3b01      	subs	r3, #1
 8017386:	a815      	add	r0, sp, #84	; 0x54
 8017388:	9315      	str	r3, [sp, #84]	; 0x54
 801738a:	f001 fd6d 	bl	8018e68 <__match>
 801738e:	b910      	cbnz	r0, 8017396 <_strtod_l+0x376>
 8017390:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017392:	3301      	adds	r3, #1
 8017394:	9315      	str	r3, [sp, #84]	; 0x54
 8017396:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80175b4 <_strtod_l+0x594>
 801739a:	f04f 0800 	mov.w	r8, #0
 801739e:	e67a      	b.n	8017096 <_strtod_l+0x76>
 80173a0:	4881      	ldr	r0, [pc, #516]	; (80175a8 <_strtod_l+0x588>)
 80173a2:	f001 fa7d 	bl	80188a0 <nan>
 80173a6:	ec59 8b10 	vmov	r8, r9, d0
 80173aa:	e674      	b.n	8017096 <_strtod_l+0x76>
 80173ac:	9b05      	ldr	r3, [sp, #20]
 80173ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80173b0:	1afb      	subs	r3, r7, r3
 80173b2:	f1bb 0f00 	cmp.w	fp, #0
 80173b6:	bf08      	it	eq
 80173b8:	46b3      	moveq	fp, r6
 80173ba:	2e10      	cmp	r6, #16
 80173bc:	9308      	str	r3, [sp, #32]
 80173be:	4635      	mov	r5, r6
 80173c0:	bfa8      	it	ge
 80173c2:	2510      	movge	r5, #16
 80173c4:	f7e9 f8c6 	bl	8000554 <__aeabi_ui2d>
 80173c8:	2e09      	cmp	r6, #9
 80173ca:	4680      	mov	r8, r0
 80173cc:	4689      	mov	r9, r1
 80173ce:	dd13      	ble.n	80173f8 <_strtod_l+0x3d8>
 80173d0:	4b76      	ldr	r3, [pc, #472]	; (80175ac <_strtod_l+0x58c>)
 80173d2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80173d6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80173da:	f7e9 f935 	bl	8000648 <__aeabi_dmul>
 80173de:	4680      	mov	r8, r0
 80173e0:	4650      	mov	r0, sl
 80173e2:	4689      	mov	r9, r1
 80173e4:	f7e9 f8b6 	bl	8000554 <__aeabi_ui2d>
 80173e8:	4602      	mov	r2, r0
 80173ea:	460b      	mov	r3, r1
 80173ec:	4640      	mov	r0, r8
 80173ee:	4649      	mov	r1, r9
 80173f0:	f7e8 ff74 	bl	80002dc <__adddf3>
 80173f4:	4680      	mov	r8, r0
 80173f6:	4689      	mov	r9, r1
 80173f8:	2e0f      	cmp	r6, #15
 80173fa:	dc38      	bgt.n	801746e <_strtod_l+0x44e>
 80173fc:	9b08      	ldr	r3, [sp, #32]
 80173fe:	2b00      	cmp	r3, #0
 8017400:	f43f ae49 	beq.w	8017096 <_strtod_l+0x76>
 8017404:	dd24      	ble.n	8017450 <_strtod_l+0x430>
 8017406:	2b16      	cmp	r3, #22
 8017408:	dc0b      	bgt.n	8017422 <_strtod_l+0x402>
 801740a:	4968      	ldr	r1, [pc, #416]	; (80175ac <_strtod_l+0x58c>)
 801740c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017410:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017414:	4642      	mov	r2, r8
 8017416:	464b      	mov	r3, r9
 8017418:	f7e9 f916 	bl	8000648 <__aeabi_dmul>
 801741c:	4680      	mov	r8, r0
 801741e:	4689      	mov	r9, r1
 8017420:	e639      	b.n	8017096 <_strtod_l+0x76>
 8017422:	9a08      	ldr	r2, [sp, #32]
 8017424:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8017428:	4293      	cmp	r3, r2
 801742a:	db20      	blt.n	801746e <_strtod_l+0x44e>
 801742c:	4c5f      	ldr	r4, [pc, #380]	; (80175ac <_strtod_l+0x58c>)
 801742e:	f1c6 060f 	rsb	r6, r6, #15
 8017432:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8017436:	4642      	mov	r2, r8
 8017438:	464b      	mov	r3, r9
 801743a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801743e:	f7e9 f903 	bl	8000648 <__aeabi_dmul>
 8017442:	9b08      	ldr	r3, [sp, #32]
 8017444:	1b9e      	subs	r6, r3, r6
 8017446:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801744a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801744e:	e7e3      	b.n	8017418 <_strtod_l+0x3f8>
 8017450:	9b08      	ldr	r3, [sp, #32]
 8017452:	3316      	adds	r3, #22
 8017454:	db0b      	blt.n	801746e <_strtod_l+0x44e>
 8017456:	9b05      	ldr	r3, [sp, #20]
 8017458:	1bdf      	subs	r7, r3, r7
 801745a:	4b54      	ldr	r3, [pc, #336]	; (80175ac <_strtod_l+0x58c>)
 801745c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8017460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017464:	4640      	mov	r0, r8
 8017466:	4649      	mov	r1, r9
 8017468:	f7e9 fa18 	bl	800089c <__aeabi_ddiv>
 801746c:	e7d6      	b.n	801741c <_strtod_l+0x3fc>
 801746e:	9b08      	ldr	r3, [sp, #32]
 8017470:	1b75      	subs	r5, r6, r5
 8017472:	441d      	add	r5, r3
 8017474:	2d00      	cmp	r5, #0
 8017476:	dd70      	ble.n	801755a <_strtod_l+0x53a>
 8017478:	f015 030f 	ands.w	r3, r5, #15
 801747c:	d00a      	beq.n	8017494 <_strtod_l+0x474>
 801747e:	494b      	ldr	r1, [pc, #300]	; (80175ac <_strtod_l+0x58c>)
 8017480:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017484:	4642      	mov	r2, r8
 8017486:	464b      	mov	r3, r9
 8017488:	e9d1 0100 	ldrd	r0, r1, [r1]
 801748c:	f7e9 f8dc 	bl	8000648 <__aeabi_dmul>
 8017490:	4680      	mov	r8, r0
 8017492:	4689      	mov	r9, r1
 8017494:	f035 050f 	bics.w	r5, r5, #15
 8017498:	d04d      	beq.n	8017536 <_strtod_l+0x516>
 801749a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801749e:	dd22      	ble.n	80174e6 <_strtod_l+0x4c6>
 80174a0:	2500      	movs	r5, #0
 80174a2:	46ab      	mov	fp, r5
 80174a4:	9509      	str	r5, [sp, #36]	; 0x24
 80174a6:	9505      	str	r5, [sp, #20]
 80174a8:	2322      	movs	r3, #34	; 0x22
 80174aa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80175b4 <_strtod_l+0x594>
 80174ae:	6023      	str	r3, [r4, #0]
 80174b0:	f04f 0800 	mov.w	r8, #0
 80174b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	f43f aded 	beq.w	8017096 <_strtod_l+0x76>
 80174bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80174be:	4620      	mov	r0, r4
 80174c0:	f7ff f924 	bl	801670c <_Bfree>
 80174c4:	9905      	ldr	r1, [sp, #20]
 80174c6:	4620      	mov	r0, r4
 80174c8:	f7ff f920 	bl	801670c <_Bfree>
 80174cc:	4659      	mov	r1, fp
 80174ce:	4620      	mov	r0, r4
 80174d0:	f7ff f91c 	bl	801670c <_Bfree>
 80174d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80174d6:	4620      	mov	r0, r4
 80174d8:	f7ff f918 	bl	801670c <_Bfree>
 80174dc:	4629      	mov	r1, r5
 80174de:	4620      	mov	r0, r4
 80174e0:	f7ff f914 	bl	801670c <_Bfree>
 80174e4:	e5d7      	b.n	8017096 <_strtod_l+0x76>
 80174e6:	4b32      	ldr	r3, [pc, #200]	; (80175b0 <_strtod_l+0x590>)
 80174e8:	9304      	str	r3, [sp, #16]
 80174ea:	2300      	movs	r3, #0
 80174ec:	112d      	asrs	r5, r5, #4
 80174ee:	4640      	mov	r0, r8
 80174f0:	4649      	mov	r1, r9
 80174f2:	469a      	mov	sl, r3
 80174f4:	2d01      	cmp	r5, #1
 80174f6:	dc21      	bgt.n	801753c <_strtod_l+0x51c>
 80174f8:	b10b      	cbz	r3, 80174fe <_strtod_l+0x4de>
 80174fa:	4680      	mov	r8, r0
 80174fc:	4689      	mov	r9, r1
 80174fe:	492c      	ldr	r1, [pc, #176]	; (80175b0 <_strtod_l+0x590>)
 8017500:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8017504:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017508:	4642      	mov	r2, r8
 801750a:	464b      	mov	r3, r9
 801750c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017510:	f7e9 f89a 	bl	8000648 <__aeabi_dmul>
 8017514:	4b27      	ldr	r3, [pc, #156]	; (80175b4 <_strtod_l+0x594>)
 8017516:	460a      	mov	r2, r1
 8017518:	400b      	ands	r3, r1
 801751a:	4927      	ldr	r1, [pc, #156]	; (80175b8 <_strtod_l+0x598>)
 801751c:	428b      	cmp	r3, r1
 801751e:	4680      	mov	r8, r0
 8017520:	d8be      	bhi.n	80174a0 <_strtod_l+0x480>
 8017522:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017526:	428b      	cmp	r3, r1
 8017528:	bf86      	itte	hi
 801752a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80175bc <_strtod_l+0x59c>
 801752e:	f04f 38ff 	movhi.w	r8, #4294967295
 8017532:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8017536:	2300      	movs	r3, #0
 8017538:	9304      	str	r3, [sp, #16]
 801753a:	e07b      	b.n	8017634 <_strtod_l+0x614>
 801753c:	07ea      	lsls	r2, r5, #31
 801753e:	d505      	bpl.n	801754c <_strtod_l+0x52c>
 8017540:	9b04      	ldr	r3, [sp, #16]
 8017542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017546:	f7e9 f87f 	bl	8000648 <__aeabi_dmul>
 801754a:	2301      	movs	r3, #1
 801754c:	9a04      	ldr	r2, [sp, #16]
 801754e:	3208      	adds	r2, #8
 8017550:	f10a 0a01 	add.w	sl, sl, #1
 8017554:	106d      	asrs	r5, r5, #1
 8017556:	9204      	str	r2, [sp, #16]
 8017558:	e7cc      	b.n	80174f4 <_strtod_l+0x4d4>
 801755a:	d0ec      	beq.n	8017536 <_strtod_l+0x516>
 801755c:	426d      	negs	r5, r5
 801755e:	f015 020f 	ands.w	r2, r5, #15
 8017562:	d00a      	beq.n	801757a <_strtod_l+0x55a>
 8017564:	4b11      	ldr	r3, [pc, #68]	; (80175ac <_strtod_l+0x58c>)
 8017566:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801756a:	4640      	mov	r0, r8
 801756c:	4649      	mov	r1, r9
 801756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017572:	f7e9 f993 	bl	800089c <__aeabi_ddiv>
 8017576:	4680      	mov	r8, r0
 8017578:	4689      	mov	r9, r1
 801757a:	112d      	asrs	r5, r5, #4
 801757c:	d0db      	beq.n	8017536 <_strtod_l+0x516>
 801757e:	2d1f      	cmp	r5, #31
 8017580:	dd1e      	ble.n	80175c0 <_strtod_l+0x5a0>
 8017582:	2500      	movs	r5, #0
 8017584:	46ab      	mov	fp, r5
 8017586:	9509      	str	r5, [sp, #36]	; 0x24
 8017588:	9505      	str	r5, [sp, #20]
 801758a:	2322      	movs	r3, #34	; 0x22
 801758c:	f04f 0800 	mov.w	r8, #0
 8017590:	f04f 0900 	mov.w	r9, #0
 8017594:	6023      	str	r3, [r4, #0]
 8017596:	e78d      	b.n	80174b4 <_strtod_l+0x494>
 8017598:	0801c075 	.word	0x0801c075
 801759c:	0801c29c 	.word	0x0801c29c
 80175a0:	0801c06d 	.word	0x0801c06d
 80175a4:	0801c0a2 	.word	0x0801c0a2
 80175a8:	0801c448 	.word	0x0801c448
 80175ac:	0801c1b0 	.word	0x0801c1b0
 80175b0:	0801c188 	.word	0x0801c188
 80175b4:	7ff00000 	.word	0x7ff00000
 80175b8:	7ca00000 	.word	0x7ca00000
 80175bc:	7fefffff 	.word	0x7fefffff
 80175c0:	f015 0310 	ands.w	r3, r5, #16
 80175c4:	bf18      	it	ne
 80175c6:	236a      	movne	r3, #106	; 0x6a
 80175c8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801796c <_strtod_l+0x94c>
 80175cc:	9304      	str	r3, [sp, #16]
 80175ce:	4640      	mov	r0, r8
 80175d0:	4649      	mov	r1, r9
 80175d2:	2300      	movs	r3, #0
 80175d4:	07ea      	lsls	r2, r5, #31
 80175d6:	d504      	bpl.n	80175e2 <_strtod_l+0x5c2>
 80175d8:	e9da 2300 	ldrd	r2, r3, [sl]
 80175dc:	f7e9 f834 	bl	8000648 <__aeabi_dmul>
 80175e0:	2301      	movs	r3, #1
 80175e2:	106d      	asrs	r5, r5, #1
 80175e4:	f10a 0a08 	add.w	sl, sl, #8
 80175e8:	d1f4      	bne.n	80175d4 <_strtod_l+0x5b4>
 80175ea:	b10b      	cbz	r3, 80175f0 <_strtod_l+0x5d0>
 80175ec:	4680      	mov	r8, r0
 80175ee:	4689      	mov	r9, r1
 80175f0:	9b04      	ldr	r3, [sp, #16]
 80175f2:	b1bb      	cbz	r3, 8017624 <_strtod_l+0x604>
 80175f4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80175f8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	4649      	mov	r1, r9
 8017600:	dd10      	ble.n	8017624 <_strtod_l+0x604>
 8017602:	2b1f      	cmp	r3, #31
 8017604:	f340 811e 	ble.w	8017844 <_strtod_l+0x824>
 8017608:	2b34      	cmp	r3, #52	; 0x34
 801760a:	bfde      	ittt	le
 801760c:	f04f 33ff 	movle.w	r3, #4294967295
 8017610:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8017614:	4093      	lslle	r3, r2
 8017616:	f04f 0800 	mov.w	r8, #0
 801761a:	bfcc      	ite	gt
 801761c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8017620:	ea03 0901 	andle.w	r9, r3, r1
 8017624:	2200      	movs	r2, #0
 8017626:	2300      	movs	r3, #0
 8017628:	4640      	mov	r0, r8
 801762a:	4649      	mov	r1, r9
 801762c:	f7e9 fa74 	bl	8000b18 <__aeabi_dcmpeq>
 8017630:	2800      	cmp	r0, #0
 8017632:	d1a6      	bne.n	8017582 <_strtod_l+0x562>
 8017634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017636:	9300      	str	r3, [sp, #0]
 8017638:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801763a:	4633      	mov	r3, r6
 801763c:	465a      	mov	r2, fp
 801763e:	4620      	mov	r0, r4
 8017640:	f7ff f8cc 	bl	80167dc <__s2b>
 8017644:	9009      	str	r0, [sp, #36]	; 0x24
 8017646:	2800      	cmp	r0, #0
 8017648:	f43f af2a 	beq.w	80174a0 <_strtod_l+0x480>
 801764c:	9a08      	ldr	r2, [sp, #32]
 801764e:	9b05      	ldr	r3, [sp, #20]
 8017650:	2a00      	cmp	r2, #0
 8017652:	eba3 0307 	sub.w	r3, r3, r7
 8017656:	bfa8      	it	ge
 8017658:	2300      	movge	r3, #0
 801765a:	930c      	str	r3, [sp, #48]	; 0x30
 801765c:	2500      	movs	r5, #0
 801765e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8017662:	9312      	str	r3, [sp, #72]	; 0x48
 8017664:	46ab      	mov	fp, r5
 8017666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017668:	4620      	mov	r0, r4
 801766a:	6859      	ldr	r1, [r3, #4]
 801766c:	f7ff f80e 	bl	801668c <_Balloc>
 8017670:	9005      	str	r0, [sp, #20]
 8017672:	2800      	cmp	r0, #0
 8017674:	f43f af18 	beq.w	80174a8 <_strtod_l+0x488>
 8017678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801767a:	691a      	ldr	r2, [r3, #16]
 801767c:	3202      	adds	r2, #2
 801767e:	f103 010c 	add.w	r1, r3, #12
 8017682:	0092      	lsls	r2, r2, #2
 8017684:	300c      	adds	r0, #12
 8017686:	f7fe f872 	bl	801576e <memcpy>
 801768a:	ec49 8b10 	vmov	d0, r8, r9
 801768e:	aa18      	add	r2, sp, #96	; 0x60
 8017690:	a917      	add	r1, sp, #92	; 0x5c
 8017692:	4620      	mov	r0, r4
 8017694:	f7ff fbd6 	bl	8016e44 <__d2b>
 8017698:	ec49 8b18 	vmov	d8, r8, r9
 801769c:	9016      	str	r0, [sp, #88]	; 0x58
 801769e:	2800      	cmp	r0, #0
 80176a0:	f43f af02 	beq.w	80174a8 <_strtod_l+0x488>
 80176a4:	2101      	movs	r1, #1
 80176a6:	4620      	mov	r0, r4
 80176a8:	f7ff f930 	bl	801690c <__i2b>
 80176ac:	4683      	mov	fp, r0
 80176ae:	2800      	cmp	r0, #0
 80176b0:	f43f aefa 	beq.w	80174a8 <_strtod_l+0x488>
 80176b4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80176b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80176b8:	2e00      	cmp	r6, #0
 80176ba:	bfab      	itete	ge
 80176bc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80176be:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80176c0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80176c2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80176c6:	bfac      	ite	ge
 80176c8:	eb06 0a03 	addge.w	sl, r6, r3
 80176cc:	1b9f      	sublt	r7, r3, r6
 80176ce:	9b04      	ldr	r3, [sp, #16]
 80176d0:	1af6      	subs	r6, r6, r3
 80176d2:	4416      	add	r6, r2
 80176d4:	4ba0      	ldr	r3, [pc, #640]	; (8017958 <_strtod_l+0x938>)
 80176d6:	3e01      	subs	r6, #1
 80176d8:	429e      	cmp	r6, r3
 80176da:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80176de:	f280 80c4 	bge.w	801786a <_strtod_l+0x84a>
 80176e2:	1b9b      	subs	r3, r3, r6
 80176e4:	2b1f      	cmp	r3, #31
 80176e6:	eba2 0203 	sub.w	r2, r2, r3
 80176ea:	f04f 0101 	mov.w	r1, #1
 80176ee:	f300 80b0 	bgt.w	8017852 <_strtod_l+0x832>
 80176f2:	fa01 f303 	lsl.w	r3, r1, r3
 80176f6:	930e      	str	r3, [sp, #56]	; 0x38
 80176f8:	2300      	movs	r3, #0
 80176fa:	930d      	str	r3, [sp, #52]	; 0x34
 80176fc:	eb0a 0602 	add.w	r6, sl, r2
 8017700:	9b04      	ldr	r3, [sp, #16]
 8017702:	45b2      	cmp	sl, r6
 8017704:	4417      	add	r7, r2
 8017706:	441f      	add	r7, r3
 8017708:	4653      	mov	r3, sl
 801770a:	bfa8      	it	ge
 801770c:	4633      	movge	r3, r6
 801770e:	42bb      	cmp	r3, r7
 8017710:	bfa8      	it	ge
 8017712:	463b      	movge	r3, r7
 8017714:	2b00      	cmp	r3, #0
 8017716:	bfc2      	ittt	gt
 8017718:	1af6      	subgt	r6, r6, r3
 801771a:	1aff      	subgt	r7, r7, r3
 801771c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8017720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017722:	2b00      	cmp	r3, #0
 8017724:	dd17      	ble.n	8017756 <_strtod_l+0x736>
 8017726:	4659      	mov	r1, fp
 8017728:	461a      	mov	r2, r3
 801772a:	4620      	mov	r0, r4
 801772c:	f7ff f9ae 	bl	8016a8c <__pow5mult>
 8017730:	4683      	mov	fp, r0
 8017732:	2800      	cmp	r0, #0
 8017734:	f43f aeb8 	beq.w	80174a8 <_strtod_l+0x488>
 8017738:	4601      	mov	r1, r0
 801773a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801773c:	4620      	mov	r0, r4
 801773e:	f7ff f8fb 	bl	8016938 <__multiply>
 8017742:	900b      	str	r0, [sp, #44]	; 0x2c
 8017744:	2800      	cmp	r0, #0
 8017746:	f43f aeaf 	beq.w	80174a8 <_strtod_l+0x488>
 801774a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801774c:	4620      	mov	r0, r4
 801774e:	f7fe ffdd 	bl	801670c <_Bfree>
 8017752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017754:	9316      	str	r3, [sp, #88]	; 0x58
 8017756:	2e00      	cmp	r6, #0
 8017758:	f300 808c 	bgt.w	8017874 <_strtod_l+0x854>
 801775c:	9b08      	ldr	r3, [sp, #32]
 801775e:	2b00      	cmp	r3, #0
 8017760:	dd08      	ble.n	8017774 <_strtod_l+0x754>
 8017762:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017764:	9905      	ldr	r1, [sp, #20]
 8017766:	4620      	mov	r0, r4
 8017768:	f7ff f990 	bl	8016a8c <__pow5mult>
 801776c:	9005      	str	r0, [sp, #20]
 801776e:	2800      	cmp	r0, #0
 8017770:	f43f ae9a 	beq.w	80174a8 <_strtod_l+0x488>
 8017774:	2f00      	cmp	r7, #0
 8017776:	dd08      	ble.n	801778a <_strtod_l+0x76a>
 8017778:	9905      	ldr	r1, [sp, #20]
 801777a:	463a      	mov	r2, r7
 801777c:	4620      	mov	r0, r4
 801777e:	f7ff f9df 	bl	8016b40 <__lshift>
 8017782:	9005      	str	r0, [sp, #20]
 8017784:	2800      	cmp	r0, #0
 8017786:	f43f ae8f 	beq.w	80174a8 <_strtod_l+0x488>
 801778a:	f1ba 0f00 	cmp.w	sl, #0
 801778e:	dd08      	ble.n	80177a2 <_strtod_l+0x782>
 8017790:	4659      	mov	r1, fp
 8017792:	4652      	mov	r2, sl
 8017794:	4620      	mov	r0, r4
 8017796:	f7ff f9d3 	bl	8016b40 <__lshift>
 801779a:	4683      	mov	fp, r0
 801779c:	2800      	cmp	r0, #0
 801779e:	f43f ae83 	beq.w	80174a8 <_strtod_l+0x488>
 80177a2:	9a05      	ldr	r2, [sp, #20]
 80177a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80177a6:	4620      	mov	r0, r4
 80177a8:	f7ff fa52 	bl	8016c50 <__mdiff>
 80177ac:	4605      	mov	r5, r0
 80177ae:	2800      	cmp	r0, #0
 80177b0:	f43f ae7a 	beq.w	80174a8 <_strtod_l+0x488>
 80177b4:	68c3      	ldr	r3, [r0, #12]
 80177b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80177b8:	2300      	movs	r3, #0
 80177ba:	60c3      	str	r3, [r0, #12]
 80177bc:	4659      	mov	r1, fp
 80177be:	f7ff fa2b 	bl	8016c18 <__mcmp>
 80177c2:	2800      	cmp	r0, #0
 80177c4:	da60      	bge.n	8017888 <_strtod_l+0x868>
 80177c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80177c8:	ea53 0308 	orrs.w	r3, r3, r8
 80177cc:	f040 8084 	bne.w	80178d8 <_strtod_l+0x8b8>
 80177d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d17f      	bne.n	80178d8 <_strtod_l+0x8b8>
 80177d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80177dc:	0d1b      	lsrs	r3, r3, #20
 80177de:	051b      	lsls	r3, r3, #20
 80177e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80177e4:	d978      	bls.n	80178d8 <_strtod_l+0x8b8>
 80177e6:	696b      	ldr	r3, [r5, #20]
 80177e8:	b913      	cbnz	r3, 80177f0 <_strtod_l+0x7d0>
 80177ea:	692b      	ldr	r3, [r5, #16]
 80177ec:	2b01      	cmp	r3, #1
 80177ee:	dd73      	ble.n	80178d8 <_strtod_l+0x8b8>
 80177f0:	4629      	mov	r1, r5
 80177f2:	2201      	movs	r2, #1
 80177f4:	4620      	mov	r0, r4
 80177f6:	f7ff f9a3 	bl	8016b40 <__lshift>
 80177fa:	4659      	mov	r1, fp
 80177fc:	4605      	mov	r5, r0
 80177fe:	f7ff fa0b 	bl	8016c18 <__mcmp>
 8017802:	2800      	cmp	r0, #0
 8017804:	dd68      	ble.n	80178d8 <_strtod_l+0x8b8>
 8017806:	9904      	ldr	r1, [sp, #16]
 8017808:	4a54      	ldr	r2, [pc, #336]	; (801795c <_strtod_l+0x93c>)
 801780a:	464b      	mov	r3, r9
 801780c:	2900      	cmp	r1, #0
 801780e:	f000 8084 	beq.w	801791a <_strtod_l+0x8fa>
 8017812:	ea02 0109 	and.w	r1, r2, r9
 8017816:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801781a:	dc7e      	bgt.n	801791a <_strtod_l+0x8fa>
 801781c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017820:	f77f aeb3 	ble.w	801758a <_strtod_l+0x56a>
 8017824:	4b4e      	ldr	r3, [pc, #312]	; (8017960 <_strtod_l+0x940>)
 8017826:	4640      	mov	r0, r8
 8017828:	4649      	mov	r1, r9
 801782a:	2200      	movs	r2, #0
 801782c:	f7e8 ff0c 	bl	8000648 <__aeabi_dmul>
 8017830:	4b4a      	ldr	r3, [pc, #296]	; (801795c <_strtod_l+0x93c>)
 8017832:	400b      	ands	r3, r1
 8017834:	4680      	mov	r8, r0
 8017836:	4689      	mov	r9, r1
 8017838:	2b00      	cmp	r3, #0
 801783a:	f47f ae3f 	bne.w	80174bc <_strtod_l+0x49c>
 801783e:	2322      	movs	r3, #34	; 0x22
 8017840:	6023      	str	r3, [r4, #0]
 8017842:	e63b      	b.n	80174bc <_strtod_l+0x49c>
 8017844:	f04f 32ff 	mov.w	r2, #4294967295
 8017848:	fa02 f303 	lsl.w	r3, r2, r3
 801784c:	ea03 0808 	and.w	r8, r3, r8
 8017850:	e6e8      	b.n	8017624 <_strtod_l+0x604>
 8017852:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8017856:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801785a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801785e:	36e2      	adds	r6, #226	; 0xe2
 8017860:	fa01 f306 	lsl.w	r3, r1, r6
 8017864:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8017868:	e748      	b.n	80176fc <_strtod_l+0x6dc>
 801786a:	2100      	movs	r1, #0
 801786c:	2301      	movs	r3, #1
 801786e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8017872:	e743      	b.n	80176fc <_strtod_l+0x6dc>
 8017874:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017876:	4632      	mov	r2, r6
 8017878:	4620      	mov	r0, r4
 801787a:	f7ff f961 	bl	8016b40 <__lshift>
 801787e:	9016      	str	r0, [sp, #88]	; 0x58
 8017880:	2800      	cmp	r0, #0
 8017882:	f47f af6b 	bne.w	801775c <_strtod_l+0x73c>
 8017886:	e60f      	b.n	80174a8 <_strtod_l+0x488>
 8017888:	46ca      	mov	sl, r9
 801788a:	d171      	bne.n	8017970 <_strtod_l+0x950>
 801788c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801788e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017892:	b352      	cbz	r2, 80178ea <_strtod_l+0x8ca>
 8017894:	4a33      	ldr	r2, [pc, #204]	; (8017964 <_strtod_l+0x944>)
 8017896:	4293      	cmp	r3, r2
 8017898:	d12a      	bne.n	80178f0 <_strtod_l+0x8d0>
 801789a:	9b04      	ldr	r3, [sp, #16]
 801789c:	4641      	mov	r1, r8
 801789e:	b1fb      	cbz	r3, 80178e0 <_strtod_l+0x8c0>
 80178a0:	4b2e      	ldr	r3, [pc, #184]	; (801795c <_strtod_l+0x93c>)
 80178a2:	ea09 0303 	and.w	r3, r9, r3
 80178a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80178aa:	f04f 32ff 	mov.w	r2, #4294967295
 80178ae:	d81a      	bhi.n	80178e6 <_strtod_l+0x8c6>
 80178b0:	0d1b      	lsrs	r3, r3, #20
 80178b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80178b6:	fa02 f303 	lsl.w	r3, r2, r3
 80178ba:	4299      	cmp	r1, r3
 80178bc:	d118      	bne.n	80178f0 <_strtod_l+0x8d0>
 80178be:	4b2a      	ldr	r3, [pc, #168]	; (8017968 <_strtod_l+0x948>)
 80178c0:	459a      	cmp	sl, r3
 80178c2:	d102      	bne.n	80178ca <_strtod_l+0x8aa>
 80178c4:	3101      	adds	r1, #1
 80178c6:	f43f adef 	beq.w	80174a8 <_strtod_l+0x488>
 80178ca:	4b24      	ldr	r3, [pc, #144]	; (801795c <_strtod_l+0x93c>)
 80178cc:	ea0a 0303 	and.w	r3, sl, r3
 80178d0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80178d4:	f04f 0800 	mov.w	r8, #0
 80178d8:	9b04      	ldr	r3, [sp, #16]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d1a2      	bne.n	8017824 <_strtod_l+0x804>
 80178de:	e5ed      	b.n	80174bc <_strtod_l+0x49c>
 80178e0:	f04f 33ff 	mov.w	r3, #4294967295
 80178e4:	e7e9      	b.n	80178ba <_strtod_l+0x89a>
 80178e6:	4613      	mov	r3, r2
 80178e8:	e7e7      	b.n	80178ba <_strtod_l+0x89a>
 80178ea:	ea53 0308 	orrs.w	r3, r3, r8
 80178ee:	d08a      	beq.n	8017806 <_strtod_l+0x7e6>
 80178f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80178f2:	b1e3      	cbz	r3, 801792e <_strtod_l+0x90e>
 80178f4:	ea13 0f0a 	tst.w	r3, sl
 80178f8:	d0ee      	beq.n	80178d8 <_strtod_l+0x8b8>
 80178fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80178fc:	9a04      	ldr	r2, [sp, #16]
 80178fe:	4640      	mov	r0, r8
 8017900:	4649      	mov	r1, r9
 8017902:	b1c3      	cbz	r3, 8017936 <_strtod_l+0x916>
 8017904:	f7ff fb6f 	bl	8016fe6 <sulp>
 8017908:	4602      	mov	r2, r0
 801790a:	460b      	mov	r3, r1
 801790c:	ec51 0b18 	vmov	r0, r1, d8
 8017910:	f7e8 fce4 	bl	80002dc <__adddf3>
 8017914:	4680      	mov	r8, r0
 8017916:	4689      	mov	r9, r1
 8017918:	e7de      	b.n	80178d8 <_strtod_l+0x8b8>
 801791a:	4013      	ands	r3, r2
 801791c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017920:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8017924:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8017928:	f04f 38ff 	mov.w	r8, #4294967295
 801792c:	e7d4      	b.n	80178d8 <_strtod_l+0x8b8>
 801792e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017930:	ea13 0f08 	tst.w	r3, r8
 8017934:	e7e0      	b.n	80178f8 <_strtod_l+0x8d8>
 8017936:	f7ff fb56 	bl	8016fe6 <sulp>
 801793a:	4602      	mov	r2, r0
 801793c:	460b      	mov	r3, r1
 801793e:	ec51 0b18 	vmov	r0, r1, d8
 8017942:	f7e8 fcc9 	bl	80002d8 <__aeabi_dsub>
 8017946:	2200      	movs	r2, #0
 8017948:	2300      	movs	r3, #0
 801794a:	4680      	mov	r8, r0
 801794c:	4689      	mov	r9, r1
 801794e:	f7e9 f8e3 	bl	8000b18 <__aeabi_dcmpeq>
 8017952:	2800      	cmp	r0, #0
 8017954:	d0c0      	beq.n	80178d8 <_strtod_l+0x8b8>
 8017956:	e618      	b.n	801758a <_strtod_l+0x56a>
 8017958:	fffffc02 	.word	0xfffffc02
 801795c:	7ff00000 	.word	0x7ff00000
 8017960:	39500000 	.word	0x39500000
 8017964:	000fffff 	.word	0x000fffff
 8017968:	7fefffff 	.word	0x7fefffff
 801796c:	0801c2b0 	.word	0x0801c2b0
 8017970:	4659      	mov	r1, fp
 8017972:	4628      	mov	r0, r5
 8017974:	f7ff fac0 	bl	8016ef8 <__ratio>
 8017978:	ec57 6b10 	vmov	r6, r7, d0
 801797c:	ee10 0a10 	vmov	r0, s0
 8017980:	2200      	movs	r2, #0
 8017982:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017986:	4639      	mov	r1, r7
 8017988:	f7e9 f8da 	bl	8000b40 <__aeabi_dcmple>
 801798c:	2800      	cmp	r0, #0
 801798e:	d071      	beq.n	8017a74 <_strtod_l+0xa54>
 8017990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017992:	2b00      	cmp	r3, #0
 8017994:	d17c      	bne.n	8017a90 <_strtod_l+0xa70>
 8017996:	f1b8 0f00 	cmp.w	r8, #0
 801799a:	d15a      	bne.n	8017a52 <_strtod_l+0xa32>
 801799c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d15d      	bne.n	8017a60 <_strtod_l+0xa40>
 80179a4:	4b90      	ldr	r3, [pc, #576]	; (8017be8 <_strtod_l+0xbc8>)
 80179a6:	2200      	movs	r2, #0
 80179a8:	4630      	mov	r0, r6
 80179aa:	4639      	mov	r1, r7
 80179ac:	f7e9 f8be 	bl	8000b2c <__aeabi_dcmplt>
 80179b0:	2800      	cmp	r0, #0
 80179b2:	d15c      	bne.n	8017a6e <_strtod_l+0xa4e>
 80179b4:	4630      	mov	r0, r6
 80179b6:	4639      	mov	r1, r7
 80179b8:	4b8c      	ldr	r3, [pc, #560]	; (8017bec <_strtod_l+0xbcc>)
 80179ba:	2200      	movs	r2, #0
 80179bc:	f7e8 fe44 	bl	8000648 <__aeabi_dmul>
 80179c0:	4606      	mov	r6, r0
 80179c2:	460f      	mov	r7, r1
 80179c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80179c8:	9606      	str	r6, [sp, #24]
 80179ca:	9307      	str	r3, [sp, #28]
 80179cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80179d0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80179d4:	4b86      	ldr	r3, [pc, #536]	; (8017bf0 <_strtod_l+0xbd0>)
 80179d6:	ea0a 0303 	and.w	r3, sl, r3
 80179da:	930d      	str	r3, [sp, #52]	; 0x34
 80179dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80179de:	4b85      	ldr	r3, [pc, #532]	; (8017bf4 <_strtod_l+0xbd4>)
 80179e0:	429a      	cmp	r2, r3
 80179e2:	f040 8090 	bne.w	8017b06 <_strtod_l+0xae6>
 80179e6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80179ea:	ec49 8b10 	vmov	d0, r8, r9
 80179ee:	f7ff f9b9 	bl	8016d64 <__ulp>
 80179f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80179f6:	ec51 0b10 	vmov	r0, r1, d0
 80179fa:	f7e8 fe25 	bl	8000648 <__aeabi_dmul>
 80179fe:	4642      	mov	r2, r8
 8017a00:	464b      	mov	r3, r9
 8017a02:	f7e8 fc6b 	bl	80002dc <__adddf3>
 8017a06:	460b      	mov	r3, r1
 8017a08:	4979      	ldr	r1, [pc, #484]	; (8017bf0 <_strtod_l+0xbd0>)
 8017a0a:	4a7b      	ldr	r2, [pc, #492]	; (8017bf8 <_strtod_l+0xbd8>)
 8017a0c:	4019      	ands	r1, r3
 8017a0e:	4291      	cmp	r1, r2
 8017a10:	4680      	mov	r8, r0
 8017a12:	d944      	bls.n	8017a9e <_strtod_l+0xa7e>
 8017a14:	ee18 2a90 	vmov	r2, s17
 8017a18:	4b78      	ldr	r3, [pc, #480]	; (8017bfc <_strtod_l+0xbdc>)
 8017a1a:	429a      	cmp	r2, r3
 8017a1c:	d104      	bne.n	8017a28 <_strtod_l+0xa08>
 8017a1e:	ee18 3a10 	vmov	r3, s16
 8017a22:	3301      	adds	r3, #1
 8017a24:	f43f ad40 	beq.w	80174a8 <_strtod_l+0x488>
 8017a28:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8017bfc <_strtod_l+0xbdc>
 8017a2c:	f04f 38ff 	mov.w	r8, #4294967295
 8017a30:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017a32:	4620      	mov	r0, r4
 8017a34:	f7fe fe6a 	bl	801670c <_Bfree>
 8017a38:	9905      	ldr	r1, [sp, #20]
 8017a3a:	4620      	mov	r0, r4
 8017a3c:	f7fe fe66 	bl	801670c <_Bfree>
 8017a40:	4659      	mov	r1, fp
 8017a42:	4620      	mov	r0, r4
 8017a44:	f7fe fe62 	bl	801670c <_Bfree>
 8017a48:	4629      	mov	r1, r5
 8017a4a:	4620      	mov	r0, r4
 8017a4c:	f7fe fe5e 	bl	801670c <_Bfree>
 8017a50:	e609      	b.n	8017666 <_strtod_l+0x646>
 8017a52:	f1b8 0f01 	cmp.w	r8, #1
 8017a56:	d103      	bne.n	8017a60 <_strtod_l+0xa40>
 8017a58:	f1b9 0f00 	cmp.w	r9, #0
 8017a5c:	f43f ad95 	beq.w	801758a <_strtod_l+0x56a>
 8017a60:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8017bb8 <_strtod_l+0xb98>
 8017a64:	4f60      	ldr	r7, [pc, #384]	; (8017be8 <_strtod_l+0xbc8>)
 8017a66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017a6a:	2600      	movs	r6, #0
 8017a6c:	e7ae      	b.n	80179cc <_strtod_l+0x9ac>
 8017a6e:	4f5f      	ldr	r7, [pc, #380]	; (8017bec <_strtod_l+0xbcc>)
 8017a70:	2600      	movs	r6, #0
 8017a72:	e7a7      	b.n	80179c4 <_strtod_l+0x9a4>
 8017a74:	4b5d      	ldr	r3, [pc, #372]	; (8017bec <_strtod_l+0xbcc>)
 8017a76:	4630      	mov	r0, r6
 8017a78:	4639      	mov	r1, r7
 8017a7a:	2200      	movs	r2, #0
 8017a7c:	f7e8 fde4 	bl	8000648 <__aeabi_dmul>
 8017a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a82:	4606      	mov	r6, r0
 8017a84:	460f      	mov	r7, r1
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d09c      	beq.n	80179c4 <_strtod_l+0x9a4>
 8017a8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8017a8e:	e79d      	b.n	80179cc <_strtod_l+0x9ac>
 8017a90:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8017bc0 <_strtod_l+0xba0>
 8017a94:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017a98:	ec57 6b17 	vmov	r6, r7, d7
 8017a9c:	e796      	b.n	80179cc <_strtod_l+0x9ac>
 8017a9e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8017aa2:	9b04      	ldr	r3, [sp, #16]
 8017aa4:	46ca      	mov	sl, r9
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d1c2      	bne.n	8017a30 <_strtod_l+0xa10>
 8017aaa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017aae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017ab0:	0d1b      	lsrs	r3, r3, #20
 8017ab2:	051b      	lsls	r3, r3, #20
 8017ab4:	429a      	cmp	r2, r3
 8017ab6:	d1bb      	bne.n	8017a30 <_strtod_l+0xa10>
 8017ab8:	4630      	mov	r0, r6
 8017aba:	4639      	mov	r1, r7
 8017abc:	f7e9 f974 	bl	8000da8 <__aeabi_d2lz>
 8017ac0:	f7e8 fd94 	bl	80005ec <__aeabi_l2d>
 8017ac4:	4602      	mov	r2, r0
 8017ac6:	460b      	mov	r3, r1
 8017ac8:	4630      	mov	r0, r6
 8017aca:	4639      	mov	r1, r7
 8017acc:	f7e8 fc04 	bl	80002d8 <__aeabi_dsub>
 8017ad0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017ad2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017ad6:	ea43 0308 	orr.w	r3, r3, r8
 8017ada:	4313      	orrs	r3, r2
 8017adc:	4606      	mov	r6, r0
 8017ade:	460f      	mov	r7, r1
 8017ae0:	d054      	beq.n	8017b8c <_strtod_l+0xb6c>
 8017ae2:	a339      	add	r3, pc, #228	; (adr r3, 8017bc8 <_strtod_l+0xba8>)
 8017ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ae8:	f7e9 f820 	bl	8000b2c <__aeabi_dcmplt>
 8017aec:	2800      	cmp	r0, #0
 8017aee:	f47f ace5 	bne.w	80174bc <_strtod_l+0x49c>
 8017af2:	a337      	add	r3, pc, #220	; (adr r3, 8017bd0 <_strtod_l+0xbb0>)
 8017af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017af8:	4630      	mov	r0, r6
 8017afa:	4639      	mov	r1, r7
 8017afc:	f7e9 f834 	bl	8000b68 <__aeabi_dcmpgt>
 8017b00:	2800      	cmp	r0, #0
 8017b02:	d095      	beq.n	8017a30 <_strtod_l+0xa10>
 8017b04:	e4da      	b.n	80174bc <_strtod_l+0x49c>
 8017b06:	9b04      	ldr	r3, [sp, #16]
 8017b08:	b333      	cbz	r3, 8017b58 <_strtod_l+0xb38>
 8017b0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b0c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017b10:	d822      	bhi.n	8017b58 <_strtod_l+0xb38>
 8017b12:	a331      	add	r3, pc, #196	; (adr r3, 8017bd8 <_strtod_l+0xbb8>)
 8017b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b18:	4630      	mov	r0, r6
 8017b1a:	4639      	mov	r1, r7
 8017b1c:	f7e9 f810 	bl	8000b40 <__aeabi_dcmple>
 8017b20:	b1a0      	cbz	r0, 8017b4c <_strtod_l+0xb2c>
 8017b22:	4639      	mov	r1, r7
 8017b24:	4630      	mov	r0, r6
 8017b26:	f7e9 f867 	bl	8000bf8 <__aeabi_d2uiz>
 8017b2a:	2801      	cmp	r0, #1
 8017b2c:	bf38      	it	cc
 8017b2e:	2001      	movcc	r0, #1
 8017b30:	f7e8 fd10 	bl	8000554 <__aeabi_ui2d>
 8017b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b36:	4606      	mov	r6, r0
 8017b38:	460f      	mov	r7, r1
 8017b3a:	bb23      	cbnz	r3, 8017b86 <_strtod_l+0xb66>
 8017b3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017b40:	9010      	str	r0, [sp, #64]	; 0x40
 8017b42:	9311      	str	r3, [sp, #68]	; 0x44
 8017b44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017b48:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8017b4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017b4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017b50:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017b54:	1a9b      	subs	r3, r3, r2
 8017b56:	930f      	str	r3, [sp, #60]	; 0x3c
 8017b58:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8017b5c:	eeb0 0a48 	vmov.f32	s0, s16
 8017b60:	eef0 0a68 	vmov.f32	s1, s17
 8017b64:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8017b68:	f7ff f8fc 	bl	8016d64 <__ulp>
 8017b6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8017b70:	ec53 2b10 	vmov	r2, r3, d0
 8017b74:	f7e8 fd68 	bl	8000648 <__aeabi_dmul>
 8017b78:	ec53 2b18 	vmov	r2, r3, d8
 8017b7c:	f7e8 fbae 	bl	80002dc <__adddf3>
 8017b80:	4680      	mov	r8, r0
 8017b82:	4689      	mov	r9, r1
 8017b84:	e78d      	b.n	8017aa2 <_strtod_l+0xa82>
 8017b86:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017b8a:	e7db      	b.n	8017b44 <_strtod_l+0xb24>
 8017b8c:	a314      	add	r3, pc, #80	; (adr r3, 8017be0 <_strtod_l+0xbc0>)
 8017b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b92:	f7e8 ffcb 	bl	8000b2c <__aeabi_dcmplt>
 8017b96:	e7b3      	b.n	8017b00 <_strtod_l+0xae0>
 8017b98:	2300      	movs	r3, #0
 8017b9a:	930a      	str	r3, [sp, #40]	; 0x28
 8017b9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017b9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017ba0:	6013      	str	r3, [r2, #0]
 8017ba2:	f7ff ba7c 	b.w	801709e <_strtod_l+0x7e>
 8017ba6:	2a65      	cmp	r2, #101	; 0x65
 8017ba8:	f43f ab75 	beq.w	8017296 <_strtod_l+0x276>
 8017bac:	2a45      	cmp	r2, #69	; 0x45
 8017bae:	f43f ab72 	beq.w	8017296 <_strtod_l+0x276>
 8017bb2:	2301      	movs	r3, #1
 8017bb4:	f7ff bbaa 	b.w	801730c <_strtod_l+0x2ec>
 8017bb8:	00000000 	.word	0x00000000
 8017bbc:	bff00000 	.word	0xbff00000
 8017bc0:	00000000 	.word	0x00000000
 8017bc4:	3ff00000 	.word	0x3ff00000
 8017bc8:	94a03595 	.word	0x94a03595
 8017bcc:	3fdfffff 	.word	0x3fdfffff
 8017bd0:	35afe535 	.word	0x35afe535
 8017bd4:	3fe00000 	.word	0x3fe00000
 8017bd8:	ffc00000 	.word	0xffc00000
 8017bdc:	41dfffff 	.word	0x41dfffff
 8017be0:	94a03595 	.word	0x94a03595
 8017be4:	3fcfffff 	.word	0x3fcfffff
 8017be8:	3ff00000 	.word	0x3ff00000
 8017bec:	3fe00000 	.word	0x3fe00000
 8017bf0:	7ff00000 	.word	0x7ff00000
 8017bf4:	7fe00000 	.word	0x7fe00000
 8017bf8:	7c9fffff 	.word	0x7c9fffff
 8017bfc:	7fefffff 	.word	0x7fefffff

08017c00 <_strtod_r>:
 8017c00:	4b01      	ldr	r3, [pc, #4]	; (8017c08 <_strtod_r+0x8>)
 8017c02:	f7ff ba0d 	b.w	8017020 <_strtod_l>
 8017c06:	bf00      	nop
 8017c08:	20000074 	.word	0x20000074

08017c0c <_strtol_l.constprop.0>:
 8017c0c:	2b01      	cmp	r3, #1
 8017c0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c12:	d001      	beq.n	8017c18 <_strtol_l.constprop.0+0xc>
 8017c14:	2b24      	cmp	r3, #36	; 0x24
 8017c16:	d906      	bls.n	8017c26 <_strtol_l.constprop.0+0x1a>
 8017c18:	f7fd fd7c 	bl	8015714 <__errno>
 8017c1c:	2316      	movs	r3, #22
 8017c1e:	6003      	str	r3, [r0, #0]
 8017c20:	2000      	movs	r0, #0
 8017c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c26:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8017d0c <_strtol_l.constprop.0+0x100>
 8017c2a:	460d      	mov	r5, r1
 8017c2c:	462e      	mov	r6, r5
 8017c2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017c32:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8017c36:	f017 0708 	ands.w	r7, r7, #8
 8017c3a:	d1f7      	bne.n	8017c2c <_strtol_l.constprop.0+0x20>
 8017c3c:	2c2d      	cmp	r4, #45	; 0x2d
 8017c3e:	d132      	bne.n	8017ca6 <_strtol_l.constprop.0+0x9a>
 8017c40:	782c      	ldrb	r4, [r5, #0]
 8017c42:	2701      	movs	r7, #1
 8017c44:	1cb5      	adds	r5, r6, #2
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d05b      	beq.n	8017d02 <_strtol_l.constprop.0+0xf6>
 8017c4a:	2b10      	cmp	r3, #16
 8017c4c:	d109      	bne.n	8017c62 <_strtol_l.constprop.0+0x56>
 8017c4e:	2c30      	cmp	r4, #48	; 0x30
 8017c50:	d107      	bne.n	8017c62 <_strtol_l.constprop.0+0x56>
 8017c52:	782c      	ldrb	r4, [r5, #0]
 8017c54:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017c58:	2c58      	cmp	r4, #88	; 0x58
 8017c5a:	d14d      	bne.n	8017cf8 <_strtol_l.constprop.0+0xec>
 8017c5c:	786c      	ldrb	r4, [r5, #1]
 8017c5e:	2310      	movs	r3, #16
 8017c60:	3502      	adds	r5, #2
 8017c62:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017c66:	f108 38ff 	add.w	r8, r8, #4294967295
 8017c6a:	f04f 0e00 	mov.w	lr, #0
 8017c6e:	fbb8 f9f3 	udiv	r9, r8, r3
 8017c72:	4676      	mov	r6, lr
 8017c74:	fb03 8a19 	mls	sl, r3, r9, r8
 8017c78:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017c7c:	f1bc 0f09 	cmp.w	ip, #9
 8017c80:	d816      	bhi.n	8017cb0 <_strtol_l.constprop.0+0xa4>
 8017c82:	4664      	mov	r4, ip
 8017c84:	42a3      	cmp	r3, r4
 8017c86:	dd24      	ble.n	8017cd2 <_strtol_l.constprop.0+0xc6>
 8017c88:	f1be 3fff 	cmp.w	lr, #4294967295
 8017c8c:	d008      	beq.n	8017ca0 <_strtol_l.constprop.0+0x94>
 8017c8e:	45b1      	cmp	r9, r6
 8017c90:	d31c      	bcc.n	8017ccc <_strtol_l.constprop.0+0xc0>
 8017c92:	d101      	bne.n	8017c98 <_strtol_l.constprop.0+0x8c>
 8017c94:	45a2      	cmp	sl, r4
 8017c96:	db19      	blt.n	8017ccc <_strtol_l.constprop.0+0xc0>
 8017c98:	fb06 4603 	mla	r6, r6, r3, r4
 8017c9c:	f04f 0e01 	mov.w	lr, #1
 8017ca0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017ca4:	e7e8      	b.n	8017c78 <_strtol_l.constprop.0+0x6c>
 8017ca6:	2c2b      	cmp	r4, #43	; 0x2b
 8017ca8:	bf04      	itt	eq
 8017caa:	782c      	ldrbeq	r4, [r5, #0]
 8017cac:	1cb5      	addeq	r5, r6, #2
 8017cae:	e7ca      	b.n	8017c46 <_strtol_l.constprop.0+0x3a>
 8017cb0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017cb4:	f1bc 0f19 	cmp.w	ip, #25
 8017cb8:	d801      	bhi.n	8017cbe <_strtol_l.constprop.0+0xb2>
 8017cba:	3c37      	subs	r4, #55	; 0x37
 8017cbc:	e7e2      	b.n	8017c84 <_strtol_l.constprop.0+0x78>
 8017cbe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8017cc2:	f1bc 0f19 	cmp.w	ip, #25
 8017cc6:	d804      	bhi.n	8017cd2 <_strtol_l.constprop.0+0xc6>
 8017cc8:	3c57      	subs	r4, #87	; 0x57
 8017cca:	e7db      	b.n	8017c84 <_strtol_l.constprop.0+0x78>
 8017ccc:	f04f 3eff 	mov.w	lr, #4294967295
 8017cd0:	e7e6      	b.n	8017ca0 <_strtol_l.constprop.0+0x94>
 8017cd2:	f1be 3fff 	cmp.w	lr, #4294967295
 8017cd6:	d105      	bne.n	8017ce4 <_strtol_l.constprop.0+0xd8>
 8017cd8:	2322      	movs	r3, #34	; 0x22
 8017cda:	6003      	str	r3, [r0, #0]
 8017cdc:	4646      	mov	r6, r8
 8017cde:	b942      	cbnz	r2, 8017cf2 <_strtol_l.constprop.0+0xe6>
 8017ce0:	4630      	mov	r0, r6
 8017ce2:	e79e      	b.n	8017c22 <_strtol_l.constprop.0+0x16>
 8017ce4:	b107      	cbz	r7, 8017ce8 <_strtol_l.constprop.0+0xdc>
 8017ce6:	4276      	negs	r6, r6
 8017ce8:	2a00      	cmp	r2, #0
 8017cea:	d0f9      	beq.n	8017ce0 <_strtol_l.constprop.0+0xd4>
 8017cec:	f1be 0f00 	cmp.w	lr, #0
 8017cf0:	d000      	beq.n	8017cf4 <_strtol_l.constprop.0+0xe8>
 8017cf2:	1e69      	subs	r1, r5, #1
 8017cf4:	6011      	str	r1, [r2, #0]
 8017cf6:	e7f3      	b.n	8017ce0 <_strtol_l.constprop.0+0xd4>
 8017cf8:	2430      	movs	r4, #48	; 0x30
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d1b1      	bne.n	8017c62 <_strtol_l.constprop.0+0x56>
 8017cfe:	2308      	movs	r3, #8
 8017d00:	e7af      	b.n	8017c62 <_strtol_l.constprop.0+0x56>
 8017d02:	2c30      	cmp	r4, #48	; 0x30
 8017d04:	d0a5      	beq.n	8017c52 <_strtol_l.constprop.0+0x46>
 8017d06:	230a      	movs	r3, #10
 8017d08:	e7ab      	b.n	8017c62 <_strtol_l.constprop.0+0x56>
 8017d0a:	bf00      	nop
 8017d0c:	0801c2d9 	.word	0x0801c2d9

08017d10 <_strtol_r>:
 8017d10:	f7ff bf7c 	b.w	8017c0c <_strtol_l.constprop.0>

08017d14 <__ssputs_r>:
 8017d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d18:	688e      	ldr	r6, [r1, #8]
 8017d1a:	461f      	mov	r7, r3
 8017d1c:	42be      	cmp	r6, r7
 8017d1e:	680b      	ldr	r3, [r1, #0]
 8017d20:	4682      	mov	sl, r0
 8017d22:	460c      	mov	r4, r1
 8017d24:	4690      	mov	r8, r2
 8017d26:	d82c      	bhi.n	8017d82 <__ssputs_r+0x6e>
 8017d28:	898a      	ldrh	r2, [r1, #12]
 8017d2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017d2e:	d026      	beq.n	8017d7e <__ssputs_r+0x6a>
 8017d30:	6965      	ldr	r5, [r4, #20]
 8017d32:	6909      	ldr	r1, [r1, #16]
 8017d34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017d38:	eba3 0901 	sub.w	r9, r3, r1
 8017d3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017d40:	1c7b      	adds	r3, r7, #1
 8017d42:	444b      	add	r3, r9
 8017d44:	106d      	asrs	r5, r5, #1
 8017d46:	429d      	cmp	r5, r3
 8017d48:	bf38      	it	cc
 8017d4a:	461d      	movcc	r5, r3
 8017d4c:	0553      	lsls	r3, r2, #21
 8017d4e:	d527      	bpl.n	8017da0 <__ssputs_r+0x8c>
 8017d50:	4629      	mov	r1, r5
 8017d52:	f7fe fc0f 	bl	8016574 <_malloc_r>
 8017d56:	4606      	mov	r6, r0
 8017d58:	b360      	cbz	r0, 8017db4 <__ssputs_r+0xa0>
 8017d5a:	6921      	ldr	r1, [r4, #16]
 8017d5c:	464a      	mov	r2, r9
 8017d5e:	f7fd fd06 	bl	801576e <memcpy>
 8017d62:	89a3      	ldrh	r3, [r4, #12]
 8017d64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017d6c:	81a3      	strh	r3, [r4, #12]
 8017d6e:	6126      	str	r6, [r4, #16]
 8017d70:	6165      	str	r5, [r4, #20]
 8017d72:	444e      	add	r6, r9
 8017d74:	eba5 0509 	sub.w	r5, r5, r9
 8017d78:	6026      	str	r6, [r4, #0]
 8017d7a:	60a5      	str	r5, [r4, #8]
 8017d7c:	463e      	mov	r6, r7
 8017d7e:	42be      	cmp	r6, r7
 8017d80:	d900      	bls.n	8017d84 <__ssputs_r+0x70>
 8017d82:	463e      	mov	r6, r7
 8017d84:	6820      	ldr	r0, [r4, #0]
 8017d86:	4632      	mov	r2, r6
 8017d88:	4641      	mov	r1, r8
 8017d8a:	f000 fd5c 	bl	8018846 <memmove>
 8017d8e:	68a3      	ldr	r3, [r4, #8]
 8017d90:	1b9b      	subs	r3, r3, r6
 8017d92:	60a3      	str	r3, [r4, #8]
 8017d94:	6823      	ldr	r3, [r4, #0]
 8017d96:	4433      	add	r3, r6
 8017d98:	6023      	str	r3, [r4, #0]
 8017d9a:	2000      	movs	r0, #0
 8017d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017da0:	462a      	mov	r2, r5
 8017da2:	f001 f922 	bl	8018fea <_realloc_r>
 8017da6:	4606      	mov	r6, r0
 8017da8:	2800      	cmp	r0, #0
 8017daa:	d1e0      	bne.n	8017d6e <__ssputs_r+0x5a>
 8017dac:	6921      	ldr	r1, [r4, #16]
 8017dae:	4650      	mov	r0, sl
 8017db0:	f7fe fb6c 	bl	801648c <_free_r>
 8017db4:	230c      	movs	r3, #12
 8017db6:	f8ca 3000 	str.w	r3, [sl]
 8017dba:	89a3      	ldrh	r3, [r4, #12]
 8017dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017dc0:	81a3      	strh	r3, [r4, #12]
 8017dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8017dc6:	e7e9      	b.n	8017d9c <__ssputs_r+0x88>

08017dc8 <_svfiprintf_r>:
 8017dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dcc:	4698      	mov	r8, r3
 8017dce:	898b      	ldrh	r3, [r1, #12]
 8017dd0:	061b      	lsls	r3, r3, #24
 8017dd2:	b09d      	sub	sp, #116	; 0x74
 8017dd4:	4607      	mov	r7, r0
 8017dd6:	460d      	mov	r5, r1
 8017dd8:	4614      	mov	r4, r2
 8017dda:	d50e      	bpl.n	8017dfa <_svfiprintf_r+0x32>
 8017ddc:	690b      	ldr	r3, [r1, #16]
 8017dde:	b963      	cbnz	r3, 8017dfa <_svfiprintf_r+0x32>
 8017de0:	2140      	movs	r1, #64	; 0x40
 8017de2:	f7fe fbc7 	bl	8016574 <_malloc_r>
 8017de6:	6028      	str	r0, [r5, #0]
 8017de8:	6128      	str	r0, [r5, #16]
 8017dea:	b920      	cbnz	r0, 8017df6 <_svfiprintf_r+0x2e>
 8017dec:	230c      	movs	r3, #12
 8017dee:	603b      	str	r3, [r7, #0]
 8017df0:	f04f 30ff 	mov.w	r0, #4294967295
 8017df4:	e0d0      	b.n	8017f98 <_svfiprintf_r+0x1d0>
 8017df6:	2340      	movs	r3, #64	; 0x40
 8017df8:	616b      	str	r3, [r5, #20]
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8017dfe:	2320      	movs	r3, #32
 8017e00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017e04:	f8cd 800c 	str.w	r8, [sp, #12]
 8017e08:	2330      	movs	r3, #48	; 0x30
 8017e0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017fb0 <_svfiprintf_r+0x1e8>
 8017e0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017e12:	f04f 0901 	mov.w	r9, #1
 8017e16:	4623      	mov	r3, r4
 8017e18:	469a      	mov	sl, r3
 8017e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e1e:	b10a      	cbz	r2, 8017e24 <_svfiprintf_r+0x5c>
 8017e20:	2a25      	cmp	r2, #37	; 0x25
 8017e22:	d1f9      	bne.n	8017e18 <_svfiprintf_r+0x50>
 8017e24:	ebba 0b04 	subs.w	fp, sl, r4
 8017e28:	d00b      	beq.n	8017e42 <_svfiprintf_r+0x7a>
 8017e2a:	465b      	mov	r3, fp
 8017e2c:	4622      	mov	r2, r4
 8017e2e:	4629      	mov	r1, r5
 8017e30:	4638      	mov	r0, r7
 8017e32:	f7ff ff6f 	bl	8017d14 <__ssputs_r>
 8017e36:	3001      	adds	r0, #1
 8017e38:	f000 80a9 	beq.w	8017f8e <_svfiprintf_r+0x1c6>
 8017e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017e3e:	445a      	add	r2, fp
 8017e40:	9209      	str	r2, [sp, #36]	; 0x24
 8017e42:	f89a 3000 	ldrb.w	r3, [sl]
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	f000 80a1 	beq.w	8017f8e <_svfiprintf_r+0x1c6>
 8017e4c:	2300      	movs	r3, #0
 8017e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8017e52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017e56:	f10a 0a01 	add.w	sl, sl, #1
 8017e5a:	9304      	str	r3, [sp, #16]
 8017e5c:	9307      	str	r3, [sp, #28]
 8017e5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017e62:	931a      	str	r3, [sp, #104]	; 0x68
 8017e64:	4654      	mov	r4, sl
 8017e66:	2205      	movs	r2, #5
 8017e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e6c:	4850      	ldr	r0, [pc, #320]	; (8017fb0 <_svfiprintf_r+0x1e8>)
 8017e6e:	f7e8 f9d7 	bl	8000220 <memchr>
 8017e72:	9a04      	ldr	r2, [sp, #16]
 8017e74:	b9d8      	cbnz	r0, 8017eae <_svfiprintf_r+0xe6>
 8017e76:	06d0      	lsls	r0, r2, #27
 8017e78:	bf44      	itt	mi
 8017e7a:	2320      	movmi	r3, #32
 8017e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e80:	0711      	lsls	r1, r2, #28
 8017e82:	bf44      	itt	mi
 8017e84:	232b      	movmi	r3, #43	; 0x2b
 8017e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8017e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8017e90:	d015      	beq.n	8017ebe <_svfiprintf_r+0xf6>
 8017e92:	9a07      	ldr	r2, [sp, #28]
 8017e94:	4654      	mov	r4, sl
 8017e96:	2000      	movs	r0, #0
 8017e98:	f04f 0c0a 	mov.w	ip, #10
 8017e9c:	4621      	mov	r1, r4
 8017e9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017ea2:	3b30      	subs	r3, #48	; 0x30
 8017ea4:	2b09      	cmp	r3, #9
 8017ea6:	d94d      	bls.n	8017f44 <_svfiprintf_r+0x17c>
 8017ea8:	b1b0      	cbz	r0, 8017ed8 <_svfiprintf_r+0x110>
 8017eaa:	9207      	str	r2, [sp, #28]
 8017eac:	e014      	b.n	8017ed8 <_svfiprintf_r+0x110>
 8017eae:	eba0 0308 	sub.w	r3, r0, r8
 8017eb2:	fa09 f303 	lsl.w	r3, r9, r3
 8017eb6:	4313      	orrs	r3, r2
 8017eb8:	9304      	str	r3, [sp, #16]
 8017eba:	46a2      	mov	sl, r4
 8017ebc:	e7d2      	b.n	8017e64 <_svfiprintf_r+0x9c>
 8017ebe:	9b03      	ldr	r3, [sp, #12]
 8017ec0:	1d19      	adds	r1, r3, #4
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	9103      	str	r1, [sp, #12]
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	bfbb      	ittet	lt
 8017eca:	425b      	neglt	r3, r3
 8017ecc:	f042 0202 	orrlt.w	r2, r2, #2
 8017ed0:	9307      	strge	r3, [sp, #28]
 8017ed2:	9307      	strlt	r3, [sp, #28]
 8017ed4:	bfb8      	it	lt
 8017ed6:	9204      	strlt	r2, [sp, #16]
 8017ed8:	7823      	ldrb	r3, [r4, #0]
 8017eda:	2b2e      	cmp	r3, #46	; 0x2e
 8017edc:	d10c      	bne.n	8017ef8 <_svfiprintf_r+0x130>
 8017ede:	7863      	ldrb	r3, [r4, #1]
 8017ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8017ee2:	d134      	bne.n	8017f4e <_svfiprintf_r+0x186>
 8017ee4:	9b03      	ldr	r3, [sp, #12]
 8017ee6:	1d1a      	adds	r2, r3, #4
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	9203      	str	r2, [sp, #12]
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	bfb8      	it	lt
 8017ef0:	f04f 33ff 	movlt.w	r3, #4294967295
 8017ef4:	3402      	adds	r4, #2
 8017ef6:	9305      	str	r3, [sp, #20]
 8017ef8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017fc0 <_svfiprintf_r+0x1f8>
 8017efc:	7821      	ldrb	r1, [r4, #0]
 8017efe:	2203      	movs	r2, #3
 8017f00:	4650      	mov	r0, sl
 8017f02:	f7e8 f98d 	bl	8000220 <memchr>
 8017f06:	b138      	cbz	r0, 8017f18 <_svfiprintf_r+0x150>
 8017f08:	9b04      	ldr	r3, [sp, #16]
 8017f0a:	eba0 000a 	sub.w	r0, r0, sl
 8017f0e:	2240      	movs	r2, #64	; 0x40
 8017f10:	4082      	lsls	r2, r0
 8017f12:	4313      	orrs	r3, r2
 8017f14:	3401      	adds	r4, #1
 8017f16:	9304      	str	r3, [sp, #16]
 8017f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f1c:	4825      	ldr	r0, [pc, #148]	; (8017fb4 <_svfiprintf_r+0x1ec>)
 8017f1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017f22:	2206      	movs	r2, #6
 8017f24:	f7e8 f97c 	bl	8000220 <memchr>
 8017f28:	2800      	cmp	r0, #0
 8017f2a:	d038      	beq.n	8017f9e <_svfiprintf_r+0x1d6>
 8017f2c:	4b22      	ldr	r3, [pc, #136]	; (8017fb8 <_svfiprintf_r+0x1f0>)
 8017f2e:	bb1b      	cbnz	r3, 8017f78 <_svfiprintf_r+0x1b0>
 8017f30:	9b03      	ldr	r3, [sp, #12]
 8017f32:	3307      	adds	r3, #7
 8017f34:	f023 0307 	bic.w	r3, r3, #7
 8017f38:	3308      	adds	r3, #8
 8017f3a:	9303      	str	r3, [sp, #12]
 8017f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f3e:	4433      	add	r3, r6
 8017f40:	9309      	str	r3, [sp, #36]	; 0x24
 8017f42:	e768      	b.n	8017e16 <_svfiprintf_r+0x4e>
 8017f44:	fb0c 3202 	mla	r2, ip, r2, r3
 8017f48:	460c      	mov	r4, r1
 8017f4a:	2001      	movs	r0, #1
 8017f4c:	e7a6      	b.n	8017e9c <_svfiprintf_r+0xd4>
 8017f4e:	2300      	movs	r3, #0
 8017f50:	3401      	adds	r4, #1
 8017f52:	9305      	str	r3, [sp, #20]
 8017f54:	4619      	mov	r1, r3
 8017f56:	f04f 0c0a 	mov.w	ip, #10
 8017f5a:	4620      	mov	r0, r4
 8017f5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f60:	3a30      	subs	r2, #48	; 0x30
 8017f62:	2a09      	cmp	r2, #9
 8017f64:	d903      	bls.n	8017f6e <_svfiprintf_r+0x1a6>
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d0c6      	beq.n	8017ef8 <_svfiprintf_r+0x130>
 8017f6a:	9105      	str	r1, [sp, #20]
 8017f6c:	e7c4      	b.n	8017ef8 <_svfiprintf_r+0x130>
 8017f6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017f72:	4604      	mov	r4, r0
 8017f74:	2301      	movs	r3, #1
 8017f76:	e7f0      	b.n	8017f5a <_svfiprintf_r+0x192>
 8017f78:	ab03      	add	r3, sp, #12
 8017f7a:	9300      	str	r3, [sp, #0]
 8017f7c:	462a      	mov	r2, r5
 8017f7e:	4b0f      	ldr	r3, [pc, #60]	; (8017fbc <_svfiprintf_r+0x1f4>)
 8017f80:	a904      	add	r1, sp, #16
 8017f82:	4638      	mov	r0, r7
 8017f84:	f7fc fbe2 	bl	801474c <_printf_float>
 8017f88:	1c42      	adds	r2, r0, #1
 8017f8a:	4606      	mov	r6, r0
 8017f8c:	d1d6      	bne.n	8017f3c <_svfiprintf_r+0x174>
 8017f8e:	89ab      	ldrh	r3, [r5, #12]
 8017f90:	065b      	lsls	r3, r3, #25
 8017f92:	f53f af2d 	bmi.w	8017df0 <_svfiprintf_r+0x28>
 8017f96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017f98:	b01d      	add	sp, #116	; 0x74
 8017f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f9e:	ab03      	add	r3, sp, #12
 8017fa0:	9300      	str	r3, [sp, #0]
 8017fa2:	462a      	mov	r2, r5
 8017fa4:	4b05      	ldr	r3, [pc, #20]	; (8017fbc <_svfiprintf_r+0x1f4>)
 8017fa6:	a904      	add	r1, sp, #16
 8017fa8:	4638      	mov	r0, r7
 8017faa:	f7fc fe73 	bl	8014c94 <_printf_i>
 8017fae:	e7eb      	b.n	8017f88 <_svfiprintf_r+0x1c0>
 8017fb0:	0801c3d9 	.word	0x0801c3d9
 8017fb4:	0801c3e3 	.word	0x0801c3e3
 8017fb8:	0801474d 	.word	0x0801474d
 8017fbc:	08017d15 	.word	0x08017d15
 8017fc0:	0801c3df 	.word	0x0801c3df

08017fc4 <_sungetc_r>:
 8017fc4:	b538      	push	{r3, r4, r5, lr}
 8017fc6:	1c4b      	adds	r3, r1, #1
 8017fc8:	4614      	mov	r4, r2
 8017fca:	d103      	bne.n	8017fd4 <_sungetc_r+0x10>
 8017fcc:	f04f 35ff 	mov.w	r5, #4294967295
 8017fd0:	4628      	mov	r0, r5
 8017fd2:	bd38      	pop	{r3, r4, r5, pc}
 8017fd4:	8993      	ldrh	r3, [r2, #12]
 8017fd6:	f023 0320 	bic.w	r3, r3, #32
 8017fda:	8193      	strh	r3, [r2, #12]
 8017fdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017fde:	6852      	ldr	r2, [r2, #4]
 8017fe0:	b2cd      	uxtb	r5, r1
 8017fe2:	b18b      	cbz	r3, 8018008 <_sungetc_r+0x44>
 8017fe4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017fe6:	4293      	cmp	r3, r2
 8017fe8:	dd08      	ble.n	8017ffc <_sungetc_r+0x38>
 8017fea:	6823      	ldr	r3, [r4, #0]
 8017fec:	1e5a      	subs	r2, r3, #1
 8017fee:	6022      	str	r2, [r4, #0]
 8017ff0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017ff4:	6863      	ldr	r3, [r4, #4]
 8017ff6:	3301      	adds	r3, #1
 8017ff8:	6063      	str	r3, [r4, #4]
 8017ffa:	e7e9      	b.n	8017fd0 <_sungetc_r+0xc>
 8017ffc:	4621      	mov	r1, r4
 8017ffe:	f000 fbe8 	bl	80187d2 <__submore>
 8018002:	2800      	cmp	r0, #0
 8018004:	d0f1      	beq.n	8017fea <_sungetc_r+0x26>
 8018006:	e7e1      	b.n	8017fcc <_sungetc_r+0x8>
 8018008:	6921      	ldr	r1, [r4, #16]
 801800a:	6823      	ldr	r3, [r4, #0]
 801800c:	b151      	cbz	r1, 8018024 <_sungetc_r+0x60>
 801800e:	4299      	cmp	r1, r3
 8018010:	d208      	bcs.n	8018024 <_sungetc_r+0x60>
 8018012:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018016:	42a9      	cmp	r1, r5
 8018018:	d104      	bne.n	8018024 <_sungetc_r+0x60>
 801801a:	3b01      	subs	r3, #1
 801801c:	3201      	adds	r2, #1
 801801e:	6023      	str	r3, [r4, #0]
 8018020:	6062      	str	r2, [r4, #4]
 8018022:	e7d5      	b.n	8017fd0 <_sungetc_r+0xc>
 8018024:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801802c:	6363      	str	r3, [r4, #52]	; 0x34
 801802e:	2303      	movs	r3, #3
 8018030:	63a3      	str	r3, [r4, #56]	; 0x38
 8018032:	4623      	mov	r3, r4
 8018034:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018038:	6023      	str	r3, [r4, #0]
 801803a:	2301      	movs	r3, #1
 801803c:	e7dc      	b.n	8017ff8 <_sungetc_r+0x34>

0801803e <__ssrefill_r>:
 801803e:	b510      	push	{r4, lr}
 8018040:	460c      	mov	r4, r1
 8018042:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018044:	b169      	cbz	r1, 8018062 <__ssrefill_r+0x24>
 8018046:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801804a:	4299      	cmp	r1, r3
 801804c:	d001      	beq.n	8018052 <__ssrefill_r+0x14>
 801804e:	f7fe fa1d 	bl	801648c <_free_r>
 8018052:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018054:	6063      	str	r3, [r4, #4]
 8018056:	2000      	movs	r0, #0
 8018058:	6360      	str	r0, [r4, #52]	; 0x34
 801805a:	b113      	cbz	r3, 8018062 <__ssrefill_r+0x24>
 801805c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801805e:	6023      	str	r3, [r4, #0]
 8018060:	bd10      	pop	{r4, pc}
 8018062:	6923      	ldr	r3, [r4, #16]
 8018064:	6023      	str	r3, [r4, #0]
 8018066:	2300      	movs	r3, #0
 8018068:	6063      	str	r3, [r4, #4]
 801806a:	89a3      	ldrh	r3, [r4, #12]
 801806c:	f043 0320 	orr.w	r3, r3, #32
 8018070:	81a3      	strh	r3, [r4, #12]
 8018072:	f04f 30ff 	mov.w	r0, #4294967295
 8018076:	e7f3      	b.n	8018060 <__ssrefill_r+0x22>

08018078 <__ssvfiscanf_r>:
 8018078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801807c:	460c      	mov	r4, r1
 801807e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8018082:	2100      	movs	r1, #0
 8018084:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8018088:	49a6      	ldr	r1, [pc, #664]	; (8018324 <__ssvfiscanf_r+0x2ac>)
 801808a:	91a0      	str	r1, [sp, #640]	; 0x280
 801808c:	f10d 0804 	add.w	r8, sp, #4
 8018090:	49a5      	ldr	r1, [pc, #660]	; (8018328 <__ssvfiscanf_r+0x2b0>)
 8018092:	4fa6      	ldr	r7, [pc, #664]	; (801832c <__ssvfiscanf_r+0x2b4>)
 8018094:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8018330 <__ssvfiscanf_r+0x2b8>
 8018098:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801809c:	4606      	mov	r6, r0
 801809e:	91a1      	str	r1, [sp, #644]	; 0x284
 80180a0:	9300      	str	r3, [sp, #0]
 80180a2:	7813      	ldrb	r3, [r2, #0]
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	f000 815a 	beq.w	801835e <__ssvfiscanf_r+0x2e6>
 80180aa:	5cf9      	ldrb	r1, [r7, r3]
 80180ac:	f011 0108 	ands.w	r1, r1, #8
 80180b0:	f102 0501 	add.w	r5, r2, #1
 80180b4:	d019      	beq.n	80180ea <__ssvfiscanf_r+0x72>
 80180b6:	6863      	ldr	r3, [r4, #4]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	dd0f      	ble.n	80180dc <__ssvfiscanf_r+0x64>
 80180bc:	6823      	ldr	r3, [r4, #0]
 80180be:	781a      	ldrb	r2, [r3, #0]
 80180c0:	5cba      	ldrb	r2, [r7, r2]
 80180c2:	0712      	lsls	r2, r2, #28
 80180c4:	d401      	bmi.n	80180ca <__ssvfiscanf_r+0x52>
 80180c6:	462a      	mov	r2, r5
 80180c8:	e7eb      	b.n	80180a2 <__ssvfiscanf_r+0x2a>
 80180ca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80180cc:	3201      	adds	r2, #1
 80180ce:	9245      	str	r2, [sp, #276]	; 0x114
 80180d0:	6862      	ldr	r2, [r4, #4]
 80180d2:	3301      	adds	r3, #1
 80180d4:	3a01      	subs	r2, #1
 80180d6:	6062      	str	r2, [r4, #4]
 80180d8:	6023      	str	r3, [r4, #0]
 80180da:	e7ec      	b.n	80180b6 <__ssvfiscanf_r+0x3e>
 80180dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80180de:	4621      	mov	r1, r4
 80180e0:	4630      	mov	r0, r6
 80180e2:	4798      	blx	r3
 80180e4:	2800      	cmp	r0, #0
 80180e6:	d0e9      	beq.n	80180bc <__ssvfiscanf_r+0x44>
 80180e8:	e7ed      	b.n	80180c6 <__ssvfiscanf_r+0x4e>
 80180ea:	2b25      	cmp	r3, #37	; 0x25
 80180ec:	d012      	beq.n	8018114 <__ssvfiscanf_r+0x9c>
 80180ee:	469a      	mov	sl, r3
 80180f0:	6863      	ldr	r3, [r4, #4]
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	f340 8091 	ble.w	801821a <__ssvfiscanf_r+0x1a2>
 80180f8:	6822      	ldr	r2, [r4, #0]
 80180fa:	7813      	ldrb	r3, [r2, #0]
 80180fc:	4553      	cmp	r3, sl
 80180fe:	f040 812e 	bne.w	801835e <__ssvfiscanf_r+0x2e6>
 8018102:	6863      	ldr	r3, [r4, #4]
 8018104:	3b01      	subs	r3, #1
 8018106:	6063      	str	r3, [r4, #4]
 8018108:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801810a:	3201      	adds	r2, #1
 801810c:	3301      	adds	r3, #1
 801810e:	6022      	str	r2, [r4, #0]
 8018110:	9345      	str	r3, [sp, #276]	; 0x114
 8018112:	e7d8      	b.n	80180c6 <__ssvfiscanf_r+0x4e>
 8018114:	9141      	str	r1, [sp, #260]	; 0x104
 8018116:	9143      	str	r1, [sp, #268]	; 0x10c
 8018118:	7853      	ldrb	r3, [r2, #1]
 801811a:	2b2a      	cmp	r3, #42	; 0x2a
 801811c:	bf02      	ittt	eq
 801811e:	2310      	moveq	r3, #16
 8018120:	1c95      	addeq	r5, r2, #2
 8018122:	9341      	streq	r3, [sp, #260]	; 0x104
 8018124:	220a      	movs	r2, #10
 8018126:	46aa      	mov	sl, r5
 8018128:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801812c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8018130:	2b09      	cmp	r3, #9
 8018132:	d91c      	bls.n	801816e <__ssvfiscanf_r+0xf6>
 8018134:	487e      	ldr	r0, [pc, #504]	; (8018330 <__ssvfiscanf_r+0x2b8>)
 8018136:	2203      	movs	r2, #3
 8018138:	f7e8 f872 	bl	8000220 <memchr>
 801813c:	b138      	cbz	r0, 801814e <__ssvfiscanf_r+0xd6>
 801813e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018140:	eba0 0009 	sub.w	r0, r0, r9
 8018144:	2301      	movs	r3, #1
 8018146:	4083      	lsls	r3, r0
 8018148:	4313      	orrs	r3, r2
 801814a:	9341      	str	r3, [sp, #260]	; 0x104
 801814c:	4655      	mov	r5, sl
 801814e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018152:	2b78      	cmp	r3, #120	; 0x78
 8018154:	d806      	bhi.n	8018164 <__ssvfiscanf_r+0xec>
 8018156:	2b57      	cmp	r3, #87	; 0x57
 8018158:	d810      	bhi.n	801817c <__ssvfiscanf_r+0x104>
 801815a:	2b25      	cmp	r3, #37	; 0x25
 801815c:	d0c7      	beq.n	80180ee <__ssvfiscanf_r+0x76>
 801815e:	d857      	bhi.n	8018210 <__ssvfiscanf_r+0x198>
 8018160:	2b00      	cmp	r3, #0
 8018162:	d065      	beq.n	8018230 <__ssvfiscanf_r+0x1b8>
 8018164:	2303      	movs	r3, #3
 8018166:	9347      	str	r3, [sp, #284]	; 0x11c
 8018168:	230a      	movs	r3, #10
 801816a:	9342      	str	r3, [sp, #264]	; 0x108
 801816c:	e076      	b.n	801825c <__ssvfiscanf_r+0x1e4>
 801816e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018170:	fb02 1103 	mla	r1, r2, r3, r1
 8018174:	3930      	subs	r1, #48	; 0x30
 8018176:	9143      	str	r1, [sp, #268]	; 0x10c
 8018178:	4655      	mov	r5, sl
 801817a:	e7d4      	b.n	8018126 <__ssvfiscanf_r+0xae>
 801817c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8018180:	2a20      	cmp	r2, #32
 8018182:	d8ef      	bhi.n	8018164 <__ssvfiscanf_r+0xec>
 8018184:	a101      	add	r1, pc, #4	; (adr r1, 801818c <__ssvfiscanf_r+0x114>)
 8018186:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801818a:	bf00      	nop
 801818c:	0801823f 	.word	0x0801823f
 8018190:	08018165 	.word	0x08018165
 8018194:	08018165 	.word	0x08018165
 8018198:	0801829d 	.word	0x0801829d
 801819c:	08018165 	.word	0x08018165
 80181a0:	08018165 	.word	0x08018165
 80181a4:	08018165 	.word	0x08018165
 80181a8:	08018165 	.word	0x08018165
 80181ac:	08018165 	.word	0x08018165
 80181b0:	08018165 	.word	0x08018165
 80181b4:	08018165 	.word	0x08018165
 80181b8:	080182b3 	.word	0x080182b3
 80181bc:	08018299 	.word	0x08018299
 80181c0:	08018217 	.word	0x08018217
 80181c4:	08018217 	.word	0x08018217
 80181c8:	08018217 	.word	0x08018217
 80181cc:	08018165 	.word	0x08018165
 80181d0:	08018255 	.word	0x08018255
 80181d4:	08018165 	.word	0x08018165
 80181d8:	08018165 	.word	0x08018165
 80181dc:	08018165 	.word	0x08018165
 80181e0:	08018165 	.word	0x08018165
 80181e4:	080182c3 	.word	0x080182c3
 80181e8:	08018291 	.word	0x08018291
 80181ec:	08018237 	.word	0x08018237
 80181f0:	08018165 	.word	0x08018165
 80181f4:	08018165 	.word	0x08018165
 80181f8:	080182bf 	.word	0x080182bf
 80181fc:	08018165 	.word	0x08018165
 8018200:	08018299 	.word	0x08018299
 8018204:	08018165 	.word	0x08018165
 8018208:	08018165 	.word	0x08018165
 801820c:	0801823f 	.word	0x0801823f
 8018210:	3b45      	subs	r3, #69	; 0x45
 8018212:	2b02      	cmp	r3, #2
 8018214:	d8a6      	bhi.n	8018164 <__ssvfiscanf_r+0xec>
 8018216:	2305      	movs	r3, #5
 8018218:	e01f      	b.n	801825a <__ssvfiscanf_r+0x1e2>
 801821a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801821c:	4621      	mov	r1, r4
 801821e:	4630      	mov	r0, r6
 8018220:	4798      	blx	r3
 8018222:	2800      	cmp	r0, #0
 8018224:	f43f af68 	beq.w	80180f8 <__ssvfiscanf_r+0x80>
 8018228:	9844      	ldr	r0, [sp, #272]	; 0x110
 801822a:	2800      	cmp	r0, #0
 801822c:	f040 808d 	bne.w	801834a <__ssvfiscanf_r+0x2d2>
 8018230:	f04f 30ff 	mov.w	r0, #4294967295
 8018234:	e08f      	b.n	8018356 <__ssvfiscanf_r+0x2de>
 8018236:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018238:	f042 0220 	orr.w	r2, r2, #32
 801823c:	9241      	str	r2, [sp, #260]	; 0x104
 801823e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018244:	9241      	str	r2, [sp, #260]	; 0x104
 8018246:	2210      	movs	r2, #16
 8018248:	2b6f      	cmp	r3, #111	; 0x6f
 801824a:	9242      	str	r2, [sp, #264]	; 0x108
 801824c:	bf34      	ite	cc
 801824e:	2303      	movcc	r3, #3
 8018250:	2304      	movcs	r3, #4
 8018252:	e002      	b.n	801825a <__ssvfiscanf_r+0x1e2>
 8018254:	2300      	movs	r3, #0
 8018256:	9342      	str	r3, [sp, #264]	; 0x108
 8018258:	2303      	movs	r3, #3
 801825a:	9347      	str	r3, [sp, #284]	; 0x11c
 801825c:	6863      	ldr	r3, [r4, #4]
 801825e:	2b00      	cmp	r3, #0
 8018260:	dd3d      	ble.n	80182de <__ssvfiscanf_r+0x266>
 8018262:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018264:	0659      	lsls	r1, r3, #25
 8018266:	d404      	bmi.n	8018272 <__ssvfiscanf_r+0x1fa>
 8018268:	6823      	ldr	r3, [r4, #0]
 801826a:	781a      	ldrb	r2, [r3, #0]
 801826c:	5cba      	ldrb	r2, [r7, r2]
 801826e:	0712      	lsls	r2, r2, #28
 8018270:	d43c      	bmi.n	80182ec <__ssvfiscanf_r+0x274>
 8018272:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018274:	2b02      	cmp	r3, #2
 8018276:	dc4b      	bgt.n	8018310 <__ssvfiscanf_r+0x298>
 8018278:	466b      	mov	r3, sp
 801827a:	4622      	mov	r2, r4
 801827c:	a941      	add	r1, sp, #260	; 0x104
 801827e:	4630      	mov	r0, r6
 8018280:	f000 f872 	bl	8018368 <_scanf_chars>
 8018284:	2801      	cmp	r0, #1
 8018286:	d06a      	beq.n	801835e <__ssvfiscanf_r+0x2e6>
 8018288:	2802      	cmp	r0, #2
 801828a:	f47f af1c 	bne.w	80180c6 <__ssvfiscanf_r+0x4e>
 801828e:	e7cb      	b.n	8018228 <__ssvfiscanf_r+0x1b0>
 8018290:	2308      	movs	r3, #8
 8018292:	9342      	str	r3, [sp, #264]	; 0x108
 8018294:	2304      	movs	r3, #4
 8018296:	e7e0      	b.n	801825a <__ssvfiscanf_r+0x1e2>
 8018298:	220a      	movs	r2, #10
 801829a:	e7d5      	b.n	8018248 <__ssvfiscanf_r+0x1d0>
 801829c:	4629      	mov	r1, r5
 801829e:	4640      	mov	r0, r8
 80182a0:	f000 fa5e 	bl	8018760 <__sccl>
 80182a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80182a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182aa:	9341      	str	r3, [sp, #260]	; 0x104
 80182ac:	4605      	mov	r5, r0
 80182ae:	2301      	movs	r3, #1
 80182b0:	e7d3      	b.n	801825a <__ssvfiscanf_r+0x1e2>
 80182b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80182b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182b8:	9341      	str	r3, [sp, #260]	; 0x104
 80182ba:	2300      	movs	r3, #0
 80182bc:	e7cd      	b.n	801825a <__ssvfiscanf_r+0x1e2>
 80182be:	2302      	movs	r3, #2
 80182c0:	e7cb      	b.n	801825a <__ssvfiscanf_r+0x1e2>
 80182c2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80182c4:	06c3      	lsls	r3, r0, #27
 80182c6:	f53f aefe 	bmi.w	80180c6 <__ssvfiscanf_r+0x4e>
 80182ca:	9b00      	ldr	r3, [sp, #0]
 80182cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80182ce:	1d19      	adds	r1, r3, #4
 80182d0:	9100      	str	r1, [sp, #0]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	07c0      	lsls	r0, r0, #31
 80182d6:	bf4c      	ite	mi
 80182d8:	801a      	strhmi	r2, [r3, #0]
 80182da:	601a      	strpl	r2, [r3, #0]
 80182dc:	e6f3      	b.n	80180c6 <__ssvfiscanf_r+0x4e>
 80182de:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80182e0:	4621      	mov	r1, r4
 80182e2:	4630      	mov	r0, r6
 80182e4:	4798      	blx	r3
 80182e6:	2800      	cmp	r0, #0
 80182e8:	d0bb      	beq.n	8018262 <__ssvfiscanf_r+0x1ea>
 80182ea:	e79d      	b.n	8018228 <__ssvfiscanf_r+0x1b0>
 80182ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80182ee:	3201      	adds	r2, #1
 80182f0:	9245      	str	r2, [sp, #276]	; 0x114
 80182f2:	6862      	ldr	r2, [r4, #4]
 80182f4:	3a01      	subs	r2, #1
 80182f6:	2a00      	cmp	r2, #0
 80182f8:	6062      	str	r2, [r4, #4]
 80182fa:	dd02      	ble.n	8018302 <__ssvfiscanf_r+0x28a>
 80182fc:	3301      	adds	r3, #1
 80182fe:	6023      	str	r3, [r4, #0]
 8018300:	e7b2      	b.n	8018268 <__ssvfiscanf_r+0x1f0>
 8018302:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018304:	4621      	mov	r1, r4
 8018306:	4630      	mov	r0, r6
 8018308:	4798      	blx	r3
 801830a:	2800      	cmp	r0, #0
 801830c:	d0ac      	beq.n	8018268 <__ssvfiscanf_r+0x1f0>
 801830e:	e78b      	b.n	8018228 <__ssvfiscanf_r+0x1b0>
 8018310:	2b04      	cmp	r3, #4
 8018312:	dc0f      	bgt.n	8018334 <__ssvfiscanf_r+0x2bc>
 8018314:	466b      	mov	r3, sp
 8018316:	4622      	mov	r2, r4
 8018318:	a941      	add	r1, sp, #260	; 0x104
 801831a:	4630      	mov	r0, r6
 801831c:	f000 f87e 	bl	801841c <_scanf_i>
 8018320:	e7b0      	b.n	8018284 <__ssvfiscanf_r+0x20c>
 8018322:	bf00      	nop
 8018324:	08017fc5 	.word	0x08017fc5
 8018328:	0801803f 	.word	0x0801803f
 801832c:	0801c2d9 	.word	0x0801c2d9
 8018330:	0801c3df 	.word	0x0801c3df
 8018334:	4b0b      	ldr	r3, [pc, #44]	; (8018364 <__ssvfiscanf_r+0x2ec>)
 8018336:	2b00      	cmp	r3, #0
 8018338:	f43f aec5 	beq.w	80180c6 <__ssvfiscanf_r+0x4e>
 801833c:	466b      	mov	r3, sp
 801833e:	4622      	mov	r2, r4
 8018340:	a941      	add	r1, sp, #260	; 0x104
 8018342:	4630      	mov	r0, r6
 8018344:	f7fc fdc8 	bl	8014ed8 <_scanf_float>
 8018348:	e79c      	b.n	8018284 <__ssvfiscanf_r+0x20c>
 801834a:	89a3      	ldrh	r3, [r4, #12]
 801834c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018350:	bf18      	it	ne
 8018352:	f04f 30ff 	movne.w	r0, #4294967295
 8018356:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801835a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801835e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018360:	e7f9      	b.n	8018356 <__ssvfiscanf_r+0x2de>
 8018362:	bf00      	nop
 8018364:	08014ed9 	.word	0x08014ed9

08018368 <_scanf_chars>:
 8018368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801836c:	4615      	mov	r5, r2
 801836e:	688a      	ldr	r2, [r1, #8]
 8018370:	4680      	mov	r8, r0
 8018372:	460c      	mov	r4, r1
 8018374:	b932      	cbnz	r2, 8018384 <_scanf_chars+0x1c>
 8018376:	698a      	ldr	r2, [r1, #24]
 8018378:	2a00      	cmp	r2, #0
 801837a:	bf0c      	ite	eq
 801837c:	2201      	moveq	r2, #1
 801837e:	f04f 32ff 	movne.w	r2, #4294967295
 8018382:	608a      	str	r2, [r1, #8]
 8018384:	6822      	ldr	r2, [r4, #0]
 8018386:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8018418 <_scanf_chars+0xb0>
 801838a:	06d1      	lsls	r1, r2, #27
 801838c:	bf5f      	itttt	pl
 801838e:	681a      	ldrpl	r2, [r3, #0]
 8018390:	1d11      	addpl	r1, r2, #4
 8018392:	6019      	strpl	r1, [r3, #0]
 8018394:	6816      	ldrpl	r6, [r2, #0]
 8018396:	2700      	movs	r7, #0
 8018398:	69a0      	ldr	r0, [r4, #24]
 801839a:	b188      	cbz	r0, 80183c0 <_scanf_chars+0x58>
 801839c:	2801      	cmp	r0, #1
 801839e:	d107      	bne.n	80183b0 <_scanf_chars+0x48>
 80183a0:	682a      	ldr	r2, [r5, #0]
 80183a2:	7811      	ldrb	r1, [r2, #0]
 80183a4:	6962      	ldr	r2, [r4, #20]
 80183a6:	5c52      	ldrb	r2, [r2, r1]
 80183a8:	b952      	cbnz	r2, 80183c0 <_scanf_chars+0x58>
 80183aa:	2f00      	cmp	r7, #0
 80183ac:	d031      	beq.n	8018412 <_scanf_chars+0xaa>
 80183ae:	e022      	b.n	80183f6 <_scanf_chars+0x8e>
 80183b0:	2802      	cmp	r0, #2
 80183b2:	d120      	bne.n	80183f6 <_scanf_chars+0x8e>
 80183b4:	682b      	ldr	r3, [r5, #0]
 80183b6:	781b      	ldrb	r3, [r3, #0]
 80183b8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80183bc:	071b      	lsls	r3, r3, #28
 80183be:	d41a      	bmi.n	80183f6 <_scanf_chars+0x8e>
 80183c0:	6823      	ldr	r3, [r4, #0]
 80183c2:	06da      	lsls	r2, r3, #27
 80183c4:	bf5e      	ittt	pl
 80183c6:	682b      	ldrpl	r3, [r5, #0]
 80183c8:	781b      	ldrbpl	r3, [r3, #0]
 80183ca:	f806 3b01 	strbpl.w	r3, [r6], #1
 80183ce:	682a      	ldr	r2, [r5, #0]
 80183d0:	686b      	ldr	r3, [r5, #4]
 80183d2:	3201      	adds	r2, #1
 80183d4:	602a      	str	r2, [r5, #0]
 80183d6:	68a2      	ldr	r2, [r4, #8]
 80183d8:	3b01      	subs	r3, #1
 80183da:	3a01      	subs	r2, #1
 80183dc:	606b      	str	r3, [r5, #4]
 80183de:	3701      	adds	r7, #1
 80183e0:	60a2      	str	r2, [r4, #8]
 80183e2:	b142      	cbz	r2, 80183f6 <_scanf_chars+0x8e>
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	dcd7      	bgt.n	8018398 <_scanf_chars+0x30>
 80183e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80183ec:	4629      	mov	r1, r5
 80183ee:	4640      	mov	r0, r8
 80183f0:	4798      	blx	r3
 80183f2:	2800      	cmp	r0, #0
 80183f4:	d0d0      	beq.n	8018398 <_scanf_chars+0x30>
 80183f6:	6823      	ldr	r3, [r4, #0]
 80183f8:	f013 0310 	ands.w	r3, r3, #16
 80183fc:	d105      	bne.n	801840a <_scanf_chars+0xa2>
 80183fe:	68e2      	ldr	r2, [r4, #12]
 8018400:	3201      	adds	r2, #1
 8018402:	60e2      	str	r2, [r4, #12]
 8018404:	69a2      	ldr	r2, [r4, #24]
 8018406:	b102      	cbz	r2, 801840a <_scanf_chars+0xa2>
 8018408:	7033      	strb	r3, [r6, #0]
 801840a:	6923      	ldr	r3, [r4, #16]
 801840c:	443b      	add	r3, r7
 801840e:	6123      	str	r3, [r4, #16]
 8018410:	2000      	movs	r0, #0
 8018412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018416:	bf00      	nop
 8018418:	0801c2d9 	.word	0x0801c2d9

0801841c <_scanf_i>:
 801841c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018420:	4698      	mov	r8, r3
 8018422:	4b74      	ldr	r3, [pc, #464]	; (80185f4 <_scanf_i+0x1d8>)
 8018424:	460c      	mov	r4, r1
 8018426:	4682      	mov	sl, r0
 8018428:	4616      	mov	r6, r2
 801842a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801842e:	b087      	sub	sp, #28
 8018430:	ab03      	add	r3, sp, #12
 8018432:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018436:	4b70      	ldr	r3, [pc, #448]	; (80185f8 <_scanf_i+0x1dc>)
 8018438:	69a1      	ldr	r1, [r4, #24]
 801843a:	4a70      	ldr	r2, [pc, #448]	; (80185fc <_scanf_i+0x1e0>)
 801843c:	2903      	cmp	r1, #3
 801843e:	bf18      	it	ne
 8018440:	461a      	movne	r2, r3
 8018442:	68a3      	ldr	r3, [r4, #8]
 8018444:	9201      	str	r2, [sp, #4]
 8018446:	1e5a      	subs	r2, r3, #1
 8018448:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801844c:	bf88      	it	hi
 801844e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018452:	4627      	mov	r7, r4
 8018454:	bf82      	ittt	hi
 8018456:	eb03 0905 	addhi.w	r9, r3, r5
 801845a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801845e:	60a3      	strhi	r3, [r4, #8]
 8018460:	f857 3b1c 	ldr.w	r3, [r7], #28
 8018464:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018468:	bf98      	it	ls
 801846a:	f04f 0900 	movls.w	r9, #0
 801846e:	6023      	str	r3, [r4, #0]
 8018470:	463d      	mov	r5, r7
 8018472:	f04f 0b00 	mov.w	fp, #0
 8018476:	6831      	ldr	r1, [r6, #0]
 8018478:	ab03      	add	r3, sp, #12
 801847a:	7809      	ldrb	r1, [r1, #0]
 801847c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8018480:	2202      	movs	r2, #2
 8018482:	f7e7 fecd 	bl	8000220 <memchr>
 8018486:	b328      	cbz	r0, 80184d4 <_scanf_i+0xb8>
 8018488:	f1bb 0f01 	cmp.w	fp, #1
 801848c:	d159      	bne.n	8018542 <_scanf_i+0x126>
 801848e:	6862      	ldr	r2, [r4, #4]
 8018490:	b92a      	cbnz	r2, 801849e <_scanf_i+0x82>
 8018492:	6822      	ldr	r2, [r4, #0]
 8018494:	2308      	movs	r3, #8
 8018496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801849a:	6063      	str	r3, [r4, #4]
 801849c:	6022      	str	r2, [r4, #0]
 801849e:	6822      	ldr	r2, [r4, #0]
 80184a0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80184a4:	6022      	str	r2, [r4, #0]
 80184a6:	68a2      	ldr	r2, [r4, #8]
 80184a8:	1e51      	subs	r1, r2, #1
 80184aa:	60a1      	str	r1, [r4, #8]
 80184ac:	b192      	cbz	r2, 80184d4 <_scanf_i+0xb8>
 80184ae:	6832      	ldr	r2, [r6, #0]
 80184b0:	1c51      	adds	r1, r2, #1
 80184b2:	6031      	str	r1, [r6, #0]
 80184b4:	7812      	ldrb	r2, [r2, #0]
 80184b6:	f805 2b01 	strb.w	r2, [r5], #1
 80184ba:	6872      	ldr	r2, [r6, #4]
 80184bc:	3a01      	subs	r2, #1
 80184be:	2a00      	cmp	r2, #0
 80184c0:	6072      	str	r2, [r6, #4]
 80184c2:	dc07      	bgt.n	80184d4 <_scanf_i+0xb8>
 80184c4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80184c8:	4631      	mov	r1, r6
 80184ca:	4650      	mov	r0, sl
 80184cc:	4790      	blx	r2
 80184ce:	2800      	cmp	r0, #0
 80184d0:	f040 8085 	bne.w	80185de <_scanf_i+0x1c2>
 80184d4:	f10b 0b01 	add.w	fp, fp, #1
 80184d8:	f1bb 0f03 	cmp.w	fp, #3
 80184dc:	d1cb      	bne.n	8018476 <_scanf_i+0x5a>
 80184de:	6863      	ldr	r3, [r4, #4]
 80184e0:	b90b      	cbnz	r3, 80184e6 <_scanf_i+0xca>
 80184e2:	230a      	movs	r3, #10
 80184e4:	6063      	str	r3, [r4, #4]
 80184e6:	6863      	ldr	r3, [r4, #4]
 80184e8:	4945      	ldr	r1, [pc, #276]	; (8018600 <_scanf_i+0x1e4>)
 80184ea:	6960      	ldr	r0, [r4, #20]
 80184ec:	1ac9      	subs	r1, r1, r3
 80184ee:	f000 f937 	bl	8018760 <__sccl>
 80184f2:	f04f 0b00 	mov.w	fp, #0
 80184f6:	68a3      	ldr	r3, [r4, #8]
 80184f8:	6822      	ldr	r2, [r4, #0]
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	d03d      	beq.n	801857a <_scanf_i+0x15e>
 80184fe:	6831      	ldr	r1, [r6, #0]
 8018500:	6960      	ldr	r0, [r4, #20]
 8018502:	f891 c000 	ldrb.w	ip, [r1]
 8018506:	f810 000c 	ldrb.w	r0, [r0, ip]
 801850a:	2800      	cmp	r0, #0
 801850c:	d035      	beq.n	801857a <_scanf_i+0x15e>
 801850e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8018512:	d124      	bne.n	801855e <_scanf_i+0x142>
 8018514:	0510      	lsls	r0, r2, #20
 8018516:	d522      	bpl.n	801855e <_scanf_i+0x142>
 8018518:	f10b 0b01 	add.w	fp, fp, #1
 801851c:	f1b9 0f00 	cmp.w	r9, #0
 8018520:	d003      	beq.n	801852a <_scanf_i+0x10e>
 8018522:	3301      	adds	r3, #1
 8018524:	f109 39ff 	add.w	r9, r9, #4294967295
 8018528:	60a3      	str	r3, [r4, #8]
 801852a:	6873      	ldr	r3, [r6, #4]
 801852c:	3b01      	subs	r3, #1
 801852e:	2b00      	cmp	r3, #0
 8018530:	6073      	str	r3, [r6, #4]
 8018532:	dd1b      	ble.n	801856c <_scanf_i+0x150>
 8018534:	6833      	ldr	r3, [r6, #0]
 8018536:	3301      	adds	r3, #1
 8018538:	6033      	str	r3, [r6, #0]
 801853a:	68a3      	ldr	r3, [r4, #8]
 801853c:	3b01      	subs	r3, #1
 801853e:	60a3      	str	r3, [r4, #8]
 8018540:	e7d9      	b.n	80184f6 <_scanf_i+0xda>
 8018542:	f1bb 0f02 	cmp.w	fp, #2
 8018546:	d1ae      	bne.n	80184a6 <_scanf_i+0x8a>
 8018548:	6822      	ldr	r2, [r4, #0]
 801854a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801854e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8018552:	d1bf      	bne.n	80184d4 <_scanf_i+0xb8>
 8018554:	2310      	movs	r3, #16
 8018556:	6063      	str	r3, [r4, #4]
 8018558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801855c:	e7a2      	b.n	80184a4 <_scanf_i+0x88>
 801855e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018562:	6022      	str	r2, [r4, #0]
 8018564:	780b      	ldrb	r3, [r1, #0]
 8018566:	f805 3b01 	strb.w	r3, [r5], #1
 801856a:	e7de      	b.n	801852a <_scanf_i+0x10e>
 801856c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018570:	4631      	mov	r1, r6
 8018572:	4650      	mov	r0, sl
 8018574:	4798      	blx	r3
 8018576:	2800      	cmp	r0, #0
 8018578:	d0df      	beq.n	801853a <_scanf_i+0x11e>
 801857a:	6823      	ldr	r3, [r4, #0]
 801857c:	05d9      	lsls	r1, r3, #23
 801857e:	d50d      	bpl.n	801859c <_scanf_i+0x180>
 8018580:	42bd      	cmp	r5, r7
 8018582:	d909      	bls.n	8018598 <_scanf_i+0x17c>
 8018584:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018588:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801858c:	4632      	mov	r2, r6
 801858e:	4650      	mov	r0, sl
 8018590:	4798      	blx	r3
 8018592:	f105 39ff 	add.w	r9, r5, #4294967295
 8018596:	464d      	mov	r5, r9
 8018598:	42bd      	cmp	r5, r7
 801859a:	d028      	beq.n	80185ee <_scanf_i+0x1d2>
 801859c:	6822      	ldr	r2, [r4, #0]
 801859e:	f012 0210 	ands.w	r2, r2, #16
 80185a2:	d113      	bne.n	80185cc <_scanf_i+0x1b0>
 80185a4:	702a      	strb	r2, [r5, #0]
 80185a6:	6863      	ldr	r3, [r4, #4]
 80185a8:	9e01      	ldr	r6, [sp, #4]
 80185aa:	4639      	mov	r1, r7
 80185ac:	4650      	mov	r0, sl
 80185ae:	47b0      	blx	r6
 80185b0:	f8d8 3000 	ldr.w	r3, [r8]
 80185b4:	6821      	ldr	r1, [r4, #0]
 80185b6:	1d1a      	adds	r2, r3, #4
 80185b8:	f8c8 2000 	str.w	r2, [r8]
 80185bc:	f011 0f20 	tst.w	r1, #32
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	d00f      	beq.n	80185e4 <_scanf_i+0x1c8>
 80185c4:	6018      	str	r0, [r3, #0]
 80185c6:	68e3      	ldr	r3, [r4, #12]
 80185c8:	3301      	adds	r3, #1
 80185ca:	60e3      	str	r3, [r4, #12]
 80185cc:	6923      	ldr	r3, [r4, #16]
 80185ce:	1bed      	subs	r5, r5, r7
 80185d0:	445d      	add	r5, fp
 80185d2:	442b      	add	r3, r5
 80185d4:	6123      	str	r3, [r4, #16]
 80185d6:	2000      	movs	r0, #0
 80185d8:	b007      	add	sp, #28
 80185da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185de:	f04f 0b00 	mov.w	fp, #0
 80185e2:	e7ca      	b.n	801857a <_scanf_i+0x15e>
 80185e4:	07ca      	lsls	r2, r1, #31
 80185e6:	bf4c      	ite	mi
 80185e8:	8018      	strhmi	r0, [r3, #0]
 80185ea:	6018      	strpl	r0, [r3, #0]
 80185ec:	e7eb      	b.n	80185c6 <_scanf_i+0x1aa>
 80185ee:	2001      	movs	r0, #1
 80185f0:	e7f2      	b.n	80185d8 <_scanf_i+0x1bc>
 80185f2:	bf00      	nop
 80185f4:	0801bfec 	.word	0x0801bfec
 80185f8:	0801912d 	.word	0x0801912d
 80185fc:	08017d11 	.word	0x08017d11
 8018600:	0801c3fa 	.word	0x0801c3fa

08018604 <__sflush_r>:
 8018604:	898a      	ldrh	r2, [r1, #12]
 8018606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801860a:	4605      	mov	r5, r0
 801860c:	0710      	lsls	r0, r2, #28
 801860e:	460c      	mov	r4, r1
 8018610:	d458      	bmi.n	80186c4 <__sflush_r+0xc0>
 8018612:	684b      	ldr	r3, [r1, #4]
 8018614:	2b00      	cmp	r3, #0
 8018616:	dc05      	bgt.n	8018624 <__sflush_r+0x20>
 8018618:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801861a:	2b00      	cmp	r3, #0
 801861c:	dc02      	bgt.n	8018624 <__sflush_r+0x20>
 801861e:	2000      	movs	r0, #0
 8018620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018626:	2e00      	cmp	r6, #0
 8018628:	d0f9      	beq.n	801861e <__sflush_r+0x1a>
 801862a:	2300      	movs	r3, #0
 801862c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018630:	682f      	ldr	r7, [r5, #0]
 8018632:	6a21      	ldr	r1, [r4, #32]
 8018634:	602b      	str	r3, [r5, #0]
 8018636:	d032      	beq.n	801869e <__sflush_r+0x9a>
 8018638:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801863a:	89a3      	ldrh	r3, [r4, #12]
 801863c:	075a      	lsls	r2, r3, #29
 801863e:	d505      	bpl.n	801864c <__sflush_r+0x48>
 8018640:	6863      	ldr	r3, [r4, #4]
 8018642:	1ac0      	subs	r0, r0, r3
 8018644:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018646:	b10b      	cbz	r3, 801864c <__sflush_r+0x48>
 8018648:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801864a:	1ac0      	subs	r0, r0, r3
 801864c:	2300      	movs	r3, #0
 801864e:	4602      	mov	r2, r0
 8018650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018652:	6a21      	ldr	r1, [r4, #32]
 8018654:	4628      	mov	r0, r5
 8018656:	47b0      	blx	r6
 8018658:	1c43      	adds	r3, r0, #1
 801865a:	89a3      	ldrh	r3, [r4, #12]
 801865c:	d106      	bne.n	801866c <__sflush_r+0x68>
 801865e:	6829      	ldr	r1, [r5, #0]
 8018660:	291d      	cmp	r1, #29
 8018662:	d82b      	bhi.n	80186bc <__sflush_r+0xb8>
 8018664:	4a29      	ldr	r2, [pc, #164]	; (801870c <__sflush_r+0x108>)
 8018666:	410a      	asrs	r2, r1
 8018668:	07d6      	lsls	r6, r2, #31
 801866a:	d427      	bmi.n	80186bc <__sflush_r+0xb8>
 801866c:	2200      	movs	r2, #0
 801866e:	6062      	str	r2, [r4, #4]
 8018670:	04d9      	lsls	r1, r3, #19
 8018672:	6922      	ldr	r2, [r4, #16]
 8018674:	6022      	str	r2, [r4, #0]
 8018676:	d504      	bpl.n	8018682 <__sflush_r+0x7e>
 8018678:	1c42      	adds	r2, r0, #1
 801867a:	d101      	bne.n	8018680 <__sflush_r+0x7c>
 801867c:	682b      	ldr	r3, [r5, #0]
 801867e:	b903      	cbnz	r3, 8018682 <__sflush_r+0x7e>
 8018680:	6560      	str	r0, [r4, #84]	; 0x54
 8018682:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018684:	602f      	str	r7, [r5, #0]
 8018686:	2900      	cmp	r1, #0
 8018688:	d0c9      	beq.n	801861e <__sflush_r+0x1a>
 801868a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801868e:	4299      	cmp	r1, r3
 8018690:	d002      	beq.n	8018698 <__sflush_r+0x94>
 8018692:	4628      	mov	r0, r5
 8018694:	f7fd fefa 	bl	801648c <_free_r>
 8018698:	2000      	movs	r0, #0
 801869a:	6360      	str	r0, [r4, #52]	; 0x34
 801869c:	e7c0      	b.n	8018620 <__sflush_r+0x1c>
 801869e:	2301      	movs	r3, #1
 80186a0:	4628      	mov	r0, r5
 80186a2:	47b0      	blx	r6
 80186a4:	1c41      	adds	r1, r0, #1
 80186a6:	d1c8      	bne.n	801863a <__sflush_r+0x36>
 80186a8:	682b      	ldr	r3, [r5, #0]
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d0c5      	beq.n	801863a <__sflush_r+0x36>
 80186ae:	2b1d      	cmp	r3, #29
 80186b0:	d001      	beq.n	80186b6 <__sflush_r+0xb2>
 80186b2:	2b16      	cmp	r3, #22
 80186b4:	d101      	bne.n	80186ba <__sflush_r+0xb6>
 80186b6:	602f      	str	r7, [r5, #0]
 80186b8:	e7b1      	b.n	801861e <__sflush_r+0x1a>
 80186ba:	89a3      	ldrh	r3, [r4, #12]
 80186bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80186c0:	81a3      	strh	r3, [r4, #12]
 80186c2:	e7ad      	b.n	8018620 <__sflush_r+0x1c>
 80186c4:	690f      	ldr	r7, [r1, #16]
 80186c6:	2f00      	cmp	r7, #0
 80186c8:	d0a9      	beq.n	801861e <__sflush_r+0x1a>
 80186ca:	0793      	lsls	r3, r2, #30
 80186cc:	680e      	ldr	r6, [r1, #0]
 80186ce:	bf08      	it	eq
 80186d0:	694b      	ldreq	r3, [r1, #20]
 80186d2:	600f      	str	r7, [r1, #0]
 80186d4:	bf18      	it	ne
 80186d6:	2300      	movne	r3, #0
 80186d8:	eba6 0807 	sub.w	r8, r6, r7
 80186dc:	608b      	str	r3, [r1, #8]
 80186de:	f1b8 0f00 	cmp.w	r8, #0
 80186e2:	dd9c      	ble.n	801861e <__sflush_r+0x1a>
 80186e4:	6a21      	ldr	r1, [r4, #32]
 80186e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80186e8:	4643      	mov	r3, r8
 80186ea:	463a      	mov	r2, r7
 80186ec:	4628      	mov	r0, r5
 80186ee:	47b0      	blx	r6
 80186f0:	2800      	cmp	r0, #0
 80186f2:	dc06      	bgt.n	8018702 <__sflush_r+0xfe>
 80186f4:	89a3      	ldrh	r3, [r4, #12]
 80186f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80186fa:	81a3      	strh	r3, [r4, #12]
 80186fc:	f04f 30ff 	mov.w	r0, #4294967295
 8018700:	e78e      	b.n	8018620 <__sflush_r+0x1c>
 8018702:	4407      	add	r7, r0
 8018704:	eba8 0800 	sub.w	r8, r8, r0
 8018708:	e7e9      	b.n	80186de <__sflush_r+0xda>
 801870a:	bf00      	nop
 801870c:	dfbffffe 	.word	0xdfbffffe

08018710 <_fflush_r>:
 8018710:	b538      	push	{r3, r4, r5, lr}
 8018712:	690b      	ldr	r3, [r1, #16]
 8018714:	4605      	mov	r5, r0
 8018716:	460c      	mov	r4, r1
 8018718:	b913      	cbnz	r3, 8018720 <_fflush_r+0x10>
 801871a:	2500      	movs	r5, #0
 801871c:	4628      	mov	r0, r5
 801871e:	bd38      	pop	{r3, r4, r5, pc}
 8018720:	b118      	cbz	r0, 801872a <_fflush_r+0x1a>
 8018722:	6a03      	ldr	r3, [r0, #32]
 8018724:	b90b      	cbnz	r3, 801872a <_fflush_r+0x1a>
 8018726:	f7fc fe73 	bl	8015410 <__sinit>
 801872a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801872e:	2b00      	cmp	r3, #0
 8018730:	d0f3      	beq.n	801871a <_fflush_r+0xa>
 8018732:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018734:	07d0      	lsls	r0, r2, #31
 8018736:	d404      	bmi.n	8018742 <_fflush_r+0x32>
 8018738:	0599      	lsls	r1, r3, #22
 801873a:	d402      	bmi.n	8018742 <_fflush_r+0x32>
 801873c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801873e:	f7fd f814 	bl	801576a <__retarget_lock_acquire_recursive>
 8018742:	4628      	mov	r0, r5
 8018744:	4621      	mov	r1, r4
 8018746:	f7ff ff5d 	bl	8018604 <__sflush_r>
 801874a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801874c:	07da      	lsls	r2, r3, #31
 801874e:	4605      	mov	r5, r0
 8018750:	d4e4      	bmi.n	801871c <_fflush_r+0xc>
 8018752:	89a3      	ldrh	r3, [r4, #12]
 8018754:	059b      	lsls	r3, r3, #22
 8018756:	d4e1      	bmi.n	801871c <_fflush_r+0xc>
 8018758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801875a:	f7fd f807 	bl	801576c <__retarget_lock_release_recursive>
 801875e:	e7dd      	b.n	801871c <_fflush_r+0xc>

08018760 <__sccl>:
 8018760:	b570      	push	{r4, r5, r6, lr}
 8018762:	780b      	ldrb	r3, [r1, #0]
 8018764:	4604      	mov	r4, r0
 8018766:	2b5e      	cmp	r3, #94	; 0x5e
 8018768:	bf0b      	itete	eq
 801876a:	784b      	ldrbeq	r3, [r1, #1]
 801876c:	1c4a      	addne	r2, r1, #1
 801876e:	1c8a      	addeq	r2, r1, #2
 8018770:	2100      	movne	r1, #0
 8018772:	bf08      	it	eq
 8018774:	2101      	moveq	r1, #1
 8018776:	3801      	subs	r0, #1
 8018778:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801877c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8018780:	42a8      	cmp	r0, r5
 8018782:	d1fb      	bne.n	801877c <__sccl+0x1c>
 8018784:	b90b      	cbnz	r3, 801878a <__sccl+0x2a>
 8018786:	1e50      	subs	r0, r2, #1
 8018788:	bd70      	pop	{r4, r5, r6, pc}
 801878a:	f081 0101 	eor.w	r1, r1, #1
 801878e:	54e1      	strb	r1, [r4, r3]
 8018790:	4610      	mov	r0, r2
 8018792:	4602      	mov	r2, r0
 8018794:	f812 5b01 	ldrb.w	r5, [r2], #1
 8018798:	2d2d      	cmp	r5, #45	; 0x2d
 801879a:	d005      	beq.n	80187a8 <__sccl+0x48>
 801879c:	2d5d      	cmp	r5, #93	; 0x5d
 801879e:	d016      	beq.n	80187ce <__sccl+0x6e>
 80187a0:	2d00      	cmp	r5, #0
 80187a2:	d0f1      	beq.n	8018788 <__sccl+0x28>
 80187a4:	462b      	mov	r3, r5
 80187a6:	e7f2      	b.n	801878e <__sccl+0x2e>
 80187a8:	7846      	ldrb	r6, [r0, #1]
 80187aa:	2e5d      	cmp	r6, #93	; 0x5d
 80187ac:	d0fa      	beq.n	80187a4 <__sccl+0x44>
 80187ae:	42b3      	cmp	r3, r6
 80187b0:	dcf8      	bgt.n	80187a4 <__sccl+0x44>
 80187b2:	3002      	adds	r0, #2
 80187b4:	461a      	mov	r2, r3
 80187b6:	3201      	adds	r2, #1
 80187b8:	4296      	cmp	r6, r2
 80187ba:	54a1      	strb	r1, [r4, r2]
 80187bc:	dcfb      	bgt.n	80187b6 <__sccl+0x56>
 80187be:	1af2      	subs	r2, r6, r3
 80187c0:	3a01      	subs	r2, #1
 80187c2:	1c5d      	adds	r5, r3, #1
 80187c4:	42b3      	cmp	r3, r6
 80187c6:	bfa8      	it	ge
 80187c8:	2200      	movge	r2, #0
 80187ca:	18ab      	adds	r3, r5, r2
 80187cc:	e7e1      	b.n	8018792 <__sccl+0x32>
 80187ce:	4610      	mov	r0, r2
 80187d0:	e7da      	b.n	8018788 <__sccl+0x28>

080187d2 <__submore>:
 80187d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187d6:	460c      	mov	r4, r1
 80187d8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80187da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80187de:	4299      	cmp	r1, r3
 80187e0:	d11d      	bne.n	801881e <__submore+0x4c>
 80187e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80187e6:	f7fd fec5 	bl	8016574 <_malloc_r>
 80187ea:	b918      	cbnz	r0, 80187f4 <__submore+0x22>
 80187ec:	f04f 30ff 	mov.w	r0, #4294967295
 80187f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80187f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80187fa:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80187fe:	6360      	str	r0, [r4, #52]	; 0x34
 8018800:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018804:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018808:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801880c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018810:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018814:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018818:	6020      	str	r0, [r4, #0]
 801881a:	2000      	movs	r0, #0
 801881c:	e7e8      	b.n	80187f0 <__submore+0x1e>
 801881e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018820:	0077      	lsls	r7, r6, #1
 8018822:	463a      	mov	r2, r7
 8018824:	f000 fbe1 	bl	8018fea <_realloc_r>
 8018828:	4605      	mov	r5, r0
 801882a:	2800      	cmp	r0, #0
 801882c:	d0de      	beq.n	80187ec <__submore+0x1a>
 801882e:	eb00 0806 	add.w	r8, r0, r6
 8018832:	4601      	mov	r1, r0
 8018834:	4632      	mov	r2, r6
 8018836:	4640      	mov	r0, r8
 8018838:	f7fc ff99 	bl	801576e <memcpy>
 801883c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8018840:	f8c4 8000 	str.w	r8, [r4]
 8018844:	e7e9      	b.n	801881a <__submore+0x48>

08018846 <memmove>:
 8018846:	4288      	cmp	r0, r1
 8018848:	b510      	push	{r4, lr}
 801884a:	eb01 0402 	add.w	r4, r1, r2
 801884e:	d902      	bls.n	8018856 <memmove+0x10>
 8018850:	4284      	cmp	r4, r0
 8018852:	4623      	mov	r3, r4
 8018854:	d807      	bhi.n	8018866 <memmove+0x20>
 8018856:	1e43      	subs	r3, r0, #1
 8018858:	42a1      	cmp	r1, r4
 801885a:	d008      	beq.n	801886e <memmove+0x28>
 801885c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018860:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018864:	e7f8      	b.n	8018858 <memmove+0x12>
 8018866:	4402      	add	r2, r0
 8018868:	4601      	mov	r1, r0
 801886a:	428a      	cmp	r2, r1
 801886c:	d100      	bne.n	8018870 <memmove+0x2a>
 801886e:	bd10      	pop	{r4, pc}
 8018870:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018874:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018878:	e7f7      	b.n	801886a <memmove+0x24>
	...

0801887c <_sbrk_r>:
 801887c:	b538      	push	{r3, r4, r5, lr}
 801887e:	4d06      	ldr	r5, [pc, #24]	; (8018898 <_sbrk_r+0x1c>)
 8018880:	2300      	movs	r3, #0
 8018882:	4604      	mov	r4, r0
 8018884:	4608      	mov	r0, r1
 8018886:	602b      	str	r3, [r5, #0]
 8018888:	f7ee fa8e 	bl	8006da8 <_sbrk>
 801888c:	1c43      	adds	r3, r0, #1
 801888e:	d102      	bne.n	8018896 <_sbrk_r+0x1a>
 8018890:	682b      	ldr	r3, [r5, #0]
 8018892:	b103      	cbz	r3, 8018896 <_sbrk_r+0x1a>
 8018894:	6023      	str	r3, [r4, #0]
 8018896:	bd38      	pop	{r3, r4, r5, pc}
 8018898:	200090d4 	.word	0x200090d4
 801889c:	00000000 	.word	0x00000000

080188a0 <nan>:
 80188a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80188a8 <nan+0x8>
 80188a4:	4770      	bx	lr
 80188a6:	bf00      	nop
 80188a8:	00000000 	.word	0x00000000
 80188ac:	7ff80000 	.word	0x7ff80000

080188b0 <__assert_func>:
 80188b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80188b2:	4614      	mov	r4, r2
 80188b4:	461a      	mov	r2, r3
 80188b6:	4b09      	ldr	r3, [pc, #36]	; (80188dc <__assert_func+0x2c>)
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	4605      	mov	r5, r0
 80188bc:	68d8      	ldr	r0, [r3, #12]
 80188be:	b14c      	cbz	r4, 80188d4 <__assert_func+0x24>
 80188c0:	4b07      	ldr	r3, [pc, #28]	; (80188e0 <__assert_func+0x30>)
 80188c2:	9100      	str	r1, [sp, #0]
 80188c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80188c8:	4906      	ldr	r1, [pc, #24]	; (80188e4 <__assert_func+0x34>)
 80188ca:	462b      	mov	r3, r5
 80188cc:	f000 fc3e 	bl	801914c <fiprintf>
 80188d0:	f000 fc4e 	bl	8019170 <abort>
 80188d4:	4b04      	ldr	r3, [pc, #16]	; (80188e8 <__assert_func+0x38>)
 80188d6:	461c      	mov	r4, r3
 80188d8:	e7f3      	b.n	80188c2 <__assert_func+0x12>
 80188da:	bf00      	nop
 80188dc:	20000070 	.word	0x20000070
 80188e0:	0801c40d 	.word	0x0801c40d
 80188e4:	0801c41a 	.word	0x0801c41a
 80188e8:	0801c448 	.word	0x0801c448

080188ec <_calloc_r>:
 80188ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80188ee:	fba1 2402 	umull	r2, r4, r1, r2
 80188f2:	b94c      	cbnz	r4, 8018908 <_calloc_r+0x1c>
 80188f4:	4611      	mov	r1, r2
 80188f6:	9201      	str	r2, [sp, #4]
 80188f8:	f7fd fe3c 	bl	8016574 <_malloc_r>
 80188fc:	9a01      	ldr	r2, [sp, #4]
 80188fe:	4605      	mov	r5, r0
 8018900:	b930      	cbnz	r0, 8018910 <_calloc_r+0x24>
 8018902:	4628      	mov	r0, r5
 8018904:	b003      	add	sp, #12
 8018906:	bd30      	pop	{r4, r5, pc}
 8018908:	220c      	movs	r2, #12
 801890a:	6002      	str	r2, [r0, #0]
 801890c:	2500      	movs	r5, #0
 801890e:	e7f8      	b.n	8018902 <_calloc_r+0x16>
 8018910:	4621      	mov	r1, r4
 8018912:	f7fc fe44 	bl	801559e <memset>
 8018916:	e7f4      	b.n	8018902 <_calloc_r+0x16>

08018918 <rshift>:
 8018918:	6903      	ldr	r3, [r0, #16]
 801891a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801891e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018922:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018926:	f100 0414 	add.w	r4, r0, #20
 801892a:	dd45      	ble.n	80189b8 <rshift+0xa0>
 801892c:	f011 011f 	ands.w	r1, r1, #31
 8018930:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018934:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018938:	d10c      	bne.n	8018954 <rshift+0x3c>
 801893a:	f100 0710 	add.w	r7, r0, #16
 801893e:	4629      	mov	r1, r5
 8018940:	42b1      	cmp	r1, r6
 8018942:	d334      	bcc.n	80189ae <rshift+0x96>
 8018944:	1a9b      	subs	r3, r3, r2
 8018946:	009b      	lsls	r3, r3, #2
 8018948:	1eea      	subs	r2, r5, #3
 801894a:	4296      	cmp	r6, r2
 801894c:	bf38      	it	cc
 801894e:	2300      	movcc	r3, #0
 8018950:	4423      	add	r3, r4
 8018952:	e015      	b.n	8018980 <rshift+0x68>
 8018954:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018958:	f1c1 0820 	rsb	r8, r1, #32
 801895c:	40cf      	lsrs	r7, r1
 801895e:	f105 0e04 	add.w	lr, r5, #4
 8018962:	46a1      	mov	r9, r4
 8018964:	4576      	cmp	r6, lr
 8018966:	46f4      	mov	ip, lr
 8018968:	d815      	bhi.n	8018996 <rshift+0x7e>
 801896a:	1a9a      	subs	r2, r3, r2
 801896c:	0092      	lsls	r2, r2, #2
 801896e:	3a04      	subs	r2, #4
 8018970:	3501      	adds	r5, #1
 8018972:	42ae      	cmp	r6, r5
 8018974:	bf38      	it	cc
 8018976:	2200      	movcc	r2, #0
 8018978:	18a3      	adds	r3, r4, r2
 801897a:	50a7      	str	r7, [r4, r2]
 801897c:	b107      	cbz	r7, 8018980 <rshift+0x68>
 801897e:	3304      	adds	r3, #4
 8018980:	1b1a      	subs	r2, r3, r4
 8018982:	42a3      	cmp	r3, r4
 8018984:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018988:	bf08      	it	eq
 801898a:	2300      	moveq	r3, #0
 801898c:	6102      	str	r2, [r0, #16]
 801898e:	bf08      	it	eq
 8018990:	6143      	streq	r3, [r0, #20]
 8018992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018996:	f8dc c000 	ldr.w	ip, [ip]
 801899a:	fa0c fc08 	lsl.w	ip, ip, r8
 801899e:	ea4c 0707 	orr.w	r7, ip, r7
 80189a2:	f849 7b04 	str.w	r7, [r9], #4
 80189a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80189aa:	40cf      	lsrs	r7, r1
 80189ac:	e7da      	b.n	8018964 <rshift+0x4c>
 80189ae:	f851 cb04 	ldr.w	ip, [r1], #4
 80189b2:	f847 cf04 	str.w	ip, [r7, #4]!
 80189b6:	e7c3      	b.n	8018940 <rshift+0x28>
 80189b8:	4623      	mov	r3, r4
 80189ba:	e7e1      	b.n	8018980 <rshift+0x68>

080189bc <__hexdig_fun>:
 80189bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80189c0:	2b09      	cmp	r3, #9
 80189c2:	d802      	bhi.n	80189ca <__hexdig_fun+0xe>
 80189c4:	3820      	subs	r0, #32
 80189c6:	b2c0      	uxtb	r0, r0
 80189c8:	4770      	bx	lr
 80189ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80189ce:	2b05      	cmp	r3, #5
 80189d0:	d801      	bhi.n	80189d6 <__hexdig_fun+0x1a>
 80189d2:	3847      	subs	r0, #71	; 0x47
 80189d4:	e7f7      	b.n	80189c6 <__hexdig_fun+0xa>
 80189d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80189da:	2b05      	cmp	r3, #5
 80189dc:	d801      	bhi.n	80189e2 <__hexdig_fun+0x26>
 80189de:	3827      	subs	r0, #39	; 0x27
 80189e0:	e7f1      	b.n	80189c6 <__hexdig_fun+0xa>
 80189e2:	2000      	movs	r0, #0
 80189e4:	4770      	bx	lr
	...

080189e8 <__gethex>:
 80189e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189ec:	4617      	mov	r7, r2
 80189ee:	680a      	ldr	r2, [r1, #0]
 80189f0:	b085      	sub	sp, #20
 80189f2:	f102 0b02 	add.w	fp, r2, #2
 80189f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80189fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80189fe:	4681      	mov	r9, r0
 8018a00:	468a      	mov	sl, r1
 8018a02:	9302      	str	r3, [sp, #8]
 8018a04:	32fe      	adds	r2, #254	; 0xfe
 8018a06:	eb02 030b 	add.w	r3, r2, fp
 8018a0a:	46d8      	mov	r8, fp
 8018a0c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8018a10:	9301      	str	r3, [sp, #4]
 8018a12:	2830      	cmp	r0, #48	; 0x30
 8018a14:	d0f7      	beq.n	8018a06 <__gethex+0x1e>
 8018a16:	f7ff ffd1 	bl	80189bc <__hexdig_fun>
 8018a1a:	4604      	mov	r4, r0
 8018a1c:	2800      	cmp	r0, #0
 8018a1e:	d138      	bne.n	8018a92 <__gethex+0xaa>
 8018a20:	49a7      	ldr	r1, [pc, #668]	; (8018cc0 <__gethex+0x2d8>)
 8018a22:	2201      	movs	r2, #1
 8018a24:	4640      	mov	r0, r8
 8018a26:	f7fc fdc2 	bl	80155ae <strncmp>
 8018a2a:	4606      	mov	r6, r0
 8018a2c:	2800      	cmp	r0, #0
 8018a2e:	d169      	bne.n	8018b04 <__gethex+0x11c>
 8018a30:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018a34:	465d      	mov	r5, fp
 8018a36:	f7ff ffc1 	bl	80189bc <__hexdig_fun>
 8018a3a:	2800      	cmp	r0, #0
 8018a3c:	d064      	beq.n	8018b08 <__gethex+0x120>
 8018a3e:	465a      	mov	r2, fp
 8018a40:	7810      	ldrb	r0, [r2, #0]
 8018a42:	2830      	cmp	r0, #48	; 0x30
 8018a44:	4690      	mov	r8, r2
 8018a46:	f102 0201 	add.w	r2, r2, #1
 8018a4a:	d0f9      	beq.n	8018a40 <__gethex+0x58>
 8018a4c:	f7ff ffb6 	bl	80189bc <__hexdig_fun>
 8018a50:	2301      	movs	r3, #1
 8018a52:	fab0 f480 	clz	r4, r0
 8018a56:	0964      	lsrs	r4, r4, #5
 8018a58:	465e      	mov	r6, fp
 8018a5a:	9301      	str	r3, [sp, #4]
 8018a5c:	4642      	mov	r2, r8
 8018a5e:	4615      	mov	r5, r2
 8018a60:	3201      	adds	r2, #1
 8018a62:	7828      	ldrb	r0, [r5, #0]
 8018a64:	f7ff ffaa 	bl	80189bc <__hexdig_fun>
 8018a68:	2800      	cmp	r0, #0
 8018a6a:	d1f8      	bne.n	8018a5e <__gethex+0x76>
 8018a6c:	4994      	ldr	r1, [pc, #592]	; (8018cc0 <__gethex+0x2d8>)
 8018a6e:	2201      	movs	r2, #1
 8018a70:	4628      	mov	r0, r5
 8018a72:	f7fc fd9c 	bl	80155ae <strncmp>
 8018a76:	b978      	cbnz	r0, 8018a98 <__gethex+0xb0>
 8018a78:	b946      	cbnz	r6, 8018a8c <__gethex+0xa4>
 8018a7a:	1c6e      	adds	r6, r5, #1
 8018a7c:	4632      	mov	r2, r6
 8018a7e:	4615      	mov	r5, r2
 8018a80:	3201      	adds	r2, #1
 8018a82:	7828      	ldrb	r0, [r5, #0]
 8018a84:	f7ff ff9a 	bl	80189bc <__hexdig_fun>
 8018a88:	2800      	cmp	r0, #0
 8018a8a:	d1f8      	bne.n	8018a7e <__gethex+0x96>
 8018a8c:	1b73      	subs	r3, r6, r5
 8018a8e:	009e      	lsls	r6, r3, #2
 8018a90:	e004      	b.n	8018a9c <__gethex+0xb4>
 8018a92:	2400      	movs	r4, #0
 8018a94:	4626      	mov	r6, r4
 8018a96:	e7e1      	b.n	8018a5c <__gethex+0x74>
 8018a98:	2e00      	cmp	r6, #0
 8018a9a:	d1f7      	bne.n	8018a8c <__gethex+0xa4>
 8018a9c:	782b      	ldrb	r3, [r5, #0]
 8018a9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018aa2:	2b50      	cmp	r3, #80	; 0x50
 8018aa4:	d13d      	bne.n	8018b22 <__gethex+0x13a>
 8018aa6:	786b      	ldrb	r3, [r5, #1]
 8018aa8:	2b2b      	cmp	r3, #43	; 0x2b
 8018aaa:	d02f      	beq.n	8018b0c <__gethex+0x124>
 8018aac:	2b2d      	cmp	r3, #45	; 0x2d
 8018aae:	d031      	beq.n	8018b14 <__gethex+0x12c>
 8018ab0:	1c69      	adds	r1, r5, #1
 8018ab2:	f04f 0b00 	mov.w	fp, #0
 8018ab6:	7808      	ldrb	r0, [r1, #0]
 8018ab8:	f7ff ff80 	bl	80189bc <__hexdig_fun>
 8018abc:	1e42      	subs	r2, r0, #1
 8018abe:	b2d2      	uxtb	r2, r2
 8018ac0:	2a18      	cmp	r2, #24
 8018ac2:	d82e      	bhi.n	8018b22 <__gethex+0x13a>
 8018ac4:	f1a0 0210 	sub.w	r2, r0, #16
 8018ac8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018acc:	f7ff ff76 	bl	80189bc <__hexdig_fun>
 8018ad0:	f100 3cff 	add.w	ip, r0, #4294967295
 8018ad4:	fa5f fc8c 	uxtb.w	ip, ip
 8018ad8:	f1bc 0f18 	cmp.w	ip, #24
 8018adc:	d91d      	bls.n	8018b1a <__gethex+0x132>
 8018ade:	f1bb 0f00 	cmp.w	fp, #0
 8018ae2:	d000      	beq.n	8018ae6 <__gethex+0xfe>
 8018ae4:	4252      	negs	r2, r2
 8018ae6:	4416      	add	r6, r2
 8018ae8:	f8ca 1000 	str.w	r1, [sl]
 8018aec:	b1dc      	cbz	r4, 8018b26 <__gethex+0x13e>
 8018aee:	9b01      	ldr	r3, [sp, #4]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	bf14      	ite	ne
 8018af4:	f04f 0800 	movne.w	r8, #0
 8018af8:	f04f 0806 	moveq.w	r8, #6
 8018afc:	4640      	mov	r0, r8
 8018afe:	b005      	add	sp, #20
 8018b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b04:	4645      	mov	r5, r8
 8018b06:	4626      	mov	r6, r4
 8018b08:	2401      	movs	r4, #1
 8018b0a:	e7c7      	b.n	8018a9c <__gethex+0xb4>
 8018b0c:	f04f 0b00 	mov.w	fp, #0
 8018b10:	1ca9      	adds	r1, r5, #2
 8018b12:	e7d0      	b.n	8018ab6 <__gethex+0xce>
 8018b14:	f04f 0b01 	mov.w	fp, #1
 8018b18:	e7fa      	b.n	8018b10 <__gethex+0x128>
 8018b1a:	230a      	movs	r3, #10
 8018b1c:	fb03 0002 	mla	r0, r3, r2, r0
 8018b20:	e7d0      	b.n	8018ac4 <__gethex+0xdc>
 8018b22:	4629      	mov	r1, r5
 8018b24:	e7e0      	b.n	8018ae8 <__gethex+0x100>
 8018b26:	eba5 0308 	sub.w	r3, r5, r8
 8018b2a:	3b01      	subs	r3, #1
 8018b2c:	4621      	mov	r1, r4
 8018b2e:	2b07      	cmp	r3, #7
 8018b30:	dc0a      	bgt.n	8018b48 <__gethex+0x160>
 8018b32:	4648      	mov	r0, r9
 8018b34:	f7fd fdaa 	bl	801668c <_Balloc>
 8018b38:	4604      	mov	r4, r0
 8018b3a:	b940      	cbnz	r0, 8018b4e <__gethex+0x166>
 8018b3c:	4b61      	ldr	r3, [pc, #388]	; (8018cc4 <__gethex+0x2dc>)
 8018b3e:	4602      	mov	r2, r0
 8018b40:	21e4      	movs	r1, #228	; 0xe4
 8018b42:	4861      	ldr	r0, [pc, #388]	; (8018cc8 <__gethex+0x2e0>)
 8018b44:	f7ff feb4 	bl	80188b0 <__assert_func>
 8018b48:	3101      	adds	r1, #1
 8018b4a:	105b      	asrs	r3, r3, #1
 8018b4c:	e7ef      	b.n	8018b2e <__gethex+0x146>
 8018b4e:	f100 0a14 	add.w	sl, r0, #20
 8018b52:	2300      	movs	r3, #0
 8018b54:	495a      	ldr	r1, [pc, #360]	; (8018cc0 <__gethex+0x2d8>)
 8018b56:	f8cd a004 	str.w	sl, [sp, #4]
 8018b5a:	469b      	mov	fp, r3
 8018b5c:	45a8      	cmp	r8, r5
 8018b5e:	d342      	bcc.n	8018be6 <__gethex+0x1fe>
 8018b60:	9801      	ldr	r0, [sp, #4]
 8018b62:	f840 bb04 	str.w	fp, [r0], #4
 8018b66:	eba0 000a 	sub.w	r0, r0, sl
 8018b6a:	1080      	asrs	r0, r0, #2
 8018b6c:	6120      	str	r0, [r4, #16]
 8018b6e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8018b72:	4658      	mov	r0, fp
 8018b74:	f7fd fe7c 	bl	8016870 <__hi0bits>
 8018b78:	683d      	ldr	r5, [r7, #0]
 8018b7a:	eba8 0000 	sub.w	r0, r8, r0
 8018b7e:	42a8      	cmp	r0, r5
 8018b80:	dd59      	ble.n	8018c36 <__gethex+0x24e>
 8018b82:	eba0 0805 	sub.w	r8, r0, r5
 8018b86:	4641      	mov	r1, r8
 8018b88:	4620      	mov	r0, r4
 8018b8a:	f7fe fa0b 	bl	8016fa4 <__any_on>
 8018b8e:	4683      	mov	fp, r0
 8018b90:	b1b8      	cbz	r0, 8018bc2 <__gethex+0x1da>
 8018b92:	f108 33ff 	add.w	r3, r8, #4294967295
 8018b96:	1159      	asrs	r1, r3, #5
 8018b98:	f003 021f 	and.w	r2, r3, #31
 8018b9c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8018ba0:	f04f 0b01 	mov.w	fp, #1
 8018ba4:	fa0b f202 	lsl.w	r2, fp, r2
 8018ba8:	420a      	tst	r2, r1
 8018baa:	d00a      	beq.n	8018bc2 <__gethex+0x1da>
 8018bac:	455b      	cmp	r3, fp
 8018bae:	dd06      	ble.n	8018bbe <__gethex+0x1d6>
 8018bb0:	f1a8 0102 	sub.w	r1, r8, #2
 8018bb4:	4620      	mov	r0, r4
 8018bb6:	f7fe f9f5 	bl	8016fa4 <__any_on>
 8018bba:	2800      	cmp	r0, #0
 8018bbc:	d138      	bne.n	8018c30 <__gethex+0x248>
 8018bbe:	f04f 0b02 	mov.w	fp, #2
 8018bc2:	4641      	mov	r1, r8
 8018bc4:	4620      	mov	r0, r4
 8018bc6:	f7ff fea7 	bl	8018918 <rshift>
 8018bca:	4446      	add	r6, r8
 8018bcc:	68bb      	ldr	r3, [r7, #8]
 8018bce:	42b3      	cmp	r3, r6
 8018bd0:	da41      	bge.n	8018c56 <__gethex+0x26e>
 8018bd2:	4621      	mov	r1, r4
 8018bd4:	4648      	mov	r0, r9
 8018bd6:	f7fd fd99 	bl	801670c <_Bfree>
 8018bda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018bdc:	2300      	movs	r3, #0
 8018bde:	6013      	str	r3, [r2, #0]
 8018be0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8018be4:	e78a      	b.n	8018afc <__gethex+0x114>
 8018be6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8018bea:	2a2e      	cmp	r2, #46	; 0x2e
 8018bec:	d014      	beq.n	8018c18 <__gethex+0x230>
 8018bee:	2b20      	cmp	r3, #32
 8018bf0:	d106      	bne.n	8018c00 <__gethex+0x218>
 8018bf2:	9b01      	ldr	r3, [sp, #4]
 8018bf4:	f843 bb04 	str.w	fp, [r3], #4
 8018bf8:	f04f 0b00 	mov.w	fp, #0
 8018bfc:	9301      	str	r3, [sp, #4]
 8018bfe:	465b      	mov	r3, fp
 8018c00:	7828      	ldrb	r0, [r5, #0]
 8018c02:	9303      	str	r3, [sp, #12]
 8018c04:	f7ff feda 	bl	80189bc <__hexdig_fun>
 8018c08:	9b03      	ldr	r3, [sp, #12]
 8018c0a:	f000 000f 	and.w	r0, r0, #15
 8018c0e:	4098      	lsls	r0, r3
 8018c10:	ea4b 0b00 	orr.w	fp, fp, r0
 8018c14:	3304      	adds	r3, #4
 8018c16:	e7a1      	b.n	8018b5c <__gethex+0x174>
 8018c18:	45a8      	cmp	r8, r5
 8018c1a:	d8e8      	bhi.n	8018bee <__gethex+0x206>
 8018c1c:	2201      	movs	r2, #1
 8018c1e:	4628      	mov	r0, r5
 8018c20:	9303      	str	r3, [sp, #12]
 8018c22:	f7fc fcc4 	bl	80155ae <strncmp>
 8018c26:	4926      	ldr	r1, [pc, #152]	; (8018cc0 <__gethex+0x2d8>)
 8018c28:	9b03      	ldr	r3, [sp, #12]
 8018c2a:	2800      	cmp	r0, #0
 8018c2c:	d1df      	bne.n	8018bee <__gethex+0x206>
 8018c2e:	e795      	b.n	8018b5c <__gethex+0x174>
 8018c30:	f04f 0b03 	mov.w	fp, #3
 8018c34:	e7c5      	b.n	8018bc2 <__gethex+0x1da>
 8018c36:	da0b      	bge.n	8018c50 <__gethex+0x268>
 8018c38:	eba5 0800 	sub.w	r8, r5, r0
 8018c3c:	4621      	mov	r1, r4
 8018c3e:	4642      	mov	r2, r8
 8018c40:	4648      	mov	r0, r9
 8018c42:	f7fd ff7d 	bl	8016b40 <__lshift>
 8018c46:	eba6 0608 	sub.w	r6, r6, r8
 8018c4a:	4604      	mov	r4, r0
 8018c4c:	f100 0a14 	add.w	sl, r0, #20
 8018c50:	f04f 0b00 	mov.w	fp, #0
 8018c54:	e7ba      	b.n	8018bcc <__gethex+0x1e4>
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	42b3      	cmp	r3, r6
 8018c5a:	dd73      	ble.n	8018d44 <__gethex+0x35c>
 8018c5c:	1b9e      	subs	r6, r3, r6
 8018c5e:	42b5      	cmp	r5, r6
 8018c60:	dc34      	bgt.n	8018ccc <__gethex+0x2e4>
 8018c62:	68fb      	ldr	r3, [r7, #12]
 8018c64:	2b02      	cmp	r3, #2
 8018c66:	d023      	beq.n	8018cb0 <__gethex+0x2c8>
 8018c68:	2b03      	cmp	r3, #3
 8018c6a:	d025      	beq.n	8018cb8 <__gethex+0x2d0>
 8018c6c:	2b01      	cmp	r3, #1
 8018c6e:	d115      	bne.n	8018c9c <__gethex+0x2b4>
 8018c70:	42b5      	cmp	r5, r6
 8018c72:	d113      	bne.n	8018c9c <__gethex+0x2b4>
 8018c74:	2d01      	cmp	r5, #1
 8018c76:	d10b      	bne.n	8018c90 <__gethex+0x2a8>
 8018c78:	9a02      	ldr	r2, [sp, #8]
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	6013      	str	r3, [r2, #0]
 8018c7e:	2301      	movs	r3, #1
 8018c80:	6123      	str	r3, [r4, #16]
 8018c82:	f8ca 3000 	str.w	r3, [sl]
 8018c86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018c88:	f04f 0862 	mov.w	r8, #98	; 0x62
 8018c8c:	601c      	str	r4, [r3, #0]
 8018c8e:	e735      	b.n	8018afc <__gethex+0x114>
 8018c90:	1e69      	subs	r1, r5, #1
 8018c92:	4620      	mov	r0, r4
 8018c94:	f7fe f986 	bl	8016fa4 <__any_on>
 8018c98:	2800      	cmp	r0, #0
 8018c9a:	d1ed      	bne.n	8018c78 <__gethex+0x290>
 8018c9c:	4621      	mov	r1, r4
 8018c9e:	4648      	mov	r0, r9
 8018ca0:	f7fd fd34 	bl	801670c <_Bfree>
 8018ca4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018ca6:	2300      	movs	r3, #0
 8018ca8:	6013      	str	r3, [r2, #0]
 8018caa:	f04f 0850 	mov.w	r8, #80	; 0x50
 8018cae:	e725      	b.n	8018afc <__gethex+0x114>
 8018cb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d1f2      	bne.n	8018c9c <__gethex+0x2b4>
 8018cb6:	e7df      	b.n	8018c78 <__gethex+0x290>
 8018cb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d1dc      	bne.n	8018c78 <__gethex+0x290>
 8018cbe:	e7ed      	b.n	8018c9c <__gethex+0x2b4>
 8018cc0:	0801c284 	.word	0x0801c284
 8018cc4:	0801c11b 	.word	0x0801c11b
 8018cc8:	0801c449 	.word	0x0801c449
 8018ccc:	f106 38ff 	add.w	r8, r6, #4294967295
 8018cd0:	f1bb 0f00 	cmp.w	fp, #0
 8018cd4:	d133      	bne.n	8018d3e <__gethex+0x356>
 8018cd6:	f1b8 0f00 	cmp.w	r8, #0
 8018cda:	d004      	beq.n	8018ce6 <__gethex+0x2fe>
 8018cdc:	4641      	mov	r1, r8
 8018cde:	4620      	mov	r0, r4
 8018ce0:	f7fe f960 	bl	8016fa4 <__any_on>
 8018ce4:	4683      	mov	fp, r0
 8018ce6:	ea4f 1268 	mov.w	r2, r8, asr #5
 8018cea:	2301      	movs	r3, #1
 8018cec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018cf0:	f008 081f 	and.w	r8, r8, #31
 8018cf4:	fa03 f308 	lsl.w	r3, r3, r8
 8018cf8:	4213      	tst	r3, r2
 8018cfa:	4631      	mov	r1, r6
 8018cfc:	4620      	mov	r0, r4
 8018cfe:	bf18      	it	ne
 8018d00:	f04b 0b02 	orrne.w	fp, fp, #2
 8018d04:	1bad      	subs	r5, r5, r6
 8018d06:	f7ff fe07 	bl	8018918 <rshift>
 8018d0a:	687e      	ldr	r6, [r7, #4]
 8018d0c:	f04f 0802 	mov.w	r8, #2
 8018d10:	f1bb 0f00 	cmp.w	fp, #0
 8018d14:	d04a      	beq.n	8018dac <__gethex+0x3c4>
 8018d16:	68fb      	ldr	r3, [r7, #12]
 8018d18:	2b02      	cmp	r3, #2
 8018d1a:	d016      	beq.n	8018d4a <__gethex+0x362>
 8018d1c:	2b03      	cmp	r3, #3
 8018d1e:	d018      	beq.n	8018d52 <__gethex+0x36a>
 8018d20:	2b01      	cmp	r3, #1
 8018d22:	d109      	bne.n	8018d38 <__gethex+0x350>
 8018d24:	f01b 0f02 	tst.w	fp, #2
 8018d28:	d006      	beq.n	8018d38 <__gethex+0x350>
 8018d2a:	f8da 3000 	ldr.w	r3, [sl]
 8018d2e:	ea4b 0b03 	orr.w	fp, fp, r3
 8018d32:	f01b 0f01 	tst.w	fp, #1
 8018d36:	d10f      	bne.n	8018d58 <__gethex+0x370>
 8018d38:	f048 0810 	orr.w	r8, r8, #16
 8018d3c:	e036      	b.n	8018dac <__gethex+0x3c4>
 8018d3e:	f04f 0b01 	mov.w	fp, #1
 8018d42:	e7d0      	b.n	8018ce6 <__gethex+0x2fe>
 8018d44:	f04f 0801 	mov.w	r8, #1
 8018d48:	e7e2      	b.n	8018d10 <__gethex+0x328>
 8018d4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018d4c:	f1c3 0301 	rsb	r3, r3, #1
 8018d50:	930f      	str	r3, [sp, #60]	; 0x3c
 8018d52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	d0ef      	beq.n	8018d38 <__gethex+0x350>
 8018d58:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018d5c:	f104 0214 	add.w	r2, r4, #20
 8018d60:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8018d64:	9301      	str	r3, [sp, #4]
 8018d66:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8018d6a:	2300      	movs	r3, #0
 8018d6c:	4694      	mov	ip, r2
 8018d6e:	f852 1b04 	ldr.w	r1, [r2], #4
 8018d72:	f1b1 3fff 	cmp.w	r1, #4294967295
 8018d76:	d01e      	beq.n	8018db6 <__gethex+0x3ce>
 8018d78:	3101      	adds	r1, #1
 8018d7a:	f8cc 1000 	str.w	r1, [ip]
 8018d7e:	f1b8 0f02 	cmp.w	r8, #2
 8018d82:	f104 0214 	add.w	r2, r4, #20
 8018d86:	d13d      	bne.n	8018e04 <__gethex+0x41c>
 8018d88:	683b      	ldr	r3, [r7, #0]
 8018d8a:	3b01      	subs	r3, #1
 8018d8c:	42ab      	cmp	r3, r5
 8018d8e:	d10b      	bne.n	8018da8 <__gethex+0x3c0>
 8018d90:	1169      	asrs	r1, r5, #5
 8018d92:	2301      	movs	r3, #1
 8018d94:	f005 051f 	and.w	r5, r5, #31
 8018d98:	fa03 f505 	lsl.w	r5, r3, r5
 8018d9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018da0:	421d      	tst	r5, r3
 8018da2:	bf18      	it	ne
 8018da4:	f04f 0801 	movne.w	r8, #1
 8018da8:	f048 0820 	orr.w	r8, r8, #32
 8018dac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018dae:	601c      	str	r4, [r3, #0]
 8018db0:	9b02      	ldr	r3, [sp, #8]
 8018db2:	601e      	str	r6, [r3, #0]
 8018db4:	e6a2      	b.n	8018afc <__gethex+0x114>
 8018db6:	4290      	cmp	r0, r2
 8018db8:	f842 3c04 	str.w	r3, [r2, #-4]
 8018dbc:	d8d6      	bhi.n	8018d6c <__gethex+0x384>
 8018dbe:	68a2      	ldr	r2, [r4, #8]
 8018dc0:	4593      	cmp	fp, r2
 8018dc2:	db17      	blt.n	8018df4 <__gethex+0x40c>
 8018dc4:	6861      	ldr	r1, [r4, #4]
 8018dc6:	4648      	mov	r0, r9
 8018dc8:	3101      	adds	r1, #1
 8018dca:	f7fd fc5f 	bl	801668c <_Balloc>
 8018dce:	4682      	mov	sl, r0
 8018dd0:	b918      	cbnz	r0, 8018dda <__gethex+0x3f2>
 8018dd2:	4b1b      	ldr	r3, [pc, #108]	; (8018e40 <__gethex+0x458>)
 8018dd4:	4602      	mov	r2, r0
 8018dd6:	2184      	movs	r1, #132	; 0x84
 8018dd8:	e6b3      	b.n	8018b42 <__gethex+0x15a>
 8018dda:	6922      	ldr	r2, [r4, #16]
 8018ddc:	3202      	adds	r2, #2
 8018dde:	f104 010c 	add.w	r1, r4, #12
 8018de2:	0092      	lsls	r2, r2, #2
 8018de4:	300c      	adds	r0, #12
 8018de6:	f7fc fcc2 	bl	801576e <memcpy>
 8018dea:	4621      	mov	r1, r4
 8018dec:	4648      	mov	r0, r9
 8018dee:	f7fd fc8d 	bl	801670c <_Bfree>
 8018df2:	4654      	mov	r4, sl
 8018df4:	6922      	ldr	r2, [r4, #16]
 8018df6:	1c51      	adds	r1, r2, #1
 8018df8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018dfc:	6121      	str	r1, [r4, #16]
 8018dfe:	2101      	movs	r1, #1
 8018e00:	6151      	str	r1, [r2, #20]
 8018e02:	e7bc      	b.n	8018d7e <__gethex+0x396>
 8018e04:	6921      	ldr	r1, [r4, #16]
 8018e06:	4559      	cmp	r1, fp
 8018e08:	dd0b      	ble.n	8018e22 <__gethex+0x43a>
 8018e0a:	2101      	movs	r1, #1
 8018e0c:	4620      	mov	r0, r4
 8018e0e:	f7ff fd83 	bl	8018918 <rshift>
 8018e12:	68bb      	ldr	r3, [r7, #8]
 8018e14:	3601      	adds	r6, #1
 8018e16:	42b3      	cmp	r3, r6
 8018e18:	f6ff aedb 	blt.w	8018bd2 <__gethex+0x1ea>
 8018e1c:	f04f 0801 	mov.w	r8, #1
 8018e20:	e7c2      	b.n	8018da8 <__gethex+0x3c0>
 8018e22:	f015 051f 	ands.w	r5, r5, #31
 8018e26:	d0f9      	beq.n	8018e1c <__gethex+0x434>
 8018e28:	9b01      	ldr	r3, [sp, #4]
 8018e2a:	441a      	add	r2, r3
 8018e2c:	f1c5 0520 	rsb	r5, r5, #32
 8018e30:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8018e34:	f7fd fd1c 	bl	8016870 <__hi0bits>
 8018e38:	42a8      	cmp	r0, r5
 8018e3a:	dbe6      	blt.n	8018e0a <__gethex+0x422>
 8018e3c:	e7ee      	b.n	8018e1c <__gethex+0x434>
 8018e3e:	bf00      	nop
 8018e40:	0801c11b 	.word	0x0801c11b

08018e44 <L_shift>:
 8018e44:	f1c2 0208 	rsb	r2, r2, #8
 8018e48:	0092      	lsls	r2, r2, #2
 8018e4a:	b570      	push	{r4, r5, r6, lr}
 8018e4c:	f1c2 0620 	rsb	r6, r2, #32
 8018e50:	6843      	ldr	r3, [r0, #4]
 8018e52:	6804      	ldr	r4, [r0, #0]
 8018e54:	fa03 f506 	lsl.w	r5, r3, r6
 8018e58:	432c      	orrs	r4, r5
 8018e5a:	40d3      	lsrs	r3, r2
 8018e5c:	6004      	str	r4, [r0, #0]
 8018e5e:	f840 3f04 	str.w	r3, [r0, #4]!
 8018e62:	4288      	cmp	r0, r1
 8018e64:	d3f4      	bcc.n	8018e50 <L_shift+0xc>
 8018e66:	bd70      	pop	{r4, r5, r6, pc}

08018e68 <__match>:
 8018e68:	b530      	push	{r4, r5, lr}
 8018e6a:	6803      	ldr	r3, [r0, #0]
 8018e6c:	3301      	adds	r3, #1
 8018e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018e72:	b914      	cbnz	r4, 8018e7a <__match+0x12>
 8018e74:	6003      	str	r3, [r0, #0]
 8018e76:	2001      	movs	r0, #1
 8018e78:	bd30      	pop	{r4, r5, pc}
 8018e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018e7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018e82:	2d19      	cmp	r5, #25
 8018e84:	bf98      	it	ls
 8018e86:	3220      	addls	r2, #32
 8018e88:	42a2      	cmp	r2, r4
 8018e8a:	d0f0      	beq.n	8018e6e <__match+0x6>
 8018e8c:	2000      	movs	r0, #0
 8018e8e:	e7f3      	b.n	8018e78 <__match+0x10>

08018e90 <__hexnan>:
 8018e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e94:	680b      	ldr	r3, [r1, #0]
 8018e96:	6801      	ldr	r1, [r0, #0]
 8018e98:	115e      	asrs	r6, r3, #5
 8018e9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018e9e:	f013 031f 	ands.w	r3, r3, #31
 8018ea2:	b087      	sub	sp, #28
 8018ea4:	bf18      	it	ne
 8018ea6:	3604      	addne	r6, #4
 8018ea8:	2500      	movs	r5, #0
 8018eaa:	1f37      	subs	r7, r6, #4
 8018eac:	4682      	mov	sl, r0
 8018eae:	4690      	mov	r8, r2
 8018eb0:	9301      	str	r3, [sp, #4]
 8018eb2:	f846 5c04 	str.w	r5, [r6, #-4]
 8018eb6:	46b9      	mov	r9, r7
 8018eb8:	463c      	mov	r4, r7
 8018eba:	9502      	str	r5, [sp, #8]
 8018ebc:	46ab      	mov	fp, r5
 8018ebe:	784a      	ldrb	r2, [r1, #1]
 8018ec0:	1c4b      	adds	r3, r1, #1
 8018ec2:	9303      	str	r3, [sp, #12]
 8018ec4:	b342      	cbz	r2, 8018f18 <__hexnan+0x88>
 8018ec6:	4610      	mov	r0, r2
 8018ec8:	9105      	str	r1, [sp, #20]
 8018eca:	9204      	str	r2, [sp, #16]
 8018ecc:	f7ff fd76 	bl	80189bc <__hexdig_fun>
 8018ed0:	2800      	cmp	r0, #0
 8018ed2:	d14f      	bne.n	8018f74 <__hexnan+0xe4>
 8018ed4:	9a04      	ldr	r2, [sp, #16]
 8018ed6:	9905      	ldr	r1, [sp, #20]
 8018ed8:	2a20      	cmp	r2, #32
 8018eda:	d818      	bhi.n	8018f0e <__hexnan+0x7e>
 8018edc:	9b02      	ldr	r3, [sp, #8]
 8018ede:	459b      	cmp	fp, r3
 8018ee0:	dd13      	ble.n	8018f0a <__hexnan+0x7a>
 8018ee2:	454c      	cmp	r4, r9
 8018ee4:	d206      	bcs.n	8018ef4 <__hexnan+0x64>
 8018ee6:	2d07      	cmp	r5, #7
 8018ee8:	dc04      	bgt.n	8018ef4 <__hexnan+0x64>
 8018eea:	462a      	mov	r2, r5
 8018eec:	4649      	mov	r1, r9
 8018eee:	4620      	mov	r0, r4
 8018ef0:	f7ff ffa8 	bl	8018e44 <L_shift>
 8018ef4:	4544      	cmp	r4, r8
 8018ef6:	d950      	bls.n	8018f9a <__hexnan+0x10a>
 8018ef8:	2300      	movs	r3, #0
 8018efa:	f1a4 0904 	sub.w	r9, r4, #4
 8018efe:	f844 3c04 	str.w	r3, [r4, #-4]
 8018f02:	f8cd b008 	str.w	fp, [sp, #8]
 8018f06:	464c      	mov	r4, r9
 8018f08:	461d      	mov	r5, r3
 8018f0a:	9903      	ldr	r1, [sp, #12]
 8018f0c:	e7d7      	b.n	8018ebe <__hexnan+0x2e>
 8018f0e:	2a29      	cmp	r2, #41	; 0x29
 8018f10:	d155      	bne.n	8018fbe <__hexnan+0x12e>
 8018f12:	3102      	adds	r1, #2
 8018f14:	f8ca 1000 	str.w	r1, [sl]
 8018f18:	f1bb 0f00 	cmp.w	fp, #0
 8018f1c:	d04f      	beq.n	8018fbe <__hexnan+0x12e>
 8018f1e:	454c      	cmp	r4, r9
 8018f20:	d206      	bcs.n	8018f30 <__hexnan+0xa0>
 8018f22:	2d07      	cmp	r5, #7
 8018f24:	dc04      	bgt.n	8018f30 <__hexnan+0xa0>
 8018f26:	462a      	mov	r2, r5
 8018f28:	4649      	mov	r1, r9
 8018f2a:	4620      	mov	r0, r4
 8018f2c:	f7ff ff8a 	bl	8018e44 <L_shift>
 8018f30:	4544      	cmp	r4, r8
 8018f32:	d934      	bls.n	8018f9e <__hexnan+0x10e>
 8018f34:	f1a8 0204 	sub.w	r2, r8, #4
 8018f38:	4623      	mov	r3, r4
 8018f3a:	f853 1b04 	ldr.w	r1, [r3], #4
 8018f3e:	f842 1f04 	str.w	r1, [r2, #4]!
 8018f42:	429f      	cmp	r7, r3
 8018f44:	d2f9      	bcs.n	8018f3a <__hexnan+0xaa>
 8018f46:	1b3b      	subs	r3, r7, r4
 8018f48:	f023 0303 	bic.w	r3, r3, #3
 8018f4c:	3304      	adds	r3, #4
 8018f4e:	3e03      	subs	r6, #3
 8018f50:	3401      	adds	r4, #1
 8018f52:	42a6      	cmp	r6, r4
 8018f54:	bf38      	it	cc
 8018f56:	2304      	movcc	r3, #4
 8018f58:	4443      	add	r3, r8
 8018f5a:	2200      	movs	r2, #0
 8018f5c:	f843 2b04 	str.w	r2, [r3], #4
 8018f60:	429f      	cmp	r7, r3
 8018f62:	d2fb      	bcs.n	8018f5c <__hexnan+0xcc>
 8018f64:	683b      	ldr	r3, [r7, #0]
 8018f66:	b91b      	cbnz	r3, 8018f70 <__hexnan+0xe0>
 8018f68:	4547      	cmp	r7, r8
 8018f6a:	d126      	bne.n	8018fba <__hexnan+0x12a>
 8018f6c:	2301      	movs	r3, #1
 8018f6e:	603b      	str	r3, [r7, #0]
 8018f70:	2005      	movs	r0, #5
 8018f72:	e025      	b.n	8018fc0 <__hexnan+0x130>
 8018f74:	3501      	adds	r5, #1
 8018f76:	2d08      	cmp	r5, #8
 8018f78:	f10b 0b01 	add.w	fp, fp, #1
 8018f7c:	dd06      	ble.n	8018f8c <__hexnan+0xfc>
 8018f7e:	4544      	cmp	r4, r8
 8018f80:	d9c3      	bls.n	8018f0a <__hexnan+0x7a>
 8018f82:	2300      	movs	r3, #0
 8018f84:	f844 3c04 	str.w	r3, [r4, #-4]
 8018f88:	2501      	movs	r5, #1
 8018f8a:	3c04      	subs	r4, #4
 8018f8c:	6822      	ldr	r2, [r4, #0]
 8018f8e:	f000 000f 	and.w	r0, r0, #15
 8018f92:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018f96:	6020      	str	r0, [r4, #0]
 8018f98:	e7b7      	b.n	8018f0a <__hexnan+0x7a>
 8018f9a:	2508      	movs	r5, #8
 8018f9c:	e7b5      	b.n	8018f0a <__hexnan+0x7a>
 8018f9e:	9b01      	ldr	r3, [sp, #4]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d0df      	beq.n	8018f64 <__hexnan+0xd4>
 8018fa4:	f1c3 0320 	rsb	r3, r3, #32
 8018fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8018fac:	40da      	lsrs	r2, r3
 8018fae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8018fb2:	4013      	ands	r3, r2
 8018fb4:	f846 3c04 	str.w	r3, [r6, #-4]
 8018fb8:	e7d4      	b.n	8018f64 <__hexnan+0xd4>
 8018fba:	3f04      	subs	r7, #4
 8018fbc:	e7d2      	b.n	8018f64 <__hexnan+0xd4>
 8018fbe:	2004      	movs	r0, #4
 8018fc0:	b007      	add	sp, #28
 8018fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018fc6 <__ascii_mbtowc>:
 8018fc6:	b082      	sub	sp, #8
 8018fc8:	b901      	cbnz	r1, 8018fcc <__ascii_mbtowc+0x6>
 8018fca:	a901      	add	r1, sp, #4
 8018fcc:	b142      	cbz	r2, 8018fe0 <__ascii_mbtowc+0x1a>
 8018fce:	b14b      	cbz	r3, 8018fe4 <__ascii_mbtowc+0x1e>
 8018fd0:	7813      	ldrb	r3, [r2, #0]
 8018fd2:	600b      	str	r3, [r1, #0]
 8018fd4:	7812      	ldrb	r2, [r2, #0]
 8018fd6:	1e10      	subs	r0, r2, #0
 8018fd8:	bf18      	it	ne
 8018fda:	2001      	movne	r0, #1
 8018fdc:	b002      	add	sp, #8
 8018fde:	4770      	bx	lr
 8018fe0:	4610      	mov	r0, r2
 8018fe2:	e7fb      	b.n	8018fdc <__ascii_mbtowc+0x16>
 8018fe4:	f06f 0001 	mvn.w	r0, #1
 8018fe8:	e7f8      	b.n	8018fdc <__ascii_mbtowc+0x16>

08018fea <_realloc_r>:
 8018fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fee:	4680      	mov	r8, r0
 8018ff0:	4614      	mov	r4, r2
 8018ff2:	460e      	mov	r6, r1
 8018ff4:	b921      	cbnz	r1, 8019000 <_realloc_r+0x16>
 8018ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018ffa:	4611      	mov	r1, r2
 8018ffc:	f7fd baba 	b.w	8016574 <_malloc_r>
 8019000:	b92a      	cbnz	r2, 801900e <_realloc_r+0x24>
 8019002:	f7fd fa43 	bl	801648c <_free_r>
 8019006:	4625      	mov	r5, r4
 8019008:	4628      	mov	r0, r5
 801900a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801900e:	f000 f8b6 	bl	801917e <_malloc_usable_size_r>
 8019012:	4284      	cmp	r4, r0
 8019014:	4607      	mov	r7, r0
 8019016:	d802      	bhi.n	801901e <_realloc_r+0x34>
 8019018:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801901c:	d812      	bhi.n	8019044 <_realloc_r+0x5a>
 801901e:	4621      	mov	r1, r4
 8019020:	4640      	mov	r0, r8
 8019022:	f7fd faa7 	bl	8016574 <_malloc_r>
 8019026:	4605      	mov	r5, r0
 8019028:	2800      	cmp	r0, #0
 801902a:	d0ed      	beq.n	8019008 <_realloc_r+0x1e>
 801902c:	42bc      	cmp	r4, r7
 801902e:	4622      	mov	r2, r4
 8019030:	4631      	mov	r1, r6
 8019032:	bf28      	it	cs
 8019034:	463a      	movcs	r2, r7
 8019036:	f7fc fb9a 	bl	801576e <memcpy>
 801903a:	4631      	mov	r1, r6
 801903c:	4640      	mov	r0, r8
 801903e:	f7fd fa25 	bl	801648c <_free_r>
 8019042:	e7e1      	b.n	8019008 <_realloc_r+0x1e>
 8019044:	4635      	mov	r5, r6
 8019046:	e7df      	b.n	8019008 <_realloc_r+0x1e>

08019048 <_strtoul_l.constprop.0>:
 8019048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801904c:	4f36      	ldr	r7, [pc, #216]	; (8019128 <_strtoul_l.constprop.0+0xe0>)
 801904e:	4686      	mov	lr, r0
 8019050:	460d      	mov	r5, r1
 8019052:	4628      	mov	r0, r5
 8019054:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019058:	5d3e      	ldrb	r6, [r7, r4]
 801905a:	f016 0608 	ands.w	r6, r6, #8
 801905e:	d1f8      	bne.n	8019052 <_strtoul_l.constprop.0+0xa>
 8019060:	2c2d      	cmp	r4, #45	; 0x2d
 8019062:	d130      	bne.n	80190c6 <_strtoul_l.constprop.0+0x7e>
 8019064:	782c      	ldrb	r4, [r5, #0]
 8019066:	2601      	movs	r6, #1
 8019068:	1c85      	adds	r5, r0, #2
 801906a:	2b00      	cmp	r3, #0
 801906c:	d057      	beq.n	801911e <_strtoul_l.constprop.0+0xd6>
 801906e:	2b10      	cmp	r3, #16
 8019070:	d109      	bne.n	8019086 <_strtoul_l.constprop.0+0x3e>
 8019072:	2c30      	cmp	r4, #48	; 0x30
 8019074:	d107      	bne.n	8019086 <_strtoul_l.constprop.0+0x3e>
 8019076:	7828      	ldrb	r0, [r5, #0]
 8019078:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801907c:	2858      	cmp	r0, #88	; 0x58
 801907e:	d149      	bne.n	8019114 <_strtoul_l.constprop.0+0xcc>
 8019080:	786c      	ldrb	r4, [r5, #1]
 8019082:	2310      	movs	r3, #16
 8019084:	3502      	adds	r5, #2
 8019086:	f04f 38ff 	mov.w	r8, #4294967295
 801908a:	2700      	movs	r7, #0
 801908c:	fbb8 f8f3 	udiv	r8, r8, r3
 8019090:	fb03 f908 	mul.w	r9, r3, r8
 8019094:	ea6f 0909 	mvn.w	r9, r9
 8019098:	4638      	mov	r0, r7
 801909a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801909e:	f1bc 0f09 	cmp.w	ip, #9
 80190a2:	d815      	bhi.n	80190d0 <_strtoul_l.constprop.0+0x88>
 80190a4:	4664      	mov	r4, ip
 80190a6:	42a3      	cmp	r3, r4
 80190a8:	dd23      	ble.n	80190f2 <_strtoul_l.constprop.0+0xaa>
 80190aa:	f1b7 3fff 	cmp.w	r7, #4294967295
 80190ae:	d007      	beq.n	80190c0 <_strtoul_l.constprop.0+0x78>
 80190b0:	4580      	cmp	r8, r0
 80190b2:	d31b      	bcc.n	80190ec <_strtoul_l.constprop.0+0xa4>
 80190b4:	d101      	bne.n	80190ba <_strtoul_l.constprop.0+0x72>
 80190b6:	45a1      	cmp	r9, r4
 80190b8:	db18      	blt.n	80190ec <_strtoul_l.constprop.0+0xa4>
 80190ba:	fb00 4003 	mla	r0, r0, r3, r4
 80190be:	2701      	movs	r7, #1
 80190c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80190c4:	e7e9      	b.n	801909a <_strtoul_l.constprop.0+0x52>
 80190c6:	2c2b      	cmp	r4, #43	; 0x2b
 80190c8:	bf04      	itt	eq
 80190ca:	782c      	ldrbeq	r4, [r5, #0]
 80190cc:	1c85      	addeq	r5, r0, #2
 80190ce:	e7cc      	b.n	801906a <_strtoul_l.constprop.0+0x22>
 80190d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80190d4:	f1bc 0f19 	cmp.w	ip, #25
 80190d8:	d801      	bhi.n	80190de <_strtoul_l.constprop.0+0x96>
 80190da:	3c37      	subs	r4, #55	; 0x37
 80190dc:	e7e3      	b.n	80190a6 <_strtoul_l.constprop.0+0x5e>
 80190de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80190e2:	f1bc 0f19 	cmp.w	ip, #25
 80190e6:	d804      	bhi.n	80190f2 <_strtoul_l.constprop.0+0xaa>
 80190e8:	3c57      	subs	r4, #87	; 0x57
 80190ea:	e7dc      	b.n	80190a6 <_strtoul_l.constprop.0+0x5e>
 80190ec:	f04f 37ff 	mov.w	r7, #4294967295
 80190f0:	e7e6      	b.n	80190c0 <_strtoul_l.constprop.0+0x78>
 80190f2:	1c7b      	adds	r3, r7, #1
 80190f4:	d106      	bne.n	8019104 <_strtoul_l.constprop.0+0xbc>
 80190f6:	2322      	movs	r3, #34	; 0x22
 80190f8:	f8ce 3000 	str.w	r3, [lr]
 80190fc:	4638      	mov	r0, r7
 80190fe:	b932      	cbnz	r2, 801910e <_strtoul_l.constprop.0+0xc6>
 8019100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019104:	b106      	cbz	r6, 8019108 <_strtoul_l.constprop.0+0xc0>
 8019106:	4240      	negs	r0, r0
 8019108:	2a00      	cmp	r2, #0
 801910a:	d0f9      	beq.n	8019100 <_strtoul_l.constprop.0+0xb8>
 801910c:	b107      	cbz	r7, 8019110 <_strtoul_l.constprop.0+0xc8>
 801910e:	1e69      	subs	r1, r5, #1
 8019110:	6011      	str	r1, [r2, #0]
 8019112:	e7f5      	b.n	8019100 <_strtoul_l.constprop.0+0xb8>
 8019114:	2430      	movs	r4, #48	; 0x30
 8019116:	2b00      	cmp	r3, #0
 8019118:	d1b5      	bne.n	8019086 <_strtoul_l.constprop.0+0x3e>
 801911a:	2308      	movs	r3, #8
 801911c:	e7b3      	b.n	8019086 <_strtoul_l.constprop.0+0x3e>
 801911e:	2c30      	cmp	r4, #48	; 0x30
 8019120:	d0a9      	beq.n	8019076 <_strtoul_l.constprop.0+0x2e>
 8019122:	230a      	movs	r3, #10
 8019124:	e7af      	b.n	8019086 <_strtoul_l.constprop.0+0x3e>
 8019126:	bf00      	nop
 8019128:	0801c2d9 	.word	0x0801c2d9

0801912c <_strtoul_r>:
 801912c:	f7ff bf8c 	b.w	8019048 <_strtoul_l.constprop.0>

08019130 <__ascii_wctomb>:
 8019130:	b149      	cbz	r1, 8019146 <__ascii_wctomb+0x16>
 8019132:	2aff      	cmp	r2, #255	; 0xff
 8019134:	bf85      	ittet	hi
 8019136:	238a      	movhi	r3, #138	; 0x8a
 8019138:	6003      	strhi	r3, [r0, #0]
 801913a:	700a      	strbls	r2, [r1, #0]
 801913c:	f04f 30ff 	movhi.w	r0, #4294967295
 8019140:	bf98      	it	ls
 8019142:	2001      	movls	r0, #1
 8019144:	4770      	bx	lr
 8019146:	4608      	mov	r0, r1
 8019148:	4770      	bx	lr
	...

0801914c <fiprintf>:
 801914c:	b40e      	push	{r1, r2, r3}
 801914e:	b503      	push	{r0, r1, lr}
 8019150:	4601      	mov	r1, r0
 8019152:	ab03      	add	r3, sp, #12
 8019154:	4805      	ldr	r0, [pc, #20]	; (801916c <fiprintf+0x20>)
 8019156:	f853 2b04 	ldr.w	r2, [r3], #4
 801915a:	6800      	ldr	r0, [r0, #0]
 801915c:	9301      	str	r3, [sp, #4]
 801915e:	f000 f83f 	bl	80191e0 <_vfiprintf_r>
 8019162:	b002      	add	sp, #8
 8019164:	f85d eb04 	ldr.w	lr, [sp], #4
 8019168:	b003      	add	sp, #12
 801916a:	4770      	bx	lr
 801916c:	20000070 	.word	0x20000070

08019170 <abort>:
 8019170:	b508      	push	{r3, lr}
 8019172:	2006      	movs	r0, #6
 8019174:	f000 fa0c 	bl	8019590 <raise>
 8019178:	2001      	movs	r0, #1
 801917a:	f7ed fd9d 	bl	8006cb8 <_exit>

0801917e <_malloc_usable_size_r>:
 801917e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019182:	1f18      	subs	r0, r3, #4
 8019184:	2b00      	cmp	r3, #0
 8019186:	bfbc      	itt	lt
 8019188:	580b      	ldrlt	r3, [r1, r0]
 801918a:	18c0      	addlt	r0, r0, r3
 801918c:	4770      	bx	lr

0801918e <__sfputc_r>:
 801918e:	6893      	ldr	r3, [r2, #8]
 8019190:	3b01      	subs	r3, #1
 8019192:	2b00      	cmp	r3, #0
 8019194:	b410      	push	{r4}
 8019196:	6093      	str	r3, [r2, #8]
 8019198:	da08      	bge.n	80191ac <__sfputc_r+0x1e>
 801919a:	6994      	ldr	r4, [r2, #24]
 801919c:	42a3      	cmp	r3, r4
 801919e:	db01      	blt.n	80191a4 <__sfputc_r+0x16>
 80191a0:	290a      	cmp	r1, #10
 80191a2:	d103      	bne.n	80191ac <__sfputc_r+0x1e>
 80191a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80191a8:	f000 b934 	b.w	8019414 <__swbuf_r>
 80191ac:	6813      	ldr	r3, [r2, #0]
 80191ae:	1c58      	adds	r0, r3, #1
 80191b0:	6010      	str	r0, [r2, #0]
 80191b2:	7019      	strb	r1, [r3, #0]
 80191b4:	4608      	mov	r0, r1
 80191b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80191ba:	4770      	bx	lr

080191bc <__sfputs_r>:
 80191bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191be:	4606      	mov	r6, r0
 80191c0:	460f      	mov	r7, r1
 80191c2:	4614      	mov	r4, r2
 80191c4:	18d5      	adds	r5, r2, r3
 80191c6:	42ac      	cmp	r4, r5
 80191c8:	d101      	bne.n	80191ce <__sfputs_r+0x12>
 80191ca:	2000      	movs	r0, #0
 80191cc:	e007      	b.n	80191de <__sfputs_r+0x22>
 80191ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80191d2:	463a      	mov	r2, r7
 80191d4:	4630      	mov	r0, r6
 80191d6:	f7ff ffda 	bl	801918e <__sfputc_r>
 80191da:	1c43      	adds	r3, r0, #1
 80191dc:	d1f3      	bne.n	80191c6 <__sfputs_r+0xa>
 80191de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080191e0 <_vfiprintf_r>:
 80191e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191e4:	460d      	mov	r5, r1
 80191e6:	b09d      	sub	sp, #116	; 0x74
 80191e8:	4614      	mov	r4, r2
 80191ea:	4698      	mov	r8, r3
 80191ec:	4606      	mov	r6, r0
 80191ee:	b118      	cbz	r0, 80191f8 <_vfiprintf_r+0x18>
 80191f0:	6a03      	ldr	r3, [r0, #32]
 80191f2:	b90b      	cbnz	r3, 80191f8 <_vfiprintf_r+0x18>
 80191f4:	f7fc f90c 	bl	8015410 <__sinit>
 80191f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80191fa:	07d9      	lsls	r1, r3, #31
 80191fc:	d405      	bmi.n	801920a <_vfiprintf_r+0x2a>
 80191fe:	89ab      	ldrh	r3, [r5, #12]
 8019200:	059a      	lsls	r2, r3, #22
 8019202:	d402      	bmi.n	801920a <_vfiprintf_r+0x2a>
 8019204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019206:	f7fc fab0 	bl	801576a <__retarget_lock_acquire_recursive>
 801920a:	89ab      	ldrh	r3, [r5, #12]
 801920c:	071b      	lsls	r3, r3, #28
 801920e:	d501      	bpl.n	8019214 <_vfiprintf_r+0x34>
 8019210:	692b      	ldr	r3, [r5, #16]
 8019212:	b99b      	cbnz	r3, 801923c <_vfiprintf_r+0x5c>
 8019214:	4629      	mov	r1, r5
 8019216:	4630      	mov	r0, r6
 8019218:	f000 f93a 	bl	8019490 <__swsetup_r>
 801921c:	b170      	cbz	r0, 801923c <_vfiprintf_r+0x5c>
 801921e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019220:	07dc      	lsls	r4, r3, #31
 8019222:	d504      	bpl.n	801922e <_vfiprintf_r+0x4e>
 8019224:	f04f 30ff 	mov.w	r0, #4294967295
 8019228:	b01d      	add	sp, #116	; 0x74
 801922a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801922e:	89ab      	ldrh	r3, [r5, #12]
 8019230:	0598      	lsls	r0, r3, #22
 8019232:	d4f7      	bmi.n	8019224 <_vfiprintf_r+0x44>
 8019234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019236:	f7fc fa99 	bl	801576c <__retarget_lock_release_recursive>
 801923a:	e7f3      	b.n	8019224 <_vfiprintf_r+0x44>
 801923c:	2300      	movs	r3, #0
 801923e:	9309      	str	r3, [sp, #36]	; 0x24
 8019240:	2320      	movs	r3, #32
 8019242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019246:	f8cd 800c 	str.w	r8, [sp, #12]
 801924a:	2330      	movs	r3, #48	; 0x30
 801924c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019400 <_vfiprintf_r+0x220>
 8019250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019254:	f04f 0901 	mov.w	r9, #1
 8019258:	4623      	mov	r3, r4
 801925a:	469a      	mov	sl, r3
 801925c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019260:	b10a      	cbz	r2, 8019266 <_vfiprintf_r+0x86>
 8019262:	2a25      	cmp	r2, #37	; 0x25
 8019264:	d1f9      	bne.n	801925a <_vfiprintf_r+0x7a>
 8019266:	ebba 0b04 	subs.w	fp, sl, r4
 801926a:	d00b      	beq.n	8019284 <_vfiprintf_r+0xa4>
 801926c:	465b      	mov	r3, fp
 801926e:	4622      	mov	r2, r4
 8019270:	4629      	mov	r1, r5
 8019272:	4630      	mov	r0, r6
 8019274:	f7ff ffa2 	bl	80191bc <__sfputs_r>
 8019278:	3001      	adds	r0, #1
 801927a:	f000 80a9 	beq.w	80193d0 <_vfiprintf_r+0x1f0>
 801927e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019280:	445a      	add	r2, fp
 8019282:	9209      	str	r2, [sp, #36]	; 0x24
 8019284:	f89a 3000 	ldrb.w	r3, [sl]
 8019288:	2b00      	cmp	r3, #0
 801928a:	f000 80a1 	beq.w	80193d0 <_vfiprintf_r+0x1f0>
 801928e:	2300      	movs	r3, #0
 8019290:	f04f 32ff 	mov.w	r2, #4294967295
 8019294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019298:	f10a 0a01 	add.w	sl, sl, #1
 801929c:	9304      	str	r3, [sp, #16]
 801929e:	9307      	str	r3, [sp, #28]
 80192a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80192a4:	931a      	str	r3, [sp, #104]	; 0x68
 80192a6:	4654      	mov	r4, sl
 80192a8:	2205      	movs	r2, #5
 80192aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80192ae:	4854      	ldr	r0, [pc, #336]	; (8019400 <_vfiprintf_r+0x220>)
 80192b0:	f7e6 ffb6 	bl	8000220 <memchr>
 80192b4:	9a04      	ldr	r2, [sp, #16]
 80192b6:	b9d8      	cbnz	r0, 80192f0 <_vfiprintf_r+0x110>
 80192b8:	06d1      	lsls	r1, r2, #27
 80192ba:	bf44      	itt	mi
 80192bc:	2320      	movmi	r3, #32
 80192be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80192c2:	0713      	lsls	r3, r2, #28
 80192c4:	bf44      	itt	mi
 80192c6:	232b      	movmi	r3, #43	; 0x2b
 80192c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80192cc:	f89a 3000 	ldrb.w	r3, [sl]
 80192d0:	2b2a      	cmp	r3, #42	; 0x2a
 80192d2:	d015      	beq.n	8019300 <_vfiprintf_r+0x120>
 80192d4:	9a07      	ldr	r2, [sp, #28]
 80192d6:	4654      	mov	r4, sl
 80192d8:	2000      	movs	r0, #0
 80192da:	f04f 0c0a 	mov.w	ip, #10
 80192de:	4621      	mov	r1, r4
 80192e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80192e4:	3b30      	subs	r3, #48	; 0x30
 80192e6:	2b09      	cmp	r3, #9
 80192e8:	d94d      	bls.n	8019386 <_vfiprintf_r+0x1a6>
 80192ea:	b1b0      	cbz	r0, 801931a <_vfiprintf_r+0x13a>
 80192ec:	9207      	str	r2, [sp, #28]
 80192ee:	e014      	b.n	801931a <_vfiprintf_r+0x13a>
 80192f0:	eba0 0308 	sub.w	r3, r0, r8
 80192f4:	fa09 f303 	lsl.w	r3, r9, r3
 80192f8:	4313      	orrs	r3, r2
 80192fa:	9304      	str	r3, [sp, #16]
 80192fc:	46a2      	mov	sl, r4
 80192fe:	e7d2      	b.n	80192a6 <_vfiprintf_r+0xc6>
 8019300:	9b03      	ldr	r3, [sp, #12]
 8019302:	1d19      	adds	r1, r3, #4
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	9103      	str	r1, [sp, #12]
 8019308:	2b00      	cmp	r3, #0
 801930a:	bfbb      	ittet	lt
 801930c:	425b      	neglt	r3, r3
 801930e:	f042 0202 	orrlt.w	r2, r2, #2
 8019312:	9307      	strge	r3, [sp, #28]
 8019314:	9307      	strlt	r3, [sp, #28]
 8019316:	bfb8      	it	lt
 8019318:	9204      	strlt	r2, [sp, #16]
 801931a:	7823      	ldrb	r3, [r4, #0]
 801931c:	2b2e      	cmp	r3, #46	; 0x2e
 801931e:	d10c      	bne.n	801933a <_vfiprintf_r+0x15a>
 8019320:	7863      	ldrb	r3, [r4, #1]
 8019322:	2b2a      	cmp	r3, #42	; 0x2a
 8019324:	d134      	bne.n	8019390 <_vfiprintf_r+0x1b0>
 8019326:	9b03      	ldr	r3, [sp, #12]
 8019328:	1d1a      	adds	r2, r3, #4
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	9203      	str	r2, [sp, #12]
 801932e:	2b00      	cmp	r3, #0
 8019330:	bfb8      	it	lt
 8019332:	f04f 33ff 	movlt.w	r3, #4294967295
 8019336:	3402      	adds	r4, #2
 8019338:	9305      	str	r3, [sp, #20]
 801933a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019410 <_vfiprintf_r+0x230>
 801933e:	7821      	ldrb	r1, [r4, #0]
 8019340:	2203      	movs	r2, #3
 8019342:	4650      	mov	r0, sl
 8019344:	f7e6 ff6c 	bl	8000220 <memchr>
 8019348:	b138      	cbz	r0, 801935a <_vfiprintf_r+0x17a>
 801934a:	9b04      	ldr	r3, [sp, #16]
 801934c:	eba0 000a 	sub.w	r0, r0, sl
 8019350:	2240      	movs	r2, #64	; 0x40
 8019352:	4082      	lsls	r2, r0
 8019354:	4313      	orrs	r3, r2
 8019356:	3401      	adds	r4, #1
 8019358:	9304      	str	r3, [sp, #16]
 801935a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801935e:	4829      	ldr	r0, [pc, #164]	; (8019404 <_vfiprintf_r+0x224>)
 8019360:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019364:	2206      	movs	r2, #6
 8019366:	f7e6 ff5b 	bl	8000220 <memchr>
 801936a:	2800      	cmp	r0, #0
 801936c:	d03f      	beq.n	80193ee <_vfiprintf_r+0x20e>
 801936e:	4b26      	ldr	r3, [pc, #152]	; (8019408 <_vfiprintf_r+0x228>)
 8019370:	bb1b      	cbnz	r3, 80193ba <_vfiprintf_r+0x1da>
 8019372:	9b03      	ldr	r3, [sp, #12]
 8019374:	3307      	adds	r3, #7
 8019376:	f023 0307 	bic.w	r3, r3, #7
 801937a:	3308      	adds	r3, #8
 801937c:	9303      	str	r3, [sp, #12]
 801937e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019380:	443b      	add	r3, r7
 8019382:	9309      	str	r3, [sp, #36]	; 0x24
 8019384:	e768      	b.n	8019258 <_vfiprintf_r+0x78>
 8019386:	fb0c 3202 	mla	r2, ip, r2, r3
 801938a:	460c      	mov	r4, r1
 801938c:	2001      	movs	r0, #1
 801938e:	e7a6      	b.n	80192de <_vfiprintf_r+0xfe>
 8019390:	2300      	movs	r3, #0
 8019392:	3401      	adds	r4, #1
 8019394:	9305      	str	r3, [sp, #20]
 8019396:	4619      	mov	r1, r3
 8019398:	f04f 0c0a 	mov.w	ip, #10
 801939c:	4620      	mov	r0, r4
 801939e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80193a2:	3a30      	subs	r2, #48	; 0x30
 80193a4:	2a09      	cmp	r2, #9
 80193a6:	d903      	bls.n	80193b0 <_vfiprintf_r+0x1d0>
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d0c6      	beq.n	801933a <_vfiprintf_r+0x15a>
 80193ac:	9105      	str	r1, [sp, #20]
 80193ae:	e7c4      	b.n	801933a <_vfiprintf_r+0x15a>
 80193b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80193b4:	4604      	mov	r4, r0
 80193b6:	2301      	movs	r3, #1
 80193b8:	e7f0      	b.n	801939c <_vfiprintf_r+0x1bc>
 80193ba:	ab03      	add	r3, sp, #12
 80193bc:	9300      	str	r3, [sp, #0]
 80193be:	462a      	mov	r2, r5
 80193c0:	4b12      	ldr	r3, [pc, #72]	; (801940c <_vfiprintf_r+0x22c>)
 80193c2:	a904      	add	r1, sp, #16
 80193c4:	4630      	mov	r0, r6
 80193c6:	f7fb f9c1 	bl	801474c <_printf_float>
 80193ca:	4607      	mov	r7, r0
 80193cc:	1c78      	adds	r0, r7, #1
 80193ce:	d1d6      	bne.n	801937e <_vfiprintf_r+0x19e>
 80193d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80193d2:	07d9      	lsls	r1, r3, #31
 80193d4:	d405      	bmi.n	80193e2 <_vfiprintf_r+0x202>
 80193d6:	89ab      	ldrh	r3, [r5, #12]
 80193d8:	059a      	lsls	r2, r3, #22
 80193da:	d402      	bmi.n	80193e2 <_vfiprintf_r+0x202>
 80193dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80193de:	f7fc f9c5 	bl	801576c <__retarget_lock_release_recursive>
 80193e2:	89ab      	ldrh	r3, [r5, #12]
 80193e4:	065b      	lsls	r3, r3, #25
 80193e6:	f53f af1d 	bmi.w	8019224 <_vfiprintf_r+0x44>
 80193ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80193ec:	e71c      	b.n	8019228 <_vfiprintf_r+0x48>
 80193ee:	ab03      	add	r3, sp, #12
 80193f0:	9300      	str	r3, [sp, #0]
 80193f2:	462a      	mov	r2, r5
 80193f4:	4b05      	ldr	r3, [pc, #20]	; (801940c <_vfiprintf_r+0x22c>)
 80193f6:	a904      	add	r1, sp, #16
 80193f8:	4630      	mov	r0, r6
 80193fa:	f7fb fc4b 	bl	8014c94 <_printf_i>
 80193fe:	e7e4      	b.n	80193ca <_vfiprintf_r+0x1ea>
 8019400:	0801c3d9 	.word	0x0801c3d9
 8019404:	0801c3e3 	.word	0x0801c3e3
 8019408:	0801474d 	.word	0x0801474d
 801940c:	080191bd 	.word	0x080191bd
 8019410:	0801c3df 	.word	0x0801c3df

08019414 <__swbuf_r>:
 8019414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019416:	460e      	mov	r6, r1
 8019418:	4614      	mov	r4, r2
 801941a:	4605      	mov	r5, r0
 801941c:	b118      	cbz	r0, 8019426 <__swbuf_r+0x12>
 801941e:	6a03      	ldr	r3, [r0, #32]
 8019420:	b90b      	cbnz	r3, 8019426 <__swbuf_r+0x12>
 8019422:	f7fb fff5 	bl	8015410 <__sinit>
 8019426:	69a3      	ldr	r3, [r4, #24]
 8019428:	60a3      	str	r3, [r4, #8]
 801942a:	89a3      	ldrh	r3, [r4, #12]
 801942c:	071a      	lsls	r2, r3, #28
 801942e:	d525      	bpl.n	801947c <__swbuf_r+0x68>
 8019430:	6923      	ldr	r3, [r4, #16]
 8019432:	b31b      	cbz	r3, 801947c <__swbuf_r+0x68>
 8019434:	6823      	ldr	r3, [r4, #0]
 8019436:	6922      	ldr	r2, [r4, #16]
 8019438:	1a98      	subs	r0, r3, r2
 801943a:	6963      	ldr	r3, [r4, #20]
 801943c:	b2f6      	uxtb	r6, r6
 801943e:	4283      	cmp	r3, r0
 8019440:	4637      	mov	r7, r6
 8019442:	dc04      	bgt.n	801944e <__swbuf_r+0x3a>
 8019444:	4621      	mov	r1, r4
 8019446:	4628      	mov	r0, r5
 8019448:	f7ff f962 	bl	8018710 <_fflush_r>
 801944c:	b9e0      	cbnz	r0, 8019488 <__swbuf_r+0x74>
 801944e:	68a3      	ldr	r3, [r4, #8]
 8019450:	3b01      	subs	r3, #1
 8019452:	60a3      	str	r3, [r4, #8]
 8019454:	6823      	ldr	r3, [r4, #0]
 8019456:	1c5a      	adds	r2, r3, #1
 8019458:	6022      	str	r2, [r4, #0]
 801945a:	701e      	strb	r6, [r3, #0]
 801945c:	6962      	ldr	r2, [r4, #20]
 801945e:	1c43      	adds	r3, r0, #1
 8019460:	429a      	cmp	r2, r3
 8019462:	d004      	beq.n	801946e <__swbuf_r+0x5a>
 8019464:	89a3      	ldrh	r3, [r4, #12]
 8019466:	07db      	lsls	r3, r3, #31
 8019468:	d506      	bpl.n	8019478 <__swbuf_r+0x64>
 801946a:	2e0a      	cmp	r6, #10
 801946c:	d104      	bne.n	8019478 <__swbuf_r+0x64>
 801946e:	4621      	mov	r1, r4
 8019470:	4628      	mov	r0, r5
 8019472:	f7ff f94d 	bl	8018710 <_fflush_r>
 8019476:	b938      	cbnz	r0, 8019488 <__swbuf_r+0x74>
 8019478:	4638      	mov	r0, r7
 801947a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801947c:	4621      	mov	r1, r4
 801947e:	4628      	mov	r0, r5
 8019480:	f000 f806 	bl	8019490 <__swsetup_r>
 8019484:	2800      	cmp	r0, #0
 8019486:	d0d5      	beq.n	8019434 <__swbuf_r+0x20>
 8019488:	f04f 37ff 	mov.w	r7, #4294967295
 801948c:	e7f4      	b.n	8019478 <__swbuf_r+0x64>
	...

08019490 <__swsetup_r>:
 8019490:	b538      	push	{r3, r4, r5, lr}
 8019492:	4b2a      	ldr	r3, [pc, #168]	; (801953c <__swsetup_r+0xac>)
 8019494:	4605      	mov	r5, r0
 8019496:	6818      	ldr	r0, [r3, #0]
 8019498:	460c      	mov	r4, r1
 801949a:	b118      	cbz	r0, 80194a4 <__swsetup_r+0x14>
 801949c:	6a03      	ldr	r3, [r0, #32]
 801949e:	b90b      	cbnz	r3, 80194a4 <__swsetup_r+0x14>
 80194a0:	f7fb ffb6 	bl	8015410 <__sinit>
 80194a4:	89a3      	ldrh	r3, [r4, #12]
 80194a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80194aa:	0718      	lsls	r0, r3, #28
 80194ac:	d422      	bmi.n	80194f4 <__swsetup_r+0x64>
 80194ae:	06d9      	lsls	r1, r3, #27
 80194b0:	d407      	bmi.n	80194c2 <__swsetup_r+0x32>
 80194b2:	2309      	movs	r3, #9
 80194b4:	602b      	str	r3, [r5, #0]
 80194b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80194ba:	81a3      	strh	r3, [r4, #12]
 80194bc:	f04f 30ff 	mov.w	r0, #4294967295
 80194c0:	e034      	b.n	801952c <__swsetup_r+0x9c>
 80194c2:	0758      	lsls	r0, r3, #29
 80194c4:	d512      	bpl.n	80194ec <__swsetup_r+0x5c>
 80194c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80194c8:	b141      	cbz	r1, 80194dc <__swsetup_r+0x4c>
 80194ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80194ce:	4299      	cmp	r1, r3
 80194d0:	d002      	beq.n	80194d8 <__swsetup_r+0x48>
 80194d2:	4628      	mov	r0, r5
 80194d4:	f7fc ffda 	bl	801648c <_free_r>
 80194d8:	2300      	movs	r3, #0
 80194da:	6363      	str	r3, [r4, #52]	; 0x34
 80194dc:	89a3      	ldrh	r3, [r4, #12]
 80194de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80194e2:	81a3      	strh	r3, [r4, #12]
 80194e4:	2300      	movs	r3, #0
 80194e6:	6063      	str	r3, [r4, #4]
 80194e8:	6923      	ldr	r3, [r4, #16]
 80194ea:	6023      	str	r3, [r4, #0]
 80194ec:	89a3      	ldrh	r3, [r4, #12]
 80194ee:	f043 0308 	orr.w	r3, r3, #8
 80194f2:	81a3      	strh	r3, [r4, #12]
 80194f4:	6923      	ldr	r3, [r4, #16]
 80194f6:	b94b      	cbnz	r3, 801950c <__swsetup_r+0x7c>
 80194f8:	89a3      	ldrh	r3, [r4, #12]
 80194fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80194fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019502:	d003      	beq.n	801950c <__swsetup_r+0x7c>
 8019504:	4621      	mov	r1, r4
 8019506:	4628      	mov	r0, r5
 8019508:	f000 f884 	bl	8019614 <__smakebuf_r>
 801950c:	89a0      	ldrh	r0, [r4, #12]
 801950e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019512:	f010 0301 	ands.w	r3, r0, #1
 8019516:	d00a      	beq.n	801952e <__swsetup_r+0x9e>
 8019518:	2300      	movs	r3, #0
 801951a:	60a3      	str	r3, [r4, #8]
 801951c:	6963      	ldr	r3, [r4, #20]
 801951e:	425b      	negs	r3, r3
 8019520:	61a3      	str	r3, [r4, #24]
 8019522:	6923      	ldr	r3, [r4, #16]
 8019524:	b943      	cbnz	r3, 8019538 <__swsetup_r+0xa8>
 8019526:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801952a:	d1c4      	bne.n	80194b6 <__swsetup_r+0x26>
 801952c:	bd38      	pop	{r3, r4, r5, pc}
 801952e:	0781      	lsls	r1, r0, #30
 8019530:	bf58      	it	pl
 8019532:	6963      	ldrpl	r3, [r4, #20]
 8019534:	60a3      	str	r3, [r4, #8]
 8019536:	e7f4      	b.n	8019522 <__swsetup_r+0x92>
 8019538:	2000      	movs	r0, #0
 801953a:	e7f7      	b.n	801952c <__swsetup_r+0x9c>
 801953c:	20000070 	.word	0x20000070

08019540 <_raise_r>:
 8019540:	291f      	cmp	r1, #31
 8019542:	b538      	push	{r3, r4, r5, lr}
 8019544:	4604      	mov	r4, r0
 8019546:	460d      	mov	r5, r1
 8019548:	d904      	bls.n	8019554 <_raise_r+0x14>
 801954a:	2316      	movs	r3, #22
 801954c:	6003      	str	r3, [r0, #0]
 801954e:	f04f 30ff 	mov.w	r0, #4294967295
 8019552:	bd38      	pop	{r3, r4, r5, pc}
 8019554:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019556:	b112      	cbz	r2, 801955e <_raise_r+0x1e>
 8019558:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801955c:	b94b      	cbnz	r3, 8019572 <_raise_r+0x32>
 801955e:	4620      	mov	r0, r4
 8019560:	f000 f830 	bl	80195c4 <_getpid_r>
 8019564:	462a      	mov	r2, r5
 8019566:	4601      	mov	r1, r0
 8019568:	4620      	mov	r0, r4
 801956a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801956e:	f000 b817 	b.w	80195a0 <_kill_r>
 8019572:	2b01      	cmp	r3, #1
 8019574:	d00a      	beq.n	801958c <_raise_r+0x4c>
 8019576:	1c59      	adds	r1, r3, #1
 8019578:	d103      	bne.n	8019582 <_raise_r+0x42>
 801957a:	2316      	movs	r3, #22
 801957c:	6003      	str	r3, [r0, #0]
 801957e:	2001      	movs	r0, #1
 8019580:	e7e7      	b.n	8019552 <_raise_r+0x12>
 8019582:	2400      	movs	r4, #0
 8019584:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019588:	4628      	mov	r0, r5
 801958a:	4798      	blx	r3
 801958c:	2000      	movs	r0, #0
 801958e:	e7e0      	b.n	8019552 <_raise_r+0x12>

08019590 <raise>:
 8019590:	4b02      	ldr	r3, [pc, #8]	; (801959c <raise+0xc>)
 8019592:	4601      	mov	r1, r0
 8019594:	6818      	ldr	r0, [r3, #0]
 8019596:	f7ff bfd3 	b.w	8019540 <_raise_r>
 801959a:	bf00      	nop
 801959c:	20000070 	.word	0x20000070

080195a0 <_kill_r>:
 80195a0:	b538      	push	{r3, r4, r5, lr}
 80195a2:	4d07      	ldr	r5, [pc, #28]	; (80195c0 <_kill_r+0x20>)
 80195a4:	2300      	movs	r3, #0
 80195a6:	4604      	mov	r4, r0
 80195a8:	4608      	mov	r0, r1
 80195aa:	4611      	mov	r1, r2
 80195ac:	602b      	str	r3, [r5, #0]
 80195ae:	f7ed fb73 	bl	8006c98 <_kill>
 80195b2:	1c43      	adds	r3, r0, #1
 80195b4:	d102      	bne.n	80195bc <_kill_r+0x1c>
 80195b6:	682b      	ldr	r3, [r5, #0]
 80195b8:	b103      	cbz	r3, 80195bc <_kill_r+0x1c>
 80195ba:	6023      	str	r3, [r4, #0]
 80195bc:	bd38      	pop	{r3, r4, r5, pc}
 80195be:	bf00      	nop
 80195c0:	200090d4 	.word	0x200090d4

080195c4 <_getpid_r>:
 80195c4:	f7ed bb60 	b.w	8006c88 <_getpid>

080195c8 <__swhatbuf_r>:
 80195c8:	b570      	push	{r4, r5, r6, lr}
 80195ca:	460c      	mov	r4, r1
 80195cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80195d0:	2900      	cmp	r1, #0
 80195d2:	b096      	sub	sp, #88	; 0x58
 80195d4:	4615      	mov	r5, r2
 80195d6:	461e      	mov	r6, r3
 80195d8:	da0d      	bge.n	80195f6 <__swhatbuf_r+0x2e>
 80195da:	89a3      	ldrh	r3, [r4, #12]
 80195dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80195e0:	f04f 0100 	mov.w	r1, #0
 80195e4:	bf0c      	ite	eq
 80195e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80195ea:	2340      	movne	r3, #64	; 0x40
 80195ec:	2000      	movs	r0, #0
 80195ee:	6031      	str	r1, [r6, #0]
 80195f0:	602b      	str	r3, [r5, #0]
 80195f2:	b016      	add	sp, #88	; 0x58
 80195f4:	bd70      	pop	{r4, r5, r6, pc}
 80195f6:	466a      	mov	r2, sp
 80195f8:	f000 f848 	bl	801968c <_fstat_r>
 80195fc:	2800      	cmp	r0, #0
 80195fe:	dbec      	blt.n	80195da <__swhatbuf_r+0x12>
 8019600:	9901      	ldr	r1, [sp, #4]
 8019602:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019606:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801960a:	4259      	negs	r1, r3
 801960c:	4159      	adcs	r1, r3
 801960e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019612:	e7eb      	b.n	80195ec <__swhatbuf_r+0x24>

08019614 <__smakebuf_r>:
 8019614:	898b      	ldrh	r3, [r1, #12]
 8019616:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019618:	079d      	lsls	r5, r3, #30
 801961a:	4606      	mov	r6, r0
 801961c:	460c      	mov	r4, r1
 801961e:	d507      	bpl.n	8019630 <__smakebuf_r+0x1c>
 8019620:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019624:	6023      	str	r3, [r4, #0]
 8019626:	6123      	str	r3, [r4, #16]
 8019628:	2301      	movs	r3, #1
 801962a:	6163      	str	r3, [r4, #20]
 801962c:	b002      	add	sp, #8
 801962e:	bd70      	pop	{r4, r5, r6, pc}
 8019630:	ab01      	add	r3, sp, #4
 8019632:	466a      	mov	r2, sp
 8019634:	f7ff ffc8 	bl	80195c8 <__swhatbuf_r>
 8019638:	9900      	ldr	r1, [sp, #0]
 801963a:	4605      	mov	r5, r0
 801963c:	4630      	mov	r0, r6
 801963e:	f7fc ff99 	bl	8016574 <_malloc_r>
 8019642:	b948      	cbnz	r0, 8019658 <__smakebuf_r+0x44>
 8019644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019648:	059a      	lsls	r2, r3, #22
 801964a:	d4ef      	bmi.n	801962c <__smakebuf_r+0x18>
 801964c:	f023 0303 	bic.w	r3, r3, #3
 8019650:	f043 0302 	orr.w	r3, r3, #2
 8019654:	81a3      	strh	r3, [r4, #12]
 8019656:	e7e3      	b.n	8019620 <__smakebuf_r+0xc>
 8019658:	89a3      	ldrh	r3, [r4, #12]
 801965a:	6020      	str	r0, [r4, #0]
 801965c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019660:	81a3      	strh	r3, [r4, #12]
 8019662:	9b00      	ldr	r3, [sp, #0]
 8019664:	6163      	str	r3, [r4, #20]
 8019666:	9b01      	ldr	r3, [sp, #4]
 8019668:	6120      	str	r0, [r4, #16]
 801966a:	b15b      	cbz	r3, 8019684 <__smakebuf_r+0x70>
 801966c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019670:	4630      	mov	r0, r6
 8019672:	f000 f81d 	bl	80196b0 <_isatty_r>
 8019676:	b128      	cbz	r0, 8019684 <__smakebuf_r+0x70>
 8019678:	89a3      	ldrh	r3, [r4, #12]
 801967a:	f023 0303 	bic.w	r3, r3, #3
 801967e:	f043 0301 	orr.w	r3, r3, #1
 8019682:	81a3      	strh	r3, [r4, #12]
 8019684:	89a3      	ldrh	r3, [r4, #12]
 8019686:	431d      	orrs	r5, r3
 8019688:	81a5      	strh	r5, [r4, #12]
 801968a:	e7cf      	b.n	801962c <__smakebuf_r+0x18>

0801968c <_fstat_r>:
 801968c:	b538      	push	{r3, r4, r5, lr}
 801968e:	4d07      	ldr	r5, [pc, #28]	; (80196ac <_fstat_r+0x20>)
 8019690:	2300      	movs	r3, #0
 8019692:	4604      	mov	r4, r0
 8019694:	4608      	mov	r0, r1
 8019696:	4611      	mov	r1, r2
 8019698:	602b      	str	r3, [r5, #0]
 801969a:	f7ed fb5c 	bl	8006d56 <_fstat>
 801969e:	1c43      	adds	r3, r0, #1
 80196a0:	d102      	bne.n	80196a8 <_fstat_r+0x1c>
 80196a2:	682b      	ldr	r3, [r5, #0]
 80196a4:	b103      	cbz	r3, 80196a8 <_fstat_r+0x1c>
 80196a6:	6023      	str	r3, [r4, #0]
 80196a8:	bd38      	pop	{r3, r4, r5, pc}
 80196aa:	bf00      	nop
 80196ac:	200090d4 	.word	0x200090d4

080196b0 <_isatty_r>:
 80196b0:	b538      	push	{r3, r4, r5, lr}
 80196b2:	4d06      	ldr	r5, [pc, #24]	; (80196cc <_isatty_r+0x1c>)
 80196b4:	2300      	movs	r3, #0
 80196b6:	4604      	mov	r4, r0
 80196b8:	4608      	mov	r0, r1
 80196ba:	602b      	str	r3, [r5, #0]
 80196bc:	f7ed fb5b 	bl	8006d76 <_isatty>
 80196c0:	1c43      	adds	r3, r0, #1
 80196c2:	d102      	bne.n	80196ca <_isatty_r+0x1a>
 80196c4:	682b      	ldr	r3, [r5, #0]
 80196c6:	b103      	cbz	r3, 80196ca <_isatty_r+0x1a>
 80196c8:	6023      	str	r3, [r4, #0]
 80196ca:	bd38      	pop	{r3, r4, r5, pc}
 80196cc:	200090d4 	.word	0x200090d4

080196d0 <pow>:
 80196d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196d2:	ed2d 8b02 	vpush	{d8}
 80196d6:	eeb0 8a40 	vmov.f32	s16, s0
 80196da:	eef0 8a60 	vmov.f32	s17, s1
 80196de:	ec55 4b11 	vmov	r4, r5, d1
 80196e2:	f000 fa2d 	bl	8019b40 <__ieee754_pow>
 80196e6:	4622      	mov	r2, r4
 80196e8:	462b      	mov	r3, r5
 80196ea:	4620      	mov	r0, r4
 80196ec:	4629      	mov	r1, r5
 80196ee:	ec57 6b10 	vmov	r6, r7, d0
 80196f2:	f7e7 fa43 	bl	8000b7c <__aeabi_dcmpun>
 80196f6:	2800      	cmp	r0, #0
 80196f8:	d13b      	bne.n	8019772 <pow+0xa2>
 80196fa:	ec51 0b18 	vmov	r0, r1, d8
 80196fe:	2200      	movs	r2, #0
 8019700:	2300      	movs	r3, #0
 8019702:	f7e7 fa09 	bl	8000b18 <__aeabi_dcmpeq>
 8019706:	b1b8      	cbz	r0, 8019738 <pow+0x68>
 8019708:	2200      	movs	r2, #0
 801970a:	2300      	movs	r3, #0
 801970c:	4620      	mov	r0, r4
 801970e:	4629      	mov	r1, r5
 8019710:	f7e7 fa02 	bl	8000b18 <__aeabi_dcmpeq>
 8019714:	2800      	cmp	r0, #0
 8019716:	d146      	bne.n	80197a6 <pow+0xd6>
 8019718:	ec45 4b10 	vmov	d0, r4, r5
 801971c:	f000 f91a 	bl	8019954 <finite>
 8019720:	b338      	cbz	r0, 8019772 <pow+0xa2>
 8019722:	2200      	movs	r2, #0
 8019724:	2300      	movs	r3, #0
 8019726:	4620      	mov	r0, r4
 8019728:	4629      	mov	r1, r5
 801972a:	f7e7 f9ff 	bl	8000b2c <__aeabi_dcmplt>
 801972e:	b300      	cbz	r0, 8019772 <pow+0xa2>
 8019730:	f7fb fff0 	bl	8015714 <__errno>
 8019734:	2322      	movs	r3, #34	; 0x22
 8019736:	e01b      	b.n	8019770 <pow+0xa0>
 8019738:	ec47 6b10 	vmov	d0, r6, r7
 801973c:	f000 f90a 	bl	8019954 <finite>
 8019740:	b9e0      	cbnz	r0, 801977c <pow+0xac>
 8019742:	eeb0 0a48 	vmov.f32	s0, s16
 8019746:	eef0 0a68 	vmov.f32	s1, s17
 801974a:	f000 f903 	bl	8019954 <finite>
 801974e:	b1a8      	cbz	r0, 801977c <pow+0xac>
 8019750:	ec45 4b10 	vmov	d0, r4, r5
 8019754:	f000 f8fe 	bl	8019954 <finite>
 8019758:	b180      	cbz	r0, 801977c <pow+0xac>
 801975a:	4632      	mov	r2, r6
 801975c:	463b      	mov	r3, r7
 801975e:	4630      	mov	r0, r6
 8019760:	4639      	mov	r1, r7
 8019762:	f7e7 fa0b 	bl	8000b7c <__aeabi_dcmpun>
 8019766:	2800      	cmp	r0, #0
 8019768:	d0e2      	beq.n	8019730 <pow+0x60>
 801976a:	f7fb ffd3 	bl	8015714 <__errno>
 801976e:	2321      	movs	r3, #33	; 0x21
 8019770:	6003      	str	r3, [r0, #0]
 8019772:	ecbd 8b02 	vpop	{d8}
 8019776:	ec47 6b10 	vmov	d0, r6, r7
 801977a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801977c:	2200      	movs	r2, #0
 801977e:	2300      	movs	r3, #0
 8019780:	4630      	mov	r0, r6
 8019782:	4639      	mov	r1, r7
 8019784:	f7e7 f9c8 	bl	8000b18 <__aeabi_dcmpeq>
 8019788:	2800      	cmp	r0, #0
 801978a:	d0f2      	beq.n	8019772 <pow+0xa2>
 801978c:	eeb0 0a48 	vmov.f32	s0, s16
 8019790:	eef0 0a68 	vmov.f32	s1, s17
 8019794:	f000 f8de 	bl	8019954 <finite>
 8019798:	2800      	cmp	r0, #0
 801979a:	d0ea      	beq.n	8019772 <pow+0xa2>
 801979c:	ec45 4b10 	vmov	d0, r4, r5
 80197a0:	f000 f8d8 	bl	8019954 <finite>
 80197a4:	e7c3      	b.n	801972e <pow+0x5e>
 80197a6:	4f01      	ldr	r7, [pc, #4]	; (80197ac <pow+0xdc>)
 80197a8:	2600      	movs	r6, #0
 80197aa:	e7e2      	b.n	8019772 <pow+0xa2>
 80197ac:	3ff00000 	.word	0x3ff00000

080197b0 <asinf>:
 80197b0:	b508      	push	{r3, lr}
 80197b2:	ed2d 8b02 	vpush	{d8}
 80197b6:	eeb0 8a40 	vmov.f32	s16, s0
 80197ba:	f000 ff9b 	bl	801a6f4 <__ieee754_asinf>
 80197be:	eeb4 8a48 	vcmp.f32	s16, s16
 80197c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197c6:	eef0 8a40 	vmov.f32	s17, s0
 80197ca:	d615      	bvs.n	80197f8 <asinf+0x48>
 80197cc:	eeb0 0a48 	vmov.f32	s0, s16
 80197d0:	f000 f873 	bl	80198ba <fabsf>
 80197d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80197d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80197dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197e0:	dd0a      	ble.n	80197f8 <asinf+0x48>
 80197e2:	f7fb ff97 	bl	8015714 <__errno>
 80197e6:	ecbd 8b02 	vpop	{d8}
 80197ea:	2321      	movs	r3, #33	; 0x21
 80197ec:	6003      	str	r3, [r0, #0]
 80197ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80197f2:	4804      	ldr	r0, [pc, #16]	; (8019804 <asinf+0x54>)
 80197f4:	f7fb bfca 	b.w	801578c <nanf>
 80197f8:	eeb0 0a68 	vmov.f32	s0, s17
 80197fc:	ecbd 8b02 	vpop	{d8}
 8019800:	bd08      	pop	{r3, pc}
 8019802:	bf00      	nop
 8019804:	0801c448 	.word	0x0801c448

08019808 <atan2f>:
 8019808:	f001 b85a 	b.w	801a8c0 <__ieee754_atan2f>

0801980c <powf>:
 801980c:	b508      	push	{r3, lr}
 801980e:	ed2d 8b04 	vpush	{d8-d9}
 8019812:	eeb0 8a60 	vmov.f32	s16, s1
 8019816:	eeb0 9a40 	vmov.f32	s18, s0
 801981a:	f001 f8f1 	bl	801aa00 <__ieee754_powf>
 801981e:	eeb4 8a48 	vcmp.f32	s16, s16
 8019822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019826:	eef0 8a40 	vmov.f32	s17, s0
 801982a:	d63e      	bvs.n	80198aa <powf+0x9e>
 801982c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8019830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019834:	d112      	bne.n	801985c <powf+0x50>
 8019836:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801983a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801983e:	d039      	beq.n	80198b4 <powf+0xa8>
 8019840:	eeb0 0a48 	vmov.f32	s0, s16
 8019844:	f000 f891 	bl	801996a <finitef>
 8019848:	b378      	cbz	r0, 80198aa <powf+0x9e>
 801984a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801984e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019852:	d52a      	bpl.n	80198aa <powf+0x9e>
 8019854:	f7fb ff5e 	bl	8015714 <__errno>
 8019858:	2322      	movs	r3, #34	; 0x22
 801985a:	e014      	b.n	8019886 <powf+0x7a>
 801985c:	f000 f885 	bl	801996a <finitef>
 8019860:	b998      	cbnz	r0, 801988a <powf+0x7e>
 8019862:	eeb0 0a49 	vmov.f32	s0, s18
 8019866:	f000 f880 	bl	801996a <finitef>
 801986a:	b170      	cbz	r0, 801988a <powf+0x7e>
 801986c:	eeb0 0a48 	vmov.f32	s0, s16
 8019870:	f000 f87b 	bl	801996a <finitef>
 8019874:	b148      	cbz	r0, 801988a <powf+0x7e>
 8019876:	eef4 8a68 	vcmp.f32	s17, s17
 801987a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801987e:	d7e9      	bvc.n	8019854 <powf+0x48>
 8019880:	f7fb ff48 	bl	8015714 <__errno>
 8019884:	2321      	movs	r3, #33	; 0x21
 8019886:	6003      	str	r3, [r0, #0]
 8019888:	e00f      	b.n	80198aa <powf+0x9e>
 801988a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801988e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019892:	d10a      	bne.n	80198aa <powf+0x9e>
 8019894:	eeb0 0a49 	vmov.f32	s0, s18
 8019898:	f000 f867 	bl	801996a <finitef>
 801989c:	b128      	cbz	r0, 80198aa <powf+0x9e>
 801989e:	eeb0 0a48 	vmov.f32	s0, s16
 80198a2:	f000 f862 	bl	801996a <finitef>
 80198a6:	2800      	cmp	r0, #0
 80198a8:	d1d4      	bne.n	8019854 <powf+0x48>
 80198aa:	eeb0 0a68 	vmov.f32	s0, s17
 80198ae:	ecbd 8b04 	vpop	{d8-d9}
 80198b2:	bd08      	pop	{r3, pc}
 80198b4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80198b8:	e7f7      	b.n	80198aa <powf+0x9e>

080198ba <fabsf>:
 80198ba:	ee10 3a10 	vmov	r3, s0
 80198be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80198c2:	ee00 3a10 	vmov	s0, r3
 80198c6:	4770      	bx	lr

080198c8 <sinf>:
 80198c8:	ee10 3a10 	vmov	r3, s0
 80198cc:	b507      	push	{r0, r1, r2, lr}
 80198ce:	4a1f      	ldr	r2, [pc, #124]	; (801994c <sinf+0x84>)
 80198d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80198d4:	4293      	cmp	r3, r2
 80198d6:	dc07      	bgt.n	80198e8 <sinf+0x20>
 80198d8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8019950 <sinf+0x88>
 80198dc:	2000      	movs	r0, #0
 80198de:	b003      	add	sp, #12
 80198e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80198e4:	f000 bebe 	b.w	801a664 <__kernel_sinf>
 80198e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80198ec:	db04      	blt.n	80198f8 <sinf+0x30>
 80198ee:	ee30 0a40 	vsub.f32	s0, s0, s0
 80198f2:	b003      	add	sp, #12
 80198f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80198f8:	4668      	mov	r0, sp
 80198fa:	f001 fb4b 	bl	801af94 <__ieee754_rem_pio2f>
 80198fe:	f000 0003 	and.w	r0, r0, #3
 8019902:	2801      	cmp	r0, #1
 8019904:	d00a      	beq.n	801991c <sinf+0x54>
 8019906:	2802      	cmp	r0, #2
 8019908:	d00f      	beq.n	801992a <sinf+0x62>
 801990a:	b9c0      	cbnz	r0, 801993e <sinf+0x76>
 801990c:	eddd 0a01 	vldr	s1, [sp, #4]
 8019910:	ed9d 0a00 	vldr	s0, [sp]
 8019914:	2001      	movs	r0, #1
 8019916:	f000 fea5 	bl	801a664 <__kernel_sinf>
 801991a:	e7ea      	b.n	80198f2 <sinf+0x2a>
 801991c:	eddd 0a01 	vldr	s1, [sp, #4]
 8019920:	ed9d 0a00 	vldr	s0, [sp]
 8019924:	f000 fe40 	bl	801a5a8 <__kernel_cosf>
 8019928:	e7e3      	b.n	80198f2 <sinf+0x2a>
 801992a:	eddd 0a01 	vldr	s1, [sp, #4]
 801992e:	ed9d 0a00 	vldr	s0, [sp]
 8019932:	2001      	movs	r0, #1
 8019934:	f000 fe96 	bl	801a664 <__kernel_sinf>
 8019938:	eeb1 0a40 	vneg.f32	s0, s0
 801993c:	e7d9      	b.n	80198f2 <sinf+0x2a>
 801993e:	eddd 0a01 	vldr	s1, [sp, #4]
 8019942:	ed9d 0a00 	vldr	s0, [sp]
 8019946:	f000 fe2f 	bl	801a5a8 <__kernel_cosf>
 801994a:	e7f5      	b.n	8019938 <sinf+0x70>
 801994c:	3f490fd8 	.word	0x3f490fd8
 8019950:	00000000 	.word	0x00000000

08019954 <finite>:
 8019954:	b082      	sub	sp, #8
 8019956:	ed8d 0b00 	vstr	d0, [sp]
 801995a:	9801      	ldr	r0, [sp, #4]
 801995c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8019960:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019964:	0fc0      	lsrs	r0, r0, #31
 8019966:	b002      	add	sp, #8
 8019968:	4770      	bx	lr

0801996a <finitef>:
 801996a:	b082      	sub	sp, #8
 801996c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8019970:	9801      	ldr	r0, [sp, #4]
 8019972:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019976:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801997a:	bfac      	ite	ge
 801997c:	2000      	movge	r0, #0
 801997e:	2001      	movlt	r0, #1
 8019980:	b002      	add	sp, #8
 8019982:	4770      	bx	lr

08019984 <__ieee754_sqrt>:
 8019984:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019988:	ec55 4b10 	vmov	r4, r5, d0
 801998c:	4e67      	ldr	r6, [pc, #412]	; (8019b2c <__ieee754_sqrt+0x1a8>)
 801998e:	43ae      	bics	r6, r5
 8019990:	ee10 0a10 	vmov	r0, s0
 8019994:	ee10 2a10 	vmov	r2, s0
 8019998:	4629      	mov	r1, r5
 801999a:	462b      	mov	r3, r5
 801999c:	d10d      	bne.n	80199ba <__ieee754_sqrt+0x36>
 801999e:	f7e6 fe53 	bl	8000648 <__aeabi_dmul>
 80199a2:	4602      	mov	r2, r0
 80199a4:	460b      	mov	r3, r1
 80199a6:	4620      	mov	r0, r4
 80199a8:	4629      	mov	r1, r5
 80199aa:	f7e6 fc97 	bl	80002dc <__adddf3>
 80199ae:	4604      	mov	r4, r0
 80199b0:	460d      	mov	r5, r1
 80199b2:	ec45 4b10 	vmov	d0, r4, r5
 80199b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199ba:	2d00      	cmp	r5, #0
 80199bc:	dc0b      	bgt.n	80199d6 <__ieee754_sqrt+0x52>
 80199be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80199c2:	4326      	orrs	r6, r4
 80199c4:	d0f5      	beq.n	80199b2 <__ieee754_sqrt+0x2e>
 80199c6:	b135      	cbz	r5, 80199d6 <__ieee754_sqrt+0x52>
 80199c8:	f7e6 fc86 	bl	80002d8 <__aeabi_dsub>
 80199cc:	4602      	mov	r2, r0
 80199ce:	460b      	mov	r3, r1
 80199d0:	f7e6 ff64 	bl	800089c <__aeabi_ddiv>
 80199d4:	e7eb      	b.n	80199ae <__ieee754_sqrt+0x2a>
 80199d6:	1509      	asrs	r1, r1, #20
 80199d8:	f000 808d 	beq.w	8019af6 <__ieee754_sqrt+0x172>
 80199dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80199e0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80199e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80199e8:	07c9      	lsls	r1, r1, #31
 80199ea:	bf5c      	itt	pl
 80199ec:	005b      	lslpl	r3, r3, #1
 80199ee:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80199f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80199f6:	bf58      	it	pl
 80199f8:	0052      	lslpl	r2, r2, #1
 80199fa:	2500      	movs	r5, #0
 80199fc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019a00:	1076      	asrs	r6, r6, #1
 8019a02:	0052      	lsls	r2, r2, #1
 8019a04:	f04f 0e16 	mov.w	lr, #22
 8019a08:	46ac      	mov	ip, r5
 8019a0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8019a0e:	eb0c 0001 	add.w	r0, ip, r1
 8019a12:	4298      	cmp	r0, r3
 8019a14:	bfde      	ittt	le
 8019a16:	1a1b      	suble	r3, r3, r0
 8019a18:	eb00 0c01 	addle.w	ip, r0, r1
 8019a1c:	186d      	addle	r5, r5, r1
 8019a1e:	005b      	lsls	r3, r3, #1
 8019a20:	f1be 0e01 	subs.w	lr, lr, #1
 8019a24:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019a28:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019a2c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8019a30:	d1ed      	bne.n	8019a0e <__ieee754_sqrt+0x8a>
 8019a32:	4674      	mov	r4, lr
 8019a34:	2720      	movs	r7, #32
 8019a36:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019a3a:	4563      	cmp	r3, ip
 8019a3c:	eb01 000e 	add.w	r0, r1, lr
 8019a40:	dc02      	bgt.n	8019a48 <__ieee754_sqrt+0xc4>
 8019a42:	d113      	bne.n	8019a6c <__ieee754_sqrt+0xe8>
 8019a44:	4290      	cmp	r0, r2
 8019a46:	d811      	bhi.n	8019a6c <__ieee754_sqrt+0xe8>
 8019a48:	2800      	cmp	r0, #0
 8019a4a:	eb00 0e01 	add.w	lr, r0, r1
 8019a4e:	da57      	bge.n	8019b00 <__ieee754_sqrt+0x17c>
 8019a50:	f1be 0f00 	cmp.w	lr, #0
 8019a54:	db54      	blt.n	8019b00 <__ieee754_sqrt+0x17c>
 8019a56:	f10c 0801 	add.w	r8, ip, #1
 8019a5a:	eba3 030c 	sub.w	r3, r3, ip
 8019a5e:	4290      	cmp	r0, r2
 8019a60:	bf88      	it	hi
 8019a62:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8019a66:	1a12      	subs	r2, r2, r0
 8019a68:	440c      	add	r4, r1
 8019a6a:	46c4      	mov	ip, r8
 8019a6c:	005b      	lsls	r3, r3, #1
 8019a6e:	3f01      	subs	r7, #1
 8019a70:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019a74:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019a78:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8019a7c:	d1dd      	bne.n	8019a3a <__ieee754_sqrt+0xb6>
 8019a7e:	4313      	orrs	r3, r2
 8019a80:	d01b      	beq.n	8019aba <__ieee754_sqrt+0x136>
 8019a82:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8019b30 <__ieee754_sqrt+0x1ac>
 8019a86:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8019b34 <__ieee754_sqrt+0x1b0>
 8019a8a:	e9da 0100 	ldrd	r0, r1, [sl]
 8019a8e:	e9db 2300 	ldrd	r2, r3, [fp]
 8019a92:	f7e6 fc21 	bl	80002d8 <__aeabi_dsub>
 8019a96:	e9da 8900 	ldrd	r8, r9, [sl]
 8019a9a:	4602      	mov	r2, r0
 8019a9c:	460b      	mov	r3, r1
 8019a9e:	4640      	mov	r0, r8
 8019aa0:	4649      	mov	r1, r9
 8019aa2:	f7e7 f84d 	bl	8000b40 <__aeabi_dcmple>
 8019aa6:	b140      	cbz	r0, 8019aba <__ieee754_sqrt+0x136>
 8019aa8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8019aac:	e9da 0100 	ldrd	r0, r1, [sl]
 8019ab0:	e9db 2300 	ldrd	r2, r3, [fp]
 8019ab4:	d126      	bne.n	8019b04 <__ieee754_sqrt+0x180>
 8019ab6:	3501      	adds	r5, #1
 8019ab8:	463c      	mov	r4, r7
 8019aba:	106a      	asrs	r2, r5, #1
 8019abc:	0863      	lsrs	r3, r4, #1
 8019abe:	07e9      	lsls	r1, r5, #31
 8019ac0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8019ac4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8019ac8:	bf48      	it	mi
 8019aca:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8019ace:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8019ad2:	461c      	mov	r4, r3
 8019ad4:	e76d      	b.n	80199b2 <__ieee754_sqrt+0x2e>
 8019ad6:	0ad3      	lsrs	r3, r2, #11
 8019ad8:	3815      	subs	r0, #21
 8019ada:	0552      	lsls	r2, r2, #21
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d0fa      	beq.n	8019ad6 <__ieee754_sqrt+0x152>
 8019ae0:	02dc      	lsls	r4, r3, #11
 8019ae2:	d50a      	bpl.n	8019afa <__ieee754_sqrt+0x176>
 8019ae4:	f1c1 0420 	rsb	r4, r1, #32
 8019ae8:	fa22 f404 	lsr.w	r4, r2, r4
 8019aec:	1e4d      	subs	r5, r1, #1
 8019aee:	408a      	lsls	r2, r1
 8019af0:	4323      	orrs	r3, r4
 8019af2:	1b41      	subs	r1, r0, r5
 8019af4:	e772      	b.n	80199dc <__ieee754_sqrt+0x58>
 8019af6:	4608      	mov	r0, r1
 8019af8:	e7f0      	b.n	8019adc <__ieee754_sqrt+0x158>
 8019afa:	005b      	lsls	r3, r3, #1
 8019afc:	3101      	adds	r1, #1
 8019afe:	e7ef      	b.n	8019ae0 <__ieee754_sqrt+0x15c>
 8019b00:	46e0      	mov	r8, ip
 8019b02:	e7aa      	b.n	8019a5a <__ieee754_sqrt+0xd6>
 8019b04:	f7e6 fbea 	bl	80002dc <__adddf3>
 8019b08:	e9da 8900 	ldrd	r8, r9, [sl]
 8019b0c:	4602      	mov	r2, r0
 8019b0e:	460b      	mov	r3, r1
 8019b10:	4640      	mov	r0, r8
 8019b12:	4649      	mov	r1, r9
 8019b14:	f7e7 f80a 	bl	8000b2c <__aeabi_dcmplt>
 8019b18:	b120      	cbz	r0, 8019b24 <__ieee754_sqrt+0x1a0>
 8019b1a:	1ca0      	adds	r0, r4, #2
 8019b1c:	bf08      	it	eq
 8019b1e:	3501      	addeq	r5, #1
 8019b20:	3402      	adds	r4, #2
 8019b22:	e7ca      	b.n	8019aba <__ieee754_sqrt+0x136>
 8019b24:	3401      	adds	r4, #1
 8019b26:	f024 0401 	bic.w	r4, r4, #1
 8019b2a:	e7c6      	b.n	8019aba <__ieee754_sqrt+0x136>
 8019b2c:	7ff00000 	.word	0x7ff00000
 8019b30:	200001e0 	.word	0x200001e0
 8019b34:	200001e8 	.word	0x200001e8

08019b38 <__ieee754_sqrtf>:
 8019b38:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019b3c:	4770      	bx	lr
	...

08019b40 <__ieee754_pow>:
 8019b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b44:	ed2d 8b06 	vpush	{d8-d10}
 8019b48:	b089      	sub	sp, #36	; 0x24
 8019b4a:	ed8d 1b00 	vstr	d1, [sp]
 8019b4e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8019b52:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8019b56:	ea58 0102 	orrs.w	r1, r8, r2
 8019b5a:	ec57 6b10 	vmov	r6, r7, d0
 8019b5e:	d115      	bne.n	8019b8c <__ieee754_pow+0x4c>
 8019b60:	19b3      	adds	r3, r6, r6
 8019b62:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8019b66:	4152      	adcs	r2, r2
 8019b68:	4299      	cmp	r1, r3
 8019b6a:	4b89      	ldr	r3, [pc, #548]	; (8019d90 <__ieee754_pow+0x250>)
 8019b6c:	4193      	sbcs	r3, r2
 8019b6e:	f080 84d1 	bcs.w	801a514 <__ieee754_pow+0x9d4>
 8019b72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019b76:	4630      	mov	r0, r6
 8019b78:	4639      	mov	r1, r7
 8019b7a:	f7e6 fbaf 	bl	80002dc <__adddf3>
 8019b7e:	ec41 0b10 	vmov	d0, r0, r1
 8019b82:	b009      	add	sp, #36	; 0x24
 8019b84:	ecbd 8b06 	vpop	{d8-d10}
 8019b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b8c:	4b81      	ldr	r3, [pc, #516]	; (8019d94 <__ieee754_pow+0x254>)
 8019b8e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8019b92:	429c      	cmp	r4, r3
 8019b94:	ee10 aa10 	vmov	sl, s0
 8019b98:	463d      	mov	r5, r7
 8019b9a:	dc06      	bgt.n	8019baa <__ieee754_pow+0x6a>
 8019b9c:	d101      	bne.n	8019ba2 <__ieee754_pow+0x62>
 8019b9e:	2e00      	cmp	r6, #0
 8019ba0:	d1e7      	bne.n	8019b72 <__ieee754_pow+0x32>
 8019ba2:	4598      	cmp	r8, r3
 8019ba4:	dc01      	bgt.n	8019baa <__ieee754_pow+0x6a>
 8019ba6:	d10f      	bne.n	8019bc8 <__ieee754_pow+0x88>
 8019ba8:	b172      	cbz	r2, 8019bc8 <__ieee754_pow+0x88>
 8019baa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8019bae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8019bb2:	ea55 050a 	orrs.w	r5, r5, sl
 8019bb6:	d1dc      	bne.n	8019b72 <__ieee754_pow+0x32>
 8019bb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019bbc:	18db      	adds	r3, r3, r3
 8019bbe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8019bc2:	4152      	adcs	r2, r2
 8019bc4:	429d      	cmp	r5, r3
 8019bc6:	e7d0      	b.n	8019b6a <__ieee754_pow+0x2a>
 8019bc8:	2d00      	cmp	r5, #0
 8019bca:	da3b      	bge.n	8019c44 <__ieee754_pow+0x104>
 8019bcc:	4b72      	ldr	r3, [pc, #456]	; (8019d98 <__ieee754_pow+0x258>)
 8019bce:	4598      	cmp	r8, r3
 8019bd0:	dc51      	bgt.n	8019c76 <__ieee754_pow+0x136>
 8019bd2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8019bd6:	4598      	cmp	r8, r3
 8019bd8:	f340 84ab 	ble.w	801a532 <__ieee754_pow+0x9f2>
 8019bdc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019be0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019be4:	2b14      	cmp	r3, #20
 8019be6:	dd0f      	ble.n	8019c08 <__ieee754_pow+0xc8>
 8019be8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8019bec:	fa22 f103 	lsr.w	r1, r2, r3
 8019bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8019bf4:	4293      	cmp	r3, r2
 8019bf6:	f040 849c 	bne.w	801a532 <__ieee754_pow+0x9f2>
 8019bfa:	f001 0101 	and.w	r1, r1, #1
 8019bfe:	f1c1 0302 	rsb	r3, r1, #2
 8019c02:	9304      	str	r3, [sp, #16]
 8019c04:	b182      	cbz	r2, 8019c28 <__ieee754_pow+0xe8>
 8019c06:	e05f      	b.n	8019cc8 <__ieee754_pow+0x188>
 8019c08:	2a00      	cmp	r2, #0
 8019c0a:	d15b      	bne.n	8019cc4 <__ieee754_pow+0x184>
 8019c0c:	f1c3 0314 	rsb	r3, r3, #20
 8019c10:	fa48 f103 	asr.w	r1, r8, r3
 8019c14:	fa01 f303 	lsl.w	r3, r1, r3
 8019c18:	4543      	cmp	r3, r8
 8019c1a:	f040 8487 	bne.w	801a52c <__ieee754_pow+0x9ec>
 8019c1e:	f001 0101 	and.w	r1, r1, #1
 8019c22:	f1c1 0302 	rsb	r3, r1, #2
 8019c26:	9304      	str	r3, [sp, #16]
 8019c28:	4b5c      	ldr	r3, [pc, #368]	; (8019d9c <__ieee754_pow+0x25c>)
 8019c2a:	4598      	cmp	r8, r3
 8019c2c:	d132      	bne.n	8019c94 <__ieee754_pow+0x154>
 8019c2e:	f1b9 0f00 	cmp.w	r9, #0
 8019c32:	f280 8477 	bge.w	801a524 <__ieee754_pow+0x9e4>
 8019c36:	4959      	ldr	r1, [pc, #356]	; (8019d9c <__ieee754_pow+0x25c>)
 8019c38:	4632      	mov	r2, r6
 8019c3a:	463b      	mov	r3, r7
 8019c3c:	2000      	movs	r0, #0
 8019c3e:	f7e6 fe2d 	bl	800089c <__aeabi_ddiv>
 8019c42:	e79c      	b.n	8019b7e <__ieee754_pow+0x3e>
 8019c44:	2300      	movs	r3, #0
 8019c46:	9304      	str	r3, [sp, #16]
 8019c48:	2a00      	cmp	r2, #0
 8019c4a:	d13d      	bne.n	8019cc8 <__ieee754_pow+0x188>
 8019c4c:	4b51      	ldr	r3, [pc, #324]	; (8019d94 <__ieee754_pow+0x254>)
 8019c4e:	4598      	cmp	r8, r3
 8019c50:	d1ea      	bne.n	8019c28 <__ieee754_pow+0xe8>
 8019c52:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8019c56:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8019c5a:	ea53 030a 	orrs.w	r3, r3, sl
 8019c5e:	f000 8459 	beq.w	801a514 <__ieee754_pow+0x9d4>
 8019c62:	4b4f      	ldr	r3, [pc, #316]	; (8019da0 <__ieee754_pow+0x260>)
 8019c64:	429c      	cmp	r4, r3
 8019c66:	dd08      	ble.n	8019c7a <__ieee754_pow+0x13a>
 8019c68:	f1b9 0f00 	cmp.w	r9, #0
 8019c6c:	f2c0 8456 	blt.w	801a51c <__ieee754_pow+0x9dc>
 8019c70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019c74:	e783      	b.n	8019b7e <__ieee754_pow+0x3e>
 8019c76:	2302      	movs	r3, #2
 8019c78:	e7e5      	b.n	8019c46 <__ieee754_pow+0x106>
 8019c7a:	f1b9 0f00 	cmp.w	r9, #0
 8019c7e:	f04f 0000 	mov.w	r0, #0
 8019c82:	f04f 0100 	mov.w	r1, #0
 8019c86:	f6bf af7a 	bge.w	8019b7e <__ieee754_pow+0x3e>
 8019c8a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8019c8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019c92:	e774      	b.n	8019b7e <__ieee754_pow+0x3e>
 8019c94:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8019c98:	d106      	bne.n	8019ca8 <__ieee754_pow+0x168>
 8019c9a:	4632      	mov	r2, r6
 8019c9c:	463b      	mov	r3, r7
 8019c9e:	4630      	mov	r0, r6
 8019ca0:	4639      	mov	r1, r7
 8019ca2:	f7e6 fcd1 	bl	8000648 <__aeabi_dmul>
 8019ca6:	e76a      	b.n	8019b7e <__ieee754_pow+0x3e>
 8019ca8:	4b3e      	ldr	r3, [pc, #248]	; (8019da4 <__ieee754_pow+0x264>)
 8019caa:	4599      	cmp	r9, r3
 8019cac:	d10c      	bne.n	8019cc8 <__ieee754_pow+0x188>
 8019cae:	2d00      	cmp	r5, #0
 8019cb0:	db0a      	blt.n	8019cc8 <__ieee754_pow+0x188>
 8019cb2:	ec47 6b10 	vmov	d0, r6, r7
 8019cb6:	b009      	add	sp, #36	; 0x24
 8019cb8:	ecbd 8b06 	vpop	{d8-d10}
 8019cbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cc0:	f7ff be60 	b.w	8019984 <__ieee754_sqrt>
 8019cc4:	2300      	movs	r3, #0
 8019cc6:	9304      	str	r3, [sp, #16]
 8019cc8:	ec47 6b10 	vmov	d0, r6, r7
 8019ccc:	f000 fc62 	bl	801a594 <fabs>
 8019cd0:	ec51 0b10 	vmov	r0, r1, d0
 8019cd4:	f1ba 0f00 	cmp.w	sl, #0
 8019cd8:	d129      	bne.n	8019d2e <__ieee754_pow+0x1ee>
 8019cda:	b124      	cbz	r4, 8019ce6 <__ieee754_pow+0x1a6>
 8019cdc:	4b2f      	ldr	r3, [pc, #188]	; (8019d9c <__ieee754_pow+0x25c>)
 8019cde:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8019ce2:	429a      	cmp	r2, r3
 8019ce4:	d123      	bne.n	8019d2e <__ieee754_pow+0x1ee>
 8019ce6:	f1b9 0f00 	cmp.w	r9, #0
 8019cea:	da05      	bge.n	8019cf8 <__ieee754_pow+0x1b8>
 8019cec:	4602      	mov	r2, r0
 8019cee:	460b      	mov	r3, r1
 8019cf0:	2000      	movs	r0, #0
 8019cf2:	492a      	ldr	r1, [pc, #168]	; (8019d9c <__ieee754_pow+0x25c>)
 8019cf4:	f7e6 fdd2 	bl	800089c <__aeabi_ddiv>
 8019cf8:	2d00      	cmp	r5, #0
 8019cfa:	f6bf af40 	bge.w	8019b7e <__ieee754_pow+0x3e>
 8019cfe:	9b04      	ldr	r3, [sp, #16]
 8019d00:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019d04:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019d08:	431c      	orrs	r4, r3
 8019d0a:	d108      	bne.n	8019d1e <__ieee754_pow+0x1de>
 8019d0c:	4602      	mov	r2, r0
 8019d0e:	460b      	mov	r3, r1
 8019d10:	4610      	mov	r0, r2
 8019d12:	4619      	mov	r1, r3
 8019d14:	f7e6 fae0 	bl	80002d8 <__aeabi_dsub>
 8019d18:	4602      	mov	r2, r0
 8019d1a:	460b      	mov	r3, r1
 8019d1c:	e78f      	b.n	8019c3e <__ieee754_pow+0xfe>
 8019d1e:	9b04      	ldr	r3, [sp, #16]
 8019d20:	2b01      	cmp	r3, #1
 8019d22:	f47f af2c 	bne.w	8019b7e <__ieee754_pow+0x3e>
 8019d26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019d2a:	4619      	mov	r1, r3
 8019d2c:	e727      	b.n	8019b7e <__ieee754_pow+0x3e>
 8019d2e:	0feb      	lsrs	r3, r5, #31
 8019d30:	3b01      	subs	r3, #1
 8019d32:	9306      	str	r3, [sp, #24]
 8019d34:	9a06      	ldr	r2, [sp, #24]
 8019d36:	9b04      	ldr	r3, [sp, #16]
 8019d38:	4313      	orrs	r3, r2
 8019d3a:	d102      	bne.n	8019d42 <__ieee754_pow+0x202>
 8019d3c:	4632      	mov	r2, r6
 8019d3e:	463b      	mov	r3, r7
 8019d40:	e7e6      	b.n	8019d10 <__ieee754_pow+0x1d0>
 8019d42:	4b19      	ldr	r3, [pc, #100]	; (8019da8 <__ieee754_pow+0x268>)
 8019d44:	4598      	cmp	r8, r3
 8019d46:	f340 80fb 	ble.w	8019f40 <__ieee754_pow+0x400>
 8019d4a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8019d4e:	4598      	cmp	r8, r3
 8019d50:	4b13      	ldr	r3, [pc, #76]	; (8019da0 <__ieee754_pow+0x260>)
 8019d52:	dd0c      	ble.n	8019d6e <__ieee754_pow+0x22e>
 8019d54:	429c      	cmp	r4, r3
 8019d56:	dc0f      	bgt.n	8019d78 <__ieee754_pow+0x238>
 8019d58:	f1b9 0f00 	cmp.w	r9, #0
 8019d5c:	da0f      	bge.n	8019d7e <__ieee754_pow+0x23e>
 8019d5e:	2000      	movs	r0, #0
 8019d60:	b009      	add	sp, #36	; 0x24
 8019d62:	ecbd 8b06 	vpop	{d8-d10}
 8019d66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d6a:	f001 bbba 	b.w	801b4e2 <__math_oflow>
 8019d6e:	429c      	cmp	r4, r3
 8019d70:	dbf2      	blt.n	8019d58 <__ieee754_pow+0x218>
 8019d72:	4b0a      	ldr	r3, [pc, #40]	; (8019d9c <__ieee754_pow+0x25c>)
 8019d74:	429c      	cmp	r4, r3
 8019d76:	dd19      	ble.n	8019dac <__ieee754_pow+0x26c>
 8019d78:	f1b9 0f00 	cmp.w	r9, #0
 8019d7c:	dcef      	bgt.n	8019d5e <__ieee754_pow+0x21e>
 8019d7e:	2000      	movs	r0, #0
 8019d80:	b009      	add	sp, #36	; 0x24
 8019d82:	ecbd 8b06 	vpop	{d8-d10}
 8019d86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d8a:	f001 bba1 	b.w	801b4d0 <__math_uflow>
 8019d8e:	bf00      	nop
 8019d90:	fff00000 	.word	0xfff00000
 8019d94:	7ff00000 	.word	0x7ff00000
 8019d98:	433fffff 	.word	0x433fffff
 8019d9c:	3ff00000 	.word	0x3ff00000
 8019da0:	3fefffff 	.word	0x3fefffff
 8019da4:	3fe00000 	.word	0x3fe00000
 8019da8:	41e00000 	.word	0x41e00000
 8019dac:	4b60      	ldr	r3, [pc, #384]	; (8019f30 <__ieee754_pow+0x3f0>)
 8019dae:	2200      	movs	r2, #0
 8019db0:	f7e6 fa92 	bl	80002d8 <__aeabi_dsub>
 8019db4:	a354      	add	r3, pc, #336	; (adr r3, 8019f08 <__ieee754_pow+0x3c8>)
 8019db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dba:	4604      	mov	r4, r0
 8019dbc:	460d      	mov	r5, r1
 8019dbe:	f7e6 fc43 	bl	8000648 <__aeabi_dmul>
 8019dc2:	a353      	add	r3, pc, #332	; (adr r3, 8019f10 <__ieee754_pow+0x3d0>)
 8019dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dc8:	4606      	mov	r6, r0
 8019dca:	460f      	mov	r7, r1
 8019dcc:	4620      	mov	r0, r4
 8019dce:	4629      	mov	r1, r5
 8019dd0:	f7e6 fc3a 	bl	8000648 <__aeabi_dmul>
 8019dd4:	4b57      	ldr	r3, [pc, #348]	; (8019f34 <__ieee754_pow+0x3f4>)
 8019dd6:	4682      	mov	sl, r0
 8019dd8:	468b      	mov	fp, r1
 8019dda:	2200      	movs	r2, #0
 8019ddc:	4620      	mov	r0, r4
 8019dde:	4629      	mov	r1, r5
 8019de0:	f7e6 fc32 	bl	8000648 <__aeabi_dmul>
 8019de4:	4602      	mov	r2, r0
 8019de6:	460b      	mov	r3, r1
 8019de8:	a14b      	add	r1, pc, #300	; (adr r1, 8019f18 <__ieee754_pow+0x3d8>)
 8019dea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019dee:	f7e6 fa73 	bl	80002d8 <__aeabi_dsub>
 8019df2:	4622      	mov	r2, r4
 8019df4:	462b      	mov	r3, r5
 8019df6:	f7e6 fc27 	bl	8000648 <__aeabi_dmul>
 8019dfa:	4602      	mov	r2, r0
 8019dfc:	460b      	mov	r3, r1
 8019dfe:	2000      	movs	r0, #0
 8019e00:	494d      	ldr	r1, [pc, #308]	; (8019f38 <__ieee754_pow+0x3f8>)
 8019e02:	f7e6 fa69 	bl	80002d8 <__aeabi_dsub>
 8019e06:	4622      	mov	r2, r4
 8019e08:	4680      	mov	r8, r0
 8019e0a:	4689      	mov	r9, r1
 8019e0c:	462b      	mov	r3, r5
 8019e0e:	4620      	mov	r0, r4
 8019e10:	4629      	mov	r1, r5
 8019e12:	f7e6 fc19 	bl	8000648 <__aeabi_dmul>
 8019e16:	4602      	mov	r2, r0
 8019e18:	460b      	mov	r3, r1
 8019e1a:	4640      	mov	r0, r8
 8019e1c:	4649      	mov	r1, r9
 8019e1e:	f7e6 fc13 	bl	8000648 <__aeabi_dmul>
 8019e22:	a33f      	add	r3, pc, #252	; (adr r3, 8019f20 <__ieee754_pow+0x3e0>)
 8019e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e28:	f7e6 fc0e 	bl	8000648 <__aeabi_dmul>
 8019e2c:	4602      	mov	r2, r0
 8019e2e:	460b      	mov	r3, r1
 8019e30:	4650      	mov	r0, sl
 8019e32:	4659      	mov	r1, fp
 8019e34:	f7e6 fa50 	bl	80002d8 <__aeabi_dsub>
 8019e38:	4602      	mov	r2, r0
 8019e3a:	460b      	mov	r3, r1
 8019e3c:	4680      	mov	r8, r0
 8019e3e:	4689      	mov	r9, r1
 8019e40:	4630      	mov	r0, r6
 8019e42:	4639      	mov	r1, r7
 8019e44:	f7e6 fa4a 	bl	80002dc <__adddf3>
 8019e48:	2000      	movs	r0, #0
 8019e4a:	4632      	mov	r2, r6
 8019e4c:	463b      	mov	r3, r7
 8019e4e:	4604      	mov	r4, r0
 8019e50:	460d      	mov	r5, r1
 8019e52:	f7e6 fa41 	bl	80002d8 <__aeabi_dsub>
 8019e56:	4602      	mov	r2, r0
 8019e58:	460b      	mov	r3, r1
 8019e5a:	4640      	mov	r0, r8
 8019e5c:	4649      	mov	r1, r9
 8019e5e:	f7e6 fa3b 	bl	80002d8 <__aeabi_dsub>
 8019e62:	9b04      	ldr	r3, [sp, #16]
 8019e64:	9a06      	ldr	r2, [sp, #24]
 8019e66:	3b01      	subs	r3, #1
 8019e68:	4313      	orrs	r3, r2
 8019e6a:	4682      	mov	sl, r0
 8019e6c:	468b      	mov	fp, r1
 8019e6e:	f040 81e7 	bne.w	801a240 <__ieee754_pow+0x700>
 8019e72:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8019f28 <__ieee754_pow+0x3e8>
 8019e76:	eeb0 8a47 	vmov.f32	s16, s14
 8019e7a:	eef0 8a67 	vmov.f32	s17, s15
 8019e7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8019e82:	2600      	movs	r6, #0
 8019e84:	4632      	mov	r2, r6
 8019e86:	463b      	mov	r3, r7
 8019e88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019e8c:	f7e6 fa24 	bl	80002d8 <__aeabi_dsub>
 8019e90:	4622      	mov	r2, r4
 8019e92:	462b      	mov	r3, r5
 8019e94:	f7e6 fbd8 	bl	8000648 <__aeabi_dmul>
 8019e98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019e9c:	4680      	mov	r8, r0
 8019e9e:	4689      	mov	r9, r1
 8019ea0:	4650      	mov	r0, sl
 8019ea2:	4659      	mov	r1, fp
 8019ea4:	f7e6 fbd0 	bl	8000648 <__aeabi_dmul>
 8019ea8:	4602      	mov	r2, r0
 8019eaa:	460b      	mov	r3, r1
 8019eac:	4640      	mov	r0, r8
 8019eae:	4649      	mov	r1, r9
 8019eb0:	f7e6 fa14 	bl	80002dc <__adddf3>
 8019eb4:	4632      	mov	r2, r6
 8019eb6:	463b      	mov	r3, r7
 8019eb8:	4680      	mov	r8, r0
 8019eba:	4689      	mov	r9, r1
 8019ebc:	4620      	mov	r0, r4
 8019ebe:	4629      	mov	r1, r5
 8019ec0:	f7e6 fbc2 	bl	8000648 <__aeabi_dmul>
 8019ec4:	460b      	mov	r3, r1
 8019ec6:	4604      	mov	r4, r0
 8019ec8:	460d      	mov	r5, r1
 8019eca:	4602      	mov	r2, r0
 8019ecc:	4649      	mov	r1, r9
 8019ece:	4640      	mov	r0, r8
 8019ed0:	f7e6 fa04 	bl	80002dc <__adddf3>
 8019ed4:	4b19      	ldr	r3, [pc, #100]	; (8019f3c <__ieee754_pow+0x3fc>)
 8019ed6:	4299      	cmp	r1, r3
 8019ed8:	ec45 4b19 	vmov	d9, r4, r5
 8019edc:	4606      	mov	r6, r0
 8019ede:	460f      	mov	r7, r1
 8019ee0:	468b      	mov	fp, r1
 8019ee2:	f340 82f0 	ble.w	801a4c6 <__ieee754_pow+0x986>
 8019ee6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8019eea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8019eee:	4303      	orrs	r3, r0
 8019ef0:	f000 81e4 	beq.w	801a2bc <__ieee754_pow+0x77c>
 8019ef4:	ec51 0b18 	vmov	r0, r1, d8
 8019ef8:	2200      	movs	r2, #0
 8019efa:	2300      	movs	r3, #0
 8019efc:	f7e6 fe16 	bl	8000b2c <__aeabi_dcmplt>
 8019f00:	3800      	subs	r0, #0
 8019f02:	bf18      	it	ne
 8019f04:	2001      	movne	r0, #1
 8019f06:	e72b      	b.n	8019d60 <__ieee754_pow+0x220>
 8019f08:	60000000 	.word	0x60000000
 8019f0c:	3ff71547 	.word	0x3ff71547
 8019f10:	f85ddf44 	.word	0xf85ddf44
 8019f14:	3e54ae0b 	.word	0x3e54ae0b
 8019f18:	55555555 	.word	0x55555555
 8019f1c:	3fd55555 	.word	0x3fd55555
 8019f20:	652b82fe 	.word	0x652b82fe
 8019f24:	3ff71547 	.word	0x3ff71547
 8019f28:	00000000 	.word	0x00000000
 8019f2c:	bff00000 	.word	0xbff00000
 8019f30:	3ff00000 	.word	0x3ff00000
 8019f34:	3fd00000 	.word	0x3fd00000
 8019f38:	3fe00000 	.word	0x3fe00000
 8019f3c:	408fffff 	.word	0x408fffff
 8019f40:	4bd5      	ldr	r3, [pc, #852]	; (801a298 <__ieee754_pow+0x758>)
 8019f42:	402b      	ands	r3, r5
 8019f44:	2200      	movs	r2, #0
 8019f46:	b92b      	cbnz	r3, 8019f54 <__ieee754_pow+0x414>
 8019f48:	4bd4      	ldr	r3, [pc, #848]	; (801a29c <__ieee754_pow+0x75c>)
 8019f4a:	f7e6 fb7d 	bl	8000648 <__aeabi_dmul>
 8019f4e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8019f52:	460c      	mov	r4, r1
 8019f54:	1523      	asrs	r3, r4, #20
 8019f56:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019f5a:	4413      	add	r3, r2
 8019f5c:	9305      	str	r3, [sp, #20]
 8019f5e:	4bd0      	ldr	r3, [pc, #832]	; (801a2a0 <__ieee754_pow+0x760>)
 8019f60:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8019f64:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019f68:	429c      	cmp	r4, r3
 8019f6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019f6e:	dd08      	ble.n	8019f82 <__ieee754_pow+0x442>
 8019f70:	4bcc      	ldr	r3, [pc, #816]	; (801a2a4 <__ieee754_pow+0x764>)
 8019f72:	429c      	cmp	r4, r3
 8019f74:	f340 8162 	ble.w	801a23c <__ieee754_pow+0x6fc>
 8019f78:	9b05      	ldr	r3, [sp, #20]
 8019f7a:	3301      	adds	r3, #1
 8019f7c:	9305      	str	r3, [sp, #20]
 8019f7e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8019f82:	2400      	movs	r4, #0
 8019f84:	00e3      	lsls	r3, r4, #3
 8019f86:	9307      	str	r3, [sp, #28]
 8019f88:	4bc7      	ldr	r3, [pc, #796]	; (801a2a8 <__ieee754_pow+0x768>)
 8019f8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019f8e:	ed93 7b00 	vldr	d7, [r3]
 8019f92:	4629      	mov	r1, r5
 8019f94:	ec53 2b17 	vmov	r2, r3, d7
 8019f98:	eeb0 9a47 	vmov.f32	s18, s14
 8019f9c:	eef0 9a67 	vmov.f32	s19, s15
 8019fa0:	4682      	mov	sl, r0
 8019fa2:	f7e6 f999 	bl	80002d8 <__aeabi_dsub>
 8019fa6:	4652      	mov	r2, sl
 8019fa8:	4606      	mov	r6, r0
 8019faa:	460f      	mov	r7, r1
 8019fac:	462b      	mov	r3, r5
 8019fae:	ec51 0b19 	vmov	r0, r1, d9
 8019fb2:	f7e6 f993 	bl	80002dc <__adddf3>
 8019fb6:	4602      	mov	r2, r0
 8019fb8:	460b      	mov	r3, r1
 8019fba:	2000      	movs	r0, #0
 8019fbc:	49bb      	ldr	r1, [pc, #748]	; (801a2ac <__ieee754_pow+0x76c>)
 8019fbe:	f7e6 fc6d 	bl	800089c <__aeabi_ddiv>
 8019fc2:	ec41 0b1a 	vmov	d10, r0, r1
 8019fc6:	4602      	mov	r2, r0
 8019fc8:	460b      	mov	r3, r1
 8019fca:	4630      	mov	r0, r6
 8019fcc:	4639      	mov	r1, r7
 8019fce:	f7e6 fb3b 	bl	8000648 <__aeabi_dmul>
 8019fd2:	2300      	movs	r3, #0
 8019fd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019fd8:	9302      	str	r3, [sp, #8]
 8019fda:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8019fde:	46ab      	mov	fp, r5
 8019fe0:	106d      	asrs	r5, r5, #1
 8019fe2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8019fe6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8019fea:	ec41 0b18 	vmov	d8, r0, r1
 8019fee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8019ff2:	2200      	movs	r2, #0
 8019ff4:	4640      	mov	r0, r8
 8019ff6:	4649      	mov	r1, r9
 8019ff8:	4614      	mov	r4, r2
 8019ffa:	461d      	mov	r5, r3
 8019ffc:	f7e6 fb24 	bl	8000648 <__aeabi_dmul>
 801a000:	4602      	mov	r2, r0
 801a002:	460b      	mov	r3, r1
 801a004:	4630      	mov	r0, r6
 801a006:	4639      	mov	r1, r7
 801a008:	f7e6 f966 	bl	80002d8 <__aeabi_dsub>
 801a00c:	ec53 2b19 	vmov	r2, r3, d9
 801a010:	4606      	mov	r6, r0
 801a012:	460f      	mov	r7, r1
 801a014:	4620      	mov	r0, r4
 801a016:	4629      	mov	r1, r5
 801a018:	f7e6 f95e 	bl	80002d8 <__aeabi_dsub>
 801a01c:	4602      	mov	r2, r0
 801a01e:	460b      	mov	r3, r1
 801a020:	4650      	mov	r0, sl
 801a022:	4659      	mov	r1, fp
 801a024:	f7e6 f958 	bl	80002d8 <__aeabi_dsub>
 801a028:	4642      	mov	r2, r8
 801a02a:	464b      	mov	r3, r9
 801a02c:	f7e6 fb0c 	bl	8000648 <__aeabi_dmul>
 801a030:	4602      	mov	r2, r0
 801a032:	460b      	mov	r3, r1
 801a034:	4630      	mov	r0, r6
 801a036:	4639      	mov	r1, r7
 801a038:	f7e6 f94e 	bl	80002d8 <__aeabi_dsub>
 801a03c:	ec53 2b1a 	vmov	r2, r3, d10
 801a040:	f7e6 fb02 	bl	8000648 <__aeabi_dmul>
 801a044:	ec53 2b18 	vmov	r2, r3, d8
 801a048:	ec41 0b19 	vmov	d9, r0, r1
 801a04c:	ec51 0b18 	vmov	r0, r1, d8
 801a050:	f7e6 fafa 	bl	8000648 <__aeabi_dmul>
 801a054:	a37c      	add	r3, pc, #496	; (adr r3, 801a248 <__ieee754_pow+0x708>)
 801a056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a05a:	4604      	mov	r4, r0
 801a05c:	460d      	mov	r5, r1
 801a05e:	f7e6 faf3 	bl	8000648 <__aeabi_dmul>
 801a062:	a37b      	add	r3, pc, #492	; (adr r3, 801a250 <__ieee754_pow+0x710>)
 801a064:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a068:	f7e6 f938 	bl	80002dc <__adddf3>
 801a06c:	4622      	mov	r2, r4
 801a06e:	462b      	mov	r3, r5
 801a070:	f7e6 faea 	bl	8000648 <__aeabi_dmul>
 801a074:	a378      	add	r3, pc, #480	; (adr r3, 801a258 <__ieee754_pow+0x718>)
 801a076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a07a:	f7e6 f92f 	bl	80002dc <__adddf3>
 801a07e:	4622      	mov	r2, r4
 801a080:	462b      	mov	r3, r5
 801a082:	f7e6 fae1 	bl	8000648 <__aeabi_dmul>
 801a086:	a376      	add	r3, pc, #472	; (adr r3, 801a260 <__ieee754_pow+0x720>)
 801a088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a08c:	f7e6 f926 	bl	80002dc <__adddf3>
 801a090:	4622      	mov	r2, r4
 801a092:	462b      	mov	r3, r5
 801a094:	f7e6 fad8 	bl	8000648 <__aeabi_dmul>
 801a098:	a373      	add	r3, pc, #460	; (adr r3, 801a268 <__ieee754_pow+0x728>)
 801a09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a09e:	f7e6 f91d 	bl	80002dc <__adddf3>
 801a0a2:	4622      	mov	r2, r4
 801a0a4:	462b      	mov	r3, r5
 801a0a6:	f7e6 facf 	bl	8000648 <__aeabi_dmul>
 801a0aa:	a371      	add	r3, pc, #452	; (adr r3, 801a270 <__ieee754_pow+0x730>)
 801a0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0b0:	f7e6 f914 	bl	80002dc <__adddf3>
 801a0b4:	4622      	mov	r2, r4
 801a0b6:	4606      	mov	r6, r0
 801a0b8:	460f      	mov	r7, r1
 801a0ba:	462b      	mov	r3, r5
 801a0bc:	4620      	mov	r0, r4
 801a0be:	4629      	mov	r1, r5
 801a0c0:	f7e6 fac2 	bl	8000648 <__aeabi_dmul>
 801a0c4:	4602      	mov	r2, r0
 801a0c6:	460b      	mov	r3, r1
 801a0c8:	4630      	mov	r0, r6
 801a0ca:	4639      	mov	r1, r7
 801a0cc:	f7e6 fabc 	bl	8000648 <__aeabi_dmul>
 801a0d0:	4642      	mov	r2, r8
 801a0d2:	4604      	mov	r4, r0
 801a0d4:	460d      	mov	r5, r1
 801a0d6:	464b      	mov	r3, r9
 801a0d8:	ec51 0b18 	vmov	r0, r1, d8
 801a0dc:	f7e6 f8fe 	bl	80002dc <__adddf3>
 801a0e0:	ec53 2b19 	vmov	r2, r3, d9
 801a0e4:	f7e6 fab0 	bl	8000648 <__aeabi_dmul>
 801a0e8:	4622      	mov	r2, r4
 801a0ea:	462b      	mov	r3, r5
 801a0ec:	f7e6 f8f6 	bl	80002dc <__adddf3>
 801a0f0:	4642      	mov	r2, r8
 801a0f2:	4682      	mov	sl, r0
 801a0f4:	468b      	mov	fp, r1
 801a0f6:	464b      	mov	r3, r9
 801a0f8:	4640      	mov	r0, r8
 801a0fa:	4649      	mov	r1, r9
 801a0fc:	f7e6 faa4 	bl	8000648 <__aeabi_dmul>
 801a100:	4b6b      	ldr	r3, [pc, #428]	; (801a2b0 <__ieee754_pow+0x770>)
 801a102:	2200      	movs	r2, #0
 801a104:	4606      	mov	r6, r0
 801a106:	460f      	mov	r7, r1
 801a108:	f7e6 f8e8 	bl	80002dc <__adddf3>
 801a10c:	4652      	mov	r2, sl
 801a10e:	465b      	mov	r3, fp
 801a110:	f7e6 f8e4 	bl	80002dc <__adddf3>
 801a114:	2000      	movs	r0, #0
 801a116:	4604      	mov	r4, r0
 801a118:	460d      	mov	r5, r1
 801a11a:	4602      	mov	r2, r0
 801a11c:	460b      	mov	r3, r1
 801a11e:	4640      	mov	r0, r8
 801a120:	4649      	mov	r1, r9
 801a122:	f7e6 fa91 	bl	8000648 <__aeabi_dmul>
 801a126:	4b62      	ldr	r3, [pc, #392]	; (801a2b0 <__ieee754_pow+0x770>)
 801a128:	4680      	mov	r8, r0
 801a12a:	4689      	mov	r9, r1
 801a12c:	2200      	movs	r2, #0
 801a12e:	4620      	mov	r0, r4
 801a130:	4629      	mov	r1, r5
 801a132:	f7e6 f8d1 	bl	80002d8 <__aeabi_dsub>
 801a136:	4632      	mov	r2, r6
 801a138:	463b      	mov	r3, r7
 801a13a:	f7e6 f8cd 	bl	80002d8 <__aeabi_dsub>
 801a13e:	4602      	mov	r2, r0
 801a140:	460b      	mov	r3, r1
 801a142:	4650      	mov	r0, sl
 801a144:	4659      	mov	r1, fp
 801a146:	f7e6 f8c7 	bl	80002d8 <__aeabi_dsub>
 801a14a:	ec53 2b18 	vmov	r2, r3, d8
 801a14e:	f7e6 fa7b 	bl	8000648 <__aeabi_dmul>
 801a152:	4622      	mov	r2, r4
 801a154:	4606      	mov	r6, r0
 801a156:	460f      	mov	r7, r1
 801a158:	462b      	mov	r3, r5
 801a15a:	ec51 0b19 	vmov	r0, r1, d9
 801a15e:	f7e6 fa73 	bl	8000648 <__aeabi_dmul>
 801a162:	4602      	mov	r2, r0
 801a164:	460b      	mov	r3, r1
 801a166:	4630      	mov	r0, r6
 801a168:	4639      	mov	r1, r7
 801a16a:	f7e6 f8b7 	bl	80002dc <__adddf3>
 801a16e:	4606      	mov	r6, r0
 801a170:	460f      	mov	r7, r1
 801a172:	4602      	mov	r2, r0
 801a174:	460b      	mov	r3, r1
 801a176:	4640      	mov	r0, r8
 801a178:	4649      	mov	r1, r9
 801a17a:	f7e6 f8af 	bl	80002dc <__adddf3>
 801a17e:	a33e      	add	r3, pc, #248	; (adr r3, 801a278 <__ieee754_pow+0x738>)
 801a180:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a184:	2000      	movs	r0, #0
 801a186:	4604      	mov	r4, r0
 801a188:	460d      	mov	r5, r1
 801a18a:	f7e6 fa5d 	bl	8000648 <__aeabi_dmul>
 801a18e:	4642      	mov	r2, r8
 801a190:	ec41 0b18 	vmov	d8, r0, r1
 801a194:	464b      	mov	r3, r9
 801a196:	4620      	mov	r0, r4
 801a198:	4629      	mov	r1, r5
 801a19a:	f7e6 f89d 	bl	80002d8 <__aeabi_dsub>
 801a19e:	4602      	mov	r2, r0
 801a1a0:	460b      	mov	r3, r1
 801a1a2:	4630      	mov	r0, r6
 801a1a4:	4639      	mov	r1, r7
 801a1a6:	f7e6 f897 	bl	80002d8 <__aeabi_dsub>
 801a1aa:	a335      	add	r3, pc, #212	; (adr r3, 801a280 <__ieee754_pow+0x740>)
 801a1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1b0:	f7e6 fa4a 	bl	8000648 <__aeabi_dmul>
 801a1b4:	a334      	add	r3, pc, #208	; (adr r3, 801a288 <__ieee754_pow+0x748>)
 801a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1ba:	4606      	mov	r6, r0
 801a1bc:	460f      	mov	r7, r1
 801a1be:	4620      	mov	r0, r4
 801a1c0:	4629      	mov	r1, r5
 801a1c2:	f7e6 fa41 	bl	8000648 <__aeabi_dmul>
 801a1c6:	4602      	mov	r2, r0
 801a1c8:	460b      	mov	r3, r1
 801a1ca:	4630      	mov	r0, r6
 801a1cc:	4639      	mov	r1, r7
 801a1ce:	f7e6 f885 	bl	80002dc <__adddf3>
 801a1d2:	9a07      	ldr	r2, [sp, #28]
 801a1d4:	4b37      	ldr	r3, [pc, #220]	; (801a2b4 <__ieee754_pow+0x774>)
 801a1d6:	4413      	add	r3, r2
 801a1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1dc:	f7e6 f87e 	bl	80002dc <__adddf3>
 801a1e0:	4682      	mov	sl, r0
 801a1e2:	9805      	ldr	r0, [sp, #20]
 801a1e4:	468b      	mov	fp, r1
 801a1e6:	f7e6 f9c5 	bl	8000574 <__aeabi_i2d>
 801a1ea:	9a07      	ldr	r2, [sp, #28]
 801a1ec:	4b32      	ldr	r3, [pc, #200]	; (801a2b8 <__ieee754_pow+0x778>)
 801a1ee:	4413      	add	r3, r2
 801a1f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a1f4:	4606      	mov	r6, r0
 801a1f6:	460f      	mov	r7, r1
 801a1f8:	4652      	mov	r2, sl
 801a1fa:	465b      	mov	r3, fp
 801a1fc:	ec51 0b18 	vmov	r0, r1, d8
 801a200:	f7e6 f86c 	bl	80002dc <__adddf3>
 801a204:	4642      	mov	r2, r8
 801a206:	464b      	mov	r3, r9
 801a208:	f7e6 f868 	bl	80002dc <__adddf3>
 801a20c:	4632      	mov	r2, r6
 801a20e:	463b      	mov	r3, r7
 801a210:	f7e6 f864 	bl	80002dc <__adddf3>
 801a214:	2000      	movs	r0, #0
 801a216:	4632      	mov	r2, r6
 801a218:	463b      	mov	r3, r7
 801a21a:	4604      	mov	r4, r0
 801a21c:	460d      	mov	r5, r1
 801a21e:	f7e6 f85b 	bl	80002d8 <__aeabi_dsub>
 801a222:	4642      	mov	r2, r8
 801a224:	464b      	mov	r3, r9
 801a226:	f7e6 f857 	bl	80002d8 <__aeabi_dsub>
 801a22a:	ec53 2b18 	vmov	r2, r3, d8
 801a22e:	f7e6 f853 	bl	80002d8 <__aeabi_dsub>
 801a232:	4602      	mov	r2, r0
 801a234:	460b      	mov	r3, r1
 801a236:	4650      	mov	r0, sl
 801a238:	4659      	mov	r1, fp
 801a23a:	e610      	b.n	8019e5e <__ieee754_pow+0x31e>
 801a23c:	2401      	movs	r4, #1
 801a23e:	e6a1      	b.n	8019f84 <__ieee754_pow+0x444>
 801a240:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801a290 <__ieee754_pow+0x750>
 801a244:	e617      	b.n	8019e76 <__ieee754_pow+0x336>
 801a246:	bf00      	nop
 801a248:	4a454eef 	.word	0x4a454eef
 801a24c:	3fca7e28 	.word	0x3fca7e28
 801a250:	93c9db65 	.word	0x93c9db65
 801a254:	3fcd864a 	.word	0x3fcd864a
 801a258:	a91d4101 	.word	0xa91d4101
 801a25c:	3fd17460 	.word	0x3fd17460
 801a260:	518f264d 	.word	0x518f264d
 801a264:	3fd55555 	.word	0x3fd55555
 801a268:	db6fabff 	.word	0xdb6fabff
 801a26c:	3fdb6db6 	.word	0x3fdb6db6
 801a270:	33333303 	.word	0x33333303
 801a274:	3fe33333 	.word	0x3fe33333
 801a278:	e0000000 	.word	0xe0000000
 801a27c:	3feec709 	.word	0x3feec709
 801a280:	dc3a03fd 	.word	0xdc3a03fd
 801a284:	3feec709 	.word	0x3feec709
 801a288:	145b01f5 	.word	0x145b01f5
 801a28c:	be3e2fe0 	.word	0xbe3e2fe0
 801a290:	00000000 	.word	0x00000000
 801a294:	3ff00000 	.word	0x3ff00000
 801a298:	7ff00000 	.word	0x7ff00000
 801a29c:	43400000 	.word	0x43400000
 801a2a0:	0003988e 	.word	0x0003988e
 801a2a4:	000bb679 	.word	0x000bb679
 801a2a8:	0801c4b0 	.word	0x0801c4b0
 801a2ac:	3ff00000 	.word	0x3ff00000
 801a2b0:	40080000 	.word	0x40080000
 801a2b4:	0801c4d0 	.word	0x0801c4d0
 801a2b8:	0801c4c0 	.word	0x0801c4c0
 801a2bc:	a3b3      	add	r3, pc, #716	; (adr r3, 801a58c <__ieee754_pow+0xa4c>)
 801a2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2c2:	4640      	mov	r0, r8
 801a2c4:	4649      	mov	r1, r9
 801a2c6:	f7e6 f809 	bl	80002dc <__adddf3>
 801a2ca:	4622      	mov	r2, r4
 801a2cc:	ec41 0b1a 	vmov	d10, r0, r1
 801a2d0:	462b      	mov	r3, r5
 801a2d2:	4630      	mov	r0, r6
 801a2d4:	4639      	mov	r1, r7
 801a2d6:	f7e5 ffff 	bl	80002d8 <__aeabi_dsub>
 801a2da:	4602      	mov	r2, r0
 801a2dc:	460b      	mov	r3, r1
 801a2de:	ec51 0b1a 	vmov	r0, r1, d10
 801a2e2:	f7e6 fc41 	bl	8000b68 <__aeabi_dcmpgt>
 801a2e6:	2800      	cmp	r0, #0
 801a2e8:	f47f ae04 	bne.w	8019ef4 <__ieee754_pow+0x3b4>
 801a2ec:	4aa2      	ldr	r2, [pc, #648]	; (801a578 <__ieee754_pow+0xa38>)
 801a2ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a2f2:	4293      	cmp	r3, r2
 801a2f4:	f340 8107 	ble.w	801a506 <__ieee754_pow+0x9c6>
 801a2f8:	151b      	asrs	r3, r3, #20
 801a2fa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801a2fe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801a302:	fa4a fa03 	asr.w	sl, sl, r3
 801a306:	44da      	add	sl, fp
 801a308:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801a30c:	489b      	ldr	r0, [pc, #620]	; (801a57c <__ieee754_pow+0xa3c>)
 801a30e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801a312:	4108      	asrs	r0, r1
 801a314:	ea00 030a 	and.w	r3, r0, sl
 801a318:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801a31c:	f1c1 0114 	rsb	r1, r1, #20
 801a320:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801a324:	fa4a fa01 	asr.w	sl, sl, r1
 801a328:	f1bb 0f00 	cmp.w	fp, #0
 801a32c:	f04f 0200 	mov.w	r2, #0
 801a330:	4620      	mov	r0, r4
 801a332:	4629      	mov	r1, r5
 801a334:	bfb8      	it	lt
 801a336:	f1ca 0a00 	rsblt	sl, sl, #0
 801a33a:	f7e5 ffcd 	bl	80002d8 <__aeabi_dsub>
 801a33e:	ec41 0b19 	vmov	d9, r0, r1
 801a342:	4642      	mov	r2, r8
 801a344:	464b      	mov	r3, r9
 801a346:	ec51 0b19 	vmov	r0, r1, d9
 801a34a:	f7e5 ffc7 	bl	80002dc <__adddf3>
 801a34e:	a37a      	add	r3, pc, #488	; (adr r3, 801a538 <__ieee754_pow+0x9f8>)
 801a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a354:	2000      	movs	r0, #0
 801a356:	4604      	mov	r4, r0
 801a358:	460d      	mov	r5, r1
 801a35a:	f7e6 f975 	bl	8000648 <__aeabi_dmul>
 801a35e:	ec53 2b19 	vmov	r2, r3, d9
 801a362:	4606      	mov	r6, r0
 801a364:	460f      	mov	r7, r1
 801a366:	4620      	mov	r0, r4
 801a368:	4629      	mov	r1, r5
 801a36a:	f7e5 ffb5 	bl	80002d8 <__aeabi_dsub>
 801a36e:	4602      	mov	r2, r0
 801a370:	460b      	mov	r3, r1
 801a372:	4640      	mov	r0, r8
 801a374:	4649      	mov	r1, r9
 801a376:	f7e5 ffaf 	bl	80002d8 <__aeabi_dsub>
 801a37a:	a371      	add	r3, pc, #452	; (adr r3, 801a540 <__ieee754_pow+0xa00>)
 801a37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a380:	f7e6 f962 	bl	8000648 <__aeabi_dmul>
 801a384:	a370      	add	r3, pc, #448	; (adr r3, 801a548 <__ieee754_pow+0xa08>)
 801a386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a38a:	4680      	mov	r8, r0
 801a38c:	4689      	mov	r9, r1
 801a38e:	4620      	mov	r0, r4
 801a390:	4629      	mov	r1, r5
 801a392:	f7e6 f959 	bl	8000648 <__aeabi_dmul>
 801a396:	4602      	mov	r2, r0
 801a398:	460b      	mov	r3, r1
 801a39a:	4640      	mov	r0, r8
 801a39c:	4649      	mov	r1, r9
 801a39e:	f7e5 ff9d 	bl	80002dc <__adddf3>
 801a3a2:	4604      	mov	r4, r0
 801a3a4:	460d      	mov	r5, r1
 801a3a6:	4602      	mov	r2, r0
 801a3a8:	460b      	mov	r3, r1
 801a3aa:	4630      	mov	r0, r6
 801a3ac:	4639      	mov	r1, r7
 801a3ae:	f7e5 ff95 	bl	80002dc <__adddf3>
 801a3b2:	4632      	mov	r2, r6
 801a3b4:	463b      	mov	r3, r7
 801a3b6:	4680      	mov	r8, r0
 801a3b8:	4689      	mov	r9, r1
 801a3ba:	f7e5 ff8d 	bl	80002d8 <__aeabi_dsub>
 801a3be:	4602      	mov	r2, r0
 801a3c0:	460b      	mov	r3, r1
 801a3c2:	4620      	mov	r0, r4
 801a3c4:	4629      	mov	r1, r5
 801a3c6:	f7e5 ff87 	bl	80002d8 <__aeabi_dsub>
 801a3ca:	4642      	mov	r2, r8
 801a3cc:	4606      	mov	r6, r0
 801a3ce:	460f      	mov	r7, r1
 801a3d0:	464b      	mov	r3, r9
 801a3d2:	4640      	mov	r0, r8
 801a3d4:	4649      	mov	r1, r9
 801a3d6:	f7e6 f937 	bl	8000648 <__aeabi_dmul>
 801a3da:	a35d      	add	r3, pc, #372	; (adr r3, 801a550 <__ieee754_pow+0xa10>)
 801a3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3e0:	4604      	mov	r4, r0
 801a3e2:	460d      	mov	r5, r1
 801a3e4:	f7e6 f930 	bl	8000648 <__aeabi_dmul>
 801a3e8:	a35b      	add	r3, pc, #364	; (adr r3, 801a558 <__ieee754_pow+0xa18>)
 801a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3ee:	f7e5 ff73 	bl	80002d8 <__aeabi_dsub>
 801a3f2:	4622      	mov	r2, r4
 801a3f4:	462b      	mov	r3, r5
 801a3f6:	f7e6 f927 	bl	8000648 <__aeabi_dmul>
 801a3fa:	a359      	add	r3, pc, #356	; (adr r3, 801a560 <__ieee754_pow+0xa20>)
 801a3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a400:	f7e5 ff6c 	bl	80002dc <__adddf3>
 801a404:	4622      	mov	r2, r4
 801a406:	462b      	mov	r3, r5
 801a408:	f7e6 f91e 	bl	8000648 <__aeabi_dmul>
 801a40c:	a356      	add	r3, pc, #344	; (adr r3, 801a568 <__ieee754_pow+0xa28>)
 801a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a412:	f7e5 ff61 	bl	80002d8 <__aeabi_dsub>
 801a416:	4622      	mov	r2, r4
 801a418:	462b      	mov	r3, r5
 801a41a:	f7e6 f915 	bl	8000648 <__aeabi_dmul>
 801a41e:	a354      	add	r3, pc, #336	; (adr r3, 801a570 <__ieee754_pow+0xa30>)
 801a420:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a424:	f7e5 ff5a 	bl	80002dc <__adddf3>
 801a428:	4622      	mov	r2, r4
 801a42a:	462b      	mov	r3, r5
 801a42c:	f7e6 f90c 	bl	8000648 <__aeabi_dmul>
 801a430:	4602      	mov	r2, r0
 801a432:	460b      	mov	r3, r1
 801a434:	4640      	mov	r0, r8
 801a436:	4649      	mov	r1, r9
 801a438:	f7e5 ff4e 	bl	80002d8 <__aeabi_dsub>
 801a43c:	4604      	mov	r4, r0
 801a43e:	460d      	mov	r5, r1
 801a440:	4602      	mov	r2, r0
 801a442:	460b      	mov	r3, r1
 801a444:	4640      	mov	r0, r8
 801a446:	4649      	mov	r1, r9
 801a448:	f7e6 f8fe 	bl	8000648 <__aeabi_dmul>
 801a44c:	2200      	movs	r2, #0
 801a44e:	ec41 0b19 	vmov	d9, r0, r1
 801a452:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a456:	4620      	mov	r0, r4
 801a458:	4629      	mov	r1, r5
 801a45a:	f7e5 ff3d 	bl	80002d8 <__aeabi_dsub>
 801a45e:	4602      	mov	r2, r0
 801a460:	460b      	mov	r3, r1
 801a462:	ec51 0b19 	vmov	r0, r1, d9
 801a466:	f7e6 fa19 	bl	800089c <__aeabi_ddiv>
 801a46a:	4632      	mov	r2, r6
 801a46c:	4604      	mov	r4, r0
 801a46e:	460d      	mov	r5, r1
 801a470:	463b      	mov	r3, r7
 801a472:	4640      	mov	r0, r8
 801a474:	4649      	mov	r1, r9
 801a476:	f7e6 f8e7 	bl	8000648 <__aeabi_dmul>
 801a47a:	4632      	mov	r2, r6
 801a47c:	463b      	mov	r3, r7
 801a47e:	f7e5 ff2d 	bl	80002dc <__adddf3>
 801a482:	4602      	mov	r2, r0
 801a484:	460b      	mov	r3, r1
 801a486:	4620      	mov	r0, r4
 801a488:	4629      	mov	r1, r5
 801a48a:	f7e5 ff25 	bl	80002d8 <__aeabi_dsub>
 801a48e:	4642      	mov	r2, r8
 801a490:	464b      	mov	r3, r9
 801a492:	f7e5 ff21 	bl	80002d8 <__aeabi_dsub>
 801a496:	460b      	mov	r3, r1
 801a498:	4602      	mov	r2, r0
 801a49a:	4939      	ldr	r1, [pc, #228]	; (801a580 <__ieee754_pow+0xa40>)
 801a49c:	2000      	movs	r0, #0
 801a49e:	f7e5 ff1b 	bl	80002d8 <__aeabi_dsub>
 801a4a2:	ec41 0b10 	vmov	d0, r0, r1
 801a4a6:	ee10 3a90 	vmov	r3, s1
 801a4aa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801a4ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a4b2:	da2b      	bge.n	801a50c <__ieee754_pow+0x9cc>
 801a4b4:	4650      	mov	r0, sl
 801a4b6:	f000 ff6f 	bl	801b398 <scalbn>
 801a4ba:	ec51 0b10 	vmov	r0, r1, d0
 801a4be:	ec53 2b18 	vmov	r2, r3, d8
 801a4c2:	f7ff bbee 	b.w	8019ca2 <__ieee754_pow+0x162>
 801a4c6:	4b2f      	ldr	r3, [pc, #188]	; (801a584 <__ieee754_pow+0xa44>)
 801a4c8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801a4cc:	429e      	cmp	r6, r3
 801a4ce:	f77f af0d 	ble.w	801a2ec <__ieee754_pow+0x7ac>
 801a4d2:	4b2d      	ldr	r3, [pc, #180]	; (801a588 <__ieee754_pow+0xa48>)
 801a4d4:	440b      	add	r3, r1
 801a4d6:	4303      	orrs	r3, r0
 801a4d8:	d009      	beq.n	801a4ee <__ieee754_pow+0x9ae>
 801a4da:	ec51 0b18 	vmov	r0, r1, d8
 801a4de:	2200      	movs	r2, #0
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	f7e6 fb23 	bl	8000b2c <__aeabi_dcmplt>
 801a4e6:	3800      	subs	r0, #0
 801a4e8:	bf18      	it	ne
 801a4ea:	2001      	movne	r0, #1
 801a4ec:	e448      	b.n	8019d80 <__ieee754_pow+0x240>
 801a4ee:	4622      	mov	r2, r4
 801a4f0:	462b      	mov	r3, r5
 801a4f2:	f7e5 fef1 	bl	80002d8 <__aeabi_dsub>
 801a4f6:	4642      	mov	r2, r8
 801a4f8:	464b      	mov	r3, r9
 801a4fa:	f7e6 fb2b 	bl	8000b54 <__aeabi_dcmpge>
 801a4fe:	2800      	cmp	r0, #0
 801a500:	f43f aef4 	beq.w	801a2ec <__ieee754_pow+0x7ac>
 801a504:	e7e9      	b.n	801a4da <__ieee754_pow+0x99a>
 801a506:	f04f 0a00 	mov.w	sl, #0
 801a50a:	e71a      	b.n	801a342 <__ieee754_pow+0x802>
 801a50c:	ec51 0b10 	vmov	r0, r1, d0
 801a510:	4619      	mov	r1, r3
 801a512:	e7d4      	b.n	801a4be <__ieee754_pow+0x97e>
 801a514:	491a      	ldr	r1, [pc, #104]	; (801a580 <__ieee754_pow+0xa40>)
 801a516:	2000      	movs	r0, #0
 801a518:	f7ff bb31 	b.w	8019b7e <__ieee754_pow+0x3e>
 801a51c:	2000      	movs	r0, #0
 801a51e:	2100      	movs	r1, #0
 801a520:	f7ff bb2d 	b.w	8019b7e <__ieee754_pow+0x3e>
 801a524:	4630      	mov	r0, r6
 801a526:	4639      	mov	r1, r7
 801a528:	f7ff bb29 	b.w	8019b7e <__ieee754_pow+0x3e>
 801a52c:	9204      	str	r2, [sp, #16]
 801a52e:	f7ff bb7b 	b.w	8019c28 <__ieee754_pow+0xe8>
 801a532:	2300      	movs	r3, #0
 801a534:	f7ff bb65 	b.w	8019c02 <__ieee754_pow+0xc2>
 801a538:	00000000 	.word	0x00000000
 801a53c:	3fe62e43 	.word	0x3fe62e43
 801a540:	fefa39ef 	.word	0xfefa39ef
 801a544:	3fe62e42 	.word	0x3fe62e42
 801a548:	0ca86c39 	.word	0x0ca86c39
 801a54c:	be205c61 	.word	0xbe205c61
 801a550:	72bea4d0 	.word	0x72bea4d0
 801a554:	3e663769 	.word	0x3e663769
 801a558:	c5d26bf1 	.word	0xc5d26bf1
 801a55c:	3ebbbd41 	.word	0x3ebbbd41
 801a560:	af25de2c 	.word	0xaf25de2c
 801a564:	3f11566a 	.word	0x3f11566a
 801a568:	16bebd93 	.word	0x16bebd93
 801a56c:	3f66c16c 	.word	0x3f66c16c
 801a570:	5555553e 	.word	0x5555553e
 801a574:	3fc55555 	.word	0x3fc55555
 801a578:	3fe00000 	.word	0x3fe00000
 801a57c:	fff00000 	.word	0xfff00000
 801a580:	3ff00000 	.word	0x3ff00000
 801a584:	4090cbff 	.word	0x4090cbff
 801a588:	3f6f3400 	.word	0x3f6f3400
 801a58c:	652b82fe 	.word	0x652b82fe
 801a590:	3c971547 	.word	0x3c971547

0801a594 <fabs>:
 801a594:	ec51 0b10 	vmov	r0, r1, d0
 801a598:	ee10 2a10 	vmov	r2, s0
 801a59c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a5a0:	ec43 2b10 	vmov	d0, r2, r3
 801a5a4:	4770      	bx	lr
	...

0801a5a8 <__kernel_cosf>:
 801a5a8:	ee10 3a10 	vmov	r3, s0
 801a5ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a5b0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801a5b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a5b8:	da05      	bge.n	801a5c6 <__kernel_cosf+0x1e>
 801a5ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a5be:	ee17 2a90 	vmov	r2, s15
 801a5c2:	2a00      	cmp	r2, #0
 801a5c4:	d03b      	beq.n	801a63e <__kernel_cosf+0x96>
 801a5c6:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a5ca:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801a644 <__kernel_cosf+0x9c>
 801a5ce:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801a648 <__kernel_cosf+0xa0>
 801a5d2:	4a1e      	ldr	r2, [pc, #120]	; (801a64c <__kernel_cosf+0xa4>)
 801a5d4:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a5d8:	4293      	cmp	r3, r2
 801a5da:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801a650 <__kernel_cosf+0xa8>
 801a5de:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a5e2:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 801a654 <__kernel_cosf+0xac>
 801a5e6:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a5ea:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801a658 <__kernel_cosf+0xb0>
 801a5ee:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a5f2:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 801a65c <__kernel_cosf+0xb4>
 801a5f6:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a5fa:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801a5fe:	ee26 6a07 	vmul.f32	s12, s12, s14
 801a602:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a606:	eee7 0a06 	vfma.f32	s1, s14, s12
 801a60a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a60e:	dc04      	bgt.n	801a61a <__kernel_cosf+0x72>
 801a610:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801a614:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801a618:	4770      	bx	lr
 801a61a:	4a11      	ldr	r2, [pc, #68]	; (801a660 <__kernel_cosf+0xb8>)
 801a61c:	4293      	cmp	r3, r2
 801a61e:	bfda      	itte	le
 801a620:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801a624:	ee07 3a10 	vmovle	s14, r3
 801a628:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 801a62c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a630:	ee36 0ac7 	vsub.f32	s0, s13, s14
 801a634:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801a638:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a63c:	4770      	bx	lr
 801a63e:	eeb0 0a66 	vmov.f32	s0, s13
 801a642:	4770      	bx	lr
 801a644:	ad47d74e 	.word	0xad47d74e
 801a648:	310f74f6 	.word	0x310f74f6
 801a64c:	3e999999 	.word	0x3e999999
 801a650:	b493f27c 	.word	0xb493f27c
 801a654:	37d00d01 	.word	0x37d00d01
 801a658:	bab60b61 	.word	0xbab60b61
 801a65c:	3d2aaaab 	.word	0x3d2aaaab
 801a660:	3f480000 	.word	0x3f480000

0801a664 <__kernel_sinf>:
 801a664:	ee10 3a10 	vmov	r3, s0
 801a668:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a66c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801a670:	da04      	bge.n	801a67c <__kernel_sinf+0x18>
 801a672:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a676:	ee17 3a90 	vmov	r3, s15
 801a67a:	b35b      	cbz	r3, 801a6d4 <__kernel_sinf+0x70>
 801a67c:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a680:	eddf 7a15 	vldr	s15, [pc, #84]	; 801a6d8 <__kernel_sinf+0x74>
 801a684:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801a6dc <__kernel_sinf+0x78>
 801a688:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a68c:	eddf 7a14 	vldr	s15, [pc, #80]	; 801a6e0 <__kernel_sinf+0x7c>
 801a690:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a694:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801a6e4 <__kernel_sinf+0x80>
 801a698:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a69c:	eddf 7a12 	vldr	s15, [pc, #72]	; 801a6e8 <__kernel_sinf+0x84>
 801a6a0:	ee60 6a07 	vmul.f32	s13, s0, s14
 801a6a4:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a6a8:	b930      	cbnz	r0, 801a6b8 <__kernel_sinf+0x54>
 801a6aa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801a6ec <__kernel_sinf+0x88>
 801a6ae:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a6b2:	eea6 0a26 	vfma.f32	s0, s12, s13
 801a6b6:	4770      	bx	lr
 801a6b8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801a6bc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801a6c0:	eee0 7a86 	vfma.f32	s15, s1, s12
 801a6c4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801a6c8:	eddf 7a09 	vldr	s15, [pc, #36]	; 801a6f0 <__kernel_sinf+0x8c>
 801a6cc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801a6d0:	ee30 0a60 	vsub.f32	s0, s0, s1
 801a6d4:	4770      	bx	lr
 801a6d6:	bf00      	nop
 801a6d8:	2f2ec9d3 	.word	0x2f2ec9d3
 801a6dc:	b2d72f34 	.word	0xb2d72f34
 801a6e0:	3638ef1b 	.word	0x3638ef1b
 801a6e4:	b9500d01 	.word	0xb9500d01
 801a6e8:	3c088889 	.word	0x3c088889
 801a6ec:	be2aaaab 	.word	0xbe2aaaab
 801a6f0:	3e2aaaab 	.word	0x3e2aaaab

0801a6f4 <__ieee754_asinf>:
 801a6f4:	b538      	push	{r3, r4, r5, lr}
 801a6f6:	ee10 5a10 	vmov	r5, s0
 801a6fa:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801a6fe:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801a702:	ed2d 8b04 	vpush	{d8-d9}
 801a706:	d10c      	bne.n	801a722 <__ieee754_asinf+0x2e>
 801a708:	eddf 7a5d 	vldr	s15, [pc, #372]	; 801a880 <__ieee754_asinf+0x18c>
 801a70c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801a884 <__ieee754_asinf+0x190>
 801a710:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a714:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a718:	eeb0 0a67 	vmov.f32	s0, s15
 801a71c:	ecbd 8b04 	vpop	{d8-d9}
 801a720:	bd38      	pop	{r3, r4, r5, pc}
 801a722:	dd04      	ble.n	801a72e <__ieee754_asinf+0x3a>
 801a724:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a728:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801a72c:	e7f6      	b.n	801a71c <__ieee754_asinf+0x28>
 801a72e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801a732:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801a736:	da0b      	bge.n	801a750 <__ieee754_asinf+0x5c>
 801a738:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 801a73c:	da52      	bge.n	801a7e4 <__ieee754_asinf+0xf0>
 801a73e:	eddf 7a52 	vldr	s15, [pc, #328]	; 801a888 <__ieee754_asinf+0x194>
 801a742:	ee70 7a27 	vadd.f32	s15, s0, s15
 801a746:	eef4 7ae8 	vcmpe.f32	s15, s17
 801a74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a74e:	dce5      	bgt.n	801a71c <__ieee754_asinf+0x28>
 801a750:	f7ff f8b3 	bl	80198ba <fabsf>
 801a754:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801a758:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a75c:	ee20 8a27 	vmul.f32	s16, s0, s15
 801a760:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801a88c <__ieee754_asinf+0x198>
 801a764:	eddf 7a4a 	vldr	s15, [pc, #296]	; 801a890 <__ieee754_asinf+0x19c>
 801a768:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 801a894 <__ieee754_asinf+0x1a0>
 801a76c:	eea8 7a27 	vfma.f32	s14, s16, s15
 801a770:	eddf 7a49 	vldr	s15, [pc, #292]	; 801a898 <__ieee754_asinf+0x1a4>
 801a774:	eee7 7a08 	vfma.f32	s15, s14, s16
 801a778:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801a89c <__ieee754_asinf+0x1a8>
 801a77c:	eea7 7a88 	vfma.f32	s14, s15, s16
 801a780:	eddf 7a47 	vldr	s15, [pc, #284]	; 801a8a0 <__ieee754_asinf+0x1ac>
 801a784:	eee7 7a08 	vfma.f32	s15, s14, s16
 801a788:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801a8a4 <__ieee754_asinf+0x1b0>
 801a78c:	eea7 9a88 	vfma.f32	s18, s15, s16
 801a790:	eddf 7a45 	vldr	s15, [pc, #276]	; 801a8a8 <__ieee754_asinf+0x1b4>
 801a794:	eee8 7a07 	vfma.f32	s15, s16, s14
 801a798:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801a8ac <__ieee754_asinf+0x1b8>
 801a79c:	eea7 7a88 	vfma.f32	s14, s15, s16
 801a7a0:	eddf 7a43 	vldr	s15, [pc, #268]	; 801a8b0 <__ieee754_asinf+0x1bc>
 801a7a4:	eee7 7a08 	vfma.f32	s15, s14, s16
 801a7a8:	eeb0 0a48 	vmov.f32	s0, s16
 801a7ac:	eee7 8a88 	vfma.f32	s17, s15, s16
 801a7b0:	f7ff f9c2 	bl	8019b38 <__ieee754_sqrtf>
 801a7b4:	4b3f      	ldr	r3, [pc, #252]	; (801a8b4 <__ieee754_asinf+0x1c0>)
 801a7b6:	ee29 9a08 	vmul.f32	s18, s18, s16
 801a7ba:	429c      	cmp	r4, r3
 801a7bc:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801a7c0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801a7c4:	dd3d      	ble.n	801a842 <__ieee754_asinf+0x14e>
 801a7c6:	eea0 0a06 	vfma.f32	s0, s0, s12
 801a7ca:	eddf 7a3b 	vldr	s15, [pc, #236]	; 801a8b8 <__ieee754_asinf+0x1c4>
 801a7ce:	eee0 7a26 	vfma.f32	s15, s0, s13
 801a7d2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801a884 <__ieee754_asinf+0x190>
 801a7d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a7da:	2d00      	cmp	r5, #0
 801a7dc:	bfd8      	it	le
 801a7de:	eeb1 0a40 	vnegle.f32	s0, s0
 801a7e2:	e79b      	b.n	801a71c <__ieee754_asinf+0x28>
 801a7e4:	ee60 7a00 	vmul.f32	s15, s0, s0
 801a7e8:	eddf 6a29 	vldr	s13, [pc, #164]	; 801a890 <__ieee754_asinf+0x19c>
 801a7ec:	ed9f 7a27 	vldr	s14, [pc, #156]	; 801a88c <__ieee754_asinf+0x198>
 801a7f0:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 801a8a4 <__ieee754_asinf+0x1b0>
 801a7f4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801a7f8:	eddf 6a27 	vldr	s13, [pc, #156]	; 801a898 <__ieee754_asinf+0x1a4>
 801a7fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 801a800:	ed9f 7a26 	vldr	s14, [pc, #152]	; 801a89c <__ieee754_asinf+0x1a8>
 801a804:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a808:	eddf 6a25 	vldr	s13, [pc, #148]	; 801a8a0 <__ieee754_asinf+0x1ac>
 801a80c:	eee7 6a27 	vfma.f32	s13, s14, s15
 801a810:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801a894 <__ieee754_asinf+0x1a0>
 801a814:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a818:	eddf 6a23 	vldr	s13, [pc, #140]	; 801a8a8 <__ieee754_asinf+0x1b4>
 801a81c:	eee7 6a86 	vfma.f32	s13, s15, s12
 801a820:	ed9f 6a22 	vldr	s12, [pc, #136]	; 801a8ac <__ieee754_asinf+0x1b8>
 801a824:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801a828:	eddf 6a21 	vldr	s13, [pc, #132]	; 801a8b0 <__ieee754_asinf+0x1bc>
 801a82c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a830:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a834:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801a838:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801a83c:	eea0 0a27 	vfma.f32	s0, s0, s15
 801a840:	e76c      	b.n	801a71c <__ieee754_asinf+0x28>
 801a842:	ee10 3a10 	vmov	r3, s0
 801a846:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801a84a:	f023 030f 	bic.w	r3, r3, #15
 801a84e:	ee07 3a10 	vmov	s14, r3
 801a852:	eea7 8a47 	vfms.f32	s16, s14, s14
 801a856:	ee70 7a07 	vadd.f32	s15, s0, s14
 801a85a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a85e:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801a862:	eddf 7a07 	vldr	s15, [pc, #28]	; 801a880 <__ieee754_asinf+0x18c>
 801a866:	eee5 7ae6 	vfms.f32	s15, s11, s13
 801a86a:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801a86e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 801a8bc <__ieee754_asinf+0x1c8>
 801a872:	eeb0 6a40 	vmov.f32	s12, s0
 801a876:	eea7 6a66 	vfms.f32	s12, s14, s13
 801a87a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801a87e:	e7aa      	b.n	801a7d6 <__ieee754_asinf+0xe2>
 801a880:	b33bbd2e 	.word	0xb33bbd2e
 801a884:	3fc90fdb 	.word	0x3fc90fdb
 801a888:	7149f2ca 	.word	0x7149f2ca
 801a88c:	3a4f7f04 	.word	0x3a4f7f04
 801a890:	3811ef08 	.word	0x3811ef08
 801a894:	3e2aaaab 	.word	0x3e2aaaab
 801a898:	bd241146 	.word	0xbd241146
 801a89c:	3e4e0aa8 	.word	0x3e4e0aa8
 801a8a0:	bea6b090 	.word	0xbea6b090
 801a8a4:	3d9dc62e 	.word	0x3d9dc62e
 801a8a8:	bf303361 	.word	0xbf303361
 801a8ac:	4001572d 	.word	0x4001572d
 801a8b0:	c019d139 	.word	0xc019d139
 801a8b4:	3f799999 	.word	0x3f799999
 801a8b8:	333bbd2e 	.word	0x333bbd2e
 801a8bc:	3f490fdb 	.word	0x3f490fdb

0801a8c0 <__ieee754_atan2f>:
 801a8c0:	ee10 2a90 	vmov	r2, s1
 801a8c4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801a8c8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801a8cc:	b510      	push	{r4, lr}
 801a8ce:	eef0 7a40 	vmov.f32	s15, s0
 801a8d2:	dc06      	bgt.n	801a8e2 <__ieee754_atan2f+0x22>
 801a8d4:	ee10 0a10 	vmov	r0, s0
 801a8d8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801a8dc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a8e0:	dd04      	ble.n	801a8ec <__ieee754_atan2f+0x2c>
 801a8e2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801a8e6:	eeb0 0a67 	vmov.f32	s0, s15
 801a8ea:	bd10      	pop	{r4, pc}
 801a8ec:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801a8f0:	d103      	bne.n	801a8fa <__ieee754_atan2f+0x3a>
 801a8f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a8f6:	f000 bc79 	b.w	801b1ec <atanf>
 801a8fa:	1794      	asrs	r4, r2, #30
 801a8fc:	f004 0402 	and.w	r4, r4, #2
 801a900:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801a904:	b943      	cbnz	r3, 801a918 <__ieee754_atan2f+0x58>
 801a906:	2c02      	cmp	r4, #2
 801a908:	d05e      	beq.n	801a9c8 <__ieee754_atan2f+0x108>
 801a90a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801a9dc <__ieee754_atan2f+0x11c>
 801a90e:	2c03      	cmp	r4, #3
 801a910:	bf08      	it	eq
 801a912:	eef0 7a47 	vmoveq.f32	s15, s14
 801a916:	e7e6      	b.n	801a8e6 <__ieee754_atan2f+0x26>
 801a918:	b941      	cbnz	r1, 801a92c <__ieee754_atan2f+0x6c>
 801a91a:	eddf 7a31 	vldr	s15, [pc, #196]	; 801a9e0 <__ieee754_atan2f+0x120>
 801a91e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801a9e4 <__ieee754_atan2f+0x124>
 801a922:	2800      	cmp	r0, #0
 801a924:	bfb8      	it	lt
 801a926:	eef0 7a47 	vmovlt.f32	s15, s14
 801a92a:	e7dc      	b.n	801a8e6 <__ieee754_atan2f+0x26>
 801a92c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801a930:	d110      	bne.n	801a954 <__ieee754_atan2f+0x94>
 801a932:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a936:	f104 34ff 	add.w	r4, r4, #4294967295
 801a93a:	d107      	bne.n	801a94c <__ieee754_atan2f+0x8c>
 801a93c:	2c02      	cmp	r4, #2
 801a93e:	d846      	bhi.n	801a9ce <__ieee754_atan2f+0x10e>
 801a940:	4b29      	ldr	r3, [pc, #164]	; (801a9e8 <__ieee754_atan2f+0x128>)
 801a942:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a946:	edd3 7a00 	vldr	s15, [r3]
 801a94a:	e7cc      	b.n	801a8e6 <__ieee754_atan2f+0x26>
 801a94c:	2c02      	cmp	r4, #2
 801a94e:	d841      	bhi.n	801a9d4 <__ieee754_atan2f+0x114>
 801a950:	4b26      	ldr	r3, [pc, #152]	; (801a9ec <__ieee754_atan2f+0x12c>)
 801a952:	e7f6      	b.n	801a942 <__ieee754_atan2f+0x82>
 801a954:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a958:	d0df      	beq.n	801a91a <__ieee754_atan2f+0x5a>
 801a95a:	1a5b      	subs	r3, r3, r1
 801a95c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801a960:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801a964:	da1a      	bge.n	801a99c <__ieee754_atan2f+0xdc>
 801a966:	2a00      	cmp	r2, #0
 801a968:	da01      	bge.n	801a96e <__ieee754_atan2f+0xae>
 801a96a:	313c      	adds	r1, #60	; 0x3c
 801a96c:	db19      	blt.n	801a9a2 <__ieee754_atan2f+0xe2>
 801a96e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801a972:	f7fe ffa2 	bl	80198ba <fabsf>
 801a976:	f000 fc39 	bl	801b1ec <atanf>
 801a97a:	eef0 7a40 	vmov.f32	s15, s0
 801a97e:	2c01      	cmp	r4, #1
 801a980:	d012      	beq.n	801a9a8 <__ieee754_atan2f+0xe8>
 801a982:	2c02      	cmp	r4, #2
 801a984:	d017      	beq.n	801a9b6 <__ieee754_atan2f+0xf6>
 801a986:	2c00      	cmp	r4, #0
 801a988:	d0ad      	beq.n	801a8e6 <__ieee754_atan2f+0x26>
 801a98a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801a9f0 <__ieee754_atan2f+0x130>
 801a98e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a992:	ed9f 7a18 	vldr	s14, [pc, #96]	; 801a9f4 <__ieee754_atan2f+0x134>
 801a996:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a99a:	e7a4      	b.n	801a8e6 <__ieee754_atan2f+0x26>
 801a99c:	eddf 7a10 	vldr	s15, [pc, #64]	; 801a9e0 <__ieee754_atan2f+0x120>
 801a9a0:	e7ed      	b.n	801a97e <__ieee754_atan2f+0xbe>
 801a9a2:	eddf 7a15 	vldr	s15, [pc, #84]	; 801a9f8 <__ieee754_atan2f+0x138>
 801a9a6:	e7ea      	b.n	801a97e <__ieee754_atan2f+0xbe>
 801a9a8:	ee17 3a90 	vmov	r3, s15
 801a9ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a9b0:	ee07 3a90 	vmov	s15, r3
 801a9b4:	e797      	b.n	801a8e6 <__ieee754_atan2f+0x26>
 801a9b6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 801a9f0 <__ieee754_atan2f+0x130>
 801a9ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a9be:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801a9f4 <__ieee754_atan2f+0x134>
 801a9c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a9c6:	e78e      	b.n	801a8e6 <__ieee754_atan2f+0x26>
 801a9c8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801a9f4 <__ieee754_atan2f+0x134>
 801a9cc:	e78b      	b.n	801a8e6 <__ieee754_atan2f+0x26>
 801a9ce:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801a9fc <__ieee754_atan2f+0x13c>
 801a9d2:	e788      	b.n	801a8e6 <__ieee754_atan2f+0x26>
 801a9d4:	eddf 7a08 	vldr	s15, [pc, #32]	; 801a9f8 <__ieee754_atan2f+0x138>
 801a9d8:	e785      	b.n	801a8e6 <__ieee754_atan2f+0x26>
 801a9da:	bf00      	nop
 801a9dc:	c0490fdb 	.word	0xc0490fdb
 801a9e0:	3fc90fdb 	.word	0x3fc90fdb
 801a9e4:	bfc90fdb 	.word	0xbfc90fdb
 801a9e8:	0801c4e0 	.word	0x0801c4e0
 801a9ec:	0801c4ec 	.word	0x0801c4ec
 801a9f0:	33bbbd2e 	.word	0x33bbbd2e
 801a9f4:	40490fdb 	.word	0x40490fdb
 801a9f8:	00000000 	.word	0x00000000
 801a9fc:	3f490fdb 	.word	0x3f490fdb

0801aa00 <__ieee754_powf>:
 801aa00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa04:	ee10 4a90 	vmov	r4, s1
 801aa08:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 801aa0c:	ed2d 8b02 	vpush	{d8}
 801aa10:	ee10 7a10 	vmov	r7, s0
 801aa14:	eeb0 8a40 	vmov.f32	s16, s0
 801aa18:	eef0 8a60 	vmov.f32	s17, s1
 801aa1c:	d10c      	bne.n	801aa38 <__ieee754_powf+0x38>
 801aa1e:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 801aa22:	007f      	lsls	r7, r7, #1
 801aa24:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 801aa28:	f240 8292 	bls.w	801af50 <__ieee754_powf+0x550>
 801aa2c:	ee38 0a28 	vadd.f32	s0, s16, s17
 801aa30:	ecbd 8b02 	vpop	{d8}
 801aa34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa38:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 801aa3c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801aa40:	dcf4      	bgt.n	801aa2c <__ieee754_powf+0x2c>
 801aa42:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801aa46:	dd08      	ble.n	801aa5a <__ieee754_powf+0x5a>
 801aa48:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801aa4c:	d1ee      	bne.n	801aa2c <__ieee754_powf+0x2c>
 801aa4e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801aa52:	0064      	lsls	r4, r4, #1
 801aa54:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801aa58:	e7e6      	b.n	801aa28 <__ieee754_powf+0x28>
 801aa5a:	2f00      	cmp	r7, #0
 801aa5c:	da20      	bge.n	801aaa0 <__ieee754_powf+0xa0>
 801aa5e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 801aa62:	da2d      	bge.n	801aac0 <__ieee754_powf+0xc0>
 801aa64:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801aa68:	f2c0 827b 	blt.w	801af62 <__ieee754_powf+0x562>
 801aa6c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 801aa70:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801aa74:	fa48 f603 	asr.w	r6, r8, r3
 801aa78:	fa06 f303 	lsl.w	r3, r6, r3
 801aa7c:	4543      	cmp	r3, r8
 801aa7e:	f040 8270 	bne.w	801af62 <__ieee754_powf+0x562>
 801aa82:	f006 0601 	and.w	r6, r6, #1
 801aa86:	f1c6 0602 	rsb	r6, r6, #2
 801aa8a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801aa8e:	d11f      	bne.n	801aad0 <__ieee754_powf+0xd0>
 801aa90:	2c00      	cmp	r4, #0
 801aa92:	f280 8263 	bge.w	801af5c <__ieee754_powf+0x55c>
 801aa96:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801aa9a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801aa9e:	e7c7      	b.n	801aa30 <__ieee754_powf+0x30>
 801aaa0:	2600      	movs	r6, #0
 801aaa2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801aaa6:	d1f0      	bne.n	801aa8a <__ieee754_powf+0x8a>
 801aaa8:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 801aaac:	f000 8250 	beq.w	801af50 <__ieee754_powf+0x550>
 801aab0:	dd08      	ble.n	801aac4 <__ieee754_powf+0xc4>
 801aab2:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801adb8 <__ieee754_powf+0x3b8>
 801aab6:	2c00      	cmp	r4, #0
 801aab8:	bfa8      	it	ge
 801aaba:	eeb0 0a68 	vmovge.f32	s0, s17
 801aabe:	e7b7      	b.n	801aa30 <__ieee754_powf+0x30>
 801aac0:	2602      	movs	r6, #2
 801aac2:	e7ee      	b.n	801aaa2 <__ieee754_powf+0xa2>
 801aac4:	2c00      	cmp	r4, #0
 801aac6:	f280 8246 	bge.w	801af56 <__ieee754_powf+0x556>
 801aaca:	eeb1 0a68 	vneg.f32	s0, s17
 801aace:	e7af      	b.n	801aa30 <__ieee754_powf+0x30>
 801aad0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801aad4:	d102      	bne.n	801aadc <__ieee754_powf+0xdc>
 801aad6:	ee28 0a08 	vmul.f32	s0, s16, s16
 801aada:	e7a9      	b.n	801aa30 <__ieee754_powf+0x30>
 801aadc:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801aae0:	eeb0 0a48 	vmov.f32	s0, s16
 801aae4:	d107      	bne.n	801aaf6 <__ieee754_powf+0xf6>
 801aae6:	2f00      	cmp	r7, #0
 801aae8:	db05      	blt.n	801aaf6 <__ieee754_powf+0xf6>
 801aaea:	ecbd 8b02 	vpop	{d8}
 801aaee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aaf2:	f7ff b821 	b.w	8019b38 <__ieee754_sqrtf>
 801aaf6:	f7fe fee0 	bl	80198ba <fabsf>
 801aafa:	b125      	cbz	r5, 801ab06 <__ieee754_powf+0x106>
 801aafc:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 801ab00:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801ab04:	d115      	bne.n	801ab32 <__ieee754_powf+0x132>
 801ab06:	2c00      	cmp	r4, #0
 801ab08:	bfbc      	itt	lt
 801ab0a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801ab0e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801ab12:	2f00      	cmp	r7, #0
 801ab14:	da8c      	bge.n	801aa30 <__ieee754_powf+0x30>
 801ab16:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 801ab1a:	4335      	orrs	r5, r6
 801ab1c:	d104      	bne.n	801ab28 <__ieee754_powf+0x128>
 801ab1e:	ee70 7a40 	vsub.f32	s15, s0, s0
 801ab22:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801ab26:	e783      	b.n	801aa30 <__ieee754_powf+0x30>
 801ab28:	2e01      	cmp	r6, #1
 801ab2a:	d181      	bne.n	801aa30 <__ieee754_powf+0x30>
 801ab2c:	eeb1 0a40 	vneg.f32	s0, s0
 801ab30:	e77e      	b.n	801aa30 <__ieee754_powf+0x30>
 801ab32:	0ff8      	lsrs	r0, r7, #31
 801ab34:	3801      	subs	r0, #1
 801ab36:	ea56 0300 	orrs.w	r3, r6, r0
 801ab3a:	d104      	bne.n	801ab46 <__ieee754_powf+0x146>
 801ab3c:	ee38 8a48 	vsub.f32	s16, s16, s16
 801ab40:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801ab44:	e774      	b.n	801aa30 <__ieee754_powf+0x30>
 801ab46:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 801ab4a:	dd73      	ble.n	801ac34 <__ieee754_powf+0x234>
 801ab4c:	4b9b      	ldr	r3, [pc, #620]	; (801adbc <__ieee754_powf+0x3bc>)
 801ab4e:	429d      	cmp	r5, r3
 801ab50:	dc08      	bgt.n	801ab64 <__ieee754_powf+0x164>
 801ab52:	2c00      	cmp	r4, #0
 801ab54:	da0b      	bge.n	801ab6e <__ieee754_powf+0x16e>
 801ab56:	2000      	movs	r0, #0
 801ab58:	ecbd 8b02 	vpop	{d8}
 801ab5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ab60:	f000 bd4a 	b.w	801b5f8 <__math_oflowf>
 801ab64:	4b96      	ldr	r3, [pc, #600]	; (801adc0 <__ieee754_powf+0x3c0>)
 801ab66:	429d      	cmp	r5, r3
 801ab68:	dd08      	ble.n	801ab7c <__ieee754_powf+0x17c>
 801ab6a:	2c00      	cmp	r4, #0
 801ab6c:	dcf3      	bgt.n	801ab56 <__ieee754_powf+0x156>
 801ab6e:	2000      	movs	r0, #0
 801ab70:	ecbd 8b02 	vpop	{d8}
 801ab74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ab78:	f000 bd38 	b.w	801b5ec <__math_uflowf>
 801ab7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ab80:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ab84:	eddf 6a8f 	vldr	s13, [pc, #572]	; 801adc4 <__ieee754_powf+0x3c4>
 801ab88:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801ab8c:	eee0 6a67 	vfms.f32	s13, s0, s15
 801ab90:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801ab94:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801ab98:	ee20 7a00 	vmul.f32	s14, s0, s0
 801ab9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801aba0:	eddf 7a89 	vldr	s15, [pc, #548]	; 801adc8 <__ieee754_powf+0x3c8>
 801aba4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801aba8:	ed9f 7a88 	vldr	s14, [pc, #544]	; 801adcc <__ieee754_powf+0x3cc>
 801abac:	eee0 7a07 	vfma.f32	s15, s0, s14
 801abb0:	ed9f 7a87 	vldr	s14, [pc, #540]	; 801add0 <__ieee754_powf+0x3d0>
 801abb4:	eef0 6a67 	vmov.f32	s13, s15
 801abb8:	eee0 6a07 	vfma.f32	s13, s0, s14
 801abbc:	ee16 3a90 	vmov	r3, s13
 801abc0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801abc4:	f023 030f 	bic.w	r3, r3, #15
 801abc8:	ee06 3a90 	vmov	s13, r3
 801abcc:	eee0 6a47 	vfms.f32	s13, s0, s14
 801abd0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801abd4:	3e01      	subs	r6, #1
 801abd6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 801abda:	4306      	orrs	r6, r0
 801abdc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801abe0:	f024 040f 	bic.w	r4, r4, #15
 801abe4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801abe8:	bf08      	it	eq
 801abea:	eeb0 8a47 	vmoveq.f32	s16, s14
 801abee:	ee07 4a10 	vmov	s14, r4
 801abf2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801abf6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801abfa:	ee07 3a90 	vmov	s15, r3
 801abfe:	eee7 0a27 	vfma.f32	s1, s14, s15
 801ac02:	ee07 4a10 	vmov	s14, r4
 801ac06:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ac0a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801ac0e:	ee17 1a10 	vmov	r1, s14
 801ac12:	2900      	cmp	r1, #0
 801ac14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ac18:	f340 817c 	ble.w	801af14 <__ieee754_powf+0x514>
 801ac1c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801ac20:	f340 80f8 	ble.w	801ae14 <__ieee754_powf+0x414>
 801ac24:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801ac28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac2c:	bf4c      	ite	mi
 801ac2e:	2001      	movmi	r0, #1
 801ac30:	2000      	movpl	r0, #0
 801ac32:	e791      	b.n	801ab58 <__ieee754_powf+0x158>
 801ac34:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 801ac38:	bf01      	itttt	eq
 801ac3a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 801add4 <__ieee754_powf+0x3d4>
 801ac3e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801ac42:	f06f 0317 	mvneq.w	r3, #23
 801ac46:	ee17 5a90 	vmoveq	r5, s15
 801ac4a:	ea4f 52e5 	mov.w	r2, r5, asr #23
 801ac4e:	bf18      	it	ne
 801ac50:	2300      	movne	r3, #0
 801ac52:	3a7f      	subs	r2, #127	; 0x7f
 801ac54:	441a      	add	r2, r3
 801ac56:	4b60      	ldr	r3, [pc, #384]	; (801add8 <__ieee754_powf+0x3d8>)
 801ac58:	f3c5 0516 	ubfx	r5, r5, #0, #23
 801ac5c:	429d      	cmp	r5, r3
 801ac5e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 801ac62:	dd06      	ble.n	801ac72 <__ieee754_powf+0x272>
 801ac64:	4b5d      	ldr	r3, [pc, #372]	; (801addc <__ieee754_powf+0x3dc>)
 801ac66:	429d      	cmp	r5, r3
 801ac68:	f340 80a4 	ble.w	801adb4 <__ieee754_powf+0x3b4>
 801ac6c:	3201      	adds	r2, #1
 801ac6e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801ac72:	2500      	movs	r5, #0
 801ac74:	4b5a      	ldr	r3, [pc, #360]	; (801ade0 <__ieee754_powf+0x3e0>)
 801ac76:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801ac7a:	ee07 1a10 	vmov	s14, r1
 801ac7e:	edd3 5a00 	vldr	s11, [r3]
 801ac82:	4b58      	ldr	r3, [pc, #352]	; (801ade4 <__ieee754_powf+0x3e4>)
 801ac84:	ee75 7a87 	vadd.f32	s15, s11, s14
 801ac88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ac8c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 801ac90:	1049      	asrs	r1, r1, #1
 801ac92:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801ac96:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801ac9a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 801ac9e:	ee37 6a65 	vsub.f32	s12, s14, s11
 801aca2:	ee07 1a90 	vmov	s15, r1
 801aca6:	ee26 5a24 	vmul.f32	s10, s12, s9
 801acaa:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801acae:	ee15 7a10 	vmov	r7, s10
 801acb2:	401f      	ands	r7, r3
 801acb4:	ee06 7a90 	vmov	s13, r7
 801acb8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 801acbc:	ee37 7a65 	vsub.f32	s14, s14, s11
 801acc0:	ee65 7a05 	vmul.f32	s15, s10, s10
 801acc4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801acc8:	eddf 5a47 	vldr	s11, [pc, #284]	; 801ade8 <__ieee754_powf+0x3e8>
 801accc:	ed9f 7a47 	vldr	s14, [pc, #284]	; 801adec <__ieee754_powf+0x3ec>
 801acd0:	eee7 5a87 	vfma.f32	s11, s15, s14
 801acd4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801adf0 <__ieee754_powf+0x3f0>
 801acd8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801acdc:	eddf 5a39 	vldr	s11, [pc, #228]	; 801adc4 <__ieee754_powf+0x3c4>
 801ace0:	eee7 5a27 	vfma.f32	s11, s14, s15
 801ace4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 801adf4 <__ieee754_powf+0x3f4>
 801ace8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801acec:	eddf 5a42 	vldr	s11, [pc, #264]	; 801adf8 <__ieee754_powf+0x3f8>
 801acf0:	ee26 6a24 	vmul.f32	s12, s12, s9
 801acf4:	eee7 5a27 	vfma.f32	s11, s14, s15
 801acf8:	ee35 7a26 	vadd.f32	s14, s10, s13
 801acfc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801ad00:	ee27 7a06 	vmul.f32	s14, s14, s12
 801ad04:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801ad08:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801ad0c:	eef0 5a67 	vmov.f32	s11, s15
 801ad10:	eee6 5aa6 	vfma.f32	s11, s13, s13
 801ad14:	ee75 5a87 	vadd.f32	s11, s11, s14
 801ad18:	ee15 1a90 	vmov	r1, s11
 801ad1c:	4019      	ands	r1, r3
 801ad1e:	ee05 1a90 	vmov	s11, r1
 801ad22:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801ad26:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801ad2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ad2e:	ee67 7a85 	vmul.f32	s15, s15, s10
 801ad32:	eee6 7a25 	vfma.f32	s15, s12, s11
 801ad36:	eeb0 6a67 	vmov.f32	s12, s15
 801ad3a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801ad3e:	ee16 1a10 	vmov	r1, s12
 801ad42:	4019      	ands	r1, r3
 801ad44:	ee07 1a10 	vmov	s14, r1
 801ad48:	eea6 7ae5 	vfms.f32	s14, s13, s11
 801ad4c:	ee06 1a10 	vmov	s12, r1
 801ad50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ad54:	ed9f 7a29 	vldr	s14, [pc, #164]	; 801adfc <__ieee754_powf+0x3fc>
 801ad58:	4929      	ldr	r1, [pc, #164]	; (801ae00 <__ieee754_powf+0x400>)
 801ad5a:	eddf 5a2a 	vldr	s11, [pc, #168]	; 801ae04 <__ieee754_powf+0x404>
 801ad5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ad62:	ed9f 7a29 	vldr	s14, [pc, #164]	; 801ae08 <__ieee754_powf+0x408>
 801ad66:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ad6a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801ad6e:	ed91 7a00 	vldr	s14, [r1]
 801ad72:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ad76:	ee07 2a10 	vmov	s14, r2
 801ad7a:	eef0 6a67 	vmov.f32	s13, s15
 801ad7e:	4a23      	ldr	r2, [pc, #140]	; (801ae0c <__ieee754_powf+0x40c>)
 801ad80:	eee6 6a25 	vfma.f32	s13, s12, s11
 801ad84:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 801ad88:	ed92 5a00 	vldr	s10, [r2]
 801ad8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ad90:	ee76 6a85 	vadd.f32	s13, s13, s10
 801ad94:	ee76 6a87 	vadd.f32	s13, s13, s14
 801ad98:	ee16 2a90 	vmov	r2, s13
 801ad9c:	4013      	ands	r3, r2
 801ad9e:	ee06 3a90 	vmov	s13, r3
 801ada2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801ada6:	ee37 7a45 	vsub.f32	s14, s14, s10
 801adaa:	eea6 7a65 	vfms.f32	s14, s12, s11
 801adae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801adb2:	e70f      	b.n	801abd4 <__ieee754_powf+0x1d4>
 801adb4:	2501      	movs	r5, #1
 801adb6:	e75d      	b.n	801ac74 <__ieee754_powf+0x274>
 801adb8:	00000000 	.word	0x00000000
 801adbc:	3f7ffff3 	.word	0x3f7ffff3
 801adc0:	3f800007 	.word	0x3f800007
 801adc4:	3eaaaaab 	.word	0x3eaaaaab
 801adc8:	3fb8aa3b 	.word	0x3fb8aa3b
 801adcc:	36eca570 	.word	0x36eca570
 801add0:	3fb8aa00 	.word	0x3fb8aa00
 801add4:	4b800000 	.word	0x4b800000
 801add8:	001cc471 	.word	0x001cc471
 801addc:	005db3d6 	.word	0x005db3d6
 801ade0:	0801c4f8 	.word	0x0801c4f8
 801ade4:	fffff000 	.word	0xfffff000
 801ade8:	3e6c3255 	.word	0x3e6c3255
 801adec:	3e53f142 	.word	0x3e53f142
 801adf0:	3e8ba305 	.word	0x3e8ba305
 801adf4:	3edb6db7 	.word	0x3edb6db7
 801adf8:	3f19999a 	.word	0x3f19999a
 801adfc:	3f76384f 	.word	0x3f76384f
 801ae00:	0801c508 	.word	0x0801c508
 801ae04:	3f763800 	.word	0x3f763800
 801ae08:	369dc3a0 	.word	0x369dc3a0
 801ae0c:	0801c500 	.word	0x0801c500
 801ae10:	3338aa3c 	.word	0x3338aa3c
 801ae14:	f040 8093 	bne.w	801af3e <__ieee754_powf+0x53e>
 801ae18:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801ae10 <__ieee754_powf+0x410>
 801ae1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ae20:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801ae24:	eef4 6ac7 	vcmpe.f32	s13, s14
 801ae28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae2c:	f73f aefa 	bgt.w	801ac24 <__ieee754_powf+0x224>
 801ae30:	15db      	asrs	r3, r3, #23
 801ae32:	3b7e      	subs	r3, #126	; 0x7e
 801ae34:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 801ae38:	4118      	asrs	r0, r3
 801ae3a:	4408      	add	r0, r1
 801ae3c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801ae40:	4a49      	ldr	r2, [pc, #292]	; (801af68 <__ieee754_powf+0x568>)
 801ae42:	3b7f      	subs	r3, #127	; 0x7f
 801ae44:	411a      	asrs	r2, r3
 801ae46:	4002      	ands	r2, r0
 801ae48:	ee07 2a10 	vmov	s14, r2
 801ae4c:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801ae50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801ae54:	f1c3 0317 	rsb	r3, r3, #23
 801ae58:	4118      	asrs	r0, r3
 801ae5a:	2900      	cmp	r1, #0
 801ae5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ae60:	bfb8      	it	lt
 801ae62:	4240      	neglt	r0, r0
 801ae64:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801ae68:	eddf 6a40 	vldr	s13, [pc, #256]	; 801af6c <__ieee754_powf+0x56c>
 801ae6c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801af70 <__ieee754_powf+0x570>
 801ae70:	ee17 3a10 	vmov	r3, s14
 801ae74:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801ae78:	f023 030f 	bic.w	r3, r3, #15
 801ae7c:	ee07 3a10 	vmov	s14, r3
 801ae80:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ae84:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ae88:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801ae8c:	eddf 7a39 	vldr	s15, [pc, #228]	; 801af74 <__ieee754_powf+0x574>
 801ae90:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ae94:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801ae98:	eef0 6a67 	vmov.f32	s13, s15
 801ae9c:	eee7 6a06 	vfma.f32	s13, s14, s12
 801aea0:	eef0 5a66 	vmov.f32	s11, s13
 801aea4:	eee7 5a46 	vfms.f32	s11, s14, s12
 801aea8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801aeac:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801aeb0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 801af78 <__ieee754_powf+0x578>
 801aeb4:	eddf 5a31 	vldr	s11, [pc, #196]	; 801af7c <__ieee754_powf+0x57c>
 801aeb8:	eea7 6a25 	vfma.f32	s12, s14, s11
 801aebc:	eddf 5a30 	vldr	s11, [pc, #192]	; 801af80 <__ieee754_powf+0x580>
 801aec0:	eee6 5a07 	vfma.f32	s11, s12, s14
 801aec4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801af84 <__ieee754_powf+0x584>
 801aec8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801aecc:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801af88 <__ieee754_powf+0x588>
 801aed0:	eee6 5a07 	vfma.f32	s11, s12, s14
 801aed4:	eeb0 6a66 	vmov.f32	s12, s13
 801aed8:	eea5 6ac7 	vfms.f32	s12, s11, s14
 801aedc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801aee0:	ee66 5a86 	vmul.f32	s11, s13, s12
 801aee4:	ee36 6a47 	vsub.f32	s12, s12, s14
 801aee8:	eee6 7aa7 	vfma.f32	s15, s13, s15
 801aeec:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801aef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801aef4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801aef8:	ee30 0a67 	vsub.f32	s0, s0, s15
 801aefc:	ee10 3a10 	vmov	r3, s0
 801af00:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801af04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801af08:	da1f      	bge.n	801af4a <__ieee754_powf+0x54a>
 801af0a:	f000 faf3 	bl	801b4f4 <scalbnf>
 801af0e:	ee20 0a08 	vmul.f32	s0, s0, s16
 801af12:	e58d      	b.n	801aa30 <__ieee754_powf+0x30>
 801af14:	4a1d      	ldr	r2, [pc, #116]	; (801af8c <__ieee754_powf+0x58c>)
 801af16:	4293      	cmp	r3, r2
 801af18:	dd07      	ble.n	801af2a <__ieee754_powf+0x52a>
 801af1a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801af1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af22:	bf4c      	ite	mi
 801af24:	2001      	movmi	r0, #1
 801af26:	2000      	movpl	r0, #0
 801af28:	e622      	b.n	801ab70 <__ieee754_powf+0x170>
 801af2a:	d108      	bne.n	801af3e <__ieee754_powf+0x53e>
 801af2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801af30:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801af34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af38:	f6ff af7a 	blt.w	801ae30 <__ieee754_powf+0x430>
 801af3c:	e7ed      	b.n	801af1a <__ieee754_powf+0x51a>
 801af3e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801af42:	f73f af75 	bgt.w	801ae30 <__ieee754_powf+0x430>
 801af46:	2000      	movs	r0, #0
 801af48:	e78c      	b.n	801ae64 <__ieee754_powf+0x464>
 801af4a:	ee00 3a10 	vmov	s0, r3
 801af4e:	e7de      	b.n	801af0e <__ieee754_powf+0x50e>
 801af50:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801af54:	e56c      	b.n	801aa30 <__ieee754_powf+0x30>
 801af56:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801af90 <__ieee754_powf+0x590>
 801af5a:	e569      	b.n	801aa30 <__ieee754_powf+0x30>
 801af5c:	eeb0 0a48 	vmov.f32	s0, s16
 801af60:	e566      	b.n	801aa30 <__ieee754_powf+0x30>
 801af62:	2600      	movs	r6, #0
 801af64:	e591      	b.n	801aa8a <__ieee754_powf+0x8a>
 801af66:	bf00      	nop
 801af68:	ff800000 	.word	0xff800000
 801af6c:	3f317218 	.word	0x3f317218
 801af70:	3f317200 	.word	0x3f317200
 801af74:	35bfbe8c 	.word	0x35bfbe8c
 801af78:	b5ddea0e 	.word	0xb5ddea0e
 801af7c:	3331bb4c 	.word	0x3331bb4c
 801af80:	388ab355 	.word	0x388ab355
 801af84:	bb360b61 	.word	0xbb360b61
 801af88:	3e2aaaab 	.word	0x3e2aaaab
 801af8c:	43160000 	.word	0x43160000
 801af90:	00000000 	.word	0x00000000

0801af94 <__ieee754_rem_pio2f>:
 801af94:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af96:	ee10 6a10 	vmov	r6, s0
 801af9a:	4b86      	ldr	r3, [pc, #536]	; (801b1b4 <__ieee754_rem_pio2f+0x220>)
 801af9c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801afa0:	429d      	cmp	r5, r3
 801afa2:	b087      	sub	sp, #28
 801afa4:	4604      	mov	r4, r0
 801afa6:	dc05      	bgt.n	801afb4 <__ieee754_rem_pio2f+0x20>
 801afa8:	2300      	movs	r3, #0
 801afaa:	ed80 0a00 	vstr	s0, [r0]
 801afae:	6043      	str	r3, [r0, #4]
 801afb0:	2000      	movs	r0, #0
 801afb2:	e020      	b.n	801aff6 <__ieee754_rem_pio2f+0x62>
 801afb4:	4b80      	ldr	r3, [pc, #512]	; (801b1b8 <__ieee754_rem_pio2f+0x224>)
 801afb6:	429d      	cmp	r5, r3
 801afb8:	dc38      	bgt.n	801b02c <__ieee754_rem_pio2f+0x98>
 801afba:	2e00      	cmp	r6, #0
 801afbc:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801b1bc <__ieee754_rem_pio2f+0x228>
 801afc0:	4b7f      	ldr	r3, [pc, #508]	; (801b1c0 <__ieee754_rem_pio2f+0x22c>)
 801afc2:	f025 050f 	bic.w	r5, r5, #15
 801afc6:	dd18      	ble.n	801affa <__ieee754_rem_pio2f+0x66>
 801afc8:	429d      	cmp	r5, r3
 801afca:	ee70 7a47 	vsub.f32	s15, s0, s14
 801afce:	bf09      	itett	eq
 801afd0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801b1c4 <__ieee754_rem_pio2f+0x230>
 801afd4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801b1c8 <__ieee754_rem_pio2f+0x234>
 801afd8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801afdc:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801b1cc <__ieee754_rem_pio2f+0x238>
 801afe0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801afe4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801afe8:	edc0 6a00 	vstr	s13, [r0]
 801afec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801aff0:	edc0 7a01 	vstr	s15, [r0, #4]
 801aff4:	2001      	movs	r0, #1
 801aff6:	b007      	add	sp, #28
 801aff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801affa:	429d      	cmp	r5, r3
 801affc:	ee70 7a07 	vadd.f32	s15, s0, s14
 801b000:	bf09      	itett	eq
 801b002:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801b1c4 <__ieee754_rem_pio2f+0x230>
 801b006:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801b1c8 <__ieee754_rem_pio2f+0x234>
 801b00a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801b00e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801b1cc <__ieee754_rem_pio2f+0x238>
 801b012:	ee77 6a87 	vadd.f32	s13, s15, s14
 801b016:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b01a:	edc0 6a00 	vstr	s13, [r0]
 801b01e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b022:	edc0 7a01 	vstr	s15, [r0, #4]
 801b026:	f04f 30ff 	mov.w	r0, #4294967295
 801b02a:	e7e4      	b.n	801aff6 <__ieee754_rem_pio2f+0x62>
 801b02c:	4b68      	ldr	r3, [pc, #416]	; (801b1d0 <__ieee754_rem_pio2f+0x23c>)
 801b02e:	429d      	cmp	r5, r3
 801b030:	dc71      	bgt.n	801b116 <__ieee754_rem_pio2f+0x182>
 801b032:	f7fe fc42 	bl	80198ba <fabsf>
 801b036:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801b1d4 <__ieee754_rem_pio2f+0x240>
 801b03a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b03e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801b042:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b046:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b04a:	ee17 0a90 	vmov	r0, s15
 801b04e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801b1bc <__ieee754_rem_pio2f+0x228>
 801b052:	eea7 0a67 	vfms.f32	s0, s14, s15
 801b056:	281f      	cmp	r0, #31
 801b058:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801b1c8 <__ieee754_rem_pio2f+0x234>
 801b05c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b060:	eeb1 6a47 	vneg.f32	s12, s14
 801b064:	ee70 6a67 	vsub.f32	s13, s0, s15
 801b068:	ee16 2a90 	vmov	r2, s13
 801b06c:	dc1c      	bgt.n	801b0a8 <__ieee754_rem_pio2f+0x114>
 801b06e:	495a      	ldr	r1, [pc, #360]	; (801b1d8 <__ieee754_rem_pio2f+0x244>)
 801b070:	1e47      	subs	r7, r0, #1
 801b072:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801b076:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801b07a:	428b      	cmp	r3, r1
 801b07c:	d014      	beq.n	801b0a8 <__ieee754_rem_pio2f+0x114>
 801b07e:	6022      	str	r2, [r4, #0]
 801b080:	ed94 7a00 	vldr	s14, [r4]
 801b084:	ee30 0a47 	vsub.f32	s0, s0, s14
 801b088:	2e00      	cmp	r6, #0
 801b08a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b08e:	ed84 0a01 	vstr	s0, [r4, #4]
 801b092:	dab0      	bge.n	801aff6 <__ieee754_rem_pio2f+0x62>
 801b094:	eeb1 7a47 	vneg.f32	s14, s14
 801b098:	eeb1 0a40 	vneg.f32	s0, s0
 801b09c:	ed84 7a00 	vstr	s14, [r4]
 801b0a0:	ed84 0a01 	vstr	s0, [r4, #4]
 801b0a4:	4240      	negs	r0, r0
 801b0a6:	e7a6      	b.n	801aff6 <__ieee754_rem_pio2f+0x62>
 801b0a8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801b0ac:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801b0b0:	2908      	cmp	r1, #8
 801b0b2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801b0b6:	dde2      	ble.n	801b07e <__ieee754_rem_pio2f+0xea>
 801b0b8:	eddf 5a42 	vldr	s11, [pc, #264]	; 801b1c4 <__ieee754_rem_pio2f+0x230>
 801b0bc:	eef0 6a40 	vmov.f32	s13, s0
 801b0c0:	eee6 6a25 	vfma.f32	s13, s12, s11
 801b0c4:	ee70 7a66 	vsub.f32	s15, s0, s13
 801b0c8:	eee6 7a25 	vfma.f32	s15, s12, s11
 801b0cc:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801b1cc <__ieee754_rem_pio2f+0x238>
 801b0d0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801b0d4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801b0d8:	ee15 2a90 	vmov	r2, s11
 801b0dc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801b0e0:	1a5b      	subs	r3, r3, r1
 801b0e2:	2b19      	cmp	r3, #25
 801b0e4:	dc04      	bgt.n	801b0f0 <__ieee754_rem_pio2f+0x15c>
 801b0e6:	edc4 5a00 	vstr	s11, [r4]
 801b0ea:	eeb0 0a66 	vmov.f32	s0, s13
 801b0ee:	e7c7      	b.n	801b080 <__ieee754_rem_pio2f+0xec>
 801b0f0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801b1dc <__ieee754_rem_pio2f+0x248>
 801b0f4:	eeb0 0a66 	vmov.f32	s0, s13
 801b0f8:	eea6 0a25 	vfma.f32	s0, s12, s11
 801b0fc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801b100:	eddf 6a37 	vldr	s13, [pc, #220]	; 801b1e0 <__ieee754_rem_pio2f+0x24c>
 801b104:	eee6 7a25 	vfma.f32	s15, s12, s11
 801b108:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801b10c:	ee30 7a67 	vsub.f32	s14, s0, s15
 801b110:	ed84 7a00 	vstr	s14, [r4]
 801b114:	e7b4      	b.n	801b080 <__ieee754_rem_pio2f+0xec>
 801b116:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801b11a:	db06      	blt.n	801b12a <__ieee754_rem_pio2f+0x196>
 801b11c:	ee70 7a40 	vsub.f32	s15, s0, s0
 801b120:	edc0 7a01 	vstr	s15, [r0, #4]
 801b124:	edc0 7a00 	vstr	s15, [r0]
 801b128:	e742      	b.n	801afb0 <__ieee754_rem_pio2f+0x1c>
 801b12a:	15ea      	asrs	r2, r5, #23
 801b12c:	3a86      	subs	r2, #134	; 0x86
 801b12e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801b132:	ee07 3a90 	vmov	s15, r3
 801b136:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801b13a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801b1e4 <__ieee754_rem_pio2f+0x250>
 801b13e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b142:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b146:	ed8d 7a03 	vstr	s14, [sp, #12]
 801b14a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b14e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801b152:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b156:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b15a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801b15e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b162:	eef5 7a40 	vcmp.f32	s15, #0.0
 801b166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b16a:	edcd 7a05 	vstr	s15, [sp, #20]
 801b16e:	d11e      	bne.n	801b1ae <__ieee754_rem_pio2f+0x21a>
 801b170:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801b174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b178:	bf14      	ite	ne
 801b17a:	2302      	movne	r3, #2
 801b17c:	2301      	moveq	r3, #1
 801b17e:	491a      	ldr	r1, [pc, #104]	; (801b1e8 <__ieee754_rem_pio2f+0x254>)
 801b180:	9101      	str	r1, [sp, #4]
 801b182:	2102      	movs	r1, #2
 801b184:	9100      	str	r1, [sp, #0]
 801b186:	a803      	add	r0, sp, #12
 801b188:	4621      	mov	r1, r4
 801b18a:	f000 fa3b 	bl	801b604 <__kernel_rem_pio2f>
 801b18e:	2e00      	cmp	r6, #0
 801b190:	f6bf af31 	bge.w	801aff6 <__ieee754_rem_pio2f+0x62>
 801b194:	edd4 7a00 	vldr	s15, [r4]
 801b198:	eef1 7a67 	vneg.f32	s15, s15
 801b19c:	edc4 7a00 	vstr	s15, [r4]
 801b1a0:	edd4 7a01 	vldr	s15, [r4, #4]
 801b1a4:	eef1 7a67 	vneg.f32	s15, s15
 801b1a8:	edc4 7a01 	vstr	s15, [r4, #4]
 801b1ac:	e77a      	b.n	801b0a4 <__ieee754_rem_pio2f+0x110>
 801b1ae:	2303      	movs	r3, #3
 801b1b0:	e7e5      	b.n	801b17e <__ieee754_rem_pio2f+0x1ea>
 801b1b2:	bf00      	nop
 801b1b4:	3f490fd8 	.word	0x3f490fd8
 801b1b8:	4016cbe3 	.word	0x4016cbe3
 801b1bc:	3fc90f80 	.word	0x3fc90f80
 801b1c0:	3fc90fd0 	.word	0x3fc90fd0
 801b1c4:	37354400 	.word	0x37354400
 801b1c8:	37354443 	.word	0x37354443
 801b1cc:	2e85a308 	.word	0x2e85a308
 801b1d0:	43490f80 	.word	0x43490f80
 801b1d4:	3f22f984 	.word	0x3f22f984
 801b1d8:	0801c510 	.word	0x0801c510
 801b1dc:	2e85a300 	.word	0x2e85a300
 801b1e0:	248d3132 	.word	0x248d3132
 801b1e4:	43800000 	.word	0x43800000
 801b1e8:	0801c590 	.word	0x0801c590

0801b1ec <atanf>:
 801b1ec:	b538      	push	{r3, r4, r5, lr}
 801b1ee:	ee10 5a10 	vmov	r5, s0
 801b1f2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801b1f6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801b1fa:	eef0 7a40 	vmov.f32	s15, s0
 801b1fe:	db10      	blt.n	801b222 <atanf+0x36>
 801b200:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801b204:	dd04      	ble.n	801b210 <atanf+0x24>
 801b206:	ee70 7a00 	vadd.f32	s15, s0, s0
 801b20a:	eeb0 0a67 	vmov.f32	s0, s15
 801b20e:	bd38      	pop	{r3, r4, r5, pc}
 801b210:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801b348 <atanf+0x15c>
 801b214:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801b34c <atanf+0x160>
 801b218:	2d00      	cmp	r5, #0
 801b21a:	bfd8      	it	le
 801b21c:	eef0 7a47 	vmovle.f32	s15, s14
 801b220:	e7f3      	b.n	801b20a <atanf+0x1e>
 801b222:	4b4b      	ldr	r3, [pc, #300]	; (801b350 <atanf+0x164>)
 801b224:	429c      	cmp	r4, r3
 801b226:	dc10      	bgt.n	801b24a <atanf+0x5e>
 801b228:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801b22c:	da0a      	bge.n	801b244 <atanf+0x58>
 801b22e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801b354 <atanf+0x168>
 801b232:	ee30 7a07 	vadd.f32	s14, s0, s14
 801b236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b23a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801b23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b242:	dce2      	bgt.n	801b20a <atanf+0x1e>
 801b244:	f04f 33ff 	mov.w	r3, #4294967295
 801b248:	e013      	b.n	801b272 <atanf+0x86>
 801b24a:	f7fe fb36 	bl	80198ba <fabsf>
 801b24e:	4b42      	ldr	r3, [pc, #264]	; (801b358 <atanf+0x16c>)
 801b250:	429c      	cmp	r4, r3
 801b252:	dc4f      	bgt.n	801b2f4 <atanf+0x108>
 801b254:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801b258:	429c      	cmp	r4, r3
 801b25a:	dc41      	bgt.n	801b2e0 <atanf+0xf4>
 801b25c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801b260:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801b264:	eea0 7a27 	vfma.f32	s14, s0, s15
 801b268:	2300      	movs	r3, #0
 801b26a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b26e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b272:	1c5a      	adds	r2, r3, #1
 801b274:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801b278:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801b35c <atanf+0x170>
 801b27c:	eddf 5a38 	vldr	s11, [pc, #224]	; 801b360 <atanf+0x174>
 801b280:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801b364 <atanf+0x178>
 801b284:	ee66 6a06 	vmul.f32	s13, s12, s12
 801b288:	eee6 5a87 	vfma.f32	s11, s13, s14
 801b28c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801b368 <atanf+0x17c>
 801b290:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801b294:	eddf 5a35 	vldr	s11, [pc, #212]	; 801b36c <atanf+0x180>
 801b298:	eee7 5a26 	vfma.f32	s11, s14, s13
 801b29c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801b370 <atanf+0x184>
 801b2a0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801b2a4:	eddf 5a33 	vldr	s11, [pc, #204]	; 801b374 <atanf+0x188>
 801b2a8:	eee7 5a26 	vfma.f32	s11, s14, s13
 801b2ac:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801b378 <atanf+0x18c>
 801b2b0:	eea6 5a87 	vfma.f32	s10, s13, s14
 801b2b4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801b37c <atanf+0x190>
 801b2b8:	eea5 7a26 	vfma.f32	s14, s10, s13
 801b2bc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801b380 <atanf+0x194>
 801b2c0:	eea7 5a26 	vfma.f32	s10, s14, s13
 801b2c4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801b384 <atanf+0x198>
 801b2c8:	eea5 7a26 	vfma.f32	s14, s10, s13
 801b2cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b2d0:	eea5 7a86 	vfma.f32	s14, s11, s12
 801b2d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 801b2d8:	d121      	bne.n	801b31e <atanf+0x132>
 801b2da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b2de:	e794      	b.n	801b20a <atanf+0x1e>
 801b2e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b2e4:	ee30 7a67 	vsub.f32	s14, s0, s15
 801b2e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b2ec:	2301      	movs	r3, #1
 801b2ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b2f2:	e7be      	b.n	801b272 <atanf+0x86>
 801b2f4:	4b24      	ldr	r3, [pc, #144]	; (801b388 <atanf+0x19c>)
 801b2f6:	429c      	cmp	r4, r3
 801b2f8:	dc0b      	bgt.n	801b312 <atanf+0x126>
 801b2fa:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801b2fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b302:	eea0 7a27 	vfma.f32	s14, s0, s15
 801b306:	2302      	movs	r3, #2
 801b308:	ee70 6a67 	vsub.f32	s13, s0, s15
 801b30c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b310:	e7af      	b.n	801b272 <atanf+0x86>
 801b312:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801b316:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b31a:	2303      	movs	r3, #3
 801b31c:	e7a9      	b.n	801b272 <atanf+0x86>
 801b31e:	4a1b      	ldr	r2, [pc, #108]	; (801b38c <atanf+0x1a0>)
 801b320:	491b      	ldr	r1, [pc, #108]	; (801b390 <atanf+0x1a4>)
 801b322:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801b326:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b32a:	edd3 6a00 	vldr	s13, [r3]
 801b32e:	ee37 7a66 	vsub.f32	s14, s14, s13
 801b332:	2d00      	cmp	r5, #0
 801b334:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b338:	edd2 7a00 	vldr	s15, [r2]
 801b33c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b340:	bfb8      	it	lt
 801b342:	eef1 7a67 	vneglt.f32	s15, s15
 801b346:	e760      	b.n	801b20a <atanf+0x1e>
 801b348:	3fc90fdb 	.word	0x3fc90fdb
 801b34c:	bfc90fdb 	.word	0xbfc90fdb
 801b350:	3edfffff 	.word	0x3edfffff
 801b354:	7149f2ca 	.word	0x7149f2ca
 801b358:	3f97ffff 	.word	0x3f97ffff
 801b35c:	3c8569d7 	.word	0x3c8569d7
 801b360:	3d4bda59 	.word	0x3d4bda59
 801b364:	bd6ef16b 	.word	0xbd6ef16b
 801b368:	3d886b35 	.word	0x3d886b35
 801b36c:	3dba2e6e 	.word	0x3dba2e6e
 801b370:	3e124925 	.word	0x3e124925
 801b374:	3eaaaaab 	.word	0x3eaaaaab
 801b378:	bd15a221 	.word	0xbd15a221
 801b37c:	bd9d8795 	.word	0xbd9d8795
 801b380:	bde38e38 	.word	0xbde38e38
 801b384:	be4ccccd 	.word	0xbe4ccccd
 801b388:	401bffff 	.word	0x401bffff
 801b38c:	0801c8a8 	.word	0x0801c8a8
 801b390:	0801c8b8 	.word	0x0801c8b8
 801b394:	00000000 	.word	0x00000000

0801b398 <scalbn>:
 801b398:	b570      	push	{r4, r5, r6, lr}
 801b39a:	ec55 4b10 	vmov	r4, r5, d0
 801b39e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801b3a2:	4606      	mov	r6, r0
 801b3a4:	462b      	mov	r3, r5
 801b3a6:	b999      	cbnz	r1, 801b3d0 <scalbn+0x38>
 801b3a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b3ac:	4323      	orrs	r3, r4
 801b3ae:	d03f      	beq.n	801b430 <scalbn+0x98>
 801b3b0:	4b35      	ldr	r3, [pc, #212]	; (801b488 <scalbn+0xf0>)
 801b3b2:	4629      	mov	r1, r5
 801b3b4:	ee10 0a10 	vmov	r0, s0
 801b3b8:	2200      	movs	r2, #0
 801b3ba:	f7e5 f945 	bl	8000648 <__aeabi_dmul>
 801b3be:	4b33      	ldr	r3, [pc, #204]	; (801b48c <scalbn+0xf4>)
 801b3c0:	429e      	cmp	r6, r3
 801b3c2:	4604      	mov	r4, r0
 801b3c4:	460d      	mov	r5, r1
 801b3c6:	da10      	bge.n	801b3ea <scalbn+0x52>
 801b3c8:	a327      	add	r3, pc, #156	; (adr r3, 801b468 <scalbn+0xd0>)
 801b3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3ce:	e01f      	b.n	801b410 <scalbn+0x78>
 801b3d0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801b3d4:	4291      	cmp	r1, r2
 801b3d6:	d10c      	bne.n	801b3f2 <scalbn+0x5a>
 801b3d8:	ee10 2a10 	vmov	r2, s0
 801b3dc:	4620      	mov	r0, r4
 801b3de:	4629      	mov	r1, r5
 801b3e0:	f7e4 ff7c 	bl	80002dc <__adddf3>
 801b3e4:	4604      	mov	r4, r0
 801b3e6:	460d      	mov	r5, r1
 801b3e8:	e022      	b.n	801b430 <scalbn+0x98>
 801b3ea:	460b      	mov	r3, r1
 801b3ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801b3f0:	3936      	subs	r1, #54	; 0x36
 801b3f2:	f24c 3250 	movw	r2, #50000	; 0xc350
 801b3f6:	4296      	cmp	r6, r2
 801b3f8:	dd0d      	ble.n	801b416 <scalbn+0x7e>
 801b3fa:	2d00      	cmp	r5, #0
 801b3fc:	a11c      	add	r1, pc, #112	; (adr r1, 801b470 <scalbn+0xd8>)
 801b3fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b402:	da02      	bge.n	801b40a <scalbn+0x72>
 801b404:	a11c      	add	r1, pc, #112	; (adr r1, 801b478 <scalbn+0xe0>)
 801b406:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b40a:	a319      	add	r3, pc, #100	; (adr r3, 801b470 <scalbn+0xd8>)
 801b40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b410:	f7e5 f91a 	bl	8000648 <__aeabi_dmul>
 801b414:	e7e6      	b.n	801b3e4 <scalbn+0x4c>
 801b416:	1872      	adds	r2, r6, r1
 801b418:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b41c:	428a      	cmp	r2, r1
 801b41e:	dcec      	bgt.n	801b3fa <scalbn+0x62>
 801b420:	2a00      	cmp	r2, #0
 801b422:	dd08      	ble.n	801b436 <scalbn+0x9e>
 801b424:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b428:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b42c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b430:	ec45 4b10 	vmov	d0, r4, r5
 801b434:	bd70      	pop	{r4, r5, r6, pc}
 801b436:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b43a:	da08      	bge.n	801b44e <scalbn+0xb6>
 801b43c:	2d00      	cmp	r5, #0
 801b43e:	a10a      	add	r1, pc, #40	; (adr r1, 801b468 <scalbn+0xd0>)
 801b440:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b444:	dac0      	bge.n	801b3c8 <scalbn+0x30>
 801b446:	a10e      	add	r1, pc, #56	; (adr r1, 801b480 <scalbn+0xe8>)
 801b448:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b44c:	e7bc      	b.n	801b3c8 <scalbn+0x30>
 801b44e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b452:	3236      	adds	r2, #54	; 0x36
 801b454:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b458:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801b45c:	4620      	mov	r0, r4
 801b45e:	4b0c      	ldr	r3, [pc, #48]	; (801b490 <scalbn+0xf8>)
 801b460:	2200      	movs	r2, #0
 801b462:	e7d5      	b.n	801b410 <scalbn+0x78>
 801b464:	f3af 8000 	nop.w
 801b468:	c2f8f359 	.word	0xc2f8f359
 801b46c:	01a56e1f 	.word	0x01a56e1f
 801b470:	8800759c 	.word	0x8800759c
 801b474:	7e37e43c 	.word	0x7e37e43c
 801b478:	8800759c 	.word	0x8800759c
 801b47c:	fe37e43c 	.word	0xfe37e43c
 801b480:	c2f8f359 	.word	0xc2f8f359
 801b484:	81a56e1f 	.word	0x81a56e1f
 801b488:	43500000 	.word	0x43500000
 801b48c:	ffff3cb0 	.word	0xffff3cb0
 801b490:	3c900000 	.word	0x3c900000

0801b494 <with_errno>:
 801b494:	b570      	push	{r4, r5, r6, lr}
 801b496:	4604      	mov	r4, r0
 801b498:	460d      	mov	r5, r1
 801b49a:	4616      	mov	r6, r2
 801b49c:	f7fa f93a 	bl	8015714 <__errno>
 801b4a0:	4629      	mov	r1, r5
 801b4a2:	6006      	str	r6, [r0, #0]
 801b4a4:	4620      	mov	r0, r4
 801b4a6:	bd70      	pop	{r4, r5, r6, pc}

0801b4a8 <xflow>:
 801b4a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b4aa:	4614      	mov	r4, r2
 801b4ac:	461d      	mov	r5, r3
 801b4ae:	b108      	cbz	r0, 801b4b4 <xflow+0xc>
 801b4b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b4b4:	e9cd 2300 	strd	r2, r3, [sp]
 801b4b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b4bc:	4620      	mov	r0, r4
 801b4be:	4629      	mov	r1, r5
 801b4c0:	f7e5 f8c2 	bl	8000648 <__aeabi_dmul>
 801b4c4:	2222      	movs	r2, #34	; 0x22
 801b4c6:	b003      	add	sp, #12
 801b4c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b4cc:	f7ff bfe2 	b.w	801b494 <with_errno>

0801b4d0 <__math_uflow>:
 801b4d0:	b508      	push	{r3, lr}
 801b4d2:	2200      	movs	r2, #0
 801b4d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801b4d8:	f7ff ffe6 	bl	801b4a8 <xflow>
 801b4dc:	ec41 0b10 	vmov	d0, r0, r1
 801b4e0:	bd08      	pop	{r3, pc}

0801b4e2 <__math_oflow>:
 801b4e2:	b508      	push	{r3, lr}
 801b4e4:	2200      	movs	r2, #0
 801b4e6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801b4ea:	f7ff ffdd 	bl	801b4a8 <xflow>
 801b4ee:	ec41 0b10 	vmov	d0, r0, r1
 801b4f2:	bd08      	pop	{r3, pc}

0801b4f4 <scalbnf>:
 801b4f4:	ee10 3a10 	vmov	r3, s0
 801b4f8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801b4fc:	d02b      	beq.n	801b556 <scalbnf+0x62>
 801b4fe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801b502:	d302      	bcc.n	801b50a <scalbnf+0x16>
 801b504:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b508:	4770      	bx	lr
 801b50a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801b50e:	d123      	bne.n	801b558 <scalbnf+0x64>
 801b510:	4b24      	ldr	r3, [pc, #144]	; (801b5a4 <scalbnf+0xb0>)
 801b512:	eddf 7a25 	vldr	s15, [pc, #148]	; 801b5a8 <scalbnf+0xb4>
 801b516:	4298      	cmp	r0, r3
 801b518:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b51c:	db17      	blt.n	801b54e <scalbnf+0x5a>
 801b51e:	ee10 3a10 	vmov	r3, s0
 801b522:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b526:	3a19      	subs	r2, #25
 801b528:	f24c 3150 	movw	r1, #50000	; 0xc350
 801b52c:	4288      	cmp	r0, r1
 801b52e:	dd15      	ble.n	801b55c <scalbnf+0x68>
 801b530:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801b5ac <scalbnf+0xb8>
 801b534:	eddf 6a1e 	vldr	s13, [pc, #120]	; 801b5b0 <scalbnf+0xbc>
 801b538:	ee10 3a10 	vmov	r3, s0
 801b53c:	eeb0 7a67 	vmov.f32	s14, s15
 801b540:	2b00      	cmp	r3, #0
 801b542:	bfb8      	it	lt
 801b544:	eef0 7a66 	vmovlt.f32	s15, s13
 801b548:	ee27 0a87 	vmul.f32	s0, s15, s14
 801b54c:	4770      	bx	lr
 801b54e:	eddf 7a19 	vldr	s15, [pc, #100]	; 801b5b4 <scalbnf+0xc0>
 801b552:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b556:	4770      	bx	lr
 801b558:	0dd2      	lsrs	r2, r2, #23
 801b55a:	e7e5      	b.n	801b528 <scalbnf+0x34>
 801b55c:	4410      	add	r0, r2
 801b55e:	28fe      	cmp	r0, #254	; 0xfe
 801b560:	dce6      	bgt.n	801b530 <scalbnf+0x3c>
 801b562:	2800      	cmp	r0, #0
 801b564:	dd06      	ble.n	801b574 <scalbnf+0x80>
 801b566:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b56a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801b56e:	ee00 3a10 	vmov	s0, r3
 801b572:	4770      	bx	lr
 801b574:	f110 0f16 	cmn.w	r0, #22
 801b578:	da09      	bge.n	801b58e <scalbnf+0x9a>
 801b57a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801b5b4 <scalbnf+0xc0>
 801b57e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 801b5b8 <scalbnf+0xc4>
 801b582:	ee10 3a10 	vmov	r3, s0
 801b586:	eeb0 7a67 	vmov.f32	s14, s15
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	e7d9      	b.n	801b542 <scalbnf+0x4e>
 801b58e:	3019      	adds	r0, #25
 801b590:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b594:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801b598:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801b5bc <scalbnf+0xc8>
 801b59c:	ee07 3a90 	vmov	s15, r3
 801b5a0:	e7d7      	b.n	801b552 <scalbnf+0x5e>
 801b5a2:	bf00      	nop
 801b5a4:	ffff3cb0 	.word	0xffff3cb0
 801b5a8:	4c000000 	.word	0x4c000000
 801b5ac:	7149f2ca 	.word	0x7149f2ca
 801b5b0:	f149f2ca 	.word	0xf149f2ca
 801b5b4:	0da24260 	.word	0x0da24260
 801b5b8:	8da24260 	.word	0x8da24260
 801b5bc:	33000000 	.word	0x33000000

0801b5c0 <with_errnof>:
 801b5c0:	b513      	push	{r0, r1, r4, lr}
 801b5c2:	4604      	mov	r4, r0
 801b5c4:	ed8d 0a01 	vstr	s0, [sp, #4]
 801b5c8:	f7fa f8a4 	bl	8015714 <__errno>
 801b5cc:	ed9d 0a01 	vldr	s0, [sp, #4]
 801b5d0:	6004      	str	r4, [r0, #0]
 801b5d2:	b002      	add	sp, #8
 801b5d4:	bd10      	pop	{r4, pc}

0801b5d6 <xflowf>:
 801b5d6:	b130      	cbz	r0, 801b5e6 <xflowf+0x10>
 801b5d8:	eef1 7a40 	vneg.f32	s15, s0
 801b5dc:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b5e0:	2022      	movs	r0, #34	; 0x22
 801b5e2:	f7ff bfed 	b.w	801b5c0 <with_errnof>
 801b5e6:	eef0 7a40 	vmov.f32	s15, s0
 801b5ea:	e7f7      	b.n	801b5dc <xflowf+0x6>

0801b5ec <__math_uflowf>:
 801b5ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b5f4 <__math_uflowf+0x8>
 801b5f0:	f7ff bff1 	b.w	801b5d6 <xflowf>
 801b5f4:	10000000 	.word	0x10000000

0801b5f8 <__math_oflowf>:
 801b5f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b600 <__math_oflowf+0x8>
 801b5fc:	f7ff bfeb 	b.w	801b5d6 <xflowf>
 801b600:	70000000 	.word	0x70000000

0801b604 <__kernel_rem_pio2f>:
 801b604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b608:	ed2d 8b04 	vpush	{d8-d9}
 801b60c:	b0d9      	sub	sp, #356	; 0x164
 801b60e:	4688      	mov	r8, r1
 801b610:	9002      	str	r0, [sp, #8]
 801b612:	49b8      	ldr	r1, [pc, #736]	; (801b8f4 <__kernel_rem_pio2f+0x2f0>)
 801b614:	9866      	ldr	r0, [sp, #408]	; 0x198
 801b616:	9301      	str	r3, [sp, #4]
 801b618:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801b61c:	9901      	ldr	r1, [sp, #4]
 801b61e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801b620:	f101 3bff 	add.w	fp, r1, #4294967295
 801b624:	1d11      	adds	r1, r2, #4
 801b626:	db25      	blt.n	801b674 <__kernel_rem_pio2f+0x70>
 801b628:	1ed0      	subs	r0, r2, #3
 801b62a:	bf48      	it	mi
 801b62c:	1d10      	addmi	r0, r2, #4
 801b62e:	10c0      	asrs	r0, r0, #3
 801b630:	1c45      	adds	r5, r0, #1
 801b632:	00e9      	lsls	r1, r5, #3
 801b634:	eba0 070b 	sub.w	r7, r0, fp
 801b638:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801b904 <__kernel_rem_pio2f+0x300>
 801b63c:	9103      	str	r1, [sp, #12]
 801b63e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801b642:	eb0a 0c0b 	add.w	ip, sl, fp
 801b646:	ae1c      	add	r6, sp, #112	; 0x70
 801b648:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801b64c:	2400      	movs	r4, #0
 801b64e:	4564      	cmp	r4, ip
 801b650:	dd12      	ble.n	801b678 <__kernel_rem_pio2f+0x74>
 801b652:	9901      	ldr	r1, [sp, #4]
 801b654:	ac1c      	add	r4, sp, #112	; 0x70
 801b656:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801b65a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801b65e:	f04f 0c00 	mov.w	ip, #0
 801b662:	45d4      	cmp	ip, sl
 801b664:	dc27      	bgt.n	801b6b6 <__kernel_rem_pio2f+0xb2>
 801b666:	f8dd e008 	ldr.w	lr, [sp, #8]
 801b66a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801b904 <__kernel_rem_pio2f+0x300>
 801b66e:	4627      	mov	r7, r4
 801b670:	2600      	movs	r6, #0
 801b672:	e016      	b.n	801b6a2 <__kernel_rem_pio2f+0x9e>
 801b674:	2000      	movs	r0, #0
 801b676:	e7db      	b.n	801b630 <__kernel_rem_pio2f+0x2c>
 801b678:	42e7      	cmn	r7, r4
 801b67a:	bf5d      	ittte	pl
 801b67c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801b680:	ee07 1a90 	vmovpl	s15, r1
 801b684:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801b688:	eef0 7a47 	vmovmi.f32	s15, s14
 801b68c:	ece6 7a01 	vstmia	r6!, {s15}
 801b690:	3401      	adds	r4, #1
 801b692:	e7dc      	b.n	801b64e <__kernel_rem_pio2f+0x4a>
 801b694:	ecfe 6a01 	vldmia	lr!, {s13}
 801b698:	ed97 7a00 	vldr	s14, [r7]
 801b69c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b6a0:	3601      	adds	r6, #1
 801b6a2:	455e      	cmp	r6, fp
 801b6a4:	f1a7 0704 	sub.w	r7, r7, #4
 801b6a8:	ddf4      	ble.n	801b694 <__kernel_rem_pio2f+0x90>
 801b6aa:	ece9 7a01 	vstmia	r9!, {s15}
 801b6ae:	f10c 0c01 	add.w	ip, ip, #1
 801b6b2:	3404      	adds	r4, #4
 801b6b4:	e7d5      	b.n	801b662 <__kernel_rem_pio2f+0x5e>
 801b6b6:	a908      	add	r1, sp, #32
 801b6b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b6bc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801b6c0:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801b900 <__kernel_rem_pio2f+0x2fc>
 801b6c4:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801b8fc <__kernel_rem_pio2f+0x2f8>
 801b6c8:	9105      	str	r1, [sp, #20]
 801b6ca:	9304      	str	r3, [sp, #16]
 801b6cc:	4656      	mov	r6, sl
 801b6ce:	00b3      	lsls	r3, r6, #2
 801b6d0:	9306      	str	r3, [sp, #24]
 801b6d2:	ab58      	add	r3, sp, #352	; 0x160
 801b6d4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801b6d8:	ac08      	add	r4, sp, #32
 801b6da:	ab44      	add	r3, sp, #272	; 0x110
 801b6dc:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801b6e0:	46a4      	mov	ip, r4
 801b6e2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801b6e6:	4637      	mov	r7, r6
 801b6e8:	2f00      	cmp	r7, #0
 801b6ea:	f1a0 0004 	sub.w	r0, r0, #4
 801b6ee:	dc4a      	bgt.n	801b786 <__kernel_rem_pio2f+0x182>
 801b6f0:	4628      	mov	r0, r5
 801b6f2:	9207      	str	r2, [sp, #28]
 801b6f4:	f7ff fefe 	bl	801b4f4 <scalbnf>
 801b6f8:	eeb0 8a40 	vmov.f32	s16, s0
 801b6fc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801b700:	ee28 0a00 	vmul.f32	s0, s16, s0
 801b704:	f000 f9f0 	bl	801bae8 <floorf>
 801b708:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801b70c:	eea0 8a67 	vfms.f32	s16, s0, s15
 801b710:	2d00      	cmp	r5, #0
 801b712:	9a07      	ldr	r2, [sp, #28]
 801b714:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801b718:	ee17 9a90 	vmov	r9, s15
 801b71c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b720:	ee38 8a67 	vsub.f32	s16, s16, s15
 801b724:	dd41      	ble.n	801b7aa <__kernel_rem_pio2f+0x1a6>
 801b726:	f106 3cff 	add.w	ip, r6, #4294967295
 801b72a:	ab08      	add	r3, sp, #32
 801b72c:	f1c5 0e08 	rsb	lr, r5, #8
 801b730:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801b734:	fa47 f00e 	asr.w	r0, r7, lr
 801b738:	4481      	add	r9, r0
 801b73a:	fa00 f00e 	lsl.w	r0, r0, lr
 801b73e:	1a3f      	subs	r7, r7, r0
 801b740:	f1c5 0007 	rsb	r0, r5, #7
 801b744:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801b748:	4107      	asrs	r7, r0
 801b74a:	2f00      	cmp	r7, #0
 801b74c:	dd3c      	ble.n	801b7c8 <__kernel_rem_pio2f+0x1c4>
 801b74e:	f04f 0e00 	mov.w	lr, #0
 801b752:	f109 0901 	add.w	r9, r9, #1
 801b756:	4671      	mov	r1, lr
 801b758:	4576      	cmp	r6, lr
 801b75a:	dc67      	bgt.n	801b82c <__kernel_rem_pio2f+0x228>
 801b75c:	2d00      	cmp	r5, #0
 801b75e:	dd03      	ble.n	801b768 <__kernel_rem_pio2f+0x164>
 801b760:	2d01      	cmp	r5, #1
 801b762:	d074      	beq.n	801b84e <__kernel_rem_pio2f+0x24a>
 801b764:	2d02      	cmp	r5, #2
 801b766:	d07b      	beq.n	801b860 <__kernel_rem_pio2f+0x25c>
 801b768:	2f02      	cmp	r7, #2
 801b76a:	d12d      	bne.n	801b7c8 <__kernel_rem_pio2f+0x1c4>
 801b76c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801b770:	ee30 8a48 	vsub.f32	s16, s0, s16
 801b774:	b341      	cbz	r1, 801b7c8 <__kernel_rem_pio2f+0x1c4>
 801b776:	4628      	mov	r0, r5
 801b778:	9207      	str	r2, [sp, #28]
 801b77a:	f7ff febb 	bl	801b4f4 <scalbnf>
 801b77e:	9a07      	ldr	r2, [sp, #28]
 801b780:	ee38 8a40 	vsub.f32	s16, s16, s0
 801b784:	e020      	b.n	801b7c8 <__kernel_rem_pio2f+0x1c4>
 801b786:	ee60 7a28 	vmul.f32	s15, s0, s17
 801b78a:	3f01      	subs	r7, #1
 801b78c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b794:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801b798:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b79c:	ecac 0a01 	vstmia	ip!, {s0}
 801b7a0:	ed90 0a00 	vldr	s0, [r0]
 801b7a4:	ee37 0a80 	vadd.f32	s0, s15, s0
 801b7a8:	e79e      	b.n	801b6e8 <__kernel_rem_pio2f+0xe4>
 801b7aa:	d105      	bne.n	801b7b8 <__kernel_rem_pio2f+0x1b4>
 801b7ac:	1e70      	subs	r0, r6, #1
 801b7ae:	ab08      	add	r3, sp, #32
 801b7b0:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801b7b4:	11ff      	asrs	r7, r7, #7
 801b7b6:	e7c8      	b.n	801b74a <__kernel_rem_pio2f+0x146>
 801b7b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b7bc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801b7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7c4:	da30      	bge.n	801b828 <__kernel_rem_pio2f+0x224>
 801b7c6:	2700      	movs	r7, #0
 801b7c8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b7cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7d0:	f040 809a 	bne.w	801b908 <__kernel_rem_pio2f+0x304>
 801b7d4:	1e74      	subs	r4, r6, #1
 801b7d6:	46a4      	mov	ip, r4
 801b7d8:	2100      	movs	r1, #0
 801b7da:	45d4      	cmp	ip, sl
 801b7dc:	da47      	bge.n	801b86e <__kernel_rem_pio2f+0x26a>
 801b7de:	2900      	cmp	r1, #0
 801b7e0:	d063      	beq.n	801b8aa <__kernel_rem_pio2f+0x2a6>
 801b7e2:	ab08      	add	r3, sp, #32
 801b7e4:	3d08      	subs	r5, #8
 801b7e6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801b7ea:	2b00      	cmp	r3, #0
 801b7ec:	d07f      	beq.n	801b8ee <__kernel_rem_pio2f+0x2ea>
 801b7ee:	4628      	mov	r0, r5
 801b7f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801b7f4:	f7ff fe7e 	bl	801b4f4 <scalbnf>
 801b7f8:	1c63      	adds	r3, r4, #1
 801b7fa:	aa44      	add	r2, sp, #272	; 0x110
 801b7fc:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801b900 <__kernel_rem_pio2f+0x2fc>
 801b800:	0099      	lsls	r1, r3, #2
 801b802:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801b806:	4623      	mov	r3, r4
 801b808:	2b00      	cmp	r3, #0
 801b80a:	f280 80ad 	bge.w	801b968 <__kernel_rem_pio2f+0x364>
 801b80e:	4623      	mov	r3, r4
 801b810:	2b00      	cmp	r3, #0
 801b812:	f2c0 80cb 	blt.w	801b9ac <__kernel_rem_pio2f+0x3a8>
 801b816:	aa44      	add	r2, sp, #272	; 0x110
 801b818:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801b81c:	4e36      	ldr	r6, [pc, #216]	; (801b8f8 <__kernel_rem_pio2f+0x2f4>)
 801b81e:	eddf 7a39 	vldr	s15, [pc, #228]	; 801b904 <__kernel_rem_pio2f+0x300>
 801b822:	2000      	movs	r0, #0
 801b824:	1ae2      	subs	r2, r4, r3
 801b826:	e0b6      	b.n	801b996 <__kernel_rem_pio2f+0x392>
 801b828:	2702      	movs	r7, #2
 801b82a:	e790      	b.n	801b74e <__kernel_rem_pio2f+0x14a>
 801b82c:	6820      	ldr	r0, [r4, #0]
 801b82e:	b949      	cbnz	r1, 801b844 <__kernel_rem_pio2f+0x240>
 801b830:	b118      	cbz	r0, 801b83a <__kernel_rem_pio2f+0x236>
 801b832:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801b836:	6020      	str	r0, [r4, #0]
 801b838:	2001      	movs	r0, #1
 801b83a:	f10e 0e01 	add.w	lr, lr, #1
 801b83e:	3404      	adds	r4, #4
 801b840:	4601      	mov	r1, r0
 801b842:	e789      	b.n	801b758 <__kernel_rem_pio2f+0x154>
 801b844:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801b848:	6020      	str	r0, [r4, #0]
 801b84a:	4608      	mov	r0, r1
 801b84c:	e7f5      	b.n	801b83a <__kernel_rem_pio2f+0x236>
 801b84e:	1e74      	subs	r4, r6, #1
 801b850:	ab08      	add	r3, sp, #32
 801b852:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b856:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801b85a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b85e:	e783      	b.n	801b768 <__kernel_rem_pio2f+0x164>
 801b860:	1e74      	subs	r4, r6, #1
 801b862:	ab08      	add	r3, sp, #32
 801b864:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b868:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801b86c:	e7f5      	b.n	801b85a <__kernel_rem_pio2f+0x256>
 801b86e:	ab08      	add	r3, sp, #32
 801b870:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801b874:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b878:	4301      	orrs	r1, r0
 801b87a:	e7ae      	b.n	801b7da <__kernel_rem_pio2f+0x1d6>
 801b87c:	3001      	adds	r0, #1
 801b87e:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801b882:	2f00      	cmp	r7, #0
 801b884:	d0fa      	beq.n	801b87c <__kernel_rem_pio2f+0x278>
 801b886:	9b06      	ldr	r3, [sp, #24]
 801b888:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801b88c:	eb0d 0403 	add.w	r4, sp, r3
 801b890:	9b01      	ldr	r3, [sp, #4]
 801b892:	18f7      	adds	r7, r6, r3
 801b894:	ab1c      	add	r3, sp, #112	; 0x70
 801b896:	f106 0c01 	add.w	ip, r6, #1
 801b89a:	3c4c      	subs	r4, #76	; 0x4c
 801b89c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b8a0:	4430      	add	r0, r6
 801b8a2:	4560      	cmp	r0, ip
 801b8a4:	da04      	bge.n	801b8b0 <__kernel_rem_pio2f+0x2ac>
 801b8a6:	4606      	mov	r6, r0
 801b8a8:	e711      	b.n	801b6ce <__kernel_rem_pio2f+0xca>
 801b8aa:	9c05      	ldr	r4, [sp, #20]
 801b8ac:	2001      	movs	r0, #1
 801b8ae:	e7e6      	b.n	801b87e <__kernel_rem_pio2f+0x27a>
 801b8b0:	9b04      	ldr	r3, [sp, #16]
 801b8b2:	f8dd e008 	ldr.w	lr, [sp, #8]
 801b8b6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801b8ba:	9306      	str	r3, [sp, #24]
 801b8bc:	ee07 3a90 	vmov	s15, r3
 801b8c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b8c4:	2600      	movs	r6, #0
 801b8c6:	ece7 7a01 	vstmia	r7!, {s15}
 801b8ca:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801b904 <__kernel_rem_pio2f+0x300>
 801b8ce:	46b9      	mov	r9, r7
 801b8d0:	455e      	cmp	r6, fp
 801b8d2:	dd04      	ble.n	801b8de <__kernel_rem_pio2f+0x2da>
 801b8d4:	ece4 7a01 	vstmia	r4!, {s15}
 801b8d8:	f10c 0c01 	add.w	ip, ip, #1
 801b8dc:	e7e1      	b.n	801b8a2 <__kernel_rem_pio2f+0x29e>
 801b8de:	ecfe 6a01 	vldmia	lr!, {s13}
 801b8e2:	ed39 7a01 	vldmdb	r9!, {s14}
 801b8e6:	3601      	adds	r6, #1
 801b8e8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b8ec:	e7f0      	b.n	801b8d0 <__kernel_rem_pio2f+0x2cc>
 801b8ee:	3c01      	subs	r4, #1
 801b8f0:	e777      	b.n	801b7e2 <__kernel_rem_pio2f+0x1de>
 801b8f2:	bf00      	nop
 801b8f4:	0801c8f4 	.word	0x0801c8f4
 801b8f8:	0801c8c8 	.word	0x0801c8c8
 801b8fc:	43800000 	.word	0x43800000
 801b900:	3b800000 	.word	0x3b800000
 801b904:	00000000 	.word	0x00000000
 801b908:	9b03      	ldr	r3, [sp, #12]
 801b90a:	eeb0 0a48 	vmov.f32	s0, s16
 801b90e:	1a98      	subs	r0, r3, r2
 801b910:	f7ff fdf0 	bl	801b4f4 <scalbnf>
 801b914:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801b8fc <__kernel_rem_pio2f+0x2f8>
 801b918:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801b91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b920:	db19      	blt.n	801b956 <__kernel_rem_pio2f+0x352>
 801b922:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801b900 <__kernel_rem_pio2f+0x2fc>
 801b926:	ee60 7a27 	vmul.f32	s15, s0, s15
 801b92a:	aa08      	add	r2, sp, #32
 801b92c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b930:	1c74      	adds	r4, r6, #1
 801b932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b936:	3508      	adds	r5, #8
 801b938:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801b93c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b940:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b944:	ee10 3a10 	vmov	r3, s0
 801b948:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801b94c:	ee17 3a90 	vmov	r3, s15
 801b950:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801b954:	e74b      	b.n	801b7ee <__kernel_rem_pio2f+0x1ea>
 801b956:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b95a:	aa08      	add	r2, sp, #32
 801b95c:	ee10 3a10 	vmov	r3, s0
 801b960:	4634      	mov	r4, r6
 801b962:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801b966:	e742      	b.n	801b7ee <__kernel_rem_pio2f+0x1ea>
 801b968:	a808      	add	r0, sp, #32
 801b96a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801b96e:	9001      	str	r0, [sp, #4]
 801b970:	ee07 0a90 	vmov	s15, r0
 801b974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b978:	3b01      	subs	r3, #1
 801b97a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b97e:	ee20 0a07 	vmul.f32	s0, s0, s14
 801b982:	ed62 7a01 	vstmdb	r2!, {s15}
 801b986:	e73f      	b.n	801b808 <__kernel_rem_pio2f+0x204>
 801b988:	ecf6 6a01 	vldmia	r6!, {s13}
 801b98c:	ecb5 7a01 	vldmia	r5!, {s14}
 801b990:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b994:	3001      	adds	r0, #1
 801b996:	4550      	cmp	r0, sl
 801b998:	dc01      	bgt.n	801b99e <__kernel_rem_pio2f+0x39a>
 801b99a:	4290      	cmp	r0, r2
 801b99c:	ddf4      	ble.n	801b988 <__kernel_rem_pio2f+0x384>
 801b99e:	a858      	add	r0, sp, #352	; 0x160
 801b9a0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801b9a4:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801b9a8:	3b01      	subs	r3, #1
 801b9aa:	e731      	b.n	801b810 <__kernel_rem_pio2f+0x20c>
 801b9ac:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801b9ae:	2b02      	cmp	r3, #2
 801b9b0:	dc09      	bgt.n	801b9c6 <__kernel_rem_pio2f+0x3c2>
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	dc2b      	bgt.n	801ba0e <__kernel_rem_pio2f+0x40a>
 801b9b6:	d044      	beq.n	801ba42 <__kernel_rem_pio2f+0x43e>
 801b9b8:	f009 0007 	and.w	r0, r9, #7
 801b9bc:	b059      	add	sp, #356	; 0x164
 801b9be:	ecbd 8b04 	vpop	{d8-d9}
 801b9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9c6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801b9c8:	2b03      	cmp	r3, #3
 801b9ca:	d1f5      	bne.n	801b9b8 <__kernel_rem_pio2f+0x3b4>
 801b9cc:	aa30      	add	r2, sp, #192	; 0xc0
 801b9ce:	1f0b      	subs	r3, r1, #4
 801b9d0:	4413      	add	r3, r2
 801b9d2:	461a      	mov	r2, r3
 801b9d4:	4620      	mov	r0, r4
 801b9d6:	2800      	cmp	r0, #0
 801b9d8:	f1a2 0204 	sub.w	r2, r2, #4
 801b9dc:	dc52      	bgt.n	801ba84 <__kernel_rem_pio2f+0x480>
 801b9de:	4622      	mov	r2, r4
 801b9e0:	2a01      	cmp	r2, #1
 801b9e2:	f1a3 0304 	sub.w	r3, r3, #4
 801b9e6:	dc5d      	bgt.n	801baa4 <__kernel_rem_pio2f+0x4a0>
 801b9e8:	ab30      	add	r3, sp, #192	; 0xc0
 801b9ea:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801b904 <__kernel_rem_pio2f+0x300>
 801b9ee:	440b      	add	r3, r1
 801b9f0:	2c01      	cmp	r4, #1
 801b9f2:	dc67      	bgt.n	801bac4 <__kernel_rem_pio2f+0x4c0>
 801b9f4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801b9f8:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801b9fc:	2f00      	cmp	r7, #0
 801b9fe:	d167      	bne.n	801bad0 <__kernel_rem_pio2f+0x4cc>
 801ba00:	edc8 6a00 	vstr	s13, [r8]
 801ba04:	ed88 7a01 	vstr	s14, [r8, #4]
 801ba08:	edc8 7a02 	vstr	s15, [r8, #8]
 801ba0c:	e7d4      	b.n	801b9b8 <__kernel_rem_pio2f+0x3b4>
 801ba0e:	ab30      	add	r3, sp, #192	; 0xc0
 801ba10:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801b904 <__kernel_rem_pio2f+0x300>
 801ba14:	440b      	add	r3, r1
 801ba16:	4622      	mov	r2, r4
 801ba18:	2a00      	cmp	r2, #0
 801ba1a:	da24      	bge.n	801ba66 <__kernel_rem_pio2f+0x462>
 801ba1c:	b34f      	cbz	r7, 801ba72 <__kernel_rem_pio2f+0x46e>
 801ba1e:	eef1 7a47 	vneg.f32	s15, s14
 801ba22:	edc8 7a00 	vstr	s15, [r8]
 801ba26:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801ba2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ba2e:	aa31      	add	r2, sp, #196	; 0xc4
 801ba30:	2301      	movs	r3, #1
 801ba32:	429c      	cmp	r4, r3
 801ba34:	da20      	bge.n	801ba78 <__kernel_rem_pio2f+0x474>
 801ba36:	b10f      	cbz	r7, 801ba3c <__kernel_rem_pio2f+0x438>
 801ba38:	eef1 7a67 	vneg.f32	s15, s15
 801ba3c:	edc8 7a01 	vstr	s15, [r8, #4]
 801ba40:	e7ba      	b.n	801b9b8 <__kernel_rem_pio2f+0x3b4>
 801ba42:	ab30      	add	r3, sp, #192	; 0xc0
 801ba44:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801b904 <__kernel_rem_pio2f+0x300>
 801ba48:	440b      	add	r3, r1
 801ba4a:	2c00      	cmp	r4, #0
 801ba4c:	da05      	bge.n	801ba5a <__kernel_rem_pio2f+0x456>
 801ba4e:	b10f      	cbz	r7, 801ba54 <__kernel_rem_pio2f+0x450>
 801ba50:	eef1 7a67 	vneg.f32	s15, s15
 801ba54:	edc8 7a00 	vstr	s15, [r8]
 801ba58:	e7ae      	b.n	801b9b8 <__kernel_rem_pio2f+0x3b4>
 801ba5a:	ed33 7a01 	vldmdb	r3!, {s14}
 801ba5e:	3c01      	subs	r4, #1
 801ba60:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ba64:	e7f1      	b.n	801ba4a <__kernel_rem_pio2f+0x446>
 801ba66:	ed73 7a01 	vldmdb	r3!, {s15}
 801ba6a:	3a01      	subs	r2, #1
 801ba6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ba70:	e7d2      	b.n	801ba18 <__kernel_rem_pio2f+0x414>
 801ba72:	eef0 7a47 	vmov.f32	s15, s14
 801ba76:	e7d4      	b.n	801ba22 <__kernel_rem_pio2f+0x41e>
 801ba78:	ecb2 7a01 	vldmia	r2!, {s14}
 801ba7c:	3301      	adds	r3, #1
 801ba7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ba82:	e7d6      	b.n	801ba32 <__kernel_rem_pio2f+0x42e>
 801ba84:	edd2 7a00 	vldr	s15, [r2]
 801ba88:	edd2 6a01 	vldr	s13, [r2, #4]
 801ba8c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ba90:	3801      	subs	r0, #1
 801ba92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ba96:	ed82 7a00 	vstr	s14, [r2]
 801ba9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ba9e:	edc2 7a01 	vstr	s15, [r2, #4]
 801baa2:	e798      	b.n	801b9d6 <__kernel_rem_pio2f+0x3d2>
 801baa4:	edd3 7a00 	vldr	s15, [r3]
 801baa8:	edd3 6a01 	vldr	s13, [r3, #4]
 801baac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801bab0:	3a01      	subs	r2, #1
 801bab2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bab6:	ed83 7a00 	vstr	s14, [r3]
 801baba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801babe:	edc3 7a01 	vstr	s15, [r3, #4]
 801bac2:	e78d      	b.n	801b9e0 <__kernel_rem_pio2f+0x3dc>
 801bac4:	ed33 7a01 	vldmdb	r3!, {s14}
 801bac8:	3c01      	subs	r4, #1
 801baca:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bace:	e78f      	b.n	801b9f0 <__kernel_rem_pio2f+0x3ec>
 801bad0:	eef1 6a66 	vneg.f32	s13, s13
 801bad4:	eeb1 7a47 	vneg.f32	s14, s14
 801bad8:	edc8 6a00 	vstr	s13, [r8]
 801badc:	ed88 7a01 	vstr	s14, [r8, #4]
 801bae0:	eef1 7a67 	vneg.f32	s15, s15
 801bae4:	e790      	b.n	801ba08 <__kernel_rem_pio2f+0x404>
 801bae6:	bf00      	nop

0801bae8 <floorf>:
 801bae8:	ee10 3a10 	vmov	r3, s0
 801baec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801baf0:	3a7f      	subs	r2, #127	; 0x7f
 801baf2:	2a16      	cmp	r2, #22
 801baf4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801baf8:	dc2a      	bgt.n	801bb50 <floorf+0x68>
 801bafa:	2a00      	cmp	r2, #0
 801bafc:	da11      	bge.n	801bb22 <floorf+0x3a>
 801bafe:	eddf 7a18 	vldr	s15, [pc, #96]	; 801bb60 <floorf+0x78>
 801bb02:	ee30 0a27 	vadd.f32	s0, s0, s15
 801bb06:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801bb0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb0e:	dd05      	ble.n	801bb1c <floorf+0x34>
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	da23      	bge.n	801bb5c <floorf+0x74>
 801bb14:	4a13      	ldr	r2, [pc, #76]	; (801bb64 <floorf+0x7c>)
 801bb16:	2900      	cmp	r1, #0
 801bb18:	bf18      	it	ne
 801bb1a:	4613      	movne	r3, r2
 801bb1c:	ee00 3a10 	vmov	s0, r3
 801bb20:	4770      	bx	lr
 801bb22:	4911      	ldr	r1, [pc, #68]	; (801bb68 <floorf+0x80>)
 801bb24:	4111      	asrs	r1, r2
 801bb26:	420b      	tst	r3, r1
 801bb28:	d0fa      	beq.n	801bb20 <floorf+0x38>
 801bb2a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801bb60 <floorf+0x78>
 801bb2e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801bb32:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801bb36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb3a:	ddef      	ble.n	801bb1c <floorf+0x34>
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	bfbe      	ittt	lt
 801bb40:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801bb44:	fa40 f202 	asrlt.w	r2, r0, r2
 801bb48:	189b      	addlt	r3, r3, r2
 801bb4a:	ea23 0301 	bic.w	r3, r3, r1
 801bb4e:	e7e5      	b.n	801bb1c <floorf+0x34>
 801bb50:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801bb54:	d3e4      	bcc.n	801bb20 <floorf+0x38>
 801bb56:	ee30 0a00 	vadd.f32	s0, s0, s0
 801bb5a:	4770      	bx	lr
 801bb5c:	2300      	movs	r3, #0
 801bb5e:	e7dd      	b.n	801bb1c <floorf+0x34>
 801bb60:	7149f2ca 	.word	0x7149f2ca
 801bb64:	bf800000 	.word	0xbf800000
 801bb68:	007fffff 	.word	0x007fffff

0801bb6c <_init>:
 801bb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb6e:	bf00      	nop
 801bb70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bb72:	bc08      	pop	{r3}
 801bb74:	469e      	mov	lr, r3
 801bb76:	4770      	bx	lr

0801bb78 <_fini>:
 801bb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb7a:	bf00      	nop
 801bb7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bb7e:	bc08      	pop	{r3}
 801bb80:	469e      	mov	lr, r3
 801bb82:	4770      	bx	lr
